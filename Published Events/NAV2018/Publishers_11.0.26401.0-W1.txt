1312 published events found.
Number of times a publisher was raised: 
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnAfterAutoFormatTranslate>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnAfterCaptionClassTranslate>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnAfterCompanyClose>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnAfterCompanyOpen>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnAfterFindPrinter>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnAfterGetApplicationVersion>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnAfterGetDatabaseTableTriggerSetup>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnAfterGetDefaultRoleCenter>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnAfterGetGlobalTableTriggerMask>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnAfterGetSystemIndicator>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnAfterMakeCodeFilter>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnAfterMakeDateFilter>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnAfterMakeDateText>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnAfterMakeDateTimeFilter>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnAfterMakeText>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnAfterMakeTextFilter>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnAfterMakeTimeFilter>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnAfterMakeTimeText>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnAfterOnDatabaseDelete>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnAfterOnDatabaseInsert>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnAfterOnDatabaseModify>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnAfterOnDatabaseRename>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnAfterOnGlobalDelete>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnAfterOnGlobalInsert>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnAfterOnGlobalModify>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnAfterOnGlobalRename>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnBeforeCompanyClose>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnBeforeCompanyOpen>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnBeforeOnDatabaseDelete>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnBeforeOnDatabaseInsert>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnBeforeOnDatabaseModify>
1 : Codeunit<ApplicationManagement>.PROCEDURE<OnBeforeOnDatabaseRename>
2 : Codeunit<ApplicationManagement>.PROCEDURE<OnEditInExcel>
1 : Codeunit<Calc. G/L Acc. Where-Used>.PROCEDURE<OnAfterCheckPostingGroups>
1 : Codeunit<Job Post-Line>.PROCEDURE<OnBeforePostJobOnPurchaseLine>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeInsertSalesHeader>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeInsertSalesLine>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeModifySalesHeader>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeModifySalesLine>
1 : Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromGenJnlLineToJnlLine>
1 : Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromJnlLineToLedgEntry>
1 : Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromJnlToPlanningLine>
1 : Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromJobLedgEntryToPlanningLine>
1 : Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromPlanningLineToJnlLine>
1 : Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromPlanningSalesLineToJnlLine>
1 : Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromPurchaseLineToJnlLine>
1 : Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromSalesHeaderToPlanningLine>
1 : Codeunit<Job Transfer Line>.PROCEDURE<OnBeforeFromPlanningSalesLineToJnlLine>
1 : Codeunit<Job Jnl.-Check Line>.PROCEDURE<OnBeforeRunCheck>
1 : Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnAfterRunCode>
1 : Codeunit<Cust. Entry-Edit>.PROCEDURE<OnBeforeCustLedgEntryModify>
1 : Codeunit<Paypal Account Proxy>.PROCEDURE<GetPaypalAccount>
1 : Codeunit<Paypal Account Proxy>.PROCEDURE<SetPaypalAccount>
1 : Codeunit<QBO Sync Proxy>.PROCEDURE<GetQBOAuthURL>
1 : Codeunit<QBO Sync Proxy>.PROCEDURE<GetQBOSyncSettings>
1 : Codeunit<QBO Sync Proxy>.PROCEDURE<SetQBOSyncEnabled>
1 : Codeunit<QBD Sync Proxy>.PROCEDURE<GetQBDSyncSettings>
1 : Codeunit<QBD Sync Proxy>.PROCEDURE<SendEmailInBackground>
1 : Codeunit<QBD Sync Proxy>.PROCEDURE<SetQBDSyncEnabled>
1 : Codeunit<QBD Sync Proxy>.PROCEDURE<SetQBDSyncSendToEmail>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnAfterCheckGenJnlLine>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckAccountNo>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckBalAccountNo>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckDimensions>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckICPartner>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeDateNotAllowed>
1 : Codeunit<Vend. Entry-Edit>.PROCEDURE<OnBeforeVendLedgEntryModify>
1 : Codeunit<Empl. Entry-Edit>.PROCEDURE<OnBeforeEmplLedgEntryModify>
3 : Codeunit<OAuth 2.0 Mgt.>.PROCEDURE<OnBeforeCreateJsonRequest>
1 : Codeunit<Data Privacy Mgmt>.PROCEDURE<OnAfterGetPackageCode>
1 : Codeunit<Data Privacy Mgmt>.PROCEDURE<OnAfterSetPrivacyBlocked>
1 : Codeunit<Data Privacy Mgmt>.PROCEDURE<OnCreateData>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterGLFinishPosting>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitGLRegister>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInsertGlobalGLEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostGLAcc>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterRunWithCheck>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterRunWithoutCheck>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCheckPurchExtDocNo>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCode>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeContinuePosting>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertGLEntryBuffer>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePostGenJnlLine>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeStartPosting>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnNextTransactionNoNeeded>
1 : Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<OnBeforeCreateGenJnlDataExchLine>
1 : Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<OnBeforeInsertPmtExportDataJnlFromGenJnlLine>
1 : Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<OnBeforePaymentExport>
1 : Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<OnCheckGenJnlLine>
1 : Codeunit<Pmt Export Mgt Vend Ledg Entry>.PROCEDURE<OnBeforeCreateVendLedgerDataExchLine>
1 : Codeunit<Pmt Export Mgt Vend Ledg Entry>.PROCEDURE<OnBeforeInsertPmtExportDataJnlFromVendorLedgerEntry>
1 : Codeunit<Pmt Export Mgt Vend Ledg Entry>.PROCEDURE<OnBeforePaymentExportVendorLedgerEntry>
1 : Codeunit<Pmt Export Mgt Cust Ledg Entry>.PROCEDURE<OnBeforeCreateCustLedgerDataExchLine>
1 : Codeunit<Pmt Export Mgt Cust Ledg Entry>.PROCEDURE<OnBeforePaymentExportCustLedgerEntry>
1 : Codeunit<Payment Export Gen. Jnl Check>.PROCEDURE<OnPaymentExportGenJnlCheck>
1 : Codeunit<Pmt. Export Vend. Ledger Check>.PROCEDURE<OnCheckEmptyPmtInfoVendorLedgerEntry>
1 : Codeunit<Pmt. Export Vend. Ledger Check>.PROCEDURE<OnPmtExportVendorLedgerCheck>
1 : Codeunit<Pmt. Export Cust. Ledger Check>.PROCEDURE<OnPmtExportCustLedgerCheck>
1 : Codeunit<Read Data Exch. from File>.PROCEDURE<OnBeforeFileImport>
1 : Codeunit<Process Gen. Journal  Lines>.PROCEDURE<OnBeforeUpdateGenJnlLines>
1 : Codeunit<Match Bank Pmt. Appl.>.PROCEDURE<OnAfterMatchBankPayments>
1 : Codeunit<Exp. Pre-Mapping Gen. Jnl.>.PROCEDURE<OnBeforeInsertPaymentExoprtData>
1 : Codeunit<Get Bank Stmt. Line Candidates>.PROCEDURE<OnBeforeTransferCandidatestoAppliedPmtEntries>
1 : Codeunit<Http Web Request Mgt.>.PROCEDURE<OnBeforeInvokeTestJSONRequest>
1 : Codeunit<Http Web Request Mgt.>.PROCEDURE<OnOverrideUrl>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterMultiplyAmounts>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterPostAllocations>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterPostGenJnlLine>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeCheckBalance>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeIfCheckBalance>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforePostGenJnlLine>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeUpdateAndDeleteLines>
1 : Codeunit<Customer Mgt.>.PROCEDURE<SkipSettingFilter>
1 : Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnAfterInsertAllSalesInvLines>
1 : Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnAfterInsertSalesInvoiceLine>
1 : Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnAfterOnRun>
1 : Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnBeforeDeletionOfQuote>
1 : Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnBeforeInsertSalesInvoiceHeader>
1 : Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnBeforeInsertSalesInvoiceLine>
1 : Codeunit<Release Incoming Document>.PROCEDURE<OnAfterCreateDocFromIncomingDocFail>
1 : Codeunit<Release Incoming Document>.PROCEDURE<OnAfterCreateDocFromIncomingDocSuccess>
1 : Codeunit<Release Incoming Document>.PROCEDURE<OnAfterReleaseIncomingDoc>
1 : Codeunit<Send Incoming Document to OCR>.PROCEDURE<OnAfterIncomingDocReadyForOCR>
2 : Codeunit<Send Incoming Document to OCR>.PROCEDURE<OnAfterIncomingDocReceivedFromOCR>
1 : Codeunit<Send Incoming Document to OCR>.PROCEDURE<OnAfterIncomingDocSentToOCR>
1 : Codeunit<Telemetry Management>.PROCEDURE<OnBeforeTelemetryScheduleTask>
1 : Codeunit<Generate Master Data Telemetry>.PROCEDURE<OnMasterDataTelemetry>
1 : Codeunit<Generate Activity Telemetry>.PROCEDURE<OnActivityTelemetry>
1 : Codeunit<Batch Processing Mgt.>.PROCEDURE<OnAfterBatchProcessing>
1 : Codeunit<Batch Processing Mgt.>.PROCEDURE<OnBeforeBatchProcessing>
1 : Codeunit<Batch Processing Mgt.>.PROCEDURE<OnCustomProcessing>
1 : Codeunit<Batch Processing Mgt.>.PROCEDURE<OnVerifyRecord>
1 : Codeunit<Doc. Exch. Service Mgt.>.PROCEDURE<OnAfterIncomingDocReceivedFromDocExch>
1 : Codeunit<Read Data Exch. from Stream>.PROCEDURE<OnGetDataExchFileContentEvent>
1 : Codeunit<Doc. Exch. Serv.- Doc. Status>.PROCEDURE<OnDocExchStatusDrillDown>
1 : Codeunit<Workflow Setup>.PROCEDURE<OnAddWorkflowCategoriesToLibrary>
1 : Codeunit<Workflow Setup>.PROCEDURE<OnInsertWorkflowTemplates>
2 : Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<OnAfterDeleteNotificationContext>
2 : Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<OnAfterInsertNotificationContext>
2 : Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<OnAfterNotificationSent>
1 : Codeunit<Workflow Event Handling>.PROCEDURE<OnAddWorkflowEventPredecessorsToLibrary>
1 : Codeunit<Workflow Event Handling>.PROCEDURE<OnAddWorkflowEventsToLibrary>
1 : Codeunit<Workflow Event Handling>.PROCEDURE<OnAddWorkflowTableRelationsToLibrary>
1 : Codeunit<Workflow Response Handling>.PROCEDURE<OnAddWorkflowResponsePredecessorsToLibrary>
1 : Codeunit<Workflow Response Handling>.PROCEDURE<OnAddWorkflowResponsesToLibrary>
1 : Codeunit<Workflow Response Handling>.PROCEDURE<OnExecuteWorkflowResponse>
3 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnApproveApprovalRequest>
3 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelCustomerApprovalRequest>
2 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelGeneralJournalBatchApprovalRequest>
2 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelGeneralJournalLineApprovalRequest>
2 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelIncomingDocApprovalRequest>
3 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelItemApprovalRequest>
12 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelPurchaseApprovalRequest>
12 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelSalesApprovalRequest>
3 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelVendorApprovalRequest>
1 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnDelegateApprovalRequest>
2 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnDeleteRecordInApprovalRequest>
1 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnRejectApprovalRequest>
5 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnRenameRecordInApprovalRequest>
2 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendCustomerForApproval>
1 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendGeneralJournalBatchForApproval>
1 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendGeneralJournalLineForApproval>
3 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendIncomingDocForApproval>
2 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendItemForApproval>
12 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendPurchaseDocForApproval>
12 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendSalesDocForApproval>
2 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendVendorForApproval>
1 : Codeunit<Workflow Webhook Management>.PROCEDURE<OnCancelWorkflow>
1 : Codeunit<Workflow Webhook Management>.PROCEDURE<OnContinueWorkflow>
1 : Codeunit<Workflow Webhook Management>.PROCEDURE<OnFindTaskSchedulerAllowed>
1 : Codeunit<Workflow Webhook Management>.PROCEDURE<OnRejectWorkflow>
1 : Codeunit<Workflow Webhook Notification>.PROCEDURE<OnPostNotificationRequest>
1 : Codeunit<Workflow Webhook Notify Task>.PROCEDURE<OnFetchWorkflowWebhookNotificationInitParams>
1 : Codeunit<Office Management>.PROCEDURE<OnGetExternalHandlerCodeunit>
1 : Codeunit<Office Host Management>.PROCEDURE<OnCloseCurrentPage>
1 : Codeunit<Office Host Management>.PROCEDURE<OnEmailHasAttachments>
1 : Codeunit<Office Host Management>.PROCEDURE<OnGetEmailAndAttachments>
1 : Codeunit<Office Host Management>.PROCEDURE<OnGetEmailBody>
1 : Codeunit<Office Host Management>.PROCEDURE<OnGetFinancialsDocument>
1 : Codeunit<Office Host Management>.PROCEDURE<OnGetHostType>
1 : Codeunit<Office Host Management>.PROCEDURE<OnGetTempOfficeAddinContext>
1 : Codeunit<Office Host Management>.PROCEDURE<OnInitializeContext>
1 : Codeunit<Office Host Management>.PROCEDURE<OnInitializeExchangeObject>
1 : Codeunit<Office Host Management>.PROCEDURE<OnInitializeHost>
1 : Codeunit<Office Host Management>.PROCEDURE<OnInvokeExtension>
1 : Codeunit<Office Host Management>.PROCEDURE<OnIsAvailable>
1 : Codeunit<Office Host Management>.PROCEDURE<OnIsHostInitialized>
1 : Codeunit<Office Host Management>.PROCEDURE<OnSendToOCR>
1 : Codeunit<Office Document Handler>.PROCEDURE<OnCloseSuggestedLineItemsPage>
1 : Codeunit<Office Document Handler>.PROCEDURE<OnGenerateLinesFromText>
3 : Codeunit<Add-in Manifest Management>.PROCEDURE<CreateDefaultAddins>
1 : Codeunit<Add-in Manifest Management>.PROCEDURE<GetAddin>
1 : Codeunit<Add-in Manifest Management>.PROCEDURE<GetManifestCodeunit>
1 : Codeunit<Add-in Manifest Management>.PROCEDURE<OnGenerateManifest>
1 : Codeunit<Payroll Management>.PROCEDURE<OnImportPayroll>
3 : Codeunit<Payroll Management>.PROCEDURE<OnRegisterPayrollService>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnApplyCustLedgEntryByReversalOnBeforeInsertDtldCustLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnApplyEmplLedgEntryByReversalOnBeforeInsertDtldEmplLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnApplyVendLedgEntryByReversalOnBeforeInsertDtldVendLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnBeforeReverse>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseBankAccLedgEntryOnBeforeInsert>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseCustLedgEntryOnBeforeInsertCustLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseCustLedgEntryOnBeforeInsertDtldCustLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseEmplLedgEntryOnBeforeInsertDtldEmplLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseEmplLedgEntryOnBeforeInsertEmplLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseGLEntryOnBeforeInsertGLEntry>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseVATEntryOnBeforeInsert>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseVendLedgEntryOnBeforeInsertDtldVendLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseVendLedgEntryOnBeforeInsertVendLedgEntry>
3 : Codeunit<Data Classification Mgt.>.PROCEDURE<OnGetPrivacyMasterTables>
1 : Codeunit<Data Classification Mgt.>.PROCEDURE<OnOpenExcelSheet>
1 : Codeunit<Data Classification Mgt.>.PROCEDURE<OnUploadExcelSheet>
3 : Codeunit<Data Migration Mgt.>.PROCEDURE<OnAfterMigrationFinished>
1 : Codeunit<Data Migration Mgt.>.PROCEDURE<OnBeforeMigrationStarted>
1 : Codeunit<Data Migration Mgt.>.PROCEDURE<OnBeforeStartMigration>
1 : Codeunit<Assisted Company Setup>.PROCEDURE<OnBeforeScheduleTask>
1 : Codeunit<Encrypted Key/Value Management>.PROCEDURE<OnCleanUpEvent>
1 : Codeunit<Excel Data Migrator>.PROCEDURE<OnDownloadTemplate>
1 : Codeunit<Excel Data Migrator>.PROCEDURE<OnUploadFile>
1 : Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<OnAfterBindSubscription>
1 : Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<OnAfterUnbindSubscription>
1 : Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<OnRunPreview>
1 : Codeunit<Company-Initialize>.PROCEDURE<OnCompanyInitialize>
1 : Codeunit<Posting Preview Event Handler>.PROCEDURE<OnAfterFillDocumentEntry>
1 : Codeunit<Posting Preview Event Handler>.PROCEDURE<OnAfterShowEntries>
1 : Codeunit<Image Analysis Management>.PROCEDURE<OnAfterImageAnalysis>
1 : Codeunit<Image Analysis Management>.PROCEDURE<OnBeforeImageAnalysis>
1 : Codeunit<Item Jnl.-Check Line>.PROCEDURE<OnAfterCheckItemJnlLine>
1 : Codeunit<O365 Sales Background Setup>.PROCEDURE<OnAfterGraphSyncModified>
2 : Codeunit<Coupons Management>.PROCEDURE<OnAfterGetCouponClaims>
2 : Codeunit<Coupons Management>.PROCEDURE<OnAfterRedeemCouponClaim>
1 : Codeunit<Res. Jnl.-Post Line>.PROCEDURE<OnBeforeResLedgEntryInsert>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInitItemLedgEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInitValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertCapLedgEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertCapValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertCorrItemLedgEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertCorrValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertItemLedgEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterPostItemJnlLine>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertCapLedgEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertCapValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertCorrItemLedgEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertCorrValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertItemLedgEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertPhysInvtLedgEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertTransferEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforePostItemJnlLine>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnCheckPostingCostToGL>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnPostOutputOnBeforeProdOrderRtngLineModify>
1 : Codeunit<Resource-Find Cost>.PROCEDURE<OnAfterFindResUnitCost>
1 : Codeunit<Resource-Find Price>.PROCEDURE<OnAfterFindResPrice>
1 : Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnAfterRun>
1 : Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnBeforeRun>
1 : Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<OnAfterPostApplyCustLedgEntry>
1 : Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<OnAfterPostUnapplyCustLedgEntry>
1 : Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<OnBeforePostApplyCustLedgEntry>
1 : Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<OnBeforePostUnapplyCustLedgEntry>
1 : Codeunit<VendEntry-Apply Posted Entries>.PROCEDURE<OnBeforePostApplyVendLedgEntry>
1 : Codeunit<VendEntry-Apply Posted Entries>.PROCEDURE<OnBeforePostUnapplyVendLedgEntry>
1 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnAfterCheckJnlLine>
2 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnAfterPostWhseJnlLine>
1 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnPostLinesBeforePostWhseJnlLine>
1 : Codeunit<Document-Mailing>.PROCEDURE<OnBeforeSendEmail>
8 : Codeunit<Cust-Check Cr. Limit>.PROCEDURE<OnNewCheckRemoveCustomerNotifications>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterCarryOutReqLineAction>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterCheckReqWkshLine>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterInsertPurchOrderHeader>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterReserveBindingOrderToPurch>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterSet>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnBeforePurchOrderLineInsert>
1 : Codeunit<VAT Entry - Edit>.PROCEDURE<OnBeforeVATEntryModify>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnAfterCalcItemPlanningFields>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnAfterCalculateNeed>
1 : Codeunit<Format Address>.PROCEDURE<OnBeforeContactAddrAlt>
1 : Codeunit<Format Address>.PROCEDURE<OnBeforeFormatAddress>
1 : Codeunit<Exchange Acc. G/L Journal Line>.PROCEDURE<OnAfterOnRun>
1 : Codeunit<Exchange Acc. G/L Journal Line>.PROCEDURE<OnBeforeOnRun>
1 : Codeunit<CheckManagement>.PROCEDURE<OnAfterFinancialVoidCheck>
1 : Codeunit<CheckManagement>.PROCEDURE<OnAfterVoidCheck>
1 : Codeunit<CheckManagement>.PROCEDURE<OnBeforeFinancialVoidCheck>
1 : Codeunit<CheckManagement>.PROCEDURE<OnBeforeVoidCheck>
1 : Codeunit<Shipment Header - Edit>.PROCEDURE<OnBeforeSalesShptHeaderModify>
1 : Codeunit<Reminder-Make>.PROCEDURE<OnAfterMakeReminder>
1 : Codeunit<Reminder-Issue>.PROCEDURE<OnAfterIssueReminder>
1 : Codeunit<Reminder-Issue>.PROCEDURE<OnBeforeIssueReminder>
1 : Codeunit<FinChrgMemo-Issue>.PROCEDURE<OnAfterIssueFinChargeMemo>
1 : Codeunit<FinChrgMemo-Issue>.PROCEDURE<OnBeforeIssueFinChargeMemo>
1 : Codeunit<Mail>.PROCEDURE<OnGetEmailAddressFromActiveDirectory>
1 : Codeunit<ClientTypeManagement>.PROCEDURE<OnAfterGetCurrentClientType>
1 : Codeunit<LogInManagement>.PROCEDURE<OnAfterLogInStart>
1 : Codeunit<SMTP Mail>.PROCEDURE<OnBeforeTrySend>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnAfterSetupObjectNoList>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnBeforeGetDefaultDimID>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnGetRecDefaultDimID>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnTypeToTableID2>
1 : Codeunit<TextManagement>.PROCEDURE<OnBeforeMakeTextFilter>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnAfterReleaseATOs>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnAfterReleaseSalesDoc>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnAfterReopenSalesDoc>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnBeforeReleaseSalesDoc>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnBeforeReopenSalesDoc>
1 : Codeunit<Release Purchase Document>.PROCEDURE<OnAfterReleasePurchaseDoc>
1 : Codeunit<Release Purchase Document>.PROCEDURE<OnAfterReopenPurchaseDoc>
1 : Codeunit<Release Purchase Document>.PROCEDURE<OnBeforeReleasePurchaseDoc>
1 : Codeunit<Release Purchase Document>.PROCEDURE<OnBeforeReopenPurchaseDoc>
1 : Codeunit<Release Service Document>.PROCEDURE<OnAfterReleaseServiceDoc>
1 : Codeunit<Release Service Document>.PROCEDURE<OnAfterReopenServiceDoc>
1 : Codeunit<Release Service Document>.PROCEDURE<OnBeforeReleaseServiceDoc>
1 : Codeunit<Release Service Document>.PROCEDURE<OnBeforeReopenServiceDoc>
1 : Codeunit<User Management>.PROCEDURE<OnAfterRenameRecord>
1 : Codeunit<CaptionManagement>.PROCEDURE<OnExtensionCaptionArea>
1 : Codeunit<Payment Tolerance Management>.PROCEDURE<OnBeforeCalcRemainingPmtDisc>
1 : Codeunit<Payment Tolerance Management>.PROCEDURE<OnBeforeCheckCalcPmtDisc>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnInsertICOutboxJnlLine>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnInsertICOutboxPurchDocTransaction>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnInsertICOutboxSalesCrMemoTransaction>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnInsertICOutboxSalesDocTransaction>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnInsertICOutboxSalesInvTransaction>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnInsertICOutboxTransaction>
1 : Codeunit<Consolidate>.PROCEDURE<OnBeforeGenJnlPostLine>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterCheckPrepmtDoc>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterPostBalancingEntry>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterPostCustomerEntry>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterPostPrepayments>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterPostPrepmtInvLineBuffer>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforePostBalancingEntry>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforePostCustomerEntry>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforePostPrepayments>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforePostPrepmtInvLineBuffer>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeSalesCrMemoHeaderInsert>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeSalesCrMemoLineInsert>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeSalesInvHeaderInsert>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeSalesInvLineInsert>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterCheckPrepmtDoc>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPostBalancingEntry>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPostPrepayments>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPostPrepmtInvLineBuffer>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPostVendorEntry>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePostBalancingEntry>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePostPrepayments>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePostPrepmtInvLineBuffer>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePostVendorEntry>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePurchCrMemoHeaderInsert>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePurchCrMemoLineInsert>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePurchInvHeaderInsert>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePurchInvLineInsert>
1 : Codeunit<Job Queue Dispatcher>.PROCEDURE<OnAfterHandleRequest>
1 : Codeunit<Job Queue Start Codeunit>.PROCEDURE<OnAfterRun>
1 : Codeunit<Job Queue - Enqueue>.PROCEDURE<OnBeforeJobQueueScheduleTask>
1 : Codeunit<Change Global Dimensions>.PROCEDURE<OnAfterGetObjectNoList>
1 : Codeunit<Change Global Dimensions>.PROCEDURE<OnBeforeScheduleTask>
1 : Codeunit<Change Global Dimensions>.PROCEDURE<OnCountingActiveSessions>
1 : Codeunit<WordManagement>.PROCEDURE<OnAddFieldsToMergeSource>
1 : Codeunit<WordManagement>.PROCEDURE<OnBeforeCheckCanRunWord>
1 : Codeunit<WordManagement>.PROCEDURE<OnCreateHeaderAddFields>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnAfterRestoreSalesLine>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnAfterStorePurchLineArchive>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnAfterStoreSalesLineArchive>
1 : Codeunit<Integration Management>.PROCEDURE<OnGetIntegrationActivated>
1 : Codeunit<Integration Management>.PROCEDURE<OnGetIntegrationDisabled>
1 : Codeunit<Integration Management>.PROCEDURE<OnGetPredefinedIdValue>
1 : Codeunit<Integration Management>.PROCEDURE<OnIsIntegrationRecord>
1 : Codeunit<Integration Management>.PROCEDURE<OnIsIntegrationRecordChild>
2 : Codeunit<Integration Management>.PROCEDURE<OnUpdateReferencedIdField>
1 : Codeunit<Integration Record Synch.>.PROCEDURE<OnTransferFieldData>
2 : Codeunit<CRM Integration Table Synch.>.PROCEDURE<OnQueryPostFilterIgnoreRecord>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnAfterApplyRecordTemplate>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnAfterInsertRecord>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnAfterModifyRecord>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnAfterTransferRecordFields>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnAfterUnchangedRecordHandled>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnBeforeApplyRecordTemplate>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnBeforeInsertRecord>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnBeforeModifyRecord>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnBeforeTransferRecordFields>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnErrorWhenInsertingRecord>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnErrorWhenModifyingRecord>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnFindUncoupledDestinationRecord>
1 : Codeunit<Integration Rec. Delete Invoke>.PROCEDURE<OnAfterDeleteRecord>
1 : Codeunit<Integration Rec. Delete Invoke>.PROCEDURE<OnBeforeDeleteRecord>
1 : Codeunit<Output Jnl.-Expl. Route>.PROCEDURE<OnAfterInsertItemJnlLine>
1 : Codeunit<Output Jnl.-Expl. Route>.PROCEDURE<OnBeforeDeleteItemJnlLine>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnAfterChangeStatusOnProdOrder>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnAfterTransProdOrder>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnAfterTransProdOrderComp>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnAfterTransProdOrderLines>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnBeforeChangeStatusOnProdOrder>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnCopyFromProdOrder>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnCopyFromProdOrderCapacityNeed>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnCopyFromProdOrderComp>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnCopyFromProdOrderLine>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnCopyFromProdOrderRoutingLine>
1 : Codeunit<Graph Webhook Sync To NAV>.PROCEDURE<OnFindWebhookSubscription>
1 : Codeunit<Graph Subscription Management>.PROCEDURE<OnBeforeAddOrUpdateGraphSubscriptions>
4 : Codeunit<Graph Subscription Management>.PROCEDURE<OnBeforeRunGraphSyncBackgroundSession>
1 : Codeunit<Graph Subscription Management>.PROCEDURE<OnGetSourceRecordRef>
3 : Codeunit<Graph Subscription Management>.PROCEDURE<OnScheduleSubscriptionRefreshTask>
6 : Codeunit<Graph Integration Table Sync>.PROCEDURE<OnBeforeSynchronizationStart>
1 : Codeunit<Graph Sync. Runner>.PROCEDURE<OnCheckAuxiliarySyncEnabled>
1 : Codeunit<Graph Sync. Runner>.PROCEDURE<OnRunGraphDeltaSync>
1 : Codeunit<Graph Sync. Runner>.PROCEDURE<OnRunGraphFullSync>
1 : Codeunit<Graph Sync. Runner>.PROCEDURE<OnSyncSynchronouslyCannotStartSession>
1 : Codeunit<Graph Sync. Runner>.PROCEDURE<OnSyncSynchronouslyTimeout>
1 : Codeunit<Graph Data Setup>.PROCEDURE<OnAddIntegrationMapping>
1 : Codeunit<Graph Data Setup>.PROCEDURE<OnCreateIntegrationMappings>
1 : Codeunit<Graph Data Setup>.PROCEDURE<OnGetGraphRecord>
2 : Codeunit<Graph Data Setup>.PROCEDURE<OnGetInboundTableID>
1 : Codeunit<Graph Data Setup>.PROCEDURE<OnGetMappingCodeForTable>
1 : Codeunit<Graph Connection Setup>.PROCEDURE<OnCheckForceSync>
1 : Codeunit<Graph Connection Setup>.PROCEDURE<OnGetInboundConnectionName>
1 : Codeunit<Graph Connection Setup>.PROCEDURE<OnGetInboundConnectionString>
1 : Codeunit<Graph Connection Setup>.PROCEDURE<OnGetSubscriptionConnectionName>
1 : Codeunit<Graph Connection Setup>.PROCEDURE<OnGetSubscriptionConnectionString>
1 : Codeunit<Graph Connection Setup>.PROCEDURE<OnGetSynchronizeConnectionName>
1 : Codeunit<Graph Connection Setup>.PROCEDURE<OnGetSynchronizeConnectionString>
1 : Codeunit<Graph Connection Setup>.PROCEDURE<OnRegisterConnections>
3 : Codeunit<Graph Mgt - General Tools>.PROCEDURE<ApiSetup>
1 : Codeunit<Graph Mgt - General Tools>.PROCEDURE<OnForceIsApiEnabledVerification>
1 : Codeunit<Graph Mgt - General Tools>.PROCEDURE<OnGetIsAPIEnabled>
2 : Codeunit<Production Journal Mgt>.PROCEDURE<OnAfterInsertItemJnlLine>
1 : Codeunit<Calc. Item Availability>.PROCEDURE<OnAfterGetDocumentEntries>
1 : Codeunit<Calc. Item Avail. Timeline>.PROCEDURE<OnAfterUpdateTimelineEventDetails>
1 : Codeunit<Calc. Item Avail. Timeline>.PROCEDURE<OnCreateTimelineEventsBeforePlanning>
1 : Codeunit<Sales - Calc Discount By Type>.PROCEDURE<OnAfterResetRecalculateInvoiceDisc>
1 : Codeunit<FA Insert G/L Account>.PROCEDURE<OnGetBalAccAfterRestoreGenJnlLineFields>
1 : Codeunit<FA Insert G/L Account>.PROCEDURE<OnGetBalAccAfterSaveGenJnlLineFields>
1 : Codeunit<Make FA Ledger Entry>.PROCEDURE<OnAfterCopyFromFACard>
1 : Codeunit<Make FA Ledger Entry>.PROCEDURE<OnAfterCopyFromFAJnlLine>
1 : Codeunit<Make FA Ledger Entry>.PROCEDURE<OnAfterCopyFromGenJnlLine>
1 : Codeunit<Make Maintenance Ledger Entry>.PROCEDURE<OnAfterCopyFromFACard>
1 : Codeunit<Make Maintenance Ledger Entry>.PROCEDURE<OnAfterCopyFromFAJnlLine>
1 : Codeunit<Make Maintenance Ledger Entry>.PROCEDURE<OnAfterCopyFromGenJnlLine>
1 : Codeunit<Document Totals>.PROCEDURE<OnAfterPurchaseLineSetFilters>
1 : Codeunit<Document Totals>.PROCEDURE<OnAfterSalesLineSetFilters>
1 : Codeunit<Dist. Integration>.PROCEDURE<OnAfterInsertPurchLine>
2 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterInsertShptEntryRelation>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterInsertTransShptLine>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterTransferOrderPostShipment>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforeInsertTransShptLine>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforePostItemJournalLine>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforeTransferOrderPostShipment>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterInsertTransRcptLine>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterTransferOderPostReceipt>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterTransferOrderPostReceipt>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterTransLineUpdateQtyReceived>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterTransRcptLineModify>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforeInsertTransRcptLine>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforePostItemJournalLine>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforeTransferOderPostReceipt>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforeTransferOrderPostReceipt>
1 : Codeunit<Release Transfer Document>.PROCEDURE<OnAfterReleaseTransferDoc>
1 : Codeunit<Release Transfer Document>.PROCEDURE<OnBeforeReleaseTransferDoc>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateRcptLineFromPurchLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateRcptLineFromSalesLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateRcptLineFromTransLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateShptLineFromPurchLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateShptLineFromSalesLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateShptLineFromServiceLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateShptLineFromTransLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterWhseReceiptLineInsert>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterWhseShptLineInsert>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterCheckWhseRcptLine>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterPostUpdateWhseRcptLine>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterPostWhseJnlLine>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterRun>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforePostUpdateWhseRcptLine>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforeRun>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterCheckWhseShptLine>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterPostUpdateWhseShptLine>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterPostWhseJnlLine>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterRun>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforePostUpdateWhseShptLine>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforeRun>
1 : Codeunit<Whse.-Post Shipment (Yes/No)>.PROCEDURE<OnBeforeConfirmWhseShipmentPost>
1 : Codeunit<Whse.-Service Release>.PROCEDURE<OnBeforeCreateWhseRequest>
1 : Codeunit<Whse.-Sales Release>.PROCEDURE<OnBeforeCreateWhseRequest>
1 : Codeunit<Whse.-Purch. Release>.PROCEDURE<OnBeforeCreateWhseRequest>
2 : Codeunit<Whse.-Transfer Release>.PROCEDURE<OnBeforeCreateWhseRequest>
1 : Codeunit<Whse.-Production Release>.PROCEDURE<OnBeforeCreateWhsePickRequest>
1 : Codeunit<Whse.-Production Release>.PROCEDURE<OnBeforeCreateWhseRequest>
1 : Codeunit<Available to Promise>.PROCEDURE<OnAfterCalculateAvailability>
1 : Codeunit<Available to Promise>.PROCEDURE<OnBeforeCalcAvailableInventory>
1 : Codeunit<Available to Promise>.PROCEDURE<OnBeforeExitCalcGrossRequirement>
1 : Codeunit<Available to Promise>.PROCEDURE<OnBeforeExitCalcScheduledReceipt>
1 : Codeunit<Available to Promise>.PROCEDURE<OnCalcAvailableInventory>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnAfterCalcCostToPostFromBuffer>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnAfterSetAccNo>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforePostInvtPostBuf>
1 : Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnAfterCreateDocChargeAssgnt>
1 : Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnAfterPurchRcptLineModify>
1 : Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnAfterUpdateOrderLine>
1 : Codeunit<Undo Return Shipment Line>.PROCEDURE<OnAfterReturnShptLineModify>
1 : Codeunit<Undo Return Shipment Line>.PROCEDURE<OnAfterUpdatePurchLine>
1 : Codeunit<Undo Return Shipment Line>.PROCEDURE<OnBeforeCheckReturnShptLine>
1 : Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnAfterSalesShptLineModify>
1 : Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnAfterUpdateSalesLine>
1 : Codeunit<Undo Return Receipt Line>.PROCEDURE<OnAfterReturnRcptLineModify>
1 : Codeunit<Undo Return Receipt Line>.PROCEDURE<OnAfterUpdateSalesLine>
1 : Codeunit<Undo Posting Management>.PROCEDURE<OnAfterUpdatePurchline>
1 : Codeunit<Undo Posting Management>.PROCEDURE<OnAfterUpdateSalesLine>
1 : Codeunit<Undo Posting Management>.PROCEDURE<OnAfterUpdateServLine>
1 : Codeunit<ServLogManagement>.PROCEDURE<OnBeforeServItemEventDescription>
1 : Codeunit<ServLogManagement>.PROCEDURE<OnServItemEventDescription>
1 : Codeunit<ServLogManagement>.PROCEDURE<OnServOrderEventDescription>
1 : Codeunit<ServItemManagement>.PROCEDURE<OnBeforeReplaceSIComponent>
1 : Codeunit<ServItemManagement>.PROCEDURE<OnCreateServItemOnSalesLineShpt>
1 : Codeunit<ServItemManagement>.PROCEDURE<OnCreateServItemOnServItemLine>
1 : Codeunit<Service-Quote to Order>.PROCEDURE<OnAfterInsertServHeader>
1 : Codeunit<Service-Quote to Order>.PROCEDURE<OnAfterInsertServiceLine>
1 : Codeunit<Service-Quote to Order>.PROCEDURE<OnBeforeRun>
1 : Codeunit<Lock-OpenServContract>.PROCEDURE<OnBeforeLockServContract>
1 : Codeunit<SignServContractDoc>.PROCEDURE<OnBeforeSignContract>
1 : Codeunit<SignServContractDoc>.PROCEDURE<OnBeforeSignContractQuote>
1 : Codeunit<Service-Post>.PROCEDURE<OnBeforePostWithLines>
1 : Codeunit<Service-Post (Yes/No)>.PROCEDURE<OnBeforeConfirmServPost>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeModifyServiceDocNoSeries>
1 : Codeunit<Sales-Calc. Discount>.PROCEDURE<OnAfterCalcSalesDiscount>
1 : Codeunit<Sales-Calc. Discount>.PROCEDURE<OnBeforeCalcSalesDiscount>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnApplySelectedData>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnDataImport>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnEnableTogglingDataMigrationOverviewPage>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnFillStagingTables>
2 : Codeunit<Data Migration Facade>.PROCEDURE<OnFindBatchForAccountTransactions>
2 : Codeunit<Data Migration Facade>.PROCEDURE<OnFindBatchForCustomerTransactions>
2 : Codeunit<Data Migration Facade>.PROCEDURE<OnFindBatchForItemTransactions>
2 : Codeunit<Data Migration Facade>.PROCEDURE<OnFindBatchForVendorTransactions>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnGetInstructions>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnGetMigrationHelpTopicUrl>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnMigrationCompleted>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnRegisterDataMigrator>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnSelectDataToApply>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnSelectRowFromDashboard>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnShowThatsItMessage>
1 : Codeunit<GL Acc. Data Migration Facade>.PROCEDURE<OnMigrateGlAccount>
1 : Codeunit<Vendor Data Migration Facade>.PROCEDURE<OnMigrateVendor>
1 : Codeunit<Vendor Data Migration Facade>.PROCEDURE<OnMigrateVendorDimensions>
1 : Codeunit<Vendor Data Migration Facade>.PROCEDURE<OnMigrateVendorPostingGroups>
1 : Codeunit<Vendor Data Migration Facade>.PROCEDURE<OnMigrateVendorTransactions>
1 : Codeunit<Customer Data Migration Facade>.PROCEDURE<OnMigrateCustomer>
1 : Codeunit<Customer Data Migration Facade>.PROCEDURE<OnMigrateCustomerDimensions>
1 : Codeunit<Customer Data Migration Facade>.PROCEDURE<OnMigrateCustomerPostingGroups>
1 : Codeunit<Customer Data Migration Facade>.PROCEDURE<OnMigrateCustomerTransactions>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateCostingMethod>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateInventoryTransactions>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItem>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemDimensions>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemDiscountGroup>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemPostingGroups>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemPrice>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemSalesLineDiscount>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemTariffNo>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemTrackingCode>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemUnitOfMeasure>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireAcquireOnBehalfOfToken>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireGuestToken>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireTokenByAuthorizationCode>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireTokenByAuthorizationCodeWithCredentials>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireTokenFromCache>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireTokenFromCacheWithCredentials>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnCheckProvider>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnCreateExchangeServiceWrapperWithToken>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnGetSaasClientId>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnInitialize>
1 : Codeunit<Sales-Get Shipment>.PROCEDURE<OnRunAfterFilterSalesShpLine>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnAfterReserveEntryFilter>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnCopyItemLedgEntryTrkgToDocLine>
1 : Codeunit<Item Tracking Data Collection>.PROCEDURE<OnAfterAssistEditTrackingNo>
1 : Codeunit<Item Tracking Data Collection>.PROCEDURE<OnBeforeAssistEditTrackingNo>
1 : Codeunit<Purch - Calc Disc. By Type>.PROCEDURE<OnAfterResetRecalculateInvoiceDisc>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchaseDocument>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesDocument>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesToPurchDoc>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInitToPurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInitToSalesLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInsertToPurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInsertToSalesLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterTransfldsFromSalesToPurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterUpdatePurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterUpdateSalesLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchaseDocument>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchLines>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesDocument>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesToPurchDoc>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertOldPurchCombDocNoLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertOldPurchDocNoLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertOldSalesCombDocNoLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertOldSalesDocNoLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertToPurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertToSalesLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeModifyPurchHeader>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeModifySalesHeader>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeUpdatePurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeUpdateSalesLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocWithHeader>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnUpdatePurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnUpdateSalesLine>
1 : Codeunit<Booking Manager>.PROCEDURE<OnGetBookingMailboxes>
1 : Codeunit<Booking Manager>.PROCEDURE<OnGetBookingServiceForBooking>
1 : Codeunit<Booking Manager>.PROCEDURE<OnRegisterAppointmentConnection>
1 : Codeunit<Booking Manager>.PROCEDURE<OnSetBookingItemInvoiced>
1 : Codeunit<Booking Manager>.PROCEDURE<OnSynchronize>
1 : Codeunit<Purch.-Calc.Discount>.PROCEDURE<OnAfterCalcPurchaseDiscount>
1 : Codeunit<Purch.-Calc.Discount>.PROCEDURE<OnBeforeCalcPurchaseDiscount>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindItemJnlLinePrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindSalesLineLineDisc>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindSalesLinePrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindServLineDisc>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindServLinePrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindStdItemJnlLinePrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnGetCustNoForSalesHeader>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterFindPurchLinePrice>
1 : Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnAfterCollectTrackingInformation>
1 : Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnAfterItemJnlPostLine>
1 : Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnBeforeInsertTempHandlingSpecs>
1 : Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnCheckWhseJnlLine>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterAutofillQtyToHandle>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterCheckWhseActivLine>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterCreateRegActivLine>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterInsRegWhseItemTrkgLine>
2 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterRegWhseItemTrkgLine>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterWhseShptLineModify>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeWhseActivLineDelete>
1 : Codeunit<Whse.-Shipment Release>.PROCEDURE<OnBeforeRelease>
4 : Codeunit<Create Pick>.PROCEDURE<OnAfterWhseActivLineInsert>
2 : Codeunit<Create Put-away>.PROCEDURE<OnAfterWhseActivLineInsert>
1 : Codeunit<Whse. Undo Quantity>.PROCEDURE<OnBeforePostTempWhseJnlLine>
1 : Codeunit<Whse.-Act.-Post (Yes/No)>.PROCEDURE<OnBeforeConfirmPost>
2 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterPurchLineModify>
2 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterSalesLineModify>
1 : Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnAfterPurchaseLineInsert>
1 : Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnGetDescriptionFromItem>
1 : Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnGetDescriptionFromItemTranslation>
1 : Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnGetDescriptionFromItemVariant>
1 : Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnGetDescriptionFromSalesLine>
4 : Codeunit<MS-QBO Table Mgt.>.PROCEDURE<ConnectionErrorOccured>
1 : Codeunit<MS-QBO Table Mgt.>.PROCEDURE<GetConsumerKeyAndSecretText>
2 : Codeunit<MS-QBO Table Mgt.>.PROCEDURE<OnBadQuickBooksResponse>
1 : Codeunit<MS-QBO Table Mgt.>.PROCEDURE<ValidationFaultOccured>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeCalcCellExit>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeTestBalance>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterCheckMandatoryFields>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterCheckSalesDoc>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterFillInvoicePostBuffer>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterFinalizePosting>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostBalancingEntry>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostGLAndCustomer>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostInvPostBuffer>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostItemJnlLineWhseLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostSalesDoc>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostUpdateOrderLineModifyTempLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterReturnRcptLineInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesCrMemoHeaderInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesCrMemoLineInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesInvHeaderInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesInvLineInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesShptLineInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterTestSalesLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterUpdatePostingNos>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeInsertICGenJnlLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeInvoiceRoundingAmount>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeItemJnlPostLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostAssocItemJnlLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostBalancingEntry>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostCommitSalesDoc>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostCustomerEntry>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostGLAndCustomer>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostInvPostBuffer>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostSalesDoc>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeReturnRcptHeaderInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeReturnRcptLineInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesCrMemoHeaderInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesCrMemoLineInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesInvHeaderInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesInvLineInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesShptHeaderInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesShptLineInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeTestSalesLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnSendSalesDocument>
1 : Codeunit<Sales-Post (Yes/No)>.PROCEDURE<OnAfterPost>
1 : Codeunit<Sales-Post (Yes/No)>.PROCEDURE<OnBeforeConfirmSalesPost>
1 : Codeunit<Sales-Post + Print>.PROCEDURE<OnAfterPost>
1 : Codeunit<Sales-Post + Print>.PROCEDURE<OnBeforeConfirmPost>
1 : Codeunit<Sales-Quote to Order>.PROCEDURE<OnAfterInsertAllSalesOrderLines>
1 : Codeunit<Sales-Quote to Order>.PROCEDURE<OnAfterInsertSalesOrderLine>
1 : Codeunit<Sales-Quote to Order>.PROCEDURE<OnAfterOnRun>
1 : Codeunit<Sales-Quote to Order>.PROCEDURE<OnBeforeDeleteSalesQuote>
1 : Codeunit<Sales-Quote to Order>.PROCEDURE<OnBeforeInsertSalesOrderHeader>
1 : Codeunit<Sales-Quote to Order>.PROCEDURE<OnBeforeInsertSalesOrderLine>
1 : Codeunit<Config. Package Management>.PROCEDURE<OnPostProcessPackage>
1 : Codeunit<Config. Package Management>.PROCEDURE<OnPreProcessPackage>
1 : Codeunit<Config. Template Management>.PROCEDURE<OnApplyTemplLinesWithoutValidationAfterRecRefCheck>
1 : Codeunit<Config. Excel Exchange>.PROCEDURE<OnBeforeExportExcel>
1 : Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnAfterInsertAllSalesOrderLines>
1 : Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnAfterInsertSalesOrderLine>
1 : Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnBeforeInsertSalesOrderHeader>
1 : Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnBeforeInsertSalesOrderLine>
1 : Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnBeforeSalesOrderHeaderModify>
1 : Codeunit<Custom Layout Reporting>.PROCEDURE<OnBeforeVerifyXmlContainsDataset>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterCheckMandatoryFields>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterCheckPurchDoc>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterFillInvoicePostBuffer>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterFinalizePosting>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostAccICLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostBalancingEntry>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostInvPostBuffer>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostItemJnlLineCopyProdOrder>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostItemLine>
2 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostPurchaseDoc>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostUpdateOrderLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostVendorEntry>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostWhseJnlLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchCrMemoHeaderInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchCrMemoLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchInvHeaderInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchInvLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchRcptHeaderInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchRcptLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterReturnShptHeaderInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterReturnShptLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterUpdatePostingNos>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterUpdatePurchLineBeforePost>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeCheckExternalDocumentNumber>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeInvoiceRoundingAmount>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeItemJnlPostLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostAssocItemJnlLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostBalancingEntry>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostCommitPurchaseDoc>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostGLAndVendor>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostInvPostBuffer>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostPurchaseDoc>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostVendorEntry>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchCrMemoHeaderInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchCrMemoLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchInvHeaderInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchInvLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchRcptHeaderInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchRcptLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeReturnShptHeaderInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeReturnShptLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeTestPurchLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeUpdatePurchLineBeforePost>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterFinalizePost>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterInitPost>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterOnRun>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterPost>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterPostedAssemblyHeaderModify>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterPostedAssemblyLineInsert>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnBeforeFinalizePost>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnBeforeInitPost>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnBeforeOnRun>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnBeforePost>
1 : Codeunit<Azure AD User Management>.PROCEDURE<OnInitialize>
1 : Codeunit<Release Assembly Document>.PROCEDURE<OnAfterReleaseAssemblyDoc>
1 : Codeunit<Release Assembly Document>.PROCEDURE<OnAfterReopenAssemblyDoc>
1 : Codeunit<Release Assembly Document>.PROCEDURE<OnBeforeReleaseAssemblyDoc>
1 : Codeunit<Release Assembly Document>.PROCEDURE<OnBeforeReopenAssemblyDoc>
2 : Codeunit<Invite External Accountant>.PROCEDURE<OnInvitationCreateNewUser>
1 : Codeunit<Assembly Line Management>.PROCEDURE<OnAfterTransferBOMComponent>
1 : Codeunit<Postcode Service Manager>.PROCEDURE<OnCheckIsServiceConfigured>
1 : Codeunit<Postcode Service Manager>.PROCEDURE<OnDiscoverPostcodeServices>
1 : Codeunit<Postcode Service Manager>.PROCEDURE<OnRetrieveAddress>
1 : Codeunit<Postcode Service Manager>.PROCEDURE<OnRetrieveAddressList>
1 : Codeunit<Postcode Service Manager>.PROCEDURE<OnShowConfigurationPage>
1 : Codeunit<Purch.-Post (Yes/No)>.PROCEDURE<OnAfterPost>
1 : Codeunit<Purch.-Post (Yes/No)>.PROCEDURE<OnBeforeConfirmPost>
1 : Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnDefaultRoleCenterID>
1 : Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnInitializeProfiles>
1 : Codeunit<Purch.-Post + Print>.PROCEDURE<OnAfterPost>
1 : Codeunit<Purch.-Post + Print>.PROCEDURE<OnBeforeConfirmPost>
1 : Codeunit<Mail Management>.PROCEDURE<OnAfterDeleteTempAttachments>
1 : Codeunit<Mail Management>.PROCEDURE<OnBeforeDoSending>
1 : Codeunit<Mail Management>.PROCEDURE<OnBeforeSentViaSMTP>
1 : Codeunit<Purch.-Quote to Order>.PROCEDURE<OnAfterInsertAllPurchOrderLines>
1 : Codeunit<Purch.-Quote to Order>.PROCEDURE<OnAfterInsertPurchOrderLine>
1 : Codeunit<Purch.-Quote to Order>.PROCEDURE<OnBeforeDeletePurchQuote>
1 : Codeunit<Purch.-Quote to Order>.PROCEDURE<OnBeforeInsertPurchOrderHeader>
1 : Codeunit<Purch.-Quote to Order>.PROCEDURE<OnBeforeInsertPurchOrderLine>
1 : Codeunit<Document Report Mgt.>.PROCEDURE<OnAfterMergeWordDocument>
1 : Codeunit<Document Report Mgt.>.PROCEDURE<OnBeforeMergeDocument>
1 : Codeunit<Document Report Mgt.>.PROCEDURE<OnBeforeMergeWordDocument>
1 : Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnAfterInsertAllPurchOrderLines>
1 : Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnAfterPurchOrderLineInsert>
1 : Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnBeforeInsertPurchOrderHeader>
1 : Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnBeforeInsertPurchOrderLine>
1 : Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnBeforePurchOrderHeaderModify>
1 : Codeunit<Payment Registration Mgt.>.PROCEDURE<OnAfterPostPaymentRegistration>
4 : Codeunit<Identity Management>.PROCEDURE<OnBeforeGetApplicationIdentifier>
1 : Codeunit<Routing Line-Copy Lines>.PROCEDURE<OnAfterCopyRouting>
1 : Codeunit<Routing Line-Copy Lines>.PROCEDURE<OnAfterDeleteRouting>
1 : Codeunit<Calendar Absence Management>.PROCEDURE<OnAfterUpdateAbsence>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterTransferBOMComponent>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterTransferRouting>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterTransferRoutingLine>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterTransferTaskInfo>
1 : Codeunit<Calculate Routing Line>.PROCEDURE<OnAfterCalculateRoutingLine>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnAfterProcessProdOrderLine>
2 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnAfterProdOrderLineInsert>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnAfterUpdateProdOrderLine>
2 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnBeforeProdOrderLineInsert>
2 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCheckMakeOrderLineBeforeIf>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCheckMakeOrderLineBeforeInsert>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCopyFromFamilyOnBeforeInsertProdOrderLine>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCopyFromSalesOrderOnBeforeProdOrderLineModify>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCopyFromSalesOrderOnBeforeSalesPlanLineInsert>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnInitProdOrderLineAfterScrap>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnInitProdOrderLineAfterVariantCode>
1 : Codeunit<Create Prod. Order from Sale>.PROCEDURE<OnAfterCreateProdOrder>
1 : Codeunit<Create Prod. Order from Sale>.PROCEDURE<OnAfterCreateProdOrderFromSalesLine>
1 : Codeunit<Planning Line Management>.PROCEDURE<OnAfterTransferRtngLine>
1 : Codeunit<Planning Line Management>.PROCEDURE<OnBeforeInsertAsmPlanningComponent>
1 : Codeunit<Planning Line Management>.PROCEDURE<OnBeforeInsertPlanningComponent>
1 : Codeunit<Planning Line Management>.PROCEDURE<OnBeforeModifyPlanningComponent>
1 : Codeunit<Planning Line Management>.PROCEDURE<OnCheckMultiLevelStructureOnBeforeInsertPlanningLine>
1 : Codeunit<Planning Line Management>.PROCEDURE<OnTransferBOMOnBeforeGetDefaultBin>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnAfterInsertAsmHeader>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnAfterInsertProdOrderLine>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnAfterTransferAsmPlanningComp>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnAfterTransferPlanningComp>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnAfterTransferPlanningRtngLine>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnInsertProdOrderLineWithReqLine>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnInsertProdOrderWithReqLine>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnInsertTransLineWithReqLine>
1 : Codeunit<Create Reserv. Entry>.PROCEDURE<OnAfterCopyFromInsertReservEntry>
1 : Codeunit<Create Reserv. Entry>.PROCEDURE<OnBeforeUseOldReservEntry>
1 : Codeunit<Reservation Engine Mgt.>.PROCEDURE<OnBeforeUpdateItemTracking>
2 : Codeunit<Transfer Line-Reserve>.PROCEDURE<OnAfterCallItemTracking>
1 : Codeunit<Reservation Management>.PROCEDURE<OnAfterCalcReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnBeforeCreateReservation>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterDemandToInvProfile>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterSetOrderPriority>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterSupplyToInvProfile>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterTransToChildInvProfile>
1 : Codeunit<AvailabilityManagement>.PROCEDURE<OnAfterCaseCalcCapableToPromise>
1 : Codeunit<AvailabilityManagement>.PROCEDURE<OnAfterUpdateSourceLine>
1 : Codeunit<AvailabilityManagement>.PROCEDURE<OnCreateReservationsAfterFirstCASE>
1 : Codeunit<AvailabilityManagement>.PROCEDURE<OnCreateReservationsAfterSecondCASE>
1 : Page<Company Detail>.PROCEDURE<OnGoToCompany>
1 : Page<Data Privacy Wizard>.PROCEDURE<OnDrillDownForEntityNumber>
1 : Page<Data Privacy Wizard>.PROCEDURE<OnEntityNoValidate>
1 : Page<Payment Reconciliation Journal>.PROCEDURE<OnAfterImportBankTransactions>
1 : Page<Payment Reconciliation Journal>.PROCEDURE<OnAtActionApplyAutomatically>
1 : Page<Payment Reconciliation Journal>.PROCEDURE<OnUpdateSorting>
1 : Page<Payment Application>.PROCEDURE<OnSetBankAccReconcLine>
2 : Page<My Notifications>.PROCEDURE<OnInitializingNotificationWithDefaultState>
1 : Page<Office Suggested Line Items>.PROCEDURE<OnDisableMessage>
1 : Page<Payroll Import Transactions>.PROCEDURE<OnCreateSampleFile>
1 : Page<Payroll Import Transactions>.PROCEDURE<OnImportPayrollTransactions>
1 : Page<Data Migration Overview>.PROCEDURE<OnRequestAbort>
1 : Page<Incoming Document>.PROCEDURE<OnCloseIncomingDocumentFromAction>
1 : Page<Incoming Documents>.PROCEDURE<OnCloseIncomingDocumentsFromActions>
1 : Page<Customer Card>.PROCEDURE<OnBeforeCreateCustomerFromTemplate>
1 : Page<Customer Card>.PROCEDURE<SetCaption>
1 : Page<O365 Import Export Settings>.PROCEDURE<OnInsertMenuItems>
1 : Page<Customer List>.PROCEDURE<SetCaption>
1 : Page<BC O365 Settings>.PROCEDURE<OnSetPayPalSetupVisible>
1 : Page<BC O365 Settings>.PROCEDURE<OnSetQuickBooksVisible>
1 : Page<BC O365 PayPal Std. Settings>.PROCEDURE<OnGetPayPalSandboxURL>
1 : Page<BC O365 PayPal Std. Settings>.PROCEDURE<OnGetPayPalTargetURL>
1 : Page<BC O365 PayPal Std. Settings>.PROCEDURE<OnOpenPageInit>
1 : Page<BC O365 Quickbooks Settings>.PROCEDURE<OnQuickBooksDesktopSyncClicked>
1 : Page<Navigate>.PROCEDURE<OnAfterNavigateFindRecords>
1 : Page<Navigate>.PROCEDURE<OnAfterNavigateFindTrackingRecords>
1 : Page<Navigate>.PROCEDURE<OnAfterNavigateShowRecords>
1 : Page<Item Availability Lines>.PROCEDURE<OnAfterSetItemFilter>
1 : Page<Sales Quote>.PROCEDURE<OnBeforeStatisticsAction>
1 : Page<Sales Order>.PROCEDURE<OnBeforeStatisticsAction>
1 : Page<Sales Invoice>.PROCEDURE<OnBeforeStatisticsAction>
1 : Page<Sales Credit Memo>.PROCEDURE<OnBeforeStatisticsAction>
1 : Page<Sales Order Subform>.PROCEDURE<OnAfterQuantityOnAfterValidate>
1 : Page<Blanket Sales Order>.PROCEDURE<OnBeforeStatisticsAction>
1 : Page<Azure AD Access Dialog>.PROCEDURE<OnOAuthAccessDenied>
4 : Page<Item Tracking Lines>.PROCEDURE<OnAfterAssignNewTrackingNo>
2 : Page<Item Tracking Lines>.PROCEDURE<OnAfterClearTrackingSpec>
2 : Page<Item Tracking Lines>.PROCEDURE<OnAfterCopyTrackingSpec>
1 : Page<Item Tracking Lines>.PROCEDURE<OnAfterMoveFields>
1 : Page<Sales Return Order>.PROCEDURE<OnBeforeStatisticsAction>
1 : Page<Job Queue Log Entries>.PROCEDURE<OnShowDetails>
1 : Page<VAT Report>.PROCEDURE<OnAfterInitPageControllers>
1 : Page<Invite External Accountant>.PROCEDURE<OnInvitationEnd>
1 : Page<Invite External Accountant>.PROCEDURE<OnInvitationNoAADPermissionsFail>
1 : Page<Invite External Accountant>.PROCEDURE<OnInvitationNoExternalAccountantLicenseFail>
1 : Page<Invite External Accountant>.PROCEDURE<OnInvitationNoUserTablePermissionsFail>
1 : Page<Invite External Accountant>.PROCEDURE<OnInvitationStart>
1 : Page<My Settings>.PROCEDURE<OnCompanyChange>
1 : Page<My Settings>.PROCEDURE<OnQueryClosePageEvent>
1 : Page<My Settings>.PROCEDURE<OnUserRoleCenterChange>
1 : Page<Item Availability Line List>.PROCEDURE<OnItemCalcFields>
1 : Page<Item Availability Line List>.PROCEDURE<OnItemLedgerEntrySetFilter>
1 : Page<Item Availability Line List>.PROCEDURE<OnItemSetFilter>
1 : Report<Suggest Bank Acc. Recon. Lines>.PROCEDURE<OnPreDataItem>
1 : Report<Send Overdue Appr. Notif.>.PROCEDURE<OnSendOverdueNotifications>
1 : Report<Sales - Invoice>.PROCEDURE<OnAfterGetRecordSalesInvoiceHeader>
1 : Report<Sales - Invoice>.PROCEDURE<OnGetReferenceText>
1 : Report<Sales - Credit Memo>.PROCEDURE<OnAfterGetRecordSalesCrMemoHeader>
1 : Report<Sales Reservation Avail.>.PROCEDURE<OnAfterSalesLineModify>
1 : Report<Copy Sales Document>.PROCEDURE<OnBeforeValidateIncludeHeader>
1 : Report<Delete Invoiced Sales Orders>.PROCEDURE<OnAfterDeleteSalesLine>
1 : Report<Suggest Vendor Payments>.PROCEDURE<OnBeforeUpdateGnlJnlLineDimensionsFromTempBuffer>
1 : Report<Suggest Vendor Payments>.PROCEDURE<OnUpdateTempBufferFromVendorLedgerEntry>
1 : Report<Purchase Reservation Avail.>.PROCEDURE<OnAfterPurchLineModify>
1 : Report<Copy Purchase Document>.PROCEDURE<OnBeforeValidateIncludeHeader>
1 : Report<Delete Invoiced Purch. Orders>.PROCEDURE<OnBeforePurchLineDelete>
1 : Report<Move IC Trans. to Partner Comp>.PROCEDURE<OnICInboxTransactionCreated>
1 : Report<Calc. Consumption>.PROCEDURE<OnAfterInsertItemJnlLine>
1 : Report<Calculate Inventory Value>.PROCEDURE<OnAfterInsertItemJnlLine>
1 : Report<Get Item Ledger Entries>.PROCEDURE<OnBeforeInsertItemJnlLine>
1 : Report<Get Item Ledger Entries>.PROCEDURE<OnBeforeInsertJobLedgerLine>
1 : Report<Get Item Ledger Entries>.PROCEDURE<OnBeforeInsertValueEntryLine>
1 : Report<Delete Invd Sales Ret. Orders>.PROCEDURE<OnBeforeDeleteSalesOrderLine>
1 : Report<Delete Invd Purch. Ret. Orders>.PROCEDURE<OnBeforePurchLineDelete>
1 : Report<Calculate Whse. Adjustment>.PROCEDURE<OnAfterInsertItemJnlLine>
1 : Report<Whse. Calculate Inventory>.PROCEDURE<OnAfterWhseJnlLineInsert>
1 : Report<Whse. Get Bin Content>.PROCEDURE<OnAfterInsertItemJnlLine>
1 : Report<VAT Report Request Page>.PROCEDURE<OnAfterSetPeriodIsEditable>
1 : Report<Calculate Inventory>.PROCEDURE<OnAfterInsertItemJnlLine>
1 : Report<Close Income Statement>.PROCEDURE<OnBeforeCheckDimPostingRules>
1 : Report<Refresh Production Order>.PROCEDURE<OnAfterRefreshProdOrder>
1 : Report<Replan Production Order>.PROCEDURE<OnAfterLastProdOrderRtngLine>
1 : Report<Calculate Work Center Calendar>.PROCEDURE<OnAfterDeleteWorkCenterCalendarEntries>
2 : Table<Payment Service Setup>.PROCEDURE<OnCreatePaymentService>
5 : Table<Payment Service Setup>.PROCEDURE<OnRegisterPaymentServiceProviders>
7 : Table<Payment Service Setup>.PROCEDURE<OnRegisterPaymentServices>
1 : Table<Sales Shipment Line>.PROCEDURE<OnAfterInitFromSalesLine>
1 : Table<Sales Shipment Line>.PROCEDURE<OnAfterInsertInvLineFromShptLine>
1 : Table<Sales Shipment Line>.PROCEDURE<OnBeforeInsertInvLineFromShptLine>
1 : Table<Sales Shipment Line>.PROCEDURE<OnBeforeInsertInvLineFromShptLineBeforeInsertTextLine>
1 : Table<Sales Invoice Header>.PROCEDURE<OnGetPaymentReference>
1 : Table<Sales Invoice Header>.PROCEDURE<OnGetPaymentReferenceLbl>
1 : Table<Sales Invoice Line>.PROCEDURE<OnAfterInitFromSalesLine>
1 : Table<OAuth 2.0 Setup>.PROCEDURE<OnAfterRequestAccessToken>
1 : Table<Sales Cr.Memo Line>.PROCEDURE<OnAfterInitFromSalesLine>
1 : Table<Purch. Rcpt. Line>.PROCEDURE<OnAfterInitFromPurchLine>
1 : Table<Purch. Rcpt. Line>.PROCEDURE<OnAfterInsertInvLineFromRcptLine>
1 : Table<Purch. Rcpt. Line>.PROCEDURE<OnBeforeInsertInvLineFromRcptLine>
1 : Table<Purch. Rcpt. Line>.PROCEDURE<OnBeforeInsertInvLineFromRcptLineBeforeInsertTextLine>
1 : Table<Purch. Inv. Line>.PROCEDURE<OnAfterInitFromPurchLine>
2 : Table<Transformation Rule>.PROCEDURE<OnCreateTransformationRules>
1 : Table<Transformation Rule>.PROCEDURE<OnTransformation>
1 : Table<Purch. Cr. Memo Line>.PROCEDURE<OnAfterInitFromPurchLine>
2 : Table<Incoming Document>.PROCEDURE<OnAfterCreateGenJnlLineFromIncomingDocFail>
2 : Table<Incoming Document>.PROCEDURE<OnAfterCreateGenJnlLineFromIncomingDocSuccess>
1 : Table<Incoming Document>.PROCEDURE<OnAfterCreatePurchHeaderFromIncomingDoc>
1 : Table<Incoming Document>.PROCEDURE<OnAfterCreateSalesHeaderFromIncomingDoc>
1 : Table<Incoming Document>.PROCEDURE<OnCheckIncomingDocCreateDocRestrictions>
1 : Table<Incoming Document>.PROCEDURE<OnCheckIncomingDocReleaseRestrictions>
1 : Table<Incoming Document>.PROCEDURE<OnCheckIncomingDocSetForOCRRestrictions>
1 : Table<Incoming Document>.PROCEDURE<OnGetDataExchangePath>
1 : Table<O365 Getting Started>.PROCEDURE<OnO365DemoCompanyInitialize>
2 : Table<Incoming Document Attachment>.PROCEDURE<OnAttachBinaryFile>
1 : Table<Incoming Document Attachment>.PROCEDURE<OnBeforeExtractHeaderFields>
3 : Table<Incoming Document Attachment>.PROCEDURE<OnGetBinaryContent>
3 : Table<Service Connection>.PROCEDURE<OnRegisterServiceConnection>
1 : Table<My Notifications>.PROCEDURE<OnStateChanged>
1 : Table<Job>.PROCEDURE<OnAfterChangeJobCompletionStatus>
1 : Table<Job>.PROCEDURE<OnAfterUpdateBillToCust>
1 : Table<G/L Entry>.PROCEDURE<OnAfterCopyGLEntryFromGenJnlLine>
1 : Table<Standard Vendor Purchase Code>.PROCEDURE<OnBeforeApplyStdCodesToPurchaseLines>
1 : Table<Data Migration Error>.PROCEDURE<OnAfterErrorInserted>
1 : Table<Customer>.PROCEDURE<OnBeforeIsContactUpdateNeeded>
1 : Table<Customer>.PROCEDURE<SkipRenamingLogic>
1 : Table<Data Migrator Registration>.PROCEDURE<OnApplySelectedData>
1 : Table<Data Migrator Registration>.PROCEDURE<OnCustomerVendorPostingSetup>
1 : Table<Data Migrator Registration>.PROCEDURE<OnDataImport>
1 : Table<Data Migrator Registration>.PROCEDURE<OnDownloadTemplate>
1 : Table<Data Migrator Registration>.PROCEDURE<OnEnableTogglingDataMigrationOverviewPage>
1 : Table<Data Migrator Registration>.PROCEDURE<OnGetInstructions>
1 : Table<Data Migrator Registration>.PROCEDURE<OnGLPostingSetup>
1 : Table<Data Migrator Registration>.PROCEDURE<OnHasAdvancedApply>
2 : Table<Data Migrator Registration>.PROCEDURE<OnHasErrors>
2 : Table<Data Migrator Registration>.PROCEDURE<OnHasSettings>
1 : Table<Data Migrator Registration>.PROCEDURE<OnHasTemplate>
1 : Table<Data Migrator Registration>.PROCEDURE<OnHideSelected>
1 : Table<Data Migrator Registration>.PROCEDURE<OnOpenAdvancedApply>
1 : Table<Data Migrator Registration>.PROCEDURE<OnOpenSettings>
1 : Table<Data Migrator Registration>.PROCEDURE<OnPostingGroupSetup>
1 : Table<Data Migrator Registration>.PROCEDURE<OnRegisterDataMigrator>
1 : Table<Data Migrator Registration>.PROCEDURE<OnSelectDataToApply>
1 : Table<Data Migrator Registration>.PROCEDURE<OnShowBalance>
1 : Table<Data Migrator Registration>.PROCEDURE<OnShowDuplicateContactsText>
1 : Table<Data Migrator Registration>.PROCEDURE<OnShowErrors>
1 : Table<Data Migrator Registration>.PROCEDURE<OnShowPostingOptions>
1 : Table<Data Migrator Registration>.PROCEDURE<OnShowThatsItMessage>
1 : Table<Data Migrator Registration>.PROCEDURE<OnValidateSettings>
1 : Table<Assisted Company Setup Status>.PROCEDURE<OnEnabled>
1 : Table<Assisted Company Setup Status>.PROCEDURE<OnGetCompanySetupStatus>
1 : Table<Assisted Company Setup Status>.PROCEDURE<OnSetupStatusDrillDown>
1 : Table<Assisted Setup>.PROCEDURE<OnAssistedSetupCompleted>
1 : Table<Assisted Setup>.PROCEDURE<VerifyYodleeIsInstalled>
1 : Table<Aggregated Assisted Setup>.PROCEDURE<OnRegisterAssistedSetup>
1 : Table<Aggregated Assisted Setup>.PROCEDURE<OnUpdateAssistedSetupStatus>
1 : Table<Business Setup>.PROCEDURE<OnOpenBusinessSetupPage>
1 : Table<Business Setup>.PROCEDURE<OnRegisterBusinessSetup>
1 : Table<Res. Ledger Entry>.PROCEDURE<OnAfterCopyFromResJnlLine>
1 : Table<Res. Journal Line>.PROCEDURE<OnAfterCopyResJnlLineFromJobJnlLine>
1 : Table<Res. Journal Line>.PROCEDURE<OnAfterCopyResJnlLineFromSalesLine>
1 : Table<Res. Journal Line>.PROCEDURE<OnAfterCopyResJnlLineFromServLine>
1 : Table<Res. Journal Line>.PROCEDURE<OnAfterCopyResJnlLineFromServShptLine>
1 : Table<Res. Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Cust. Ledger Entry>.PROCEDURE<OnAfterCopyCustLedgerEntryFromCVLedgEntryBuffer>
1 : Table<Cust. Ledger Entry>.PROCEDURE<OnAfterCopyCustLedgerEntryFromGenJnlLine>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterAssignGLAccountValues>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterAssignItemUoM>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterAssignItemValues>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterAssignResourceUoM>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterAssignResourceValues>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterDeleteAmounts>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterUpdateAllAmounts>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterUpdateAmountsAndDiscounts>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterUpdateTotalCost>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterUpdateTotalPrice>
1 : Table<Job Journal Line>.PROCEDURE<OnBeforeUpdateAllAmounts>
1 : Table<Job Journal Line>.PROCEDURE<OnBeforeValidateWorkTypeCodeQty>
1 : Table<Gen. Jnl. Allocation>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Vendor>.PROCEDURE<OnBeforeIsContactUpdateNeeded>
2 : Table<Gen. Journal Batch>.PROCEDURE<OnCheckGenJournalLineExportRestrictions>
1 : Table<Gen. Journal Batch>.PROCEDURE<OnGeneralJournalBatchBalanced>
1 : Table<Gen. Journal Batch>.PROCEDURE<OnGeneralJournalBatchNotBalanced>
1 : Table<Gen. Journal Batch>.PROCEDURE<OnMoveGenJournalBatch>
1 : Table<Requisition Line>.PROCEDURE<OnAfterCreateDim>
1 : Table<Requisition Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Vendor Ledger Entry>.PROCEDURE<OnAfterCopyVendLedgerEntryFromCVLedgEntryBuffer>
1 : Table<Vendor Ledger Entry>.PROCEDURE<OnAfterCopyVendLedgerEntryFromGenJnlLine>
1 : Table<VAT Entry>.PROCEDURE<OnAfterCopyFromGenJnlLine>
1 : Table<Item>.PROCEDURE<OnAfterCheckDocuments>
1 : Table<Bank Account>.PROCEDURE<OnCheckAutoLogonPossibleEvent>
1 : Table<Bank Account>.PROCEDURE<OnCheckLinkedToStatementProviderEvent>
1 : Table<Bank Account>.PROCEDURE<OnGetDataExchangeDefinitionEvent>
2 : Table<Bank Account>.PROCEDURE<OnGetStatementProvidersEvent>
1 : Table<Bank Account>.PROCEDURE<OnLinkStatementProviderEvent>
1 : Table<Bank Account>.PROCEDURE<OnMarkAccountLinkedEvent>
1 : Table<Bank Account>.PROCEDURE<OnSimpleLinkStatementProviderEvent>
2 : Table<Bank Account>.PROCEDURE<OnUnlinkStatementProviderEvent>
1 : Table<Bank Account>.PROCEDURE<OnUpdateBankAccountLinkingEvent>
1 : Table<Bank Account Ledger Entry>.PROCEDURE<OnAfterCopyFromGenJnlLine>
1 : Table<Check Ledger Entry>.PROCEDURE<OnAfterCopyFromBankAccLedgEntry>
1 : Table<Bank Acc. Reconciliation>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Bank Acc. Reconciliation Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Native - API Tax Setup>.PROCEDURE<OnCanDeleteTaxSetup>
1 : Table<Native - API Tax Setup>.PROCEDURE<OnLoadSalesTaxSettings>
1 : Table<Native - API Tax Setup>.PROCEDURE<OnSaveSalesTaxSettings>
1 : Table<Reminder Header>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Reminder Header>.PROCEDURE<OnBeforeInsertReminderLine>
1 : Table<Reminder Header>.PROCEDURE<OnBeforeReminderRounding>
1 : Table<Finance Charge Memo Header>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Finance Charge Memo Header>.PROCEDURE<OnBeforeInsertFinChrgMemoLine>
1 : Table<Finance Charge Memo Line>.PROCEDURE<OnAfterCalcFinCharge>
1 : Table<Finance Charge Memo Line>.PROCEDURE<OnBeforeCalcFinCharge>
1 : Table<Reservation Entry>.PROCEDURE<OnAfterTextCaption>
1 : Table<Default Dimension>.PROCEDURE<OnAfterUpdateGlobalDimCode>
1 : Table<Sales Header>.PROCEDURE<OnAfterChangePricesIncludingVAT>
1 : Table<Sales Header>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Sales Header>.PROCEDURE<OnAfterCreateSalesLine>
1 : Table<Sales Header>.PROCEDURE<OnAfterInitNoSeries>
1 : Table<Sales Header>.PROCEDURE<OnAfterInitRecord>
1 : Table<Sales Header>.PROCEDURE<OnAfterSalesQuoteAccepted>
1 : Table<Sales Header>.PROCEDURE<OnAfterSendSalesHeader>
1 : Table<Sales Header>.PROCEDURE<OnAfterSetFieldsBilltoCustomer>
1 : Table<Sales Header>.PROCEDURE<OnAfterTestNoSeries>
1 : Table<Sales Header>.PROCEDURE<OnAfterTransferExtendedTextForSalesLineRecreation>
1 : Table<Sales Header>.PROCEDURE<OnAfterUpdateShipToAddress>
3 : Table<Sales Header>.PROCEDURE<OnCheckSalesPostRestrictions>
1 : Table<Sales Header>.PROCEDURE<OnCheckSalesReleaseRestrictions>
3 : Table<Sales Header>.PROCEDURE<OnCustomerCreditLimitExceeded>
3 : Table<Sales Header>.PROCEDURE<OnCustomerCreditLimitNotExceeded>
1 : Table<Sales Header>.PROCEDURE<OnUpdateSalesLineByChangedFieldName>
1 : Table<Sales Line>.PROCEDURE<OnAfterAssignFieldsForNo>
1 : Table<Sales Line>.PROCEDURE<OnAfterAssignFixedAssetValues>
1 : Table<Sales Line>.PROCEDURE<OnAfterAssignGLAccountValues>
1 : Table<Sales Line>.PROCEDURE<OnAfterAssignHeaderValues>
1 : Table<Sales Line>.PROCEDURE<OnAfterAssignItemChargeValues>
1 : Table<Sales Line>.PROCEDURE<OnAfterAssignItemUOM>
1 : Table<Sales Line>.PROCEDURE<OnAfterAssignItemValues>
1 : Table<Sales Line>.PROCEDURE<OnAfterAssignResourceUOM>
1 : Table<Sales Line>.PROCEDURE<OnAfterAssignResourceValues>
1 : Table<Sales Line>.PROCEDURE<OnAfterAssignStdTxtValues>
1 : Table<Sales Line>.PROCEDURE<OnAfterCalcVATAmountLines>
1 : Table<Sales Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Sales Line>.PROCEDURE<OnAfterInitOutstandingAmount>
1 : Table<Sales Line>.PROCEDURE<OnAfterInitQtyToInvoice>
1 : Table<Sales Line>.PROCEDURE<OnAfterInitQtyToReceive>
1 : Table<Sales Line>.PROCEDURE<OnAfterInitQtyToShip>
1 : Table<Sales Line>.PROCEDURE<OnAfterShowItemSub>
1 : Table<Sales Line>.PROCEDURE<OnAfterTestStatusOpen>
1 : Table<Sales Line>.PROCEDURE<OnAfterUpdateAmounts>
1 : Table<Sales Line>.PROCEDURE<OnAfterUpdateAmountsDone>
1 : Table<Sales Line>.PROCEDURE<OnAfterUpdateUnitPrice>
1 : Table<Sales Line>.PROCEDURE<OnAfterUpdateVATOnLines>
1 : Table<Sales Line>.PROCEDURE<OnBeforeUpdateUnitPrice>
2 : Table<Sales Line>.PROCEDURE<OnBeforeVerifyReservedQty>
1 : Table<Sales Line>.PROCEDURE<OnValidateNoOnCopyFromTempSalesLine>
1 : Table<Sales Line>.PROCEDURE<OnValidateTypeOnCopyFromTempSalesLine>
1 : Table<Purchase Header>.PROCEDURE<OnAfterChangePricesIncludingVAT>
1 : Table<Purchase Header>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Purchase Header>.PROCEDURE<OnAfterInitNoSeries>
1 : Table<Purchase Header>.PROCEDURE<OnAfterInitRecord>
1 : Table<Purchase Header>.PROCEDURE<OnAfterTestNoSeries>
1 : Table<Purchase Header>.PROCEDURE<OnAfterTransferExtendedTextForPurchaseLineRecreation>
1 : Table<Purchase Header>.PROCEDURE<OnAfterUpdateShipToAddress>
3 : Table<Purchase Header>.PROCEDURE<OnCheckPurchasePostRestrictions>
1 : Table<Purchase Header>.PROCEDURE<OnCheckPurchaseReleaseRestrictions>
1 : Table<Purchase Header>.PROCEDURE<OnUpdatePurchLinesByChangedFieldName>
1 : Table<Purchase Header>.PROCEDURE<OnValidatePurchaseHeaderPayToVendorNo>
1 : Table<CV Ledger Entry Buffer>.PROCEDURE<OnAfterCopyFromCustLedgerEntry>
1 : Table<CV Ledger Entry Buffer>.PROCEDURE<OnAfterCopyFromEmplLedgerEntry>
1 : Table<CV Ledger Entry Buffer>.PROCEDURE<OnAfterCopyFromVendLedgerEntry>
1 : Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<OnAfterCopyFromGenJnlLine>
1 : Table<Purchase Line>.PROCEDURE<OnAfterAssignFieldsForNo>
1 : Table<Purchase Line>.PROCEDURE<OnAfterAssignFixedAssetValues>
1 : Table<Purchase Line>.PROCEDURE<OnAfterAssignGLAccountValues>
1 : Table<Purchase Line>.PROCEDURE<OnAfterAssignHeaderValues>
1 : Table<Purchase Line>.PROCEDURE<OnAfterAssignItemChargeValues>
1 : Table<Purchase Line>.PROCEDURE<OnAfterAssignItemUOM>
1 : Table<Purchase Line>.PROCEDURE<OnAfterAssignItemValues>
1 : Table<Purchase Line>.PROCEDURE<OnAfterAssignStdTxtValues>
1 : Table<Purchase Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Purchase Line>.PROCEDURE<OnAfterCreateTempJobJnlLine>
1 : Table<Purchase Line>.PROCEDURE<OnAfterInitOutstandingAmount>
1 : Table<Purchase Line>.PROCEDURE<OnAfterInitQtyToInvoice>
1 : Table<Purchase Line>.PROCEDURE<OnAfterInitQtyToReceive>
1 : Table<Purchase Line>.PROCEDURE<OnAfterInitQtyToShip>
1 : Table<Purchase Line>.PROCEDURE<OnAfterSetDefaultQuantity>
1 : Table<Purchase Line>.PROCEDURE<OnAfterUpdateAmounts>
1 : Table<Purchase Line>.PROCEDURE<OnAfterUpdateDirectUnitCost>
1 : Table<Purchase Line>.PROCEDURE<OnAfterUpdateJobPrices>
1 : Table<Purchase Line>.PROCEDURE<OnAfterUpdateUnitCost>
1 : Table<Purchase Line>.PROCEDURE<OnBeforeJobTaskIsSet>
1 : Table<Purchase Line>.PROCEDURE<OnBeforeUpdateDirectUnitCost>
2 : Table<Purchase Line>.PROCEDURE<OnBeforeVerifyReservedQty>
1 : Table<Purchase Line>.PROCEDURE<OnValidateNoOnCopyFromTempPurchLine>
1 : Table<Purchase Line>.PROCEDURE<OnValidateTypeOnCopyFromTempPurchLine>
1 : Table<Workflow Webhook Subscription>.PROCEDURE<OnFindTaskSchedulerAllowed>
1 : Table<Job Queue Entry>.PROCEDURE<OnBeforeScheduleTask>
1 : Table<Job Queue Entry>.PROCEDURE<OnFindingIfJobNeedsToBeRun>
1 : Table<Change Global Dim. Log Entry>.PROCEDURE<OnFindingScheduledTask>
1 : Table<Invoice Post. Buffer>.PROCEDURE<OnAfterInvPostBufferPreparePurchase>
1 : Table<Invoice Post. Buffer>.PROCEDURE<OnAfterInvPostBufferPrepareSales>
1 : Table<Invoice Post. Buffer>.PROCEDURE<OnAfterInvPostBufferPrepareService>
1 : Table<Contact>.PROCEDURE<OnBeforeCustomerInsert>
1 : Table<Contact>.PROCEDURE<OnBeforeIsUpdateNeeded>
1 : Table<Contact>.PROCEDURE<OnBeforeVendorInsert>
1 : Table<Interaction Log Entry>.PROCEDURE<OnAfterCopyFromSegment>
1 : Table<Segment Line>.PROCEDURE<OnAfterCopyFromInteractionLogEntry>
1 : Table<Employee Ledger Entry>.PROCEDURE<OnAfterCopyEmplLedgerEntryFromCVLedgEntryBuffer>
1 : Table<Employee Ledger Entry>.PROCEDURE<OnAfterCopyEmployeeLedgerEntryFromGenJnlLine>
1 : Table<CRM Connection Setup>.PROCEDURE<OnGetDefaultCRMConnection>
1 : Table<CRM Connection Setup>.PROCEDURE<OnReadingCRMData>
1 : Table<Production Order>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Prod. Order Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Prod. Order Component>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Prod. Order Routing Line>.PROCEDURE<OnAfterMachineCtrTransferFields>
1 : Table<Prod. Order Routing Line>.PROCEDURE<OnAfterWorkCenterTransferFields>
1 : Table<FA Ledger Entry>.PROCEDURE<OnAfterMoveToFAJnlLine>
1 : Table<FA Ledger Entry>.PROCEDURE<OnAfterMoveToGenJnlLine>
1 : Table<FA Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Insurance Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Transfer Header>.PROCEDURE<OnUpdateTransLines>
1 : Table<Transfer Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Transfer Shipment Header>.PROCEDURE<OnAfterCopyFromTransferHeader>
1 : Table<Transfer Shipment Line>.PROCEDURE<OnAfterCopyFromTransferLine>
1 : Table<Transfer Receipt Header>.PROCEDURE<OnAfterCopyFromTransferHeader>
1 : Table<Transfer Receipt Line>.PROCEDURE<OnAfterCopyFromTransferLine>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnAfterAutofillQtyToHandleLine>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnAfterUpdateQtyToHandleWhseActivLine>
1 : Table<Service Header>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Service Header>.PROCEDURE<OnAfterInitRecord>
1 : Table<Service Header>.PROCEDURE<OnAfterTransferExtendedTextForServLineRecreation>
1 : Table<Service Header>.PROCEDURE<OnAfterUpdateCust>
1 : Table<Service Header>.PROCEDURE<OnAfterUpdateShipToAddress>
1 : Table<Service Header>.PROCEDURE<OnUpdateServLineByChangedFieldName>
1 : Table<Service Line>.PROCEDURE<OnAfterAssignGLAccountValues>
1 : Table<Service Line>.PROCEDURE<OnAfterAssignHeaderValues>
1 : Table<Service Line>.PROCEDURE<OnAfterAssignItemValues>
1 : Table<Service Line>.PROCEDURE<OnAfterAssignResourceValues>
1 : Table<Service Line>.PROCEDURE<OnAfterAssignServCostValues>
1 : Table<Service Line>.PROCEDURE<OnAfterAssignServItemValues>
1 : Table<Service Line>.PROCEDURE<OnAfterAssignStdTxtValues>
1 : Table<Service Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Service Line>.PROCEDURE<OnAfterInitOutstandingAmount>
1 : Table<Service Line>.PROCEDURE<OnAfterInitQtyToConsume>
1 : Table<Service Line>.PROCEDURE<OnAfterInitQtyToInvoice>
1 : Table<Service Line>.PROCEDURE<OnAfterInitQtyToShip>
1 : Table<Service Line>.PROCEDURE<OnAfterUpdateUnitPrice>
1 : Table<Service Line>.PROCEDURE<OnBeforeUpdateUnitPrice>
1 : Table<Service Contract Line>.PROCEDURE<OnAfterSetupNewLine>
1 : Table<Service Contract Header>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Standard Service Line>.PROCEDURE<OnAfterCreateDimTableIDs>
2 : Table<Electronic Document Format>.PROCEDURE<OnDiscoverElectronicFormat>
1 : Table<Return Shipment Line>.PROCEDURE<OnAfterInitFromPurchLine>
1 : Table<Return Shipment Line>.PROCEDURE<OnAfterInsertInvLineFromRetShptLine>
1 : Table<Return Shipment Line>.PROCEDURE<OnBeforeInsertInvLineFromRetShptLine>
1 : Table<Return Receipt Line>.PROCEDURE<OnAfterInitFromSalesLine>
1 : Table<Return Receipt Line>.PROCEDURE<OnAftertInsertInvLineFromRetRcptLine>
1 : Table<Return Receipt Line>.PROCEDURE<OnBeforeInsertInvLineFromRetRcptLine>
1 : Table<Warehouse Shipment Header>.PROCEDURE<OnBeforeWhseShptLineDelete>
1 : Table<Standard General Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Standard Item Journal>.PROCEDURE<OnAfterCopyItemJnlFromStdJnl>
1 : Table<Standard Item Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Report Selections>.PROCEDURE<OnAfterGetEmailBodyCustomer>
1 : Table<Report Selections>.PROCEDURE<OnAfterGetEmailBodyVendor>
1 : Table<Report Selections>.PROCEDURE<OnBeforeGetCustEmailAddress>
1 : Table<Report Selections>.PROCEDURE<OnBeforeGetEmailBodyCustomer>
1 : Table<Report Selections>.PROCEDURE<OnBeforeGetEmailBodyVendor>
1 : Table<Report Selections>.PROCEDURE<OnBeforeGetVendorEmailAddress>
1 : Table<Report Selections>.PROCEDURE<OnBeforePrint>
1 : Table<Report Selections>.PROCEDURE<OnBeforePrintForUsage>
1 : Table<Report Selections>.PROCEDURE<OnBeforePrintWithCheck>
1 : Table<Report Selections>.PROCEDURE<OnBeforePrintWithGUIYesNo>
1 : Table<Report Selections>.PROCEDURE<OnBeforePrintWithGUIYesNoVendor>
1 : Table<Report Selections>.PROCEDURE<OnBeforePrintWithGUIYesNoWithCheck>
1 : Table<Report Selections>.PROCEDURE<OnBeforePrintWithGUIYesNoWithCheckVendor>
1 : Table<Report Selections>.PROCEDURE<OnBeforeSendEmailToCust>
1 : Table<Report Selections>.PROCEDURE<OnBeforeSendEmailToVendor>
9 : Table<Report Selections>.PROCEDURE<OnBeforeSetReportLayout>
1 : Table<Report Selections>.PROCEDURE<OnFindReportSelections>
2 : Table<MS-QBO Customer>.PROCEDURE<CustomerHasAnInvalidCountryName>
1 : Table<MS-QBO Customer>.PROCEDURE<NoCustomersPresentInResponseJson>
2 : Table<MS-QBO Customer>.PROCEDURE<OnAfterUpdate>
2 : Table<MS-QBO Customer>.PROCEDURE<OnBeforeUpdate>
1 : Table<MS-QBO Customer>.PROCEDURE<OnGettingAll>
1 : Table<MS-QBO Item>.PROCEDURE<NoItemsPresentInResponseJson>
2 : Table<MS-QBO Item>.PROCEDURE<OnAfterUpdate>
2 : Table<MS-QBO Item>.PROCEDURE<OnBeforeUpdate>
1 : Table<MS-QBO Item>.PROCEDURE<OnGettingAll>
1 : Table<MS-QBO Setup>.PROCEDURE<WebhooksAdapterUriNotFound>
1 : Table<Language>.PROCEDURE<OnGetUserLanguageId>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetBankAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetBankBalAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetCustomerAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetCustomerBalAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetEmployeeAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetEmployeeBalAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetFAAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetFABalAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetGLAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetGLBalAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetICPartnerAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetICPartnerBalAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetVendorAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetVendorBalAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterClearBalPostingGroups>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterClearPostingGroups>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromCustLedgEntry>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromGenJnlAllocation>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromInvPostBuffer>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromInvPostBufferFA>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPrepmtInvBuffer>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPurchHeader>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPurchHeaderApplyTo>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPurchHeaderPayment>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPurchHeaderPrepmt>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPurchHeaderPrepmtPost>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromSalesHeader>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromSalesHeaderApplyTo>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromSalesHeaderPayment>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromSalesHeaderPrepmt>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromSalesHeaderPrepmtPost>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromServHeader>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromServHeaderApplyTo>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromServHeaderPayment>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCreateTempJobJnlLine>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterSetupNewLine>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterUpdatePricesFromJobJnlLine>
1 : Table<Gen. Journal Line>.PROCEDURE<OnBeforeCreateTempJobJnlLine>
1 : Table<Gen. Journal Line>.PROCEDURE<OnCheckGenJournalLinePostRestrictions>
1 : Table<Gen. Journal Line>.PROCEDURE<OnCheckGenJournalLinePrintCheckRestrictions>
1 : Table<Gen. Journal Line>.PROCEDURE<OnGenJnlLineGetVendorAccount>
7 : Table<Gen. Journal Line>.PROCEDURE<OnMoveGenJournalLine>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromJobJnlLine>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromPurchHeader>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromPurchLine>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromSalesHeader>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromSalesLine>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServHeader>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServLine>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServShptHeader>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServShptLine>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServShptLineUndo>
2 : Table<Item Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterOnValidateItemNoAssignByEntryType>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterSetupNewLine>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterUpdateAmount>
2 : Table<Item Journal Line>.PROCEDURE<OnBeforeVerifyReservedQty>
1 : Table<Item Journal Line>.PROCEDURE<OnCheckItemJournalLinePostRestrictions>
1 : Table<Config. Table Processing Rule>.PROCEDURE<OnDoesTableHaveCustomRuleInRapidStart>
1 : Table<Assembly Header>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Assembly Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Assemble-to-Order Link>.PROCEDURE<OnAfterUpdateAsm>
1 : Table<Routing Line>.PROCEDURE<OnAfterMachineCtrTransferFields>
1 : Table<Routing Line>.PROCEDURE<OnAfterWorkCenterTransferFields>
1 : Table<Planning Component>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Planning Component>.PROCEDURE<OnAfterTransferFromAsmLine>
1 : Table<Planning Component>.PROCEDURE<OnAfterTransferFromComponent>
1 : Table<Planning Routing Line>.PROCEDURE<OnAfterMachineCtrTransferFields>
1 : Table<Planning Routing Line>.PROCEDURE<OnAfterTransferFromProdOrderRouting>
1 : Table<Planning Routing Line>.PROCEDURE<OnAfterWorkCenterTransferFields>
0 : Codeunit<ApplicationManagement>.PROCEDURE<OnCheckPreconditionsPerCompany>
0 : Codeunit<ApplicationManagement>.PROCEDURE<OnCheckPreconditionsPerDatabase>
0 : Codeunit<ApplicationManagement>.PROCEDURE<OnInstallAppPerCompany>
0 : Codeunit<ApplicationManagement>.PROCEDURE<OnInstallAppPerDatabase>
0 : Codeunit<ApplicationManagement>.PROCEDURE<OnUpgradePerCompany>
0 : Codeunit<ApplicationManagement>.PROCEDURE<OnUpgradePerDatabase>
0 : Codeunit<ApplicationManagement>.PROCEDURE<OnValidateUpgradePerCompany>
0 : Codeunit<ApplicationManagement>.PROCEDURE<OnValidateUpgradePerDatabase>
0 : Codeunit<Add-in Manifest Management>.PROCEDURE<CreateBasicAddins>
0 : Codeunit<Add-in Manifest Management>.PROCEDURE<GetAddinID>
0 : Codeunit<Add-in Manifest Management>.PROCEDURE<GetAddinVersion>
0 : Page<BC O365 Quickbooks Settings>.PROCEDURE<OnQuickBooksOnlineSyncClicked>

DETAILS:
Codeunit<ApplicationManagement>.PROCEDURE<OnAfterAutoFormatTranslate>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<AutoFormatTranslate>
    Code lines:
    AutoFormatTranslation := AutoFormatManagement.AutoFormatTranslate(AutoFormatType,AutoFormatExpr);
    OnAfterAutoFormatTranslate(AutoFormatType,AutoFormatExpr,AutoFormatTranslation); <=====================
    EXIT(AutoFormatTranslation);
Codeunit<ApplicationManagement>.PROCEDURE<OnAfterCaptionClassTranslate>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<CaptionClassTranslate>
    Code lines:
    Caption := CaptionManagement.CaptionClassTranslate(Language,CaptionExpr);
    OnAfterCaptionClassTranslate(Language,CaptionExpr,Caption); <=====================
    EXIT(Caption);
Codeunit<ApplicationManagement>.PROCEDURE<OnAfterCompanyClose>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<CompanyClose>
    Code lines:
    OnBeforeCompanyClose;
    LogInManagement.CompanyClose;
    OnAfterCompanyClose; <=====================
Codeunit<ApplicationManagement>.PROCEDURE<OnAfterCompanyOpen>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<CompanyOpen>
    Code lines:
    ...
    // This needs to be the very first thing to run before company open
    CODEUNIT.RUN(CODEUNIT::"Azure AD User Management");
    
    OnBeforeCompanyOpen;
    LogInManagement.CompanyOpen;
    OnAfterCompanyOpen; <=====================
    LogonManagement.SetLogonInProgress(FALSE);
Codeunit<ApplicationManagement>.PROCEDURE<OnAfterFindPrinter>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<FindPrinter>
    Code lines:
    ...
      IF NOT PrinterSelection.GET(USERID,ReportID) THEN
        IF NOT PrinterSelection.GET('',ReportID) THEN
          IF NOT PrinterSelection.GET(USERID,0) THEN
            IF PrinterSelection.GET('',0) THEN;
    PrinterName := PrinterSelection."Printer Name";
    OnAfterFindPrinter(ReportID,PrinterName); <=====================
    EXIT(PrinterName);
Codeunit<ApplicationManagement>.PROCEDURE<OnAfterGetApplicationVersion>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<ApplicationVersion>
    Code lines:
    AppVersion := CustomApplicationVersion('W1 11.0');
    OnAfterGetApplicationVersion(AppVersion); <=====================
    EXIT(AppVersion);
Codeunit<ApplicationManagement>.PROCEDURE<OnAfterGetDatabaseTableTriggerSetup>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<GetDatabaseTableTriggerSetup>
    Code lines:
    ChangeLogMgt.GetDatabaseTableTriggerSetup(TableId,OnDatabaseInsert,OnDatabaseModify,OnDatabaseDelete,OnDatabaseRename);
    IntegrationManagement.GetDatabaseTableTriggerSetup(TableId,OnDatabaseInsert,OnDatabaseModify,OnDatabaseDelete,OnDatabaseRename);
    OnAfterGetDatabaseTableTriggerSetup(TableId,OnDatabaseInsert,OnDatabaseModify,OnDatabaseDelete,OnDatabaseRename); <=====================
Codeunit<ApplicationManagement>.PROCEDURE<OnAfterGetDefaultRoleCenter>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<DefaultRoleCenter>
    Code lines:
    ...
      IF AzureADUserManagement.TryGetAzureUserPlanRoleCenterId(DefaultRoleCenterID,USERSECURITYID) THEN;
    
    IF DefaultRoleCenterID = 0 THEN
      DefaultRoleCenterID := ConfPersMgt.DefaultRoleCenterID;
    
    OnAfterGetDefaultRoleCenter(DefaultRoleCenterID); <=====================
    EXIT(DefaultRoleCenterID);
Codeunit<ApplicationManagement>.PROCEDURE<OnAfterGetGlobalTableTriggerMask>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<GetGlobalTableTriggerMask>
    Code lines:
    // Replaced by GetDatabaseTableTriggerSetup
    OnAfterGetGlobalTableTriggerMask(TableID,TableTriggerMask); <=====================
    EXIT(TableTriggerMask);
Codeunit<ApplicationManagement>.PROCEDURE<OnAfterGetSystemIndicator>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<GetSystemIndicator>
    Code lines:
    IF CompanyInformation.GET THEN
      CompanyInformation.GetSystemIndicator(Text,Style);
    OnAfterGetSystemIndicator(Text,Style); <=====================
Codeunit<ApplicationManagement>.PROCEDURE<OnAfterMakeCodeFilter>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<MakeCodeFilter>
    Code lines:
    Position := TextManagement.MakeTextFilter(TextFilterText);
    OnAfterMakeCodeFilter(Position,TextFilterText); <=====================
    EXIT(Position);
Codeunit<ApplicationManagement>.PROCEDURE<OnAfterMakeDateFilter>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<MakeDateFilter>
    Code lines:
    Position := TextManagement.MakeDateFilter(DateFilterText);
    OnAfterMakeDateFilter(Position,DateFilterText); <=====================
    EXIT(Position);
Codeunit<ApplicationManagement>.PROCEDURE<OnAfterMakeDateText>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<MakeDateText>
    Code lines:
    Position := TextManagement.MakeDateText(DateText);
    OnAfterMakeDateText(Position,DateText); <=====================
    EXIT(Position);
Codeunit<ApplicationManagement>.PROCEDURE<OnAfterMakeDateTimeFilter>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<MakeDateTimeFilter>
    Code lines:
    Position := TextManagement.MakeDateTimeFilter(DateTimeFilterText);
    OnAfterMakeDateTimeFilter(Position,DateTimeFilterText); <=====================
    EXIT(Position);
Codeunit<ApplicationManagement>.PROCEDURE<OnAfterMakeText>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<MakeText>
    Code lines:
    Position := TextManagement.MakeText(Text);
    OnAfterMakeText(Position,Text); <=====================
    EXIT(Position);
Codeunit<ApplicationManagement>.PROCEDURE<OnAfterMakeTextFilter>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<MakeTextFilter>
    Code lines:
    Position := TextManagement.MakeTextFilter(TextFilterText);
    OnAfterMakeTextFilter(Position,TextFilterText); <=====================
    EXIT(Position);
Codeunit<ApplicationManagement>.PROCEDURE<OnAfterMakeTimeFilter>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<MakeTimeFilter>
    Code lines:
    Position := TextManagement.MakeTimeFilter(TimeFilterText);
    OnAfterMakeTimeFilter(Position,TimeFilterText); <=====================
    EXIT(Position);
Codeunit<ApplicationManagement>.PROCEDURE<OnAfterMakeTimeText>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<MakeTimeText>
    Code lines:
    Position := TextManagement.MakeTimeText(TimeText);
    OnAfterMakeTimeText(Position,TimeText); <=====================
    EXIT(Position);
Codeunit<ApplicationManagement>.PROCEDURE<OnAfterOnDatabaseDelete>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<OnDatabaseDelete>
    Code lines:
    OnBeforeOnDatabaseDelete(RecRef);
    ChangeLogMgt.LogDeletion(RecRef);
    IntegrationManagement.OnDatabaseDelete(RecRef);
    OnAfterOnDatabaseDelete(RecRef); <=====================
Codeunit<ApplicationManagement>.PROCEDURE<OnAfterOnDatabaseInsert>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<OnDatabaseInsert>
    Code lines:
    OnBeforeOnDatabaseInsert(RecRef);
    ChangeLogMgt.LogInsertion(RecRef);
    IntegrationManagement.OnDatabaseInsert(RecRef);
    OnAfterOnDatabaseInsert(RecRef); <=====================
Codeunit<ApplicationManagement>.PROCEDURE<OnAfterOnDatabaseModify>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<OnDatabaseModify>
    Code lines:
    OnBeforeOnDatabaseModify(RecRef);
    ChangeLogMgt.LogModification(RecRef);
    IntegrationManagement.OnDatabaseModify(RecRef);
    OnAfterOnDatabaseModify(RecRef); <=====================
Codeunit<ApplicationManagement>.PROCEDURE<OnAfterOnDatabaseRename>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<OnDatabaseRename>
    Code lines:
    OnBeforeOnDatabaseRename(RecRef,xRecRef);
    ChangeLogMgt.LogRename(RecRef,xRecRef);
    IntegrationManagement.OnDatabaseRename(RecRef,xRecRef);
    OnAfterOnDatabaseRename(RecRef,xRecRef); <=====================
Codeunit<ApplicationManagement>.PROCEDURE<OnAfterOnGlobalDelete>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<OnGlobalDelete>
    Code lines:
    // Replaced by OnDataBaseDelete. This trigger is only called from pages.
    OnAfterOnGlobalDelete(RecRef); <=====================
Codeunit<ApplicationManagement>.PROCEDURE<OnAfterOnGlobalInsert>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<OnGlobalInsert>
    Code lines:
    // Replaced by OnDataBaseInsert. This trigger is only called from pages.
    OnAfterOnGlobalInsert(RecRef); <=====================
Codeunit<ApplicationManagement>.PROCEDURE<OnAfterOnGlobalModify>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<OnGlobalModify>
    Code lines:
    // Replaced by OnDataBaseModify. This trigger is only called from pages.
    OnAfterOnGlobalModify(RecRef,xRecRef); <=====================
Codeunit<ApplicationManagement>.PROCEDURE<OnAfterOnGlobalRename>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<OnGlobalRename>
    Code lines:
    // Replaced by OnDataBaseRename. This trigger is only called from pages.
    OnAfterOnGlobalRename(RecRef,xRecRef); <=====================
Codeunit<ApplicationManagement>.PROCEDURE<OnBeforeCompanyClose>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<CompanyClose>
    Code lines:
    OnBeforeCompanyClose; <=====================
    LogInManagement.CompanyClose;
    OnAfterCompanyClose;
Codeunit<ApplicationManagement>.PROCEDURE<OnBeforeCompanyOpen>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<CompanyOpen>
    Code lines:
    LogonManagement.SetLogonInProgress(TRUE);
    
    // This needs to be the very first thing to run before company open
    CODEUNIT.RUN(CODEUNIT::"Azure AD User Management");
    
    OnBeforeCompanyOpen; <=====================
    LogInManagement.CompanyOpen;
    OnAfterCompanyOpen;
    LogonManagement.SetLogonInProgress(FALSE);
Codeunit<ApplicationManagement>.PROCEDURE<OnBeforeOnDatabaseDelete>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<OnDatabaseDelete>
    Code lines:
    OnBeforeOnDatabaseDelete(RecRef); <=====================
    ChangeLogMgt.LogDeletion(RecRef);
    IntegrationManagement.OnDatabaseDelete(RecRef);
    OnAfterOnDatabaseDelete(RecRef);
Codeunit<ApplicationManagement>.PROCEDURE<OnBeforeOnDatabaseInsert>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<OnDatabaseInsert>
    Code lines:
    OnBeforeOnDatabaseInsert(RecRef); <=====================
    ChangeLogMgt.LogInsertion(RecRef);
    IntegrationManagement.OnDatabaseInsert(RecRef);
    OnAfterOnDatabaseInsert(RecRef);
Codeunit<ApplicationManagement>.PROCEDURE<OnBeforeOnDatabaseModify>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<OnDatabaseModify>
    Code lines:
    OnBeforeOnDatabaseModify(RecRef); <=====================
    ChangeLogMgt.LogModification(RecRef);
    IntegrationManagement.OnDatabaseModify(RecRef);
    OnAfterOnDatabaseModify(RecRef);
Codeunit<ApplicationManagement>.PROCEDURE<OnBeforeOnDatabaseRename>
  Raised in: Codeunit<ApplicationManagement>.PROCEDURE<OnDatabaseRename>
    Code lines:
    OnBeforeOnDatabaseRename(RecRef,xRecRef); <=====================
    ChangeLogMgt.LogRename(RecRef,xRecRef);
    IntegrationManagement.OnDatabaseRename(RecRef,xRecRef);
    OnAfterOnDatabaseRename(RecRef,xRecRef);
Codeunit<ApplicationManagement>.PROCEDURE<OnCheckPreconditionsPerCompany>
Codeunit<ApplicationManagement>.PROCEDURE<OnCheckPreconditionsPerDatabase>
Codeunit<ApplicationManagement>.PROCEDURE<OnEditInExcel>
  Raised in: Codeunit<ODataUtility>.PROCEDURE<EditJournalWorksheetInExcel>
    Code lines:
    CreateWorksheetWebService(PageCaption,PageId);
    
    Filter := STRSUBSTNO('Journal_Batch_Name eq ''%1'' and Journal_Template_Name eq ''%2''',JournalBatchName,JournalTemplateName);
    ApplicationManagement.OnEditInExcel(PageCaption,Filter); <=====================
  Raised in: Codeunit<ODataUtility>.PROCEDURE<EditWorksheetInExcel>
    Code lines:
    CreateWorksheetWebService(PageCaption,PageId);
    ApplicationManagement.OnEditInExcel(PageCaption,Filter); <=====================
Codeunit<ApplicationManagement>.PROCEDURE<OnInstallAppPerCompany>
Codeunit<ApplicationManagement>.PROCEDURE<OnInstallAppPerDatabase>
Codeunit<ApplicationManagement>.PROCEDURE<OnUpgradePerCompany>
Codeunit<ApplicationManagement>.PROCEDURE<OnUpgradePerDatabase>
Codeunit<ApplicationManagement>.PROCEDURE<OnValidateUpgradePerCompany>
Codeunit<ApplicationManagement>.PROCEDURE<OnValidateUpgradePerDatabase>
Codeunit<Calc. G/L Acc. Where-Used>.PROCEDURE<OnAfterCheckPostingGroups>
  Raised in: Codeunit<Calc. G/L Acc. Where-Used>.PROCEDURE<CheckPostingGroups>
    Code lines:
    ...
    CheckICPartner(GLAccNo);
    CheckPaymentMethod(GLAccNo);
    CheckSalesReceivablesSetup(GLAccNo);
    CheckEmployeePostingGroup(GLAccNo);
    
    OnAfterCheckPostingGroups(GLAccWhereUsed,GLAccNo); <=====================
Codeunit<Job Post-Line>.PROCEDURE<OnBeforePostJobOnPurchaseLine>
  Raised in: Codeunit<Job Post-Line>.PROCEDURE<PostJobOnPurchaseLine>
    Code lines:
    OnBeforePostJobOnPurchaseLine(PurchHeader,PurchInvHeader,PurchCrMemoHdr,PurchLine,JobJnlLine); <=====================
    
    IF (PurchLine.Type <> PurchLine.Type::Item) AND (PurchLine.Type <> PurchLine.Type::"G/L Account") THEN
      EXIT;
    CLEAR(JobJnlLine);
    PurchLine.TESTFIELD("Job No.");
    PurchLine.TESTFIELD("Job Task No.");
    Job.LOCKTABLE;
    JobTask.LOCKTABLE;
    Job.GET(PurchLine."Job No.");
    ...
Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeInsertSalesHeader>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<CreateSalesHeader>
    Code lines:
    ...
    IF SalesHeader."Document Type" = SalesHeader."Document Type"::Invoice THEN
      SalesSetup.TESTFIELD("Invoice Nos.");
    IF SalesHeader."Document Type" = SalesHeader."Document Type"::"Credit Memo" THEN
      SalesSetup.TESTFIELD("Credit Memo Nos.");
    SalesHeader."Posting Date" := PostingDate;
    OnBeforeInsertSalesHeader(SalesHeader,Job); <=====================
    SalesHeader.INSERT(TRUE);
    Cust.GET(Job."Bill-to Customer No.");
    Cust.TESTFIELD("Bill-to Customer No.",'');
    SalesHeader.VALIDATE("Sell-to Customer No.",Job."Bill-to Customer No.");
    ...
Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeInsertSalesLine>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<CreateSalesLine>
    Code lines:
    ...
          DimSetIDArr,SalesLine."Shortcut Dimension 1 Code",SalesLine."Shortcut Dimension 2 Code");
    END;
    SalesLine.Description := JobPlanningLine.Description;
    SalesLine."Description 2" := JobPlanningLine."Description 2";
    SalesLine."Line No." := GetNextLineNo(SalesLine);
    OnBeforeInsertSalesLine(SalesLine,SalesHeader,Job,JobPlanningLine); <=====================
    SalesLine.INSERT(TRUE);
    
    IF SalesLine.Type <> SalesLine.Type::" " THEN BEGIN
      NoOfSalesLinesCreated += 1;
    ...
Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeModifySalesHeader>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<CreateSalesHeader>
    Code lines:
    ...
    ELSE
      SalesHeader.VALIDATE("Currency Code",Job."Invoice Currency Code");
    IF PostingDate <> 0D THEN
      SalesHeader.VALIDATE("Posting Date",PostingDate);
    UpdateSalesHeader(SalesHeader,Job);
    OnBeforeModifySalesHeader(SalesHeader,Job); <=====================
    SalesHeader.MODIFY(TRUE);
Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeModifySalesLine>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<CreateSalesLine>
    Code lines:
    ...
          ROUND(
            SalesLine."Inv. Discount Amount" * (1 + (SalesLine."VAT %" / 100)),
            Currency."Amount Rounding Precision"));
      END;
      SalesLine.VALIDATE("Job Contract Entry No.",JobPlanningLine."Job Contract Entry No.");
      OnBeforeModifySalesLine(SalesLine,SalesHeader,Job,JobPlanningLine); <=====================
      SalesLine.MODIFY;
      JobPlanningLine."VAT Unit Price" := SalesLine."Unit Price";
      JobPlanningLine."VAT Line Discount Amount" := SalesLine."Line Discount Amount";
      JobPlanningLine."VAT Line Amount" := SalesLine."Line Amount";
    ...
Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromGenJnlLineToJnlLine>
  Raised in: Codeunit<Job Transfer Line>.PROCEDURE<FromGenJnlLineToJnlLine>
    Code lines:
    ...
    JobJnlLine."Line Discount Amount (LCY)" := GenJnlLine."Job Line Disc. Amount (LCY)";
    JobJnlLine."Line Discount Amount" := GenJnlLine."Job Line Discount Amount";
    
    JobJnlLine."Line Discount %" := GenJnlLine."Job Line Discount %";
    
    OnAfterFromGenJnlLineToJnlLine(JobJnlLine,GenJnlLine); <=====================
Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromJnlLineToLedgEntry>
  Raised in: Codeunit<Job Transfer Line>.PROCEDURE<FromJnlLineToLedgEntry>
    Code lines:
    ...
    JobLedgEntry."Unit Cost" := JobJnlLine2."Unit Cost";
    JobLedgEntry."Unit Price" := JobJnlLine2."Unit Price";
    
    JobLedgEntry."Line Discount %" := JobJnlLine2."Line Discount %";
    
    OnAfterFromJnlLineToLedgEntry(JobLedgEntry,JobJnlLine2); <=====================
Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromJnlToPlanningLine>
  Raised in: Codeunit<Job Transfer Line>.PROCEDURE<FromJnlToPlanningLine>
    Code lines:
    ...
    JobPlanningLine."Line Discount %" := JobJnlLine."Line Discount %";
    
    JobPlanningLine."Line Discount Amount (LCY)" := JobJnlLine."Line Discount Amount (LCY)";
    JobPlanningLine."Line Discount Amount" := JobJnlLine."Line Discount Amount";
    
    OnAfterFromJnlToPlanningLine(JobPlanningLine,JobJnlLine); <=====================
Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromJobLedgEntryToPlanningLine>
  Raised in: Codeunit<Job Transfer Line>.PROCEDURE<FromJobLedgEntryToPlanningLine>
    Code lines:
    ...
    JobPlanningLine."Line Discount %" := JobLedgEntry."Line Discount %";
    
    JobPlanningLine."Line Discount Amount (LCY)" := JobLedgEntry."Line Discount Amount (LCY)";
    JobPlanningLine."Line Discount Amount" := JobLedgEntry."Line Discount Amount";
    
    OnAfterFromJobLedgEntryToPlanningLine(JobPlanningLine,JobLedgEntry); <=====================
Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromPlanningLineToJnlLine>
  Raised in: Codeunit<Job Transfer Line>.PROCEDURE<FromPlanningLineToJnlLine>
    Code lines:
    ...
    JobJnlLine."Direct Unit Cost (LCY)" := JobPlanningLine."Direct Unit Cost (LCY)";
    JobJnlLine.VALIDATE("Unit Cost",JobPlanningLine."Unit Cost");
    JobJnlLine.VALIDATE("Unit Price",JobPlanningLine."Unit Price");
    JobJnlLine.VALIDATE("Line Discount %",JobPlanningLine."Line Discount %");
    
    OnAfterFromPlanningLineToJnlLine(JobJnlLine,JobPlanningLine); <=====================
    
    JobJnlLine.UpdateDimensions;
    ItemTrackingMgt.CopyItemTracking(JobPlanningLine.RowID1,JobJnlLine.RowID1,FALSE);
    
Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromPlanningSalesLineToJnlLine>
  Raised in: Codeunit<Job Transfer Line>.PROCEDURE<FromPlanningSalesLineToJnlLine>
    Code lines:
    ...
        JobPlanningLine."Unit Price");
    END ELSE
      ValidateUnitCostAndPrice(JobJnlLine,SalesLine,SalesLine."Unit Cost",JobPlanningLine."Unit Price");
    JobJnlLine.VALIDATE("Line Discount %",SalesLine."Line Discount %");
    
    OnAfterFromPlanningSalesLineToJnlLine(JobJnlLine,JobPlanningLine,SalesHeader,SalesLine,EntryType); <=====================
Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromPurchaseLineToJnlLine>
  Raised in: Codeunit<Job Transfer Line>.PROCEDURE<FromPurchaseLineToJnlLine>
    Code lines:
    ...
      JobJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
      JobJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
      JobJnlLine."Dimension Set ID" := "Dimension Set ID";
    END;
    
    OnAfterFromPurchaseLineToJnlLine(JobJnlLine,PurchHeader,PurchInvHeader,PurchCrMemoHeader,PurchLine,SourceCode); <=====================
Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromSalesHeaderToPlanningLine>
  Raised in: Codeunit<Job Transfer Line>.PROCEDURE<FromSalesHeaderToPlanningLine>
    Code lines:
    ...
      END ELSE BEGIN
        JobPlanningLine."Unit Price (LCY)" := SalesLine."Unit Price" / CurrencyFactor;
        JobPlanningLine."Total Price (LCY)" := JobPlanningLine."Unit Price (LCY)" * JobPlanningLine.Quantity;
        JobPlanningLine."Line Amount (LCY)" := JobPlanningLine."Total Price (LCY)";
      END;
      OnAfterFromSalesHeaderToPlanningLine(JobPlanningLine,SalesLine,CurrencyFactor); <=====================
      JobPlanningLine.MODIFY;
    END;
Codeunit<Job Transfer Line>.PROCEDURE<OnBeforeFromPlanningSalesLineToJnlLine>
  Raised in: Codeunit<Job Transfer Line>.PROCEDURE<FromPlanningSalesLineToJnlLine>
    Code lines:
    OnBeforeFromPlanningSalesLineToJnlLine(JobPlanningLine,SalesHeader,SalesLine,JobJnlLine,EntryType); <=====================
    
    JobJnlLine."Job No." := JobPlanningLine."Job No.";
    JobJnlLine."Job Task No." := JobPlanningLine."Job Task No.";
    JobJnlLine.Type := JobPlanningLine.Type;
    JobTask.GET(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.");
    JobJnlLine."Posting Date" := SalesHeader."Posting Date";
    JobJnlLine."Document Date" := SalesHeader."Document Date";
    JobJnlLine."Document No." := SalesLine."Document No.";
    JobJnlLine."Entry Type" := EntryType;
    ...
Codeunit<Job Jnl.-Check Line>.PROCEDURE<OnBeforeRunCheck>
  Raised in: Codeunit<Job Jnl.-Check Line>.PROCEDURE<RunCheck>
    Code lines:
    OnBeforeRunCheck(JobJnlLine); <=====================
    
    WITH JobJnlLine DO BEGIN
      IF EmptyLine THEN
        EXIT;
      TESTFIELD("Job No.");
      TESTFIELD("Job Task No.");
      TESTFIELD("No.");
      TESTFIELD("Posting Date");
      TESTFIELD(Quantity);
    ...
Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnAfterRunCode>
  Raised in: Codeunit<Job Jnl.-Post Line>.PROCEDURE<Code>
    Code lines:
    ...
        END;
      END ELSE
        JobLedgEntryNo := CreateJobLedgEntry(JobJnlLine2);
    END;
    
    OnAfterRunCode(JobJnlLine2,JobLedgEntryNo); <=====================
    
    EXIT(JobLedgEntryNo);
Codeunit<Cust. Entry-Edit>.PROCEDURE<OnBeforeCustLedgEntryModify>
  Raised in: Codeunit<Cust. Entry-Edit>.<OnRun>
    Code lines:
    ...
      CustLedgEntry.VALIDATE("Applies-to Ext. Doc. No.","Applies-to Ext. Doc. No.");
      CustLedgEntry.VALIDATE("Message to Recipient","Message to Recipient");
      CustLedgEntry."Direct Debit Mandate ID" := "Direct Debit Mandate ID";
    END;
    CustLedgEntry.VALIDATE("Exported to Payment File","Exported to Payment File");
    OnBeforeCustLedgEntryModify(CustLedgEntry,Rec); <=====================
    CustLedgEntry.TESTFIELD("Entry No.","Entry No.");
    CustLedgEntry.MODIFY;
    Rec := CustLedgEntry;
Codeunit<Paypal Account Proxy>.PROCEDURE<GetPaypalAccount>
  Raised in: Table<Native - Gen. Settings Buffer>.PROCEDURE<LoadRecord>
    Code lines:
    ...
    
    GeneralLedgerSetup.GET;
    "Currency Symbol" := GeneralLedgerSetup.GetCurrencySymbol;
    "Amount Rounding Precision" := GetNumberOfDecimals(GeneralLedgerSetup."Amount Rounding Precision");
    
    PaypalAccountProxy.GetPaypalAccount("Paypal Email Address"); <=====================
    
    O365SalesInitialSetup.GET;
    IF PaymentTerms.GET(O365SalesInitialSetup."Default Payment Terms Code") THEN BEGIN
      "Default Payment Terms ID" := PaymentTerms.Id;
    ...
Codeunit<Paypal Account Proxy>.PROCEDURE<SetPaypalAccount>
  Raised in: Table<Native - Gen. Settings Buffer>.PROCEDURE<SaveRecord>
    Code lines:
    IF xRec."Currency Symbol" <> "Currency Symbol" THEN
      UpdateCurrencySymbol;
    
    IF xRec."Paypal Email Address" <> "Paypal Email Address" THEN
      PaypalAccountProxy.SetPaypalAccount("Paypal Email Address",TRUE); <=====================
    
    IF xRec."Country/Region Code" <> "Country/Region Code" THEN
      UpdateCountryRegionCode;
    
    IF xRec."Language Locale ID" <> "Language Locale ID" THEN
    ...
Codeunit<QBO Sync Proxy>.PROCEDURE<GetQBOAuthURL>
  Raised in: Page<Native - QBO Sync Auth>.<OnAfterGetRecord>
    Code lines:
    QBOSyncProxy.GetQBOAuthURL(AuthorizationURL); <=====================
Codeunit<QBO Sync Proxy>.PROCEDURE<GetQBOSyncSettings>
  Raised in: Page<Native - Sync Services Setting>.PROCEDURE<SetCalculatedFields>
    Code lines:
    QBOSyncProxy.GetQBOSyncSettings(QBOSyncTitle,QBOSyncDescription,QBOSyncEnabled); <=====================
    QBDSyncProxy.GetQBDSyncSettings(QBDSyncTitle,QBDSyncDescription,QBDSyncEnabled,QBDSyncSendToEmail);
Codeunit<QBO Sync Proxy>.PROCEDURE<SetQBOSyncEnabled>
  Raised in: Page<Native - Sync Services Setting>.Control<qboSyncEnabled>.<OnValidate>
    Code lines:
    IF QBOSyncEnabled THEN
      ERROR(CantEnableSyncFromHereErr);
    QBOSyncProxy.SetQBOSyncEnabled(QBOSyncEnabled); <=====================
Codeunit<QBD Sync Proxy>.PROCEDURE<GetQBDSyncSettings>
  Raised in: Page<Native - Sync Services Setting>.PROCEDURE<SetCalculatedFields>
    Code lines:
    QBOSyncProxy.GetQBOSyncSettings(QBOSyncTitle,QBOSyncDescription,QBOSyncEnabled);
    QBDSyncProxy.GetQBDSyncSettings(QBDSyncTitle,QBDSyncDescription,QBDSyncEnabled,QBDSyncSendToEmail); <=====================
Codeunit<QBD Sync Proxy>.PROCEDURE<SendEmailInBackground>
  Raised in: Page<Native - Sync Services Setting>.PROCEDURE<SendInstructionsByEmail>
    Code lines:
    QBDSyncProxy.SendEmailInBackground(Handled); <=====================
    IF NOT Handled THEN
      ERROR(SendingEmailErr);
    ODataActionManagement.SetDeleteResponseLocation(ActionContext,PAGE::"Native - Sync Services Setting");
Codeunit<QBD Sync Proxy>.PROCEDURE<SetQBDSyncEnabled>
  Raised in: Page<Native - Sync Services Setting>.Control<qbdSyncEnabled>.<OnValidate>
    Code lines:
    QBDSyncProxy.SetQBDSyncEnabled(QBDSyncEnabled); <=====================
Codeunit<QBD Sync Proxy>.PROCEDURE<SetQBDSyncSendToEmail>
  Raised in: Page<Native - Sync Services Setting>.Control<qbdSyncSendToEmail>.<OnValidate>
    Code lines:
    IF QBDSyncSendToEmail = '' THEN
      ERROR(SendToEmailErr);
    
    QBDSyncProxy.SetQBDSyncSendToEmail(QBDSyncSendToEmail); <=====================
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnAfterCheckGenJnlLine>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<RunCheck>
    Code lines:
    ...
    END;
    
    IF CostAccSetup.GET THEN
      CostAccMgt.CheckValidCCAndCOInGLEntry(GenJnlLine."Dimension Set ID");
    
    OnAfterCheckGenJnlLine(GenJnlLine); <=====================
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckAccountNo>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<CheckAccountNo>
    Code lines:
    OnBeforeCheckAccountNo(GenJnlLine,CheckDone); <=====================
    IF CheckDone THEN
      EXIT;
    
    WITH GenJnlLine DO
      CASE "Account Type" OF
        "Account Type"::"G/L Account":
          BEGIN
            IF ("Gen. Bus. Posting Group" <> '') OR ("Gen. Prod. Posting Group" <> '') OR
               ("VAT Bus. Posting Group" <> '') OR ("VAT Prod. Posting Group" <> '')
    ...
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckBalAccountNo>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<CheckBalAccountNo>
    Code lines:
    OnBeforeCheckBalAccountNo(GenJnlLine,CheckDone); <=====================
    IF CheckDone THEN
      EXIT;
    
    WITH GenJnlLine DO
      CASE "Bal. Account Type" OF
        "Bal. Account Type"::"G/L Account":
          BEGIN
            IF ("Bal. Gen. Bus. Posting Group" <> '') OR ("Bal. Gen. Prod. Posting Group" <> '') OR
               ("Bal. VAT Bus. Posting Group" <> '') OR ("Bal. VAT Prod. Posting Group" <> '')
    ...
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckDimensions>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<CheckDimensions>
    Code lines:
    OnBeforeCheckDimensions(GenJnlLine,CheckDone); <=====================
    IF CheckDone THEN
      EXIT;
    
    WITH GenJnlLine DO BEGIN
      IF NOT DimMgt.CheckDimIDComb("Dimension Set ID") THEN
        ThrowGenJnlLineError(GenJnlLine,Text011,DimMgt.GetDimCombErr);
    
      TableID[1] := DimMgt.TypeToTableID1("Account Type");
      No[1] := "Account No.";
    ...
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckICPartner>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<CheckICPartner>
    Code lines:
    OnBeforeCheckICPartner(AccountType,AccountNo,DocumentType,CheckDone); <=====================
    IF CheckDone THEN
      EXIT;
    
    CASE AccountType OF
      AccountType::Customer:
        IF Customer.GET(AccountNo) THEN BEGIN
          Customer.CheckBlockedCustOnJnls(Customer,DocumentType,TRUE);
          IF (Customer."IC Partner Code" <> '') AND (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND
             ICPartner.GET(Customer."IC Partner Code")
    ...
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeDateNotAllowed>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<CheckDates>
    Code lines:
    ...
        AccountingPeriod.GET(NORMALDATE("Posting Date") + 1);
        AccountingPeriod.TESTFIELD("New Fiscal Year",TRUE);
        AccountingPeriod.TESTFIELD("Date Locked",TRUE);
      END;
    
      OnBeforeDateNotAllowed(GenJnlLine,DateCheckDone); <=====================
      IF NOT DateCheckDone THEN
        IF DateNotAllowed("Posting Date") THEN
          FIELDERROR("Posting Date",Text001);
    
    ...
Codeunit<Vend. Entry-Edit>.PROCEDURE<OnBeforeVendLedgEntryModify>
  Raised in: Codeunit<Vend. Entry-Edit>.<OnRun>
    Code lines:
    ...
      VendLedgEntry.VALIDATE("Message to Recipient","Message to Recipient");
    END;
    VendLedgEntry.VALIDATE("Exported to Payment File","Exported to Payment File");
    VendLedgEntry.VALIDATE("Creditor No.","Creditor No.");
    VendLedgEntry.VALIDATE("Payment Reference","Payment Reference");
    OnBeforeVendLedgEntryModify(VendLedgEntry,Rec); <=====================
    VendLedgEntry.TESTFIELD("Entry No.","Entry No.");
    VendLedgEntry.MODIFY;
    Rec := VendLedgEntry;
Codeunit<Empl. Entry-Edit>.PROCEDURE<OnBeforeEmplLedgEntryModify>
  Raised in: Codeunit<Empl. Entry-Edit>.<OnRun>
    Code lines:
    ...
      EmplLedgEntry.VALIDATE("Message to Recipient","Message to Recipient");
    END;
    EmplLedgEntry.VALIDATE("Exported to Payment File","Exported to Payment File");
    EmplLedgEntry.VALIDATE("Creditor No.","Creditor No.");
    EmplLedgEntry.VALIDATE("Payment Reference","Payment Reference");
    OnBeforeEmplLedgEntryModify(EmplLedgEntry,Rec); <=====================
    EmplLedgEntry.TESTFIELD("Entry No.","Entry No.");
    EmplLedgEntry.MODIFY;
    Rec := EmplLedgEntry;
Codeunit<OAuth 2.0 Mgt.>.PROCEDURE<OnBeforeCreateJsonRequest>
  Raised in: Codeunit<OAuth 2.0 Mgt.>.PROCEDURE<RequestAccessToken>
    Code lines:
    OnBeforeCreateJsonRequest(RequestJson); <=====================
    IF RequestJson <> '' THEN
      IF JSONMgt.InitializeFromString(RequestJson) THEN
        IF JSONMgt.SelectTokenFromRoot(GetTestToken) THEN BEGIN
          ClientID := JSONMgt.GetValue('ClientID');
          ClientSecret := JSONMgt.GetValue('ClientSecret');
        END;
    
    WITH OAuth20Setup DO BEGIN
      Status := Status::Disabled;
    ...
  Raised in: Codeunit<OAuth 2.0 Mgt.>.PROCEDURE<RefreshAccessToken>
    Code lines:
    OnBeforeCreateJsonRequest(RequestJson); <=====================
    IF RequestJson <> '' THEN
      IF JSONMgt.InitializeFromString(RequestJson) THEN
        IF JSONMgt.SelectTokenFromRoot(GetTestToken) THEN BEGIN
          ClientID := JSONMgt.GetValue('ClientID');
          ClientSecret := JSONMgt.GetValue('ClientSecret');
          RefreshToken := JSONMgt.GetValue('RefreshToken');
        END;
    
    WITH OAuth20Setup DO BEGIN
    ...
  Raised in: Codeunit<OAuth 2.0 Mgt.>.PROCEDURE<InvokeSingleRequest>
    Code lines:
    OnBeforeCreateJsonRequest(RequestJson); <=====================
    IF RequestJson <> '' THEN
      IF JSONMgt.InitializeFromString(RequestJson) THEN
        IF JSONMgt.SelectTokenFromRoot(GetTestToken) THEN
          AccessToken := JSONMgt.GetValue('AccessToken');
    
    WITH OAuth20Setup DO BEGIN
      TESTFIELD("Service URL");
      TESTFIELD("Access Token");
    
    ...
Codeunit<Data Privacy Mgmt>.PROCEDURE<OnAfterGetPackageCode>
  Raised in: Codeunit<Data Privacy Mgmt>.PROCEDURE<GetPackageCode>
    Code lines:
    ...
        BEGIN
          PackageCodeKeep := 'USR' + TempEntityNumber;
          PackageCodeTemp := 'US*' + TempEntityNumber;
        END;
      ELSE
        OnAfterGetPackageCode(EntityTypeTableNo,EntityNo,ActionType,PackageCodeTemp,PackageCodeKeep); <=====================
    END;
    
    IF ActionType = ActionType::"Create a data privacy configuration package" THEN
      EXIT(PackageCodeKeep);
    ...
Codeunit<Data Privacy Mgmt>.PROCEDURE<OnAfterSetPrivacyBlocked>
  Raised in: Codeunit<Data Privacy Mgmt>.PROCEDURE<SetPrivacyBlocked>
    Code lines:
    ...
          IF NOT SalespersonPurchaser."Privacy Blocked" THEN BEGIN
            SalespersonPurchaser.VALIDATE("Privacy Blocked",TRUE);
            IF SalespersonPurchaser.MODIFY THEN;
          END;
      ELSE
        OnAfterSetPrivacyBlocked(EntityTypeTableNo,EntityNo); <=====================
    END;
Codeunit<Data Privacy Mgmt>.PROCEDURE<OnCreateData>
  Raised in: Codeunit<Data Privacy Mgmt>.PROCEDURE<CreateData>
    Code lines:
    ...
              RecRef.GETTABLE(UserSetup);
              CreateRelatedData(RecRef,EntityTypeTableNo,EntityNo,PackageCode,ActionType,GeneratePreview,DataSensitivityOption);
            END;
        END;
      ELSE
        OnCreateData(EntityTypeTableNo,EntityNo,PackageCode,ActionType,GeneratePreview,DataSensitivityOption); <=====================
    END;
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterGLFinishPosting>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<Code>
    Code lines:
    ...
      CreateDeferralScheduleFromGL(GenJnlLine,Balancing);
    
      IsTransactionConsistent := FinishPosting;
    END;
    
    OnAfterGLFinishPosting(GlobalGLEntry,GenJnlLine,IsTransactionConsistent,FirstTransactionNo); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitGLRegister>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<StartPosting>
    Code lines:
    ...
      GLReg."Source Code" := "Source Code";
      GLReg."Journal Batch Name" := "Journal Batch Name";
      GLReg."User ID" := USERID;
      IsGLRegInserted := FALSE;
    
      OnAfterInitGLRegister(GLReg,GenJnlLine); <=====================
    
      GetCurrencyExchRate(GenJnlLine);
      TempGLEntryBuf.DELETEALL;
      CalculateCurrentBalance(
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInsertGlobalGLEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<FinishPosting>
    Code lines:
    ...
          GlobalGLEntry."Add.-Currency Debit Amount" := 0;
          GlobalGLEntry."Add.-Currency Credit Amount" := 0;
        END;
        GlobalGLEntry."Prior-Year Entry" := GlobalGLEntry."Posting Date" < FiscalYearStartDate;
        GlobalGLEntry.INSERT(TRUE);
        OnAfterInsertGlobalGLEntry(GlobalGLEntry); <=====================
      UNTIL TempGLEntryBuf.NEXT = 0;
    
      GLReg."To VAT Entry No." := NextVATEntryNo - 1;
      GLReg."To Entry No." := GlobalGLEntry."Entry No.";
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostGLAcc>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostGLAcc>
    Code lines:
    ...
      PostVAT(GenJnlLine,GLEntry,VATPostingSetup);
      DeferralPosting("Deferral Code","Source Code","Account No.",GenJnlLine,Balancing);
      OnMoveGenJournalLine(GLEntry.RECORDID);
    END;
    
    OnAfterPostGLAcc(GenJnlLine); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterRunWithCheck>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<RunWithCheck>
    Code lines:
    GenJnlLine.COPY(GenJnlLine2);
    Code(GenJnlLine,TRUE);
    OnAfterRunWithCheck(GenJnlLine); <=====================
    GenJnlLine2 := GenJnlLine;
    EXIT(GLEntryNo);
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterRunWithoutCheck>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<RunWithoutCheck>
    Code lines:
    GenJnlLine.COPY(GenJnlLine2);
    Code(GenJnlLine,FALSE);
    OnAfterRunWithoutCheck(GenJnlLine); <=====================
    GenJnlLine2 := GenJnlLine;
    EXIT(GLEntryNo);
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCheckPurchExtDocNo>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostVend>
    Code lines:
    ...
    
      // Check the document no.
      IF "Recurring Method" = 0 THEN
        IF IsNotPayment("Document Type") THEN BEGIN
          GenJnlCheckLine.CheckPurchDocNoIsNotUsed("Document Type","Document No.");
          OnBeforeCheckPurchExtDocNo(GenJnlLine,VendLedgEntry,CVLedgEntryBuf,CheckExtDocNoHandled); <=====================
          IF NOT CheckExtDocNoHandled THEN
            CheckPurchExtDocNo(GenJnlLine);
        END;
    
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCode>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<Code>
    Code lines:
    OnBeforeCode(GenJnlLine,CheckLine); <=====================
    
    GetGLSourceCode;
    
    WITH GenJnlLine DO BEGIN
      IF EmptyLine THEN BEGIN
        InitLastDocDate(GenJnlLine);
        EXIT;
      END;
    
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeContinuePosting>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<ContinuePosting>
    Code lines:
    OnBeforeContinuePosting(GenJnlLine); <=====================
    
    IF NextTransactionNoNeeded(GenJnlLine) THEN BEGIN
      CheckPostUnrealizedVAT(GenJnlLine,FALSE);
      NextTransactionNo := NextTransactionNo + 1;
      InitLastDocDate(GenJnlLine);
      FirstNewVATEntryNo := NextVATEntryNo;
    END;
    
    GetCurrencyExchRate(GenJnlLine);
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertGLEntryBuffer>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertGLEntry>
    Code lines:
    ...
      UpdateDebitCredit(GenJnlLine.Correction);
    END;
    
    TempGLEntryBuf := GLEntry;
    
    OnBeforeInsertGLEntryBuffer(TempGLEntryBuf,GenJnlLine); <=====================
    
    TempGLEntryBuf.INSERT;
    
    IF FirstEntryNo = 0 THEN
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePostGenJnlLine>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostGenJnlLine>
    Code lines:
    OnBeforePostGenJnlLine(GenJnlLine); <=====================
    
    WITH GenJnlLine DO
      CASE "Account Type" OF
        "Account Type"::"G/L Account":
          PostGLAcc(GenJnlLine,Balancing);
        "Account Type"::Customer:
          PostCust(GenJnlLine,Balancing);
        "Account Type"::Vendor:
          PostVend(GenJnlLine,Balancing);
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeStartPosting>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<StartPosting>
    Code lines:
    OnBeforeStartPosting(GenJnlLine); <=====================
    
    WITH GenJnlLine DO BEGIN
      InitNextEntryNo;
      FirstTransactionNo := NextTransactionNo;
    
      InitLastDocDate(GenJnlLine);
      CurrentBalance := 0;
    
      AccountingPeriod.RESET;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnNextTransactionNoNeeded>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<NextTransactionNoNeeded>
    Code lines:
    WITH GenJnlLine DO BEGIN
      NewTransaction :=
        (LastDocType <> "Document Type") OR (LastDocNo <> "Document No.") OR
        (LastDate <> "Posting Date") OR ((CurrentBalance = 0) AND (TotalAddCurrAmount = 0)) AND NOT "System-Created Entry";
      IF NOT NewTransaction THEN
        OnNextTransactionNoNeeded(GenJnlLine,LastDocType,LastDocNo,LastDate,CurrentBalance,TotalAddCurrAmount,NewTransaction); <=====================
      EXIT(NewTransaction);
    END;
Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<OnBeforeCreateGenJnlDataExchLine>
  Raised in: Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<ExportGenJnlLine>
    Code lines:
    ...
    Window.OPEN(ProgressMsg);
    REPEAT
      LineNo += 1;
      Window.UPDATE(1,LineNo);
    
      OnBeforeCreateGenJnlDataExchLine(DataExch,GenJnlLine2,LineNo,LineAmount,TotalAmount,TransferDate,HandledGenJnlDataExchLine); <=====================
      IF NOT HandledGenJnlDataExchLine THEN
        CreateGenJnlDataExchLine(DataExch."Entry No.",GenJnlLine2,LineNo);
    
      CreditTransferEntry.CreateNew(CreditTransferRegister."No.",LineNo,
    ...
Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<OnBeforeInsertPmtExportDataJnlFromGenJnlLine>
  Raised in: Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<PreparePaymentExportDataJnl>
    Code lines:
    ...
      "Line No." := LineNo;
      "Payment Reference" := GenJnlLine."Payment Reference";
      IF PaymentMethod.GET(GenJnlLine."Payment Method Code") THEN
        "Data Exch. Line Def Code" := PaymentMethod."Pmt. Export Line Definition";
      "Recipient Creditor No." := GenJnlLine."Creditor No.";
      OnBeforeInsertPmtExportDataJnlFromGenJnlLine(TempPaymentExportData,GenJnlLine,GeneralLedgerSetup); <=====================
      INSERT(TRUE);
    END;
Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<OnBeforePaymentExport>
  Raised in: Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<ExportGenJnlLine>
    Code lines:
    ...
        GenJnlLine2."Posting Date",GenJnlLine2."Currency Code",GenJnlLine2.Amount,'',
        GenJnlLine2."Recipient Bank Account",GenJnlLine2."Message to Recipient");
    UNTIL GenJnlLine2.NEXT = 0;
    Window.CLOSE;
    
    OnBeforePaymentExport(GenJnlLine."Bal. Account No.",DataExch."Entry No.",LineNo,TotalAmount,TransferDate,HandledPaymentExport); <=====================
    IF NOT HandledPaymentExport THEN
      PaymentExportMgt.ExportToFile(DataExch."Entry No.");
    
    CODEUNIT.RUN(CODEUNIT::"Exp. User Feedback Gen. Jnl.",DataExch);
Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<OnCheckGenJnlLine>
  Raised in: Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<CheckGenJnlLine>
    Code lines:
    GenJnlLine.DeletePaymentFileBatchErrors;
    GenJnlLine2.COPYFILTERS(GenJnlLine);
    IF GenJnlLine2.FINDSET THEN
      REPEAT
        CODEUNIT.RUN(CODEUNIT::"Payment Export Gen. Jnl Check",GenJnlLine2);
        OnCheckGenJnlLine(GenJnlLine2); <=====================
      UNTIL GenJnlLine2.NEXT = 0;
    
    IF GenJnlLine2.HasPaymentFileErrorsInBatch THEN BEGIN
      COMMIT;
    ...
Codeunit<Pmt Export Mgt Vend Ledg Entry>.PROCEDURE<OnBeforeCreateVendLedgerDataExchLine>
  Raised in: Codeunit<Pmt Export Mgt Vend Ledg Entry>.PROCEDURE<ExportVendLedgerEntry>
    Code lines:
    ...
    PaymentExportMgt.CreateDataExch(DataExch,VendorLedgerEntry2."Bal. Account No.");
    Window.OPEN(ProgressMsg);
    REPEAT
      LineNo += 1;
      Window.UPDATE(1,LineNo);
      OnBeforeCreateVendLedgerDataExchLine(DataExch,VendorLedgerEntry2,LineNo,LineAmount, <=====================
        TotalAmount,TransferDate,HandledGenJnlDataExchLine);
      IF NOT HandledGenJnlDataExchLine THEN
        CreateVendLedgerDataExchLine(DataExch."Entry No.",VendorLedgerEntry2,LineNo);
    UNTIL VendorLedgerEntry2.NEXT = 0;
    ...
Codeunit<Pmt Export Mgt Vend Ledg Entry>.PROCEDURE<OnBeforeInsertPmtExportDataJnlFromVendorLedgerEntry>
  Raised in: Codeunit<Pmt Export Mgt Vend Ledg Entry>.PROCEDURE<PreparePaymentExportDataVLE>
    Code lines:
    ...
      "Line No." := LineNo;
      "Payment Reference" := VendorLedgerEntry."Payment Reference";
      IF PaymentMethod.GET(VendorLedgerEntry."Payment Method Code") THEN
        "Data Exch. Line Def Code" := PaymentMethod."Pmt. Export Line Definition";
      "Recipient Creditor No." := VendorLedgerEntry."Creditor No.";
      OnBeforeInsertPmtExportDataJnlFromVendorLedgerEntry(TempPaymentExportData,VendorLedgerEntry,GeneralLedgerSetup); <=====================
      INSERT(TRUE);
    END;
Codeunit<Pmt Export Mgt Vend Ledg Entry>.PROCEDURE<OnBeforePaymentExportVendorLedgerEntry>
  Raised in: Codeunit<Pmt Export Mgt Vend Ledg Entry>.PROCEDURE<ExportVendLedgerEntry>
    Code lines:
    ...
      IF NOT HandledGenJnlDataExchLine THEN
        CreateVendLedgerDataExchLine(DataExch."Entry No.",VendorLedgerEntry2,LineNo);
    UNTIL VendorLedgerEntry2.NEXT = 0;
    Window.CLOSE;
    
    OnBeforePaymentExportVendorLedgerEntry(VendorLedgerEntry."Bal. Account No.",DataExch."Entry No.", <=====================
      LineNo,TotalAmount,TransferDate,HandledPaymentExportVendLedgerEntry);
    IF NOT HandledPaymentExportVendLedgerEntry THEN
      PaymentExportMgt.ExportToFile(DataExch."Entry No.")
Codeunit<Pmt Export Mgt Cust Ledg Entry>.PROCEDURE<OnBeforeCreateCustLedgerDataExchLine>
  Raised in: Codeunit<Pmt Export Mgt Cust Ledg Entry>.PROCEDURE<ExportCustLedgerEntry>
    Code lines:
    ...
    PaymentExportMgt.CreateDataExch(DataExch,CustLedgerEntry2."Bal. Account No.");
    Window.OPEN(ProgressMsg);
    REPEAT
      LineNo += 1;
      Window.UPDATE(1,LineNo);
      OnBeforeCreateCustLedgerDataExchLine(DataExch,CustLedgerEntry2,LineNo,LineAmount, <=====================
        TotalAmount,TransferDate,HandledGenJnlDataExchLine);
      IF NOT HandledGenJnlDataExchLine THEN
        CreateCustLedgerDataExchLine(DataExch."Entry No.",CustLedgerEntry2,LineNo);
    UNTIL CustLedgerEntry2.NEXT = 0;
    ...
Codeunit<Pmt Export Mgt Cust Ledg Entry>.PROCEDURE<OnBeforePaymentExportCustLedgerEntry>
  Raised in: Codeunit<Pmt Export Mgt Cust Ledg Entry>.PROCEDURE<ExportCustLedgerEntry>
    Code lines:
    ...
        TotalAmount,TransferDate,HandledGenJnlDataExchLine);
      IF NOT HandledGenJnlDataExchLine THEN
        CreateCustLedgerDataExchLine(DataExch."Entry No.",CustLedgerEntry2,LineNo);
    UNTIL CustLedgerEntry2.NEXT = 0;
    Window.CLOSE;
    OnBeforePaymentExportCustLedgerEntry(CustLedgerEntry."Bal. Account No.",DataExch."Entry No.", <=====================
      LineNo,TotalAmount,TransferDate,HandledPaymentExportVendLedgerEntry);
    IF NOT HandledPaymentExportVendLedgerEntry THEN
      PaymentExportMgt.ExportToFile(DataExch."Entry No.")
Codeunit<Payment Export Gen. Jnl Check>.PROCEDURE<OnPaymentExportGenJnlCheck>
  Raised in: Codeunit<Payment Export Gen. Jnl Check>.PROCEDURE<CheckPaymentExportGenJnl>
    Code lines:
    ...
          ("Bank Payment Type" <> "Bank Payment Type"::"Electronic Payment-IAT"))
      THEN
        InsertPaymentFileError(STRSUBSTNO(WrongBankPaymentTypeErr,FIELDCAPTION("Bank Payment Type"),
            "Bank Payment Type"::"Electronic Payment","Bank Payment Type"::"Electronic Payment-IAT"));
    
      OnPaymentExportGenJnlCheck(GenJournalLine,Handled); <=====================
      IF NOT Handled THEN BEGIN
        IF NOT ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::Employee])
        THEN
          InsertPaymentFileError(MustBeVendorEmployeeOrCustomerErr);
    ...
Codeunit<Pmt. Export Vend. Ledger Check>.PROCEDURE<OnCheckEmptyPmtInfoVendorLedgerEntry>
  Raised in: Codeunit<Pmt. Export Vend. Ledger Check>.PROCEDURE<CheckEmptyPmtInfo>
    Code lines:
    VendLedgEntry2.COPY(VendLedgEntry);
    VendLedgEntry2.SETRANGE("Recipient Bank Account",'');
    VendLedgEntry2.SETRANGE("Creditor No.",'');
    
    OnCheckEmptyPmtInfoVendorLedgerEntry(VendLedgEntry2,Handled); <=====================
    
    IF NOT Handled THEN
      IF NOT VendLedgEntry2.ISEMPTY THEN
        ERROR(EmptyPaymentDetailsErr,
          VendLedgEntry2.FIELDCAPTION("Recipient Bank Account"),VendLedgEntry2.FIELDCAPTION("Creditor No."));
Codeunit<Pmt. Export Vend. Ledger Check>.PROCEDURE<OnPmtExportVendorLedgerCheck>
  Raised in: Codeunit<Pmt. Export Vend. Ledger Check>.<OnRun>
    Code lines:
    ...
    CheckEmptyPmtInfo(Rec);
    CheckBalAccountType(Rec);
    CheckBankAccount(Rec);
    CheckBalAccountNo(Rec);
    
    OnPmtExportVendorLedgerCheck(Rec); <=====================
Codeunit<Pmt. Export Cust. Ledger Check>.PROCEDURE<OnPmtExportCustLedgerCheck>
  Raised in: Codeunit<Pmt. Export Cust. Ledger Check>.<OnRun>
    Code lines:
    ...
    CheckPaymentMethod(Rec);
    CheckBalAccountType(Rec);
    CheckBankAccount(Rec);
    CheckBalAccountNo(Rec);
    
    OnPmtExportCustLedgerCheck(Rec); <=====================
Codeunit<Read Data Exch. from File>.PROCEDURE<OnBeforeFileImport>
  Raised in: Codeunit<Read Data Exch. from File>.<OnRun>
    Code lines:
    OnBeforeFileImport(TempBlob,"File Name"); <=====================
    
    IF NOT TempBlob.Blob.HASVALUE THEN
      "File Name" := COPYSTR(FileMgt.BLOBImportWithFilter(TempBlob,ImportBankStmtTxt,'',FileFilterTxt,FileFilterExtensionTxt),1,250);
    
    IF "File Name" <> '' THEN
      "File Content" := TempBlob.Blob;
Codeunit<Process Gen. Journal  Lines>.PROCEDURE<OnBeforeUpdateGenJnlLines>
  Raised in: Codeunit<Process Gen. Journal  Lines>.PROCEDURE<UpdateGenJournalLines>
    Code lines:
    OnBeforeUpdateGenJnlLines(GenJournalLineTemplate); <=====================
    
    GenJournalLine.SETRANGE("Journal Template Name",GenJournalLineTemplate."Journal Template Name");
    GenJournalLine.SETRANGE("Journal Batch Name",GenJournalLineTemplate."Journal Batch Name");
    GenJournalLine.SETFILTER("Line No.",'>%1',GenJournalLineTemplate."Line No.");
    IF GenJournalLine.FINDSET THEN BEGIN
      DocNo := GenJournalLineTemplate."Document No.";
      REPEAT
        GenJournalLine.VALIDATE("Document No.",DocNo);
        GenJournalLine.MODIFY(TRUE);
    ...
Codeunit<Match Bank Pmt. Appl.>.PROCEDURE<OnAfterMatchBankPayments>
  Raised in: Codeunit<Match Bank Pmt. Appl.>.<OnRun>
    Code lines:
    BankAccReconciliationLine.FilterBankRecLines(Rec);
    IF BankAccReconciliationLine.FINDFIRST THEN BEGIN
      MatchBankPayments.SetApplyEntries(TRUE);
      MatchBankPayments.RUN(BankAccReconciliationLine);
    END;
    OnAfterMatchBankPayments(Rec); <=====================
Codeunit<Exp. Pre-Mapping Gen. Jnl.>.PROCEDURE<OnBeforeInsertPaymentExoprtData>
  Raised in: Codeunit<Exp. Pre-Mapping Gen. Jnl.>.PROCEDURE<PreparePaymentExportDataJnl>
    Code lines:
    ...
      "Payment Reference" := GenJnlLine."Payment Reference";
      IF PaymentMethod.GET(GenJnlLine."Payment Method Code") THEN
        "Data Exch. Line Def Code" := PaymentMethod."Pmt. Export Line Definition";
      "Recipient Creditor No." := GenJnlLine."Creditor No.";
    
      OnBeforeInsertPaymentExoprtData(PaymentExportData,GenJnlLine,GeneralLedgerSetup); <=====================
    
      INSERT(TRUE);
    END;
Codeunit<Get Bank Stmt. Line Candidates>.PROCEDURE<OnBeforeTransferCandidatestoAppliedPmtEntries>
  Raised in: Codeunit<Get Bank Stmt. Line Candidates>.PROCEDURE<TransferCandidatestoAppliedPmtEntries>
    Code lines:
    OnBeforeTransferCandidatestoAppliedPmtEntries(BankAccReconLine,TempBankStmtMatchingBuffer,Handled); <=====================
    IF NOT Handled THEN
      GetCandidateRanking(BankAccReconLine,TempBankStmtMatchingBuffer);
    BankAccount.GET(BankAccReconLine."Bank Account No.");
    
    PaymentApplicationProposal.RESET;
    TempBankStmtMatchingBuffer.RESET;
    TempBankStmtMatchingBuffer.SETRANGE("One to Many Match",FALSE);
    IF TempBankStmtMatchingBuffer.FINDSET THEN
      REPEAT
    ...
Codeunit<Http Web Request Mgt.>.PROCEDURE<OnBeforeInvokeTestJSONRequest>
  Raised in: Codeunit<Http Web Request Mgt.>.PROCEDURE<InvokeJSONRequest>
    Code lines:
    IF JSONMgt.InitializeFromString(RequestJson) THEN
      IF JSONMgt.SelectTokenFromRoot(OAuth20Mgt.GetTestToken) THEN BEGIN
        OnBeforeInvokeTestJSONRequest(Result,RequestJson,ResponseJson,HttpError); <=====================
        EXIT(Result);
      END;
    
    ResponseJson := '';
    HttpError := '';
    
    IF ProcessJsonRequestResponse(RequestJson,ResponseJson) THEN
    ...
Codeunit<Http Web Request Mgt.>.PROCEDURE<OnOverrideUrl>
  Raised in: Codeunit<Http Web Request Mgt.>.PROCEDURE<Initialize>
    Code lines:
    IF NOT PermissionManager.SoftwareAsAService THEN
      OnOverrideUrl(URL); <=====================
    
    HttpWebRequest := HttpWebRequest.Create(URL);
    SetDefaults;
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterMultiplyAmounts>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<MultiplyAmounts>
    Code lines:
    ...
          "Job Line Discount Amount" := "Job Line Discount Amount" * Factor;
          "Job Line Disc. Amount (LCY)" := "Job Line Disc. Amount (LCY)" * Factor;
        END;
      END;
    
    OnAfterMultiplyAmounts(GenJnlLine2,Factor); <=====================
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterPostAllocations>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<PostAllocations>
    Code lines:
    ...
            END;
          UNTIL GenJnlAlloc.NEXT = 0;
        END;
      END;
    
    OnAfterPostAllocations(AllocateGenJnlLine,Reversing); <=====================
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterPostGenJnlLine>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<PostGenJournalLine>
    Code lines:
    ...
      GenJnlLine5.COPY(GenJournalLine);
      PrepareGenJnlLineAddCurr(GenJnlLine5);
      UpdateIncomingDocument(GenJnlLine5);
      OnBeforePostGenJnlLine(GenJnlLine5);
      GenJnlPostLine.RunWithoutCheck(GenJnlLine5);
      OnAfterPostGenJnlLine(GenJnlLine5); <=====================
      IF (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND (CurrentICPartner <> '') AND
         ("IC Direction" = "IC Direction"::Outgoing) AND (ICTransactionNo > 0)
      THEN
        ICOutboxMgt.CreateOutboxJnlLine(ICTransactionNo,1,GenJnlLine5);
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeCheckBalance>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<CheckBalance>
    Code lines:
    OnBeforeCheckBalance( <=====================
      GenJnlTemplate,GenJnlLine,CurrentBalance,CurrentBalanceReverse,CurrencyBalance,
      StartLineNo,StartLineNoReverse,LastDocType,LastDocNo,LastDate,LastCurrencyCode);
    
    WITH GenJnlLine DO BEGIN
      IF CurrentBalance <> 0 THEN BEGIN
        GET("Journal Template Name","Journal Batch Name",StartLineNo);
        IF GenJnlTemplate."Force Doc. Balance" THEN
          ERROR(
            Text012 +
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeIfCheckBalance>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<ProcessBalanceOfLines>
    Code lines:
    ...
            DocCorrection := Correction;
          END ELSE
            IF Correction <> DocCorrection THEN
              FIELDERROR(Correction,Text008);
        END;
        OnBeforeIfCheckBalance(GenJnlTemplate,GenJnlLine,LastDocType,LastDocNo,LastDate,ForceCheckBalance); <=====================
        IF ForceCheckBalance OR ("Posting Date" <> LastDate) OR GenJnlTemplate."Force Doc. Balance" AND
           (("Document Type" <> LastDocType) OR ("Document No." <> LastDocNo))
        THEN BEGIN
          CheckBalance(GenJnlLine);
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforePostGenJnlLine>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<PostGenJournalLine>
    Code lines:
    ...
      MakeRecurringTexts(GenJournalLine);
      CheckDocumentNo(GenJournalLine);
      GenJnlLine5.COPY(GenJournalLine);
      PrepareGenJnlLineAddCurr(GenJnlLine5);
      UpdateIncomingDocument(GenJnlLine5);
      OnBeforePostGenJnlLine(GenJnlLine5); <=====================
      GenJnlPostLine.RunWithoutCheck(GenJnlLine5);
      OnAfterPostGenJnlLine(GenJnlLine5);
      IF (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND (CurrentICPartner <> '') AND
         ("IC Direction" = "IC Direction"::Outgoing) AND (ICTransactionNo > 0)
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeUpdateAndDeleteLines>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<UpdateAndDeleteLines>
    Code lines:
    OnBeforeUpdateAndDeleteLines(GenJnlLine); <=====================
    
    ClearDataExchEntries(GenJnlLine);
    IF GenJnlTemplate.Recurring THEN BEGIN
      // Recurring journal
      LineCount := 0;
      GenJnlLine2.COPY(GenJnlLine);
      GenJnlLine2.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Line No.");
      GenJnlLine2.FINDSET(TRUE,FALSE);
      REPEAT
    ...
Codeunit<Customer Mgt.>.PROCEDURE<SkipSettingFilter>
  Raised in: Codeunit<Customer Mgt.>.PROCEDURE<GetCurrentYearFilter>
    Code lines:
    SkipSettingFilter(SkipSetFilter); <=====================
    IF SkipSetFilter THEN
      EXIT(CustDateFilter);
    
    IF FiscalYearTotals THEN
      DateFilterCalc.CreateAccountingPeriodFilter(CustDateFilter,CustDateName,WORKDATE,0)
    ELSE
      DateFilterCalc.CreateFiscalYearFilter(CustDateFilter,CustDateName,WORKDATE,0);
    
    EXIT(CustDateFilter);
Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnAfterInsertAllSalesInvLines>
  Raised in: Codeunit<Sales-Quote to Invoice>.<OnRun>
    Code lines:
    ...
    
    SalesInvoiceLine.LOCKTABLE;
    
    CreateSalesInvoiceHeader(SalesInvoiceHeader,Rec);
    CreateSalesInvoiceLines(SalesInvoiceHeader,Rec);
    OnAfterInsertAllSalesInvLines(SalesInvoiceLine,Rec); <=====================
    
    SalesSetup.GET;
    IF SalesSetup."Default Posting Date" = SalesSetup."Default Posting Date"::"No Date" THEN BEGIN
      SalesInvoiceHeader."Posting Date" := 0D;
    ...
Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnAfterInsertSalesInvoiceLine>
  Raised in: Codeunit<Sales-Quote to Invoice>.PROCEDURE<CreateSalesInvoiceLines>
    Code lines:
    ...
          SalesInvoiceLine."Document No." := SalesInvoiceHeader."No.";
          IF SalesInvoiceLine."No." <> '' THEN
            SalesInvoiceLine.DefaultDeferralCode;
          OnBeforeInsertSalesInvoiceLine(SalesQuoteLine,SalesQuoteHeader,SalesInvoiceLine,SalesInvoiceHeader);
          SalesInvoiceLine.INSERT;
          OnAfterInsertSalesInvoiceLine(SalesQuoteLine,SalesQuoteHeader,SalesInvoiceLine,SalesInvoiceHeader); <=====================
        UNTIL SalesQuoteLine.NEXT = 0;
    
      MoveLineCommentsToSalesInvoice(SalesInvoiceHeader,SalesQuoteHeader);
    
    ...
Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnAfterOnRun>
  Raised in: Codeunit<Sales-Quote to Invoice>.<OnRun>
    Code lines:
    ...
    DELETE;
    
    COMMIT;
    CLEAR(CustCheckCrLimit);
    
    OnAfterOnRun(Rec,SalesInvoiceHeader); <=====================
Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnBeforeDeletionOfQuote>
  Raised in: Codeunit<Sales-Quote to Invoice>.<OnRun>
    Code lines:
    ...
      SalesInvoiceHeader.MODIFY;
    END;
    UpdateEmailParameters(SalesInvoiceHeader);
    UpdateCouponClaims(SalesInvoiceHeader);
    
    OnBeforeDeletionOfQuote(Rec,SalesInvoiceHeader); <=====================
    
    DELETELINKS;
    DELETE;
    
    ...
Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnBeforeInsertSalesInvoiceHeader>
  Raised in: Codeunit<Sales-Quote to Invoice>.PROCEDURE<CreateSalesInvoiceHeader>
    Code lines:
    ...
      IF "Posting Date" <> 0D THEN
        SalesInvoiceHeader."Posting Date" := "Posting Date"
      ELSE
        SalesInvoiceHeader."Posting Date" := WORKDATE;
      SalesInvoiceHeader.InitFromSalesHeader(SalesQuoteHeader);
      OnBeforeInsertSalesInvoiceHeader(SalesInvoiceHeader,SalesQuoteHeader); <=====================
      SalesInvoiceHeader.MODIFY;
    END;
Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnBeforeInsertSalesInvoiceLine>
  Raised in: Codeunit<Sales-Quote to Invoice>.PROCEDURE<CreateSalesInvoiceLines>
    Code lines:
    ...
          SalesInvoiceLine := SalesQuoteLine;
          SalesInvoiceLine."Document Type" := SalesInvoiceHeader."Document Type";
          SalesInvoiceLine."Document No." := SalesInvoiceHeader."No.";
          IF SalesInvoiceLine."No." <> '' THEN
            SalesInvoiceLine.DefaultDeferralCode;
          OnBeforeInsertSalesInvoiceLine(SalesQuoteLine,SalesQuoteHeader,SalesInvoiceLine,SalesInvoiceHeader); <=====================
          SalesInvoiceLine.INSERT;
          OnAfterInsertSalesInvoiceLine(SalesQuoteLine,SalesQuoteHeader,SalesInvoiceLine,SalesInvoiceHeader);
        UNTIL SalesQuoteLine.NEXT = 0;
    
    ...
Codeunit<Release Incoming Document>.PROCEDURE<OnAfterCreateDocFromIncomingDocFail>
  Raised in: Codeunit<Release Incoming Document>.PROCEDURE<Fail>
    Code lines:
    ...
      Status := Status::Failed;
    
      MODIFY(TRUE);
      COMMIT;
    
      OnAfterCreateDocFromIncomingDocFail(IncomingDocument); <=====================
    END;
Codeunit<Release Incoming Document>.PROCEDURE<OnAfterCreateDocFromIncomingDocSuccess>
  Raised in: Codeunit<Release Incoming Document>.PROCEDURE<Create>
    Code lines:
    ...
    
      Status := Status::Created;
    
      MODIFY(TRUE);
      COMMIT;
      OnAfterCreateDocFromIncomingDocSuccess(IncomingDocument); <=====================
    END;
Codeunit<Release Incoming Document>.PROCEDURE<OnAfterReleaseIncomingDoc>
  Raised in: Codeunit<Release Incoming Document>.<OnRun>
    Code lines:
    ...
    "Released Date-Time" := CURRENTDATETIME;
    "Released By User ID" := USERSECURITYID;
    
    MODIFY(TRUE);
    
    OnAfterReleaseIncomingDoc(Rec); <=====================
Codeunit<Send Incoming Document to OCR>.PROCEDURE<OnAfterIncomingDocReadyForOCR>
  Raised in: Codeunit<Send Incoming Document to OCR>.PROCEDURE<SendToJobQueue>
    Code lines:
    ...
    IncomingDocument."OCR Status" := IncomingDocument."OCR Status"::Ready;
    IncomingDocument.MODIFY;
    
    CODEUNIT.RUN(CODEUNIT::"Release Incoming Document",IncomingDocument);
    ShowMessage(DocumentHasBeenScheduledTxt);
    OnAfterIncomingDocReadyForOCR(IncomingDocument); <=====================
Codeunit<Send Incoming Document to OCR>.PROCEDURE<OnAfterIncomingDocReceivedFromOCR>
  Raised in: Codeunit<Send Incoming Document to OCR>.PROCEDURE<SetStatusToReceived>
    Code lines:
    ...
      "OCR Status" := "OCR Status"::Success;
      "OCR Process Finished" := TRUE;
      MODIFY;
      COMMIT;
    
      OnAfterIncomingDocReceivedFromOCR(IncomingDocument); <=====================
    END;
  Raised in: Codeunit<Send Incoming Document to OCR>.PROCEDURE<SetStatusToFailed>
    Code lines:
    ...
      "OCR Status" := "OCR Status"::Error;
      "OCR Process Finished" := TRUE;
      MODIFY;
      COMMIT;
    
      OnAfterIncomingDocReceivedFromOCR(IncomingDocument); <=====================
    END;
Codeunit<Send Incoming Document to OCR>.PROCEDURE<OnAfterIncomingDocSentToOCR>
  Raised in: Codeunit<Send Incoming Document to OCR>.PROCEDURE<SendDocToOCR>
    Code lines:
    ...
      IncomingDocumentAttachment.SendToOCR;
      IncomingDocument."OCR Status" := IncomingDocument."OCR Status"::Sent;
      IncomingDocument.MODIFY;
    END;
    COMMIT;
    OnAfterIncomingDocSentToOCR(IncomingDocument); <=====================
Codeunit<Telemetry Management>.PROCEDURE<OnBeforeTelemetryScheduleTask>
  Raised in: Codeunit<Telemetry Management>.PROCEDURE<CanScheduleTask>
    Code lines:
    OnBeforeTelemetryScheduleTask(DoNotScheduleTask); <=====================
    EXIT(NOT DoNotScheduleTask AND TASKSCHEDULER.CANCREATETASK);
Codeunit<Generate Master Data Telemetry>.PROCEDURE<OnMasterDataTelemetry>
  Raised in: Codeunit<Generate Master Data Telemetry>.<OnRun>
    Code lines:
    OnMasterDataTelemetry; <=====================
Codeunit<Generate Activity Telemetry>.PROCEDURE<OnActivityTelemetry>
  Raised in: Codeunit<Generate Activity Telemetry>.<OnRun>
    Code lines:
    OnActivityTelemetry; <=====================
Codeunit<Batch Processing Mgt.>.PROCEDURE<OnAfterBatchProcessing>
  Raised in: Codeunit<Batch Processing Mgt.>.PROCEDURE<ProcessRecord>
    Code lines:
    OnBeforeBatchProcessing(RecRef,BatchConfirm);
    
    ProcessingResult := InvokeProcessing(RecRef);
    
    OnAfterBatchProcessing(RecRef,ProcessingResult); <=====================
    
    EXIT(ProcessingResult);
Codeunit<Batch Processing Mgt.>.PROCEDURE<OnBeforeBatchProcessing>
  Raised in: Codeunit<Batch Processing Mgt.>.PROCEDURE<ProcessRecord>
    Code lines:
    OnBeforeBatchProcessing(RecRef,BatchConfirm); <=====================
    
    ProcessingResult := InvokeProcessing(RecRef);
    
    OnAfterBatchProcessing(RecRef,ProcessingResult);
    
    EXIT(ProcessingResult);
Codeunit<Batch Processing Mgt.>.PROCEDURE<OnCustomProcessing>
  Raised in: Codeunit<Batch Processing Mgt.>.PROCEDURE<RunCustomProcessing>
    Code lines:
    OnCustomProcessing(RecRefCustomerProcessing,Handled); <=====================
    IsCustomProcessingHandled := Handled;
Codeunit<Batch Processing Mgt.>.PROCEDURE<OnVerifyRecord>
  Raised in: Codeunit<Batch Processing Mgt.>.PROCEDURE<CanProcessRecord>
    Code lines:
    Result := TRUE;
    OnVerifyRecord(RecRef,Result); <=====================
    
    EXIT(Result);
Codeunit<Doc. Exch. Service Mgt.>.PROCEDURE<OnAfterIncomingDocReceivedFromDocExch>
  Raised in: Codeunit<Doc. Exch. Service Mgt.>.PROCEDURE<ProcessReceivedDocs>
    Code lines:
    ...
      END ELSE
        LogActivitySucceeded(ContextRecordID,MarkBusinessProcessedTxt,STRSUBSTNO(DocIdImportedTxt,DocIdentifier));
      COMMIT;
    
      IncomingDocument.FIND;
      OnAfterIncomingDocReceivedFromDocExch(IncomingDocument); <=====================
    END;
Codeunit<Read Data Exch. from Stream>.PROCEDURE<OnGetDataExchFileContentEvent>
  Raised in: Codeunit<Read Data Exch. from Stream>.<OnRun>
    Code lines:
    // Fire the get stream event
    OnGetDataExchFileContentEvent(Rec,TempBlob,EventHandled); <=====================
    
    IF EventHandled THEN BEGIN
      "File Name" := 'Data Stream';
      "File Content" := TempBlob.Blob;
    END;
Codeunit<Doc. Exch. Serv.- Doc. Status>.PROCEDURE<OnDocExchStatusDrillDown>
  Raised in: Codeunit<Doc. Exch. Serv.- Doc. Status>.PROCEDURE<DocExchStatusDrillDown>
    Code lines:
    IF NOT DataTypeManagement.GetRecordRef(DocRecVariant,DocRecRef) THEN
      EXIT;
    OnDocExchStatusDrillDown(DocRecRef,Handled); <=====================
    IF NOT Handled THEN
      DefaultDocExchStatusDrillDown(DocRecRef);
Codeunit<Workflow Setup>.PROCEDURE<OnAddWorkflowCategoriesToLibrary>
  Raised in: Codeunit<Workflow Setup>.PROCEDURE<InsertWorkflowCategories>
    Code lines:
    ...
    InsertWorkflowCategory(PurchDocCategoryTxt,PurchDocCategoryDescTxt);
    InsertWorkflowCategory(SalesDocCategoryTxt,SalesDocCategoryDescTxt);
    InsertWorkflowCategory(AdminCategoryTxt,AdminCategoryDescTxt);
    InsertWorkflowCategory(FinCategoryTxt,FinCategoryDescTxt);
    
    OnAddWorkflowCategoriesToLibrary; <=====================
Codeunit<Workflow Setup>.PROCEDURE<OnInsertWorkflowTemplates>
  Raised in: Codeunit<Workflow Setup>.PROCEDURE<InsertWorkflowTemplates>
    Code lines:
    ...
    InsertItemUnitPriceChangeApprovalWorkflowTemplate;
    
    InsertGeneralJournalBatchApprovalWorkflowTemplate;
    InsertGeneralJournalLineApprovalWorkflowTemplate;
    
    OnInsertWorkflowTemplates; <=====================
Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<OnAfterDeleteNotificationContext>
  Raised in: Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<DeleteAlreadyRegisteredNotificationBeforeInsert>
    Code lines:
    TempNotificationContext.RESET;
    TempNotificationContext.SETRANGE("Notification ID",NotificationId);
    IF TempNotificationContext.FINDFIRST THEN BEGIN
      TempNotificationContext.DELETE(TRUE);
      OnAfterDeleteNotificationContext(TempNotificationContext); <=====================
    END;
  Raised in: Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<RecallNotifications>
    Code lines:
    REPEAT
      NotificationToRecall.ID := TempNotificationContextToRecall."Notification ID";
      NotificationToRecall.RECALL;
    
      TempNotificationContextToRecall.DELETE(TRUE);
      OnAfterDeleteNotificationContext(TempNotificationContextToRecall); <=====================
    UNTIL TempNotificationContextToRecall.NEXT = 0
Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<OnAfterInsertNotificationContext>
  Raised in: Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<CreateNotificationContext>
    Code lines:
    ...
    TempNotificationContext."Notification ID" := NotificationId;
    GetUsableRecordId(RecId,TRUE);
    TempNotificationContext."Record ID" := RecId;
    TempNotificationContext.INSERT(TRUE);
    
    OnAfterInsertNotificationContext(TempNotificationContext); <=====================
  Raised in: Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<CreateNotificationContextWithAdditionalContext>
    Code lines:
    ...
    GetUsableRecordId(RecId,TRUE);
    TempNotificationContext."Record ID" := RecId;
    TempNotificationContext."Additional Context ID" := AdditionalContextId;
    TempNotificationContext.INSERT(TRUE);
    
    OnAfterInsertNotificationContext(TempNotificationContext); <=====================
Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<OnAfterNotificationSent>
  Raised in: Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<SendNotification>
    Code lines:
    NullGuid := '00000000-0000-0000-0000-000000000000';
    IF NotificationToSend.ID = NullGuid THEN
      NotificationToSend.ID := CREATEGUID;
    
    NotificationToSend.SEND;
    OnAfterNotificationSent(NotificationToSend); <=====================
    CreateNotificationContext(NotificationToSend.ID,RecId);
  Raised in: Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<SendNotificationWithAdditionalContext>
    Code lines:
    NullGuid := '00000000-0000-0000-0000-000000000000';
    IF NotificationToSend.ID = NullGuid THEN
      NotificationToSend.ID := CREATEGUID;
    
    NotificationToSend.SEND;
    OnAfterNotificationSent(NotificationToSend); <=====================
    CreateNotificationContextWithAdditionalContext(NotificationToSend.ID,RecId,AdditionalContextId);
Codeunit<Workflow Event Handling>.PROCEDURE<OnAddWorkflowEventPredecessorsToLibrary>
  Raised in: Codeunit<Workflow Event Handling>.PROCEDURE<AddEventPredecessors>
    Code lines:
    ...
        AddEventPredecessor(RunWorkflowOnGeneralJournalBatchBalancedCode,RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
      RunWorkflowOnGeneralJournalBatchNotBalancedCode:
        AddEventPredecessor(RunWorkflowOnGeneralJournalBatchNotBalancedCode,RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
    END;
    
    OnAddWorkflowEventPredecessorsToLibrary(EventFunctionName); <=====================
Codeunit<Workflow Event Handling>.PROCEDURE<OnAddWorkflowEventsToLibrary>
  Raised in: Codeunit<Workflow Event Handling>.PROCEDURE<CreateEventsLibrary>
    Code lines:
    ...
      CreateGenJnlLineFromIncDocSuccessfulEventDescTxt,0,FALSE);
    AddEventToLibrary(
      RunWorkflowOnAfterCreateGenJnlLineFromIncomingDocFailCode,DATABASE::"Incoming Document",
      CreateGenJnlLineFromIncDocFailsEventDescTxt,0,FALSE);
    
    OnAddWorkflowEventsToLibrary; <=====================
    OnAddWorkflowTableRelationsToLibrary;
Codeunit<Workflow Event Handling>.PROCEDURE<OnAddWorkflowTableRelationsToLibrary>
  Raised in: Codeunit<Workflow Event Handling>.PROCEDURE<CreateEventsLibrary>
    Code lines:
    ...
    AddEventToLibrary(
      RunWorkflowOnAfterCreateGenJnlLineFromIncomingDocFailCode,DATABASE::"Incoming Document",
      CreateGenJnlLineFromIncDocFailsEventDescTxt,0,FALSE);
    
    OnAddWorkflowEventsToLibrary;
    OnAddWorkflowTableRelationsToLibrary; <=====================
Codeunit<Workflow Response Handling>.PROCEDURE<OnAddWorkflowResponsePredecessorsToLibrary>
  Raised in: Codeunit<Workflow Response Handling>.PROCEDURE<AddResponsePredecessors>
    Code lines:
    ...
      GetSendToOCRCode:
        AddResponsePredecessor(GetSendToOCRCode,WorkflowEventHandling.RunWorkflowOnAfterReadyForOCRIncomingDocCode);
      GetSendToOCRAsyncCode:
        AddResponsePredecessor(GetSendToOCRAsyncCode,WorkflowEventHandling.RunWorkflowOnAfterReadyForOCRIncomingDocCode);
    END;
    OnAddWorkflowResponsePredecessorsToLibrary(ResponseFunctionName); <=====================
Codeunit<Workflow Response Handling>.PROCEDURE<OnAddWorkflowResponsesToLibrary>
  Raised in: Codeunit<Workflow Response Handling>.PROCEDURE<CreateResponsesLibrary>
    Code lines:
    ...
    
    AddResponseToLibrary(RevertValueForFieldCode,0,RevertRecordValueTxt,'GROUP 6');
    AddResponseToLibrary(ApplyNewValuesCode,0,ApplyNewValuesTxt,'GROUP 7');
    AddResponseToLibrary(DiscardNewValuesCode,0,DiscardNewValuesTxt,'GROUP 0');
    
    OnAddWorkflowResponsesToLibrary; <=====================
Codeunit<Workflow Response Handling>.PROCEDURE<OnExecuteWorkflowResponse>
  Raised in: Codeunit<Workflow Response Handling>.PROCEDURE<ExecuteResponse>
    Code lines:
    ...
        ApplyNewValuesCode:
          WorkflowChangeRecMgt.ApplyNewValues(Variant,ResponseWorkflowStepInstance);
        DiscardNewValuesCode:
          WorkflowChangeRecMgt.DiscardNewValues(Variant,ResponseWorkflowStepInstance);
        ELSE BEGIN
          OnExecuteWorkflowResponse(ResponseExecuted,Variant,xVariant,ResponseWorkflowStepInstance); <=====================
          IF NOT ResponseExecuted THEN
            ERROR(NotSupportedResponseErr,WorkflowResponse."Function Name");
        END;
      END;
Codeunit<Approvals Mgmt.>.PROCEDURE<OnApproveApprovalRequest>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<ApproveSelectedApprovalRequest>
    Code lines:
    ...
    IF ApprovalEntry."Approver ID" <> USERID THEN
      CheckUserAsApprovalAdministrator;
    
    ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Approved);
    ApprovalEntry.MODIFY(TRUE);
    OnApproveApprovalRequest(ApprovalEntry); <=====================
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<SendApprovalRequestFromRecord>
    Code lines:
    ...
          ApprovalEntry2.VALIDATE(Status,ApprovalEntry2.Status::Open);
          ApprovalEntry2.MODIFY(TRUE);
          CreateApprovalEntryNotification(ApprovalEntry2,WorkflowStepInstance);
        UNTIL ApprovalEntry2.NEXT = 0;
      IF FindApprovedApprovalEntryForWorkflowUserGroup(ApprovalEntry,WorkflowStepInstance) THEN
        OnApproveApprovalRequest(ApprovalEntry); <=====================
      EXIT;
    END;
    
    ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Approved);
    ...
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<SendApprovalRequestFromRecord>
    Code lines:
    ...
          ApprovalEntry2.VALIDATE(Status,ApprovalEntry2.Status::Open);
          ApprovalEntry2.MODIFY(TRUE);
          CreateApprovalEntryNotification(ApprovalEntry2,WorkflowStepInstance);
        UNTIL ApprovalEntry2.NEXT = 0;
      IF FindApprovedApprovalEntryForWorkflowUserGroup(ApprovalEntry,WorkflowStepInstance) THEN
        OnApproveApprovalRequest(ApprovalEntry); <=====================
      EXIT;
    END;
    
    ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Approved);
    ...
Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelCustomerApprovalRequest>
  Raised in: Page<Customer List>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelCustomerApprovalRequest(Rec); <=====================
    WorkflowWebhookManagement.FindAndCancel(RECORDID);
  Raised in: Page<Customer Card>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelCustomerApprovalRequest(Rec); <=====================
    WorkflowWebhookManagement.FindAndCancel(RECORDID);
  Raised in: Table<Customer>.<OnDelete>
    Code lines:
    ApprovalsMgmt.OnCancelCustomerApprovalRequest(Rec); <=====================
    
    ServiceItem.SETRANGE("Customer No.","No.");
    IF ServiceItem.FINDFIRST THEN
      IF CONFIRM(
           Text008,
           FALSE,
           TABLECAPTION,
           "No.",
           ServiceItem.FIELDCAPTION("Customer No."))
    ...
Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelGeneralJournalBatchApprovalRequest>
  Raised in: Table<Gen. Journal Batch>.<OnDelete>
    Code lines:
    ApprovalsMgmt.OnCancelGeneralJournalBatchApprovalRequest(Rec); <=====================
    
    GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
    GenJnlAlloc.SETRANGE("Journal Batch Name",Name);
    GenJnlAlloc.DELETEALL;
    GenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
    GenJnlLine.SETRANGE("Journal Batch Name",Name);
    GenJnlLine.DELETEALL(TRUE);
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<TryCancelJournalBatchApprovalRequest>
    Code lines:
    GetGeneralJournalBatch(GenJournalBatch,GenJournalLine);
    OnCancelGeneralJournalBatchApprovalRequest(GenJournalBatch); <=====================
    WorkflowWebhookManagement.FindAndCancel(GenJournalBatch.RECORDID);
Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelGeneralJournalLineApprovalRequest>
  Raised in: Table<Gen. Journal Line>.<OnDelete>
    Code lines:
    ApprovalsMgmt.OnCancelGeneralJournalLineApprovalRequest(Rec); <=====================
    
    TESTFIELD("Check Printed",FALSE);
    
    ClearCustVendApplnEntry;
    ClearAppliedGenJnlLine;
    DeletePaymentFileErrors;
    ClearDataExchangeEntries(FALSE);
    
    GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
    ...
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<TryCancelJournalLineApprovalRequests>
    Code lines:
    REPEAT
      IF HasOpenApprovalEntries(GenJournalLine.RECORDID) THEN
        OnCancelGeneralJournalLineApprovalRequest(GenJournalLine); <=====================
      WorkflowWebhookManagement.FindAndCancel(GenJournalLine.RECORDID);
    UNTIL GenJournalLine.NEXT = 0;
    MESSAGE(ApprovalReqCanceledForSelectedLinesMsg);
Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelIncomingDocApprovalRequest>
  Raised in: Page<Incoming Documents>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelIncomingDocApprovalRequest(Rec); <=====================
  Raised in: Page<Incoming Document>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelIncomingDocApprovalRequest(Rec); <=====================
Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelItemApprovalRequest>
  Raised in: Page<Item List>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelItemApprovalRequest(Rec); <=====================
    WorkflowWebhookManagement.FindAndCancel(RECORDID);
  Raised in: Page<Item Card>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelItemApprovalRequest(Rec); <=====================
    WorkflowWebhookManagement.FindAndCancel(RECORDID);
  Raised in: Table<Item>.<OnDelete>
    Code lines:
    ApprovalsMgmt.OnCancelItemApprovalRequest(Rec); <=====================
    
    CheckJournalsAndWorksheets(0);
    CheckDocuments(0);
    
    MoveEntries.MoveItemEntries(Rec);
    
    ServiceItem.RESET;
    ServiceItem.SETRANGE("Item No.","No.");
    IF ServiceItem.FIND('-') THEN
    ...
Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelPurchaseApprovalRequest>
  Raised in: Page<Blanket Purchase Order>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
  Raised in: Page<Purchase Return Order List>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
  Raised in: Page<Blanket Purchase Orders>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
  Raised in: Page<Purchase Credit Memos>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
    WorkflowWebhookManagement.FindAndCancel(RECORDID);
  Raised in: Page<Purchase Invoices>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
    WorkflowWebhookManagement.FindAndCancel(RECORDID);
  Raised in: Page<Purchase Order List>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
    WorkflowWebhookManagement.FindAndCancel(RECORDID);
  Raised in: Page<Purchase Quotes>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
  Raised in: Page<Purchase Credit Memo>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
    WorkflowWebhookMgt.FindAndCancel(RECORDID);
  Raised in: Page<Purchase Invoice>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
    WorkflowWebhookMgt.FindAndCancel(RECORDID);
  Raised in: Page<Purchase Order>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
    WorkflowWebhookMgt.FindAndCancel(RECORDID);
  Raised in: Page<Purchase Quote>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
  Raised in: Page<Purchase Return Order>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelSalesApprovalRequest>
  Raised in: Page<Blanket Sales Order>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec); <=====================
  Raised in: Page<Sales Order List>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec); <=====================
    WorkflowWebhookManagement.FindAndCancel(RECORDID);
  Raised in: Page<Sales Credit Memo>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec); <=====================
    WorkflowWebhookMgt.FindAndCancel(RECORDID);
  Raised in: Page<Sales Invoice>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec); <=====================
    WorkflowWebhookMgt.FindAndCancel(RECORDID);
  Raised in: Page<Sales Order>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec); <=====================
    WorkflowWebhookMgt.FindAndCancel(RECORDID);
  Raised in: Page<Sales Quote>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec); <=====================
    WorkflowWebhookMgt.FindAndCancel(RECORDID);
  Raised in: Page<Sales Return Order List>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec); <=====================
  Raised in: Page<Blanket Sales Orders>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec); <=====================
  Raised in: Page<Sales Credit Memos>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec); <=====================
    WorkflowWebhookManagement.FindAndCancel(RECORDID);
  Raised in: Page<Sales Quotes>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec); <=====================
    WorkflowWebhookManagement.FindAndCancel(RECORDID);
  Raised in: Page<Sales Invoice List>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec); <=====================
    WorkflowWebhookManagement.FindAndCancel(RECORDID);
  Raised in: Page<Sales Return Order>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec); <=====================
Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelVendorApprovalRequest>
  Raised in: Page<Vendor List>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelVendorApprovalRequest(Rec); <=====================
    WorkflowWebhookManagement.FindAndCancel(RECORDID);
  Raised in: Page<Vendor Card>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelVendorApprovalRequest(Rec); <=====================
    WorkflowWebhookManagement.FindAndCancel(RECORDID);
  Raised in: Table<Vendor>.<OnDelete>
    Code lines:
    ApprovalsMgmt.OnCancelVendorApprovalRequest(Rec); <=====================
    
    MoveEntries.MoveVendorEntries(Rec);
    
    CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::Vendor);
    CommentLine.SETRANGE("No.","No.");
    CommentLine.DELETEALL;
    
    VendBankAcc.SETRANGE("Vendor No.","No.");
    VendBankAcc.DELETEALL;
    ...
Codeunit<Approvals Mgmt.>.PROCEDURE<OnDelegateApprovalRequest>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<SubstituteUserIdForApprovalEntry>
    Code lines:
    ...
    ELSE
      UserSetup.GET(UserSetup.Substitute);
    
    ApprovalEntry."Approver ID" := UserSetup."User ID";
    ApprovalEntry.MODIFY(TRUE);
    OnDelegateApprovalRequest(ApprovalEntry); <=====================
Codeunit<Approvals Mgmt.>.PROCEDURE<OnDeleteRecordInApprovalRequest>
  Raised in: Table<Purchase Header>.<OnDelete>
    Code lines:
    ...
      Rec,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,
      ReturnShptHeader,PurchInvHeaderPrepmt,PurchCrMemoHeaderPrepmt);
    VALIDATE("Applies-to ID",'');
    VALIDATE("Incoming Document Entry No.",0);
    
    ApprovalsMgmt.OnDeleteRecordInApprovalRequest(RECORDID); <=====================
    PurchLine.LOCKTABLE;
    
    WhseRequest.SETRANGE("Source Type",DATABASE::"Purchase Line");
    WhseRequest.SETRANGE("Source Subtype","Document Type");
    ...
  Raised in: Table<Sales Header>.<OnDelete>
    Code lines:
    ...
    UpdateOpportunity;
    
    VALIDATE("Applies-to ID",'');
    VALIDATE("Incoming Document Entry No.",0);
    
    ApprovalsMgmt.OnDeleteRecordInApprovalRequest(RECORDID); <=====================
    SalesLine.RESET;
    SalesLine.LOCKTABLE;
    
    WhseRequest.SETRANGE("Source Type",DATABASE::"Sales Line");
    ...
Codeunit<Approvals Mgmt.>.PROCEDURE<OnRejectApprovalRequest>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<RejectSelectedApprovalRequest>
    Code lines:
    ...
      ERROR(RejectOnlyOpenRequestsErr);
    
    IF ApprovalEntry."Approver ID" <> USERID THEN
      CheckUserAsApprovalAdministrator;
    
    OnRejectApprovalRequest(ApprovalEntry); <=====================
    ApprovalEntry.GET(ApprovalEntry."Entry No.");
    ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Rejected);
    ApprovalEntry.MODIFY(TRUE);
Codeunit<Approvals Mgmt.>.PROCEDURE<OnRenameRecordInApprovalRequest>
  Raised in: Table<Gen. Journal Batch>.<OnRename>
    Code lines:
    ApprovalsMgmt.OnRenameRecordInApprovalRequest(xRec.RECORDID,RECORDID); <=====================
    
    SetLastModifiedDateTime;
  Raised in: Table<Gen. Journal Line>.<OnRename>
    Code lines:
    ApprovalsMgmt.OnRenameRecordInApprovalRequest(xRec.RECORDID,RECORDID); <=====================
    
    TESTFIELD("Check Printed",FALSE);
  Raised in: Table<Item>.<OnRename>
    Code lines:
    SalesLine.RenameNo(SalesLine.Type::Item,xRec."No.","No.");
    PurchaseLine.RenameNo(PurchaseLine.Type::Item,xRec."No.","No.");
    
    ApprovalsMgmt.OnRenameRecordInApprovalRequest(xRec.RECORDID,RECORDID); <=====================
    ItemAttributeValueMapping.RenameItemAttributeValueMapping(xRec."No.","No.");
    SetLastDateTimeModified;
  Raised in: Table<Vendor>.<OnRename>
    Code lines:
    ApprovalsMgmt.OnRenameRecordInApprovalRequest(xRec.RECORDID,RECORDID); <=====================
    SetLastModifiedDateTime;
    IF xRec."Invoice Disc. Code" = xRec."No." THEN
      "Invoice Disc. Code" := "No.";
    
    CalendarManagement.RenameCustomizedBaseCalendarData(CustomizedCalendarChange."Source Type"::Vendor,"No.",xRec."No.");
  Raised in: Table<Customer>.<OnRename>
    Code lines:
    // Give extensions option to opt out of rename logic.
    SkipRenamingLogic(SkipRename);
    IF SkipRename THEN
      EXIT;
    
    ApprovalsMgmt.OnRenameRecordInApprovalRequest(xRec.RECORDID,RECORDID); <=====================
    
    SetLastModifiedDateTime;
    IF xRec."Invoice Disc. Code" = xRec."No." THEN
      "Invoice Disc. Code" := "No.";
    ...
Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendCustomerForApproval>
  Raised in: Page<Customer List>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckCustomerApprovalsWorkflowEnabled(Rec) THEN
      ApprovalsMgmt.OnSendCustomerForApproval(Rec); <=====================
  Raised in: Page<Customer Card>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckCustomerApprovalsWorkflowEnabled(Rec) THEN
      ApprovalsMgmt.OnSendCustomerForApproval(Rec); <=====================
Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendGeneralJournalBatchForApproval>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<TrySendJournalBatchApprovalRequest>
    Code lines:
    ...
    CheckGeneralJournalBatchApprovalsWorkflowEnabled(GenJournalBatch);
    IF HasOpenApprovalEntries(GenJournalBatch.RECORDID) OR
       HasAnyOpenJournalLineApprovalEntries(GenJournalBatch."Journal Template Name",GenJournalBatch.Name)
    THEN
      ERROR(PendingJournalBatchApprovalExistsErr);
    OnSendGeneralJournalBatchForApproval(GenJournalBatch); <=====================
Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendGeneralJournalLineForApproval>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<TrySendJournalLineApprovalRequests>
    Code lines:
    IF GenJournalLine.COUNT = 1 THEN
      CheckGeneralJournalLineApprovalsWorkflowEnabled(GenJournalLine);
    
    REPEAT
      IF WorkflowManagement.CanExecuteWorkflow(GenJournalLine,
           WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode) AND <=====================
         NOT HasOpenApprovalEntries(GenJournalLine.RECORDID)
      THEN BEGIN
        OnSendGeneralJournalLineForApproval(GenJournalLine); <=====================
        LinesSent += 1;
    ...
Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendIncomingDocForApproval>
  Raised in: Page<Incoming Documents>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    TestReadyForApproval;
    IF ApprovalsMgmt.CheckIncomingDocApprovalsWorkflowEnabled(Rec) THEN
      ApprovalsMgmt.OnSendIncomingDocForApproval(Rec); <=====================
  Raised in: Page<Incoming Document>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    TestReadyForApproval;
    IF ApprovalsMgmt.CheckIncomingDocApprovalsWorkflowEnabled(Rec) THEN
      ApprovalsMgmt.OnSendIncomingDocForApproval(Rec); <=====================
  Raised in: Codeunit<Office Management>.PROCEDURE<SendApprovalRequest>
    Code lines:
    IncomingDocument.TestReadyForApproval;
    IF ApprovalsMgmt.CheckIncomingDocApprovalsWorkflowEnabled(IncomingDocument) THEN
      ApprovalsMgmt.OnSendIncomingDocForApproval(IncomingDocument); <=====================
Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendItemForApproval>
  Raised in: Page<Item List>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckItemApprovalsWorkflowEnabled(Rec) THEN
      ApprovalsMgmt.OnSendItemForApproval(Rec); <=====================
  Raised in: Page<Item Card>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckItemApprovalsWorkflowEnabled(Rec) THEN
      ApprovalsMgmt.OnSendItemForApproval(Rec); <=====================
Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendPurchaseDocForApproval>
  Raised in: Page<Blanket Purchase Order>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
  Raised in: Page<Purchase Return Order List>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
  Raised in: Page<Blanket Purchase Orders>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
  Raised in: Page<Purchase Credit Memos>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
  Raised in: Page<Purchase Invoices>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
  Raised in: Page<Purchase Order List>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
  Raised in: Page<Purchase Quotes>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
  Raised in: Page<Purchase Credit Memo>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
  Raised in: Page<Purchase Invoice>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
  Raised in: Page<Purchase Order>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
  Raised in: Page<Purchase Quote>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF  ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
  Raised in: Page<Purchase Return Order>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendSalesDocForApproval>
  Raised in: Page<Blanket Sales Order>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendSalesDocForApproval(Rec); <=====================
  Raised in: Page<Sales Order List>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendSalesDocForApproval(Rec); <=====================
  Raised in: Page<Sales Credit Memo>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendSalesDocForApproval(Rec); <=====================
  Raised in: Page<Sales Invoice>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendSalesDocForApproval(Rec); <=====================
  Raised in: Page<Sales Order>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendSalesDocForApproval(Rec); <=====================
  Raised in: Page<Sales Quote>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendSalesDocForApproval(Rec); <=====================
  Raised in: Page<Sales Return Order List>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendSalesDocForApproval(Rec); <=====================
  Raised in: Page<Blanket Sales Orders>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendSalesDocForApproval(Rec); <=====================
  Raised in: Page<Sales Credit Memos>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendSalesDocForApproval(Rec); <=====================
  Raised in: Page<Sales Quotes>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendSalesDocForApproval(Rec); <=====================
  Raised in: Page<Sales Invoice List>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendSalesDocForApproval(Rec); <=====================
  Raised in: Page<Sales Return Order>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendSalesDocForApproval(Rec); <=====================
Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendVendorForApproval>
  Raised in: Page<Vendor List>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckVendorApprovalsWorkflowEnabled(Rec) THEN
      ApprovalsMgmt.OnSendVendorForApproval(Rec); <=====================
  Raised in: Page<Vendor Card>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckVendorApprovalsWorkflowEnabled(Rec) THEN
      ApprovalsMgmt.OnSendVendorForApproval(Rec); <=====================
Codeunit<Workflow Webhook Management>.PROCEDURE<OnCancelWorkflow>
  Raised in: Codeunit<Workflow Webhook Management>.PROCEDURE<Cancel>
    Code lines:
    ...
      ERROR(UserUnableToCancelErr,USERID);
    
    WorkflowWebhookEntry.VALIDATE(Response,WorkflowWebhookEntry.Response::Cancel);
    WorkflowWebhookEntry.MODIFY(TRUE);
    
    OnCancelWorkflow(WorkflowWebhookEntry); <=====================
Codeunit<Workflow Webhook Management>.PROCEDURE<OnContinueWorkflow>
  Raised in: Codeunit<Workflow Webhook Management>.PROCEDURE<Continue>
    Code lines:
    ...
      ERROR(UserUnableToContinueErr,USERID);
    
    WorkflowWebhookEntry.VALIDATE(Response,WorkflowWebhookEntry.Response::Continue);
    WorkflowWebhookEntry.MODIFY(TRUE);
    
    OnContinueWorkflow(WorkflowWebhookEntry); <=====================
Codeunit<Workflow Webhook Management>.PROCEDURE<OnFindTaskSchedulerAllowed>
  Raised in: Codeunit<Workflow Webhook Management>.PROCEDURE<SendWebhookNotificaton>
    Code lines:
    WorkflowWebhookNotification.StartNotification(WorkflowStepInstance.ID);
    
    IsTaskSchedulerAllowed := TRUE;
    OnFindTaskSchedulerAllowed(IsTaskSchedulerAllowed); <=====================
    
    IF IsTaskSchedulerAllowed THEN
      TASKSCHEDULER.CREATETASK(CODEUNIT::"Workflow Webhook Notify Task",0,TRUE,
        COMPANYNAME,0DT,WorkflowStepInstance.RECORDID)
    ELSE
      CODEUNIT.RUN(CODEUNIT::"Workflow Webhook Notify Task",WorkflowStepInstance);
Codeunit<Workflow Webhook Management>.PROCEDURE<OnRejectWorkflow>
  Raised in: Codeunit<Workflow Webhook Management>.PROCEDURE<Reject>
    Code lines:
    ...
      ERROR(UserUnableToRejectErr,USERID);
    
    WorkflowWebhookEntry.VALIDATE(Response,WorkflowWebhookEntry.Response::Reject);
    WorkflowWebhookEntry.MODIFY(TRUE);
    
    OnRejectWorkflow(WorkflowWebhookEntry); <=====================
Codeunit<Workflow Webhook Notification>.PROCEDURE<OnPostNotificationRequest>
  Raised in: Codeunit<Workflow Webhook Notification>.PROCEDURE<Notify>
    Code lines:
    RetryCounter := RetryCounter - 1;
    IF OnPostNotificationRequest(DataID,WorkflowStepInstanceID,NotificationUrl,RequestedByUserEmail) THEN BEGIN <=====================
      WorkflowWebhookNotification.Status := WorkflowWebhookNotification.Status::Sent;
      WorkflowWebhookNotification.SetErrorMessage('');
      WorkflowWebhookNotification.SetErrorDetails('');
      WorkflowWebhookNotification.MODIFY(TRUE);
      COMMIT;
    END ELSE BEGIN
      Exception := GETLASTERROROBJECT;
    
    ...
Codeunit<Workflow Webhook Notify Task>.PROCEDURE<OnFetchWorkflowWebhookNotificationInitParams>
  Raised in: Codeunit<Workflow Webhook Notify Task>.<OnRun>
    Code lines:
    ...
    UserTable.SETRANGE("User Name",WorkflowWebhookEntryTable."Initiated By User ID");
    IF UserTable.FINDFIRST THEN
      ContactEmail := UserTable."Contact Email";
    
    // Send notification
    OnFetchWorkflowWebhookNotificationInitParams(RetryCount,WaitTime,InitHandled); <=====================
    
    // If parameters not initialized by subscribers (mock subscriber for testing)
    IF NOT InitHandled THEN BEGIN
      // Set defaults
    ...
Codeunit<Office Management>.PROCEDURE<OnGetExternalHandlerCodeunit>
  Raised in: Codeunit<Office Management>.PROCEDURE<GetHandlerCodeunit>
    Code lines:
    ...
        EXIT(CODEUNIT::"Office Contact Handler");
      OfficeHostType.OutlookHyperlink:
        EXIT(CODEUNIT::"Office Document Handler");
    END;
    
    OnGetExternalHandlerCodeunit(OfficeAddinContext,HostType,ExternalHandler); <=====================
    IF ExternalHandler > 0 THEN
      EXIT(ExternalHandler);
    
    ERROR(CodeUnitNotFoundErr);
Codeunit<Office Host Management>.PROCEDURE<OnCloseCurrentPage>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<CloseCurrentPage>
    Code lines:
    OnCloseCurrentPage; <=====================
Codeunit<Office Host Management>.PROCEDURE<OnEmailHasAttachments>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<EmailHasAttachments>
    Code lines:
    OnEmailHasAttachments(Result); <=====================
    EXIT(Result);
Codeunit<Office Host Management>.PROCEDURE<OnGetEmailAndAttachments>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<GetEmailAndAttachments>
    Code lines:
    OnGetEmailAndAttachments(TempExchangeObject,Action,VendorNumber); <=====================
Codeunit<Office Host Management>.PROCEDURE<OnGetEmailBody>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<GetEmailBody>
    Code lines:
    OnGetEmailBody(OfficeAddinContext."Item ID",EmailBody); <=====================
Codeunit<Office Host Management>.PROCEDURE<OnGetFinancialsDocument>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<GetFinancialsDocument>
    Code lines:
    OnGetFinancialsDocument(OfficeAddinContext."Item ID",DocumentJSON); <=====================
Codeunit<Office Host Management>.PROCEDURE<OnGetHostType>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<GetHostType>
    Code lines:
    CheckHost;
    OnGetHostType(HostType); <=====================
    EXIT(HostType);
Codeunit<Office Host Management>.PROCEDURE<OnGetTempOfficeAddinContext>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<GetTempOfficeAddinContext>
    Code lines:
    OnGetTempOfficeAddinContext(TempOfficeAddinContext); <=====================
Codeunit<Office Host Management>.PROCEDURE<OnInitializeContext>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<InitializeContext>
    Code lines:
    CheckHost;
    OnInitializeContext(TempNewOfficeAddinContext); <=====================
Codeunit<Office Host Management>.PROCEDURE<OnInitializeExchangeObject>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<InitializeExchangeObject>
    Code lines:
    CheckHost;
    OnInitializeExchangeObject; <=====================
Codeunit<Office Host Management>.PROCEDURE<OnInitializeHost>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<InitializeHost>
    Code lines:
    OnInitializeHost(NewOfficeHost,NewHostType); <=====================
Codeunit<Office Host Management>.PROCEDURE<OnInvokeExtension>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<InvokeExtension>
    Code lines:
    CheckHost;
    OnInvokeExtension(FunctionName,Parameter1,Parameter2,Parameter3,Parameter4); <=====================
Codeunit<Office Host Management>.PROCEDURE<OnIsAvailable>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<IsAvailable>
    Code lines:
    OnIsAvailable(Result); <=====================
    EXIT(Result);
Codeunit<Office Host Management>.PROCEDURE<OnIsHostInitialized>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<CheckHost>
    Code lines:
    OnIsHostInitialized(Result); <=====================
    IF NOT Result THEN
      ERROR(OfficeHostNotInitializedErr);
Codeunit<Office Host Management>.PROCEDURE<OnSendToOCR>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<SendToOCR>
    Code lines:
    OnSendToOCR(IncomingDocument); <=====================
Codeunit<Office Document Handler>.PROCEDURE<OnCloseSuggestedLineItemsPage>
  Raised in: Codeunit<Office Document Handler>.PROCEDURE<ConvertSuggestedLinesToDocumentLines>
    Code lines:
    IF TempOfficeSuggestedLineItem.ISEMPTY THEN
      EXIT;
    
    PageAction := PAGE.RUNMODAL(PAGE::"Office Suggested Line Items",TempOfficeSuggestedLineItem);
    OnCloseSuggestedLineItemsPage(TempOfficeSuggestedLineItem,HeaderRecRef,PageAction); <=====================
Codeunit<Office Document Handler>.PROCEDURE<OnGenerateLinesFromText>
  Raised in: Codeunit<Office Document Handler>.PROCEDURE<GenerateLinesForDocument>
    Code lines:
    IF InstructionMgt.IsEnabled(InstructionMgt.AutomaticLineItemsDialogCode) THEN BEGIN
      OfficeMgt.GetContext(TempOfficeAddinContext);
      EmailBody := OfficeMgt.GetEmailBody(TempOfficeAddinContext);
      OnGenerateLinesFromText(HeaderRecRef,TempOfficeSuggestedLineItem,EmailBody); <=====================
      COMMIT;
    
      ConvertSuggestedLinesToDocumentLines(TempOfficeSuggestedLineItem,HeaderRecRef);
    END;
Codeunit<Add-in Manifest Management>.PROCEDURE<CreateBasicAddins>
Codeunit<Add-in Manifest Management>.PROCEDURE<CreateDefaultAddins>
  Raised in: Page<Office Add-in Management>.<OnInit>
    Code lines:
    IF ISEMPTY THEN
      AddinManifestManagement.CreateDefaultAddins(Rec); <=====================
  Raised in: Page<Office Add-in Management>.Action<Reset Default Add-ins>.<OnAction>
    Code lines:
    IF CONFIRM(ResetWarningQst) THEN
      AddinManifestManagement.CreateDefaultAddins(Rec); <=====================
  Raised in: Table<Office Add-in>.PROCEDURE<GetAddins>
    Code lines:
    IF ISEMPTY THEN
      AddinManifestManagement.CreateDefaultAddins(Rec); <=====================
    
    EXIT(FINDSET);
Codeunit<Add-in Manifest Management>.PROCEDURE<GetAddin>
  Raised in: Codeunit<Add-in Manifest Management>.PROCEDURE<GetAddinByHostType>
    Code lines:
    GetManifestCodeunit(ManifestCodeunit,HostType);
    GetAddin(OfficeAddin,ManifestCodeunit); <=====================
Codeunit<Add-in Manifest Management>.PROCEDURE<GetAddinID>
Codeunit<Add-in Manifest Management>.PROCEDURE<GetAddinVersion>
Codeunit<Add-in Manifest Management>.PROCEDURE<GetManifestCodeunit>
  Raised in: Codeunit<Add-in Manifest Management>.PROCEDURE<GetAddinByHostType>
    Code lines:
    GetManifestCodeunit(ManifestCodeunit,HostType); <=====================
    GetAddin(OfficeAddin,ManifestCodeunit);
Codeunit<Add-in Manifest Management>.PROCEDURE<OnGenerateManifest>
  Raised in: Codeunit<Add-in Manifest Management>.PROCEDURE<GenerateManifest>
    Code lines:
    // Uses the current value of Manifest and updates XML nodes to reflect the current values
    VerifyHttps;
    IF OfficeAddin."Manifest Codeunit" <> 0 THEN
      OnGenerateManifest(OfficeAddin,ManifestText,OfficeAddin."Manifest Codeunit") <=====================
    ELSE BEGIN
      ManifestText := OfficeAddin.GetDefaultManifestText;
      SetCommonManifestItems(ManifestText);
    END;
Codeunit<Payroll Management>.PROCEDURE<OnImportPayroll>
  Raised in: Codeunit<Payroll Management>.PROCEDURE<ImportPayroll>
    Code lines:
    ...
        EXIT;
    END;
    
    IF EnabledPayrollServiceExists(TempServiceConnection) THEN
      IF SelectPayrollService(TempServiceConnection,SelectPayrollServiceToUseTxt) THEN
        OnImportPayroll(TempServiceConnection,GenJournalLine); <=====================
Codeunit<Payroll Management>.PROCEDURE<OnRegisterPayrollService>
  Raised in: Page<General Journal>.PROCEDURE<SetPayrollAppearance>
    Code lines:
    PayrollManagement.OnRegisterPayrollService(TempPayrollServiceConnection); <=====================
    ImportPayrollTransactionsAvailable := NOT TempPayrollServiceConnection.ISEMPTY;
  Raised in: Codeunit<Payroll Management>.PROCEDURE<ImportPayroll>
    Code lines:
    TempServiceConnection.DELETEALL;
    OnRegisterPayrollService(TempServiceConnection); <=====================
    
    IF TempServiceConnection.ISEMPTY THEN
      ERROR(PayrollServiceNotFoundErr);
    
    IF NOT EnabledPayrollServiceExists(TempServiceConnection) THEN BEGIN
      IF CONFIRM(EnablePayrollServicesQst) THEN
        EnablePayrollService(TempServiceConnection)
      ELSE
    ...
  Raised in: Codeunit<Payroll Management>.PROCEDURE<EnablePayrollService>
    Code lines:
    ...
    IF SelectPayrollService(TempServiceConnection,SelectPayrollServiceToEnableTxt) THEN BEGIN
      SelectedServiceRecordId := TempServiceConnection."Record ID";
      SelectedServiceName := TempServiceConnection.Name;
      SetupPayrollService(TempServiceConnection);
      TempServiceConnection.DELETEALL;
      OnRegisterPayrollService(TempServiceConnection); <=====================
      IF NOT TempServiceConnection.ISEMPTY THEN BEGIN
        TempServiceConnection.SETRANGE("Record ID",SelectedServiceRecordId);
        IF NOT EnabledPayrollServiceExists(TempServiceConnection) THEN
          ERROR(PayrollServiceDisabledErr,SelectedServiceName);
    ...
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnApplyCustLedgEntryByReversalOnBeforeInsertDtldCustLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ApplyCustLedgEntryByReversal>
    Code lines:
    ...
    NewDtldCustLedgEntry."Applied Cust. Ledger Entry No." := AppliedEntryNo;
    NewDtldCustLedgEntry."User ID" := USERID;
    NewDtldCustLedgEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
    NewDtldCustLedgEntry."Entry No." := NextDtldCustLedgEntryEntryNo;
    NextDtldCustLedgEntryEntryNo := NextDtldCustLedgEntryEntryNo + 1;
    OnApplyCustLedgEntryByReversalOnBeforeInsertDtldCustLedgEntry(NewDtldCustLedgEntry,DtldCustLedgEntry2); <=====================
    NewDtldCustLedgEntry.INSERT(TRUE);
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnApplyEmplLedgEntryByReversalOnBeforeInsertDtldEmplLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ApplyEmplLedgEntryByReversal>
    Code lines:
    ...
    NewDetailedEmployeeLedgerEntry."Applied Empl. Ledger Entry No." := AppliedEntryNo;
    NewDetailedEmployeeLedgerEntry."User ID" := USERID;
    NewDetailedEmployeeLedgerEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
    NewDetailedEmployeeLedgerEntry."Entry No." := NextDtldEmplLedgEntryNo;
    NextDtldEmplLedgEntryNo += 1;
    OnApplyEmplLedgEntryByReversalOnBeforeInsertDtldEmplLedgEntry(NewDetailedEmployeeLedgerEntry,DetailedEmployeeLedgerEntry2); <=====================
    NewDetailedEmployeeLedgerEntry.INSERT(TRUE);
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnApplyVendLedgEntryByReversalOnBeforeInsertDtldVendLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ApplyVendLedgEntryByReversal>
    Code lines:
    ...
    NewDtldVendLedgEntry."Applied Vend. Ledger Entry No." := AppliedEntryNo;
    NewDtldVendLedgEntry."User ID" := USERID;
    NewDtldVendLedgEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
    NewDtldVendLedgEntry."Entry No." := NextDtldVendLedgEntryEntryNo;
    NextDtldVendLedgEntryEntryNo := NextDtldVendLedgEntryEntryNo + 1;
    OnApplyVendLedgEntryByReversalOnBeforeInsertDtldVendLedgEntry(NewDtldVendLedgEntry,DtldVendLedgEntry2); <=====================
    NewDtldVendLedgEntry.INSERT(TRUE);
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnBeforeReverse>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<Reverse>
    Code lines:
    OnBeforeReverse(ReversalEntry,ReversalEntry2); <=====================
    
    SourceCodeSetup.GET;
    IF ReversalEntry2."Reversal Type" = ReversalEntry2."Reversal Type"::Register THEN
      GLReg2."No." := ReversalEntry2."G/L Register No.";
    
    ReversalEntry.CopyReverseFilters(
      GLEntry2,CustLedgEntry,VendLedgEntry,BankAccLedgEntry,VATEntry,FALedgEntry,MaintenanceLedgEntry,EmployeeLedgerEntry);
    
    IF ReversalEntry2."Reversal Type" = ReversalEntry2."Reversal Type"::Transaction THEN BEGIN
    ...
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseBankAccLedgEntryOnBeforeInsert>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ReverseBankAccLedgEntry>
    Code lines:
    ...
        "Reversed by Entry No." := BankAccLedgEntry."Entry No.";
      END;
      BankAccLedgEntry."Reversed by Entry No." := "Entry No.";
      BankAccLedgEntry.Reversed := TRUE;
      BankAccLedgEntry.MODIFY;
      OnReverseBankAccLedgEntryOnBeforeInsert(NewBankAccLedgEntry,BankAccLedgEntry); <=====================
      INSERT;
    END;
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseCustLedgEntryOnBeforeInsertCustLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ReverseCustLedgEntry>
    Code lines:
    ...
      END;
      CustLedgEntry."Applies-to ID" := '';
      CustLedgEntry."Reversed by Entry No." := "Entry No.";
      CustLedgEntry.Reversed := TRUE;
      CustLedgEntry.MODIFY;
      OnReverseCustLedgEntryOnBeforeInsertCustLedgEntry(NewCustLedgEntry,CustLedgEntry); <=====================
      INSERT;
    
      IF NextDtldCustLedgEntryEntryNo = 0 THEN BEGIN
        DtldCustLedgEntry.FINDLAST;
    ...
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseCustLedgEntryOnBeforeInsertDtldCustLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ReverseCustLedgEntry>
    Code lines:
    ...
        NewDtldCustLedgEntry."Cust. Ledger Entry No." := NewEntryNo;
        NewDtldCustLedgEntry."User ID" := USERID;
        NewDtldCustLedgEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
        NewDtldCustLedgEntry."Entry No." := NextDtldCustLedgEntryEntryNo;
        NextDtldCustLedgEntryEntryNo := NextDtldCustLedgEntryEntryNo + 1;
        OnReverseCustLedgEntryOnBeforeInsertDtldCustLedgEntry(NewDtldCustLedgEntry,DtldCustLedgEntry); <=====================
        NewDtldCustLedgEntry.INSERT(TRUE);
      UNTIL DtldCustLedgEntry.NEXT = 0;
    
      ApplyCustLedgEntryByReversal(
    ...
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseEmplLedgEntryOnBeforeInsertDtldEmplLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ReverseEmplLedgEntry>
    Code lines:
    ...
        NewDetailedEmployeeLedgerEntry."Employee Ledger Entry No." := NewEntryNo;
        NewDetailedEmployeeLedgerEntry."User ID" := USERID;
        NewDetailedEmployeeLedgerEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
        NewDetailedEmployeeLedgerEntry."Entry No." := NextDtldEmplLedgEntryNo;
        NextDtldEmplLedgEntryNo += 1;
        OnReverseEmplLedgEntryOnBeforeInsertDtldEmplLedgEntry(NewDetailedEmployeeLedgerEntry,DetailedEmployeeLedgerEntry); <=====================
        NewDetailedEmployeeLedgerEntry.INSERT(TRUE);
      UNTIL DetailedEmployeeLedgerEntry.NEXT = 0;
    
      ApplyEmplLedgEntryByReversal(
    ...
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseEmplLedgEntryOnBeforeInsertEmplLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ReverseEmplLedgEntry>
    Code lines:
    ...
      END;
      EmployeeLedgerEntry."Applies-to ID" := '';
      EmployeeLedgerEntry."Reversed by Entry No." := "Entry No.";
      EmployeeLedgerEntry.Reversed := TRUE;
      EmployeeLedgerEntry.MODIFY;
      OnReverseEmplLedgEntryOnBeforeInsertEmplLedgEntry(NewEmployeeLedgerEntry,EmployeeLedgerEntry); <=====================
      INSERT;
    
      IF NextDtldEmplLedgEntryNo = 0 THEN BEGIN
        DetailedEmployeeLedgerEntry.FINDLAST;
    ...
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseGLEntryOnBeforeInsertGLEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ReverseGLEntry>
    Code lines:
    ...
            GLEntry."Reversed by Entry No." := "Entry No.";
          END;
          "Reversed by Entry No." := GLEntry."Entry No.";
          Reversed := TRUE;
          MODIFY;
          OnReverseGLEntryOnBeforeInsertGLEntry(GLEntry,GenJnlLine,GLEntry2); <=====================
          GenJnlPostLine.InsertGLEntry(GenJnlLine,GLEntry,FALSE);
    
          CASE TRUE OF
            TempCustLedgEntry.GET("Entry No."):
    ...
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseVATEntryOnBeforeInsert>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ReverseVAT>
    Code lines:
    ...
            "Reversed by Entry No." := VATEntry."Entry No.";
          END;
          VATEntry."Reversed by Entry No." := "Entry No.";
          VATEntry.Reversed := TRUE;
          VATEntry.MODIFY;
          OnReverseVATEntryOnBeforeInsert(NewVATEntry,VATEntry); <=====================
          INSERT;
          GLEntryVATEntryLink.InsertLink(GLEntry."Entry No.","Entry No.");
          GenJnlPostLine.IncrNextVATEntryNo;
        END;
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseVendLedgEntryOnBeforeInsertDtldVendLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ReverseVendLedgEntry>
    Code lines:
    ...
        NewDtldVendLedgEntry."Vendor Ledger Entry No." := NewEntryNo;
        NewDtldVendLedgEntry."User ID" := USERID;
        NewDtldVendLedgEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
        NewDtldVendLedgEntry."Entry No." := NextDtldVendLedgEntryEntryNo;
        NextDtldVendLedgEntryEntryNo := NextDtldVendLedgEntryEntryNo + 1;
        OnReverseVendLedgEntryOnBeforeInsertDtldVendLedgEntry(NewDtldVendLedgEntry,DtldVendLedgEntry); <=====================
        NewDtldVendLedgEntry.INSERT(TRUE);
      UNTIL DtldVendLedgEntry.NEXT = 0;
    
      ApplyVendLedgEntryByReversal(
    ...
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseVendLedgEntryOnBeforeInsertVendLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ReverseVendLedgEntry>
    Code lines:
    ...
      END;
      VendLedgEntry."Applies-to ID" := '';
      VendLedgEntry."Reversed by Entry No." := "Entry No.";
      VendLedgEntry.Reversed := TRUE;
      VendLedgEntry.MODIFY;
      OnReverseVendLedgEntryOnBeforeInsertVendLedgEntry(NewVendLedgEntry,VendLedgEntry); <=====================
      INSERT;
    
      IF NextDtldVendLedgEntryEntryNo = 0 THEN BEGIN
        DtldVendLedgEntry.FINDLAST;
    ...
Codeunit<Data Classification Mgt.>.PROCEDURE<OnGetPrivacyMasterTables>
  Raised in: Page<Data Subject>.<OnInit>
    Code lines:
    DataClassificationMgt.OnGetPrivacyMasterTables(Rec); <=====================
  Raised in: Page<Data Classification Wizard>.PROCEDURE<ResetControls>
    Code lines:
    ...
    NextEnabled := TRUE;
    FinishEnabled := FALSE;
    RESET;
    
    IF ISEMPTY THEN
      DataClassificationMgt.OnGetPrivacyMasterTables(Rec); <=====================
    
    CASE Step OF
      Step::Welcome:
        BackEnabled := FALSE;
    ...
  Raised in: Codeunit<Data Privacy Mgmt>.PROCEDURE<CreateEntities>
    Code lines:
    DataPrivacyEntities.RESET;
    DataPrivacyEntities.DELETEALL;
    DataClassificationMgt.OnGetPrivacyMasterTables(DataPrivacyEntities); <=====================
Codeunit<Data Classification Mgt.>.PROCEDURE<OnOpenExcelSheet>
  Raised in: Codeunit<Data Classification Mgt.>.PROCEDURE<ExportToExcelSheet>
    Code lines:
    ...
    
    TempExcelBuffer.WriteSheet(DataClassificationWorksheet.CAPTION,COMPANYNAME,USERID);
    TempExcelBuffer.CloseBook;
    
    ShouldOpenFile := TRUE;
    OnOpenExcelSheet(TempExcelBuffer,ShouldOpenFile); <=====================
    IF ShouldOpenFile THEN
      TempExcelBuffer.OpenExcelWithName(ExcelFileNameTxt);
Codeunit<Data Classification Mgt.>.PROCEDURE<OnUploadExcelSheet>
  Raised in: Codeunit<Data Classification Mgt.>.PROCEDURE<ImportExcelSheet>
    Code lines:
    DataSensitivity.SETRANGE("Company Name",COMPANYNAME);
    IF DataSensitivity.ISEMPTY THEN
      FillDataSensitivityTable;
    
    ShouldUploadFile := TRUE;
    OnUploadExcelSheet(TempExcelBuffer,ShouldUploadFile); <=====================
    IF ShouldUploadFile THEN BEGIN
      FileName := '';
      UPLOADINTOSTREAM(
        ImportTitleTxt,
    ...
Codeunit<Data Migration Mgt.>.PROCEDURE<OnAfterMigrationFinished>
  Raised in: Codeunit<Data Migration Mgt.>.<OnRun>
    Code lines:
    ...
      EXIT;
    
    // migrate any other tables if any
    CheckAbortAndMigrateRemainingEntities(DataMigrationStatus,Retry);
    
    OnAfterMigrationFinished(DataMigrationStatus,FALSE,StartTime,Retry); <=====================
  Raised in: Codeunit<Data Migration Mgt.>.PROCEDURE<CheckAbortRequestedAndMigrateEntity>
    Code lines:
    IF AbortRequested THEN BEGIN
      DataMigrationStatus.RESET;
      DataMigrationStatus.SETRANGE("Migration Type",DataMigrationStatus."Migration Type");
      SetAbortStatus(DataMigrationStatus);
      OnAfterMigrationFinished(DataMigrationStatus,TRUE,StartTime,ReRun); <=====================
      EXIT(TRUE);
    END;
    
    DataMigrationStatus.SETRANGE("Destination Table ID",DestinationTableId);
    HandleEntityMigration(DataMigrationStatus,BaseAppCodeunitToRun,ReRun);
  Raised in: Codeunit<Data Migration Mgt.>.PROCEDURE<CheckAbortAndMigrateRemainingEntities>
    Code lines:
    IF AbortRequested THEN BEGIN
      DataMigrationStatus.RESET;
      DataMigrationStatus.SETRANGE("Migration Type",DataMigrationStatus."Migration Type");
      SetAbortStatus(DataMigrationStatus);
      OnAfterMigrationFinished(DataMigrationStatus,TRUE,StartTime,Retry); <=====================
      EXIT;
    END;
    
    DataMigrationStatus.SETFILTER("Destination Table ID",STRSUBSTNO('<>%1&<>%2&<>%3&<>%4',
        DATABASE::Item,
    ...
Codeunit<Data Migration Mgt.>.PROCEDURE<OnBeforeMigrationStarted>
  Raised in: Codeunit<Data Migration Mgt.>.<OnRun>
    Code lines:
    EnableDataMigrationNotificationForAllUsers;
    DataMigrationStatus.GET("Record ID to Process");
    DataMigrationStatus.SETRANGE("Migration Type",DataMigrationStatus."Migration Type");
    Retry := "Parameter String" = RetryTxt;
    
    OnBeforeMigrationStarted(DataMigrationStatus,Retry); <=====================
    
    IF NOT Retry THEN BEGIN
      DataMigrationStatus.SETRANGE(Status,DataMigrationStatus.Status::Pending);
      DataMigrationFacade.OnFillStagingTables;
    ...
Codeunit<Data Migration Mgt.>.PROCEDURE<OnBeforeStartMigration>
  Raised in: Codeunit<Data Migration Mgt.>.PROCEDURE<StartMigration>
    Code lines:
    CheckMigrationInProgress(Retry);
    
    StartNewSession := TRUE;
    CheckExistingData := TRUE;
    OnBeforeStartMigration(StartNewSession,CheckExistingData); <=====================
    
    IF CheckExistingData THEN
      CheckDataAlreadyExist(MigrationType,Retry);
    
    DataMigrationStatus.RESET;
    ...
Codeunit<Assisted Company Setup>.PROCEDURE<OnBeforeScheduleTask>
  Raised in: Codeunit<Assisted Company Setup>.PROCEDURE<ScheduleConfigPackageImport>
    Code lines:
    WITH AssistedCompanySetupStatus DO BEGIN
      LOCKTABLE;
      GET(Name);
      OnBeforeScheduleTask(DoNotScheduleTask,TaskID); <=====================
      IF DoNotScheduleTask THEN
        "Task ID" := TaskID
      ELSE
        IF TASKSCHEDULER.CANCREATETASK THEN
          "Task ID" :=
            TASKSCHEDULER.CREATETASK(
    ...
Codeunit<Encrypted Key/Value Management>.PROCEDURE<OnCleanUpEvent>
  Raised in: Codeunit<Encrypted Key/Value Management>.PROCEDURE<Cleanup>
    Code lines:
    ...
    
    LogActivity(CleanupEventTxt,RequestInitTxt,TRUE);
    COMMIT;
    
    ErrorOccured := FALSE;
    OnCleanUpEvent(ErrorOccured); <=====================
    
    IF NOT ErrorOccured THEN
      EncryptedKeyValue.DELETEALL;
    
    ...
Codeunit<Excel Data Migrator>.PROCEDURE<OnDownloadTemplate>
  Raised in: Codeunit<Excel Data Migrator>.PROCEDURE<ExportExcelTemplate>
    Code lines:
    OnDownloadTemplate(HideDialog); <=====================
    EXIT(ExportExcelTemplateByFileName(FileName,HideDialog));
Codeunit<Excel Data Migrator>.PROCEDURE<OnUploadFile>
  Raised in: Codeunit<Excel Data Migrator>.PROCEDURE<ImportExcelData>
    Code lines:
    OnUploadFile(ServerFile); <=====================
    IF ServerFile = '' THEN
      ServerFile := COPYSTR(FileManagement.UploadFile(ImportFromExcelTxt,ExcelFileExtensionTok),
          1,MAXSTRLEN(ServerFile));
    
    IF ServerFile <> '' THEN BEGIN
      ImportExcelDataByFileName(ServerFile);
      EXIT(TRUE);
    END;
    
Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<OnAfterBindSubscription>
  Raised in: Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<Preview>
    Code lines:
    ...
      ERROR(SubscriberTypeErr);
    IF NOT RecVar.ISRECORD THEN
      ERROR(RecVarTypeErr);
    
    BINDSUBSCRIPTION(PostingPreviewEventHandler);
    OnAfterBindSubscription; <=====================
    
    RunResult := RunPreview(Subscriber,RecVar);
    
    UNBINDSUBSCRIPTION(PostingPreviewEventHandler);
    ...
Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<OnAfterUnbindSubscription>
  Raised in: Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<Preview>
    Code lines:
    ...
    OnAfterBindSubscription;
    
    RunResult := RunPreview(Subscriber,RecVar);
    
    UNBINDSUBSCRIPTION(PostingPreviewEventHandler);
    OnAfterUnbindSubscription; <=====================
    
    // The OnRunPreview event expects subscriber following template: Result := <Codeunit>.RUN
    // So we assume RunPreview returns FALSE with the error.
    // To prevent return FALSE without thrown error we check error call stack.
    ...
Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<OnRunPreview>
  Raised in: Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<RunPreview>
    Code lines:
    OnRunPreview(Result,Subscriber,RecVar); <=====================
    EXIT(Result);
Codeunit<Company-Initialize>.PROCEDURE<OnCompanyInitialize>
  Raised in: Codeunit<Company-Initialize>.<OnRun>
    Code lines:
    ...
    WorkflowSetup.InitWorkflow;
    TransformationRule.CreateDefaultTransformations;
    InitElectronicFormats;
    InitApplicationAreasForSaaS;
    
    OnCompanyInitialize; <=====================
    
    Window.CLOSE;
    
    COMMIT;
Codeunit<Posting Preview Event Handler>.PROCEDURE<OnAfterFillDocumentEntry>
  Raised in: Codeunit<Posting Preview Event Handler>.PROCEDURE<FillDocumentEntry>
    Code lines:
    ...
    InsertDocumentEntry(TempServiceLedgerEntry,TempDocumentEntry);
    InsertDocumentEntry(TempWarrantyLedgerEntry,TempDocumentEntry);
    InsertDocumentEntry(TempMaintenanceLedgerEntry,TempDocumentEntry);
    InsertDocumentEntry(TempJobLedgerEntry,TempDocumentEntry);
    
    OnAfterFillDocumentEntry(TempDocumentEntry); <=====================
Codeunit<Posting Preview Event Handler>.PROCEDURE<OnAfterShowEntries>
  Raised in: Codeunit<Posting Preview Event Handler>.PROCEDURE<ShowEntries>
    Code lines:
    ...
      DATABASE::"Maintenance Ledger Entry":
        PAGE.RUN(PAGE::"Maint. Ledg. Entries Preview",TempMaintenanceLedgerEntry);
      DATABASE::"Job Ledger Entry":
        PAGE.RUN(PAGE::"Job Ledger Entries Preview",TempJobLedgerEntry);
      ELSE
        OnAfterShowEntries(TableNo); <=====================
    END;
Codeunit<Image Analysis Management>.PROCEDURE<OnAfterImageAnalysis>
  Raised in: Codeunit<Image Analysis Management>.PROCEDURE<Analyze>
    Code lines:
    ...
          ELSE
            IF LastError = '' THEN
              SetLastError(GenericErrorErr,FALSE);
    
    ImageAnalysisResult.SetJson(JSONManagement,AnalysisType);
    OnAfterImageAnalysis(ImageAnalysisResult); <=====================
    
    EXIT(NOT HasError);
Codeunit<Image Analysis Management>.PROCEDURE<OnBeforeImageAnalysis>
  Raised in: Codeunit<Image Analysis Management>.PROCEDURE<Analyze>
    Code lines:
    Initialize;
    SetLastError('',FALSE);
    OnBeforeImageAnalysis; <=====================
    
    IF (Key = '') OR (Uri = '') THEN
      SetLastError(NoApiKeyUriErr,FALSE)
    ELSE
      IF ImagePath = '' THEN
        SetLastError(NoImageErr,FALSE)
      ELSE
    ...
Codeunit<Item Jnl.-Check Line>.PROCEDURE<OnAfterCheckItemJnlLine>
  Raised in: Codeunit<Item Jnl.-Check Line>.PROCEDURE<RunCheck>
    Code lines:
    ...
         (NOT GenJnlPostPreview.IsActive)
      THEN
        CheckItemJournalLineRestriction;
    END;
    
    OnAfterCheckItemJnlLine(ItemJnlLine); <=====================
Codeunit<O365 Sales Background Setup>.PROCEDURE<OnAfterGraphSyncModified>
  Raised in: Codeunit<O365 Sales Background Setup>.PROCEDURE<InitializeGraphSync>
    Code lines:
    ...
      MarketingSetup.INSERT(TRUE);
    
    IF MarketingSetup."Sync with Microsoft Graph" <> EnableGraphSync THEN BEGIN
      MarketingSetup.VALIDATE("Sync with Microsoft Graph",EnableGraphSync);
      MarketingSetup.MODIFY(TRUE);
      OnAfterGraphSyncModified(EnableGraphSync,TriggerDeltaSync); <=====================
    END;
    
    IF NOT EnableGraphSync THEN
      EXIT;
    ...
Codeunit<Coupons Management>.PROCEDURE<OnAfterGetCouponClaims>
  Raised in: Codeunit<Coupons Management>.PROCEDURE<GetCouponsForGraphContactId>
    Code lines:
    ...
      CouponsCallDuration := CURRENTDATETIME - StartTime;
      ActivityLog.LogActivity(DummyO365CouponClaim,ActivityLog.Status::Failed,CouponsContextTxt,
        STRSUBSTNO(GetCouponsDescriptionTxt,OriginalGraphContactID),
        STRSUBSTNO(CouponsErrorTxt,GETLASTERRORTEXT,StatusCode,Response));
      COMMIT; // Make sure we log this success no matter what fails afterwards
      OnAfterGetCouponClaims(FALSE,OriginalGraphContactID,StatusCode,Response,CouponsCallDuration,RequestID); <=====================
      IF STRPOS(GETLASTERRORTEXT,OperationTimedOutTxt) <> 0 THEN
        IF GUIALLOWED THEN
          IF CONFIRM(FetchingCouponsTimedOutDisableCouponsQst) THEN BEGIN
            O365SalesInitialSetup.GET;
    ...
  Raised in: Codeunit<Coupons Management>.PROCEDURE<GetCouponsForGraphContactId>
    Code lines:
    ...
      CouponsCallDuration := CURRENTDATETIME - StartTime;
      ActivityLog.LogActivity(DummyO365CouponClaim,ActivityLog.Status::Failed,CouponsContextTxt,
        STRSUBSTNO(GetCouponsDescriptionTxt,OriginalGraphContactID),
        STRSUBSTNO(CouponsErrorTxt,GETLASTERRORTEXT,StatusCode,Response));
      COMMIT; // Make sure we log this success no matter what fails afterwards
      OnAfterGetCouponClaims(FALSE,OriginalGraphContactID,StatusCode,Response,CouponsCallDuration,RequestID); <=====================
      IF STRPOS(GETLASTERRORTEXT,OperationTimedOutTxt) <> 0 THEN
        IF GUIALLOWED THEN
          IF CONFIRM(FetchingCouponsTimedOutDisableCouponsQst) THEN BEGIN
            O365SalesInitialSetup.GET;
    ...
Codeunit<Coupons Management>.PROCEDURE<OnAfterRedeemCouponClaim>
  Raised in: Codeunit<Coupons Management>.PROCEDURE<RedeemClaim>
    Code lines:
    ...
      CouponsCallDuration := CURRENTDATETIME - StartTime;
      ActivityLog.LogActivity(DummyO365CouponClaim,ActivityLog.Status::Failed,CouponsContextTxt,
        STRSUBSTNO(RedeemCouponsDescriptionTxt,OriginalGraphContactID,ClaimID),
        STRSUBSTNO(CouponsErrorTxt,GETLASTERRORTEXT,StatusCode,Response));
      COMMIT; // Make sure we log this success no matter what fails afterwards
      OnAfterRedeemCouponClaim(FALSE,OriginalGraphContactID,StatusCode,Response,CouponsCallDuration,RequestID); <=====================
      EXIT(FALSE);
    END;
    CouponsCallDuration := CURRENTDATETIME - StartTime;
    ActivityLog.LogActivity(DummyO365CouponClaim,ActivityLog.Status::Success,CouponsContextTxt,
    ...
  Raised in: Codeunit<Coupons Management>.PROCEDURE<RedeemClaim>
    Code lines:
    ...
      CouponsCallDuration := CURRENTDATETIME - StartTime;
      ActivityLog.LogActivity(DummyO365CouponClaim,ActivityLog.Status::Failed,CouponsContextTxt,
        STRSUBSTNO(RedeemCouponsDescriptionTxt,OriginalGraphContactID,ClaimID),
        STRSUBSTNO(CouponsErrorTxt,GETLASTERRORTEXT,StatusCode,Response));
      COMMIT; // Make sure we log this success no matter what fails afterwards
      OnAfterRedeemCouponClaim(FALSE,OriginalGraphContactID,StatusCode,Response,CouponsCallDuration,RequestID); <=====================
      EXIT(FALSE);
    END;
    CouponsCallDuration := CURRENTDATETIME - StartTime;
    ActivityLog.LogActivity(DummyO365CouponClaim,ActivityLog.Status::Success,CouponsContextTxt,
    ...
Codeunit<Res. Jnl.-Post Line>.PROCEDURE<OnBeforeResLedgEntryInsert>
  Raised in: Codeunit<Res. Jnl.-Post Line>.PROCEDURE<Code>
    Code lines:
    ...
      IF ResLedgEntry."Entry Type" = ResLedgEntry."Entry Type"::Usage THEN BEGIN
        PostTimeSheetDetail(ResJnlLine,ResLedgEntry."Quantity (Base)");
        ResLedgEntry.Chargeable := IsChargable(ResJnlLine,ResLedgEntry.Chargeable);
      END;
    
      OnBeforeResLedgEntryInsert(ResLedgEntry,ResJnlLine); <=====================
    
      ResLedgEntry.INSERT(TRUE);
    
      NextEntryNo := NextEntryNo + 1;
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInitItemLedgEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InitItemLedgEntry>
    Code lines:
    ...
      END;
      IF (ItemLedgEntry.Quantity < 0) AND ("Entry Type" <> "Entry Type"::Transfer) THEN
        ItemLedgEntry."Shipped Qty. Not Returned" := ItemLedgEntry.Quantity;
    END;
    
    OnAfterInitItemLedgEntry(ItemLedgEntry,ItemJnlLine); <=====================
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInitValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InitValueEntry>
    Code lines:
    ...
          END;
      END;
    
      RoundAmtValueEntry(ValueEntry);
    
      OnAfterInitValueEntry(ValueEntry,ItemJnlLine); <=====================
    END;
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertCapLedgEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertCapLedgEntry>
    Code lines:
    ...
    
      OnBeforeInsertCapLedgEntry(CapLedgEntry,ItemJnlLine);
    
      CapLedgEntry.INSERT;
    
      OnAfterInsertCapLedgEntry(CapLedgEntry,ItemJnlLine); <=====================
    
      InsertItemReg(0,0,0,CapLedgEntry."Entry No.");
    END;
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertCapValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertCapValueEntry>
    Code lines:
    ...
      InvtPost.SetRunOnlyCheck(TRUE,NOT InvtSetup."Automatic Cost Posting",FALSE);
      IF InvtPost.BufferInvtPosting(ValueEntry) THEN
        InvtPost.PostInvtPostBufPerEntry(ValueEntry);
    
      ValueEntry.INSERT(TRUE);
      OnAfterInsertCapValueEntry(ValueEntry,ItemJnlLine); <=====================
    
      UpdateAdjmtProp(ValueEntry,CapLedgEntry."Posting Date");
    
      InsertItemReg(0,0,ValueEntry."Entry No.",0);
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertCorrItemLedgEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InitCorrItemLedgEntry>
    Code lines:
    ...
    
    OnBeforeInsertCorrItemLedgEntry(NewItemLedgEntry,OldItemLedgEntry,ItemJnlLine);
    
    NewItemLedgEntry.INSERT;
    
    OnAfterInsertCorrItemLedgEntry(NewItemLedgEntry,ItemJnlLine); <=====================
    
    IF NewItemLedgEntry."Item Tracking" <> NewItemLedgEntry."Item Tracking"::None THEN
      ItemTrackingMgt.ExistingExpirationDate(
        NewItemLedgEntry."Item No.",
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertCorrValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertCorrValueEntry>
    Code lines:
    ...
    IF NewValueEntry.Inventoriable AND NOT Item."Inventory Value Zero" THEN
      PostInventoryToGL(NewValueEntry);
    
    NewValueEntry.INSERT;
    
    OnAfterInsertCorrValueEntry(NewValueEntry,ItemJnlLine); <=====================
    
    ItemApplnEntry.SetOutboundsNotUpdated(ItemLedgEntry);
    
    UpdateAdjmtProp(NewValueEntry,ItemLedgEntry."Posting Date");
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertItemLedgEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertItemLedgEntry>
    Code lines:
    ...
    
      OnBeforeInsertItemLedgEntry(ItemLedgEntry,ItemJnlLine);
    
      ItemLedgEntry.INSERT(TRUE);
    
      OnAfterInsertItemLedgEntry(ItemLedgEntry,ItemJnlLine); <=====================
    
      InsertItemReg(ItemLedgEntry."Entry No.",0,0,0);
    END;
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertValueEntry>
    Code lines:
    ...
      IF ValueEntry.Inventoriable AND NOT Item."Inventory Value Zero" THEN
        PostInventoryToGL(ValueEntry);
    
      ValueEntry.INSERT;
    
      OnAfterInsertValueEntry(ValueEntry,ItemJnlLine); <=====================
    
      ItemApplnEntry.SetOutboundsNotUpdated(ItemLedgEntry);
    
      UpdateAdjmtProp(ValueEntry,ItemLedgEntry."Posting Date");
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterPostItemJnlLine>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<Code>
    Code lines:
    ...
        "Item Shpt. Entry No." := CapLedgEntryNo
      ELSE
        "Item Shpt. Entry No." := GlobalItemLedgEntry."Entry No.";
    END;
    
    OnAfterPostItemJnlLine(ItemJnlLine); <=====================
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertCapLedgEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertCapLedgEntry>
    Code lines:
    ...
    
      CapLedgEntry."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
      CapLedgEntry."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
      CapLedgEntry."Dimension Set ID" := "Dimension Set ID";
    
      OnBeforeInsertCapLedgEntry(CapLedgEntry,ItemJnlLine); <=====================
    
      CapLedgEntry.INSERT;
    
      OnAfterInsertCapLedgEntry(CapLedgEntry,ItemJnlLine);
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertCapValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertCapValueEntry>
    Code lines:
    ...
    
      ValueEntry."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
      ValueEntry."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
      ValueEntry."Dimension Set ID" := "Dimension Set ID";
    
      OnBeforeInsertCapValueEntry(ValueEntry,ItemJnlLine); <=====================
    
      InvtPost.SetRunOnlyCheck(TRUE,NOT InvtSetup."Automatic Cost Posting",FALSE);
      IF InvtPost.BufferInvtPosting(ValueEntry) THEN
        InvtPost.PostInvtPostBufPerEntry(ValueEntry);
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertCorrItemLedgEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InitCorrItemLedgEntry>
    Code lines:
    ...
    IF OldItemLedgEntry.Positive THEN
      NewItemLedgEntry."Applies-to Entry" := OldItemLedgEntry."Entry No."
    ELSE
      NewItemLedgEntry."Applies-to Entry" := 0;
    
    OnBeforeInsertCorrItemLedgEntry(NewItemLedgEntry,OldItemLedgEntry,ItemJnlLine); <=====================
    
    NewItemLedgEntry.INSERT;
    
    OnAfterInsertCorrItemLedgEntry(NewItemLedgEntry,ItemJnlLine);
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertCorrValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertCorrValueEntry>
    Code lines:
    ...
    NewValueEntry."Cost Posted to G/L" := 0;
    NewValueEntry."Cost Posted to G/L (ACY)" := 0;
    NewValueEntry."Expected Cost Posted to G/L" := 0;
    NewValueEntry."Exp. Cost Posted to G/L (ACY)" := 0;
    
    OnBeforeInsertCorrValueEntry(NewValueEntry,OldValueEntry,ItemJnlLine); <=====================
    
    IF NewValueEntry.Inventoriable AND NOT Item."Inventory Value Zero" THEN
      PostInventoryToGL(NewValueEntry);
    
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertItemLedgEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertItemLedgEntry>
    Code lines:
    ...
        ItemLedgEntry."Job Task No." := "Job Task No.";
      END;
    
      ItemLedgEntry.UpdateItemTracking;
    
      OnBeforeInsertItemLedgEntry(ItemLedgEntry,ItemJnlLine); <=====================
    
      ItemLedgEntry.INSERT(TRUE);
    
      OnAfterInsertItemLedgEntry(ItemLedgEntry,ItemJnlLine);
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertPhysInvtLedgEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertPhysInventoryEntry>
    Code lines:
    ...
      PhysInvtLedgEntry."Phys Invt Counting Period Code" :=
        "Phys Invt Counting Period Code";
      PhysInvtLedgEntry."Phys Invt Counting Period Type" :=
        "Phys Invt Counting Period Type";
    
      OnBeforeInsertPhysInvtLedgEntry(PhysInvtLedgEntry,ItemJnlLine); <=====================
      PhysInvtLedgEntry.INSERT;
    
      InsertItemReg(0,PhysInvtLedgEntry."Entry No.",0,0);
    END;
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertTransferEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertTransferEntry>
    Code lines:
    ...
            ItemJnlLine,NewItemLedgEntry,NewItemLedgEntry."Remaining Quantity",TRUE);
    
      ApplyItemLedgEntry(NewItemLedgEntry,ItemLedgEntry2,NewValueEntry,TRUE);
      AutoTrack(NewItemLedgEntry,IsReserved);
    
      OnBeforeInsertTransferEntry(NewItemLedgEntry,OldItemLedgEntry,ItemJnlLine); <=====================
    
      InsertItemLedgEntry(NewItemLedgEntry,TRUE);
      InsertValueEntry(NewValueEntry,NewItemLedgEntry,TRUE);
    
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertValueEntry>
    Code lines:
    ...
          ValueEntry."Sales Amount (Expected)",
          ValueEntry."Purchase Amount (Expected)",
          ItemLedgEntry.Quantity = ItemLedgEntry."Invoiced Quantity");
      END;
    
      OnBeforeInsertValueEntry(ValueEntry,ItemJnlLine); <=====================
    
      IF ValueEntry.Inventoriable AND NOT Item."Inventory Value Zero" THEN
        PostInventoryToGL(ValueEntry);
    
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforePostItemJnlLine>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<Code>
    Code lines:
    OnBeforePostItemJnlLine(ItemJnlLine); <=====================
    
    WITH ItemJnlLine DO BEGIN
      IF EmptyLine AND NOT Correction AND NOT Adjustment THEN
        IF NOT IsValueEntryForDeletedItem THEN
          EXIT;
    
      ItemJnlCheckLine.SetCalledFromInvtPutawayPick(CalledFromInvtPutawayPick);
      ItemJnlCheckLine.SetCalledFromAdjustment(CalledFromAdjustment);
    
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnCheckPostingCostToGL>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<Code>
    Code lines:
    ...
      InitValueEntryNo;
    
      GetInvtSetup;
      IF NOT CalledFromAdjustment THEN
        PostToGL := InvtSetup."Automatic Cost Posting";
      OnCheckPostingCostToGL(PostToGL); <=====================
    
      IF (SNRequired OR LotRequired) AND ("Quantity (Base)" <> 0) AND
         ("Value Entry Type" = "Value Entry Type"::"Direct Cost") AND
         NOT DisableItemTracking AND NOT Adjustment AND
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnPostOutputOnBeforeProdOrderRtngLineModify>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<PostOutput>
    Code lines:
    ...
          IF Finished THEN
            ProdOrderRtngLine."Routing Status" := ProdOrderRtngLine."Routing Status"::Finished
          ELSE
            ProdOrderRtngLine."Routing Status" := ProdOrderRtngLine."Routing Status"::"In Progress";
          LastOperation := (NOT NextOperationExist(ProdOrderRtngLine));
          OnPostOutputOnBeforeProdOrderRtngLineModify(ProdOrderRtngLine,ProdOrderLine); <=====================
          ProdOrderRtngLine.MODIFY;
        END ELSE
          LastOperation := TRUE;
    
    ...
Codeunit<Resource-Find Cost>.PROCEDURE<OnAfterFindResUnitCost>
  Raised in: Codeunit<Resource-Find Cost>.PROCEDURE<FindResUnitCost>
    Code lines:
    ...
      Code := Res."No.";
      "Direct Unit Cost" := Res."Direct Unit Cost";
      "Unit Cost" := Res."Unit Cost";
    END;
    
    OnAfterFindResUnitCost(NearestResCost,Res); <=====================
Codeunit<Resource-Find Price>.PROCEDURE<OnAfterFindResPrice>
  Raised in: Codeunit<Resource-Find Price>.PROCEDURE<FindResPrice>
    Code lines:
    ...
    
      IF ResPrice2.GET(Type::All,'',"Work Type Code",'') THEN
        EXIT(TRUE);
    END;
    
    OnAfterFindResPrice(ResPrice,Res); <=====================
Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnAfterRun>
  Raised in: Codeunit<Gen. Jnl.-Apply>.<OnRun>
    Code lines:
    ...
          ERROR(
            Text005,
            FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));
      END;
    END;
    OnAfterRun(GenJnlLine); <=====================
    
    Rec := GenJnlLine;
Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnBeforeRun>
  Raised in: Codeunit<Gen. Jnl.-Apply>.<OnRun>
    Code lines:
    GenJnlLine.COPY(Rec);
    
    OnBeforeRun(GenJnlLine); <=====================
    
    WITH GenJnlLine DO BEGIN
      GetCurrency;
      IF "Bal. Account Type" IN
         ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::Employee]
      THEN BEGIN
        AccType := "Bal. Account Type";
    ...
Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<OnAfterPostApplyCustLedgEntry>
  Raised in: Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<CustPostApplyCustLedgEntry>
    Code lines:
    ...
    
      EntryNoBeforeApplication := FindLastApplDtldCustLedgEntry;
    
      OnBeforePostApplyCustLedgEntry(GenJnlLine,CustLedgEntry);
      GenJnlPostLine.CustPostApplyCustLedgEntry(GenJnlLine,CustLedgEntry);
      OnAfterPostApplyCustLedgEntry(GenJnlLine,CustLedgEntry); <=====================
    
      EntryNoAfterApplication := FindLastApplDtldCustLedgEntry;
      IF EntryNoAfterApplication = EntryNoBeforeApplication THEN
        ERROR(STRSUBSTNO(NoEntriesAppliedErr,GenJnlLine.FIELDCAPTION("Applies-to ID")));
    ...
Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<OnAfterPostUnapplyCustLedgEntry>
  Raised in: Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<PostUnApplyCustomerCommit>
    Code lines:
    ...
      GenJnlLine."System-Created Entry" := TRUE;
      Window.OPEN(UnapplyingMsg);
    
      OnBeforePostUnapplyCustLedgEntry(GenJnlLine,CustLedgEntry,DtldCustLedgEntry2);
      GenJnlPostLine.UnapplyCustLedgEntry(GenJnlLine,DtldCustLedgEntry2);
      OnAfterPostUnapplyCustLedgEntry(GenJnlLine,CustLedgEntry,DtldCustLedgEntry2); <=====================
    
      IF PreviewMode THEN
        GenJnlPostPreview.ThrowError;
    
    ...
Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<OnBeforePostApplyCustLedgEntry>
  Raised in: Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<CustPostApplyCustLedgEntry>
    Code lines:
    ...
      GenJnlLine."Source Code" := SourceCodeSetup."Sales Entry Application";
      GenJnlLine."System-Created Entry" := TRUE;
    
      EntryNoBeforeApplication := FindLastApplDtldCustLedgEntry;
    
      OnBeforePostApplyCustLedgEntry(GenJnlLine,CustLedgEntry); <=====================
      GenJnlPostLine.CustPostApplyCustLedgEntry(GenJnlLine,CustLedgEntry);
      OnAfterPostApplyCustLedgEntry(GenJnlLine,CustLedgEntry);
    
      EntryNoAfterApplication := FindLastApplDtldCustLedgEntry;
    ...
Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<OnBeforePostUnapplyCustLedgEntry>
  Raised in: Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<PostUnApplyCustomerCommit>
    Code lines:
    ...
      GenJnlLine."Source Code" := SourceCodeSetup."Unapplied Sales Entry Appln.";
      GenJnlLine."Source Currency Code" := "Currency Code";
      GenJnlLine."System-Created Entry" := TRUE;
      Window.OPEN(UnapplyingMsg);
    
      OnBeforePostUnapplyCustLedgEntry(GenJnlLine,CustLedgEntry,DtldCustLedgEntry2); <=====================
      GenJnlPostLine.UnapplyCustLedgEntry(GenJnlLine,DtldCustLedgEntry2);
      OnAfterPostUnapplyCustLedgEntry(GenJnlLine,CustLedgEntry,DtldCustLedgEntry2);
    
      IF PreviewMode THEN
    ...
Codeunit<VendEntry-Apply Posted Entries>.PROCEDURE<OnBeforePostApplyVendLedgEntry>
  Raised in: Codeunit<VendEntry-Apply Posted Entries>.PROCEDURE<VendPostApplyVendLedgEntry>
    Code lines:
    ...
      GenJnlLine."Source Code" := SourceCodeSetup."Purchase Entry Application";
      GenJnlLine."System-Created Entry" := TRUE;
    
      EntryNoBeforeApplication := FindLastApplDtldVendLedgEntry;
    
      OnBeforePostApplyVendLedgEntry(GenJnlLine,VendLedgEntry); <=====================
      GenJnlPostLine.VendPostApplyVendLedgEntry(GenJnlLine,VendLedgEntry);
    
      EntryNoAfterApplication := FindLastApplDtldVendLedgEntry;
      IF EntryNoAfterApplication = EntryNoBeforeApplication THEN
    ...
Codeunit<VendEntry-Apply Posted Entries>.PROCEDURE<OnBeforePostUnapplyVendLedgEntry>
  Raised in: Codeunit<VendEntry-Apply Posted Entries>.PROCEDURE<PostUnApplyVendor>
    Code lines:
    ...
      GenJnlLine."Source No." := "Vendor No.";
      GenJnlLine."Source Code" := SourceCodeSetup."Unapplied Purch. Entry Appln.";
      GenJnlLine."Source Currency Code" := "Currency Code";
      GenJnlLine."System-Created Entry" := TRUE;
      Window.OPEN(UnapplyingMsg);
      OnBeforePostUnapplyVendLedgEntry(GenJnlLine,VendLedgEntry,DtldVendLedgEntry2); <=====================
      GenJnlPostLine.UnapplyVendLedgEntry(GenJnlLine,DtldVendLedgEntry2);
    
      IF PreviewMode THEN
        GenJnlPostPreview.ThrowError;
    ...
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnAfterCheckJnlLine>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<CheckLines>
    Code lines:
    ...
             ("Inventory Value Per" = "Inventory Value Per"::" ") AND
             "Partial Revaluation"
          THEN
            CheckRemainingQty;
    
          OnAfterCheckJnlLine(ItemJnlLine); <=====================
        END;
    
        IF NEXT = 0 THEN
          FINDFIRST;
    ...
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnAfterPostWhseJnlLine>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<PostWhseJnlLine>
    Code lines:
    ...
            IF TempWhseJnlLine2.FINDSET THEN
              REPEAT
                WMSMgmt.CheckWhseJnlLine(TempWhseJnlLine2,1,0,FALSE);
                WhseJnlPostLine.RUN(TempWhseJnlLine2);
              UNTIL TempWhseJnlLine2.NEXT = 0;
            OnAfterPostWhseJnlLine(ItemJnlLine); <=====================
          END;
    
      IF "Entry Type" = "Entry Type"::Transfer THEN BEGIN
        GetLocation("New Location Code");
    ...
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<PostWhseJnlLine>
    Code lines:
    ...
            IF TempWhseJnlLine2.FINDSET THEN
              REPEAT
                WMSMgmt.CheckWhseJnlLine(TempWhseJnlLine2,1,0,FALSE);
                WhseJnlPostLine.RUN(TempWhseJnlLine2);
              UNTIL TempWhseJnlLine2.NEXT = 0;
            OnAfterPostWhseJnlLine(ItemJnlLine); <=====================
          END;
    
      IF "Entry Type" = "Entry Type"::Transfer THEN BEGIN
        GetLocation("New Location Code");
    ...
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnPostLinesBeforePostWhseJnlLine>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<PostLines>
    Code lines:
    ...
            OriginalQuantityBase := "Quantity (Base)";
            IF NOT ItemJnlPostLine.RunWithCheck(ItemJnlLine) THEN
              ItemJnlPostLine.CheckItemTracking;
            IF "Value Entry Type" <> "Value Entry Type"::Revaluation THEN BEGIN
              ItemJnlPostLine.CollectTrackingSpecification(TempTrackingSpecification);
              OnPostLinesBeforePostWhseJnlLine(ItemJnlLine); <=====================
              PostWhseJnlLine(ItemJnlLine,OriginalQuantity,OriginalQuantityBase,TempTrackingSpecification);
            END;
          END;
    
    ...
Codeunit<Document-Mailing>.PROCEDURE<OnBeforeSendEmail>
  Raised in: Codeunit<Document-Mailing>.PROCEDURE<EmailFileInternal>
    Code lines:
    ...
      IF HtmlBodyFilePath <> '' THEN BEGIN
        VALIDATE("Plaintext Formatted",FALSE);
        VALIDATE("Body File Path",HtmlBodyFilePath);
      END;
    
      OnBeforeSendEmail(TempEmailItem,IsFromPostedDoc,PostedDocNo,HideDialog,ReportUsage); <=====================
    
      IF OfficeMgt.AttachAvailable THEN
        OfficeMgt.AttachDocument(AttachmentFilePath,AttachmentFileName,GetBodyText,Subject)
      ELSE
    ...
Codeunit<Cust-Check Cr. Limit>.PROCEDURE<OnNewCheckRemoveCustomerNotifications>
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<GenJnlLineCheck>
    Code lines:
    IF NOT GUIALLOWED THEN
      EXIT;
    
    IF NOT SalesHeader.GET(GenJnlLine."Document Type",GenJnlLine."Document No.") THEN
      SalesHeader.INIT;
    OnNewCheckRemoveCustomerNotifications(SalesHeader.RECORDID,TRUE); <=====================
    
    IF CustCheckCreditLimit.GenJnlLineShowWarningAndGetCause(GenJnlLine,AdditionalContextId) THEN
      CreateAndSendNotification(SalesHeader.RECORDID,AdditionalContextId,'');
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<SalesHeaderCheck>
    Code lines:
    IF NOT GUIALLOWED THEN
      EXIT;
    
    OnNewCheckRemoveCustomerNotifications(SalesHeader.RECORDID,TRUE); <=====================
    
    IF NOT CustCheckCreditLimit.SalesHeaderShowWarningAndGetCause(SalesHeader,AdditionalContextId) THEN
      SalesHeader.OnCustomerCreditLimitNotExceeded
    ELSE
      IF InstructionMgt.IsEnabled(GetInstructionType(FORMAT(SalesHeader."Document Type"),SalesHeader."No.")) THEN BEGIN
        CreditLimitExceeded := TRUE;
    ...
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<SalesLineCheck>
    Code lines:
    IF NOT GUIALLOWED THEN
      EXIT;
    
    IF NOT SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.") THEN
      SalesHeader.INIT;
    OnNewCheckRemoveCustomerNotifications(SalesHeader.RECORDID,FALSE); <=====================
    
    IF NOT CustCheckCreditLimit.SalesLineShowWarningAndGetCause(SalesLine,AdditionalContextId) THEN
      SalesHeader.OnCustomerCreditLimitNotExceeded
    ELSE
    ...
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<ServiceHeaderCheck>
    Code lines:
    IF NOT GUIALLOWED THEN
      EXIT;
    
    OnNewCheckRemoveCustomerNotifications(ServiceHeader.RECORDID,TRUE); <=====================
    
    IF CustCheckCreditLimit.ServiceHeaderShowWarningAndGetCause(ServiceHeader,AdditionalContextId) THEN
      CreateAndSendNotification(ServiceHeader.RECORDID,AdditionalContextId,'');
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<ServiceLineCheck>
    Code lines:
    IF NOT GUIALLOWED THEN
      EXIT;
    
    IF NOT ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.") THEN
      ServiceHeader.INIT;
    OnNewCheckRemoveCustomerNotifications(ServiceHeader.RECORDID,FALSE); <=====================
    
    IF CustCheckCreditLimit.ServiceLineShowWarningAndGetCause(ServiceLine,AdditionalContextId) THEN
      CreateAndSendNotification(ServiceHeader.RECORDID,AdditionalContextId,'');
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<ServiceContractHeaderCheck>
    Code lines:
    IF NOT GUIALLOWED THEN
      EXIT;
    
    OnNewCheckRemoveCustomerNotifications(ServiceContractHeader.RECORDID,TRUE); <=====================
    
    IF CustCheckCreditLimit.ServiceContractHeaderShowWarningAndGetCause(ServiceContractHeader,AdditionalContextId) THEN
      CreateAndSendNotification(ServiceContractHeader.RECORDID,AdditionalContextId,'');
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<BlanketSalesOrderToOrderCheck>
    Code lines:
    IF NOT GUIALLOWED THEN
      EXIT;
    
    OnNewCheckRemoveCustomerNotifications(SalesOrderHeader.RECORDID,TRUE); <=====================
    
    IF CustCheckCreditLimit.SalesHeaderShowWarningAndGetCause(SalesOrderHeader,AdditionalContextId) THEN
      CreateAndSendNotification(SalesOrderHeader.RECORDID,AdditionalContextId,'');
  Raised in: Codeunit<ServContractManagement>.PROCEDURE<ChangeCustNoOnServContract>
    Code lines:
    ...
      IF "Customer No." <> NewCustomertNo THEN BEGIN
        IF ServMgtSetup."Register Contract Changes" THEN
          ContractChangeLog.LogContractChange(
            "Contract No.",0,FIELDCAPTION("Customer No."),0,"Customer No.",NewCustomertNo,'',0);
        "Customer No." := NewCustomertNo;
        CustCheckCrLimit.OnNewCheckRemoveCustomerNotifications(RECORDID,TRUE); <=====================
    
        Cust.GET(NewCustomertNo);
        SetHideValidationDialog(TRUE);
        IF Cust."Bill-to Customer No." <> '' THEN
    ...
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterCarryOutReqLineAction>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<CarryOutReqLineAction>
    Code lines:
    ...
                InsertPurchOrderLine(ReqLine,PurchOrderHeader);
              END;
          END;
      END;
    
    OnAfterCarryOutReqLineAction(ReqLine,PurchOrderHeader); <=====================
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterCheckReqWkshLine>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<CheckReqWkshLine>
    Code lines:
    ...
                SalesLine."Document No.",
                SalesLine."Line No."));
        END;
    END;
    
    OnAfterCheckReqWkshLine(ReqLine2); <=====================
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterInsertPurchOrderHeader>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<InsertHeader>
    Code lines:
    ...
          PurchOrderHeader."Ship-to Country/Region Code" := SalesHeader."Ship-to Country/Region Code";
        END;
      IF SpecialOrder THEN
        IF Vendor.GET(PurchOrderHeader."Buy-from Vendor No.") THEN
          PurchOrderHeader."Shipment Method Code" := Vendor."Shipment Method Code";
      OnAfterInsertPurchOrderHeader(ReqLine2,PurchOrderHeader); <=====================
      PurchOrderHeader.MODIFY;
      PurchOrderHeader.MARK(TRUE);
      TempDocumentEntry.INIT;
      TempDocumentEntry."Table ID" := DATABASE::"Purchase Header";
    ...
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterReserveBindingOrderToPurch>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<ReserveBindingOrderToPurch>
    Code lines:
    ...
          END;
        END;
    END;
    PurchLine.MODIFY;
    
    OnAfterReserveBindingOrderToPurch(PurchLine,ReqLine,ReservQty,ReservQtyBase); <=====================
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterSet>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<Set>
    Code lines:
    ...
    PrintPurchOrders := NewPrintPurchOrder;
    OrderDateReq := PurchOrderHeader."Order Date";
    PostingDateReq := PurchOrderHeader."Posting Date";
    ReceiveDateReq := PurchOrderHeader."Expected Receipt Date";
    ReferenceReq := PurchOrderHeader."Your Reference";
    OnAfterSet(NewPurchOrderHeader); <=====================
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnBeforePurchOrderLineInsert>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<InsertPurchOrderLine>
    Code lines:
    ...
      DimensionSetIDArr[2] := "Dimension Set ID";
      PurchOrderLine."Dimension Set ID" :=
        DimMgt.GetCombinedDimensionSetID(
          DimensionSetIDArr,PurchOrderLine."Shortcut Dimension 1 Code",PurchOrderLine."Shortcut Dimension 2 Code");
    
      OnBeforePurchOrderLineInsert(PurchOrderLine,ReqLine2); <=====================
    
      PurchOrderLine.INSERT;
    
      IF Reserve THEN
    ...
Codeunit<VAT Entry - Edit>.PROCEDURE<OnBeforeVATEntryModify>
  Raised in: Codeunit<VAT Entry - Edit>.<OnRun>
    Code lines:
    ...
    VATEntry."Bill-to/Pay-to No." := "Bill-to/Pay-to No.";
    VATEntry."Ship-to/Order Address Code" := "Ship-to/Order Address Code";
    VATEntry."EU 3-Party Trade" := "EU 3-Party Trade";
    VATEntry."Country/Region Code" := "Country/Region Code";
    VATEntry."VAT Registration No." := "VAT Registration No.";
    OnBeforeVATEntryModify(VATEntry,Rec); <=====================
    VATEntry.TESTFIELD("Entry No.","Entry No.");
    VATEntry.MODIFY;
    Rec := VATEntry;
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnAfterCalcItemPlanningFields>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<CalcItemPlanningFields>
    Code lines:
    ...
        CALCFIELDS(
          "Trans. Ord. Shipment (Qty.)",
          "Qty. in Transit",
          "Trans. Ord. Receipt (Qty.)");
    
      OnAfterCalcItemPlanningFields(Item); <=====================
    END;
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnAfterCalculateNeed>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<CalculateNeed>
    Code lines:
    ...
        "Qty. on Sales Return";
      PlannedOrderReleases :=
        "Planned Order Release (Qty.)" +
        "Purch. Req. Release (Qty.)";
    END;
    OnAfterCalculateNeed(Item,GrossRequirement,PlannedOrderReceipt,ScheduledReceipt,PlannedOrderReleases); <=====================
Codeunit<Format Address>.PROCEDURE<OnBeforeContactAddrAlt>
  Raised in: Codeunit<Format Address>.PROCEDURE<ContactAddrAlt>
    Code lines:
    OnBeforeContactAddrAlt(AddrArray,Cont,AltAddressCode,ActiveDate,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    RMSetup.GET;
    
    IF (Cont.Type = Cont.Type::Person) AND (Cont."Company No." <> '') THEN BEGIN
      ContCompany.GET(Cont."Company No.");
      CompanyAltAddressCode := ContCompany.ActiveAltAddress(ActiveDate);
      ContIdenticalAddress := Cont.IdenticalAddress(ContCompany);
    ...
Codeunit<Format Address>.PROCEDURE<OnBeforeFormatAddress>
  Raised in: Codeunit<Format Address>.PROCEDURE<FormatAddr>
    Code lines:
    ...
          CountyLineNo := 6;
          CountryLineNo := 7;
        END;
    END;
    
    OnBeforeFormatAddress( <=====================
      Country,AddrArray,Name,Name2,Contact,Addr,Addr2,City,PostCode,County,CountryCode,NameLineNo,Name2LineNo,
      AddrLineNo,Addr2LineNo,ContLineNo,PostCodeCityLineNo,CountyLineNo,CountryLineNo,Handled);
    IF Handled THEN
      EXIT;
    ...
Codeunit<Exchange Acc. G/L Journal Line>.PROCEDURE<OnAfterOnRun>
  Raised in: Codeunit<Exchange Acc. G/L Journal Line>.<OnRun>
    Code lines:
    ...
      "Source Currency Amount" := Amount;
      "Source Curr. VAT Base Amount" := "VAT Base Amount";
      "Source Curr. VAT Amount" := "VAT Amount";
    END;
    
    OnAfterOnRun(Rec,GenJnlLine2); <=====================
Codeunit<Exchange Acc. G/L Journal Line>.PROCEDURE<OnBeforeOnRun>
  Raised in: Codeunit<Exchange Acc. G/L Journal Line>.<OnRun>
    Code lines:
    OnBeforeOnRun(Rec); <=====================
    
    GenJnlLine2 := Rec;
    "Account Type" := GenJnlLine2."Bal. Account Type";
    "Account No." := GenJnlLine2."Bal. Account No.";
    "VAT %" := GenJnlLine2."Bal. VAT %";
    "VAT Amount" := GenJnlLine2."Bal. VAT Amount";
    "VAT Amount (LCY)" := GenJnlLine2."Bal. VAT Amount (LCY)";
    "VAT Difference" := GenJnlLine2."Bal. VAT Difference";
    "Gen. Posting Type" := GenJnlLine2."Bal. Gen. Posting Type";
    ...
Codeunit<CheckManagement>.PROCEDURE<OnAfterFinancialVoidCheck>
  Raised in: Codeunit<CheckManagement>.PROCEDURE<FinancialVoidCheck>
    Code lines:
    ...
    
    MarkCheckEntriesVoid(CheckLedgEntry,ConfirmFinancialVoid.GetVoidDate);
    COMMIT;
    UpdateAnalysisView.UpdateAll(0,TRUE);
    
    OnAfterFinancialVoidCheck(CheckLedgEntry); <=====================
Codeunit<CheckManagement>.PROCEDURE<OnAfterVoidCheck>
  Raised in: Codeunit<CheckManagement>.PROCEDURE<VoidCheck>
    Code lines:
    ...
    CheckLedgEntry2."Entry Status" := CheckLedgEntry2."Entry Status"::Voided;
    CheckLedgEntry2."Positive Pay Exported" := FALSE;
    CheckLedgEntry2.Open := FALSE;
    CheckLedgEntry2.MODIFY;
    
    OnAfterVoidCheck(GenJnlLine,CheckLedgEntry2); <=====================
Codeunit<CheckManagement>.PROCEDURE<OnBeforeFinancialVoidCheck>
  Raised in: Codeunit<CheckManagement>.PROCEDURE<FinancialVoidCheck>
    Code lines:
    OnBeforeFinancialVoidCheck(CheckLedgEntry); <=====================
    
    CheckLedgEntry.TESTFIELD("Entry Status",CheckLedgEntry."Entry Status"::Posted);
    CheckLedgEntry.TESTFIELD("Statement Status",CheckLedgEntry."Statement Status"::Open);
    CheckLedgEntry.TESTFIELD("Bal. Account No.");
    BankAcc.GET(CheckLedgEntry."Bank Account No.");
    BankAccLedgEntry2.GET(CheckLedgEntry."Bank Account Ledger Entry No.");
    SourceCodeSetup.GET;
    WITH GLEntry DO BEGIN
      SETCURRENTKEY("Transaction No.");
    ...
Codeunit<CheckManagement>.PROCEDURE<OnBeforeVoidCheck>
  Raised in: Codeunit<CheckManagement>.PROCEDURE<VoidCheck>
    Code lines:
    OnBeforeVoidCheck(GenJnlLine); <=====================
    
    GenJnlLine.TESTFIELD("Bank Payment Type",GenJnlLine2."Bank Payment Type"::"Computer Check");
    GenJnlLine.TESTFIELD("Check Printed",TRUE);
    GenJnlLine.TESTFIELD("Document No.");
    
    IF GenJnlLine."Bal. Account No." = '' THEN BEGIN
      GenJnlLine."Check Printed" := FALSE;
      GenJnlLine.DELETE(TRUE);
    END;
    ...
Codeunit<Shipment Header - Edit>.PROCEDURE<OnBeforeSalesShptHeaderModify>
  Raised in: Codeunit<Shipment Header - Edit>.<OnRun>
    Code lines:
    ...
    SalesShptHeader.LOCKTABLE;
    SalesShptHeader.FIND;
    SalesShptHeader."Shipping Agent Code" := "Shipping Agent Code";
    SalesShptHeader."Shipping Agent Service Code" := "Shipping Agent Service Code";
    SalesShptHeader."Package Tracking No." := "Package Tracking No.";
    OnBeforeSalesShptHeaderModify(SalesShptHeader,Rec); <=====================
    SalesShptHeader.TESTFIELD("No.","No.");
    SalesShptHeader.MODIFY;
    Rec := SalesShptHeader;
Codeunit<Reminder-Make>.PROCEDURE<OnAfterMakeReminder>
  Raised in: Codeunit<Reminder-Make>.PROCEDURE<MakeReminder>
    Code lines:
    ...
    RemoveLinesOfNegativeReminder(ReminderHeader);
    
    ReminderLevel.RESET;
    CustLedgEntry.RESET;
    
    OnAfterMakeReminder(ReminderHeader,ReminderLine); <=====================
    
    EXIT(TRUE);
Codeunit<Reminder-Issue>.PROCEDURE<OnAfterIssueReminder>
  Raised in: Codeunit<Reminder-Issue>.<OnRun>
    Code lines:
    ...
        UNTIL ReminderLine.NEXT = 0;
      ReminderLine.DELETEALL;
      DELETE;
    END;
    
    OnAfterIssueReminder(ReminderHeader,IssuedReminderHeader."No."); <=====================
Codeunit<Reminder-Issue>.PROCEDURE<OnBeforeIssueReminder>
  Raised in: Codeunit<Reminder-Issue>.<OnRun>
    Code lines:
    OnBeforeIssueReminder(ReminderHeader); <=====================
    
    WITH ReminderHeader DO BEGIN
      UpdateReminderRounding(ReminderHeader);
      IF (PostingDate <> 0D) AND (ReplacePostingDate OR ("Posting Date" = 0D)) THEN
        VALIDATE("Posting Date",PostingDate);
      TESTFIELD("Customer No.");
      CheckIfBlocked("Customer No.");
    
      TESTFIELD("Posting Date");
    ...
Codeunit<FinChrgMemo-Issue>.PROCEDURE<OnAfterIssueFinChargeMemo>
  Raised in: Codeunit<FinChrgMemo-Issue>.<OnRun>
    Code lines:
    ...
    
      FinChrgMemoLine.DELETEALL;
      DELETE;
    END;
    
    OnAfterIssueFinChargeMemo(FinChrgMemoHeader,IssuedFinChrgMemoHeader."No."); <=====================
Codeunit<FinChrgMemo-Issue>.PROCEDURE<OnBeforeIssueFinChargeMemo>
  Raised in: Codeunit<FinChrgMemo-Issue>.<OnRun>
    Code lines:
    OnBeforeIssueFinChargeMemo(FinChrgMemoHeader); <=====================
    
    WITH FinChrgMemoHeader DO BEGIN
      UpdateFinanceChargeRounding(FinChrgMemoHeader);
      IF (PostingDate <> 0D) AND (ReplacePostingDate OR ("Posting Date" = 0D)) THEN
        VALIDATE("Posting Date",PostingDate);
      TESTFIELD("Customer No.");
      TESTFIELD("Posting Date");
      TESTFIELD("Document Date");
      TESTFIELD("Due Date");
    ...
Codeunit<Mail>.PROCEDURE<OnGetEmailAddressFromActiveDirectory>
  Raised in: Codeunit<Mail>.PROCEDURE<GetActiveDirectoryMailFromUser>
    Code lines:
    OnGetEmailAddressFromActiveDirectory(Email,Handled); <=====================
    IF Handled THEN
      EXIT(Email);
    EXIT(GetEmailAddressFromActiveDirectory);
Codeunit<ClientTypeManagement>.PROCEDURE<OnAfterGetCurrentClientType>
  Raised in: Codeunit<ClientTypeManagement>.PROCEDURE<GetCurrentClientType>
    Code lines:
    CurrClientType := CURRENTCLIENTTYPE;
    OnAfterGetCurrentClientType(CurrClientType); <=====================
Codeunit<LogInManagement>.PROCEDURE<OnAfterLogInStart>
  Raised in: Codeunit<LogInManagement>.PROCEDURE<LogInStart>
    Code lines:
    ...
    
    SetupMyRecords;
    
    ApplicationAreaSetup.SetupApplicationArea;
    
    OnAfterLogInStart; <=====================
Codeunit<SMTP Mail>.PROCEDURE<OnBeforeTrySend>
  Raised in: Codeunit<SMTP Mail>.PROCEDURE<TrySend>
    Code lines:
    OnBeforeTrySend; <=====================
    SendResult := '';
    Password := SMTPMailSetup.GetPassword;
    WITH SMTPMailSetup DO
      SendResult :=
        Mail.Send(
          "SMTP Server",
          "SMTP Server Port",
          Authentication <> Authentication::Anonymous,
          "User ID",
    ...
Codeunit<DimensionManagement>.PROCEDURE<OnAfterSetupObjectNoList>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<DefaultDimObjectNoWithGlobalDimsList>
    Code lines:
    ...
      REPEAT
        TempDimSetIDField.SETRANGE(TableNo,TempDimField.TableNo);
        IF TempDimSetIDField.ISEMPTY THEN
          InsertObject(TempAllObjWithCaption,TempDimField.TableNo);
      UNTIL TempDimField.NEXT = 0;
    OnAfterSetupObjectNoList(TempAllObjWithCaption); <=====================
Codeunit<DimensionManagement>.PROCEDURE<OnBeforeGetDefaultDimID>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<GetDefaultDimID>
    Code lines:
    OnBeforeGetDefaultDimID(TableID,No,SourceCode,GlobalDim1Code,GlobalDim2Code,InheritFromDimSetID,InheritFromTableNo); <=====================
    
    GetGLSetup;
    IF InheritFromDimSetID > 0 THEN
      GetDimensionSet(TempDimSetEntry0,InheritFromDimSetID);
    TempDimBuf2.RESET;
    TempDimBuf2.DELETEALL;
    IF TempDimSetEntry0.FINDSET THEN
      REPEAT
        TempDimBuf2.INIT;
    ...
Codeunit<DimensionManagement>.PROCEDURE<OnGetRecDefaultDimID>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<GetRecDefaultDimID>
    Code lines:
    OnGetRecDefaultDimID(RecVariant,CurrFieldNo,TableID,No,SourceCode,InheritFromDimSetID,InheritFromTableNo); <=====================
    EXIT(GetDefaultDimID(TableID,No,SourceCode,GlobalDim1Code,GlobalDim2Code,InheritFromDimSetID,InheritFromTableNo));
Codeunit<DimensionManagement>.PROCEDURE<OnTypeToTableID2>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<TypeToTableID2>
    Code lines:
    ...
      Type::Item:
        EXIT(DATABASE::Item);
      Type::"G/L Account":
        EXIT(DATABASE::"G/L Account");
      ELSE BEGIN
        OnTypeToTableID2(TableID,Type); <=====================
        EXIT(TableID);
      END;
    END;
Codeunit<TextManagement>.PROCEDURE<OnBeforeMakeTextFilter>
  Raised in: Codeunit<TextManagement>.PROCEDURE<MakeTextFilter>
    Code lines:
    OnBeforeMakeTextFilter(TextFilterText,Position,HandledByEvent); <=====================
    IF HandledByEvent THEN
      EXIT(Position);
    
    Position := 1;
    Length := STRLEN(TextFilterText);
    ReadCharacter(' ',TextFilterText,Position,Length);
    IF FindText(PartOfText,TextFilterText,Position,Length) THEN
      CASE PartOfText OF
        COPYSTR('ME',1,STRLEN(PartOfText)),COPYSTR(MeText,1,STRLEN(PartOfText)):
    ...
Codeunit<Release Sales Document>.PROCEDURE<OnAfterReleaseATOs>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<Code>
    Code lines:
    ...
      Status := Status::Released;
    
      LinesWereModified := LinesWereModified OR CalcAndUpdateVATOnLines(SalesHeader,SalesLine);
    
      ReleaseATOs(SalesHeader);
      OnAfterReleaseATOs(SalesHeader,SalesLine); <=====================
    
      MODIFY(TRUE);
    
      IF NotOnlyDropShipment THEN
    ...
Codeunit<Release Sales Document>.PROCEDURE<OnAfterReleaseSalesDoc>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<Code>
    Code lines:
    ...
    
      IF NotOnlyDropShipment THEN
        IF "Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"] THEN
          WhseSalesRelease.Release(SalesHeader);
    
      OnAfterReleaseSalesDoc(SalesHeader,PreviewMode,LinesWereModified); <=====================
    END;
Codeunit<Release Sales Document>.PROCEDURE<OnAfterReopenSalesDoc>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<Reopen>
    Code lines:
    ...
      MODIFY(TRUE);
      IF "Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"] THEN
        WhseSalesRelease.Reopen(SalesHeader);
    END;
    
    OnAfterReopenSalesDoc(SalesHeader); <=====================
Codeunit<Release Sales Document>.PROCEDURE<OnBeforeReleaseSalesDoc>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<Code>
    Code lines:
    WITH SalesHeader DO BEGIN
      IF Status = Status::Released THEN
        EXIT;
    
      OnBeforeReleaseSalesDoc(SalesHeader,PreviewMode); <=====================
      IF NOT (PreviewMode OR SkipCheckReleaseRestrictions) THEN
        CheckSalesReleaseRestrictions;
    
      IF "Document Type" = "Document Type"::Quote THEN
        IF CheckCustomerCreated(TRUE) THEN
    ...
Codeunit<Release Sales Document>.PROCEDURE<OnBeforeReopenSalesDoc>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<Reopen>
    Code lines:
    OnBeforeReopenSalesDoc(SalesHeader); <=====================
    
    WITH SalesHeader DO BEGIN
      IF Status = Status::Open THEN
        EXIT;
      Status := Status::Open;
    
      IF "Document Type" <> "Document Type"::Order THEN
        ReopenATOs(SalesHeader);
    
    ...
Codeunit<Release Purchase Document>.PROCEDURE<OnAfterReleasePurchaseDoc>
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<Code>
    Code lines:
    ...
    
      IF NotOnlyDropShipment THEN
        IF "Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"] THEN
          WhsePurchRelease.Release(PurchaseHeader);
    
      OnAfterReleasePurchaseDoc(PurchaseHeader,PreviewMode,LinesWereModified); <=====================
    END;
Codeunit<Release Purchase Document>.PROCEDURE<OnAfterReopenPurchaseDoc>
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<Reopen>
    Code lines:
    ...
      Status := Status::Open;
    
      MODIFY(TRUE);
    END;
    
    OnAfterReopenPurchaseDoc(PurchHeader); <=====================
Codeunit<Release Purchase Document>.PROCEDURE<OnBeforeReleasePurchaseDoc>
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<Code>
    Code lines:
    WITH PurchaseHeader DO BEGIN
      IF Status = Status::Released THEN
        EXIT;
    
      OnBeforeReleasePurchaseDoc(PurchaseHeader,PreviewMode); <=====================
      IF NOT (PreviewMode OR SkipCheckReleaseRestrictions) THEN
        CheckPurchaseReleaseRestrictions;
    
      TESTFIELD("Buy-from Vendor No.");
    
    ...
Codeunit<Release Purchase Document>.PROCEDURE<OnBeforeReopenPurchaseDoc>
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<Reopen>
    Code lines:
    OnBeforeReopenPurchaseDoc(PurchHeader); <=====================
    
    WITH PurchHeader DO BEGIN
      IF Status = Status::Open THEN
        EXIT;
      IF "Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"] THEN
        WhsePurchRelease.Reopen(PurchHeader);
      Status := Status::Open;
    
      MODIFY(TRUE);
    ...
Codeunit<Release Service Document>.PROCEDURE<OnAfterReleaseServiceDoc>
  Raised in: Codeunit<Release Service Document>.PROCEDURE<Code>
    Code lines:
    ...
      MODIFY(TRUE);
    
      IF "Document Type" = "Document Type"::Order THEN
        WhseServiceRelease.Release(ServiceHeader);
    
      OnAfterReleaseServiceDoc(ServiceHeader); <=====================
    END;
Codeunit<Release Service Document>.PROCEDURE<OnAfterReopenServiceDoc>
  Raised in: Codeunit<Release Service Document>.PROCEDURE<Reopen>
    Code lines:
    ...
      OnBeforeReopenServiceDoc(ServHeader);
      VALIDATE("Release Status","Release Status"::Open);
      MODIFY(TRUE);
      IF "Document Type" IN ["Document Type"::Order] THEN
        WhseServiceRelease.Reopen(ServHeader);
      OnAfterReopenServiceDoc(ServHeader); <=====================
    END;
Codeunit<Release Service Document>.PROCEDURE<OnBeforeReleaseServiceDoc>
  Raised in: Codeunit<Release Service Document>.PROCEDURE<Code>
    Code lines:
    WITH ServiceHeader DO BEGIN
      IF "Release Status" = "Release Status"::"Released to Ship" THEN
        EXIT;
    
      OnBeforeReleaseServiceDoc(ServiceHeader); <=====================
    
      IF "Document Type" = "Document Type"::Quote THEN
        TESTFIELD("Bill-to Customer No.");
      ServLine.SETRANGE("Document Type","Document Type");
      ServLine.SETRANGE("Document No.","No.");
    ...
Codeunit<Release Service Document>.PROCEDURE<OnBeforeReopenServiceDoc>
  Raised in: Codeunit<Release Service Document>.PROCEDURE<Reopen>
    Code lines:
    WITH ServHeader DO BEGIN
      IF "Release Status" = "Release Status"::Open THEN
        EXIT;
    
      OnBeforeReopenServiceDoc(ServHeader); <=====================
      VALIDATE("Release Status","Release Status"::Open);
      MODIFY(TRUE);
      IF "Document Type" IN ["Document Type"::Order] THEN
        WhseServiceRelease.Reopen(ServHeader);
      OnAfterReopenServiceDoc(ServHeader);
Codeunit<User Management>.PROCEDURE<OnAfterRenameRecord>
  Raised in: Codeunit<User Management>.PROCEDURE<RenameRecord>
    Code lines:
    ...
            MyTimeSheets.CHANGECOMPANY(Company);
            RecRef.SETTABLE(MyTimeSheets);
            MyTimeSheets.RENAME(UserName,MyTimeSheets."Time Sheet No.");
          END;
      END;
    OnAfterRenameRecord(RecRef,TableNo,NumberOfPrimaryKeyFields,UserName,Company); <=====================
Codeunit<CaptionManagement>.PROCEDURE<OnExtensionCaptionArea>
  Raised in: Codeunit<CaptionManagement>.PROCEDURE<CaptionClassTranslate>
    Code lines:
    ...
        '3':
          EXIT(CaptionRef);
        '101':
          EXIT(CurCaptionClassTranslate(CaptionRef));
        ELSE
          OnExtensionCaptionArea(Language,CaptionArea,CaptionRef,CaptionExpr); <=====================
      END;
    END;
    EXIT(CaptionExpr);
Codeunit<Payment Tolerance Management>.PROCEDURE<OnBeforeCalcRemainingPmtDisc>
  Raised in: Codeunit<Payment Tolerance Management>.PROCEDURE<CalcRemainingPmtDisc>
    Code lines:
    OnBeforeCalcRemainingPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,GLSetup,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    IF ABS(NewCVLedgEntryBuf."Max. Payment Tolerance") > ABS(NewCVLedgEntryBuf."Remaining Amount") THEN
      NewCVLedgEntryBuf."Max. Payment Tolerance" := NewCVLedgEntryBuf."Remaining Amount";
    IF (((NewCVLedgEntryBuf."Document Type" IN [NewCVLedgEntryBuf."Document Type"::"Credit Memo",
                                                NewCVLedgEntryBuf."Document Type"::Invoice]) AND
         (OldCVLedgEntryBuf."Document Type" IN [OldCVLedgEntryBuf."Document Type"::Invoice,
                                                OldCVLedgEntryBuf."Document Type"::"Credit Memo"])) AND
    ...
Codeunit<Payment Tolerance Management>.PROCEDURE<OnBeforeCheckCalcPmtDisc>
  Raised in: Codeunit<Payment Tolerance Management>.PROCEDURE<CheckCalcPmtDisc>
    Code lines:
    OnBeforeCheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,CheckFilter,CheckAmount,Handled,Result); <=====================
    IF Handled THEN
      EXIT(Result);
    
    IF ((NewCVLedgEntryBuf."Document Type" IN [NewCVLedgEntryBuf."Document Type"::Refund,
                                               NewCVLedgEntryBuf."Document Type"::Payment]) AND
        (((OldCVLedgEntryBuf2."Document Type" = OldCVLedgEntryBuf2."Document Type"::"Credit Memo") AND
          (OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible" <> 0) AND
          (NewCVLedgEntryBuf."Posting Date" <= OldCVLedgEntryBuf2."Pmt. Discount Date")) OR
         ((OldCVLedgEntryBuf2."Document Type" = OldCVLedgEntryBuf2."Document Type"::Invoice) AND
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnInsertICOutboxJnlLine>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<InsertOutboxJnlLine>
    Code lines:
    ...
      END;
      DimMgt.CopyJnlLineDimToICJnlDim(
        DATABASE::"IC Outbox Jnl. Line",TransactionNo,"IC Partner Code",
        ICOutboxJnlLine."Transaction Source",ICOutboxJnlLine."Line No.","Dimension Set ID");
      ICOutboxJnlLine.INSERT;
      OnInsertICOutboxJnlLine(ICOutboxJnlLine); <=====================
    END
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnInsertICOutboxPurchDocTransaction>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxPurchDocTrans>
    Code lines:
    ...
      IF NOT Post THEN BEGIN
        PurchHeader."IC Status" := PurchHeader."IC Status"::Pending;
        PurchHeader.MODIFY;
      END;
    END;
    OnInsertICOutboxPurchDocTransaction(OutboxTransaction); <=====================
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnInsertICOutboxSalesCrMemoTransaction>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxSalesCrMemoTrans>
    Code lines:
    ...
            ICDocDim."Line No." := SalesCrMemoLine."Line No.";
            CreateICDocDimFromPostedDocDim(ICDocDim,SalesCrMemoLine."Dimension Set ID",DATABASE::"IC Outbox Sales Line");
          END;
        UNTIL SalesCrMemoLine.NEXT = 0;
    END;
    OnInsertICOutboxSalesCrMemoTransaction(OutboxTransaction); <=====================
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnInsertICOutboxSalesDocTransaction>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxSalesDocTrans>
    Code lines:
    ...
      IF NOT Post THEN BEGIN
        SalesHeader."IC Status" := SalesHeader."IC Status"::Pending;
        SalesHeader.MODIFY;
      END;
    END;
    OnInsertICOutboxSalesDocTransaction(OutboxTransaction); <=====================
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnInsertICOutboxSalesInvTransaction>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxSalesInvTrans>
    Code lines:
    ...
            CreateICDocDimFromPostedDocDim(ICDocDim,SalesInvLine."Dimension Set ID",DATABASE::"IC Outbox Sales Line");
          END;
        UNTIL SalesInvLine.NEXT = 0;
    END;
    
    OnInsertICOutboxSalesInvTransaction(OutboxTransaction); <=====================
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnInsertICOutboxTransaction>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxJnlTransaction>
    Code lines:
    ...
        OutboxJnlTransaction."Transaction Source" := OutboxJnlTransaction."Transaction Source"::"Rejected by Current Company"
      ELSE
        OutboxJnlTransaction."Transaction Source" := OutboxJnlTransaction."Transaction Source"::"Created by Current Company";
      OutboxJnlTransaction.INSERT;
    END;
    OnInsertICOutboxTransaction(OutboxJnlTransaction); <=====================
    EXIT(ICTransactionNo);
Codeunit<Consolidate>.PROCEDURE<OnBeforeGenJnlPostLine>
  Raised in: Codeunit<Consolidate>.PROCEDURE<GenJnlPostLineFinally>
    Code lines:
    TempGenJnlLine.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date");
    IF TempGenJnlLine.FINDSET THEN
      REPEAT
        Window.UPDATE(3,TempGenJnlLine."Account No.");
        OnBeforeGenJnlPostLine(TempGenJnlLine); <=====================
        GenJnlPostLine.RunWithCheck(TempGenJnlLine);
      UNTIL TempGenJnlLine.NEXT = 0;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterCheckPrepmtDoc>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<CheckPrepmtDoc>
    Code lines:
    ...
      Cust.CheckBlockedCustOnDocs(Cust,PrepmtDocTypeToDocType(DocumentType),FALSE,TRUE);
      IF "Bill-to Customer No." <> "Sell-to Customer No." THEN BEGIN
        Cust.GET("Bill-to Customer No.");
        Cust.CheckBlockedCustOnDocs(Cust,PrepmtDocTypeToDocType(DocumentType),FALSE,TRUE);
      END;
      OnAfterCheckPrepmtDoc(SalesHeader,DocumentType); <=====================
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterPostBalancingEntry>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<PostBalancingEntry>
    Code lines:
    ...
      "Applies-to Doc. Type" := DocType;
      "Applies-to Doc. No." := DocNo;
    
      OnBeforePostBalancingEntry(GenJnlLine,CustLedgEntry,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY);
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostBalancingEntry(GenJnlLine,CustLedgEntry,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY); <=====================
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterPostCustomerEntry>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<PostCustomerEntry>
    Code lines:
    ...
    
      Correction := (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
    
      OnBeforePostCustomerEntry(GenJnlLine,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY);
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostCustomerEntry(GenJnlLine,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY); <=====================
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterPostPrepayments>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<Code>
    Code lines:
    ...
      MODIFY;
    END;
    
    SalesHeader2 := SalesHeader;
    
    OnAfterPostPrepayments(SalesHeader2,DocumentType); <=====================
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterPostPrepmtInvLineBuffer>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<PostPrepmtInvLineBuffer>
    Code lines:
    ...
      Correction :=
        (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
    
      OnBeforePostPrepmtInvLineBuffer(GenJnlLine,PrepmtInvLineBuffer);
      RunGenJnlPostLine(GenJnlLine);
      OnAfterPostPrepmtInvLineBuffer(GenJnlLine,PrepmtInvLineBuffer); <=====================
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforePostBalancingEntry>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<PostBalancingEntry>
    Code lines:
    ...
      Correction := (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
    
      "Applies-to Doc. Type" := DocType;
      "Applies-to Doc. No." := DocNo;
    
      OnBeforePostBalancingEntry(GenJnlLine,CustLedgEntry,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY); <=====================
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostBalancingEntry(GenJnlLine,CustLedgEntry,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY);
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforePostCustomerEntry>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<PostCustomerEntry>
    Code lines:
    ...
      "Sales/Purch. (LCY)" := -TotalPrepmtInvLineBufferLCY.Amount;
      "Profit (LCY)" := -TotalPrepmtInvLineBufferLCY.Amount;
    
      Correction := (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
    
      OnBeforePostCustomerEntry(GenJnlLine,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY); <=====================
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostCustomerEntry(GenJnlLine,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY);
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforePostPrepayments>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<Code>
    Code lines:
    OnBeforePostPrepayments(SalesHeader2,DocumentType); <=====================
    
    SalesHeader := SalesHeader2;
    GLSetup.GET;
    SalesSetup.GET;
    WITH SalesHeader DO BEGIN
      CheckPrepmtDoc(SalesHeader,DocumentType);
    
      UpdateDocNos(SalesHeader,DocumentType,GenJnlLineDocNo,PostingNoSeriesCode);
    
    ...
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforePostPrepmtInvLineBuffer>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<PostPrepmtInvLineBuffer>
    Code lines:
    ...
      IF NOT PrepmtInvLineBuffer.Adjustment THEN
        "Gen. Posting Type" := "Gen. Posting Type"::Sale;
      Correction :=
        (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
    
      OnBeforePostPrepmtInvLineBuffer(GenJnlLine,PrepmtInvLineBuffer); <=====================
      RunGenJnlPostLine(GenJnlLine);
      OnAfterPostPrepmtInvLineBuffer(GenJnlLine,PrepmtInvLineBuffer);
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeSalesCrMemoHeaderInsert>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<InsertSalesCrMemoHeader>
    Code lines:
    ...
      SalesCrMemoHeader."No. Printed" := 0;
      SalesCrMemoHeader."Prepayment Credit Memo" := TRUE;
      SalesCrMemoHeader."Prepayment Order No." := "No.";
      SalesCrMemoHeader.Correction := GLSetup."Mark Cr. Memos as Corrections";
      SalesCrMemoHeader."No. Series" := PostingNoSeriesCode;
      OnBeforeSalesCrMemoHeaderInsert(SalesCrMemoHeader,SalesHeader); <=====================
      SalesCrMemoHeader.INSERT;
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeSalesCrMemoLineInsert>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<InsertSalesCrMemoLine>
    Code lines:
    ...
      SalesCrMemoLine."VAT Difference" := "VAT Difference";
      SalesCrMemoLine."Amount Including VAT" := "Amount Incl. VAT";
      SalesCrMemoLine."VAT Calculation Type" := "VAT Calculation Type";
      SalesCrMemoLine."VAT Base Amount" := "VAT Base Amount";
      SalesCrMemoLine."VAT Identifier" := "VAT Identifier";
      OnBeforeSalesCrMemoLineInsert(SalesCrMemoLine,SalesCrMemoHeader,PrepmtInvLineBuffer); <=====================
      SalesCrMemoLine.INSERT;
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeSalesInvHeaderInsert>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<InsertSalesInvHeader>
    Code lines:
    ...
      SalesInvHeader."User ID" := USERID;
      SalesInvHeader."No. Printed" := 0;
      SalesInvHeader."Prepayment Invoice" := TRUE;
      SalesInvHeader."Prepayment Order No." := "No.";
      SalesInvHeader."No. Series" := PostingNoSeriesCode;
      OnBeforeSalesInvHeaderInsert(SalesInvHeader,SalesHeader); <=====================
      SalesInvHeader.INSERT;
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeSalesInvLineInsert>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<InsertSalesInvLine>
    Code lines:
    ...
      SalesInvLine."VAT Difference" := "VAT Difference";
      SalesInvLine."Amount Including VAT" := "Amount Incl. VAT";
      SalesInvLine."VAT Calculation Type" := "VAT Calculation Type";
      SalesInvLine."VAT Base Amount" := "VAT Base Amount";
      SalesInvLine."VAT Identifier" := "VAT Identifier";
      OnBeforeSalesInvLineInsert(SalesInvLine,SalesInvHeader,PrepmtInvLineBuffer); <=====================
      SalesInvLine.INSERT;
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterCheckPrepmtDoc>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<CheckPrepmtDoc>
    Code lines:
    ...
      Vend.CheckBlockedVendOnDocs(Vend,TRUE);
      IF "Pay-to Vendor No." <> "Buy-from Vendor No." THEN BEGIN
        Vend.GET("Pay-to Vendor No.");
        Vend.CheckBlockedVendOnDocs(Vend,TRUE);
      END;
      OnAfterCheckPrepmtDoc(PurchHeader,DocumentType); <=====================
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPostBalancingEntry>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<PostBalancingEntry>
    Code lines:
    ...
      "Applies-to Doc. Type" := DocType;
      "Applies-to Doc. No." := DocNo;
    
      OnBeforePostBalancingEntry(GenJnlLine,VendLedgEntry,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY);
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostBalancingEntry(GenJnlLine,VendLedgEntry,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY); <=====================
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPostPrepayments>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<Code>
    Code lines:
    ...
    END;
    
    PurchHeader2 := PurchHeader;
    PurchHeader2.TriggerOnAfterPostPurchaseDoc(GenJnlPostLine,'','',PurchInvHeader."No.",PurchCrMemoHeader."No.");
    
    OnAfterPostPrepayments(PurchHeader2,DocumentType); <=====================
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPostPrepmtInvLineBuffer>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<PostPrepmtInvLineBuffer>
    Code lines:
    ...
      IF NOT PrepmtInvLineBuffer.Adjustment THEN
        "Gen. Posting Type" := "Gen. Posting Type"::Purchase;
    
      OnBeforePostPrepmtInvLineBuffer(GenJnlLine,PrepmtInvLineBuffer);
      RunGenJnlPostLine(GenJnlLine);
      OnAfterPostPrepmtInvLineBuffer(GenJnlLine,PrepmtInvLineBuffer); <=====================
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPostVendorEntry>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<PostVendorEntry>
    Code lines:
    ...
    
      Correction := (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
    
      OnBeforePostVendorEntry(GenJnlLine,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY);
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostVendorEntry(GenJnlLine,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY); <=====================
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePostBalancingEntry>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<PostBalancingEntry>
    Code lines:
    ...
      Correction := (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
    
      "Applies-to Doc. Type" := DocType;
      "Applies-to Doc. No." := DocNo;
    
      OnBeforePostBalancingEntry(GenJnlLine,VendLedgEntry,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY); <=====================
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostBalancingEntry(GenJnlLine,VendLedgEntry,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY);
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePostPrepayments>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<Code>
    Code lines:
    OnBeforePostPrepayments(PurchHeader2,DocumentType); <=====================
    
    PurchHeader := PurchHeader2;
    GLSetup.GET;
    PurchSetup.GET;
    WITH PurchHeader DO BEGIN
      CheckPrepmtDoc(PurchHeader,DocumentType);
    
      UpdateDocNos(PurchHeader,DocumentType,GenJnlLineDocNo,PostingNoSeriesCode);
    
    ...
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePostPrepmtInvLineBuffer>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<PostPrepmtInvLineBuffer>
    Code lines:
    ...
    
      Correction := (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
      IF NOT PrepmtInvLineBuffer.Adjustment THEN
        "Gen. Posting Type" := "Gen. Posting Type"::Purchase;
    
      OnBeforePostPrepmtInvLineBuffer(GenJnlLine,PrepmtInvLineBuffer); <=====================
      RunGenJnlPostLine(GenJnlLine);
      OnAfterPostPrepmtInvLineBuffer(GenJnlLine,PrepmtInvLineBuffer);
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePostVendorEntry>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<PostVendorEntry>
    Code lines:
    ...
      "Sales/Purch. (LCY)" := -TotalPrepmtInvLineBufferLCY.Amount;
      "Profit (LCY)" := -TotalPrepmtInvLineBufferLCY.Amount;
    
      Correction := (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
    
      OnBeforePostVendorEntry(GenJnlLine,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY); <=====================
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostVendorEntry(GenJnlLine,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY);
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePurchCrMemoHeaderInsert>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<InsertPurchCrMemoHeader>
    Code lines:
    ...
      PurchCrMemoHdr."No. Printed" := 0;
      PurchCrMemoHdr."Prepayment Credit Memo" := TRUE;
      PurchCrMemoHdr."Prepayment Order No." := "No.";
      PurchCrMemoHdr.Correction := GLSetup."Mark Cr. Memos as Corrections";
      PurchCrMemoHdr."No. Series" := PostingNoSeriesCode;
      OnBeforePurchCrMemoHeaderInsert(PurchCrMemoHdr,PurchHeader); <=====================
      PurchCrMemoHdr.INSERT;
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePurchCrMemoLineInsert>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<InsertPurchCrMemoLine>
    Code lines:
    ...
      PurchCrMemoLine."VAT Calculation Type" := "VAT Calculation Type";
      PurchCrMemoLine."VAT Base Amount" := "VAT Base Amount";
      PurchCrMemoLine."VAT Identifier" := "VAT Identifier";
      PurchCrMemoLine."Job No." := "Job No.";
      PurchCrMemoLine."Job Task No." := "Job Task No.";
      OnBeforePurchCrMemoLineInsert(PurchCrMemoLine,PurchCrMemoHdr,PrepmtInvLineBuffer); <=====================
      PurchCrMemoLine.INSERT;
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePurchInvHeaderInsert>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<InsertPurchInvHeader>
    Code lines:
    ...
      PurchInvHeader."User ID" := USERID;
      PurchInvHeader."No. Printed" := 0;
      PurchInvHeader."Prepayment Invoice" := TRUE;
      PurchInvHeader."Prepayment Order No." := "No.";
      PurchInvHeader."No. Series" := PostingNoSeriesCode;
      OnBeforePurchInvHeaderInsert(PurchInvHeader,PurchHeader); <=====================
      PurchInvHeader.INSERT;
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePurchInvLineInsert>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<InsertPurchInvLine>
    Code lines:
    ...
      PurchInvLine."VAT Calculation Type" := "VAT Calculation Type";
      PurchInvLine."VAT Base Amount" := "VAT Base Amount";
      PurchInvLine."VAT Identifier" := "VAT Identifier";
      PurchInvLine."Job No." := "Job No.";
      PurchInvLine."Job Task No." := "Job Task No.";
      OnBeforePurchInvLineInsert(PurchInvLine,PurchInvHeader,PrepmtInvLineBuffer); <=====================
      PurchInvLine.INSERT;
    END;
Codeunit<Job Queue Dispatcher>.PROCEDURE<OnAfterHandleRequest>
  Raised in: Codeunit<Job Queue Dispatcher>.PROCEDURE<HandleRequest>
    Code lines:
    ...
    
      IF DoesExistLocked THEN
        FinalizeRun;
    END;
    
    OnAfterHandleRequest(JobQueueEntry,WasSuccess); <=====================
Codeunit<Job Queue Start Codeunit>.PROCEDURE<OnAfterRun>
  Raised in: Codeunit<Job Queue Start Codeunit>.<OnRun>
    Code lines:
    ...
    END;
    
    // Commit any remaining transactions from the target codeunit\report. This is necessary due
    // to buffered record insertion which may not have surfaced errors in CODEUNIT.RUN above.
    COMMIT;
    OnAfterRun(Rec); <=====================
Codeunit<Job Queue - Enqueue>.PROCEDURE<OnBeforeJobQueueScheduleTask>
  Raised in: Codeunit<Job Queue - Enqueue>.PROCEDURE<CanScheduleTask>
    Code lines:
    OnBeforeJobQueueScheduleTask(JobQueueEntry,DoNotScheduleTask); <=====================
    EXIT(NOT DoNotScheduleTask);
Codeunit<Change Global Dimensions>.PROCEDURE<OnAfterGetObjectNoList>
  Raised in: Codeunit<Change Global Dimensions>.PROCEDURE<FindTablesWithDims>
    Code lines:
    DimensionManagement.DefaultDimObjectNoWithGlobalDimsList(TempAllObjWithCaption);
    DimensionManagement.GlobalDimObjectNoList(TempAllObjWithCaption);
    DimensionManagement.JobTaskDimObjectNoList(TempAllObjWithCaption);
    OnAfterGetObjectNoList(TempAllObjWithCaption); <=====================
    EXIT(TempAllObjWithCaption.FINDSET);
Codeunit<Change Global Dimensions>.PROCEDURE<OnBeforeScheduleTask>
  Raised in: Codeunit<Change Global Dimensions>.PROCEDURE<ScheduleJobForTable>
    Code lines:
    WITH ChangeGlobalDimLogEntry DO BEGIN
      OnBeforeScheduleTask("Table ID",DoNotScheduleTask,TaskID); <=====================
      IF DoNotScheduleTask THEN
        "Task ID" := TaskID
      ELSE BEGIN
        CancelTask;
        "Task ID" :=
          TASKSCHEDULER.CREATETASK(
            CODEUNIT::"Change Global Dimensions",CODEUNIT::"Change Global Dim Err. Handler",
            TRUE,COMPANYNAME,StartNotBefore,RECORDID);
    ...
Codeunit<Change Global Dimensions>.PROCEDURE<OnCountingActiveSessions>
  Raised in: Codeunit<Change Global Dimensions>.PROCEDURE<IsCurrentSessionActiveOnly>
    Code lines:
    OnCountingActiveSessions(Result); <=====================
    IF Result THEN
      EXIT(TRUE);
    // Ignore session types: Web Service,Client Service,NAS,Management Client
    ActiveSession.SETFILTER(
      "Client Type",'<>%1&<>%2&<>%3&<>%4',
      ActiveSession."Client Type"::"Web Service",ActiveSession."Client Type"::"Client Service",
      ActiveSession."Client Type"::NAS,ActiveSession."Client Type"::"Management Client");
    ActiveSession.SETFILTER("Session ID",'<>%1',SESSIONID);
    ActiveSession.SETRANGE("Server Instance ID",SERVICEINSTANCEID);
Codeunit<WordManagement>.PROCEDURE<OnAddFieldsToMergeSource>
  Raised in: Codeunit<WordManagement>.PROCEDURE<AddFieldsToMergeSource>
    Code lines:
    ...
      AddField(CompanyInfo."Bank Branch No.");
      AddField(CompanyInfo."Bank Name");
      AddField(CompanyInfo."Bank Account No.");
      AddField(CompanyInfo."Giro No.");
      AddField(FaxMailToValue);
      OnAddFieldsToMergeSource(Salesperson,Country,Contact,CompanyInfo,SegLine,InteractLogEntry); <=====================
      WriteLine;
    END;
Codeunit<WordManagement>.PROCEDURE<OnBeforeCheckCanRunWord>
  Raised in: Codeunit<WordManagement>.PROCEDURE<CanRunWordApp>
    Code lines:
    OnBeforeCheckCanRunWord(CanRunWord,CanRunWordModified); <=====================
    IF CanRunWordModified THEN
      EXIT(CanRunWord);
    
    WordApplication := WordHelper.GetApplication(ErrorMessage);
    EXIT(NOT ISNULL(WordApplication));
Codeunit<WordManagement>.PROCEDURE<OnCreateHeaderAddFields>
  Raised in: Codeunit<WordManagement>.PROCEDURE<CreateHeader>
    Code lines:
    ...
      AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Fax No."));
      AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Bank Branch No."));
      AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Bank Name"));
      AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Bank Account No."));
      AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Giro No."));
      OnCreateHeaderAddFields(Salesperson,Country,Contact,CompanyInfo,SegLine,InteractionLogEntry); <=====================
      GLOBALLANGUAGE := MainLanguage;
      AddField(Text015);
      WriteLine;
    
    ...
Codeunit<ArchiveManagement>.PROCEDURE<OnAfterRestoreSalesLine>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<RestoreSalesLines>
    Code lines:
    ...
            SalesHeaderArchive."Doc. No. Occurrence",
            SalesHeaderArchive."Version No.");
          RecordLinkManagement.CopyLinks(SalesLineArchive,SalesLine);
          MODIFY(TRUE);
        END;
        OnAfterRestoreSalesLine(SalesHeader,SalesLine,SalesHeaderArchive,SalesLineArchive); <=====================
      UNTIL SalesLineArchive.NEXT = 0;
Codeunit<ArchiveManagement>.PROCEDURE<OnAfterStorePurchLineArchive>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<StorePurchDocument>
    Code lines:
    ...
        END;
        IF PurchLine."Deferral Code" <> '' THEN
          StoreDeferrals(DeferralUtilities.GetPurchDeferralDocType,PurchLine."Document Type",
            PurchLine."Document No.",PurchLine."Line No.",PurchHeader."Doc. No. Occurrence",PurchHeaderArchive."Version No.");
    
        OnAfterStorePurchLineArchive(PurchHeader,PurchLine,PurchHeaderArchive,PurchLineArchive); <=====================
      UNTIL PurchLine.NEXT = 0;
Codeunit<ArchiveManagement>.PROCEDURE<OnAfterStoreSalesLineArchive>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<StoreSalesDocument>
    Code lines:
    ...
        END;
        IF SalesLine."Deferral Code" <> '' THEN
          StoreDeferrals(DeferralUtilities.GetSalesDeferralDocType,SalesLine."Document Type",
            SalesLine."Document No.",SalesLine."Line No.",SalesHeader."Doc. No. Occurrence",SalesHeaderArchive."Version No.");
    
        OnAfterStoreSalesLineArchive(SalesHeader,SalesLine,SalesHeaderArchive,SalesLineArchive); <=====================
      UNTIL SalesLine.NEXT = 0;
Codeunit<Integration Management>.PROCEDURE<OnGetIntegrationActivated>
  Raised in: Codeunit<Integration Management>.PROCEDURE<GetIntegrationActivated>
    Code lines:
    OnGetIntegrationDisabled(IsSyncDisabled);
    IF IsSyncDisabled THEN
      EXIT(FALSE);
    IF NOT IntegrationIsActivated THEN BEGIN
      OnGetIntegrationActivated(IsSyncEnabled); <=====================
      IF IsSyncEnabled THEN
        IntegrationIsActivated := TRUE
      ELSE
        IntegrationIsActivated := IsCRMConnectionEnabled OR GraphSyncRunner.IsGraphSyncEnabled;
    END;
    ...
Codeunit<Integration Management>.PROCEDURE<OnGetIntegrationDisabled>
  Raised in: Codeunit<Integration Management>.PROCEDURE<GetIntegrationActivated>
    Code lines:
    OnGetIntegrationDisabled(IsSyncDisabled); <=====================
    IF IsSyncDisabled THEN
      EXIT(FALSE);
    IF NOT IntegrationIsActivated THEN BEGIN
      OnGetIntegrationActivated(IsSyncEnabled);
      IF IsSyncEnabled THEN
        IntegrationIsActivated := TRUE
      ELSE
        IntegrationIsActivated := IsCRMConnectionEnabled OR GraphSyncRunner.IsGraphSyncEnabled;
    END;
    ...
Codeunit<Integration Management>.PROCEDURE<OnGetPredefinedIdValue>
  Raised in: Codeunit<Integration Management>.PROCEDURE<InsertUpdateIntegrationRecord>
    Code lines:
    ...
          OnUpdateReferencedIdField(RecRef,"Integration ID",Handled);
          MODIFY;
        END ELSE BEGIN
          RESET;
          INIT;
          OnGetPredefinedIdValue("Integration ID",RecRef,Handled); <=====================
          IF NOT Handled THEN
            "Integration ID" := CREATEGUID;
          "Record ID" := RecRef.RECORDID;
          "Table ID" := RecRef.NUMBER;
    ...
Codeunit<Integration Management>.PROCEDURE<OnIsIntegrationRecord>
  Raised in: Codeunit<Integration Management>.PROCEDURE<IsIntegrationRecord>
    Code lines:
    OnIsIntegrationRecord(TableID,isIntegrationRecord); <=====================
    IF isIntegrationRecord THEN
      EXIT(TRUE);
    EXIT(TableID IN
      [DATABASE::Resource,
       DATABASE::"Shipping Agent",
       DATABASE::"Salesperson/Purchaser",
       DATABASE::Customer,
       DATABASE::Vendor,
       DATABASE::Dimension,
    ...
Codeunit<Integration Management>.PROCEDURE<OnIsIntegrationRecordChild>
  Raised in: Codeunit<Integration Management>.PROCEDURE<IsIntegrationRecordChild>
    Code lines:
    OnIsIntegrationRecordChild(TableID,isIntegrationRecordChild); <=====================
    IF isIntegrationRecordChild THEN
      EXIT(TRUE);
    
    EXIT(TableID IN
      [DATABASE::"Sales Line",
       DATABASE::"Currency Exchange Rate",
       DATABASE::"Sales Invoice Line",
       DATABASE::"Sales Cr.Memo Line",
       DATABASE::"Contact Alt. Address",
    ...
Codeunit<Integration Management>.PROCEDURE<OnUpdateReferencedIdField>
  Raised in: Codeunit<Integration Management>.PROCEDURE<InsertUpdateIntegrationRecord>
    Code lines:
    IF IsIntegrationRecord(RecRef.NUMBER) THEN
      WITH IntegrationRecord DO BEGIN
        SETRANGE("Record ID",RecRef.RECORDID);
        IF FINDFIRST THEN BEGIN
          "Modified On" := IntegrationLastModified;
          OnUpdateReferencedIdField(RecRef,"Integration ID",Handled); <=====================
          MODIFY;
        END ELSE BEGIN
          RESET;
          INIT;
    ...
  Raised in: Codeunit<Integration Management>.PROCEDURE<InsertUpdateIntegrationRecord>
    Code lines:
    IF IsIntegrationRecord(RecRef.NUMBER) THEN
      WITH IntegrationRecord DO BEGIN
        SETRANGE("Record ID",RecRef.RECORDID);
        IF FINDFIRST THEN BEGIN
          "Modified On" := IntegrationLastModified;
          OnUpdateReferencedIdField(RecRef,"Integration ID",Handled); <=====================
          MODIFY;
        END ELSE BEGIN
          RESET;
          INIT;
    ...
Codeunit<Integration Record Synch.>.PROCEDURE<OnTransferFieldData>
  Raised in: Codeunit<Integration Record Synch.>.PROCEDURE<TransferFieldData>
    Code lines:
    // OnTransferFieldData is an event for handling an exceptional mapping that is not implemented by integration records <=====================
    OnTransferFieldData(SourceFieldRef,DestinationFieldRef,NewValue,IsValueFound,NeedsConversion); <=====================
    IF IsValueFound THEN BEGIN
      IF NOT NeedsConversion THEN
        EXIT(SetDestinationValue(DestinationFieldRef,NewValue,ValidateDestinationField));
    END ELSE
      NewValue := SourceFieldRef.VALUE;
    
    IF NOT NeedsConversion AND
       (SourceFieldRef.TYPE = DestinationFieldRef.TYPE) AND (DestinationFieldRef.LENGTH >= SourceFieldRef.LENGTH)
    ...
Codeunit<CRM Integration Table Synch.>.PROCEDURE<OnQueryPostFilterIgnoreRecord>
  Raised in: Codeunit<CRM Integration Table Synch.>.PROCEDURE<SynchNAVTableToCRM>
    Code lines:
    ...
      CacheFilteredNAVTable(SourceRecordRef,IntegrationTableMapping);
      ForceModify := IntegrationTableMapping."Delete After Synchronization";
      REPEAT
        IgnoreRecord := FALSE;
        IF SourceRecordRef.GET(IntegrationRecord."Record ID") THEN BEGIN
          OnQueryPostFilterIgnoreRecord(SourceRecordRef,IgnoreRecord); <=====================
          IF NOT IgnoreRecord THEN BEGIN
            IF NOT TempCRMIntegrationRecord.IsIntegrationIdCoupled(IntegrationRecord."Integration ID") THEN
              IgnoreRecord := IntegrationTableMapping."Synch. Only Coupled Records";
            IF NOT IgnoreRecord THEN
    ...
  Raised in: Codeunit<CRM Integration Table Synch.>.PROCEDURE<SynchCRMTableToNAV>
    Code lines:
    ...
    CreateCRMIntegrationRecordClone(IntegrationTableMapping."Table ID",TempCRMIntegrationRecord);
    ForceModify := IntegrationTableMapping."Delete After Synchronization";
    IF SourceRecordRef.FINDSET THEN
      REPEAT
        IgnoreRecord := FALSE;
        OnQueryPostFilterIgnoreRecord(SourceRecordRef,IgnoreRecord); <=====================
        IF NOT IgnoreRecord THEN BEGIN
          IF TempCRMIntegrationRecord.IsCRMRecordRefCoupled(SourceRecordRef) THEN
            TempCRMIntegrationRecord.DELETE
          ELSE
    ...
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnAfterApplyRecordTemplate>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<ApplyConfigTemplate>
    Code lines:
    ...
      OnBeforeApplyRecordTemplate(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,ConfigTemplateCode);
    
      IF ConfigTemplateHeader.GET(ConfigTemplateCode) THEN BEGIN
        ConfigTemplateManagement.UpdateRecord(ConfigTemplateHeader,DestinationRecordRef);
    
        OnAfterApplyRecordTemplate(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef); <=====================
      END ELSE BEGIN
        SynchAction := SynchActionType::Fail;
        LogSynchError(
          SourceRecordRef,DestinationRecordRef,
    ...
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnAfterInsertRecord>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<InsertRecord>
    Code lines:
    ...
    IF DestinationRecordRef.INSERT(TRUE) THEN BEGIN
      ApplyConfigTemplate(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,JobId,SynchAction);
      IF SynchAction <> SynchActionType::Fail THEN BEGIN
        UpdateIntegrationRecordCoupling(
          IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType);
        OnAfterInsertRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef); <=====================
        UpdateIntegrationRecordTimestamp(
          IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType,JobId);
      END;
    END ELSE BEGIN
    ...
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnAfterModifyRecord>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<ModifyRecord>
    Code lines:
    OnBeforeModifyRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef);
    
    IF DestinationRecordRef.MODIFY(TRUE) THEN BEGIN
      UpdateIntegrationRecordCoupling(
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType);
      OnAfterModifyRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef); <=====================
      UpdateIntegrationRecordTimestamp(
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType,JobId);
    END ELSE BEGIN
      OnErrorWhenModifyingRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef);
    ...
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnAfterTransferRecordFields>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<TransferFields>
    Code lines:
    ...
    
    IntegrationRecordSynch.SetParameters(SourceRecordRef,DestinationRecordRef,SynchAction <> SynchActionType::Insert);
    IF IntegrationRecordSynch.RUN THEN BEGIN
      IF ConflictFound AND IntegrationRecordSynch.GetWasModified THEN
        EXIT;
      OnAfterTransferRecordFields(SourceRecordRef,DestinationRecordRef, <=====================
        AdditionalFieldsModified,SynchAction <> SynchActionType::Insert);
      AdditionalFieldsModified := AdditionalFieldsModified OR IntegrationRecordSynch.GetWasModified;
    END ELSE BEGIN
      SynchAction := SynchActionType::Fail;
    ...
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnAfterUnchangedRecordHandled>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<SynchRecord>
    Code lines:
    ...
          IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,SynchAction,JobId,IntegrationTableConnectionType);
      SynchActionType::IgnoreUnchanged:
        BEGIN
          UpdateIntegrationRecordCoupling(
            IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType);
          OnAfterUnchangedRecordHandled(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef); <=====================
          UpdateIntegrationRecordTimestamp(
            IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType,JobId);
        END;
    END;
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnBeforeApplyRecordTemplate>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<ApplyConfigTemplate>
    Code lines:
    IF DestinationRecordRef.NUMBER = IntegrationTableMapping."Integration Table ID" THEN
      ConfigTemplateCode := IntegrationTableMapping."Int. Tbl. Config Template Code"
    ELSE
      ConfigTemplateCode := IntegrationTableMapping."Table Config Template Code";
    IF ConfigTemplateCode <> '' THEN BEGIN
      OnBeforeApplyRecordTemplate(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,ConfigTemplateCode); <=====================
    
      IF ConfigTemplateHeader.GET(ConfigTemplateCode) THEN BEGIN
        ConfigTemplateManagement.UpdateRecord(ConfigTemplateHeader,DestinationRecordRef);
    
    ...
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnBeforeInsertRecord>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<InsertRecord>
    Code lines:
    OnBeforeInsertRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef); <=====================
    IF DestinationRecordRef.INSERT(TRUE) THEN BEGIN
      ApplyConfigTemplate(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,JobId,SynchAction);
      IF SynchAction <> SynchActionType::Fail THEN BEGIN
        UpdateIntegrationRecordCoupling(
          IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType);
        OnAfterInsertRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef);
        UpdateIntegrationRecordTimestamp(
          IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType,JobId);
      END;
    ...
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnBeforeModifyRecord>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<ModifyRecord>
    Code lines:
    OnBeforeModifyRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef); <=====================
    
    IF DestinationRecordRef.MODIFY(TRUE) THEN BEGIN
      UpdateIntegrationRecordCoupling(
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType);
      OnAfterModifyRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef);
      UpdateIntegrationRecordTimestamp(
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType,JobId);
    END ELSE BEGIN
      OnErrorWhenModifyingRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef);
    ...
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnBeforeTransferRecordFields>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<TransferFields>
    Code lines:
    OnBeforeTransferRecordFields(SourceRecordRef,DestinationRecordRef); <=====================
    
    IntegrationRecordSynch.SetParameters(SourceRecordRef,DestinationRecordRef,SynchAction <> SynchActionType::Insert);
    IF IntegrationRecordSynch.RUN THEN BEGIN
      IF ConflictFound AND IntegrationRecordSynch.GetWasModified THEN
        EXIT;
      OnAfterTransferRecordFields(SourceRecordRef,DestinationRecordRef,
        AdditionalFieldsModified,SynchAction <> SynchActionType::Insert);
      AdditionalFieldsModified := AdditionalFieldsModified OR IntegrationRecordSynch.GetWasModified;
    END ELSE BEGIN
    ...
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnErrorWhenInsertingRecord>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<InsertRecord>
    Code lines:
    ...
        OnAfterInsertRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef);
        UpdateIntegrationRecordTimestamp(
          IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType,JobId);
      END;
    END ELSE BEGIN
      OnErrorWhenInsertingRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef); <=====================
      SynchAction := SynchActionType::Fail;
      LogSynchError(
        SourceRecordRef,DestinationRecordRef,
        STRSUBSTNO(InsertFailedErr,DestinationRecordRef.CAPTION,TextManagement.RemoveMessageTrailingDots(GETLASTERRORTEXT)),JobId);
    ...
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnErrorWhenModifyingRecord>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<ModifyRecord>
    Code lines:
    ...
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType);
      OnAfterModifyRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef);
      UpdateIntegrationRecordTimestamp(
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType,JobId);
    END ELSE BEGIN
      OnErrorWhenModifyingRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef); <=====================
      SynchAction := SynchActionType::Fail;
      LogSynchError(
        SourceRecordRef,DestinationRecordRef,
        STRSUBSTNO(ModifyFailedErr,DestinationRecordRef.CAPTION,TextManagement.RemoveMessageTrailingDots(GETLASTERRORTEXT)),JobId);
    ...
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnFindUncoupledDestinationRecord>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<FindAndCoupleDestinationRecord>
    Code lines:
    OnFindUncoupledDestinationRecord( <=====================
      IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,DestinationIsDeleted,DestinationFound);
    IF DestinationFound THEN BEGIN
      UpdateIntegrationRecordCoupling(
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType);
      UpdateIntegrationRecordTimestamp(
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType,JobIdContext);
    END;
Codeunit<Integration Rec. Delete Invoke>.PROCEDURE<OnAfterDeleteRecord>
  Raised in: Codeunit<Integration Rec. Delete Invoke>.PROCEDURE<DeleteRecord>
    Code lines:
    ...
    OnBeforeDeleteRecord(IntegrationTableMapping,DestinationRecordRef);
    
    IF NOT DestinationRecordRef.DELETE THEN
      LogSynchError(DestinationRecordRef,GETLASTERRORTEXT,JobId);
    
    OnAfterDeleteRecord(IntegrationTableMapping,DestinationRecordRef); <=====================
    COMMIT;
Codeunit<Integration Rec. Delete Invoke>.PROCEDURE<OnBeforeDeleteRecord>
  Raised in: Codeunit<Integration Rec. Delete Invoke>.PROCEDURE<DeleteRecord>
    Code lines:
    ...
      EXIT;
    
    IF SynchAction <> SynchActionType::Delete THEN
      EXIT;
    
    OnBeforeDeleteRecord(IntegrationTableMapping,DestinationRecordRef); <=====================
    
    IF NOT DestinationRecordRef.DELETE THEN
      LogSynchError(DestinationRecordRef,GETLASTERRORTEXT,JobId);
    
    ...
Codeunit<Output Jnl.-Expl. Route>.PROCEDURE<OnAfterInsertItemJnlLine>
  Raised in: Codeunit<Output Jnl.-Expl. Route>.PROCEDURE<InsertOutputJnlLine>
    Code lines:
    ...
    
    DimMgt.UpdateGlobalDimFromDimSetID(
      ItemJnlLine."Dimension Set ID",ItemJnlLine."Shortcut Dimension 1 Code",ItemJnlLine."Shortcut Dimension 2 Code");
    ItemJnlLine.INSERT;
    
    OnAfterInsertItemJnlLine(ItemJnlLine); <=====================
    
    LastItemJnlLine := ItemJnlLine;
Codeunit<Output Jnl.-Expl. Route>.PROCEDURE<OnBeforeDeleteItemJnlLine>
  Raised in: Codeunit<Output Jnl.-Expl. Route>.<OnRun>
    Code lines:
    ...
        END;
    UNTIL ProdOrderLine.NEXT = 0;
    
    ItemJnlLineReserve.DeleteLine(Rec);
    
    OnBeforeDeleteItemJnlLine(Rec); <=====================
    DELETE;
Codeunit<Prod. Order Status Management>.PROCEDURE<OnAfterChangeStatusOnProdOrder>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<ChangeStatusOnProdOrder>
    Code lines:
    ...
    END ELSE BEGIN
      TransProdOrder(ProdOrder);
      FlushProdOrder(ProdOrder,NewStatus,NewPostingDate);
      WhseProdRelease.Release(ProdOrder);
    END;
    OnAfterChangeStatusOnProdOrder(ProdOrder,ToProdOrder); <=====================
    
    COMMIT;
    
    CLEAR(InvtAdjmt);
Codeunit<Prod. Order Status Management>.PROCEDURE<OnAfterTransProdOrder>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<TransProdOrder>
    Code lines:
    ...
      TransProdOrdRtngQltyMeas(FromProdOrder);
      TransProdOrderCmtLine(FromProdOrder);
      TransProdOrderRtngCmtLn(FromProdOrder);
      TransProdOrderBOMCmtLine(FromProdOrder);
      TransProdOrderCapNeed(FromProdOrder);
      OnAfterTransProdOrder(FromProdOrder,ToProdOrder); <=====================
      DELETE;
      FromProdOrder := ToProdOrder;
    END;
Codeunit<Prod. Order Status Management>.PROCEDURE<OnAfterTransProdOrderComp>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<TransProdOrderComp>
    Code lines:
    ...
              ToProdOrderComp.AutoReserve;
          END;
          OnCopyFromProdOrderComp(ToProdOrderComp,FromProdOrderComp);
          ToProdOrderComp.MODIFY;
        UNTIL NEXT = 0;
        OnAfterTransProdOrderComp(FromProdOrder,ToProdOrder); <=====================
        DELETEALL;
      END;
    END;
Codeunit<Prod. Order Status Management>.PROCEDURE<OnAfterTransProdOrderLines>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<TransProdOrderLine>
    Code lines:
    ...
          END;
          ToProdOrderLine.VALIDATE("Unit Cost","Unit Cost");
          OnCopyFromProdOrderLine(ToProdOrderLine,FromProdOrderLine);
          ToProdOrderLine.MODIFY;
        UNTIL NEXT = 0;
        OnAfterTransProdOrderLines(FromProdOrder,ToProdOrder); <=====================
        DELETEALL;
      END;
    END;
Codeunit<Prod. Order Status Management>.PROCEDURE<OnBeforeChangeStatusOnProdOrder>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<ChangeStatusOnProdOrder>
    Code lines:
    SetPostingInfo(NewStatus,NewPostingDate,NewUpdateUnitCost);
    OnBeforeChangeStatusOnProdOrder(ProdOrder,NewStatus); <=====================
    IF NewStatus = NewStatus::Finished THEN BEGIN
      CheckBeforeFinishProdOrder(ProdOrder);
      FlushProdOrder(ProdOrder,NewStatus,NewPostingDate);
      ReservMgt.DeleteDocumentReservation(DATABASE::"Prod. Order Line",ProdOrder.Status,ProdOrder."No.",FALSE);
      ErrorIfUnableToClearWIP(ProdOrder);
      TransProdOrder(ProdOrder);
    
      InvtSetup.GET;
    ...
Codeunit<Prod. Order Status Management>.PROCEDURE<OnCopyFromProdOrder>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<TransProdOrder>
    Code lines:
    ...
      ToProdOrder."Ending Date" := "Ending Date";
      ToProdOrder."Due Date" := "Due Date";
      ToProdOrder."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
      ToProdOrder."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
      ToProdOrder."Dimension Set ID" := "Dimension Set ID";
      OnCopyFromProdOrder(ToProdOrder,FromProdOrder); <=====================
      ToProdOrder.MODIFY;
    
      TransProdOrderLine(FromProdOrder);
      TransProdOrderRtngLine(FromProdOrder);
    ...
Codeunit<Prod. Order Status Management>.PROCEDURE<OnCopyFromProdOrderCapacityNeed>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<TransProdOrderCapNeed>
    Code lines:
    ...
          REPEAT
            ToProdOrderCapNeed := FromProdOrderCapNeed;
            ToProdOrderCapNeed.Status := ToProdOrder.Status;
            ToProdOrderCapNeed."Prod. Order No." := ToProdOrder."No.";
            ToProdOrderCapNeed."Allocated Time" := ToProdOrderCapNeed."Needed Time";
            OnCopyFromProdOrderCapacityNeed(ToProdOrderCapNeed,FromProdOrderCapNeed); <=====================
            ToProdOrderCapNeed.INSERT;
          UNTIL NEXT = 0;
          DELETEALL;
        END;
    ...
Codeunit<Prod. Order Status Management>.PROCEDURE<OnCopyFromProdOrderComp>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<TransProdOrderComp>
    Code lines:
    ...
            ToProdOrderComp.VALIDATE("Expected Quantity");
            ReserveProdOrderComp.TransferPOCompToPOComp(FromProdOrderComp,ToProdOrderComp,0,TRUE);
            IF ToProdOrderComp.Status IN [ToProdOrderComp.Status::"Firm Planned",ToProdOrderComp.Status::Released] THEN
              ToProdOrderComp.AutoReserve;
          END;
          OnCopyFromProdOrderComp(ToProdOrderComp,FromProdOrderComp); <=====================
          ToProdOrderComp.MODIFY;
        UNTIL NEXT = 0;
        OnAfterTransProdOrderComp(FromProdOrder,ToProdOrder);
        DELETEALL;
    ...
Codeunit<Prod. Order Status Management>.PROCEDURE<OnCopyFromProdOrderLine>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<TransProdOrderLine>
    Code lines:
    ...
            ToProdOrderLine.BlockDynamicTracking(TRUE);
            ToProdOrderLine.VALIDATE(Quantity);
            ReserveProdOrderLine.TransferPOLineToPOLine(FromProdOrderLine,ToProdOrderLine,0,TRUE);
          END;
          ToProdOrderLine.VALIDATE("Unit Cost","Unit Cost");
          OnCopyFromProdOrderLine(ToProdOrderLine,FromProdOrderLine); <=====================
          ToProdOrderLine.MODIFY;
        UNTIL NEXT = 0;
        OnAfterTransProdOrderLines(FromProdOrder,ToProdOrder);
        DELETEALL;
    ...
Codeunit<Prod. Order Status Management>.PROCEDURE<OnCopyFromProdOrderRoutingLine>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<TransProdOrderRtngLine>
    Code lines:
    ...
            ProdOrderCapNeed.SETRANGE("Operation No.","Operation No.");
            ProdOrderCapNeed.SETRANGE("Requested Only",FALSE);
            ProdOrderCapNeed.CALCSUMS("Needed Time (ms)");
            ToProdOrderRtngLine."Expected Capacity Need" := ProdOrderCapNeed."Needed Time (ms)";
          END;
          OnCopyFromProdOrderRoutingLine(ToProdOrderRtngLine,FromProdOrderRtngLine); <=====================
          ToProdOrderRtngLine.INSERT;
        UNTIL NEXT = 0;
        DELETEALL;
      END;
Codeunit<Graph Webhook Sync To NAV>.PROCEDURE<OnFindWebhookSubscription>
  Raised in: Codeunit<Graph Webhook Sync To NAV>.<OnRun>
    Code lines:
    OnFindWebhookSubscription(WebhookSubscription,"Subscription ID",IntegrationMappingCode); <=====================
    IF IntegrationMappingCode = '' THEN
      EXIT;
    
    SENDTRACETAG('000016Z',GraphSubscriptionManagement.TraceCategory,VERBOSITY::Verbose,
      STRSUBSTNO(ReceivedNotificationTxt,"Change Type",IntegrationMappingCode,"Resource ID"));
    
    GraphConnectionSetup.RegisterConnections;
    GraphDataSetup.GetIntegrationTableMapping(IntegrationTableMapping,IntegrationMappingCode);
    TableID := GraphDataSetup.GetInboundTableID(IntegrationMappingCode);
    ...
Codeunit<Graph Subscription Management>.PROCEDURE<OnBeforeAddOrUpdateGraphSubscriptions>
  Raised in: Codeunit<Graph Subscription Management>.PROCEDURE<CheckGraphSubscriptions>
    Code lines:
    GraphConnectionSetup.RegisterConnections;
    OnBeforeAddOrUpdateGraphSubscriptions(FirstTimeSync); <=====================
    IF FirstTimeSync THEN
      SyncMode := SyncModeOption::Full
    ELSE
      SyncMode := SyncModeOption::Delta;
Codeunit<Graph Subscription Management>.PROCEDURE<OnBeforeRunGraphSyncBackgroundSession>
  Raised in: Codeunit<Graph Subscription Management>.PROCEDURE<UpdateGraphOnAfterDelete>
    Code lines:
    ...
    IF NOT IntegrationRecordArchive.FindByRecordId(EntityRecordRef.RECORDID) THEN
      EXIT;
    
    // run in background session
    BackgroundSessionAllowed := TRUE;
    OnBeforeRunGraphSyncBackgroundSession(BackgroundSessionAllowed); <=====================
    IF BackgroundSessionAllowed THEN
      TASKSCHEDULER.CREATETASK(CODEUNIT::"Graph Sync. Runner - OnDelete",0,TRUE,COMPANYNAME,0DT,IntegrationRecordArchive.RECORDID)
    ELSE
      CODEUNIT.RUN(CODEUNIT::"Graph Sync. Runner - OnDelete",IntegrationRecordArchive);
  Raised in: Codeunit<Graph Subscription Management>.PROCEDURE<UpdateGraphOnAfterModify>
    Code lines:
    ...
    IF NOT IntegrationRecord.FindByRecordId(EntityRecordRef.RECORDID) THEN
      EXIT;
    
    // run in background session
    BackgroundSessionAllowed := TRUE;
    OnBeforeRunGraphSyncBackgroundSession(BackgroundSessionAllowed); <=====================
    IF BackgroundSessionAllowed THEN
      TASKSCHEDULER.CREATETASK(CODEUNIT::"Graph Sync. Runner - OnModify",0,TRUE,COMPANYNAME,0DT,IntegrationRecord.RECORDID)
    ELSE
      CODEUNIT.RUN(CODEUNIT::"Graph Sync. Runner - OnModify",IntegrationRecord);
  Raised in: Codeunit<Graph Subscription Management>.PROCEDURE<InvokeTaskSchedulerOnScheduleSubscriptionRefreshTask>
    Code lines:
    BackgroundSessionAllowed := TRUE;
    OnBeforeRunGraphSyncBackgroundSession(BackgroundSessionAllowed); <=====================
    IF BackgroundSessionAllowed THEN
      TASKSCHEDULER.CREATETASK(CODEUNIT::"Graph Subscription Management",CODEUNIT::"Graph Delta Sync",TRUE,COMPANYNAME,NotBefore);
  Raised in: Codeunit<Graph Subscription Management>.PROCEDURE<SyncToNavOnWebhookNotificationInsert>
    Code lines:
    IF NOT GraphSyncRunner.IsGraphSyncEnabled THEN
      EXIT;
    
    BackgroundSessionAllowed := TRUE;
    OnBeforeRunGraphSyncBackgroundSession(BackgroundSessionAllowed); <=====================
    IF BackgroundSessionAllowed THEN
      TASKSCHEDULER.CREATETASK(CODEUNIT::"Graph Webhook Sync To NAV",0,TRUE,COMPANYNAME,0DT,Rec.RECORDID)
    ELSE
      CODEUNIT.RUN(CODEUNIT::"Graph Webhook Sync To NAV",Rec);
Codeunit<Graph Subscription Management>.PROCEDURE<OnGetSourceRecordRef>
  Raised in: Codeunit<Graph Subscription Management>.PROCEDURE<GetSourceRecordRef>
    Code lines:
    OnGetSourceRecordRef(GraphRecordRef,WebhookNotification,IntegrationTableID,Retrieved); <=====================
Codeunit<Graph Subscription Management>.PROCEDURE<OnScheduleSubscriptionRefreshTask>
  Raised in: Codeunit<Graph Subscription Management>.PROCEDURE<ScheduleFutureSubscriptionRefreshes>
    Code lines:
    ...
    ScheduledTask.SETRANGE(Company,COMPANYNAME);
    ScheduledTask.SETRANGE("Run Codeunit",CODEUNIT::"Graph Subscription Management");
    TasksToCreate := MaximumNumberOfTasks - ScheduledTask.COUNT;
    FOR i := MaximumNumberOfTasks DOWNTO MaximumNumberOfTasks - TasksToCreate + 1 DO BEGIN
      DistanceIntoFuture := i * RefreshFrequency + BufferTime;
      OnScheduleSubscriptionRefreshTask(CURRENTDATETIME + DistanceIntoFuture); <=====================
      TasksCreated += 1;
    END;
    
    // Make sure we always have a task scheduled at the end of the period
    ...
  Raised in: Codeunit<Graph Subscription Management>.PROCEDURE<ScheduleFutureSubscriptionRefreshes>
    Code lines:
    ...
    ScheduledTask.SETRANGE(Company,COMPANYNAME);
    ScheduledTask.SETRANGE("Run Codeunit",CODEUNIT::"Graph Subscription Management");
    TasksToCreate := MaximumNumberOfTasks - ScheduledTask.COUNT;
    FOR i := MaximumNumberOfTasks DOWNTO MaximumNumberOfTasks - TasksToCreate + 1 DO BEGIN
      DistanceIntoFuture := i * RefreshFrequency + BufferTime;
      OnScheduleSubscriptionRefreshTask(CURRENTDATETIME + DistanceIntoFuture); <=====================
      TasksCreated += 1;
    END;
    
    // Make sure we always have a task scheduled at the end of the period
    ...
  Raised in: Codeunit<Graph Subscription Management>.PROCEDURE<ScheduleFutureSubscriptionRefreshes>
    Code lines:
    ...
    ScheduledTask.SETRANGE(Company,COMPANYNAME);
    ScheduledTask.SETRANGE("Run Codeunit",CODEUNIT::"Graph Subscription Management");
    TasksToCreate := MaximumNumberOfTasks - ScheduledTask.COUNT;
    FOR i := MaximumNumberOfTasks DOWNTO MaximumNumberOfTasks - TasksToCreate + 1 DO BEGIN
      DistanceIntoFuture := i * RefreshFrequency + BufferTime;
      OnScheduleSubscriptionRefreshTask(CURRENTDATETIME + DistanceIntoFuture); <=====================
      TasksCreated += 1;
    END;
    
    // Make sure we always have a task scheduled at the end of the period
    ...
Codeunit<Graph Integration Table Sync>.PROCEDURE<OnBeforeSynchronizationStart>
  Raised in: Codeunit<Graph Integration Table Sync>.PROCEDURE<PerformScheduledSynchToIntegrationTable>
    Code lines:
    ...
        IF GraphIntegrationRecord.IsRecordCoupled(IntegrationRecord."Record ID") THEN BEGIN
          SourceRecordRef.GET(IntegrationRecord."Record ID");
          Found := TRUE;
        END;
    
      OnBeforeSynchronizationStart(IntegrationTableMapping,SourceRecordRef,SkipSyncOnRecord); <=====================
    
      IF Found AND (NOT SkipSyncOnRecord) THEN
        IF IntegrationTableSynch.Synchronize(SourceRecordRef,DestinationRecordRef,FALSE,FALSE) THEN BEGIN
          SaveChangeKeyFromDestinationRefToGraphIntegrationTable(IntegrationTableMapping,DestinationRecordRef);
    ...
  Raised in: Codeunit<Graph Integration Table Sync>.PROCEDURE<PerformScheduledSynchFromIntegrationTable>
    Code lines:
    ...
    IF SourceRecordRef.FINDSET THEN BEGIN
      SaveDeltaTokenFromSourceRecRefToIntegrationTable(SourceRecordRef,IntegrationTableMapping);
      REPEAT
        SourceRecordRef2 := SourceRecordRef.DUPLICATE;
        SkipSyncOnRecord := FALSE;
        OnBeforeSynchronizationStart(IntegrationTableMapping,SourceRecordRef2,SkipSyncOnRecord); <=====================
        IF NOT SkipSyncOnRecord THEN
          IF IntegrationTableSynch.Synchronize(SourceRecordRef2,DestinationRecordRef,TRUE,FALSE) THEN BEGIN
            SaveChangeKeyFromDestinationRefToGraphIntegrationTable(IntegrationTableMapping,SourceRecordRef2);
            ModifiedOn := IntegrationTableSynch.GetRowLastModifiedOn(IntegrationTableMapping,SourceRecordRef2);
    ...
  Raised in: Codeunit<Graph Integration Table Sync>.PROCEDURE<PerformRecordSynchToIntegrationTable>
    Code lines:
    ...
    IntegrationTableSynch.BeginIntegrationSynchJob(
      TABLECONNECTIONTYPE::MicrosoftGraph,IntegrationTableMapping,SourceRecordRef.NUMBER);
    
    LatestModifiedOn := 0DT;
    
    OnBeforeSynchronizationStart(IntegrationTableMapping,SourceRecordRef,SkipSyncOnRecord); <=====================
    IF NOT SkipSyncOnRecord THEN
      IF IntegrationTableSynch.Synchronize(SourceRecordRef,DestinationRecordRef,FALSE,FALSE) THEN BEGIN
        SaveChangeKeyFromDestinationRefToGraphIntegrationTable(IntegrationTableMapping,DestinationRecordRef);
        ModifiedOnIntegrationRecord.FindByRecordId(SourceRecordRef.RECORDID);
    ...
  Raised in: Codeunit<Graph Integration Table Sync>.PROCEDURE<PerformRecordSynchFromIntegrationTable>
    Code lines:
    ...
    // Peform synch.
    IntegrationTableSynch.BeginIntegrationSynchJob(
      TABLECONNECTIONTYPE::MicrosoftGraph,IntegrationTableMapping,SourceRecordRef.NUMBER);
    
    LatestModifiedOn := 0DT;
    OnBeforeSynchronizationStart(IntegrationTableMapping,SourceRecordRef,SkipSyncOnRecord); <=====================
    IF NOT SkipSyncOnRecord THEN
      IF IntegrationTableSynch.Synchronize(SourceRecordRef,DestinationRecordRef,TRUE,FALSE) THEN BEGIN
        SaveChangeKeyFromDestinationRefToGraphIntegrationTable(IntegrationTableMapping,SourceRecordRef);
        ModifiedOn := IntegrationTableSynch.GetRowLastModifiedOn(IntegrationTableMapping,SourceRecordRef);
    ...
  Raised in: Codeunit<Graph Integration Table Sync>.PROCEDURE<PerformRecordDeleteFromIntegrationTable>
    Code lines:
    IF GETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph) = '' THEN
      EXIT;
    
    IntegrationTableSynch.BeginIntegrationSynchJob(
      TABLECONNECTIONTYPE::MicrosoftGraph,IntegrationTableMapping,DestinationRecordRef.NUMBER);
    OnBeforeSynchronizationStart(IntegrationTableMapping,DestinationRecordRef,SkipSyncOnRecord); <=====================
    IntegrationTableSynch.Delete(DestinationRecordRef);
    IntegrationTableSynch.EndIntegrationSynchJob;
  Raised in: Codeunit<Graph Integration Table Sync>.PROCEDURE<PerformRecordDeleteToIntegrationTable>
    Code lines:
    IF GETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph) = '' THEN
      EXIT;
    
    IntegrationTableSynch.BeginIntegrationSynchJob(
      TABLECONNECTIONTYPE::MicrosoftGraph,IntegrationTableMapping,DestinationRecordRef.NUMBER);
    OnBeforeSynchronizationStart(IntegrationTableMapping,DestinationRecordRef,SkipSyncOnRecord); <=====================
    IF IntegrationTableSynch.Delete(DestinationRecordRef) THEN
      ArchiveIntegrationRecords(DestinationRecordRef,IntegrationTableMapping);
    
    IntegrationTableSynch.EndIntegrationSynchJob;
Codeunit<Graph Sync. Runner>.PROCEDURE<OnCheckAuxiliarySyncEnabled>
  Raised in: Codeunit<Graph Sync. Runner>.PROCEDURE<IsGraphSyncEnabled>
    Code lines:
    ...
      EXIT(FALSE);
    
    IF MarketingSetup."Sync with Microsoft Graph" THEN
      EXIT(TRUE);
    
    OnCheckAuxiliarySyncEnabled(AuxSyncEnabled); <=====================
    EXIT(AuxSyncEnabled);
Codeunit<Graph Sync. Runner>.PROCEDURE<OnRunGraphDeltaSync>
  Raised in: Codeunit<Graph Sync. Runner>.PROCEDURE<RunDeltaSync>
    Code lines:
    OnRunGraphDeltaSync; <=====================
Codeunit<Graph Sync. Runner>.PROCEDURE<OnRunGraphFullSync>
  Raised in: Codeunit<Graph Sync. Runner>.PROCEDURE<RunFullSync>
    Code lines:
    OnRunGraphFullSync; <=====================
Codeunit<Graph Sync. Runner>.PROCEDURE<OnSyncSynchronouslyCannotStartSession>
  Raised in: Codeunit<Graph Sync. Runner>.PROCEDURE<SyncFromGraphSynchronously>
    Code lines:
    // Start session will use CPU time of main thread while main thread is SLEEPing
    // Taskscheduler cannot be used since it requires a COMMIT to start
    SessionId := 0;
    
    IF NOT STARTSESSION(SessionId,CodeunitId,COMPANYNAME) THEN BEGIN
      OnSyncSynchronouslyCannotStartSession('Codeunit: ' + FORMAT(CodeunitId)); <=====================
      EXIT;
    END;
    
    StartDateTime := CURRENTDATETIME;
    ...
Codeunit<Graph Sync. Runner>.PROCEDURE<OnSyncSynchronouslyTimeout>
  Raised in: Codeunit<Graph Sync. Runner>.PROCEDURE<SyncFromGraphSynchronously>
    Code lines:
    ...
    
      TimePassed := CURRENTDATETIME - StartDateTime;
      TimeoutReached := TimePassed > TimeoutInSeconds * 1000;
    UNTIL TimeoutReached;
    
    OnSyncSynchronouslyTimeout('Codeunit: ' + FORMAT(CodeunitId)); <=====================
Codeunit<Graph Data Setup>.PROCEDURE<OnAddIntegrationMapping>
  Raised in: Codeunit<Graph Data Setup>.PROCEDURE<AddIntegrationMapping>
    Code lines:
    OnGetInboundTableID(MappingCode,TableID);
    OnAddIntegrationMapping(MappingCode); <=====================
Codeunit<Graph Data Setup>.PROCEDURE<OnCreateIntegrationMappings>
  Raised in: Codeunit<Graph Data Setup>.<OnRun>
    Code lines:
    OnCreateIntegrationMappings; <=====================
Codeunit<Graph Data Setup>.PROCEDURE<OnGetGraphRecord>
  Raised in: Codeunit<Graph Data Setup>.PROCEDURE<GetGraphRecord>
    Code lines:
    OnGetGraphRecord(GraphRecordRef,DestinationGraphID,TableID,Found); <=====================
Codeunit<Graph Data Setup>.PROCEDURE<OnGetInboundTableID>
  Raised in: Codeunit<Graph Data Setup>.PROCEDURE<GetInboundTableID>
    Code lines:
    OnGetInboundTableID(MappingCode,TableID); <=====================
  Raised in: Codeunit<Graph Data Setup>.PROCEDURE<AddIntegrationMapping>
    Code lines:
    OnGetInboundTableID(MappingCode,TableID); <=====================
    OnAddIntegrationMapping(MappingCode);
Codeunit<Graph Data Setup>.PROCEDURE<OnGetMappingCodeForTable>
  Raised in: Codeunit<Graph Data Setup>.PROCEDURE<GetMappingCodeForTable>
    Code lines:
    OnGetMappingCodeForTable(TableID,MappingCode); <=====================
Codeunit<Graph Connection Setup>.PROCEDURE<OnCheckForceSync>
  Raised in: Codeunit<Graph Connection Setup>.PROCEDURE<CanRunSync>
    Code lines:
    OnCheckForceSync(ForceSync); <=====================
    IF ForceSync THEN
      EXIT(TRUE);
    
    IF GETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph) <> '' THEN
      EXIT(FALSE);
    
    EXIT(TRUE);
Codeunit<Graph Connection Setup>.PROCEDURE<OnGetInboundConnectionName>
  Raised in: Codeunit<Graph Connection Setup>.PROCEDURE<GetInboundConnectionName>
    Code lines:
    OnGetInboundConnectionName(TableID,ConnectionName); <=====================
Codeunit<Graph Connection Setup>.PROCEDURE<OnGetInboundConnectionString>
  Raised in: Codeunit<Graph Connection Setup>.PROCEDURE<GetInboundConnectionString>
    Code lines:
    OnGetInboundConnectionString(TableID,ConnectionString); <=====================
Codeunit<Graph Connection Setup>.PROCEDURE<OnGetSubscriptionConnectionName>
  Raised in: Codeunit<Graph Connection Setup>.PROCEDURE<GetSubscriptionConnectionName>
    Code lines:
    OnGetSubscriptionConnectionName(TableID,ConnectionName); <=====================
Codeunit<Graph Connection Setup>.PROCEDURE<OnGetSubscriptionConnectionString>
  Raised in: Codeunit<Graph Connection Setup>.PROCEDURE<GetSubscriptionConnectionString>
    Code lines:
    OnGetSubscriptionConnectionString(TableID,ConnectionString); <=====================
Codeunit<Graph Connection Setup>.PROCEDURE<OnGetSynchronizeConnectionName>
  Raised in: Codeunit<Graph Connection Setup>.PROCEDURE<GetSynchronizeConnectionName>
    Code lines:
    OnGetSynchronizeConnectionName(TableID,ConnectionName); <=====================
Codeunit<Graph Connection Setup>.PROCEDURE<OnGetSynchronizeConnectionString>
  Raised in: Codeunit<Graph Connection Setup>.PROCEDURE<GetSynchronizeConnectionString>
    Code lines:
    OnGetSynchronizeConnectionString(TableID,ConnectionString); <=====================
Codeunit<Graph Connection Setup>.PROCEDURE<OnRegisterConnections>
  Raised in: Codeunit<Graph Connection Setup>.PROCEDURE<RegisterConnections>
    Code lines:
    OnRegisterConnections; <=====================
Codeunit<Graph Mgt - General Tools>.PROCEDURE<ApiSetup>
  Raised in: Codeunit<Graph Mgt - General Tools>.<OnRun>
    Code lines:
    ApiSetup; <=====================
  Raised in: Codeunit<Graph Mgt - General Tools>.PROCEDURE<APISetupIfEnabled>
    Code lines:
    IF IsApiEnabled THEN
      ApiSetup; <=====================
  Raised in: Codeunit<Graph Mgt - General Tools>.PROCEDURE<InitDemoCompanyApisForSaaS>
    Code lines:
    ...
    APIEntitiesSetup.SafeGet;
    
    IF APIEntitiesSetup."Demo Company API Initialized" THEN
      EXIT;
    
    GraphMgtGeneralTools.ApiSetup; <=====================
    
    APIEntitiesSetup.SafeGet;
    APIEntitiesSetup.VALIDATE("Demo Company API Initialized",TRUE);
    APIEntitiesSetup.MODIFY(TRUE);
Codeunit<Graph Mgt - General Tools>.PROCEDURE<OnForceIsApiEnabledVerification>
  Raised in: Codeunit<Graph Mgt - General Tools>.PROCEDURE<OnGetIntegrationActivated>
    Code lines:
    OnForceIsApiEnabledVerification(ForceIsApiEnabledVerification); <=====================
    
    IF NOT ForceIsApiEnabledVerification AND IsSyncEnabled THEN
      EXIT;
    
    IF ForceIsApiEnabledVerification THEN
      IF NOT IsApiEnabled THEN
        EXIT;
    
    IF NOT ApiWebService.READPERMISSION THEN
    ...
Codeunit<Graph Mgt - General Tools>.PROCEDURE<OnGetIsAPIEnabled>
  Raised in: Codeunit<Graph Mgt - General Tools>.PROCEDURE<IsApiEnabled>
    Code lines:
    OnGetIsAPIEnabled(Handled,IsAPIEnabled); <=====================
    IF Handled THEN
      EXIT(IsAPIEnabled);
    
    EXIT(ServerConfigSettingHandler.GetApiServicesEnabled);
Codeunit<Production Journal Mgt>.PROCEDURE<OnAfterInsertItemJnlLine>
  Raised in: Codeunit<Production Journal Mgt>.PROCEDURE<InsertConsumptionJnlLine>
    Code lines:
    ...
      ItemJnlLine."Source Code" := ItemJnlTemplate."Source Code";
      ItemJnlLine."Reason Code" := ItemJnlBatch."Reason Code";
      ItemJnlLine."Posting No. Series" := ItemJnlBatch."Posting No. Series";
    
      ItemJnlLine.INSERT;
      OnAfterInsertItemJnlLine(ItemJnlLine); <=====================
    
      IF Item."Item Tracking Code" <> '' THEN
        ItemTrackingMgt.CopyItemTracking(RowID1,ItemJnlLine.RowID1,FALSE);
    END;
    ...
  Raised in: Codeunit<Production Journal Mgt>.PROCEDURE<InsertOutputJnlLine>
    Code lines:
    ...
      ItemJnlLine."Source Code" := ItemJnlTemplate."Source Code";
      ItemJnlLine."Reason Code" := ItemJnlBatch."Reason Code";
      ItemJnlLine."Posting No. Series" := ItemJnlBatch."Posting No. Series";
    
      ItemJnlLine.INSERT;
      OnAfterInsertItemJnlLine(ItemJnlLine); <=====================
    
      IF ProdOrderRtngLine."Next Operation No." = '' THEN // Last or no Routing Line
        ItemTrackingMgt.CopyItemTracking(RowID1,ItemJnlLine.RowID1,FALSE);
    END;
    ...
Codeunit<Calc. Item Availability>.PROCEDURE<OnAfterGetDocumentEntries>
  Raised in: Codeunit<Calc. Item Availability>.PROCEDURE<GetDocumentEntries>
    Code lines:
    ...
    TryGetProdOrderSupplyEntries(InvtEventBuf,Item);
    TryGetTransferOrderSupplyEntries(InvtEventBuf,Item);
    TryGetAsmOrderDemandEntries(InvtEventBuf,Item);
    TryGetAsmOrderSupllyEntries(InvtEventBuf,Item);
    
    OnAfterGetDocumentEntries(InvtEventBuf,Item,EntryNo); <=====================
Codeunit<Calc. Item Avail. Timeline>.PROCEDURE<OnAfterUpdateTimelineEventDetails>
  Raised in: Codeunit<Calc. Item Avail. Timeline>.PROCEDURE<UpdateTimelineEventDetails>
    Code lines:
    ...
              STRSUBSTNO('%1 %2 %3 %4',TXT017,AsmHeader."Document Type",AsmHeader."No.",AsmHeader.Description);
          END;
      END;
    END;
    
    OnAfterUpdateTimelineEventDetails(TempToTimelineEvent,TempFromInventoryEventBuffer); <=====================
Codeunit<Calc. Item Avail. Timeline>.PROCEDURE<OnCreateTimelineEventsBeforePlanning>
  Raised in: Codeunit<Calc. Item Avail. Timeline>.PROCEDURE<CreateTimelineEvents>
    Code lines:
    ...
      IF FINDSET THEN
        REPEAT
          InsertTimelineEvent(TempTimelineEvent,TempInventoryEventBuffer);
        UNTIL NEXT = 0;
    
      OnCreateTimelineEventsBeforePlanning(TempTimelineEvent,TempInventoryEventBuffer); <=====================
    
      // Planning Events - New supplies already planned
      SETFILTER("Availability Date",'<> %1',0D);
      SETRANGE(Type,Type::Plan);
    ...
Codeunit<Sales - Calc Discount By Type>.PROCEDURE<OnAfterResetRecalculateInvoiceDisc>
  Raised in: Codeunit<Sales - Calc Discount By Type>.PROCEDURE<ResetRecalculateInvoiceDisc>
    Code lines:
    SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
    SalesLine.SETRANGE("Document No.",SalesHeader."No.");
    SalesLine.SETRANGE("Recalculate Invoice Disc.",TRUE);
    SalesLine.MODIFYALL("Recalculate Invoice Disc.",FALSE);
    
    OnAfterResetRecalculateInvoiceDisc(SalesHeader); <=====================
Codeunit<FA Insert G/L Account>.PROCEDURE<OnGetBalAccAfterRestoreGenJnlLineFields>
  Raised in: Codeunit<FA Insert G/L Account>.PROCEDURE<GetBalAcc>
    Code lines:
    ...
          "Shortcut Dimension 1 Code" := TempFAGLPostBuf."Global Dimension 1 Code";
          "Shortcut Dimension 2 Code" := TempFAGLPostBuf."Global Dimension 2 Code";
          "Dimension Set ID" := TempFAGLPostBuf."Dimension Set ID";
          Description := TempGenJnlLine.Description;
          "FA Add.-Currency Factor" := TempGenJnlLine."FA Add.-Currency Factor";
          OnGetBalAccAfterRestoreGenJnlLineFields(GenJnlLine,TempGenJnlLine); <=====================
          InsertGenJnlLine(GenJnlLine);
        UNTIL TempFAGLPostBuf.NEXT = 0;
    END;
    TempFAGLPostBuf.DELETEALL;
Codeunit<FA Insert G/L Account>.PROCEDURE<OnGetBalAccAfterSaveGenJnlLineFields>
  Raised in: Codeunit<FA Insert G/L Account>.PROCEDURE<GetBalAcc>
    Code lines:
    ...
      TESTFIELD("Depreciation Book Code");
      TESTFIELD("Posting Group");
      TESTFIELD("FA Posting Type");
      TempGenJnlLine.Description := Description;
      TempGenJnlLine."FA Add.-Currency Factor" := "FA Add.-Currency Factor";
      OnGetBalAccAfterSaveGenJnlLineFields(TempGenJnlLine,GenJnlLine); <=====================
      InsertBufferBalAcc(
        "FA Posting Type" - 1,-Amount,"Depreciation Book Code",
        "Posting Group","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code","Dimension Set ID",FALSE,FALSE);
      CalculateNoOfEmptyLines(GenJnlLine,NumberOfEntries);
    ...
Codeunit<Make FA Ledger Entry>.PROCEDURE<OnAfterCopyFromFACard>
  Raised in: Codeunit<Make FA Ledger Entry>.PROCEDURE<CopyFromFACard>
    Code lines:
    ...
      "Accum. Depr. % (Custom 1)" := FADeprBook."Accum. Depr. % (Custom 1)";
      "Depr. % this year (Custom 1)" := FADeprBook."Depr. This Year % (Custom 1)";
      "Property Class (Custom 1)" := FADeprBook."Property Class (Custom 1)";
    END;
    
    OnAfterCopyFromFACard(FALedgEntry,FA,FADeprBook); <=====================
Codeunit<Make FA Ledger Entry>.PROCEDURE<OnAfterCopyFromFAJnlLine>
  Raised in: Codeunit<Make FA Ledger Entry>.PROCEDURE<CopyFromFAJnlLine>
    Code lines:
    ...
      "Journal Batch Name" := FAJnlLine."Journal Batch Name";
      "FA Posting Type" := FAJnlLine.ConvertToLedgEntry(FAJnlLine);
      "No. Series" := FAJnlLine."Posting No. Series";
    END;
    
    OnAfterCopyFromFAJnlLine(FALedgEntry,FAJnlLine); <=====================
Codeunit<Make FA Ledger Entry>.PROCEDURE<OnAfterCopyFromGenJnlLine>
  Raised in: Codeunit<Make FA Ledger Entry>.PROCEDURE<CopyFromGenJnlLine>
    Code lines:
    ...
      "No. Series" := GenJnlLine."Posting No. Series";
      FAJnlLine."FA Posting Type" := GenJnlLine."FA Posting Type" - 1;
      "FA Posting Type" := FAJnlLine.ConvertToLedgEntry(FAJnlLine);
    END;
    
    OnAfterCopyFromGenJnlLine(FALedgEntry,GenJnlLine); <=====================
Codeunit<Make Maintenance Ledger Entry>.PROCEDURE<OnAfterCopyFromFACard>
  Raised in: Codeunit<Make Maintenance Ledger Entry>.PROCEDURE<CopyFromFACard>
    Code lines:
    ...
      "FA Location Code" := FA."FA Location Code";
      "Location Code" := FA."Location Code";
      "FA Exchange Rate" := FADeprBook.GetExchangeRate;
    END;
    
    OnAfterCopyFromFACard(MaintenanceLedgEntry,FA,FADeprBook); <=====================
Codeunit<Make Maintenance Ledger Entry>.PROCEDURE<OnAfterCopyFromFAJnlLine>
  Raised in: Codeunit<Make Maintenance Ledger Entry>.PROCEDURE<CopyFromFAJnlLine>
    Code lines:
    ...
      "Maintenance Code" := FAJnlLine."Maintenance Code";
      Correction := FAJnlLine.Correction;
      "No. Series" := FAJnlLine."Posting No. Series";
    END;
    
    OnAfterCopyFromFAJnlLine(MaintenanceLedgEntry,FAJnlLine); <=====================
Codeunit<Make Maintenance Ledger Entry>.PROCEDURE<OnAfterCopyFromGenJnlLine>
  Raised in: Codeunit<Make Maintenance Ledger Entry>.PROCEDURE<CopyFromGenJnlLine>
    Code lines:
    ...
      "Use Tax" := GenJnlLine."Use Tax";
      Correction := GenJnlLine.Correction;
      "No. Series" := GenJnlLine."Posting No. Series";
    END;
    
    OnAfterCopyFromGenJnlLine(MaintenanceLedgEntry,GenJnlLine); <=====================
Codeunit<Document Totals>.PROCEDURE<OnAfterPurchaseLineSetFilters>
  Raised in: Codeunit<Document Totals>.PROCEDURE<CalculatePurchasePageTotals>
    Code lines:
    TotalPurchaseLine2 := TotalPurchaseLine;
    TotalPurchaseLine2.SETRANGE("Document Type",PurchaseLine."Document Type");
    TotalPurchaseLine2.SETRANGE("Document No.",PurchaseLine."Document No.");
    OnAfterPurchaseLineSetFilters(TotalPurchaseLine2,PurchaseLine); <=====================
    TotalPurchaseLine2.CALCSUMS("Line Amount",Amount,"Amount Including VAT","Inv. Discount Amount");
    VATAmount := TotalPurchaseLine2."Amount Including VAT" - TotalPurchaseLine2.Amount;
    TotalPurchaseLine := TotalPurchaseLine2;
Codeunit<Document Totals>.PROCEDURE<OnAfterSalesLineSetFilters>
  Raised in: Codeunit<Document Totals>.PROCEDURE<CalculateSalesPageTotals>
    Code lines:
    TotalSalesLine2 := TotalSalesLine;
    TotalSalesLine2.SETRANGE("Document Type",SalesLine."Document Type");
    TotalSalesLine2.SETRANGE("Document No.",SalesLine."Document No.");
    OnAfterSalesLineSetFilters(TotalSalesLine2,SalesLine); <=====================
    TotalSalesLine2.CALCSUMS("Line Amount",Amount,"Amount Including VAT","Inv. Discount Amount");
    VATAmount := TotalSalesLine2."Amount Including VAT" - TotalSalesLine2.Amount;
    TotalSalesLine := TotalSalesLine2;
Codeunit<Dist. Integration>.PROCEDURE<OnAfterInsertPurchLine>
  Raised in: Codeunit<Dist. Integration>.PROCEDURE<GetSpecialOrders>
    Code lines:
    ...
          PurchLine."Special Order" := TRUE;
          PurchLine."Purchasing Code" := SalesLine."Purchasing Code";
          PurchLine."Special Order Sales No." := SalesLine."Document No.";
          PurchLine."Special Order Sales Line No." := SalesLine."Line No.";
          PurchLine.INSERT;
          OnAfterInsertPurchLine(PurchLine); <=====================
    
          NextLineNo := NextLineNo + 10000;
    
          SalesLine."Unit Cost (LCY)" := PurchLine."Unit Cost (LCY)";
    ...
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterInsertShptEntryRelation>
  Raised in: Codeunit<TransferOrder-Post Shipment>.PROCEDURE<InsertShptEntryRelation>
    Code lines:
    ...
          TempHandlingSpecification := TempHandlingSpecification2;
          TempHandlingSpecification."Source Prod. Order Line" := TransShptLine."Line No.";
          TempHandlingSpecification."Buffer Status" := TempHandlingSpecification."Buffer Status"::MODIFY;
          TempHandlingSpecification.INSERT;
        UNTIL TempHandlingSpecification2.NEXT = 0;
        OnAfterInsertShptEntryRelation(TransLine,WhseShip,0); <=====================
        EXIT(0);
      END;
    END ELSE BEGIN
      OnAfterInsertShptEntryRelation(TransLine,WhseShip,ItemJnlLine."Item Shpt. Entry No."); <=====================
    ...
  Raised in: Codeunit<TransferOrder-Post Shipment>.PROCEDURE<InsertShptEntryRelation>
    Code lines:
    ...
          TempHandlingSpecification := TempHandlingSpecification2;
          TempHandlingSpecification."Source Prod. Order Line" := TransShptLine."Line No.";
          TempHandlingSpecification."Buffer Status" := TempHandlingSpecification."Buffer Status"::MODIFY;
          TempHandlingSpecification.INSERT;
        UNTIL TempHandlingSpecification2.NEXT = 0;
        OnAfterInsertShptEntryRelation(TransLine,WhseShip,0); <=====================
        EXIT(0);
      END;
    END ELSE BEGIN
      OnAfterInsertShptEntryRelation(TransLine,WhseShip,ItemJnlLine."Item Shpt. Entry No."); <=====================
    ...
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterInsertTransShptLine>
  Raised in: Codeunit<TransferOrder-Post Shipment>.PROCEDURE<InsertTransShptLine>
    Code lines:
    ...
      IF WhsePosting THEN
        PostWhseJnlLine(ItemJnlLine,OriginalQuantity,OriginalQuantityBase);
    END;
    OnBeforeInsertTransShptLine(TransShptLine,TransLine);
    TransShptLine.INSERT;
    OnAfterInsertTransShptLine(TransShptLine,TransLine); <=====================
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterTransferOrderPostShipment>
  Raised in: Codeunit<TransferOrder-Post Shipment>.<OnRun>
    Code lines:
    ...
      Window.CLOSE;
    END;
    UpdateAnalysisView.UpdateAll(0,TRUE);
    UpdateItemAnalysisView.UpdateAll(0,TRUE);
    Rec := TransHeader;
    OnAfterTransferOrderPostShipment(Rec); <=====================
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforeInsertTransShptLine>
  Raised in: Codeunit<TransferOrder-Post Shipment>.PROCEDURE<InsertTransShptLine>
    Code lines:
    ...
          WhseShptLine,PostedWhseShptHeader,PostedWhseShptLine,TempWhseSplitSpecification);
      END;
      IF WhsePosting THEN
        PostWhseJnlLine(ItemJnlLine,OriginalQuantity,OriginalQuantityBase);
    END;
    OnBeforeInsertTransShptLine(TransShptLine,TransLine); <=====================
    TransShptLine.INSERT;
    OnAfterInsertTransShptLine(TransShptLine,TransLine);
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforePostItemJournalLine>
  Raised in: Codeunit<TransferOrder-Post Shipment>.PROCEDURE<PostItem>
    Code lines:
    CreateItemJnlLine(ItemJnlLine,TransferLine,TransShptHeader2,TransShptLine2);
    ReserveItemJnlLine(ItemJnlLine,TransferLine,WhseShip,WhseShptHeader2);
    OnBeforePostItemJournalLine(ItemJnlLine,TransferLine,TransShptHeader2,TransShptLine2); <=====================
    ItemJnlPostLine.RunWithCheck(ItemJnlLine);
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforeTransferOrderPostShipment>
  Raised in: Codeunit<TransferOrder-Post Shipment>.<OnRun>
    Code lines:
    ReleaseDocument(Rec);
    TransHeader := Rec;
    TransHeader.SetHideValidationDialog(HideValidationDialog);
    
    OnBeforeTransferOrderPostShipment(TransHeader); <=====================
    
    WITH TransHeader DO BEGIN
      CheckBeforePost;
    
      WhseReference := "Posting from Whse. Ref.";
    ...
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterInsertTransRcptLine>
  Raised in: Codeunit<TransferOrder-Post Receipt>.PROCEDURE<InsertTransRcptLine>
    Code lines:
    TransRcptLine.INIT;
    TransRcptLine."Document No." := ReceiptNo;
    TransRcptLine.CopyFromTransferLine(TransLine);
    OnBeforeInsertTransRcptLine(TransRcptLine,TransLine);
    TransRcptLine.INSERT;
    OnAfterInsertTransRcptLine(TransRcptLine,TransLine); <=====================
    
    IF TransLine."Qty. to Receive" > 0 THEN BEGIN
      OriginalQuantity := TransLine."Qty. to Receive";
      OriginalQuantityBase := TransLine."Qty. to Receive (Base)";
    ...
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterTransferOderPostReceipt>
  Raised in: Codeunit<TransferOrder-Post Receipt>.<OnRun>
    Code lines:
    ...
    UpdateAnalysisView.UpdateAll(0,TRUE);
    UpdateItemAnalysisView.UpdateAll(0,TRUE);
    Rec := TransHeader;
    
    OnAfterTransferOrderPostReceipt(Rec);
    OnAfterTransferOderPostReceipt(Rec); <=====================
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterTransferOrderPostReceipt>
  Raised in: Codeunit<TransferOrder-Post Receipt>.<OnRun>
    Code lines:
    ...
    END;
    UpdateAnalysisView.UpdateAll(0,TRUE);
    UpdateItemAnalysisView.UpdateAll(0,TRUE);
    Rec := TransHeader;
    
    OnAfterTransferOrderPostReceipt(Rec); <=====================
    OnAfterTransferOderPostReceipt(Rec);
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterTransLineUpdateQtyReceived>
  Raised in: Codeunit<TransferOrder-Post Receipt>.<OnRun>
    Code lines:
    ...
          TransLine.UpdateWithWarehouseShipReceive;
          ReservMgt.SetItemJnlLine(ItemJnlLine);
          ReservMgt.SetItemTrackingHandling(1); // Allow deletion
          ReservMgt.DeleteReservEntries(TRUE,0);
          TransLine.MODIFY;
          OnAfterTransLineUpdateQtyReceived(TransLine); <=====================
        UNTIL TransLine.NEXT = 0;
    
      IF WhseReceive THEN
        WhseRcptLine.LOCKTABLE;
    ...
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterTransRcptLineModify>
  Raised in: Codeunit<TransferOrder-Post Receipt>.PROCEDURE<InsertTransRcptLine>
    Code lines:
    ...
        WhsePostRcpt.CreatePostedRcptLine(
          WhseRcptLine,PostedWhseRcptHeader,PostedWhseRcptLine,TempWhseSplitSpecification);
      END;
      IF WhsePosting THEN
        PostWhseJnlLine(ItemJnlLine,OriginalQuantity,OriginalQuantityBase,TempWhseSplitSpecification);
      OnAfterTransRcptLineModify(TransRcptLine,TransLine); <=====================
    END;
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforeInsertTransRcptLine>
  Raised in: Codeunit<TransferOrder-Post Receipt>.PROCEDURE<InsertTransRcptLine>
    Code lines:
    TransRcptLine.INIT;
    TransRcptLine."Document No." := ReceiptNo;
    TransRcptLine.CopyFromTransferLine(TransLine);
    OnBeforeInsertTransRcptLine(TransRcptLine,TransLine); <=====================
    TransRcptLine.INSERT;
    OnAfterInsertTransRcptLine(TransRcptLine,TransLine);
    
    IF TransLine."Qty. to Receive" > 0 THEN BEGIN
      OriginalQuantity := TransLine."Qty. to Receive";
      OriginalQuantityBase := TransLine."Qty. to Receive (Base)";
    ...
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforePostItemJournalLine>
  Raised in: Codeunit<TransferOrder-Post Receipt>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
    ItemJnlLine."Transaction Specification" := TransRcptHeader2."Transaction Specification";
    ItemJnlLine."Direct Transfer" := TransLine."Direct Transfer";
    WriteDownDerivedLines(TransLine3);
    ItemJnlPostLine.SetPostponeReservationHandling(TRUE);
    
    OnBeforePostItemJournalLine(ItemJnlLine,TransLine3,TransRcptHeader2,TransRcptLine2); <=====================
    ItemJnlPostLine.RunWithCheck(ItemJnlLine);
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforeTransferOderPostReceipt>
  Raised in: Codeunit<TransferOrder-Post Receipt>.<OnRun>
    Code lines:
    ReleaseDocument(Rec);
    TransHeader := Rec;
    TransHeader.SetHideValidationDialog(HideValidationDialog);
    
    OnBeforeTransferOderPostReceipt(TransHeader); <=====================
    OnBeforeTransferOrderPostReceipt(TransHeader);
    
    WITH TransHeader DO BEGIN
      CheckBeforePost;
    
    ...
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforeTransferOrderPostReceipt>
  Raised in: Codeunit<TransferOrder-Post Receipt>.<OnRun>
    Code lines:
    ReleaseDocument(Rec);
    TransHeader := Rec;
    TransHeader.SetHideValidationDialog(HideValidationDialog);
    
    OnBeforeTransferOderPostReceipt(TransHeader);
    OnBeforeTransferOrderPostReceipt(TransHeader); <=====================
    
    WITH TransHeader DO BEGIN
      CheckBeforePost;
    
    ...
Codeunit<Release Transfer Document>.PROCEDURE<OnAfterReleaseTransferDoc>
  Raised in: Codeunit<Release Transfer Document>.<OnRun>
    Code lines:
    ...
    MODIFY;
    
    WhseTransferRelease.SetCallFromTransferOrder(TRUE);
    WhseTransferRelease.Release(Rec);
    
    OnAfterReleaseTransferDoc(Rec); <=====================
Codeunit<Release Transfer Document>.PROCEDURE<OnBeforeReleaseTransferDoc>
  Raised in: Codeunit<Release Transfer Document>.<OnRun>
    Code lines:
    IF Status = Status::Released THEN
      EXIT;
    
    OnBeforeReleaseTransferDoc(Rec); <=====================
    TESTFIELD("Transfer-from Code");
    TESTFIELD("Transfer-to Code");
    IF "Transfer-from Code" = "Transfer-to Code" THEN
      ERROR(Text001,"No.",FIELDCAPTION("Transfer-from Code"),FIELDCAPTION("Transfer-to Code"));
    IF NOT "Direct Transfer" THEN
      TESTFIELD("In-Transit Code")
    ...
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateRcptLineFromPurchLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<PurchLine2ReceiptLine>
    Code lines:
    ...
        "Bin Code" := WhseReceiptHeader."Bin Code";
      IF "Bin Code" = '' THEN
        "Bin Code" := PurchLine."Bin Code";
      UpdateReceiptLine(WhseReceiptLine,WhseReceiptHeader);
      CreateReceiptLine(WhseReceiptLine);
      OnAfterCreateRcptLineFromPurchLine(WhseReceiptLine,WhseReceiptHeader,PurchLine); <=====================
      EXIT(NOT HasErrorOccured);
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateRcptLineFromSalesLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<SalesLine2ReceiptLine>
    Code lines:
    ...
        "Bin Code" := WhseReceiptHeader."Bin Code";
      IF "Bin Code" = '' THEN
        "Bin Code" := SalesLine."Bin Code";
      UpdateReceiptLine(WhseReceiptLine,WhseReceiptHeader);
      CreateReceiptLine(WhseReceiptLine);
      OnAfterCreateRcptLineFromSalesLine(WhseReceiptLine,WhseReceiptHeader,SalesLine); <=====================
      EXIT(NOT HasErrorOccured);
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateRcptLineFromTransLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<TransLine2ReceiptLine>
    Code lines:
    ...
        "Bin Code" := WhseReceiptHeader."Bin Code";
      IF "Bin Code" = '' THEN
        "Bin Code" := TransLine."Transfer-To Bin Code";
      UpdateReceiptLine(WhseReceiptLine,WhseReceiptHeader);
      CreateReceiptLine(WhseReceiptLine);
      OnAfterCreateRcptLineFromTransLine(WhseReceiptLine,WhseReceiptHeader,TransLine); <=====================
      EXIT(NOT HasErrorOccured);
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateShptLineFromPurchLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<FromPurchLine2ShptLine>
    Code lines:
    ...
        "Bin Code" := WhseShptHeader."Bin Code";
      IF "Bin Code" = '' THEN
        "Bin Code" := PurchLine."Bin Code";
      UpdateShptLine(WhseShptLine,WhseShptHeader);
      CreateShptLine(WhseShptLine);
      OnAfterCreateShptLineFromPurchLine(WhseShptLine,WhseShptHeader,PurchLine); <=====================
      EXIT(NOT HasErrorOccured);
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateShptLineFromSalesLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<CreateShptLineFromSalesLine>
    Code lines:
    ...
        "Bin Code" := WhseShptHeader."Bin Code";
      IF "Bin Code" = '' THEN
        "Bin Code" := SalesLine."Bin Code";
      UpdateShptLine(WhseShptLine,WhseShptHeader);
      CreateShptLine(WhseShptLine);
      OnAfterCreateShptLineFromSalesLine(WhseShptLine,WhseShptHeader,SalesLine); <=====================
      EXIT(NOT HasErrorOccured);
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateShptLineFromServiceLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<FromServiceLine2ShptLine>
    Code lines:
    ...
        "Bin Code" := WhseShptHeader."Bin Code";
      IF "Bin Code" = '' THEN
        "Bin Code" := ServiceLine."Bin Code";
      UpdateShptLine(WhseShptLine,WhseShptHeader);
      CreateShptLine(WhseShptLine);
      OnAfterCreateShptLineFromServiceLine(WhseShptLine,WhseShptHeader,ServiceLine); <=====================
      EXIT(NOT HasErrorOccured);
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateShptLineFromTransLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<FromTransLine2ShptLine>
    Code lines:
    ...
        "Bin Code" := WhseShptHeader."Bin Code";
      IF "Bin Code" = '' THEN
        "Bin Code" := TransLine."Transfer-from Bin Code";
      UpdateShptLine(WhseShptLine,WhseShptHeader);
      CreateShptLine(WhseShptLine);
      OnAfterCreateShptLineFromTransLine(WhseShptLine,WhseShptHeader,TransLine); <=====================
      EXIT(NOT HasErrorOccured);
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterWhseReceiptLineInsert>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<CreateReceiptLine>
    Code lines:
    ...
      Item."No." := "Item No.";
      Item.ItemSKUGet(Item,"Location Code","Variant Code");
      "Shelf No." := Item."Shelf No.";
      Status := GetLineStatus;
      INSERT;
      OnAfterWhseReceiptLineInsert(WhseReceiptLine); <=====================
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterWhseShptLineInsert>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<CreateShptLine>
    Code lines:
    WITH WhseShptLine DO BEGIN
      Item."No." := "Item No.";
      Item.ItemSKUGet(Item,"Location Code","Variant Code");
      "Shelf No." := Item."Shelf No.";
      INSERT;
      OnAfterWhseShptLineInsert(WhseShptLine); <=====================
      CreateWhseItemTrackingLines;
    END;
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterCheckWhseRcptLine>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<Code>
    Code lines:
    ...
          TESTFIELD("Unit of Measure Code");
          WhseRqst.GET(
            WhseRqst.Type::Inbound,"Location Code","Source Type","Source Subtype","Source No.");
          IF WhseRqst."Document Status" <> WhseRqst."Document Status"::Released THEN
            ERROR(Text000,"Source Document","Source No.");
          OnAfterCheckWhseRcptLine(WhseRcptLine); <=====================
        UNTIL NEXT = 0
      ELSE
        ERROR(Text001);
    
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterPostUpdateWhseRcptLine>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<PostUpdateWhseDocuments>
    Code lines:
    ...
            WhseRcptLine2.VALIDATE("Qty. Outstanding","Qty. Outstanding" - "Qty. to Receive");
            WhseRcptLine2."Qty. to Cross-Dock" := 0;
            WhseRcptLine2."Qty. to Cross-Dock (Base)" := 0;
            WhseRcptLine2.Status := WhseRcptLine2.GetLineStatus;
            WhseRcptLine2.MODIFY;
            OnAfterPostUpdateWhseRcptLine(WhseRcptLine2); <=====================
          END;
        UNTIL NEXT = 0;
        DELETEALL;
      END;
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterPostWhseJnlLine>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<CreatePostedRcptLine>
    Code lines:
    ...
      "Whse Receipt Line No." := WhseRcptLine."Line No.";
      INSERT;
    END;
    
    PostWhseJnlLine(PostedWhseRcptHeader,PostedWhseRcptLine,TempHandlingSpecification);
    OnAfterPostWhseJnlLine(WhseRcptLine); <=====================
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterRun>
  Raised in: Codeunit<Whse.-Post Receipt>.<OnRun>
    Code lines:
    ...
    
    WhseRcptLine.COPY(Rec);
    Code;
    Rec := WhseRcptLine;
    
    OnAfterRun(Rec); <=====================
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforePostUpdateWhseRcptLine>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<PostUpdateWhseDocuments>
    Code lines:
    WITH WhseRcptLineBuf DO
      IF FIND('-') THEN BEGIN
        REPEAT
          WhseRcptLine2.GET("No.","Line No.");
          OnBeforePostUpdateWhseRcptLine(WhseRcptLine2); <=====================
          IF "Qty. Outstanding" = "Qty. to Receive" THEN
            WhseRcptLine2.DELETE
          ELSE BEGIN
            WhseRcptLine2.VALIDATE("Qty. Received","Qty. Received" + "Qty. to Receive");
            WhseRcptLine2.VALIDATE("Qty. Outstanding","Qty. Outstanding" - "Qty. to Receive");
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforeRun>
  Raised in: Codeunit<Whse.-Post Receipt>.<OnRun>
    Code lines:
    OnBeforeRun(Rec); <=====================
    
    WhseRcptLine.COPY(Rec);
    Code;
    Rec := WhseRcptLine;
    
    OnAfterRun(Rec);
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterCheckWhseShptLine>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<Code>
    Code lines:
    ...
            TESTFIELD("Bin Code");
          IF NOT "Assemble to Order" THEN
            IF NOT FullATOPosted THEN
              ERROR(FullATONotPostedErr,"No.","Line No.");
    
          OnAfterCheckWhseShptLine(WhseShptLine); <=====================
        UNTIL NEXT = 0
      ELSE
        ERROR(Text001);
    
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterPostUpdateWhseShptLine>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<PostUpdateWhseDocuments>
    Code lines:
    ...
            WhseShptLine2.VALIDATE("Qty. Outstanding","Qty. Outstanding" - "Qty. to Ship");
            WhseShptLine2."Qty. Shipped (Base)" := "Qty. Shipped (Base)" + "Qty. to Ship (Base)";
            WhseShptLine2."Qty. Outstanding (Base)" := "Qty. Outstanding (Base)" - "Qty. to Ship (Base)";
            WhseShptLine2.Status := WhseShptLine2.CalcStatusShptLine;
            WhseShptLine2.MODIFY;
            OnAfterPostUpdateWhseShptLine(WhseShptLine2); <=====================
          END;
        UNTIL NEXT = 0;
        DELETEALL;
      END;
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterPostWhseJnlLine>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<CreatePostedShptLine>
    Code lines:
    ...
      "Whse Shipment Line No." := WhseShptLine."Line No.";
      INSERT;
    END;
    
    PostWhseJnlLine(PostedWhseShptLine,TempHandlingSpecification);
    OnAfterPostWhseJnlLine(WhseShptLine); <=====================
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterRun>
  Raised in: Codeunit<Whse.-Post Shipment>.<OnRun>
    Code lines:
    ...
    
    WhseShptLine.COPY(Rec);
    Code;
    Rec := WhseShptLine;
    
    OnAfterRun(Rec); <=====================
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforePostUpdateWhseShptLine>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<PostUpdateWhseDocuments>
    Code lines:
    ...
            ItemTrackingMgt.SetDeleteReservationEntries(TRUE);
            ItemTrackingMgt.DeleteWhseItemTrkgLines(
              DATABASE::"Warehouse Shipment Line",0,"No.",'',0,"Line No.","Location Code",TRUE);
            WhseShptLine2.DELETE;
          END ELSE BEGIN
            OnBeforePostUpdateWhseShptLine(WhseShptLine2); <=====================
            WhseShptLine2."Qty. Shipped" := "Qty. Shipped" + "Qty. to Ship";
            WhseShptLine2.VALIDATE("Qty. Outstanding","Qty. Outstanding" - "Qty. to Ship");
            WhseShptLine2."Qty. Shipped (Base)" := "Qty. Shipped (Base)" + "Qty. to Ship (Base)";
            WhseShptLine2."Qty. Outstanding (Base)" := "Qty. Outstanding (Base)" - "Qty. to Ship (Base)";
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforeRun>
  Raised in: Codeunit<Whse.-Post Shipment>.<OnRun>
    Code lines:
    OnBeforeRun(Rec); <=====================
    
    WhseShptLine.COPY(Rec);
    Code;
    Rec := WhseShptLine;
    
    OnAfterRun(Rec);
Codeunit<Whse.-Post Shipment (Yes/No)>.PROCEDURE<OnBeforeConfirmWhseShipmentPost>
  Raised in: Codeunit<Whse.-Post Shipment (Yes/No)>.PROCEDURE<Code>
    Code lines:
    OnBeforeConfirmWhseShipmentPost(WhseShptLine,HideDialog,Invoice); <=====================
    WITH WhseShptLine DO BEGIN
      IF NOT HideDialog THEN
        IF FIND THEN BEGIN
          Selection := STRMENU(ShipInvoiceQst,1);
          IF Selection = 0 THEN
            EXIT;
          Invoice := (Selection = 2);
        END;
    
    ...
Codeunit<Whse.-Service Release>.PROCEDURE<OnBeforeCreateWhseRequest>
  Raised in: Codeunit<Whse.-Service Release>.PROCEDURE<CreateWhseRqst>
    Code lines:
    ...
        "External Document No." := '';
        "Shipment Date" := ServiceLine.GetShipmentDate;
        "Shipment Method Code" := ServiceHeader."Shipment Method Code";
        "Shipping Agent Code" := ServiceHeader."Shipping Agent Code";
        "Completely Handled" := CalcCompletelyShipped(ServiceLine);
        OnBeforeCreateWhseRequest(WhseRqst,ServiceHeader,ServiceLine); <=====================
        IF NOT INSERT THEN
          MODIFY;
      END;
    END;
Codeunit<Whse.-Sales Release>.PROCEDURE<OnBeforeCreateWhseRequest>
  Raised in: Codeunit<Whse.-Sales Release>.PROCEDURE<CreateWhseRqst>
    Code lines:
    ...
      ELSE
        WhseRqst."Shipment Date" := SalesHeader."Shipment Date";
      SalesHeader.SETRANGE("Location Filter",SalesLine."Location Code");
      SalesHeader.CALCFIELDS("Completely Shipped");
      WhseRqst."Completely Handled" := SalesHeader."Completely Shipped";
      OnBeforeCreateWhseRequest(WhseRqst,SalesHeader,SalesLine); <=====================
      IF NOT WhseRqst.INSERT THEN
        WhseRqst.MODIFY;
    END;
Codeunit<Whse.-Purch. Release>.PROCEDURE<OnBeforeCreateWhseRequest>
  Raised in: Codeunit<Whse.-Purch. Release>.PROCEDURE<CreateWhseRqst>
    Code lines:
    ...
      ELSE
        WhseRqst."Shipment Date" := PurchHeader."Expected Receipt Date";
      PurchHeader.SETRANGE("Location Filter",PurchLine."Location Code");
      PurchHeader.CALCFIELDS("Completely Received");
      WhseRqst."Completely Handled" := PurchHeader."Completely Received";
      OnBeforeCreateWhseRequest(WhseRqst,PurchHeader,PurchLine); <=====================
      IF NOT WhseRqst.INSERT THEN
        WhseRqst.MODIFY;
    END;
Codeunit<Whse.-Transfer Release>.PROCEDURE<OnBeforeCreateWhseRequest>
  Raised in: Codeunit<Whse.-Transfer Release>.PROCEDURE<CreateInboundWhseRequest>
    Code lines:
    ...
      "Location Code" := TransferHeader."Transfer-to Code";
      "Completely Handled" := TransferHeader."Completely Received";
      "Shipment Method Code" := TransferHeader."Shipment Method Code";
      "Shipping Agent Code" := TransferHeader."Shipping Agent Code";
      "Destination No." := TransferHeader."Transfer-to Code";
      OnBeforeCreateWhseRequest(WarehouseRequest,TransferHeader); <=====================
      IF CalledFromTransferOrder THEN BEGIN
        IF MODIFY THEN;
      END ELSE
        IF NOT INSERT THEN
    ...
  Raised in: Codeunit<Whse.-Transfer Release>.PROCEDURE<CreateOutboundWhseRequest>
    Code lines:
    ...
      "Shipment Method Code" := TransferHeader."Shipment Method Code";
      "Shipping Agent Code" := TransferHeader."Shipping Agent Code";
      "Shipping Advice" := TransferHeader."Shipping Advice";
      "Shipment Date" := TransferHeader."Shipment Date";
      "Destination No." := TransferHeader."Transfer-from Code";
      OnBeforeCreateWhseRequest(WarehouseRequest,TransferHeader); <=====================
      IF NOT INSERT THEN
        MODIFY;
    END;
Codeunit<Whse.-Production Release>.PROCEDURE<OnBeforeCreateWhsePickRequest>
  Raised in: Codeunit<Whse.-Production Release>.PROCEDURE<CreateWhseRqst>
    Code lines:
    ...
        WhsePickRqst."Completely Picked" :=
          ProdOrderCompletelyPicked(
            ProdOrderComp."Location Code",ProdOrder."No.",ProdOrder.Status,ProdOrderComp."Line No.");
        IF WhsePickRqst."Completely Picked" AND (NOT ProdOrderComp."Completely Picked") THEN
          WhsePickRqst."Completely Picked" := FALSE;
        OnBeforeCreateWhsePickRequest(WhsePickRqst,ProdOrderComp,ProdOrder); <=====================
        IF NOT WhsePickRqst.INSERT THEN
          WhsePickRqst.MODIFY;
      END
    END ELSE BEGIN
    ...
Codeunit<Whse.-Production Release>.PROCEDURE<OnBeforeCreateWhseRequest>
  Raised in: Codeunit<Whse.-Production Release>.PROCEDURE<CreateWhseRqst>
    Code lines:
    ...
          WhseRqst."Destination Type" := WhseRqst."Destination Type"::"Sales Order";
      END;
      WhseRqst."Destination No." := ProdOrder."Source No.";
      WhseRqst."Completely Handled" :=
        ProdOrderCompletelyHandled(ProdOrder,ProdOrderComp."Location Code");
      OnBeforeCreateWhseRequest(WhseRqst,ProdOrderComp,ProdOrder); <=====================
      IF NOT WhseRqst.INSERT THEN
        WhseRqst.MODIFY;
    END;
Codeunit<Available to Promise>.PROCEDURE<OnAfterCalculateAvailability>
  Raised in: Codeunit<Available to Promise>.PROCEDURE<CalculateAvailability>
    Code lines:
    ...
    UpdateJobOrderAvail(AvailabilityAtDate,Item);
    UpdateTransOrderShptAvail(AvailabilityAtDate,Item);
    UpdateAsmOrderAvail(AvailabilityAtDate,Item);
    UpdateAsmCompAvail(AvailabilityAtDate,Item);
    
    OnAfterCalculateAvailability(AvailabilityAtDate,Item); <=====================
    
    Item.COPYFILTERS(Item2);
Codeunit<Available to Promise>.PROCEDURE<OnBeforeCalcAvailableInventory>
  Raised in: Codeunit<Available to Promise>.PROCEDURE<QtyAvailabletoPromise>
    Code lines:
    ...
        CalculateLookahead(
          Item,PeriodType,
          AvailabilityDate + 1,
          AdjustedEndingDate(CALCDATE(LookaheadDateFormula,AvailabilityDate),PeriodType));
    
    OnBeforeCalcAvailableInventory(Item); <=====================
    
    EXIT(
      CalcAvailableInventory(Item) +
      (ScheduledReceipt - CalcReservedReceipt(Item)) -
Codeunit<Available to Promise>.PROCEDURE<OnBeforeExitCalcGrossRequirement>
  Raised in: Codeunit<Available to Promise>.PROCEDURE<CalcGrossRequirement>
    Code lines:
    ...
        "Qty. on Job Order",
        "Trans. Ord. Shipment (Qty.)",
        "Qty. on Asm. Component",
        "Qty. on Purch. Return");
    
      OnBeforeExitCalcGrossRequirement(Item); <=====================
    
      EXIT(
        "Scheduled Need (Qty.)" +
        "Planning Issues (Qty.)" +
    ...
Codeunit<Available to Promise>.PROCEDURE<OnBeforeExitCalcScheduledReceipt>
  Raised in: Codeunit<Available to Promise>.PROCEDURE<CalcScheduledReceipt>
    Code lines:
    ...
        "Trans. Ord. Receipt (Qty.)",
        "Qty. in Transit",
        "Qty. on Assembly Order",
        "Qty. on Sales Return");
    
      OnBeforeExitCalcScheduledReceipt(Item); <=====================
    
      EXIT(
        "Scheduled Receipt (Qty.)" +
        "Planned Order Receipt (Qty.)" +
    ...
Codeunit<Available to Promise>.PROCEDURE<OnCalcAvailableInventory>
  Raised in: Codeunit<Available to Promise>.PROCEDURE<CalcAvailableInventory>
    Code lines:
    Item.CALCFIELDS(Inventory,"Reserved Qty. on Inventory");
    AvailableInventory := Item.Inventory - Item."Reserved Qty. on Inventory";
    OnCalcAvailableInventory(Item,AvailableInventory); <=====================
    EXIT(AvailableInventory);
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnAfterCalcCostToPostFromBuffer>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<BufferInvtPosting>
    Code lines:
    ...
        CalcCostToPost(ExpCostToPost,"Cost Amount (Expected)","Expected Cost Posted to G/L",PostToGL);
        CalcCostToPost(ExpCostToPostACY,"Cost Amount (Expected) (ACY)","Exp. Cost Posted to G/L (ACY)",PostToGL);
      END;
      CalcCostToPost(CostToPost,"Cost Amount (Actual)","Cost Posted to G/L",PostToGL);
      CalcCostToPost(CostToPostACY,"Cost Amount (Actual) (ACY)","Cost Posted to G/L (ACY)",PostToGL);
      OnAfterCalcCostToPostFromBuffer(ValueEntry,CostToPost,CostToPostACY,ExpCostToPost,ExpCostToPostACY); <=====================
      PostBufDimNo := 0;
    
      RunOnlyCheckSaved := RunOnlyCheck;
      IF NOT PostToGL THEN
    ...
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnAfterSetAccNo>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<SetAccNo>
    Code lines:
    ...
            GLAccount.TESTFIELD(Blocked,FALSE);
          IF NOT CalledFromTestReport THEN
            "Account No." := '';
        END;
      END;
      OnAfterSetAccNo(InvtPostBuf,ValueEntry); <=====================
    END;
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforePostInvtPostBuf>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<PostInvtPostBuf>
    Code lines:
    ...
            GenJnlLine."Shortcut Dimension 2 Code");
          IF NOT CalledFromTestReport THEN
            IF NOT RunOnlyCheck THEN BEGIN
              IF NOT CalledFromItemPosting THEN
                GenJnlPostLine.SetOverDimErr;
              OnBeforePostInvtPostBuf(GenJnlLine,GlobalInvtPostBuf,ValueEntry); <=====================
              GenJnlPostLine.RunWithCheck(GenJnlLine)
            END ELSE
              GenJnlCheckLine.RunCheck(GenJnlLine)
          ELSE
    ...
Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnAfterCreateDocChargeAssgnt>
  Raised in: Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<CreateDocChargeAssgnt>
    Code lines:
    ...
          END;
        UNTIL FromPurchLine.NEXT = 0;
      END;
    END;
    
    OnAfterCreateDocChargeAssgnt(LastItemChargeAssgntPurch,ReceiptNo); <=====================
Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnAfterPurchRcptLineModify>
  Raised in: Codeunit<Undo Purchase Receipt Line>.PROCEDURE<Code>
    Code lines:
    ...
        "Qty. Invoiced (Base)" := "Quantity (Base)";
        "Qty. Rcd. Not Invoiced" := 0;
        Correction := TRUE;
    
        MODIFY;
        OnAfterPurchRcptLineModify(PurchRcptLine); <=====================
    
        IF NOT JobItem THEN
          JobItem := (Type = Type::Item) AND ("Job No." <> '');
      UNTIL NEXT = 0;
    ...
Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnAfterUpdateOrderLine>
  Raised in: Codeunit<Undo Purchase Receipt Line>.PROCEDURE<UpdateOrderLine>
    Code lines:
    WITH PurchRcptLine DO BEGIN
      PurchLine.GET(PurchLine."Document Type"::Order,"Order No.","Order Line No.");
      UndoPostingMgt.UpdatePurchLine(PurchLine,Quantity,"Quantity (Base)",TempGlobalItemLedgEntry);
      OnAfterUpdateOrderLine(PurchRcptLine,PurchLine); <=====================
    END;
Codeunit<Undo Return Shipment Line>.PROCEDURE<OnAfterReturnShptLineModify>
  Raised in: Codeunit<Undo Return Shipment Line>.PROCEDURE<Code>
    Code lines:
    ...
        "Qty. Invoiced (Base)" := "Quantity (Base)";
        "Return Qty. Shipped Not Invd." := 0;
        Correction := TRUE;
    
        MODIFY;
        OnAfterReturnShptLineModify(ReturnShptLine); <=====================
    
        IF NOT JobItem THEN
          JobItem := (Type = Type::Item) AND ("Job No." <> '');
      UNTIL NEXT = 0;
    ...
Codeunit<Undo Return Shipment Line>.PROCEDURE<OnAfterUpdatePurchLine>
  Raised in: Codeunit<Undo Return Shipment Line>.PROCEDURE<UpdateOrderLine>
    Code lines:
    WITH ReturnShptLine DO BEGIN
      PurchLine.GET(PurchLine."Document Type"::"Return Order","Return Order No.","Return Order Line No.");
      UndoPostingMgt.UpdatePurchLine(PurchLine,Quantity,"Quantity (Base)",TempGlobalItemLedgEntry);
      OnAfterUpdatePurchLine(PurchLine); <=====================
    END;
Codeunit<Undo Return Shipment Line>.PROCEDURE<OnBeforeCheckReturnShptLine>
  Raised in: Codeunit<Undo Return Shipment Line>.PROCEDURE<CheckReturnShptLine>
    Code lines:
    OnBeforeCheckReturnShptLine(ReturnShptLine); <=====================
    
    WITH ReturnShptLine DO BEGIN
      TESTFIELD(Type,Type::Item);
      IF "Return Qty. Shipped Not Invd." <> Quantity THEN
        ERROR(Text004);
      TESTFIELD("Prod. Order No.",'');
    
      UndoPostingMgt.TestReturnShptLine(ReturnShptLine);
      UndoPostingMgt.CollectItemLedgEntries(TempItemLedgEntry,DATABASE::"Return Shipment Line",
    ...
Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnAfterSalesShptLineModify>
  Raised in: Codeunit<Undo Sales Shipment Line>.PROCEDURE<Code>
    Code lines:
    ...
        "Quantity Invoiced" := Quantity;
        "Qty. Invoiced (Base)" := "Quantity (Base)";
        "Qty. Shipped Not Invoiced" := 0;
        Correction := TRUE;
        MODIFY;
        OnAfterSalesShptLineModify(SalesShptLine); <=====================
    
        UndoFinalizePostATO(SalesShptLine);
      UNTIL NEXT = 0;
    
    ...
Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnAfterUpdateSalesLine>
  Raised in: Codeunit<Undo Sales Shipment Line>.PROCEDURE<UpdateOrderLine>
    Code lines:
    WITH SalesShptLine DO BEGIN
      SalesLine.GET(SalesLine."Document Type"::Order,"Order No.","Order Line No.");
      UndoPostingMgt.UpdateSalesLine(SalesLine,Quantity,"Quantity (Base)",TempGlobalItemLedgEntry);
      OnAfterUpdateSalesLine(SalesLine,SalesShptLine); <=====================
    END;
Codeunit<Undo Return Receipt Line>.PROCEDURE<OnAfterReturnRcptLineModify>
  Raised in: Codeunit<Undo Return Receipt Line>.PROCEDURE<Code>
    Code lines:
    ...
        "Qty. Invoiced (Base)" := "Quantity (Base)";
        "Return Qty. Rcd. Not Invd." := 0;
        Correction := TRUE;
    
        MODIFY;
        OnAfterReturnRcptLineModify(ReturnRcptLine); <=====================
      UNTIL NEXT = 0;
    
      InvtSetup.GET;
      IF InvtSetup."Automatic Cost Adjustment" <>
    ...
Codeunit<Undo Return Receipt Line>.PROCEDURE<OnAfterUpdateSalesLine>
  Raised in: Codeunit<Undo Return Receipt Line>.PROCEDURE<UpdateOrderLine>
    Code lines:
    WITH ReturnRcptLine DO BEGIN
      SalesLine.GET(SalesLine."Document Type"::"Return Order","Return Order No.","Return Order Line No.");
      UndoPostingMgt.UpdateSalesLine(SalesLine,Quantity,"Quantity (Base)",TempGlobalItemLedgEntry);
      OnAfterUpdateSalesLine(ReturnRcptLine,SalesLine); <=====================
    END;
Codeunit<Undo Posting Management>.PROCEDURE<OnAfterUpdatePurchline>
  Raised in: Codeunit<Undo Posting Management>.PROCEDURE<UpdatePurchLine>
    Code lines:
    ...
      MODIFY;
      RevertPostedItemTracking(TempUndoneItemLedgEntry,"Expected Receipt Date");
      xPurchLine."Quantity (Base)" := 0;
      ReservePurchLine.VerifyQuantity(PurchLine,xPurchLine);
    
      OnAfterUpdatePurchline(PurchLine); <=====================
    END;
Codeunit<Undo Posting Management>.PROCEDURE<OnAfterUpdateSalesLine>
  Raised in: Codeunit<Undo Posting Management>.PROCEDURE<UpdateSalesLine>
    Code lines:
    ...
      MODIFY;
      RevertPostedItemTracking(TempUndoneItemLedgEntry,"Shipment Date");
      xSalesLine."Quantity (Base)" := 0;
      ReserveSalesLine.VerifyQuantity(SalesLine,xSalesLine);
    
      OnAfterUpdateSalesLine(SalesLine); <=====================
    END;
Codeunit<Undo Posting Management>.PROCEDURE<OnAfterUpdateServLine>
  Raised in: Codeunit<Undo Posting Management>.PROCEDURE<UpdateServLine>
    Code lines:
    ...
      MODIFY;
      RevertPostedItemTracking(TempUndoneItemLedgEntry,"Posting Date");
      xServLine."Quantity (Base)" := 0;
      ReserveServLine.VerifyQuantity(ServLine,xServLine);
    
      OnAfterUpdateServLine(ServLine); <=====================
    END;
Codeunit<ServLogManagement>.PROCEDURE<OnBeforeServItemEventDescription>
  Raised in: Codeunit<ServLogManagement>.PROCEDURE<ServItemEventDescription>
    Code lines:
    OnBeforeServItemEventDescription(EventNo); <=====================
    
    CASE EventNo OF
      1:
        EXIT(Text015);
      2:
        EXIT(Text016);
      3:
        EXIT(Text017);
      4:
    ...
Codeunit<ServLogManagement>.PROCEDURE<OnServItemEventDescription>
  Raised in: Codeunit<ServLogManagement>.PROCEDURE<ServItemEventDescription>
    Code lines:
    ...
      17:
        EXIT(Text031);
      18:
        EXIT(Text032);
      ELSE BEGIN
        OnServItemEventDescription(EventNo,Description,Handled); <=====================
        IF Handled THEN
          EXIT(Description);
        EXIT(UnknownEventTxt);
      END;
Codeunit<ServLogManagement>.PROCEDURE<OnServOrderEventDescription>
  Raised in: Codeunit<ServLogManagement>.PROCEDURE<ServOrderEventDescription>
    Code lines:
    ...
      23:
        EXIT(Text039);
      24:
        EXIT(Text040);
      ELSE BEGIN
        OnServOrderEventDescription(EventNo,Description,Handled); <=====================
        IF Handled THEN
          EXIT(Description);
        EXIT(UnknownEventTxt);
      END;
Codeunit<ServItemManagement>.PROCEDURE<OnBeforeReplaceSIComponent>
  Raised in: Codeunit<ServItemManagement>.PROCEDURE<AddOrReplaceSIComponent>
    Code lines:
    IF (ServLine.Type <> ServLine.Type::Item) OR (ServLine."Qty. to Ship" = 0) THEN
      EXIT;
    
    OnBeforeReplaceSIComponent(ServLine,ServHeader,ServShptDocNo,ServShptLineNo,TempTrackingSpecification); <=====================
    
    WITH ServLine DO
      CASE "Spare Part Action" OF
        "Spare Part Action"::"Component Replaced":
          BEGIN
            CheckWholeNumber(ServLine);
    ...
Codeunit<ServItemManagement>.PROCEDURE<OnCreateServItemOnSalesLineShpt>
  Raised in: Codeunit<ServItemManagement>.PROCEDURE<CreateServItemOnSalesLineShpt>
    Code lines:
    ...
          ServItem."Warranty Ending Date (Labor)" :=
            CALCDATE(
              ServMgtSetup."Default Warranty Duration",
              SalesHeader."Posting Date");
    
          OnCreateServItemOnSalesLineShpt(ServItem,SalesHeader,SalesLine); <=====================
    
          ServItem.MODIFY;
          CLEAR(ServiceItemTEMP);
          ServiceItemTEMP := ServItem;
    ...
Codeunit<ServItemManagement>.PROCEDURE<OnCreateServItemOnServItemLine>
  Raised in: Codeunit<ServItemManagement>.PROCEDURE<CreateServItemOnServItemLine>
    Code lines:
    ...
      ServLogMgt.ServItemAutoCreated(ServItem);
      MESSAGE(Text001,ServItem."No.");
      "Service Item No." := ServItem."No.";
      "Contract No." := '';
    
      OnCreateServItemOnServItemLine(ServItem,ServItemLine); <=====================
    
      MODIFY;
      CreateDim(
        DATABASE::"Service Item","Service Item No.",
    ...
Codeunit<Service-Quote to Order>.PROCEDURE<OnAfterInsertServHeader>
  Raised in: Codeunit<Service-Quote to Order>.PROCEDURE<InsertServHeader>
    Code lines:
    ServiceHeaderOrder.INSERT(TRUE);
    ServiceHeaderOrder."Document Date" := ServiceHeaderQuote."Document Date";
    ServiceHeaderOrder."Location Code" := ServiceHeaderQuote."Location Code";
    ServiceHeaderOrder.MODIFY;
    
    OnAfterInsertServHeader(ServiceHeaderOrder,ServiceHeaderQuote); <=====================
Codeunit<Service-Quote to Order>.PROCEDURE<OnAfterInsertServiceLine>
  Raised in: Codeunit<Service-Quote to Order>.PROCEDURE<MakeOrder>
    Code lines:
    ...
          RepairStatus.RESET;
          RepairStatus.SETRANGE(Initial,TRUE);
          IF RepairStatus.FINDFIRST THEN
            ServItemLine2."Repair Status Code" := RepairStatus.Code;
          ServItemLine2.INSERT(TRUE);
          OnAfterInsertServiceLine(ServItemLine2,ServItemLine); <=====================
        UNTIL ServItemLine.NEXT = 0;
    
      UpdateResponseDateTime;
    
    ...
Codeunit<Service-Quote to Order>.PROCEDURE<OnBeforeRun>
  Raised in: Codeunit<Service-Quote to Order>.<OnRun>
    Code lines:
    OnBeforeRun(Rec); <=====================
    
    NewServHeader := Rec;
    
    ServMgtSetup.GET;
    
    NewServHeader."Document Type" := "Document Type"::Order;
    Customer.GET("Customer No.");
    Customer.CheckBlockedCustOnDocs(Customer,DocType::Quote,FALSE,FALSE);
    IF "Customer No." <> "Bill-to Customer No." THEN BEGIN
    ...
Codeunit<Lock-OpenServContract>.PROCEDURE<OnBeforeLockServContract>
  Raised in: Codeunit<Lock-OpenServContract>.PROCEDURE<LockServContract>
    Code lines:
    OnBeforeLockServContract(FromServContractHeader); <=====================
    
    ServContractHeader := FromServContractHeader;
    WITH ServContractHeader DO BEGIN
      IF "Change Status" = "Change Status"::Locked THEN
        EXIT;
      CALCFIELDS("Calcd. Annual Amount");
      TESTFIELD("Annual Amount","Calcd. Annual Amount");
      IF "Annual Amount" < 0 THEN
        ERROR(Text003);
    ...
Codeunit<SignServContractDoc>.PROCEDURE<OnBeforeSignContract>
  Raised in: Codeunit<SignServContractDoc>.PROCEDURE<SignContract>
    Code lines:
    OnBeforeSignContract(FromServContractHeader); <=====================
    
    IF NOT HideDialog THEN
      CLEARALL;
    
    IF NOT HideDialog THEN
      IF NOT CONFIRM(Text010,TRUE,FromServContractHeader."Contract No.") THEN
        EXIT;
    
    ServContractHeader.GET(FromServContractHeader."Contract Type",FromServContractHeader."Contract No.");
    ...
Codeunit<SignServContractDoc>.PROCEDURE<OnBeforeSignContractQuote>
  Raised in: Codeunit<SignServContractDoc>.PROCEDURE<SignContractQuote>
    Code lines:
    OnBeforeSignContractQuote(FromServContractHeader); <=====================
    
    IF NOT HideDialog THEN
      CLEARALL;
    CheckServContractQuote(FromServContractHeader);
    IF NOT HideDialog THEN
      IF NOT CONFIRM(Text011,TRUE) THEN
        EXIT;
    IF NOT HideDialog THEN
      IF NOT CheckServContractNextPlannedServiceDate(FromServContractHeader) THEN
    ...
Codeunit<Service-Post>.PROCEDURE<OnBeforePostWithLines>
  Raised in: Codeunit<Service-Post>.PROCEDURE<PostWithLines>
    Code lines:
    OnBeforePostWithLines(PassedServHeader,PassedServLine,PassedShip,PassedConsume,PassedInvoice); <=====================
    
    ServiceHeader := PassedServHeader;
    
    CLEAR(ServDocumentsMgt);
    IF PostingDateExists AND (ReplacePostingDate OR (ServiceHeader."Posting Date" = 0D)) THEN BEGIN
      ServiceHeader.VALIDATE("Posting Date",PostingDate);
      ServiceHeader.VALIDATE("Currency Code");
    END;
    IF PostingDateExists AND (ReplaceDocumentDate OR (ServiceHeader."Document Date" = 0D)) THEN
    ...
Codeunit<Service-Post (Yes/No)>.PROCEDURE<OnBeforeConfirmServPost>
  Raised in: Codeunit<Service-Post (Yes/No)>.PROCEDURE<Code>
    Code lines:
    IF NOT PassedServiceHeader.FIND THEN
      ERROR(NothingToPostErr);
    
    OnBeforeConfirmServPost(PassedServiceHeader,HideDialog,Ship,Consume,Invoice); <=====================
    WITH PassedServiceHeader DO BEGIN
      IF NOT HideDialog THEN
        CASE "Document Type" OF
          "Document Type"::Order:
            BEGIN
              Selection := STRMENU(ShipInvoiceConsumeQst,3);
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeModifyServiceDocNoSeries>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<SetNoSeries>
    Code lines:
    ...
          "Posting No." := NoSeriesMgt.GetNextNo("Posting No. Series","Posting Date",TRUE);
          ModifyHeader := TRUE;
        END;
      END;
    
      OnBeforeModifyServiceDocNoSeries(ServHeader,PServHeader,ModifyHeader); <=====================
      MODIFY;
    
      IF ModifyHeader THEN BEGIN
        PServHeader."Shipping No." := "Shipping No.";
    ...
Codeunit<Sales-Calc. Discount>.PROCEDURE<OnAfterCalcSalesDiscount>
  Raised in: Codeunit<Sales-Calc. Discount>.PROCEDURE<CalculateInvoiceDiscount>
    Code lines:
    ...
        UpdatePrepmtLineAmount(SalesHeader);
      END;
    END;
    
    SalesCalcDiscountByType.ResetRecalculateInvoiceDisc(SalesHeader);
    OnAfterCalcSalesDiscount(SalesHeader); <=====================
Codeunit<Sales-Calc. Discount>.PROCEDURE<OnBeforeCalcSalesDiscount>
  Raised in: Codeunit<Sales-Calc. Discount>.PROCEDURE<CalculateInvoiceDiscount>
    Code lines:
    SalesSetup.GET;
    IF UpdateHeader THEN
      SalesHeader.FIND; // To ensure we have the latest - otherwise update fails.
    OnBeforeCalcSalesDiscount(SalesHeader); <=====================
    
    WITH SalesLine DO BEGIN
      LOCKTABLE;
      SalesHeader.TESTFIELD("Customer Posting Group");
      CustPostingGr.GET(SalesHeader."Customer Posting Group");
    
    ...
Codeunit<Data Migration Facade>.PROCEDURE<OnApplySelectedData>
  Raised in: Codeunit<Data Migration Facade>.PROCEDURE<OnApplySelectedDataWizardSubscriber>
    Code lines:
    OnApplySelectedData(Sender,DataMigrationEntity,Handled); <=====================
Codeunit<Data Migration Facade>.PROCEDURE<OnDataImport>
  Raised in: Codeunit<Data Migration Facade>.PROCEDURE<OnDataImportWizardSubscriber>
    Code lines:
    OnDataImport(Sender,Handled); <=====================
Codeunit<Data Migration Facade>.PROCEDURE<OnEnableTogglingDataMigrationOverviewPage>
  Raised in: Codeunit<Data Migration Facade>.PROCEDURE<OnEnableTogglingDataMigrationOverviewPageWizardSubscriber>
    Code lines:
    OnEnableTogglingDataMigrationOverviewPage(Sender,EnableTogglingOverviewPage); <=====================
Codeunit<Data Migration Facade>.PROCEDURE<OnFillStagingTables>
  Raised in: Codeunit<Data Migration Mgt.>.<OnRun>
    Code lines:
    ...
    
    OnBeforeMigrationStarted(DataMigrationStatus,Retry);
    
    IF NOT Retry THEN BEGIN
      DataMigrationStatus.SETRANGE(Status,DataMigrationStatus.Status::Pending);
      DataMigrationFacade.OnFillStagingTables; <=====================
      // Close the transaction here otherwise the CODEUNIT.RUN cannot be invoked
      COMMIT;
    END ELSE
      DataMigrationStatus.SETRANGE(Status,DataMigrationStatus.Status::"Completed with Errors");
    ...
Codeunit<Data Migration Facade>.PROCEDURE<OnFindBatchForAccountTransactions>
  Raised in: Page<Data Migration Overview>.PROCEDURE<GoToGeneralJournalForAccounts>
    Code lines:
    DataMigrationFacade.OnFindBatchForAccountTransactions(Rec,GenJournalBatchName); <=====================
    IF GenJournalBatchName <> '' THEN BEGIN
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatchName);
      IF GenJournalLine.FINDFIRST THEN BEGIN
        GenJournalLine.SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
        GenJournalLine.SETRANGE("Account Type",GenJournalLine."Account Type"::"G/L Account");
        PAGE.RUN(PAGE::"General Journal",GenJournalLine);
        EXIT;
      END;
    END;
  Raised in: Codeunit<Data Migration Mgt.>.PROCEDURE<DestTableHasAnyTransactions>
    Code lines:
    ...
          ItemJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
          ItemJournalLine.SETFILTER("Item No.",'<>%1','');
          EXIT(ItemJournalLine.FINDFIRST);
        END;
      ELSE BEGIN
        DataMigrationFacade.OnFindBatchForAccountTransactions(DataMigrationStatus,JournalBatchName); <=====================
        IF JournalBatchName = '' THEN
          EXIT(FALSE);
        GenJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
        GenJournalLine.SETRANGE("Account Type",GenJournalLine."Account Type"::"G/L Account");
    ...
Codeunit<Data Migration Facade>.PROCEDURE<OnFindBatchForCustomerTransactions>
  Raised in: Page<Data Migration Overview>.PROCEDURE<GoToGeneralJournalForCustomers>
    Code lines:
    DataMigrationFacade.OnFindBatchForCustomerTransactions("Migration Type",GenJournalBatchName); <=====================
    IF GenJournalBatchName <> '' THEN BEGIN
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatchName);
      IF GenJournalLine.FINDFIRST THEN BEGIN
        GenJournalLine.SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
        GenJournalLine.SETRANGE("Account Type",GenJournalLine."Account Type"::Customer);
        PAGE.RUN(PAGE::"General Journal",GenJournalLine);
        EXIT;
      END;
    END;
  Raised in: Codeunit<Data Migration Mgt.>.PROCEDURE<DestTableHasAnyTransactions>
    Code lines:
    ...
          GenJournalLine.SETFILTER("Account No.",'<>%1','');
          EXIT(GenJournalLine.FINDFIRST);
        END;
      DATABASE::Customer:
        BEGIN
          DataMigrationFacade.OnFindBatchForCustomerTransactions(DataMigrationStatus."Migration Type",JournalBatchName); <=====================
          IF JournalBatchName = '' THEN
            EXIT(FALSE);
          GenJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
          GenJournalLine.SETRANGE("Account Type",GenJournalLine."Account Type"::Customer);
    ...
Codeunit<Data Migration Facade>.PROCEDURE<OnFindBatchForItemTransactions>
  Raised in: Page<Data Migration Overview>.PROCEDURE<GoToItemJournal>
    Code lines:
    DataMigrationFacade.OnFindBatchForItemTransactions("Migration Type",ItemJournalBatchName); <=====================
    IF ItemJournalBatchName <> '' THEN BEGIN
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalBatchName);
      IF ItemJournalLine.FINDFIRST THEN BEGIN
        ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalLine."Journal Template Name");
        PAGE.RUN(PAGE::"Item Journal",ItemJournalLine);
        EXIT;
      END;
    END;
    PAGE.RUN(PAGE::"Item Journal");
  Raised in: Codeunit<Data Migration Mgt.>.PROCEDURE<DestTableHasAnyTransactions>
    Code lines:
    ...
          GenJournalLine.SETFILTER("Account No.",'<>%1','');
          EXIT(GenJournalLine.FINDFIRST);
        END;
      DATABASE::Item:
        BEGIN
          DataMigrationFacade.OnFindBatchForItemTransactions(DataMigrationStatus."Migration Type",JournalBatchName); <=====================
          IF JournalBatchName = '' THEN
            EXIT(FALSE);
          ItemJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
          ItemJournalLine.SETFILTER("Item No.",'<>%1','');
    ...
Codeunit<Data Migration Facade>.PROCEDURE<OnFindBatchForVendorTransactions>
  Raised in: Page<Data Migration Overview>.PROCEDURE<GoToGeneralJournalForVendors>
    Code lines:
    DataMigrationFacade.OnFindBatchForVendorTransactions("Migration Type",GenJournalBatchName); <=====================
    IF GenJournalBatchName <> '' THEN BEGIN
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatchName);
      IF GenJournalLine.FINDFIRST THEN BEGIN
        GenJournalLine.SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
        GenJournalLine.SETRANGE("Account Type",GenJournalLine."Account Type"::Vendor);
        PAGE.RUN(PAGE::"General Journal",GenJournalLine);
        EXIT;
      END;
    END;
  Raised in: Codeunit<Data Migration Mgt.>.PROCEDURE<DestTableHasAnyTransactions>
    Code lines:
    CASE DataMigrationStatus."Destination Table ID" OF
      DATABASE::Vendor:
        BEGIN
          DataMigrationFacade.OnFindBatchForVendorTransactions(DataMigrationStatus."Migration Type",JournalBatchName); <=====================
          IF JournalBatchName = '' THEN
            EXIT(FALSE);
          GenJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
          GenJournalLine.SETRANGE("Account Type",GenJournalLine."Account Type"::Vendor);
          GenJournalLine.SETFILTER("Account No.",'<>%1','');
          EXIT(GenJournalLine.FINDFIRST);
    ...
Codeunit<Data Migration Facade>.PROCEDURE<OnGetInstructions>
  Raised in: Codeunit<Data Migration Facade>.PROCEDURE<OnRegisterGetInstructionsWizardSubscriber>
    Code lines:
    OnGetInstructions(Sender,Instructions,Handled); <=====================
Codeunit<Data Migration Facade>.PROCEDURE<OnGetMigrationHelpTopicUrl>
  Raised in: Page<Data Migration About>.Control<LearnMore>.<OnDrillDown>
    Code lines:
    DataMigrationStatus.SETFILTER(Status,'%1|%2',
      DataMigrationStatus.Status::"In Progress",
      DataMigrationStatus.Status::Pending);
    IF DataMigrationStatus.FINDFIRST THEN
      DataMigrationFacade.OnGetMigrationHelpTopicUrl(DataMigrationStatus."Migration Type",Url); <=====================
    IF Url = '' THEN
      HYPERLINK(GeneralHelpTopicUrlTxt)
    ELSE
      HYPERLINK(Url);
Codeunit<Data Migration Facade>.PROCEDURE<OnMigrationCompleted>
  Raised in: Codeunit<Data Migration Mgt.>.PROCEDURE<CheckIfMigrationIsCompleted>
    Code lines:
    ...
      '%1|%2|%3',
      DataMigrationStatus.Status::"In Progress",
      DataMigrationStatus.Status::Pending,
      DataMigrationStatus.Status::"Completed with Errors");
    IF DataMigrationStatus.ISEMPTY THEN
      DataMigrationFacade.OnMigrationCompleted(CurrentDataMigrationStatus); <=====================
Codeunit<Data Migration Facade>.PROCEDURE<OnRegisterDataMigrator>
  Raised in: Codeunit<Data Migration Facade>.PROCEDURE<OnRegisterDataMigratorWizardSubscriber>
    Code lines:
    OnRegisterDataMigrator(Sender); <=====================
Codeunit<Data Migration Facade>.PROCEDURE<OnSelectDataToApply>
  Raised in: Codeunit<Data Migration Facade>.PROCEDURE<OnSelectDataToApplyWizardSubscriber>
    Code lines:
    OnSelectDataToApply(Sender,DataMigrationEntity,Handled); <=====================
Codeunit<Data Migration Facade>.PROCEDURE<OnSelectRowFromDashboard>
  Raised in: Page<Data Migration Overview>.<Control>.<OnDrillDown>
    Code lines:
    DataMigrationFacade.OnSelectRowFromDashboard(Rec); <=====================
Codeunit<Data Migration Facade>.PROCEDURE<OnShowThatsItMessage>
  Raised in: Codeunit<Data Migration Facade>.PROCEDURE<OnShowThatsItMessageWizardSubscriber>
    Code lines:
    OnShowThatsItMessage(Sender,Message); <=====================
Codeunit<GL Acc. Data Migration Facade>.PROCEDURE<OnMigrateGlAccount>
  Raised in: Codeunit<GL Acc. Data Migration Facade>.<OnRun>
    Code lines:
    FINDSET;
    REPEAT
      OnMigrateGlAccount("Staging Table RecId To Process"); <=====================
      GLAccountIsSet := FALSE;
    UNTIL NEXT = 0;
Codeunit<Vendor Data Migration Facade>.PROCEDURE<OnMigrateVendor>
  Raised in: Codeunit<Vendor Data Migration Facade>.<OnRun>
    Code lines:
    FINDSET;
    ChartOfAccountsMigrated := DataMigrationStatusFacade.HasMigratedChartOfAccounts(Rec);
    REPEAT
      OnMigrateVendor("Staging Table RecId To Process"); <=====================
      OnMigrateVendorDimensions("Staging Table RecId To Process"); <=====================
    
      // migrate transactions for this vendor
      OnMigrateVendorPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated); <=====================
      OnMigrateVendorTransactions("Staging Table RecId To Process",ChartOfAccountsMigrated); <=====================
      GenJournalLineIsSet := FALSE;
    ...
Codeunit<Vendor Data Migration Facade>.PROCEDURE<OnMigrateVendorDimensions>
  Raised in: Codeunit<Vendor Data Migration Facade>.<OnRun>
    Code lines:
    FINDSET;
    ChartOfAccountsMigrated := DataMigrationStatusFacade.HasMigratedChartOfAccounts(Rec);
    REPEAT
      OnMigrateVendor("Staging Table RecId To Process");
      OnMigrateVendorDimensions("Staging Table RecId To Process"); <=====================
    
      // migrate transactions for this vendor
      OnMigrateVendorPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated);
      OnMigrateVendorTransactions("Staging Table RecId To Process",ChartOfAccountsMigrated);
      GenJournalLineIsSet := FALSE;
    ...
Codeunit<Vendor Data Migration Facade>.PROCEDURE<OnMigrateVendorPostingGroups>
  Raised in: Codeunit<Vendor Data Migration Facade>.<OnRun>
    Code lines:
    ...
    REPEAT
      OnMigrateVendor("Staging Table RecId To Process");
      OnMigrateVendorDimensions("Staging Table RecId To Process");
    
      // migrate transactions for this vendor
      OnMigrateVendorPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated); <=====================
      OnMigrateVendorTransactions("Staging Table RecId To Process",ChartOfAccountsMigrated);
      GenJournalLineIsSet := FALSE;
      VendorIsSet := FALSE;
    UNTIL NEXT = 0;
Codeunit<Vendor Data Migration Facade>.PROCEDURE<OnMigrateVendorTransactions>
  Raised in: Codeunit<Vendor Data Migration Facade>.<OnRun>
    Code lines:
    ...
      OnMigrateVendor("Staging Table RecId To Process");
      OnMigrateVendorDimensions("Staging Table RecId To Process");
    
      // migrate transactions for this vendor
      OnMigrateVendorPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated);
      OnMigrateVendorTransactions("Staging Table RecId To Process",ChartOfAccountsMigrated); <=====================
      GenJournalLineIsSet := FALSE;
      VendorIsSet := FALSE;
    UNTIL NEXT = 0;
Codeunit<Customer Data Migration Facade>.PROCEDURE<OnMigrateCustomer>
  Raised in: Codeunit<Customer Data Migration Facade>.<OnRun>
    Code lines:
    FINDSET;
    ChartOfAccountsMigrated := DataMigrationStatusFacade.HasMigratedChartOfAccounts(Rec);
    REPEAT
      OnMigrateCustomer("Staging Table RecId To Process"); <=====================
      OnMigrateCustomerDimensions("Staging Table RecId To Process"); <=====================
    
      // migrate transactions for this customer
      OnMigrateCustomerPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated); <=====================
      OnMigrateCustomerTransactions("Staging Table RecId To Process",ChartOfAccountsMigrated); <=====================
      GenJournalLineIsSet := FALSE;
    ...
Codeunit<Customer Data Migration Facade>.PROCEDURE<OnMigrateCustomerDimensions>
  Raised in: Codeunit<Customer Data Migration Facade>.<OnRun>
    Code lines:
    FINDSET;
    ChartOfAccountsMigrated := DataMigrationStatusFacade.HasMigratedChartOfAccounts(Rec);
    REPEAT
      OnMigrateCustomer("Staging Table RecId To Process");
      OnMigrateCustomerDimensions("Staging Table RecId To Process"); <=====================
    
      // migrate transactions for this customer
      OnMigrateCustomerPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated);
      OnMigrateCustomerTransactions("Staging Table RecId To Process",ChartOfAccountsMigrated);
      GenJournalLineIsSet := FALSE;
    ...
Codeunit<Customer Data Migration Facade>.PROCEDURE<OnMigrateCustomerPostingGroups>
  Raised in: Codeunit<Customer Data Migration Facade>.<OnRun>
    Code lines:
    ...
    REPEAT
      OnMigrateCustomer("Staging Table RecId To Process");
      OnMigrateCustomerDimensions("Staging Table RecId To Process");
    
      // migrate transactions for this customer
      OnMigrateCustomerPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated); <=====================
      OnMigrateCustomerTransactions("Staging Table RecId To Process",ChartOfAccountsMigrated);
      GenJournalLineIsSet := FALSE;
      CustomerIsSet := FALSE;
    UNTIL NEXT = 0;
Codeunit<Customer Data Migration Facade>.PROCEDURE<OnMigrateCustomerTransactions>
  Raised in: Codeunit<Customer Data Migration Facade>.<OnRun>
    Code lines:
    ...
      OnMigrateCustomer("Staging Table RecId To Process");
      OnMigrateCustomerDimensions("Staging Table RecId To Process");
    
      // migrate transactions for this customer
      OnMigrateCustomerPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated);
      OnMigrateCustomerTransactions("Staging Table RecId To Process",ChartOfAccountsMigrated); <=====================
      GenJournalLineIsSet := FALSE;
      CustomerIsSet := FALSE;
    UNTIL NEXT = 0;
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateCostingMethod>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    FINDSET;
    ChartOfAccountsMigrated := DataMigrationStatusFacade.HasMigratedChartOfAccounts(Rec);
    REPEAT
      OnMigrateItem("Staging Table RecId To Process");
      OnMigrateItemTrackingCode("Staging Table RecId To Process");
      OnMigrateCostingMethod("Staging Table RecId To Process"); // needs to be set after item tracking code because of onvalidate trigger check <=====================
      OnMigrateItemUnitOfMeasure("Staging Table RecId To Process");
      OnMigrateItemDiscountGroup("Staging Table RecId To Process");
      OnMigrateItemSalesLineDiscount("Staging Table RecId To Process");
      OnMigrateItemPrice("Staging Table RecId To Process");
    ...
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateInventoryTransactions>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    ...
      OnMigrateItemDimensions("Staging Table RecId To Process");
    
      // migrate transactions for this item as long as it is an inventory item
      IF GlobalItem.Type = GlobalItem.Type::Inventory THEN BEGIN
        OnMigrateItemPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated);
        OnMigrateInventoryTransactions("Staging Table RecId To Process",ChartOfAccountsMigrated); <=====================
        ItemJournalLineIsSet := FALSE;
      END;
      ItemIsSet := FALSE;
    UNTIL NEXT = 0;
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItem>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    FINDSET;
    ChartOfAccountsMigrated := DataMigrationStatusFacade.HasMigratedChartOfAccounts(Rec);
    REPEAT
      OnMigrateItem("Staging Table RecId To Process"); <=====================
      OnMigrateItemTrackingCode("Staging Table RecId To Process"); <=====================
      OnMigrateCostingMethod("Staging Table RecId To Process"); // needs to be set after item tracking code because of onvalidate trigger check
      OnMigrateItemUnitOfMeasure("Staging Table RecId To Process"); <=====================
      OnMigrateItemDiscountGroup("Staging Table RecId To Process"); <=====================
      OnMigrateItemSalesLineDiscount("Staging Table RecId To Process"); <=====================
      OnMigrateItemPrice("Staging Table RecId To Process"); <=====================
    ...
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemDimensions>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    ...
      OnMigrateItemUnitOfMeasure("Staging Table RecId To Process");
      OnMigrateItemDiscountGroup("Staging Table RecId To Process");
      OnMigrateItemSalesLineDiscount("Staging Table RecId To Process");
      OnMigrateItemPrice("Staging Table RecId To Process");
      OnMigrateItemTariffNo("Staging Table RecId To Process");
      OnMigrateItemDimensions("Staging Table RecId To Process"); <=====================
    
      // migrate transactions for this item as long as it is an inventory item
      IF GlobalItem.Type = GlobalItem.Type::Inventory THEN BEGIN
        OnMigrateItemPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated);
    ...
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemDiscountGroup>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    ...
    REPEAT
      OnMigrateItem("Staging Table RecId To Process");
      OnMigrateItemTrackingCode("Staging Table RecId To Process");
      OnMigrateCostingMethod("Staging Table RecId To Process"); // needs to be set after item tracking code because of onvalidate trigger check
      OnMigrateItemUnitOfMeasure("Staging Table RecId To Process");
      OnMigrateItemDiscountGroup("Staging Table RecId To Process"); <=====================
      OnMigrateItemSalesLineDiscount("Staging Table RecId To Process");
      OnMigrateItemPrice("Staging Table RecId To Process");
      OnMigrateItemTariffNo("Staging Table RecId To Process");
      OnMigrateItemDimensions("Staging Table RecId To Process");
    ...
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemPostingGroups>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    ...
      OnMigrateItemTariffNo("Staging Table RecId To Process");
      OnMigrateItemDimensions("Staging Table RecId To Process");
    
      // migrate transactions for this item as long as it is an inventory item
      IF GlobalItem.Type = GlobalItem.Type::Inventory THEN BEGIN
        OnMigrateItemPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated); <=====================
        OnMigrateInventoryTransactions("Staging Table RecId To Process",ChartOfAccountsMigrated);
        ItemJournalLineIsSet := FALSE;
      END;
      ItemIsSet := FALSE;
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemPrice>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    ...
      OnMigrateItemTrackingCode("Staging Table RecId To Process");
      OnMigrateCostingMethod("Staging Table RecId To Process"); // needs to be set after item tracking code because of onvalidate trigger check
      OnMigrateItemUnitOfMeasure("Staging Table RecId To Process");
      OnMigrateItemDiscountGroup("Staging Table RecId To Process");
      OnMigrateItemSalesLineDiscount("Staging Table RecId To Process");
      OnMigrateItemPrice("Staging Table RecId To Process"); <=====================
      OnMigrateItemTariffNo("Staging Table RecId To Process");
      OnMigrateItemDimensions("Staging Table RecId To Process");
    
      // migrate transactions for this item as long as it is an inventory item
    ...
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemSalesLineDiscount>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    ...
      OnMigrateItem("Staging Table RecId To Process");
      OnMigrateItemTrackingCode("Staging Table RecId To Process");
      OnMigrateCostingMethod("Staging Table RecId To Process"); // needs to be set after item tracking code because of onvalidate trigger check
      OnMigrateItemUnitOfMeasure("Staging Table RecId To Process");
      OnMigrateItemDiscountGroup("Staging Table RecId To Process");
      OnMigrateItemSalesLineDiscount("Staging Table RecId To Process"); <=====================
      OnMigrateItemPrice("Staging Table RecId To Process");
      OnMigrateItemTariffNo("Staging Table RecId To Process");
      OnMigrateItemDimensions("Staging Table RecId To Process");
    
    ...
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemTariffNo>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    ...
      OnMigrateCostingMethod("Staging Table RecId To Process"); // needs to be set after item tracking code because of onvalidate trigger check
      OnMigrateItemUnitOfMeasure("Staging Table RecId To Process");
      OnMigrateItemDiscountGroup("Staging Table RecId To Process");
      OnMigrateItemSalesLineDiscount("Staging Table RecId To Process");
      OnMigrateItemPrice("Staging Table RecId To Process");
      OnMigrateItemTariffNo("Staging Table RecId To Process"); <=====================
      OnMigrateItemDimensions("Staging Table RecId To Process");
    
      // migrate transactions for this item as long as it is an inventory item
      IF GlobalItem.Type = GlobalItem.Type::Inventory THEN BEGIN
    ...
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemTrackingCode>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    FINDSET;
    ChartOfAccountsMigrated := DataMigrationStatusFacade.HasMigratedChartOfAccounts(Rec);
    REPEAT
      OnMigrateItem("Staging Table RecId To Process");
      OnMigrateItemTrackingCode("Staging Table RecId To Process"); <=====================
      OnMigrateCostingMethod("Staging Table RecId To Process"); // needs to be set after item tracking code because of onvalidate trigger check
      OnMigrateItemUnitOfMeasure("Staging Table RecId To Process");
      OnMigrateItemDiscountGroup("Staging Table RecId To Process");
      OnMigrateItemSalesLineDiscount("Staging Table RecId To Process");
      OnMigrateItemPrice("Staging Table RecId To Process");
    ...
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemUnitOfMeasure>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    ...
    ChartOfAccountsMigrated := DataMigrationStatusFacade.HasMigratedChartOfAccounts(Rec);
    REPEAT
      OnMigrateItem("Staging Table RecId To Process");
      OnMigrateItemTrackingCode("Staging Table RecId To Process");
      OnMigrateCostingMethod("Staging Table RecId To Process"); // needs to be set after item tracking code because of onvalidate trigger check
      OnMigrateItemUnitOfMeasure("Staging Table RecId To Process"); <=====================
      OnMigrateItemDiscountGroup("Staging Table RecId To Process");
      OnMigrateItemSalesLineDiscount("Staging Table RecId To Process");
      OnMigrateItemPrice("Staging Table RecId To Process");
      OnMigrateItemTariffNo("Staging Table RecId To Process");
    ...
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireAcquireOnBehalfOfToken>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<AcquireOnBehalfOfToken>
    Code lines:
    CheckProvider;
    IF CanHandle THEN
      AccessToken := AuthFlow.ALAcquireOnBehalfOfToken(ResourceName)
    ELSE
      OnAcquireAcquireOnBehalfOfToken(ResourceName,AccessToken); <=====================
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireGuestToken>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<AcquireGuestToken>
    Code lines:
    CheckProvider;
    IF CanHandle THEN
      AccessToken := AuthFlow.ALAcquireGuestToken(ResourceName,GuestTenantId)
    ELSE
      OnAcquireGuestToken(ResourceName,GuestTenantId,AccessToken); <=====================
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireTokenByAuthorizationCode>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<AcquireTokenByAuthorizationCode>
    Code lines:
    CheckProvider;
    IF CanHandle THEN
      AccessToken := AuthFlow.ALAcquireTokenByAuthorizationCode(AuthorizationCode,ResourceName)
    ELSE
      OnAcquireTokenByAuthorizationCode(AuthorizationCode,ResourceName,AccessToken); <=====================
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireTokenByAuthorizationCodeWithCredentials>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<AcquireTokenByAuthorizationCodeWithCredentials>
    Code lines:
    CheckProvider;
    IF CanHandle THEN
      AccessToken := AuthFlow.ALAcquireTokenByAuthorizationCodeWithCredentials(AuthorizationCode,ClientID,ApplicationKey,ResourceName)
    ELSE
      OnAcquireTokenByAuthorizationCodeWithCredentials(AuthorizationCode,ClientID,ApplicationKey,ResourceName,AccessToken); <=====================
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireTokenFromCache>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<AcquireTokenFromCache>
    Code lines:
    CheckProvider;
    IF CanHandle THEN
      AccessToken := AuthFlow.ALAcquireTokenFromCache(ResourceName)
    ELSE
      OnAcquireTokenFromCache(ResourceName,AccessToken); <=====================
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireTokenFromCacheWithCredentials>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<AcquireTokenFromCacheWithCredentials>
    Code lines:
    CheckProvider;
    IF CanHandle THEN
      AccessToken := AuthFlow.ALAcquireTokenFromCacheWithCredentials(ClientID,AppKey,ResourceName)
    ELSE
      OnAcquireTokenFromCacheWithCredentials(ClientID,AppKey,ResourceName,AccessToken); <=====================
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnCheckProvider>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<CheckProvider>
    Code lines:
    IF CanHandle THEN
      Initialized := NOT ISNULL(AuthFlow)
    ELSE
      OnCheckProvider(Initialized); <=====================
    
    IF NOT Initialized THEN
      ERROR(ProviderNotInitializedErr);
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnCreateExchangeServiceWrapperWithToken>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<CreateExchangeServiceWrapperWithToken>
    Code lines:
    IF CanHandle THEN
      Service := ServiceFactory.CreateServiceWrapperWithToken(Token)
    ELSE
      OnCreateExchangeServiceWrapperWithToken(Token,Service); <=====================
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnGetSaasClientId>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<GetSaasClientId>
    Code lines:
    CheckProvider;
    IF CanHandle THEN
      ClientID := AuthFlow.ALGetSaasClientId
    ELSE
      OnGetSaasClientId(ClientID); <=====================
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnInitialize>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<Initialize>
    Code lines:
    IF CanHandle THEN
      AuthFlow := AuthFlow.ALAzureAdCodeGrantFlow(Uri.Uri(RedirectUri))
    ELSE
      OnInitialize(RedirectUri,AuthFlow); <=====================
Codeunit<Sales-Get Shipment>.PROCEDURE<OnRunAfterFilterSalesShpLine>
  Raised in: Codeunit<Sales-Get Shipment>.<OnRun>
    Code lines:
    ...
    SalesShptLine.SETRANGE("Bill-to Customer No.",SalesHeader."Bill-to Customer No.");
    SalesShptLine.SETRANGE("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
    SalesShptLine.SETFILTER("Qty. Shipped Not Invoiced",'<>0');
    SalesShptLine.SETRANGE("Currency Code",SalesHeader."Currency Code");
    SalesShptLine.SETRANGE("Authorized for Credit Card",FALSE);
    OnRunAfterFilterSalesShpLine(SalesShptLine,SalesHeader); <=====================
    
    GetShipments.SETTABLEVIEW(SalesShptLine);
    GetShipments.SetSalesHeader(SalesHeader);
    GetShipments.LOOKUPMODE := TRUE;
Codeunit<Item Tracking Management>.PROCEDURE<OnAfterReserveEntryFilter>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<RetrieveItemTrackingFromReservEntry>
    Code lines:
    ...
      EXIT(RetrieveSubcontrItemTracking(ItemJnlLine,TempTrackingSpec));
    
    ReservEntry.SetSourceFilter(
      DATABASE::"Item Journal Line",ItemJnlLine."Entry Type",ItemJnlLine."Journal Template Name",ItemJnlLine."Line No.",TRUE);
    ReservEntry.SetSourceFilter2(ItemJnlLine."Journal Batch Name",0);
    OnAfterReserveEntryFilter(ItemJnlLine,ReservEntry); <=====================
    ReservEntry.SETFILTER("Qty. to Handle (Base)",'<>0');
    
    IF SumUpItemTracking(ReservEntry,TempTrackingSpec,FALSE,TRUE) THEN BEGIN
      ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Prospect);
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnCopyItemLedgEntryTrkgToDocLine>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<InsertReservEntryForSalesLine>
    Code lines:
    ...
      ELSE
        "Reservation Status" := "Reservation Status"::Prospect;
      IF AppliedFromItemEntry THEN
        "Appl.-from Item Entry" := ItemLedgEntryBuf."Entry No.";
      Description := SalesLine.Description;
      OnCopyItemLedgEntryTrkgToDocLine(ItemLedgEntryBuf,ReservEntry); <=====================
      UpdateItemTracking;
      INSERT;
    END;
Codeunit<Item Tracking Data Collection>.PROCEDURE<OnAfterAssistEditTrackingNo>
  Raised in: Codeunit<Item Tracking Data Collection>.PROCEDURE<AssistEditTrackingNo>
    Code lines:
    ...
        IF ABS(NewQtyOnLine) > 1 THEN
          NewQtyOnLine := NewQtyOnLine / ABS(NewQtyOnLine); // Set to a signed value of 1.
    
      TempTrackingSpecification.VALIDATE("Quantity (Base)",NewQtyOnLine);
    
      OnAfterAssistEditTrackingNo(TempTrackingSpecification,TempGlobalEntrySummary); <=====================
    END;
Codeunit<Item Tracking Data Collection>.PROCEDURE<OnBeforeAssistEditTrackingNo>
  Raised in: Codeunit<Item Tracking Data Collection>.PROCEDURE<AssistEditTrackingNo>
    Code lines:
    OnBeforeAssistEditTrackingNo(TempTrackingSpecification,SearchForSupply,CurrentSignFactor,LookupMode,MaxQuantity); <=====================
    
    Window.OPEN(Text004);
    
    IF NOT FullGlobalDataSetExists THEN
      RetrieveLookupData(TempTrackingSpecification,TRUE);
    
    TempGlobalReservEntry.RESET;
    TempGlobalEntrySummary.RESET;
    
    ...
Codeunit<Purch - Calc Disc. By Type>.PROCEDURE<OnAfterResetRecalculateInvoiceDisc>
  Raised in: Codeunit<Purch - Calc Disc. By Type>.PROCEDURE<ResetRecalculateInvoiceDisc>
    Code lines:
    PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
    PurchLine.SETRANGE("Document No.",PurchHeader."No.");
    PurchLine.SETRANGE("Recalculate Invoice Disc.",TRUE);
    PurchLine.MODIFYALL("Recalculate Invoice Disc.",FALSE);
    
    OnAfterResetRecalculateInvoiceDisc(PurchHeader); <=====================
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchaseDocument>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchDoc>
    Code lines:
    ...
        MESSAGE(Text019);
      LinesNotCopied <> 0:
        MESSAGE(Text004);
    END;
    
    OnAfterCopyPurchaseDocument(FromDocType,FromDocNo,ToPurchHeader); <=====================
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesDocument>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDoc>
    Code lines:
    ...
        MESSAGE(Text019);
      LinesNotCopied <> 0:
        MESSAGE(Text004);
    END;
    
    OnAfterCopySalesDocument(FromDocType,FromDocNo,ToSalesHeader); <=====================
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesToPurchDoc>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyFromSalesToPurchDoc>
    Code lines:
    ...
        INSERT(TRUE);
        IF (FromSalesLine.Type <> FromSalesLine.Type::" ") AND (Type = Type::Item) AND (Quantity <> 0) THEN
          CopyItemTrackingEntries(
            FromSalesLine,ToPurchLine,FromSalesHeader."Prices Including VAT",
            ToPurchHeader."Prices Including VAT");
        OnAfterCopySalesToPurchDoc(ToPurchLine,FromSalesLine); <=====================
      UNTIL FromSalesLine.NEXT = 0;
    END;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInitToPurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchLine>
    Code lines:
    ...
    THEN
      EXIT(FALSE);
    
    IF RecalculateLines AND NOT FromPurchLine."System-Created Entry" THEN BEGIN
      ToPurchLine.INIT;
      OnAfterInitToPurchLine(ToPurchLine); <=====================
    END ELSE BEGIN
      ToPurchLine := FromPurchLine;
      ToPurchLine."Returns Deferral Start Date" := 0D;
      IF ToPurchHeader."Document Type" IN [ToPurchHeader."Document Type"::Quote,ToPurchHeader."Document Type"::"Blanket Order"] THEN
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInitToSalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesLine>
    Code lines:
    ...
    THEN
      EXIT(FALSE);
    ToSalesLine.SetSalesHeader(ToSalesHeader);
    IF RecalculateLines AND NOT FromSalesLine."System-Created Entry" THEN BEGIN
      ToSalesLine.INIT;
      OnAfterInitToSalesLine(ToSalesLine); <=====================
    END ELSE BEGIN
      ToSalesLine := FromSalesLine;
      ToSalesLine."Returns Deferral Start Date" := 0D;
      IF ToSalesHeader."Document Type" IN [ToSalesHeader."Document Type"::Quote,ToSalesHeader."Document Type"::"Blanket Order"] THEN
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInsertToPurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchLine>
    Code lines:
    ...
    END;
    
    IF CopyThisLine THEN BEGIN
      OnBeforeInsertToPurchLine(ToPurchLine,FromPurchLine,FromPurchDocType,RecalculateLines);
      ToPurchLine.INSERT;
      OnAfterInsertToPurchLine(ToPurchLine,FromPurchLine); <=====================
    END ELSE
      LinesNotCopied := LinesNotCopied + 1;
    EXIT(TRUE);
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInsertToSalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesLine>
    Code lines:
    ...
      OnBeforeInsertToSalesLine(ToSalesLine,FromSalesLine,FromSalesDocType,RecalculateLines);
      ToSalesLine.INSERT;
      HandleAsmAttachedToSalesLine(ToSalesLine);
      IF ToSalesLine.Reserve = ToSalesLine.Reserve::Always THEN
        ToSalesLine.AutoReserve;
      OnAfterInsertToSalesLine(ToSalesLine,FromSalesLine); <=====================
    END ELSE
      LinesNotCopied := LinesNotCopied + 1;
    EXIT(TRUE);
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterTransfldsFromSalesToPurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<TransfldsFromSalesToPurchLine>
    Code lines:
    ...
        VALIDATE(Quantity,FromSalesLine."Outstanding Quantity");
      VALIDATE("Return Reason Code",FromSalesLine."Return Reason Code");
      VALIDATE("Direct Unit Cost");
      Description := FromSalesLine.Description;
      "Description 2" := FromSalesLine."Description 2";
      OnAfterTransfldsFromSalesToPurchLine(FromSalesLine,ToPurchLine); <=====================
    END;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterUpdatePurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<UpdatePurchLine>
    Code lines:
    ...
    
      ToPurchLine.UpdateWithWarehouseReceive;
      ToPurchLine."Pay-to Vendor No." := ToPurchHeader."Pay-to Vendor No.";
    END;
    
    OnAfterUpdatePurchLine( <=====================
      ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLine,
      CopyThisLine,RecalculateAmount,FromPurchDocType,CopyPostedDeferral);
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterUpdateSalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<UpdateSalesLine>
    Code lines:
    ...
          ELSE
            ToSalesLine."Shipment Date" := WORKDATE;
      END;
    END;
    
    OnAfterUpdateSalesLine( <=====================
      ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLine,
      CopyThisLine,RecalculateAmount,FromSalesDocType,CopyPostedDeferral);
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchaseDocument>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchDoc>
    Code lines:
    ...
        IF FromDocNo = '' THEN
          ERROR(Text000);
        FIND;
      END;
    
      OnBeforeCopyPurchaseDocument(FromDocType,FromDocNo,ToPurchHeader); <=====================
    
      TransferOldExtLines.ClearLineNumbers;
    
      IF NOT InitAndCheckPurchaseDocuments(
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchLines>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<UpdatePurchLine>
    Code lines:
    ...
      ToPurchLine."Drop Shipment" := FALSE;
      ToPurchLine."Special Order" := FALSE;
      IF VATPostingSetup.GET(ToPurchLine."VAT Bus. Posting Group",ToPurchLine."VAT Prod. Posting Group") THEN
        ToPurchLine."VAT Identifier" := VATPostingSetup."VAT Identifier";
    
      OnBeforeCopyPurchLines(ToPurchLine); <=====================
    
      CopyDocLines(RecalculateAmount,ToPurchLine,FromPurchLine);
    
      ToPurchLine.UpdateWithWarehouseReceive;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesDocument>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDoc>
    Code lines:
    ...
        IF FromDocNo = '' THEN
          ERROR(Text000);
        FIND;
      END;
    
      OnBeforeCopySalesDocument(FromDocType,FromDocNo,ToSalesHeader); <=====================
    
      TransferOldExtLines.ClearLineNumbers;
    
      IF NOT InitAndCheckSalesDocuments(
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesToPurchDoc>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyFromSalesToPurchDoc>
    Code lines:
    ...
        "Line No." := NextLineNo;
        IF FromSalesLine.Type = FromSalesLine.Type::" " THEN
          Description := FromSalesLine.Description
        ELSE
          TransfldsFromSalesToPurchLine(FromSalesLine,ToPurchLine);
        OnBeforeCopySalesToPurchDoc(ToPurchLine,FromSalesLine); <=====================
        INSERT(TRUE);
        IF (FromSalesLine.Type <> FromSalesLine.Type::" ") AND (Type = Type::Item) AND (Quantity <> 0) THEN
          CopyItemTrackingEntries(
            FromSalesLine,ToPurchLine,FromSalesHeader."Prices Including VAT",
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertOldPurchCombDocNoLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<InsertOldPurchCombDocNoLine>
    Code lines:
    ...
          Text018,
          COPYSTR(SELECTSTR(3,Text017) + OldDocNo,1,23),
          COPYSTR(SELECTSTR(4,Text017) + OldDocNo2,1,23));
    LanguageManagement.RestoreGlobalLanguage;
    
    OnBeforeInsertOldPurchCombDocNoLine(ToPurchHeader,ToPurchLine2,CopyFromInvoice,OldDocNo,OldDocNo2); <=====================
    ToPurchLine2.INSERT;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertOldPurchDocNoLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<InsertOldPurchDocNoLine>
    Code lines:
    ...
      ToPurchLine2.Description := STRSUBSTNO(CrMemoCancellationMsg,OldDocNo)
    ELSE
      ToPurchLine2.Description := STRSUBSTNO(Text015,SELECTSTR(OldDocType,Text014),OldDocNo);
    LanguageManagement.RestoreGlobalLanguage;
    
    OnBeforeInsertOldPurchDocNoLine(ToPurchHeader,ToPurchLine2,OldDocType,OldDocNo); <=====================
    ToPurchLine2.INSERT;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertOldSalesCombDocNoLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<InsertOldSalesCombDocNoLine>
    Code lines:
    ...
          Text018,
          COPYSTR(SELECTSTR(3,Text016) + OldDocNo,1,23),
          COPYSTR(SELECTSTR(4,Text016) + OldDocNo2,1,23));
    LanguageManagement.RestoreGlobalLanguage;
    
    OnBeforeInsertOldSalesCombDocNoLine(ToSalesHeader,ToSalesLine2,CopyFromInvoice,OldDocNo,OldDocNo2); <=====================
    ToSalesLine2.INSERT;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertOldSalesDocNoLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<InsertOldSalesDocNoLine>
    Code lines:
    ...
      ToSalesLine2.Description := STRSUBSTNO(CrMemoCancellationMsg,OldDocNo)
    ELSE
      ToSalesLine2.Description := STRSUBSTNO(Text015,SELECTSTR(OldDocType,Text013),OldDocNo);
    LanguageManagement.RestoreGlobalLanguage;
    
    OnBeforeInsertOldSalesDocNoLine(ToSalesHeader,ToSalesLine2,OldDocType,OldDocNo); <=====================
    ToSalesLine2.INSERT;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertToPurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchLine>
    Code lines:
    ...
      ToPurchLine."Shortcut Dimension 1 Code" := FromPurchLine."Shortcut Dimension 1 Code";
      ToPurchLine."Shortcut Dimension 2 Code" := FromPurchLine."Shortcut Dimension 2 Code";
    END;
    
    IF CopyThisLine THEN BEGIN
      OnBeforeInsertToPurchLine(ToPurchLine,FromPurchLine,FromPurchDocType,RecalculateLines); <=====================
      ToPurchLine.INSERT;
      OnAfterInsertToPurchLine(ToPurchLine,FromPurchLine);
    END ELSE
      LinesNotCopied := LinesNotCopied + 1;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertToSalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesLine>
    Code lines:
    ...
      ToSalesLine."Shortcut Dimension 1 Code" := FromSalesLine."Shortcut Dimension 1 Code";
      ToSalesLine."Shortcut Dimension 2 Code" := FromSalesLine."Shortcut Dimension 2 Code";
    END;
    
    IF CopyThisLine THEN BEGIN
      OnBeforeInsertToSalesLine(ToSalesLine,FromSalesLine,FromSalesDocType,RecalculateLines); <=====================
      ToSalesLine.INSERT;
      HandleAsmAttachedToSalesLine(ToSalesLine);
      IF ToSalesLine.Reserve = ToSalesLine.Reserve::Always THEN
        ToSalesLine.AutoReserve;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeModifyPurchHeader>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchDoc>
    Code lines:
    ...
            "Payment Discount %" := 0;
            "Pmt. Discount Date" := 0D;
          END;
        END;
    
        OnBeforeModifyPurchHeader(ToPurchHeader,FromDocType,FromDocNo,IncludeHeader); <=====================
    
        IF CreateToHeader THEN BEGIN
          VALIDATE("Payment Terms Code");
          MODIFY(TRUE);
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeModifySalesHeader>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDoc>
    Code lines:
    ...
            "Payment Discount %" := 0;
            "Pmt. Discount Date" := 0D;
          END;
        END;
    
        OnBeforeModifySalesHeader(ToSalesHeader,FromDocType,FromDocNo,IncludeHeader); <=====================
    
        IF CreateToHeader THEN BEGIN
          VALIDATE("Payment Terms Code");
          MODIFY(TRUE);
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeUpdatePurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<UpdatePurchLine>
    Code lines:
    OnBeforeUpdatePurchLine( <=====================
      ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLine,
      CopyThisLine,RecalculateAmount,FromPurchDocType,CopyPostedDeferral);
    
    CopyPostedDeferral := FALSE;
    DeferralDocType := DeferralUtilities.GetPurchDeferralDocType;
    IF RecalculateLines AND NOT FromPurchLine."System-Created Entry" THEN BEGIN
      ToPurchLine.VALIDATE(Type,FromPurchLine.Type);
      ToPurchLine.Description := FromPurchLine.Description;
      ToPurchLine.VALIDATE("Description 2",FromPurchLine."Description 2");
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeUpdateSalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<UpdateSalesLine>
    Code lines:
    OnBeforeUpdateSalesLine( <=====================
      ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLine,
      CopyThisLine,RecalculateAmount,FromSalesDocType,CopyPostedDeferral);
    
    CopyPostedDeferral := FALSE;
    DeferralDocType := DeferralUtilities.GetSalesDeferralDocType;
    IF RecalculateLines AND NOT FromSalesLine."System-Created Entry" THEN BEGIN
      ToSalesLine.VALIDATE(Type,FromSalesLine.Type);
      ToSalesLine.Description := FromSalesLine.Description;
      ToSalesLine.VALIDATE("Description 2",FromSalesLine."Description 2");
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocWithHeader>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDoc>
    Code lines:
    ...
        IF CreateToHeader THEN BEGIN
          VALIDATE("Payment Terms Code");
          MODIFY(TRUE);
        END ELSE
          MODIFY;
        OnCopySalesDocWithHeader(FromDocType,FromDocNo,ToSalesHeader); <=====================
      END;
    
      LinesNotCopied := 0;
      CASE FromDocType OF
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnUpdatePurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<UpdatePurchLine>
    Code lines:
    ...
    DeferralDocType := DeferralUtilities.GetPurchDeferralDocType;
    IF RecalculateLines AND NOT FromPurchLine."System-Created Entry" THEN BEGIN
      ToPurchLine.VALIDATE(Type,FromPurchLine.Type);
      ToPurchLine.Description := FromPurchLine.Description;
      ToPurchLine.VALIDATE("Description 2",FromPurchLine."Description 2");
      OnUpdatePurchLine(ToPurchLine,FromPurchLine); <=====================
    
      IF (FromPurchLine.Type <> 0) AND (FromPurchLine."No." <> '') THEN BEGIN
        IF ToPurchLine.Type = ToPurchLine.Type::"G/L Account" THEN BEGIN
          ToPurchLine."No." := FromPurchLine."No.";
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnUpdateSalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<UpdateSalesLine>
    Code lines:
    ...
    DeferralDocType := DeferralUtilities.GetSalesDeferralDocType;
    IF RecalculateLines AND NOT FromSalesLine."System-Created Entry" THEN BEGIN
      ToSalesLine.VALIDATE(Type,FromSalesLine.Type);
      ToSalesLine.Description := FromSalesLine.Description;
      ToSalesLine.VALIDATE("Description 2",FromSalesLine."Description 2");
      OnUpdateSalesLine(ToSalesLine,FromSalesLine); <=====================
    
      IF (FromSalesLine.Type <> 0) AND (FromSalesLine."No." <> '') THEN BEGIN
        IF ToSalesLine.Type = ToSalesLine.Type::"G/L Account" THEN BEGIN
          ToSalesLine."No." := FromSalesLine."No.";
    ...
Codeunit<Booking Manager>.PROCEDURE<OnGetBookingMailboxes>
  Raised in: Codeunit<Booking Manager>.PROCEDURE<GetBookingMailboxes>
    Code lines:
    OnGetBookingMailboxes(TempBookingMailbox); <=====================
Codeunit<Booking Manager>.PROCEDURE<OnGetBookingServiceForBooking>
  Raised in: Codeunit<Booking Manager>.PROCEDURE<GetBookingServiceForBooking>
    Code lines:
    OnGetBookingServiceForBooking(TempBookingItem,TempBookingService); <=====================
Codeunit<Booking Manager>.PROCEDURE<OnRegisterAppointmentConnection>
  Raised in: Codeunit<Booking Manager>.PROCEDURE<RegisterAppointmentConnection>
    Code lines:
    OnRegisterAppointmentConnection; <=====================
Codeunit<Booking Manager>.PROCEDURE<OnSetBookingItemInvoiced>
  Raised in: Codeunit<Booking Manager>.PROCEDURE<SetBookingItemInvoiced>
    Code lines:
    OnSetBookingItemInvoiced(InvoicedBookingItem); <=====================
Codeunit<Booking Manager>.PROCEDURE<OnSynchronize>
  Raised in: Codeunit<Booking Manager>.PROCEDURE<Synchronize>
    Code lines:
    OnSynchronize(BookingItem); <=====================
Codeunit<Purch.-Calc.Discount>.PROCEDURE<OnAfterCalcPurchaseDiscount>
  Raised in: Codeunit<Purch.-Calc.Discount>.PROCEDURE<CalculateInvoiceDiscount>
    Code lines:
    ...
        UpdatePrepmtLineAmount(PurchHeader);
      END;
    END;
    
    PurchCalcDiscByType.ResetRecalculateInvoiceDisc(PurchHeader);
    OnAfterCalcPurchaseDiscount(PurchHeader); <=====================
Codeunit<Purch.-Calc.Discount>.PROCEDURE<OnBeforeCalcPurchaseDiscount>
  Raised in: Codeunit<Purch.-Calc.Discount>.PROCEDURE<CalculateInvoiceDiscount>
    Code lines:
    PurchSetup.GET;
    
    OnBeforeCalcPurchaseDiscount(PurchHeader); <=====================
    
    WITH PurchLine DO BEGIN
      LOCKTABLE;
      PurchHeader.TESTFIELD("Vendor Posting Group");
      VendPostingGr.GET(PurchHeader."Vendor Posting Group");
    
      PurchLine2.RESET;
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindItemJnlLinePrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindItemJnlLinePrice>
    Code lines:
    ...
      IF FoundSalesPrice OR
         NOT ((CalledByFieldNo = FIELDNO(Quantity)) OR
              (CalledByFieldNo = FIELDNO("Variant Code")))
      THEN
        VALIDATE("Unit Amount",TempSalesPrice."Unit Price");
      OnAfterFindItemJnlLinePrice(ItemJnlLine,TempSalesPrice,CalledByFieldNo); <=====================
    END;
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindSalesLineLineDisc>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindSalesLineLineDisc>
    Code lines:
    ...
        SalesLineLineDiscExists(SalesHeader,SalesLine,FALSE);
        CalcBestLineDisc(TempSalesLineDisc);
    
        "Line Discount %" := TempSalesLineDisc."Line Discount %";
      END;
      OnAfterFindSalesLineLineDisc(SalesLine,SalesHeader,TempSalesLineDisc); <=====================
    END;
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindSalesLinePrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindSalesLinePrice>
    Code lines:
    ...
            ConvertPriceToVAT(FALSE,'','',ResPrice."Unit Price");
            ConvertPriceLCYToFCY(ResPrice."Currency Code",ResPrice."Unit Price");
            "Unit Price" := ResPrice."Unit Price" * "Qty. per Unit of Measure";
          END;
      END;
      OnAfterFindSalesLinePrice(SalesLine,SalesHeader,TempSalesPrice,ResPrice,CalledByFieldNo); <=====================
    END;
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindServLineDisc>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindServLineDisc>
    Code lines:
    ...
            ROUND(CalcChargeableQty * "Unit Price",Currency."Amount Rounding Precision") *
            "Line Discount %" / 100,Currency."Amount Rounding Precision");
        "Inv. Discount Amount" := 0;
        "Inv. Disc. Amount to Invoice" := 0;
      END;
      OnAfterFindServLineDisc(ServLine,ServHeader,TempSalesLineDisc); <=====================
    END;
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindServLinePrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindServLinePrice>
    Code lines:
    ...
            ConvertPriceToVAT(FALSE,'','',ServCost."Default Unit Price");
            ConvertPriceLCYToFCY('',ServCost."Default Unit Price");
            "Unit Price" := ServCost."Default Unit Price";
          END;
      END;
      OnAfterFindServLinePrice(ServLine,ServHeader,TempSalesPrice,ResPrice,ServCost,CalledByFieldNo); <=====================
    END;
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindStdItemJnlLinePrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindStdItemJnlLinePrice>
    Code lines:
    ...
      IF FoundSalesPrice OR
         NOT ((CalledByFieldNo = FIELDNO(Quantity)) OR
              (CalledByFieldNo = FIELDNO("Variant Code")))
      THEN
        VALIDATE("Unit Amount",TempSalesPrice."Unit Price");
      OnAfterFindStdItemJnlLinePrice(StdItemJnlLine,TempSalesPrice,CalledByFieldNo); <=====================
    END;
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnGetCustNoForSalesHeader>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<GetCustNoForSalesHeader>
    Code lines:
    CustNo := SalesHeader."Sell-to Customer No.";
    OnGetCustNoForSalesHeader(SalesHeader,CustNo); <=====================
    EXIT(CustNo);
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterFindPurchLinePrice>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<FindPurchLinePrice>
    Code lines:
    ...
               ("Prepmt. Amt. Inv." = 0)
            THEN
              "Direct Unit Cost" := TempPurchPrice."Direct Unit Cost";
          END;
      END;
      OnAfterFindPurchLinePrice(PurchLine,PurchHeader,TempPurchPrice,CalledByFieldNo); <=====================
    END;
Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnAfterCollectTrackingInformation>
  Raised in: Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<Code>
    Code lines:
    ...
            IF WhseLNRequired THEN
              TESTFIELD("Lot No.");
          END;
        END;
        ItemTrackingMgt.CollectItemTrkgInfWhseJnlLine(WhseJnlLine);
        OnAfterCollectTrackingInformation(WhseJnlLine); <=====================
        IF NEXT = 0 THEN
          FIND('-');
      UNTIL "Line No." = StartLineNo;
      ItemTrackingMgt.CheckItemTrkgInfBeforePost;
    ...
Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnAfterItemJnlPostLine>
  Raised in: Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<Code>
    Code lines:
    ...
    
        IF IsReclass("Journal Template Name") THEN
          IF CreateItemJnlLine(WhseJnlLine,ItemJnlLine) THEN
            ItemJnlPostLine.RunWithCheck(ItemJnlLine);
    
        OnAfterItemJnlPostLine(WhseJnlLine); <=====================
    
        IF IsPhysInvtCount(WhseJnlTemplate,"Phys Invt Counting Period Code","Phys Invt Counting Period Type") THEN BEGIN
          IF NOT PhysInvtCount THEN BEGIN
            PhysInvtCountMgt.InitTempItemSKUList;
    ...
Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnBeforeInsertTempHandlingSpecs>
  Raised in: Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<CreateTrackingSpecification>
    Code lines:
    ...
            ERROR(Text006);
        UNTIL WhseItemTrkgLine.NEXT = 0;
    
    IF WhseItemTrkgLine.FIND('-') THEN
      REPEAT
        OnBeforeInsertTempHandlingSpecs(WhseJnlLine,WhseItemTrkgLine); <=====================
    
        TempHandlingSpecification.INIT;
        TempHandlingSpecification.TRANSFERFIELDS(WhseItemTrkgLine);
        TempHandlingSpecification."Quantity actual Handled (Base)" := WhseItemTrkgLine."Qty. to Handle (Base)";
    ...
Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnCheckWhseJnlLine>
  Raised in: Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<Code>
    Code lines:
    ...
          IF WhseSNRequired THEN
            TESTFIELD("Qty. per Unit of Measure",1);
          IF WhseJnlTemplate.Type <> WhseJnlTemplate.Type::"Physical Inventory" THEN
            CreateTrackingSpecification(WhseJnlLine,TempHandlingSpecification)
          ELSE BEGIN
            OnCheckWhseJnlLine(WhseJnlLine); <=====================
            IF WhseSNRequired THEN
              TESTFIELD("Serial No.");
            IF WhseLNRequired THEN
              TESTFIELD("Lot No.");
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterAutofillQtyToHandle>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<Code>
    Code lines:
    ...
        "Last Registering No." := "Registering No.";
        "Registering No." := '';
        MODIFY;
        IF NOT HideDialog THEN
          WhseActivLine.AutofillQtyToHandle(WhseActivLine);
        OnAfterAutofillQtyToHandle(WhseActivLine); <=====================
      END;
      IF NOT HideDialog THEN
        Window.CLOSE;
      COMMIT;
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterCheckWhseActivLine>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<CheckLines>
    Code lines:
    ...
            WhseActivLine.TESTFIELD("Unit of Measure Code");
            WhseActivLine.TESTFIELD("Bin Code");
            WhseActivLine.CheckWhseDocLine;
            UpdateTempBinContentBuffer(WhseActivLine);
          END;
          OnAfterCheckWhseActivLine(WhseActivLine); <=====================
    
          IF ((WhseActivLine."Activity Type" = WhseActivLine."Activity Type"::Pick) OR
              (WhseActivLine."Activity Type" = WhseActivLine."Activity Type"::"Invt. Pick") OR
              (WhseActivLine."Activity Type" = WhseActivLine."Activity Type"::"Invt. Movement")) AND
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterCreateRegActivLine>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<Code>
    Code lines:
    ...
          UpdateWindow(3,'');
          UpdateWindow(4,'');
          IF Location."Bin Mandatory" THEN
            RegisterWhseJnlLine(WhseActivLine);
          CreateRegActivLine(WhseActivLine);
          OnAfterCreateRegActivLine(WhseActivLine,RegisteredWhseActivLine,RegisteredInvtMovementLine); <=====================
        UNTIL WhseActivLine.NEXT = 0;
      END;
    
      TempWhseActivLineToReserve.DELETEALL;
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterInsRegWhseItemTrkgLine>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<InsertRegWhseItemTrkgLine>
    Code lines:
    ...
      "Created by Whse. Activity Line" := TRUE;
      ItemTrackingMgt.SetRegistering(TRUE);
      ItemTrackingMgt.CalcWhseItemTrkgLine(WhseItemTrkgLine2);
      INSERT;
    END;
    OnAfterInsRegWhseItemTrkgLine(WhseActivLine,WhseItemTrkgLine2); <=====================
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterRegWhseItemTrkgLine>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<RegisterWhseItemTrkgLine>
    Code lines:
    ...
        TempTrackingSpecification.SetTracking(
          WhseActivLine2."Serial No.",WhseActivLine2."Lot No.",
          WhseActivLine2."Warranty Date",WhseActivLine2."Expiration Date");
        TempTrackingSpecification."Quantity (Base)" := QtyToRegisterBase;
        TempTrackingSpecification.INSERT;
        OnAfterRegWhseItemTrkgLine(WhseActivLine2,TempTrackingSpecification); <=====================
      END;
    END;
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<UpdateTempTracking>
    Code lines:
    ...
        TempTrackingSpecification.SetTracking("Serial No.","Lot No.","Warranty Date","Expiration Date");
        TempTrackingSpecification.Correction := TRUE;
        TempTrackingSpecification.INSERT;
        Inserted := TRUE;
        TempTrackingSpecification.RESET;
        OnAfterRegWhseItemTrkgLine(WhseActivLine2,TempTrackingSpecification); <=====================
      END;
    END;
    EXIT(Inserted);
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterWhseShptLineModify>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<UpdateWhseShptLine>
    Code lines:
    ...
    
    WhseShptLine.VALIDATE("Qty. to Ship",WhseShptLine."Qty. Picked" - WhseShptLine."Qty. Shipped");
    WhseShptLine."Qty. to Ship (Base)" := WhseShptLine."Qty. Picked (Base)" - WhseShptLine."Qty. Shipped (Base)";
    WhseShptLine.Status := WhseShptLine.CalcStatusShptLine;
    WhseShptLine.MODIFY;
    OnAfterWhseShptLineModify(WhseShptLine); <=====================
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeWhseActivLineDelete>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<Code>
    Code lines:
    ...
          CopyWhseActivityLineToReservBuf(TempWhseActivLineToReserve,WhseActivLine);
    
          IF Type <> Type::Movement THEN
            UpdateWhseSourceDocLine(WhseActivLine);
          IF WhseActivLine."Qty. Outstanding" = WhseActivLine."Qty. to Handle" THEN BEGIN
            OnBeforeWhseActivLineDelete(WhseActivLine); <=====================
            WhseActivLine.DELETE
          END ELSE BEGIN
            QtyDiff := WhseActivLine."Qty. Outstanding" - WhseActivLine."Qty. to Handle";
            QtyBaseDiff := WhseActivLine."Qty. Outstanding (Base)" - WhseActivLine."Qty. to Handle (Base)";
    ...
Codeunit<Whse.-Shipment Release>.PROCEDURE<OnBeforeRelease>
  Raised in: Codeunit<Whse.-Shipment Release>.PROCEDURE<Release>
    Code lines:
    WITH WhseShptHeader DO BEGIN
      IF Status = Status::Released THEN
        EXIT;
    
      OnBeforeRelease(WhseShptHeader); <=====================
    
      WhseShptLine.SETRANGE("No.","No.");
      WhseShptLine.SETFILTER(Quantity,'<>0');
      IF NOT WhseShptLine.FIND('-') THEN
        ERROR(Text000,TABLECAPTION,"No.");
    ...
Codeunit<Create Pick>.PROCEDURE<OnAfterWhseActivLineInsert>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateWhseDocLine>
    Code lines:
    ...
        WhseActivLine."Qty. to Handle (Base)" := 0;
        WhseActivLine.Cubage := 0;
        WhseActivLine.Weight := 0;
      END;
      WhseActivLine.INSERT;
      OnAfterWhseActivLineInsert(WhseActivLine); <=====================
    END;
    
    IF Location."Bin Mandatory" THEN
      CreateWhseDocPlaceLine(WhseActivLine.Quantity,WhseActivLine."Qty. (Base)",LineNo);
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateWhseDocTakeLine>
    Code lines:
    ...
            WhseActivLine2."Qty. to Handle (Base)" := 0;
            WhseActivLine2.Cubage := 0;
            WhseActivLine2.Weight := 0;
          END;
          WhseActivLine2.INSERT;
          OnAfterWhseActivLineInsert(WhseActivLine2); <=====================
    
          TempWhseActivLine.DELETE;
          LineNo := LineNo + 10000;
    
    ...
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateWhseDocTakeLine>
    Code lines:
    ...
            WhseActivLine2."Qty. to Handle (Base)" := 0;
            WhseActivLine2.Cubage := 0;
            WhseActivLine2.Weight := 0;
          END;
          WhseActivLine2.INSERT;
          OnAfterWhseActivLineInsert(WhseActivLine2); <=====================
    
          TempWhseActivLine.DELETE;
          LineNo := LineNo + 10000;
    
    ...
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateWhseDocPlaceLine>
    Code lines:
    ...
            WhseActivLine."Qty. to Handle (Base)" := 0;
            WhseActivLine.Cubage := 0;
            WhseActivLine.Weight := 0;
          END;
          WhseActivLine.INSERT;
          OnAfterWhseActivLineInsert(WhseActivLine); <=====================
        END;
      UNTIL (TempWhseActivLine.NEXT = 0) OR (PickQtyBase = 0);
    
    TempWhseActivLine.COPY(TempWhseActivLine2);
Codeunit<Create Put-away>.PROCEDURE<OnAfterWhseActivLineInsert>
  Raised in: Codeunit<Create Put-away>.PROCEDURE<InsertBreakPackageLines>
    Code lines:
    ...
        WhseActivLine."Activity Type" := WhseActivHeader.Type;
        WhseActivLine."No." := WhseActivHeader."No.";
        WhseActivLine."Bin Code" := PostedWhseRcptLine."Bin Code";
        WhseActivLine."Zone Code" := PostedWhseRcptLine."Zone Code";
        WhseActivLine.INSERT;
        OnAfterWhseActivLineInsert(WhseActivLine); <=====================
      UNTIL TempWhseActivLine.NEXT = 0;
      EXIT(TRUE);
    END
  Raised in: Codeunit<Create Put-away>.PROCEDURE<CreateNewWhseActivity>
    Code lines:
    ...
      WhseActivLine."Serial No." := "Serial No.";
      WhseActivLine."Lot No." := "Lot No.";
      WhseActivLine."Warranty Date" := "Warranty Date";
      WhseActivLine."Expiration Date" := "Expiration Date";
      WhseActivLine.INSERT;
      OnAfterWhseActivLineInsert(WhseActivLine); <=====================
    END;
Codeunit<Whse. Undo Quantity>.PROCEDURE<OnBeforePostTempWhseJnlLine>
  Raised in: Codeunit<Whse. Undo Quantity>.PROCEDURE<PostTempWhseJnlLineCache>
    Code lines:
    OnBeforePostTempWhseJnlLine(TempWhseJnlLine); <=====================
    IF TempWhseJnlLine.FIND('-') THEN
      REPEAT
        WhseJnlRegLine.RegisterWhseJnlLine(TempWhseJnlLine);
      UNTIL TempWhseJnlLine.NEXT = 0;
Codeunit<Whse.-Act.-Post (Yes/No)>.PROCEDURE<OnBeforeConfirmPost>
  Raised in: Codeunit<Whse.-Act.-Post (Yes/No)>.PROCEDURE<Code>
    Code lines:
    HideDialog := FALSE;
    OnBeforeConfirmPost(WhseActivLine,HideDialog); <=====================
    
    WITH WhseActivLine DO BEGIN
      IF NOT HideDialog THEN
        CASE "Activity Type" OF
          "Activity Type"::"Invt. Put-away":
            IF NOT SelectForPutAway THEN
              EXIT;
          ELSE
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterPurchLineModify>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<InitSourceDocument>
    Code lines:
    ...
                  PurchLine.VALIDATE("Qty. to Receive",0)
                ELSE
                  PurchLine.VALIDATE("Return Qty. to Ship",0);
                PurchLine.VALIDATE("Qty. to Invoice",0);
                PurchLine.MODIFY;
                OnAfterPurchLineModify(PurchLine); <=====================
              UNTIL PurchLine.NEXT = 0;
    
            IF (PurchHeader."Posting Date" <> "Posting Date") AND ("Posting Date" <> 0D) THEN BEGIN
              PurchRelease.Reopen(PurchHeader);
    ...
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<UpdateSourceDocument>
    Code lines:
    ...
              IF InvoiceSourceDoc THEN
                PurchLine.VALIDATE("Qty. to Invoice",-"Qty. to Handle");
            END;
            PurchLine."Bin Code" := "Bin Code";
            PurchLine.MODIFY;
            OnAfterPurchLineModify(PurchLine); <=====================
          END;
        DATABASE::"Sales Line":
          BEGIN
            IF "Activity Type" = "Activity Type"::"Invt. Pick" THEN
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterSalesLineModify>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<InitSourceDocument>
    Code lines:
    ...
                  SalesLine.VALIDATE("Qty. to Ship",0)
                ELSE
                  SalesLine.VALIDATE("Return Qty. to Receive",0);
                SalesLine.VALIDATE("Qty. to Invoice",0);
                SalesLine.MODIFY;
                OnAfterSalesLineModify(SalesLine); <=====================
              UNTIL SalesLine.NEXT = 0;
    
            IF (SalesHeader."Posting Date" <> "Posting Date") AND ("Posting Date" <> 0D) THEN BEGIN
              SalesRelease.Reopen(SalesHeader);
    ...
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<UpdateSourceDocument>
    Code lines:
    ...
            SalesLine.MODIFY;
            IF "Assemble to Order" THEN BEGIN
              ATOLink.UpdateQtyToAsmFromInvtPickLine(TempWhseActivLine);
              ATOLink.UpdateAsmBinCodeFromInvtPickLine(TempWhseActivLine);
            END;
            OnAfterSalesLineModify(SalesLine); <=====================
          END;
        DATABASE::"Transfer Line":
          BEGIN
            TransLine.GET("Source No.","Source Line No.");
    ...
Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnAfterPurchaseLineInsert>
  Raised in: Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<Code>
    Code lines:
    ...
          PurchLine."Drop Shipment" := TRUE;
          PurchLine."Purchasing Code" := SalesLine."Purchasing Code";
          EVALUATE(PurchLine."Inbound Whse. Handling Time",'<0D>');
          PurchLine.VALIDATE("Inbound Whse. Handling Time");
          PurchLine.INSERT;
          OnAfterPurchaseLineInsert(PurchLine); <=====================
    
          NextLineNo := NextLineNo + 10000;
    
          SalesLine."Unit Cost (LCY)" := PurchLine."Unit Cost (LCY)";
    ...
Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnGetDescriptionFromItem>
  Raised in: Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<GetDescriptionFromItem>
    Code lines:
    PurchaseLine.Description := Item.Description;
    PurchaseLine."Description 2" := Item."Description 2";
    OnGetDescriptionFromItem(PurchaseLine,Item); <=====================
Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnGetDescriptionFromItemTranslation>
  Raised in: Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<GetDescriptionFromItemTranslation>
    Code lines:
    ...
      Vend.GET(PurchHeader."Buy-from Vendor No.");
      IF Vend."Language Code" <> '' THEN
        IF ItemTranslation.GET(SalesLine."No.",SalesLine."Variant Code",Vend."Language Code") THEN BEGIN
          PurchaseLine.Description := ItemTranslation.Description;
          PurchaseLine."Description 2" := ItemTranslation."Description 2";
          OnGetDescriptionFromItemTranslation(PurchaseLine,ItemTranslation); <=====================
          EXIT(TRUE);
        END;
    END;
    EXIT(FALSE)
Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnGetDescriptionFromItemVariant>
  Raised in: Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<GetDescriptionFromItemVariant>
    Code lines:
    IF SalesLine."Variant Code" <> '' THEN BEGIN
      ItemVariant.GET(Item."No.",SalesLine."Variant Code");
      PurchaseLine.Description := ItemVariant.Description;
      PurchaseLine."Description 2" := ItemVariant."Description 2";
      OnGetDescriptionFromItemVariant(PurchaseLine,ItemVariant); <=====================
      EXIT(TRUE);
    END;
    EXIT(FALSE)
Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnGetDescriptionFromSalesLine>
  Raised in: Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<GetDescriptionFromSalesLine>
    Code lines:
    IF (SalesLine.Description <> '') OR (SalesLine."Description 2" <> '') THEN BEGIN
      PurchaseLine.Description := SalesLine.Description;
      PurchaseLine."Description 2" := SalesLine."Description 2";
      OnGetDescriptionFromSalesLine(PurchaseLine,SalesLine); <=====================
      EXIT(TRUE);
    END;
    EXIT(FALSE);
Codeunit<MS-QBO Table Mgt.>.PROCEDURE<ConnectionErrorOccured>
  Raised in: Codeunit<MS-QBO Table Mgt.>.PROCEDURE<InvokeQuickBooksRESTRequest>
    Code lines:
    IF ISNULL(OAuthAuthorization) THEN BEGIN
      ConnectionErrorOccured(STRSUBSTNO(NotInitializedErr,CODEUNIT::"MS-QBO Table Mgt.")); <=====================
      EXIT;
    END;
    
    AuthorizationHeader := OAuthAuthorization.GetAuthorizationHeader(BaseUrlTxt + Request,UPPERCASE(RequestMethod));
    
    IF NOT ISNULL(JObject) THEN BEGIN
      StringContent := StringContent.StringContent(JObject.ToString,Encoding.UTF8,JsonMediaTypeTxt);
      RequestBody := JObject.ToString;
    ...
  Raised in: Codeunit<MS-QBO Table Mgt.>.PROCEDURE<InvokeReconnectRequest>
    Code lines:
    IF ISNULL(OAuthAuthorization) THEN BEGIN
      ConnectionErrorOccured(STRSUBSTNO(NotInitializedErr,CODEUNIT::"MS-QBO Table Mgt.")); <=====================
      EXIT;
    END;
    
    RequestMethod := 'GET';
    
    AuthorizationHeader := OAuthAuthorization.GetAuthorizationHeader(ReconnectUrlTxt + ReconnectTxt,RequestMethod);
    
    InvokeRestRequest(RequestMethod,ReconnectUrlTxt,AuthorizationHeader,ReconnectTxt,StringContent,
    ...
  Raised in: Codeunit<MS-QBO Table Mgt.>.PROCEDURE<InvokeRestRequest>
    Code lines:
    ...
      'PUT':
        Task := HttpClient.PutAsync(Request,StringContent);
      'POST':
        Task := HttpClient.PostAsync(Request,StringContent);
      ELSE BEGIN
        ConnectionErrorOccured(HttpRequestMethodNotSupportedErr); <=====================
        EXIT;
      END;
    END;
    
    ...
  Raised in: Codeunit<MS-QBO Table Mgt.>.PROCEDURE<ParseResponseAsJson>
    Code lines:
    IF NOT JSONManagement.TryParseJObjectFromString(JObject2,Response) THEN BEGIN
      ConnectionErrorOccured(FORMAT(Response)); <=====================
      EXIT;
    END;
    
    IF NOT WasRequestSuccessful THEN BEGIN
      GetErrors(JObject2,ErrorMessage);
      ValidationFaultOccured(ErrorMessage.ToString);
      EXIT;
    END;
    ...
Codeunit<MS-QBO Table Mgt.>.PROCEDURE<GetConsumerKeyAndSecretText>
  Raised in: Codeunit<MS-QBO Table Mgt.>.PROCEDURE<Initialize>
    Code lines:
    MSQBOSetup.GET;
    
    GetConsumerKeyAndSecretText(MSQBOSetup."Target Application",ConsumerKeyTxt,ConsumerSecretTxt); <=====================
    IF ConsumerKey = '' THEN
      AzureKeyVaultManagement.GetAzureKeyVaultSecret(ConsumerKey,ConsumerKeyTxt);
    
    IF ConsumerSecret = '' THEN
      AzureKeyVaultManagement.GetAzureKeyVaultSecret(ConsumerSecret,ConsumerSecretTxt);
    
    Consumer := Consumer.Consumer(ConsumerKey,ConsumerSecret);
    ...
Codeunit<MS-QBO Table Mgt.>.PROCEDURE<OnBadQuickBooksResponse>
  Raised in: Codeunit<MS-QBO Table Mgt.>.PROCEDURE<InvokeQuickBooksRESTRequest>
    Code lines:
    ...
    InvokeRestRequest(RequestMethod,BaseUrlTxt,AuthorizationHeader,Request,StringContent,WasRequestSuccessful,
      Response,JsonMediaTypeTxt);
    JsonParsed := ParseResponseAsJson(Request,Response,EntityName,ReturnArray,WasRequestSuccessful,JToken);
    ResponseText := Response;
    IF (NOT WasRequestSuccessful) OR (NOT JsonParsed) THEN
      OnBadQuickBooksResponse(RequestMethod,BaseUrlTxt + Request,RequestBody,ResponseText); <=====================
  Raised in: Codeunit<MS-QBO Table Mgt.>.PROCEDURE<InvokeReconnectRequest>
    Code lines:
    ...
    ResponseText := Response;
    IF WasRequestSuccessful THEN BEGIN
      XMLDOMManagement.LoadXMLDocumentFromText(Response,ResultXmlDocument);
      EXIT(TRUE);
    END;
    OnBadQuickBooksResponse(RequestMethod,ReconnectUrlTxt + ReconnectTxt,'',ResponseText); <=====================
Codeunit<MS-QBO Table Mgt.>.PROCEDURE<ValidationFaultOccured>
  Raised in: Codeunit<MS-QBO Table Mgt.>.PROCEDURE<ParseResponseAsJson>
    Code lines:
    ...
      EXIT;
    END;
    
    IF NOT WasRequestSuccessful THEN BEGIN
      GetErrors(JObject2,ErrorMessage);
      ValidationFaultOccured(ErrorMessage.ToString); <=====================
      EXIT;
    END;
    
    // Check if response contains multiple entities
    ...
Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeCalcCellExit>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<CalcCell>
    Code lines:
    ...
      END;
    END;
    IF AccSchedLine."Show Opposite Sign" THEN
      Result := -Result;
    
    OnBeforeCalcCellExit(AccountScheduleLine,ColumnLayout,CalcAddCurr,Result); <=====================
    EXIT(Result);
Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeTestBalance>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<CalcGLAcc>
    Code lines:
    ...
                FILTERGROUP(8);
                SETFILTER("Global Dimension 1 Code",GetDimTotalingFilter(1,ColumnLayout."Dimension 1 Totaling"));
                SETFILTER("Global Dimension 2 Code",GetDimTotalingFilter(2,ColumnLayout."Dimension 2 Totaling"));
                SETFILTER("Business Unit Code",ColumnLayout."Business Unit Totaling");
                FILTERGROUP(0);
                OnBeforeTestBalance(GLAcc,AccSchedName,AccSchedLine,ColumnLayout,AmountType,ColValue,CalcAddCurr,TestBalance); <=====================
                CASE AmountType OF
                  AmountType::"Net Amount":
                    BEGIN
                      IF CalcAddCurr THEN BEGIN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterCheckMandatoryFields>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CheckMandatoryHeaderFields>
    Code lines:
    ...
    SalesHeader.TESTFIELD("Sell-to Customer No.");
    SalesHeader.TESTFIELD("Bill-to Customer No.");
    SalesHeader.TESTFIELD("Posting Date");
    SalesHeader.TESTFIELD("Document Date");
    
    OnAfterCheckMandatoryFields(SalesHeader); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterCheckSalesDoc>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CheckAndUpdate>
    Code lines:
    ...
        ERROR(NothingToPostErr);
    
      IF ("Shipping Advice" = "Shipping Advice"::Complete) AND Ship THEN
        CheckShippingAdvice;
    
      OnAfterCheckSalesDoc(SalesHeader); <=====================
    
      // Update
      IF Invoice THEN
        CreatePrepaymentLines(SalesHeader,TempPrepaymentSalesLine,TRUE);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterFillInvoicePostBuffer>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<FillInvoicePostingBuffer>
    Code lines:
    ...
        SalesAccount := GenPostingSetup.GetSalesCrMemoAccount
      ELSE
        SalesAccount := GenPostingSetup.GetSalesAccount;
    InvoicePostBuffer.SetAccount(SalesAccount,TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY);
    InvoicePostBuffer."Deferral Code" := SalesLine."Deferral Code";
    OnAfterFillInvoicePostBuffer(InvoicePostBuffer,SalesLine); <=====================
    UpdateInvoicePostBuffer(TempInvoicePostBuffer,InvoicePostBuffer,FALSE);
    IF SalesLine."Deferral Code" <> '' THEN
      FillDeferralPostingBuffer(SalesHeader,SalesLine,InvoicePostBuffer,AmtToDefer,AmtToDeferACY,DeferralAccount,SalesAccount);
Codeunit<Sales-Post>.PROCEDURE<OnAfterFinalizePosting>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<FinalizePosting>
    Code lines:
    ...
        IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN
          ICInboxOutboxMgt.CreateOutboxSalesInvTrans(SalesInvHeader)
        ELSE
          ICInboxOutboxMgt.CreateOutboxSalesCrMemoTrans(SalesCrMemoHeader);
    
      OnAfterFinalizePosting(SalesHeader,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,GenJnlPostLine); <=====================
    
      ClearPostBuffers;
    END;
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostBalancingEntry>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostBalancingEntry>
    Code lines:
    ...
          ROUND(CustLedgEntry."Remaining Pmt. Disc. Possible" / CustLedgEntry."Adjusted Currency Factor");
      "Allow Zero-Amount Posting" := TRUE;
    
      OnBeforePostBalancingEntry(GenJnlLine,SalesHeader,TotalSalesLine2,TotalSalesLineLCY2);
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostBalancingEntry(GenJnlLine,SalesHeader,TotalSalesLine2,TotalSalesLineLCY2); <=====================
    END;
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostGLAndCustomer>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostGLAndCustomer>
    Code lines:
    ...
        PostBalancingEntry(
          SalesHeader,TotalSalesLine,TotalSalesLineLCY,GenJnlLineDocType,GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode);
      END;
    END;
    
    OnAfterPostGLAndCustomer(SalesHeader,GenJnlPostLine,TotalSalesLine,TotalSalesLineLCY); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostInvPostBuffer>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostInvoicePostBufferLine>
    Code lines:
    ...
        CopyFromInvoicePostBufferFA(InvoicePostBuffer);
      END;
    
      OnBeforePostInvPostBuffer(GenJnlLine,InvoicePostBuffer,SalesHeader);
      GLEntryNo := RunGenJnlPostLine(GenJnlLine);
      OnAfterPostInvPostBuffer(GenJnlLine,InvoicePostBuffer,SalesHeader,GLEntryNo); <=====================
    END;
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostItemJnlLineWhseLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
            SalesLine,TempWhseTrackingSpecification,PostWhseJnlLine,QtyToBeInvoiced,TempATOTrackingSpecification)
        ELSE
          PostItemJnlLineTracking(SalesLine,TempWhseTrackingSpecification,PostWhseJnlLine,QtyToBeInvoiced,TempHandlingSpecification);
        PostItemJnlLineWhseLine(TempWhseJnlLine,TempWhseTrackingSpecification);
    
        OnAfterPostItemJnlLineWhseLine(SalesLine,ItemLedgShptEntryNo,WhseShip,WhseReceive); <=====================
    
        IF (SalesLine.Type = SalesLine.Type::Item) AND SalesHeader.Invoice THEN
          PostItemJnlLineItemCharges(SalesHeader,SalesLine,OriginalItemJnlLine,"Item Shpt. Entry No.");
      END;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostSalesDoc>
  Raised in: Codeunit<Sales-Post>.<OnRun>
    Code lines:
    ...
      COMMIT;
      UpdateAnalysisView.UpdateAll(0,TRUE);
      UpdateItemAnalysisView.UpdateAll(0,TRUE);
    END;
    
    OnAfterPostSalesDoc( <=====================
      Rec,GenJnlPostLine,SalesShptHeader."No.",ReturnRcptHeader."No.",SalesInvHeader."No.",SalesCrMemoHeader."No.");
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostUpdateOrderLineModifyTempLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostUpdateOrderLine>
    Code lines:
    ...
          IF ("Purch. Order Line No." <> 0) AND (Quantity = "Quantity Invoiced") THEN
            UpdateAssocLines(TempSalesLine);
          SetDefaultQuantity;
          ModifyTempLine(TempSalesLine);
    
          OnAfterPostUpdateOrderLineModifyTempLine(TempSalesLine,WhseShip,WhseReceive); <=====================
        UNTIL NEXT = 0;
    END;
Codeunit<Sales-Post>.PROCEDURE<OnAfterReturnRcptLineInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertReturnReceiptLine>
    Code lines:
    ...
      ReturnRcptLine."Item Charge Base Amount" :=
        ROUND(CostBaseAmount / SalesLine.Quantity * ReturnRcptLine.Quantity);
    END;
    OnBeforeReturnRcptLineInsert(ReturnRcptLine,ReturnRcptHeader,SalesLine);
    ReturnRcptLine.INSERT(TRUE);
    OnAfterReturnRcptLineInsert(ReturnRcptLine,ReturnRcptHeader,SalesLine,ItemLedgShptEntryNo,WhseShip,WhseReceive); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesCrMemoHeaderInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertCrMemoHeader>
    Code lines:
    ...
      SalesCrMemoHeader."Source Code" := SrcCode;
      SalesCrMemoHeader."User ID" := USERID;
      SalesCrMemoHeader."No. Printed" := 0;
      OnBeforeSalesCrMemoHeaderInsert(SalesCrMemoHeader,SalesHeader);
      SalesCrMemoHeader.INSERT(TRUE);
      OnAfterSalesCrMemoHeaderInsert(SalesCrMemoHeader,SalesHeader); <=====================
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,SalesCrMemoHeader.RECORDID,SalesCrMemoHeader."No.");
    
      IF SalesSetup."Copy Cmts Ret.Ord. to Cr. Memo" THEN BEGIN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesCrMemoLineInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostSalesLine>
    Code lines:
    ...
        END ELSE BEGIN
          SalesCrMemoLine.InitFromSalesLine(SalesCrMemoHeader,xSalesLine);
          ItemJnlPostLine.CollectValueEntryRelation(TempValueEntryRelation,SalesCrMemoLine.RowID1);
          OnBeforeSalesCrMemoLineInsert(SalesCrMemoLine,SalesCrMemoHeader,xSalesLine);
          SalesCrMemoLine.INSERT(TRUE);
          OnAfterSalesCrMemoLineInsert(SalesCrMemoLine,SalesCrMemoHeader,SalesHeader,xSalesLine); <=====================
          CreatePostedDeferralScheduleFromSalesDoc(xSalesLine,SalesCrMemoLine.GetDocumentType,
            SalesCrMemoHeader."No.",SalesCrMemoLine."Line No.",SalesCrMemoHeader."Posting Date");
        END;
    END;
Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesInvHeaderInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertInvoiceHeader>
    Code lines:
    ...
      SalesInvHeader."Source Code" := SrcCode;
      SalesInvHeader."User ID" := USERID;
      SalesInvHeader."No. Printed" := 0;
      OnBeforeSalesInvHeaderInsert(SalesInvHeader,SalesHeader);
      SalesInvHeader.INSERT(TRUE);
      OnAfterSalesInvHeaderInsert(SalesInvHeader,SalesHeader); <=====================
    
      UpdateWonOpportunities(SalesHeader);
      SegManagement.CreateCampaignEntryOnSalesInvoicePosting(SalesInvHeader);
    
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesInvLineInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostSalesLine>
    Code lines:
    ...
        IF SalesHeader."Document Type" IN [SalesHeader."Document Type"::Order,SalesHeader."Document Type"::Invoice] THEN BEGIN
          SalesInvLine.InitFromSalesLine(SalesInvHeader,xSalesLine);
          ItemJnlPostLine.CollectValueEntryRelation(TempValueEntryRelation,SalesInvLine.RowID1);
          OnBeforeSalesInvLineInsert(SalesInvLine,SalesInvHeader,xSalesLine);
          SalesInvLine.INSERT(TRUE);
          OnAfterSalesInvLineInsert(SalesInvLine,SalesInvHeader,xSalesLine,ItemLedgShptEntryNo,WhseShip,WhseReceive); <=====================
          CreatePostedDeferralScheduleFromSalesDoc(xSalesLine,SalesInvLine.GetDocumentType,
            SalesInvHeader."No.",SalesInvLine."Line No.",SalesInvHeader."Posting Date");
        END ELSE BEGIN
          SalesCrMemoLine.InitFromSalesLine(SalesCrMemoHeader,xSalesLine);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesShptLineInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertShipmentLine>
    Code lines:
    ...
      SalesShptLine."Item Charge Base Amount" :=
        ROUND(CostBaseAmount / SalesLine.Quantity * SalesShptLine.Quantity);
    END;
    OnBeforeSalesShptLineInsert(SalesShptLine,SalesShptHeader,SalesLine);
    SalesShptLine.INSERT(TRUE);
    OnAfterSalesShptLineInsert(SalesShptLine,SalesLine); <=====================
    
    CheckCertificateOfSupplyStatus(SalesShptHeader,SalesShptLine);
    
    ServItemMgt.CreateServItemOnSalesLineShpt(SalesHeader,xSalesLine,SalesShptLine);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterTestSalesLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<TestSalesLine>
    Code lines:
    ...
        SalesLine.TESTFIELD("Use Duplication List",FALSE);
      END;
      IF NOT ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) THEN
        SalesLine.TESTFIELD("Job No.",'');
    
      OnAfterTestSalesLine(SalesLine,WhseShip,WhseReceive); <=====================
    END;
Codeunit<Sales-Post>.PROCEDURE<OnAfterUpdatePostingNos>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<UpdatePostingNos>
    Code lines:
    ...
            "Posting No." := PostingPreviewNoTok;
        END;
      END;
    END;
    
    OnAfterUpdatePostingNos(SalesHeader,NoSeriesMgt); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnBeforeInsertICGenJnlLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertICGenJnlLine>
    Code lines:
    ...
          Amount := -SalesLine.Amount;
      END;
      IF "Bal. VAT %" <> 0 THEN
        Amount := ROUND(Amount * (1 + "Bal. VAT %" / 100),Currency."Amount Rounding Precision");
      VALIDATE(Amount);
      OnBeforeInsertICGenJnlLine(TempICGenJnlLine,SalesHeader,SalesLine); <=====================
      INSERT;
    END;
Codeunit<Sales-Post>.PROCEDURE<OnBeforeInvoiceRoundingAmount>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InvoiceRounding>
    Code lines:
    ...
        TotalSalesLine."Amount Including VAT" -
        ROUND(
          TotalSalesLine."Amount Including VAT",Currency."Invoice Rounding Precision",Currency.InvoiceRoundingDirection),
        Currency."Amount Rounding Precision");
    
    OnBeforeInvoiceRoundingAmount(SalesHeader,TotalSalesLine."Amount Including VAT",UseTempData,InvoiceRoundingAmount); <=====================
    IF InvoiceRoundingAmount <> 0 THEN BEGIN
      CustPostingGr.GET(SalesHeader."Customer Posting Group");
      WITH SalesLine DO BEGIN
        INIT;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeItemJnlPostLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
          IF CheckApplFromItemEntry AND (NOT SalesLine.IsServiceItem) THEN
            SalesLine.TESTFIELD("Appl.-from Item Entry");
        END;
    
        OriginalItemJnlLine := ItemJnlLine;
        OnBeforeItemJnlPostLine(ItemJnlLine,SalesLine,SalesHeader); <=====================
        ItemJnlPostLine.RunWithCheck(ItemJnlLine);
    
        IF IsATO THEN
          PostItemJnlLineTracking(
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostAssocItemJnlLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostAssocItemJnlLine>
    Code lines:
    ...
      "Applies-to Entry" := 0;
    END;
    
    IF PurchOrderLine."Job No." = '' THEN BEGIN
      TransferReservFromPurchLine(PurchOrderLine,ItemJnlLine,SalesLine,QtyToBeShippedBase);
      OnBeforePostAssocItemJnlLine(ItemJnlLine,PurchOrderLine); <=====================
      ItemJnlPostLine.RunWithCheck(ItemJnlLine);
    
      // Handle Item Tracking
      IF ItemJnlPostLine.CollectTrackingSpecification(TempHandlingSpecification2) THEN BEGIN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostBalancingEntry>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostBalancingEntry>
    Code lines:
    ...
        "Amount (LCY)" :=
          TotalSalesLineLCY2."Amount Including VAT" +
          ROUND(CustLedgEntry."Remaining Pmt. Disc. Possible" / CustLedgEntry."Adjusted Currency Factor");
      "Allow Zero-Amount Posting" := TRUE;
    
      OnBeforePostBalancingEntry(GenJnlLine,SalesHeader,TotalSalesLine2,TotalSalesLineLCY2); <=====================
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostBalancingEntry(GenJnlLine,SalesHeader,TotalSalesLine2,TotalSalesLineLCY2);
    END;
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostCommitSalesDoc>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CheckAndUpdate>
    Code lines:
    ...
    
      ModifyHeader := UpdatePostingNos(SalesHeader);
    
      DropShipOrder := UpdateAssosOrderPostingNos(SalesHeader);
    
      OnBeforePostCommitSalesDoc(SalesHeader,GenJnlPostLine,PreviewMode,ModifyHeader); <=====================
      IF NOT PreviewMode AND ModifyHeader THEN BEGIN
        MODIFY;
        COMMIT;
      END;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostCustomerEntry>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostCustomerEntry>
    Code lines:
    ...
      "Amount (LCY)" := -TotalSalesLineLCY2."Amount Including VAT";
      "Sales/Purch. (LCY)" := -TotalSalesLineLCY2.Amount;
      "Profit (LCY)" := -(TotalSalesLineLCY2.Amount - TotalSalesLineLCY2."Unit Cost (LCY)");
      "Inv. Discount (LCY)" := -TotalSalesLineLCY2."Inv. Discount Amount";
    
      OnBeforePostCustomerEntry(GenJnlLine,SalesHeader,TotalSalesLine2,TotalSalesLineLCY2); <=====================
      GenJnlPostLine.RunWithCheck(GenJnlLine);
    END;
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostGLAndCustomer>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostGLAndCustomer>
    Code lines:
    OnBeforePostGLAndCustomer(SalesHeader,TempInvoicePostBuffer,CustLedgEntry); <=====================
    
    WITH SalesHeader DO BEGIN
      // Post sales and VAT to G/L entries from posting buffer
      PostInvoicePostBuffer(SalesHeader,TempInvoicePostBuffer);
    
      // Post customer entry
      IF GUIALLOWED THEN
        Window.UPDATE(4,1);
      PostCustomerEntry(
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostInvPostBuffer>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostInvoicePostBufferLine>
    Code lines:
    ...
      IF InvoicePostBuffer.Type = InvoicePostBuffer.Type::"Fixed Asset" THEN BEGIN
        "FA Posting Type" := "FA Posting Type"::Disposal;
        CopyFromInvoicePostBufferFA(InvoicePostBuffer);
      END;
    
      OnBeforePostInvPostBuffer(GenJnlLine,InvoicePostBuffer,SalesHeader); <=====================
      GLEntryNo := RunGenJnlPostLine(GenJnlLine);
      OnAfterPostInvPostBuffer(GenJnlLine,InvoicePostBuffer,SalesHeader,GLEntryNo);
    END;
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostSalesDoc>
  Raised in: Codeunit<Sales-Post>.<OnRun>
    Code lines:
    OnBeforePostSalesDoc(Rec); <=====================
    
    ValidatePostingAndDocumentDate(Rec);
    
    IF PreviewMode THEN BEGIN
      CLEARALL;
      PreviewMode := TRUE;
    END ELSE
      CLEARALL;
    
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeReturnRcptHeaderInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertReturnReceiptHeader>
    Code lines:
    ...
      END;
      ReturnRcptHeader."No. Series" := "Return Receipt No. Series";
      ReturnRcptHeader."Source Code" := SrcCode;
      ReturnRcptHeader."User ID" := USERID;
      ReturnRcptHeader."No. Printed" := 0;
      OnBeforeReturnRcptHeaderInsert(ReturnRcptHeader,SalesHeader); <=====================
      ReturnRcptHeader.INSERT(TRUE);
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,ReturnRcptHeader.RECORDID,ReturnRcptHeader."No.");
    
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeReturnRcptLineInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertReturnReceiptLine>
    Code lines:
    ...
      ReturnRcptLine."Item Rcpt. Entry No." :=
        InsertReturnEntryRelation(ReturnRcptLine); // ItemLedgShptEntryNo;
      ReturnRcptLine."Item Charge Base Amount" :=
        ROUND(CostBaseAmount / SalesLine.Quantity * ReturnRcptLine.Quantity);
    END;
    OnBeforeReturnRcptLineInsert(ReturnRcptLine,ReturnRcptHeader,SalesLine); <=====================
    ReturnRcptLine.INSERT(TRUE);
    OnAfterReturnRcptLineInsert(ReturnRcptLine,ReturnRcptHeader,SalesLine,ItemLedgShptEntryNo,WhseShip,WhseReceive);
Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesCrMemoHeaderInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertCrMemoHeader>
    Code lines:
    ...
        END;
      END;
      SalesCrMemoHeader."Source Code" := SrcCode;
      SalesCrMemoHeader."User ID" := USERID;
      SalesCrMemoHeader."No. Printed" := 0;
      OnBeforeSalesCrMemoHeaderInsert(SalesCrMemoHeader,SalesHeader); <=====================
      SalesCrMemoHeader.INSERT(TRUE);
      OnAfterSalesCrMemoHeaderInsert(SalesCrMemoHeader,SalesHeader);
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,SalesCrMemoHeader.RECORDID,SalesCrMemoHeader."No.");
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesCrMemoLineInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostSalesLine>
    Code lines:
    ...
          CreatePostedDeferralScheduleFromSalesDoc(xSalesLine,SalesInvLine.GetDocumentType,
            SalesInvHeader."No.",SalesInvLine."Line No.",SalesInvHeader."Posting Date");
        END ELSE BEGIN
          SalesCrMemoLine.InitFromSalesLine(SalesCrMemoHeader,xSalesLine);
          ItemJnlPostLine.CollectValueEntryRelation(TempValueEntryRelation,SalesCrMemoLine.RowID1);
          OnBeforeSalesCrMemoLineInsert(SalesCrMemoLine,SalesCrMemoHeader,xSalesLine); <=====================
          SalesCrMemoLine.INSERT(TRUE);
          OnAfterSalesCrMemoLineInsert(SalesCrMemoLine,SalesCrMemoHeader,SalesHeader,xSalesLine);
          CreatePostedDeferralScheduleFromSalesDoc(xSalesLine,SalesCrMemoLine.GetDocumentType,
            SalesCrMemoHeader."No.",SalesCrMemoLine."Line No.",SalesCrMemoHeader."Posting Date");
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesInvHeaderInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertInvoiceHeader>
    Code lines:
    ...
      IF GUIALLOWED THEN
        Window.UPDATE(1,STRSUBSTNO(InvoiceNoMsg,"Document Type","No.",SalesInvHeader."No."));
      SalesInvHeader."Source Code" := SrcCode;
      SalesInvHeader."User ID" := USERID;
      SalesInvHeader."No. Printed" := 0;
      OnBeforeSalesInvHeaderInsert(SalesInvHeader,SalesHeader); <=====================
      SalesInvHeader.INSERT(TRUE);
      OnAfterSalesInvHeaderInsert(SalesInvHeader,SalesHeader);
    
      UpdateWonOpportunities(SalesHeader);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesInvLineInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostSalesLine>
    Code lines:
    ...
    
      IF SalesHeader.Invoice THEN
        IF SalesHeader."Document Type" IN [SalesHeader."Document Type"::Order,SalesHeader."Document Type"::Invoice] THEN BEGIN
          SalesInvLine.InitFromSalesLine(SalesInvHeader,xSalesLine);
          ItemJnlPostLine.CollectValueEntryRelation(TempValueEntryRelation,SalesInvLine.RowID1);
          OnBeforeSalesInvLineInsert(SalesInvLine,SalesInvHeader,xSalesLine); <=====================
          SalesInvLine.INSERT(TRUE);
          OnAfterSalesInvLineInsert(SalesInvLine,SalesInvHeader,xSalesLine,ItemLedgShptEntryNo,WhseShip,WhseReceive);
          CreatePostedDeferralScheduleFromSalesDoc(xSalesLine,SalesInvLine.GetDocumentType,
            SalesInvHeader."No.",SalesInvLine."Line No.",SalesInvHeader."Posting Date");
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesShptHeaderInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertShipmentHeader>
    Code lines:
    ...
          TESTFIELD("External Document No.");
      END;
      SalesShptHeader."Source Code" := SrcCode;
      SalesShptHeader."User ID" := USERID;
      SalesShptHeader."No. Printed" := 0;
      OnBeforeSalesShptHeaderInsert(SalesShptHeader,SalesHeader); <=====================
      SalesShptHeader.INSERT(TRUE);
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,SalesShptHeader.RECORDID,SalesShptHeader."No.");
    
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesShptLineInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertShipmentLine>
    Code lines:
    ...
      SalesShptLine."Item Shpt. Entry No." :=
        InsertShptEntryRelation(SalesShptLine); // ItemLedgShptEntryNo
      SalesShptLine."Item Charge Base Amount" :=
        ROUND(CostBaseAmount / SalesLine.Quantity * SalesShptLine.Quantity);
    END;
    OnBeforeSalesShptLineInsert(SalesShptLine,SalesShptHeader,SalesLine); <=====================
    SalesShptLine.INSERT(TRUE);
    OnAfterSalesShptLineInsert(SalesShptLine,SalesLine);
    
    CheckCertificateOfSupplyStatus(SalesShptHeader,SalesShptLine);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeTestSalesLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<TestSalesLine>
    Code lines:
    OnBeforeTestSalesLine(SalesHeader,SalesLine); <=====================
    
    WITH SalesHeader DO BEGIN
      IF SalesLine.Type = SalesLine.Type::Item THEN
        DummyTrackingSpecification.CheckItemTrackingQuantity(
          DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.",
          SalesLine."Qty. to Ship (Base)",SalesLine."Qty. to Invoice (Base)",Ship,Invoice);
    
      CASE "Document Type" OF
        "Document Type"::Order:
    ...
Codeunit<Sales-Post>.PROCEDURE<OnSendSalesDocument>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<SendPostedDocumentRecord>
    Code lines:
    WITH SalesHeader DO
      CASE "Document Type" OF
        "Document Type"::Order:
          BEGIN
            OnSendSalesDocument(Invoice AND Ship); <=====================
            IF Invoice THEN BEGIN
              SalesInvHeader.GET("Last Posting No.");
              SalesInvHeader.SETRECFILTER;
              SalesInvHeader.SendProfile(DocumentSendingProfile);
            END;
    ...
Codeunit<Sales-Post (Yes/No)>.PROCEDURE<OnAfterPost>
  Raised in: Codeunit<Sales-Post (Yes/No)>.PROCEDURE<Code>
    Code lines:
    ...
    IF SalesSetup."Post with Job Queue" AND NOT PostAndSend THEN
      SalesPostViaJobQueue.EnqueueSalesDoc(SalesHeader)
    ELSE
      CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);
    
    OnAfterPost(SalesHeader); <=====================
Codeunit<Sales-Post (Yes/No)>.PROCEDURE<OnBeforeConfirmSalesPost>
  Raised in: Codeunit<Sales-Post (Yes/No)>.PROCEDURE<Code>
    Code lines:
    HideDialog := FALSE;
    
    OnBeforeConfirmSalesPost(SalesHeader,HideDialog); <=====================
    IF NOT HideDialog THEN
      IF NOT ConfirmPost(SalesHeader) THEN
        EXIT;
    
    SalesSetup.GET;
    IF SalesSetup."Post with Job Queue" AND NOT PostAndSend THEN
      SalesPostViaJobQueue.EnqueueSalesDoc(SalesHeader)
    ...
Codeunit<Sales-Post + Print>.PROCEDURE<OnAfterPost>
  Raised in: Codeunit<Sales-Post + Print>.PROCEDURE<Code>
    Code lines:
    ...
    ELSE BEGIN
      CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);
      GetReport(SalesHeader);
    END;
    
    OnAfterPost(SalesHeader); <=====================
    COMMIT;
Codeunit<Sales-Post + Print>.PROCEDURE<OnBeforeConfirmPost>
  Raised in: Codeunit<Sales-Post + Print>.PROCEDURE<Code>
    Code lines:
    HideDialog := FALSE;
    
    OnBeforeConfirmPost(SalesHeader,HideDialog); <=====================
    IF NOT HideDialog THEN
      IF NOT ConfirmPost(SalesHeader) THEN
        EXIT;
    
    SalesSetup.GET;
    IF SalesSetup."Post & Print with Job Queue" AND NOT SendReportAsEmail THEN
      SalesPostViaJobQueue.EnqueueSalesDoc(SalesHeader)
    ...
Codeunit<Sales-Quote to Order>.PROCEDURE<OnAfterInsertAllSalesOrderLines>
  Raised in: Codeunit<Sales-Quote to Order>.<OnRun>
    Code lines:
    ...
    CheckInProgressOpportunities(Rec);
    
    CreateSalesHeader(Rec,Cust."Prepayment %");
    
    TransferQuoteToSalesOrderLines(SalesQuoteLine,Rec,SalesOrderLine,SalesOrderHeader,Cust);
    OnAfterInsertAllSalesOrderLines(SalesOrderLine,Rec); <=====================
    
    SalesSetup.GET;
    IF SalesSetup."Archive Quotes and Orders" THEN
      ArchiveManagement.ArchSalesDocumentNoConfirm(Rec);
    ...
Codeunit<Sales-Quote to Order>.PROCEDURE<OnAfterInsertSalesOrderLine>
  Raised in: Codeunit<Sales-Quote to Order>.PROCEDURE<TransferQuoteToSalesOrderLines>
    Code lines:
    ...
        OrderSalesLine.VALIDATE("Prepayment %");
        IF OrderSalesLine."No." <> '' THEN
          OrderSalesLine.DefaultDeferralCode;
        OnBeforeInsertSalesOrderLine(OrderSalesLine,OrderSalesHeader,QuoteSalesLine,QuoteSalesHeader);
        OrderSalesLine.INSERT;
        OnAfterInsertSalesOrderLine(OrderSalesLine,OrderSalesHeader,QuoteSalesLine,QuoteSalesHeader); <=====================
        ATOLink.MakeAsmOrderLinkedToSalesOrderLine(QuoteSalesLine,OrderSalesLine);
        SalesLineReserve.TransferSaleLineToSalesLine(
          QuoteSalesLine,OrderSalesLine,QuoteSalesLine."Outstanding Qty. (Base)");
        SalesLineReserve.VerifyQuantity(OrderSalesLine,QuoteSalesLine);
    ...
Codeunit<Sales-Quote to Order>.PROCEDURE<OnAfterOnRun>
  Raised in: Codeunit<Sales-Quote to Order>.<OnRun>
    Code lines:
    ...
    SalesQuoteLine.DELETEALL;
    
    IF NOT ShouldRedistributeInvoiceAmount THEN
      SalesCalcDiscountByType.ResetRecalculateInvoiceDisc(SalesOrderHeader);
    
    OnAfterOnRun(Rec,SalesOrderHeader); <=====================
Codeunit<Sales-Quote to Order>.PROCEDURE<OnBeforeDeleteSalesQuote>
  Raised in: Codeunit<Sales-Quote to Order>.<OnRun>
    Code lines:
    ...
    MoveWonLostOpportunites(Rec,SalesOrderHeader);
    
    ApprovalsMgmt.CopyApprovalEntryQuoteToOrder(RECORDID,SalesOrderHeader."No.",SalesOrderHeader.RECORDID);
    ApprovalsMgmt.DeleteApprovalEntries(RECORDID);
    
    OnBeforeDeleteSalesQuote(Rec,SalesOrderHeader); <=====================
    
    DELETELINKS;
    DELETE;
    
    ...
Codeunit<Sales-Quote to Order>.PROCEDURE<OnBeforeInsertSalesOrderHeader>
  Raised in: Codeunit<Sales-Quote to Order>.PROCEDURE<CreateSalesHeader>
    Code lines:
    ...
      SalesOrderHeader.Reserve := Reserve;
    
      SalesOrderHeader."Prepayment %" := PrepmtPercent;
      IF SalesOrderHeader."Posting Date" = 0D THEN
        SalesOrderHeader."Posting Date" := WORKDATE;
      OnBeforeInsertSalesOrderHeader(SalesOrderHeader,SalesHeader); <=====================
      SalesOrderHeader.MODIFY;
    END;
Codeunit<Sales-Quote to Order>.PROCEDURE<OnBeforeInsertSalesOrderLine>
  Raised in: Codeunit<Sales-Quote to Order>.PROCEDURE<TransferQuoteToSalesOrderLines>
    Code lines:
    ...
          OrderSalesLine."Prepayment %" := Customer."Prepayment %";
        PrepmtMgt.SetSalesPrepaymentPct(OrderSalesLine,OrderSalesHeader."Posting Date");
        OrderSalesLine.VALIDATE("Prepayment %");
        IF OrderSalesLine."No." <> '' THEN
          OrderSalesLine.DefaultDeferralCode;
        OnBeforeInsertSalesOrderLine(OrderSalesLine,OrderSalesHeader,QuoteSalesLine,QuoteSalesHeader); <=====================
        OrderSalesLine.INSERT;
        OnAfterInsertSalesOrderLine(OrderSalesLine,OrderSalesHeader,QuoteSalesLine,QuoteSalesHeader);
        ATOLink.MakeAsmOrderLinkedToSalesOrderLine(QuoteSalesLine,OrderSalesLine);
        SalesLineReserve.TransferSaleLineToSalesLine(
    ...
Codeunit<Config. Package Management>.PROCEDURE<OnPostProcessPackage>
  Raised in: Codeunit<Config. Package Management>.PROCEDURE<ProcessAppliedPackageRecords>
    Code lines:
    ...
          TempConfigPackageRecord.DELETE; // Remove it from the buffer to avoid deletion in the package
          COMMIT;
        END;
      UNTIL TempConfigRecordForProcessing.NEXT = 0;
    TempConfigRecordForProcessing.DELETEALL;
    OnPostProcessPackage; <=====================
Codeunit<Config. Package Management>.PROCEDURE<OnPreProcessPackage>
  Raised in: Codeunit<Config. Package Management>.PROCEDURE<ProcessAppliedPackageRecords>
    Code lines:
    OnPreProcessPackage(TempConfigRecordForProcessing,Subscriber); <=====================
    IF TempConfigRecordForProcessing.FINDSET THEN
      REPEAT
        IF NOT ConfigTableProcessingRule.Process(TempConfigRecordForProcessing) THEN BEGIN
          TempConfigRecordForProcessing.FindConfigRecord(TempConfigPackageRecord);
          RecordError(TempConfigPackageRecord,0,COPYSTR(GETLASTERRORTEXT,1,250));
          TempConfigPackageRecord.DELETE; // Remove it from the buffer to avoid deletion in the package
          COMMIT;
        END;
      UNTIL TempConfigRecordForProcessing.NEXT = 0;
    ...
Codeunit<Config. Template Management>.PROCEDURE<OnApplyTemplLinesWithoutValidationAfterRecRefCheck>
  Raised in: Codeunit<Config. Template Management>.PROCEDURE<ApplyTemplateLinesWithoutValidation>
    Code lines:
    ...
          IF RecordRef.FIELDEXIST(ConfigTemplateLine."Field ID") THEN BEGIN
            FieldRef := RecordRef.FIELD(ConfigTemplateLine."Field ID");
            ConfigValidateMgt.ValidateFieldValue(
              RecordRef,FieldRef,ConfigTemplateLine."Default Value",TRUE,ConfigTemplateLine."Language ID");
            RecordRef.MODIFY(FALSE);
            OnApplyTemplLinesWithoutValidationAfterRecRefCheck(ConfigTemplateHeader,ConfigTemplateLine,RecordRef); <=====================
          END;
      UNTIL ConfigTemplateLine.NEXT = 0;
Codeunit<Config. Excel Exchange>.PROCEDURE<OnBeforeExportExcel>
  Raised in: Codeunit<Config. Excel Exchange>.PROCEDURE<ExportExcel>
    Code lines:
    OnBeforeExportExcel(ConfigPackageTable); <=====================
    
    TempSchemaFileName := CreateSchemaFile(ConfigPackageTable);
    TempSetupDataFileName := BuildDataSetForPackageTable(ExportFromWksht,ConfigPackageTable);
    
    CreateBook(TempBlob);
    WrkShtHelper := WrkShtHelper.WorksheetHelper(WrkbkWriter.FirstWorksheet.Worksheet);
    ImportSchema(WrkbkWriter,TempSchemaFileName,1);
    CreateSchemaConnection(WrkbkWriter,TempSetupDataFileName);
    
    ...
Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnAfterInsertAllSalesOrderLines>
  Raised in: Codeunit<Blanket Sales Order to Order>.<OnRun>
    Code lines:
    ...
          END;
        END;
      UNTIL BlanketOrderSalesLine.NEXT = 0;
    END;
    
    OnAfterInsertAllSalesOrderLines(Rec,SalesOrderHeader); <=====================
    
    IF SalesSetup."Default Posting Date" = SalesSetup."Default Posting Date"::"No Date" THEN BEGIN
      SalesOrderHeader."Posting Date" := 0D;
      SalesOrderHeader.MODIFY;
    ...
Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnAfterInsertSalesOrderLine>
  Raised in: Codeunit<Blanket Sales Order to Order>.<OnRun>
    Code lines:
    ...
          END;
          SalesOrderLine.DefaultDeferralCode;
          IF IsSalesOrderLineToBeInserted(SalesOrderLine) THEN BEGIN
            OnBeforeInsertSalesOrderLine(SalesOrderLine,SalesOrderHeader,BlanketOrderSalesLine,Rec);
            SalesOrderLine.INSERT;
            OnAfterInsertSalesOrderLine(SalesOrderLine,SalesOrderHeader,BlanketOrderSalesLine,Rec); <=====================
          END;
    
          IF ATOLink.AsmExistsForSalesLine(BlanketOrderSalesLine) THEN
            ATOLink.MakeAsmOrderLinkedToSalesOrderLine(BlanketOrderSalesLine,SalesOrderLine);
    ...
Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnBeforeInsertSalesOrderHeader>
  Raised in: Codeunit<Blanket Sales Order to Order>.PROCEDURE<CreateSalesHeader>
    Code lines:
    ...
      SalesOrderHeader."No. Printed" := 0;
      SalesOrderHeader.Status := SalesOrderHeader.Status::Open;
      SalesOrderHeader."No." := '';
    
      SalesOrderLine.LOCKTABLE;
      OnBeforeInsertSalesOrderHeader(SalesOrderHeader,SalesHeader); <=====================
      SalesOrderHeader.INSERT(TRUE);
    
      IF "Order Date" = 0D THEN
        SalesOrderHeader."Order Date" := WORKDATE
    ...
Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnBeforeInsertSalesOrderLine>
  Raised in: Codeunit<Blanket Sales Order to Order>.<OnRun>
    Code lines:
    ...
            SalesOrderLine."Qty. to Assemble to Order" := SalesOrderLine.Quantity;
            SalesOrderLine."Qty. to Asm. to Order (Base)" := SalesOrderLine."Quantity (Base)";
          END;
          SalesOrderLine.DefaultDeferralCode;
          IF IsSalesOrderLineToBeInserted(SalesOrderLine) THEN BEGIN
            OnBeforeInsertSalesOrderLine(SalesOrderLine,SalesOrderHeader,BlanketOrderSalesLine,Rec); <=====================
            SalesOrderLine.INSERT;
            OnAfterInsertSalesOrderLine(SalesOrderLine,SalesOrderHeader,BlanketOrderSalesLine,Rec);
          END;
    
    ...
Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnBeforeSalesOrderHeaderModify>
  Raised in: Codeunit<Blanket Sales Order to Order>.PROCEDURE<CreateSalesHeader>
    Code lines:
    ...
      SalesOrderHeader."Outbound Whse. Handling Time" := "Outbound Whse. Handling Time";
      SalesOrderHeader.Reserve := Reserve;
    
      SalesOrderHeader."Prepayment %" := PrepmtPercent;
    
      OnBeforeSalesOrderHeaderModify(SalesOrderHeader,SalesHeader); <=====================
      SalesOrderHeader.MODIFY;
    END;
Codeunit<Custom Layout Reporting>.PROCEDURE<OnBeforeVerifyXmlContainsDataset>
  Raised in: Codeunit<Custom Layout Reporting>.PROCEDURE<VerifyXmlContainsDatasetOnBeforeMergeDocument>
    Code lines:
    OnBeforeVerifyXmlContainsDataset(CancelVerification); <=====================
    IF CancelVerification THEN
      EXIT;
    
    WordOutputXmlHasData := DocumentReportMgt.IsStreamHasDataset(InStrXmlData);
    
    WordOutputXmlHasDataVerified := TRUE;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterCheckMandatoryFields>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CheckMandatoryHeaderFields>
    Code lines:
    ...
    PurchHeader.TESTFIELD("Buy-from Vendor No.");
    PurchHeader.TESTFIELD("Pay-to Vendor No.");
    PurchHeader.TESTFIELD("Posting Date");
    PurchHeader.TESTFIELD("Document Date");
    
    OnAfterCheckMandatoryFields(PurchHeader); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterCheckPurchDoc>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CheckAndUpdate>
    Code lines:
    ...
        CheckAssosOrderLines(PurchHeader);
    
      IF Invoice AND PurchSetup."Ext. Doc. No. Mandatory" THEN
        CheckExtDocNo(PurchHeader);
    
      OnAfterCheckPurchDoc(PurchHeader); <=====================
    
      // Update
      IF Invoice THEN
        CreatePrepmtLines(PurchHeader,TempPrepmtPurchLine,TRUE);
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterFillInvoicePostBuffer>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<FillInvoicePostBuffer>
    Code lines:
    ...
        PurchAccount := GenPostingSetup.GetPurchCrMemoAccount
      ELSE
        PurchAccount := GenPostingSetup.GetPurchAccount;
    InvoicePostBuffer.SetAccount(PurchAccount,TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY);
    InvoicePostBuffer."Deferral Code" := PurchLine."Deferral Code";
    OnAfterFillInvoicePostBuffer(InvoicePostBuffer,PurchLine); <=====================
    UpdateInvoicePostBuffer(TempInvoicePostBuffer,InvoicePostBuffer);
    FillDeferralPostingBuffer(PurchHeader,PurchLine,InvoicePostBuffer,AmtToDefer,AmtToDeferACY,DeferralAccount,PurchAccount);
Codeunit<Purch.-Post>.PROCEDURE<OnAfterFinalizePosting>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<FinalizePosting>
    Code lines:
    ...
      COMMIT;
    
    IF GUIALLOWED THEN
      Window.CLOSE;
    
    OnAfterFinalizePosting(PurchHeader,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,ReturnShptHeader,GenJnlPostLine); <=====================
    
    ClearPostBuffers;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostAccICLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostGLAccICLine>
    Code lines:
    ...
        JobPostLine.PostJobOnPurchaseLine(PurchHeader,PurchInvHeader,PurchCrMemoHeader,JobPurchLine,SrcCode);
      END;
      IF (PurchLine."IC Partner Code" <> '') AND PurchHeader.Invoice THEN
        InsertICGenJnlLine(PurchHeader,xPurchLine,ICGenJnlLineNo);
    
      OnAfterPostAccICLine(PurchLine); <=====================
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostBalancingEntry>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostBalancingEntry>
    Code lines:
    ...
          ROUND(VendLedgEntry."Remaining Pmt. Disc. Possible" / VendLedgEntry."Adjusted Currency Factor");
      "Allow Zero-Amount Posting" := TRUE;
    
      OnBeforePostBalancingEntry(GenJnlLine,PurchHeader,TotalPurchLine2,TotalPurchLineLCY2);
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostBalancingEntry(GenJnlLine,PurchHeader,TotalPurchLine2,TotalPurchLineLCY2); <=====================
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostInvPostBuffer>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostInvoicePostBufferLine>
    Code lines:
    ...
        CopyFromInvoicePostBufferFA(InvoicePostBuffer);
      END;
    
      OnBeforePostInvPostBuffer(GenJnlLine,InvoicePostBuffer,PurchHeader);
      GLEntryNo := RunGenJnlPostLine(GenJnlLine);
      OnAfterPostInvPostBuffer(GenJnlLine,InvoicePostBuffer,PurchHeader,GLEntryNo); <=====================
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostItemJnlLineCopyProdOrder>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemJnlLineCopyProdOrder>
    Code lines:
    ...
      ItemJnlLine."Work Center No." := "Work Center No.";
      ItemJnlLine."Unit Cost Calculation" := ItemJnlLine."Unit Cost Calculation"::Units;
      IF Finished THEN
        ItemJnlLine.Finished := Finished;
    END;
    OnAfterPostItemJnlLineCopyProdOrder(ItemJnlLine,PurchLine,PurchRcptHeader,QtyToBeReceived); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostItemLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemLine>
    Code lines:
    ...
            PostAssocItemJnlLine(PurchHeader,PurchLine,TempDropShptPostBuffer.Quantity,TempDropShptPostBuffer."Quantity (Base)");
          TempDropShptPostBuffer.INSERT;
        END;
      END;
    
      OnAfterPostItemLine(PurchLine); <=====================
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostPurchaseDoc>
  Raised in: Table<Purchase Header>.PROCEDURE<TriggerOnAfterPostPurchaseDoc>
    Code lines:
    PurchPost.OnAfterPostPurchaseDoc(Rec,GenJnlPostLine,PurchRcpHdrNo,RetShptHdrNo,PurchInvHdrNo,PurchCrMemoHdrNo); <=====================
  Raised in: Codeunit<Purch.-Post>.<OnRun>
    Code lines:
    ...
      COMMIT;
      UpdateAnalysisView.UpdateAll(0,TRUE);
      UpdateItemAnalysisView.UpdateAll(0,TRUE);
    END;
    
    OnAfterPostPurchaseDoc( <=====================
      Rec,GenJnlPostLine,PurchRcptHeader."No.",ReturnShptHeader."No.",PurchInvHeader."No.",PurchCrMemoHeader."No.");
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostUpdateOrderLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostUpdateOrderLine>
    Code lines:
    ...
            ELSE
              InitQtyToReceive2;
          END;
          SetDefaultQuantity;
          ModifyTempLine(TempPurchLine);
          OnAfterPostUpdateOrderLine(TempPurchLine,WhseShip,WhseReceive); <=====================
        UNTIL NEXT = 0;
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostVendorEntry>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostVendorEntry>
    Code lines:
    ...
      "Sales/Purch. (LCY)" := -TotalPurchLineLCY2.Amount;
      "Inv. Discount (LCY)" := -TotalPurchLineLCY2."Inv. Discount Amount";
    
      OnBeforePostVendorEntry(GenJnlLine,PurchHeader,TotalPurchLine2,TotalPurchLineLCY2);
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostVendorEntry(GenJnlLine,PurchHeader,TotalPurchLine2,TotalPurchLineLCY2); <=====================
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostWhseJnlLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
            PurchHeader,PurchLine,OriginalItemJnlLine,TempReservationEntry,QtyToBeInvoiced,QtyToBeReceived,
            TempHandlingSpecification,"Item Shpt. Entry No.");
    
      IF PostWhseJnlLine THEN BEGIN
        PostItemJnlLineWhseLine(TempWhseJnlLine,TempWhseTrackingSpecification,PurchLine,PostJobConsumptionBeforePurch);
        OnAfterPostWhseJnlLine(PurchLine,ItemLedgShptEntryNo,WhseShip,WhseReceive); <=====================
      END;
      IF (PurchLine.Type = PurchLine.Type::Item) AND PurchHeader.Invoice THEN
        PostItemJnlLineItemCharges(
          PurchHeader,PurchLine,OriginalItemJnlLine,"Item Shpt. Entry No.",TempTrackingSpecificationChargeAssmt);
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchCrMemoHeaderInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertCrMemoHeader>
    Code lines:
    ...
      PurchCrMemoHdr."Source Code" := SrcCode;
      PurchCrMemoHdr."User ID" := USERID;
      PurchCrMemoHdr."No. Printed" := 0;
      OnBeforePurchCrMemoHeaderInsert(PurchCrMemoHdr,PurchHeader);
      PurchCrMemoHdr.INSERT(TRUE);
      OnAfterPurchCrMemoHeaderInsert(PurchCrMemoHdr,PurchHeader); <=====================
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,PurchCrMemoHdr.RECORDID,PurchCrMemoHdr."No.");
    
      IF PurchSetup."Copy Cmts Ret.Ord. to Cr. Memo" THEN BEGIN
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchCrMemoLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostPurchLine>
    Code lines:
    ...
        END ELSE BEGIN // Credit Memo
          PurchCrMemoLine.InitFromPurchLine(PurchCrMemoHeader,xPurchLine);
          ItemJnlPostLine.CollectValueEntryRelation(TempValueEntryRelation,COPYSTR(PurchCrMemoLine.RowID1,1,100));
          OnBeforePurchCrMemoLineInsert(PurchCrMemoLine,PurchCrMemoHeader,PurchLine);
          PurchCrMemoLine.INSERT(TRUE);
          OnAfterPurchCrMemoLineInsert(PurchCrMemoLine,PurchCrMemoHeader,PurchLine); <=====================
          CreatePostedDeferralScheduleFromPurchDoc(xPurchLine,PurchCrMemoLine.GetDocumentType,
            PurchCrMemoHeader."No.",PurchCrMemoLine."Line No.",PurchCrMemoHeader."Posting Date");
        END;
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchInvHeaderInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertInvoiceHeader>
    Code lines:
    ...
      PurchInvHeader."Source Code" := SrcCode;
      PurchInvHeader."User ID" := USERID;
      PurchInvHeader."No. Printed" := 0;
      OnBeforePurchInvHeaderInsert(PurchInvHeader,PurchHeader);
      PurchInvHeader.INSERT(TRUE);
      OnAfterPurchInvHeaderInsert(PurchInvHeader,PurchHeader); <=====================
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,PurchInvHeader.RECORDID,PurchInvHeader."No.");
      IF PurchSetup."Copy Comments Order to Invoice" THEN BEGIN
        PurchCommentLine.CopyComments(
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchInvLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostPurchLine>
    Code lines:
    ...
        IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN BEGIN
          PurchInvLine.InitFromPurchLine(PurchInvHeader,xPurchLine);
          ItemJnlPostLine.CollectValueEntryRelation(TempValueEntryRelation,COPYSTR(PurchInvLine.RowID1,1,100));
          OnBeforePurchInvLineInsert(PurchInvLine,PurchInvHeader,PurchLine);
          PurchInvLine.INSERT(TRUE);
          OnAfterPurchInvLineInsert(PurchInvLine,PurchInvHeader,PurchLine,ItemLedgShptEntryNo,WhseShip,WhseReceive); <=====================
          CreatePostedDeferralScheduleFromPurchDoc(xPurchLine,PurchInvLine.GetDocumentType,
            PurchInvHeader."No.",PurchInvLine."Line No.",PurchInvHeader."Posting Date");
        END ELSE BEGIN // Credit Memo
          PurchCrMemoLine.InitFromPurchLine(PurchCrMemoHeader,xPurchLine);
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchRcptHeaderInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertReceiptHeader>
    Code lines:
    ...
      PurchRcptHeader."No. Printed" := 0;
      PurchRcptHeader."Source Code" := SrcCode;
      PurchRcptHeader."User ID" := USERID;
      OnBeforePurchRcptHeaderInsert(PurchRcptHeader,PurchHeader);
      PurchRcptHeader.INSERT(TRUE);
      OnAfterPurchRcptHeaderInsert(PurchRcptHeader,PurchHeader); <=====================
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,PurchRcptHeader.RECORDID,PurchRcptHeader."No.");
    
      IF PurchSetup."Copy Comments Order to Receipt" THEN BEGIN
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchRcptLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertReceiptLine>
    Code lines:
    ...
      PurchRcptLine."Item Rcpt. Entry No." := InsertRcptEntryRelation(PurchRcptLine);
      PurchRcptLine."Item Charge Base Amount" := ROUND(CostBaseAmount / PurchLine.Quantity * PurchRcptLine.Quantity);
    END;
    OnBeforePurchRcptLineInsert(PurchRcptLine,PurchRcptHeader,PurchLine);
    PurchRcptLine.INSERT(TRUE);
    OnAfterPurchRcptLineInsert(PurchLine,PurchRcptLine,ItemLedgShptEntryNo,WhseShip,WhseReceive); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterReturnShptHeaderInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertReturnShipmentHeader>
    Code lines:
    ...
      ReturnShptHeader."No. Printed" := 0;
      ReturnShptHeader."Source Code" := SrcCode;
      ReturnShptHeader."User ID" := USERID;
      OnBeforeReturnShptHeaderInsert(ReturnShptHeader,PurchHeader);
      ReturnShptHeader.INSERT(TRUE);
      OnAfterReturnShptHeaderInsert(ReturnShptHeader,PurchHeader); <=====================
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,ReturnShptHeader.RECORDID,ReturnShptHeader."No.");
    
      IF PurchSetup."Copy Cmts Ret.Ord. to Ret.Shpt" THEN BEGIN
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterReturnShptLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertReturnShipmentLine>
    Code lines:
    ...
      ReturnShptLine."Item Shpt. Entry No." := InsertReturnEntryRelation(ReturnShptLine);
      ReturnShptLine."Item Charge Base Amount" := ROUND(CostBaseAmount / PurchLine.Quantity * ReturnShptLine.Quantity);
    END;
    OnBeforeReturnShptLineInsert(ReturnShptLine,ReturnShptHeader,PurchLine);
    ReturnShptLine.INSERT(TRUE);
    OnAfterReturnShptLineInsert(ReturnShptLine,ReturnShptHeader,PurchLine,ItemLedgShptEntryNo,WhseShip,WhseReceive); <=====================
    
    CheckCertificateOfSupplyStatus(ReturnShptHeader,ReturnShptLine);
Codeunit<Purch.-Post>.PROCEDURE<OnAfterUpdatePostingNos>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<UpdatePostingNos>
    Code lines:
    ...
            "Posting No." := PostingPreviewNoTok;
        END;
      END;
    END;
    
    OnAfterUpdatePostingNos(PurchHeader,NoSeriesMgt); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterUpdatePurchLineBeforePost>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<UpdatePurchLineBeforePost>
    Code lines:
    ...
      END ELSE BEGIN
        "Qty. to Invoice" := 0;
        "Qty. to Invoice (Base)" := 0;
      END;
    END;
    OnAfterUpdatePurchLineBeforePost(PurchLine,WhseShip,WhseReceive); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeCheckExternalDocumentNumber>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CheckExternalDocumentNumber>
    Code lines:
    OnBeforeCheckExternalDocumentNumber(VendLedgEntry,PurchaseHeader,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    VendLedgEntry.RESET;
    VendLedgEntry.SETCURRENTKEY("External Document No.");
    VendLedgEntry.SETRANGE("Document Type",GenJnlLineDocType);
    VendLedgEntry.SETRANGE("External Document No.",GenJnlLineExtDocNo);
    VendLedgEntry.SETRANGE("Vendor No.",PurchaseHeader."Pay-to Vendor No.");
    VendLedgEntry.SETRANGE(Reversed,FALSE);
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeInvoiceRoundingAmount>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InvoiceRounding>
    Code lines:
    ...
        TotalPurchLine."Amount Including VAT" -
        ROUND(
          TotalPurchLine."Amount Including VAT",Currency."Invoice Rounding Precision",Currency.InvoiceRoundingDirection),
        Currency."Amount Rounding Precision");
    
    OnBeforeInvoiceRoundingAmount(PurchHeader,TotalPurchLine."Amount Including VAT",UseTempData,InvoiceRoundingAmount); <=====================
    IF InvoiceRoundingAmount <> 0 THEN BEGIN
      VendPostingGr.GET(PurchHeader."Vendor Posting Group");
      VendPostingGr.TESTFIELD("Invoice Rounding Account");
      WITH PurchLine DO BEGIN
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeItemJnlPostLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
          PostItemJnlLineJobConsumption(
            PurchHeader,PurchLine,OriginalItemJnlLine,TempReservationEntry,QtyToBeInvoiced,QtyToBeReceived,
            TempHandlingSpecification,0);
      END;
    
      OnBeforeItemJnlPostLine(ItemJnlLine,PurchLine,PurchHeader); <=====================
      ItemJnlPostLine.RunWithCheck(ItemJnlLine);
    
      IF NOT Subcontracting THEN
        PostItemJnlLineTracking(
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostAssocItemJnlLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostAssocItemJnlLine>
    Code lines:
    ...
      END;
    END;
    
    IF SalesOrderLine."Job Contract Entry No." = 0 THEN BEGIN
      TransferReservToItemJnlLine(SalesOrderLine,ItemJnlLine,PurchLine,QtyToBeShippedBase,TRUE);
      OnBeforePostAssocItemJnlLine(ItemJnlLine,SalesOrderLine); <=====================
      ItemJnlPostLine.RunWithCheck(ItemJnlLine);
      // Handle Item Tracking
      IF ItemJnlPostLine.CollectTrackingSpecification(TempHandlingSpecification2) THEN BEGIN
        IF TempHandlingSpecification2.FINDSET THEN
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostBalancingEntry>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostBalancingEntry>
    Code lines:
    ...
        "Amount (LCY)" :=
          TotalPurchLineLCY2."Amount Including VAT" +
          ROUND(VendLedgEntry."Remaining Pmt. Disc. Possible" / VendLedgEntry."Adjusted Currency Factor");
      "Allow Zero-Amount Posting" := TRUE;
    
      OnBeforePostBalancingEntry(GenJnlLine,PurchHeader,TotalPurchLine2,TotalPurchLineLCY2); <=====================
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostBalancingEntry(GenJnlLine,PurchHeader,TotalPurchLine2,TotalPurchLineLCY2);
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostCommitPurchaseDoc>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CheckAndUpdate>
    Code lines:
    ...
    
      ModifyHeader := UpdatePostingNos(PurchHeader);
    
      DropShipOrder := UpdateAssosOrderPostingNos(PurchHeader);
    
      OnBeforePostCommitPurchaseDoc(PurchHeader,GenJnlPostLine,PreviewMode,ModifyHeader); <=====================
      IF NOT PreviewMode AND ModifyHeader THEN BEGIN
        MODIFY;
        COMMIT;
      END;
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostGLAndVendor>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostGLAndVendor>
    Code lines:
    OnBeforePostGLAndVendor(PurchHeader,TempInvoicePostBuffer); <=====================
    
    WITH PurchHeader DO BEGIN
      // Post purchase and VAT to G/L entries from buffer
      PostInvoicePostingBuffer(PurchHeader,TempInvoicePostBuffer);
    
      // Check External Document number
      IF PurchSetup."Ext. Doc. No. Mandatory" OR (GenJnlLineExtDocNo <> '') THEN
        CheckExternalDocumentNumber(VendLedgEntry,PurchHeader);
    
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostInvPostBuffer>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostInvoicePostBufferLine>
    Code lines:
    ...
        IF InvoicePostBuffer."FA Posting Type" = InvoicePostBuffer."FA Posting Type"::Maintenance THEN
          "FA Posting Type" := "FA Posting Type"::Maintenance;
        CopyFromInvoicePostBufferFA(InvoicePostBuffer);
      END;
    
      OnBeforePostInvPostBuffer(GenJnlLine,InvoicePostBuffer,PurchHeader); <=====================
      GLEntryNo := RunGenJnlPostLine(GenJnlLine);
      OnAfterPostInvPostBuffer(GenJnlLine,InvoicePostBuffer,PurchHeader,GLEntryNo);
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostPurchaseDoc>
  Raised in: Codeunit<Purch.-Post>.<OnRun>
    Code lines:
    OnBeforePostPurchaseDoc(Rec); <=====================
    
    ValidatePostingAndDocumentDate(Rec);
    
    IF PreviewMode THEN BEGIN
      CLEARALL;
      PreviewMode := TRUE;
    END ELSE
      CLEARALL;
    
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostVendorEntry>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostVendorEntry>
    Code lines:
    ...
      "Source Currency Amount" := -TotalPurchLine2."Amount Including VAT";
      "Amount (LCY)" := -TotalPurchLineLCY2."Amount Including VAT";
      "Sales/Purch. (LCY)" := -TotalPurchLineLCY2.Amount;
      "Inv. Discount (LCY)" := -TotalPurchLineLCY2."Inv. Discount Amount";
    
      OnBeforePostVendorEntry(GenJnlLine,PurchHeader,TotalPurchLine2,TotalPurchLineLCY2); <=====================
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostVendorEntry(GenJnlLine,PurchHeader,TotalPurchLine2,TotalPurchLineLCY2);
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchCrMemoHeaderInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertCrMemoHeader>
    Code lines:
    ...
        END;
      END;
      PurchCrMemoHdr."Source Code" := SrcCode;
      PurchCrMemoHdr."User ID" := USERID;
      PurchCrMemoHdr."No. Printed" := 0;
      OnBeforePurchCrMemoHeaderInsert(PurchCrMemoHdr,PurchHeader); <=====================
      PurchCrMemoHdr.INSERT(TRUE);
      OnAfterPurchCrMemoHeaderInsert(PurchCrMemoHdr,PurchHeader);
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,PurchCrMemoHdr.RECORDID,PurchCrMemoHdr."No.");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchCrMemoLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostPurchLine>
    Code lines:
    ...
          CreatePostedDeferralScheduleFromPurchDoc(xPurchLine,PurchInvLine.GetDocumentType,
            PurchInvHeader."No.",PurchInvLine."Line No.",PurchInvHeader."Posting Date");
        END ELSE BEGIN // Credit Memo
          PurchCrMemoLine.InitFromPurchLine(PurchCrMemoHeader,xPurchLine);
          ItemJnlPostLine.CollectValueEntryRelation(TempValueEntryRelation,COPYSTR(PurchCrMemoLine.RowID1,1,100));
          OnBeforePurchCrMemoLineInsert(PurchCrMemoLine,PurchCrMemoHeader,PurchLine); <=====================
          PurchCrMemoLine.INSERT(TRUE);
          OnAfterPurchCrMemoLineInsert(PurchCrMemoLine,PurchCrMemoHeader,PurchLine);
          CreatePostedDeferralScheduleFromPurchDoc(xPurchLine,PurchCrMemoLine.GetDocumentType,
            PurchCrMemoHeader."No.",PurchCrMemoLine."Line No.",PurchCrMemoHeader."Posting Date");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchInvHeaderInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertInvoiceHeader>
    Code lines:
    ...
      PurchInvHeader."Payment Reference" := "Payment Reference";
      PurchInvHeader."Payment Method Code" := "Payment Method Code";
      PurchInvHeader."Source Code" := SrcCode;
      PurchInvHeader."User ID" := USERID;
      PurchInvHeader."No. Printed" := 0;
      OnBeforePurchInvHeaderInsert(PurchInvHeader,PurchHeader); <=====================
      PurchInvHeader.INSERT(TRUE);
      OnAfterPurchInvHeaderInsert(PurchInvHeader,PurchHeader);
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,PurchInvHeader.RECORDID,PurchInvHeader."No.");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchInvLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostPurchLine>
    Code lines:
    ...
    
      IF PurchHeader.Invoice THEN
        IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN BEGIN
          PurchInvLine.InitFromPurchLine(PurchInvHeader,xPurchLine);
          ItemJnlPostLine.CollectValueEntryRelation(TempValueEntryRelation,COPYSTR(PurchInvLine.RowID1,1,100));
          OnBeforePurchInvLineInsert(PurchInvLine,PurchInvHeader,PurchLine); <=====================
          PurchInvLine.INSERT(TRUE);
          OnAfterPurchInvLineInsert(PurchInvLine,PurchInvHeader,PurchLine,ItemLedgShptEntryNo,WhseShip,WhseReceive);
          CreatePostedDeferralScheduleFromPurchDoc(xPurchLine,PurchInvLine.GetDocumentType,
            PurchInvHeader."No.",PurchInvLine."Line No.",PurchInvHeader."Posting Date");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchRcptHeaderInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertReceiptHeader>
    Code lines:
    ...
        PurchRcptHeader."Order No." := "No.";
      END;
      PurchRcptHeader."No. Printed" := 0;
      PurchRcptHeader."Source Code" := SrcCode;
      PurchRcptHeader."User ID" := USERID;
      OnBeforePurchRcptHeaderInsert(PurchRcptHeader,PurchHeader); <=====================
      PurchRcptHeader.INSERT(TRUE);
      OnAfterPurchRcptHeaderInsert(PurchRcptHeader,PurchHeader);
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,PurchRcptHeader.RECORDID,PurchRcptHeader."No.");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchRcptLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertReceiptLine>
    Code lines:
    ...
          WhseShptLine,PostedWhseShptHeader,PostedWhseShptLine,TempWhseSplitSpecification);
      END;
      PurchRcptLine."Item Rcpt. Entry No." := InsertRcptEntryRelation(PurchRcptLine);
      PurchRcptLine."Item Charge Base Amount" := ROUND(CostBaseAmount / PurchLine.Quantity * PurchRcptLine.Quantity);
    END;
    OnBeforePurchRcptLineInsert(PurchRcptLine,PurchRcptHeader,PurchLine); <=====================
    PurchRcptLine.INSERT(TRUE);
    OnAfterPurchRcptLineInsert(PurchLine,PurchRcptLine,ItemLedgShptEntryNo,WhseShip,WhseReceive);
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeReturnShptHeaderInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertReturnShipmentHeader>
    Code lines:
    ...
      END;
      ReturnShptHeader."No. Series" := "Return Shipment No. Series";
      ReturnShptHeader."No. Printed" := 0;
      ReturnShptHeader."Source Code" := SrcCode;
      ReturnShptHeader."User ID" := USERID;
      OnBeforeReturnShptHeaderInsert(ReturnShptHeader,PurchHeader); <=====================
      ReturnShptHeader.INSERT(TRUE);
      OnAfterReturnShptHeaderInsert(ReturnShptHeader,PurchHeader);
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,ReturnShptHeader.RECORDID,ReturnShptHeader."No.");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeReturnShptLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertReturnShipmentLine>
    Code lines:
    ...
      END;
    
      ReturnShptLine."Item Shpt. Entry No." := InsertReturnEntryRelation(ReturnShptLine);
      ReturnShptLine."Item Charge Base Amount" := ROUND(CostBaseAmount / PurchLine.Quantity * ReturnShptLine.Quantity);
    END;
    OnBeforeReturnShptLineInsert(ReturnShptLine,ReturnShptHeader,PurchLine); <=====================
    ReturnShptLine.INSERT(TRUE);
    OnAfterReturnShptLineInsert(ReturnShptLine,ReturnShptHeader,PurchLine,ItemLedgShptEntryNo,WhseShip,WhseReceive);
    
    CheckCertificateOfSupplyStatus(ReturnShptHeader,ReturnShptLine);
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeTestPurchLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<TestPurchLine>
    Code lines:
    OnBeforeTestPurchLine(PurchLine,PurchHeader); <=====================
    
    WITH PurchLine DO BEGIN
      IF Type = Type::Item THEN
        DummyTrackingSpecification.CheckItemTrackingQuantity(
          DATABASE::"Purchase Line","Document Type","Document No.","Line No.",
          "Qty. to Receive (Base)","Qty. to Invoice (Base)",PurchHeader.Receive,PurchHeader.Invoice);
    
      IF Type = Type::"Charge (Item)" THEN BEGIN
        TESTFIELD(Amount);
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeUpdatePurchLineBeforePost>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<UpdatePurchLineBeforePost>
    Code lines:
    WITH PurchLine DO BEGIN
      OnBeforeUpdatePurchLineBeforePost(PurchLine,PurchHeader,WhseShip,WhseReceive); <=====================
    
      IF NOT (PurchHeader.Receive OR RoundingLineInserted) THEN BEGIN
        "Qty. to Receive" := 0;
        "Qty. to Receive (Base)" := 0;
      END;
    
      IF NOT (PurchHeader.Ship OR RoundingLineInserted) THEN BEGIN
        "Return Qty. to Ship" := 0;
    ...
Codeunit<Assembly-Post>.PROCEDURE<OnAfterFinalizePost>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<FinalizePost>
    Code lines:
    ...
        IF NOT AssemblyCommentLine.ISEMPTY THEN
          AssemblyCommentLine.DELETEALL;
      END;
    END;
    
    OnAfterFinalizePost(AssemblyHeader); <=====================
Codeunit<Assembly-Post>.PROCEDURE<OnAfterInitPost>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<InitPost>
    Code lines:
    ...
      END;
    
      GetSourceCode(IsAsmToOrder);
    END;
    
    OnAfterInitPost(AssemblyHeader); <=====================
Codeunit<Assembly-Post>.PROCEDURE<OnAfterOnRun>
  Raised in: Codeunit<Assembly-Post>.<OnRun>
    Code lines:
    ...
    COMMIT;
    
    Window.CLOSE;
    Rec := AssemblyHeader;
    
    OnAfterOnRun(AssemblyHeader); <=====================
Codeunit<Assembly-Post>.PROCEDURE<OnAfterPost>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<Post>
    Code lines:
    ...
      TESTFIELD("Document Type","Document Type"::Order);
      PostLines(AssemblyHeader,AssemblyLine,PostedAssemblyHeader,ItemJnlPostLine,ResJnlPostLine,WhseJnlRegisterLine);
      PostHeader(AssemblyHeader,PostedAssemblyHeader,ItemJnlPostLine,WhseJnlRegisterLine,NeedUpdateUnitCost);
    END;
    
    OnAfterPost(AssemblyHeader); <=====================
Codeunit<Assembly-Post>.PROCEDURE<OnAfterPostedAssemblyHeaderModify>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<PostHeader>
    Code lines:
    ...
      PostedAssemblyHeader."Quantity (Base)" := QtyToOutputBase;
      PostedAssemblyHeader."Cost Amount" := ROUND(PostedAssemblyHeader.Quantity * "Unit Cost");
    
      InsertHeaderItemEntryRelation(PostedAssemblyHeader,ItemJnlPostLine,ItemLedgEntryNo);
      PostedAssemblyHeader.MODIFY;
      OnAfterPostedAssemblyHeaderModify(PostedAssemblyHeader,AssemblyHeader); <=====================
    END;
Codeunit<Assembly-Post>.PROCEDURE<OnAfterPostedAssemblyLineInsert>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<PostLines>
    Code lines:
    ...
          PostedAssemblyLine."Cost Amount" := ROUND(PostedAssemblyLine.Quantity * "Unit Cost");
          PostedAssemblyLine."Order No." := "Document No.";
          PostedAssemblyLine."Order Line No." := "Line No.";
          InsertLineItemEntryRelation(PostedAssemblyLine,ItemJnlPostLine,ItemLedgEntryNo);
          PostedAssemblyLine.INSERT;
          OnAfterPostedAssemblyLineInsert(PostedAssemblyLine,AssemblyLine); <=====================
        UNTIL NEXT = 0;
    END;
Codeunit<Assembly-Post>.PROCEDURE<OnBeforeFinalizePost>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<FinalizePost>
    Code lines:
    OnBeforeFinalizePost(AssemblyHeader); <=====================
    
    MakeInvtAdjmt;
    
    WITH AssemblyHeader DO BEGIN
      // Delete header and lines
      AssemblyLine.RESET;
      AssemblyLine.SETRANGE("Document Type","Document Type");
      AssemblyLine.SETRANGE("Document No.","No.");
      IF "Remaining Quantity (Base)" = 0 THEN BEGIN
    ...
Codeunit<Assembly-Post>.PROCEDURE<OnBeforeInitPost>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<InitPost>
    Code lines:
    OnBeforeInitPost(AssemblyHeader); <=====================
    
    WITH AssemblyHeader DO BEGIN
      TESTFIELD("Document Type");
      TESTFIELD("Posting Date");
      PostingDate := "Posting Date";
      IF GenJnlCheckLine.DateNotAllowed("Posting Date") THEN
        FIELDERROR("Posting Date",Text001);
      TESTFIELD("Item No.");
      CheckDim(AssemblyHeader);
    ...
Codeunit<Assembly-Post>.PROCEDURE<OnBeforeOnRun>
  Raised in: Codeunit<Assembly-Post>.<OnRun>
    Code lines:
    OnBeforeOnRun(AssemblyHeader); <=====================
    
    // Replace posting date if called from batch posting
    ValidatePostingDate(Rec);
    
    CLEARALL;
    AssemblyHeader := Rec;
    
    IF IsAsmToOrder THEN
      TESTFIELD("Assemble to Order",FALSE);
    ...
Codeunit<Assembly-Post>.PROCEDURE<OnBeforePost>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<Post>
    Code lines:
    OnBeforePost(AssemblyHeader); <=====================
    
    WITH AssemblyHeader DO BEGIN
      SuspendStatusCheck(TRUE);
      LockTables(AssemblyLine,AssemblyHeader);
    
      // Insert posted assembly header
      IF "Document Type" = "Document Type"::Order THEN BEGIN
        PostedAssemblyHeader.INIT;
        PostedAssemblyHeader.TRANSFERFIELDS(AssemblyHeader);
    ...
Codeunit<Azure AD User Management>.PROCEDURE<OnInitialize>
  Raised in: Codeunit<Azure AD User Management>.PROCEDURE<Initialize>
    Code lines:
    ...
    
    IF CanHandle THEN BEGIN
      IF NOT TryCreateGraph(Graph) THEN
        EXIT(FALSE)
    END ELSE
      OnInitialize(Graph); <=====================
    
    IsInitialized := NOT ISNULL(Graph);
    EXIT(IsInitialized);
Codeunit<Release Assembly Document>.PROCEDURE<OnAfterReleaseAssemblyDoc>
  Raised in: Codeunit<Release Assembly Document>.<OnRun>
    Code lines:
    ...
    MODIFY;
    
    IF "Document Type" = "Document Type"::Order THEN
      WhseAssemblyRelease.Release(Rec);
    
    OnAfterReleaseAssemblyDoc(Rec); <=====================
Codeunit<Release Assembly Document>.PROCEDURE<OnAfterReopenAssemblyDoc>
  Raised in: Codeunit<Release Assembly Document>.PROCEDURE<Reopen>
    Code lines:
    ...
      MODIFY(TRUE);
    
      IF "Document Type" = "Document Type"::Order THEN
        WhseAssemblyRelease.Reopen(AssemblyHeader);
    
      OnAfterReopenAssemblyDoc(AssemblyHeader); <=====================
    END;
Codeunit<Release Assembly Document>.PROCEDURE<OnBeforeReleaseAssemblyDoc>
  Raised in: Codeunit<Release Assembly Document>.<OnRun>
    Code lines:
    IF Status = Status::Released THEN
      EXIT;
    
    OnBeforeReleaseAssemblyDoc(Rec); <=====================
    
    AssemblyLine.SETRANGE("Document Type","Document Type");
    AssemblyLine.SETRANGE("Document No.","No.");
    AssemblyLine.SETFILTER(Type,'<>%1',AssemblyLine.Type::" ");
    AssemblyLine.SETFILTER(Quantity,'<>0');
    IF NOT AssemblyLine.FIND('-') THEN
    ...
Codeunit<Release Assembly Document>.PROCEDURE<OnBeforeReopenAssemblyDoc>
  Raised in: Codeunit<Release Assembly Document>.PROCEDURE<Reopen>
    Code lines:
    WITH AssemblyHeader DO BEGIN
      IF Status = Status::Open THEN
        EXIT;
    
      OnBeforeReopenAssemblyDoc(AssemblyHeader); <=====================
    
      Status := Status::Open;
      MODIFY(TRUE);
    
      IF "Document Type" = "Document Type"::Order THEN
    ...
Codeunit<Invite External Accountant>.PROCEDURE<OnInvitationCreateNewUser>
  Raised in: Codeunit<Invite External Accountant>.PROCEDURE<CreateNewUser>
    Code lines:
    ...
      Count := Count + 1;
      GuestGraphUser := Graph.GetUserByObjectId(InvitedUserId);
    UNTIL (GuestGraphUser.AssignedPlans.Count > 1) OR (Count = 10);
    
    IF GuestGraphUser.AssignedPlans.Count > 1 THEN BEGIN
      OnInvitationCreateNewUser(TRUE); <=====================
      AzureADUserManagement.CreateNewUserFromGraphUser(GuestGraphUser);
    END ELSE
      OnInvitationCreateNewUser(FALSE); <=====================
  Raised in: Codeunit<Invite External Accountant>.PROCEDURE<CreateNewUser>
    Code lines:
    ...
      Count := Count + 1;
      GuestGraphUser := Graph.GetUserByObjectId(InvitedUserId);
    UNTIL (GuestGraphUser.AssignedPlans.Count > 1) OR (Count = 10);
    
    IF GuestGraphUser.AssignedPlans.Count > 1 THEN BEGIN
      OnInvitationCreateNewUser(TRUE); <=====================
      AzureADUserManagement.CreateNewUserFromGraphUser(GuestGraphUser);
    END ELSE
      OnInvitationCreateNewUser(FALSE); <=====================
Codeunit<Assembly Line Management>.PROCEDURE<OnAfterTransferBOMComponent>
  Raised in: Codeunit<Assembly Line Management>.PROCEDURE<AddBOMLine2>
    Code lines:
    ...
      AssemblyLine."Position 3" := BOMComponent."Position 3";
      IF "Location Code" <> '' THEN
        IF AssemblyLine.Type = AssemblyLine.Type::Item THEN
          AssemblyLine.VALIDATE("Location Code","Location Code");
    
      OnAfterTransferBOMComponent(AssemblyLine,BOMComponent); <=====================
    
      AssemblyLine.MODIFY(TRUE);
    END;
Codeunit<Postcode Service Manager>.PROCEDURE<OnCheckIsServiceConfigured>
  Raised in: Codeunit<Postcode Service Manager>.PROCEDURE<IsServiceConfigured>
    Code lines:
    OnCheckIsServiceConfigured(ServiceKey,IsConfigured); <=====================
Codeunit<Postcode Service Manager>.PROCEDURE<OnDiscoverPostcodeServices>
  Raised in: Codeunit<Postcode Service Manager>.PROCEDURE<DiscoverPostcodeServices>
    Code lines:
    OnDiscoverPostcodeServices(TempServiceListNameValueBuffer); <=====================
Codeunit<Postcode Service Manager>.PROCEDURE<OnRetrieveAddress>
  Raised in: Codeunit<Postcode Service Manager>.PROCEDURE<TryGetAddress>
    Code lines:
    OnRetrieveAddress(ServiceKey,TempEnteredAutocompleteAddress,TempSelectedAddressNameValueBuffer, <=====================
      TempAutocompleteAddress,IsSuccessful,ErrorMsg);
Codeunit<Postcode Service Manager>.PROCEDURE<OnRetrieveAddressList>
  Raised in: Codeunit<Postcode Service Manager>.PROCEDURE<TryGetAddressList>
    Code lines:
    OnRetrieveAddressList(ServiceKey,TempEnteredAutocompleteAddress,TempAddressListNameValueBuffer,IsSuccessful,ErrorMSg); <=====================
Codeunit<Postcode Service Manager>.PROCEDURE<OnShowConfigurationPage>
  Raised in: Codeunit<Postcode Service Manager>.PROCEDURE<ShowConfigurationPage>
    Code lines:
    OnShowConfigurationPage(ServiceKey,IsSuccessful); <=====================
Codeunit<Purch.-Post (Yes/No)>.PROCEDURE<OnAfterPost>
  Raised in: Codeunit<Purch.-Post (Yes/No)>.PROCEDURE<Code>
    Code lines:
    ...
    IF PurchSetup."Post with Job Queue" THEN
      PurchPostViaJobQueue.EnqueuePurchDoc(PurchaseHeader)
    ELSE
      CODEUNIT.RUN(CODEUNIT::"Purch.-Post",PurchaseHeader);
    
    OnAfterPost(PurchaseHeader); <=====================
Codeunit<Purch.-Post (Yes/No)>.PROCEDURE<OnBeforeConfirmPost>
  Raised in: Codeunit<Purch.-Post (Yes/No)>.PROCEDURE<Code>
    Code lines:
    HideDialog := FALSE;
    
    OnBeforeConfirmPost(PurchaseHeader,HideDialog); <=====================
    IF NOT HideDialog THEN
      IF NOT ConfirmPost(PurchaseHeader) THEN
        EXIT;
    
    PurchSetup.GET;
    IF PurchSetup."Post with Job Queue" THEN
      PurchPostViaJobQueue.EnqueuePurchDoc(PurchaseHeader)
    ...
Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnDefaultRoleCenterID>
  Raised in: Codeunit<Conf./Personalization Mgt.>.PROCEDURE<DefaultRoleCenterID>
    Code lines:
    RoleCenterID := 9022; // BUSINESS MANAGER
    OnDefaultRoleCenterID(RoleCenterID); <=====================
    EXIT(RoleCenterID);
Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnInitializeProfiles>
  Raised in: Codeunit<Conf./Personalization Mgt.>.PROCEDURE<InitializeProfiles>
    Code lines:
    ...
    InsertProfile(SecurityAdministratorTxt,SecurityAdministratorDescriptionTxt,9024);
    InsertProfile(AccountantTxt,AccountantDescriptionTxt,9027);
    InsertProfile(O365SalesTxt,O365SalesDescriptionTxt,9029);
    InsertProfile(TeamMemberTxt,TeamMemberDescriptionTxt,9028);
    InsertProfile(AccountantPortalTxt,AccountantPortalDescriptionTxt,1151);
    OnInitializeProfiles; <=====================
    COMMIT;
Codeunit<Purch.-Post + Print>.PROCEDURE<OnAfterPost>
  Raised in: Codeunit<Purch.-Post + Print>.PROCEDURE<Code>
    Code lines:
    ...
    ELSE BEGIN
      CODEUNIT.RUN(CODEUNIT::"Purch.-Post",PurchHeader);
      GetReport(PurchHeader);
    END;
    
    OnAfterPost(PurchHeader); <=====================
Codeunit<Purch.-Post + Print>.PROCEDURE<OnBeforeConfirmPost>
  Raised in: Codeunit<Purch.-Post + Print>.PROCEDURE<Code>
    Code lines:
    HideDialog := FALSE;
    
    OnBeforeConfirmPost(PurchHeader,HideDialog); <=====================
    IF NOT HideDialog THEN
      IF NOT ConfirmPost(PurchHeader) THEN
        EXIT;
    
    PurchSetup.GET;
    IF PurchSetup."Post & Print with Job Queue" THEN
      PurchasePostViaJobQueue.EnqueuePurchDoc(PurchHeader)
    ...
Codeunit<Mail Management>.PROCEDURE<OnAfterDeleteTempAttachments>
  Raised in: Codeunit<Mail Management>.PROCEDURE<DeleteTempAttachments>
    Code lines:
    IF TryDeleteTempAttachment(EmailItem."Attachment File Path 2") THEN;
    IF TryDeleteTempAttachment(EmailItem."Attachment File Path 3") THEN;
    IF TryDeleteTempAttachment(EmailItem."Attachment File Path 4") THEN;
    IF TryDeleteTempAttachment(EmailItem."Attachment File Path 5") THEN;
    
    OnAfterDeleteTempAttachments(EmailItem); <=====================
Codeunit<Mail Management>.PROCEDURE<OnBeforeDoSending>
  Raised in: Codeunit<Mail Management>.PROCEDURE<CanSend>
    Code lines:
    OnBeforeDoSending(CancelSending); <=====================
    EXIT(NOT CancelSending);
Codeunit<Mail Management>.PROCEDURE<OnBeforeSentViaSMTP>
  Raised in: Codeunit<Mail Management>.PROCEDURE<SendViaSMTP>
    Code lines:
    ...
      IF "Send CC" <> '' THEN
        SMTPMail.AddCC("Send CC");
      IF "Send BCC" <> '' THEN
        SMTPMail.AddBCC("Send BCC");
    END;
    OnBeforeSentViaSMTP(TempEmailItem); <=====================
    MailSent := SMTPMail.TrySend;
    IF NOT MailSent AND NOT HideSMTPError THEN
      ERROR(SMTPMail.GetLastSendMailErrorText);
    EXIT(MailSent);
Codeunit<Purch.-Quote to Order>.PROCEDURE<OnAfterInsertAllPurchOrderLines>
  Raised in: Codeunit<Purch.-Quote to Order>.<OnRun>
    Code lines:
    ...
        OnAfterInsertPurchOrderLine(PurchQuoteLine,PurchOrderLine);
    
        PurchLineReserve.VerifyQuantity(PurchOrderLine,PurchQuoteLine);
      UNTIL PurchQuoteLine.NEXT = 0;
    
    OnAfterInsertAllPurchOrderLines(PurchOrderLine,Rec); <=====================
    
    PurchSetup.GET;
    IF PurchSetup."Archive Quotes and Orders" THEN
      ArchiveManagement.ArchPurchDocumentNoConfirm(Rec);
    ...
Codeunit<Purch.-Quote to Order>.PROCEDURE<OnAfterInsertPurchOrderLine>
  Raised in: Codeunit<Purch.-Quote to Order>.<OnRun>
    Code lines:
    ...
        PrepmtMgt.SetPurchPrepaymentPct(PurchOrderLine,PurchOrderHeader."Posting Date");
        PurchOrderLine.VALIDATE("Prepayment %");
        PurchOrderLine.DefaultDeferralCode;
        OnBeforeInsertPurchOrderLine(PurchOrderLine,PurchOrderHeader,PurchQuoteLine,Rec);
        PurchOrderLine.INSERT;
        OnAfterInsertPurchOrderLine(PurchQuoteLine,PurchOrderLine); <=====================
    
        PurchLineReserve.VerifyQuantity(PurchOrderLine,PurchQuoteLine);
      UNTIL PurchQuoteLine.NEXT = 0;
    
    ...
Codeunit<Purch.-Quote to Order>.PROCEDURE<OnBeforeDeletePurchQuote>
  Raised in: Codeunit<Purch.-Quote to Order>.<OnRun>
    Code lines:
    ...
    AssignItemCharges("Document Type","No.",PurchOrderHeader."Document Type",PurchOrderHeader."No.");
    
    ApprovalsMgmt.CopyApprovalEntryQuoteToOrder(RECORDID,PurchOrderHeader."No.",PurchOrderHeader.RECORDID);
    ApprovalsMgmt.DeleteApprovalEntries(RECORDID);
    
    OnBeforeDeletePurchQuote(Rec,PurchOrderHeader); <=====================
    
    DELETELINKS;
    DELETE;
    
    ...
Codeunit<Purch.-Quote to Order>.PROCEDURE<OnBeforeInsertPurchOrderHeader>
  Raised in: Codeunit<Purch.-Quote to Order>.PROCEDURE<CreatePurchHeader>
    Code lines:
    ...
      PurchOrderHeader."Inbound Whse. Handling Time" := "Inbound Whse. Handling Time";
    
      PurchOrderHeader."Prepayment %" := PrepmtPercent;
      IF PurchOrderHeader."Posting Date" = 0D THEN
        PurchOrderHeader."Posting Date" := WORKDATE;
      OnBeforeInsertPurchOrderHeader(PurchOrderHeader,PurchHeader); <=====================
      PurchOrderHeader.MODIFY;
    END;
Codeunit<Purch.-Quote to Order>.PROCEDURE<OnBeforeInsertPurchOrderLine>
  Raised in: Codeunit<Purch.-Quote to Order>.<OnRun>
    Code lines:
    ...
        IF Vend."Prepayment %" <> 0 THEN
          PurchOrderLine."Prepayment %" := Vend."Prepayment %";
        PrepmtMgt.SetPurchPrepaymentPct(PurchOrderLine,PurchOrderHeader."Posting Date");
        PurchOrderLine.VALIDATE("Prepayment %");
        PurchOrderLine.DefaultDeferralCode;
        OnBeforeInsertPurchOrderLine(PurchOrderLine,PurchOrderHeader,PurchQuoteLine,Rec); <=====================
        PurchOrderLine.INSERT;
        OnAfterInsertPurchOrderLine(PurchQuoteLine,PurchOrderLine);
    
        PurchLineReserve.VerifyQuantity(PurchOrderLine,PurchQuoteLine);
    ...
Codeunit<Document Report Mgt.>.PROCEDURE<OnAfterMergeWordDocument>
  Raised in: Codeunit<Document Report Mgt.>.PROCEDURE<MergeWordLayout>
    Code lines:
    ...
    
    OnBeforeMergeWordDocument;
    
    OutStrWordDoc := NAVWordXMLMerger.MergeWordDocument(InStrWordDoc,InStrXmlData,OutStrWordDoc) ;
    COMMIT;
    OnAfterMergeWordDocument(ReportID,InStrXmlData,OutTempBlob); <=====================
    
    CurrentFileType := '';
    CASE ReportAction OF
      ReportAction::SaveAsWord:
    ...
Codeunit<Document Report Mgt.>.PROCEDURE<OnBeforeMergeDocument>
  Raised in: Codeunit<Document Report Mgt.>.PROCEDURE<MergeWordLayout>
    Code lines:
    IF ReportAction = ReportAction::Print THEN
      PrinterName := FileName;
    
    OutTempBlob.Blob.CREATEOUTSTREAM(OutStrWordDoc);
    OnBeforeMergeDocument(ReportID,ReportAction,InStrXmlData,PrinterName,OutStrWordDoc,Handled,FileName = ''); <=====================
    IF Handled THEN BEGIN
      IF (FileName <> '') AND OutTempBlob.Blob.HASVALUE THEN
        OutTempBlob.Blob.EXPORT(FileName);
      EXIT;
    END;
    ...
Codeunit<Document Report Mgt.>.PROCEDURE<OnBeforeMergeWordDocument>
  Raised in: Codeunit<Document Report Mgt.>.PROCEDURE<MergeWordLayout>
    Code lines:
    ...
      CustomReportLayout.GetLayoutBlob(InTempBlob);
      InTempBlob.Blob.CREATEINSTREAM(InStrWordDoc);
      ValidateWordLayoutCheckOnly(ReportID,InStrWordDoc);
    END;
    
    OnBeforeMergeWordDocument; <=====================
    
    OutStrWordDoc := NAVWordXMLMerger.MergeWordDocument(InStrWordDoc,InStrXmlData,OutStrWordDoc) ;
    COMMIT;
    OnAfterMergeWordDocument(ReportID,InStrXmlData,OutTempBlob);
    ...
Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnAfterInsertAllPurchOrderLines>
  Raised in: Codeunit<Blanket Purch. Order to Order>.<OnRun>
    Code lines:
    ...
            PurchBlanketOrderLine.MODIFY;
          END;
        END;
      UNTIL PurchBlanketOrderLine.NEXT = 0;
    
    OnAfterInsertAllPurchOrderLines(Rec,PurchOrderHeader); <=====================
    
    IF PurchSetup."Default Posting Date" = PurchSetup."Default Posting Date"::"No Date" THEN BEGIN
      PurchOrderHeader."Posting Date" := 0D;
      PurchOrderHeader.MODIFY;
    ...
Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnAfterPurchOrderLineInsert>
  Raised in: Codeunit<Blanket Purch. Order to Order>.<OnRun>
    Code lines:
    ...
          PurchOrderLine."Dimension Set ID" := PurchBlanketOrderLine."Dimension Set ID";
          PurchOrderLine.DefaultDeferralCode;
          IF IsPurchOrderLineToBeInserted(PurchOrderLine) THEN BEGIN
            OnBeforeInsertPurchOrderLine(PurchOrderLine,PurchOrderHeader,PurchBlanketOrderLine,Rec);
            PurchOrderLine.INSERT;
            OnAfterPurchOrderLineInsert(PurchOrderLine); <=====================
          END;
    
          IF PurchBlanketOrderLine."Qty. to Receive" <> 0 THEN BEGIN
            PurchBlanketOrderLine.VALIDATE("Qty. to Receive",0);
    ...
Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnBeforeInsertPurchOrderHeader>
  Raised in: Codeunit<Blanket Purch. Order to Order>.PROCEDURE<CreatePurchHeader>
    Code lines:
    ...
      PurchOrderHeader.Status := PurchOrderHeader.Status::Open;
      PurchOrderHeader."No." := '';
      PurchOrderHeader.InitRecord;
    
      PurchOrderLine.LOCKTABLE;
      OnBeforeInsertPurchOrderHeader(PurchOrderHeader,PurchHeader); <=====================
      PurchOrderHeader.INSERT(TRUE);
    
      IF "Order Date" = 0D THEN
        PurchOrderHeader."Order Date" := WORKDATE
    ...
Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnBeforeInsertPurchOrderLine>
  Raised in: Codeunit<Blanket Purch. Order to Order>.<OnRun>
    Code lines:
    ...
          PurchOrderLine."Shortcut Dimension 1 Code" := PurchBlanketOrderLine."Shortcut Dimension 1 Code";
          PurchOrderLine."Shortcut Dimension 2 Code" := PurchBlanketOrderLine."Shortcut Dimension 2 Code";
          PurchOrderLine."Dimension Set ID" := PurchBlanketOrderLine."Dimension Set ID";
          PurchOrderLine.DefaultDeferralCode;
          IF IsPurchOrderLineToBeInserted(PurchOrderLine) THEN BEGIN
            OnBeforeInsertPurchOrderLine(PurchOrderLine,PurchOrderHeader,PurchBlanketOrderLine,Rec); <=====================
            PurchOrderLine.INSERT;
            OnAfterPurchOrderLineInsert(PurchOrderLine);
          END;
    
    ...
Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnBeforePurchOrderHeaderModify>
  Raised in: Codeunit<Blanket Purch. Order to Order>.PROCEDURE<CreatePurchHeader>
    Code lines:
    ...
    
      PurchOrderHeader.InitFromPurchHeader(PurchHeader);
      PurchOrderHeader.VALIDATE("Posting Date");
    
      PurchOrderHeader."Prepayment %" := PrepmtPercent;
      OnBeforePurchOrderHeaderModify(PurchOrderHeader,PurchHeader); <=====================
      PurchOrderHeader.MODIFY;
    END;
Codeunit<Payment Registration Mgt.>.PROCEDURE<OnAfterPostPaymentRegistration>
  Raised in: Codeunit<Payment Registration Mgt.>.PROCEDURE<Post>
    Code lines:
    ...
      END;
    UNTIL TempPaymentRegistrationBuffer.NEXT = 0;
    
    IF NOT PreviewMode THEN BEGIN
      CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post Batch",GenJournalLine);
      OnAfterPostPaymentRegistration(TempPaymentRegistrationBuffer); <=====================
    END ELSE
      GenJnlPostBatch.Preview(GenJournalLine);
Codeunit<Identity Management>.PROCEDURE<OnBeforeGetApplicationIdentifier>
  Raised in: Codeunit<Identity Management>.PROCEDURE<IsInvAppId>
    Code lines:
    AppId := APPLICATIONIDENTIFIER;
    OnBeforeGetApplicationIdentifier(AppId); <=====================
    EXIT(AppId = InvoiceTok);
  Raised in: Codeunit<Identity Management>.PROCEDURE<IsFinAppId>
    Code lines:
    AppId := APPLICATIONIDENTIFIER;
    OnBeforeGetApplicationIdentifier(AppId); <=====================
    EXIT(AppId = FinancialsTok);
  Raised in: Codeunit<Identity Management>.PROCEDURE<IsNavAppId>
    Code lines:
    AppId := APPLICATIONIDENTIFIER;
    OnBeforeGetApplicationIdentifier(AppId); <=====================
    EXIT(AppId = NavTok);
  Raised in: Codeunit<Identity Management>.PROCEDURE<IsC5AppId>
    Code lines:
    AppId := APPLICATIONIDENTIFIER;
    OnBeforeGetApplicationIdentifier(AppId); <=====================
    EXIT(AppId = C5Tok);
Codeunit<Routing Line-Copy Lines>.PROCEDURE<OnAfterCopyRouting>
  Raised in: Codeunit<Routing Line-Copy Lines>.PROCEDURE<CopyRouting>
    Code lines:
    ...
        RoutingCommentLine."Routing No." := RoutingHeader."No.";
        RoutingCommentLine."Version Code" := ToVersionCode;
        RoutingCommentLine.INSERT;
      UNTIL FromRoutingCommentLine.NEXT = 0;
    
    OnAfterCopyRouting(RoutingHeader,FromRoutingHeaderNo,FromVersionCode,ToVersionCode); <=====================
Codeunit<Routing Line-Copy Lines>.PROCEDURE<OnAfterDeleteRouting>
  Raised in: Codeunit<Routing Line-Copy Lines>.PROCEDURE<CopyRouting>
    Code lines:
    ...
    
    RoutingLine.SETRANGE("Routing No.",RoutingHeader."No.");
    RoutingLine.SETRANGE("Version Code",ToVersionCode);
    RoutingLine.DELETEALL(TRUE);
    
    OnAfterDeleteRouting(RoutingHeader,ToVersionCode); <=====================
    
    RoutingLine2.SETRANGE("Routing No.",FromRoutingHeaderNo);
    RoutingLine2.SETRANGE("Version Code",FromVersionCode);
    IF RoutingLine2.FIND('-') THEN
    ...
Codeunit<Calendar Absence Management>.PROCEDURE<OnAfterUpdateAbsence>
  Raised in: Codeunit<Calendar Absence Management>.PROCEDURE<UpdateAbsence>
    Code lines:
    ...
    IF NOT Remove THEN
      CalAbsentEntry.MODIFY;
    
    GatherEntries(CalendarEntry3);
    
    OnAfterUpdateAbsence(CalAbsentEntry); <=====================
Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterTransferBOMComponent>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<TransferBOM>
    Code lines:
    ...
                    ProdOrderComp."Planning Level Code" := ProdOrderLine."Planning Level Code" + 1;
                    Item2.GET(ProdOrderComp."Item No.");
                    ProdOrderComp."Item Low-Level Code" := Item2."Low-Level Code";
                  END;
                  ProdOrderComp.GetDefaultBin;
                  OnAfterTransferBOMComponent(ProdOrderLine,ProdBOMLine[Level],ProdOrderComp); <=====================
                  ProdOrderComp.INSERT(TRUE);
                END ELSE BEGIN
                  ProdOrderComp.SetIgnoreErrors;
                  ProdOrderComp.SETCURRENTKEY(Status,"Prod. Order No."); // Reset key
    ...
Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterTransferRouting>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<TransferRouting>
    Code lines:
    ...
        ProdOrderRoutingLine."Starting Time" := ProdOrderLine."Starting Time";
        ProdOrderRoutingLine."Starting Date" := ProdOrderLine."Starting Date";
        ProdOrderRoutingLine."Ending Time" := ProdOrderLine."Ending Time";
        ProdOrderRoutingLine."Ending Date" := ProdOrderLine."Ending Date";
        ProdOrderRoutingLine.UpdateDatetime;
        OnAfterTransferRoutingLine(ProdOrderLine,RoutingLine,ProdOrderRoutingLine); <=====================
        ProdOrderRoutingLine.INSERT;
        TransferTaskInfo(ProdOrderRoutingLine,ProdOrderLine."Routing Version Code");
      UNTIL RoutingLine.NEXT = 0;
    
Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterTransferRoutingLine>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<TransferRouting>
    Code lines:
    ...
        ProdOrderRoutingLine."Starting Time" := ProdOrderLine."Starting Time";
        ProdOrderRoutingLine."Starting Date" := ProdOrderLine."Starting Date";
        ProdOrderRoutingLine."Ending Time" := ProdOrderLine."Ending Time";
        ProdOrderRoutingLine."Ending Date" := ProdOrderLine."Ending Date";
        ProdOrderRoutingLine.UpdateDatetime;
        OnAfterTransferRoutingLine(ProdOrderLine,RoutingLine,ProdOrderRoutingLine); <=====================
        ProdOrderRoutingLine.INSERT;
        TransferTaskInfo(ProdOrderRoutingLine,ProdOrderLine."Routing Version Code");
      UNTIL RoutingLine.NEXT = 0;
    
Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterTransferTaskInfo>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<TransferTaskInfo>
    Code lines:
    ...
        ProdOrderRtngCommentLine."Prod. Order No." := FromProdOrderRoutingLine."Prod. Order No.";
        ProdOrderRtngCommentLine."Routing Reference No." := FromProdOrderRoutingLine."Routing Reference No.";
        ProdOrderRtngCommentLine.INSERT;
      UNTIL RoutingCommentLine.NEXT = 0;
    
    OnAfterTransferTaskInfo(FromProdOrderRoutingLine,VersionCode); <=====================
Codeunit<Calculate Routing Line>.PROCEDURE<OnAfterCalculateRoutingLine>
  Raised in: Codeunit<Calculate Routing Line>.PROCEDURE<CalculateRoutingLine>
    Code lines:
    ...
        CalcRoutingLineBack(CalcStartEndDate)
      ELSE
        CalcRoutingLineForward(CalcStartEndDate);
    END;
    
    OnAfterCalculateRoutingLine(ProdOrderRoutingLine); <=====================
    
    ProdOrderRoutingLine2 := ProdOrderRoutingLine;
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnAfterProcessProdOrderLine>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<ProcessProdOrderLines>
    Code lines:
    ...
    
    IF ProdOrderLine.FINDSET(TRUE) THEN
      REPEAT
        IF NOT CalcProdOrder.Calculate(ProdOrderLine,Direction,TRUE,TRUE,TRUE,LetDueDateDecrease) THEN
          ErrorOccured := TRUE;
        OnAfterProcessProdOrderLine(ProdOrderLine,Direction,LetDueDateDecrease); <=====================
      UNTIL ProdOrderLine.NEXT = 0;
    
    EXIT(NOT ErrorOccured);
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnAfterProdOrderLineInsert>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<Copy>
    Code lines:
    ...
          OnBeforeProdOrderLineInsert(ProdOrderLine,ProdOrder,SalesLineIsSet,SalesLine);
          ProdOrderLine.INSERT;
          IF ProdOrderLine.HasErrorOccured THEN
            ErrorOccured := TRUE;
    
          OnAfterProdOrderLineInsert(ProdOrder,ProdOrderLine); <=====================
        END;
      ProdOrder."Source Type"::Family:
        IF NOT CopyFromFamily THEN
          ErrorOccured := TRUE;
    ...
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<InsertProdOrderLine>
    Code lines:
    ...
      ProdOrderLine3.MODIFY;
      ProdOrderLine := ProdOrderLine3;
      EXIT(FALSE);
    END;
    ProdOrderLine.INSERT;
    OnAfterProdOrderLineInsert(ProdOrder,ProdOrderLine); <=====================
    EXIT(TRUE);
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnAfterUpdateProdOrderLine>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<UpdateProdOrderLine>
    Code lines:
    ...
          ProdOrderLine3.MODIFY;
        END;
      UNTIL ProdOrderComp3.NEXT = 0;
    TempOldProdOrderComp.DELETEALL;
    
    OnAfterUpdateProdOrderLine(ProdOrderLine,Direction,LetDueDateDecrease); <=====================
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnBeforeProdOrderLineInsert>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<Copy>
    Code lines:
    ...
          ProdOrderLine."Description 2" := ProdOrder."Description 2";
          ProdOrderLine.VALIDATE(Quantity,ProdOrder.Quantity);
          ProdOrderLine.UpdateDatetime;
          IF SalesLineIsSet THEN
            CopyDimFromSalesLine(SalesLine,ProdOrderLine);
          OnBeforeProdOrderLineInsert(ProdOrderLine,ProdOrder,SalesLineIsSet,SalesLine); <=====================
          ProdOrderLine.INSERT;
          IF ProdOrderLine.HasErrorOccured THEN
            ErrorOccured := TRUE;
    
    ...
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<CopyFromSalesOrder>
    Code lines:
    ...
        ProdOrderLine."Due Date" := SalesLine."Shipment Date";
        ProdOrderLine."Ending Date" :=
          LeadTimeMgt.PlannedEndingDate(ProdOrderLine."Item No.",ProdOrderLine."Location Code",'',ProdOrderLine."Due Date",'',2);
        ProdOrderLine.VALIDATE("Ending Date");
    
        OnBeforeProdOrderLineInsert(ProdOrderLine,ProdOrder,TRUE,SalesLine); <=====================
        InsertProdOrderLine;
        IF ProdOrderLine.HasErrorOccured THEN
          ErrorOccured := TRUE;
        ItemTrackingMgt.CopyItemTracking2(SalesLine.RowID1,ProdOrderLine.RowID1,TRUE,TRUE);
    ...
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCheckMakeOrderLineBeforeIf>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<CheckMakeOrderLine>
    Code lines:
    ...
    ELSE BEGIN
      ParentItem.GET(ProdOrderLine2."Item No.");
      MakeProdOrder := ParentItem."Manufacturing Policy" = ParentItem."Manufacturing Policy"::"Make-to-Order";
    END;
    
    OnCheckMakeOrderLineBeforeIf(ProdOrder,ProdOrderLine2,ProdOrderComp,MakeProdOrder); <=====================
    
    IF NOT MakeProdOrder THEN
      EXIT(FALSE);
    
    ...
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<CheckMakeOrderLine>
    Code lines:
    ...
    ELSE BEGIN
      ParentItem.GET(ProdOrderLine2."Item No.");
      MakeProdOrder := ParentItem."Manufacturing Policy" = ParentItem."Manufacturing Policy"::"Make-to-Order";
    END;
    
    OnCheckMakeOrderLineBeforeIf(ProdOrder,ProdOrderLine2,ProdOrderComp,MakeProdOrder); <=====================
    
    IF NOT MakeProdOrder THEN
      EXIT(FALSE);
    
    ...
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCheckMakeOrderLineBeforeInsert>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<CheckMakeOrderLine>
    Code lines:
    ...
    ProdOrderLine."Ending Time" := ProdOrderComp."Due Time";
    ProdOrderLine.UpdateDatetime;
    // this InsertNew is responsible for controlling if same POLine is added up or new POLine is created
    InsertNew := InsertNew AND (ProdOrderComp."Planning Level Code" > 1);
    
    OnCheckMakeOrderLineBeforeInsert(ProdOrderLine,ProdOrderComp); <=====================
    Inserted := InsertProdOrderLine;
    IF MultiLevel THEN
      IF Inserted THEN
        CalcProdOrder.Calculate(ProdOrderLine,Direction::Backward,TRUE,TRUE,TRUE,LetDueDateDecrease)
    ...
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCopyFromFamilyOnBeforeInsertProdOrderLine>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<CopyFromFamily>
    Code lines:
    ...
          ProdOrderLine.VALIDATE("Unit of Measure Code",FamilyLine."Unit of Measure Code");
          ProdOrderLine.VALIDATE(Quantity,FamilyLine.Quantity * ProdOrder.Quantity);
          ProdOrderLine."Routing No." := Family."Routing No.";
          ProdOrderLine."Routing Reference No." := 0;
          ProdOrderLine.UpdateDatetime;
          OnCopyFromFamilyOnBeforeInsertProdOrderLine(ProdOrderLine,FamilyLine); <=====================
          InsertProdOrderLine;
          IF ProdOrderLine.HasErrorOccured THEN
            ErrorOccured := TRUE;
        END;
    ...
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCopyFromSalesOrderOnBeforeProdOrderLineModify>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<CopyFromSalesOrder>
    Code lines:
    ...
          SalesLineReserve.BindToProdOrder(SalesLine,ProdOrderLine,
            ProdOrderLine."Remaining Quantity" - ProdOrderLine."Reserved Quantity",
            ProdOrderLine."Remaining Qty. (Base)" - ProdOrderLine."Reserved Qty. (Base)");
        END;
        CopyDimFromSalesLine(SalesLine,ProdOrderLine);
        OnCopyFromSalesOrderOnBeforeProdOrderLineModify(ProdOrderLine,SalesLine,SalesPlanLine); <=====================
        ProdOrderLine.MODIFY;
      UNTIL (SalesPlanLine.NEXT = 0);
    EXIT(NOT ErrorOccured);
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCopyFromSalesOrderOnBeforeSalesPlanLineInsert>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<CopyFromSalesOrder>
    Code lines:
    ...
          IF IsReplSystemProdOrder(SalesLine."No.",SalesLine."Variant Code",SalesLine."Location Code") THEN BEGIN
            SalesPlanLine.INIT;
            SalesPlanLine."Sales Order No." := SalesLine."Document No.";
            SalesPlanLine."Sales Order Line No." := SalesLine."Line No.";
            SalesPlanLine.VALIDATE("Item No.",SalesLine."No.");
            OnCopyFromSalesOrderOnBeforeSalesPlanLineInsert(SalesLine,SalesPlanLine); <=====================
            SalesPlanLine.INSERT;
          END;
      UNTIL SalesLine.NEXT = 0;
    
    ...
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnInitProdOrderLineAfterScrap>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<InitProdOrderLine>
    Code lines:
    ...
    ELSE
      CalcProdOrder.SetProdOrderLineBinCodeFromRoute(ProdOrderLine,ProdOrderLine."Location Code",ProdOrderLine."Routing No.");
    
    Item.GET(ItemNo);
    ProdOrderLine."Scrap %" := Item."Scrap %";
    OnInitProdOrderLineAfterScrap(ProdOrderLine,ProdOrder); <=====================
    ProdOrderLine."Due Date" := ProdOrder."Due Date";
    ProdOrderLine."Starting Date" := ProdOrder."Starting Date";
    ProdOrderLine."Starting Time" := ProdOrder."Starting Time";
    ProdOrderLine."Ending Date" := ProdOrder."Ending Date";
    ...
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnInitProdOrderLineAfterVariantCode>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<InitProdOrderLine>
    Code lines:
    ...
    ProdOrderLine."Line No." := NextProdOrderLineNo;
    ProdOrderLine."Routing Reference No." := ProdOrderLine."Line No.";
    ProdOrderLine.VALIDATE("Item No.",ItemNo);
    ProdOrderLine."Location Code" := LocationCode;
    ProdOrderLine."Variant Code" := VariantCode;
    OnInitProdOrderLineAfterVariantCode(ProdOrderLine,VariantCode); <=====================
    IF (LocationCode = ProdOrder."Location Code") AND (ProdOrder."Bin Code" <> '') THEN
      ProdOrderLine.VALIDATE("Bin Code",ProdOrder."Bin Code")
    ELSE
      CalcProdOrder.SetProdOrderLineBinCodeFromRoute(ProdOrderLine,ProdOrderLine."Location Code",ProdOrderLine."Routing No.");
    ...
Codeunit<Create Prod. Order from Sale>.PROCEDURE<OnAfterCreateProdOrder>
  Raised in: Codeunit<Create Prod. Order from Sale>.PROCEDURE<CreateProdOrder>
    Code lines:
    ...
      ProdOrder.VALIDATE("Source No.",SalesLine."No.");
      ProdOrder.VALIDATE(Description,SalesLine.Description);
      SalesLine.CALCFIELDS("Reserved Qty. (Base)");
      ProdOrder.Quantity := SalesLine."Outstanding Qty. (Base)" - SalesLine."Reserved Qty. (Base)";
    END;
    OnAfterCreateProdOrderFromSalesLine(ProdOrder,SalesLine); <=====================
    ProdOrder.MODIFY;
    
    ProdOrder.SETRANGE("No.",ProdOrder."No.");
    CreateProdOrderLines.SetSalesLine(SalesLine);
    ...
Codeunit<Create Prod. Order from Sale>.PROCEDURE<OnAfterCreateProdOrderFromSalesLine>
  Raised in: Codeunit<Create Prod. Order from Sale>.PROCEDURE<CreateProdOrder>
    Code lines:
    ...
      ProdOrder.VALIDATE("Source No.",SalesLine."No.");
      ProdOrder.VALIDATE(Description,SalesLine.Description);
      SalesLine.CALCFIELDS("Reserved Qty. (Base)");
      ProdOrder.Quantity := SalesLine."Outstanding Qty. (Base)" - SalesLine."Reserved Qty. (Base)";
    END;
    OnAfterCreateProdOrderFromSalesLine(ProdOrder,SalesLine); <=====================
    ProdOrder.MODIFY;
    
    ProdOrder.SETRANGE("No.",ProdOrder."No.");
    CreateProdOrderLines.SetSalesLine(SalesLine);
    ...
Codeunit<Planning Line Management>.PROCEDURE<OnAfterTransferRtngLine>
  Raised in: Codeunit<Planning Line Management>.PROCEDURE<TransferRouting>
    Code lines:
    ...
        PlanningRtngLine."Starting Time" := ReqLine."Starting Time";
        PlanningRtngLine."Ending Date" := ReqLine."Ending Date";
        PlanningRtngLine."Ending Time" := ReqLine."Ending Time";
        PlanningRtngLine."Input Quantity" := ReqLine.Quantity;
        PlanningRtngLine.UpdateDatetime;
        OnAfterTransferRtngLine(ReqLine,RtngLine,PlanningRtngLine); <=====================
        PlanningRtngLine.INSERT;
      UNTIL RtngLine.NEXT = 0;
Codeunit<Planning Line Management>.PROCEDURE<OnBeforeInsertAsmPlanningComponent>
  Raised in: Codeunit<Planning Line Management>.PROCEDURE<TransferAsmBOM>
    Code lines:
    ...
    
                  PlanningComponent."Flushing Method" := CompSKU."Flushing Method";
                  PlanningComponent."Ref. Order Type" := ReqLine."Ref. Order Type";
                  PlanningComponent."Ref. Order Status" := ReqLine."Ref. Order Status";
                  PlanningComponent."Ref. Order No." := ReqLine."Ref. Order No.";
                  OnBeforeInsertAsmPlanningComponent(ReqLine,AsmBOMComp[Level],PlanningComponent); <=====================
                  PlanningComponent.INSERT;
                END ELSE BEGIN
                  PlanningComponent.RESET;
                  PlanningComponent.BlockDynamicTracking(Blocked);
    ...
Codeunit<Planning Line Management>.PROCEDURE<OnBeforeInsertPlanningComponent>
  Raised in: Codeunit<Planning Line Management>.PROCEDURE<TransferBOM>
    Code lines:
    ...
                    PlanningComponent."Planning Level Code" := ReqLine."Planning Level" + 1;
    
                  PlanningComponent."Ref. Order Type" := ReqLine."Ref. Order Type";
                  PlanningComponent."Ref. Order Status" := ReqLine."Ref. Order Status";
                  PlanningComponent."Ref. Order No." := ReqLine."Ref. Order No.";
                  OnBeforeInsertPlanningComponent(ReqLine,ProdBOMLine[Level],PlanningComponent); <=====================
                  PlanningComponent.INSERT;
                END ELSE BEGIN
                  PlanningComponent.RESET;
                  PlanningComponent.BlockDynamicTracking(Blocked);
    ...
Codeunit<Planning Line Management>.PROCEDURE<OnBeforeModifyPlanningComponent>
  Raised in: Codeunit<Planning Line Management>.PROCEDURE<TransferBOM>
    Code lines:
    ...
                  PlanningComponent.BlockDynamicTracking(Blocked);
                  PlanningComponent.VALIDATE(
                    "Quantity per",
                    PlanningComponent."Quantity per" + ProdBOMLine[Level]."Quantity per" * LineQtyPerUOM / ItemQtyPerUOM);
                  PlanningComponent.VALIDATE("Routing Link Code",ProdBOMLine[Level]."Routing Link Code");
                  OnBeforeModifyPlanningComponent(ReqLine,ProdBOMLine[Level],PlanningComponent); <=====================
                  PlanningComponent.MODIFY;
                END;
    
                // A temporary list of Planning Components handled is sustained:
    ...
Codeunit<Planning Line Management>.PROCEDURE<OnCheckMultiLevelStructureOnBeforeInsertPlanningLine>
  Raised in: Codeunit<Planning Line Management>.PROCEDURE<CheckMultiLevelStructure>
    Code lines:
    ...
    
        ReqLine3."Planning Level" := PlanningLevel + 1;
        ReqLine3."Related to Planning Line" := ReqLine2."Line No.";
        ReqLine3."Order Promising ID" := ReqLine2."Order Promising ID";
        ReqLine3."Order Promising Line ID" := ReqLine2."Order Promising Line ID";
        OnCheckMultiLevelStructureOnBeforeInsertPlanningLine(ReqLine3,PlanningComp); <=====================
        InsertPlanningLine(ReqLine3);
        ReqLine3.Quantity :=
          ROUND(
            ReqLine3."Quantity (Base)" /
    ...
Codeunit<Planning Line Management>.PROCEDURE<OnTransferBOMOnBeforeGetDefaultBin>
  Raised in: Codeunit<Planning Line Management>.PROCEDURE<TransferBOM>
    Code lines:
    ...
                  PlanningComponent.Description := ProdBOMLine[Level].Description;
                  PlanningComponent."Planning Line Origin" := ReqLine."Planning Line Origin";
                  PlanningComponent.VALIDATE("Unit of Measure Code",ProdBOMLine[Level]."Unit of Measure Code");
                  PlanningComponent."Quantity per" := ProdBOMLine[Level]."Quantity per" * LineQtyPerUOM / ItemQtyPerUOM;
                  PlanningComponent.VALIDATE("Routing Link Code",ProdBOMLine[Level]."Routing Link Code");
                  OnTransferBOMOnBeforeGetDefaultBin(PlanningComponent,ProdBOMLine[Level]); <=====================
                  PlanningComponent.GetDefaultBin;
                  PlanningComponent.Length := ProdBOMLine[Level].Length;
                  PlanningComponent.Width := ProdBOMLine[Level].Width;
                  PlanningComponent.Weight := ProdBOMLine[Level].Weight;
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnAfterInsertAsmHeader>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<InsertAsmHeader>
    Code lines:
    ...
    IF BOMComp.FIND('-') THEN
      REPEAT
        AsmHeader.AddBOMLine(BOMComp);
      UNTIL BOMComp.NEXT = 0;
    
    OnAfterInsertAsmHeader(ReqLine,AsmHeader); <=====================
    
    PrintAsmOrder(AsmHeader);
    TempDocumentEntry.INIT;
    TempDocumentEntry."Table ID" := DATABASE::"Assembly Header";
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnAfterInsertProdOrderLine>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<InsertProdOrderLine>
    Code lines:
    ...
    TransferCapNeed(ReqLine,ProdOrder,ProdOrderLine."Routing No.",ProdOrderLine."Routing Reference No.");
    
    IF ProdOrderLine."Planning Level Code" > 0 THEN
      UpdateComponentLink(ProdOrderLine);
    
    OnAfterInsertProdOrderLine(ReqLine,ProdOrder,ProdOrderLine,Item); <=====================
    
    FinalizeOrderHeader(ProdOrder);
Codeunit<Carry Out Action>.PROCEDURE<OnAfterTransferAsmPlanningComp>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<TransferAsmPlanningComp>
    Code lines:
    ...
        AsmLine."Cost Amount" := PlanningComponent."Cost Amount";
    
        AsmLine."Shortcut Dimension 1 Code" := PlanningComponent."Shortcut Dimension 1 Code";
        AsmLine."Shortcut Dimension 2 Code" := PlanningComponent."Shortcut Dimension 2 Code";
    
        OnAfterTransferAsmPlanningComp(PlanningComponent,AsmLine); <=====================
    
        AsmLine.INSERT;
    
        ReservePlanningComponent.TransferPlanningCompToAsmLine(PlanningComponent,AsmLine,0,TRUE);
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnAfterTransferPlanningComp>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<TransferBOM>
    Code lines:
    ...
          ROUND(ProdOrderComp2."Remaining Quantity" * ProdOrderComp2."Qty. per Unit of Measure",0.00001);
        ProdOrderComp2."Shortcut Dimension 1 Code" := PlanningComponent."Shortcut Dimension 1 Code";
        ProdOrderComp2."Shortcut Dimension 2 Code" := PlanningComponent."Shortcut Dimension 2 Code";
        ProdOrderComp2."Dimension Set ID" := PlanningComponent."Dimension Set ID";
        ProdOrderComp2.UpdateDatetime;
        OnAfterTransferPlanningComp(PlanningComponent,ProdOrderComp2); <=====================
        ProdOrderComp2.INSERT;
        ReservePlanningComponent.TransferPlanningCompToPOComp(PlanningComponent,ProdOrderComp2,0,TRUE);
        IF ProdOrderComp2.Status IN [ProdOrderComp2.Status::"Firm Planned",ProdOrderComp2.Status::Released] THEN
          ProdOrderComp2.AutoReserve;
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnAfterTransferPlanningRtngLine>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<TransferRouting>
    Code lines:
    ...
          ProdOrderRtngLine."Open Shop Floor Bin Code" := WMSManagement.GetProdCenterBinCode(
              PlanningRtngLine.Type,PlanningRtngLine."No.",ReqLine."Location Code",TRUE,
              FlushingMethod);
    
        ProdOrderRtngLine.UpdateDatetime;
        OnAfterTransferPlanningRtngLine(PlanningRtngLine,ProdOrderRtngLine); <=====================
        ProdOrderRtngLine.INSERT;
        CalcProdOrder.TransferTaskInfo(ProdOrderRtngLine,ReqLine."Routing Version Code");
      UNTIL PlanningRtngLine.NEXT = 0;
    
Codeunit<Carry Out Action>.PROCEDURE<OnInsertProdOrderLineWithReqLine>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<InsertProdOrderLine>
    Code lines:
    ...
      ProdOrderLine."Planning Flexibility" := ReqLine."Planning Flexibility";
    ProdOrderLine.UpdateDatetime;
    ProdOrderLine."Shortcut Dimension 1 Code" := ReqLine."Shortcut Dimension 1 Code";
    ProdOrderLine."Shortcut Dimension 2 Code" := ReqLine."Shortcut Dimension 2 Code";
    ProdOrderLine."Dimension Set ID" := ReqLine."Dimension Set ID";
    OnInsertProdOrderLineWithReqLine(ProdOrderLine,ReqLine); <=====================
    ProdOrderLine.INSERT;
    CalculateProdOrder.CalculateProdOrderDates(ProdOrderLine,FALSE);
    
    ReqLineReserve.TransferPlanningLineToPOLine(ReqLine,ProdOrderLine,ReqLine."Net Quantity (Base)",FALSE);
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnInsertProdOrderWithReqLine>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<InsertProdOrder>
    Code lines:
    ...
      ProdOrder."Cost Amount" := ReqLine."Cost Amount";
      ProdOrder."Shortcut Dimension 1 Code" := ReqLine."Shortcut Dimension 1 Code";
      ProdOrder."Shortcut Dimension 2 Code" := ReqLine."Shortcut Dimension 2 Code";
      ProdOrder."Dimension Set ID" := ReqLine."Dimension Set ID";
      ProdOrder.UpdateDatetime;
      OnInsertProdOrderWithReqLine(ProdOrder,ReqLine); <=====================
      ProdOrder.MODIFY;
      InsertTempProdOrder(ReqLine,ProdOrder);
    END;
    InsertProdOrderLine(ReqLine,ProdOrder,Item);
Codeunit<Carry Out Action>.PROCEDURE<OnInsertTransLineWithReqLine>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<InsertTransLine>
    Code lines:
    ...
    TransLine."Shortcut Dimension 2 Code" := ReqLine."Shortcut Dimension 2 Code";
    TransLine."Dimension Set ID" := ReqLine."Dimension Set ID";
    TransLine."Receipt Date" := ReqLine."Due Date";
    TransLine."Shipment Date" := ReqLine."Transfer Shipment Date";
    TransLine.VALIDATE("Planning Flexibility",ReqLine."Planning Flexibility");
    OnInsertTransLineWithReqLine(TransLine,ReqLine); <=====================
    TransLine.INSERT;
    
    ReqLineReserve.TransferReqLineToTransLine(ReqLine,TransLine,ReqLine."Quantity (Base)",FALSE);
    IF ReqLine.Reserve THEN
Codeunit<Create Reserv. Entry>.PROCEDURE<OnAfterCopyFromInsertReservEntry>
  Raised in: Codeunit<Create Reserv. Entry>.PROCEDURE<CreateEntry>
    Code lines:
    ...
      ReservEntry2."Source Ref. No." := InsertReservEntry2."Source Ref. No.";
      ReservEntry2."Serial No." := InsertReservEntry2."Serial No.";
      ReservEntry2."Lot No." := InsertReservEntry2."Lot No.";
      ReservEntry2."Qty. per Unit of Measure" := InsertReservEntry2."Qty. per Unit of Measure";
    
      OnAfterCopyFromInsertReservEntry(InsertReservEntry2,ReservEntry2); <=====================
    
      IF NOT QtyToHandleAndInvoiceIsSet THEN BEGIN
        ReservEntry2."Qty. to Handle (Base)" := ReservEntry2."Quantity (Base)";
        ReservEntry2."Qty. to Invoice (Base)" := ReservEntry2."Quantity (Base)";
    ...
Codeunit<Create Reserv. Entry>.PROCEDURE<OnBeforeUseOldReservEntry>
  Raised in: Codeunit<Create Reserv. Entry>.PROCEDURE<TransferReservEntry>
    Code lines:
    ...
        NewReservEntry.VALIDATE("Quantity (Base)",-TransferQty);
        NewReservEntry.MODIFY;
      END;
    END ELSE
      IF ABS(TransferQty) < ABS(OldReservEntry."Quantity (Base)") THEN BEGIN
        OnBeforeUseOldReservEntry(OldReservEntry,InsertReservEntry); <=====================
        IF OldReservEntry.Binding = OldReservEntry.Binding::"Order-to-Order" THEN
          SetBinding(OldReservEntry.Binding::"Order-to-Order");
        IF OldReservEntry."Disallow Cancellation" THEN
          SetDisallowCancellation(OldReservEntry."Disallow Cancellation");
    ...
Codeunit<Reservation Engine Mgt.>.PROCEDURE<OnBeforeUpdateItemTracking>
  Raised in: Codeunit<Reservation Engine Mgt.>.PROCEDURE<ModifyItemTrackingOnTempRec>
    Code lines:
    ...
      ReservEntry2."Lot No." := TrackingSpecification."Lot No.";
      ReservEntry2."Serial No." := TrackingSpecification."Serial No.";
      ReservEntry2."Warranty Date" := TrackingSpecification."Warranty Date";
      ReservEntry2."Expiration Date" := TrackingSpecification."Expiration Date";
      ReservEntry2."Entry No." := LastEntryNo;
      OnBeforeUpdateItemTracking(ReservEntry2,TrackingSpecification); <=====================
      ReservEntry2.UpdateItemTracking;
      IF EntryMismatch THEN BEGIN
        IF NOT CalledRecursively THEN
          SaveLostReservQty(ReservEntry2); // Late Binding
    ...
Codeunit<Transfer Line-Reserve>.PROCEDURE<OnAfterCallItemTracking>
  Raised in: Codeunit<Transfer Line-Reserve>.PROCEDURE<CallItemTracking>
    Code lines:
    TrackingSpecification.InitFromTransLine(TransLine,AvalabilityDate,Direction);
    ItemTrackingLines.SetSourceSpec(TrackingSpecification,AvalabilityDate);
    ItemTrackingLines.SetInbound(TransLine.IsInbound);
    ItemTrackingLines.RUNMODAL;
    OnAfterCallItemTracking(TransLine); <=====================
  Raised in: Codeunit<Transfer Line-Reserve>.PROCEDURE<CallItemTracking2>
    Code lines:
    TrackingSpecification.InitFromTransLine(TransLine,AvailabilityDate,Direction);
    ItemTrackingLines.SetSourceSpec(TrackingSpecification,AvailabilityDate);
    ItemTrackingLines.SetSecondSourceQuantity(SecondSourceQuantityArray);
    ItemTrackingLines.RUNMODAL;
    OnAfterCallItemTracking(TransLine); <=====================
Codeunit<Reservation Management>.PROCEDURE<OnAfterCalcReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<AutoReserveItemLedgEntry>
    Code lines:
    ...
            END ELSE BEGIN
              QtyThisLineBase := TotalAvailQty + QtyOnOutBound;
              QtyThisLine := ROUND(QtyThisLineBase,0.00001);
            END;
    
          OnAfterCalcReservation(CalcReservEntry,CalcItemLedgEntry,ReservSummEntryNo,QtyThisLine); <=====================
    
          CallTrackingSpecification.InitTrackingSpecification(
            DATABASE::"Item Ledger Entry",0,'','',0,CalcItemLedgEntry."Entry No.",
            CalcItemLedgEntry."Variant Code",CalcItemLedgEntry."Location Code",
    ...
Codeunit<Reservation Management>.PROCEDURE<OnBeforeCreateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<CreateReservation>
    Code lines:
    CalcReservEntry.TESTFIELD("Source Type");
    
    OnBeforeCreateReservation(TrackingSpecification,CalcReservEntry,CalcItemLedgEntry); <=====================
    
    CASE CalcReservEntry."Source Type" OF
      DATABASE::"Sales Line":
        BEGIN
          ReserveSalesLine.CreateReservationSetFrom(TrackingSpecification);
          ReserveSalesLine.CreateReservation(
            ForSalesLine,Description,ExpectedDate,Quantity,QuantityBase,
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterDemandToInvProfile>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<DemandtoInvProfile>
    Code lines:
    ...
    TransAsmLineToProfile(InventoryProfile,Item);
    TransPlanningCompToProfile(InventoryProfile,Item);
    TransTransReqLineToProfile(InventoryProfile,Item,ToDate);
    TransShptTransLineToProfile(InventoryProfile,Item);
    
    OnAfterDemandToInvProfile(InventoryProfile,Item,TempItemTrkgEntry,LineNo); <=====================
    
    Item.COPY(CopyOfItem);
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterSetOrderPriority>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<SetPriority>
    Code lines:
    ...
            "Order Priority" := 600;
          DATABASE::"Production Forecast Entry":
            "Order Priority" := 800;
        END;
    
      OnAfterSetOrderPriority(InvProfile); <=====================
    
      TESTFIELD("Order Priority");
    
      // Inflexible supply must be handled before all other supply and is therefore grouped
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterSupplyToInvProfile>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<SupplytoInvProfile>
    Code lines:
    ...
    TransPurchLineToProfile(InventoryProfile,Item,ToDate);
    TransProdOrderToProfile(InventoryProfile,Item,ToDate);
    TransAsmHeaderToProfile(InventoryProfile,Item,ToDate);
    TransRcptTransLineToProfile(InventoryProfile,Item,ToDate);
    
    OnAfterSupplyToInvProfile(InventoryProfile,Item,ToDate,TempItemTrkgEntry,LineNo); <=====================
    
    Item.COPY(CopyOfItem);
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterTransToChildInvProfile>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<UnfoldItemTracking>
    Code lines:
    ...
            ChildInvProfile."Tracking Reference" := ParentInvProfile."Line No.";
            ChildInvProfile."Lot No." := TempItemTrkgEntry."Lot No.";
            ChildInvProfile."Serial No." := TempItemTrkgEntry."Serial No.";
            ChildInvProfile."Expiration Date" := TempItemTrkgEntry."Expiration Date";
            ChildInvProfile.TransferQtyFromItemTrgkEntry(TempItemTrkgEntry);
            OnAfterTransToChildInvProfile(TempItemTrkgEntry,ChildInvProfile); <=====================
            ChildInvProfile.INSERT;
            ParentInvProfile.ReduceQtyByItemTracking(ChildInvProfile);
            ParentInvProfile.MODIFY;
          UNTIL TempItemTrkgEntry.NEXT = 0;
    ...
Codeunit<AvailabilityManagement>.PROCEDURE<OnAfterCaseCalcCapableToPromise>
  Raised in: Codeunit<AvailabilityManagement>.PROCEDURE<CalcCapableToPromise>
    Code lines:
    ...
              END;
          END;
          MODIFY;
          CreateReservations(OrderPromisingLine);
    
          OnAfterCaseCalcCapableToPromise(OrderPromisingLine,CompanyInfo,OrderPromisingID,LastValidLine); <=====================
        UNTIL NEXT = 0;
    
      CapableToPromise.ReassignRefOrderNos(OrderPromisingID);
    END;
Codeunit<AvailabilityManagement>.PROCEDURE<OnAfterUpdateSourceLine>
  Raised in: Codeunit<AvailabilityManagement>.PROCEDURE<UpdateSourceLine>
    Code lines:
    ...
          END;
    
          JobPlanningLine.MODIFY;
        END;
    END;
    OnAfterUpdateSourceLine(OrderPromisingLine2); <=====================
Codeunit<AvailabilityManagement>.PROCEDURE<OnCreateReservationsAfterFirstCASE>
  Raised in: Codeunit<AvailabilityManagement>.PROCEDURE<CreateReservations>
    Code lines:
    ...
          NeededQty := JobPlanningLine2."Remaining Qty." - JobPlanningLine2."Reserved Quantity";
          NeededQtyBase := JobPlanningLine2."Remaining Qty. (Base)" - JobPlanningLine2."Reserved Qty. (Base)";
        END;
    END;
    
    OnCreateReservationsAfterFirstCASE(OrderPromisingLine,NeededQty,NeededQtyBase); <=====================
    
    ReqLine.SETCURRENTKEY("Order Promising ID","Order Promising Line ID","Order Promising Line No.");
    ReqLine.SETRANGE("Order Promising ID",OrderPromisingLine."Source ID");
    ReqLine.SETRANGE("Order Promising Line ID",OrderPromisingLine."Source Line No.");
    ...
Codeunit<AvailabilityManagement>.PROCEDURE<OnCreateReservationsAfterSecondCASE>
  Raised in: Codeunit<AvailabilityManagement>.PROCEDURE<CreateReservations>
    Code lines:
    ...
              JobPlanningLine2.Reserve := JobPlanningLine2.Reserve::Optional;
              JobPlanningLine2.MODIFY;
            END;
          END;
      END;
      OnCreateReservationsAfterSecondCASE(OrderPromisingLine,ReqLine,ReservQty,ReservQtyBase); <=====================
    END;
Page<Company Detail>.PROCEDURE<OnGoToCompany>
  Raised in: Page<Company Detail>.Action<GoToClientCompany>.<OnAction>
    Code lines:
    HYPERLINK(GETURL(CLIENTTYPE::Web,COMPANYNAME));
    OnGoToCompany; <=====================
Page<Data Privacy Wizard>.PROCEDURE<OnDrillDownForEntityNumber>
  Raised in: Page<Data Privacy Wizard>.Control<EntityNo>.<OnDrillDown>
    Code lines:
    ...
        Users.GETRECORD(User);
        EntityNo := User."User Name";
      END;
    END;
    
    OnDrillDownForEntityNumber(EntityTypeTableNo,EntityNo); // Integration point to external devs <=====================
    
    NextActionEnabled := EntityNo <> '';
    PreviewActionEnabled := EntityNo <> '';
Page<Data Privacy Wizard>.PROCEDURE<OnEntityNoValidate>
  Raised in: Page<Data Privacy Wizard>.Control<EntityNo>.<OnValidate>
    Code lines:
    ...
        IF NOT User.FINDFIRST THEN
          ERROR(RecordNotFoundErr);
      END;
    END;
    
    OnEntityNoValidate(EntityTypeTableNo,EntityNo); <=====================
    
    NextActionEnabled := EntityNo <> '';
    PreviewActionEnabled := EntityNo <> '';
Page<Payment Reconciliation Journal>.PROCEDURE<OnAfterImportBankTransactions>
  Raised in: Page<Payment Reconciliation Journal>.Action<ImportBankTransactions>.<OnAction>
    Code lines:
    OnAfterImportBankTransactions(SubscriberInvoked); <=====================
    IF NOT SubscriberInvoked THEN BEGIN
      BankAccReconciliation.GET("Statement Type","Bank Account No.","Statement No.");
      BankAccReconciliation.ImportBankStatement;
      IF BankAccReconciliation.FIND THEN;
    END;
Page<Payment Reconciliation Journal>.PROCEDURE<OnAtActionApplyAutomatically>
  Raised in: Page<Payment Reconciliation Journal>.Action<ApplyAutomatically>.<OnAction>
    Code lines:
    ...
    IF AppliedPaymentEntry.COUNT > 0 THEN
      IF NOT CONFIRM(RemoveExistingApplicationsQst) THEN
        EXIT;
    
    BankAccReconciliation.GET("Statement Type","Bank Account No.","Statement No.");
    OnAtActionApplyAutomatically(BankAccReconciliation,SubscriberInvoked); <=====================
    IF NOT SubscriberInvoked THEN
      CODEUNIT.RUN(CODEUNIT::"Match Bank Pmt. Appl.",BankAccReconciliation);
    CurrPage.UPDATE(FALSE);
Page<Payment Reconciliation Journal>.PROCEDURE<OnUpdateSorting>
  Raised in: Page<Payment Reconciliation Journal>.PROCEDURE<UpdateSorting>
    Code lines:
    ...
          BankAccReconciliationLine."Sorting Order" -= ScoreRange;
    
        BankAccReconciliationLine.MODIFY;
      UNTIL BankAccReconciliationLine.NEXT = 0;
    
      OnUpdateSorting(BankAccReconciliation,SubscriberInvoked); <=====================
      IF NOT SubscriberInvoked THEN
        SETCURRENTKEY("Sorting Order");
      ASCENDING(IsAscending);
    
    ...
Page<Payment Application>.PROCEDURE<OnSetBankAccReconcLine>
  Raised in: Page<Payment Application>.PROCEDURE<SetBankAccReconcLine>
    Code lines:
    BankAccReconLine := NewBankAccReconLine;
    TransferFromBankAccReconLine(NewBankAccReconLine);
    
    OnSetBankAccReconcLine(BankAccReconLine); <=====================
Page<My Notifications>.PROCEDURE<OnInitializingNotificationWithDefaultState>
  Raised in: Page<My Notifications>.<OnOpenPage>
    Code lines:
    OnInitializingNotificationWithDefaultState; <=====================
    SETRANGE("User Id",USERID);
  Raised in: Page<My Notifications>.PROCEDURE<InitializeNotificationsWithDefaultState>
    Code lines:
    OnInitializingNotificationWithDefaultState; <=====================
Page<Office Suggested Line Items>.PROCEDURE<OnDisableMessage>
  Raised in: Page<Office Suggested Line Items>.<OnQueryClosePage>
    Code lines:
    IF CloseAction IN [ACTION::OK,ACTION::LookupOK] THEN
      IF DoNotShowAgain THEN
        OnDisableMessage; <=====================
Page<Payroll Import Transactions>.PROCEDURE<OnCreateSampleFile>
  Raised in: Page<Payroll Import Transactions>.Action<ActionCreateSampleFile>.<OnAction>
    Code lines:
    OnCreateSampleFile(TempServiceConnection); <=====================
Page<Payroll Import Transactions>.PROCEDURE<OnImportPayrollTransactions>
  Raised in: Page<Payroll Import Transactions>.Action<ActionNext>.<OnAction>
    Code lines:
    CASE Step OF
      0:
        BEGIN
          OnImportPayrollTransactions(TempServiceConnection,TempImportGLTransaction); <=====================
          IF TempImportGLTransaction.FINDSET THEN
            REPEAT
              Rec := TempImportGLTransaction;
              INSERT;
            UNTIL TempImportGLTransaction.NEXT = 0;
          IF FINDFIRST THEN BEGIN
    ...
Page<Data Migration Overview>.PROCEDURE<OnRequestAbort>
  Raised in: Page<Data Migration Overview>.Action<Stop Data Migration>.<OnAction>
    Code lines:
    OnRequestAbort; <=====================
    DataMigrationStatus.SETFILTER(
      Status,'%1|%2',DataMigrationStatus.Status::"In Progress",DataMigrationStatus.Status::Pending);
    IF DataMigrationStatus.FINDFIRST THEN
      DataMigrationMgt.SetAbortStatus(DataMigrationStatus);
Page<Incoming Document>.PROCEDURE<OnCloseIncomingDocumentFromAction>
  Raised in: Page<Incoming Document>.Action<OCRSetup>.<OnAction>
    Code lines:
    PAGE.RUNMODAL(PAGE::"OCR Service Setup");
    CurrPage.UPDATE;
    IF ClientTypeManagement.GetCurrentClientType = CLIENTTYPE::Web THEN
      IF OCRIsEnabled THEN BEGIN
        OnCloseIncomingDocumentFromAction(Rec); <=====================
        CurrPage.CLOSE;
      END;
Page<Incoming Documents>.PROCEDURE<OnCloseIncomingDocumentsFromActions>
  Raised in: Page<Incoming Documents>.Action<OCRSetup>.<OnAction>
    Code lines:
    PAGE.RUNMODAL(PAGE::"OCR Service Setup");
    CurrPage.UPDATE;
    IF ClientTypeManagement.GetCurrentClientType = CLIENTTYPE::Web THEN
      IF OCRIsEnabled THEN BEGIN
        OnCloseIncomingDocumentsFromActions(Rec); <=====================
        CurrPage.CLOSE;
      END;
Page<Customer Card>.PROCEDURE<OnBeforeCreateCustomerFromTemplate>
  Raised in: Page<Customer Card>.PROCEDURE<CreateCustomerFromTemplate>
    Code lines:
    OnBeforeCreateCustomerFromTemplate(NewMode); <=====================
    
    IF NewMode THEN BEGIN
      IF MiniCustomerTemplate.NewCustomerFromTemplate(Customer) THEN BEGIN
        IF VATRegNoSrvConfig.VATRegNoSrvIsEnabled THEN
          IF Customer."Validate EU Vat Reg. No." THEN BEGIN
            EUVATRegistrationNoCheck.SetRecordRef(Customer);
            COMMIT;
            EUVATRegistrationNoCheck.RUNMODAL;
            EUVATRegistrationNoCheck.GetRecordRef(CustomerRecRef);
    ...
Page<Customer Card>.PROCEDURE<SetCaption>
  Raised in: Page<Customer Card>.<OnInit>
    Code lines:
    ...
    ContactEditable := TRUE;
    
    OpenApprovalEntriesExistCurrUser := TRUE;
    
    CaptionTxt := CurrPage.CAPTION;
    SetCaption(CaptionTxt); <=====================
    CurrPage.CAPTION(CaptionTxt);
Page<O365 Import Export Settings>.PROCEDURE<OnInsertMenuItems>
  Raised in: Page<O365 Import Export Settings>.PROCEDURE<InsertMenuItems>
    Code lines:
    InsertPageMenuItem(PAGE::"O365 Export Invoices",ExportTitleLbl,ExportDescriptionLbl);
    OnInsertMenuItems(Rec); <=====================
    InsertPageMenuItem(PAGE::"O365 Sync with Microsoft Apps",SyncMSAppsLbl,'');
    
    IF ClientTypeManagement.GetCurrentClientType <> CLIENTTYPE::Phone THEN BEGIN
      InsertPageWithParameterMenuItem(
        PAGE::"O365 Import from Excel Wizard",
        DummyCustomer.TABLENAME,
        ImportCustomersTieleLbl,
        ImportCustomersDesriptionLbl);
    ...
Page<Customer List>.PROCEDURE<SetCaption>
  Raised in: Page<Customer List>.<OnInit>
    Code lines:
    SetCustomerNoVisibilityOnFactBoxes;
    
    CaptionTxt := CurrPage.CAPTION;
    SetCaption(CaptionTxt); <=====================
    CurrPage.CAPTION(CaptionTxt);
Page<BC O365 Settings>.PROCEDURE<OnSetPayPalSetupVisible>
  Raised in: Page<BC O365 Settings>.<OnInit>
    Code lines:
    OnSetPayPalSetupVisible(PayPalVisible); <=====================
    OnSetQuickBooksVisible(QuickBooksVisible);
Page<BC O365 Settings>.PROCEDURE<OnSetQuickBooksVisible>
  Raised in: Page<BC O365 Settings>.<OnInit>
    Code lines:
    OnSetPayPalSetupVisible(PayPalVisible);
    OnSetQuickBooksVisible(QuickBooksVisible); <=====================
Page<BC O365 PayPal Std. Settings>.PROCEDURE<OnGetPayPalSandboxURL>
  Raised in: Page<BC O365 PayPal Std. Settings>.<Control>.<OnValidate>
    Code lines:
    ...
    VALIDATE("Account ID",AccountID);
    
    IF STRPOS(AccountID,SandboxPrefixTok) = 1 THEN
      IF CONFIRM(PayPalSandBoxModeQst) THEN BEGIN
        FIND;
        OnGetPayPalSandboxURL(PayPalURL); <=====================
        SetTargetURL(PayPalURL);
        EXIT;
      END;
    
    ...
Page<BC O365 PayPal Std. Settings>.PROCEDURE<OnGetPayPalTargetURL>
  Raised in: Page<BC O365 PayPal Std. Settings>.<Control>.<OnValidate>
    Code lines:
    ...
        OnGetPayPalSandboxURL(PayPalURL);
        SetTargetURL(PayPalURL);
        EXIT;
      END;
    
    OnGetPayPalTargetURL(PayPalURL); <=====================
    SetTargetURL(PayPalURL);
Page<BC O365 PayPal Std. Settings>.PROCEDURE<OnOpenPageInit>
  Raised in: Page<BC O365 PayPal Std. Settings>.<OnOpenPage>
    Code lines:
    // Initialized via a subscriber in codeunit 1070 if it is loaded
    OnOpenPageInit(Rec); <=====================
Page<BC O365 Quickbooks Settings>.PROCEDURE<OnQuickBooksDesktopSyncClicked>
  Raised in: Page<BC O365 Quickbooks Settings>.Control<SyncWithQbd>.<OnDrillDown>
    Code lines:
    OnQuickBooksDesktopSyncClicked; <=====================
Page<BC O365 Quickbooks Settings>.PROCEDURE<OnQuickBooksOnlineSyncClicked>
Page<Navigate>.PROCEDURE<OnAfterNavigateFindRecords>
  Raised in: Page<Navigate>.PROCEDURE<FindRecords>
    Code lines:
    ...
      CostEntry.SETFILTER("Document No.",DocNoFilter);
      CostEntry.SETFILTER("Posting Date",PostingDateFilter);
      InsertIntoDocEntry(
        DATABASE::"Cost Entry",0,CostEntry.TABLECAPTION,CostEntry.COUNT);
    END;
    OnAfterNavigateFindRecords(Rec,DocNoFilter,PostingDateFilter); <=====================
    DocExists := FINDFIRST;
    
    SetSource(0D,'','',0,'');
    IF DocExists THEN BEGIN
    ...
Page<Navigate>.PROCEDURE<OnAfterNavigateFindTrackingRecords>
  Raised in: Page<Navigate>.PROCEDURE<FindTrackingRecords>
    Code lines:
    ...
          TempRecordBuffer."Table No.",0,TempRecordBuffer."Table Name",DocNoOfRecords);
    
        TempRecordBuffer.SETRANGE("Table No.");
      UNTIL TempRecordBuffer.NEXT = 0;
    
    OnAfterNavigateFindTrackingRecords(Rec,SerialNoFilter,LotNoFilter); <=====================
    
    DocExists := FIND('-');
    
    UpdateFormAfterFindRecords;
Page<Navigate>.PROCEDURE<OnAfterNavigateShowRecords>
  Raised in: Page<Navigate>.PROCEDURE<ShowRecords>
    Code lines:
    ...
          PAGE.RUN(0,WarrantyLedgerEntry);
        DATABASE::"Cost Entry":
          PAGE.RUN(0,CostEntry);
      END;
    
    OnAfterNavigateShowRecords("Table ID",DocNoFilter,PostingDateFilter,ItemTrackingSearch); <=====================
Page<Item Availability Lines>.PROCEDURE<OnAfterSetItemFilter>
  Raised in: Page<Item Availability Lines>.PROCEDURE<SetItemFilter>
    Code lines:
    IF AmountType = AmountType::"Net Change" THEN
      Item.SETRANGE("Date Filter","Period Start","Period End")
    ELSE
      Item.SETRANGE("Date Filter",0D,"Period End");
    OnAfterSetItemFilter(Item,"Period Start","Period End"); <=====================
Page<Sales Quote>.PROCEDURE<OnBeforeStatisticsAction>
  Raised in: Page<Sales Quote>.Action<Statistics>.<OnAction>
    Code lines:
    OnBeforeStatisticsAction(Rec,Handled); <=====================
    IF NOT Handled THEN BEGIN
      CalcInvDiscForHeader;
      COMMIT;
      PAGE.RUNMODAL(PAGE::"Sales Statistics",Rec);
      SalesCalcDiscByType.ResetRecalculateInvoiceDisc(Rec);
    END
Page<Sales Order>.PROCEDURE<OnBeforeStatisticsAction>
  Raised in: Page<Sales Order>.Action<Statistics>.<OnAction>
    Code lines:
    OnBeforeStatisticsAction(Rec,Handled); <=====================
    IF NOT Handled THEN BEGIN
      OpenSalesOrderStatistics;
      SalesCalcDiscountByType.ResetRecalculateInvoiceDisc(Rec);
    END
Page<Sales Invoice>.PROCEDURE<OnBeforeStatisticsAction>
  Raised in: Page<Sales Invoice>.Action<Statistics>.<OnAction>
    Code lines:
    OnBeforeStatisticsAction(Rec,Handled); <=====================
    IF NOT Handled THEN BEGIN
      CalcInvDiscForHeader;
      COMMIT;
      PAGE.RUNMODAL(PAGE::"Sales Statistics",Rec);
      SalesCalcDiscountByType.ResetRecalculateInvoiceDisc(Rec);
    END
Page<Sales Credit Memo>.PROCEDURE<OnBeforeStatisticsAction>
  Raised in: Page<Sales Credit Memo>.Action<Statistics>.<OnAction>
    Code lines:
    OnBeforeStatisticsAction(Rec,Handled); <=====================
    IF NOT Handled THEN BEGIN
      CalcInvDiscForHeader;
      COMMIT;
      PAGE.RUNMODAL(PAGE::"Sales Statistics",Rec);
      SalesCalcDiscByType.ResetRecalculateInvoiceDisc(Rec);
    END
Page<Sales Order Subform>.PROCEDURE<OnAfterQuantityOnAfterValidate>
  Raised in: Page<Sales Order Subform>.PROCEDURE<QuantityOnAfterValidate>
    Code lines:
    ...
            CurrPage.SAVERECORD;
            AutoReserve;
          END;
      END;
    
    OnAfterQuantityOnAfterValidate(Rec); <=====================
Page<Blanket Sales Order>.PROCEDURE<OnBeforeStatisticsAction>
  Raised in: Page<Blanket Sales Order>.Action<Statistics>.<OnAction>
    Code lines:
    OnBeforeStatisticsAction(Rec,Handled); <=====================
    IF NOT Handled THEN BEGIN
      OpenSalesOrderStatistics;
      SalesCalcDiscByType.ResetRecalculateInvoiceDisc(Rec);
    END
Page<Azure AD Access Dialog>.PROCEDURE<OnOAuthAccessDenied>
  Raised in: Page<Azure AD Access Dialog>.EVENT<AuthorizationErrorOccurred>
    Code lines:
    // OnOAuthAccessDenied event is raised if Auth fails because access is denied <=====================
    // Subcribe to this event if you want to respond to it
    // description contains AADSTS65004 error code if user denied the request and AADSTS65005 if the client
    // has not set up required permissions for the resource being requested
    IF error = 'access_denied' THEN
      OnOAuthAccessDenied(description,ResourceFriendlyName) <=====================
    ELSE BEGIN
      IF NOT AzureAdAppSetup.ISEMPTY THEN BEGIN
        AzureAdAppSetup.FINDFIRST;
        ActivityLog.LogActivityForUser(
    ...
Page<Item Tracking Lines>.PROCEDURE<OnAfterAssignNewTrackingNo>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<AssignSerialNoBatch>
    Code lines:
    ...
    ItemTrackingDataCollection.SetSkipLot(TRUE);
    FOR i := 1 TO QtyToCreate DO BEGIN
      VALIDATE("Quantity Handled (Base)",0);
      VALIDATE("Quantity Invoiced (Base)",0);
      VALIDATE("Serial No.",NoSeriesMgt.GetNextNo(Item."Serial Nos.",WORKDATE,TRUE));
      OnAfterAssignNewTrackingNo(Rec); <=====================
      VALIDATE("Quantity (Base)",QtySignFactor);
      "Entry No." := NextEntryNo;
      IF TestTempSpecificationExists THEN
        ERROR('');
    ...
  Raised in: Page<Item Tracking Lines>.PROCEDURE<AssignLotNo>
    Code lines:
    ...
    
    Item.TESTFIELD("Lot Nos.");
    VALIDATE("Quantity Handled (Base)",0);
    VALIDATE("Quantity Invoiced (Base)",0);
    VALIDATE("Lot No.",NoSeriesMgt.GetNextNo(Item."Lot Nos.",WORKDATE,TRUE));
    OnAfterAssignNewTrackingNo(Rec); <=====================
    "Qty. per Unit of Measure" := QtyPerUOM;
    VALIDATE("Quantity (Base)",QtyToCreate);
    "Entry No." := NextEntryNo;
    TestTempSpecificationExists;
    ...
  Raised in: Page<Item Tracking Lines>.PROCEDURE<CreateCustomizedSNBatch>
    Code lines:
    ...
    
    IF CreateLotNo THEN BEGIN
      TESTFIELD("Lot No.",'');
      Item.TESTFIELD("Lot Nos.");
      VALIDATE("Lot No.",NoSeriesMgt.GetNextNo(Item."Lot Nos.",WORKDATE,TRUE));
      OnAfterAssignNewTrackingNo(Rec); <=====================
    END;
    
    FOR i := 1 TO QtyToCreate DO BEGIN
      VALIDATE("Quantity Handled (Base)",0);
    ...
  Raised in: Page<Item Tracking Lines>.PROCEDURE<CreateCustomizedSNBatch>
    Code lines:
    ...
    
    IF CreateLotNo THEN BEGIN
      TESTFIELD("Lot No.",'');
      Item.TESTFIELD("Lot Nos.");
      VALIDATE("Lot No.",NoSeriesMgt.GetNextNo(Item."Lot Nos.",WORKDATE,TRUE));
      OnAfterAssignNewTrackingNo(Rec); <=====================
    END;
    
    FOR i := 1 TO QtyToCreate DO BEGIN
      VALIDATE("Quantity Handled (Base)",0);
    ...
Page<Item Tracking Lines>.PROCEDURE<OnAfterClearTrackingSpec>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<RegisterChange>
    Code lines:
    ...
            RegisterChange(OldTrackingSpecification,OldTrackingSpecification,
              ChangeType::Insert,NOT IdenticalArray[2]);
          END ELSE BEGIN
            TempReservEntry.SetTrackingFilterFromSpec(OldTrackingSpecification);
            OldTrackingSpecification.ClearTracking;
            OnAfterClearTrackingSpec(OldTrackingSpecification); <=====================
            QtyToAdd :=
              CurrentSignFactor *
              ReservEngineMgt.AddItemTrackingToTempRecSet(
                TempReservEntry,OldTrackingSpecification,
    ...
  Raised in: Page<Item Tracking Lines>.PROCEDURE<RegisterChange>
    Code lines:
    ...
            RegisterChange(OldTrackingSpecification,OldTrackingSpecification,
              ChangeType::Insert,NOT IdenticalArray[2]);
          END ELSE BEGIN
            TempReservEntry.SetTrackingFilterFromSpec(OldTrackingSpecification);
            OldTrackingSpecification.ClearTracking;
            OnAfterClearTrackingSpec(OldTrackingSpecification); <=====================
            QtyToAdd :=
              CurrentSignFactor *
              ReservEngineMgt.AddItemTrackingToTempRecSet(
                TempReservEntry,OldTrackingSpecification,
    ...
Page<Item Tracking Lines>.PROCEDURE<OnAfterCopyTrackingSpec>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<RegisterChange>
    Code lines:
    ...
    
            OldTrackingSpecification."Quantity (Base)" := QtyToAdd;
            OldTrackingSpecification."Warranty Date" := NewTrackingSpecification."Warranty Date";
            OldTrackingSpecification."Expiration Date" := NewTrackingSpecification."Expiration Date";
            OldTrackingSpecification.Description := NewTrackingSpecification.Description;
            OnAfterCopyTrackingSpec(NewTrackingSpecification,OldTrackingSpecification); <=====================
    
            RegisterChange(OldTrackingSpecification,OldTrackingSpecification,
              ChangeType::Insert,NOT IdenticalArray[2]);
          END ELSE BEGIN
    ...
  Raised in: Page<Item Tracking Lines>.PROCEDURE<RegisterItemTrackingLines>
    Code lines:
    ...
        IF FormRunMode = FormRunMode::Reclass THEN BEGIN
          "New Serial No." := TempTrackingSpecification."New Serial No.";
          "New Lot No." := TempTrackingSpecification."New Lot No.";
          "New Expiration Date" := TempTrackingSpecification."New Expiration Date"
        END;
        OnAfterCopyTrackingSpec(TempTrackingSpecification,Rec); <=====================
        VALIDATE("Quantity (Base)",TempTrackingSpecification."Quantity (Base)");
        "Entry No." := NextEntryNo;
        INSERT;
      END;
    ...
Page<Item Tracking Lines>.PROCEDURE<OnAfterMoveFields>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<ModifyFieldsWithinFilter>
    Code lines:
    ...
        ReservEntry1."Warranty Date" := TrackingSpecification."Warranty Date";
        ReservEntry1."Expiration Date" := TrackingSpecification."Expiration Date";
        ReservEntry1."New Serial No." := TrackingSpecification."New Serial No.";
        ReservEntry1."New Lot No." := TrackingSpecification."New Lot No.";
        ReservEntry1."New Expiration Date" := TrackingSpecification."New Expiration Date";
        OnAfterMoveFields(TrackingSpecification,ReservEntry1); <=====================
        ReservEntry1.MODIFY;
      UNTIL ReservEntry1.NEXT = 0;
Page<Sales Return Order>.PROCEDURE<OnBeforeStatisticsAction>
  Raised in: Page<Sales Return Order>.Action<Statistics>.<OnAction>
    Code lines:
    OnBeforeStatisticsAction(Rec,Handled); <=====================
    IF NOT Handled THEN BEGIN
      OpenSalesOrderStatistics;
      SalesCalcDiscByType.ResetRecalculateInvoiceDisc(Rec);
    END
Page<Job Queue Log Entries>.PROCEDURE<OnShowDetails>
  Raised in: Page<Job Queue Log Entries>.Action<Details>.<OnAction>
    Code lines:
    OnShowDetails(Rec); <=====================
Page<VAT Report>.PROCEDURE<OnAfterInitPageControllers>
  Raised in: Page<VAT Report>.PROCEDURE<InitPageControllers>
    Code lines:
    ...
      (Status = Status::Accepted) OR
      (Status = Status::Closed);
    CalcAndPostVATStatus := Status = Status::Accepted;
    ReopenControllerStatus := Status = Status::Released;
    InitReturnPeriodGroup;
    OnAfterInitPageControllers(Rec,SubmitControllerStatus,MarkAsSubmitControllerStatus); <=====================
Page<Invite External Accountant>.PROCEDURE<OnInvitationEnd>
  Raised in: Page<Invite External Accountant>.Action<ActionNext>.<OnAction>
    Code lines:
    IF Step = Step::DefineInformation THEN BEGIN
      IF (NewUserEmailAddress <> '') AND (NewFirstName <> '') AND (NewLastName <> '') AND (NewUserWelcomeEmail <> '') THEN BEGIN
        IF InviteExternalAccountant.InvokeEmailAddressIsAADAccount(NewUserEmailAddress,ErrorMessage) THEN BEGIN
          Invite;
          OnInvitationEnd(WasInvitationSuccessful,InvitationResult,InviteProgress); <=====================
          NextStep(FALSE);
        END ELSE
          ERROR(ErrorMessage);
      END ELSE
        ERROR(NotAllFieldsEnteredErrorErr);
    ...
Page<Invite External Accountant>.PROCEDURE<OnInvitationNoAADPermissionsFail>
  Raised in: Page<Invite External Accountant>.<OnOpenPage>
    Code lines:
    ...
      OnInvitationNoExternalAccountantLicenseFail;
      ERROR(NoExternalAccountantLicenseAvailableErr);
    END;
    
    IF NOT InviteExternalAccountant.InvokeIsUserAdministrator(ErrorMessage) THEN BEGIN
      OnInvitationNoAADPermissionsFail; <=====================
      ERROR(NoAADPermissionsErr);
    END;
    
    IF NOT (NavUserAccountHelper.IsSessionAdminSession OR NavUserAccountHelper.IsUserSuperInAllCompanies) THEN BEGIN
    ...
Page<Invite External Accountant>.PROCEDURE<OnInvitationNoExternalAccountantLicenseFail>
  Raised in: Page<Invite External Accountant>.<OnOpenPage>
    Code lines:
    ...
    
    IF NOT InviteExternalAccountant.VerifySMTPIsEnabledAndSetup THEN
      ERROR(SMTPMustBeSetupErrorErr);
    
    IF NOT InviteExternalAccountant.InvokeIsExternalAccountantLicenseAvailable(ErrorMessage) THEN BEGIN
      OnInvitationNoExternalAccountantLicenseFail; <=====================
      ERROR(NoExternalAccountantLicenseAvailableErr);
    END;
    
    IF NOT InviteExternalAccountant.InvokeIsUserAdministrator(ErrorMessage) THEN BEGIN
    ...
Page<Invite External Accountant>.PROCEDURE<OnInvitationNoUserTablePermissionsFail>
  Raised in: Page<Invite External Accountant>.<OnOpenPage>
    Code lines:
    ...
      OnInvitationNoAADPermissionsFail;
      ERROR(NoAADPermissionsErr);
    END;
    
    IF NOT (NavUserAccountHelper.IsSessionAdminSession OR NavUserAccountHelper.IsUserSuperInAllCompanies) THEN BEGIN
      OnInvitationNoUserTablePermissionsFail; <=====================
      ERROR(NoUserTableWritePermissionErr);
    END;
    
    ProgressWindow.CLOSE;
    ...
Page<Invite External Accountant>.PROCEDURE<OnInvitationStart>
  Raised in: Page<Invite External Accountant>.<OnOpenPage>
    Code lines:
    OnInvitationStart; <=====================
    IF NOT PermissionManager.SoftwareAsAService THEN
      ERROR(SaaSOnlyErrorErr);
    
    ProgressWindow.OPEN(WizardOpenValidationMsg);
    
    IF NOT InviteExternalAccountant.VerifySMTPIsEnabledAndSetup THEN
      ERROR(SMTPMustBeSetupErrorErr);
    
    IF NOT InviteExternalAccountant.InvokeIsExternalAccountantLicenseAvailable(ErrorMessage) THEN BEGIN
    ...
Page<My Settings>.PROCEDURE<OnCompanyChange>
  Raised in: Page<My Settings>.Control<Company>.<OnAssistEdit>
    Code lines:
    ...
    
    AllowedCompanies.LOOKUPMODE(TRUE);
    
    IF AllowedCompanies.RUNMODAL = ACTION::LookupOK THEN BEGIN
      AllowedCompanies.GETRECORD(SelectedCompany);
      OnCompanyChange(SelectedCompany.Name,IsSetupInProgress); <=====================
      IF IsSetupInProgress THEN BEGIN
        VarCompany := COMPANYNAME;
        MESSAGE(STRSUBSTNO(CompanySetUpInProgressMsg,SelectedCompany.Name));
      END ELSE
    ...
Page<My Settings>.PROCEDURE<OnQueryClosePageEvent>
  Raised in: Page<My Settings>.<OnQueryClosePage>
    Code lines:
    ...
      END;
    
      IF WasEvaluation AND IsTrial THEN
        MESSAGE(TrialStartMsg);
    
      OnQueryClosePageEvent(LanguageID,LocaleID,TimeZoneID,VarCompany,ProfileID); <=====================
    
      IF AnythingUpdated THEN
        sessionSetting.REQUESTSESSIONUPDATE(TRUE);
    END;
Page<My Settings>.PROCEDURE<OnUserRoleCenterChange>
  Raised in: Page<My Settings>.Control<UserRoleCenter>.<OnAssistEdit>
    Code lines:
    IF PAGE.RUNMODAL(PAGE::"Available Role Centers",Profile) = ACTION::LookupOK THEN BEGIN
      ProfileID := Profile."Profile ID";
      ProfileAppID := Profile."App ID";
      ProfileScope := Profile.Scope;
    END;
    OnUserRoleCenterChange(ProfileID); <=====================
    UserPersonalizationCard.SetExperienceToSuite(ProfileID);
Page<Item Availability Line List>.PROCEDURE<OnItemCalcFields>
  Raised in: Page<Item Availability Line List>.PROCEDURE<MakeWhat>
    Code lines:
    ...
        "Qty. on Assembly Order",
        "Qty. on Asm. Component",
        "Qty. on Purch. Return",
        "Qty. on Sales Return");
    
      OnItemCalcFields(Item); <=====================
    
      IF Item.Inventory <> 0 THEN BEGIN
        "Table No." := DATABASE::"Item Ledger Entry";
        QuerySource := Item.FIELDNO(Inventory);
    ...
Page<Item Availability Line List>.PROCEDURE<OnItemLedgerEntrySetFilter>
  Raised in: Page<Item Availability Line List>.PROCEDURE<LookupEntries>
    Code lines:
    ...
          ItemLedgerEntry.SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
          ItemLedgerEntry.SETFILTER("Drop Shipment",Item.GETFILTER("Drop Shipment Filter"));
          ItemLedgerEntry.SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
          ItemLedgerEntry.SETFILTER("Global Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
          ItemLedgerEntry.SETFILTER("Global Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
          OnItemLedgerEntrySetFilter(ItemLedgerEntry); <=====================
          PAGE.RUNMODAL(0,ItemLedgerEntry);
        END;
      DATABASE::"Sales Line":
        BEGIN
    ...
Page<Item Availability Line List>.PROCEDURE<OnItemSetFilter>
  Raised in: Page<Item Availability Line List>.PROCEDURE<MakeWhat>
    Code lines:
    Sign := 1;
    IF AvailType <> AvailType::All THEN
      MakeEntries
    ELSE BEGIN
      Item.SETRANGE("Date Filter",0D,Item.GETRANGEMAX("Date Filter"));
      OnItemSetFilter(Item); <=====================
      Item.CALCFIELDS(
        "Qty. on Purch. Order",
        "Qty. on Sales Order",
        "Qty. on Service Order",
    ...
Report<Suggest Bank Acc. Recon. Lines>.PROCEDURE<OnPreDataItem>
  Raised in: Report<Suggest Bank Acc. Recon. Lines>.<DataItem>.<OnPreDataItem>
    Code lines:
    OnPreDataItem(ExcludeReversedEntries); <=====================
    
    IF EndDate = 0D THEN
      ERROR(Text000);
    
    BankAccReconLine.FilterBankRecLines(BankAccRecon);
    IF NOT BankAccReconLine.FINDLAST THEN BEGIN
      BankAccReconLine."Statement Type" := BankAccRecon."Statement Type";
      BankAccReconLine."Bank Account No." := BankAccRecon."Bank Account No.";
      BankAccReconLine."Statement No." := BankAccRecon."Statement No.";
    ...
Report<Send Overdue Appr. Notif.>.PROCEDURE<OnSendOverdueNotifications>
  Raised in: Report<Send Overdue Appr. Notif.>.<OnPreReport>
    Code lines:
    IF NOT ApprovalsMgmt.IsOverdueNotificationsWorkflowEnabled THEN
      ERROR(NoWorkflowEnabledErr);
    
    OnSendOverdueNotifications; <=====================
Report<Sales - Invoice>.PROCEDURE<OnAfterGetRecordSalesInvoiceHeader>
  Raised in: Report<Sales - Invoice>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
          SegManagement.LogDocument(
            SegManagement.SalesInvoiceInterDocType,"No.",0,0,DATABASE::Customer,"Bill-to Customer No.","Salesperson Code",
            "Campaign No.","Posting Description",'');
      END;
    
    OnAfterGetRecordSalesInvoiceHeader("Sales Invoice Header"); <=====================
    OnGetReferenceText("Sales Invoice Header",ReferenceText,Handled);
Report<Sales - Invoice>.PROCEDURE<OnGetReferenceText>
  Raised in: Report<Sales - Invoice>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
            SegManagement.SalesInvoiceInterDocType,"No.",0,0,DATABASE::Customer,"Bill-to Customer No.","Salesperson Code",
            "Campaign No.","Posting Description",'');
      END;
    
    OnAfterGetRecordSalesInvoiceHeader("Sales Invoice Header");
    OnGetReferenceText("Sales Invoice Header",ReferenceText,Handled); <=====================
Report<Sales - Credit Memo>.PROCEDURE<OnAfterGetRecordSalesCrMemoHeader>
  Raised in: Report<Sales - Credit Memo>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
        ELSE
          SegManagement.LogDocument(
            6,"No.",0,0,DATABASE::Customer,"Sell-to Customer No.","Salesperson Code",
            "Campaign No.","Posting Description",'');
    
    OnAfterGetRecordSalesCrMemoHeader("Sales Cr.Memo Header"); <=====================
Report<Sales Reservation Avail.>.PROCEDURE<OnAfterSalesLineModify>
  Raised in: Report<Sales Reservation Avail.>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
      IF "Qty. per Unit of Measure" = 0 THEN
        "Qty. per Unit of Measure" := 1;
      VALIDATE("Qty. to Ship",
        ROUND(LineQuantityOnHand / "Qty. per Unit of Measure",0.00001));
      MODIFY;
      OnAfterSalesLineModify("Sales Line"); <=====================
    END;
    
    IF ClearDocumentStatus THEN BEGIN
      DocumentReceiptDate := 0D;
    ...
Report<Copy Sales Document>.PROCEDURE<OnBeforeValidateIncludeHeader>
  Raised in: Report<Copy Sales Document>.PROCEDURE<ValidateDocNo>
    Code lines:
    ...
      ((DocType = DocType::"Posted Credit Memo") <>
       (SalesHeader."Document Type" IN
        [SalesHeader."Document Type"::"Return Order",SalesHeader."Document Type"::"Credit Memo"])) AND
      (SalesHeader."Bill-to Customer No." IN [FromSalesHeader."Bill-to Customer No.",'']);
    
    OnBeforeValidateIncludeHeader(IncludeHeader); <=====================
    ValidateIncludeHeader;
Report<Delete Invoiced Sales Orders>.PROCEDURE<OnAfterDeleteSalesLine>
  Raised in: Report<Delete Invoiced Sales Orders>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
                  IF SalesOrderLine.Type = SalesOrderLine.Type::Item THEN
                    ATOLink.DeleteAsmFromSalesLine(SalesOrderLine);
                  IF SalesOrderLine.HASLINKS THEN
                    SalesOrderLine.DELETELINKS;
                  SalesOrderLine.DELETE;
                  OnAfterDeleteSalesLine(SalesOrderLine); <=====================
                END ELSE
                  AllLinesDeleted := FALSE;
                UpdateAssPurchOrder;
              UNTIL SalesOrderLine.NEXT = 0;
    ...
Report<Suggest Vendor Payments>.PROCEDURE<OnBeforeUpdateGnlJnlLineDimensionsFromTempBuffer>
  Raised in: Report<Suggest Vendor Payments>.PROCEDURE<MakeGenJnlLines>
    Code lines:
    ...
          "Payment Method Code" := TempPaymentBuffer."Payment Method Code";
          "Creditor No." := TempPaymentBuffer."Creditor No.";
          "Payment Reference" := TempPaymentBuffer."Payment Reference";
          "Exported to Payment File" := TempPaymentBuffer."Exported to Payment File";
          "Applies-to Ext. Doc. No." := TempPaymentBuffer."Applies-to Ext. Doc. No.";
          OnBeforeUpdateGnlJnlLineDimensionsFromTempBuffer(GenJnlLine,TempPaymentBuffer); <=====================
          UpdateDimensions(GenJnlLine);
          INSERT;
          GenJnlLineInserted := TRUE;
        END;
Report<Suggest Vendor Payments>.PROCEDURE<OnUpdateTempBufferFromVendorLedgerEntry>
  Raised in: Report<Suggest Vendor Payments>.PROCEDURE<MakeGenJnlLines>
    Code lines:
    ...
            TempPaymentBuffer."Payment Method Code" := VendLedgEntry."Payment Method Code";
            TempPaymentBuffer."Creditor No." := VendLedgEntry."Creditor No.";
            TempPaymentBuffer."Payment Reference" := VendLedgEntry."Payment Reference";
            TempPaymentBuffer."Exported to Payment File" := VendLedgEntry."Exported to Payment File";
            TempPaymentBuffer."Applies-to Ext. Doc. No." := VendLedgEntry."External Document No.";
            OnUpdateTempBufferFromVendorLedgerEntry(TempPaymentBuffer,VendLedgEntry); <=====================
    
            SetTempPaymentBufferDims(DimBuf);
    
            VendLedgEntry.CALCFIELDS("Remaining Amount");
    ...
Report<Purchase Reservation Avail.>.PROCEDURE<OnAfterPurchLineModify>
  Raised in: Report<Purchase Reservation Avail.>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
      IF "Qty. per Unit of Measure" = 0 THEN
        "Qty. per Unit of Measure" := 1;
      VALIDATE("Qty. to Receive",
        ROUND(LineQuantityOnHand / "Qty. per Unit of Measure",0.00001));
      MODIFY;
      OnAfterPurchLineModify("Purchase Line"); <=====================
    END;
    
    IF ClearDocumentStatus THEN BEGIN
      DocumentReceiptDate := 0D;
    ...
Report<Copy Purchase Document>.PROCEDURE<OnBeforeValidateIncludeHeader>
  Raised in: Report<Copy Purchase Document>.PROCEDURE<ValidateDocNo>
    Code lines:
    ...
      (DocType IN [DocType::"Posted Invoice",DocType::"Posted Credit Memo"]) AND
      ((DocType = DocType::"Posted Credit Memo") <>
       (PurchHeader."Document Type" = PurchHeader."Document Type"::"Credit Memo")) AND
      (PurchHeader."Buy-from Vendor No." IN [FromPurchHeader."Buy-from Vendor No.",'']);
    
    OnBeforeValidateIncludeHeader(IncludeHeader); <=====================
    ValidateIncludeHeader;
Report<Delete Invoiced Purch. Orders>.PROCEDURE<OnBeforePurchLineDelete>
  Raised in: Report<Delete Invoiced Purch. Orders>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
                    ItemChargeAssgntPurch.DELETEALL;
                  END;
                  IF PurchLine.HASLINKS THEN
                    PurchLine.DELETELINKS;
    
                  OnBeforePurchLineDelete(PurchLine); <=====================
                  PurchLine.DELETE;
                END ELSE
                  AllLinesDeleted := FALSE;
                UpdateAssSalesOrder;
    ...
Report<Move IC Trans. to Partner Comp>.PROCEDURE<OnICInboxTransactionCreated>
  Raised in: Report<Move IC Trans. to Partner Comp>.PROCEDURE<TransferToPartner>
    Code lines:
    ...
      REPEAT
        PartnerICDocDim := TempICDocDim;
        PartnerICDocDim.INSERT;
      UNTIL TempICDocDim.NEXT = 0;
    
    OnICInboxTransactionCreated(PartnerInboxTransaction,CurrentPartner."Inbox Details"); <=====================
    
    TempICInboxTransaction.DELETEALL;
    TempInboxPurchHeader.DELETEALL;
    TempInboxPurchLine.RESET;
    ...
Report<Calc. Consumption>.PROCEDURE<OnAfterInsertItemJnlLine>
  Raised in: Report<Calc. Consumption>.PROCEDURE<CreateConsumpJnlLine>
    Code lines:
    ...
        ItemJnlLine."Bin Code" := BinCode;
      ItemJnlLine.VALIDATE("Order Line No.","Prod. Order Component"."Prod. Order Line No.");
      ItemJnlLine.VALIDATE("Prod. Order Comp. Line No.","Prod. Order Component"."Line No.");
    
      ItemJnlLine.INSERT;
      OnAfterInsertItemJnlLine(ItemJnlLine); <=====================
    
      IF Item."Item Tracking Code" <> '' THEN
        AssignItemTracking("Prod. Order Component",ItemJnlLine);
    END;
    ...
Report<Calculate Inventory Value>.PROCEDURE<OnAfterInsertItemJnlLine>
  Raised in: Report<Calculate Inventory Value>.PROCEDURE<InsertItemJnlLine>
    Code lines:
    ...
      END;
      "Update Standard Cost" := UpdStdCost;
      "Partial Revaluation" := TRUE;
      "Applied Amount" := AppliedAmount;
      INSERT;
      OnAfterInsertItemJnlLine(ItemJnlLine); <=====================
    END;
Report<Get Item Ledger Entries>.PROCEDURE<OnBeforeInsertItemJnlLine>
  Raised in: Report<Get Item Ledger Entries>.PROCEDURE<InsertItemJnlLine>
    Code lines:
    ...
      VALIDATE("Item No.");
      "Source Type" := "Source Type"::"Item Entry";
      VALIDATE(Quantity,ROUND(ABS(Quantity),0.00001));
      VALIDATE("Cost Regulation %",IndirectCostPctReq);
    
      OnBeforeInsertItemJnlLine(IntrastatJnlLine,"Item Ledger Entry"); <=====================
      INSERT;
    END;
Report<Get Item Ledger Entries>.PROCEDURE<OnBeforeInsertJobLedgerLine>
  Raised in: Report<Get Item Ledger Entries>.PROCEDURE<InsertJobLedgerLine>
    Code lines:
    ...
      "Source Type" := "Source Type"::"Job Entry";
      VALIDATE(Quantity,ROUND(ABS(Quantity),0.00001));
    
      VALIDATE("Cost Regulation %",IndirectCostPctReq);
    
      OnBeforeInsertJobLedgerLine(IntrastatJnlLine,"Job Ledger Entry"); <=====================
      INSERT;
    END;
Report<Get Item Ledger Entries>.PROCEDURE<OnBeforeInsertValueEntryLine>
  Raised in: Report<Get Item Ledger Entries>.PROCEDURE<InsertValueEntryLine>
    Code lines:
    ...
      VALIDATE("Item No.");
      "Source Type" := "Source Type"::"Item Entry";
      VALIDATE(Quantity,ROUND(ABS(Quantity),0.00001));
      VALIDATE("Cost Regulation %",IndirectCostPctReq);
    
      OnBeforeInsertValueEntryLine(IntrastatJnlLine,"Item Ledger Entry"); <=====================
      INSERT;
    END;
Report<Delete Invd Sales Ret. Orders>.PROCEDURE<OnBeforeDeleteSalesOrderLine>
  Raised in: Report<Delete Invd Sales Ret. Orders>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
                THEN BEGIN
                  IF SalesOrderLine.Type = SalesOrderLine.Type::"Charge (Item)" THEN BEGIN
                    ItemChargeAssgntSales.SETRANGE("Document Line No.",SalesOrderLine."Line No.");
                    ItemChargeAssgntSales.DELETEALL;
                  END;
                  OnBeforeDeleteSalesOrderLine(SalesOrderLine); <=====================
                  IF SalesOrderLine.HASLINKS THEN
                    SalesOrderLine.DELETELINKS;
                  SalesOrderLine.DELETE;
                END ELSE
    ...
Report<Delete Invd Purch. Ret. Orders>.PROCEDURE<OnBeforePurchLineDelete>
  Raised in: Report<Delete Invd Purch. Ret. Orders>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
                    ItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchLine."Line No.");
                    ItemChargeAssgntPurch.DELETEALL;
                  END;
                  IF PurchLine.HASLINKS THEN
                    PurchLine.DELETELINKS;
                  OnBeforePurchLineDelete(PurchLine); <=====================
                  PurchLine.DELETE;
                END ELSE
                  AllLinesDeleted := FALSE;
              UNTIL PurchLine.NEXT = 0;
    ...
Report<Calculate Whse. Adjustment>.PROCEDURE<OnAfterInsertItemJnlLine>
  Raised in: Report<Calculate Whse. Adjustment>.PROCEDURE<InsertItemJnlLine>
    Code lines:
    ...
        VALIDATE(Quantity,Quantity2);
        "Quantity (Base)" := QuantityBase2;
        "Invoiced Qty. (Base)" := QuantityBase2;
        "Warehouse Adjustment" := TRUE;
        INSERT(TRUE);
        OnAfterInsertItemJnlLine(ItemJnlLine); <=====================
    
        IF Location.Code <> '' THEN
          IF Location."Directed Put-away and Pick" THEN BEGIN
            WhseEntry2.SETCURRENTKEY(
    ...
Report<Whse. Calculate Inventory>.PROCEDURE<OnAfterWhseJnlLineInsert>
  Raised in: Report<Whse. Calculate Inventory>.PROCEDURE<InsertWhseJnlLine>
    Code lines:
    ...
          "Whse. Document Type" :=
            "Whse. Document Type"::"Whse. Phys. Inventory";
          "Phys Invt Counting Period Code" := PhysInvtCountCode;
          "Phys Invt Counting Period Type" := CycleSourceType;
          INSERT(TRUE);
          OnAfterWhseJnlLineInsert(WhseJnlLine); <=====================
        END;
        IF WhseEntry.FIND('+') THEN;
        WhseEntry.SETRANGE("Lot No.");
        WhseEntry.SETRANGE("Serial No.");
    ...
Report<Whse. Get Bin Content>.PROCEDURE<OnAfterInsertItemJnlLine>
  Raised in: Report<Whse. Get Bin Content>.PROCEDURE<InsertItemJournalLine>
    Code lines:
    ...
      ItemJournalTempl.GET("Journal Template Name");
      ItemJournalBatch.GET("Journal Template Name","Journal Batch Name");
      "Source Code" := ItemJournalTempl."Source Code";
      "Posting No. Series" := ItemJournalBatch."Posting No. Series";
      INSERT;
      OnAfterInsertItemJnlLine(ItemJournalLine); <=====================
    END;
Report<VAT Report Request Page>.PROCEDURE<OnAfterSetPeriodIsEditable>
  Raised in: Report<VAT Report Request Page>.<RequestPage>.<OnOpenPage>
    Code lines:
    ...
        MODIFY;
      END;
    END;
    
    PeriodIsEditable := "Return Period No." = '';
    OnAfterSetPeriodIsEditable(Rec,PeriodIsEditable); <=====================
Report<Calculate Inventory>.PROCEDURE<OnAfterInsertItemJnlLine>
  Raised in: Report<Calculate Inventory>.PROCEDURE<InsertItemJnlLine>
    Code lines:
    ...
          "Last Item Ledger Entry No." := ItemLedgEntry."Entry No."
        ELSE
          "Last Item Ledger Entry No." := 0;
    
        INSERT(TRUE);
        OnAfterInsertItemJnlLine(ItemJnlLine); <=====================
    
        IF Location.Code <> '' THEN
          IF Location."Directed Put-away and Pick" THEN BEGIN
            WhseEntry.SETCURRENTKEY(
    ...
Report<Close Income Statement>.PROCEDURE<OnBeforeCheckDimPostingRules>
  Raised in: Report<Close Income Statement>.PROCEDURE<CheckDimPostingRules>
    Code lines:
    OnBeforeCheckDimPostingRules(SelectedDim,ErrorText,Handled); <=====================
    IF Handled THEN
      EXIT(ErrorText);
    
    DefaultDim.SETRANGE("Table ID",DATABASE::"G/L Account");
    DefaultDim.SETFILTER(
      "Value Posting",'%1|%2',
      DefaultDim."Value Posting"::"Same Code",DefaultDim."Value Posting"::"Code Mandatory");
    
    IF DefaultDim.FIND('-') THEN
    ...
Report<Refresh Production Order>.PROCEDURE<OnAfterRefreshProdOrder>
  Raised in: Report<Refresh Production Order>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
      WhseProdRelease.Release("Production Order");
      IF CreateInbRqst THEN
        WhseOutputProdRelease.Release("Production Order");
    END;
    
    OnAfterRefreshProdOrder("Production Order",ErrorOccured); <=====================
    IF ErrorOccured THEN
      MESSAGE(Text005,ProdOrder.TABLECAPTION,ProdOrderLine.FIELDCAPTION("Bin Code"));
Report<Replan Production Order>.PROCEDURE<OnAfterLastProdOrderRtngLine>
  Raised in: Report<Replan Production Order>.<DataItem>.<OnPostDataItem>
    Code lines:
    CalcProdOrder.CalculateProdOrderDates("Prod. Order Line",TRUE);
    OnAfterLastProdOrderRtngLine("Prod. Order Line"); <=====================
Report<Calculate Work Center Calendar>.PROCEDURE<OnAfterDeleteWorkCenterCalendarEntries>
  Raised in: Report<Calculate Work Center Calendar>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
    Calendar.SETRANGE("Capacity Type",Calendar."Capacity Type"::"Work Center");
    Calendar.SETRANGE("No.","No.");
    Calendar.SETRANGE(Date,StartingDate,EndingDate);
    Calendar.DELETEALL;
    
    OnAfterDeleteWorkCenterCalendarEntries("Work Center",StartingDate,EndingDate); <=====================
    
    IF "Consolidated Calendar" THEN BEGIN
      Calendar.SETRANGE("No.");
      Calendar.SETCURRENTKEY("Work Center No.",Date);
    ...
Table<Payment Service Setup>.PROCEDURE<OnCreatePaymentService>
  Raised in: Table<Payment Service Setup>.PROCEDURE<NewPaymentService>
    Code lines:
    ...
      0:
        EXIT(FALSE);
      1:
        BEGIN
          TempPaymentServiceSetupProviders.FINDFIRST;
          OnCreatePaymentService(TempPaymentServiceSetupProviders); <=====================
          EXIT(TRUE);
        END;
      ELSE BEGIN
        IF PAGE.RUNMODAL(PAGE::"Select Payment Service Type",TempPaymentServiceSetup) = ACTION::LookupOK THEN BEGIN
    ...
  Raised in: Table<Payment Service Setup>.PROCEDURE<NewPaymentService>
    Code lines:
    ...
      0:
        EXIT(FALSE);
      1:
        BEGIN
          TempPaymentServiceSetupProviders.FINDFIRST;
          OnCreatePaymentService(TempPaymentServiceSetupProviders); <=====================
          EXIT(TRUE);
        END;
      ELSE BEGIN
        IF PAGE.RUNMODAL(PAGE::"Select Payment Service Type",TempPaymentServiceSetup) = ACTION::LookupOK THEN BEGIN
    ...
Table<Payment Service Setup>.PROCEDURE<OnRegisterPaymentServiceProviders>
  Raised in: Page<Select Payment Service Type>.<OnOpenPage>
    Code lines:
    OnRegisterPaymentServiceProviders(Rec); <=====================
  Raised in: Page<Payment Services>.<OnOpenPage>
    Code lines:
    OnRegisterPaymentServices(Rec);
    OnRegisterPaymentServiceProviders(TempPaymentServiceSetupProviders); <=====================
    IF TempPaymentServiceSetupProviders.ISEMPTY THEN
      ERROR(NoServicesInstalledErr);
  Raised in: Table<Payment Service Setup>.PROCEDURE<AskUserToSetupNewPaymentService>
    Code lines:
    IF NOT GUIALLOWED THEN
      EXIT(FALSE);
    
    OnRegisterPaymentServiceProviders(TempPaymentServiceSetupProviders); <=====================
    IF NOT TempPaymentServiceSetupProviders.FINDFIRST THEN
      EXIT(FALSE);
    
    // Check if there are payment services that are not enabled
    OnRegisterPaymentServices(TempNotEnabledPaymentServiceSetupProviders);
    DefinedPaymentServiceExist := TempNotEnabledPaymentServiceSetupProviders.FINDFIRST;
    ...
  Raised in: Table<Payment Service Setup>.PROCEDURE<IsPaymentServiceVisible>
    Code lines:
    OnRegisterPaymentServiceProviders(TempPaymentServiceSetup); <=====================
    EXIT(NOT TempPaymentServiceSetup.ISEMPTY);
  Raised in: Table<Payment Service Setup>.PROCEDURE<NewPaymentService>
    Code lines:
    OnRegisterPaymentServiceProviders(TempPaymentServiceSetupProviders); <=====================
    CASE TempPaymentServiceSetupProviders.COUNT OF
      0:
        EXIT(FALSE);
      1:
        BEGIN
          TempPaymentServiceSetupProviders.FINDFIRST;
          OnCreatePaymentService(TempPaymentServiceSetupProviders);
          EXIT(TRUE);
        END;
    ...
Table<Payment Service Setup>.PROCEDURE<OnRegisterPaymentServices>
  Raised in: Page<Payment Services>.<OnOpenPage>
    Code lines:
    OnRegisterPaymentServices(Rec); <=====================
    OnRegisterPaymentServiceProviders(TempPaymentServiceSetupProviders);
    IF TempPaymentServiceSetupProviders.ISEMPTY THEN
      ERROR(NoServicesInstalledErr);
  Raised in: Page<Payment Services>.Action<NewAction>.<OnAction>
    Code lines:
    IF NewPaymentService THEN BEGIN
      RESET;
      DELETEALL;
      OnRegisterPaymentServices(Rec); <=====================
    END;
  Raised in: Page<Payment Services>.Action<Setup>.<OnAction>
    Code lines:
    OpenSetupCard;
    RESET;
    DELETEALL;
    OnRegisterPaymentServices(Rec); <=====================
  Raised in: Table<Payment Service Setup>.PROCEDURE<GetDefaultPaymentServices>
    Code lines:
    OnRegisterPaymentServices(TempPaymentServiceSetup); <=====================
    TempPaymentServiceSetup.SETRANGE("Always Include on Documents",TRUE);
    TempPaymentServiceSetup.SETRANGE(Enabled,TRUE);
    
    IF NOT TempPaymentServiceSetup.FINDFIRST THEN
      EXIT(FALSE);
    
    TransferToRecordSetBuffer(TempPaymentServiceSetup,TempRecordSetBuffer);
    RecordSetManagement.GetSet(TempRecordSetBuffer,SetID);
    IF SetID = 0 THEN
    ...
  Raised in: Table<Payment Service Setup>.PROCEDURE<GetEnabledPaymentServices>
    Code lines:
    TempPaymentServiceSetup.RESET;
    TempPaymentServiceSetup.DELETEALL;
    OnRegisterPaymentServices(TempPaymentServiceSetup); <=====================
    TempPaymentServiceSetup.SETRANGE(Enabled,TRUE);
    EXIT(TempPaymentServiceSetup.FINDSET);
  Raised in: Table<Payment Service Setup>.PROCEDURE<GetSelectedPaymentsText>
    Code lines:
    SelectedPaymentServices := NoPaymentMethodsSelectedTxt;
    
    IF SetID = 0 THEN
      EXIT;
    
    OnRegisterPaymentServices(TempPaymentServiceSetup); <=====================
    LoadSet(TempPaymentServiceSetup,SetID);
    
    TempPaymentServiceSetup.SETRANGE(Available,TRUE);
    IF NOT TempPaymentServiceSetup.FINDSET THEN
    ...
  Raised in: Table<Payment Service Setup>.PROCEDURE<AskUserToSetupNewPaymentService>
    Code lines:
    ...
    OnRegisterPaymentServiceProviders(TempPaymentServiceSetupProviders);
    IF NOT TempPaymentServiceSetupProviders.FINDFIRST THEN
      EXIT(FALSE);
    
    // Check if there are payment services that are not enabled
    OnRegisterPaymentServices(TempNotEnabledPaymentServiceSetupProviders); <=====================
    DefinedPaymentServiceExist := TempNotEnabledPaymentServiceSetupProviders.FINDFIRST;
    
    IF DefinedPaymentServiceExist THEN BEGIN
      SelectedOption := STRMENU(CreateOrUpdateOptionQst,1,SetupExistingServicesOrCreateNewQst);
    ...
Table<Sales Shipment Line>.PROCEDURE<OnAfterInitFromSalesLine>
  Raised in: Table<Sales Shipment Line>.PROCEDURE<InitFromSalesLine>
    Code lines:
    ...
    IF SalesLine."Document Type" = SalesLine."Document Type"::Order THEN BEGIN
      "Order No." := SalesLine."Document No.";
      "Order Line No." := SalesLine."Line No.";
    END;
    
    OnAfterInitFromSalesLine(SalesShptHeader,SalesLine,Rec); <=====================
Table<Sales Shipment Line>.PROCEDURE<OnAfterInsertInvLineFromShptLine>
  Raised in: Table<Sales Shipment Line>.PROCEDURE<InsertInvLineFromShptLine>
    Code lines:
    ...
      SalesLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
      SalesLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
      SalesLine."Dimension Set ID" := "Dimension Set ID";
      OnBeforeInsertInvLineFromShptLine(Rec,SalesLine);
      SalesLine.INSERT;
      OnAfterInsertInvLineFromShptLine(SalesLine); <=====================
    
      ItemTrackingMgt.CopyHandledItemTrkgToInvLine(SalesOrderLine,SalesLine);
    
      NextLineNo := NextLineNo + 10000;
    ...
Table<Sales Shipment Line>.PROCEDURE<OnBeforeInsertInvLineFromShptLine>
  Raised in: Table<Sales Shipment Line>.PROCEDURE<InsertInvLineFromShptLine>
    Code lines:
    ...
      SalesLine."Document Type" := TempSalesLine."Document Type";
      SalesLine."Document No." := TempSalesLine."Document No.";
      LanguageManagement.SetGlobalLanguageByCode(SalesInvHeader."Language Code");
      SalesLine.Description := STRSUBSTNO(Text000,"Document No.");
      LanguageManagement.RestoreGlobalLanguage;
      OnBeforeInsertInvLineFromShptLineBeforeInsertTextLine(Rec,SalesLine,NextLineNo,Handled); <=====================
      IF NOT Handled THEN BEGIN
        SalesLine.INSERT;
        NextLineNo := NextLineNo + 10000;
      END;
    ...
Table<Sales Shipment Line>.PROCEDURE<OnBeforeInsertInvLineFromShptLineBeforeInsertTextLine>
  Raised in: Table<Sales Shipment Line>.PROCEDURE<InsertInvLineFromShptLine>
    Code lines:
    ...
      SalesLine."Document Type" := TempSalesLine."Document Type";
      SalesLine."Document No." := TempSalesLine."Document No.";
      LanguageManagement.SetGlobalLanguageByCode(SalesInvHeader."Language Code");
      SalesLine.Description := STRSUBSTNO(Text000,"Document No.");
      LanguageManagement.RestoreGlobalLanguage;
      OnBeforeInsertInvLineFromShptLineBeforeInsertTextLine(Rec,SalesLine,NextLineNo,Handled); <=====================
      IF NOT Handled THEN BEGIN
        SalesLine.INSERT;
        NextLineNo := NextLineNo + 10000;
      END;
    ...
Table<Sales Invoice Header>.PROCEDURE<OnGetPaymentReference>
  Raised in: Table<Sales Invoice Header>.PROCEDURE<GetPaymentReference>
    Code lines:
    OnGetPaymentReference(PaymentReference); <=====================
    EXIT(PaymentReference);
Table<Sales Invoice Header>.PROCEDURE<OnGetPaymentReferenceLbl>
  Raised in: Table<Sales Invoice Header>.PROCEDURE<GetPaymentReferenceLbl>
    Code lines:
    OnGetPaymentReferenceLbl(PaymentReferenceLbl); <=====================
    EXIT(PaymentReferenceLbl);
Table<Sales Invoice Line>.PROCEDURE<OnAfterInitFromSalesLine>
  Raised in: Table<Sales Invoice Line>.PROCEDURE<InitFromSalesLine>
    Code lines:
    ...
    "Posting Date" := SalesInvHeader."Posting Date";
    "Document No." := SalesInvHeader."No.";
    Quantity := SalesLine."Qty. to Invoice";
    "Quantity (Base)" := SalesLine."Qty. to Invoice (Base)";
    
    OnAfterInitFromSalesLine(Rec,SalesInvHeader,SalesLine); <=====================
Table<OAuth 2.0 Setup>.PROCEDURE<OnAfterRequestAccessToken>
  Raised in: Table<OAuth 2.0 Setup>.PROCEDURE<RequestAccessToken>
    Code lines:
    ...
        AccessToken,RefreshToken);
    
    IF Result THEN
      SaveTokens(AccessToken,RefreshToken);
    
    OnAfterRequestAccessToken(Rec,Result,MessageText); <=====================
Table<Sales Cr.Memo Line>.PROCEDURE<OnAfterInitFromSalesLine>
  Raised in: Table<Sales Cr.Memo Line>.PROCEDURE<InitFromSalesLine>
    Code lines:
    ...
    "Posting Date" := SalesCrMemoHeader."Posting Date";
    "Document No." := SalesCrMemoHeader."No.";
    Quantity := SalesLine."Qty. to Invoice";
    "Quantity (Base)" := SalesLine."Qty. to Invoice (Base)";
    
    OnAfterInitFromSalesLine(Rec,SalesCrMemoHeader,SalesLine); <=====================
Table<Purch. Rcpt. Line>.PROCEDURE<OnAfterInitFromPurchLine>
  Raised in: Table<Purch. Rcpt. Line>.PROCEDURE<InitFromPurchLine>
    Code lines:
    ...
      Factor := PurchLine."Qty. to Receive" / PurchLine.Quantity;
      IF Factor <> 1 THEN
        UpdateJobPrices(Factor);
    END;
    
    OnAfterInitFromPurchLine(PurchRcptHeader,PurchLine,Rec); <=====================
Table<Purch. Rcpt. Line>.PROCEDURE<OnAfterInsertInvLineFromRcptLine>
  Raised in: Table<Purch. Rcpt. Line>.PROCEDURE<InsertInvLineFromRcptLine>
    Code lines:
    ...
      ELSE
        PurchLine."Drop Shipment" := TRUE;
    
      OnBeforeInsertInvLineFromRcptLine(Rec,PurchLine);
      PurchLine.INSERT;
      OnAfterInsertInvLineFromRcptLine(PurchLine); <=====================
    
      ItemTrackingMgt.CopyHandledItemTrkgToInvLine2(PurchOrderLine,PurchLine);
    
      NextLineNo := NextLineNo + 10000;
    ...
Table<Purch. Rcpt. Line>.PROCEDURE<OnBeforeInsertInvLineFromRcptLine>
  Raised in: Table<Purch. Rcpt. Line>.PROCEDURE<InsertInvLineFromRcptLine>
    Code lines:
    ...
      PurchLine."Document Type" := TempPurchLine."Document Type";
      PurchLine."Document No." := TempPurchLine."Document No.";
      LanguageManagement.SetGlobalLanguageByCode(PurchInvHeader."Language Code");
      PurchLine.Description := STRSUBSTNO(Text000,"Document No.");
      LanguageManagement.RestoreGlobalLanguage;
      OnBeforeInsertInvLineFromRcptLineBeforeInsertTextLine(Rec,PurchLine,NextLineNo,Handled); <=====================
      IF NOT Handled THEN BEGIN
        PurchLine.INSERT;
        NextLineNo := NextLineNo + 10000;
      END;
    ...
Table<Purch. Rcpt. Line>.PROCEDURE<OnBeforeInsertInvLineFromRcptLineBeforeInsertTextLine>
  Raised in: Table<Purch. Rcpt. Line>.PROCEDURE<InsertInvLineFromRcptLine>
    Code lines:
    ...
      PurchLine."Document Type" := TempPurchLine."Document Type";
      PurchLine."Document No." := TempPurchLine."Document No.";
      LanguageManagement.SetGlobalLanguageByCode(PurchInvHeader."Language Code");
      PurchLine.Description := STRSUBSTNO(Text000,"Document No.");
      LanguageManagement.RestoreGlobalLanguage;
      OnBeforeInsertInvLineFromRcptLineBeforeInsertTextLine(Rec,PurchLine,NextLineNo,Handled); <=====================
      IF NOT Handled THEN BEGIN
        PurchLine.INSERT;
        NextLineNo := NextLineNo + 10000;
      END;
    ...
Table<Purch. Inv. Line>.PROCEDURE<OnAfterInitFromPurchLine>
  Raised in: Table<Purch. Inv. Line>.PROCEDURE<InitFromPurchLine>
    Code lines:
    ...
    "Posting Date" := PurchInvHeader."Posting Date";
    "Document No." := PurchInvHeader."No.";
    Quantity := PurchLine."Qty. to Invoice";
    "Quantity (Base)" := PurchLine."Qty. to Invoice (Base)";
    
    OnAfterInitFromPurchLine(PurchInvHeader,PurchLine,Rec); <=====================
Table<Transformation Rule>.PROCEDURE<OnCreateTransformationRules>
  Raised in: Page<Transformation Rules>.<OnOpenPage>
    Code lines:
    IF ISEMPTY THEN
      CreateDefaultTransformations;
    OnCreateTransformationRules; <=====================
  Raised in: Table<Transformation Rule>.PROCEDURE<CreateDefaultTransformations>
    Code lines:
    ...
    InsertRec(YYYYMMDDHHMMSSTxt,YYYYMMDDHHMMSSDescTxt,"Transformation Type"::"Date and Time Formatting",0,0,'yyyyMMddHHmmss','');
    InsertRec(ALPHANUMERIC_ONLYTxt,AlphaNumericDescTxt,"Transformation Type"::"Remove Non-Alphanumeric Characters",0,0,'','');
    InsertRec(DKNUMBERFORMATTxt,DKNUMBERFORMATDescTxt,"Transformation Type"::"Decimal Formatting",0,0,'','da-DK');
    InsertRec(USDATEFORMATTxt,USDATEFORMATDescTxt,"Transformation Type"::"Date Formatting",0,0,'','en-US');
    InsertRec(USDATETIMEFORMATTxt,USDATETIMEFORMATDescTxt,"Transformation Type"::"Date and Time Formatting",0,0,'','en-US');
    OnCreateTransformationRules; <=====================
    InsertFindAndReplaceRule(
      DeleteNOTPROVIDEDTxt,DeleteNOTPROVIDEDDescriptionTxt,"Transformation Type"::"Regular Expression - Replace",'NOTPROVIDED','');
Table<Transformation Rule>.PROCEDURE<OnTransformation>
  Raised in: Table<Transformation Rule>.PROCEDURE<TransformText>
    Code lines:
    ...
      "Transformation Type"::"Date and Time Formatting":
        NewValue := DateTimeFormatting(OldValue);
      "Transformation Type"::"Decimal Formatting":
        NewValue := DecimalFormatting(OldValue);
      "Transformation Type"::Custom:
        OnTransformation(Code,OldValue,NewValue); <=====================
    END;
    
    IF "Next Transformation Rule" <> '' THEN
      IF TransformationRule.GET("Next Transformation Rule") THEN
    ...
Table<Purch. Cr. Memo Line>.PROCEDURE<OnAfterInitFromPurchLine>
  Raised in: Table<Purch. Cr. Memo Line>.PROCEDURE<InitFromPurchLine>
    Code lines:
    ...
    "Posting Date" := PurchCrMemoHdr."Posting Date";
    "Document No." := PurchCrMemoHdr."No.";
    Quantity := PurchLine."Qty. to Invoice";
    "Quantity (Base)" := PurchLine."Qty. to Invoice (Base)";
    
    OnAfterInitFromPurchLine(PurchCrMemoHdr,PurchLine,Rec); <=====================
Table<Incoming Document>.PROCEDURE<OnAfterCreateGenJnlLineFromIncomingDocFail>
  Raised in: Table<Incoming Document>.PROCEDURE<CreateGenJnlLine>
    Code lines:
    ...
    GenJnlLine.Description := COPYSTR(Description,1,MAXSTRLEN(GenJnlLine.Description));
    
    IF GenJnlLine.INSERT(TRUE) THEN
      OnAfterCreateGenJnlLineFromIncomingDocSuccess(Rec)
    ELSE
      OnAfterCreateGenJnlLineFromIncomingDocFail(Rec); <=====================
    
    IF GenJnlLine.HASLINKS THEN
      GenJnlLine.DELETELINKS;
    IF GetURL <> '' THEN
    ...
  Raised in: Table<Incoming Document>.PROCEDURE<CreateGeneralJournalLineWithDataExchange>
    Code lines:
    ...
    
    ErrorMessage.SetContext(RECORDID);
    IF NOT ErrorMessage.HasErrors(FALSE) THEN
      OnAfterCreateGenJnlLineFromIncomingDocSuccess(Rec)
    ELSE
      OnAfterCreateGenJnlLineFromIncomingDocFail(Rec); <=====================
Table<Incoming Document>.PROCEDURE<OnAfterCreateGenJnlLineFromIncomingDocSuccess>
  Raised in: Table<Incoming Document>.PROCEDURE<CreateGenJnlLine>
    Code lines:
    ...
    GenJnlLine.SetUpNewLine(LastGenJnlLine,0,TRUE);
    GenJnlLine."Incoming Document Entry No." := "Entry No.";
    GenJnlLine.Description := COPYSTR(Description,1,MAXSTRLEN(GenJnlLine.Description));
    
    IF GenJnlLine.INSERT(TRUE) THEN
      OnAfterCreateGenJnlLineFromIncomingDocSuccess(Rec) <=====================
    ELSE
      OnAfterCreateGenJnlLineFromIncomingDocFail(Rec);
    
    IF GenJnlLine.HASLINKS THEN
    ...
  Raised in: Table<Incoming Document>.PROCEDURE<CreateGeneralJournalLineWithDataExchange>
    Code lines:
    ...
    
    CreateWithDataExchange("Document Type"::Journal);
    
    ErrorMessage.SetContext(RECORDID);
    IF NOT ErrorMessage.HasErrors(FALSE) THEN
      OnAfterCreateGenJnlLineFromIncomingDocSuccess(Rec) <=====================
    ELSE
      OnAfterCreateGenJnlLineFromIncomingDocFail(Rec);
Table<Incoming Document>.PROCEDURE<OnAfterCreatePurchHeaderFromIncomingDoc>
  Raised in: Table<Incoming Document>.PROCEDURE<CreatePurchDoc>
    Code lines:
    ...
        PurchHeader."Document Type" := PurchHeader."Document Type"::Invoice;
      DocumentType::"Credit Memo":
        PurchHeader."Document Type" := PurchHeader."Document Type"::"Credit Memo";
    END;
    PurchHeader.INSERT(TRUE);
    OnAfterCreatePurchHeaderFromIncomingDoc(PurchHeader); <=====================
    IF GetURL <> '' THEN
      PurchHeader.ADDLINK(GetURL,Description);
    PurchHeader."Incoming Document Entry No." := "Entry No.";
    PurchHeader.MODIFY;
    ...
Table<Incoming Document>.PROCEDURE<OnAfterCreateSalesHeaderFromIncomingDoc>
  Raised in: Table<Incoming Document>.PROCEDURE<CreateSalesDoc>
    Code lines:
    ...
        SalesHeader."Document Type" := SalesHeader."Document Type"::Invoice;
      DocumentType::"Credit Memo":
        SalesHeader."Document Type" := SalesHeader."Document Type"::"Credit Memo";
    END;
    SalesHeader.INSERT(TRUE);
    OnAfterCreateSalesHeaderFromIncomingDoc(SalesHeader); <=====================
    IF GetURL <> '' THEN
      SalesHeader.ADDLINK(GetURL,Description);
    SalesHeader."Incoming Document Entry No." := "Entry No.";
    SalesHeader.MODIFY;
    ...
Table<Incoming Document>.PROCEDURE<OnCheckIncomingDocCreateDocRestrictions>
  Raised in: Table<Incoming Document>.PROCEDURE<CreateWithDataExchange>
    Code lines:
    FIND;
    
    IF ApprovalsMgmt.IsIncomingDocApprovalsWorkflowEnabled(Rec) AND (Status = Status::New) THEN
      ERROR(DocWhenApprovalIsCompleteErr);
    
    OnCheckIncomingDocCreateDocRestrictions; <=====================
    
    IF "Data Exchange Type" = '' THEN
      ERROR(DataExchangeTypeEmptyErr);
    
    ...
Table<Incoming Document>.PROCEDURE<OnCheckIncomingDocReleaseRestrictions>
  Raised in: Codeunit<Release Incoming Document>.<OnRun>
    Code lines:
    IF Status = Status::Released THEN
      EXIT;
    IF Status IN [Status::Created,Status::Posted] THEN
      ERROR(STRSUBSTNO(CanReleasedIfStatusErr,Status::"Pending Approval",Status::New,Status::Failed));
    
    OnCheckIncomingDocReleaseRestrictions; <=====================
    
    TESTFIELD(Posted,FALSE);
    
    IF NOT IsADocumentAttached THEN
    ...
Table<Incoming Document>.PROCEDURE<OnCheckIncomingDocSetForOCRRestrictions>
  Raised in: Codeunit<Send Incoming Document to OCR>.PROCEDURE<VerifySendToOCR>
    Code lines:
    ...
      IF "OCR Status" IN ["OCR Status"::Sent,"OCR Status"::Success,"OCR Status"::"Awaiting Verification"] THEN BEGIN
        ShowMessage(STRSUBSTNO(ErrorMessage,FORMAT("OCR Status")));
        EXIT(FALSE);
      END;
    
      OnCheckIncomingDocSetForOCRRestrictions; <=====================
    
      IF ApprovalsMgmt.IsIncomingDocApprovalsWorkflowEnabled(IncomingDocument) AND (Status = Status::New) THEN
        ERROR(OCRWhenApprovalIsCompleteErr);
    
    ...
Table<Incoming Document>.PROCEDURE<OnGetDataExchangePath>
  Raised in: Table<Incoming Document>.PROCEDURE<GetDataExchangePath>
    Code lines:
    ...
      FIELDNO("Order No."):
        EXIT(DataExchLineDef.GetPath(DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Vendor Order No.")));
      FIELDNO("VAT Amount"):
        EXIT(DataExchLineDef.GetPath(DATABASE::"G/L Entry",GLEntry.FIELDNO("VAT Amount")));
      ELSE BEGIN
        OnGetDataExchangePath(DataExchLineDef,FieldNumber,DataExchangePath); <=====================
        IF  DataExchangePath <> '' THEN
          EXIT(DataExchangePath);
      END;
    END;
    ...
Table<O365 Getting Started>.PROCEDURE<OnO365DemoCompanyInitialize>
  Raised in: Codeunit<O365 Getting Started Mgt.>.PROCEDURE<CheckOrLaunchWizard>
    Code lines:
    ...
    
    WizardHasBeenShownToUser := O365GettingStarted.GET(USERID,ClientTypeManagement.GetCurrentClientType);
    
    IF NOT WizardHasBeenShownToUser THEN BEGIN
      EnsurePayPalDemoAccountExists;
      O365GettingStarted.OnO365DemoCompanyInitialize; <=====================
      IF Launch THEN BEGIN
        COMMIT;
        PAGE.RUNMODAL(PageToStart);
      END;
    ...
Table<Incoming Document Attachment>.PROCEDURE<OnAttachBinaryFile>
  Raised in: Table<Incoming Document>.PROCEDURE<AddXmlAttachmentFromXmlText>
    Code lines:
    ...
    IncomingDocumentAttachment.VALIDATE("File Extension",'xml');
    IncomingDocumentAttachment.Content.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
    OutStr.WRITETEXT(XmlText);
    IncomingDocumentAttachment.INSERT(TRUE);
    IF IncomingDocumentAttachment.Type IN [IncomingDocumentAttachment.Type::Image,IncomingDocumentAttachment.Type::PDF] THEN
      IncomingDocumentAttachment.OnAttachBinaryFile; <=====================
  Raised in: Codeunit<Import Attachment - Inc. Doc.>.PROCEDURE<ImportAttachment>
    Code lines:
    ...
      END;
    
      INSERT(TRUE);
    
      IF Type IN [Type::Image,Type::PDF] THEN
        OnAttachBinaryFile; <=====================
    END;
    EXIT(TRUE);
Table<Incoming Document Attachment>.PROCEDURE<OnBeforeExtractHeaderFields>
  Raised in: Table<Incoming Document Attachment>.PROCEDURE<ExtractHeaderFields>
    Code lines:
    ...
    AddFieldToFieldBuffer(TempFieldBuffer,IncomingDocument.FIELDNO("Vendor IBAN"));
    AddFieldToFieldBuffer(TempFieldBuffer,IncomingDocument.FIELDNO("Vendor Bank Branch No."));
    AddFieldToFieldBuffer(TempFieldBuffer,IncomingDocument.FIELDNO("Vendor Bank Account No."));
    AddFieldToFieldBuffer(TempFieldBuffer,IncomingDocument.FIELDNO("Vendor Phone No."));
    
    OnBeforeExtractHeaderFields(TempFieldBuffer,IncomingDocument); <=====================
    
    TempFieldBuffer.RESET;
    TempFieldBuffer.FINDSET;
    REPEAT
    ...
Table<Incoming Document Attachment>.PROCEDURE<OnGetBinaryContent>
  Raised in: Table<Incoming Document Attachment>.PROCEDURE<Export>
    Code lines:
    ...
      EXIT;
    
    IF DefaultFileName = '' THEN
      DefaultFileName := Name + '.' + "File Extension";
    
    OnGetBinaryContent(TempBlob); <=====================
    IF NOT TempBlob.Blob.HASVALUE THEN
      TempBlob.Blob := Content;
    EXIT(FileMgt.BLOBExport(TempBlob,DefaultFileName,ShowFileDialog));
  Raised in: Table<Incoming Document Attachment>.PROCEDURE<SendToOCR>
    Code lines:
    CALCFIELDS(Content);
    TempBlob.INIT;
    TempBlob."Primary Key" := "Incoming Document Entry No.";
    OnGetBinaryContent(TempBlob); <=====================
    IF NOT TempBlob.Blob.HASVALUE THEN
      TempBlob.Blob := Content;
    
    IF "External Document Reference" = '' THEN
      "External Document Reference" := LOWERCASE(DELCHR(FORMAT(CREATEGUID),'=','{}-'));
    MODIFY;
    ...
  Raised in: Table<Incoming Document Attachment>.PROCEDURE<UpdateIncomingDocumentHeaderFields>
    Code lines:
    IF Type <> Type::XML THEN
      EXIT;
    TempBlob.INIT;
    OnGetBinaryContent(TempBlob); <=====================
    IF NOT TempBlob.Blob.HASVALUE THEN
      TempBlob.Blob := Content;
    TempBlob.Blob.CREATEINSTREAM(InStream);
    IF NOT XMLDOMManagement.LoadXMLNodeFromInStream(InStream,XMLRootNode) THEN
      EXIT;
    IF NOT IncomingDocument.GET("Incoming Document Entry No.") THEN
    ...
Table<Service Connection>.PROCEDURE<OnRegisterServiceConnection>
  Raised in: Page<Service Connections>.PROCEDURE<ReloadServiceConnections>
    Code lines:
    DELETEALL;
    OnRegisterServiceConnection(Rec); <=====================
  Raised in: Page<Service Connections Part>.<OnOpenPage>
    Code lines:
    OnRegisterServiceConnection(Rec); <=====================
  Raised in: Page<Service Connections Part>.PROCEDURE<CallSetup>
    Code lines:
    ...
      EXIT;
    RecordRef.GET("Record ID");
    RecordRefVariant := RecordRef;
    PAGE.RUNMODAL("Page ID",RecordRefVariant);
    DELETE;
    OnRegisterServiceConnection(Rec); <=====================
    IF GET(xRec."No.") THEN;
    CurrPage.UPDATE(FALSE);
Table<My Notifications>.PROCEDURE<OnStateChanged>
  Raised in: Table<My Notifications>.Field<Enabled>.<OnValidate>
    Code lines:
    IF Enabled <> xRec.Enabled THEN
      OnStateChanged("Notification Id",Enabled); <=====================
Table<Job>.PROCEDURE<OnAfterChangeJobCompletionStatus>
  Raised in: Table<Job>.PROCEDURE<ChangeJobCompletionStatus>
    Code lines:
    ...
      JobCalcWIP.ReOpenJob("No.");
      "WIP Posting Date" := 0D;
      MESSAGE(ReverseCompletionEntriesMsg,GetReportCaption(REPORT::"Job Post WIP to G/L"));
    END;
    
    OnAfterChangeJobCompletionStatus(Rec,xRec) <=====================
Table<Job>.PROCEDURE<OnAfterUpdateBillToCust>
  Raised in: Table<Job>.PROCEDURE<UpdateCust>
    Code lines:
    ...
      "Language Code" := '';
      "Bill-to County" := '';
      VALIDATE("Bill-to Contact No.",'');
    END;
    
    OnAfterUpdateBillToCust(Rec); <=====================
Table<G/L Entry>.PROCEDURE<OnAfterCopyGLEntryFromGenJnlLine>
  Raised in: Table<G/L Entry>.PROCEDURE<CopyFromGenJnlLine>
    Code lines:
    ...
    "Reason Code" := GenJnlLine."Reason Code";
    "User ID" := USERID;
    "No. Series" := GenJnlLine."Posting No. Series";
    "IC Partner Code" := GenJnlLine."IC Partner Code";
    
    OnAfterCopyGLEntryFromGenJnlLine(Rec,GenJnlLine); <=====================
Table<Standard Vendor Purchase Code>.PROCEDURE<OnBeforeApplyStdCodesToPurchaseLines>
  Raised in: Table<Standard Vendor Purchase Code>.PROCEDURE<ApplyStdCodesToPurchaseLines>
    Code lines:
    ...
    
        PurchLine."Shortcut Dimension 1 Code" := StdPurchLine."Shortcut Dimension 1 Code";
        PurchLine."Shortcut Dimension 2 Code" := StdPurchLine."Shortcut Dimension 2 Code";
    
        CombineDimensions(PurchLine,StdPurchLine);
        OnBeforeApplyStdCodesToPurchaseLines(PurchLine,StdPurchLine); <=====================
        IF StdPurchLine.InsertLine THEN BEGIN
          PurchLine."Line No." := GetNextLineNo(PurchLine);
          PurchLine.INSERT(TRUE);
          InsertExtendedText(PurchLine);
    ...
Table<Data Migration Error>.PROCEDURE<OnAfterErrorInserted>
  Raised in: Table<Data Migration Error>.PROCEDURE<CreateEntryWithMessage>
    Code lines:
    ...
    VALIDATE("Source Staging Table Record ID",SourceStagingTableRecordId);
    VALIDATE("Error Message",ErrorMessage);
    VALIDATE("Scheduled For Retry",FALSE);
    INSERT(TRUE);
    
    OnAfterErrorInserted(MigrationType,ErrorMessage); <=====================
Table<Customer>.PROCEDURE<OnBeforeIsContactUpdateNeeded>
  Raised in: Table<Customer>.PROCEDURE<IsContactUpdateNeeded>
    Code lines:
    ...
      (Contact <> xRec.Contact);
    
    IF NOT UpdateNeeded AND NOT ISTEMPORARY THEN
      UpdateNeeded := CustContUpdate.ContactNameIsBlank("No.");
    
    OnBeforeIsContactUpdateNeeded(Rec,xRec,UpdateNeeded); <=====================
    EXIT(UpdateNeeded);
Table<Customer>.PROCEDURE<SkipRenamingLogic>
  Raised in: Table<Customer>.<OnRename>
    Code lines:
    // Give extensions option to opt out of rename logic.
    SkipRenamingLogic(SkipRename); <=====================
    IF SkipRename THEN
      EXIT;
    
    ApprovalsMgmt.OnRenameRecordInApprovalRequest(xRec.RECORDID,RECORDID);
    
    SetLastModifiedDateTime;
    IF xRec."Invoice Disc. Code" = xRec."No." THEN
      "Invoice Disc. Code" := "No.";
    ...
Table<Data Migrator Registration>.PROCEDURE<OnApplySelectedData>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<NextAction>
    Code lines:
    ...
        BEGIN
          IF ShowPostingOptions THEN
            IF BallancesPostingOption = BallancesPostingOption::" " THEN
              ERROR(BallancesPostingErr);
          CurrPage.DataMigrationEntities.PAGE.CopyFromSourceTable(TempDataMigrationEntity);
          OnApplySelectedData(TempDataMigrationEntity,Handled); <=====================
          IF NOT Handled THEN
            ERROR('');
        END;
      Step::AccountSetup1:
    ...
Table<Data Migrator Registration>.PROCEDURE<OnCustomerVendorPostingSetup>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<NextAction>
    Code lines:
    ...
        BEGIN
          ListOfAccounts[1] := ReceivablesAccount;
          ListOfAccounts[2] := ServiceChargeAccount;
          ListOfAccounts[3] := PayablesAccount;
          ListOfAccounts[4] := PurchServiceChargeAccount;
          OnCustomerVendorPostingSetup(ListOfAccounts); <=====================
        END;
    END;
    NextStep(FALSE);
Table<Data Migrator Registration>.PROCEDURE<OnDataImport>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<NextAction>
    Code lines:
    ...
          OnShowBalance(ShowBalance);
          OnHideSelected(HideSelected);
          CurrPage.DataMigrationEntities.PAGE.SetShowBalance(ShowBalance);
          CurrPage.DataMigrationEntities.PAGE.SetHideSelected(HideSelected);
          OnValidateSettings;
          OnDataImport(Handled); <=====================
          IF NOT Handled THEN
            ERROR('');
          OnSelectDataToApply(TempDataMigrationEntity,Handled);
          CurrPage.DataMigrationEntities.PAGE.CopyToSourceTable(TempDataMigrationEntity);
    ...
Table<Data Migrator Registration>.PROCEDURE<OnDownloadTemplate>
  Raised in: Page<Data Migration Wizard>.Action<ActionDownloadTemplate>.<OnAction>
    Code lines:
    OnDownloadTemplate(Handled); <=====================
    IF NOT Handled THEN
      ERROR('');
Table<Data Migrator Registration>.PROCEDURE<OnEnableTogglingDataMigrationOverviewPage>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<ShowDoneStep>
    Code lines:
    ...
    END;
    OnHasErrors(ShowErrorsVisible);
    OnShowDuplicateContactsText(ShowDuplicateContactsText);
    OnShowThatsItMessage(ThatsItText);
    
    OnEnableTogglingDataMigrationOverviewPage(EnableTogglingOverviewPage); <=====================
    IF EnableTogglingOverviewPage THEN
      ShowOverviewPage := TRUE;
Table<Data Migrator Registration>.PROCEDURE<OnGetInstructions>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<NextAction>
    Code lines:
    CASE Step OF
      Step::ChooseSource:
        BEGIN
          OnGetInstructions(Instructions,Handled); <=====================
          IF NOT Handled THEN
            ERROR('');
        END;
      Step::Import:
        BEGIN
          OnShowBalance(ShowBalance);
    ...
Table<Data Migrator Registration>.PROCEDURE<OnGLPostingSetup>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<NextAction>
    Code lines:
    ...
          ListOfAccounts[7] := PurchLineDiscAccount;
          ListOfAccounts[8] := PurchInvDiscAccount;
          ListOfAccounts[9] := COGSAccount;
          ListOfAccounts[10] := InventoryAdjmtAccount;
          ListOfAccounts[11] := InventoryAccount;
          OnGLPostingSetup(ListOfAccounts); <=====================
        END;
      Step::AccountSetup2:
        BEGIN
          ListOfAccounts[1] := ReceivablesAccount;
    ...
Table<Data Migrator Registration>.PROCEDURE<OnHasAdvancedApply>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<ShowApplyStep>
    Code lines:
    ApplyVisible := TRUE;
    ShowPostingOptions := FALSE;
    NextEnabled := FALSE;
    ApplyButtonVisible := TRUE;
    ApplyButtonEnabled := TotalNoOfMigrationRecords > 0;
    OnHasAdvancedApply(OpenAdvancedApplyVisible); <=====================
    OnShowPostingOptions(ShowPostingOptions);
    IF ShowPostingOptions THEN BEGIN
      PostingDate := WORKDATE;
      CurrPage.DataMigrationEntities.PAGE.SetPostingInfromation(
    ...
Table<Data Migrator Registration>.PROCEDURE<OnHasErrors>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<ShowDoneStep>
    Code lines:
    ...
        NextEnabled := TRUE;
        FinishEnabled := FALSE;
        NextStep(FALSE);
      END;
    END;
    OnHasErrors(ShowErrorsVisible); <=====================
    OnShowDuplicateContactsText(ShowDuplicateContactsText);
    OnShowThatsItMessage(ThatsItText);
    
    OnEnableTogglingDataMigrationOverviewPage(EnableTogglingOverviewPage);
    ...
  Raised in: Page<Data Migration Wizard>.PROCEDURE<ShowPostingGroupDoneStep>
    Code lines:
    DoneVisible := TRUE;
    BackEnabled := FALSE;
    NextEnabled := FALSE;
    OnHasErrors(ShowErrorsVisible); <=====================
    FinishEnabled := TRUE;
Table<Data Migrator Registration>.PROCEDURE<OnHasSettings>
  Raised in: Page<Data Migration Wizard>.<Control>.<OnLookup>
    Code lines:
    IF PAGE.RUNMODAL(PAGE::"Data Migrators",Rec) = ACTION::LookupOK THEN BEGIN
      Text := Description;
      CLEAR(DataMigrationSettingsVisible);
      OnHasSettings(DataMigrationSettingsVisible); <=====================
      EXIT;
    END;
  Raised in: Page<Data Migration Wizard>.PROCEDURE<ShowImportStep>
    Code lines:
    ImportVisible := TRUE;
    OnHasTemplate(DownloadTemplateVisible);
    OnHasSettings(DataMigrationSettingsVisible); <=====================
Table<Data Migrator Registration>.PROCEDURE<OnHasTemplate>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<ShowImportStep>
    Code lines:
    ImportVisible := TRUE;
    OnHasTemplate(DownloadTemplateVisible); <=====================
    OnHasSettings(DataMigrationSettingsVisible);
Table<Data Migrator Registration>.PROCEDURE<OnHideSelected>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<NextAction>
    Code lines:
    ...
            ERROR('');
        END;
      Step::Import:
        BEGIN
          OnShowBalance(ShowBalance);
          OnHideSelected(HideSelected); <=====================
          CurrPage.DataMigrationEntities.PAGE.SetShowBalance(ShowBalance);
          CurrPage.DataMigrationEntities.PAGE.SetHideSelected(HideSelected);
          OnValidateSettings;
          OnDataImport(Handled);
    ...
Table<Data Migrator Registration>.PROCEDURE<OnOpenAdvancedApply>
  Raised in: Page<Data Migration Wizard>.Action<ActionOpenAdvancedApply>.<OnAction>
    Code lines:
    OnOpenAdvancedApply(TempDataMigrationEntity,Handled); <=====================
    CurrPage.DataMigrationEntities.PAGE.CopyToSourceTable(TempDataMigrationEntity);
    IF NOT Handled THEN
      ERROR('');
Table<Data Migrator Registration>.PROCEDURE<OnOpenSettings>
  Raised in: Page<Data Migration Wizard>.Action<ActionDataMigrationSettings>.<OnAction>
    Code lines:
    OnOpenSettings(Handled); <=====================
    IF NOT Handled THEN
      ERROR('');
Table<Data Migrator Registration>.PROCEDURE<OnPostingGroupSetup>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<ShowDoneStep>
    Code lines:
    DoneVisible := TRUE;
    NextEnabled := FALSE;
    FinishEnabled := TRUE;
    BackEnabled := FALSE;
    OnPostingGroupSetup(AccountSetupVisible); <=====================
    IF AccountSetupVisible THEN BEGIN
      TempDataMigrationEntity.RESET;
      TempDataMigrationEntity.SETRANGE("Table ID",15);
      TempDataMigrationEntity.SETRANGE(Selected,TRUE);
      IF TempDataMigrationEntity.FINDFIRST THEN BEGIN
    ...
Table<Data Migrator Registration>.PROCEDURE<OnRegisterDataMigrator>
  Raised in: Page<Data Migration Wizard>.<OnOpenPage>
    Code lines:
    OnRegisterDataMigrator; <=====================
    IF FINDFIRST THEN;
    ResetWizardControls;
    ShowIntroStep;
    DataMigrationMgt.CheckMigrationInProgress(FALSE);
Table<Data Migrator Registration>.PROCEDURE<OnSelectDataToApply>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<NextAction>
    Code lines:
    ...
          CurrPage.DataMigrationEntities.PAGE.SetHideSelected(HideSelected);
          OnValidateSettings;
          OnDataImport(Handled);
          IF NOT Handled THEN
            ERROR('');
          OnSelectDataToApply(TempDataMigrationEntity,Handled); <=====================
          CurrPage.DataMigrationEntities.PAGE.CopyToSourceTable(TempDataMigrationEntity);
          TotalNoOfMigrationRecords := GetTotalNoOfMigrationRecords(TempDataMigrationEntity);
          IF NOT Handled THEN
            ERROR('');
    ...
Table<Data Migrator Registration>.PROCEDURE<OnShowBalance>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<NextAction>
    Code lines:
    ...
          IF NOT Handled THEN
            ERROR('');
        END;
      Step::Import:
        BEGIN
          OnShowBalance(ShowBalance); <=====================
          OnHideSelected(HideSelected);
          CurrPage.DataMigrationEntities.PAGE.SetShowBalance(ShowBalance);
          CurrPage.DataMigrationEntities.PAGE.SetHideSelected(HideSelected);
          OnValidateSettings;
    ...
Table<Data Migrator Registration>.PROCEDURE<OnShowDuplicateContactsText>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<ShowDoneStep>
    Code lines:
    ...
        FinishEnabled := FALSE;
        NextStep(FALSE);
      END;
    END;
    OnHasErrors(ShowErrorsVisible);
    OnShowDuplicateContactsText(ShowDuplicateContactsText); <=====================
    OnShowThatsItMessage(ThatsItText);
    
    OnEnableTogglingDataMigrationOverviewPage(EnableTogglingOverviewPage);
    IF EnableTogglingOverviewPage THEN
Table<Data Migrator Registration>.PROCEDURE<OnShowErrors>
  Raised in: Page<Data Migration Wizard>.Action<ActionShowErrors>.<OnAction>
    Code lines:
    OnShowErrors(Handled); <=====================
    IF NOT Handled THEN
      ERROR('');
Table<Data Migrator Registration>.PROCEDURE<OnShowPostingOptions>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<ShowApplyStep>
    Code lines:
    ...
    ShowPostingOptions := FALSE;
    NextEnabled := FALSE;
    ApplyButtonVisible := TRUE;
    ApplyButtonEnabled := TotalNoOfMigrationRecords > 0;
    OnHasAdvancedApply(OpenAdvancedApplyVisible);
    OnShowPostingOptions(ShowPostingOptions); <=====================
    IF ShowPostingOptions THEN BEGIN
      PostingDate := WORKDATE;
      CurrPage.DataMigrationEntities.PAGE.SetPostingInfromation(
        BallancesPostingOption = BallancesPostingOption::"Post balances for me",PostingDate);
Table<Data Migrator Registration>.PROCEDURE<OnShowThatsItMessage>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<ShowDoneStep>
    Code lines:
    ...
        NextStep(FALSE);
      END;
    END;
    OnHasErrors(ShowErrorsVisible);
    OnShowDuplicateContactsText(ShowDuplicateContactsText);
    OnShowThatsItMessage(ThatsItText); <=====================
    
    OnEnableTogglingDataMigrationOverviewPage(EnableTogglingOverviewPage);
    IF EnableTogglingOverviewPage THEN
      ShowOverviewPage := TRUE;
Table<Data Migrator Registration>.PROCEDURE<OnValidateSettings>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<NextAction>
    Code lines:
    ...
        BEGIN
          OnShowBalance(ShowBalance);
          OnHideSelected(HideSelected);
          CurrPage.DataMigrationEntities.PAGE.SetShowBalance(ShowBalance);
          CurrPage.DataMigrationEntities.PAGE.SetHideSelected(HideSelected);
          OnValidateSettings; <=====================
          OnDataImport(Handled);
          IF NOT Handled THEN
            ERROR('');
          OnSelectDataToApply(TempDataMigrationEntity,Handled);
    ...
Table<Assisted Company Setup Status>.PROCEDURE<OnEnabled>
  Raised in: Table<Assisted Company Setup Status>.Field<Enabled>.<OnValidate>
    Code lines:
    OnEnabled("Company Name",Enabled); <=====================
Table<Assisted Company Setup Status>.PROCEDURE<OnGetCompanySetupStatus>
  Raised in: Table<Assisted Company Setup Status>.PROCEDURE<GetCompanySetupStatus>
    Code lines:
    IF GET(Name) THEN
      OnGetCompanySetupStatus("Company Name",SetupStatus); <=====================
Table<Assisted Company Setup Status>.PROCEDURE<OnSetupStatusDrillDown>
  Raised in: Table<Assisted Company Setup Status>.PROCEDURE<DrillDownSetupStatus>
    Code lines:
    IF GET(Name) THEN
      OnSetupStatusDrillDown("Company Name"); <=====================
Table<Assisted Setup>.PROCEDURE<OnAssistedSetupCompleted>
  Raised in: Table<Assisted Setup>.PROCEDURE<SetStatus>
    Code lines:
    ...
    
    IF
       (AssistedSetup.Status = AssistedSetup.Status::Completed) AND
       (AssistedSetup."Assisted Setup Page ID" <> 0)
    THEN
      OnAssistedSetupCompleted(EnteryId); <=====================
Table<Assisted Setup>.PROCEDURE<VerifyYodleeIsInstalled>
  Raised in: Table<Assisted Setup>.PROCEDURE<Initialize>
    Code lines:
    ...
    AddSetupAssistant(PAGE::"Assisted Company Setup Wizard",InitialCompanySetupTxt,SortingOption::CompanySetup,
      AssistedCompanySetupIsVisible,GroupId,FALSE,"Item Type"::"Setup and Help");
    AddSetupAssistantResources(PAGE::"Assisted Company Setup Wizard",'','',0,PAGE::"Assisted Company Setup Wizard",'');
    LastId += 1;
    
    VerifyYodleeIsInstalled(IsYodleeInstalled); <=====================
    IF IsYodleeInstalled THEN BEGIN
      AddSetupAssistant(LastId,VideoBankintegrationNameTxt,SortingOption::SetUpBankIntegration,TRUE,GroupId,FALSE,
        "Item Type"::"Setup and Help");
      AddSetupAssistantResources(LastId,VideoBankintegrationTxt,HelpBankintegrationTxt,0,0,'');
    ...
Table<Aggregated Assisted Setup>.PROCEDURE<OnRegisterAssistedSetup>
  Raised in: Page<Assisted Setup>.<OnOpenPage>
    Code lines:
    OnRegisterAssistedSetup(Rec); <=====================
    SETCURRENTKEY("External Assisted Setup",Order);
    ASCENDING(TRUE);
Table<Aggregated Assisted Setup>.PROCEDURE<OnUpdateAssistedSetupStatus>
  Raised in: Table<Aggregated Assisted Setup>.PROCEDURE<RunAssistedSetup>
    Code lines:
    ...
          IF NOT CONFIRM(RunSetupAgainQst,FALSE,Name) THEN
            EXIT;
      END;
    
    PAGE.RUNMODAL("Assisted Setup Page ID");
    OnUpdateAssistedSetupStatus(Rec); <=====================
Table<Business Setup>.PROCEDURE<OnOpenBusinessSetupPage>
  Raised in: Page<Business Setup>.<Action>.<OnAction>
    Code lines:
    OnOpenBusinessSetupPage(Rec,Handled); <=====================
    IF (NOT Handled) AND ("Setup Page ID" <> 0) THEN
      PAGE.RUN("Setup Page ID");
Table<Business Setup>.PROCEDURE<OnRegisterBusinessSetup>
  Raised in: Page<Business Setup>.<OnOpenPage>
    Code lines:
    OnRegisterBusinessSetup(Rec); <=====================
Table<Res. Ledger Entry>.PROCEDURE<OnAfterCopyFromResJnlLine>
  Raised in: Table<Res. Ledger Entry>.PROCEDURE<CopyFromResJnlLine>
    Code lines:
    ...
    "No. Series" := ResJnlLine."Posting No. Series";
    "Source Type" := ResJnlLine."Source Type";
    "Source No." := ResJnlLine."Source No.";
    "Qty. per Unit of Measure" := ResJnlLine."Qty. per Unit of Measure";
    
    OnAfterCopyFromResJnlLine(Rec,ResJnlLine); <=====================
Table<Res. Journal Line>.PROCEDURE<OnAfterCopyResJnlLineFromJobJnlLine>
  Raised in: Table<Res. Journal Line>.PROCEDURE<CopyFromJobJnlLine>
    Code lines:
    ...
    "Total Price" := JobJnlLine."Line Amount (LCY)";
    "Time Sheet No." := JobJnlLine."Time Sheet No.";
    "Time Sheet Line No." := JobJnlLine."Time Sheet Line No.";
    "Time Sheet Date" := JobJnlLine."Time Sheet Date";
    
    OnAfterCopyResJnlLineFromJobJnlLine(Rec,JobJnlLine); <=====================
Table<Res. Journal Line>.PROCEDURE<OnAfterCopyResJnlLineFromSalesLine>
  Raised in: Table<Res. Journal Line>.PROCEDURE<CopyFromSalesLine>
    Code lines:
    ...
    "Unit Cost" := SalesLine."Unit Cost (LCY)";
    "Total Cost" := SalesLine."Unit Cost (LCY)" * Quantity;
    "Unit Price" := SalesLine."Unit Price";
    "Total Price" := -SalesLine.Amount;
    
    OnAfterCopyResJnlLineFromSalesLine(SalesLine,Rec); <=====================
Table<Res. Journal Line>.PROCEDURE<OnAfterCopyResJnlLineFromServLine>
  Raised in: Table<Res. Journal Line>.PROCEDURE<CopyFromServLine>
    Code lines:
    ...
    "Time Sheet No." := ServiceLine."Time Sheet No.";
    "Time Sheet Line No." := ServiceLine."Time Sheet Line No.";
    "Time Sheet Date" := ServiceLine."Time Sheet Date";
    "Job No." := ServiceLine."Job No.";
    
    OnAfterCopyResJnlLineFromServLine(ServiceLine,Rec); <=====================
Table<Res. Journal Line>.PROCEDURE<OnAfterCopyResJnlLineFromServShptLine>
  Raised in: Table<Res. Journal Line>.PROCEDURE<CopyFromServShptLine>
    Code lines:
    ...
    "Dimension Set ID" := ServShptLine."Dimension Set ID";
    "Gen. Bus. Posting Group" := ServShptLine."Gen. Bus. Posting Group";
    "Gen. Prod. Posting Group" := ServShptLine."Gen. Prod. Posting Group";
    "Entry Type" := "Entry Type"::Usage;
    
    OnAfterCopyResJnlLineFromServShptLine(ServShptLine,Rec); <=====================
Table<Res. Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Res. Journal Line>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    TableID[3] := Type3;
    No[3] := No3;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
Table<Cust. Ledger Entry>.PROCEDURE<OnAfterCopyCustLedgerEntryFromCVLedgEntryBuffer>
  Raised in: Table<Cust. Ledger Entry>.PROCEDURE<CopyFromCVLedgEntryBuffer>
    Code lines:
    ...
    "Remaining Amount" := CVLedgerEntryBuffer."Remaining Amount";
    "Remaining Amt. (LCY)" := CVLedgerEntryBuffer."Remaining Amt. (LCY)";
    "Original Amount" := CVLedgerEntryBuffer."Original Amount";
    "Original Amt. (LCY)" := CVLedgerEntryBuffer."Original Amt. (LCY)";
    
    OnAfterCopyCustLedgerEntryFromCVLedgEntryBuffer(Rec,CVLedgerEntryBuffer); <=====================
Table<Cust. Ledger Entry>.PROCEDURE<OnAfterCopyCustLedgerEntryFromGenJnlLine>
  Raised in: Table<Cust. Ledger Entry>.PROCEDURE<CopyFromGenJnlLine>
    Code lines:
    ...
    "Message to Recipient" := GenJnlLine."Message to Recipient";
    "Applies-to Ext. Doc. No." := GenJnlLine."Applies-to Ext. Doc. No.";
    "Payment Method Code" := GenJnlLine."Payment Method Code";
    "Exported to Payment File" := GenJnlLine."Exported to Payment File";
    
    OnAfterCopyCustLedgerEntryFromGenJnlLine(Rec,GenJnlLine); <=====================
Table<Job Journal Line>.PROCEDURE<OnAfterAssignGLAccountValues>
  Raised in: Table<Job Journal Line>.PROCEDURE<CopyFromGLAccount>
    Code lines:
    ...
    "Unit of Measure Code" := '';
    "Direct Unit Cost (LCY)" := 0;
    "Unit Cost (LCY)" := 0;
    "Unit Price" := 0;
    
    OnAfterAssignGLAccountValues(Rec,GLAcc); <=====================
Table<Job Journal Line>.PROCEDURE<OnAfterAssignItemUoM>
  Raised in: Table<Job Journal Line>.Field<Unit of Measure Code>.<OnValidate>
    Code lines:
    ...
    CASE Type OF
      Type::Item:
        BEGIN
          Item.GET("No.");
          "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
          OnAfterAssignItemUoM(Rec,Item); <=====================
        END;
      Type::Resource:
        BEGIN
          IF CurrFieldNo <> FIELDNO("Work Type Code") THEN
    ...
Table<Job Journal Line>.PROCEDURE<OnAfterAssignItemValues>
  Raised in: Table<Job Journal Line>.PROCEDURE<CopyFromItem>
    Code lines:
    ...
      GetItemTranslation;
    "Posting Group" := Item."Inventory Posting Group";
    "Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";
    VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
    
    OnAfterAssignItemValues(Rec,Item); <=====================
Table<Job Journal Line>.PROCEDURE<OnAfterAssignResourceUoM>
  Raised in: Table<Job Journal Line>.Field<Unit of Measure Code>.<OnValidate>
    Code lines:
    ...
            "Unit of Measure Code" := Resource."Base Unit of Measure";
          END;
          ResUnitofMeasure.GET("No.","Unit of Measure Code");
          "Qty. per Unit of Measure" := ResUnitofMeasure."Qty. per Unit of Measure";
          "Quantity (Base)" := Quantity * "Qty. per Unit of Measure";
          OnAfterAssignResourceUoM(Rec,Res); <=====================
        END;
      Type::"G/L Account":
        "Qty. per Unit of Measure" := 1;
    END;
Table<Job Journal Line>.PROCEDURE<OnAfterAssignResourceValues>
  Raised in: Table<Job Journal Line>.PROCEDURE<CopyFromResource>
    Code lines:
    ...
    "Gen. Prod. Posting Group" := Resource."Gen. Prod. Posting Group";
    VALIDATE("Unit of Measure Code",Resource."Base Unit of Measure");
    IF "Time Sheet No." = '' THEN
      Resource.TESTFIELD("Use Time Sheet",FALSE);
    
    OnAfterAssignResourceValues(Rec,Res); <=====================
Table<Job Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Job Journal Line>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    TableID[3] := Type3;
    No[3] := No3;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
Table<Job Journal Line>.PROCEDURE<OnAfterDeleteAmounts>
  Raised in: Table<Job Journal Line>.PROCEDURE<DeleteAmounts>
    Code lines:
    ...
    "Line Discount Amount (LCY)" := 0;
    "Line Discount Amount" := 0;
    "Remaining Qty." := 0;
    "Remaining Qty. (Base)" := 0;
    
    OnAfterDeleteAmounts(Rec); <=====================
Table<Job Journal Line>.PROCEDURE<OnAfterUpdateAllAmounts>
  Raised in: Table<Job Journal Line>.PROCEDURE<UpdateAllAmounts>
    Code lines:
    ...
    HandleCostFactor;
    UpdateUnitPrice;
    UpdateTotalPrice;
    UpdateAmountsAndDiscounts;
    
    OnAfterUpdateAllAmounts(Rec,xRec); <=====================
Table<Job Journal Line>.PROCEDURE<OnAfterUpdateAmountsAndDiscounts>
  Raised in: Table<Job Journal Line>.PROCEDURE<UpdateAmountsAndDiscounts>
    Code lines:
    ...
      "Line Discount Amount" := 0;
      "Line Amount (LCY)" := 0;
      "Line Discount Amount (LCY)" := 0;
    END;
    
    OnAfterUpdateAmountsAndDiscounts(Rec); <=====================
Table<Job Journal Line>.PROCEDURE<OnAfterUpdateTotalCost>
  Raised in: Table<Job Journal Line>.PROCEDURE<UpdateTotalCost>
    Code lines:
    "Total Cost" := ROUND("Unit Cost" * Quantity,AmountRoundingPrecisionFCY);
    "Total Cost (LCY)" := ROUND(
        CurrExchRate.ExchangeAmtFCYToLCY(
          "Posting Date","Currency Code","Total Cost","Currency Factor"),AmountRoundingPrecision);
    
    OnAfterUpdateTotalCost(Rec); <=====================
Table<Job Journal Line>.PROCEDURE<OnAfterUpdateTotalPrice>
  Raised in: Table<Job Journal Line>.PROCEDURE<UpdateTotalPrice>
    Code lines:
    "Total Price" := ROUND(Quantity * "Unit Price",AmountRoundingPrecisionFCY);
    "Total Price (LCY)" := ROUND(
        CurrExchRate.ExchangeAmtFCYToLCY(
          "Posting Date","Currency Code","Total Price","Currency Factor"),AmountRoundingPrecision);
    
    OnAfterUpdateTotalPrice(Rec); <=====================
Table<Job Journal Line>.PROCEDURE<OnBeforeUpdateAllAmounts>
  Raised in: Table<Job Journal Line>.PROCEDURE<UpdateAllAmounts>
    Code lines:
    OnBeforeUpdateAllAmounts(Rec,xRec); <=====================
    InitRoundingPrecisions;
    
    UpdateUnitCost;
    UpdateTotalCost;
    FindPriceAndDiscount(Rec,CurrFieldNo);
    HandleCostFactor;
    UpdateUnitPrice;
    UpdateTotalPrice;
    UpdateAmountsAndDiscounts;
    ...
Table<Job Journal Line>.PROCEDURE<OnBeforeValidateWorkTypeCodeQty>
  Raised in: Table<Job Journal Line>.Field<Work Type Code>.<OnValidate>
    Code lines:
    ...
      END ELSE BEGIN
        Res.GET("No.");
        "Unit of Measure Code" := Res."Base Unit of Measure";
        VALIDATE("Unit of Measure Code");
      END;
    OnBeforeValidateWorkTypeCodeQty(Rec,xRec,Res,WorkType); <=====================
    VALIDATE(Quantity);
Table<Gen. Jnl. Allocation>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Gen. Jnl. Allocation>.PROCEDURE<CreateDim>
    Code lines:
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(Rec,CurrFieldNo,TableID,No,'',"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
Table<Vendor>.PROCEDURE<OnBeforeIsContactUpdateNeeded>
  Raised in: Table<Vendor>.PROCEDURE<IsContactUpdateNeeded>
    Code lines:
    ...
      ("Home Page" <> xRec."Home Page");
    
    IF NOT UpdateNeeded AND NOT ISTEMPORARY THEN
      UpdateNeeded := VendContUpdate.ContactNameIsBlank("No.");
    
    OnBeforeIsContactUpdateNeeded(Rec,xRec,UpdateNeeded); <=====================
    EXIT(UpdateNeeded);
Table<Gen. Journal Batch>.PROCEDURE<OnCheckGenJournalLineExportRestrictions>
  Raised in: Codeunit<Payment Export Gen. Jnl Check>.PROCEDURE<CheckGenJournalBatch>
    Code lines:
    TempGenJournalBatch := GenJournalBatch;
    TempGenJournalBatch.INSERT;
    
    GenJournalBatch.OnCheckGenJournalLineExportRestrictions; <=====================
    
    IF NOT GenJournalBatch."Allow Payment Export" THEN
      AddBatchEmptyError(GenJournalLine,GenJournalBatch.FIELDCAPTION("Allow Payment Export"),'');
    
    IF GenJournalBatch."Bal. Account Type" <> GenJournalBatch."Bal. Account Type"::"Bank Account" THEN
      AddBatchEmptyError(GenJournalLine,GenJournalBatch.FIELDCAPTION("Bal. Account Type"),GenJournalBatch."Bal. Account Type");
    ...
  Raised in: Codeunit<SEPA CT-Check Line>.PROCEDURE<CheckGenJnlLine>
    Code lines:
    GLSetup.GET;
    IF GenJournalBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name") THEN
      GenJournalBatch.OnCheckGenJournalLineExportRestrictions; <=====================
    WITH GenJnlLine DO BEGIN
      IF "Bal. Account Type" <> "Bal. Account Type"::"Bank Account" THEN
        InsertPaymentFileError(MustBeBankAccErr);
    
      IF "Bal. Account No." = '' THEN
        AddFieldEmptyError(GenJnlLine,TABLECAPTION,FIELDCAPTION("Bal. Account No."),'');
    
    ...
Table<Gen. Journal Batch>.PROCEDURE<OnGeneralJournalBatchBalanced>
  Raised in: Table<Gen. Journal Batch>.PROCEDURE<CheckBalance>
    Code lines:
    Balance := GetBalance;
    
    IF Balance = 0 THEN
      OnGeneralJournalBatchBalanced <=====================
    ELSE
      OnGeneralJournalBatchNotBalanced;
Table<Gen. Journal Batch>.PROCEDURE<OnGeneralJournalBatchNotBalanced>
  Raised in: Table<Gen. Journal Batch>.PROCEDURE<CheckBalance>
    Code lines:
    Balance := GetBalance;
    
    IF Balance = 0 THEN
      OnGeneralJournalBatchBalanced
    ELSE
      OnGeneralJournalBatchNotBalanced; <=====================
Table<Gen. Journal Batch>.PROCEDURE<OnMoveGenJournalBatch>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<ProcessLines>
    Code lines:
    ...
      CLEAR(GenJnlCheckLine);
      CLEAR(GenJnlPostLine);
      CLEARMARKS;
    END;
    UpdateAnalysisView.UpdateAll(0,TRUE);
    GenJnlBatch.OnMoveGenJournalBatch(GLReg.RECORDID); <=====================
    COMMIT;
    
    IF SkippedLine AND GUIALLOWED THEN
      MESSAGE(SkippedLineMsg);
Table<Requisition Line>.PROCEDURE<OnAfterCreateDim>
  Raised in: Table<Requisition Line>.PROCEDURE<CreateDim>
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
Table<Requisition Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Requisition Line>.PROCEDURE<CreateDim>
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
Table<Vendor Ledger Entry>.PROCEDURE<OnAfterCopyVendLedgerEntryFromCVLedgEntryBuffer>
  Raised in: Table<Vendor Ledger Entry>.PROCEDURE<CopyFromCVLedgEntryBuffer>
    Code lines:
    ...
    "Accepted Pmt. Disc. Tolerance" := CVLedgerEntryBuffer."Accepted Pmt. Disc. Tolerance";
    "Pmt. Tolerance (LCY)" := CVLedgerEntryBuffer."Pmt. Tolerance (LCY)";
    "Amount to Apply" := CVLedgerEntryBuffer."Amount to Apply";
    Prepayment := CVLedgerEntryBuffer.Prepayment;
    
    OnAfterCopyVendLedgerEntryFromCVLedgEntryBuffer(Rec,CVLedgerEntryBuffer); <=====================
Table<Vendor Ledger Entry>.PROCEDURE<OnAfterCopyVendLedgerEntryFromGenJnlLine>
  Raised in: Table<Vendor Ledger Entry>.PROCEDURE<CopyFromGenJnlLine>
    Code lines:
    ...
    "Creditor No." := GenJnlLine."Creditor No.";
    "Payment Reference" := GenJnlLine."Payment Reference";
    "Payment Method Code" := GenJnlLine."Payment Method Code";
    "Exported to Payment File" := GenJnlLine."Exported to Payment File";
    
    OnAfterCopyVendLedgerEntryFromGenJnlLine(Rec,GenJnlLine); <=====================
Table<VAT Entry>.PROCEDURE<OnAfterCopyFromGenJnlLine>
  Raised in: Table<VAT Entry>.PROCEDURE<CopyFromGenJnlLine>
    Code lines:
    ...
    "VAT Base Discount %" := GenJnlLine."VAT Base Discount %";
    "Bill-to/Pay-to No." := GenJnlLine."Bill-to/Pay-to No.";
    "Country/Region Code" := GenJnlLine."Country/Region Code";
    "VAT Registration No." := GenJnlLine."VAT Registration No.";
    
    OnAfterCopyFromGenJnlLine(Rec,GenJnlLine); <=====================
Table<Item>.PROCEDURE<OnAfterCheckDocuments>
  Raised in: Table<Item>.PROCEDURE<CheckDocuments>
    Code lines:
    ...
    CheckServContractLine(CurrFieldNo);
    CheckAsmHeader(CurrFieldNo);
    CheckAsmLine(CurrFieldNo);
    CheckJobPlanningLine(CurrFieldNo);
    
    OnAfterCheckDocuments(Rec,xRec,CurrFieldNo); <=====================
Table<Bank Account>.PROCEDURE<OnCheckAutoLogonPossibleEvent>
  Raised in: Table<Bank Account>.PROCEDURE<IsAutoLogonPossible>
    Code lines:
    AutoLogonPossible := TRUE;
    OnCheckAutoLogonPossibleEvent(Rec,AutoLogonPossible); <=====================
    EXIT(AutoLogonPossible)
Table<Bank Account>.PROCEDURE<OnCheckLinkedToStatementProviderEvent>
  Raised in: Table<Bank Account>.PROCEDURE<IsLinkedToBankStatementServiceProvider>
    Code lines:
    OnCheckLinkedToStatementProviderEvent(Rec,IsBankAccountLinked); <=====================
    EXIT(IsBankAccountLinked);
Table<Bank Account>.PROCEDURE<OnGetDataExchangeDefinitionEvent>
  Raised in: Table<Bank Account>.PROCEDURE<GetDataExchDef>
    Code lines:
    OnGetDataExchangeDefinitionEvent(DataExchDefCodeResponse,Handled); <=====================
    IF NOT Handled THEN BEGIN
      TESTFIELD("Bank Statement Import Format");
      DataExchDefCodeResponse := "Bank Statement Import Format";
    END;
    
    IF DataExchDefCodeResponse = '' THEN
      ERROR(DataExchNotSetErr);
    
    BankExportImportSetup.GET(DataExchDefCodeResponse);
    ...
Table<Bank Account>.PROCEDURE<OnGetStatementProvidersEvent>
  Raised in: Table<Bank Account>.PROCEDURE<StatementProvidersExist>
    Code lines:
    OnGetStatementProvidersEvent(TempNameValueBuffer); <=====================
    EXIT(NOT TempNameValueBuffer.ISEMPTY);
  Raised in: Table<Bank Account>.PROCEDURE<SelectBankLinkingService>
    Code lines:
    OnGetStatementProvidersEvent(TempNameValueBuffer); <=====================
    
    IF TempNameValueBuffer.ISEMPTY THEN
      EXIT(''); // Action should not be visible in this case so should not occur
    
    IF (TempNameValueBuffer.COUNT = 1) OR (NOT GUIALLOWED) THEN
      EXIT(TempNameValueBuffer.Name);
    
    TempNameValueBuffer.FINDSET;
    REPEAT
    ...
Table<Bank Account>.PROCEDURE<OnLinkStatementProviderEvent>
  Raised in: Table<Bank Account>.PROCEDURE<LinkStatementProvider>
    Code lines:
    StatementProvider := SelectBankLinkingService;
    
    IF StatementProvider <> '' THEN
      OnLinkStatementProviderEvent(BankAccount,StatementProvider); <=====================
Table<Bank Account>.PROCEDURE<OnMarkAccountLinkedEvent>
  Raised in: Page<Assisted Company Setup Wizard>.Action<ActionFinish>.<OnAction>
    Code lines:
    AssistedCompanySetup.WaitForPackageImportToComplete;
    BankAccount.TRANSFERFIELDS(TempBankAccount,TRUE);
    AssistedCompanySetup.ApplyUserInput(Rec,BankAccount,AccountingPeriodStartDate,TypeEvaluation);
    AssistedSetup.SetStatus(PAGE::"Assisted Company Setup Wizard",AssistedSetup.Status::Completed);
    IF (BankAccount."No." <> '') AND (NOT TempOnlineBankAccLink.ISEMPTY) THEN
      BankAccount.OnMarkAccountLinkedEvent(TempOnlineBankAccLink,BankAccount); <=====================
    CurrPage.CLOSE;
Table<Bank Account>.PROCEDURE<OnSimpleLinkStatementProviderEvent>
  Raised in: Table<Bank Account>.PROCEDURE<SimpleLinkStatementProvider>
    Code lines:
    StatementProvider := SelectBankLinkingService;
    
    IF StatementProvider <> '' THEN
      OnSimpleLinkStatementProviderEvent(OnlineBankAccLink,StatementProvider); <=====================
Table<Bank Account>.PROCEDURE<OnUnlinkStatementProviderEvent>
  Raised in: Table<Bank Account>.Field<Bank Stmt. Service Record ID>.<OnValidate>
    Code lines:
    IF FORMAT("Bank Stmt. Service Record ID") = '' THEN
      OnUnlinkStatementProviderEvent(Rec,Handled); <=====================
  Raised in: Table<Bank Account>.PROCEDURE<UnlinkStatementProvider>
    Code lines:
    OnUnlinkStatementProviderEvent(Rec,Handled); <=====================
Table<Bank Account>.PROCEDURE<OnUpdateBankAccountLinkingEvent>
  Raised in: Table<Bank Account>.PROCEDURE<UpdateBankAccountLinking>
    Code lines:
    StatementProvider := SelectBankLinkingService;
    
    IF StatementProvider <> '' THEN
      OnUpdateBankAccountLinkingEvent(Rec,StatementProvider); <=====================
Table<Bank Account Ledger Entry>.PROCEDURE<OnAfterCopyFromGenJnlLine>
  Raised in: Table<Bank Account Ledger Entry>.PROCEDURE<CopyFromGenJnlLine>
    Code lines:
    ...
    "Currency Code" := GenJnlLine."Currency Code";
    "User ID" := USERID;
    "Bal. Account Type" := GenJnlLine."Bal. Account Type";
    "Bal. Account No." := GenJnlLine."Bal. Account No.";
    
    OnAfterCopyFromGenJnlLine(Rec,GenJnlLine); <=====================
Table<Check Ledger Entry>.PROCEDURE<OnAfterCopyFromBankAccLedgEntry>
  Raised in: Table<Check Ledger Entry>.PROCEDURE<CopyFromBankAccLedgEntry>
    Code lines:
    ...
    Open := TRUE;
    "User ID" := USERID;
    "Check Date" := BankAccLedgEntry."Posting Date";
    "Check No." := BankAccLedgEntry."Document No.";
    
    OnAfterCopyFromBankAccLedgEntry(Rec,BankAccLedgEntry); <=====================
Table<Bank Acc. Reconciliation>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Bank Acc. Reconciliation>.PROCEDURE<CreateDim>
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    OldDimSetID := "Dimension Set ID";
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
    ...
Table<Bank Acc. Reconciliation Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Bank Acc. Reconciliation Line>.PROCEDURE<CreateDim>
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    BankAccReconciliation.GET("Statement Type","Bank Account No.","Statement No.");
    ...
Table<Native - API Tax Setup>.PROCEDURE<OnCanDeleteTaxSetup>
  Raised in: Table<Native - API Tax Setup>.PROCEDURE<DeleteRecord>
    Code lines:
    IF Default THEN
      ERROR(CannotRemoveDefaultTaxAreaErr);
    
    OnCanDeleteTaxSetup(PreventDelete,Rec); <=====================
    
    IF GeneralLedgerSetup.UseVat OR PreventDelete THEN
      ERROR(CannotDeleteSetupErr);
    
    IF TaxArea.GET(Code) THEN
      TaxArea.DELETE(TRUE);
Table<Native - API Tax Setup>.PROCEDURE<OnLoadSalesTaxSettings>
  Raised in: Table<Native - API Tax Setup>.PROCEDURE<LoadFromTaxArea>
    Code lines:
    CASE TempTaxAreaBuffer.Type OF
      TempTaxAreaBuffer.Type::VAT:
        LoadVATSettings;
      TaxAreaBuffer.Type::"Sales Tax":
        OnLoadSalesTaxSettings(Rec,TempTaxAreaBuffer); <=====================
    END;
Table<Native - API Tax Setup>.PROCEDURE<OnSaveSalesTaxSettings>
  Raised in: Table<Native - API Tax Setup>.PROCEDURE<SaveChanges>
    Code lines:
    CASE Type OF
      Type::VAT:
        SaveVATSettings(PreviousNativeAPITaxSetup);
      Type::"Sales Tax":
        OnSaveSalesTaxSettings(Rec); <=====================
    END;
Table<Reminder Header>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Reminder Header>.PROCEDURE<CreateDim>
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,SourceCodeSetup.Reminder,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
Table<Reminder Header>.PROCEDURE<OnBeforeInsertReminderLine>
  Raised in: Table<Reminder Header>.PROCEDURE<InsertLines>
    Code lines:
    ...
            CaptionManagement.GetTranslatedFieldCaption(
              "Language Code",DATABASE::"Currency for Reminder Level",
              CurrencyForReminderLevel.FIELDNO("Additional Fee")),1,100);
        ReminderLine.VALIDATE(Amount,AdditionalFee);
        ReminderLine."Line Type" := ReminderLine."Line Type"::"Additional Fee";
        OnBeforeInsertReminderLine(ReminderLine); <=====================
        ReminderLine.INSERT;
        IF TransferExtendedText.ReminderCheckIfAnyExtText(ReminderLine,FALSE) THEN
          TransferExtendedText.InsertReminderExtText(ReminderLine);
      END;
    ...
Table<Reminder Header>.PROCEDURE<OnBeforeReminderRounding>
  Raised in: Table<Reminder Header>.PROCEDURE<ReminderRounding>
    Code lines:
    OnBeforeReminderRounding(ReminderHeader,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    GetCurrency(ReminderHeader);
    IF Currency."Invoice Rounding Precision" = 0 THEN
      EXIT;
    
    ReminderHeader.CALCFIELDS(
      "Remaining Amount","Interest Amount","Additional Fee","VAT Amount","Add. Fee per Line");
    ...
Table<Finance Charge Memo Header>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Finance Charge Memo Header>.PROCEDURE<CreateDim>
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,SourceCodeSetup."Finance Charge Memo",
    ...
Table<Finance Charge Memo Header>.PROCEDURE<OnBeforeInsertFinChrgMemoLine>
  Raised in: Table<Finance Charge Memo Header>.PROCEDURE<InsertLines>
    Code lines:
    ...
              "Posting Date","Currency Code",
              FinChrgTerms."Additional Fee (LCY)",CurrExchRate.ExchangeRate(
                "Posting Date","Currency Code"));
        FinChrgMemoLine.VALIDATE(Amount,CurrForFinChrgTerms."Additional Fee");
      END;
      OnBeforeInsertFinChrgMemoLine(FinChrgMemoLine); <=====================
      FinChrgMemoLine.INSERT;
      IF TransferExtendedText.FinChrgMemoCheckIfAnyExtText(FinChrgMemoLine,FALSE) THEN
        TransferExtendedText.InsertFinChrgMemoExtText(FinChrgMemoLine);
    END;
    ...
Table<Finance Charge Memo Line>.PROCEDURE<OnAfterCalcFinCharge>
  Raised in: Table<Finance Charge Memo Line>.PROCEDURE<CalcFinChrg>
    Code lines:
    ...
      GLAcc.TESTFIELD("Gen. Prod. Posting Group");
      VALIDATE("Gen. Prod. Posting Group",GLAcc."Gen. Prod. Posting Group");
      VALIDATE("VAT Prod. Posting Group",GLAcc."VAT Prod. Posting Group");
    END;
    
    OnAfterCalcFinCharge(Rec); <=====================
Table<Finance Charge Memo Line>.PROCEDURE<OnBeforeCalcFinCharge>
  Raised in: Table<Finance Charge Memo Line>.PROCEDURE<CalcFinChrg>
    Code lines:
    OnBeforeCalcFinCharge(Rec); <=====================
    
    GetFinChrgMemoHeader;
    Amount := 0;
    "VAT Amount" := 0;
    "VAT Calculation Type" := "VAT Calculation Type"::"Normal VAT";
    "Gen. Prod. Posting Group" := '';
    "VAT Prod. Posting Group" := '';
    "Interest Rate" := 0;
    CustLedgEntry.GET("Entry No.");
    ...
Table<Reservation Entry>.PROCEDURE<OnAfterTextCaption>
  Raised in: Table<Reservation Entry>.PROCEDURE<TextCaption>
    Code lines:
    ...
      DATABASE::"Transfer Line":
        EXIT(TransLine.TABLECAPTION);
      DATABASE::"Service Line":
        EXIT(ServLine.TABLECAPTION);
      ELSE BEGIN
        OnAfterTextCaption("Source Type",ExtensionTextCaption); <=====================
        IF ExtensionTextCaption <> '' THEN
          EXIT(ExtensionTextCaption);
        EXIT(Text001);
      END;
Table<Default Dimension>.PROCEDURE<OnAfterUpdateGlobalDimCode>
  Raised in: Table<Default Dimension>.PROCEDURE<UpdateGlobalDimCode>
    Code lines:
    ...
      DATABASE::"Cash Flow Manual Expense":
        UpdateNeutrPayGlobalDimCode(GlobalDimCodeNo,AccNo,NewDimValue);
      DATABASE::"Cash Flow Manual Revenue":
        UpdateNeutrRevGlobalDimCode(GlobalDimCodeNo,AccNo,NewDimValue);
      ELSE
        OnAfterUpdateGlobalDimCode(GlobalDimCodeNo,TableID,AccNo,NewDimValue); <=====================
    END;
Table<Sales Header>.PROCEDURE<OnAfterChangePricesIncludingVAT>
  Raised in: Table<Sales Header>.Field<Prices Including VAT>.<OnValidate>
    Code lines:
    ...
              SalesLine."Line Amount" := SalesLine.Amount + SalesLine."Inv. Discount Amount";
          END;
          SalesLine.MODIFY;
        UNTIL SalesLine.NEXT = 0;
      END;
      OnAfterChangePricesIncludingVAT(Rec); <=====================
    END;
Table<Sales Header>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Sales Header>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[3] := No3;
    TableID[4] := Type4;
    No[4] := No4;
    TableID[5] := Type5;
    No[5] := No5;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    OldDimSetID := "Dimension Set ID";
    ...
Table<Sales Header>.PROCEDURE<OnAfterCreateSalesLine>
  Raised in: Table<Sales Header>.PROCEDURE<CreateSalesLine>
    Code lines:
    ...
        SalesLine."Drop Shipment" := SalesLine."Purch. Order Line No." <> 0;
      END;
      SalesLine.VALIDATE("Shipment Date",TempSalesLine."Shipment Date");
    END;
    SalesLine.INSERT;
    OnAfterCreateSalesLine(SalesLine,TempSalesLine); <=====================
Table<Sales Header>.PROCEDURE<OnAfterInitNoSeries>
  Raised in: Table<Sales Header>.PROCEDURE<InitNoSeries>
    Code lines:
    ...
    IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
      "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
      "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
    END;
    
    OnAfterInitNoSeries(Rec); <=====================
Table<Sales Header>.PROCEDURE<OnAfterInitRecord>
  Raised in: Table<Sales Header>.PROCEDURE<InitRecord>
    Code lines:
    ...
    UpdateOutboundWhseHandlingTime;
    
    "Responsibility Center" := UserSetupMgt.GetRespCenter(0,"Responsibility Center");
    "Doc. No. Occurrence" := ArchiveManagement.GetNextOccurrenceNo(DATABASE::"Sales Header","Document Type","No.");
    
    OnAfterInitRecord(Rec); <=====================
Table<Sales Header>.PROCEDURE<OnAfterSalesQuoteAccepted>
  Raised in: Table<Sales Header>.Field<Quote Accepted>.<OnValidate>
    Code lines:
    IF "Quote Accepted" THEN BEGIN
      "Quote Accepted Date" := WORKDATE;
      OnAfterSalesQuoteAccepted(Rec); <=====================
    END ELSE
      "Quote Accepted Date" := 0D;
Table<Sales Header>.PROCEDURE<OnAfterSendSalesHeader>
  Raised in: Table<Sales Header>.PROCEDURE<EmailRecords>
    Code lines:
    ...
        DocumentSendingProfile.TrySendToEMail(
          DummyReportSelections.Usage::"S.Invoice Draft",Rec,FIELDNO("No."),
          GetDocTypeTxt,FIELDNO("Bill-to Customer No."),ShowDialog);
    END;
    
    OnAfterSendSalesHeader(Rec,ShowDialog); <=====================
Table<Sales Header>.PROCEDURE<OnAfterSetFieldsBilltoCustomer>
  Raised in: Table<Sales Header>.Field<Bill-to Customer No.>.<OnValidate>
    Code lines:
    ...
    SetSalespersonCode(Cust."Salesperson Code","Salesperson Code");
    "Combine Shipments" := Cust."Combine Shipments";
    Reserve := Cust.Reserve;
    IF "Document Type" = "Document Type"::Order THEN
      "Prepayment %" := Cust."Prepayment %";
    OnAfterSetFieldsBilltoCustomer(Rec,Cust); <=====================
    
    IF NOT BilltoCustomerNoChanged THEN
      IF ShippedSalesLinesExist THEN BEGIN
        TESTFIELD("Customer Disc. Group",xRec."Customer Disc. Group");
    ...
Table<Sales Header>.PROCEDURE<OnAfterTestNoSeries>
  Raised in: Table<Sales Header>.PROCEDURE<TestNoSeries>
    Code lines:
    ...
        END;
      "Document Type"::"Blanket Order":
        SalesSetup.TESTFIELD("Blanket Order Nos.");
    END;
    
    OnAfterTestNoSeries(Rec); <=====================
Table<Sales Header>.PROCEDURE<OnAfterTransferExtendedTextForSalesLineRecreation>
  Raised in: Table<Sales Header>.PROCEDURE<RecreateSalesLines>
    Code lines:
    ...
              END;
            END ELSE
              IF NOT ExtendedTextAdded THEN BEGIN
                TransferExtendedText.SalesCheckIfAnyExtText(SalesLine,TRUE);
                TransferExtendedText.InsertSalesExtText(SalesLine);
                OnAfterTransferExtendedTextForSalesLineRecreation(SalesLine); <=====================
    
                SalesLine.FINDLAST;
                ExtendedTextAdded := TRUE;
              END;
    ...
Table<Sales Header>.PROCEDURE<OnAfterUpdateShipToAddress>
  Raised in: Table<Sales Header>.PROCEDURE<UpdateShipToAddress>
    Code lines:
    ...
          CompanyInfo."Ship-to City",CompanyInfo."Ship-to Post Code",CompanyInfo."Ship-to County",
          CompanyInfo."Ship-to Country/Region Code");
        "Ship-to Contact" := CompanyInfo."Ship-to Contact";
      END;
    
    OnAfterUpdateShipToAddress(Rec); <=====================
Table<Sales Header>.PROCEDURE<OnCheckSalesPostRestrictions>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<CheckPrepmtDoc>
    Code lines:
    ...
    
      IF NOT CheckOpenPrepaymentLines(SalesHeader,DocumentType) THEN
        ERROR(Text001);
    
      CheckDim(SalesHeader);
      OnCheckSalesPostRestrictions; <=====================
      Cust.GET("Sell-to Customer No.");
      Cust.CheckBlockedCustOnDocs(Cust,PrepmtDocTypeToDocType(DocumentType),FALSE,TRUE);
      IF "Bill-to Customer No." <> "Sell-to Customer No." THEN BEGIN
        Cust.GET("Bill-to Customer No.");
    ...
  Raised in: Codeunit<Sales-Quote to Order>.<OnRun>
    Code lines:
    TESTFIELD("Document Type","Document Type"::Quote);
    ShouldRedistributeInvoiceAmount := SalesCalcDiscountByType.ShouldRedistributeInvoiceDiscountAmount(Rec);
    
    OnCheckSalesPostRestrictions; <=====================
    
    Cust.GET("Sell-to Customer No.");
    Cust.CheckBlockedCustOnDocs(Cust,"Document Type"::Order,TRUE,FALSE);
    IF "Sell-to Customer No." <> "Bill-to Customer No." THEN BEGIN
      Cust.GET("Bill-to Customer No.");
      Cust.CheckBlockedCustOnDocs(Cust,"Document Type"::Order,TRUE,FALSE);
    ...
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CheckPostRestrictions>
    Code lines:
    WITH SalesHeader DO BEGIN
      IF NOT PreviewMode THEN
        OnCheckSalesPostRestrictions; <=====================
    
      CheckCustBlockage(SalesHeader,"Sell-to Customer No.",TRUE);
      ValidateSalesPersonOnSalesHeader(SalesHeader,TRUE,TRUE);
    
      IF "Bill-to Customer No." <> "Sell-to Customer No." THEN
        CheckCustBlockage(SalesHeader,"Bill-to Customer No.",FALSE);
    
    ...
Table<Sales Header>.PROCEDURE<OnCheckSalesReleaseRestrictions>
  Raised in: Table<Sales Header>.PROCEDURE<CheckSalesReleaseRestrictions>
    Code lines:
    OnCheckSalesReleaseRestrictions; <=====================
    ApprovalsMgmt.PrePostApprovalCheckSales(Rec);
Table<Sales Header>.PROCEDURE<OnCustomerCreditLimitExceeded>
  Raised in: Table<Sales Header>.PROCEDURE<CheckAvailableCreditLimit>
    Code lines:
    ...
      Customer.GET("Sell-to Customer No.");
    
    AvailableCreditLimit := Customer.CalcAvailableCredit;
    
    IF AvailableCreditLimit < 0 THEN
      OnCustomerCreditLimitExceeded <=====================
    ELSE
      OnCustomerCreditLimitNotExceeded;
    
    EXIT(AvailableCreditLimit);
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<SalesHeaderCheck>
    Code lines:
    ...
    ELSE
      IF InstructionMgt.IsEnabled(GetInstructionType(FORMAT(SalesHeader."Document Type"),SalesHeader."No.")) THEN BEGIN
        CreditLimitExceeded := TRUE;
    
        CreateAndSendNotification(SalesHeader.RECORDID,AdditionalContextId,'');
        SalesHeader.OnCustomerCreditLimitExceeded; <=====================
      END;
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<SalesLineCheck>
    Code lines:
    ...
    IF NOT CustCheckCreditLimit.SalesLineShowWarningAndGetCause(SalesLine,AdditionalContextId) THEN
      SalesHeader.OnCustomerCreditLimitNotExceeded
    ELSE
      IF InstructionMgt.IsEnabled(GetInstructionType(FORMAT(SalesLine."Document Type"),SalesLine."Document No.")) THEN BEGIN
        CreateAndSendNotification(SalesHeader.RECORDID,AdditionalContextId,'');
        SalesHeader.OnCustomerCreditLimitExceeded; <=====================
      END;
Table<Sales Header>.PROCEDURE<OnCustomerCreditLimitNotExceeded>
  Raised in: Table<Sales Header>.PROCEDURE<CheckAvailableCreditLimit>
    Code lines:
    ...
    AvailableCreditLimit := Customer.CalcAvailableCredit;
    
    IF AvailableCreditLimit < 0 THEN
      OnCustomerCreditLimitExceeded
    ELSE
      OnCustomerCreditLimitNotExceeded; <=====================
    
    EXIT(AvailableCreditLimit);
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<SalesHeaderCheck>
    Code lines:
    ...
      EXIT;
    
    OnNewCheckRemoveCustomerNotifications(SalesHeader.RECORDID,TRUE);
    
    IF NOT CustCheckCreditLimit.SalesHeaderShowWarningAndGetCause(SalesHeader,AdditionalContextId) THEN
      SalesHeader.OnCustomerCreditLimitNotExceeded <=====================
    ELSE
      IF InstructionMgt.IsEnabled(GetInstructionType(FORMAT(SalesHeader."Document Type"),SalesHeader."No.")) THEN BEGIN
        CreditLimitExceeded := TRUE;
    
    ...
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<SalesLineCheck>
    Code lines:
    ...
    IF NOT SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.") THEN
      SalesHeader.INIT;
    OnNewCheckRemoveCustomerNotifications(SalesHeader.RECORDID,FALSE);
    
    IF NOT CustCheckCreditLimit.SalesLineShowWarningAndGetCause(SalesLine,AdditionalContextId) THEN
      SalesHeader.OnCustomerCreditLimitNotExceeded <=====================
    ELSE
      IF InstructionMgt.IsEnabled(GetInstructionType(FORMAT(SalesLine."Document Type"),SalesLine."Document No.")) THEN BEGIN
        CreateAndSendNotification(SalesHeader.RECORDID,AdditionalContextId,'');
        SalesHeader.OnCustomerCreditLimitExceeded;
Table<Sales Header>.PROCEDURE<OnUpdateSalesLineByChangedFieldName>
  Raised in: Table<Sales Header>.PROCEDURE<UpdateSalesLines>
    Code lines:
    ...
              SalesLine.VALIDATE("Outbound Whse. Handling Time","Outbound Whse. Handling Time");
          SalesLine.FIELDCAPTION("Deferral Code"):
            IF SalesLine."No." <> '' THEN
              SalesLine.VALIDATE("Deferral Code");
          ELSE
            OnUpdateSalesLineByChangedFieldName(Rec,SalesLine,ChangedFieldName); <=====================
        END;
        SalesLineReserve.AssignForPlanning(SalesLine);
        SalesLine.MODIFY(TRUE);
      UNTIL SalesLine.NEXT = 0;
Table<Sales Line>.PROCEDURE<OnAfterAssignFieldsForNo>
  Raised in: Table<Sales Line>.Field<No.>.<OnValidate>
    Code lines:
    ...
        CopyFromFixedAsset;
      Type::"Charge (Item)":
        CopyFromItemCharge;
    END;
    
    OnAfterAssignFieldsForNo(Rec,xRec,SalesHeader); <=====================
    
    IF HasTypeToFillMandatoryFields AND (Type <> Type::"Fixed Asset") THEN
      VALIDATE("VAT Prod. Posting Group");
    
    ...
Table<Sales Line>.PROCEDURE<OnAfterAssignFixedAssetValues>
  Raised in: Table<Sales Line>.PROCEDURE<CopyFromFixedAsset>
    Code lines:
    ...
    GetFAPostingGroup;
    Description := FixedAsset.Description;
    "Description 2" := FixedAsset."Description 2";
    "Allow Invoice Disc." := FALSE;
    "Allow Item Charge Assignment" := FALSE;
    OnAfterAssignFixedAssetValues(Rec,FixedAsset); <=====================
Table<Sales Line>.PROCEDURE<OnAfterAssignGLAccountValues>
  Raised in: Table<Sales Line>.PROCEDURE<CopyFromGLAccount>
    Code lines:
    ...
    "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
    "Tax Group Code" := GLAcc."Tax Group Code";
    "Allow Invoice Disc." := FALSE;
    "Allow Item Charge Assignment" := FALSE;
    InitDeferralCode;
    OnAfterAssignGLAccountValues(Rec,GLAcc); <=====================
Table<Sales Line>.PROCEDURE<OnAfterAssignHeaderValues>
  Raised in: Table<Sales Line>.Field<No.>.<OnValidate>
    Code lines:
    ...
      CalendarMgmt.CalcDateBOC(
        '',SalesHeader."Shipment Date",CalChange."Source Type"::Location,"Location Code",'',
        CalChange."Source Type"::"Shipping Agent","Shipping Agent Code","Shipping Agent Service Code",FALSE);
    UpdateDates;
    
    OnAfterAssignHeaderValues(Rec,SalesHeader); <=====================
    
    CASE Type OF
      Type::" ":
        CopyFromStandardText;
    ...
Table<Sales Line>.PROCEDURE<OnAfterAssignItemChargeValues>
  Raised in: Table<Sales Line>.PROCEDURE<CopyFromItemCharge>
    Code lines:
    ...
    "Gen. Prod. Posting Group" := ItemCharge."Gen. Prod. Posting Group";
    "VAT Prod. Posting Group" := ItemCharge."VAT Prod. Posting Group";
    "Tax Group Code" := ItemCharge."Tax Group Code";
    "Allow Invoice Disc." := FALSE;
    "Allow Item Charge Assignment" := FALSE;
    OnAfterAssignItemChargeValues(Rec,ItemCharge); <=====================
Table<Sales Line>.PROCEDURE<OnAfterAssignItemUOM>
  Raised in: Table<Sales Line>.Field<Unit of Measure Code>.<OnValidate>
    Code lines:
    ...
          CheckItemAvailable(FIELDNO("Unit of Measure Code"));
          "Gross Weight" := Item."Gross Weight" * "Qty. per Unit of Measure";
          "Net Weight" := Item."Net Weight" * "Qty. per Unit of Measure";
          "Unit Volume" := Item."Unit Volume" * "Qty. per Unit of Measure";
          "Units per Parcel" := ROUND(Item."Units per Parcel" / "Qty. per Unit of Measure",0.00001);
          OnAfterAssignItemUOM(Rec,Item); <=====================
          IF (xRec."Unit of Measure Code" <> "Unit of Measure Code") AND (Quantity <> 0) THEN
            WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
          IF "Qty. per Unit of Measure" > xRec."Qty. per Unit of Measure" THEN
            InitItemAppl(FALSE);
    ...
Table<Sales Line>.PROCEDURE<OnAfterAssignItemValues>
  Raised in: Table<Sales Line>.PROCEDURE<CopyFromItem>
    Code lines:
    ...
      Reserve := Item.Reserve;
    
    "Unit of Measure Code" := Item."Sales Unit of Measure";
    InitDeferralCode;
    SetDefaultItemQuantity;
    OnAfterAssignItemValues(Rec,Item); <=====================
Table<Sales Line>.PROCEDURE<OnAfterAssignResourceUOM>
  Raised in: Table<Sales Line>.Field<Unit of Measure Code>.<OnValidate>
    Code lines:
    ...
            GetResource;
            "Unit of Measure Code" := Resource."Base Unit of Measure";
          END;
          ResUnitofMeasure.GET("No.","Unit of Measure Code");
          "Qty. per Unit of Measure" := ResUnitofMeasure."Qty. per Unit of Measure";
          OnAfterAssignResourceUOM(Rec,Resource,ResUnitofMeasure); <=====================
          UpdateUnitPrice(FIELDNO("Unit of Measure Code"));
          FindResUnitCost;
        END;
      Type::"G/L Account",Type::"Fixed Asset",
    ...
Table<Sales Line>.PROCEDURE<OnAfterAssignResourceValues>
  Raised in: Table<Sales Line>.PROCEDURE<CopyFromResource>
    Code lines:
    ...
    "VAT Prod. Posting Group" := Res."VAT Prod. Posting Group";
    "Tax Group Code" := Res."Tax Group Code";
    "Allow Item Charge Assignment" := FALSE;
    FindResUnitCost;
    InitDeferralCode;
    OnAfterAssignResourceValues(Rec,Res); <=====================
Table<Sales Line>.PROCEDURE<OnAfterAssignStdTxtValues>
  Raised in: Table<Sales Line>.PROCEDURE<CopyFromStandardText>
    Code lines:
    StandardText.GET("No.");
    Description := StandardText.Description;
    "Allow Item Charge Assignment" := FALSE;
    OnAfterAssignStdTxtValues(Rec,StandardText); <=====================
Table<Sales Line>.PROCEDURE<OnAfterCalcVATAmountLines>
  Raised in: Table<Sales Line>.PROCEDURE<CalcVATAmountLines>
    Code lines:
    ...
        VATAmountLine."Amount Including VAT" += TotalVATAmount;
        VATAmountLine."Calculated VAT Amount" += TotalVATAmount;
        VATAmountLine.MODIFY;
      END;
    
    OnAfterCalcVATAmountLines(SalesHeader,SalesLine,VATAmountLine,QtyType); <=====================
Table<Sales Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Sales Line>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    TableID[3] := Type3;
    No[3] := No3;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    GetSalesHeader;
    ...
Table<Sales Line>.PROCEDURE<OnAfterInitOutstandingAmount>
  Raised in: Table<Sales Line>.PROCEDURE<InitOutstandingAmount>
    Code lines:
    ...
          ROUND(
            AmountInclVAT * "Qty. Shipped Not Invoiced" / Quantity,
            Currency."Amount Rounding Precision"));
    END;
    
    OnAfterInitOutstandingAmount(Rec,SalesHeader,Currency); <=====================
Table<Sales Line>.PROCEDURE<OnAfterInitQtyToInvoice>
  Raised in: Table<Sales Line>.PROCEDURE<InitQtyToInvoice>
    Code lines:
    ...
    "VAT Difference" := 0;
    CalcInvDiscToInvoice;
    IF SalesHeader."Document Type" <> SalesHeader."Document Type"::Invoice THEN
      CalcPrepaymentToDeduct;
    
    OnAfterInitQtyToInvoice(Rec,CurrFieldNo); <=====================
Table<Sales Line>.PROCEDURE<OnAfterInitQtyToReceive>
  Raised in: Table<Sales Line>.PROCEDURE<InitQtyToReceive>
    Code lines:
    ...
      "Return Qty. to Receive (Base)" := "Outstanding Qty. (Base)";
    END ELSE
      IF "Return Qty. to Receive" <> 0 THEN
        "Return Qty. to Receive (Base)" := CalcBaseQty("Return Qty. to Receive");
    
    OnAfterInitQtyToReceive(Rec,CurrFieldNo); <=====================
    
    InitQtyToInvoice;
Table<Sales Line>.PROCEDURE<OnAfterInitQtyToShip>
  Raised in: Table<Sales Line>.PROCEDURE<InitQtyToShip>
    Code lines:
    ...
      IF "Qty. to Ship" <> 0 THEN
        "Qty. to Ship (Base)" := CalcBaseQty("Qty. to Ship");
    
    CheckServItemCreation;
    
    OnAfterInitQtyToShip(Rec,CurrFieldNo); <=====================
    
    InitQtyToInvoice;
Table<Sales Line>.PROCEDURE<OnAfterShowItemSub>
  Raised in: Table<Sales Line>.PROCEDURE<ShowItemSub>
    Code lines:
    ...
    TestStatusOpen;
    ItemSubstitutionMgt.ItemSubstGet(Rec);
    IF TransferExtendedText.SalesCheckIfAnyExtText(Rec,TRUE) THEN
      TransferExtendedText.InsertSalesExtText(Rec);
    
    OnAfterShowItemSub(Rec); <=====================
Table<Sales Line>.PROCEDURE<OnAfterTestStatusOpen>
  Raised in: Table<Sales Line>.PROCEDURE<TestStatusOpen>
    Code lines:
    ...
    GetSalesHeader;
    IF NOT "System-Created Entry" THEN
      IF HasTypeToFillMandatoryFields THEN
        SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);
    
    OnAfterTestStatusOpen(Rec,SalesHeader); <=====================
Table<Sales Line>.PROCEDURE<OnAfterUpdateAmounts>
  Raised in: Table<Sales Line>.PROCEDURE<UpdateAmounts>
    Code lines:
    ...
            FIELDERROR("Line Amount",STRSUBSTNO(Text044,xRec."Line Amount"));
          FIELDERROR("Line Amount",STRSUBSTNO(Text045,xRec."Line Amount"));
        END;
    END;
    
    OnAfterUpdateAmounts(Rec); <=====================
    
    UpdateVATAmounts;
    InitOutstandingAmount;
    IF (CurrFieldNo <> 0) AND
    ...
Table<Sales Line>.PROCEDURE<OnAfterUpdateAmountsDone>
  Raised in: Table<Sales Line>.PROCEDURE<UpdateAmounts>
    Code lines:
    ...
    IF LineAmountChanged THEN BEGIN
      UpdateDeferralAmounts;
      LineAmountChanged := FALSE;
    END;
    
    OnAfterUpdateAmountsDone(Rec,xRec,CurrFieldNo); <=====================
Table<Sales Line>.PROCEDURE<OnAfterUpdateUnitPrice>
  Raised in: Table<Sales Line>.PROCEDURE<UpdateUnitPrice>
    Code lines:
    ...
          PriceCalcMgt.FindSalesLinePrice(SalesHeader,Rec,CalledByFieldNo);
        END;
    END;
    VALIDATE("Unit Price");
    
    OnAfterUpdateUnitPrice(Rec,xRec,CalledByFieldNo,CurrFieldNo); <=====================
Table<Sales Line>.PROCEDURE<OnAfterUpdateVATOnLines>
  Raised in: Table<Sales Line>.PROCEDURE<UpdateVATOnLines>
    Code lines:
    ...
            END;
          END;
        UNTIL NEXT = 0;
    END;
    
    OnAfterUpdateVATOnLines(SalesHeader,SalesLine,VATAmountLine,QtyType); <=====================
Table<Sales Line>.PROCEDURE<OnBeforeUpdateUnitPrice>
  Raised in: Table<Sales Line>.PROCEDURE<UpdateUnitPrice>
    Code lines:
    OnBeforeUpdateUnitPrice(Rec,xRec,CalledByFieldNo,CurrFieldNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    GetSalesHeader;
    TESTFIELD("Qty. per Unit of Measure");
    
    CASE Type OF
      Type::Item,Type::Resource:
        BEGIN
    ...
Table<Sales Line>.PROCEDURE<OnBeforeVerifyReservedQty>
  Raised in: Table<Sales Line>.<OnInsert>
    Code lines:
    TestStatusOpen;
    IF Quantity <> 0 THEN BEGIN
      OnBeforeVerifyReservedQty(Rec,xRec,0); <=====================
      ReserveSalesLine.VerifyQuantity(Rec,xRec);
    END;
    LOCKTABLE;
    SalesHeader."No." := '';
    IF Type = Type::Item THEN
      IF SalesHeader.InventoryPickConflict("Document Type","Document No.",SalesHeader."Shipping Advice") THEN
        ERROR(Text056,SalesHeader."Shipping Advice");
    ...
  Raised in: Table<Sales Line>.Field<Quantity>.<OnValidate>
    Code lines:
    ...
      InitItemAppl(FALSE);
    
    IF Type = Type::Item THEN BEGIN
      UpdateUnitPrice(FIELDNO(Quantity));
      IF (xRec.Quantity <> Quantity) OR (xRec."Quantity (Base)" <> "Quantity (Base)") THEN BEGIN
        OnBeforeVerifyReservedQty(Rec,xRec,FIELDNO(Quantity)); <=====================
        ReserveSalesLine.VerifyQuantity(Rec,xRec);
        IF NOT "Drop Shipment" THEN
          UpdateWithWarehouseShip;
        WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
    ...
Table<Sales Line>.PROCEDURE<OnValidateNoOnCopyFromTempSalesLine>
  Raised in: Table<Sales Line>.Field<No.>.<OnValidate>
    Code lines:
    ...
    INIT;
    IF xRec."Line Amount" <> 0 THEN
      "Recalculate Invoice Disc." := TRUE;
    Type := TempSalesLine.Type;
    "No." := TempSalesLine."No.";
    OnValidateNoOnCopyFromTempSalesLine(Rec,TempSalesLine); <=====================
    IF "No." = '' THEN
      EXIT;
    
    IF HasTypeToFillMandatoryFields THEN
    ...
Table<Sales Line>.PROCEDURE<OnValidateTypeOnCopyFromTempSalesLine>
  Raised in: Table<Sales Line>.Field<Type>.<OnValidate>
    Code lines:
    ...
    
    Type := TempSalesLine.Type;
    "System-Created Entry" := TempSalesLine."System-Created Entry";
    "Currency Code" := SalesHeader."Currency Code";
    
    OnValidateTypeOnCopyFromTempSalesLine(Rec,TempSalesLine); <=====================
    
    IF Type = Type::Item THEN
      "Allow Item Charge Assignment" := TRUE
    ELSE
    ...
Table<Purchase Header>.PROCEDURE<OnAfterChangePricesIncludingVAT>
  Raised in: Table<Purchase Header>.Field<Prices Including VAT>.<OnValidate>
    Code lines:
    ...
              PurchLine."Line Amount" := PurchLine.Amount + PurchLine."Inv. Discount Amount";
          END;
          PurchLine.MODIFY;
        UNTIL PurchLine.NEXT = 0;
      END;
      OnAfterChangePricesIncludingVAT(Rec); <=====================
    END;
Table<Purchase Header>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Purchase Header>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[2] := No2;
    TableID[3] := Type3;
    No[3] := No3;
    TableID[4] := Type4;
    No[4] := No4;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    OldDimSetID := "Dimension Set ID";
    ...
Table<Purchase Header>.PROCEDURE<OnAfterInitNoSeries>
  Raised in: Table<Purchase Header>.PROCEDURE<InitNoSeries>
    Code lines:
    ...
    IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
      "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
      "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
    END;
    
    OnAfterInitNoSeries(Rec); <=====================
Table<Purchase Header>.PROCEDURE<OnAfterInitRecord>
  Raised in: Table<Purchase Header>.PROCEDURE<InitRecord>
    Code lines:
    ...
      "Inbound Whse. Handling Time" := InvtSetup."Inbound Whse. Handling Time";
    
    "Responsibility Center" := UserSetupMgt.GetRespCenter(1,"Responsibility Center");
    "Doc. No. Occurrence" := ArchiveManagement.GetNextOccurrenceNo(DATABASE::"Purchase Header","Document Type","No.");
    
    OnAfterInitRecord(Rec); <=====================
Table<Purchase Header>.PROCEDURE<OnAfterTestNoSeries>
  Raised in: Table<Purchase Header>.PROCEDURE<TestNoSeries>
    Code lines:
    ...
        END;
      "Document Type"::"Blanket Order":
        PurchSetup.TESTFIELD("Blanket Order Nos.");
    END;
    
    OnAfterTestNoSeries(Rec); <=====================
Table<Purchase Header>.PROCEDURE<OnAfterTransferExtendedTextForPurchaseLineRecreation>
  Raised in: Table<Purchase Header>.PROCEDURE<RecreatePurchLines>
    Code lines:
    ...
            END;
          END ELSE
            IF NOT ExtendedTextAdded THEN BEGIN
              TransferExtendedText.PurchCheckIfAnyExtText(PurchLine,TRUE);
              TransferExtendedText.InsertPurchExtText(PurchLine);
              OnAfterTransferExtendedTextForPurchaseLineRecreation(PurchLine); <=====================
              PurchLine.FINDLAST;
              ExtendedTextAdded := TRUE;
            END;
        UNTIL TempPurchLine.NEXT = 0;
    ...
Table<Purchase Header>.PROCEDURE<OnAfterUpdateShipToAddress>
  Raised in: Table<Purchase Header>.PROCEDURE<UpdateShipToAddress>
    Code lines:
    ...
        CompanyInfo."Ship-to City",CompanyInfo."Ship-to Post Code",CompanyInfo."Ship-to County",
        CompanyInfo."Ship-to Country/Region Code");
      "Ship-to Contact" := CompanyInfo."Ship-to Contact";
    END;
    
    OnAfterUpdateShipToAddress(Rec); <=====================
Table<Purchase Header>.PROCEDURE<OnCheckPurchasePostRestrictions>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<CheckPrepmtDoc>
    Code lines:
    ...
        FIELDERROR("Posting Date",Text000);
    
      IF NOT CheckOpenPrepaymentLines(PurchHeader,DocumentType) THEN
        ERROR(Text001);
      CheckDim(PurchHeader);
      OnCheckPurchasePostRestrictions; <=====================
      Vend.GET("Buy-from Vendor No.");
      Vend.CheckBlockedVendOnDocs(Vend,TRUE);
      IF "Pay-to Vendor No." <> "Buy-from Vendor No." THEN BEGIN
        Vend.GET("Pay-to Vendor No.");
    ...
  Raised in: Codeunit<Purch.-Quote to Order>.<OnRun>
    Code lines:
    TESTFIELD("Document Type","Document Type"::Quote);
    ShouldRedistributeInvoiceAmount := PurchCalcDiscByType.ShouldRedistributeInvoiceDiscountAmount(Rec);
    
    OnCheckPurchasePostRestrictions; <=====================
    
    Vend.GET("Buy-from Vendor No.");
    Vend.CheckBlockedVendOnDocs(Vend,FALSE);
    
    ValidatePurchaserOnPurchHeader(Rec,TRUE,FALSE);
    
    ...
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CheckPostRestrictions>
    Code lines:
    IF NOT PreviewMode THEN
      PurchaseHeader.OnCheckPurchasePostRestrictions; <=====================
    
    Vendor.GET(PurchaseHeader."Buy-from Vendor No.");
    Vendor.CheckBlockedVendOnDocs(Vendor,TRUE);
    PurchaseHeader.ValidatePurchaserOnPurchHeader(PurchaseHeader,TRUE,TRUE);
    
    IF PurchaseHeader."Pay-to Vendor No." <> PurchaseHeader."Buy-from Vendor No." THEN BEGIN
      Vendor.GET(PurchaseHeader."Pay-to Vendor No.");
      Vendor.CheckBlockedVendOnDocs(Vendor,TRUE);
    ...
Table<Purchase Header>.PROCEDURE<OnCheckPurchaseReleaseRestrictions>
  Raised in: Table<Purchase Header>.PROCEDURE<CheckPurchaseReleaseRestrictions>
    Code lines:
    OnCheckPurchaseReleaseRestrictions; <=====================
    ApprovalsMgmt.PrePostApprovalCheckPurch(Rec);
Table<Purchase Header>.PROCEDURE<OnUpdatePurchLinesByChangedFieldName>
  Raised in: Table<Purchase Header>.PROCEDURE<UpdatePurchLines>
    Code lines:
    ...
              PurchLine.VALIDATE("Inbound Whse. Handling Time","Inbound Whse. Handling Time");
          PurchLine.FIELDCAPTION("Deferral Code"):
            IF PurchLine."No." <> '' THEN
              PurchLine.VALIDATE("Deferral Code");
          ELSE
            OnUpdatePurchLinesByChangedFieldName(Rec,PurchLine,ChangedFieldName); <=====================
        END;
        PurchLine.MODIFY(TRUE);
        PurchLineReserve.VerifyChange(PurchLine,xPurchLine);
      UNTIL PurchLine.NEXT = 0;
Table<Purchase Header>.PROCEDURE<OnValidatePurchaseHeaderPayToVendorNo>
  Raised in: Table<Purchase Header>.Field<Pay-to Vendor No.>.<OnValidate>
    Code lines:
    ...
    VALIDATE("Prepmt. Payment Terms Code");
    VALIDATE("Payment Method Code");
    VALIDATE("Currency Code");
    VALIDATE("Creditor No.",Vend."Creditor No.");
    
    OnValidatePurchaseHeaderPayToVendorNo(Vend); <=====================
    
    IF "Document Type" = "Document Type"::Order THEN
      VALIDATE("Prepayment %",Vend."Prepayment %");
    
    ...
Table<CV Ledger Entry Buffer>.PROCEDURE<OnAfterCopyFromCustLedgerEntry>
  Raised in: Table<CV Ledger Entry Buffer>.PROCEDURE<CopyFromCustLedgEntry>
    Code lines:
    ...
    "Remaining Amount" := CustLedgEntry."Remaining Amount";
    "Remaining Amt. (LCY)" := CustLedgEntry."Remaining Amt. (LCY)";
    "Original Amount" := CustLedgEntry."Original Amount";
    "Original Amt. (LCY)" := CustLedgEntry."Original Amt. (LCY)";
    
    OnAfterCopyFromCustLedgerEntry(Rec,CustLedgEntry); <=====================
Table<CV Ledger Entry Buffer>.PROCEDURE<OnAfterCopyFromEmplLedgerEntry>
  Raised in: Table<CV Ledger Entry Buffer>.PROCEDURE<CopyFromEmplLedgEntry>
    Code lines:
    ...
    "Debit Amount (LCY)" := EmplLedgEntry."Debit Amount (LCY)";
    "Credit Amount (LCY)" := EmplLedgEntry."Credit Amount (LCY)";
    "No. Series" := EmplLedgEntry."No. Series";
    "Amount to Apply" := EmplLedgEntry."Amount to Apply";
    
    OnAfterCopyFromEmplLedgerEntry(Rec,EmplLedgEntry); <=====================
Table<CV Ledger Entry Buffer>.PROCEDURE<OnAfterCopyFromVendLedgerEntry>
  Raised in: Table<CV Ledger Entry Buffer>.PROCEDURE<CopyFromVendLedgEntry>
    Code lines:
    ...
    "Accepted Payment Tolerance" := VendLedgEntry."Accepted Payment Tolerance";
    "Accepted Pmt. Disc. Tolerance" := VendLedgEntry."Accepted Pmt. Disc. Tolerance";
    "Amount to Apply" := VendLedgEntry."Amount to Apply";
    Prepayment := VendLedgEntry.Prepayment;
    
    OnAfterCopyFromVendLedgerEntry(Rec,VendLedgEntry); <=====================
Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<OnAfterCopyFromGenJnlLine>
  Raised in: Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<CopyFromGenJnlLine>
    Code lines:
    ...
    "User ID" := USERID;
    "Initial Entry Due Date" := GenJnlLine."Due Date";
    "Initial Entry Global Dim. 1" := GenJnlLine."Shortcut Dimension 1 Code";
    "Initial Entry Global Dim. 2" := GenJnlLine."Shortcut Dimension 2 Code";
    "Initial Document Type" := GenJnlLine."Document Type";
    OnAfterCopyFromGenJnlLine(Rec,GenJnlLine); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterAssignFieldsForNo>
  Raised in: Table<Purchase Line>.Field<No.>.<OnValidate>
    Code lines:
    ...
        CopyFromFixedAsset;
      Type::"Charge (Item)":
        CopyFromItemCharge;
    END;
    
    OnAfterAssignFieldsForNo(Rec,xRec,PurchHeader); <=====================
    
    IF HasTypeToFillMandatoryFields AND NOT (Type = Type::"Fixed Asset") THEN
      VALIDATE("VAT Prod. Posting Group");
    
    ...
Table<Purchase Line>.PROCEDURE<OnAfterAssignFixedAssetValues>
  Raised in: Table<Purchase Line>.PROCEDURE<CopyFromFixedAsset>
    Code lines:
    ...
    GetFAPostingGroup;
    Description := FixedAsset.Description;
    "Description 2" := FixedAsset."Description 2";
    "Allow Invoice Disc." := FALSE;
    "Allow Item Charge Assignment" := FALSE;
    OnAfterAssignFixedAssetValues(Rec,FixedAsset); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterAssignGLAccountValues>
  Raised in: Table<Purchase Line>.PROCEDURE<CopyFromGLAccount>
    Code lines:
    ...
    "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
    "Tax Group Code" := GLAcc."Tax Group Code";
    "Allow Invoice Disc." := FALSE;
    "Allow Item Charge Assignment" := FALSE;
    InitDeferralCode;
    OnAfterAssignGLAccountValues(Rec,GLAcc); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterAssignHeaderValues>
  Raised in: Table<Purchase Line>.Field<No.>.<OnValidate>
    Code lines:
    ...
    GetPurchHeader;
    InitHeaderDefaults(PurchHeader);
    UpdateLeadTimeFields;
    UpdateDates;
    
    OnAfterAssignHeaderValues(Rec,PurchHeader); <=====================
    
    CASE Type OF
      Type::" ":
        CopyFromStandardText;
    ...
Table<Purchase Line>.PROCEDURE<OnAfterAssignItemChargeValues>
  Raised in: Table<Purchase Line>.PROCEDURE<CopyFromItemCharge>
    Code lines:
    ...
    "Tax Group Code" := ItemCharge."Tax Group Code";
    "Allow Invoice Disc." := FALSE;
    "Allow Item Charge Assignment" := FALSE;
    "Indirect Cost %" := 0;
    "Overhead Rate" := 0;
    OnAfterAssignItemChargeValues(Rec,ItemCharge); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterAssignItemUOM>
  Raised in: Table<Purchase Line>.Field<Unit of Measure Code>.<OnValidate>
    Code lines:
    ...
        "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
        "Gross Weight" := Item."Gross Weight" * "Qty. per Unit of Measure";
        "Net Weight" := Item."Net Weight" * "Qty. per Unit of Measure";
        "Unit Volume" := Item."Unit Volume" * "Qty. per Unit of Measure";
        "Units per Parcel" := ROUND(Item."Units per Parcel" / "Qty. per Unit of Measure",0.00001);
        OnAfterAssignItemUOM(Rec,Item); <=====================
        IF "Qty. per Unit of Measure" > xRec."Qty. per Unit of Measure" THEN
          InitItemAppl;
        UpdateUOMQtyPerStockQty;
      END ELSE
    ...
Table<Purchase Line>.PROCEDURE<OnAfterAssignItemValues>
  Raised in: Table<Purchase Line>.PROCEDURE<CopyFromItem>
    Code lines:
    ...
    IF PurchHeader."Language Code" <> '' THEN
      GetItemTranslation;
    
    "Unit of Measure Code" := Item."Purch. Unit of Measure";
    InitDeferralCode;
    OnAfterAssignItemValues(Rec,Item); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterAssignStdTxtValues>
  Raised in: Table<Purchase Line>.PROCEDURE<CopyFromStandardText>
    Code lines:
    StandardText.GET("No.");
    Description := StandardText.Description;
    "Allow Item Charge Assignment" := FALSE;
    OnAfterAssignStdTxtValues(Rec,StandardText); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Purchase Line>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[2] := No2;
    TableID[3] := Type3;
    No[3] := No3;
    TableID[4] := Type4;
    No[4] := No4;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    GetPurchHeader;
    ...
Table<Purchase Line>.PROCEDURE<OnAfterCreateTempJobJnlLine>
  Raised in: Table<Purchase Line>.PROCEDURE<CreateTempJobJnlLine>
    Code lines:
    ...
      END;
      TempJobJnlLine.VALIDATE("Unit Price");
    END ELSE
      TempJobJnlLine.VALIDATE("Unit Cost (LCY)","Unit Cost (LCY)");
    
    OnAfterCreateTempJobJnlLine(TempJobJnlLine,Rec,xRec,GetPrices,CurrFieldNo); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterInitOutstandingAmount>
  Raised in: Table<Purchase Line>.PROCEDURE<InitOutstandingAmount>
    Code lines:
    ...
          ROUND(
            AmountInclVAT * "Qty. Rcd. Not Invoiced" / Quantity,
            Currency."Amount Rounding Precision"));
    END;
    
    OnAfterInitOutstandingAmount(Rec,xRec,PurchHeader,Currency); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterInitQtyToInvoice>
  Raised in: Table<Purchase Line>.PROCEDURE<InitQtyToInvoice>
    Code lines:
    ...
    "VAT Difference" := 0;
    CalcInvDiscToInvoice;
    IF PurchHeader."Document Type" <> PurchHeader."Document Type"::Invoice THEN
      CalcPrepaymentToDeduct;
    
    OnAfterInitQtyToInvoice(Rec,CurrFieldNo); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterInitQtyToReceive>
  Raised in: Table<Purchase Line>.PROCEDURE<InitQtyToReceive>
    Code lines:
    ...
      "Qty. to Receive (Base)" := "Outstanding Qty. (Base)";
    END ELSE
      IF "Qty. to Receive" <> 0 THEN
        "Qty. to Receive (Base)" := CalcBaseQty("Qty. to Receive");
    
    OnAfterInitQtyToReceive(Rec,CurrFieldNo); <=====================
    
    InitQtyToInvoice;
Table<Purchase Line>.PROCEDURE<OnAfterInitQtyToShip>
  Raised in: Table<Purchase Line>.PROCEDURE<InitQtyToShip>
    Code lines:
    ...
      "Return Qty. to Ship (Base)" := "Outstanding Qty. (Base)";
    END ELSE
      IF "Return Qty. to Ship" <> 0 THEN
        "Return Qty. to Ship (Base)" := CalcBaseQty("Return Qty. to Ship");
    
    OnAfterInitQtyToShip(Rec,CurrFieldNo); <=====================
    
    InitQtyToInvoice;
Table<Purchase Line>.PROCEDURE<OnAfterSetDefaultQuantity>
  Raised in: Table<Purchase Line>.PROCEDURE<SetDefaultQuantity>
    Code lines:
    ...
        "Qty. to Invoice" := 0;
        "Qty. to Invoice (Base)" := 0;
      END;
    END;
    
    OnAfterSetDefaultQuantity(Rec,xRec); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterUpdateAmounts>
  Raised in: Table<Purchase Line>.PROCEDURE<UpdateAmounts>
    Code lines:
    ...
            FIELDERROR("Line Amount",STRSUBSTNO(Text038,xRec."Line Amount"));
          FIELDERROR("Line Amount",STRSUBSTNO(Text039,xRec."Line Amount"));
        END;
    END;
    
    OnAfterUpdateAmounts(Rec); <=====================
    
    UpdateVATAmounts;
    IF VATBaseAmount <> "VAT Base Amount" THEN
      LineAmountChanged := TRUE;
    ...
Table<Purchase Line>.PROCEDURE<OnAfterUpdateDirectUnitCost>
  Raised in: Table<Purchase Line>.PROCEDURE<UpdateDirectUnitCost>
    Code lines:
    ...
    
      IF CalledByFieldNo IN [FIELDNO("No."),FIELDNO("Variant Code"),FIELDNO("Location Code")] THEN
        UpdateItemReference;
    END;
    
    OnAfterUpdateDirectUnitCost(Rec,xRec,CalledByFieldNo,CurrFieldNo); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterUpdateJobPrices>
  Raised in: Table<Purchase Line>.PROCEDURE<UpdateJobPrices>
    Code lines:
    ...
      "Job Line Amount" := PurchRcptLine."Job Line Amount";
      "Job Line Discount %" := PurchRcptLine."Job Line Discount %";
      "Job Line Discount Amount" := PurchRcptLine."Job Line Discount Amount";
    END;
    
    OnAfterUpdateJobPrices(Rec,TempJobJnlLine,PurchRcptLine); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterUpdateUnitCost>
  Raised in: Table<Purchase Line>.PROCEDURE<UpdateUnitCost>
    Code lines:
    ...
    "Unit Cost (LCY)" := ROUND("Unit Cost (LCY)",GLSetup."Unit-Amount Rounding Precision");
    IF PurchHeader."Currency Code" <> '' THEN
      Currency.TESTFIELD("Unit-Amount Rounding Precision");
    "Unit Cost" := ROUND("Unit Cost",Currency."Unit-Amount Rounding Precision");
    
    OnAfterUpdateUnitCost(Rec,xRec,PurchHeader,Item,SKU,Currency,GLSetup); <=====================
    
    UpdateSalesCost;
    
    IF JobTaskIsSet AND NOT UpdateFromVAT AND NOT "Prepayment Line" THEN BEGIN
    ...
Table<Purchase Line>.PROCEDURE<OnBeforeJobTaskIsSet>
  Raised in: Table<Purchase Line>.PROCEDURE<JobTaskIsSet>
    Code lines:
    JobTaskSet := FALSE;
    OnBeforeJobTaskIsSet(Rec,JobTaskSet); <=====================
    
    EXIT(
      (("Job No." <> '') AND ("Job Task No." <> '') AND (Type IN [Type::"G/L Account",Type::Item])) OR
      JobTaskSet);
Table<Purchase Line>.PROCEDURE<OnBeforeUpdateDirectUnitCost>
  Raised in: Table<Purchase Line>.PROCEDURE<UpdateDirectUnitCost>
    Code lines:
    OnBeforeUpdateDirectUnitCost(Rec,xRec,CalledByFieldNo,CurrFieldNo); <=====================
    
    IF (CurrFieldNo <> 0) AND ("Prod. Order No." <> '') THEN
      UpdateAmounts;
    
    IF ((CalledByFieldNo <> CurrFieldNo) AND (CurrFieldNo <> 0)) OR
       ("Prod. Order No." <> '')
    THEN
      EXIT;
    
    ...
Table<Purchase Line>.PROCEDURE<OnBeforeVerifyReservedQty>
  Raised in: Table<Purchase Line>.<OnInsert>
    Code lines:
    TestStatusOpen;
    IF Quantity <> 0 THEN BEGIN
      OnBeforeVerifyReservedQty(Rec,xRec,0); <=====================
      ReservePurchLine.VerifyQuantity(Rec,xRec);
    END;
    LOCKTABLE;
    PurchHeader."No." := '';
    IF ("Deferral Code" <> '') AND (GetDeferralAmount <> 0) THEN
      UpdateDeferralAmounts;
  Raised in: Table<Purchase Line>.Field<Quantity>.<OnValidate>
    Code lines:
    ...
    IF Type = Type::"Charge (Item)" THEN
      "Line Discount %" := 0;
    
    UpdateWithWarehouseReceive;
    IF (xRec.Quantity <> Quantity) OR (xRec."Quantity (Base)" <> "Quantity (Base)") THEN BEGIN
      OnBeforeVerifyReservedQty(Rec,xRec,FIELDNO(Quantity)); <=====================
      ReservePurchLine.VerifyQuantity(Rec,xRec);
      WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
      CheckApplToItemLedgEntry;
    END;
    ...
Table<Purchase Line>.PROCEDURE<OnValidateNoOnCopyFromTempPurchLine>
  Raised in: Table<Purchase Line>.Field<No.>.<OnValidate>
    Code lines:
    ...
    INIT;
    IF xRec."Line Amount" <> 0 THEN
      "Recalculate Invoice Disc." := TRUE;
    Type := TempPurchLine.Type;
    "No." := TempPurchLine."No.";
    OnValidateNoOnCopyFromTempPurchLine(Rec,TempPurchLine); <=====================
    IF "No." = '' THEN
      EXIT;
    
    IF HasTypeToFillMandatoryFields THEN BEGIN
    ...
Table<Purchase Line>.PROCEDURE<OnValidateTypeOnCopyFromTempPurchLine>
  Raised in: Table<Purchase Line>.Field<Type>.<OnValidate>
    Code lines:
    ...
    IF xRec."Line Amount" <> 0 THEN
      "Recalculate Invoice Disc." := TRUE;
    
    Type := TempPurchLine.Type;
    "System-Created Entry" := TempPurchLine."System-Created Entry";
    OnValidateTypeOnCopyFromTempPurchLine(Rec,TempPurchLine); <=====================
    VALIDATE("FA Posting Type");
    
    IF Type = Type::Item THEN
      "Allow Item Charge Assignment" := TRUE
    ...
Table<Workflow Webhook Subscription>.PROCEDURE<OnFindTaskSchedulerAllowed>
  Raised in: Table<Workflow Webhook Subscription>.<OnDelete>
    Code lines:
    ...
      WorkflowWebhookSubBuffer."WF Definition Id" := "WF Definition Id";
      WorkflowWebhookSubBuffer."Client Id" := "Client Id";
      WorkflowWebhookSubBuffer.INSERT;
    
      IsTaskSchedulerAllowed := TRUE;
      OnFindTaskSchedulerAllowed(IsTaskSchedulerAllowed); <=====================
    
      IF IsTaskSchedulerAllowed THEN
        TASKSCHEDULER.CREATETASK(CODEUNIT::"Workflow Webhook Sub Delete",0,TRUE,
          COMPANYNAME,0DT,Workflow.RECORDID)
    ...
Table<Job Queue Entry>.PROCEDURE<OnBeforeScheduleTask>
  Raised in: Table<Job Queue Entry>.PROCEDURE<ScheduleTask>
    Code lines:
    OnBeforeScheduleTask(Rec,TaskGUID); <=====================
    IF NOT ISNULLGUID(TaskGUID) THEN
      EXIT(TaskGUID);
    
    EXIT(
      TASKSCHEDULER.CREATETASK(
        CODEUNIT::"Job Queue Dispatcher",
        CODEUNIT::"Job Queue Error Handler",
        TRUE,COMPANYNAME,"Earliest Start Date/Time",RECORDID));
Table<Job Queue Entry>.PROCEDURE<OnFindingIfJobNeedsToBeRun>
  Raised in: Table<Job Queue Entry>.PROCEDURE<DoesJobNeedToBeRun>
    Code lines:
    OnFindingIfJobNeedsToBeRun(Result); <=====================
Table<Change Global Dim. Log Entry>.PROCEDURE<OnFindingScheduledTask>
  Raised in: Table<Change Global Dim. Log Entry>.PROCEDURE<IsTaskScheduled>
    Code lines:
    OnFindingScheduledTask("Task ID",TaskExists); <=====================
    IF NOT TaskExists THEN
      EXIT(ScheduledTask.GET("Task ID"));
Table<Invoice Post. Buffer>.PROCEDURE<OnAfterInvPostBufferPreparePurchase>
  Raised in: Table<Invoice Post. Buffer>.PROCEDURE<PreparePurchase>
    Code lines:
    ...
      "VAT Base Amount (ACY)" := 0;
      "VAT Amount" := 0;
      "VAT Amount (ACY)" := 0;
    END;
    
    OnAfterInvPostBufferPreparePurchase(PurchLine,Rec); <=====================
Table<Invoice Post. Buffer>.PROCEDURE<OnAfterInvPostBufferPrepareSales>
  Raised in: Table<Invoice Post. Buffer>.PROCEDURE<PrepareSales>
    Code lines:
    ...
      "VAT Base Amount (ACY)" := 0;
      "VAT Amount" := 0;
      "VAT Amount (ACY)" := 0;
    END;
    
    OnAfterInvPostBufferPrepareSales(SalesLine,Rec); <=====================
Table<Invoice Post. Buffer>.PROCEDURE<OnAfterInvPostBufferPrepareService>
  Raised in: Table<Invoice Post. Buffer>.PROCEDURE<PrepareService>
    Code lines:
    ...
      "Tax Liable" := ServiceLine."Tax Liable";
      "Use Tax" := FALSE;
      Quantity := ServiceLine."Qty. to Invoice (Base)";
    END;
    
    OnAfterInvPostBufferPrepareService(ServiceLine,Rec); <=====================
Table<Contact>.PROCEDURE<OnBeforeCustomerInsert>
  Raised in: Table<Contact>.PROCEDURE<CreateCustomer>
    Code lines:
    ...
      IF CustTemplate.GET(CustomerTemplate) THEN;
    
    CLEAR(Cust);
    Cust.SetInsertFromContact(TRUE);
    Cust."Contact Type" := Type;
    OnBeforeCustomerInsert(Cust,CustomerTemplate); <=====================
    Cust.INSERT(TRUE);
    Cust.SetInsertFromContact(FALSE);
    
    ContBusRel."Contact No." := "No.";
    ...
Table<Contact>.PROCEDURE<OnBeforeIsUpdateNeeded>
  Raised in: Table<Contact>.PROCEDURE<IsUpdateNeeded>
    Code lines:
    ...
      (County <> xRec.County) OR
      ("E-Mail" <> xRec."E-Mail") OR
      ("Home Page" <> xRec."Home Page") OR
      (Type <> xRec.Type);
    
    OnBeforeIsUpdateNeeded(Rec,xRec,UpdateNeeded); <=====================
    EXIT(UpdateNeeded);
Table<Contact>.PROCEDURE<OnBeforeVendorInsert>
  Raised in: Table<Contact>.PROCEDURE<CreateVendor>
    Code lines:
    ...
    RMSetup.GET;
    RMSetup.TESTFIELD("Bus. Rel. Code for Vendors");
    
    CLEAR(Vend);
    Vend.SetInsertFromContact(TRUE);
    OnBeforeVendorInsert(Vend); <=====================
    Vend.INSERT(TRUE);
    Vend.SetInsertFromContact(FALSE);
    
    IF Type = Type::Company THEN
    ...
Table<Interaction Log Entry>.PROCEDURE<OnAfterCopyFromSegment>
  Raised in: Table<Interaction Log Entry>.PROCEDURE<CopyFromSegment>
    Code lines:
    ...
    "Version No." := SegLine."Version No.";
    "Send Word Docs. as Attmt." := SegLine."Send Word Doc. As Attmt.";
    "Contact Via" := SegLine."Contact Via";
    "Opportunity No." := SegLine."Opportunity No.";
    
    OnAfterCopyFromSegment(Rec,SegLine); <=====================
Table<Segment Line>.PROCEDURE<OnAfterCopyFromInteractionLogEntry>
  Raised in: Table<Segment Line>.PROCEDURE<CopyFromInteractLogEntry>
    Code lines:
    ...
    "Version No." := InteractLogEntry."Version No.";
    "Send Word Doc. As Attmt." := InteractLogEntry."Send Word Docs. as Attmt.";
    "Contact Via" := InteractLogEntry."Contact Via";
    "Opportunity No." := InteractLogEntry."Opportunity No.";
    
    OnAfterCopyFromInteractionLogEntry(Rec,InteractLogEntry); <=====================
Table<Employee Ledger Entry>.PROCEDURE<OnAfterCopyEmplLedgerEntryFromCVLedgEntryBuffer>
  Raised in: Table<Employee Ledger Entry>.PROCEDURE<CopyFromCVLedgEntryBuffer>
    Code lines:
    ...
    "Debit Amount (LCY)" := CVLedgerEntryBuffer."Debit Amount (LCY)";
    "Credit Amount (LCY)" := CVLedgerEntryBuffer."Credit Amount (LCY)";
    "No. Series" := CVLedgerEntryBuffer."No. Series";
    "Amount to Apply" := CVLedgerEntryBuffer."Amount to Apply";
    
    OnAfterCopyEmplLedgerEntryFromCVLedgEntryBuffer(Rec,CVLedgerEntryBuffer); <=====================
Table<Employee Ledger Entry>.PROCEDURE<OnAfterCopyEmployeeLedgerEntryFromGenJnlLine>
  Raised in: Table<Employee Ledger Entry>.PROCEDURE<CopyFromGenJnlLine>
    Code lines:
    ...
    "User ID" := USERID;
    "Bal. Account Type" := GenJnlLine."Bal. Account Type";
    "Bal. Account No." := GenJnlLine."Bal. Account No.";
    "No. Series" := GenJnlLine."Posting No. Series";
    
    OnAfterCopyEmployeeLedgerEntryFromGenJnlLine(Rec,GenJnlLine); <=====================
Table<CRM Connection Setup>.PROCEDURE<OnGetDefaultCRMConnection>
  Raised in: Table<CRM Connection Setup>.PROCEDURE<GetDefaultCRMConnection>
    Code lines:
    OnGetDefaultCRMConnection(ConnectionName); <=====================
    EXIT(ConnectionName);
Table<CRM Connection Setup>.PROCEDURE<OnReadingCRMData>
  Raised in: Table<CRM Connection Setup>.PROCEDURE<DoReadCRMData>
    Code lines:
    OnReadingCRMData(SkipReading); <=====================
    EXIT(NOT SkipReading);
Table<Production Order>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Production Order>.PROCEDURE<CreateDim>
    Code lines:
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,'',"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
Table<Prod. Order Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Prod. Order Line>.PROCEDURE<CreateDim>
    Code lines:
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,'',
        "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",ProdOrder."Dimension Set ID",DATABASE::Item);
Table<Prod. Order Component>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Prod. Order Component>.PROCEDURE<CreateDim>
    Code lines:
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    ProdOrderLine.GET(Status,"Prod. Order No.","Prod. Order Line No.");
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,'',
Table<Prod. Order Routing Line>.PROCEDURE<OnAfterMachineCtrTransferFields>
  Raised in: Table<Prod. Order Routing Line>.PROCEDURE<MachineCtrTransferFields>
    Code lines:
    ...
    "Unit Cost per" := MachineCenter."Unit Cost";
    "Direct Unit Cost" := MachineCenter."Direct Unit Cost";
    "Indirect Cost %" := MachineCenter."Indirect Cost %";
    "Overhead Rate" := MachineCenter."Overhead Rate";
    FillDefaultLocationAndBins;
    OnAfterMachineCtrTransferFields(Rec,WorkCenter,MachineCenter); <=====================
Table<Prod. Order Routing Line>.PROCEDURE<OnAfterWorkCenterTransferFields>
  Raised in: Table<Prod. Order Routing Line>.PROCEDURE<WorkCenterTransferFields>
    Code lines:
    ...
    "Direct Unit Cost" := WorkCenter."Direct Unit Cost";
    "Indirect Cost %" := WorkCenter."Indirect Cost %";
    "Overhead Rate" := WorkCenter."Overhead Rate";
    "Unit Cost Calculation" := WorkCenter."Unit Cost Calculation";
    FillDefaultLocationAndBins;
    OnAfterWorkCenterTransferFields(Rec,WorkCenter); <=====================
Table<FA Ledger Entry>.PROCEDURE<OnAfterMoveToFAJnlLine>
  Raised in: Table<FA Ledger Entry>.PROCEDURE<MoveToFAJnl>
    Code lines:
    ...
    FAJnlLine."FA Reclassification Entry" := "Reclassification Entry";
    FAJnlLine."Index Entry" := "Index Entry";
    FAJnlLine."Line No." := NextLineNo;
    FAJnlLine."Dimension Set ID" := "Dimension Set ID";
    
    OnAfterMoveToFAJnlLine(FAJnlLine,Rec); <=====================
Table<FA Ledger Entry>.PROCEDURE<OnAfterMoveToGenJnlLine>
  Raised in: Table<FA Ledger Entry>.PROCEDURE<MoveToGenJnl>
    Code lines:
    ...
    GenJnlLine."FA Reclassification Entry" := "Reclassification Entry";
    GenJnlLine."Index Entry" := "Index Entry";
    GenJnlLine."Line No." := NextLineNo;
    GenJnlLine."Dimension Set ID" := "Dimension Set ID";
    
    OnAfterMoveToGenJnlLine(GenJnlLine,Rec); <=====================
Table<FA Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<FA Journal Line>.PROCEDURE<CreateDim>
    Code lines:
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,"Source Code","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
Table<Insurance Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Insurance Journal Line>.PROCEDURE<CreateDim>
    Code lines:
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,"Source Code","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
Table<Transfer Header>.PROCEDURE<OnUpdateTransLines>
  Raised in: Table<Transfer Header>.PROCEDURE<UpdateTransLines>
    Code lines:
    ...
            BEGIN
              TransferLine.VALIDATE("In-Transit Code",TransferHeader."In-Transit Code");
              TransferLine.VALIDATE("Item No.",TransferLine."Item No.");
            END;
          ELSE
            OnUpdateTransLines(TransferLine,TransferHeader,FieldID); <=====================
        END;
        TransferLine.MODIFY(TRUE);
      UNTIL TransferLine.NEXT = 0;
    END;
Table<Transfer Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Transfer Line>.PROCEDURE<CreateDim>
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,SourceCodeSetup.Transfer,
Table<Transfer Shipment Header>.PROCEDURE<OnAfterCopyFromTransferHeader>
  Raised in: Table<Transfer Shipment Header>.PROCEDURE<CopyFromTransferHeader>
    Code lines:
    ...
    "Entry/Exit Point" := TransHeader."Entry/Exit Point";
    Area := TransHeader.Area;
    "Transaction Specification" := TransHeader."Transaction Specification";
    "Direct Transfer" := TransHeader."Direct Transfer";
    
    OnAfterCopyFromTransferHeader(Rec,TransHeader); <=====================
Table<Transfer Shipment Line>.PROCEDURE<OnAfterCopyFromTransferLine>
  Raised in: Table<Transfer Shipment Line>.PROCEDURE<CopyFromTransferLine>
    Code lines:
    ...
    "Transfer-from Bin Code" := TransLine."Transfer-from Bin Code";
    "Shipping Time" := TransLine."Shipping Time";
    "Item Category Code" := TransLine."Item Category Code";
    "Product Group Code" := TransLine."Product Group Code";
    
    OnAfterCopyFromTransferLine(Rec,TransLine); <=====================
Table<Transfer Receipt Header>.PROCEDURE<OnAfterCopyFromTransferHeader>
  Raised in: Table<Transfer Receipt Header>.PROCEDURE<CopyFromTransferHeader>
    Code lines:
    ...
    "Entry/Exit Point" := TransHeader."Entry/Exit Point";
    Area := TransHeader.Area;
    "Transaction Specification" := TransHeader."Transaction Specification";
    "Direct Transfer" := TransHeader."Direct Transfer";
    
    OnAfterCopyFromTransferHeader(Rec,TransHeader); <=====================
Table<Transfer Receipt Line>.PROCEDURE<OnAfterCopyFromTransferLine>
  Raised in: Table<Transfer Receipt Line>.PROCEDURE<CopyFromTransferLine>
    Code lines:
    ...
    "Transfer-To Bin Code" := TransLine."Transfer-To Bin Code";
    "Shipping Time" := TransLine."Shipping Time";
    "Item Category Code" := TransLine."Item Category Code";
    "Product Group Code" := TransLine."Product Group Code";
    
    OnAfterCopyFromTransferLine(Rec,TransLine); <=====================
Table<Warehouse Activity Line>.PROCEDURE<OnAfterAutofillQtyToHandleLine>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<AutofillQtyToHandle>
    Code lines:
    ...
        REPEAT
          VALIDATE("Qty. to Handle","Qty. Outstanding");
          IF "Qty. to Handle (Base)" <> "Qty. Outstanding (Base)" THEN
            VALIDATE("Qty. to Handle (Base)","Qty. Outstanding (Base)");
          MODIFY;
          OnAfterAutofillQtyToHandleLine(WhseActivLine); <=====================
    
          IF NOT NotEnough THEN
            IF "Qty. to Handle" < "Qty. Outstanding" THEN
              NotEnough := TRUE;
    ...
Table<Warehouse Activity Line>.PROCEDURE<OnAfterUpdateQtyToHandleWhseActivLine>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<DeleteQtyToHandle>
    Code lines:
    WITH WhseActivLine DO BEGIN
      IF FIND('-') THEN
        REPEAT
          VALIDATE("Qty. to Handle",0);
          MODIFY;
          OnAfterUpdateQtyToHandleWhseActivLine(WhseActivLine); <=====================
        UNTIL NEXT = 0;
    END;
Table<Service Header>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Service Header>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[3] := No3;
    TableID[4] := Type4;
    No[4] := No4;
    TableID[5] := Type5;
    No[5] := No5;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    OldDimSetID := "Dimension Set ID";
    ...
Table<Service Header>.PROCEDURE<OnAfterInitRecord>
  Raised in: Table<Service Header>.PROCEDURE<InitRecord>
    Code lines:
    ...
      ELSE
        "Responsibility Center" := UserSetupMgt.GetRespCenter(2,"Responsibility Center")
    ELSE
      "Responsibility Center" := UserSetupMgt.GetServiceFilter;
    
    OnAfterInitRecord(Rec); <=====================
Table<Service Header>.PROCEDURE<OnAfterTransferExtendedTextForServLineRecreation>
  Raised in: Table<Service Header>.PROCEDURE<CreateServiceLines>
    Code lines:
    ...
        ExtendedTextAdded := FALSE;
      END ELSE
        IF NOT ExtendedTextAdded THEN BEGIN
          TransferExtendedText.ServCheckIfAnyExtText(ServLine,TRUE);
          TransferExtendedText.InsertServExtText(ServLine);
          OnAfterTransferExtendedTextForServLineRecreation(ServLine); <=====================
          ServLine.FIND('+');
          ExtendedTextAdded := TRUE;
        END;
      CopyReservEntryFromTemp(TempServLine,ServLine."Line No.");
Table<Service Header>.PROCEDURE<OnAfterUpdateCust>
  Raised in: Table<Service Header>.PROCEDURE<UpdateCust>
    Code lines:
    ...
    IF ("Customer No." = "Bill-to Customer No.") OR
       ("Bill-to Customer No." = '')
    THEN
      VALIDATE("Bill-to Contact No.","Contact No.");
    
    OnAfterUpdateCust(Rec); <=====================
Table<Service Header>.PROCEDURE<OnAfterUpdateShipToAddress>
  Raised in: Table<Service Header>.PROCEDURE<UpdateShipToAddress>
    Code lines:
    ...
        "Ship-to Contact" := CompanyInfo."Ship-to Contact";
      END;
      "VAT Country/Region Code" := "Country/Region Code";
    END;
    
    OnAfterUpdateShipToAddress(Rec); <=====================
Table<Service Header>.PROCEDURE<OnUpdateServLineByChangedFieldName>
  Raised in: Table<Service Header>.PROCEDURE<UpdateServLines>
    Code lines:
    ...
              BEGIN
                ServLine.VALIDATE("Shipping Agent Service Code","Shipping Agent Service Code");
                ServLine.MODIFY(TRUE);
              END;
            ELSE
              OnUpdateServLineByChangedFieldName(ServHeader,ServLine,ChangedFieldName); <=====================
          END;
        UNTIL ServLine.NEXT = 0;
    END;
Table<Service Line>.PROCEDURE<OnAfterAssignGLAccountValues>
  Raised in: Table<Service Line>.PROCEDURE<CopyFromGLAccount>
    Code lines:
    ...
    "Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
    "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
    "Tax Group Code" := GLAcc."Tax Group Code";
    "Allow Invoice Disc." := FALSE;
    
    OnAfterAssignGLAccountValues(Rec,GLAcc); <=====================
Table<Service Line>.PROCEDURE<OnAfterAssignHeaderValues>
  Raised in: Table<Service Line>.PROCEDURE<InitHeaderDefaults>
    Code lines:
    ...
    
    "Shipping Agent Code" := ServHeader."Shipping Agent Code";
    "Shipping Agent Service Code" := ServHeader."Shipping Agent Service Code";
    "Shipping Time" := ServHeader."Shipping Time";
    
    OnAfterAssignHeaderValues(Rec,ServHeader); <=====================
Table<Service Line>.PROCEDURE<OnAfterAssignItemValues>
  Raised in: Table<Service Line>.PROCEDURE<CopyFromItem>
    Code lines:
    ...
    END ELSE BEGIN
      Warranty := FALSE;
      "Warranty Disc. %" := 0;
    END;
    
    OnAfterAssignItemValues(Rec,Item); <=====================
Table<Service Line>.PROCEDURE<OnAfterAssignResourceValues>
  Raised in: Table<Service Line>.PROCEDURE<CopyFromResource>
    Code lines:
    ...
    "Gen. Prod. Posting Group" := Res."Gen. Prod. Posting Group";
    "VAT Prod. Posting Group" := Res."VAT Prod. Posting Group";
    "Tax Group Code" := Res."Tax Group Code";
    FindResUnitCost;
    
    OnAfterAssignResourceValues(Rec,Res); <=====================
Table<Service Line>.PROCEDURE<OnAfterAssignServCostValues>
  Raised in: Table<Service Line>.PROCEDURE<CopyFromCost>
    Code lines:
    ...
         (NOT FaultReasonCode."Exclude Warranty Discount")
      THEN
        VALIDATE("Fault Reason Code",ServItemLine."Fault Reason Code");
    Quantity := ServCost."Default Quantity";
    
    OnAfterAssignServCostValues(Rec,ServCost); <=====================
Table<Service Line>.PROCEDURE<OnAfterAssignServItemValues>
  Raised in: Table<Service Line>.PROCEDURE<CopyFromServItem>
    Code lines:
    ...
            END;
        END;
      END;
    END;
    
    OnAfterAssignServItemValues(Rec,ServItem,ServItemComponent); <=====================
Table<Service Line>.PROCEDURE<OnAfterAssignStdTxtValues>
  Raised in: Table<Service Line>.PROCEDURE<CopyFromStdTxt>
    Code lines:
    StandardText.GET("No.");
    Description := StandardText.Description;
    
    OnAfterAssignStdTxtValues(Rec,StandardText); <=====================
Table<Service Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Service Line>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    TableID[3] := Type3;
    No[3] := No3;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    DimensionSetID := ServItemLine."Dimension Set ID";
    ...
Table<Service Line>.PROCEDURE<OnAfterInitOutstandingAmount>
  Raised in: Table<Service Line>.PROCEDURE<InitOutstandingAmount>
    Code lines:
    ...
          ROUND(
            AmountInclVAT * "Qty. Shipped Not Invoiced" / CalcChargeableQty,
            Currency."Amount Rounding Precision"));
    END;
    
    OnAfterInitOutstandingAmount(Rec,ServHeader,Currency); <=====================
Table<Service Line>.PROCEDURE<OnAfterInitQtyToConsume>
  Raised in: Table<Service Line>.PROCEDURE<InitQtyToConsume>
    Code lines:
    "Qty. to Consume" := MaxQtyToConsume;
    "Qty. to Consume (Base)" := MaxQtyToConsumeBase;
    OnAfterInitQtyToConsume(Rec,CurrFieldNo); <=====================
    
    InitQtyToInvoice;
Table<Service Line>.PROCEDURE<OnAfterInitQtyToInvoice>
  Raised in: Table<Service Line>.PROCEDURE<InitQtyToInvoice>
    Code lines:
    "Qty. to Invoice" := MaxQtyToInvoice;
    "Qty. to Invoice (Base)" := MaxQtyToInvoiceBase;
    "VAT Difference" := 0;
    CalcInvDiscToInvoice;
    
    OnAfterInitQtyToInvoice(Rec,CurrFieldNo); <=====================
Table<Service Line>.PROCEDURE<OnAfterInitQtyToShip>
  Raised in: Table<Service Line>.PROCEDURE<InitQtyToShip>
    Code lines:
    ...
      "Qty. to Ship (Base)" := "Outstanding Qty. (Base)";
    END;
    VALIDATE("Qty. to Consume");
    InitQtyToInvoice;
    
    OnAfterInitQtyToShip(Rec,CurrFieldNo); <=====================
Table<Service Line>.PROCEDURE<OnAfterUpdateUnitPrice>
  Raised in: Table<Service Line>.PROCEDURE<UpdateUnitPrice>
    Code lines:
    ...
    
    CalculateDiscount;
    SalesPriceCalcMgt.FindServLinePrice(ServHeader,Rec,CalledByFieldNo);
    VALIDATE("Unit Price");
    
    OnAfterUpdateUnitPrice(Rec,xRec,CalledByFieldNo,CurrFieldNo); <=====================
Table<Service Line>.PROCEDURE<OnBeforeUpdateUnitPrice>
  Raised in: Table<Service Line>.PROCEDURE<UpdateUnitPrice>
    Code lines:
    OnBeforeUpdateUnitPrice(Rec,xRec,CalledByFieldNo,CurrFieldNo); <=====================
    
    TESTFIELD("Qty. per Unit of Measure");
    ServHeader.GET("Document Type","Document No.");
    
    CalculateDiscount;
    SalesPriceCalcMgt.FindServLinePrice(ServHeader,Rec,CalledByFieldNo);
    VALIDATE("Unit Price");
    
    OnAfterUpdateUnitPrice(Rec,xRec,CalledByFieldNo,CurrFieldNo);
Table<Service Contract Line>.PROCEDURE<OnAfterSetupNewLine>
  Raised in: Table<Service Contract Line>.PROCEDURE<SetupNewLine>
    Code lines:
    ...
    IF "Starting Date" > ServContractHeader."First Service Date" THEN
      "Next Planned Service Date" := "Starting Date"
    ELSE
      "Next Planned Service Date" := ServContractHeader."First Service Date";
    
    OnAfterSetupNewLine(Rec,ServContractHeader); <=====================
Table<Service Contract Header>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Service Contract Header>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[3] := No3;
    TableID[4] := Type4;
    No[4] := No4;
    TableID[5] := Type5;
    No[5] := No5;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
Table<Standard Service Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Standard Service Line>.PROCEDURE<CreateDim>
    Code lines:
    SourceCodeSetup.GET;
    
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
    ...
Table<Electronic Document Format>.PROCEDURE<OnDiscoverElectronicFormat>
  Raised in: Page<Electronic Document Format>.<OnOpenPage>
    Code lines:
    ElectronicDocumentFormat.INIT;
    ElectronicDocumentFormat.OnDiscoverElectronicFormat; <=====================
  Raised in: Page<Document Sending Profile>.<OnOpenPage>
    Code lines:
    ElectronicDocumentFormat.OnDiscoverElectronicFormat; <=====================
    ElectronicDocumentsVisible := NOT ElectronicDocumentFormat.ISEMPTY;
Table<Return Shipment Line>.PROCEDURE<OnAfterInitFromPurchLine>
  Raised in: Table<Return Shipment Line>.PROCEDURE<InitFromPurchLine>
    Code lines:
    ...
    IF PurchLine."Document Type" = PurchLine."Document Type"::"Return Order" THEN BEGIN
      "Return Order No." := PurchLine."Document No.";
      "Return Order Line No." := PurchLine."Line No.";
    END;
    
    OnAfterInitFromPurchLine(ReturnShptHeader,PurchLine,Rec); <=====================
Table<Return Shipment Line>.PROCEDURE<OnAfterInsertInvLineFromRetShptLine>
  Raised in: Table<Return Shipment Line>.PROCEDURE<InsertInvLineFromRetShptLine>
    Code lines:
    ...
      PurchLine."Shortcut Dimension 2 Code" := PurchOrderLine."Shortcut Dimension 2 Code";
      PurchLine."Dimension Set ID" := PurchOrderLine."Dimension Set ID";
    
      OnBeforeInsertInvLineFromRetShptLine(PurchLine,PurchOrderLine);
      PurchLine.INSERT;
      OnAfterInsertInvLineFromRetShptLine(PurchLine); <=====================
    
      ItemTrackingMgt.CopyHandledItemTrkgToInvLine2(PurchOrderLine,PurchLine);
    
      NextLineNo := NextLineNo + 10000;
    ...
Table<Return Shipment Line>.PROCEDURE<OnBeforeInsertInvLineFromRetShptLine>
  Raised in: Table<Return Shipment Line>.PROCEDURE<InsertInvLineFromRetShptLine>
    Code lines:
    ...
          "Attached to Line No.");
      PurchLine."Shortcut Dimension 1 Code" := PurchOrderLine."Shortcut Dimension 1 Code";
      PurchLine."Shortcut Dimension 2 Code" := PurchOrderLine."Shortcut Dimension 2 Code";
      PurchLine."Dimension Set ID" := PurchOrderLine."Dimension Set ID";
    
      OnBeforeInsertInvLineFromRetShptLine(PurchLine,PurchOrderLine); <=====================
      PurchLine.INSERT;
      OnAfterInsertInvLineFromRetShptLine(PurchLine);
    
      ItemTrackingMgt.CopyHandledItemTrkgToInvLine2(PurchOrderLine,PurchLine);
    ...
Table<Return Receipt Line>.PROCEDURE<OnAfterInitFromSalesLine>
  Raised in: Table<Return Receipt Line>.PROCEDURE<InitFromSalesLine>
    Code lines:
    ...
    IF SalesLine."Document Type" = SalesLine."Document Type"::"Return Order" THEN BEGIN
      "Return Order No." := SalesLine."Document No.";
      "Return Order Line No." := SalesLine."Line No.";
    END;
    
    OnAfterInitFromSalesLine(ReturnRcptHeader,SalesLine,Rec); <=====================
Table<Return Receipt Line>.PROCEDURE<OnAftertInsertInvLineFromRetRcptLine>
  Raised in: Table<Return Receipt Line>.PROCEDURE<InsertInvLineFromRetRcptLine>
    Code lines:
    ...
      SalesLine."Shortcut Dimension 2 Code" := SalesOrderLine."Shortcut Dimension 2 Code";
      SalesLine."Dimension Set ID" := SalesOrderLine."Dimension Set ID";
    
      OnBeforeInsertInvLineFromRetRcptLine(SalesLine,SalesOrderLine);
      SalesLine.INSERT;
      OnAftertInsertInvLineFromRetRcptLine(SalesLine); <=====================
    
      ItemTrackingMgt.CopyHandledItemTrkgToInvLine(SalesOrderLine,SalesLine);
    
      NextLineNo := NextLineNo + 10000;
    ...
Table<Return Receipt Line>.PROCEDURE<OnBeforeInsertInvLineFromRetRcptLine>
  Raised in: Table<Return Receipt Line>.PROCEDURE<InsertInvLineFromRetRcptLine>
    Code lines:
    ...
          "Attached to Line No.");
      SalesLine."Shortcut Dimension 1 Code" := SalesOrderLine."Shortcut Dimension 1 Code";
      SalesLine."Shortcut Dimension 2 Code" := SalesOrderLine."Shortcut Dimension 2 Code";
      SalesLine."Dimension Set ID" := SalesOrderLine."Dimension Set ID";
    
      OnBeforeInsertInvLineFromRetRcptLine(SalesLine,SalesOrderLine); <=====================
      SalesLine.INSERT;
      OnAftertInsertInvLineFromRetRcptLine(SalesLine);
    
      ItemTrackingMgt.CopyHandledItemTrkgToInvLine(SalesOrderLine,SalesLine);
    ...
Table<Warehouse Shipment Header>.PROCEDURE<OnBeforeWhseShptLineDelete>
  Raised in: Table<Warehouse Shipment Header>.PROCEDURE<DeleteWarehouseShipmentLines>
    Code lines:
    ...
        IF WhseShptLine."Assemble to Order" THEN
          WhseShptLine.VALIDATE("Qty. to Ship",0);
        ItemTrackingMgt.DeleteWhseItemTrkgLines(DATABASE::"Warehouse Shipment Line",0,WhseShptLine."No.",
          '',0,WhseShptLine."Line No.",WhseShptLine."Location Code",TRUE);
    
        OnBeforeWhseShptLineDelete(WhseShptLine); <=====================
        WhseShptLine.DELETE;
      UNTIL WhseShptLine.NEXT = 0;
Table<Standard General Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Standard General Journal Line>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[3] := No3;
    TableID[4] := Type4;
    No[4] := No4;
    TableID[5] := Type5;
    No[5] := No5;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
Table<Standard Item Journal>.PROCEDURE<OnAfterCopyItemJnlFromStdJnl>
  Raised in: Table<Standard Item Journal>.PROCEDURE<CopyItemJnlFromStdJnl>
    Code lines:
    ...
    ItemJnlLine."Invoiced Qty. (Base)" := ROUND(ItemJnlLine."Invoiced Quantity" * ItemJnlLine."Qty. per Unit of Measure",0.00001);
    
    ItemJnlLine."Dimension Set ID" := StdItemJnlLine."Dimension Set ID";
    ItemJnlLine.INSERT(TRUE);
    
    OnAfterCopyItemJnlFromStdJnl(ItemJnlLine); <=====================
    
    LastItemJnlLine := ItemJnlLine;
Table<Standard Item Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Standard Item Journal Line>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    TableID[3] := Type3;
    No[3] := No3;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
Table<Report Selections>.PROCEDURE<OnAfterGetEmailBodyCustomer>
  Raised in: Table<Report Selections>.PROCEDURE<GetEmailBody>
    Code lines:
    ...
          O365HTMLTemplMgt.CreateEmailBodyFromReportSelections(Rec,RecordVariant,CustEmailAddress);
    END;
    
    CustEmailAddress := GetEmailAddress(ReportUsage,RecordVariant,CustNo,TempBodyReportSelections);
    
    OnAfterGetEmailBodyCustomer(CustEmailAddress,ServerEmailBodyFilePath); <=====================
    
    EXIT(TRUE);
Table<Report Selections>.PROCEDURE<OnAfterGetEmailBodyVendor>
  Raised in: Table<Report Selections>.PROCEDURE<GetEmailBodyVendor>
    Code lines:
    ...
    FoundVendorEmailAddress :=
      FindEmailAddressForEmailLayout(TempBodyReportSelections."Email Body Layout Code",VendorNo,ReportUsage,DATABASE::Vendor);
    IF FoundVendorEmailAddress <> '' THEN
      VendorEmailAddress := FoundVendorEmailAddress;
    
    OnAfterGetEmailBodyVendor(VendorEmailAddress,ServerEmailBodyFilePath); <=====================
    
    EXIT(TRUE);
Table<Report Selections>.PROCEDURE<OnBeforeGetCustEmailAddress>
  Raised in: Table<Report Selections>.PROCEDURE<GetCustEmailAddress>
    Code lines:
    OnBeforeGetCustEmailAddress(BillToCustomerNo,ToAddress,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(ToAddress);
    
    IF Customer.GET(BillToCustomerNo) THEN
      ToAddress := Customer."E-Mail"
    ELSE
      IF Contact.GET(BillToCustomerNo) THEN
        ToAddress := Contact."E-Mail";
    EXIT(ToAddress);
Table<Report Selections>.PROCEDURE<OnBeforeGetEmailBodyCustomer>
  Raised in: Table<Report Selections>.PROCEDURE<GetEmailBody>
    Code lines:
    ServerEmailBodyFilePath := '';
    
    OnBeforeGetEmailBodyCustomer; <=====================
    
    IF CustEmailAddress = '' THEN
      CustEmailAddress := GetEmailAddressIgnoringLayout(ReportUsage,RecordVariant,CustNo);
    
    IF NOT FindEmailBodyUsage(ReportUsage,CustNo,TempBodyReportSelections) THEN
      EXIT(FALSE);
    
    ...
Table<Report Selections>.PROCEDURE<OnBeforeGetEmailBodyVendor>
  Raised in: Table<Report Selections>.PROCEDURE<GetEmailBodyVendor>
    Code lines:
    ServerEmailBodyFilePath := '';
    
    OnBeforeGetEmailBodyVendor; <=====================
    
    VendorEmailAddress := GetVendorEmailAddress(VendorNo,RecordVariant,ReportUsage);
    
    IF NOT FindEmailBodyUsageVendor(ReportUsage,VendorNo,TempBodyReportSelections) THEN
      EXIT(FALSE);
    
    ServerEmailBodyFilePath :=
    ...
Table<Report Selections>.PROCEDURE<OnBeforeGetVendorEmailAddress>
  Raised in: Table<Report Selections>.PROCEDURE<GetVendorEmailAddress>
    Code lines:
    OnBeforeGetVendorEmailAddress(BuyFromVendorNo,ToAddress,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(ToAddress);
    
    ToAddress := GetPurchaseOrderEmailAddress(BuyFromVendorNo,RecVar,ReportUsage);
    
    IF ToAddress = '' THEN
      IF Vendor.GET(BuyFromVendorNo) THEN
        ToAddress := Vendor."E-Mail";
    
Table<Report Selections>.PROCEDURE<OnBeforePrint>
  Raised in: Table<Report Selections>.PROCEDURE<Print>
    Code lines:
    OnBeforePrint(ReportUsage,RecordVariant,CustomerNoFieldNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    PrintWithGUIYesNo(ReportUsage,RecordVariant,TRUE,CustomerNoFieldNo);
Table<Report Selections>.PROCEDURE<OnBeforePrintForUsage>
  Raised in: Table<Report Selections>.PROCEDURE<PrintForUsage>
    Code lines:
    OnBeforePrintForUsage(ReportUsage,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    FilterPrintUsage(ReportUsage);
    IF FINDSET THEN
      REPEAT
        REPORT.RUNMODAL("Report ID",TRUE);
      UNTIL NEXT = 0;
Table<Report Selections>.PROCEDURE<OnBeforePrintWithCheck>
  Raised in: Table<Report Selections>.PROCEDURE<PrintWithCheck>
    Code lines:
    OnBeforePrintWithCheck(ReportUsage,RecordVariant,CustomerNoFieldNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    PrintWithGUIYesNoWithCheck(ReportUsage,RecordVariant,TRUE,CustomerNoFieldNo);
Table<Report Selections>.PROCEDURE<OnBeforePrintWithGUIYesNo>
  Raised in: Table<Report Selections>.PROCEDURE<PrintWithGUIYesNo>
    Code lines:
    OnBeforePrintWithGUIYesNo(ReportUsage,RecordVariant,IsGUI,CustomerNoFieldNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    PrintDocumentsWithCheckGUIYesNoCommon(ReportUsage,RecordVariant,IsGUI,CustomerNoFieldNo,FALSE,DATABASE::Customer);
Table<Report Selections>.PROCEDURE<OnBeforePrintWithGUIYesNoVendor>
  Raised in: Table<Report Selections>.PROCEDURE<PrintWithGUIYesNoVendor>
    Code lines:
    OnBeforePrintWithGUIYesNoVendor(ReportUsage,RecordVariant,IsGUI,VendorNoFieldNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    PrintDocumentsWithCheckGUIYesNoCommon(ReportUsage,RecordVariant,IsGUI,VendorNoFieldNo,FALSE,DATABASE::Vendor);
Table<Report Selections>.PROCEDURE<OnBeforePrintWithGUIYesNoWithCheck>
  Raised in: Table<Report Selections>.PROCEDURE<PrintWithGUIYesNoWithCheck>
    Code lines:
    OnBeforePrintWithGUIYesNoWithCheck(ReportUsage,RecordVariant,IsGUI,CustomerNoFieldNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    PrintDocumentsWithCheckGUIYesNoCommon(ReportUsage,RecordVariant,IsGUI,CustomerNoFieldNo,TRUE,DATABASE::Customer);
Table<Report Selections>.PROCEDURE<OnBeforePrintWithGUIYesNoWithCheckVendor>
  Raised in: Table<Report Selections>.PROCEDURE<PrintWithGUIYesNoWithCheckVendor>
    Code lines:
    OnBeforePrintWithGUIYesNoWithCheckVendor(ReportUsage,RecordVariant,IsGUI,VendorNoFieldNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    PrintDocumentsWithCheckGUIYesNoCommon(ReportUsage,RecordVariant,IsGUI,VendorNoFieldNo,TRUE,DATABASE::Vendor);
Table<Report Selections>.PROCEDURE<OnBeforeSendEmailToCust>
  Raised in: Table<Report Selections>.PROCEDURE<SendEmailToCust>
    Code lines:
    OnBeforeSendEmailToCust(ReportUsage,RecordVariant,DocNo,DocName,ShowDialog,CustNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    IF ShowDialog OR
       (NOT SMTPMail.IsEnabled) OR
       (GetEmailAddressIgnoringLayout(ReportUsage,RecordVariant,CustNo) = '') OR
       OfficeMgt.IsAvailable
    THEN BEGIN
      SendEmailToCustDirectly(ReportUsage,RecordVariant,DocNo,DocName,TRUE,CustNo);
    ...
Table<Report Selections>.PROCEDURE<OnBeforeSendEmailToVendor>
  Raised in: Table<Report Selections>.PROCEDURE<SendEmailToVendor>
    Code lines:
    OnBeforeSendEmailToVendor(ReportUsage,RecordVariant,DocNo,DocName,ShowDialog,VendorNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    VendorEmail := GetVendorEmailAddress(VendorNo,RecordVariant,ReportUsage);
    IF ShowDialog OR NOT SMTPMail.IsEnabled OR (VendorEmail = '') OR OfficeMgt.IsAvailable THEN BEGIN
      SendEmailToVendorDirectly(ReportUsage,RecordVariant,DocNo,DocName,TRUE,VendorNo);
      EXIT;
    END;
    
    ...
Table<Report Selections>.PROCEDURE<OnBeforeSetReportLayout>
  Raised in: Table<Report Selections>.PROCEDURE<PrintDocumentsWithCheckGUIYesNoCommon>
    Code lines:
    OnBeforeSetReportLayout(RecordVariant); <=====================
    
    RecRef.GETTABLE(RecordVariant);
    GetUniqueAccountNos(TempNameValueBuffer,RecRef,AccountNoFieldNo);
    
    SelectTempReportSelectionsToPrint(TempReportSelections,TempNameValueBuffer,WithCheck,ReportUsage,TableNo);
    
    IF TempReportSelections.FINDSET THEN
      REPEAT
        IF TempReportSelections."Custom Report Layout Code" <> '' THEN
    ...
  Raised in: Table<Report Selections>.PROCEDURE<SendEmailToCustDirectly>
    Code lines:
    OnBeforeSetReportLayout(RecordVariant); <=====================
    BINDSUBSCRIPTION(MailManagement);
    FoundBody := GetEmailBody(ServerEmailBodyFilePath,ReportUsage,RecordVariant,CustNo,EmailAddress);
    UNBINDSUBSCRIPTION(MailManagement);
    FoundAttachment := FindEmailAttachmentUsage(ReportUsage,CustNo,TempAttachReportSelections);
    
    CustomReportSelection.SETRANGE("Source Type",DATABASE::Customer);
    CustomReportSelection.SETFILTER("Source No.",CustNo);
    EXIT(SendEmailDirectly(
        ReportUsage,RecordVariant,DocNo,DocName,FoundBody,FoundAttachment,ServerEmailBodyFilePath,EmailAddress,ShowDialog,
  Raised in: Table<Report Selections>.PROCEDURE<SendEmailToVendorDirectly>
    Code lines:
    OnBeforeSetReportLayout(RecordVariant); <=====================
    BINDSUBSCRIPTION(MailManagement);
    FoundBody := GetEmailBodyVendor(ServerEmailBodyFilePath,ReportUsage,RecordVariant,VendorNo,EmailAddress);
    UNBINDSUBSCRIPTION(MailManagement);
    FoundAttachment := FindEmailAttachmentUsageVendor(ReportUsage,VendorNo,TempAttachReportSelections);
    
    CustomReportSelection.SETRANGE("Source Type",DATABASE::Vendor);
    CustomReportSelection.SETFILTER("Source No.",VendorNo);
    EXIT(SendEmailDirectly(
        ReportUsage,RecordVariant,DocNo,DocName,FoundBody,FoundAttachment,ServerEmailBodyFilePath,EmailAddress,ShowDialog,
  Raised in: Table<Report Selections>.PROCEDURE<SendToDisk>
    Code lines:
    OnBeforeSetReportLayout(RecordVariant); <=====================
    FindPrintUsage(ReportUsage,CustNo,TempReportSelections);
    WITH TempReportSelections DO
      REPEAT
        ServerAttachmentFilePath := SaveReportAsPDF("Report ID",RecordVariant,"Custom Report Layout Code");
        ClientAttachmentFileName := ElectronicDocumentFormat.GetAttachmentFileName(DocNo,DocName,'pdf');
    
        FileManagement.DownloadHandler(
          ServerAttachmentFilePath,
          '',
    ...
  Raised in: Table<Report Selections>.PROCEDURE<SendToDiskVendor>
    Code lines:
    OnBeforeSetReportLayout(RecordVariant); <=====================
    FindPrintUsageVendor(ReportUsage,VendorNo,TempReportSelections);
    WITH TempReportSelections DO
      REPEAT
        ServerAttachmentFilePath := SaveReportAsPDF("Report ID",RecordVariant,"Custom Report Layout Code");
        ClientAttachmentFileName := ElectronicDocumentFormat.GetAttachmentFileName(DocNo,DocName,'pdf');
    
        FileManagement.DownloadHandler(
          ServerAttachmentFilePath,
          '',
    ...
  Raised in: Table<Report Selections>.PROCEDURE<SendToZip>
    Code lines:
    OnBeforeSetReportLayout(RecordVariant); <=====================
    FindPrintUsage(ReportUsage,CustNo,TempReportSelections);
    WITH TempReportSelections DO
      REPEAT
        ServerAttachmentFilePath := SaveReportAsPDF("Report ID",RecordVariant,"Custom Report Layout Code");
        FileManagement.AddFileToZipArchive(
          ServerAttachmentFilePath,
          ElectronicDocumentFormat.GetAttachmentFileName(DocNo,'Invoice','pdf'));
      UNTIL NEXT = 0;
  Raised in: Table<Report Selections>.PROCEDURE<SendToZipVendor>
    Code lines:
    OnBeforeSetReportLayout(RecordVariant); <=====================
    FindPrintUsageVendor(ReportUsage,VendorNo,TempReportSelections);
    WITH TempReportSelections DO
      REPEAT
        ServerAttachmentFilePath := SaveReportAsPDF("Report ID",RecordVariant,"Custom Report Layout Code");
        FileManagement.AddFileToZipArchive(
          ServerAttachmentFilePath,
          ElectronicDocumentFormat.GetAttachmentFileName(DocNo,'Purchase Order','pdf'));
      UNTIL NEXT = 0;
  Raised in: Table<Report Selections>.PROCEDURE<SaveReportAsPDF>
    Code lines:
    OnBeforeSetReportLayout(RecordVariant); <=====================
    FilePath := COPYSTR(FileMgt.ServerTempFileName('pdf'),1,250);
    
    ReportLayoutSelection.SetTempLayoutSelected(LayoutCode);
    REPORT.SAVEASPDF(ReportID,FilePath,RecordVariant);
    ReportLayoutSelection.SetTempLayoutSelected('');
    
    COMMIT;
  Raised in: Table<Report Selections>.PROCEDURE<SaveReportAsHTML>
    Code lines:
    OnBeforeSetReportLayout(RecordVariant); <=====================
    FilePath := COPYSTR(FileMgt.ServerTempFileName('html'),1,250);
    
    ReportLayoutSelection.SetTempLayoutSelected(LayoutCode);
    REPORT.SAVEASHTML(ReportID,FilePath,RecordVariant);
    ReportLayoutSelection.SetTempLayoutSelected('');
    
    COMMIT;
Table<Report Selections>.PROCEDURE<OnFindReportSelections>
  Raised in: Table<Report Selections>.PROCEDURE<FindReportSelections>
    Code lines:
    IF CopyCustomReportSectionToReportSelection(AccountNo,ReportSelections,TableNo) THEN
      EXIT(TRUE);
    
    OnFindReportSelections(ReportSelections,Handled,Rec); <=====================
    IF Handled THEN
      EXIT(TRUE);
    
    EXIT(CopyReportSelectionToReportSelection(ReportSelections));
Table<MS-QBO Customer>.PROCEDURE<CustomerHasAnInvalidCountryName>
  Raised in: Table<MS-QBO Customer>.PROCEDURE<UpdateAddressFromQBO>
    Code lines:
    ...
      IF NOT CountryRegion.FINDFIRST THEN BEGIN
        IF STRLEN(CountryText) <= MAXSTRLEN(CountryRegion.Code) THEN BEGIN
          CountryRegion.SETRANGE(Name);
          CountryRegion.SETRANGE(Code,CountryText);
          IF NOT CountryRegion.FINDFIRST THEN
            CustomerHasAnInvalidCountryName(CountryText); <=====================
        END ELSE
          CustomerHasAnInvalidCountryName(CountryText); <=====================
      END;
    END;
    ...
  Raised in: Table<MS-QBO Customer>.PROCEDURE<UpdateAddressFromQBO>
    Code lines:
    ...
      IF NOT CountryRegion.FINDFIRST THEN BEGIN
        IF STRLEN(CountryText) <= MAXSTRLEN(CountryRegion.Code) THEN BEGIN
          CountryRegion.SETRANGE(Name);
          CountryRegion.SETRANGE(Code,CountryText);
          IF NOT CountryRegion.FINDFIRST THEN
            CustomerHasAnInvalidCountryName(CountryText); <=====================
        END ELSE
          CustomerHasAnInvalidCountryName(CountryText); <=====================
      END;
    END;
    ...
Table<MS-QBO Customer>.PROCEDURE<NoCustomersPresentInResponseJson>
  Raised in: Table<MS-QBO Customer>.PROCEDURE<GetCustomersFromJson>
    Code lines:
    IF ISNULL(JToken) THEN BEGIN
      NoCustomersPresentInResponseJson; <=====================
      EXIT;
    END;
    
    JsonArray := JsonArray.JArray;
    
    // Check if value is an array
    IF FORMAT(JToken.GetType) = FORMAT(JsonArray.GetType) THEN
      ChildJToken := JToken.First
    ...
Table<MS-QBO Customer>.PROCEDURE<OnAfterUpdate>
  Raised in: Table<MS-QBO Customer>.PROCEDURE<Create>
    Code lines:
    CustomerToJson(JObject,TRUE);
    IF JObject.ToString <> EmptyJsonTxt THEN BEGIN
      OnBeforeUpdate(Rec,MSQBOTableMgt);
      IF MSQBOTableMgt.CreateEntity('Customer',JObject,JToken) THEN BEGIN
        GetCustomersFromJson(JToken,MSQBOTableMgt);
        OnAfterUpdate(Rec); <=====================
        EntityCreated := TRUE;
      END;
    END;
  Raised in: Table<MS-QBO Customer>.PROCEDURE<Update>
    Code lines:
    CustomerToJson(JObject,FALSE);
    IF JObject.ToString <> EmptyJsonTxt THEN BEGIN
      OnBeforeUpdate(Rec,MSQBOTableMgt);
      IF MSQBOTableMgt.UpdateEntity('Customer',JObject,JToken) THEN BEGIN
        GetCustomersFromJson(JToken,MSQBOTableMgt);
        OnAfterUpdate(Rec); <=====================
        EntityUpdated := TRUE;
      END;
    END;
Table<MS-QBO Customer>.PROCEDURE<OnBeforeUpdate>
  Raised in: Table<MS-QBO Customer>.PROCEDURE<Create>
    Code lines:
    CustomerToJson(JObject,TRUE);
    IF JObject.ToString <> EmptyJsonTxt THEN BEGIN
      OnBeforeUpdate(Rec,MSQBOTableMgt); <=====================
      IF MSQBOTableMgt.CreateEntity('Customer',JObject,JToken) THEN BEGIN
        GetCustomersFromJson(JToken,MSQBOTableMgt);
        OnAfterUpdate(Rec);
        EntityCreated := TRUE;
      END;
    END;
  Raised in: Table<MS-QBO Customer>.PROCEDURE<Update>
    Code lines:
    CustomerToJson(JObject,FALSE);
    IF JObject.ToString <> EmptyJsonTxt THEN BEGIN
      OnBeforeUpdate(Rec,MSQBOTableMgt); <=====================
      IF MSQBOTableMgt.UpdateEntity('Customer',JObject,JToken) THEN BEGIN
        GetCustomersFromJson(JToken,MSQBOTableMgt);
        OnAfterUpdate(Rec);
        EntityUpdated := TRUE;
      END;
    END;
Table<MS-QBO Customer>.PROCEDURE<OnGettingAll>
  Raised in: Table<MS-QBO Customer>.PROCEDURE<GetAll>
    Code lines:
    OnGettingAll(MSQBOTableMgt); <=====================
    LastUpdateDateTime := MSQBOTableMgt.GetLastUpdatedTimeAsUtc(DATABASE::"MS-QBO Customer");
    Query := 'Select * from Customer';
    CASE TRUE OF
      (IdToSkipSyncFor = '') AND (LastUpdateDateTime <> 0DT):
        Query += STRSUBSTNO(' where Metadata.LastUpdatedTime > ''%1''',
            FORMAT(LastUpdateDateTime,0,9));
      (IdToSkipSyncFor <> '') AND (LastUpdateDateTime = 0DT):
        Query += STRSUBSTNO(' where Id != ''%1''',IdToSkipSyncFor);
      (IdToSkipSyncFor <> '') AND (LastUpdateDateTime <> 0DT):
    ...
Table<MS-QBO Item>.PROCEDURE<NoItemsPresentInResponseJson>
  Raised in: Table<MS-QBO Item>.PROCEDURE<GetItemsFromJson>
    Code lines:
    IF ISNULL(JToken) THEN BEGIN
      NoItemsPresentInResponseJson; <=====================
      EXIT;
    END;
    
    JsonArray := JsonArray.JArray;
    
    // Check if value is an array
    IF FORMAT(JToken.GetType) = FORMAT(JsonArray.GetType) THEN
      ChildJToken := JToken.First
    ...
Table<MS-QBO Item>.PROCEDURE<OnAfterUpdate>
  Raised in: Table<MS-QBO Item>.PROCEDURE<Create>
    Code lines:
    ItemToJson(JObject,TRUE);
    IF JObject.ToString <> EmptyJsonTxt THEN BEGIN
      OnBeforeUpdate(Rec,MSQBOTableMgt);
      IF MSQBOTableMgt.CreateEntity('Item',JObject,JToken) THEN BEGIN
        GetItemsFromJson(JToken,MSQBOTableMgt);
        OnAfterUpdate(Rec); <=====================
        EntityCreated := TRUE;
      END;
    END;
  Raised in: Table<MS-QBO Item>.PROCEDURE<Update>
    Code lines:
    ItemToJson(JObject,FALSE);
    IF JObject.ToString <> EmptyJsonTxt THEN BEGIN
      OnBeforeUpdate(Rec,MSQBOTableMgt);
      IF MSQBOTableMgt.UpdateEntity('Item',JObject,JToken) THEN BEGIN
        GetItemsFromJson(JToken,MSQBOTableMgt);
        OnAfterUpdate(Rec); <=====================
        EntityUpdated := TRUE;
      END;
    END;
Table<MS-QBO Item>.PROCEDURE<OnBeforeUpdate>
  Raised in: Table<MS-QBO Item>.PROCEDURE<Create>
    Code lines:
    ItemToJson(JObject,TRUE);
    IF JObject.ToString <> EmptyJsonTxt THEN BEGIN
      OnBeforeUpdate(Rec,MSQBOTableMgt); <=====================
      IF MSQBOTableMgt.CreateEntity('Item',JObject,JToken) THEN BEGIN
        GetItemsFromJson(JToken,MSQBOTableMgt);
        OnAfterUpdate(Rec);
        EntityCreated := TRUE;
      END;
    END;
  Raised in: Table<MS-QBO Item>.PROCEDURE<Update>
    Code lines:
    ItemToJson(JObject,FALSE);
    IF JObject.ToString <> EmptyJsonTxt THEN BEGIN
      OnBeforeUpdate(Rec,MSQBOTableMgt); <=====================
      IF MSQBOTableMgt.UpdateEntity('Item',JObject,JToken) THEN BEGIN
        GetItemsFromJson(JToken,MSQBOTableMgt);
        OnAfterUpdate(Rec);
        EntityUpdated := TRUE;
      END;
    END;
Table<MS-QBO Item>.PROCEDURE<OnGettingAll>
  Raised in: Table<MS-QBO Item>.PROCEDURE<GetAll>
    Code lines:
    OnGettingAll(MSQBOTableMgt); <=====================
    LastUpdateDateTime := MSQBOTableMgt.GetLastUpdatedTimeAsUtc(DATABASE::"MS-QBO Item");
    Query := 'Select * from Item';
    CASE TRUE OF
      (IdToSkipSyncFor = '') AND (LastUpdateDateTime <> 0DT):
        Query += STRSUBSTNO(' where Metadata.LastUpdatedTime > ''%1''',
            FORMAT(LastUpdateDateTime,0,9));
      (IdToSkipSyncFor <> '') AND (LastUpdateDateTime = 0DT):
        Query += STRSUBSTNO(' where Id != ''%1''',IdToSkipSyncFor);
      (IdToSkipSyncFor <> '') AND (LastUpdateDateTime <> 0DT):
    ...
Table<MS-QBO Setup>.PROCEDURE<WebhooksAdapterUriNotFound>
  Raised in: Table<MS-QBO Setup>.Field<Enabled>.<OnValidate>
    Code lines:
    IF NOT Enabled THEN BEGIN
      WebhooksAdapterUri := COPYSTR(WebhooksAdapterMgt.GetWebhooksAdapterUri(FALSE),1,250);
      IF WebhooksAdapterUri = '' THEN BEGIN
        WebhooksAdapterUriNotFound; <=====================
        EXIT;
      END ;
    
      WebhooksAdapterMgt.DeleteWebhookSubscription(WebhooksAdapterUri);
    END;
Table<Language>.PROCEDURE<OnGetUserLanguageId>
  Raised in: Table<Language>.PROCEDURE<GetUserLanguage>
    Code lines:
    OnGetUserLanguageId(UserLanguageId,Handled); <=====================
    
    IF NOT Handled THEN
      UserLanguageId := GLOBALLANGUAGE;
    
    EXIT(GetLanguageCode(UserLanguageId));
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetBankAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetBankAccount>
    Code lines:
    ...
        BankAcc.TESTFIELD("Currency Code","Currency Code")
      ELSE
        "Currency Code" := BankAcc."Currency Code";
    ClearPostingGroups;
    
    OnAfterAccountNoOnValidateGetBankAccount(Rec,BankAcc); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetBankBalAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetBankBalAccount>
    Code lines:
    ...
        BankAcc.TESTFIELD("Currency Code","Currency Code")
      ELSE
        "Currency Code" := BankAcc."Currency Code";
    ClearBalancePostingGroups;
    
    OnAfterAccountNoOnValidateGetBankBalAccount(Rec,BankAcc); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetCustomerAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetCustomerAccount>
    Code lines:
    ...
      THEN
        ERROR('');
    VALIDATE("Payment Terms Code");
    CheckPaymentTolerance;
    
    OnAfterAccountNoOnValidateGetCustomerAccount(Rec,Cust); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetCustomerBalAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetCustomerBalAccount>
    Code lines:
    ...
      THEN
        ERROR('');
    VALIDATE("Payment Terms Code");
    CheckPaymentTolerance;
    
    OnAfterAccountNoOnValidateGetCustomerBalAccount(Rec,Cust); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetEmployeeAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetEmployeeAccount>
    Code lines:
    ...
    "Posting Group" := Employee."Employee Posting Group";
    SetSalespersonPurchaserCode(Employee."Salespers./Purch. Code","Salespers./Purch. Code");
    "Currency Code" := '';
    ClearPostingGroups;
    
    OnAfterAccountNoOnValidateGetEmployeeAccount(Rec,Employee); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetEmployeeBalAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetEmployeeBalAccount>
    Code lines:
    ...
    "Posting Group" := Employee."Employee Posting Group";
    SetSalespersonPurchaserCode(Employee."Salespers./Purch. Code","Salespers./Purch. Code");
    "Currency Code" := '';
    ClearBalancePostingGroups;
    
    OnAfterAccountNoOnValidateGetEmployeeBalAccount(Rec,Employee); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetFAAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetFAAccount>
    Code lines:
    ...
    UpdateDescription(FA.Description);
    GetFADeprBook("Account No.");
    GetFAVATSetup;
    GetFAAddCurrExchRate;
    
    OnAfterAccountNoOnValidateGetFAAccount(Rec,FA); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetFABalAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetFABalAccount>
    Code lines:
    ...
      Description := FA.Description;
    GetFADeprBook("Bal. Account No.");
    GetFAVATSetup;
    GetFAAddCurrExchRate;
    
    OnAfterAccountNoOnValidateGetFABalAccount(Rec,FA); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetGLAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetGLAccount>
    Code lines:
    ...
    IF "Posting Date" <> 0D THEN
      IF "Posting Date" = CLOSINGDATE("Posting Date") THEN
        ClearPostingGroups;
    VALIDATE("Deferral Code",GLAcc."Default Deferral Template Code");
    
    OnAfterAccountNoOnValidateGetGLAccount(Rec,GLAcc); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetGLBalAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetGLBalAccount>
    Code lines:
    ...
    "Bal. Tax Group Code" := GLAcc."Tax Group Code";
    IF "Posting Date" <> 0D THEN
      IF "Posting Date" = CLOSINGDATE("Posting Date") THEN
        ClearBalancePostingGroups;
    
    OnAfterAccountNoOnValidateGetGLBalAccount(Rec,GLAcc); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetICPartnerAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetICPartnerAccount>
    Code lines:
    ...
    IF ("Bal. Account Type" = "Bal. Account Type"::"Bank Account") AND ("Currency Code" = '') THEN
      "Currency Code" := ICPartner."Currency Code";
    ClearPostingGroups;
    "IC Partner Code" := "Account No.";
    
    OnAfterAccountNoOnValidateGetICPartnerAccount(Rec,ICPartner); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetICPartnerBalAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetICPartnerBalAccount>
    Code lines:
    ...
    IF ("Account Type" = "Account Type"::"Bank Account") AND ("Currency Code" = '') THEN
      "Currency Code" := ICPartner."Currency Code";
    ClearBalancePostingGroups;
    "IC Partner Code" := "Bal. Account No.";
    
    OnAfterAccountNoOnValidateGetICPartnerBalAccount(Rec,ICPartner); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetVendorAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetVendorAccount>
    Code lines:
    ...
      THEN
        ERROR('');
    VALIDATE("Payment Terms Code");
    CheckPaymentTolerance;
    
    OnAfterAccountNoOnValidateGetVendorAccount(Rec,Vend); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetVendorBalAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetVendorBalAccount>
    Code lines:
    ...
      THEN
        ERROR('');
    VALIDATE("Payment Terms Code");
    CheckPaymentTolerance;
    
    OnAfterAccountNoOnValidateGetVendorBalAccount(Rec,Vend); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterClearBalPostingGroups>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<ClearBalancePostingGroups>
    Code lines:
    ...
    "Bal. Gen. Bus. Posting Group" := '';
    "Bal. Gen. Prod. Posting Group" := '';
    "Bal. VAT Bus. Posting Group" := '';
    "Bal. VAT Prod. Posting Group" := '';
    
    OnAfterClearBalPostingGroups(Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterClearPostingGroups>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<ClearPostingGroups>
    Code lines:
    ...
    "Gen. Bus. Posting Group" := '';
    "Gen. Prod. Posting Group" := '';
    "VAT Bus. Posting Group" := '';
    "VAT Prod. Posting Group" := '';
    
    OnAfterClearPostingGroups(Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromCustLedgEntry>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyCustLedgEntry>
    Code lines:
    ...
    "Dimension Set ID" := CustLedgerEntry."Dimension Set ID";
    "Posting Group" := CustLedgerEntry."Customer Posting Group";
    "Source Type" := "Source Type"::Customer;
    "Source No." := CustLedgerEntry."Customer No.";
    
    OnAfterCopyGenJnlLineFromCustLedgEntry(CustLedgEntry,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromGenJnlAllocation>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromGenJnlAllocation>
    Code lines:
    ...
    "VAT %" := GenJnlAlloc."VAT %";
    "Source Currency Amount" := GenJnlAlloc."Additional-Currency Amount";
    Amount := GenJnlAlloc.Amount;
    "Amount (LCY)" := GenJnlAlloc.Amount;
    
    OnAfterCopyGenJnlLineFromGenJnlAllocation(GenJnlAlloc,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromInvPostBuffer>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromInvoicePostBuffer>
    Code lines:
    ...
    "Source Curr. VAT Base Amount" := InvoicePostBuffer."VAT Base Amount (ACY)";
    "VAT Amount" := InvoicePostBuffer."VAT Amount";
    "Source Curr. VAT Amount" := InvoicePostBuffer."VAT Amount (ACY)";
    "VAT Difference" := InvoicePostBuffer."VAT Difference";
    
    OnAfterCopyGenJnlLineFromInvPostBuffer(InvoicePostBuffer,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromInvPostBufferFA>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromInvoicePostBufferFA>
    Code lines:
    ...
    "Insurance No." := InvoicePostBuffer."Insurance No.";
    "Budgeted FA No." := InvoicePostBuffer."Budgeted FA No.";
    "Duplicate in Depreciation Book" := InvoicePostBuffer."Duplicate in Depreciation Book";
    "Use Duplication List" := InvoicePostBuffer."Use Duplication List";
    
    OnAfterCopyGenJnlLineFromInvPostBufferFA(InvoicePostBuffer,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPrepmtInvBuffer>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromPrepmtInvoiceBuffer>
    Code lines:
    ...
    "Source Curr. VAT Base Amount" := PrepmtInvLineBuffer."VAT Base Amount (ACY)";
    "VAT Amount" := PrepmtInvLineBuffer."VAT Amount";
    "Source Curr. VAT Amount" := PrepmtInvLineBuffer."VAT Amount (ACY)";
    "VAT Difference" := PrepmtInvLineBuffer."VAT Difference";
    
    OnAfterCopyGenJnlLineFromPrepmtInvBuffer(PrepmtInvLineBuffer,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPurchHeader>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromPurchHeader>
    Code lines:
    ...
    "Salespers./Purch. Code" := PurchHeader."Purchaser Code";
    "On Hold" := PurchHeader."On Hold";
    IF "Account Type" = "Account Type"::Vendor THEN
      "Posting Group" := PurchHeader."Vendor Posting Group";
    
    OnAfterCopyGenJnlLineFromPurchHeader(PurchHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPurchHeaderApplyTo>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromPurchHeaderApplyTo>
    Code lines:
    "Applies-to Doc. Type" := PurchHeader."Applies-to Doc. Type";
    "Applies-to Doc. No." := PurchHeader."Applies-to Doc. No.";
    "Applies-to ID" := PurchHeader."Applies-to ID";
    "Allow Application" := PurchHeader."Bal. Account No." = '';
    
    OnAfterCopyGenJnlLineFromPurchHeaderApplyTo(PurchHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPurchHeaderPayment>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromPurchHeaderPayment>
    Code lines:
    ...
    "Payment Discount %" := PurchHeader."Payment Discount %";
    "Creditor No." := PurchHeader."Creditor No.";
    "Payment Reference" := PurchHeader."Payment Reference";
    "Payment Method Code" := PurchHeader."Payment Method Code";
    
    OnAfterCopyGenJnlLineFromPurchHeaderPayment(PurchHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPurchHeaderPrepmt>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromPurchHeaderPrepmt>
    Code lines:
    ...
    "IC Partner Code" := PurchHeader."Buy-from IC Partner Code";
    "VAT Posting" := "VAT Posting"::"Manual VAT Entry";
    "System-Created Entry" := TRUE;
    Prepayment := TRUE;
    
    OnAfterCopyGenJnlLineFromPurchHeaderPrepmt(PurchHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPurchHeaderPrepmtPost>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromPurchHeaderPrepmtPost>
    Code lines:
    ...
    IF UsePmtDisc THEN BEGIN
      "Pmt. Discount Date" := PurchHeader."Prepmt. Pmt. Discount Date";
      "Payment Discount %" := PurchHeader."Prepmt. Payment Discount %";
    END;
    
    OnAfterCopyGenJnlLineFromPurchHeaderPrepmtPost(PurchHeader,Rec,UsePmtDisc); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromSalesHeader>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromSalesHeader>
    Code lines:
    ...
    "Salespers./Purch. Code" := SalesHeader."Salesperson Code";
    "On Hold" := SalesHeader."On Hold";
    IF "Account Type" = "Account Type"::Customer THEN
      "Posting Group" := SalesHeader."Customer Posting Group";
    
    OnAfterCopyGenJnlLineFromSalesHeader(SalesHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromSalesHeaderApplyTo>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromSalesHeaderApplyTo>
    Code lines:
    "Applies-to Doc. Type" := SalesHeader."Applies-to Doc. Type";
    "Applies-to Doc. No." := SalesHeader."Applies-to Doc. No.";
    "Applies-to ID" := SalesHeader."Applies-to ID";
    "Allow Application" := SalesHeader."Bal. Account No." = '';
    
    OnAfterCopyGenJnlLineFromSalesHeaderApplyTo(SalesHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromSalesHeaderPayment>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromSalesHeaderPayment>
    Code lines:
    ...
    "Payment Method Code" := SalesHeader."Payment Method Code";
    "Pmt. Discount Date" := SalesHeader."Pmt. Discount Date";
    "Payment Discount %" := SalesHeader."Payment Discount %";
    "Direct Debit Mandate ID" := SalesHeader."Direct Debit Mandate ID";
    
    OnAfterCopyGenJnlLineFromSalesHeaderPayment(SalesHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromSalesHeaderPrepmt>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromSalesHeaderPrepmt>
    Code lines:
    ...
    "IC Partner Code" := SalesHeader."Sell-to IC Partner Code";
    "VAT Posting" := "VAT Posting"::"Manual VAT Entry";
    "System-Created Entry" := TRUE;
    Prepayment := TRUE;
    
    OnAfterCopyGenJnlLineFromSalesHeaderPrepmt(SalesHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromSalesHeaderPrepmtPost>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromSalesHeaderPrepmtPost>
    Code lines:
    ...
    IF UsePmtDisc THEN BEGIN
      "Pmt. Discount Date" := SalesHeader."Prepmt. Pmt. Discount Date";
      "Payment Discount %" := SalesHeader."Prepmt. Payment Discount %";
    END;
    
    OnAfterCopyGenJnlLineFromSalesHeaderPrepmtPost(SalesHeader,Rec,UsePmtDisc); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromServHeader>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromServiceHeader>
    Code lines:
    ...
    "Posting No. Series" := ServiceHeader."Posting No. Series";
    "Ship-to/Order Address Code" := ServiceHeader."Ship-to Code";
    "EU 3-Party Trade" := ServiceHeader."EU 3-Party Trade";
    "Salespers./Purch. Code" := ServiceHeader."Salesperson Code";
    
    OnAfterCopyGenJnlLineFromServHeader(ServiceHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromServHeaderApplyTo>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromServiceHeaderApplyTo>
    Code lines:
    "Applies-to Doc. Type" := ServiceHeader."Applies-to Doc. Type";
    "Applies-to Doc. No." := ServiceHeader."Applies-to Doc. No.";
    "Applies-to ID" := ServiceHeader."Applies-to ID";
    "Allow Application" := ServiceHeader."Bal. Account No." = '';
    
    OnAfterCopyGenJnlLineFromServHeaderApplyTo(ServiceHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromServHeaderPayment>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromServiceHeaderPayment>
    Code lines:
    ...
    "Payment Terms Code" := ServiceHeader."Payment Terms Code";
    "Payment Method Code" := ServiceHeader."Payment Method Code";
    "Pmt. Discount Date" := ServiceHeader."Pmt. Discount Date";
    "Payment Discount %" := ServiceHeader."Payment Discount %";
    
    OnAfterCopyGenJnlLineFromServHeaderPayment(ServiceHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[3] := No3;
    TableID[4] := Type4;
    No[4] := No4;
    TableID[5] := Type5;
    No[5] := No5;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
Table<Gen. Journal Line>.PROCEDURE<OnAfterCreateTempJobJnlLine>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CreateTempJobJnlLine>
    Code lines:
    ...
      TempJobJnlLine."Line Discount %" := xRec."Job Line Discount %";
      TempJobJnlLine."Line Discount Amount" := xRec."Job Line Discount Amount";
      TempJobJnlLine.VALIDATE("Unit Price");
    END;
    
    OnAfterCreateTempJobJnlLine(TempJobJnlLine,Rec,xRec,CurrFieldNo); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterSetupNewLine>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    ...
    IF GenJnlBatch."Suggest Balancing Amount" THEN
      SuggestBalancingAmount(LastGenJnlLine,BottomLine);
    
    UpdateJournalBatchID;
    
    OnAfterSetupNewLine(Rec,GenJnlTemplate,GenJnlBatch,LastGenJnlLine,Balance,BottomLine); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterUpdatePricesFromJobJnlLine>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<UpdatePricesFromJobJnlLine>
    Code lines:
    ...
    "Job Line Amount (LCY)" := TempJobJnlLine."Line Amount (LCY)";
    "Job Line Disc. Amount (LCY)" := TempJobJnlLine."Line Discount Amount (LCY)";
    "Job Unit Cost (LCY)" := TempJobJnlLine."Unit Cost (LCY)";
    "Job Total Cost (LCY)" := TempJobJnlLine."Total Cost (LCY)";
    
    OnAfterUpdatePricesFromJobJnlLine(Rec,TempJobJnlLine); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnBeforeCreateTempJobJnlLine>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CreateTempJobJnlLine>
    Code lines:
    OnBeforeCreateTempJobJnlLine(TempJobJnlLine,Rec,xRec,CurrFieldNo); <=====================
    
    TESTFIELD("Posting Date");
    CLEAR(TempJobJnlLine);
    TempJobJnlLine.DontCheckStdCost;
    TempJobJnlLine.VALIDATE("Job No.","Job No.");
    TempJobJnlLine.VALIDATE("Job Task No.","Job Task No.");
    IF CurrFieldNo <> FIELDNO("Posting Date") THEN
      TempJobJnlLine.VALIDATE("Posting Date","Posting Date")
    ELSE
    ...
Table<Gen. Journal Line>.PROCEDURE<OnCheckGenJournalLinePostRestrictions>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<CheckRestrictions>
    Code lines:
    IF NOT PreviewMode THEN
      GenJournalLine.OnCheckGenJournalLinePostRestrictions; <=====================
Table<Gen. Journal Line>.PROCEDURE<OnCheckGenJournalLinePrintCheckRestrictions>
  Raised in: Codeunit<Document-Print>.PROCEDURE<PrintCheck>
    Code lines:
    GenJnlLine.COPY(NewGenJnlLine);
    GenJnlLine.OnCheckGenJournalLinePrintCheckRestrictions; <=====================
    
    ReportSelections.Print(ReportSelections.Usage::"B.Check",GenJnlLine,0);
Table<Gen. Journal Line>.PROCEDURE<OnGenJnlLineGetVendorAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetVendorAccount>
    Code lines:
    ...
    CheckICPartner(Vend."IC Partner Code","Account Type","Account No.");
    UpdateDescription(Vend.Name);
    "Payment Method Code" := Vend."Payment Method Code";
    "Creditor No." := Vend."Creditor No.";
    
    OnGenJnlLineGetVendorAccount(Vend); <=====================
    
    VALIDATE("Recipient Bank Account",Vend."Preferred Bank Account Code");
    "Posting Group" := Vend."Vendor Posting Group";
    SetSalespersonPurchaserCode(Vend."Purchaser Code","Salespers./Purch. Code");
    ...
Table<Gen. Journal Line>.PROCEDURE<OnMoveGenJournalLine>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostGLAcc>
    Code lines:
    ...
      InitVAT(GenJnlLine,GLEntry,VATPostingSetup);
      InsertGLEntry(GenJnlLine,GLEntry,TRUE);
      PostJob(GenJnlLine,GLEntry);
      PostVAT(GenJnlLine,GLEntry,VATPostingSetup);
      DeferralPosting("Deferral Code","Source Code","Account No.",GenJnlLine,Balancing);
      OnMoveGenJournalLine(GLEntry.RECORDID); <=====================
    END;
    
    OnAfterPostGLAcc(GenJnlLine);
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostCust>
    Code lines:
    ...
      IF DtldLedgEntryInserted THEN
        IF IsTempGLEntryBufEmpty THEN
          DtldCustLedgEntry.SetZeroTransNo(NextTransactionNo);
    
      DeferralPosting("Deferral Code","Source Code",ReceivablesAccount,GenJnlLine,Balancing);
      OnMoveGenJournalLine(CustLedgEntry.RECORDID); <=====================
    END;
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostVend>
    Code lines:
    ...
    
      IF DtldLedgEntryInserted THEN
        IF IsTempGLEntryBufEmpty THEN
          DtldVendLedgEntry.SetZeroTransNo(NextTransactionNo);
      DeferralPosting("Deferral Code","Source Code",PayablesAccount,GenJnlLine,Balancing);
      OnMoveGenJournalLine(VendLedgEntry.RECORDID); <=====================
    END;
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostEmployee>
    Code lines:
    ...
      // Posting GL Entry
      IF DtldLedgEntryInserted THEN
        IF IsTempGLEntryBufEmpty THEN
          DtldEmplLedgEntry.SetZeroTransNo(NextTransactionNo);
    
      OnMoveGenJournalLine(EmployeeLedgerEntry.RECORDID); <=====================
    END;
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostBankAcc>
    Code lines:
    ...
      BankAccPostingGr.TESTFIELD("G/L Bank Account No.");
      CreateGLEntryBalAcc(
        GenJnlLine,BankAccPostingGr."G/L Bank Account No.","Amount (LCY)","Source Currency Amount",
        "Bal. Account Type","Bal. Account No.");
      DeferralPosting("Deferral Code","Source Code",BankAccPostingGr."G/L Bank Account No.",GenJnlLine,Balancing);
      OnMoveGenJournalLine(BankAccLedgEntry.RECORDID); <=====================
    END;
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostFixedAsset>
    Code lines:
    ...
      VATEntryGLEntryNo := GLEntry."Entry No.";
    TempGLEntryBuf."Entry No." := VATEntryGLEntryNo; // Used later in InsertVAT(): GLEntryVATEntryLink.InsertLink(TempGLEntryBuf."Entry No.",VATEntry."Entry No.")
    PostVAT(GenJnlLine,GLEntry,VATPostingSetup);
    
    FAJnlPostLine.UpdateRegNo(GLReg."No.");
    GenJnlLine.OnMoveGenJournalLine(GLEntry.RECORDID); <=====================
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CreateGLEntryBalAcc>
    Code lines:
    InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,AmountAddCurr,TRUE,TRUE);
    GLEntry."Bal. Account Type" := BalAccType;
    GLEntry."Bal. Account No." := BalAccNo;
    InsertGLEntry(GenJnlLine,GLEntry,TRUE);
    GenJnlLine.OnMoveGenJournalLine(GLEntry.RECORDID); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromJobJnlLine>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromJobJnlLine>
    Code lines:
    ...
    "Amount (ACY)" := JobJnlLine."Total Cost";
    "Value Entry Type" := "Value Entry Type"::"Direct Cost";
    "Job No." := JobJnlLine."Job No.";
    "Job Task No." := JobJnlLine."Job Task No.";
    
    OnAfterCopyItemJnlLineFromJobJnlLine(Rec,JobJnlLine); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromPurchHeader>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromPurchHeader>
    Code lines:
    ...
    "Salespers./Purch. Code" := PurchHeader."Purchaser Code";
    "Country/Region Code" := PurchHeader."Buy-from Country/Region Code";
    "Reason Code" := PurchHeader."Reason Code";
    "Source Currency Code" := PurchHeader."Currency Code";
    
    OnAfterCopyItemJnlLineFromPurchHeader(Rec,PurchHeader); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromPurchLine>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromPurchLine>
    Code lines:
    ...
    "Purchasing Code" := PurchLine."Purchasing Code";
    "Indirect Cost %" := PurchLine."Indirect Cost %";
    "Overhead Rate" := PurchLine."Overhead Rate";
    "Return Reason Code" := PurchLine."Return Reason Code";
    
    OnAfterCopyItemJnlLineFromPurchLine(Rec,PurchLine); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromSalesHeader>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromSalesHeader>
    Code lines:
    ...
    "Source Posting Group" := SalesHeader."Customer Posting Group";
    "Salespers./Purch. Code" := SalesHeader."Salesperson Code";
    "Reason Code" := SalesHeader."Reason Code";
    "Source Currency Code" := SalesHeader."Currency Code";
    
    OnAfterCopyItemJnlLineFromSalesHeader(Rec,SalesHeader); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromSalesLine>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromSalesLine>
    Code lines:
    ...
    "Value Entry Type" := "Value Entry Type"::"Direct Cost";
    "Source Type" := "Source Type"::Customer;
    "Source No." := SalesLine."Sell-to Customer No.";
    "Invoice-to Source No." := SalesLine."Bill-to Customer No.";
    
    OnAfterCopyItemJnlLineFromSalesLine(Rec,SalesLine); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServHeader>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromServHeader>
    Code lines:
    ...
    "Country/Region Code" := ServiceHeader."VAT Country/Region Code";
    "Reason Code" := ServiceHeader."Reason Code";
    "Source Type" := "Source Type"::Customer;
    "Source No." := ServiceHeader."Customer No.";
    
    OnAfterCopyItemJnlLineFromServHeader(Rec,ServiceHeader); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServLine>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromServLine>
    Code lines:
    ...
    "Order No." := ServiceLine."Document No.";
    "Order Line No." := ServiceLine."Line No.";
    "Job No." := ServiceLine."Job No.";
    "Job Task No." := ServiceLine."Job Task No.";
    
    OnAfterCopyItemJnlLineFromServLine(Rec,ServiceLine); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServShptHeader>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromServShptHeader>
    Code lines:
    ...
    "Country/Region Code" := ServShptHeader."VAT Country/Region Code";
    "Source Posting Group" := ServShptHeader."Customer Posting Group";
    "Salespers./Purch. Code" := ServShptHeader."Salesperson Code";
    "Reason Code" := ServShptHeader."Reason Code";
    
    OnAfterCopyItemJnlLineFromServShptHeader(Rec,ServShptHeader); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServShptLine>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromServShptLine>
    Code lines:
    ...
    "Item Category Code" := ServShptLine."Item Category Code";
    Nonstock := ServShptLine.Nonstock;
    "Product Group Code" := ServShptLine."Product Group Code";
    "Return Reason Code" := ServShptLine."Return Reason Code";
    
    OnAfterCopyItemJnlLineFromServShptLine(Rec,ServShptLine); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServShptLineUndo>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromServShptLineUndo>
    Code lines:
    ...
    "Item Category Code" := ServShptLine."Item Category Code";
    Nonstock := ServShptLine.Nonstock;
    "Product Group Code" := ServShptLine."Product Group Code";
    "Return Reason Code" := ServShptLine."Return Reason Code";
    
    OnAfterCopyItemJnlLineFromServShptLineUndo(Rec,ServShptLine); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Item Journal Line>.PROCEDURE<CreateDim>
    Code lines:
    CreateTableArray(TableID,Type1,Type2,Type3);
    CreateCodeArray(No,No1,No2,No3);
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    PickDimension(TableID,No,0,0);
  Raised in: Table<Item Journal Line>.PROCEDURE<CreateDimWithProdOrderLine>
    Code lines:
    ...
      IF ProdOrderLine.GET(ProdOrderLine.Status::Released,"Order No.","Order Line No.") THEN
        InheritFromDimSetID := ProdOrderLine."Dimension Set ID";
    
    CreateTableArray(TableID,DATABASE::"Work Center",DATABASE::"Salesperson/Purchaser",0);
    CreateCodeArray(No,"Work Center No.","Salespers./Purch. Code",'');
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    PickDimension(TableID,No,InheritFromDimSetID,DATABASE::Item);
Table<Item Journal Line>.PROCEDURE<OnAfterOnValidateItemNoAssignByEntryType>
  Raised in: Table<Item Journal Line>.Field<Item No.>.<OnValidate>
    Code lines:
    ...
      "Unit of Measure Code" := Item."Base Unit of Measure";
    VALIDATE("Unit of Measure Code");
    IF "Variant Code" <> '' THEN
      VALIDATE("Variant Code");
    
    OnAfterOnValidateItemNoAssignByEntryType(ItemJnlLine,Item); <=====================
    
    CheckItemAvailable(FIELDNO("Item No."));
    
    IF ((NOT ("Order Type" IN ["Order Type"::Production,"Order Type"::Assembly])) OR ("Order No." = '')) AND NOT "Phys. Inventory"
    ...
Table<Item Journal Line>.PROCEDURE<OnAfterSetupNewLine>
  Raised in: Table<Item Journal Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    ...
    
    IF Location.GET("Location Code") THEN
      IF  Location."Directed Put-away and Pick" THEN
        "Location Code" := '';
    
    OnAfterSetupNewLine(Rec,LastItemJnlLine); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterUpdateAmount>
  Raised in: Table<Item Journal Line>.PROCEDURE<UpdateAmount>
    Code lines:
    Amount := ROUND(Quantity * "Unit Amount");
    
    OnAfterUpdateAmount(Rec); <=====================
Table<Item Journal Line>.PROCEDURE<OnBeforeVerifyReservedQty>
  Raised in: Table<Item Journal Line>.<OnModify>
    Code lines:
    OnBeforeVerifyReservedQty(Rec,xRec,0); <=====================
    ReserveItemJnlLine.VerifyChange(Rec,xRec);
    CheckPlanningAssignment;
  Raised in: Table<Item Journal Line>.Field<Item No.>.<OnValidate>
    Code lines:
    ...
      CreateDim(
        DATABASE::Item,"Item No.",
        DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
        DATABASE::"Work Center","Work Center No.");
    
    OnBeforeVerifyReservedQty(Rec,xRec,FIELDNO("Item No.")); <=====================
    ReserveItemJnlLine.VerifyChange(Rec,xRec);
Table<Item Journal Line>.PROCEDURE<OnCheckItemJournalLinePostRestrictions>
  Raised in: Table<Item Journal Line>.PROCEDURE<CheckItemJournalLineRestriction>
    Code lines:
    OnCheckItemJournalLinePostRestrictions; <=====================
Table<Config. Table Processing Rule>.PROCEDURE<OnDoesTableHaveCustomRuleInRapidStart>
  Raised in: Table<Config. Table Processing Rule>.PROCEDURE<DoesTableHaveCustomRuleInRapidStart>
    Code lines:
    OnDoesTableHaveCustomRuleInRapidStart("Table ID",Result); <=====================
Table<Assembly Header>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Assembly Header>.PROCEDURE<CreateDim>
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,SourceCodeSetup.Assembly,
    ...
Table<Assembly Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Assembly Line>.PROCEDURE<CreateDim>
    Code lines:
    ...
      EXIT;
    
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    AssemblySetup.GET;
    ...
Table<Assemble-to-Order Link>.PROCEDURE<OnAfterUpdateAsm>
  Raised in: Table<Assemble-to-Order Link>.PROCEDURE<UpdateAsm>
    Code lines:
    ...
    INSERT;
    AsmHeader."Shortcut Dimension 1 Code" := NewSalesLine."Shortcut Dimension 1 Code";
    AsmHeader."Shortcut Dimension 2 Code" := NewSalesLine."Shortcut Dimension 2 Code";
    AsmHeader.MODIFY(TRUE);
    
    OnAfterUpdateAsm(AsmHeader); <=====================
Table<Routing Line>.PROCEDURE<OnAfterMachineCtrTransferFields>
  Raised in: Table<Routing Line>.PROCEDURE<MachineCtrTransferFields>
    Code lines:
    ...
    "Minimum Process Time" := MachineCenter."Minimum Process Time";
    "Maximum Process Time" := MachineCenter."Maximum Process Time";
    "Concurrent Capacities" := MachineCenter."Concurrent Capacities";
    "Send-Ahead Quantity" := MachineCenter."Send-Ahead Quantity";
    
    OnAfterMachineCtrTransferFields(Rec,WorkCenter,MachineCenter); <=====================
Table<Routing Line>.PROCEDURE<OnAfterWorkCenterTransferFields>
  Raised in: Table<Routing Line>.PROCEDURE<WorkCenterTransferFields>
    Code lines:
    ...
      "Wait Time Unit of Meas. Code" := WorkCenter."Unit of Measure Code";
    IF "Move Time Unit of Meas. Code" = '' THEN
      "Move Time Unit of Meas. Code" := WorkCenter."Unit of Measure Code";
    Description := WorkCenter.Name;
    
    OnAfterWorkCenterTransferFields(Rec,WorkCenter); <=====================
Table<Planning Component>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Planning Component>.PROCEDURE<CreateDim>
    Code lines:
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    GetReqLine;
    DimensionSetIDArr[1] :=
      DimMgt.GetRecDefaultDimID(Rec,CurrFieldNo,TableID,No,'',"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
    DimensionSetIDArr[2] := ReqLine."Dimension Set ID";
    ...
Table<Planning Component>.PROCEDURE<OnAfterTransferFromAsmLine>
  Raised in: Table<Planning Component>.PROCEDURE<TransferFromAsmLine>
    Code lines:
    ...
    "Quantity (Base)" := AsmLine."Quantity per";
    "Expected Quantity (Base)" := AsmLine."Quantity (Base)";
    "Original Expected Qty. (Base)" := AsmLine."Quantity (Base)";
    UpdateDatetime;
    
    OnAfterTransferFromAsmLine(Rec,AsmLine); <=====================
Table<Planning Component>.PROCEDURE<OnAfterTransferFromComponent>
  Raised in: Table<Planning Component>.PROCEDURE<TransferFromComponent>
    Code lines:
    ...
    "Quantity (Base)" := ProdOrderComp."Quantity (Base)";
    "Expected Quantity (Base)" := ProdOrderComp."Expected Qty. (Base)";
    "Original Expected Qty. (Base)" := ProdOrderComp."Expected Qty. (Base)";
    UpdateDatetime;
    
    OnAfterTransferFromComponent(Rec,ProdOrderComp); <=====================
Table<Planning Routing Line>.PROCEDURE<OnAfterMachineCtrTransferFields>
  Raised in: Table<Planning Routing Line>.PROCEDURE<MachineCtrTransferfields>
    Code lines:
    ...
    "Unit Cost per" := MachineCenter."Unit Cost";
    "Direct Unit Cost" := MachineCenter."Direct Unit Cost";
    "Indirect Cost %" := MachineCenter."Indirect Cost %";
    "Overhead Rate" := MachineCenter."Overhead Rate";
    
    OnAfterMachineCtrTransferFields(Rec,WorkCenter,MachineCenter); <=====================
Table<Planning Routing Line>.PROCEDURE<OnAfterTransferFromProdOrderRouting>
  Raised in: Table<Planning Routing Line>.PROCEDURE<TransferFromProdOrderRouting>
    Code lines:
    ...
    "Ending Time" := ProdOrderRoutingLine."Ending Time";
    "Ending Date" := ProdOrderRoutingLine."Ending Date";
    UpdateDatetime;
    VALIDATE("Unit Cost per");
    
    OnAfterTransferFromProdOrderRouting(Rec,ProdOrderRoutingLine); <=====================
Table<Planning Routing Line>.PROCEDURE<OnAfterWorkCenterTransferFields>
  Raised in: Table<Planning Routing Line>.PROCEDURE<WorkCenterTransferfields>
    Code lines:
    ...
    "Unit Cost per" := WorkCenter."Unit Cost";
    "Direct Unit Cost" := WorkCenter."Direct Unit Cost";
    "Indirect Cost %" := WorkCenter."Indirect Cost %";
    "Overhead Rate" := WorkCenter."Overhead Rate";
    
    OnAfterWorkCenterTransferFields(Rec,WorkCenter); <=====================
