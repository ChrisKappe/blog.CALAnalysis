2770 published events found.
Number of times a publisher was raised: 
1 : Codeunit<Calc. G/L Acc. Where-Used>.PROCEDURE<OnAfterCheckPostingGroups>
1 : Codeunit<Calc. G/L Acc. Where-Used>.PROCEDURE<OnBeforeShowGLAccWhereUsed>
1 : Codeunit<Calc. G/L Acc. Where-Used>.PROCEDURE<OnShowExtensionPage>
1 : Codeunit<Job Post-Line>.PROCEDURE<OnAfterJobPlanningLineModify>
1 : Codeunit<Job Post-Line>.PROCEDURE<OnAfterPostInvoiceContractLine>
1 : Codeunit<Job Post-Line>.PROCEDURE<OnBeforePostInvoiceContractLine>
1 : Codeunit<Job Post-Line>.PROCEDURE<OnBeforePostJobOnPurchaseLine>
1 : Codeunit<Job Post-Line>.PROCEDURE<OnPostInvoiceContractLineBeforeCheckJobLine>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnAfterTestSalesHeader>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeInsertSalesHeader>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeInsertSalesLine>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeModifySalesHeader>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeModifySalesLine>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeUpdateSalesHeader>
1 : Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromGenJnlLineToJnlLine>
1 : Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromJnlLineToLedgEntry>
1 : Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromJnlToPlanningLine>
1 : Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromJobLedgEntryToPlanningLine>
1 : Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromPlanningLineToJnlLine>
1 : Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromPlanningSalesLineToJnlLine>
1 : Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromPurchaseLineToJnlLine>
1 : Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromSalesHeaderToPlanningLine>
1 : Codeunit<Job Transfer Line>.PROCEDURE<OnBeforeFromPlanningSalesLineToJnlLine>
1 : Codeunit<Job Calculate Batches>.PROCEDURE<OnBeforeTransferToPlanningLine>
1 : Codeunit<Copy Job>.PROCEDURE<OnAfterCopyJobTask>
1 : Codeunit<Job Jnl.-Check Line>.PROCEDURE<OnAfterRunCheck>
1 : Codeunit<Job Jnl.-Check Line>.PROCEDURE<OnBeforeRunCheck>
1 : Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnAfterApplyUsageLink>
1 : Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnAfterRunCode>
1 : Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnBeforeApplyUsageLink>
1 : Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnBeforeCreateJobLedgEntry>
1 : Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnGetJobConsumptionValueEntryFilter>
1 : Codeunit<Job Jnl.-Post Batch>.PROCEDURE<OnAfterCheckJnlLine>
1 : Codeunit<Job Jnl.-Post Batch>.PROCEDURE<OnAfterJobJnlPostLine>
1 : Codeunit<Job Jnl.-Post Batch>.PROCEDURE<OnAfterPostJnlLines>
1 : Codeunit<Job Jnl.-Post Batch>.PROCEDURE<OnBeforeJobJnlPostLine>
1 : Codeunit<Job Jnl.-Post Batch>.PROCEDURE<OnBeforeUpdateAndDeleteLines>
1 : Codeunit<Job Link Usage>.PROCEDURE<OnAfterFindMatchingJobPlanningLine>
1 : Codeunit<Job Link Usage>.PROCEDURE<OnBeforeJobPlanningLineUse>
1 : Codeunit<Job Link Usage>.PROCEDURE<OnBeforeModifyJobPlanningLine>
1 : Codeunit<Cust. Entry-Edit>.PROCEDURE<OnBeforeCustLedgEntryModify>
1 : Codeunit<Paypal Account Proxy>.PROCEDURE<GetMsPayIsEnabled>
1 : Codeunit<Paypal Account Proxy>.PROCEDURE<GetPaypalAccount>
1 : Codeunit<Paypal Account Proxy>.PROCEDURE<GetPaypalSetupOptions>
1 : Codeunit<Paypal Account Proxy>.PROCEDURE<SetAlwaysIncludeMsPayOnDocuments>
1 : Codeunit<Paypal Account Proxy>.PROCEDURE<SetAlwaysIncludePaypalOnDocuments>
2 : Codeunit<Paypal Account Proxy>.PROCEDURE<SetPaypalAccount>
1 : Codeunit<QBO Sync Proxy>.PROCEDURE<GetQBOAuthURL>
2 : Codeunit<QBO Sync Proxy>.PROCEDURE<GetQBOSyncSettings>
1 : Codeunit<QBO Sync Proxy>.PROCEDURE<SetQBOSyncEnabled>
2 : Codeunit<QBD Sync Proxy>.PROCEDURE<GetQBDSyncSettings>
1 : Codeunit<QBD Sync Proxy>.PROCEDURE<SendEmailInBackground>
1 : Codeunit<QBD Sync Proxy>.PROCEDURE<SetQBDSyncEnabled>
1 : Codeunit<QBD Sync Proxy>.PROCEDURE<SetQBDSyncSendToEmail>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnAfterCheckGenJnlLine>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnAfterDateNoAllowed>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckAccountNo>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckBalAccountNo>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckBalDocType>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckDimensions>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckDocType>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckICPartner>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeDateNotAllowed>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeErrorIfNegativeAmt>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeErrorIfPositiveAmt>
1 : Codeunit<Vend. Entry-Edit>.PROCEDURE<OnBeforeVendLedgEntryModify>
1 : Codeunit<Empl. Entry-Edit>.PROCEDURE<OnBeforeEmplLedgEntryModify>
1 : Codeunit<Data Privacy Mgmt>.PROCEDURE<OnAfterGetPackageCode>
1 : Codeunit<Data Privacy Mgmt>.PROCEDURE<OnAfterSetPrivacyBlocked>
1 : Codeunit<Data Privacy Mgmt>.PROCEDURE<OnCreateData>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterCalcMinimalPossibleLiability>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterCalcPaymentExceedsLiability>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterCalcPmtDiscount>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterCalcPmtDiscTolerance>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterCalcToleratedPaymentExceedsLiability>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterFindAmtForAppln>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterGLFinishPosting>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterHandleAddCurrResidualGLEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitBankAccLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitCheckLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitCustLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitEmployeeLedgerEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitGLEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitGLEntryVAT>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitGLEntryVATCopy>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitGLRegister>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitNewDtldCVLedgEntryBuf>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitOldDtldCVLedgEntryBuf>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitVendLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInsertGlobalGLEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInsertVAT>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInsertVATEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterOldCustLedgEntryModify>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterOldVendLedgEntryModify>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostApply>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostCust>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostDeferral>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostGLAcc>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostUnrealVATEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostVAT>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostVend>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterRunWithCheck>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterRunWithoutCheck>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterSettingIsTransactionConsistent>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeApplyCustLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeApplyVendLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCalcCurrencyApplnRounding>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCalcPmtDiscTolerance>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCalcPmtTolerance>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCheckGLAccDimError>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCheckPurchExtDocNo>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCode>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeContinuePosting>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCreateGLEntriesForTotalAmounts>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCreateGLEntryGainLossInsertGLEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCustLedgEntryModify>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCustUnrealizedVAT>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeEmplLedgEntryModify>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeFindAmtForAppln>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInitGLEntryVAT>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInitGLEntryVATCopy>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertDtldCustLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertDtldCustLedgEntryUnapply>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertDtldEmplLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertDtldEmplLedgEntryUnapply>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertDtldVendLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertDtldVendLedgEntryUnapply>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertGLEntryBuffer>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertGlobalGLEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertPostUnrealVATEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertTempVATEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertVAT>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertVATEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePostApply>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePostDeferral>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePostGenJnlLine>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePostUnrealVATEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePostVAT>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePrepareTempCustledgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePrepareTempVendLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeStartOrContinuePosting>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeStartPosting>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeUpdateTotalAmounts>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeVendLedgEntryModify>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeVendUnrealizedVAT>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnCalcPmtDiscIfAdjVATCopyFields>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnCalcPmtDiscOnAfterAssignPmtDisc>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnCalcPmtToleranceOnAfterAssignPmtDisc>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnCustUnrealizedVATOnAfterVATPartCalculation>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnNextTransactionNoNeeded>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPrepareTempCustLedgEntryOnBeforeExit>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPrepareTempVendLedgEntryOnBeforeExit>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnUnapplyCustLedgEntryOnAfterCreateGLEntriesForTotalAmounts>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnUnapplyVendLedgEntryOnAfterCreateGLEntriesForTotalAmounts>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnVendUnrealizedVATOnAfterVATPartCalculation>
1 : Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<OnBeforeCreateGenJnlDataExchLine>
1 : Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<OnBeforeInsertPmtExportDataJnlFromGenJnlLine>
1 : Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<OnBeforePaymentExport>
1 : Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<OnCheckGenJnlLine>
1 : Codeunit<Pmt Export Mgt Vend Ledg Entry>.PROCEDURE<OnBeforeCreateVendLedgerDataExchLine>
1 : Codeunit<Pmt Export Mgt Vend Ledg Entry>.PROCEDURE<OnBeforeInsertPmtExportDataJnlFromVendorLedgerEntry>
1 : Codeunit<Pmt Export Mgt Vend Ledg Entry>.PROCEDURE<OnBeforePaymentExportVendorLedgerEntry>
1 : Codeunit<Pmt Export Mgt Cust Ledg Entry>.PROCEDURE<OnBeforeCreateCustLedgerDataExchLine>
1 : Codeunit<Pmt Export Mgt Cust Ledg Entry>.PROCEDURE<OnBeforePaymentExportCustLedgerEntry>
1 : Codeunit<Payment Export Gen. Jnl Check>.PROCEDURE<OnPaymentExportGenJnlCheck>
1 : Codeunit<Pmt. Export Vend. Ledger Check>.PROCEDURE<OnCheckEmptyPmtInfoVendorLedgerEntry>
1 : Codeunit<Pmt. Export Vend. Ledger Check>.PROCEDURE<OnPmtExportVendorLedgerCheck>
1 : Codeunit<Pmt. Export Cust. Ledger Check>.PROCEDURE<OnPmtExportCustLedgerCheck>
1 : Codeunit<Read Data Exch. from File>.PROCEDURE<OnBeforeFileImport>
1 : Codeunit<Process Gen. Journal  Lines>.PROCEDURE<OnBeforeUpdateGenJnlLines>
1 : Codeunit<Match Bank Pmt. Appl.>.PROCEDURE<OnAfterMatchBankPayments>
1 : Codeunit<Match Bank Payments>.PROCEDURE<OnInitBankAccLedgerEntriesMatchingBufferSetFilter>
1 : Codeunit<Match Bank Payments>.PROCEDURE<OnInitCustomerLedgerEntriesMatchingBufferSetFilter>
1 : Codeunit<Match Bank Payments>.PROCEDURE<OnInitVendorLedgerEntriesMatchingBufferSetFilter>
1 : Codeunit<Exp. Pre-Mapping Gen. Jnl.>.PROCEDURE<OnBeforeInsertPaymentExoprtData>
1 : Codeunit<Update Currency Exchange Rates>.PROCEDURE<OnBeforeGetCurrencyExchangeData>
1 : Codeunit<Get Bank Stmt. Line Candidates>.PROCEDURE<OnBeforeTransferCandidatestoAppliedPmtEntries>
1 : Codeunit<Http Web Request Mgt.>.PROCEDURE<OnOverrideUrl>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterIncrementBatchName>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterMultiplyAmounts>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterPostAllocations>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterPostGenJnlLine>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterPostReversingLines>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterProcessBalanceOfLines>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterUpdateLineBalance>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeCheckBalance>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeCode>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeIfCheckBalance>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforePostAllocations>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforePostGenJnlLine>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeProcessLines>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeRaiseExceedLengthError>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeUpdateAndDeleteLines>
1 : Codeunit<Customer Mgt.>.PROCEDURE<SkipSettingFilter>
1 : Codeunit<CAL Test Runner Publisher>.PROCEDURE<OnSetSeed>
1 : Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnAfterInsertAllSalesInvLines>
1 : Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnAfterInsertSalesInvoiceLine>
1 : Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnAfterOnRun>
1 : Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnBeforeDeletionOfQuote>
1 : Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnBeforeInsertSalesInvoiceHeader>
1 : Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnBeforeInsertSalesInvoiceLine>
1 : Codeunit<Release Incoming Document>.PROCEDURE<OnAfterCreateDocFromIncomingDocFail>
1 : Codeunit<Release Incoming Document>.PROCEDURE<OnAfterCreateDocFromIncomingDocSuccess>
1 : Codeunit<Release Incoming Document>.PROCEDURE<OnAfterReleaseIncomingDoc>
1 : Codeunit<Send Incoming Document to OCR>.PROCEDURE<OnAfterIncomingDocReadyForOCR>
2 : Codeunit<Send Incoming Document to OCR>.PROCEDURE<OnAfterIncomingDocReceivedFromOCR>
1 : Codeunit<Send Incoming Document to OCR>.PROCEDURE<OnAfterIncomingDocSentToOCR>
1 : Codeunit<Telemetry Management>.PROCEDURE<OnBeforeTelemetryScheduleTask>
1 : Codeunit<Generate Master Data Telemetry>.PROCEDURE<OnMasterDataTelemetry>
1 : Codeunit<Generate Activity Telemetry>.PROCEDURE<OnActivityTelemetry>
1 : Codeunit<Batch Posting Print Mgt.>.PROCEDURE<OnBeforePrintDocument>
1 : Codeunit<Batch Processing Mgt.>.PROCEDURE<OnAfterBatchProcess>
1 : Codeunit<Batch Processing Mgt.>.PROCEDURE<OnAfterBatchProcessing>
1 : Codeunit<Batch Processing Mgt.>.PROCEDURE<OnBeforeBatchProcessing>
1 : Codeunit<Batch Processing Mgt.>.PROCEDURE<OnCustomProcessing>
1 : Codeunit<Batch Processing Mgt.>.PROCEDURE<OnVerifyRecord>
1 : Codeunit<Doc. Exch. Service Mgt.>.PROCEDURE<OnAfterIncomingDocReceivedFromDocExch>
1 : Codeunit<Read Data Exch. from Stream>.PROCEDURE<OnGetDataExchFileContentEvent>
1 : Codeunit<Doc. Exch. Serv.- Doc. Status>.PROCEDURE<OnDocExchStatusDrillDown>
1 : Codeunit<Role Center Notification Mgt.>.PROCEDURE<OnBeforeShowNotifications>
1 : Codeunit<Headline Management>.PROCEDURE<OnBeforeScheduleTask>
2 : Codeunit<Headline Management>.PROCEDURE<OnInvalidateHeadlines>
1 : Codeunit<Headline RC Business Manager>.PROCEDURE<OnComputeHeadlines>
1 : Codeunit<Headline RC Order Processor>.PROCEDURE<OnComputeHeadlines>
1 : Codeunit<Headline RC Accountant>.PROCEDURE<OnComputeHeadlines>
1 : Codeunit<Headline RC Project Manager>.PROCEDURE<OnComputeHeadlines>
1 : Codeunit<Headline RC Relationship Mgt.>.PROCEDURE<OnComputeHeadlines>
1 : Codeunit<Headline RC Administrator>.PROCEDURE<OnComputeHeadlines>
1 : Codeunit<Headline RC Team Member>.PROCEDURE<OnComputeHeadlines>
1 : Codeunit<Headline RC Prod. Planner>.PROCEDURE<OnComputeHeadlines>
1 : Codeunit<Headline RC Serv. Dispatcher>.PROCEDURE<OnComputeHeadlines>
1 : Codeunit<Workflow Setup>.PROCEDURE<OnAddWorkflowCategoriesToLibrary>
1 : Codeunit<Workflow Setup>.PROCEDURE<OnAfterInitWorkflowTemplates>
1 : Codeunit<Workflow Setup>.PROCEDURE<OnAfterInsertApprovalsTableRelations>
1 : Codeunit<Workflow Setup>.PROCEDURE<OnInsertWorkflowTemplates>
1 : Codeunit<Notification Management>.PROCEDURE<OnGetDocumentTypeAndNumber>
2 : Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<OnAfterNotificationSent>
1 : Codeunit<Workflow Event Handling>.PROCEDURE<OnAddWorkflowEventPredecessorsToLibrary>
1 : Codeunit<Workflow Event Handling>.PROCEDURE<OnAddWorkflowEventsToLibrary>
1 : Codeunit<Workflow Event Handling>.PROCEDURE<OnAddWorkflowTableRelationsToLibrary>
1 : Codeunit<Workflow Response Handling>.PROCEDURE<OnAddWorkflowResponsePredecessorsToLibrary>
1 : Codeunit<Workflow Response Handling>.PROCEDURE<OnAddWorkflowResponsesToLibrary>
1 : Codeunit<Workflow Response Handling>.PROCEDURE<OnCheckHasRequiredArguments>
1 : Codeunit<Workflow Response Handling>.PROCEDURE<OnCheckIsArgumentMandatory>
1 : Codeunit<Workflow Response Handling>.PROCEDURE<OnExecuteWorkflowResponse>
1 : Codeunit<Workflow Response Handling>.PROCEDURE<OnOpenDocument>
1 : Codeunit<Workflow Response Handling>.PROCEDURE<OnReleaseDocument>
3 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnApproveApprovalRequest>
3 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelCustomerApprovalRequest>
2 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelGeneralJournalBatchApprovalRequest>
2 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelGeneralJournalLineApprovalRequest>
2 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelIncomingDocApprovalRequest>
3 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelItemApprovalRequest>
12 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelPurchaseApprovalRequest>
12 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelSalesApprovalRequest>
3 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelVendorApprovalRequest>
1 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnDelegateApprovalRequest>
2 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnDeleteRecordInApprovalRequest>
1 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnPopulateApprovalEntryArgument>
1 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnRejectApprovalRequest>
5 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnRenameRecordInApprovalRequest>
2 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendCustomerForApproval>
1 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendGeneralJournalBatchForApproval>
1 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendGeneralJournalLineForApproval>
3 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendIncomingDocForApproval>
2 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendItemForApproval>
12 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendPurchaseDocForApproval>
12 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendSalesDocForApproval>
2 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendVendorForApproval>
1 : Codeunit<Workflow Webhook Management>.PROCEDURE<OnCancelWorkflow>
1 : Codeunit<Workflow Webhook Management>.PROCEDURE<OnContinueWorkflow>
1 : Codeunit<Workflow Webhook Management>.PROCEDURE<OnFindTaskSchedulerAllowed>
1 : Codeunit<Workflow Webhook Management>.PROCEDURE<OnRejectWorkflow>
1 : Codeunit<Workflow Webhook Notification>.PROCEDURE<OnPostNotificationRequest>
1 : Codeunit<Workflow Webhook Notify Task>.PROCEDURE<OnFetchWorkflowWebhookNotificationInitParams>
1 : Codeunit<Office Management>.PROCEDURE<OnGetExternalHandlerCodeunit>
1 : Codeunit<Office Host Management>.PROCEDURE<OnCloseCurrentPage>
1 : Codeunit<Office Host Management>.PROCEDURE<OnEmailHasAttachments>
1 : Codeunit<Office Host Management>.PROCEDURE<OnGetEmailAndAttachments>
1 : Codeunit<Office Host Management>.PROCEDURE<OnGetEmailBody>
1 : Codeunit<Office Host Management>.PROCEDURE<OnGetFinancialsDocument>
1 : Codeunit<Office Host Management>.PROCEDURE<OnGetHostType>
1 : Codeunit<Office Host Management>.PROCEDURE<OnGetTempOfficeAddinContext>
1 : Codeunit<Office Host Management>.PROCEDURE<OnInitializeContext>
1 : Codeunit<Office Host Management>.PROCEDURE<OnInitializeExchangeObject>
1 : Codeunit<Office Host Management>.PROCEDURE<OnInitializeHost>
1 : Codeunit<Office Host Management>.PROCEDURE<OnInvokeExtension>
1 : Codeunit<Office Host Management>.PROCEDURE<OnIsAvailable>
1 : Codeunit<Office Host Management>.PROCEDURE<OnIsHostInitialized>
1 : Codeunit<Office Host Management>.PROCEDURE<OnSendToOCR>
1 : Codeunit<Office Document Handler>.PROCEDURE<OnCloseSuggestedLineItemsPage>
1 : Codeunit<Office Document Handler>.PROCEDURE<OnGenerateLinesFromText>
4 : Codeunit<Add-in Manifest Management>.PROCEDURE<CreateDefaultAddins>
1 : Codeunit<Add-in Manifest Management>.PROCEDURE<GetAddin>
1 : Codeunit<Add-in Manifest Management>.PROCEDURE<GetAddinVersion>
1 : Codeunit<Add-in Manifest Management>.PROCEDURE<GetManifestCodeunit>
1 : Codeunit<Add-in Manifest Management>.PROCEDURE<OnGenerateManifest>
1 : Codeunit<Payroll Management>.PROCEDURE<OnImportPayroll>
3 : Codeunit<Payroll Management>.PROCEDURE<OnRegisterPayrollService>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnAfterFilterReversalEntry>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnAfterPostReverse>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnApplyCustLedgEntryByReversalOnBeforeInsertDtldCustLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnApplyEmplLedgEntryByReversalOnBeforeInsertDtldEmplLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnApplyVendLedgEntryByReversalOnBeforeInsertDtldVendLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnBeforeReverse>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseBankAccLedgEntryOnBeforeInsert>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseCustLedgEntryOnBeforeInsertCustLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseCustLedgEntryOnBeforeInsertDtldCustLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseEmplLedgEntryOnBeforeInsertDtldEmplLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseEmplLedgEntryOnBeforeInsertEmplLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseGLEntryOnBeforeInsertGLEntry>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseVATEntryOnBeforeInsert>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseVendLedgEntryOnBeforeInsertDtldVendLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseVendLedgEntryOnBeforeInsertVendLedgEntry>
1 : Codeunit<Deferral Utilities>.PROCEDURE<OnBeforePostedDeferralHeaderInsert>
1 : Codeunit<Deferral Utilities>.PROCEDURE<OnBeforePostedDeferralLineInsert>
3 : Codeunit<Data Classification Mgt.>.PROCEDURE<OnGetPrivacyMasterTables>
1 : Codeunit<Data Classification Mgt.>.PROCEDURE<OnOpenExcelSheet>
1 : Codeunit<Data Classification Mgt.>.PROCEDURE<OnUploadExcelSheet>
1 : Codeunit<Reversal-Post>.PROCEDURE<OnBeforeGLRegPostingReportPrint>
3 : Codeunit<Data Migration Mgt.>.PROCEDURE<OnAfterMigrationFinished>
1 : Codeunit<Data Migration Mgt.>.PROCEDURE<OnBeforeMigrationStarted>
1 : Codeunit<Data Migration Mgt.>.PROCEDURE<OnBeforeStartMigration>
1 : Codeunit<Assisted Company Setup>.PROCEDURE<OnBeforeScheduleTask>
1 : Codeunit<Data Migration Notifier>.PROCEDURE<SkipShowingCustomerContactCreationNotification>
1 : Codeunit<Encrypted Key/Value Management>.PROCEDURE<OnCleanUpEvent>
1 : Codeunit<Excel Data Migrator>.PROCEDURE<OnDownloadTemplate>
1 : Codeunit<Excel Data Migrator>.PROCEDURE<OnUploadFile>
2 : Codeunit<Sandbox Deploymt. Cleanup>.PROCEDURE<OnClearConfiguration>
1 : Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<OnAfterBindSubscription>
1 : Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<OnAfterIsActive>
1 : Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<OnAfterUnbindSubscription>
1 : Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<OnBeforeThrowError>
1 : Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<OnRunPreview>
1 : Codeunit<Company-Initialize>.PROCEDURE<OnCompanyInitialize>
1 : Codeunit<Posting Preview Event Handler>.PROCEDURE<OnAfterFillDocumentEntry>
1 : Codeunit<Posting Preview Event Handler>.PROCEDURE<OnAfterShowEntries>
1 : Codeunit<ML Prediction Management>.PROCEDURE<OnBeforeEvaluate>
1 : Codeunit<ML Prediction Management>.PROCEDURE<OnBeforePredict>
1 : Codeunit<ML Prediction Management>.PROCEDURE<OnBeforeTrain>
1 : Codeunit<Image Analysis Management>.PROCEDURE<OnAfterImageAnalysis>
1 : Codeunit<Image Analysis Management>.PROCEDURE<OnBeforeImageAnalysis>
1 : Codeunit<Item Jnl.-Check Line>.PROCEDURE<OnAfterAssignInvtPickRequired>
1 : Codeunit<Item Jnl.-Check Line>.PROCEDURE<OnAfterAssignInvtPutAwayRequired>
1 : Codeunit<Item Jnl.-Check Line>.PROCEDURE<OnAfterCheckItemJnlLine>
2 : Codeunit<O365 Sales Management>.PROCEDURE<OnGetQuickBooksVisible>
1 : Codeunit<Res. Jnl.-Check Line>.PROCEDURE<OnAfterRunCheck>
1 : Codeunit<O365 Sales Background Setup>.PROCEDURE<OnAfterGraphSyncModified>
1 : Codeunit<O365 HTML Templ. Mgt.>.PROCEDURE<OnResizeCompanyLogo>
1 : Codeunit<Res. Jnl.-Post Line>.PROCEDURE<OnAfterPostResJnlLine>
1 : Codeunit<Res. Jnl.-Post Line>.PROCEDURE<OnBeforeResLedgEntryInsert>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterCalcPosShares>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterCalcPurchCorrShares>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterCheckItemTrackingInfo>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInitItemLedgEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInitValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertCapLedgEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertCapValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertCorrItemLedgEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertCorrValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertItemLedgEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertOHValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterItemValuePosting>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterPostItemJnlLine>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterSetupTempSplitItemJnlLineSetQty>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeApplyItemLedgEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeCheckItemTrackingInfo>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertCapLedgEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertCapValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertCorrItemLedgEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertCorrValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertItemLedgEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertOHValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertPhysInvtLedgEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertSetupTempSplitItemJnlLine>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertTransferEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertVarValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforePostFlushedConsumpItemJnlLine>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforePostItemJnlLine>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeSetupSplitJnlLine>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnCheckPostingCostToGL>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnGetValuationDateOnBeforeFindOldValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnPostOutputOnBeforeProdOrderRtngLineModify>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnSetupSplitJnlLineOnBeforeSplitTempLines>
1 : Codeunit<Resource-Find Cost>.PROCEDURE<OnAfterFindResUnitCost>
1 : Codeunit<Resource-Find Price>.PROCEDURE<OnAfterFindResPrice>
1 : Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnAfterRun>
1 : Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnBeforeFindCustApply>
1 : Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnBeforeFindVendApply>
1 : Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnBeforeRun>
1 : Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<OnAfterPostApplyCustLedgEntry>
1 : Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<OnAfterPostUnapplyCustLedgEntry>
1 : Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<OnBeforePostApplyCustLedgEntry>
1 : Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<OnBeforePostUnapplyCustLedgEntry>
1 : Codeunit<VendEntry-Apply Posted Entries>.PROCEDURE<OnBeforePostApplyVendLedgEntry>
1 : Codeunit<VendEntry-Apply Posted Entries>.PROCEDURE<OnBeforePostUnapplyVendLedgEntry>
1 : Codeunit<Document-Print>.PROCEDURE<OnBeforeDoPrintPurchHeader>
1 : Codeunit<Document-Print>.PROCEDURE<OnBeforeDoPrintSalesHeader>
1 : Codeunit<Document-Print>.PROCEDURE<OnBeforePrintAsmHeader>
1 : Codeunit<Document-Print>.PROCEDURE<OnBeforePrintBankAccStmt>
1 : Codeunit<Document-Print>.PROCEDURE<OnBeforePrintCheck>
1 : Codeunit<Document-Print>.PROCEDURE<OnBeforePrintProformaSalesInvoice>
1 : Codeunit<Document-Print>.PROCEDURE<OnBeforePrintPurchHeaderArch>
1 : Codeunit<Document-Print>.PROCEDURE<OnBeforePrintSalesHeaderArch>
1 : Codeunit<Document-Print>.PROCEDURE<OnBeforePrintSalesOrder>
1 : Codeunit<Document-Print>.PROCEDURE<OnBeforePrintServiceContract>
1 : Codeunit<Document-Print>.PROCEDURE<OnBeforePrintServiceHeader>
1 : Codeunit<Document-Print>.PROCEDURE<OnBeforePrintTransferHeader>
1 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnAfterCheckJnlLine>
1 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnAfterCheckLines>
1 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnAfterItemJnlPostSumLine>
1 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnAfterPostJnlLines>
2 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnAfterPostWhseJnlLine>
1 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnBeforeCheckLines>
1 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnBeforeIncrBatchName>
1 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnBeforeRaiseExceedLengthError>
1 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnBeforeUpdateDeleteLines>
1 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnPostLinesBeforePostWhseJnlLine>
1 : Codeunit<GenJnlManagement>.PROCEDURE<OnAfterSetName>
1 : Codeunit<GenJnlManagement>.PROCEDURE<OnBeforeLookupName>
1 : Codeunit<GenJnlManagement>.PROCEDURE<OnTemplateSelectionSetFilter>
1 : Codeunit<Gen. Jnl.-Post+Print>.PROCEDURE<OnBeforeGLRegPostingReportPrint>
1 : Codeunit<Gen. Jnl.-Post+Print>.PROCEDURE<OnBeforePostJournalBatch>
1 : Codeunit<Gen. Jnl.-B.Post+Print>.PROCEDURE<OnBeforeGLRegPostingReportPrint>
1 : Codeunit<ItemJnlManagement>.PROCEDURE<OnBeforeLookupName>
1 : Codeunit<ItemJnlManagement>.PROCEDURE<OnTemplateSelectionSetFilter>
1 : Codeunit<Document-Mailing>.PROCEDURE<OnAfterEmailSentSuccesfully>
1 : Codeunit<Document-Mailing>.PROCEDURE<OnBeforeSendEmail>
8 : Codeunit<Cust-Check Cr. Limit>.PROCEDURE<OnNewCheckRemoveCustomerNotifications>
1 : Codeunit<Sales-Printed>.PROCEDURE<OnBeforeModify>
1 : Codeunit<Sales Shpt.-Printed>.PROCEDURE<OnBeforeModify>
1 : Codeunit<Sales Inv.-Printed>.PROCEDURE<OnBeforeModify>
1 : Codeunit<Sales Cr. Memo-Printed>.PROCEDURE<OnBeforeModify>
1 : Codeunit<Purch.Header-Printed>.PROCEDURE<OnBeforeModify>
1 : Codeunit<Purch.Rcpt.-Printed>.PROCEDURE<OnBeforeModify>
1 : Codeunit<Purch. Inv.-Printed>.PROCEDURE<OnBeforeModify>
1 : Codeunit<PurchCrMemo-Printed>.PROCEDURE<OnBeforeModify>
1 : Codeunit<Purch.HeaderArch-Printed>.PROCEDURE<OnBeforeModify>
1 : Codeunit<SalesCount-PrintedArch>.PROCEDURE<OnBeforeModify>
1 : Codeunit<ReqJnlManagement>.PROCEDURE<OnAfterSetUpNewLine>
1 : Codeunit<ReqJnlManagement>.PROCEDURE<OnBeforeLookupName>
1 : Codeunit<ReqJnlManagement>.PROCEDURE<OnBeforeOpenJnl>
1 : Codeunit<ReqJnlManagement>.PROCEDURE<OnTemplateSelectionSetFilter>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterCarryOutReqLineAction>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterCheckReqWkshLine>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterFinalizeOrderHeader>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterInsertPurchOrderHeader>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterInsertPurchOrderLine>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterPurchOrderLineInsert>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterReserveBindingOrderToPurch>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterSet>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnBeforeCarryOutBatchActionCode>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnBeforeCarryOutReqLineAction>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnBeforeCode>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnBeforePurchOrderLineInsert>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnBeforePurchOrderLineValidateNo>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnCheckFurtherReplenishmentSystems>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnCheckNewNameNeccessary>
1 : Codeunit<VAT Entry - Edit>.PROCEDURE<OnBeforeVATEntryModify>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnAfterCalcItemPlanningFields>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnAfterCalculateNeed>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnAfterCalculateProjAvailableBalance>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromAsmHeader>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromAsmLine>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromItem>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromItemJnlLine>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromPlanningComp>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromProdOrderComp>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromProdOrderLine>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromPurchLine>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromReqLine>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromSalesLine>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromServLine>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromTransLine>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromWhseActivLine>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromWhseRcptLine>
1 : Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveBankAccEntries>
1 : Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveCashFlowEntries>
1 : Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveCustEntries>
1 : Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveDocRelatedEntries>
1 : Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveGLEntries>
1 : Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveItemEntries>
1 : Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveJobEntries>
1 : Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveResEntries>
1 : Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveServContractLedgerEntries>
1 : Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveServiceCostLedgerEntries>
1 : Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveServiceItemLedgerEntries>
1 : Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveVendorEntries>
1 : Codeunit<PostSales-Delete>.PROCEDURE<OnAfterDeleteHeader>
1 : Codeunit<PostSales-Delete>.PROCEDURE<OnAfterInitDeleteHeader>
1 : Codeunit<PostSales-Delete>.PROCEDURE<OnBeforeInitDeleteHeader>
1 : Codeunit<PostPurch-Delete>.PROCEDURE<OnAfterDeleteHeader>
1 : Codeunit<PostPurch-Delete>.PROCEDURE<OnBeforeDeletePurchCrMemoLines>
1 : Codeunit<PostPurch-Delete>.PROCEDURE<OnBeforeDeletePurchInvLines>
1 : Codeunit<PostPurch-Delete>.PROCEDURE<OnBeforeDeletePurchRcptLines>
1 : Codeunit<PostPurch-Delete>.PROCEDURE<OnBeforeDeletePurchShptLines>
1 : Codeunit<PostPurch-Delete>.PROCEDURE<OnBeforeInitDeleteHeader>
1 : Codeunit<Format Address>.PROCEDURE<OnAfterFormatAddress>
1 : Codeunit<Format Address>.PROCEDURE<OnBeforeContactAddrAlt>
1 : Codeunit<Format Address>.PROCEDURE<OnBeforeCustomer>
1 : Codeunit<Format Address>.PROCEDURE<OnBeforeFormatAddress>
1 : Codeunit<Format Address>.PROCEDURE<OnBeforeSalesCrMemoBillTo>
1 : Codeunit<Format Address>.PROCEDURE<OnBeforeSalesHeaderBillTo>
1 : Codeunit<Format Address>.PROCEDURE<OnBeforeSalesInvBillTo>
1 : Codeunit<Format Address>.PROCEDURE<OnBeforeVendor>
1 : Codeunit<Exchange Acc. G/L Journal Line>.PROCEDURE<OnAfterOnRun>
1 : Codeunit<Exchange Acc. G/L Journal Line>.PROCEDURE<OnBeforeOnRun>
1 : Codeunit<CheckManagement>.PROCEDURE<OnAfterFinancialVoidCheck>
1 : Codeunit<CheckManagement>.PROCEDURE<OnAfterVoidCheck>
1 : Codeunit<CheckManagement>.PROCEDURE<OnBeforeFinancialVoidCheck>
1 : Codeunit<CheckManagement>.PROCEDURE<OnBeforeVoidCheck>
1 : Codeunit<CheckManagement>.PROCEDURE<OnBeforeVoidCheckGenJnlLine2Modify>
1 : Codeunit<Bank Acc. Reconciliation Post>.PROCEDURE<OnBeforeBankAccStmtInsert>
1 : Codeunit<Bank Acc. Reconciliation Post>.PROCEDURE<OnBeforePostedPmtReconInsert>
1 : Codeunit<Bank Acc. Reconciliation Post>.PROCEDURE<OnPostPaymentApplicationsOnBeforeValidateApplyRequirements>
1 : Codeunit<Transfer Extended Text>.PROCEDURE<OnBeforeToPurchLineInsert>
1 : Codeunit<Transfer Extended Text>.PROCEDURE<OnBeforeToSalesLineInsert>
1 : Codeunit<Transfer Extended Text>.PROCEDURE<OnBeforeToServiceLineInsert>
1 : Codeunit<Shipment Header - Edit>.PROCEDURE<OnBeforeSalesShptHeaderModify>
1 : Codeunit<Reminder-Make>.PROCEDURE<OnAfterMakeReminder>
1 : Codeunit<Reminder-Issue>.PROCEDURE<OnAfterIssueReminder>
1 : Codeunit<Reminder-Issue>.PROCEDURE<OnBeforeIssueReminder>
1 : Codeunit<FinChrgMemo-Issue>.PROCEDURE<OnAfterInitGenJnlLine>
1 : Codeunit<FinChrgMemo-Issue>.PROCEDURE<OnAfterIssueFinChargeMemo>
1 : Codeunit<FinChrgMemo-Issue>.PROCEDURE<OnBeforeIssueFinChargeMemo>
1 : Codeunit<NoSeriesManagement>.PROCEDURE<OnAfterGetNextNo3>
1 : Codeunit<Mail>.PROCEDURE<OnBeforeCreateMessage>
1 : Codeunit<Mail>.PROCEDURE<OnGetEmailAddressFromActiveDirectory>
1 : Codeunit<ClientTypeManagement>.PROCEDURE<OnAfterGetCurrentClientType>
1 : Codeunit<LogInManagement>.PROCEDURE<OnAfterCompanyClose>
1 : Codeunit<LogInManagement>.PROCEDURE<OnAfterCompanyOpen>
1 : Codeunit<LogInManagement>.PROCEDURE<OnAfterLogInEnd>
1 : Codeunit<LogInManagement>.PROCEDURE<OnAfterLogInStart>
1 : Codeunit<LogInManagement>.PROCEDURE<OnBeforeCompanyClose>
1 : Codeunit<LogInManagement>.PROCEDURE<OnBeforeCompanyOpen>
1 : Codeunit<SMTP Mail>.PROCEDURE<OnBeforeAddBCC>
1 : Codeunit<SMTP Mail>.PROCEDURE<OnBeforeAddCC>
1 : Codeunit<SMTP Mail>.PROCEDURE<OnBeforeAddRecipients>
1 : Codeunit<SMTP Mail>.PROCEDURE<OnBeforeCreateMessage>
1 : Codeunit<SMTP Mail>.PROCEDURE<OnBeforeTrySend>
1 : Codeunit<Graph Mail>.PROCEDURE<OnGetGraphDomain>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnAfterSetupObjectNoList>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnBeforeCheckDimValuePosting>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnBeforeGetDefaultDimID>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnCheckDimValueAllowed>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnCheckICDimValueAllowed>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnGetRecDefaultDimID>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnTypeToTableID2>
1 : Codeunit<TextManagement>.PROCEDURE<OnAfterMakeDateFilter>
1 : Codeunit<TextManagement>.PROCEDURE<OnAfterMakeDateTimeFilter>
1 : Codeunit<TextManagement>.PROCEDURE<OnAfterMakeTextFilter>
1 : Codeunit<TextManagement>.PROCEDURE<OnAfterMakeTimeFilter>
1 : Codeunit<TextManagement>.PROCEDURE<OnBeforeMakeTextFilter>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnAfterManualReleaseSalesDoc>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnAfterManualReOpenSalesDoc>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnAfterReleaseATOs>
2 : Codeunit<Release Sales Document>.PROCEDURE<OnAfterReleaseSalesDoc>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnAfterReopenSalesDoc>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnAfterUpdateSalesDocLines>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnBeforeCalcInvDiscount>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnBeforeManualReleaseSalesDoc>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnBeforeManualReOpenSalesDoc>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnBeforeModifySalesDoc>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnBeforePerformManualRelease>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnBeforeReleaseSalesDoc>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnBeforeReopenSalesDoc>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnCodeOnAfterCheck>
1 : Codeunit<Release Purchase Document>.PROCEDURE<OnAfterManualReleasePurchaseDoc>
1 : Codeunit<Release Purchase Document>.PROCEDURE<OnAfterManualReopenPurchaseDoc>
2 : Codeunit<Release Purchase Document>.PROCEDURE<OnAfterReleasePurchaseDoc>
1 : Codeunit<Release Purchase Document>.PROCEDURE<OnAfterReopenPurchaseDoc>
1 : Codeunit<Release Purchase Document>.PROCEDURE<OnBeforeCalcInvDiscount>
1 : Codeunit<Release Purchase Document>.PROCEDURE<OnBeforeManualReleasePurchaseDoc>
1 : Codeunit<Release Purchase Document>.PROCEDURE<OnBeforeManualReopenPurchaseDoc>
1 : Codeunit<Release Purchase Document>.PROCEDURE<OnBeforeModifyPurchDoc>
1 : Codeunit<Release Purchase Document>.PROCEDURE<OnBeforePerformManualRelease>
1 : Codeunit<Release Purchase Document>.PROCEDURE<OnBeforeReleasePurchaseDoc>
1 : Codeunit<Release Purchase Document>.PROCEDURE<OnBeforeReopenPurchaseDoc>
1 : Codeunit<Release Purchase Document>.PROCEDURE<OnCodeOnAfterCheck>
1 : Codeunit<Release Service Document>.PROCEDURE<OnAfterReleaseServiceDoc>
1 : Codeunit<Release Service Document>.PROCEDURE<OnAfterReopenServiceDoc>
1 : Codeunit<Release Service Document>.PROCEDURE<OnBeforeReleaseServiceDoc>
1 : Codeunit<Release Service Document>.PROCEDURE<OnBeforeReopenServiceDoc>
1 : Codeunit<Release Service Document>.PROCEDURE<OnCodeOnAfterCheck>
1 : Codeunit<User Management>.PROCEDURE<OnAfterRenameRecord>
1 : Codeunit<File Management>.PROCEDURE<OnAfterGetToFilterTextSetOutExt>
1 : Codeunit<CaptionManagement>.PROCEDURE<OnAfterCaptionClassTranslate>
1 : Codeunit<Payment Tolerance Management>.PROCEDURE<OnBeforeCalcRemainingPmtDisc>
1 : Codeunit<Payment Tolerance Management>.PROCEDURE<OnBeforeCheckCalcPmtDisc>
5 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<ICOutboxTransactionCreated>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterCreatePurchDocument>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterCreatePurchLines>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterCreateSalesLines>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterForwardToOutBoxPurchDoc>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterForwardToOutBoxSalesDoc>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterHandledICOutboxPurchHdrInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterHandledICOutboxSalesHdrInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeICOutboxTransactionCreatedPurchDocTrans>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeICOutboxTransactionCreatedSalesCrMemoTrans>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeICOutboxTransactionCreatedSalesDocTrans>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeICOutboxTransactionCreatedSalesInvTrans>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeInsertGenJnlLine>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnRecreateInboxTransactionOnBeforeDeletePurchHeader>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnRecreateInboxTransactionOnBeforeDeleteSalesHeader>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnRecreateOutboxTransactionOnBeforeDeletePurchHeader>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnRecreateOutboxTransactionOnBeforeDeleteSalesHeader>
1 : Codeunit<Consolidate>.PROCEDURE<OnBeforeGenJnlPostLine>
1 : Codeunit<Acc. Sched. BarChart DrillDown>.PROCEDURE<OnAfterAccSchedManagementSetGLAccColumnFilters>
1 : Codeunit<Acc. Sched. BarChart DrillDown>.PROCEDURE<OnAfterAccSchedManagementSetGLAccRowFilters>
1 : Codeunit<ReportManagement>.PROCEDURE<OnAfterGetPaperTrayForReport>
1 : Codeunit<ReportManagement>.PROCEDURE<OnAfterGetPrinterName>
1 : Codeunit<ReportManagement>.PROCEDURE<OnAfterHasCustomLayout>
1 : Codeunit<ReportManagement>.PROCEDURE<OnAfterSubstituteReport>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterCalcVATAmountLines>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterCheckPrepmtDoc>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterFillInvLineBuffer>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterInsertInvoiceRounding>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterPostBalancingEntry>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterPostCustomerEntry>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterPostPrepayments>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterPostPrepmtInvLineBuffer>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterRoundAmounts>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterSalesCrMemoHeaderInsert>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterSalesCrMemoLineInsert>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterSalesInvHeaderInsert>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterSalesInvLineInsert>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterUpdatePostedSalesDocument>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterUpdateVATOnLines>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeCreditMemo>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeInvoice>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforePostBalancingEntry>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforePostCustomerEntry>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforePostPrepayments>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforePostPrepmtInvLineBuffer>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeSalesCrMemoHeaderInsert>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeSalesCrMemoLineInsert>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeSalesInvHeaderInsert>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeSalesInvLineInsert>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterCalcVATAmountLines>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterCheckPrepmtDoc>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterFillInvLineBuffer>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterInsertInvoiceRounding>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPostBalancingEntry>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPostPrepayments>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPostPrepmtInvLineBuffer>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPostVendorEntry>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPurchCrMemoHeaderInsert>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPurchCrMemoLineInsert>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPurchInvHeaderInsert>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPurchInvLineInsert>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterRoundAmounts>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterUpdatePostedPurchDocument>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterUpdateVATOnLines>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforeCreditMemo>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforeInvoice>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePostBalancingEntry>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePostPrepayments>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePostPrepmtInvLineBuffer>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePostVendorEntry>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePurchCrMemoHeaderInsert>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePurchCrMemoLineInsert>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePurchInvHeaderInsert>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePurchInvLineInsert>
1 : Codeunit<Job Queue Dispatcher>.PROCEDURE<OnAfterHandleRequest>
1 : Codeunit<Job Queue Dispatcher>.PROCEDURE<OnBeforeHandleRequest>
1 : Codeunit<Job Queue Dispatcher>.PROCEDURE<OnBeforeWaitForOthersWithSameCategory>
1 : Codeunit<Job Queue Start Codeunit>.PROCEDURE<OnAfterRun>
1 : Codeunit<Job Queue Start Codeunit>.PROCEDURE<OnBeforeRunReport>
1 : Codeunit<AutoFormatManagement>.PROCEDURE<OnAfterAutoFormatTranslate>
1 : Codeunit<Job Queue Error Handler>.PROCEDURE<OnAfterLogError>
1 : Codeunit<Job Queue Error Handler>.PROCEDURE<OnBeforeLogError>
1 : Codeunit<Job Queue - Enqueue>.PROCEDURE<OnAfterEnqueueJobQueueEntry>
1 : Codeunit<Job Queue - Enqueue>.PROCEDURE<OnBeforeJobQueueScheduleTask>
1 : Codeunit<Job Queue - Send Notification>.PROCEDURE<OnAfterRun>
1 : Codeunit<Change Global Dimensions>.PROCEDURE<OnAfterGetObjectNoList>
1 : Codeunit<Change Global Dimensions>.PROCEDURE<OnBeforeScheduleTask>
1 : Codeunit<Change Global Dimensions>.PROCEDURE<OnCountingActiveSessions>
1 : Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterGetDatabaseTableTriggerSetup>
1 : Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterGetGlobalTableTriggerMask>
1 : Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnDatabaseDelete>
1 : Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnDatabaseInsert>
1 : Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnDatabaseModify>
1 : Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnDatabaseRename>
1 : Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnGlobalDelete>
1 : Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnGlobalInsert>
1 : Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnGlobalModify>
1 : Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnGlobalRename>
1 : Codeunit<GlobalTriggerManagement>.PROCEDURE<OnBeforeOnDatabaseDelete>
1 : Codeunit<GlobalTriggerManagement>.PROCEDURE<OnBeforeOnDatabaseInsert>
1 : Codeunit<GlobalTriggerManagement>.PROCEDURE<OnBeforeOnDatabaseModify>
1 : Codeunit<GlobalTriggerManagement>.PROCEDURE<OnBeforeOnDatabaseRename>
1 : Codeunit<SaaS Log In Management>.PROCEDURE<OnSuppressApprovalForTrial>
1 : Codeunit<WordManagement>.PROCEDURE<OnAddFieldsToMergeSource>
1 : Codeunit<WordManagement>.PROCEDURE<OnBeforeCheckCanRunWord>
1 : Codeunit<WordManagement>.PROCEDURE<OnCreateHeaderAddFields>
1 : Codeunit<CustVendBank-Update>.PROCEDURE<OnAfterUpdateBankAccount>
1 : Codeunit<CustVendBank-Update>.PROCEDURE<OnAfterUpdateCustomer>
1 : Codeunit<CustVendBank-Update>.PROCEDURE<OnAfterUpdateVendor>
2 : Codeunit<CustCont-Update>.PROCEDURE<OnAfterTransferFieldsFromCustToCont>
1 : Codeunit<SegCriteriaManagement>.PROCEDURE<OnAfterSegCriteriaFilter>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnAfterAutoArchivePurchDocument>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnAfterAutoArchiveSalesDocument>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnAfterPurchHeaderArchiveInsert>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnAfterRestoreSalesLine>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnAfterSalesHeaderArchiveInsert>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnAfterStorePurchLineArchive>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnAfterStoreSalesLineArchive>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnAfterTransferFromArchToSalesHeader>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnAfterTransferFromArchToSalesLine>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnBeforeCheckIfDocumentIsPartiallyPosted>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnBeforePurchHeaderArchiveInsert>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnBeforeRestoreSalesDocument>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnBeforeSalesHeaderArchiveInsert>
1 : Codeunit<Integration Management>.PROCEDURE<OnDeleteIntegrationRecord>
1 : Codeunit<Integration Management>.PROCEDURE<OnGetIntegrationActivated>
1 : Codeunit<Integration Management>.PROCEDURE<OnGetIntegrationDisabled>
1 : Codeunit<Integration Management>.PROCEDURE<OnGetPredefinedIdValue>
1 : Codeunit<Integration Management>.PROCEDURE<OnIsIntegrationRecord>
1 : Codeunit<Integration Management>.PROCEDURE<OnIsIntegrationRecordChild>
2 : Codeunit<Integration Management>.PROCEDURE<OnUpdateReferencedIdField>
2 : Codeunit<Integration Management>.PROCEDURE<OnUpdateRelatedRecordIdFields>
1 : Codeunit<Exchange Web Services Server>.PROCEDURE<OnBeforeSaveHTMLEmailToInbox>
1 : Codeunit<Exchange Web Services Server>.PROCEDURE<OnBeforeSendEmailMessageWithAttachment>
1 : Codeunit<CRM Integration Management>.PROCEDURE<OnAfterCRMIntegrationEnabled>
1 : Codeunit<Integration Record Synch.>.PROCEDURE<OnTransferFieldData>
2 : Codeunit<CRM Integration Table Synch.>.PROCEDURE<OnQueryPostFilterIgnoreRecord>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnAfterApplyRecordTemplate>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnAfterInsertRecord>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnAfterModifyRecord>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnAfterTransferRecordFields>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnAfterUnchangedRecordHandled>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnBeforeApplyRecordTemplate>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnBeforeInsertRecord>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnBeforeModifyRecord>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnBeforeTransferRecordFields>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnErrorWhenModifyingRecord>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnFindUncoupledDestinationRecord>
1 : Codeunit<Integration Rec. Delete Invoke>.PROCEDURE<OnAfterDeleteRecord>
1 : Codeunit<Integration Rec. Delete Invoke>.PROCEDURE<OnBeforeDeleteRecord>
1 : Codeunit<Available Management>.PROCEDURE<OnAfterCalcAvailableQty>
1 : Codeunit<Available Management>.PROCEDURE<OnAfterCalcExpectedQty>
1 : Codeunit<AddOnIntegrManagement>.PROCEDURE<OnBeforeCheckReceiptOrderStatus>
1 : Codeunit<Output Jnl.-Expl. Route>.PROCEDURE<OnAfterInsertItemJnlLine>
1 : Codeunit<Output Jnl.-Expl. Route>.PROCEDURE<OnBeforeDeleteItemJnlLine>
1 : Codeunit<Output Jnl.-Expl. Route>.PROCEDURE<OnBeforeInsertOutputJnlLineWithoutRtngLine>
1 : Codeunit<Output Jnl.-Expl. Route>.PROCEDURE<OnBeforeInsertOutputJnlLineWithRtngLine>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnAfterChangeStatusOnProdOrder>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnAfterToProdOrderLineModify>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnAfterTransProdOrder>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnAfterTransProdOrderComp>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnAfterTransProdOrderLines>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnBeforeChangeStatusOnProdOrder>
2 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnBeforePostFlushItemJnlLine>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnCopyFromProdOrder>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnCopyFromProdOrderCapacityNeed>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnCopyFromProdOrderComp>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnCopyFromProdOrderLine>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnCopyFromProdOrderRoutingLine>
1 : Codeunit<Graph Webhook Sync To NAV>.PROCEDURE<OnFindWebhookSubscription>
1 : Codeunit<Graph Subscription Management>.PROCEDURE<OnBeforeAddOrUpdateGraphSubscriptions>
1 : Codeunit<Graph Subscription Management>.PROCEDURE<OnBeforeRunGraphSyncBackgroundSession>
1 : Codeunit<Graph Subscription Management>.PROCEDURE<OnCanSyncOnInsert>
1 : Codeunit<Graph Subscription Management>.PROCEDURE<OnGetSourceRecordRef>
4 : Codeunit<Graph Subscription Management>.PROCEDURE<OnScheduleSyncTask>
6 : Codeunit<Graph Integration Table Sync>.PROCEDURE<OnBeforeSynchronizationStart>
1 : Codeunit<Graph Sync. Runner>.PROCEDURE<OnAfterRunDeltaSyncForEntity>
1 : Codeunit<Graph Sync. Runner>.PROCEDURE<OnAfterRunFullSyncForEntity>
1 : Codeunit<Graph Sync. Runner>.PROCEDURE<OnCheckAuxiliarySyncEnabled>
1 : Codeunit<Graph Sync. Runner>.PROCEDURE<OnRunGraphDeltaSync>
1 : Codeunit<Graph Sync. Runner>.PROCEDURE<OnRunGraphFullSync>
1 : Codeunit<Graph Sync. Runner>.PROCEDURE<OnSyncSynchronouslyCannotStartSession>
1 : Codeunit<Graph Sync. Runner>.PROCEDURE<OnSyncSynchronouslyTimeout>
1 : Codeunit<Graph Data Setup>.PROCEDURE<OnAddIntegrationMapping>
1 : Codeunit<Graph Data Setup>.PROCEDURE<OnCheckCanSyncRecord>
1 : Codeunit<Graph Data Setup>.PROCEDURE<OnCreateIntegrationMappings>
1 : Codeunit<Graph Data Setup>.PROCEDURE<OnGetGraphRecord>
2 : Codeunit<Graph Data Setup>.PROCEDURE<OnGetInboundTableID>
1 : Codeunit<Graph Data Setup>.PROCEDURE<OnGetMappingCodeForTable>
1 : Codeunit<Graph Connection Setup>.PROCEDURE<OnCheckForceSync>
1 : Codeunit<Graph Connection Setup>.PROCEDURE<OnGetInboundConnectionName>
1 : Codeunit<Graph Connection Setup>.PROCEDURE<OnGetInboundConnectionString>
1 : Codeunit<Graph Connection Setup>.PROCEDURE<OnGetSubscriptionConnectionName>
1 : Codeunit<Graph Connection Setup>.PROCEDURE<OnGetSubscriptionConnectionString>
1 : Codeunit<Graph Connection Setup>.PROCEDURE<OnGetSynchronizeConnectionName>
1 : Codeunit<Graph Connection Setup>.PROCEDURE<OnGetSynchronizeConnectionString>
1 : Codeunit<Graph Connection Setup>.PROCEDURE<OnRegisterConnections>
5 : Codeunit<Graph Mgt - General Tools>.PROCEDURE<ApiSetup>
1 : Codeunit<Graph Mgt - General Tools>.PROCEDURE<OnForceIsApiEnabledVerification>
1 : Codeunit<Graph Mgt - General Tools>.PROCEDURE<OnGetIsAPIEnabled>
2 : Codeunit<Production Journal Mgt>.PROCEDURE<OnAfterInsertConsumptionJnlLine>
1 : Codeunit<Production Journal Mgt>.PROCEDURE<OnAfterInsertOutputJnlLine>
1 : Codeunit<Production Journal Mgt>.PROCEDURE<OnAfterSetTemplateAndBatchName>
1 : Codeunit<Production Journal Mgt>.PROCEDURE<OnBeforeDeleteAllItemJnlLine>
1 : Codeunit<Production Journal Mgt>.PROCEDURE<OnBeforeInsertConsumptionJnlLine>
1 : Codeunit<Production Journal Mgt>.PROCEDURE<OnBeforeInsertOutputJnlLine>
1 : Codeunit<Production Journal Mgt>.PROCEDURE<OnBeforeRunProductionJnl>
1 : Codeunit<Calc. Item Availability>.PROCEDURE<OnAfterGetDocumentEntries>
1 : Codeunit<Calc. Item Avail. Timeline>.PROCEDURE<OnAfterUpdateTimelineEventDetails>
1 : Codeunit<Calc. Item Avail. Timeline>.PROCEDURE<OnCreateTimelineEventsBeforePlanning>
1 : Codeunit<Sales - Calc Discount By Type>.PROCEDURE<OnAfterResetRecalculateInvoiceDisc>
1 : Codeunit<FA Insert Ledger Entry>.PROCEDURE<OnBeforeInsertRegister>
1 : Codeunit<FA Insert G/L Account>.PROCEDURE<OnGetBalAccAfterRestoreGenJnlLineFields>
1 : Codeunit<FA Insert G/L Account>.PROCEDURE<OnGetBalAccAfterSaveGenJnlLineFields>
1 : Codeunit<FA Get G/L Account No.>.PROCEDURE<OnAfterGetAccNo>
1 : Codeunit<Make FA Ledger Entry>.PROCEDURE<OnAfterCopyFromFACard>
1 : Codeunit<Make FA Ledger Entry>.PROCEDURE<OnAfterCopyFromFAJnlLine>
1 : Codeunit<Make FA Ledger Entry>.PROCEDURE<OnAfterCopyFromGenJnlLine>
1 : Codeunit<Make FA Ledger Entry>.PROCEDURE<OnBeforeCopyFromFACard>
1 : Codeunit<FA Check Consistency>.PROCEDURE<OnSetFAPostingDateOnBeforeFADeprBookModify>
1 : Codeunit<Budget Depreciation>.PROCEDURE<OnBeforeGLBudgetEntryInsert>
1 : Codeunit<FA Jnl.-Check Line>.PROCEDURE<OnAfterCheckFAJnlLine>
1 : Codeunit<FA Jnl.-Check Line>.PROCEDURE<OnAfterCheckGenJnlLine>
1 : Codeunit<FA Jnl.-Post Line>.PROCEDURE<OnAfterFAJnlPostLine>
1 : Codeunit<FA Jnl.-Post Line>.PROCEDURE<OnAfterGenJnlPostLine>
1 : Codeunit<FA Reclass. Check Line>.PROCEDURE<OnAfterOnRun>
1 : Codeunit<Make Maintenance Ledger Entry>.PROCEDURE<OnAfterCopyFromFACard>
1 : Codeunit<Make Maintenance Ledger Entry>.PROCEDURE<OnAfterCopyFromFAJnlLine>
1 : Codeunit<Make Maintenance Ledger Entry>.PROCEDURE<OnAfterCopyFromGenJnlLine>
1 : Codeunit<Item Subst.>.PROCEDURE<OnAssemblyCalcCustPriceOnAfterCalcQtyAvail>
1 : Codeunit<Item Subst.>.PROCEDURE<OnAssemblyCalcCustPriceOnBeforeCalcQtyAvail>
1 : Codeunit<Item Subst.>.PROCEDURE<OnCalcCustPriceOnAfterCalcQtyAvail>
1 : Codeunit<Item Subst.>.PROCEDURE<OnCalcCustPriceOnBeforeCalcQtyAvail>
1 : Codeunit<Item Subst.>.PROCEDURE<OnCreateSubstListOnAfterCalcQtyAvail>
1 : Codeunit<Item Subst.>.PROCEDURE<OnCreateSubstListOnBeforeCalcQtyAvail>
1 : Codeunit<Item Subst.>.PROCEDURE<OnInsertInSubstServiceListOnAfterCalcQtyAvail>
1 : Codeunit<Item Subst.>.PROCEDURE<OnInsertInSubstServiceListOnBeforeCalcQtyAvail>
1 : Codeunit<Item Subst.>.PROCEDURE<OnItemSubstGetOnAfterSubstSalesLineItem>
1 : Codeunit<Dist. Integration>.PROCEDURE<OnAfterInsertPurchLine>
1 : Codeunit<Dist. Integration>.PROCEDURE<OnAfterPurchItemCrossRefFound>
1 : Codeunit<Dist. Integration>.PROCEDURE<OnAfterSalesItemCrossRefFound>
1 : Codeunit<Dist. Integration>.PROCEDURE<OnBeforeInsertPurchLine>
2 : Codeunit<Catalog Item Management>.PROCEDURE<OnAfterItemCrossReferenceFilter>
2 : Codeunit<Catalog Item Management>.PROCEDURE<OnAfterItemCrossReferenceInsert>
1 : Codeunit<Catalog Item Management>.PROCEDURE<OnBeforeCreateNewItem>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterCheckInvtPostingSetup>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterCreateItemJnlLine>
2 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterInsertShptEntryRelation>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterInsertTransShptHeader>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterInsertTransShptLine>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterTransferOrderPostShipment>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforeDeleteOneTransferOrder>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforeInsertTransShptHeader>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforeInsertTransShptLine>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforePostItemJournalLine>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforeTransferOrderPostShipment>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterCheckInvtPostingSetup>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterInsertTransRcptLine>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterTransferOderPostReceipt>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterTransferOrderPostReceipt>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterTransLineUpdateQtyReceived>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterTransRcptLineModify>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforeDeleteOneTransferHeader>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforeInsertTransRcptHeader>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforeInsertTransRcptLine>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforePostItemJournalLine>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforeTransferOderPostReceipt>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforeTransferOrderPostReceipt>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforeTransRcptHeaderInsert>
1 : Codeunit<TransferOrder-Post (Yes/No)>.PROCEDURE<OnAfterPost>
1 : Codeunit<TransferOrder-Post + Print>.PROCEDURE<OnAfterPost>
1 : Codeunit<Release Transfer Document>.PROCEDURE<OnAfterReleaseTransferDoc>
1 : Codeunit<Release Transfer Document>.PROCEDURE<OnAfterReopenTransferDoc>
1 : Codeunit<Release Transfer Document>.PROCEDURE<OnBeforeReleaseTransferDoc>
1 : Codeunit<Release Transfer Document>.PROCEDURE<OnBeforeReopenTransferDoc>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateRcptLineFromPurchLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateRcptLineFromSalesLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateRcptLineFromTransLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateShptLineFromPurchLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateShptLineFromSalesLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateShptLineFromServiceLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateShptLineFromTransLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterInitNewWhseShptLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterWhseReceiptLineInsert>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterWhseShptLineInsert>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeCreateShptLineFromSalesLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeCreateShptLineFromTransLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeUpdateRcptLineFromTransLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeWhseShptLineInsert>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnFromPurchLine2ShptLineOnAfterInitNewLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnFromServiceLine2ShptLineOnAfterInitNewLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnFromTransLine2ShptLineOnAfterInitNewLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnPurchLine2ReceiptLineOnAfterInitNewLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnSalesLine2ReceiptLineOnAfterInitNewLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnTransLine2ReceiptLineOnAfterInitNewLine>
1 : Codeunit<Get Source Doc. Inbound>.PROCEDURE<OnAfterGetInboundDocs>
1 : Codeunit<Get Source Doc. Inbound>.PROCEDURE<OnAfterGetSingleInboundDoc>
1 : Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnAfterGetOutboundDocs>
1 : Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnAfterGetSingleOutboundDoc>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterCheckWhseRcptLine>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterCheckWhseRcptLines>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterFindWhseRcptLineForPurchLine>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterFindWhseRcptLineForSalesLine>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterFindWhseRcptLineForTransLine>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterInitPostedRcptLine>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterInitSourceDocumentLines>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterPostUpdateWhseRcptLine>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterPostWhseJnlLine>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterRun>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforePostSourceDocument>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforePostUpdateWhseDocuments>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforePostUpdateWhseRcptLine>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforePostWhseJnlLine>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforePurchLineModify>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforeRun>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforeSalesLineModify>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforeTransLineModify>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnCodeOnBeforeWhseRcptHeaderModify>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnInitSourceDocumentHeader>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnInitSourceDocumentLines>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnPostSourceDocument>
1 : Codeunit<Whse.-Post Receipt (Yes/No)>.PROCEDURE<OnAfterConfirmPost>
1 : Codeunit<Whse.-Post Receipt (Yes/No)>.PROCEDURE<OnBeforeConfirmWhseReceiptPost>
1 : Codeunit<Whse.-Post Receipt + Print>.PROCEDURE<OnBeforeCode>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterCheckWhseShptLine>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterCheckWhseShptLines>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterCreateWhseJnlLine>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterFindWhseShptLineForPurchLine>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterFindWhseShptLineForSalesLine>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterFindWhseShptLineForTransLine>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterInitSourceDocumentHeader>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterPostUpdateWhseShptLine>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterPostWhseJnlLine>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterPostWhseShipment>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterRun>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforeCheckWhseShptLines>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforeDeleteUpdateWhseShptLine>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforeInitSourceDocumentHeader>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforePostedWhseShptHeaderInsert>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforePostSourceDocument>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforePostUpdateWhseDocuments>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforePostUpdateWhseShptLine>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforePurchLineModify>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforeRun>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforeSalesLineModify>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforeTransLineModify>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnInitSourceDocumentHeader>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnPostSourceDocument>
1 : Codeunit<Whse.-Post Shipment (Yes/No)>.PROCEDURE<OnAfterConfirmPost>
1 : Codeunit<Whse.-Post Shipment (Yes/No)>.PROCEDURE<OnBeforeConfirmWhseShipmentPost>
1 : Codeunit<Whse.-Post Shipment + Print>.PROCEDURE<OnAfterConfirmPost>
1 : Codeunit<Whse.-Post Shipment + Print>.PROCEDURE<OnBeforeCode>
1 : Codeunit<Whse.-Service Release>.PROCEDURE<OnBeforeCreateWhseRequest>
1 : Codeunit<Whse.-Sales Release>.PROCEDURE<OnAfterRelease>
1 : Codeunit<Whse.-Sales Release>.PROCEDURE<OnAfterReopen>
1 : Codeunit<Whse.-Sales Release>.PROCEDURE<OnBeforeCreateWhseRequest>
1 : Codeunit<Whse.-Purch. Release>.PROCEDURE<OnAfterRelease>
1 : Codeunit<Whse.-Purch. Release>.PROCEDURE<OnAfterReopen>
1 : Codeunit<Whse.-Purch. Release>.PROCEDURE<OnBeforeCreateWhseRequest>
1 : Codeunit<Whse.-Transfer Release>.PROCEDURE<OnAfterRelease>
1 : Codeunit<Whse.-Transfer Release>.PROCEDURE<OnAfterReopen>
2 : Codeunit<Whse.-Transfer Release>.PROCEDURE<OnBeforeCreateWhseRequest>
1 : Codeunit<Whse.-Production Release>.PROCEDURE<OnBeforeCreateWhsePickRequest>
1 : Codeunit<Whse.-Production Release>.PROCEDURE<OnBeforeCreateWhseRequest>
1 : Codeunit<Whse.-Production Release>.PROCEDURE<OnBeforeReleaseWhseProdOrder>
1 : Codeunit<Whse. Management>.PROCEDURE<OnAfterGetSrcDocLineQtyOutstanding>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterAssemblyLineDelete>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterAssemblyLineVerifyChange>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterItemLineVerifyChange>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterProdComponentDelete>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterProdComponentVerifyChange>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterProdOrderLineDelete>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterProdOrderLineVerifyChange>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterPurchaseLineDelete>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterPurchaseLineVerifyChange>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterSalesLineDelete>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterSalesLineVerifyChange>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterServiceLineDelete>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterServiceLineVerifyChange>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterTransLineDelete>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterTransLineVerifyChange>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnBeforeVerifyFieldNotChanged>
1 : Codeunit<Whse.-Printed>.PROCEDURE<OnBeforeModify>
1 : Codeunit<Available to Promise>.PROCEDURE<OnAfterCalcAvailableInventory>
1 : Codeunit<Available to Promise>.PROCEDURE<OnAfterCalcGrossRequirement>
1 : Codeunit<Available to Promise>.PROCEDURE<OnAfterCalcReservedReceipt>
1 : Codeunit<Available to Promise>.PROCEDURE<OnAfterCalcReservedRequirement>
1 : Codeunit<Available to Promise>.PROCEDURE<OnAfterCalcScheduledReceipt>
1 : Codeunit<Available to Promise>.PROCEDURE<OnAfterCalculateAvailability>
1 : Codeunit<Available to Promise>.PROCEDURE<OnAfterQtyAvailableToPromise>
1 : Codeunit<Available to Promise>.PROCEDURE<OnBeforeQtyAvailableToPromise>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnAfterBufferSalesPosting>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnAfterCalcCostToPostFromBuffer>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnAfterInitInvtPostBuf>
2 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnAfterInitTempInvtPostBuf>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnAfterSetAccNo>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforeInitInvtPostBuf>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforePostInvtPostBuf>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnPostInvtPostBufferOnBeforeFind>
1 : Codeunit<ItemCostManagement>.PROCEDURE<OnBeforeCalcLastAdjEntryAvgCost>
1 : Codeunit<ItemCostManagement>.PROCEDURE<OnBeforeCalculateAverageCost>
1 : Codeunit<ItemCostManagement>.PROCEDURE<OnBeforeUpdateUnitCost>
1 : Codeunit<ItemCostManagement>.PROCEDURE<OnBeforeUpdateUnitCostSKU>
1 : Codeunit<ItemCostManagement>.PROCEDURE<OnUpdateUnitCostSKUOnBeforeMatchSKU>
1 : Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnAfterCreateDocChargeAssgnt>
1 : Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnAssignItemCharges>
1 : Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnBeforeCreateDocChargeAssgn>
1 : Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnBeforeCreateReturnRcptChargeAssgnt>
1 : Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnBeforeCreateSalesShptChargeAssgnt>
1 : Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnBeforeCreateShptChargeAssgnt>
1 : Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnBeforeInsertItemChargeAssgntWithAssignValues>
1 : Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnBeforeShowSuggestItemChargeAssignStrMenu>
1 : Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<OnAfterCreateDocChargeAssgnt>
1 : Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<OnAssignItemCharges>
1 : Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<OnBeforeCreateDocChargeAssgn>
1 : Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<OnBeforeInsertItemChargeAssgntWithAssignValues>
1 : Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<OnBeforeShowSuggestItemChargeAssignStrMenu>
1 : Codeunit<Calculate Standard Cost>.PROCEDURE<OnBeforeCalcItems>
1 : Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnAfterCode>
1 : Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnAfterCopyItemJnlLineFromPurchRcpt>
1 : Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnAfterPurchRcptLineModify>
1 : Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnAfterUpdateOrderLine>
1 : Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnBeforeCheckPurchRcptLine>
1 : Codeunit<Undo Return Shipment Line>.PROCEDURE<OnAfterCode>
1 : Codeunit<Undo Return Shipment Line>.PROCEDURE<OnAfterCopyItemJnlLineFromReturnShpt>
1 : Codeunit<Undo Return Shipment Line>.PROCEDURE<OnAfterReturnShptLineModify>
1 : Codeunit<Undo Return Shipment Line>.PROCEDURE<OnAfterUpdatePurchLine>
1 : Codeunit<Undo Return Shipment Line>.PROCEDURE<OnBeforeCheckReturnShptLine>
1 : Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnAfterCode>
1 : Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnAfterCopyItemJnlLineFromSalesShpt>
1 : Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnAfterInsertNewShipmentLine>
1 : Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnAfterSalesShptLineModify>
1 : Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnAfterUpdateSalesLine>
1 : Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnBeforeCheckSalesShptLine>
1 : Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnBeforeOnRun>
1 : Codeunit<Undo Return Receipt Line>.PROCEDURE<OnAfterCode>
1 : Codeunit<Undo Return Receipt Line>.PROCEDURE<OnAfterCopyItemJnlLineFromReturnRcpt>
1 : Codeunit<Undo Return Receipt Line>.PROCEDURE<OnAfterInsertNewReceiptLine>
1 : Codeunit<Undo Return Receipt Line>.PROCEDURE<OnAfterReturnRcptLineModify>
1 : Codeunit<Undo Return Receipt Line>.PROCEDURE<OnAfterUpdateSalesLine>
1 : Codeunit<Undo Return Receipt Line>.PROCEDURE<OnBeforeCheckReturnRcptLine>
1 : Codeunit<Undo Posting Management>.PROCEDURE<OnAfterUpdatePurchline>
1 : Codeunit<Undo Posting Management>.PROCEDURE<OnAfterUpdateSalesLine>
1 : Codeunit<Undo Posting Management>.PROCEDURE<OnAfterUpdateServLine>
1 : Codeunit<Undo Posting Management>.PROCEDURE<OnBeforePostItemJnlLine>
1 : Codeunit<Undo Service Shipment Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServShpt>
1 : Codeunit<Undo Service Consumption Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServShpt>
1 : Codeunit<Undo Service Consumption Line>.PROCEDURE<OnBeforePostItemJnlLineWithIT>
1 : Codeunit<Undo Service Consumption Line>.PROCEDURE<OnBeforeReservEntryInsert>
1 : Codeunit<Undo Service Consumption Line>.PROCEDURE<OnBeforeTempGlobalItemEntryRelationInsert>
1 : Codeunit<Cost Calculation Management>.PROCEDURE<OnCalcProdOrderLineExpCostOnExpOperCostCalculated>
1 : Codeunit<Calculate BOM Tree>.PROCEDURE<OnAfterTransferFromProdBOM>
1 : Codeunit<Calculate BOM Tree>.PROCEDURE<OnAfterTransferFromProdItem>
1 : Codeunit<Calculate BOM Tree>.PROCEDURE<OnAfterTransferFromProdRouting>
1 : Codeunit<Calculate BOM Tree>.PROCEDURE<OnBeforeFilterBOMBuffer>
1 : Codeunit<Inventory Adjustment>.PROCEDURE<OnPostItemJnlLineCopyFromValueEntry>
1 : Codeunit<Service Inv.-Printed>.PROCEDURE<OnBeforeModify>
1 : Codeunit<Service Shpt.-Printed>.PROCEDURE<OnBeforeModify>
1 : Codeunit<Service Cr. Memo-Printed>.PROCEDURE<OnBeforeModify>
1 : Codeunit<Service-Printed>.PROCEDURE<OnBeforeModify>
1 : Codeunit<ServLogManagement>.PROCEDURE<OnBeforeServItemEventDescription>
1 : Codeunit<ServLogManagement>.PROCEDURE<OnServItemEventDescription>
1 : Codeunit<ServLogManagement>.PROCEDURE<OnServOrderEventDescription>
3 : Codeunit<ServItemManagement>.PROCEDURE<OnBeforeInsertNewServItemComponent>
1 : Codeunit<ServItemManagement>.PROCEDURE<OnBeforeReplaceSIComponent>
1 : Codeunit<ServItemManagement>.PROCEDURE<OnCreateServItemOnSalesLineShpt>
1 : Codeunit<ServItemManagement>.PROCEDURE<OnCreateServItemOnServItemLine>
1 : Codeunit<Service-Quote to Order>.PROCEDURE<OnAfterInsertServHeader>
1 : Codeunit<Service-Quote to Order>.PROCEDURE<OnAfterInsertServiceLine>
1 : Codeunit<Service-Quote to Order>.PROCEDURE<OnBeforeRun>
1 : Codeunit<ServContractManagement>.PROCEDURE<OnAfterCreateServHeader>
1 : Codeunit<Lock-OpenServContract>.PROCEDURE<OnBeforeLockServContract>
1 : Codeunit<SignServContractDoc>.PROCEDURE<OnAfterToServContractHeaderInsert>
1 : Codeunit<SignServContractDoc>.PROCEDURE<OnAfterToServContractLineInsert>
1 : Codeunit<SignServContractDoc>.PROCEDURE<OnBeforeSignContract>
1 : Codeunit<SignServContractDoc>.PROCEDURE<OnBeforeSignContractQuote>
1 : Codeunit<SignServContractDoc>.PROCEDURE<OnBeforeToServContractHeaderInsert>
1 : Codeunit<SignServContractDoc>.PROCEDURE<OnBeforeToServContractLineInsert>
1 : Codeunit<Service-Calc. Discount>.PROCEDURE<OnBeforeCalcServDiscount>
1 : Codeunit<Service-Post>.PROCEDURE<OnAfterPostServiceDoc>
1 : Codeunit<Service-Post>.PROCEDURE<OnBeforePostWithLines>
1 : Codeunit<Service-Post (Yes/No)>.PROCEDURE<OnAfterConfirmPost>
1 : Codeunit<Service-Post (Yes/No)>.PROCEDURE<OnBeforeConfirmServPost>
1 : Codeunit<Service-Post+Print>.PROCEDURE<OnAfterConfirmPost>
1 : Codeunit<Service-Post+Print>.PROCEDURE<OnBeforeConfirmPost>
1 : Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<OnAfterPostInvoicePostBuffer>
1 : Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<OnBeforePostInvoicePostBuffer>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterCheckCertificateOfSupplyStatus>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterFinalize>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterPrepareCrMemoHeader>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterPrepareInvoiceHeader>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterPrepareShipmentHeader>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterServCrMemoHeaderInsert>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterServCrMemoLineInsert>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterServInvHeaderInsert>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterServInvLineInsert>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterServShptHeaderInsert>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterServShptItemLineInsert>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterServShptLineInsert>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeFinalize>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeFinalizeCrMemoDocument>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeFinalizeInvoiceDocument>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeFinalizeShipmentDocument>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeModifyServiceDocNoSeries>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeServCrMemoHeaderInsert>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeServCrMemoLineInsert>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeServInvHeaderInsert>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeServInvLineInsert>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeServShptHeaderInsert>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeServShptItemLineInsert>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeServShptLineInsert>
1 : Codeunit<Sales-Calc. Discount>.PROCEDURE<OnAfterCalcSalesDiscount>
1 : Codeunit<Sales-Calc. Discount>.PROCEDURE<OnBeforeCalcSalesDiscount>
1 : Codeunit<Hybrid Deployment>.PROCEDURE<OnBeforeEnableReplication>
1 : Codeunit<Hybrid Deployment>.PROCEDURE<OnCreateIntegrationRuntime>
1 : Codeunit<Hybrid Deployment>.PROCEDURE<OnDisableReplication>
1 : Codeunit<Hybrid Deployment>.PROCEDURE<OnEnableReplication>
1 : Codeunit<Hybrid Deployment>.PROCEDURE<OnGetIntegrationRuntimeKeys>
1 : Codeunit<Hybrid Deployment>.PROCEDURE<OnGetReplicationRunErrors>
1 : Codeunit<Hybrid Deployment>.PROCEDURE<OnGetRequestStatus>
1 : Codeunit<Hybrid Deployment>.PROCEDURE<OnInitialize>
1 : Codeunit<Hybrid Deployment>.PROCEDURE<OnRegenerateIntegrationRuntimeKeys>
1 : Codeunit<Hybrid Deployment>.PROCEDURE<OnRunReplication>
1 : Codeunit<Hybrid Deployment>.PROCEDURE<OnSetReplicationSchedule>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnApplySelectedData>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnBatchEditFromErrorView>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnDataImport>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnEnableTogglingDataMigrationOverviewPage>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnFillStagingTables>
2 : Codeunit<Data Migration Facade>.PROCEDURE<OnFindBatchForAccountTransactions>
2 : Codeunit<Data Migration Facade>.PROCEDURE<OnFindBatchForCustomerTransactions>
2 : Codeunit<Data Migration Facade>.PROCEDURE<OnFindBatchForItemTransactions>
2 : Codeunit<Data Migration Facade>.PROCEDURE<OnFindBatchForVendorTransactions>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnGetInstructions>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnGetMigrationHelpTopicUrl>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnInitDataMigrationError>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnMigrationCompleted>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnRegisterDataMigrator>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnSelectDataToApply>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnSelectRowFromDashboard>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnShowThatsItMessage>
1 : Codeunit<GL Acc. Data Migration Facade>.PROCEDURE<OnCreateOpeningBalanceTrx>
1 : Codeunit<GL Acc. Data Migration Facade>.PROCEDURE<OnMigrateAccountTransactions>
1 : Codeunit<GL Acc. Data Migration Facade>.PROCEDURE<OnMigrateGlAccount>
1 : Codeunit<GL Acc. Data Migration Facade>.PROCEDURE<OnMigratePostingGroups>
1 : Codeunit<Vendor Data Migration Facade>.PROCEDURE<OnMigrateVendor>
1 : Codeunit<Vendor Data Migration Facade>.PROCEDURE<OnMigrateVendorDimensions>
1 : Codeunit<Vendor Data Migration Facade>.PROCEDURE<OnMigrateVendorPostingGroups>
1 : Codeunit<Vendor Data Migration Facade>.PROCEDURE<OnMigrateVendorTransactions>
1 : Codeunit<Customer Data Migration Facade>.PROCEDURE<OnMigrateCustomer>
1 : Codeunit<Customer Data Migration Facade>.PROCEDURE<OnMigrateCustomerDimensions>
1 : Codeunit<Customer Data Migration Facade>.PROCEDURE<OnMigrateCustomerPostingGroups>
1 : Codeunit<Customer Data Migration Facade>.PROCEDURE<OnMigrateCustomerTransactions>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateCostingMethod>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateInventoryTransactions>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItem>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemDimensions>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemDiscountGroup>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemPostingGroups>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemPrice>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemSalesLineDiscount>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemTariffNo>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemTrackingCode>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemUnitOfMeasure>
1 : Codeunit<Sales-Explode BOM>.PROCEDURE<OnBeforeConfirmExplosion>
1 : Codeunit<Sales-Explode BOM>.PROCEDURE<OnBeforeOnRun>
1 : Codeunit<Sales-Explode BOM>.PROCEDURE<OnInsertOfExplodedBOMLineToSalesLine>
1 : Codeunit<Power BI Service Mgt.>.PROCEDURE<OnGetReports>
1 : Codeunit<Power BI Service Mgt.>.PROCEDURE<OnRetryUploads>
1 : Codeunit<Power BI Service Mgt.>.PROCEDURE<OnUploadReports>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireAcquireOnBehalfOfToken>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireAcquireOnBehalfOfTokenAndRefreshToken>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireAcquireTokenFromRefreshToken>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireGuestToken>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireTokenByAuthorizationCode>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireTokenByAuthorizationCodeWithCredentials>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireTokenFromCache>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireTokenFromCacheWithCredentials>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnCheckProvider>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnCreateExchangeServiceWrapperWithToken>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnGetSaasClientId>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnInitialize>
1 : Codeunit<Sales-Get Shipment>.PROCEDURE<OnAfterInsertLines>
1 : Codeunit<Sales-Get Shipment>.PROCEDURE<OnBeforeInsertLines>
1 : Codeunit<Sales-Get Shipment>.PROCEDURE<OnBeforeTransferLineToSalesDoc>
1 : Codeunit<Sales-Get Shipment>.PROCEDURE<OnRunAfterFilterSalesShpLine>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnAfterInitReservEntry>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnAfterReserveEntryFilter>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnAfterRetrieveAppliedExpirationDate>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnAfterSplitPostedWhseReceiptLine>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnAfterSplitWhseJnlLine>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeCheckWhseItemTrkg>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeCreateWhseItemTrkgForReceipt>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeCreateWhseItemTrkgForResEntry>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeExistingExpirationDate>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeExistingExpirationDateAndQty>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeFindTempHandlingSpecification>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeInsertReservEntryForPurchLine>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeInsertReservEntryForSalesLine>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeInsertSplitInternalPutAwayLine>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeInsertSplitPostedWhseRcptLine>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeInsertWhseItemTrkgLines>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeInsertWhseItemTrkgLinesLoop>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeModifyWhseItemTrkgLines>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeRetrieveAppliedExpirationDate>
2 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeTempWhseJnlLine2Insert>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeWhseExistingExpirationDate>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeWhseItemTrackingLineInsert>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnCopyItemLedgEntryTrkgToDocLine>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnIsOrderNetworkEntity>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnRetrieveItemTrackingFromReservEntryFilter>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnSyncActivItemTrkgOnBeforeInsertTempReservEntry>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnTempPostedWhseRcptLineSetFilters>
1 : Codeunit<Item Tracking Data Collection>.PROCEDURE<OnAfterAssistEditTrackingNo>
1 : Codeunit<Item Tracking Data Collection>.PROCEDURE<OnAfterCreateEntrySummary>
1 : Codeunit<Item Tracking Data Collection>.PROCEDURE<OnAfterCreateEntrySummary2>
1 : Codeunit<Item Tracking Data Collection>.PROCEDURE<OnAfterRetrieveLookupData>
1 : Codeunit<Item Tracking Data Collection>.PROCEDURE<OnAfterTransferExpDateFromSummary>
1 : Codeunit<Item Tracking Data Collection>.PROCEDURE<OnBeforeAssistEditTrackingNo>
1 : Codeunit<Item Tracking Data Collection>.PROCEDURE<OnBeforeTempGlobalChangedEntrySummaryInsert>
1 : Codeunit<Item Tracking Data Collection>.PROCEDURE<OnBeforeTempTrackingSpecificationInsert>
1 : Codeunit<Item Tracking Data Collection>.PROCEDURE<OnBeforeUpdateBinContent>
1 : Codeunit<Item Tracking Data Collection>.PROCEDURE<OnTransferItemLedgToTempRecOnBeforeInsert>
1 : Codeunit<Item Tracking Doc. Management>.PROCEDURE<OnRetrieveDocumentItemTracking>
1 : Codeunit<Purch - Calc Disc. By Type>.PROCEDURE<OnAfterResetRecalculateInvoiceDisc>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchaseDocument>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchaseHeader>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchInvLines>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchLineFromPurchLineBuffer>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesDocument>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesHeader>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesInvLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesLineFromSalesLineBuffer>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesToPurchDoc>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInitToPurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInitToSalesLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInsertToPurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInsertToSalesLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterTransfldsFromSalesToPurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterUpdatePurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterUpdateSalesLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeAddPurchDocLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeAddSalesDocLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyArchPurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyArchSalesLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchaseDocument>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchInvLines>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchLines>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesDocument>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesInvLines>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesToPurchDoc>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertOldPurchCombDocNoLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertOldPurchDocNoLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertOldSalesCombDocNoLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertOldSalesDocNoLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertToPurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertToSalesLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeModifyPurchHeader>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeModifySalesHeader>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeUpdatePurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeUpdateSalesLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyArchPurchLineOnAfterToPurchLineInsert>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyArchPurchLineOnBeforeToPurchLineInsert>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyArchSalesLineOnAfterToSalesLineInsert>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyArchSalesLineOnBeforeToSalesLineInsert>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchDocWithHeader>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocWithHeader>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnUpdatePurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnUpdateSalesLine>
1 : Codeunit<Return Shipment - Printed>.PROCEDURE<OnBeforeModify>
1 : Codeunit<Return Receipt - Printed>.PROCEDURE<OnBeforeModify>
3 : Codeunit<ODataUtility>.PROCEDURE<OnEditInExcel>
1 : Codeunit<Booking Manager>.PROCEDURE<OnGetBookingMailboxes>
1 : Codeunit<Booking Manager>.PROCEDURE<OnGetBookingServiceForBooking>
1 : Codeunit<Booking Manager>.PROCEDURE<OnRegisterAppointmentConnection>
1 : Codeunit<Booking Manager>.PROCEDURE<OnSetBookingItemInvoiced>
1 : Codeunit<Booking Manager>.PROCEDURE<OnSynchronize>
1 : Codeunit<Purch.-Calc.Discount>.PROCEDURE<OnAfterCalcPurchaseDiscount>
1 : Codeunit<Purch.-Calc.Discount>.PROCEDURE<OnBeforeCalcPurchaseDiscount>
1 : Codeunit<Page Management>.PROCEDURE<OnAfterGetPageID>
2 : Codeunit<Page Management>.PROCEDURE<OnBeforeGetDefaultLookupPageID>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindItemJnlLinePrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindJobJnlLineLineDisc>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindJobJnlLineResPrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindJobPlanningLineLineDisc>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindJobPlanningLineResPrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindSalesLineDisc>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindSalesLineLineDisc>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindSalesLinePrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindSalesLineResPrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindSalesPrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindServLineDisc>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindServLinePrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindServLineResPrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindStdItemJnlLinePrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterGetSalesLinePrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterJobJnlLineLineDiscExists>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterJobPlanningLineLineDiscExists>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterSalesLineLineDiscExists>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterSalesLinePriceExists>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterServLineLineDiscExists>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterServLinePriceExists>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindAnalysisReportPrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindItemJnlLinePrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindJobJnlLinePrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindJobPlanningLinePrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindSalesLineDisc>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindSalesPrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindServLineDisc>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindStdItemJnlLinePrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeJobJnlLineLineDiscExists>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeJobPlanningLineLineDiscExists>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeSalesLineLineDiscExists>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeSalesLinePriceExists>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeServLineLineDiscExists>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeServLinePriceExists>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnGetCustNoForSalesHeader>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterFindPurchLineDisc>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterFindPurchLinePrice>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterFindReqLineDisc>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterFindReqLinePrice>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterGetPurchLinePrice>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterPurchLineLineDiscExists>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterPurchLinePriceExists>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnBeforeFindReqLineDisc>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnBeforePurchLineLineDiscExists>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnBeforePurchLinePriceExists>
1 : Codeunit<Sales Info-Pane Management>.PROCEDURE<OnAfterSetItemFilter>
1 : Codeunit<Purch.-Explode BOM>.PROCEDURE<OnBeforeInsertExplodedPurchLine>
1 : Codeunit<Whse. Jnl.-Register Line>.PROCEDURE<OnAfterInsertWhseEntry>
1 : Codeunit<Whse. Jnl.-Register Line>.PROCEDURE<OnBeforeInsertWhseEntry>
1 : Codeunit<Whse. Jnl.-Register Line>.PROCEDURE<OnInitWhseEntryCopyFromWhseJnlLine>
1 : Codeunit<WMS Management>.PROCEDURE<OnAfterCheckWhseJnlLine>
1 : Codeunit<WMS Management>.PROCEDURE<OnAfterCreateWhseJnlLine>
1 : Codeunit<WMS Management>.PROCEDURE<OnAfterCreateWhseJnlLineFromConsumJnl>
1 : Codeunit<WMS Management>.PROCEDURE<OnAfterCreateWhseJnlLineFromOutputJnl>
1 : Codeunit<WMS Management>.PROCEDURE<OnAfterTransferWhseItemTrkg>
1 : Codeunit<WMS Management>.PROCEDURE<OnInitWhseJnlLineCopyFromItemJnlLine>
1 : Codeunit<WMS Management>.PROCEDURE<OnShowSourceDocLine>
1 : Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnAfterCollectTrackingInformation>
1 : Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnAfterItemJnlPostLine>
1 : Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnAfterPostJnlLines>
1 : Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnBeforeInsertTempHandlingSpecs>
1 : Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnBeforeRegisterLines>
1 : Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnBeforeWhseJnlRegisterLineRun>
1 : Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnCheckWhseJnlLine>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterAutofillQtyToHandle>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterCheckWhseActivLine>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterCreateRegActivLine>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterFindWhseActivLine>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterInitRegActLine>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterInsRegWhseItemTrkgLine>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterRegisterWhseActivity>
2 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterRegWhseItemTrkgLine>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterWhseShptLineModify>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeCheckLines>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeCheckQtyAvailToInsertBase>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeCode>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeCreateRegActivHeader>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeUpdWhseActivHeader>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeWhseActivLineDelete>
1 : Codeunit<Whse.-Shipment Release>.PROCEDURE<OnAfterRelease>
1 : Codeunit<Whse.-Shipment Release>.PROCEDURE<OnAfterReopen>
1 : Codeunit<Whse.-Shipment Release>.PROCEDURE<OnAfterTestWhseShptLine>
1 : Codeunit<Whse.-Shipment Release>.PROCEDURE<OnBeforeRelease>
1 : Codeunit<Whse.-Shipment Release>.PROCEDURE<OnBeforeReopen>
1 : Codeunit<Whse. Worksheet-Create>.PROCEDURE<OnAfterFromProdOrderCompLineCreateWhseWkshLine>
1 : Codeunit<Whse. Worksheet-Create>.PROCEDURE<OnAfterFromWhseRcptLineCreateWhseWkshLine>
1 : Codeunit<Whse. Worksheet-Create>.PROCEDURE<OnAfterTransferFromWhseShptLine>
1 : Codeunit<Create Pick>.PROCEDURE<OnAfterBinContentExistsFilter>
1 : Codeunit<Create Pick>.PROCEDURE<OnAfterCreateTempLineCheckReservation>
1 : Codeunit<Create Pick>.PROCEDURE<OnAfterSetValues>
4 : Codeunit<Create Pick>.PROCEDURE<OnAfterWhseActivLineInsert>
1 : Codeunit<Create Pick>.PROCEDURE<OnBeforeSetBinCodeFilter>
2 : Codeunit<Create Put-away>.PROCEDURE<OnAfterWhseActivLineInsert>
1 : Codeunit<Create Put-away>.PROCEDURE<OnBeforeWhseActivLineInsert>
1 : Codeunit<Create Put-away>.PROCEDURE<OnFindBin>
1 : Codeunit<Create Put-away>.PROCEDURE<OnFindBinContent>
1 : Codeunit<Create Put-away>.PROCEDURE<OnNextBin>
1 : Codeunit<Create Put-away>.PROCEDURE<OnNextBinContent>
1 : Codeunit<Whse. Undo Quantity>.PROCEDURE<OnBeforePostTempWhseJnlLine>
1 : Codeunit<Whse. Undo Quantity>.PROCEDURE<OnBeforeTempWhseJnlLineInsert>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnAfterInsertWhseActivLine>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeFindProdOrderComp>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeFindProdOrderLine>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeFindPurchLine>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeFindSalesLine>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeFindTransLine>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromComp>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromProd>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromPurchase>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromSales>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromTransfer>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnAfterInsertWhseActivLine>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeFindAssemblyLine>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeFindProdOrderComp>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeFindPurchLine>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeFindSalesLine>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeFindTransLine>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromAssembly>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromComp>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromPurchase>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromSales>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromTransfer>
1 : Codeunit<Whse.-Act.-Post (Yes/No)>.PROCEDURE<OnBeforeConfirmPost>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterCreateWhseJnlLine>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterInitSourceDocument>
2 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterPurchLineModify>
2 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterSalesLineModify>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterTransLineModify>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterWhseActivLineModify>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnBeforeCheckLines>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnBeforeInitSourceDocument>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnBeforeInsertTempWhseActivLine>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnCodeOnAfterCreatePostedWhseActivDocument>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnPostConsumptionLineOnAfterCreateItemJnlLine>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnUpdateSourceDocumentOnAfterPurchLineModify>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnUpdateSourceDocumentOnAfterSalesLineModify>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnUpdateSourceDocumentOnAfterTransLineModify>
1 : Codeunit<Whse.-Output Prod. Release>.PROCEDURE<OnAfterCheckWhseRqstProdOrderLine>
1 : Codeunit<Purch.-Get Receipt>.PROCEDURE<OnAfterInsertLines>
1 : Codeunit<Purch.-Get Receipt>.PROCEDURE<OnBeforeInsertLines>
1 : Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnAfterPurchaseLineInsert>
1 : Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnBeforePurchaseLineInsert>
1 : Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnGetDescriptionFromItem>
1 : Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnGetDescriptionFromItemTranslation>
1 : Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnGetDescriptionFromItemVariant>
1 : Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnGetDescriptionFromSalesLine>
1 : Codeunit<Calendar Management>.PROCEDURE<OnBeforeCalcDateBOC>
1 : Codeunit<Sales-Post and Send>.PROCEDURE<OnBeforePostAndSend>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnAfterSetCFAccColumnFilter>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnAfterSetCFAccRowFilter>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnAfterSetGLAccColumnFilters>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnAfterSetGLAccRowFilters>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeCalcCellExit>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeCalcCFAcc>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeCalcCostType>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeCalcGLAcc>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeDrillDownFromOverviewPage>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeTestBalance>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterCheckAndUpdate>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterCheckMandatoryFields>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterCheckSalesDoc>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterCheckTrackingAndWarehouseForReceive>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterCheckTrackingAndWarehouseForShip>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterDeleteAfterPosting>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterDivideAmount>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterFillInvoicePostBuffer>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterFinalizePosting>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterFinalizePostingOnBeforeCommit>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterIncrAmount>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterInsertedPrepmtVATBaseToDeduct>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterInvoiceRoundingAmount>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostBalancingEntry>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostCustomerEntry>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostGLAndCustomer>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostInvPostBuffer>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostItemJnlLineWhseLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostItemTrackingReturnRcpt>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostSalesDoc>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostSalesDocDropShipment>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostSalesLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostSalesLines>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostUpdateOrderLineModifyTempLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterReleaseSalesDoc>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterResetTempLines>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterReturnRcptHeaderInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterReturnRcptLineInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterReverseAmount>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterRoundAmount>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesCrMemoHeaderInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesCrMemoLineInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesInvHeaderInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesInvLineInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesShptHeaderInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesShptLineInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterSetApplyToDocNo>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterTestSalesLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterUpdatePostingNos>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterUpdatePrepmtSalesLineWithRounding>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeDeleteAfterPosting>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeDivideAmount>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeFillDeferralPostingBuffer>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeFinalizePosting>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeGetCountryCode>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeInsertICGenJnlLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeInsertReturnReceiptHeader>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeInvoiceRoundingAmount>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeItemJnlPostLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostAssocItemJnlLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostBalancingEntry>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostCommitSalesDoc>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostCustomerEntry>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostGLAndCustomer>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostInvPostBuffer>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostItemChargePerOrder>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostItemJnlLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostLines>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostSalesDoc>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostUpdateOrderLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeReleaseSalesDoc>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeReturnRcptHeaderInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeReturnRcptLineInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeRoundAmount>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesCrMemoHeaderInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesCrMemoLineInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesInvHeaderInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesInvLineInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesLineDeleteAll>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesShptHeaderInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesShptLineInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeTempPrepmtSalesLineInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeTempPrepmtSalesLineModify>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeTestSalesLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeUpdateInvoicedQtyOnShipmentLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeUpdatePrepmtSalesLineWithRounding>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeValidatePostingAndDocumentDate>
1 : Codeunit<Sales-Post>.PROCEDURE<OnCalcInvDiscountSetFilter>
1 : Codeunit<Sales-Post>.PROCEDURE<OnCheckTrackingAndWarehouseForReceiveOnBeforeCheck>
1 : Codeunit<Sales-Post>.PROCEDURE<OnCheckTrackingAndWarehouseForShipOnBeforeCheck>
1 : Codeunit<Sales-Post>.PROCEDURE<OnFillInvoicePostingBufferOnBeforeDeferrals>
2 : Codeunit<Sales-Post>.PROCEDURE<OnInvoiceSalesShptLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnPostItemChargePerOrderOnAfterCopyToItemJnlLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnPostItemJnlLineOnBeforeTransferReservToItemJnlLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnPostSalesLineOnAfterTestUpdatedSalesLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnPostUpdateOrderLineOnBeforeInitTempSalesLineQuantities>
1 : Codeunit<Sales-Post>.PROCEDURE<OnSendSalesDocument>
1 : Codeunit<Sales-Post>.PROCEDURE<OnSumSalesLines2SetFilter>
1 : Codeunit<Online Map Management>.PROCEDURE<OnAfterGetAddress>
1 : Codeunit<Online Map Management>.PROCEDURE<OnAfterValidAddress>
1 : Codeunit<Online Map Management>.PROCEDURE<OnBeforeGetAddress>
1 : Codeunit<Online Map Management>.PROCEDURE<OnBeforeValidAddress>
1 : Codeunit<Sales-Post (Yes/No)>.PROCEDURE<OnAfterConfirmPost>
1 : Codeunit<Sales-Post (Yes/No)>.PROCEDURE<OnAfterPost>
1 : Codeunit<Sales-Post (Yes/No)>.PROCEDURE<OnBeforeConfirmSalesPost>
1 : Codeunit<Sales-Post + Print>.PROCEDURE<OnAfterConfirmPost>
1 : Codeunit<Sales-Post + Print>.PROCEDURE<OnAfterPost>
1 : Codeunit<Sales-Post + Print>.PROCEDURE<OnBeforeConfirmPost>
1 : Codeunit<Cash Flow Management>.PROCEDURE<OnBeforeShowSource>
1 : Codeunit<Cash Flow Management>.PROCEDURE<OnBeforeShowSourceDocument>
1 : Codeunit<Cash Flow Management>.PROCEDURE<OnBeforeUpdateCashFlowForecast>
1 : Codeunit<Cash Flow Wksh. -Register Line>.PROCEDURE<OnAfterCreateForecastEntry>
1 : Codeunit<Sales-Quote to Order>.PROCEDURE<OnAfterInsertAllSalesOrderLines>
1 : Codeunit<Sales-Quote to Order>.PROCEDURE<OnAfterInsertSalesOrderLine>
1 : Codeunit<Sales-Quote to Order>.PROCEDURE<OnAfterOnRun>
1 : Codeunit<Sales-Quote to Order>.PROCEDURE<OnBeforeDeleteSalesQuote>
1 : Codeunit<Sales-Quote to Order>.PROCEDURE<OnBeforeInsertSalesOrderHeader>
1 : Codeunit<Sales-Quote to Order>.PROCEDURE<OnBeforeInsertSalesOrderLine>
1 : Codeunit<Sales-Quote to Order>.PROCEDURE<OnBeforeOnRun>
1 : Codeunit<Config. Package Management>.PROCEDURE<OnPostProcessPackage>
1 : Codeunit<Config. Package Management>.PROCEDURE<OnPreProcessPackage>
1 : Codeunit<Config. Template Management>.PROCEDURE<OnApplyTemplLinesWithoutValidationAfterRecRefCheck>
1 : Codeunit<Config. XML Exchange>.PROCEDURE<OnBeforeGetElementName>
1 : Codeunit<Config. Excel Exchange>.PROCEDURE<OnBeforeExportExcel>
1 : Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnAfterInsertAllSalesOrderLines>
1 : Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnAfterInsertSalesOrderLine>
1 : Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnBeforeInsertSalesOrderHeader>
1 : Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnBeforeInsertSalesOrderLine>
1 : Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnBeforeSalesOrderHeaderModify>
1 : Codeunit<Sales Post via Job Queue>.PROCEDURE<OnBeforeEnqueueSalesDoc>
1 : Codeunit<Sales Post via Job Queue>.PROCEDURE<OnBeforeReleaseSalesDoc>
1 : Codeunit<Sales-Post + Email>.PROCEDURE<OnAfterConfirmPost>
1 : Codeunit<Sales-Post + Email>.PROCEDURE<OnBeforePostAndEMail>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterCheckAndUpdate>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterCheckMandatoryFields>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterCheckPurchDoc>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterCheckTrackingAndWarehouseForReceive>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterCheckTrackingAndWarehouseForShip>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterDeleteAfterPosting>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterDivideAmount>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterFillInvoicePostBuffer>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterFinalizePosting>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterFinalizePostingOnBeforeCommit>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterIncrAmount>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterInsertedPrepmtVATBaseToDeduct>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterInsertPostedHeaders>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterInvoiceRoundingAmount>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostAccICLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostBalancingEntry>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostGLAndVendor>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostInvPostBuffer>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostItemJnlLineCopyProdOrder>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostItemLine>
2 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostPurchaseDoc>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostPurchaseDocDropShipment>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostPurchLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostPurchLines>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostUpdateOrderLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostVendorEntry>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostWhseJnlLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchCrMemoHeaderInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchCrMemoLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchInvHeaderInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchInvLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchRcptHeaderInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchRcptLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterResetTempLines>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterReturnShptHeaderInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterReturnShptLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterReverseAmount>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterRoundAmount>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterSetApplyToDocNo>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterTestPurchLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterUpdatePostingNos>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterUpdatePrepmtPurchLineWithRounding>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterUpdatePurchLineBeforePost>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeBlanketOrderPurchLineModify>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeCheckExternalDocumentNumber>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeDeleteAfterPosting>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeDivideAmount>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeFillDeferralPostingBuffer>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeFinalizePosting>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeGetCountryCode>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeInsertReceiptHeader>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeInvoiceRoundingAmount>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeItemJnlPostLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostAssocItemJnlLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostBalancingEntry>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostCommitPurchaseDoc>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostGLAccICLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostGLAndVendor>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostInvPostBuffer>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostItemChargePerOrder>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostItemJnlLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostItemJnlLineJobConsumption>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostLines>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostPurchaseDoc>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostUpdateOrderLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostVendorEntry>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchCrMemoHeaderInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchCrMemoLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchInvHeaderInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchInvLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchLineDeleteAll>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchRcptHeaderInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchRcptLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeReturnShptHeaderInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeReturnShptLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeRoundAmount>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeSalesShptHeaderInsert>
2 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeSalesShptLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeTempPrepmtPurchLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeTempPrepmtPurchLineModify>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeTestPurchLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeUpdateInvoicedQtyOnPurchRcptLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeUpdatePrepmtPurchLineWithRounding>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeUpdatePurchLineBeforePost>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeValidatePostingAndDocumentDate>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnCopyAndCheckItemChargeOnBeforeLoop>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnFillInvoicePostBufferOnAfterInitAmounts>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnGetItemChargeLineOnAfterGet>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterCreateItemJnlLineFromAssemblyHeader>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterCreateItemJnlLineFromAssemblyLine>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterCreateResJnlLineFromItemJnlLine>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterFinalizePost>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterInitPost>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterOnRun>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterPost>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterPostedAssemblyHeaderModify>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterPostedAssemblyLineInsert>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterRecreateAsmOrderWithUndo>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterUpdateAsmOrderWithUndo>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnBeforeFinalizePost>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnBeforeInitPost>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnBeforeOnRun>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnBeforePost>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnBeforePostCorrectionItemJnLine>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnBeforePostedAssemblyLineInsert>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnBeforePostItemConsumption>
1 : Codeunit<Azure AD User Management>.PROCEDURE<OnInitialize>
1 : Codeunit<Application System Constants>.PROCEDURE<OnAfterGetApplicationVersion>
1 : Codeunit<Release Assembly Document>.PROCEDURE<OnAfterReleaseAssemblyDoc>
1 : Codeunit<Release Assembly Document>.PROCEDURE<OnAfterReopenAssemblyDoc>
1 : Codeunit<Release Assembly Document>.PROCEDURE<OnBeforeReleaseAssemblyDoc>
1 : Codeunit<Release Assembly Document>.PROCEDURE<OnBeforeReopenAssemblyDoc>
2 : Codeunit<Invite External Accountant>.PROCEDURE<OnInvitationCreateNewUser>
1 : Codeunit<Assembly Line Management>.PROCEDURE<OnAfterTransferBOMComponent>
1 : Codeunit<Assembly Line Management>.PROCEDURE<OnBeforeUpdateAssemblyLines>
1 : Codeunit<Postcode Service Manager>.PROCEDURE<OnCheckIsServiceConfigured>
1 : Codeunit<Postcode Service Manager>.PROCEDURE<OnDiscoverPostcodeServices>
1 : Codeunit<Postcode Service Manager>.PROCEDURE<OnRetrieveAddress>
1 : Codeunit<Postcode Service Manager>.PROCEDURE<OnRetrieveAddressList>
1 : Codeunit<Postcode Service Manager>.PROCEDURE<OnShowConfigurationPage>
1 : Codeunit<Purch.-Post (Yes/No)>.PROCEDURE<OnAfterConfirmPost>
1 : Codeunit<Purch.-Post (Yes/No)>.PROCEDURE<OnAfterPost>
1 : Codeunit<Purch.-Post (Yes/No)>.PROCEDURE<OnBeforeConfirmPost>
1 : Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnAfterCopyProfile>
1 : Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnAfterGetDefaultRoleCenter>
1 : Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnBeforeOpenSettings>
1 : Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnGetBuiltInRoleCenterFilter>
1 : Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnInitializeProfiles>
2 : Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnProfileChanged>
6 : Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnRoleCenterOpen>
1 : Codeunit<Application Area Mgmt.>.PROCEDURE<OnBeforeLookupExperienceTier>
1 : Codeunit<Application Area Mgmt.>.PROCEDURE<OnGetBasicExperienceAppAreas>
1 : Codeunit<Application Area Mgmt.>.PROCEDURE<OnGetEssentialExperienceAppAreas>
1 : Codeunit<Application Area Mgmt.>.PROCEDURE<OnGetPremiumExperienceAppAreas>
1 : Codeunit<Application Area Mgmt.>.PROCEDURE<OnSetExperienceTier>
1 : Codeunit<Application Area Mgmt.>.PROCEDURE<OnValidateApplicationAreas>
1 : Codeunit<Application Area Mgmt. Facade>.PROCEDURE<OnBeforeLookupExperienceTier>
1 : Codeunit<Application Area Mgmt. Facade>.PROCEDURE<OnGetBasicExperienceAppAreas>
1 : Codeunit<Application Area Mgmt. Facade>.PROCEDURE<OnGetEssentialExperienceAppAreas>
1 : Codeunit<Application Area Mgmt. Facade>.PROCEDURE<OnGetPremiumExperienceAppAreas>
1 : Codeunit<Application Area Mgmt. Facade>.PROCEDURE<OnSetExperienceTier>
1 : Codeunit<Application Area Mgmt. Facade>.PROCEDURE<OnValidateApplicationAreas>
1 : Codeunit<Purch.-Post + Print>.PROCEDURE<OnAfterConfirmPost>
1 : Codeunit<Purch.-Post + Print>.PROCEDURE<OnAfterPost>
1 : Codeunit<Purch.-Post + Print>.PROCEDURE<OnBeforeConfirmPost>
1 : Codeunit<Purch.-Quote to Order (Yes/No)>.PROCEDURE<OnBeforePurchQuoteToOrder>
1 : Codeunit<Time Sheet Management>.PROCEDURE<OnBeforeToTimeSheetLineInsert>
1 : Codeunit<Time Sheet Management>.PROCEDURE<OnCheckInsertJobPlanningLine>
1 : Codeunit<Time Sheet Approval Management>.PROCEDURE<OnAfterApprove>
1 : Codeunit<Time Sheet Approval Management>.PROCEDURE<OnAfterReject>
1 : Codeunit<Time Sheet Approval Management>.PROCEDURE<OnAfterReopenApproved>
1 : Codeunit<Time Sheet Approval Management>.PROCEDURE<OnAfterReopenSubmitted>
1 : Codeunit<Time Sheet Approval Management>.PROCEDURE<OnAfterSubmit>
1 : Codeunit<Time Sheet Approval Management>.PROCEDURE<OnBeforeInsertEmployeeAbsence>
1 : Codeunit<Mail Management>.PROCEDURE<OnAfterDeleteTempAttachments>
1 : Codeunit<Mail Management>.PROCEDURE<OnBeforeCheckValidEmailAddress>
1 : Codeunit<Mail Management>.PROCEDURE<OnBeforeDoSending>
1 : Codeunit<Mail Management>.PROCEDURE<OnBeforeSendMailOnWinClient>
1 : Codeunit<Mail Management>.PROCEDURE<OnBeforeSentViaSMTP>
1 : Codeunit<Purch.-Quote to Order>.PROCEDURE<OnAfterInsertAllPurchOrderLines>
1 : Codeunit<Purch.-Quote to Order>.PROCEDURE<OnAfterInsertPurchOrderLine>
1 : Codeunit<Purch.-Quote to Order>.PROCEDURE<OnBeforeDeletePurchQuote>
1 : Codeunit<Purch.-Quote to Order>.PROCEDURE<OnBeforeInsertPurchOrderHeader>
1 : Codeunit<Purch.-Quote to Order>.PROCEDURE<OnBeforeInsertPurchOrderLine>
1 : Codeunit<Document Report Mgt.>.PROCEDURE<OnAfterMergeWordDocument>
1 : Codeunit<Document Report Mgt.>.PROCEDURE<OnBeforeMergeDocument>
1 : Codeunit<Document Report Mgt.>.PROCEDURE<OnBeforeMergeWordDocument>
1 : Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnAfterInsertAllPurchOrderLines>
1 : Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnAfterPurchOrderLineInsert>
1 : Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnBeforeInsertPurchOrderHeader>
1 : Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnBeforeInsertPurchOrderLine>
1 : Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnBeforePurchOrderHeaderModify>
1 : Codeunit<Purchase Post via Job Queue>.PROCEDURE<OnBeforeEnqueuePurchDoc>
1 : Codeunit<Purchase Post via Job Queue>.PROCEDURE<OnBeforeReleasePurchDoc>
1 : Codeunit<Payment Registration Mgt.>.PROCEDURE<OnAfterPostPaymentRegistration>
4 : Codeunit<Identity Management>.PROCEDURE<OnBeforeGetApplicationIdentifier>
1 : Codeunit<Effective Permissions Mgt.>.PROCEDURE<OnTenantPermissionModified>
1 : Codeunit<Data Upgrade Mgt.>.PROCEDURE<OnCheckPreconditionsPerCompany>
1 : Codeunit<Data Upgrade Mgt.>.PROCEDURE<OnCheckPreconditionsPerDatabase>
1 : Codeunit<Data Upgrade Mgt.>.PROCEDURE<OnIsUpgradeInProgress>
1 : Codeunit<Data Upgrade Mgt.>.PROCEDURE<OnUpgradePerCompany>
1 : Codeunit<Data Upgrade Mgt.>.PROCEDURE<OnUpgradePerDatabase>
1 : Codeunit<Data Upgrade Mgt.>.PROCEDURE<OnValidateUpgradePerCompany>
1 : Codeunit<Data Upgrade Mgt.>.PROCEDURE<OnValidateUpgradePerDatabase>
1 : Codeunit<Check Routing Lines>.PROCEDURE<OnBeforeFindRoutingLines>
1 : Codeunit<Routing Line-Copy Lines>.PROCEDURE<OnAfterCopyRouting>
1 : Codeunit<Routing Line-Copy Lines>.PROCEDURE<OnAfterDeleteRouting>
1 : Codeunit<Routing Line-Copy Lines>.PROCEDURE<OnCopyRountingOnAfterRoutingLineInsert>
1 : Codeunit<Calendar Absence Management>.PROCEDURE<OnAfterUpdateAbsence>
1 : Codeunit<Production BOM-Copy>.PROCEDURE<OnAfterInsertProdBOMComponent>
1 : Codeunit<Production BOM-Copy>.PROCEDURE<OnBeforeCopyBOM>
1 : Codeunit<Production BOM-Copy>.PROCEDURE<OnBeforeInsertProdBOMComponent>
1 : Codeunit<Prod. Order Route Management>.PROCEDURE<OnBeforeCalcPreviousOperations>
1 : Codeunit<Prod. Order Route Management>.PROCEDURE<OnBeforeSetNextOperations>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterInsertProdRoutingLine>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterProdOrderCompFilter>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterTransferBOMComponent>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterTransferRouting>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterTransferRoutingLine>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterTransferTaskInfo>
1 : Codeunit<Calculate Routing Line>.PROCEDURE<OnAfterCalculateRoutingLine>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnAfterInitProdOrderLine>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnAfterProcessProdOrderLine>
2 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnAfterProdOrderLineInsert>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnAfterUpdateProdOrderLine>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnBeforeProdOrderLine3Modify>
2 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnBeforeProdOrderLineInsert>
2 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCheckMakeOrderLineBeforeIf>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCheckMakeOrderLineBeforeInsert>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCopyFromFamilyOnBeforeInsertProdOrderLine>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCopyFromSalesOrderOnBeforeProdOrderLineModify>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCopyFromSalesOrderOnBeforeSalesPlanLineInsert>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnInitProdOrderLineAfterScrap>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnInitProdOrderLineAfterVariantCode>
1 : Codeunit<Create Prod. Order from Sale>.PROCEDURE<OnAfterCreateProdOrder>
1 : Codeunit<Create Prod. Order from Sale>.PROCEDURE<OnAfterCreateProdOrderFromSalesLine>
1 : Codeunit<Create Prod. Order from Sale>.PROCEDURE<OnBeforeCreateProdOrderLines>
1 : Codeunit<Planning Line Management>.PROCEDURE<OnAfterTransferRouting>
1 : Codeunit<Planning Line Management>.PROCEDURE<OnAfterTransferRtngLine>
1 : Codeunit<Planning Line Management>.PROCEDURE<OnBeforeInsertAsmPlanningComponent>
1 : Codeunit<Planning Line Management>.PROCEDURE<OnBeforeInsertPlanningComponent>
1 : Codeunit<Planning Line Management>.PROCEDURE<OnBeforeModifyPlanningComponent>
1 : Codeunit<Planning Line Management>.PROCEDURE<OnCheckMultiLevelStructureOnBeforeInsertPlanningLine>
1 : Codeunit<Planning Line Management>.PROCEDURE<OnTransferBOMOnBeforeGetDefaultBin>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnAfterInsertAsmHeader>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnAfterInsertProdOrder>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnAfterInsertProdOrderLine>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnAfterProdOrderChgAndReshedule>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnAfterProdOrderRtngLineInsert>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnAfterTransferAsmPlanningComp>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnAfterTransferPlanningComp>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnAfterTransferPlanningRtngLine>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnAsmOrderChgAndResheduleOnBeforeAsmHeaderModify>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnInsertProdOrderLineWithReqLine>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnInsertProdOrderWithReqLine>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnInsertTransLineWithReqLine>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnPurchOrderChgAndResheduleOnBeforePurchLineModify>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnTransOrderChgAndResheduleOnBeforeTransLineModify>
1 : Codeunit<Create Reserv. Entry>.PROCEDURE<OnAfterCopyFromInsertReservEntry>
1 : Codeunit<Create Reserv. Entry>.PROCEDURE<OnAfterSignFactor>
1 : Codeunit<Create Reserv. Entry>.PROCEDURE<OnBeforeUseOldReservEntry>
1 : Codeunit<Create Reserv. Entry>.PROCEDURE<OnCreateEntryOnBeforeSurplusCondition>
1 : Codeunit<Reservation Engine Mgt.>.PROCEDURE<OnAfterCreateText>
1 : Codeunit<Reservation Engine Mgt.>.PROCEDURE<OnAfterModifyShipmentDate>
2 : Codeunit<Reservation Engine Mgt.>.PROCEDURE<OnBeforeUpdateItemTracking>
1 : Codeunit<Sales Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
1 : Codeunit<Req. Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
1 : Codeunit<Purch. Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
1 : Codeunit<Item Jnl. Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
2 : Codeunit<Transfer Line-Reserve>.PROCEDURE<OnAfterCallItemTracking>
1 : Codeunit<Transfer Line-Reserve>.PROCEDURE<OnTransferTransferToItemJnlLineTransferFields>
1 : Codeunit<Transfer Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
1 : Codeunit<Prod. Order Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
1 : Codeunit<Prod. Order Comp.-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
1 : Codeunit<Plng. Component-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
1 : Codeunit<Service Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
1 : Codeunit<Job Jnl. Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
1 : Codeunit<Reservation Management>.PROCEDURE<OnAfterCalcReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnAutoReserveItemLedgEntryOnFindFirstItemLedgEntry>
1 : Codeunit<Reservation Management>.PROCEDURE<OnAutoReserveItemLedgEntryOnFindNextItemLedgEntry>
1 : Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveAssemblyHeader>
1 : Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveAssemblyLine>
1 : Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveItemLedgEntry>
1 : Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveJobPlanningLine>
1 : Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveProdOrderComp>
1 : Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveProdOrderLine>
1 : Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReservePurchLine>
1 : Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveSalesLine>
1 : Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveServLine>
1 : Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveTransLine>
1 : Codeunit<Reservation Management>.PROCEDURE<OnBeforeCreateReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnBeforeUpdateItemLedgEntryStats>
1 : Codeunit<Reservation Management>.PROCEDURE<OnSetAssemblyHeaderOnBeforeUpdateReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnSetAssemblyLineOnBeforeUpdateReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnSetItemJnlLineOnBeforeUpdateReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnSetItemLedgEntryOnBeforeUpdateReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnSetJobJnlLineOnBeforeUpdateReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnSetJobPlanningLineOnBeforeUpdateReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnSetPlanningCompOnBeforeUpdateReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnSetProdOrderCompOnBeforeUpdateReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnSetProdOrderLineOnBeforeUpdateReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnSetPurchLineOnBeforeUpdateReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnSetReqLineOnBeforeUpdateReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnSetSalesLineOnBeforeUpdateReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnSetServLineOnBeforeUpdateReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnSetTransLineOnBeforeUpdateReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnUpdateItemLedgEntryStatsUpdateTotals>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterDemandToInvProfile>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterInsertSafetyStockDemands>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterPostInvChgReminder>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterPrePlanDateSupplyProc>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterSetOrderPriority>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterSupplyToInvProfile>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterTransToChildInvProfile>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforeBlanketOrderConsumpFind>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforeCalculatePlanFromWorksheet>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforeCheckScheduleOut>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforeDemandInvtProfileInsert>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforeMatchAttributesDemandApplicationLoop>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforePlanStepSettingOnStartOver>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforePostInvChgReminder>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforePrePlanDateApplicationLoop>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforePrePlanDateDemandProc>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforePrePlanDateSupplyProc>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnEndMatchAttributesDemandApplicationLoop>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnEndOfPrePlanDateApplicationLoop>
2 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnFindCombinationAfterAssignTempSKU>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnStartOfMatchAttributesDemandApplicationLoop>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnStartOfPrePlanDateApplicationLoop>
1 : Codeunit<AvailabilityManagement>.PROCEDURE<OnAfterCaseCalcCapableToPromise>
1 : Codeunit<AvailabilityManagement>.PROCEDURE<OnAfterUpdateSourceLine>
1 : Codeunit<AvailabilityManagement>.PROCEDURE<OnBeforeOrderPromisingLineInsert>
1 : Codeunit<AvailabilityManagement>.PROCEDURE<OnCreateReservationsAfterFirstCASE>
1 : Codeunit<AvailabilityManagement>.PROCEDURE<OnCreateReservationsAfterSecondCASE>
1 : Page<Job Resource Prices>.PROCEDURE<OnAfterLookupCode>
1 : Page<Available - Job Planning Lines>.PROCEDURE<OnAfterUpdateReservFrom>
1 : Page<Available - Job Planning Lines>.PROCEDURE<OnAfterUpdateReservMgt>
1 : Page<Company Detail>.PROCEDURE<OnGoToCompany>
1 : Page<Data Privacy Wizard>.PROCEDURE<OnDrillDownForEntityNumber>
1 : Page<Data Privacy Wizard>.PROCEDURE<OnEntityNoValidate>
1 : Page<Create Payment>.PROCEDURE<OnBeforeUpdateGnlJnlLineDimensionsFromTempBuffer>
1 : Page<Create Payment>.PROCEDURE<OnUpdateTempBufferFromVendorLedgerEntry>
1 : Page<Payment Reconciliation Journal>.PROCEDURE<OnAfterImportBankTransactions>
1 : Page<Payment Reconciliation Journal>.PROCEDURE<OnAtActionApplyAutomatically>
1 : Page<Payment Reconciliation Journal>.PROCEDURE<OnUpdateSorting>
1 : Page<Payment Application>.PROCEDURE<OnSetBankAccReconcLine>
1 : Page<Posted Sales Credit Memos>.PROCEDURE<OnBeforePrintRecords>
1 : Page<Headline RC Business Manager>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
1 : Page<Headline RC Order Processor>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
1 : Page<Headline RC Accountant>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
1 : Page<Headline RC Project Manager>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
1 : Page<Headline RC Relationship Mgt.>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
1 : Page<Headline RC Administrator>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
1 : Page<Headline RC Team Member>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
1 : Page<Headline RC Prod. Planner>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
1 : Page<Headline RC Serv. Dispatcher>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
1 : Page<Posted Purchase Credit Memos>.PROCEDURE<OnBeforePrintRecords>
1 : Page<My Notifications>.PROCEDURE<OnAfterInitializingNotificationWithDefaultState>
2 : Page<My Notifications>.PROCEDURE<OnInitializingNotificationWithDefaultState>
1 : Page<Sales Statistics>.PROCEDURE<OnAfterCalculateTotals>
1 : Page<Sales Statistics>.PROCEDURE<OnOpenPageOnBeforeSetEditable>
1 : Page<Purchase Statistics>.PROCEDURE<OnAfterCalculateTotals>
1 : Page<Purchase Statistics>.PROCEDURE<OnOpenPageOnBeforeSetEditable>
1 : Page<Office Suggested Line Items>.PROCEDURE<OnDisableMessage>
1 : Page<Payroll Import Transactions>.PROCEDURE<OnCreateSampleFile>
1 : Page<Payroll Import Transactions>.PROCEDURE<OnImportPayrollTransactions>
1 : Page<Data Migration Overview>.PROCEDURE<OnRequestAbort>
1 : Page<Incoming Document>.PROCEDURE<OnCloseIncomingDocumentFromAction>
1 : Page<Incoming Documents>.PROCEDURE<OnCloseIncomingDocumentsFromActions>
1 : Page<Customer Card>.PROCEDURE<OnBeforeCreateCustomerFromTemplate>
1 : Page<Customer Card>.PROCEDURE<SetCaption>
1 : Page<O365 Import Export Settings>.PROCEDURE<OnInsertMenuItems>
1 : Page<Customer List>.PROCEDURE<SetCaption>
1 : Page<Apply Customer Entries>.PROCEDURE<OnBeforeHandledChosenEntries>
1 : Page<Apply Vendor Entries>.PROCEDURE<OnBeforeHandledChosenEntries>
1 : Page<BC O365 No. Series Card>.PROCEDURE<OnAfterNoSeriesModified>
1 : Page<BC O365 Quickbooks Settings>.PROCEDURE<OnQuickBooksDesktopSyncClicked>
1 : Page<BC O365 Quickbooks Settings>.PROCEDURE<OnQuickBooksOnlineSyncClicked>
1 : Page<Req. Worksheet>.PROCEDURE<OnBeforeOpenReqWorksheet>
1 : Page<Navigate>.PROCEDURE<OnAfterNavigateFindRecords>
1 : Page<Navigate>.PROCEDURE<OnAfterNavigateFindTrackingRecords>
1 : Page<Navigate>.PROCEDURE<OnAfterNavigateShowRecords>
1 : Page<Navigate>.PROCEDURE<OnBeforeNavigateShowRecords>
1 : Page<Item Availability Lines>.PROCEDURE<OnAfterSet>
1 : Page<Item Availability Lines>.PROCEDURE<OnAfterSetItemFilter>
1 : Page<Sales Order Statistics>.PROCEDURE<OnOpenPageOnBeforeSetEditable>
1 : Page<Purchase Order Statistics>.PROCEDURE<OnOpenPageOnBeforeSetEditable>
1 : Page<G/L Balance by Dimension>.PROCEDURE<OnBeforeGLAccFilter>
1 : Page<Sales Quote>.PROCEDURE<OnBeforeStatisticsAction>
1 : Page<Sales Order>.PROCEDURE<OnBeforeStatisticsAction>
1 : Page<Sales Invoice>.PROCEDURE<OnBeforeStatisticsAction>
1 : Page<Reminder Lines>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Sales Credit Memo>.PROCEDURE<OnBeforeStatisticsAction>
1 : Page<Finance Charge Memo Lines>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Sales Order Subform>.PROCEDURE<OnAfterQuantityOnAfterValidate>
1 : Page<Sales Order Subform>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Sales Order Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
1 : Page<Sales Invoice Subform>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Sales Invoice Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
1 : Page<VAT Statement Preview Line>.PROCEDURE<OnBeforeOpenPageVATEntryTotaling>
1 : Page<Reservation Entries>.PROCEDURE<OnAfterLookupReserved>
1 : Page<Reservation>.PROCEDURE<OnAfterRelatesToSummEntry>
1 : Page<Reservation>.PROCEDURE<OnAfterSetAssemblyHeader>
1 : Page<Reservation>.PROCEDURE<OnAfterSetAssemblyLine>
1 : Page<Reservation>.PROCEDURE<OnAfterSetItemJnlLine>
1 : Page<Reservation>.PROCEDURE<OnAfterSetJobPlanningLine>
1 : Page<Reservation>.PROCEDURE<OnAfterSetPlanningComponent>
1 : Page<Reservation>.PROCEDURE<OnAfterSetProdOrderComponent>
1 : Page<Reservation>.PROCEDURE<OnAfterSetProdOrderLine>
1 : Page<Reservation>.PROCEDURE<OnAfterSetPurchLine>
1 : Page<Reservation>.PROCEDURE<OnAfterSetReqLine>
1 : Page<Reservation>.PROCEDURE<OnAfterSetSalesLine>
1 : Page<Reservation>.PROCEDURE<OnAfterSetServiceLine>
1 : Page<Reservation>.PROCEDURE<OnAfterSetTransLine>
1 : Page<Reservation>.PROCEDURE<OnAfterUpdateReservFrom>
1 : Page<Reservation>.PROCEDURE<OnFilterReservEntryOnAfterFilterSource>
1 : Page<Available - Sales Lines>.PROCEDURE<OnAfterUpdateReservFrom>
1 : Page<Available - Sales Lines>.PROCEDURE<OnAfterUpdateReservMgt>
1 : Page<Available - Requisition Lines>.PROCEDURE<OnAfterUpdateReservFrom>
1 : Page<Available - Requisition Lines>.PROCEDURE<OnAfterUpdateReservMgt>
1 : Page<Available - Purchase Lines>.PROCEDURE<OnAfterOpenPage>
1 : Page<Available - Purchase Lines>.PROCEDURE<OnAfterUpdateReservFrom>
1 : Page<Available - Purchase Lines>.PROCEDURE<OnAfterUpdateReservMgt>
1 : Page<Available - Purchase Lines>.PROCEDURE<OnBeforeFilterReservEntry>
1 : Page<Available - Item Ledg. Entries>.PROCEDURE<OnAfterUpdateReservFrom>
1 : Page<Available - Item Ledg. Entries>.PROCEDURE<OnAfterUpdateReservMgt>
1 : Page<Contact Card>.PROCEDURE<OnBeforePrintContactCoverSheet>
1 : Page<Blanket Sales Order>.PROCEDURE<OnBeforeStatisticsAction>
1 : Page<Blanket Sales Order Subform>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Blanket Sales Order Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
1 : Page<Blanket Purchase Order Subform>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Blanket Purchase Order Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
1 : Page<Contact Profile Answers>.PROCEDURE<OnAfterUpdateProfileAnswer>
1 : Page<Purchase Order Subform>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Purchase Order Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
2 : Page<Default Dimensions-Multiple>.PROCEDURE<OnBeforeSetCommonDefaultCopyFields>
1 : Page<Purch. Invoice Subform>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Purch. Invoice Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
1 : Page<Item Charge Assignment (Sales)>.PROCEDURE<OnUpdateQtyAssgntOnAfterAssignableQty>
1 : Page<Service Lines>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Service Item Worksheet Subform>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Service Invoice Subform>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Service Credit Memo Subform>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Service Quote Lines>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Available - Service Lines>.PROCEDURE<OnAfterUpdateReservFrom>
1 : Page<Available - Service Lines>.PROCEDURE<OnAfterUpdateReservMgt>
1 : Page<Azure AD Access Dialog>.PROCEDURE<OnOAuthAccessDenied>
1 : Page<Item Tracking Summary>.PROCEDURE<OnAfterSetCurrentBinAndItemTrkgCode>
1 : Page<Item Tracking Summary>.PROCEDURE<OnBeforeAutoSelectTrackingNo>
1 : Page<Item Tracking Lines>.PROCEDURE<OnAddReservEntriesToTempRecSetOnBeforeInsert>
4 : Page<Item Tracking Lines>.PROCEDURE<OnAfterAssignNewTrackingNo>
2 : Page<Item Tracking Lines>.PROCEDURE<OnAfterClearTrackingSpec>
2 : Page<Item Tracking Lines>.PROCEDURE<OnAfterCopyTrackingSpec>
1 : Page<Item Tracking Lines>.PROCEDURE<OnAfterCreateReservEntryFor>
1 : Page<Item Tracking Lines>.PROCEDURE<OnAfterGetHandleSource>
1 : Page<Item Tracking Lines>.PROCEDURE<OnAfterMoveFields>
1 : Page<Item Tracking Lines>.PROCEDURE<OnAfterRegisterItemTrackingLines>
1 : Page<Item Tracking Lines>.PROCEDURE<OnAfterSetSourceSpec>
1 : Page<Item Tracking Lines>.PROCEDURE<OnBeforeSetSourceSpec>
1 : Page<Item Tracking Lines>.PROCEDURE<OnBeforeWriteToDatabase>
1 : Page<Item Tracking Lines>.PROCEDURE<OnRegisterChangeOnAfterCreateReservEntry>
3 : Page<Item Tracking Lines>.PROCEDURE<OnSelectEntriesOnAfterTransferFields>
1 : Page<Whse. Item Tracking Lines>.PROCEDURE<OnAfterSetSource>
1 : Page<Sales Return Order>.PROCEDURE<OnBeforeStatisticsAction>
1 : Page<Sales Return Order Subform>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Sales Return Order Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
1 : Page<Purchase Return Order Subform>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Purchase Return Order Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
1 : Page<Return Shipment Lines>.PROCEDURE<OnOpenPageOnSetFilters>
1 : Page<Job Queue Log Entries>.PROCEDURE<OnShowDetails>
1 : Page<Item Attribute Value List>.PROCEDURE<OnAfterItemAttributeValueMappingDelete>
1 : Page<Item Attribute Value List>.PROCEDURE<OnBeforeItemAttributeValueMappingModify>
1 : Page<Invite External Accountant>.PROCEDURE<OnInvitationEnd>
1 : Page<Invite External Accountant>.PROCEDURE<OnInvitationNoAADPermissionsFail>
1 : Page<Invite External Accountant>.PROCEDURE<OnInvitationNoExternalAccountantLicenseFail>
1 : Page<Invite External Accountant>.PROCEDURE<OnInvitationNoUserTablePermissionsFail>
1 : Page<Invite External Accountant>.PROCEDURE<OnInvitationStart>
1 : Page<My Settings>.PROCEDURE<OnBeforeLanguageChange>
1 : Page<My Settings>.PROCEDURE<OnBeforeWorkdateChange>
1 : Page<My Settings>.PROCEDURE<OnCompanyChange>
1 : Page<My Settings>.PROCEDURE<OnQueryClosePageEvent>
1 : Page<My Settings>.PROCEDURE<OnUserRoleCenterChange>
1 : Page<Available - Assembly Headers>.PROCEDURE<OnAfterUpdateReservFrom>
1 : Page<Available - Assembly Headers>.PROCEDURE<OnAfterUpdateReservMgt>
1 : Page<Available - Assembly Lines>.PROCEDURE<OnAfterUpdateReservFrom>
1 : Page<Available - Assembly Lines>.PROCEDURE<OnAfterUpdateReservMgt>
1 : Page<Sales Quote Subform>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Sales Quote Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
1 : Page<Time Sheet>.PROCEDURE<OnAfterFilterAllLines>
1 : Page<Time Sheet>.PROCEDURE<OnAfterProcess>
1 : Page<Time Sheet>.PROCEDURE<OnProcessOnAfterTimeSheetLinesFiltered>
1 : Page<Manager Time Sheet>.PROCEDURE<OnAfterFilterAllLines>
1 : Page<Manager Time Sheet>.PROCEDURE<OnAfterProcess>
1 : Page<Manager Time Sheet>.PROCEDURE<OnProcessOnAfterTimeSheetLinesFiltered>
1 : Page<Manager Time Sheet by Job>.PROCEDURE<OnAfterFilterAllLines>
1 : Page<Manager Time Sheet by Job>.PROCEDURE<OnAfterProcess>
1 : Page<Manager Time Sheet by Job>.PROCEDURE<OnProcessOnAfterTimeSheetLinesFiltered>
1 : Page<Sales Cr. Memo Subform>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Sales Cr. Memo Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
1 : Page<Purchase Quote Subform>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Purchase Quote Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
1 : Page<Purch. Cr. Memo Subform>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Purch. Cr. Memo Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
1 : Page<Effective Permissions>.PROCEDURE<OnEffectivePermissionsPopulated>
1 : Page<Available - Transfer Lines>.PROCEDURE<OnAfterUpdateReservFrom>
1 : Page<Available - Transfer Lines>.PROCEDURE<OnAfterUpdateReservMgt>
1 : Page<Available - Prod. Order Lines>.PROCEDURE<OnAfterUpdateReservFrom>
1 : Page<Available - Prod. Order Lines>.PROCEDURE<OnAfterUpdateReservMgt>
1 : Page<Available - Prod. Order Comp.>.PROCEDURE<OnAfterUpdateReservFrom>
1 : Page<Available - Prod. Order Comp.>.PROCEDURE<OnAfterUpdateReservMgt>
1 : Page<Avail. - Planning Components>.PROCEDURE<OnAfterUpdateReservFrom>
1 : Page<Avail. - Planning Components>.PROCEDURE<OnAfterUpdateReservMgt>
1 : Page<Item Availability Line List>.PROCEDURE<OnAfterLookupEntries>
1 : Page<Item Availability Line List>.PROCEDURE<OnAfterMakeEntries>
1 : Page<Item Availability Line List>.PROCEDURE<OnItemCalcFields>
1 : Page<Item Availability Line List>.PROCEDURE<OnItemLedgerEntrySetFilter>
1 : Page<Item Availability Line List>.PROCEDURE<OnItemSetFilter>
1 : Page<Item Availability Line List>.PROCEDURE<OnLookupExtensionTable>
1 : Report<Post Inventory Cost to G/L>.PROCEDURE<OnBeforePreReport>
1 : Report<Copy Cost Acctg. Budget to G/L>.PROCEDURE<OnAfterUpdateBudgetDimensions>
1 : Report<Standard Sales - Pro Forma Inv>.PROCEDURE<OnAfterLineOnPreDataItem>
1 : Report<Standard Sales - Pro Forma Inv>.PROCEDURE<OnBeforeLineOnAfterGetRecord>
1 : Report<Standard Sales - Draft Invoice>.PROCEDURE<OnAfterSalesPostGetSalesLines>
1 : Report<Standard Sales - Invoice>.PROCEDURE<OnAfterLineOnPreDataItem>
1 : Report<Standard Sales - Invoice>.PROCEDURE<OnBeforeGetDocumentCaption>
1 : Report<Standard Sales - Invoice>.PROCEDURE<OnBeforeLineOnAfterGetRecord>
1 : Report<Notification Email>.PROCEDURE<OnSetReportFieldPlaceholders>
1 : Report<Suggest Bank Acc. Recon. Lines>.PROCEDURE<OnPreDataItemBankAccount>
1 : Report<Send Overdue Appr. Notif.>.PROCEDURE<OnSendOverdueNotifications>
1 : Report<Issue Finance Charge Memos>.PROCEDURE<OnBeforePrintRecords>
1 : Report<Calc. and Post VAT Settlement>.PROCEDURE<OnAfterPostReport>
1 : Report<Calc. and Post VAT Settlement>.PROCEDURE<OnAfterPreReport>
1 : Report<Calc. and Post VAT Settlement>.PROCEDURE<OnBeforePreReport>
1 : Report<Sales Document - Test>.PROCEDURE<OnAfterSalesPostGetSalesLines>
1 : Report<Sales - Invoice>.PROCEDURE<OnAfterGetRecordSalesInvoiceHeader>
1 : Report<Sales - Invoice>.PROCEDURE<OnBeforeGetDocumentCaption>
1 : Report<Sales - Invoice>.PROCEDURE<OnGetReferenceText>
1 : Report<Sales - Credit Memo>.PROCEDURE<OnAfterGetRecordSalesCrMemoHeader>
1 : Report<Sales Reservation Avail.>.PROCEDURE<OnAfterSalesLineModify>
1 : Report<Delete Invd Blnkt Sales Orders>.PROCEDURE<OnBeforeDeleteSalesHeader>
1 : Report<Copy Sales Document>.PROCEDURE<OnBeforeValidateIncludeHeader>
1 : Report<Combine Shipments>.PROCEDURE<OnAfterGetRecordSalesOrderHeader>
1 : Report<Combine Shipments>.PROCEDURE<OnAfterInsertSalesInvHeader>
1 : Report<Combine Shipments>.PROCEDURE<OnBeforePostReport>
1 : Report<Combine Shipments>.PROCEDURE<OnBeforePreReport>
1 : Report<Combine Shipments>.PROCEDURE<OnFinalizeSalesInvHeader>
1 : Report<Delete Invoiced Sales Orders>.PROCEDURE<OnAfterDeleteSalesLine>
1 : Report<Suggest Vendor Payments>.PROCEDURE<OnBeforeUpdateGnlJnlLineDimensionsFromTempBuffer>
1 : Report<Suggest Vendor Payments>.PROCEDURE<OnUpdateTempBufferFromVendorLedgerEntry>
1 : Report<Purchase Reservation Avail.>.PROCEDURE<OnAfterPurchLineModify>
1 : Report<Copy Purchase Document>.PROCEDURE<OnBeforeValidateIncludeHeader>
1 : Report<Delete Invoiced Purch. Orders>.PROCEDURE<OnBeforePurchLineDelete>
1 : Report<Move IC Trans. to Partner Comp>.PROCEDURE<OnICInboxTransactionCreated>
1 : Report<Calc. Consumption>.PROCEDURE<OnAfterCreateConsumpJnlLine>
1 : Report<Calc. Consumption>.PROCEDURE<OnAfterInsertItemJnlLine>
1 : Report<Calc. Consumption>.PROCEDURE<OnBeforeCreateConsumpJnlLine>
1 : Report<Create Stockkeeping Unit>.PROCEDURE<OnBeforeCreateSKU>
1 : Report<Create Stockkeeping Unit>.PROCEDURE<OnBeforeStockkeepingUnitInsert>
1 : Report<Get Source Documents>.PROCEDURE<OnAfterCreateWhseDocuments>
1 : Report<Calculate Inventory Value>.PROCEDURE<OnAfterInsertItemJnlLine>
1 : Report<Service - Invoice>.PROCEDURE<OnBeforeGetDocumentCaption>
1 : Report<Get Item Ledger Entries>.PROCEDURE<OnBeforeInsertItemJnlLine>
1 : Report<Get Item Ledger Entries>.PROCEDURE<OnBeforeInsertJobLedgerLine>
1 : Report<Get Item Ledger Entries>.PROCEDURE<OnBeforeInsertValueEntryLine>
1 : Report<Delete Invd Sales Ret. Orders>.PROCEDURE<OnBeforeDeleteSalesOrderHeader>
1 : Report<Delete Invd Sales Ret. Orders>.PROCEDURE<OnBeforeDeleteSalesOrderLine>
1 : Report<Delete Invd Purch. Ret. Orders>.PROCEDURE<OnBeforePurchLineDelete>
1 : Report<Create Ret.-Related Documents>.PROCEDURE<OnPreReportOnBeforeCopyPurchDoc>
1 : Report<Create Ret.-Related Documents>.PROCEDURE<OnPreReportOnBeforeCopyPurchReturnDoc>
1 : Report<Create Ret.-Related Documents>.PROCEDURE<OnPreReportOnBeforeCopySalesDoc>
1 : Report<Move Negative Purchase Lines>.PROCEDURE<OnBeforePreReport>
1 : Report<Move Negative Sales Lines>.PROCEDURE<OnBeforePreReport>
1 : Report<Get Sales Orders>.PROCEDURE<OnAfterInsertReqWkshLine>
1 : Report<Get Sales Orders>.PROCEDURE<OnBeforeInsertReqWkshLine>
1 : Report<Calculate Plan - Req. Wksh.>.PROCEDURE<OnAfterOnOpenPage>
1 : Report<Suggest Item Price on Wksh.>.PROCEDURE<OnBeforeModifyOrInsertSalesPriceWksh>
1 : Report<Suggest Item Price on Wksh.>.PROCEDURE<OnBeforeRoundMethod>
1 : Report<Suggest Sales Price on Wksh.>.PROCEDURE<OnBeforeModifyOrInsertSalesPriceWksh>
1 : Report<Implement Price Change>.PROCEDURE<OnAfterCopyToSalesPrice>
1 : Report<Whse.-Source - Create Document>.PROCEDURE<OnBeforeProcessWhseMovWkshLines>
1 : Report<Calculate Whse. Adjustment>.PROCEDURE<OnAfterFunctionInsertItemJnlLine>
1 : Report<Calculate Whse. Adjustment>.PROCEDURE<OnAfterInsertItemJnlLine>
1 : Report<Calculate Whse. Adjustment>.PROCEDURE<OnBeforeFunctionInsertItemJnlLine>
1 : Report<Whse. Calculate Inventory>.PROCEDURE<OnAfterWhseJnlLineInsert>
1 : Report<Whse. Get Bin Content>.PROCEDURE<OnAfterInsertItemJnlLine>
1 : Report<Whse. Get Bin Content>.PROCEDURE<OnAfterInsertTempTrackingSpec>
1 : Report<Date Compress Whse. Entries>.PROCEDURE<OnBeforeInsertNewEntry>
1 : Report<Calculate Inventory>.PROCEDURE<OnAfterFunctionInsertItemJnlLine>
1 : Report<Calculate Inventory>.PROCEDURE<OnAfterInsertItemJnlLine>
1 : Report<Calculate Inventory>.PROCEDURE<OnBeforeFunctionInsertItemJnlLine>
1 : Report<Adjust Cost - Item Entries>.PROCEDURE<OnBeforePreReport>
1 : Report<Export Budget to Excel>.PROCEDURE<OnAfterEnterDimFilter>
1 : Report<Close Income Statement>.PROCEDURE<OnBeforeCheckDimPostingRules>
1 : Report<Suggest Job Jnl. Lines>.PROCEDURE<OnAfterTransferTimeSheetDetailToJobJnlLine>
1 : Report<Suggest Job Jnl. Lines>.PROCEDURE<OnBeforeInsertTempTimeSheetLine>
1 : Report<Calculate Plan - Plan. Wksh.>.PROCEDURE<OnAfterOnOpenPage>
1 : Report<Refresh Production Order>.PROCEDURE<OnAfterRefreshProdOrder>
1 : Report<Replan Production Order>.PROCEDURE<OnAfterLastProdOrderRtngLine>
1 : Report<Replan Production Order>.PROCEDURE<OnProdOrderCompOnAfterGetRecordOnBeforeProdOrderModify>
1 : Report<Calculate Work Center Calendar>.PROCEDURE<OnAfterDeleteWorkCenterCalendarEntries>
1 : Report<Copy Production Order Document>.PROCEDURE<OnAfterCopyProdLines>
1 : Report<Copy Production Order Document>.PROCEDURE<OnBeforeToProdOrderLineInsert>
1 : Report<Copy Production Order Document>.PROCEDURE<OnBeforeToProdOrderModify>
2 : Table<Payment Service Setup>.PROCEDURE<OnCreatePaymentService>
2 : Table<Payment Service Setup>.PROCEDURE<OnDoNotIncludeAnyPaymentServicesOnAllDocuments>
7 : Table<Payment Service Setup>.PROCEDURE<OnRegisterPaymentServiceProviders>
8 : Table<Payment Service Setup>.PROCEDURE<OnRegisterPaymentServices>
1 : Table<Sales Shipment Header>.PROCEDURE<OnBeforeEmailRecords>
1 : Table<Sales Shipment Header>.PROCEDURE<OnBeforePrintRecords>
1 : Table<Sales Shipment Line>.PROCEDURE<OnAfterInitFromSalesLine>
1 : Table<Sales Shipment Line>.PROCEDURE<OnAfterInsertInvLineFromShptLine>
1 : Table<Sales Shipment Line>.PROCEDURE<OnBeforeCodeInsertInvLineFromShptLine>
1 : Table<Sales Shipment Line>.PROCEDURE<OnBeforeInsertInvLineFromShptLine>
1 : Table<Sales Shipment Line>.PROCEDURE<OnBeforeInsertInvLineFromShptLineBeforeInsertTextLine>
1 : Table<Sales Invoice Header>.PROCEDURE<OnGetPaymentReference>
1 : Table<Sales Invoice Header>.PROCEDURE<OnGetPaymentReferenceLbl>
1 : Table<Sales Invoice Line>.PROCEDURE<OnAfterInitFromSalesLine>
1 : Table<Sales Cr.Memo Line>.PROCEDURE<OnAfterInitFromSalesLine>
1 : Table<Purch. Rcpt. Line>.PROCEDURE<OnAfterInitFromPurchLine>
1 : Table<Purch. Rcpt. Line>.PROCEDURE<OnAfterInsertInvLineFromRcptLine>
1 : Table<Purch. Rcpt. Line>.PROCEDURE<OnBeforeInsertInvLineFromRcptLine>
1 : Table<Purch. Rcpt. Line>.PROCEDURE<OnBeforeInsertInvLineFromRcptLineBeforeInsertTextLine>
1 : Table<Purch. Inv. Line>.PROCEDURE<OnAfterInitFromPurchLine>
2 : Table<Transformation Rule>.PROCEDURE<OnCreateTransformationRules>
1 : Table<Transformation Rule>.PROCEDURE<OnTransformation>
1 : Table<Purch. Cr. Memo Line>.PROCEDURE<OnAfterInitFromPurchLine>
2 : Table<Incoming Document>.PROCEDURE<OnAfterCreateGenJnlLineFromIncomingDocFail>
2 : Table<Incoming Document>.PROCEDURE<OnAfterCreateGenJnlLineFromIncomingDocSuccess>
1 : Table<Incoming Document>.PROCEDURE<OnAfterCreatePurchHeaderFromIncomingDoc>
1 : Table<Incoming Document>.PROCEDURE<OnAfterCreateSalesHeaderFromIncomingDoc>
1 : Table<Incoming Document>.PROCEDURE<OnAfterUpdateDocumentFields>
1 : Table<Incoming Document>.PROCEDURE<OnCheckIncomingDocCreateDocRestrictions>
1 : Table<Incoming Document>.PROCEDURE<OnCheckIncomingDocReleaseRestrictions>
1 : Table<Incoming Document>.PROCEDURE<OnCheckIncomingDocSetForOCRRestrictions>
1 : Table<Incoming Document>.PROCEDURE<OnGetDataExchangePath>
1 : Table<Mini Customer Template>.PROCEDURE<OnAfterCreateFieldRefArray>
1 : Table<Item Template>.PROCEDURE<OnAfterCreateFieldRefArray>
1 : Table<Dimensions Template>.PROCEDURE<OnAfterCreateFieldRefArray>
1 : Table<Mini Vendor Template>.PROCEDURE<OnAfterCreateFieldRefArray>
1 : Table<O365 Getting Started>.PROCEDURE<OnO365DemoCompanyInitialize>
2 : Table<Incoming Document Attachment>.PROCEDURE<OnAttachBinaryFile>
1 : Table<Incoming Document Attachment>.PROCEDURE<OnBeforeExtractHeaderFields>
3 : Table<Incoming Document Attachment>.PROCEDURE<OnGetBinaryContent>
3 : Table<Service Connection>.PROCEDURE<OnRegisterServiceConnection>
1 : Table<My Notifications>.PROCEDURE<OnAfterIsNotificationEnabled>
1 : Table<My Notifications>.PROCEDURE<OnStateChanged>
1 : Table<Curr. Exch. Rate Update Setup>.PROCEDURE<OnBeforeSetupCurrencyExchRateService>
1 : Table<Job>.PROCEDURE<OnAfterChangeJobCompletionStatus>
1 : Table<Job>.PROCEDURE<OnAfterUpdateBillToCust>
1 : Table<G/L Entry>.PROCEDURE<OnAfterCopyGLEntryFromGenJnlLine>
1 : Table<Posted Deferral Line>.PROCEDURE<OnBeforeInitFromDeferralLine>
1 : Table<Standard Customer Sales Code>.PROCEDURE<OnAfterCreateSalesInvoice>
1 : Table<Standard Customer Sales Code>.PROCEDURE<OnBeforeApplyStdCodesToSalesLines>
1 : Table<Standard Customer Sales Code>.PROCEDURE<OnBeforeApplyStdCodesToSalesLinesLoop>
1 : Table<Standard Vendor Purchase Code>.PROCEDURE<OnBeforeApplyStdCodesToPurchaseLines>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCaption>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCheckBankAcc>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCheckCust>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCheckDtldCustLedgEntry>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCheckDtldEmplLedgEntry>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCheckDtldVendLedgEntry>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCheckEmpl>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCheckEntries>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCheckFA>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCheckGLAcc>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCheckMaintenance>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCheckVAT>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCheckVend>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromBankAccLedgEntry>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromCustLedgEntry>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromEmplLedgEntry>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromFALedgEntry>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromGLEntry>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromMaintenanceEntry>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromVATEntry>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromVendLedgEntry>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterInsertReversalEntry>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterSetReverseFilter>
8 : Table<Reversal Entry>.PROCEDURE<OnBeforeCheckEntries>
1 : Table<Data Migration Error>.PROCEDURE<OnAfterErrorInserted>
1 : Table<Customer>.PROCEDURE<OnBeforeIsContactUpdateNeeded>
1 : Table<Data Migrator Registration>.PROCEDURE<OnApplySelectedData>
1 : Table<Data Migrator Registration>.PROCEDURE<OnCustomerVendorPostingSetup>
1 : Table<Data Migrator Registration>.PROCEDURE<OnDataImport>
1 : Table<Data Migrator Registration>.PROCEDURE<OnDownloadTemplate>
1 : Table<Data Migrator Registration>.PROCEDURE<OnEnableTogglingDataMigrationOverviewPage>
1 : Table<Data Migrator Registration>.PROCEDURE<OnGetInstructions>
1 : Table<Data Migrator Registration>.PROCEDURE<OnGLPostingSetup>
1 : Table<Data Migrator Registration>.PROCEDURE<OnHasAdvancedApply>
2 : Table<Data Migrator Registration>.PROCEDURE<OnHasErrors>
2 : Table<Data Migrator Registration>.PROCEDURE<OnHasSettings>
1 : Table<Data Migrator Registration>.PROCEDURE<OnHasTemplate>
1 : Table<Data Migrator Registration>.PROCEDURE<OnHideSelected>
1 : Table<Data Migrator Registration>.PROCEDURE<OnOpenAdvancedApply>
1 : Table<Data Migrator Registration>.PROCEDURE<OnOpenSettings>
1 : Table<Data Migrator Registration>.PROCEDURE<OnPostingGroupSetup>
1 : Table<Data Migrator Registration>.PROCEDURE<OnRegisterDataMigrator>
1 : Table<Data Migrator Registration>.PROCEDURE<OnSelectDataToApply>
1 : Table<Data Migrator Registration>.PROCEDURE<OnShowBalance>
1 : Table<Data Migrator Registration>.PROCEDURE<OnShowDuplicateContactsText>
1 : Table<Data Migrator Registration>.PROCEDURE<OnShowErrors>
1 : Table<Data Migrator Registration>.PROCEDURE<OnShowPostingOptions>
1 : Table<Data Migrator Registration>.PROCEDURE<OnShowThatsItMessage>
1 : Table<Data Migrator Registration>.PROCEDURE<OnValidateSettings>
1 : Table<Assisted Company Setup Status>.PROCEDURE<OnEnabled>
1 : Table<Assisted Company Setup Status>.PROCEDURE<OnGetCompanySetupStatus>
1 : Table<Assisted Company Setup Status>.PROCEDURE<OnSetupStatusDrillDown>
1 : Table<Assisted Setup>.PROCEDURE<OnAssistedSetupCompleted>
1 : Table<Assisted Setup>.PROCEDURE<VerifyYodleeIsInstalled>
1 : Table<Aggregated Assisted Setup>.PROCEDURE<OnRegisterAssistedSetup>
1 : Table<Aggregated Assisted Setup>.PROCEDURE<OnUpdateAssistedSetupStatus>
1 : Table<Business Setup>.PROCEDURE<OnOpenBusinessSetupPage>
1 : Table<Business Setup>.PROCEDURE<OnRegisterBusinessSetup>
1 : Table<Res. Ledger Entry>.PROCEDURE<OnAfterCopyFromResJnlLine>
1 : Table<Res. Journal Line>.PROCEDURE<OnAfterCopyResJnlLineFromJobJnlLine>
1 : Table<Res. Journal Line>.PROCEDURE<OnAfterCopyResJnlLineFromSalesLine>
1 : Table<Res. Journal Line>.PROCEDURE<OnAfterCopyResJnlLineFromServLine>
1 : Table<Res. Journal Line>.PROCEDURE<OnAfterCopyResJnlLineFromServShptLine>
1 : Table<Res. Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Cust. Ledger Entry>.PROCEDURE<OnAfterCopyCustLedgerEntryFromCVLedgEntryBuffer>
1 : Table<Cust. Ledger Entry>.PROCEDURE<OnAfterCopyCustLedgerEntryFromGenJnlLine>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterAssignGLAccountValues>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterAssignItemUoM>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterAssignItemValues>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterAssignResourceUoM>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterAssignResourceValues>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterDeleteAmounts>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterSetUpNewLine>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterUpdateAllAmounts>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterUpdateAmountsAndDiscounts>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterUpdateTotalCost>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterUpdateTotalPrice>
1 : Table<Job Journal Line>.PROCEDURE<OnBeforeRetrieveCostPrice>
1 : Table<Job Journal Line>.PROCEDURE<OnBeforeUpdateAllAmounts>
1 : Table<Job Journal Line>.PROCEDURE<OnBeforeValidateWorkTypeCodeQty>
1 : Table<Gen. Jnl. Allocation>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Vendor>.PROCEDURE<OnBeforeIsContactUpdateNeeded>
2 : Table<Gen. Journal Batch>.PROCEDURE<OnCheckGenJournalLineExportRestrictions>
1 : Table<Gen. Journal Batch>.PROCEDURE<OnGeneralJournalBatchBalanced>
1 : Table<Gen. Journal Batch>.PROCEDURE<OnGeneralJournalBatchNotBalanced>
1 : Table<Gen. Journal Batch>.PROCEDURE<OnMoveGenJournalBatch>
1 : Table<Requisition Line>.PROCEDURE<OnAfterCreateDim>
1 : Table<Requisition Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Requisition Line>.PROCEDURE<OnAfterTransferFromAsmHeader>
1 : Table<Requisition Line>.PROCEDURE<OnAfterTransferFromProdOrderLine>
1 : Table<Requisition Line>.PROCEDURE<OnAfterTransferFromPurchaseLine>
1 : Table<Requisition Line>.PROCEDURE<OnAfterTransferFromTransLine>
1 : Table<Requisition Line>.PROCEDURE<OnAfterTransferToTrackingEntry>
1 : Table<Vendor Ledger Entry>.PROCEDURE<OnAfterCopyVendLedgerEntryFromCVLedgEntryBuffer>
1 : Table<Vendor Ledger Entry>.PROCEDURE<OnAfterCopyVendLedgerEntryFromGenJnlLine>
1 : Table<VAT Entry>.PROCEDURE<OnAfterCopyFromGenJnlLine>
1 : Table<Item>.PROCEDURE<OnAfterCheckDocuments>
1 : Table<Bank Account>.PROCEDURE<OnCheckAutoLogonPossibleEvent>
1 : Table<Bank Account>.PROCEDURE<OnCheckLinkedToStatementProviderEvent>
1 : Table<Bank Account>.PROCEDURE<OnDisableStatementProviderEvent>
1 : Table<Bank Account>.PROCEDURE<OnGetDataExchangeDefinitionEvent>
3 : Table<Bank Account>.PROCEDURE<OnGetStatementProvidersEvent>
1 : Table<Bank Account>.PROCEDURE<OnLinkStatementProviderEvent>
1 : Table<Bank Account>.PROCEDURE<OnMarkAccountLinkedEvent>
1 : Table<Bank Account>.PROCEDURE<OnRefreshStatementProviderEvent>
1 : Table<Bank Account>.PROCEDURE<OnSimpleLinkStatementProviderEvent>
2 : Table<Bank Account>.PROCEDURE<OnUnlinkStatementProviderEvent>
1 : Table<Bank Account>.PROCEDURE<OnUpdateBankAccountLinkingEvent>
1 : Table<Bank Account Ledger Entry>.PROCEDURE<OnAfterCopyFromGenJnlLine>
1 : Table<Check Ledger Entry>.PROCEDURE<OnAfterCopyFromBankAccLedgEntry>
1 : Table<Bank Acc. Reconciliation>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Bank Acc. Reconciliation Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Native - API Tax Setup>.PROCEDURE<OnCanDeleteTaxSetup>
1 : Table<Native - API Tax Setup>.PROCEDURE<OnLoadSalesTaxSettings>
1 : Table<Native - API Tax Setup>.PROCEDURE<OnSaveSalesTaxSettings>
1 : Table<Reminder Header>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Reminder Header>.PROCEDURE<OnAfterInsertLines>
1 : Table<Reminder Header>.PROCEDURE<OnAfterUpdateLines>
1 : Table<Reminder Header>.PROCEDURE<OnBeforeInsertBeginTexts>
1 : Table<Reminder Header>.PROCEDURE<OnBeforeInsertEndTexts>
3 : Table<Reminder Header>.PROCEDURE<OnBeforeInsertReminderLine>
1 : Table<Reminder Header>.PROCEDURE<OnBeforeReminderRounding>
1 : Table<Reminder Line>.PROCEDURE<OnAfterCopyFromCustLedgEntry>
1 : Table<Finance Charge Memo Header>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Finance Charge Memo Header>.PROCEDURE<OnBeforeInsertFinChrgMemoLine>
1 : Table<Finance Charge Memo Line>.PROCEDURE<OnAfterCalcFinCharge>
1 : Table<Finance Charge Memo Line>.PROCEDURE<OnBeforeCalcFinCharge>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterClearTracking>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterCopyTrackingFromItemLedgEntry>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterInitFromAsmHeader>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterInitFromAsmLine>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterInitFromItemJnlLine>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterInitFromJobJnlLine>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterInitFromProdOrderComp>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterInitFromProdOrderLine>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterInitFromProdPlanningComp>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterInitFromPurchLine>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterInitFromReqLine>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterInitFromSalesLine>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterInitFromServLine>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterInitFromTransLine>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterSetTrackingFilterFromEntrySummary>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterSetTrackingFilterFromReservEntry>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterSetTrackingFilterFromTrackingSpec>
1 : Table<Reservation Entry>.PROCEDURE<OnAfterCopyTrackingFromItemLedgEntry>
1 : Table<Reservation Entry>.PROCEDURE<OnAfterCopyTrackingFromReservEntry>
1 : Table<Reservation Entry>.PROCEDURE<OnAfterCopyTrackingFromTrackingSpec>
1 : Table<Reservation Entry>.PROCEDURE<OnAfterCopyTrackingFromWhseActivLine>
1 : Table<Reservation Entry>.PROCEDURE<OnAfterSetTrackingFilterFromItemJnlLine>
1 : Table<Reservation Entry>.PROCEDURE<OnAfterSetTrackingFilterFromReservEntry>
1 : Table<Reservation Entry>.PROCEDURE<OnAfterSetTrackingFilterFromTrackingSpec>
1 : Table<Reservation Entry>.PROCEDURE<OnAfterSetTrackingFilterFromWhseSpec>
1 : Table<Reservation Entry>.PROCEDURE<OnAfterTextCaption>
1 : Table<Dimension>.PROCEDURE<OnBeforeCheckIfDimUsed>
1 : Table<Default Dimension>.PROCEDURE<OnAfterUpdateGlobalDimCode>
1 : Table<Sales Header>.PROCEDURE<OnAfterAppliesToDocNoOnLookup>
1 : Table<Sales Header>.PROCEDURE<OnAfterConfirmSalesPrice>
1 : Table<Sales Header>.PROCEDURE<OnAfterCopySellToCustomerAddressFieldsFromCustomer>
1 : Table<Sales Header>.PROCEDURE<OnAfterCopyShipToCustomerAddressFieldsFromCustomer>
1 : Table<Sales Header>.PROCEDURE<OnAfterCopyShipToCustomerAddressFieldsFromShipToAddr>
1 : Table<Sales Header>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Sales Header>.PROCEDURE<OnAfterCreateSalesLine>
1 : Table<Sales Header>.PROCEDURE<OnAfterDeleteAllTempSalesLines>
1 : Table<Sales Header>.PROCEDURE<OnAfterGetNoSeriesCode>
1 : Table<Sales Header>.PROCEDURE<OnAfterInitNoSeries>
1 : Table<Sales Header>.PROCEDURE<OnAfterInitRecord>
1 : Table<Sales Header>.PROCEDURE<OnAfterInsertTempSalesLine>
1 : Table<Sales Header>.PROCEDURE<OnAfterRecreateSalesLine>
1 : Table<Sales Header>.PROCEDURE<OnAfterSalesQuoteAccepted>
1 : Table<Sales Header>.PROCEDURE<OnAfterSendSalesHeader>
1 : Table<Sales Header>.PROCEDURE<OnAfterSetFieldsBilltoCustomer>
1 : Table<Sales Header>.PROCEDURE<OnAfterTestNoSeries>
1 : Table<Sales Header>.PROCEDURE<OnAfterTransferExtendedTextForSalesLineRecreation>
1 : Table<Sales Header>.PROCEDURE<OnAfterUpdateShipToAddress>
1 : Table<Sales Header>.PROCEDURE<OnBeforeRecreateSalesLines>
1 : Table<Sales Header>.PROCEDURE<OnBeforeSalesLineByChangedFieldNo>
1 : Table<Sales Header>.PROCEDURE<OnBeforeSalesLineInsert>
1 : Table<Sales Header>.PROCEDURE<OnBeforeUpdateCurrencyFactor>
3 : Table<Sales Header>.PROCEDURE<OnCheckSalesPostRestrictions>
1 : Table<Sales Header>.PROCEDURE<OnCheckSalesReleaseRestrictions>
3 : Table<Sales Header>.PROCEDURE<OnCustomerCreditLimitExceeded>
3 : Table<Sales Header>.PROCEDURE<OnCustomerCreditLimitNotExceeded>
1 : Table<Sales Header>.PROCEDURE<OnUpdateSalesLineByChangedFieldName>
1 : Table<Sales Line>.PROCEDURE<OnAfterAssignFieldsForNo>
1 : Table<Sales Line>.PROCEDURE<OnAfterAssignFixedAssetValues>
1 : Table<Sales Line>.PROCEDURE<OnAfterAssignGLAccountValues>
1 : Table<Sales Line>.PROCEDURE<OnAfterAssignHeaderValues>
1 : Table<Sales Line>.PROCEDURE<OnAfterAssignItemChargeValues>
1 : Table<Sales Line>.PROCEDURE<OnAfterAssignItemUOM>
1 : Table<Sales Line>.PROCEDURE<OnAfterAssignItemValues>
1 : Table<Sales Line>.PROCEDURE<OnAfterAssignResourceUOM>
1 : Table<Sales Line>.PROCEDURE<OnAfterAssignResourceValues>
1 : Table<Sales Line>.PROCEDURE<OnAfterAssignStdTxtValues>
1 : Table<Sales Line>.PROCEDURE<OnAfterAutoAsmToOrder>
1 : Table<Sales Line>.PROCEDURE<OnAfterBlanketOrderLookup>
1 : Table<Sales Line>.PROCEDURE<OnAfterCalcVATAmountLines>
1 : Table<Sales Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Sales Line>.PROCEDURE<OnAfterGetLineAmountToHandle>
1 : Table<Sales Line>.PROCEDURE<OnAfterGetUnitCost>
1 : Table<Sales Line>.PROCEDURE<OnAfterInitHeaderDefaults>
1 : Table<Sales Line>.PROCEDURE<OnAfterInitOutstandingAmount>
1 : Table<Sales Line>.PROCEDURE<OnAfterInitQtyToInvoice>
1 : Table<Sales Line>.PROCEDURE<OnAfterInitQtyToReceive>
1 : Table<Sales Line>.PROCEDURE<OnAfterInitQtyToShip>
1 : Table<Sales Line>.PROCEDURE<OnAfterSetDefaultQuantity>
1 : Table<Sales Line>.PROCEDURE<OnAfterShowItemSub>
1 : Table<Sales Line>.PROCEDURE<OnAfterTestStatusOpen>
1 : Table<Sales Line>.PROCEDURE<OnAfterUpdateAmounts>
1 : Table<Sales Line>.PROCEDURE<OnAfterUpdateAmountsDone>
1 : Table<Sales Line>.PROCEDURE<OnAfterUpdateTotalAmounts>
1 : Table<Sales Line>.PROCEDURE<OnAfterUpdateUnitPrice>
1 : Table<Sales Line>.PROCEDURE<OnAfterUpdateVATOnLines>
1 : Table<Sales Line>.PROCEDURE<OnAfterValidateReturnReasonCode>
1 : Table<Sales Line>.PROCEDURE<OnBeforeAutoAsmToOrder>
1 : Table<Sales Line>.PROCEDURE<OnBeforeBlanketOrderLookup>
1 : Table<Sales Line>.PROCEDURE<OnBeforeCheckAssocPurchOrder>
1 : Table<Sales Line>.PROCEDURE<OnBeforeUpdateUnitPrice>
2 : Table<Sales Line>.PROCEDURE<OnBeforeVerifyReservedQty>
2 : Table<Sales Line>.PROCEDURE<OnGetDeferralPostDate>
1 : Table<Sales Line>.PROCEDURE<OnValidateNoOnCopyFromTempSalesLine>
1 : Table<Sales Line>.PROCEDURE<OnValidateTypeOnCopyFromTempSalesLine>
1 : Table<Purchase Header>.PROCEDURE<OnAfterAppliesToDocNoOnLookup>
1 : Table<Purchase Header>.PROCEDURE<OnAfterConfirmPurchPrice>
1 : Table<Purchase Header>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Purchase Header>.PROCEDURE<OnAfterDeleteAllTempPurchLines>
1 : Table<Purchase Header>.PROCEDURE<OnAfterGetNoSeriesCode>
1 : Table<Purchase Header>.PROCEDURE<OnAfterInitNoSeries>
1 : Table<Purchase Header>.PROCEDURE<OnAfterInitRecord>
1 : Table<Purchase Header>.PROCEDURE<OnAfterRecreatePurchLine>
1 : Table<Purchase Header>.PROCEDURE<OnAfterTestNoSeries>
1 : Table<Purchase Header>.PROCEDURE<OnAfterTransferExtendedTextForPurchaseLineRecreation>
1 : Table<Purchase Header>.PROCEDURE<OnAfterUpdateShipToAddress>
1 : Table<Purchase Header>.PROCEDURE<OnBeforeRecreatePurchLines>
1 : Table<Purchase Header>.PROCEDURE<OnBeforeUpdateCurrencyFactor>
3 : Table<Purchase Header>.PROCEDURE<OnCheckPurchasePostRestrictions>
1 : Table<Purchase Header>.PROCEDURE<OnCheckPurchaseReleaseRestrictions>
1 : Table<Purchase Header>.PROCEDURE<OnRecreatePurchLinesOnBeforeInsertPurchLine>
1 : Table<Purchase Header>.PROCEDURE<OnUpdatePurchLinesByChangedFieldName>
1 : Table<Purchase Header>.PROCEDURE<OnValidatePurchaseHeaderPayToVendorNo>
1 : Table<CV Ledger Entry Buffer>.PROCEDURE<OnAfterCopyFromCustLedgerEntry>
1 : Table<CV Ledger Entry Buffer>.PROCEDURE<OnAfterCopyFromEmplLedgerEntry>
1 : Table<CV Ledger Entry Buffer>.PROCEDURE<OnAfterCopyFromVendLedgerEntry>
1 : Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<OnAfterCopyFromCVLedgEntryBuf>
1 : Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<OnAfterCopyFromGenJnlLine>
1 : Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<OnBeforeInsertDtldCVLedgEntry>
1 : Table<Purchase Line>.PROCEDURE<OnAfterAssignFieldsForNo>
1 : Table<Purchase Line>.PROCEDURE<OnAfterAssignFixedAssetValues>
1 : Table<Purchase Line>.PROCEDURE<OnAfterAssignGLAccountValues>
1 : Table<Purchase Line>.PROCEDURE<OnAfterAssignHeaderValues>
1 : Table<Purchase Line>.PROCEDURE<OnAfterAssignItemChargeValues>
1 : Table<Purchase Line>.PROCEDURE<OnAfterAssignItemUOM>
1 : Table<Purchase Line>.PROCEDURE<OnAfterAssignItemValues>
1 : Table<Purchase Line>.PROCEDURE<OnAfterAssignStdTxtValues>
1 : Table<Purchase Line>.PROCEDURE<OnAfterCalcVATAmountLines>
1 : Table<Purchase Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Purchase Line>.PROCEDURE<OnAfterCreateTempJobJnlLine>
1 : Table<Purchase Line>.PROCEDURE<OnAfterGetLineAmountToHandle>
1 : Table<Purchase Line>.PROCEDURE<OnAfterInitHeaderDefaults>
1 : Table<Purchase Line>.PROCEDURE<OnAfterInitOutstandingAmount>
1 : Table<Purchase Line>.PROCEDURE<OnAfterInitQtyToInvoice>
1 : Table<Purchase Line>.PROCEDURE<OnAfterInitQtyToReceive>
1 : Table<Purchase Line>.PROCEDURE<OnAfterInitQtyToShip>
1 : Table<Purchase Line>.PROCEDURE<OnAfterSetDefaultQuantity>
1 : Table<Purchase Line>.PROCEDURE<OnAfterUpdateAmounts>
1 : Table<Purchase Line>.PROCEDURE<OnAfterUpdateAmountsDone>
1 : Table<Purchase Line>.PROCEDURE<OnAfterUpdateDirectUnitCost>
1 : Table<Purchase Line>.PROCEDURE<OnAfterUpdateJobPrices>
1 : Table<Purchase Line>.PROCEDURE<OnAfterUpdateTotalAmounts>
1 : Table<Purchase Line>.PROCEDURE<OnAfterUpdateUnitCost>
1 : Table<Purchase Line>.PROCEDURE<OnAfterUpdateVATOnLines>
1 : Table<Purchase Line>.PROCEDURE<OnAfterUpdateWithWarehouseReceive>
1 : Table<Purchase Line>.PROCEDURE<OnBeforeJobTaskIsSet>
1 : Table<Purchase Line>.PROCEDURE<OnBeforeUpdateDirectUnitCost>
2 : Table<Purchase Line>.PROCEDURE<OnBeforeVerifyReservedQty>
1 : Table<Purchase Line>.PROCEDURE<OnValidateNoOnCopyFromTempPurchLine>
1 : Table<Purchase Line>.PROCEDURE<OnValidateTypeOnCopyFromTempPurchLine>
1 : Table<Currency>.PROCEDURE<OnBeforeGetGainLossAccount>
1 : Table<Approval Entry>.PROCEDURE<OnAfterGetRecordDetails>
1 : Table<Workflow Webhook Subscription>.PROCEDURE<OnFindTaskSchedulerAllowed>
1 : Table<Job Queue Entry>.PROCEDURE<OnAfterReschedule>
1 : Table<Job Queue Entry>.PROCEDURE<OnBeforeClearServiceValues>
1 : Table<Job Queue Entry>.PROCEDURE<OnBeforeInsertLogEntry>
1 : Table<Job Queue Entry>.PROCEDURE<OnBeforeModifyLogEntry>
1 : Table<Job Queue Entry>.PROCEDURE<OnBeforeScheduleTask>
1 : Table<Job Queue Entry>.PROCEDURE<OnBeforeSetStatusValue>
1 : Table<Job Queue Entry>.PROCEDURE<OnFindingIfJobNeedsToBeRun>
1 : Table<Job Queue Log Entry>.PROCEDURE<OnBeforeMarkAsError>
1 : Table<Change Global Dim. Log Entry>.PROCEDURE<OnFindingScheduledTask>
1 : Table<Invoice Post. Buffer>.PROCEDURE<OnAfterInvPostBufferModify>
1 : Table<Invoice Post. Buffer>.PROCEDURE<OnAfterInvPostBufferPreparePurchase>
1 : Table<Invoice Post. Buffer>.PROCEDURE<OnAfterInvPostBufferPrepareSales>
1 : Table<Invoice Post. Buffer>.PROCEDURE<OnAfterInvPostBufferPrepareService>
1 : Table<Invoice Post. Buffer>.PROCEDURE<OnAfterInvPostBufferUpdate>
1 : Table<Invoice Post. Buffer>.PROCEDURE<OnBeforeInvPostBufferModify>
1 : Table<Invoice Post. Buffer>.PROCEDURE<OnBeforeInvPostBufferUpdate>
1 : Table<Contact>.PROCEDURE<OnAfterGetSalutation>
1 : Table<Contact>.PROCEDURE<OnAfterUpdateQuotesForContact>
1 : Table<Contact>.PROCEDURE<OnBeforeCustomerInsert>
1 : Table<Contact>.PROCEDURE<OnBeforeIsUpdateNeeded>
1 : Table<Contact>.PROCEDURE<OnBeforeVendorInsert>
1 : Table<Contact>.PROCEDURE<OnCreateCustomerOnTransferFieldsFromTemplate>
1 : Table<Interaction Log Entry>.PROCEDURE<OnAfterCopyFromSegment>
1 : Table<Segment Line>.PROCEDURE<OnAfterCopyFromInteractionLogEntry>
1 : Table<Segment Line>.PROCEDURE<OnAfterCreateFromTask>
1 : Table<Segment Line>.PROCEDURE<OnAfterFinishWizard>
1 : Table<To-do>.PROCEDURE<OnAfterSetFilterFromTask>
1 : Table<To-do>.PROCEDURE<OnCreateTaskFromInteractLogEntryOnBeforeStartWizard>
1 : Table<To-do>.PROCEDURE<OnCreateTaskFromSalesHeaderoOnBeforeStartWizard>
1 : Table<To-do>.PROCEDURE<OnCreateTaskFromTaskOnBeforeStartWizard>
1 : Table<Employee>.PROCEDURE<OnBeforeGetFullName>
1 : Table<Employee Ledger Entry>.PROCEDURE<OnAfterCopyEmplLedgerEntryFromCVLedgEntryBuffer>
1 : Table<Employee Ledger Entry>.PROCEDURE<OnAfterCopyEmployeeLedgerEntryFromGenJnlLine>
1 : Table<CRM Connection Setup>.PROCEDURE<OnGetDefaultCRMConnection>
1 : Table<CRM Connection Setup>.PROCEDURE<OnReadingCRMData>
1 : Table<Integration Synch. Job>.PROCEDURE<OnCanBeRemoved>
1 : Table<Production Order>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Production Order>.PROCEDURE<OnBeforeAssignItemNo>
1 : Table<Production Order>.PROCEDURE<OnBeforeMultiLevelMessage>
1 : Table<Prod. Order Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Prod. Order Component>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Prod. Order Component>.PROCEDURE<OnAfterProdOrderNeeds>
1 : Table<Prod. Order Component>.PROCEDURE<OnAfterUpdateUnitCost>
1 : Table<Prod. Order Routing Line>.PROCEDURE<OnAfterMachineCtrTransferFields>
1 : Table<Prod. Order Routing Line>.PROCEDURE<OnAfterTransferFromStdTaskComment>
1 : Table<Prod. Order Routing Line>.PROCEDURE<OnAfterTransferFromStdTaskPersonnel>
1 : Table<Prod. Order Routing Line>.PROCEDURE<OnAfterTransferFromStdTaskQltyMeasure>
1 : Table<Prod. Order Routing Line>.PROCEDURE<OnAfterTransferFromStdTaskTool>
1 : Table<Prod. Order Routing Line>.PROCEDURE<OnAfterWorkCenterTransferFields>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromAsmOrder>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromAsmOrderLine>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromForecast>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromInboundTransOrder>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromJobNeed>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromOutboundTransfer>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromPlanProdComp>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromProdComp>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromProdOrder>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromPurchase>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromPurchReturn>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromReqLine>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromReqLineTransDemand>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromSales>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromSalesBlanketOrder>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromSalesReturn>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromServiceNeed>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferInventoryQty>
1 : Table<FA Ledger Entry>.PROCEDURE<OnAfterMoveToFAJnlLine>
1 : Table<FA Ledger Entry>.PROCEDURE<OnAfterMoveToGenJnlLine>
1 : Table<FA Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<FA Journal Line>.PROCEDURE<OnConvertToLedgEntryCase>
1 : Table<FA Reclass. Journal Line>.PROCEDURE<OnAfterSetUpNewLine>
1 : Table<Insurance Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Stockkeeping Unit>.PROCEDURE<OnAfterCopyFromItem>
1 : Table<Item Cross Reference>.PROCEDURE<OnAfterCreateItemVendor>
1 : Table<Item Cross Reference>.PROCEDURE<OnBeforeItemVendorDelete>
1 : Table<Transfer Header>.PROCEDURE<OnAfterCheckBeforePost>
1 : Table<Transfer Header>.PROCEDURE<OnUpdateTransLines>
1 : Table<Transfer Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Transfer Shipment Header>.PROCEDURE<OnAfterCopyFromTransferHeader>
1 : Table<Transfer Shipment Line>.PROCEDURE<OnAfterCopyFromTransferLine>
1 : Table<Transfer Receipt Header>.PROCEDURE<OnAfterCopyFromTransferHeader>
1 : Table<Transfer Receipt Line>.PROCEDURE<OnAfterCopyFromTransferLine>
1 : Table<Warehouse Request>.PROCEDURE<OnAfterDeleteRequest>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnAfterAutofillQtyToHandleLine>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnAfterDeleteQtyToHandle>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnAfterTransferFromAssemblyLine>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnAfterTransferFromCompLine>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnAfterTransferFromIntPickLine>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnAfterTransferFromMovWkshLine>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnAfterTransferFromShptLine>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnAfterUpdateQtyToHandleWhseActivLine>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnBeforeAutofillQtyToHandle>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnBeforeDeleteQtyToHandle>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnBeforeDeleteRelatedWhseActivLines>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnBeforeDeleteWhseActivLine2>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnBeforeInsertNewWhseActivLine>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnBeforeModifyOldWhseActivLine>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnBeforeSplitLines>
1 : Table<Warehouse Source Filter>.PROCEDURE<OnBeforeSetTableView>
1 : Table<BOM Buffer>.PROCEDURE<OnTransferFromAsmHeaderCopyFields>
1 : Table<BOM Buffer>.PROCEDURE<OnTransferFromAsmLineCopyFields>
1 : Table<BOM Buffer>.PROCEDURE<OnTransferFromBOMCompCopyFields>
1 : Table<BOM Buffer>.PROCEDURE<OnTransferFromItemCopyFields>
1 : Table<BOM Buffer>.PROCEDURE<OnTransferFromProdOrderCompCopyFields>
1 : Table<BOM Buffer>.PROCEDURE<OnTransferFromProdOrderLineCopyFields>
1 : Table<BOM Buffer>.PROCEDURE<OnTransferFromProdRoutingCopyFields>
1 : Table<Inventory Adjmt. Entry (Order)>.PROCEDURE<OnAfterGetSingleLevelCosts>
1 : Table<Inventory Adjmt. Entry (Order)>.PROCEDURE<OnAfterSetProdOrderLineTransferFields>
1 : Table<Service Header>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Service Header>.PROCEDURE<OnAfterInitRecord>
1 : Table<Service Header>.PROCEDURE<OnAfterTransferExtendedTextForServLineRecreation>
1 : Table<Service Header>.PROCEDURE<OnAfterUpdateCust>
1 : Table<Service Header>.PROCEDURE<OnAfterUpdateShipToAddress>
1 : Table<Service Header>.PROCEDURE<OnBeforeInsertServLineOnServLineRecreation>
1 : Table<Service Header>.PROCEDURE<OnUpdateServLineByChangedFieldName>
1 : Table<Service Item Line>.PROCEDURE<OnAfterAssignItemValues>
1 : Table<Service Line>.PROCEDURE<OnAfterAssignGLAccountValues>
1 : Table<Service Line>.PROCEDURE<OnAfterAssignHeaderValues>
1 : Table<Service Line>.PROCEDURE<OnAfterAssignItemValues>
1 : Table<Service Line>.PROCEDURE<OnAfterAssignResourceValues>
1 : Table<Service Line>.PROCEDURE<OnAfterAssignServCostValues>
1 : Table<Service Line>.PROCEDURE<OnAfterAssignServItemValues>
1 : Table<Service Line>.PROCEDURE<OnAfterAssignStdTxtValues>
1 : Table<Service Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Service Line>.PROCEDURE<OnAfterInitOutstandingAmount>
1 : Table<Service Line>.PROCEDURE<OnAfterInitQtyToConsume>
1 : Table<Service Line>.PROCEDURE<OnAfterInitQtyToInvoice>
1 : Table<Service Line>.PROCEDURE<OnAfterInitQtyToShip>
1 : Table<Service Line>.PROCEDURE<OnAfterUpdateUnitPrice>
1 : Table<Service Line>.PROCEDURE<OnBeforeUpdateUnitPrice>
1 : Table<Service Item>.PROCEDURE<OnAfterAssignItemValues>
1 : Table<Service Contract Line>.PROCEDURE<OnAfterSetupNewLine>
1 : Table<Service Contract Header>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Standard Service Code>.PROCEDURE<OnBeforeInsertServLine>
1 : Table<Standard Service Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Standard Service Item Gr. Code>.PROCEDURE<OnBeforeInsertServLine>
1 : Table<Document Sending Profile>.PROCEDURE<OnAfterSend>
1 : Table<Document Sending Profile>.PROCEDURE<OnAfterSendVendor>
1 : Table<Document Sending Profile>.PROCEDURE<OnBeforeSendCustomerRecords>
1 : Table<Document Sending Profile>.PROCEDURE<OnBeforeSendVendorRecords>
1 : Table<Document Sending Profile>.PROCEDURE<OnBeforeTrySendToEMail>
1 : Table<Document Sending Profile>.PROCEDURE<OnBeforeTrySendToPrinter>
1 : Table<Document Sending Profile>.PROCEDURE<OnCheckElectronicSendingEnabled>
2 : Table<Electronic Document Format>.PROCEDURE<OnDiscoverElectronicFormat>
1 : Table<Whse. Item Tracking Line>.PROCEDURE<OnAfterCopyTrackingFromItemLedgEntry>
1 : Table<Whse. Item Tracking Line>.PROCEDURE<OnAfterCopyTrackingFromReservEntry>
1 : Table<Return Shipment Line>.PROCEDURE<OnAfterInitFromPurchLine>
1 : Table<Return Shipment Line>.PROCEDURE<OnAfterInsertInvLineFromRetShptLine>
1 : Table<Return Shipment Line>.PROCEDURE<OnBeforeInsertInvLineFromRetShptLine>
1 : Table<Return Receipt Line>.PROCEDURE<OnAfterInitFromSalesLine>
1 : Table<Return Receipt Line>.PROCEDURE<OnAftertInsertInvLineFromRetRcptLine>
1 : Table<Return Receipt Line>.PROCEDURE<OnBeforeInsertInvLineFromRetRcptLine>
1 : Table<Return Receipt Line>.PROCEDURE<OnBeforeInsertInvLineFromRetRcptLineBeforeInsertTextLine>
1 : Table<Sales Price>.PROCEDURE<OnBeforeNewSalesPriceInsert>
1 : Table<Purchase Price>.PROCEDURE<OnBeforeNewPurchasePriceInsert>
1 : Table<Sales Price Worksheet>.PROCEDURE<OnAfterCalcCurrentPriceFound>
1 : Table<Warehouse Receipt Header>.PROCEDURE<OnBeforeDeleteWhseRcptRelatedLines>
1 : Table<Warehouse Receipt Line>.PROCEDURE<OnAfterOpenItemTrackingLines>
1 : Table<Warehouse Shipment Header>.PROCEDURE<OnBeforeWhseShptLineDelete>
1 : Table<Warehouse Shipment Line>.PROCEDURE<OnBeforeTestReleased>
1 : Table<Standard General Journal>.PROCEDURE<OnAfterCopyGenJnlFromStdJnl>
1 : Table<Item Attribute>.PROCEDURE<OnBeforeCheckNameUniqueness>
1 : Table<Item Attribute Value>.PROCEDURE<OnGetValueInCurrentLanguage>
1 : Table<Item Attribute Value Selection>.PROCEDURE<OnBeforeFindItemAttributeCaseInsensitive>
1 : Table<Standard General Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Standard Item Journal>.PROCEDURE<OnAfterCopyItemJnlFromStdJnl>
1 : Table<Standard Item Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Report Selections>.PROCEDURE<OnAfterGetEmailBodyCustomer>
1 : Table<Report Selections>.PROCEDURE<OnAfterGetEmailBodyVendor>
1 : Table<Report Selections>.PROCEDURE<OnBeforeGetCustEmailAddress>
1 : Table<Report Selections>.PROCEDURE<OnBeforeGetEmailBodyCustomer>
1 : Table<Report Selections>.PROCEDURE<OnBeforeGetEmailBodyVendor>
1 : Table<Report Selections>.PROCEDURE<OnBeforeGetVendorEmailAddress>
1 : Table<Report Selections>.PROCEDURE<OnBeforePrint>
1 : Table<Report Selections>.PROCEDURE<OnBeforePrintForUsage>
1 : Table<Report Selections>.PROCEDURE<OnBeforePrintWithCheck>
1 : Table<Report Selections>.PROCEDURE<OnBeforePrintWithGUIYesNo>
1 : Table<Report Selections>.PROCEDURE<OnBeforePrintWithGUIYesNoVendor>
1 : Table<Report Selections>.PROCEDURE<OnBeforePrintWithGUIYesNoWithCheck>
1 : Table<Report Selections>.PROCEDURE<OnBeforePrintWithGUIYesNoWithCheckVendor>
1 : Table<Report Selections>.PROCEDURE<OnBeforeSendEmailToCust>
1 : Table<Report Selections>.PROCEDURE<OnBeforeSendEmailToVendor>
9 : Table<Report Selections>.PROCEDURE<OnBeforeSetReportLayout>
1 : Table<Report Selections>.PROCEDURE<OnFindReportSelections>
1 : Table<Certificate of Supply>.PROCEDURE<OnAfterInitFromPurchase>
1 : Table<Certificate of Supply>.PROCEDURE<OnAfterInitFromSales>
1 : Table<Certificate of Supply>.PROCEDURE<OnAfterInitFromService>
1 : Table<Company Information>.PROCEDURE<OnAfterGetSystemIndicator>
1 : Table<Language>.PROCEDURE<OnGetUserLanguageId>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetBankAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetBankBalAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetCustomerAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetCustomerBalAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetEmployeeAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetEmployeeBalAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetFAAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetFABalAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetGLAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetGLBalAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetICPartnerAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetICPartnerBalAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetVendorAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetVendorBalAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterClearBalPostingGroups>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterClearCustApplnEntryFields>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterClearEmplApplnEntryFields>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterClearPostingGroups>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterClearVendApplnEntryFields>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromCustLedgEntry>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromGenJnlAllocation>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromInvPostBuffer>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromInvPostBufferFA>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPrepmtInvBuffer>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPurchHeader>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPurchHeaderApplyTo>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPurchHeaderPayment>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPurchHeaderPrepmt>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPurchHeaderPrepmtPost>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromSalesHeader>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromSalesHeaderApplyTo>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromSalesHeaderPayment>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromSalesHeaderPrepmt>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromSalesHeaderPrepmtPost>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromServHeader>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromServHeaderApplyTo>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromServHeaderPayment>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCreateTempJobJnlLine>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterSetupNewLine>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterUpdatePricesFromJobJnlLine>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterValidateApplyRequirements>
1 : Table<Gen. Journal Line>.PROCEDURE<OnBeforeCreateTempJobJnlLine>
1 : Table<Gen. Journal Line>.PROCEDURE<OnBeforeLookUpAppliesToDocCust>
1 : Table<Gen. Journal Line>.PROCEDURE<OnBeforeLookUpAppliesToDocEmpl>
1 : Table<Gen. Journal Line>.PROCEDURE<OnBeforeLookUpAppliesToDocVend>
1 : Table<Gen. Journal Line>.PROCEDURE<OnCheckGenJournalLinePostRestrictions>
1 : Table<Gen. Journal Line>.PROCEDURE<OnCheckGenJournalLinePrintCheckRestrictions>
1 : Table<Gen. Journal Line>.PROCEDURE<OnGenJnlLineGetVendorAccount>
7 : Table<Gen. Journal Line>.PROCEDURE<OnMoveGenJournalLine>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromJobJnlLine>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromPurchHeader>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromPurchLine>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromSalesHeader>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromSalesLine>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServHeader>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServLine>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServShptHeader>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServShptLine>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServShptLineUndo>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyTrackingFromSpec>
2 : Table<Item Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterOnValidateItemNoAssignByEntryType>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterSetupNewLine>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterUpdateAmount>
1 : Table<Item Journal Line>.PROCEDURE<OnBeforeRetrieveCosts>
2 : Table<Item Journal Line>.PROCEDURE<OnBeforeVerifyReservedQty>
1 : Table<Item Journal Line>.PROCEDURE<OnCheckItemJournalLinePostRestrictions>
1 : Table<Config. Line>.PROCEDURE<OnBeforeShowTableData>
1 : Table<Config. Table Processing Rule>.PROCEDURE<OnDoesTableHaveCustomRuleInRapidStart>
1 : Table<BOM Component>.PROCEDURE<OnAfterCopyFromItem>
1 : Table<BOM Component>.PROCEDURE<OnAfterCopyFromResource>
1 : Table<Assembly Header>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Assembly Header>.PROCEDURE<OnAfterInitRecord>
1 : Table<Assembly Line>.PROCEDURE<OnAfterCopyFromItem>
1 : Table<Assembly Line>.PROCEDURE<OnAfterCopyFromResource>
1 : Table<Assembly Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Assemble-to-Order Link>.PROCEDURE<OnAfterRemoveTrackingFromReservation>
1 : Table<Assemble-to-Order Link>.PROCEDURE<OnAfterUpdateAsm>
1 : Table<Assemble-to-Order Link>.PROCEDURE<OnBeforeRemoveTrackingFromReservation>
1 : Table<Time Sheet Detail>.PROCEDURE<OnAfterCopyFromTimeSheetLine>
1 : Table<Custom Report Layout>.PROCEDURE<OnAfterReportGetCustomRdlc>
1 : Table<Routing Line>.PROCEDURE<OnAfterMachineCtrTransferFields>
1 : Table<Routing Line>.PROCEDURE<OnAfterWorkCenterTransferFields>
1 : Table<Planning Component>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Planning Component>.PROCEDURE<OnAfterTransferFromAsmLine>
1 : Table<Planning Component>.PROCEDURE<OnAfterTransferFromComponent>
1 : Table<Planning Routing Line>.PROCEDURE<OnAfterMachineCtrTransferFields>
1 : Table<Planning Routing Line>.PROCEDURE<OnAfterTransferFromProdOrderRouting>
1 : Table<Planning Routing Line>.PROCEDURE<OnAfterWorkCenterTransferFields>
1 : Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromAsmHeader>
1 : Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromAsmLine>
1 : Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromComponent>
1 : Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromInboundTransfer>
1 : Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromItemLedgerEntry>
1 : Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromJobPlanningLine>
1 : Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromOutboundTransfer>
1 : Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromOutboundTransfPlan>
1 : Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromPlanComponent>
1 : Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromProdOrderLine>
1 : Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromPurchaseLine>
1 : Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromRequisitionLine>
1 : Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromSalesLine>
1 : Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromServLine>
1 : Table<Order Promising Line>.PROCEDURE<OnAfterTransferFromJobPlanningLine>
1 : Table<Order Promising Line>.PROCEDURE<OnAfterTransferFromSalesLine>
1 : Table<Order Promising Line>.PROCEDURE<OnAfterTransferFromServLine>
0 : Codeunit<Add-in Manifest Management>.PROCEDURE<CreateBasicAddins>
0 : Codeunit<Add-in Manifest Management>.PROCEDURE<GetAddinID>

DETAILS:
Codeunit<Calc. G/L Acc. Where-Used>.PROCEDURE<OnAfterCheckPostingGroups>
  Raised in: Codeunit<Calc. G/L Acc. Where-Used>.PROCEDURE<CheckPostingGroups>
    Code lines:
    ...
    CheckICPartner(GLAccNo);
    CheckPaymentMethod(GLAccNo);
    CheckSalesReceivablesSetup(GLAccNo);
    CheckEmployeePostingGroup(GLAccNo);
    
    OnAfterCheckPostingGroups(GLAccWhereUsed,GLAccNo); <=====================
Codeunit<Calc. G/L Acc. Where-Used>.PROCEDURE<OnBeforeShowGLAccWhereUsed>
  Raised in: Codeunit<Calc. G/L Acc. Where-Used>.PROCEDURE<ShowGLAccWhereUsed>
    Code lines:
    OnBeforeShowGLAccWhereUsed(GLAccWhereUsed); <=====================
    
    GLAccWhereUsed.SETCURRENTKEY("Table Name");
    PAGE.RUNMODAL(0,GLAccWhereUsed);
Codeunit<Calc. G/L Acc. Where-Used>.PROCEDURE<OnShowExtensionPage>
  Raised in: Codeunit<Calc. G/L Acc. Where-Used>.PROCEDURE<ShowSetupForm>
    Code lines:
    ...
          BEGIN
            PaymentMethod.Code := COPYSTR("Key 1",1,MAXSTRLEN(PaymentMethod.Code));
            PAGE.RUN(0,PaymentMethod);
          END;
        ELSE
          OnShowExtensionPage(GLAccWhereUsed); <=====================
      END;
Codeunit<Job Post-Line>.PROCEDURE<OnAfterJobPlanningLineModify>
  Raised in: Codeunit<Job Post-Line>.PROCEDURE<PostInvoiceContractLine>
    Code lines:
    ...
    END;
    
    JobPlanningLine.UpdateQtyToInvoice;
    JobPlanningLine.MODIFY;
    
    OnAfterJobPlanningLineModify(JobPlanningLine); <=====================
    
    IF JobPlanningLine.Type <> JobPlanningLine.Type::Text THEN
      PostJobOnSalesLine(JobPlanningLine,SalesHeader,SalesLine,EntryType::Sale);
    
Codeunit<Job Post-Line>.PROCEDURE<OnAfterPostInvoiceContractLine>
  Raised in: Codeunit<Job Post-Line>.PROCEDURE<PostInvoiceContractLine>
    Code lines:
    ...
    OnAfterJobPlanningLineModify(JobPlanningLine);
    
    IF JobPlanningLine.Type <> JobPlanningLine.Type::Text THEN
      PostJobOnSalesLine(JobPlanningLine,SalesHeader,SalesLine,EntryType::Sale);
    
    OnAfterPostInvoiceContractLine(SalesHeader,SalesLine); <=====================
Codeunit<Job Post-Line>.PROCEDURE<OnBeforePostInvoiceContractLine>
  Raised in: Codeunit<Job Post-Line>.PROCEDURE<PostInvoiceContractLine>
    Code lines:
    OnBeforePostInvoiceContractLine(SalesHeader,SalesLine); <=====================
    
    JobPlanningLine.SETCURRENTKEY("Job Contract Entry No.");
    JobPlanningLine.SETRANGE("Job Contract Entry No.",SalesLine."Job Contract Entry No.");
    JobPlanningLine.FINDFIRST;
    Job.GET(JobPlanningLine."Job No.");
    
    IF Job."Invoice Currency Code" = '' THEN BEGIN
      Job.TESTFIELD("Currency Code",SalesHeader."Currency Code");
      Job.TESTFIELD("Currency Code",JobPlanningLine."Currency Code");
    ...
Codeunit<Job Post-Line>.PROCEDURE<OnBeforePostJobOnPurchaseLine>
  Raised in: Codeunit<Job Post-Line>.PROCEDURE<PostJobOnPurchaseLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforePostJobOnPurchaseLine(PurchHeader,PurchInvHeader,PurchCrMemoHdr,PurchLine,JobJnlLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF (PurchLine.Type <> PurchLine.Type::Item) AND (PurchLine.Type <> PurchLine.Type::"G/L Account") THEN
      EXIT;
    CLEAR(JobJnlLine);
    PurchLine.TESTFIELD("Job No.");
    PurchLine.TESTFIELD("Job Task No.");
    ...
Codeunit<Job Post-Line>.PROCEDURE<OnPostInvoiceContractLineBeforeCheckJobLine>
  Raised in: Codeunit<Job Post-Line>.PROCEDURE<PostInvoiceContractLine>
    Code lines:
    ...
      Job.TESTFIELD("Currency Code",'');
      JobPlanningLine.TESTFIELD("Currency Code",'');
    END;
    
    SalesHeader.TESTFIELD("Bill-to Customer No.",Job."Bill-to Customer No.");
    OnPostInvoiceContractLineBeforeCheckJobLine(SalesHeader,SalesLine,JobPlanningLine,JobLineChecked); <=====================
    IF NOT JobLineChecked THEN BEGIN
      JobPlanningLine.CALCFIELDS("Qty. Transferred to Invoice");
      IF JobPlanningLine.Type <> JobPlanningLine.Type::Text THEN
        JobPlanningLine.TESTFIELD("Qty. Transferred to Invoice");
    ...
Codeunit<Job Create-Invoice>.PROCEDURE<OnAfterTestSalesHeader>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<TestSalesHeader>
    Code lines:
    ...
    
    IF Job."Currency Code" <> '' THEN
      SalesHeader.TESTFIELD("Currency Code",Job."Currency Code")
    ELSE
      SalesHeader.TESTFIELD("Currency Code",Job."Invoice Currency Code");
    OnAfterTestSalesHeader(SalesHeader,Job); <=====================
Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeInsertSalesHeader>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<CreateSalesHeader>
    Code lines:
    ...
    IF SalesHeader."Document Type" = SalesHeader."Document Type"::Invoice THEN
      SalesSetup.TESTFIELD("Invoice Nos.");
    IF SalesHeader."Document Type" = SalesHeader."Document Type"::"Credit Memo" THEN
      SalesSetup.TESTFIELD("Credit Memo Nos.");
    SalesHeader."Posting Date" := PostingDate;
    OnBeforeInsertSalesHeader(SalesHeader,Job); <=====================
    SalesHeader.INSERT(TRUE);
    Cust.GET(Job."Bill-to Customer No.");
    Cust.TESTFIELD("Bill-to Customer No.",'');
    SalesHeader.VALIDATE("Sell-to Customer No.",Job."Bill-to Customer No.");
    ...
Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeInsertSalesLine>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<CreateSalesLine>
    Code lines:
    ...
          DimSetIDArr,SalesLine."Shortcut Dimension 1 Code",SalesLine."Shortcut Dimension 2 Code");
    END;
    SalesLine.Description := JobPlanningLine.Description;
    SalesLine."Description 2" := JobPlanningLine."Description 2";
    SalesLine."Line No." := GetNextLineNo(SalesLine);
    OnBeforeInsertSalesLine(SalesLine,SalesHeader,Job,JobPlanningLine); <=====================
    SalesLine.INSERT(TRUE);
    
    IF SalesLine.Type <> SalesLine.Type::" " THEN BEGIN
      NoOfSalesLinesCreated += 1;
    ...
Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeModifySalesHeader>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<CreateSalesHeader>
    Code lines:
    ...
    ELSE
      SalesHeader.VALIDATE("Currency Code",Job."Invoice Currency Code");
    IF PostingDate <> 0D THEN
      SalesHeader.VALIDATE("Posting Date",PostingDate);
    UpdateSalesHeader(SalesHeader,Job);
    OnBeforeModifySalesHeader(SalesHeader,Job); <=====================
    SalesHeader.MODIFY(TRUE);
Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeModifySalesLine>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<CreateSalesLine>
    Code lines:
    ...
          ROUND(
            SalesLine."Inv. Discount Amount" * (1 + (SalesLine."VAT %" / 100)),
            Currency."Amount Rounding Precision"));
      END;
      SalesLine.VALIDATE("Job Contract Entry No.",JobPlanningLine."Job Contract Entry No.");
      OnBeforeModifySalesLine(SalesLine,SalesHeader,Job,JobPlanningLine); <=====================
      SalesLine.MODIFY;
      JobPlanningLine."VAT Unit Price" := SalesLine."Unit Price";
      JobPlanningLine."VAT Line Discount Amount" := SalesLine."Line Discount Amount";
      JobPlanningLine."VAT Line Amount" := SalesLine."Line Amount";
    ...
Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeUpdateSalesHeader>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<UpdateSalesHeader>
    Code lines:
    IsHandled := FALSE;
    OnBeforeUpdateSalesHeader(SalesHeader,Job,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SalesHeader."Bill-to Contact No." := Job."Bill-to Contact No.";
    SalesHeader."Bill-to Contact" := Job."Bill-to Contact";
    SalesHeader."Bill-to Name" := Job."Bill-to Name";
    SalesHeader."Bill-to Address" := Job."Bill-to Address";
    SalesHeader."Bill-to Address 2" := Job."Bill-to Address 2";
    ...
Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromGenJnlLineToJnlLine>
  Raised in: Codeunit<Job Transfer Line>.PROCEDURE<FromGenJnlLineToJnlLine>
    Code lines:
    ...
    JobJnlLine."Line Discount Amount (LCY)" := GenJnlLine."Job Line Disc. Amount (LCY)";
    JobJnlLine."Line Discount Amount" := GenJnlLine."Job Line Discount Amount";
    
    JobJnlLine."Line Discount %" := GenJnlLine."Job Line Discount %";
    
    OnAfterFromGenJnlLineToJnlLine(JobJnlLine,GenJnlLine); <=====================
Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromJnlLineToLedgEntry>
  Raised in: Codeunit<Job Transfer Line>.PROCEDURE<FromJnlLineToLedgEntry>
    Code lines:
    ...
    JobLedgEntry."Unit Cost" := JobJnlLine2."Unit Cost";
    JobLedgEntry."Unit Price" := JobJnlLine2."Unit Price";
    
    JobLedgEntry."Line Discount %" := JobJnlLine2."Line Discount %";
    
    OnAfterFromJnlLineToLedgEntry(JobLedgEntry,JobJnlLine2); <=====================
Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromJnlToPlanningLine>
  Raised in: Codeunit<Job Transfer Line>.PROCEDURE<FromJnlToPlanningLine>
    Code lines:
    ...
    JobPlanningLine."Line Discount %" := JobJnlLine."Line Discount %";
    
    JobPlanningLine."Line Discount Amount (LCY)" := JobJnlLine."Line Discount Amount (LCY)";
    JobPlanningLine."Line Discount Amount" := JobJnlLine."Line Discount Amount";
    
    OnAfterFromJnlToPlanningLine(JobPlanningLine,JobJnlLine); <=====================
Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromJobLedgEntryToPlanningLine>
  Raised in: Codeunit<Job Transfer Line>.PROCEDURE<FromJobLedgEntryToPlanningLine>
    Code lines:
    ...
    JobPlanningLine."Line Discount %" := JobLedgEntry."Line Discount %";
    
    JobPlanningLine."Line Discount Amount (LCY)" := JobLedgEntry."Line Discount Amount (LCY)";
    JobPlanningLine."Line Discount Amount" := JobLedgEntry."Line Discount Amount";
    
    OnAfterFromJobLedgEntryToPlanningLine(JobPlanningLine,JobLedgEntry); <=====================
Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromPlanningLineToJnlLine>
  Raised in: Codeunit<Job Transfer Line>.PROCEDURE<FromPlanningLineToJnlLine>
    Code lines:
    ...
    JobJnlLine."Direct Unit Cost (LCY)" := JobPlanningLine."Direct Unit Cost (LCY)";
    JobJnlLine.VALIDATE("Unit Cost",JobPlanningLine."Unit Cost");
    JobJnlLine.VALIDATE("Unit Price",JobPlanningLine."Unit Price");
    JobJnlLine.VALIDATE("Line Discount %",JobPlanningLine."Line Discount %");
    
    OnAfterFromPlanningLineToJnlLine(JobJnlLine,JobPlanningLine); <=====================
    
    JobJnlLine.UpdateDimensions;
    ItemTrackingMgt.CopyItemTracking(JobPlanningLine.RowID1,JobJnlLine.RowID1,FALSE);
    
Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromPlanningSalesLineToJnlLine>
  Raised in: Codeunit<Job Transfer Line>.PROCEDURE<FromPlanningSalesLineToJnlLine>
    Code lines:
    ...
        JobPlanningLine."Unit Price");
    END ELSE
      ValidateUnitCostAndPrice(JobJnlLine,SalesLine,SalesLine."Unit Cost",JobPlanningLine."Unit Price");
    JobJnlLine.VALIDATE("Line Discount %",SalesLine."Line Discount %");
    
    OnAfterFromPlanningSalesLineToJnlLine(JobJnlLine,JobPlanningLine,SalesHeader,SalesLine,EntryType); <=====================
Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromPurchaseLineToJnlLine>
  Raised in: Codeunit<Job Transfer Line>.PROCEDURE<FromPurchaseLineToJnlLine>
    Code lines:
    ...
      JobJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
      JobJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
      JobJnlLine."Dimension Set ID" := "Dimension Set ID";
    END;
    
    OnAfterFromPurchaseLineToJnlLine(JobJnlLine,PurchHeader,PurchInvHeader,PurchCrMemoHeader,PurchLine,SourceCode); <=====================
Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromSalesHeaderToPlanningLine>
  Raised in: Codeunit<Job Transfer Line>.PROCEDURE<FromSalesHeaderToPlanningLine>
    Code lines:
    ...
      END ELSE BEGIN
        JobPlanningLine."Unit Price (LCY)" := SalesLine."Unit Price" / CurrencyFactor;
        JobPlanningLine."Total Price (LCY)" := JobPlanningLine."Unit Price (LCY)" * JobPlanningLine.Quantity;
        JobPlanningLine."Line Amount (LCY)" := JobPlanningLine."Total Price (LCY)";
      END;
      OnAfterFromSalesHeaderToPlanningLine(JobPlanningLine,SalesLine,CurrencyFactor); <=====================
      JobPlanningLine.MODIFY;
    END;
Codeunit<Job Transfer Line>.PROCEDURE<OnBeforeFromPlanningSalesLineToJnlLine>
  Raised in: Codeunit<Job Transfer Line>.PROCEDURE<FromPlanningSalesLineToJnlLine>
    Code lines:
    OnBeforeFromPlanningSalesLineToJnlLine(JobPlanningLine,SalesHeader,SalesLine,JobJnlLine,EntryType); <=====================
    
    JobJnlLine."Job No." := JobPlanningLine."Job No.";
    JobJnlLine."Job Task No." := JobPlanningLine."Job Task No.";
    JobJnlLine.Type := JobPlanningLine.Type;
    JobTask.GET(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.");
    JobJnlLine."Posting Date" := SalesHeader."Posting Date";
    JobJnlLine."Document Date" := SalesHeader."Document Date";
    JobJnlLine."Document No." := SalesLine."Document No.";
    JobJnlLine."Entry Type" := EntryType;
    ...
Codeunit<Job Calculate Batches>.PROCEDURE<OnBeforeTransferToPlanningLine>
  Raised in: Codeunit<Job Calculate Batches>.PROCEDURE<TransferToPlanningLine>
    Code lines:
    OnBeforeTransferToPlanningLine(JobLedgEntry); <=====================
    
    JobLedgEntry.LOCKTABLE;
    IF JobLedgEntry.FIND('-') THEN
      REPEAT
        JobLedgEntry.TESTFIELD("Job No.");
        JobLedgEntry.TESTFIELD("Job Task No.");
        JobLedgEntry.TESTFIELD("Entry Type",JobLedgEntry."Entry Type"::Usage);
        JobLedgEntry."Line Type" := LineType;
        CLEAR(JobPostLine);
    ...
Codeunit<Copy Job>.PROCEDURE<OnAfterCopyJobTask>
  Raised in: Codeunit<Copy Job>.PROCEDURE<CopyJobTasks>
    Code lines:
    ...
          JobPlanningLineSource = JobPlanningLineSource::"Job Ledger Entries":
            CopyJLEsToJobPlanningLines(SourceJobTask,TargetJobTask);
        END;
        IF CopyDimensions THEN
          CopyJobTaskDimensions(SourceJobTask,TargetJobTask);
        OnAfterCopyJobTask(TargetJobTask,SourceJobTask,CopyPrices,CopyQuantity); <=====================
      UNTIL SourceJobTask.NEXT = 0;
Codeunit<Job Jnl.-Check Line>.PROCEDURE<OnAfterRunCheck>
  Raised in: Codeunit<Job Jnl.-Check Line>.PROCEDURE<RunCheck>
    Code lines:
    ...
      END;
      IF "Line Type" IN ["Line Type"::Billable,"Line Type"::"Both Budget and Billable"] THEN
        TESTFIELD(Chargeable,TRUE);
    END;
    
    OnAfterRunCheck(JobJnlLine); <=====================
Codeunit<Job Jnl.-Check Line>.PROCEDURE<OnBeforeRunCheck>
  Raised in: Codeunit<Job Jnl.-Check Line>.PROCEDURE<RunCheck>
    Code lines:
    OnBeforeRunCheck(JobJnlLine); <=====================
    
    WITH JobJnlLine DO BEGIN
      IF EmptyLine THEN
        EXIT;
      TESTFIELD("Job No.");
      TESTFIELD("Job Task No.");
      TESTFIELD("No.");
      TESTFIELD("Posting Date");
      TESTFIELD(Quantity);
    ...
Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnAfterApplyUsageLink>
  Raised in: Codeunit<Job Jnl.-Post Line>.PROCEDURE<CreateJobLedgEntry>
    Code lines:
    ...
      END ELSE
        JobPostLine.InsertPlLineFromLedgEntry(JobLedgEntry)
    END;
    
    NextEntryNo := NextEntryNo + 1;
    OnAfterApplyUsageLink(JobLedgEntry); <=====================
    
    EXIT(JobLedgEntryNo);
Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnAfterRunCode>
  Raised in: Codeunit<Job Jnl.-Post Line>.PROCEDURE<Code>
    Code lines:
    ...
        END;
      END ELSE
        JobLedgEntryNo := CreateJobLedgEntry(JobJnlLine2);
    END;
    
    OnAfterRunCode(JobJnlLine2,JobLedgEntryNo); <=====================
    
    EXIT(JobLedgEntryNo);
Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnBeforeApplyUsageLink>
  Raised in: Codeunit<Job Jnl.-Post Line>.PROCEDURE<CreateJobLedgEntry>
    Code lines:
    ...
    
    JobReg."To Entry No." := NextEntryNo;
    JobReg.MODIFY;
    
    JobLedgEntryNo := JobLedgEntry."Entry No.";
    OnBeforeApplyUsageLink(JobLedgEntry); <=====================
    
    IF JobLedgEntry."Entry Type" = JobLedgEntry."Entry Type"::Usage THEN BEGIN
      // Usage Link should be applied if it is enabled for the job,
      // if a Job Planning Line number is defined or if it is enabled for a Job Planning Line.
    ...
Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnBeforeCreateJobLedgEntry>
  Raised in: Codeunit<Job Jnl.-Post Line>.PROCEDURE<CreateJobLedgEntry>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCreateJobLedgEntry(JobJnlLine2,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SetCurrency(JobJnlLine2);
    
    JobLedgEntry.INIT;
    JobTransferLine.FromJnlLineToLedgEntry(JobJnlLine2,JobLedgEntry);
    
    ...
Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnGetJobConsumptionValueEntryFilter>
  Raised in: Codeunit<Job Jnl.-Post Line>.PROCEDURE<GetJobConsumptionValueEntry>
    Code lines:
    ...
      ValueEntry.SETRANGE("Job No.","Job No.");
      ValueEntry.SETRANGE("Job Task No.","Job Task No.");
      ValueEntry.SETRANGE("Document No.","Document No.");
      ValueEntry.SETRANGE("Item Ledger Entry Type",ValueEntry."Item Ledger Entry Type"::"Negative Adjmt.");
      ValueEntry.SETRANGE("Job Ledger Entry No.",0);
      OnGetJobConsumptionValueEntryFilter(ValueEntry,JobJnlLine); <=====================
    END;
    EXIT(ValueEntry.FINDSET);
Codeunit<Job Jnl.-Post Batch>.PROCEDURE<OnAfterCheckJnlLine>
  Raised in: Codeunit<Job Jnl.-Post Batch>.PROCEDURE<Code>
    Code lines:
    ...
      REPEAT
        LineCount := LineCount + 1;
        Window.UPDATE(2,LineCount);
        CheckRecurringLine(JobJnlLine);
        JobJnlCheckLine.RunCheck(JobJnlLine);
        OnAfterCheckJnlLine(JobJnlLine); <=====================
        IF NEXT = 0 THEN
          FIND('-');
      UNTIL "Line No." = StartLineNo;
      NoOfRecords := LineCount;
    ...
Codeunit<Job Jnl.-Post Batch>.PROCEDURE<OnAfterJobJnlPostLine>
  Raised in: Codeunit<Job Jnl.-Post Batch>.PROCEDURE<Code>
    Code lines:
    ...
              "Document No." := NoSeriesMgt2[PostingNoSeriesNo].GetNextNo("Posting No. Series","Posting Date",FALSE);
              LastPostedDocNo := "Document No.";
            END;
        OnBeforeJobJnlPostLine(JobJnlLine);
        JobJnlPostLine.RunWithCheck(JobJnlLine);
        OnAfterJobJnlPostLine(JobJnlLine); <=====================
      UNTIL NEXT = 0;
    
      InvtSetup.GET;
      IF InvtSetup."Automatic Cost Adjustment" <>
    ...
Codeunit<Job Jnl.-Post Batch>.PROCEDURE<OnAfterPostJnlLines>
  Raised in: Codeunit<Job Jnl.-Post Batch>.PROCEDURE<Code>
    Code lines:
    ...
    
      INIT;
      "Line No." := JobRegNo;
    
      UpdateAndDeleteLines;
      OnAfterPostJnlLines(JobJnlBatch,JobJnlLine,JobRegNo); <=====================
    
      COMMIT;
    END;
    UpdateAnalysisView.UpdateAll(0,TRUE);
    ...
Codeunit<Job Jnl.-Post Batch>.PROCEDURE<OnBeforeJobJnlPostLine>
  Raised in: Codeunit<Job Jnl.-Post Batch>.PROCEDURE<Code>
    Code lines:
    ...
              LastDocNo := "Document No.";
              EVALUATE(PostingNoSeriesNo,NoSeries.Description);
              "Document No." := NoSeriesMgt2[PostingNoSeriesNo].GetNextNo("Posting No. Series","Posting Date",FALSE);
              LastPostedDocNo := "Document No.";
            END;
        OnBeforeJobJnlPostLine(JobJnlLine); <=====================
        JobJnlPostLine.RunWithCheck(JobJnlLine);
        OnAfterJobJnlPostLine(JobJnlLine);
      UNTIL NEXT = 0;
    
    ...
Codeunit<Job Jnl.-Post Batch>.PROCEDURE<OnBeforeUpdateAndDeleteLines>
  Raised in: Codeunit<Job Jnl.-Post Batch>.PROCEDURE<UpdateAndDeleteLines>
    Code lines:
    OnBeforeUpdateAndDeleteLines(JobJnlLine); <=====================
    
    WITH JobJnlLine DO BEGIN
      IF JobRegNo <> 0 THEN
        IF JobJnlTemplate.Recurring THEN BEGIN
          // Recurring journal
          LineCount := 0;
          JobJnlLine2.COPYFILTERS(JobJnlLine);
          JobJnlLine2.FIND('-');
          REPEAT
    ...
Codeunit<Job Link Usage>.PROCEDURE<OnAfterFindMatchingJobPlanningLine>
  Raised in: Codeunit<Job Link Usage>.PROCEDURE<FindMatchingJobPlanningLine>
    Code lines:
    ...
    // Match unspecific Job Planning Line.
    IF JobPlanningLine.FINDFIRST THEN
      EXIT(TRUE);
    
    JobPlanningLineFound := FALSE;
    OnAfterFindMatchingJobPlanningLine(JobPlanningLine,JobLedgerEntry,JobPlanningLineFound); <=====================
    EXIT(JobPlanningLineFound);
Codeunit<Job Link Usage>.PROCEDURE<OnBeforeJobPlanningLineUse>
  Raised in: Codeunit<Job Link Usage>.PROCEDURE<MatchUsageUnspecified>
    Code lines:
    ...
        ELSE
          MatchedQty := RemainingQtyToMatch;
        MatchedTotalCost := (JobLedgerEntry."Total Cost" / JobLedgerEntry."Quantity (Base)") * MatchedQty;
        MatchedLineAmount := (JobLedgerEntry."Line Amount" / JobLedgerEntry."Quantity (Base)") * MatchedQty;
    
        OnBeforeJobPlanningLineUse(JobPlanningLine,JobLedgerEntry); <=====================
        JobPlanningLine.Use(CalcQtyFromBaseQty(MatchedQty,JobPlanningLine."Qty. per Unit of Measure"),
          MatchedTotalCost,MatchedLineAmount);
        RemainingQtyToMatch -= MatchedQty;
      END;
Codeunit<Job Link Usage>.PROCEDURE<OnBeforeModifyJobPlanningLine>
  Raised in: Codeunit<Job Link Usage>.PROCEDURE<CreateJobPlanningLine>
    Code lines:
    ...
    JobPlanningLine.SETRANGE("Job Task No.",JobLedgerEntry."Job Task No.");
    JobPlanningLine.SETRANGE("Schedule Line",TRUE);
    JobPlanningLine.FINDLAST;
    JobPlanningLine.VALIDATE("Usage Link",TRUE);
    JobPlanningLine.VALIDATE(Quantity,RemainingQtyToMatch);
    OnBeforeModifyJobPlanningLine(JobPlanningLine,JobLedgerEntry); <=====================
    JobPlanningLine.MODIFY;
    
    // If type is Both Budget And Billable and that type isn't allowed,
    // retrieve the Billabe line and modify the quantity as well.
    ...
Codeunit<Cust. Entry-Edit>.PROCEDURE<OnBeforeCustLedgEntryModify>
  Raised in: Codeunit<Cust. Entry-Edit>.<OnRun>
    Code lines:
    ...
      CustLedgEntry.VALIDATE("Applies-to Ext. Doc. No.","Applies-to Ext. Doc. No.");
      CustLedgEntry.VALIDATE("Message to Recipient","Message to Recipient");
      CustLedgEntry."Direct Debit Mandate ID" := "Direct Debit Mandate ID";
    END;
    CustLedgEntry.VALIDATE("Exported to Payment File","Exported to Payment File");
    OnBeforeCustLedgEntryModify(CustLedgEntry,Rec); <=====================
    CustLedgEntry.TESTFIELD("Entry No.","Entry No.");
    CustLedgEntry.MODIFY;
    Rec := CustLedgEntry;
Codeunit<Paypal Account Proxy>.PROCEDURE<GetMsPayIsEnabled>
  Raised in: Page<Native - General Setting>.PROCEDURE<AssertCanChangePaypalSetup>
    Code lines:
    PaypalAccountProxy.GetMsPayIsEnabled(MsPayIsEnabled); <=====================
    
    IF MsPayIsEnabled THEN
      ERROR(CannotSetUpPaypalErr);
Codeunit<Paypal Account Proxy>.PROCEDURE<GetPaypalAccount>
  Raised in: Table<Native - Gen. Settings Buffer>.PROCEDURE<LoadRecord>
    Code lines:
    ...
    IF GeneralLedgerSetup.UseVat THEN
      "VAT/Tax Rounding Precision" := 2
    ELSE
      "VAT/Tax Rounding Precision" := 3;
    
    PaypalAccountProxy.GetPaypalAccount("Paypal Email Address"); <=====================
    
    TempNativeAPITaxSetup.LoadSetupRecords;
    TempNativeAPITaxSetup.SETRANGE(Default,TRUE);
    IF TempNativeAPITaxSetup.FINDFIRST THEN BEGIN
    ...
Codeunit<Paypal Account Proxy>.PROCEDURE<GetPaypalSetupOptions>
  Raised in: Page<BC O365 Payment Services>.PROCEDURE<UpdateControls>
    Code lines:
    PaypalAccountProxy.GetPaypalSetupOptions(PaypalIsEnabled,PaypalIsDefault); <=====================
    
    IF PaypalIsDefault THEN
      MsPayOrPaypalOption := MsPayOrPaypalOption::PayPal
    ELSE
      MsPayOrPaypalOption := MsPayOrPaypalOption::"Microsoft Pay";
    
    TempPaymentServiceSetup.OnRegisterPaymentServices(TempPaymentServiceSetup);
    TempPaymentServiceSetup.SETRANGE(Enabled,TRUE);
    NumberOfPaymentServiceSetups := TempPaymentServiceSetup.COUNT;
    ...
Codeunit<Paypal Account Proxy>.PROCEDURE<SetAlwaysIncludeMsPayOnDocuments>
  Raised in: Codeunit<O365 Sales Invoice Payment>.PROCEDURE<SetMspayDefault>
    Code lines:
    DummyPaymentServiceSetup.OnDoNotIncludeAnyPaymentServicesOnAllDocuments;
    PaypalAccountProxy.SetAlwaysIncludeMsPayOnDocuments(TRUE,TRUE); <=====================
    UpdatePaymentServicesForInvoicesQuotesAndOrders;
Codeunit<Paypal Account Proxy>.PROCEDURE<SetAlwaysIncludePaypalOnDocuments>
  Raised in: Codeunit<O365 Sales Invoice Payment>.PROCEDURE<SetPaypalDefault>
    Code lines:
    DummyPaymentServiceSetup.OnDoNotIncludeAnyPaymentServicesOnAllDocuments;
    PaypalAccountProxy.SetAlwaysIncludePaypalOnDocuments(TRUE,TRUE); <=====================
    UpdatePaymentServicesForInvoicesQuotesAndOrders;
Codeunit<Paypal Account Proxy>.PROCEDURE<SetPaypalAccount>
  Raised in: Table<Native - Gen. Settings Buffer>.PROCEDURE<SaveRecord>
    Code lines:
    IF xRec."Currency Symbol" <> "Currency Symbol" THEN
      UpdateCurrencySymbol;
    
    IF xRec."Paypal Email Address" <> "Paypal Email Address" THEN
      PaypalAccountProxy.SetPaypalAccount("Paypal Email Address",TRUE); <=====================
    
    IF xRec."Country/Region Code" <> "Country/Region Code" THEN
      UpdateCountryRegionCode;
    
    IF xRec."Language Locale ID" <> "Language Locale ID" THEN
    ...
  Raised in: Page<BC O365 Payment Services>.<Control>.<OnValidate>
    Code lines:
    IF MsPayOrPaypalOption = MsPayOrPaypalOption::"Microsoft Pay" THEN BEGIN
      O365SalesInvoicePayment.SetMspayDefault;
      IF CONFIRM(RemovePaypalSettingsQst) THEN
        PaypalAccountProxy.SetPaypalAccount('',TRUE); <=====================
    END ELSE
      O365SalesInvoicePayment.SetPaypalDefault;
    
    UpdateControls;
    CurrPage.UPDATE;
Codeunit<QBO Sync Proxy>.PROCEDURE<GetQBOAuthURL>
  Raised in: Page<Native - QBO Sync Auth>.<OnAfterGetRecord>
    Code lines:
    QBOSyncProxy.GetQBOAuthURL(AuthorizationURL); <=====================
Codeunit<QBO Sync Proxy>.PROCEDURE<GetQBOSyncSettings>
  Raised in: Page<Native - Sync Services Setting>.PROCEDURE<SetCalculatedFields>
    Code lines:
    QBOSyncProxy.GetQBOSyncSettings(QBOSyncTitle,QBOSyncDescription,QBOSyncEnabled); <=====================
    QBDSyncProxy.GetQBDSyncSettings(QBDSyncTitle,QBDSyncDescription,QBDSyncEnabled,QBDSyncSendToEmail);
  Raised in: Codeunit<O365 Sales Management>.PROCEDURE<GetQboQbdVisibility>
    Code lines:
    QBOSyncProxy.GetQBOSyncSettings(DummyTitle,DummyDescription,QboEnabled); <=====================
    QBDSyncProxy.GetQBDSyncSettings(DummyTitle,DummyDescription,QbdEnabled,DummyEmail);
    
    IF NOT TryGetQbVisibilityFromKeyVault(QboVisibleKV,QbdVisibleKV) THEN BEGIN
      QboVisibleKV := TRUE;
      QbdVisibleKV := TRUE;
    END;
    
    IF QboEnabled THEN
      QboVisible := TRUE
    ...
Codeunit<QBO Sync Proxy>.PROCEDURE<SetQBOSyncEnabled>
  Raised in: Page<Native - Sync Services Setting>.Control<qboSyncEnabled>.<OnValidate>
    Code lines:
    IF QBOSyncEnabled THEN
      ERROR(CantEnableSyncFromHereErr);
    QBOSyncProxy.SetQBOSyncEnabled(QBOSyncEnabled); <=====================
Codeunit<QBD Sync Proxy>.PROCEDURE<GetQBDSyncSettings>
  Raised in: Page<Native - Sync Services Setting>.PROCEDURE<SetCalculatedFields>
    Code lines:
    QBOSyncProxy.GetQBOSyncSettings(QBOSyncTitle,QBOSyncDescription,QBOSyncEnabled);
    QBDSyncProxy.GetQBDSyncSettings(QBDSyncTitle,QBDSyncDescription,QBDSyncEnabled,QBDSyncSendToEmail); <=====================
  Raised in: Codeunit<O365 Sales Management>.PROCEDURE<GetQboQbdVisibility>
    Code lines:
    QBOSyncProxy.GetQBOSyncSettings(DummyTitle,DummyDescription,QboEnabled);
    QBDSyncProxy.GetQBDSyncSettings(DummyTitle,DummyDescription,QbdEnabled,DummyEmail); <=====================
    
    IF NOT TryGetQbVisibilityFromKeyVault(QboVisibleKV,QbdVisibleKV) THEN BEGIN
      QboVisibleKV := TRUE;
      QbdVisibleKV := TRUE;
    END;
    
    IF QboEnabled THEN
      QboVisible := TRUE
    ...
Codeunit<QBD Sync Proxy>.PROCEDURE<SendEmailInBackground>
  Raised in: Page<Native - Sync Services Setting>.PROCEDURE<SendInstructionsByEmail>
    Code lines:
    QBDSyncProxy.SendEmailInBackground(Handled); <=====================
    IF NOT Handled THEN
      ERROR(SendingEmailErr);
    ODataActionManagement.SetDeleteResponseLocation(ActionContext,PAGE::"Native - Sync Services Setting");
Codeunit<QBD Sync Proxy>.PROCEDURE<SetQBDSyncEnabled>
  Raised in: Page<Native - Sync Services Setting>.Control<qbdSyncEnabled>.<OnValidate>
    Code lines:
    QBDSyncProxy.SetQBDSyncEnabled(QBDSyncEnabled); <=====================
Codeunit<QBD Sync Proxy>.PROCEDURE<SetQBDSyncSendToEmail>
  Raised in: Page<Native - Sync Services Setting>.Control<qbdSyncSendToEmail>.<OnValidate>
    Code lines:
    IF QBDSyncSendToEmail = '' THEN
      ERROR(SendToEmailErr);
    
    QBDSyncProxy.SetQBDSyncSendToEmail(QBDSyncSendToEmail); <=====================
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnAfterCheckGenJnlLine>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<RunCheck>
    Code lines:
    ...
    END;
    
    IF CostAccSetup.GET THEN
      CostAccMgt.CheckValidCCAndCOInGLEntry(GenJnlLine."Dimension Set ID");
    
    OnAfterCheckGenJnlLine(GenJnlLine); <=====================
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnAfterDateNoAllowed>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<DateNotAllowed>
    Code lines:
    DateIsNotAllowed := NOT UserSetupManagement.IsPostingDateValid(PostingDate);
    OnAfterDateNoAllowed(PostingDate,DateIsNotAllowed); <=====================
    EXIT(DateIsNotAllowed);
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckAccountNo>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<CheckAccountNo>
    Code lines:
    OnBeforeCheckAccountNo(GenJnlLine,CheckDone); <=====================
    IF CheckDone THEN
      EXIT;
    
    WITH GenJnlLine DO
      CASE "Account Type" OF
        "Account Type"::"G/L Account":
          BEGIN
            IF ("Gen. Bus. Posting Group" <> '') OR ("Gen. Prod. Posting Group" <> '') OR
               ("VAT Bus. Posting Group" <> '') OR ("VAT Prod. Posting Group" <> '')
    ...
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckBalAccountNo>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<CheckBalAccountNo>
    Code lines:
    OnBeforeCheckBalAccountNo(GenJnlLine,CheckDone); <=====================
    IF CheckDone THEN
      EXIT;
    
    WITH GenJnlLine DO
      CASE "Bal. Account Type" OF
        "Bal. Account Type"::"G/L Account":
          BEGIN
            IF ("Bal. Gen. Bus. Posting Group" <> '') OR ("Bal. Gen. Prod. Posting Group" <> '') OR
               ("Bal. VAT Bus. Posting Group" <> '') OR ("Bal. VAT Prod. Posting Group" <> '')
    ...
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckBalDocType>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<CheckBalDocType>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckBalDocType(GenJnlLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH GenJnlLine DO
      IF "Document Type" <> 0 THEN BEGIN
        IF ("Bal. Account Type" = "Bal. Account Type"::Employee) AND NOT
           ("Document Type" IN ["Document Type"::Payment,"Document Type"::" "])
        THEN
    ...
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckDimensions>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<CheckDimensions>
    Code lines:
    OnBeforeCheckDimensions(GenJnlLine,CheckDone); <=====================
    IF CheckDone THEN
      EXIT;
    
    WITH GenJnlLine DO BEGIN
      IF NOT DimMgt.CheckDimIDComb("Dimension Set ID") THEN
        ThrowGenJnlLineError(GenJnlLine,Text011,DimMgt.GetDimCombErr);
    
      TableID[1] := DimMgt.TypeToTableID1("Account Type");
      No[1] := "Account No.";
    ...
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckDocType>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<CheckDocType>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckDocType(GenJnlLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH GenJnlLine DO
      IF "Document Type" <> 0 THEN BEGIN
        IF ("Account Type" = "Account Type"::Employee) AND NOT
           ("Document Type" IN ["Document Type"::Payment,"Document Type"::" "])
        THEN
    ...
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckICPartner>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<CheckICPartner>
    Code lines:
    OnBeforeCheckICPartner(AccountType,AccountNo,DocumentType,CheckDone); <=====================
    IF CheckDone THEN
      EXIT;
    
    CASE AccountType OF
      AccountType::Customer:
        IF Customer.GET(AccountNo) THEN BEGIN
          Customer.CheckBlockedCustOnJnls(Customer,DocumentType,TRUE);
          IF (Customer."IC Partner Code" <> '') AND (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND
             ICPartner.GET(Customer."IC Partner Code")
    ...
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeDateNotAllowed>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<CheckDates>
    Code lines:
    ...
        THEN
          FIELDERROR("Posting Date",Text000);
        AccountingPeriodMgt.CheckPostingDateInFiscalYear("Posting Date");
      END;
    
      OnBeforeDateNotAllowed(GenJnlLine,DateCheckDone); <=====================
      IF NOT DateCheckDone THEN
        IF DateNotAllowed("Posting Date") THEN
          FIELDERROR("Posting Date",Text001);
    
    ...
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeErrorIfNegativeAmt>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<ErrorIfNegativeAmt>
    Code lines:
    RaiseError := GenJnlLine.Amount < 0;
    OnBeforeErrorIfNegativeAmt(GenJnlLine,RaiseError); <=====================
    IF RaiseError THEN
      GenJnlLine.FIELDERROR(Amount,Text007);
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeErrorIfPositiveAmt>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<ErrorIfPositiveAmt>
    Code lines:
    RaiseError := GenJnlLine.Amount > 0;
    OnBeforeErrorIfPositiveAmt(GenJnlLine,RaiseError); <=====================
    IF RaiseError THEN
      GenJnlLine.FIELDERROR(Amount,Text008);
Codeunit<Vend. Entry-Edit>.PROCEDURE<OnBeforeVendLedgEntryModify>
  Raised in: Codeunit<Vend. Entry-Edit>.<OnRun>
    Code lines:
    ...
      VendLedgEntry.VALIDATE("Message to Recipient","Message to Recipient");
    END;
    VendLedgEntry.VALIDATE("Exported to Payment File","Exported to Payment File");
    VendLedgEntry.VALIDATE("Creditor No.","Creditor No.");
    VendLedgEntry.VALIDATE("Payment Reference","Payment Reference");
    OnBeforeVendLedgEntryModify(VendLedgEntry,Rec); <=====================
    VendLedgEntry.TESTFIELD("Entry No.","Entry No.");
    VendLedgEntry.MODIFY;
    Rec := VendLedgEntry;
Codeunit<Empl. Entry-Edit>.PROCEDURE<OnBeforeEmplLedgEntryModify>
  Raised in: Codeunit<Empl. Entry-Edit>.<OnRun>
    Code lines:
    ...
      EmplLedgEntry.VALIDATE("Message to Recipient","Message to Recipient");
    END;
    EmplLedgEntry.VALIDATE("Exported to Payment File","Exported to Payment File");
    EmplLedgEntry.VALIDATE("Creditor No.","Creditor No.");
    EmplLedgEntry.VALIDATE("Payment Reference","Payment Reference");
    OnBeforeEmplLedgEntryModify(EmplLedgEntry,Rec); <=====================
    EmplLedgEntry.TESTFIELD("Entry No.","Entry No.");
    EmplLedgEntry.MODIFY;
    Rec := EmplLedgEntry;
Codeunit<Data Privacy Mgmt>.PROCEDURE<OnAfterGetPackageCode>
  Raised in: Codeunit<Data Privacy Mgmt>.PROCEDURE<GetPackageCode>
    Code lines:
    ...
        BEGIN
          PackageCodeKeep := 'USR' + TempEntityNumber;
          PackageCodeTemp := 'US*' + TempEntityNumber;
        END;
      ELSE
        OnAfterGetPackageCode(EntityTypeTableNo,EntityNo,ActionType,PackageCodeTemp,PackageCodeKeep); <=====================
    END;
    
    IF ActionType = ActionType::"Create a data privacy configuration package" THEN
      EXIT(PackageCodeKeep);
    ...
Codeunit<Data Privacy Mgmt>.PROCEDURE<OnAfterSetPrivacyBlocked>
  Raised in: Codeunit<Data Privacy Mgmt>.PROCEDURE<SetPrivacyBlocked>
    Code lines:
    ...
          IF NOT SalespersonPurchaser."Privacy Blocked" THEN BEGIN
            SalespersonPurchaser.VALIDATE("Privacy Blocked",TRUE);
            IF SalespersonPurchaser.MODIFY THEN;
          END;
      ELSE
        OnAfterSetPrivacyBlocked(EntityTypeTableNo,EntityNo); <=====================
    END;
Codeunit<Data Privacy Mgmt>.PROCEDURE<OnCreateData>
  Raised in: Codeunit<Data Privacy Mgmt>.PROCEDURE<CreateData>
    Code lines:
    ...
              RecRef.GETTABLE(UserSetup);
              CreateRelatedData(RecRef,EntityTypeTableNo,EntityNo,PackageCode,ActionType,GeneratePreview,DataSensitivityOption);
            END;
        END;
      ELSE
        OnCreateData(EntityTypeTableNo,EntityNo,PackageCode,ActionType,GeneratePreview,DataSensitivityOption); <=====================
    END;
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterCalcMinimalPossibleLiability>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CalcPmtDisc>
    Code lines:
    MinimalPossibleLiability := ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible");
    OnAfterCalcMinimalPossibleLiability(NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,MinimalPossibleLiability); <=====================
    
    PaymentExceedsLiability := ABS(OldCVLedgEntryBuf2."Amount to Apply") >= MinimalPossibleLiability;
    OnAfterCalcPaymentExceedsLiability(
      NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,MinimalPossibleLiability,PaymentExceedsLiability);
    
    ToleratedPaymentExceedsLiability :=
      ABS(NewCVLedgEntryBuf."Remaining Amount" + PmtTolAmtToBeApplied) >= MinimalPossibleLiability;
    OnAfterCalcToleratedPaymentExceedsLiability(
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterCalcPaymentExceedsLiability>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CalcPmtDisc>
    Code lines:
    MinimalPossibleLiability := ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible");
    OnAfterCalcMinimalPossibleLiability(NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,MinimalPossibleLiability);
    
    PaymentExceedsLiability := ABS(OldCVLedgEntryBuf2."Amount to Apply") >= MinimalPossibleLiability;
    OnAfterCalcPaymentExceedsLiability( <=====================
      NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,MinimalPossibleLiability,PaymentExceedsLiability);
    
    ToleratedPaymentExceedsLiability :=
      ABS(NewCVLedgEntryBuf."Remaining Amount" + PmtTolAmtToBeApplied) >= MinimalPossibleLiability;
    OnAfterCalcToleratedPaymentExceedsLiability(
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterCalcPmtDiscount>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CalcPmtDisc>
    Code lines:
    ...
      IF (NewCVLedgEntryBuf."Currency Code" = AddCurrencyCode) AND (AddCurrencyCode <> '') THEN
        PmtDiscAddCurr := PmtDisc
      ELSE
        PmtDiscAddCurr := CalcLCYToAddCurr(PmtDiscLCY);
    
      OnAfterCalcPmtDiscount( <=====================
        NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
        PmtTolAmtToBeApplied,PmtDisc,PmtDiscLCY,PmtDiscAddCurr);
    
      IF NOT GLSetup."Pmt. Disc. Excl. VAT" AND GLSetup."Adjust for Payment Disc." AND
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterCalcPmtDiscTolerance>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CalcPmtDiscTolerance>
    Code lines:
    ...
    PmtDiscTolLCY :=
      ROUND(
        (NewCVLedgEntryBuf."Original Amount" + PmtDiscTol) / NewCVLedgEntryBuf."Original Currency Factor") -
      NewCVLedgEntryBuf."Original Amt. (LCY)";
    
    OnAfterCalcPmtDiscTolerance( <=====================
      NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
      PmtDiscTol,PmtDiscTolLCY,PmtDiscTolAddCurr);
    
    OldCVLedgEntryBuf."Pmt. Disc. Given (LCY)" := -PmtDiscTolLCY;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterCalcToleratedPaymentExceedsLiability>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CalcPmtDisc>
    Code lines:
    ...
    OnAfterCalcPaymentExceedsLiability(
      NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,MinimalPossibleLiability,PaymentExceedsLiability);
    
    ToleratedPaymentExceedsLiability :=
      ABS(NewCVLedgEntryBuf."Remaining Amount" + PmtTolAmtToBeApplied) >= MinimalPossibleLiability;
    OnAfterCalcToleratedPaymentExceedsLiability( <=====================
      NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,MinimalPossibleLiability,
      ToleratedPaymentExceedsLiability,PmtTolAmtToBeApplied);
    
    IF (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,TRUE,TRUE) AND
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterFindAmtForAppln>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<FindAmtForAppln>
    Code lines:
    ...
      ELSE
        // Post the realized gain or loss on the OldCVLedgEntryBuf
        AppliedAmountLCY := ROUND(AppliedAmount / NewCVLedgEntryBuf."Original Currency Factor");
    END;
    
    OnAfterFindAmtForAppln( <=====================
      NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,AppliedAmount,AppliedAmountLCY,OldAppliedAmount);
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterGLFinishPosting>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<Code>
    Code lines:
    ...
      CreateDeferralScheduleFromGL(GenJnlLine,Balancing);
    
      IsTransactionConsistent := FinishPosting(GenJnlLine);
    END;
    
    OnAfterGLFinishPosting(GlobalGLEntry,GenJnlLine,IsTransactionConsistent,FirstTransactionNo); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterHandleAddCurrResidualGLEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<HandleAddCurrResidualGLEntry>
    Code lines:
    ...
      CheckGLAccDimError(GenJnlLine,GLEntry."G/L Account No.");
    
      TotalAddCurrAmount := 0;
    END;
    
    OnAfterHandleAddCurrResidualGLEntry(GenJnlLine,GLEntry2); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitBankAccLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InitBankAccLedgEntry>
    Code lines:
    BankAccLedgEntry.INIT;
    BankAccLedgEntry.CopyFromGenJnlLine(GenJnlLine);
    BankAccLedgEntry."Entry No." := NextEntryNo;
    BankAccLedgEntry."Transaction No." := NextTransactionNo;
    
    OnAfterInitBankAccLedgEntry(BankAccLedgEntry,GenJnlLine); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitCheckLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InitCheckLedgEntry>
    Code lines:
    CheckLedgEntry.INIT;
    CheckLedgEntry.CopyFromBankAccLedgEntry(BankAccLedgEntry);
    CheckLedgEntry."Entry No." := NextCheckEntryNo;
    
    OnAfterInitCheckLedgEntry(CheckLedgEntry,BankAccLedgEntry); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitCustLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InitCustLedgEntry>
    Code lines:
    CustLedgEntry.INIT;
    CustLedgEntry.CopyFromGenJnlLine(GenJnlLine);
    CustLedgEntry."Entry No." := NextEntryNo;
    CustLedgEntry."Transaction No." := NextTransactionNo;
    
    OnAfterInitCustLedgEntry(CustLedgEntry,GenJnlLine); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitEmployeeLedgerEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InitEmployeeLedgerEntry>
    Code lines:
    EmployeeLedgerEntry.INIT;
    EmployeeLedgerEntry.CopyFromGenJnlLine(GenJnlLine);
    EmployeeLedgerEntry."Entry No." := NextEntryNo;
    EmployeeLedgerEntry."Transaction No." := NextTransactionNo;
    
    OnAfterInitEmployeeLedgerEntry(EmployeeLedgerEntry,GenJnlLine); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitGLEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InitGLEntry>
    Code lines:
    ...
    GLEntry."System-Created Entry" := SystemCreatedEntry;
    GLEntry.Amount := Amount;
    GLEntry."Additional-Currency Amount" :=
      GLCalcAddCurrency(Amount,AmountAddCurr,GLEntry."Additional-Currency Amount",UseAmountAddCurr,GenJnlLine);
    
    OnAfterInitGLEntry(GLEntry,GenJnlLine); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitGLEntryVAT>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InitGLEntryVAT>
    Code lines:
    ...
      InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,FALSE,TRUE);
      GLEntry."Additional-Currency Amount" := AmountAddCurr;
      GLEntry."Bal. Account No." := BalAccNo;
    END;
    SummarizeVAT(GLSetup."Summarize G/L Entries",GLEntry);
    OnAfterInitGLEntryVAT(GenJnlLine,GLEntry); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitGLEntryVATCopy>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InitGLEntryVATCopy>
    Code lines:
    ...
    InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,FALSE,TRUE);
    GLEntry."Additional-Currency Amount" := AmountAddCurr;
    GLEntry."Bal. Account No." := BalAccNo;
    GLEntry.CopyPostingGroupsFromVATEntry(VATEntry);
    SummarizeVAT(GLSetup."Summarize G/L Entries",GLEntry);
    OnAfterInitGLEntryVATCopy(GenJnlLine,GLEntry); <=====================
    
    EXIT(GLEntry."Entry No.");
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitGLRegister>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<StartPosting>
    Code lines:
    ...
      GLReg."Source Code" := "Source Code";
      GLReg."Journal Batch Name" := "Journal Batch Name";
      GLReg."User ID" := USERID;
      IsGLRegInserted := FALSE;
    
      OnAfterInitGLRegister(GLReg,GenJnlLine); <=====================
    
      GetCurrencyExchRate(GenJnlLine);
      TempGLEntryBuf.DELETEALL;
      CalculateCurrentBalance(
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitNewDtldCVLedgEntryBuf>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CalcApplication>
    Code lines:
    ...
      GenJnlLine,NewCVLedgEntryBuf,DtldCVLedgEntryBuf,
      DtldCVLedgEntryBuf."Entry Type"::Application,-AppliedAmount,-AppliedAmountLCY,0,
      NewCVLedgEntryBuf."Entry No.",PrevNewCVLedgEntryBuf."Remaining Pmt. Disc. Possible",
      PrevNewCVLedgEntryBuf."Max. Payment Tolerance");
    
    OnAfterInitNewDtldCVLedgEntryBuf( <=====================
      DtldCVLedgEntryBuf,NewCVLedgEntryBuf,OldCVLedgEntryBuf,PrevNewCVLedgEntryBuf,PrevOldCVLedgEntryBuf,GenJnlLine);
    
    NewCVLedgEntryBuf.Open := NewCVLedgEntryBuf."Remaining Amount" <> 0;
    IF NOT NewCVLedgEntryBuf.Open AND NOT AllApplied THEN
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitOldDtldCVLedgEntryBuf>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CalcApplication>
    Code lines:
    ...
      GenJnlLine,OldCVLedgEntryBuf,DtldCVLedgEntryBuf,
      DtldCVLedgEntryBuf."Entry Type"::Application,OldAppliedAmount,AppliedAmountLCY,0,
      NewCVLedgEntryBuf."Entry No.",PrevOldCVLedgEntryBuf."Remaining Pmt. Disc. Possible",
      PrevOldCVLedgEntryBuf."Max. Payment Tolerance");
    
    OnAfterInitOldDtldCVLedgEntryBuf( <=====================
      DtldCVLedgEntryBuf,NewCVLedgEntryBuf,OldCVLedgEntryBuf,PrevNewCVLedgEntryBuf,PrevOldCVLedgEntryBuf,GenJnlLine);
    
    OldCVLedgEntryBuf.Open := OldCVLedgEntryBuf."Remaining Amount" <> 0;
    IF NOT OldCVLedgEntryBuf.Open THEN
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitVendLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InitVendLedgEntry>
    Code lines:
    VendLedgEntry.INIT;
    VendLedgEntry.CopyFromGenJnlLine(GenJnlLine);
    VendLedgEntry."Entry No." := NextEntryNo;
    VendLedgEntry."Transaction No." := NextTransactionNo;
    
    OnAfterInitVendLedgEntry(VendLedgEntry,GenJnlLine); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInsertGlobalGLEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<FinishPosting>
    Code lines:
    ...
          GlobalGLEntry."Add.-Currency Credit Amount" := 0;
        END;
        GlobalGLEntry."Prior-Year Entry" := GlobalGLEntry."Posting Date" < FiscalYearStartDate;
        OnBeforeInsertGlobalGLEntry(GlobalGLEntry,GenJnlLine);
        GlobalGLEntry.INSERT(TRUE);
        OnAfterInsertGlobalGLEntry(GlobalGLEntry); <=====================
      UNTIL TempGLEntryBuf.NEXT = 0;
    
      GLReg."To VAT Entry No." := NextVATEntryNo - 1;
      GLReg."To Entry No." := GlobalGLEntry."Entry No.";
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInsertVAT>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertVAT>
    Code lines:
    ...
    
        OnBeforeInsertVATEntry(VATEntry,GenJnlLine);
        VATEntry.INSERT(TRUE);
        GLEntryVATEntryLink.InsertLink(TempGLEntryBuf."Entry No.",VATEntry."Entry No.");
        NextVATEntryNo := NextVATEntryNo + 1;
        OnAfterInsertVATEntry(GenJnlLine,VATEntry,TempGLEntryBuf."Entry No.",NextVATEntryNo); <=====================
      END;
    
      // VAT for G/L entry/entries
      IF (GLEntryVATAmount <> 0) OR
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInsertVATEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertVAT>
    Code lines:
    ...
    
        OnBeforeInsertVATEntry(VATEntry,GenJnlLine);
        VATEntry.INSERT(TRUE);
        GLEntryVATEntryLink.InsertLink(TempGLEntryBuf."Entry No.",VATEntry."Entry No.");
        NextVATEntryNo := NextVATEntryNo + 1;
        OnAfterInsertVATEntry(GenJnlLine,VATEntry,TempGLEntryBuf."Entry No.",NextVATEntryNo); <=====================
      END;
    
      // VAT for G/L entry/entries
      IF (GLEntryVATAmount <> 0) OR
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterOldCustLedgEntryModify>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<ApplyCustLedgEntry>
    Code lines:
    ...
      OldCustLedgEntry := TempOldCustLedgEntry;
      OldCustLedgEntry."Applies-to ID" := '';
      OldCustLedgEntry."Amount to Apply" := 0;
      OldCustLedgEntry.MODIFY;
    
      OnAfterOldCustLedgEntryModify(OldCustLedgEntry); <=====================
    
      IF GLSetup."Unrealized VAT" OR
         (GLSetup."Prepayment Unrealized VAT" AND TempOldCustLedgEntry.Prepayment)
      THEN
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterOldVendLedgEntryModify>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<ApplyVendLedgEntry>
    Code lines:
    ...
      OldVendLedgEntry := TempOldVendLedgEntry;
      OldVendLedgEntry."Applies-to ID" := '';
      OldVendLedgEntry."Amount to Apply" := 0;
      OldVendLedgEntry.MODIFY;
    
      OnAfterOldVendLedgEntryModify(OldVendLedgEntry); <=====================
    
      IF GLSetup."Unrealized VAT" OR
         (GLSetup."Prepayment Unrealized VAT" AND TempOldVendLedgEntry.Prepayment)
      THEN
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostApply>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostApply>
    Code lines:
    ...
    
    PaymentToleranceMgt.CalcRemainingPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,GLSetup);
    
    CalcAmtLCYAdjustment(OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine);
    
    OnAfterPostApply(GenJnlLine,DtldCVLedgEntryBuf,OldCVLedgEntryBuf,NewCVLedgEntryBuf,NewCVLedgEntryBuf2); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostCust>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostCust>
    Code lines:
    ...
    
      DeferralPosting("Deferral Code","Source Code",ReceivablesAccount,GenJnlLine,Balancing);
      OnMoveGenJournalLine(CustLedgEntry.RECORDID);
    END;
    
    OnAfterPostCust(GenJnlLine,Balancing); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostDeferral>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostDeferral>
    Code lines:
    ...
        UNTIL DeferralLine.NEXT = 0;
      END ELSE
        ERROR(NoDeferralScheduleErr,"Line No.","Deferral Code");
    END;
    
    OnAfterPostDeferral(GenJournalLine,TempGLEntryBuf,AccountNo); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostGLAcc>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostGLAcc>
    Code lines:
    ...
      PostVAT(GenJnlLine,GLEntry,VATPostingSetup);
      DeferralPosting("Deferral Code","Source Code","Account No.",GenJnlLine,Balancing);
      OnMoveGenJournalLine(GLEntry.RECORDID);
    END;
    
    OnAfterPostGLAcc(GenJnlLine); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostUnrealVATEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostUnrealVATEntry>
    Code lines:
    ...
    VATEntry2."Add.-Curr. Rem. Unreal. Amount" :=
      VATEntry2."Add.-Curr. Rem. Unreal. Amount" - VATEntry."Additional-Currency Amount";
    VATEntry2."Add.-Curr. Rem. Unreal. Base" :=
      VATEntry2."Add.-Curr. Rem. Unreal. Base" - VATEntry."Additional-Currency Base";
    VATEntry2.MODIFY;
    OnAfterPostUnrealVATEntry(GenJnlLine,VATEntry2); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostVAT>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostVAT>
    Code lines:
    ...
              InsertSummarizedVAT(GenJnlLine);
            END;
          END;
      END;
    
    OnAfterPostVAT(GenJnlLine,GLEntry,VATPostingSetup); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostVend>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostVend>
    Code lines:
    ...
          DtldVendLedgEntry.SetZeroTransNo(NextTransactionNo);
      DeferralPosting("Deferral Code","Source Code",PayablesAccount,GenJnlLine,Balancing);
      OnMoveGenJournalLine(VendLedgEntry.RECORDID);
    END;
    
    OnAfterPostVend(GenJnlLine,Balancing); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterRunWithCheck>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<RunWithCheck>
    Code lines:
    GenJnlLine.COPY(GenJnlLine2);
    Code(GenJnlLine,TRUE);
    OnAfterRunWithCheck(GenJnlLine); <=====================
    GenJnlLine2 := GenJnlLine;
    EXIT(GLEntryNo);
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterRunWithoutCheck>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<RunWithoutCheck>
    Code lines:
    GenJnlLine.COPY(GenJnlLine2);
    Code(GenJnlLine,FALSE);
    OnAfterRunWithoutCheck(GenJnlLine); <=====================
    GenJnlLine2 := GenJnlLine;
    EXIT(GLEntryNo);
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterSettingIsTransactionConsistent>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<FinishPosting>
    Code lines:
    IsTransactionConsistent :=
      (BalanceCheckAmount = 0) AND (BalanceCheckAmount2 = 0) AND
      (BalanceCheckAddCurrAmount = 0) AND (BalanceCheckAddCurrAmount2 = 0);
    
    OnAfterSettingIsTransactionConsistent(GenJnlLine,IsTransactionConsistent); <=====================
    
    IF TempGLEntryBuf.FINDSET THEN BEGIN
      REPEAT
        GlobalGLEntry := TempGLEntryBuf;
        IF AddCurrencyCode = '' THEN BEGIN
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeApplyCustLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<ApplyCustLedgEntry>
    Code lines:
    OnBeforeApplyCustLedgEntry(NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,Cust); <=====================
    
    IF NewCVLedgEntryBuf."Amount to Apply" = 0 THEN
      EXIT;
    
    AllApplied := TRUE;
    IF (GenJnlLine."Applies-to Doc. No." = '') AND (GenJnlLine."Applies-to ID" = '') AND
       NOT
       ((Cust."Application Method" = Cust."Application Method"::"Apply to Oldest") AND
        GenJnlLine."Allow Application")
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeApplyVendLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<ApplyVendLedgEntry>
    Code lines:
    OnBeforeApplyVendLedgEntry(NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,Vend); <=====================
    
    IF NewCVLedgEntryBuf."Amount to Apply" = 0 THEN
      EXIT;
    
    AllApplied := TRUE;
    IF (GenJnlLine."Applies-to Doc. No." = '') AND (GenJnlLine."Applies-to ID" = '') AND
       NOT
       ((Vend."Application Method" = Vend."Application Method"::"Apply to Oldest") AND
        GenJnlLine."Allow Application")
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCalcCurrencyApplnRounding>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostApply>
    Code lines:
    ...
    IF NOT BlockPaymentTolerance THEN
      CalcPmtDiscTolerance(
        NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
        NextTransactionNo,FirstNewVATEntryNo);
    
    OnBeforeCalcCurrencyApplnRounding( <=====================
      GenJnlLine,DtldCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,OldCVLedgEntryBuf3,NewCVLedgEntryBuf,NewCVLedgEntryBuf2);
    
    CalcCurrencyApplnRounding(
      NewCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCalcPmtDiscTolerance>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CalcPmtDiscTolerance>
    Code lines:
    IF NOT OldCVLedgEntryBuf2."Accepted Pmt. Disc. Tolerance" THEN
      EXIT;
    
    OnBeforeCalcPmtDiscTolerance( <=====================
      NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine);
    
    PmtDiscTol := -OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible";
    PmtDiscTolLCY :=
      ROUND(
        (NewCVLedgEntryBuf."Original Amount" + PmtDiscTol) / NewCVLedgEntryBuf."Original Currency Factor") -
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCalcPmtTolerance>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CalcPmtTolerance>
    Code lines:
    IF OldCVLedgEntryBuf2."Accepted Payment Tolerance" = 0 THEN
      EXIT;
    
    OnBeforeCalcPmtTolerance( <=====================
      NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,PmtTolAmtToBeApplied);
    
    PmtTol := -OldCVLedgEntryBuf2."Accepted Payment Tolerance";
    PmtTolAmtToBeApplied := PmtTolAmtToBeApplied + PmtTol;
    PmtTolLCY :=
      ROUND(
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCheckGLAccDimError>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CheckGLAccDimError>
    Code lines:
    OnBeforeCheckGLAccDimError(GenJnlLine,GLAccNo); <=====================
    
    IF (GenJnlLine.Amount = 0) AND (GenJnlLine."Amount (LCY)" = 0) THEN
      EXIT;
    
    TableID[1] := DATABASE::"G/L Account";
    AccNo[1] := GLAccNo;
    IF DimMgt.CheckDimValuePosting(TableID,AccNo,GenJnlLine."Dimension Set ID") THEN
      EXIT;
    
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCheckPurchExtDocNo>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostVend>
    Code lines:
    ...
    
      // Check the document no.
      IF "Recurring Method" = 0 THEN
        IF IsNotPayment("Document Type") THEN BEGIN
          GenJnlCheckLine.CheckPurchDocNoIsNotUsed("Document Type","Document No.");
          OnBeforeCheckPurchExtDocNo(GenJnlLine,VendLedgEntry,CVLedgEntryBuf,CheckExtDocNoHandled); <=====================
          IF NOT CheckExtDocNoHandled THEN
            CheckPurchExtDocNo(GenJnlLine);
        END;
    
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCode>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<Code>
    Code lines:
    IsPosted := FALSE;
    OnBeforeCode(GenJnlLine,CheckLine,IsPosted,GLReg); <=====================
    IF IsPosted THEN
      EXIT;
    
    GetGLSourceCode;
    
    WITH GenJnlLine DO BEGIN
      IF EmptyLine THEN BEGIN
        InitLastDocDate(GenJnlLine);
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeContinuePosting>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<ContinuePosting>
    Code lines:
    OnBeforeContinuePosting(GenJnlLine); <=====================
    
    IF NextTransactionNoNeeded(GenJnlLine) THEN BEGIN
      CheckPostUnrealizedVAT(GenJnlLine,FALSE);
      NextTransactionNo := NextTransactionNo + 1;
      InitLastDocDate(GenJnlLine);
      FirstNewVATEntryNo := NextVATEntryNo;
    END;
    
    GetCurrencyExchRate(GenJnlLine);
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCreateGLEntriesForTotalAmounts>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CreateGLEntriesForTotalAmounts>
    Code lines:
    OnBeforeCreateGLEntriesForTotalAmounts(InvPostBuf,GenJnlLine,GLAccNo); <=====================
    
    GLEntryInserted := FALSE;
    
    WITH InvPostBuf DO BEGIN
      RESET;
      IF FINDSET THEN
        REPEAT
          IF (Amount <> 0) OR ("Amount (ACY)" <> 0) AND (AddCurrencyCode <> '') THEN BEGIN
            DimMgt.UpdateGenJnlLineDim(GenJnlLine,"Dimension Set ID");
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCreateGLEntryGainLossInsertGLEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CreateGLEntryGainLoss>
    Code lines:
    InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,UseAmountAddCurr,TRUE);
    OnBeforeCreateGLEntryGainLossInsertGLEntry(GenJnlLine,GLEntry); <=====================
    InsertGLEntry(GenJnlLine,GLEntry,TRUE);
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCustLedgEntryModify>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<UpdateCustLedgEntry>
    Code lines:
    ...
      CustLedgEntry."Pmt. Disc. Given (LCY)" := 0;
      CustLedgEntry."Pmt. Tolerance (LCY)" := 0;
      CustLedgEntry."Calculate Interest" := FALSE;
    END;
    
    OnBeforeCustLedgEntryModify(CustLedgEntry,DtldCustLedgEntry); <=====================
    CustLedgEntry.MODIFY;
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCustUnrealizedVAT>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CustUnrealizedVAT>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCustUnrealizedVAT(GenJnlLine,CustLedgEntry2,SettledAmount,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    PaidAmount := CustLedgEntry2."Amount (LCY)" - CustLedgEntry2."Remaining Amt. (LCY)";
    VATEntry2.RESET;
    VATEntry2.SETCURRENTKEY("Transaction No.");
    VATEntry2.SETRANGE("Transaction No.",CustLedgEntry2."Transaction No.");
    IF VATEntry2.FINDSET THEN
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeEmplLedgEntryModify>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<UpdateEmplLedgEntry>
    Code lines:
    ...
      EmplLedgEntry."Closed at Date" := 0D;
      EmplLedgEntry."Closed by Amount" := 0;
      EmplLedgEntry."Closed by Amount (LCY)" := 0;
    END;
    
    OnBeforeEmplLedgEntryModify(EmplLedgEntry,DtldEmplLedgEntry); <=====================
    EmplLedgEntry.MODIFY;
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeFindAmtForAppln>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<FindAmtForAppln>
    Code lines:
    OnBeforeFindAmtForAppln( <=====================
      NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,AppliedAmount,AppliedAmountLCY,OldAppliedAmount,Handled,
      ApplnRoundingPrecision);
    IF Handled THEN
      EXIT;
    
    IF OldCVLedgEntryBuf2.GETFILTER(Positive) <> '' THEN BEGIN
      IF OldCVLedgEntryBuf2."Amount to Apply" <> 0 THEN BEGIN
        IF (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,FALSE,FALSE) AND
            (ABS(OldCVLedgEntryBuf2."Amount to Apply") >=
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInitGLEntryVAT>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InitGLEntryVAT>
    Code lines:
    OnBeforeInitGLEntryVAT(GenJnlLine,GLEntry); <=====================
    IF UseAmtAddCurr THEN
      InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,AmountAddCurr,TRUE,TRUE)
    ELSE BEGIN
      InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,FALSE,TRUE);
      GLEntry."Additional-Currency Amount" := AmountAddCurr;
      GLEntry."Bal. Account No." := BalAccNo;
    END;
    SummarizeVAT(GLSetup."Summarize G/L Entries",GLEntry);
    OnAfterInitGLEntryVAT(GenJnlLine,GLEntry);
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInitGLEntryVATCopy>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InitGLEntryVATCopy>
    Code lines:
    OnBeforeInitGLEntryVATCopy(GenJnlLine,GLEntry); <=====================
    InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,FALSE,TRUE);
    GLEntry."Additional-Currency Amount" := AmountAddCurr;
    GLEntry."Bal. Account No." := BalAccNo;
    GLEntry.CopyPostingGroupsFromVATEntry(VATEntry);
    SummarizeVAT(GLSetup."Summarize G/L Entries",GLEntry);
    OnAfterInitGLEntryVATCopy(GenJnlLine,GLEntry);
    
    EXIT(GLEntry."Entry No.");
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertDtldCustLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertDtldCustLedgEntry>
    Code lines:
    ...
      "Journal Batch Name" := GenJnlLine."Journal Batch Name";
      "Reason Code" := GenJnlLine."Reason Code";
      "Source Code" := GenJnlLine."Source Code";
      "Transaction No." := NextTransactionNo;
      UpdateDebitCredit(GenJnlLine.Correction);
      OnBeforeInsertDtldCustLedgEntry(DtldCustLedgEntry,GenJnlLine,DtldCVLedgEntryBuf); <=====================
      INSERT(TRUE);
    END;
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertDtldCustLedgEntryUnapply>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertDtldCustLedgEntryUnapply>
    Code lines:
    ...
      Unapplied := TRUE;
      "Unapplied by Entry No." := OldDtldCustLedgEntry."Entry No.";
      "Document No." := GenJnlLine."Document No.";
      "Source Code" := GenJnlLine."Source Code";
      "User ID" := USERID;
      OnBeforeInsertDtldCustLedgEntryUnapply(NewDtldCustLedgEntry,GenJnlLine,OldDtldCustLedgEntry); <=====================
      INSERT(TRUE);
    END;
    NextDtldLedgEntryNo := NextDtldLedgEntryNo + 1;
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertDtldEmplLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertDtldEmplLedgEntry>
    Code lines:
    ...
      "Journal Batch Name" := GenJnlLine."Journal Batch Name";
      "Reason Code" := GenJnlLine."Reason Code";
      "Source Code" := GenJnlLine."Source Code";
      "Transaction No." := NextTransactionNo;
      UpdateDebitCredit(GenJnlLine.Correction);
      OnBeforeInsertDtldEmplLedgEntry(DtldEmplLedgEntry,GenJnlLine,DtldCVLedgEntryBuf); <=====================
      INSERT(TRUE);
    END;
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertDtldEmplLedgEntryUnapply>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertDtldEmplLedgEntryUnapply>
    Code lines:
    ...
      Unapplied := TRUE;
      "Unapplied by Entry No." := OldDtldEmplLedgEntry."Entry No.";
      "Document No." := GenJnlLine."Document No.";
      "Source Code" := GenJnlLine."Source Code";
      "User ID" := USERID;
      OnBeforeInsertDtldEmplLedgEntryUnapply(NewDtldEmplLedgEntry,GenJnlLine,OldDtldEmplLedgEntry); <=====================
      INSERT(TRUE);
    END;
    NextDtldLedgEntryNo := NextDtldLedgEntryNo + 1;
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertDtldVendLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertDtldVendLedgEntry>
    Code lines:
    ...
      "Journal Batch Name" := GenJnlLine."Journal Batch Name";
      "Reason Code" := GenJnlLine."Reason Code";
      "Source Code" := GenJnlLine."Source Code";
      "Transaction No." := NextTransactionNo;
      UpdateDebitCredit(GenJnlLine.Correction);
      OnBeforeInsertDtldVendLedgEntry(DtldVendLedgEntry,GenJnlLine,DtldCVLedgEntryBuf); <=====================
      INSERT(TRUE);
    END;
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertDtldVendLedgEntryUnapply>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertDtldVendLedgEntryUnapply>
    Code lines:
    ...
      Unapplied := TRUE;
      "Unapplied by Entry No." := OldDtldVendLedgEntry."Entry No.";
      "Document No." := GenJnlLine."Document No.";
      "Source Code" := GenJnlLine."Source Code";
      "User ID" := USERID;
      OnBeforeInsertDtldVendLedgEntryUnapply(NewDtldVendLedgEntry,GenJnlLine,OldDtldVendLedgEntry); <=====================
      INSERT(TRUE);
    END;
    NextDtldLedgEntryNo := NextDtldLedgEntryNo + 1;
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertGLEntryBuffer>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertGLEntry>
    Code lines:
    ...
      UpdateDebitCredit(GenJnlLine.Correction);
    END;
    
    TempGLEntryBuf := GLEntry;
    
    OnBeforeInsertGLEntryBuffer(TempGLEntryBuf,GenJnlLine); <=====================
    
    TempGLEntryBuf.INSERT;
    
    IF FirstEntryNo = 0 THEN
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertGlobalGLEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<FinishPosting>
    Code lines:
    ...
          GlobalGLEntry."Additional-Currency Amount" := 0;
          GlobalGLEntry."Add.-Currency Debit Amount" := 0;
          GlobalGLEntry."Add.-Currency Credit Amount" := 0;
        END;
        GlobalGLEntry."Prior-Year Entry" := GlobalGLEntry."Posting Date" < FiscalYearStartDate;
        OnBeforeInsertGlobalGLEntry(GlobalGLEntry,GenJnlLine); <=====================
        GlobalGLEntry.INSERT(TRUE);
        OnAfterInsertGlobalGLEntry(GlobalGLEntry);
      UNTIL TempGLEntryBuf.NEXT = 0;
    
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertPostUnrealVATEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostUnrealVATEntry>
    Code lines:
    ...
    VATEntry.Closed := FALSE;
    VATEntry."Transaction No." := NextTransactionNo;
    VATEntry."Sales Tax Connection No." := NextConnectionNo;
    VATEntry."Unrealized VAT Entry No." := VATEntry2."Entry No.";
    VATEntry."Base Before Pmt. Disc." := VATEntry.Base;
    OnBeforeInsertPostUnrealVATEntry(VATEntry,GenJnlLine); <=====================
    VATEntry.INSERT(TRUE);
    GLEntryVATEntryLink.InsertLink(GLEntryNo + 1,NextVATEntryNo);
    NextVATEntryNo := NextVATEntryNo + 1;
    
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertTempVATEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertPmtDiscVATForVATEntry>
    Code lines:
    ...
      TempVATEntry."Additional-Currency Base" := 0;
      TempVATEntry."Additional-Currency Amount" := 0;
      TempVATEntry."Add.-Currency Unrealized Amt." := 0;
      TempVATEntry."Add.-Currency Unrealized Base" := 0;
    END;
    OnBeforeInsertTempVATEntry(TempVATEntry,GenJnlLine); <=====================
    TempVATEntry.INSERT;
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertVAT>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertVAT>
    Code lines:
    OnBeforeInsertVAT(GenJnlLine,VATEntry,UnrealizedVAT,AddCurrencyCode); <=====================
    
    WITH GenJnlLine DO BEGIN
      // Post VAT
      // VAT for VAT entry
      VATEntry.INIT;
      VATEntry.CopyFromGenJnlLine(GenJnlLine);
      VATEntry."Entry No." := NextVATEntryNo;
      VATEntry."EU Service" := VATPostingSetup."EU Service";
      VATEntry."Transaction No." := NextTransactionNo;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertVATEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertVAT>
    Code lines:
    ...
        IF "System-Created Entry" THEN
          VATEntry."Base Before Pmt. Disc." := "VAT Base Before Pmt. Disc."
        ELSE
          VATEntry."Base Before Pmt. Disc." := GLEntryAmount;
    
        OnBeforeInsertVATEntry(VATEntry,GenJnlLine); <=====================
        VATEntry.INSERT(TRUE);
        GLEntryVATEntryLink.InsertLink(TempGLEntryBuf."Entry No.",VATEntry."Entry No.");
        NextVATEntryNo := NextVATEntryNo + 1;
        OnAfterInsertVATEntry(GenJnlLine,VATEntry,TempGLEntryBuf."Entry No.",NextVATEntryNo);
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePostApply>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostApply>
    Code lines:
    OnBeforePostApply(GenJnlLine,DtldCVLedgEntryBuf,OldCVLedgEntryBuf,NewCVLedgEntryBuf,NewCVLedgEntryBuf2); <=====================
    
    OldRemainingAmtBeforeAppln := OldCVLedgEntryBuf."Remaining Amount";
    OldCVLedgEntryBuf3 := OldCVLedgEntryBuf;
    
    // Management of posting in multiple currencies
    OldCVLedgEntryBuf2 := OldCVLedgEntryBuf;
    OldCVLedgEntryBuf.COPYFILTER(Positive,OldCVLedgEntryBuf2.Positive);
    ApplnRoundingPrecision := GetApplnRoundPrecision(NewCVLedgEntryBuf,OldCVLedgEntryBuf);
    
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePostDeferral>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostDeferral>
    Code lines:
    OnBeforePostDeferral(GenJournalLine,AccountNo); <=====================
    
    WITH GenJournalLine DO BEGIN
      IF "Source Type" IN ["Source Type"::Vendor,"Source Type"::Customer] THEN
        // Purchasing and Sales, respectively
        // We can create these types directly from the GL window, need to make sure we don't already have a deferral schedule
        // created for this GL Trx before handing it off to sales/purchasing subsystem
        IF "Source Code" <> GLSourceCode THEN BEGIN
          PostDeferralPostBuffer(GenJournalLine);
          EXIT;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePostGenJnlLine>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostGenJnlLine>
    Code lines:
    OnBeforePostGenJnlLine(GenJnlLine,Balancing); <=====================
    
    WITH GenJnlLine DO
      CASE "Account Type" OF
        "Account Type"::"G/L Account":
          PostGLAcc(GenJnlLine,Balancing);
        "Account Type"::Customer:
          PostCust(GenJnlLine,Balancing);
        "Account Type"::Vendor:
          PostVend(GenJnlLine,Balancing);
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePostUnrealVATEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostUnrealVATEntry>
    Code lines:
    OnBeforePostUnrealVATEntry(GenJnlLine,VATEntry); <=====================
    VATEntry.LOCKTABLE;
    VATEntry := VATEntry2;
    VATEntry."Entry No." := NextVATEntryNo;
    VATEntry."Posting Date" := GenJnlLine."Posting Date";
    VATEntry."Document No." := GenJnlLine."Document No.";
    VATEntry."External Document No." := GenJnlLine."External Document No.";
    VATEntry."Document Type" := GenJnlLine."Document Type";
    VATEntry.Amount := VATAmount;
    VATEntry.Base := VATBase;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePostVAT>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostVAT>
    Code lines:
    OnBeforePostVAT(GenJnlLine,GLEntry,VATPostingSetup); <=====================
    
    WITH GenJnlLine DO
      // Post VAT
      // VAT for VAT entry
      CASE "VAT Calculation Type" OF
        "VAT Calculation Type"::"Normal VAT",
        "VAT Calculation Type"::"Reverse Charge VAT",
        "VAT Calculation Type"::"Full VAT":
          BEGIN
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePrepareTempCustledgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PrepareTempCustLedgEntry>
    Code lines:
    OnBeforePrepareTempCustledgEntry(GenJnlLine,NewCVLedgEntryBuf); <=====================
    
    IF GenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
      // Find the entry to be applied to
      OldCustLedgEntry.RESET;
      OldCustLedgEntry.SETCURRENTKEY("Document No.");
      OldCustLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
      OldCustLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
      OldCustLedgEntry.SETRANGE("Customer No.",NewCVLedgEntryBuf."CV No.");
      OldCustLedgEntry.SETRANGE(Open,TRUE);
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePrepareTempVendLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PrepareTempVendLedgEntry>
    Code lines:
    OnBeforePrepareTempVendLedgEntry(GenJnlLine,NewCVLedgEntryBuf); <=====================
    
    IF GenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
      // Find the entry to be applied to
      OldVendLedgEntry.RESET;
      OldVendLedgEntry.SETCURRENTKEY("Document No.");
      OldVendLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
      OldVendLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
      OldVendLedgEntry.SETRANGE("Vendor No.",NewCVLedgEntryBuf."CV No.");
      OldVendLedgEntry.SETRANGE(Open,TRUE);
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeStartOrContinuePosting>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<Code>
    Code lines:
    ...
      IF "Due Date" = 0D THEN
        "Due Date" := "Posting Date";
    
      JobLine := ("Job No." <> '');
    
      OnBeforeStartOrContinuePosting(GenJnlLine,LastDocType,LastDocNo,LastDate,NextEntryNo); <=====================
    
      IF NextEntryNo = 0 THEN
        StartPosting(GenJnlLine)
      ELSE
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeStartPosting>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<StartPosting>
    Code lines:
    OnBeforeStartPosting(GenJnlLine); <=====================
    
    WITH GenJnlLine DO BEGIN
      InitNextEntryNo;
      FirstTransactionNo := NextTransactionNo;
    
      InitLastDocDate(GenJnlLine);
      CurrentBalance := 0;
    
      FiscalYearStartDate := AccountingPeriodMgt.GetPeriodStartingDate;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeUpdateTotalAmounts>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<UpdateTotalAmounts>
    Code lines:
    OnBeforeUpdateTotalAmounts(TempInvPostBuf,DimSetID,AmountToCollect,AmountACYToCollect,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH TempInvPostBuf DO BEGIN
      SETRANGE("Dimension Set ID",DimSetID);
      IF FINDFIRST THEN BEGIN
        Amount += AmountToCollect;
        "Amount (ACY)" += AmountACYToCollect;
        MODIFY;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeVendLedgEntryModify>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<UpdateVendLedgEntry>
    Code lines:
    ...
      VendLedgEntry."Closed by Currency Amount" := 0;
      VendLedgEntry."Pmt. Disc. Rcd.(LCY)" := 0;
      VendLedgEntry."Pmt. Tolerance (LCY)" := 0;
    END;
    
    OnBeforeVendLedgEntryModify(VendLedgEntry,DtldVendLedgEntry); <=====================
    VendLedgEntry.MODIFY;
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeVendUnrealizedVAT>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<VendUnrealizedVAT>
    Code lines:
    IsHandled := FALSE;
    OnBeforeVendUnrealizedVAT(GenJnlLine,VendLedgEntry2,SettledAmount,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    VATEntry2.RESET;
    VATEntry2.SETCURRENTKEY("Transaction No.");
    VATEntry2.SETRANGE("Transaction No.",VendLedgEntry2."Transaction No.");
    PaidAmount := -VendLedgEntry2."Amount (LCY)" + VendLedgEntry2."Remaining Amt. (LCY)";
    IF VATEntry2.FINDSET THEN
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnCalcPmtDiscIfAdjVATCopyFields>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CalcPmtDiscIfAdjVAT>
    Code lines:
    ...
            DtldCVLedgEntryBuf2.CopyFromCVLedgEntryBuf(NewCVLedgEntryBuf);
            // The total payment discount in currency is posted on the entry made in
            // the function CalcPmtDisc.
            DtldCVLedgEntryBuf2."User ID" := USERID;
            DtldCVLedgEntryBuf2."Additional-Currency Amount" := -VATBaseAddCurr;
            OnCalcPmtDiscIfAdjVATCopyFields(DtldCVLedgEntryBuf2,OldCVLedgEntryBuf); <=====================
            DtldCVLedgEntryBuf2.CopyPostingGroupsFromVATEntry(VATEntry2);
            TotalVATAmount := 0;
            LastConnectionNo := VATEntry2."Sales Tax Connection No.";
          END;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnCalcPmtDiscOnAfterAssignPmtDisc>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CalcPmtDisc>
    Code lines:
    ...
      PmtDiscLCY :=
        ROUND(
          (NewCVLedgEntryBuf."Original Amount" + PmtDisc) / NewCVLedgEntryBuf."Original Currency Factor") -
        NewCVLedgEntryBuf."Original Amt. (LCY)";
    
      OnCalcPmtDiscOnAfterAssignPmtDisc(PmtDisc,PmtDiscLCY,OldCVLedgEntryBuf,OldCVLedgEntryBuf2); <=====================
    
      OldCVLedgEntryBuf."Pmt. Disc. Given (LCY)" := -PmtDiscLCY;
    
      IF (NewCVLedgEntryBuf."Currency Code" = AddCurrencyCode) AND (AddCurrencyCode <> '') THEN
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnCalcPmtToleranceOnAfterAssignPmtDisc>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CalcPmtTolerance>
    Code lines:
    ...
    PmtTolLCY :=
      ROUND(
        (NewCVLedgEntryBuf."Original Amount" + PmtTol) / NewCVLedgEntryBuf."Original Currency Factor") -
      NewCVLedgEntryBuf."Original Amt. (LCY)";
    
    OnCalcPmtToleranceOnAfterAssignPmtDisc( <=====================
      PmtTol,PmtTolLCY,PmtTolAmtToBeApplied,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,
      NewCVLedgEntryBuf,DtldCVLedgEntryBuf,NextTransactionNo,FirstNewVATEntryNo);
    
    OldCVLedgEntryBuf."Accepted Payment Tolerance" := 0;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnCustUnrealizedVATOnAfterVATPartCalculation>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CustUnrealizedVAT>
    Code lines:
    ...
            PaidAmount,
            CustLedgEntry2."Original Amt. (LCY)",
            TotalUnrealVATAmountFirst,
            TotalUnrealVATAmountLast);
    
        OnCustUnrealizedVATOnAfterVATPartCalculation( <=====================
          GenJnlLine,CustLedgEntry2,PaidAmount,TotalUnrealVATAmountFirst,TotalUnrealVATAmountLast,SettledAmount,VATEntry2);
    
        IF VATPart > 0 THEN BEGIN
          CASE VATEntry2."VAT Calculation Type" OF
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnNextTransactionNoNeeded>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<NextTransactionNoNeeded>
    Code lines:
    WITH GenJnlLine DO BEGIN
      NewTransaction :=
        (LastDocType <> "Document Type") OR (LastDocNo <> "Document No.") OR
        (LastDate <> "Posting Date") OR ((CurrentBalance = 0) AND (TotalAddCurrAmount = 0)) AND NOT "System-Created Entry";
      IF NOT NewTransaction THEN
        OnNextTransactionNoNeeded(GenJnlLine,LastDocType,LastDocNo,LastDate,CurrentBalance,TotalAddCurrAmount,NewTransaction); <=====================
      EXIT(NewTransaction);
    END;
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPrepareTempCustLedgEntryOnBeforeExit>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PrepareTempCustLedgEntry>
    Code lines:
    ...
        UNTIL TempOldCustLedgEntry.NEXT = 0;
        TempOldCustLedgEntry.SETRANGE(Positive,RemainingAmount < 0);
      END ELSE
        TempOldCustLedgEntry.SETRANGE(Positive);
    
      OnPrepareTempCustLedgEntryOnBeforeExit(GenJnlLine,NewCVLedgEntryBuf,TempOldCustLedgEntry); <=====================
      EXIT(TempOldCustLedgEntry.FIND('-'));
    END;
    EXIT(TRUE);
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPrepareTempVendLedgEntryOnBeforeExit>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PrepareTempVendLedgEntry>
    Code lines:
    ...
        UNTIL TempOldVendLedgEntry.NEXT = 0;
        TempOldVendLedgEntry.SETRANGE(Positive,RemainingAmount < 0);
      END ELSE
        TempOldVendLedgEntry.SETRANGE(Positive);
    
      OnPrepareTempVendLedgEntryOnBeforeExit(GenJnlLine,NewCVLedgEntryBuf,TempOldVendLedgEntry); <=====================
      EXIT(TempOldVendLedgEntry.FIND('-'));
    END;
    EXIT(TRUE);
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnUnapplyCustLedgEntryOnAfterCreateGLEntriesForTotalAmounts>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<UnapplyCustLedgEntry>
    Code lines:
    ...
      UpdateCustLedgEntry(DtldCustLedgEntry2);
    UNTIL DtldCustLedgEntry2.NEXT = 0;
    
    CreateGLEntriesForTotalAmountsUnapply(GenJnlLine,TempInvPostBuf,CustPostingGr.GetReceivablesAccount);
    
    OnUnapplyCustLedgEntryOnAfterCreateGLEntriesForTotalAmounts(GenJnlLine2,DtldCustLedgEntry); <=====================
    
    IF IsTempGLEntryBufEmpty THEN
      DtldCustLedgEntry.SetZeroTransNo(NextTransactionNo);
    CheckPostUnrealizedVAT(GenJnlLine,TRUE);
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnUnapplyVendLedgEntryOnAfterCreateGLEntriesForTotalAmounts>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<UnapplyVendLedgEntry>
    Code lines:
    ...
      UpdateVendLedgEntry(DtldVendLedgEntry2);
    UNTIL DtldVendLedgEntry2.NEXT = 0;
    
    CreateGLEntriesForTotalAmountsUnapply(GenJnlLine,TempInvPostBuf,VendPostingGr.GetPayablesAccount);
    
    OnUnapplyVendLedgEntryOnAfterCreateGLEntriesForTotalAmounts(GenJnlLine2,DtldVendLedgEntry); <=====================
    
    IF IsTempGLEntryBufEmpty THEN
      DtldVendLedgEntry.SetZeroTransNo(NextTransactionNo);
    CheckPostUnrealizedVAT(GenJnlLine,TRUE);
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnVendUnrealizedVATOnAfterVATPartCalculation>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<VendUnrealizedVAT>
    Code lines:
    ...
            PaidAmount,
            VendLedgEntry2."Original Amt. (LCY)",
            TotalUnrealVATAmountFirst,
            TotalUnrealVATAmountLast);
    
        OnVendUnrealizedVATOnAfterVATPartCalculation( <=====================
          GenJnlLine,VendLedgEntry2,PaidAmount,TotalUnrealVATAmountFirst,TotalUnrealVATAmountLast,SettledAmount,VATEntry2);
    
        IF VATPart > 0 THEN BEGIN
          CASE VATEntry2."VAT Calculation Type" OF
    ...
Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<OnBeforeCreateGenJnlDataExchLine>
  Raised in: Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<ExportGenJnlLine>
    Code lines:
    ...
    Window.OPEN(ProgressMsg);
    REPEAT
      LineNo += 1;
      Window.UPDATE(1,LineNo);
    
      OnBeforeCreateGenJnlDataExchLine(DataExch,GenJnlLine2,LineNo,LineAmount,TotalAmount,TransferDate,HandledGenJnlDataExchLine); <=====================
      IF NOT HandledGenJnlDataExchLine THEN
        CreateGenJnlDataExchLine(DataExch."Entry No.",GenJnlLine2,LineNo);
    
      CreditTransferEntry.CreateNew(CreditTransferRegister."No.",LineNo,
    ...
Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<OnBeforeInsertPmtExportDataJnlFromGenJnlLine>
  Raised in: Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<PreparePaymentExportDataJnl>
    Code lines:
    ...
      "Line No." := LineNo;
      "Payment Reference" := GenJnlLine."Payment Reference";
      IF PaymentMethod.GET(GenJnlLine."Payment Method Code") THEN
        "Data Exch. Line Def Code" := PaymentMethod."Pmt. Export Line Definition";
      "Recipient Creditor No." := GenJnlLine."Creditor No.";
      OnBeforeInsertPmtExportDataJnlFromGenJnlLine(TempPaymentExportData,GenJnlLine,GeneralLedgerSetup); <=====================
      INSERT(TRUE);
    END;
Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<OnBeforePaymentExport>
  Raised in: Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<ExportGenJnlLine>
    Code lines:
    ...
        GenJnlLine2."Posting Date",GenJnlLine2."Currency Code",GenJnlLine2.Amount,'',
        GenJnlLine2."Recipient Bank Account",GenJnlLine2."Message to Recipient");
    UNTIL GenJnlLine2.NEXT = 0;
    Window.CLOSE;
    
    OnBeforePaymentExport(GenJnlLine."Bal. Account No.",DataExch."Entry No.",LineNo,TotalAmount,TransferDate,HandledPaymentExport); <=====================
    IF NOT HandledPaymentExport THEN
      PaymentExportMgt.ExportToFile(DataExch."Entry No.");
    
    CODEUNIT.RUN(CODEUNIT::"Exp. User Feedback Gen. Jnl.",DataExch);
Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<OnCheckGenJnlLine>
  Raised in: Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<CheckGenJnlLine>
    Code lines:
    GenJnlLine.DeletePaymentFileBatchErrors;
    GenJnlLine2.COPYFILTERS(GenJnlLine);
    IF GenJnlLine2.FINDSET THEN
      REPEAT
        CODEUNIT.RUN(CODEUNIT::"Payment Export Gen. Jnl Check",GenJnlLine2);
        OnCheckGenJnlLine(GenJnlLine2); <=====================
      UNTIL GenJnlLine2.NEXT = 0;
    
    IF GenJnlLine2.HasPaymentFileErrorsInBatch THEN BEGIN
      COMMIT;
    ...
Codeunit<Pmt Export Mgt Vend Ledg Entry>.PROCEDURE<OnBeforeCreateVendLedgerDataExchLine>
  Raised in: Codeunit<Pmt Export Mgt Vend Ledg Entry>.PROCEDURE<ExportVendLedgerEntry>
    Code lines:
    ...
    PaymentExportMgt.CreateDataExch(DataExch,VendorLedgerEntry2."Bal. Account No.");
    Window.OPEN(ProgressMsg);
    REPEAT
      LineNo += 1;
      Window.UPDATE(1,LineNo);
      OnBeforeCreateVendLedgerDataExchLine(DataExch,VendorLedgerEntry2,LineNo,LineAmount, <=====================
        TotalAmount,TransferDate,HandledGenJnlDataExchLine);
      IF NOT HandledGenJnlDataExchLine THEN
        CreateVendLedgerDataExchLine(DataExch."Entry No.",VendorLedgerEntry2,LineNo);
    UNTIL VendorLedgerEntry2.NEXT = 0;
    ...
Codeunit<Pmt Export Mgt Vend Ledg Entry>.PROCEDURE<OnBeforeInsertPmtExportDataJnlFromVendorLedgerEntry>
  Raised in: Codeunit<Pmt Export Mgt Vend Ledg Entry>.PROCEDURE<PreparePaymentExportDataVLE>
    Code lines:
    ...
      "Line No." := LineNo;
      "Payment Reference" := VendorLedgerEntry."Payment Reference";
      IF PaymentMethod.GET(VendorLedgerEntry."Payment Method Code") THEN
        "Data Exch. Line Def Code" := PaymentMethod."Pmt. Export Line Definition";
      "Recipient Creditor No." := VendorLedgerEntry."Creditor No.";
      OnBeforeInsertPmtExportDataJnlFromVendorLedgerEntry(TempPaymentExportData,VendorLedgerEntry,GeneralLedgerSetup); <=====================
      INSERT(TRUE);
    END;
Codeunit<Pmt Export Mgt Vend Ledg Entry>.PROCEDURE<OnBeforePaymentExportVendorLedgerEntry>
  Raised in: Codeunit<Pmt Export Mgt Vend Ledg Entry>.PROCEDURE<ExportVendLedgerEntry>
    Code lines:
    ...
      IF NOT HandledGenJnlDataExchLine THEN
        CreateVendLedgerDataExchLine(DataExch."Entry No.",VendorLedgerEntry2,LineNo);
    UNTIL VendorLedgerEntry2.NEXT = 0;
    Window.CLOSE;
    
    OnBeforePaymentExportVendorLedgerEntry(VendorLedgerEntry."Bal. Account No.",DataExch."Entry No.", <=====================
      LineNo,TotalAmount,TransferDate,HandledPaymentExportVendLedgerEntry);
    IF NOT HandledPaymentExportVendLedgerEntry THEN
      PaymentExportMgt.ExportToFile(DataExch."Entry No.")
Codeunit<Pmt Export Mgt Cust Ledg Entry>.PROCEDURE<OnBeforeCreateCustLedgerDataExchLine>
  Raised in: Codeunit<Pmt Export Mgt Cust Ledg Entry>.PROCEDURE<ExportCustLedgerEntry>
    Code lines:
    ...
    PaymentExportMgt.CreateDataExch(DataExch,CustLedgerEntry2."Bal. Account No.");
    Window.OPEN(ProgressMsg);
    REPEAT
      LineNo += 1;
      Window.UPDATE(1,LineNo);
      OnBeforeCreateCustLedgerDataExchLine(DataExch,CustLedgerEntry2,LineNo,LineAmount, <=====================
        TotalAmount,TransferDate,HandledGenJnlDataExchLine);
      IF NOT HandledGenJnlDataExchLine THEN
        CreateCustLedgerDataExchLine(DataExch."Entry No.",CustLedgerEntry2,LineNo);
    UNTIL CustLedgerEntry2.NEXT = 0;
    ...
Codeunit<Pmt Export Mgt Cust Ledg Entry>.PROCEDURE<OnBeforePaymentExportCustLedgerEntry>
  Raised in: Codeunit<Pmt Export Mgt Cust Ledg Entry>.PROCEDURE<ExportCustLedgerEntry>
    Code lines:
    ...
        TotalAmount,TransferDate,HandledGenJnlDataExchLine);
      IF NOT HandledGenJnlDataExchLine THEN
        CreateCustLedgerDataExchLine(DataExch."Entry No.",CustLedgerEntry2,LineNo);
    UNTIL CustLedgerEntry2.NEXT = 0;
    Window.CLOSE;
    OnBeforePaymentExportCustLedgerEntry(CustLedgerEntry."Bal. Account No.",DataExch."Entry No.", <=====================
      LineNo,TotalAmount,TransferDate,HandledPaymentExportVendLedgerEntry);
    IF NOT HandledPaymentExportVendLedgerEntry THEN
      PaymentExportMgt.ExportToFile(DataExch."Entry No.")
Codeunit<Payment Export Gen. Jnl Check>.PROCEDURE<OnPaymentExportGenJnlCheck>
  Raised in: Codeunit<Payment Export Gen. Jnl Check>.PROCEDURE<CheckPaymentExportGenJnl>
    Code lines:
    ...
          ("Bank Payment Type" <> "Bank Payment Type"::"Electronic Payment-IAT"))
      THEN
        InsertPaymentFileError(STRSUBSTNO(WrongBankPaymentTypeErr,FIELDCAPTION("Bank Payment Type"),
            "Bank Payment Type"::"Electronic Payment","Bank Payment Type"::"Electronic Payment-IAT"));
    
      OnPaymentExportGenJnlCheck(GenJournalLine,Handled); <=====================
      IF NOT Handled THEN BEGIN
        IF NOT ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::Employee])
        THEN
          InsertPaymentFileError(MustBeVendorEmployeeOrCustomerErr);
    ...
Codeunit<Pmt. Export Vend. Ledger Check>.PROCEDURE<OnCheckEmptyPmtInfoVendorLedgerEntry>
  Raised in: Codeunit<Pmt. Export Vend. Ledger Check>.PROCEDURE<CheckEmptyPmtInfo>
    Code lines:
    VendLedgEntry2.COPY(VendLedgEntry);
    VendLedgEntry2.SETRANGE("Recipient Bank Account",'');
    VendLedgEntry2.SETRANGE("Creditor No.",'');
    
    OnCheckEmptyPmtInfoVendorLedgerEntry(VendLedgEntry2,Handled); <=====================
    
    IF NOT Handled THEN
      IF NOT VendLedgEntry2.ISEMPTY THEN
        ERROR(EmptyPaymentDetailsErr,
          VendLedgEntry2.FIELDCAPTION("Recipient Bank Account"),VendLedgEntry2.FIELDCAPTION("Creditor No."));
Codeunit<Pmt. Export Vend. Ledger Check>.PROCEDURE<OnPmtExportVendorLedgerCheck>
  Raised in: Codeunit<Pmt. Export Vend. Ledger Check>.<OnRun>
    Code lines:
    ...
    CheckEmptyPmtInfo(Rec);
    CheckBalAccountType(Rec);
    CheckBankAccount(Rec);
    CheckBalAccountNo(Rec);
    
    OnPmtExportVendorLedgerCheck(Rec); <=====================
Codeunit<Pmt. Export Cust. Ledger Check>.PROCEDURE<OnPmtExportCustLedgerCheck>
  Raised in: Codeunit<Pmt. Export Cust. Ledger Check>.<OnRun>
    Code lines:
    ...
    CheckPaymentMethod(Rec);
    CheckBalAccountType(Rec);
    CheckBankAccount(Rec);
    CheckBalAccountNo(Rec);
    
    OnPmtExportCustLedgerCheck(Rec); <=====================
Codeunit<Read Data Exch. from File>.PROCEDURE<OnBeforeFileImport>
  Raised in: Codeunit<Read Data Exch. from File>.<OnRun>
    Code lines:
    OnBeforeFileImport(TempBlob,"File Name"); <=====================
    
    IF NOT TempBlob.Blob.HASVALUE THEN
      "File Name" := COPYSTR(FileMgt.BLOBImportWithFilter(TempBlob,ImportBankStmtTxt,'',FileFilterTxt,FileFilterExtensionTxt),1,250);
    
    IF "File Name" <> '' THEN
      "File Content" := TempBlob.Blob;
Codeunit<Process Gen. Journal  Lines>.PROCEDURE<OnBeforeUpdateGenJnlLines>
  Raised in: Codeunit<Process Gen. Journal  Lines>.PROCEDURE<UpdateGenJournalLines>
    Code lines:
    OnBeforeUpdateGenJnlLines(GenJournalLineTemplate); <=====================
    
    GenJournalLine.SETRANGE("Journal Template Name",GenJournalLineTemplate."Journal Template Name");
    GenJournalLine.SETRANGE("Journal Batch Name",GenJournalLineTemplate."Journal Batch Name");
    GenJournalLine.SETFILTER("Line No.",'>%1',GenJournalLineTemplate."Line No.");
    IF GenJournalLine.FINDSET THEN BEGIN
      DocNo := GenJournalLineTemplate."Document No.";
      REPEAT
        GenJournalLine.VALIDATE("Document No.",DocNo);
        GenJournalLine.MODIFY(TRUE);
    ...
Codeunit<Match Bank Pmt. Appl.>.PROCEDURE<OnAfterMatchBankPayments>
  Raised in: Codeunit<Match Bank Pmt. Appl.>.<OnRun>
    Code lines:
    BankAccReconciliationLine.FilterBankRecLines(Rec);
    IF BankAccReconciliationLine.FINDFIRST THEN BEGIN
      MatchBankPayments.SetApplyEntries(TRUE);
      MatchBankPayments.RUN(BankAccReconciliationLine);
    END;
    OnAfterMatchBankPayments(Rec); <=====================
Codeunit<Match Bank Payments>.PROCEDURE<OnInitBankAccLedgerEntriesMatchingBufferSetFilter>
  Raised in: Codeunit<Match Bank Payments>.PROCEDURE<InitializeBankAccLedgerEntriesMatchingBuffer>
    Code lines:
    ...
    PurchasesPayablesSetup.GET;
    
    BankAccLedgerEntry.SETRANGE(Open,TRUE);
    BankAccLedgerEntry.SETRANGE("Bank Account No.",BankAccReconciliationLine."Bank Account No.");
    
    OnInitBankAccLedgerEntriesMatchingBufferSetFilter(BankAccLedgerEntry,BankAccReconciliationLine); <=====================
    
    IF BankAccount.IsInLocalCurrency THEN
      IF PurchasesPayablesSetup."Appln. between Currencies" = PurchasesPayablesSetup."Appln. between Currencies"::None THEN BEGIN
        GeneralLedgerSetup.GET;
    ...
Codeunit<Match Bank Payments>.PROCEDURE<OnInitCustomerLedgerEntriesMatchingBufferSetFilter>
  Raised in: Codeunit<Match Bank Payments>.PROCEDURE<InitializeCustomerLedgerEntriesMatchingBuffer>
    Code lines:
    ...
      CustLedgerEntry."Document Type"::Invoice,
      CustLedgerEntry."Document Type"::"Credit Memo",
      CustLedgerEntry."Document Type"::"Finance Charge Memo",
      CustLedgerEntry."Document Type"::Reminder);
    
    OnInitCustomerLedgerEntriesMatchingBufferSetFilter(CustLedgerEntry,BankAccReconciliationLine); <=====================
    
    IF BankAccount.IsInLocalCurrency THEN BEGIN
      CustLedgerEntry.SETAUTOCALCFIELDS("Remaining Amt. (LCY)");
      IF SalesReceivablesSetup."Appln. between Currencies" = SalesReceivablesSetup."Appln. between Currencies"::None THEN BEGIN
    ...
Codeunit<Match Bank Payments>.PROCEDURE<OnInitVendorLedgerEntriesMatchingBufferSetFilter>
  Raised in: Codeunit<Match Bank Payments>.PROCEDURE<InitializeVendorLedgerEntriesMatchingBuffer>
    Code lines:
    ...
      VendorLedgerEntry."Document Type"::Invoice,
      VendorLedgerEntry."Document Type"::"Credit Memo",
      VendorLedgerEntry."Document Type"::"Finance Charge Memo",
      VendorLedgerEntry."Document Type"::Reminder);
    
    OnInitVendorLedgerEntriesMatchingBufferSetFilter(VendorLedgerEntry,BankAccReconciliationLine); <=====================
    
    IF BankAccount.IsInLocalCurrency THEN BEGIN
      VendorLedgerEntry.SETAUTOCALCFIELDS("Remaining Amt. (LCY)");
      IF PurchasesPayablesSetup."Appln. between Currencies" = PurchasesPayablesSetup."Appln. between Currencies"::None THEN BEGIN
    ...
Codeunit<Exp. Pre-Mapping Gen. Jnl.>.PROCEDURE<OnBeforeInsertPaymentExoprtData>
  Raised in: Codeunit<Exp. Pre-Mapping Gen. Jnl.>.PROCEDURE<PreparePaymentExportDataJnl>
    Code lines:
    ...
      "Payment Reference" := GenJnlLine."Payment Reference";
      IF PaymentMethod.GET(GenJnlLine."Payment Method Code") THEN
        "Data Exch. Line Def Code" := PaymentMethod."Pmt. Export Line Definition";
      "Recipient Creditor No." := GenJnlLine."Creditor No.";
    
      OnBeforeInsertPaymentExoprtData(PaymentExportData,GenJnlLine,GeneralLedgerSetup); <=====================
    
      INSERT(TRUE);
    END;
Codeunit<Update Currency Exchange Rates>.PROCEDURE<OnBeforeGetCurrencyExchangeData>
  Raised in: Codeunit<Update Currency Exchange Rates>.PROCEDURE<GetCurrencyExchangeData>
    Code lines:
    CLEAR(ResponseTempBlob);
    ResponseTempBlob.INIT;
    ResponseTempBlob.Blob.CREATEINSTREAM(ResponseInStream);
    
    OnBeforeGetCurrencyExchangeData(CurrExchRateUpdateSetup,ResponseInStream,SourceName,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    ExecuteWebServiceRequest(CurrExchRateUpdateSetup,ResponseInStream);
    CurrExchRateUpdateSetup.GetWebServiceURL(ServiceUrl);
Codeunit<Get Bank Stmt. Line Candidates>.PROCEDURE<OnBeforeTransferCandidatestoAppliedPmtEntries>
  Raised in: Codeunit<Get Bank Stmt. Line Candidates>.PROCEDURE<TransferCandidatestoAppliedPmtEntries>
    Code lines:
    OnBeforeTransferCandidatestoAppliedPmtEntries(BankAccReconLine,TempBankStmtMatchingBuffer,Handled); <=====================
    IF NOT Handled THEN
      GetCandidateRanking(BankAccReconLine,TempBankStmtMatchingBuffer);
    BankAccount.GET(BankAccReconLine."Bank Account No.");
    
    PaymentApplicationProposal.RESET;
    TempBankStmtMatchingBuffer.RESET;
    TempBankStmtMatchingBuffer.SETRANGE("One to Many Match",FALSE);
    IF TempBankStmtMatchingBuffer.FINDSET THEN
      REPEAT
    ...
Codeunit<Http Web Request Mgt.>.PROCEDURE<OnOverrideUrl>
  Raised in: Codeunit<Http Web Request Mgt.>.PROCEDURE<Initialize>
    Code lines:
    IF NOT PermissionManager.SoftwareAsAService THEN
      OnOverrideUrl(URL); <=====================
    
    HttpWebRequest := HttpWebRequest.Create(URL);
    SetDefaults;
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterIncrementBatchName>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<UpdateAndDeleteLines>
    Code lines:
    ...
          IF GenJnlTemplate.Type = GenJnlTemplate.Type::Assets THEN
            FAJnlSetup.IncGenJnlBatchName(GenJnlBatch);
          GenJnlBatch.Name := INCSTR(GenJnlLine."Journal Batch Name");
          IF GenJnlBatch.INSERT THEN;
          GenJnlLine."Journal Batch Name" := GenJnlBatch.Name;
          OnAfterIncrementBatchName(GenJnlBatch,GenJnlLine2."Journal Batch Name"); <=====================
        END;
    
      GenJnlLine3.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
      IF (GenJnlBatch."No. Series" = '') AND NOT GenJnlLine3.FINDLAST THEN BEGIN
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterMultiplyAmounts>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<MultiplyAmounts>
    Code lines:
    ...
          "Job Line Discount Amount" := "Job Line Discount Amount" * Factor;
          "Job Line Disc. Amount (LCY)" := "Job Line Disc. Amount (LCY)" * Factor;
        END;
      END;
    
    OnAfterMultiplyAmounts(GenJnlLine2,Factor,SuppressCommit); <=====================
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterPostAllocations>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<PostAllocations>
    Code lines:
    ...
            END;
          UNTIL GenJnlAlloc.NEXT = 0;
        END;
      END;
    
    OnAfterPostAllocations(AllocateGenJnlLine,Reversing,SuppressCommit); <=====================
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterPostGenJnlLine>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<PostGenJournalLine>
    Code lines:
    ...
      PrepareGenJnlLineAddCurr(GenJnlLine5);
      UpdateIncomingDocument(GenJnlLine5);
      OnBeforePostGenJnlLine(GenJnlLine5,SuppressCommit,IsPosted);
      IF NOT IsPosted THEN
        GenJnlPostLine.RunWithoutCheck(GenJnlLine5);
      OnAfterPostGenJnlLine(GenJnlLine5,SuppressCommit,GenJnlPostLine); <=====================
      IF (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND (CurrentICPartner <> '') AND
         ("IC Direction" = "IC Direction"::Outgoing) AND (ICTransactionNo > 0)
      THEN
        ICOutboxMgt.CreateOutboxJnlLine(ICTransactionNo,1,GenJnlLine5);
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterPostReversingLines>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<PostReversingLines>
    Code lines:
    ...
          GenJnlPostLine.RunWithCheck(GenJournalLine2);
          PostAllocations(GenJournalLine1,TRUE);
        END;
      UNTIL TempGenJnlLine.NEXT = 0;
    
    OnAfterPostReversingLines(TempGenJnlLine,PreviewMode); <=====================
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterProcessBalanceOfLines>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<ProcessBalanceOfLines>
    Code lines:
    ...
      CopyFields(GenJnlLine);
      IF VATEntryCreated AND VATInfoSourceLineIsInserted THEN
        UpdateGenJnlLineWithVATInfo(GenJnlLine,GenJnlLineVATInfoSource,StartLineNo,LastLineNo);
    END;
    
    OnAfterProcessBalanceOfLines(GenJnlLine); <=====================
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterUpdateLineBalance>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<ProcessBalanceOfLines>
    Code lines:
    ...
            StartLineNo := "Line No.";
          END;
          IF CurrentBalanceReverse = 0 THEN
            StartLineNoReverse := "Line No.";
          UpdateLineBalance;
          OnAfterUpdateLineBalance(GenJnlLine); <=====================
          CurrentBalance := CurrentBalance + "Balance (LCY)";
          IF "Recurring Method" >= "Recurring Method"::"RF Reversing Fixed" THEN
            CurrentBalanceReverse := CurrentBalanceReverse + "Balance (LCY)";
    
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeCheckBalance>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<CheckBalance>
    Code lines:
    OnBeforeCheckBalance( <=====================
      GenJnlTemplate,GenJnlLine,CurrentBalance,CurrentBalanceReverse,CurrencyBalance,
      StartLineNo,StartLineNoReverse,LastDocType,LastDocNo,LastDate,LastCurrencyCode,SuppressCommit);
    
    WITH GenJnlLine DO BEGIN
      IF CurrentBalance <> 0 THEN BEGIN
        GET("Journal Template Name","Journal Batch Name",StartLineNo);
        IF GenJnlTemplate."Force Doc. Balance" THEN
          ERROR(
            Text012 +
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeCode>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<Code>
    Code lines:
    OnBeforeCode(GenJnlLine,PreviewMode,SuppressCommit); <=====================
    
    WITH GenJnlLine DO BEGIN
      SETRANGE("Journal Template Name","Journal Template Name");
      SETRANGE("Journal Batch Name","Journal Batch Name");
    
      LOCKTABLE;
      GenJnlAlloc.LOCKTABLE;
    
      GenJnlTemplate.GET("Journal Template Name");
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeIfCheckBalance>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<ProcessBalanceOfLines>
    Code lines:
    ...
            DocCorrection := Correction;
          END ELSE
            IF Correction <> DocCorrection THEN
              FIELDERROR(Correction,Text008);
        END;
        OnBeforeIfCheckBalance(GenJnlTemplate,GenJnlLine,LastDocType,LastDocNo,LastDate,ForceCheckBalance,SuppressCommit); <=====================
        IF ForceCheckBalance OR ("Posting Date" <> LastDate) OR GenJnlTemplate."Force Doc. Balance" AND
           (("Document Type" <> LastDocType) OR ("Document No." <> LastDocNo))
        THEN BEGIN
          CheckBalance(GenJnlLine);
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforePostAllocations>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<PostAllocations>
    Code lines:
    IsHandled := FALSE;
    OnBeforePostAllocations(AllocateGenJnlLine,Reversing,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH AllocateGenJnlLine DO
      IF "Account No." <> '' THEN BEGIN
        GenJnlAlloc.RESET;
        GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
        GenJnlAlloc.SETRANGE("Journal Batch Name","Journal Batch Name");
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforePostGenJnlLine>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<PostGenJournalLine>
    Code lines:
    ...
      MakeRecurringTexts(GenJournalLine);
      CheckDocumentNo(GenJournalLine);
      GenJnlLine5.COPY(GenJournalLine);
      PrepareGenJnlLineAddCurr(GenJnlLine5);
      UpdateIncomingDocument(GenJnlLine5);
      OnBeforePostGenJnlLine(GenJnlLine5,SuppressCommit,IsPosted); <=====================
      IF NOT IsPosted THEN
        GenJnlPostLine.RunWithoutCheck(GenJnlLine5);
      OnAfterPostGenJnlLine(GenJnlLine5,SuppressCommit,GenJnlPostLine);
      IF (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND (CurrentICPartner <> '') AND
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeProcessLines>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<ProcessLines>
    Code lines:
    OnBeforeProcessLines(GenJnlLine,PreviewMode,SuppressCommit); <=====================
    
    WITH GenJnlLine DO BEGIN
      IF NOT FIND('=><') THEN BEGIN
        "Line No." := 0;
        IF PreviewMode THEN
          GenJnlPostPreview.ThrowError;
        IF NOT SuppressCommit THEN
          COMMIT;
        EXIT;
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeRaiseExceedLengthError>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<Code>
    Code lines:
    ...
    
      GenJnlTemplate.GET("Journal Template Name");
      GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
    
      RaiseError := STRLEN(INCSTR(GenJnlBatch.Name)) > MAXSTRLEN(GenJnlBatch.Name);
      OnBeforeRaiseExceedLengthError(GenJnlBatch,RaiseError); <=====================
      IF RaiseError THEN
        GenJnlBatch.FIELDERROR(Name,STRSUBSTNO(Text000,MAXSTRLEN(GenJnlBatch.Name)));
    
      IF GenJnlTemplate.Recurring THEN BEGIN
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeUpdateAndDeleteLines>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<UpdateAndDeleteLines>
    Code lines:
    OnBeforeUpdateAndDeleteLines(GenJnlLine,SuppressCommit); <=====================
    
    ClearDataExchEntries(GenJnlLine);
    IF GenJnlTemplate.Recurring THEN BEGIN
      // Recurring journal
      LineCount := 0;
      GenJnlLine2.COPY(GenJnlLine);
      GenJnlLine2.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Line No.");
      GenJnlLine2.FINDSET(TRUE,FALSE);
      REPEAT
    ...
Codeunit<Customer Mgt.>.PROCEDURE<SkipSettingFilter>
  Raised in: Codeunit<Customer Mgt.>.PROCEDURE<GetCurrentYearFilter>
    Code lines:
    SkipSettingFilter(SkipSetFilter); <=====================
    IF SkipSetFilter THEN
      EXIT(CustDateFilter);
    
    IF FiscalYearTotals THEN
      DateFilterCalc.CreateAccountingPeriodFilter(CustDateFilter,CustDateName,WORKDATE,0)
    ELSE
      DateFilterCalc.CreateFiscalYearFilter(CustDateFilter,CustDateName,WORKDATE,0);
    
    EXIT(CustDateFilter);
Codeunit<CAL Test Runner Publisher>.PROCEDURE<OnSetSeed>
  Raised in: Codeunit<CAL Test Runner Publisher>.PROCEDURE<SetSeed>
    Code lines:
    OnSetSeed(NewSeed); <=====================
Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnAfterInsertAllSalesInvLines>
  Raised in: Codeunit<Sales-Quote to Invoice>.<OnRun>
    Code lines:
    ...
    
    SalesInvoiceLine.LOCKTABLE;
    
    CreateSalesInvoiceHeader(SalesInvoiceHeader,Rec);
    CreateSalesInvoiceLines(SalesInvoiceHeader,Rec);
    OnAfterInsertAllSalesInvLines(SalesInvoiceLine,Rec); <=====================
    
    SalesSetup.GET;
    IF SalesSetup."Default Posting Date" = SalesSetup."Default Posting Date"::"No Date" THEN BEGIN
      SalesInvoiceHeader."Posting Date" := 0D;
    ...
Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnAfterInsertSalesInvoiceLine>
  Raised in: Codeunit<Sales-Quote to Invoice>.PROCEDURE<CreateSalesInvoiceLines>
    Code lines:
    ...
          IF SalesInvoiceLine."No." <> '' THEN
            SalesInvoiceLine.DefaultDeferralCode;
          SalesInvoiceLine.InitQtyToShip;
          OnBeforeInsertSalesInvoiceLine(SalesQuoteLine,SalesQuoteHeader,SalesInvoiceLine,SalesInvoiceHeader);
          SalesInvoiceLine.INSERT;
          OnAfterInsertSalesInvoiceLine(SalesQuoteLine,SalesQuoteHeader,SalesInvoiceLine,SalesInvoiceHeader); <=====================
        UNTIL SalesQuoteLine.NEXT = 0;
    
      MoveLineCommentsToSalesInvoice(SalesInvoiceHeader,SalesQuoteHeader);
    
    ...
Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnAfterOnRun>
  Raised in: Codeunit<Sales-Quote to Invoice>.<OnRun>
    Code lines:
    ...
    DELETE;
    
    COMMIT;
    CLEAR(CustCheckCrLimit);
    
    OnAfterOnRun(Rec,SalesInvoiceHeader); <=====================
Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnBeforeDeletionOfQuote>
  Raised in: Codeunit<Sales-Quote to Invoice>.<OnRun>
    Code lines:
    ...
      SalesInvoiceHeader.MODIFY;
    END;
    UpdateEmailParameters(SalesInvoiceHeader);
    UpdateCouponClaims(SalesInvoiceHeader);
    
    OnBeforeDeletionOfQuote(Rec,SalesInvoiceHeader); <=====================
    
    DELETELINKS;
    DELETE;
    
    ...
Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnBeforeInsertSalesInvoiceHeader>
  Raised in: Codeunit<Sales-Quote to Invoice>.PROCEDURE<CreateSalesInvoiceHeader>
    Code lines:
    ...
      IF "Posting Date" <> 0D THEN
        SalesInvoiceHeader."Posting Date" := "Posting Date"
      ELSE
        SalesInvoiceHeader."Posting Date" := WORKDATE;
      SalesInvoiceHeader.InitFromSalesHeader(SalesQuoteHeader);
      OnBeforeInsertSalesInvoiceHeader(SalesInvoiceHeader,SalesQuoteHeader); <=====================
      SalesInvoiceHeader.MODIFY;
    END;
Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnBeforeInsertSalesInvoiceLine>
  Raised in: Codeunit<Sales-Quote to Invoice>.PROCEDURE<CreateSalesInvoiceLines>
    Code lines:
    ...
          SalesInvoiceLine."Document Type" := SalesInvoiceHeader."Document Type";
          SalesInvoiceLine."Document No." := SalesInvoiceHeader."No.";
          IF SalesInvoiceLine."No." <> '' THEN
            SalesInvoiceLine.DefaultDeferralCode;
          SalesInvoiceLine.InitQtyToShip;
          OnBeforeInsertSalesInvoiceLine(SalesQuoteLine,SalesQuoteHeader,SalesInvoiceLine,SalesInvoiceHeader); <=====================
          SalesInvoiceLine.INSERT;
          OnAfterInsertSalesInvoiceLine(SalesQuoteLine,SalesQuoteHeader,SalesInvoiceLine,SalesInvoiceHeader);
        UNTIL SalesQuoteLine.NEXT = 0;
    
    ...
Codeunit<Release Incoming Document>.PROCEDURE<OnAfterCreateDocFromIncomingDocFail>
  Raised in: Codeunit<Release Incoming Document>.PROCEDURE<Fail>
    Code lines:
    ...
      Status := Status::Failed;
    
      MODIFY(TRUE);
      COMMIT;
    
      OnAfterCreateDocFromIncomingDocFail(IncomingDocument); <=====================
    END;
Codeunit<Release Incoming Document>.PROCEDURE<OnAfterCreateDocFromIncomingDocSuccess>
  Raised in: Codeunit<Release Incoming Document>.PROCEDURE<Create>
    Code lines:
    ...
    
      Status := Status::Created;
    
      MODIFY(TRUE);
      COMMIT;
      OnAfterCreateDocFromIncomingDocSuccess(IncomingDocument); <=====================
    END;
Codeunit<Release Incoming Document>.PROCEDURE<OnAfterReleaseIncomingDoc>
  Raised in: Codeunit<Release Incoming Document>.<OnRun>
    Code lines:
    ...
    "Released Date-Time" := CURRENTDATETIME;
    "Released By User ID" := USERSECURITYID;
    
    MODIFY(TRUE);
    
    OnAfterReleaseIncomingDoc(Rec); <=====================
Codeunit<Send Incoming Document to OCR>.PROCEDURE<OnAfterIncomingDocReadyForOCR>
  Raised in: Codeunit<Send Incoming Document to OCR>.PROCEDURE<SendToJobQueue>
    Code lines:
    ...
    IncomingDocument."OCR Status" := IncomingDocument."OCR Status"::Ready;
    IncomingDocument.MODIFY;
    
    CODEUNIT.RUN(CODEUNIT::"Release Incoming Document",IncomingDocument);
    ShowMessage(DocumentHasBeenScheduledTxt);
    OnAfterIncomingDocReadyForOCR(IncomingDocument); <=====================
Codeunit<Send Incoming Document to OCR>.PROCEDURE<OnAfterIncomingDocReceivedFromOCR>
  Raised in: Codeunit<Send Incoming Document to OCR>.PROCEDURE<SetStatusToReceived>
    Code lines:
    ...
      "OCR Status" := "OCR Status"::Success;
      "OCR Process Finished" := TRUE;
      MODIFY;
      COMMIT;
    
      OnAfterIncomingDocReceivedFromOCR(IncomingDocument); <=====================
    END;
  Raised in: Codeunit<Send Incoming Document to OCR>.PROCEDURE<SetStatusToFailed>
    Code lines:
    ...
      "OCR Status" := "OCR Status"::Error;
      "OCR Process Finished" := TRUE;
      MODIFY;
      COMMIT;
    
      OnAfterIncomingDocReceivedFromOCR(IncomingDocument); <=====================
    END;
Codeunit<Send Incoming Document to OCR>.PROCEDURE<OnAfterIncomingDocSentToOCR>
  Raised in: Codeunit<Send Incoming Document to OCR>.PROCEDURE<SendDocToOCR>
    Code lines:
    ...
      IncomingDocumentAttachment.SendToOCR;
      IncomingDocument."OCR Status" := IncomingDocument."OCR Status"::Sent;
      IncomingDocument.MODIFY;
    END;
    COMMIT;
    OnAfterIncomingDocSentToOCR(IncomingDocument); <=====================
Codeunit<Telemetry Management>.PROCEDURE<OnBeforeTelemetryScheduleTask>
  Raised in: Codeunit<Telemetry Management>.PROCEDURE<CanScheduleTask>
    Code lines:
    OnBeforeTelemetryScheduleTask(DoNotScheduleTask); <=====================
    EXIT(NOT DoNotScheduleTask AND TASKSCHEDULER.CANCREATETASK);
Codeunit<Generate Master Data Telemetry>.PROCEDURE<OnMasterDataTelemetry>
  Raised in: Codeunit<Generate Master Data Telemetry>.<OnRun>
    Code lines:
    OnMasterDataTelemetry; <=====================
Codeunit<Generate Activity Telemetry>.PROCEDURE<OnActivityTelemetry>
  Raised in: Codeunit<Generate Activity Telemetry>.<OnRun>
    Code lines:
    OnActivityTelemetry; <=====================
Codeunit<Batch Posting Print Mgt.>.PROCEDURE<OnBeforePrintDocument>
  Raised in: Codeunit<Batch Posting Print Mgt.>.PROCEDURE<PrintDocument>
    Code lines:
    IsHandled := FALSE;
    OnBeforePrintDocument(ReportUsage,RecVar,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    ReportSelections.RESET;
    ReportSelections.SETRANGE(Usage,ReportUsage);
    ReportSelections.FINDSET;
    REPEAT
      ReportSelections.TESTFIELD("Report ID");
    ...
Codeunit<Batch Processing Mgt.>.PROCEDURE<OnAfterBatchProcess>
  Raised in: Codeunit<Batch Processing Mgt.>.PROCEDURE<BatchProcess>
    Code lines:
    ...
        ELSE
          MESSAGE(BatchCompletedMsg);
      END;
    END;
    
    OnAfterBatchProcess(RecRef,CounterPosted); <=====================
Codeunit<Batch Processing Mgt.>.PROCEDURE<OnAfterBatchProcessing>
  Raised in: Codeunit<Batch Processing Mgt.>.PROCEDURE<ProcessRecord>
    Code lines:
    OnBeforeBatchProcessing(RecRef,BatchConfirm);
    
    ProcessingResult := InvokeProcessing(RecRef);
    
    OnAfterBatchProcessing(RecRef,ProcessingResult); <=====================
    
    EXIT(ProcessingResult);
Codeunit<Batch Processing Mgt.>.PROCEDURE<OnBeforeBatchProcessing>
  Raised in: Codeunit<Batch Processing Mgt.>.PROCEDURE<ProcessRecord>
    Code lines:
    OnBeforeBatchProcessing(RecRef,BatchConfirm); <=====================
    
    ProcessingResult := InvokeProcessing(RecRef);
    
    OnAfterBatchProcessing(RecRef,ProcessingResult);
    
    EXIT(ProcessingResult);
Codeunit<Batch Processing Mgt.>.PROCEDURE<OnCustomProcessing>
  Raised in: Codeunit<Batch Processing Mgt.>.PROCEDURE<RunCustomProcessing>
    Code lines:
    OnCustomProcessing(RecRefCustomerProcessing,Handled); <=====================
    IsCustomProcessingHandled := Handled;
Codeunit<Batch Processing Mgt.>.PROCEDURE<OnVerifyRecord>
  Raised in: Codeunit<Batch Processing Mgt.>.PROCEDURE<CanProcessRecord>
    Code lines:
    Result := TRUE;
    OnVerifyRecord(RecRef,Result); <=====================
    
    EXIT(Result);
Codeunit<Doc. Exch. Service Mgt.>.PROCEDURE<OnAfterIncomingDocReceivedFromDocExch>
  Raised in: Codeunit<Doc. Exch. Service Mgt.>.PROCEDURE<ProcessReceivedDocs>
    Code lines:
    ...
      END ELSE
        LogActivitySucceeded(ContextRecordID,MarkBusinessProcessedTxt,STRSUBSTNO(DocIdImportedTxt,DocIdentifier));
      COMMIT;
    
      IncomingDocument.FIND;
      OnAfterIncomingDocReceivedFromDocExch(IncomingDocument); <=====================
    END;
Codeunit<Read Data Exch. from Stream>.PROCEDURE<OnGetDataExchFileContentEvent>
  Raised in: Codeunit<Read Data Exch. from Stream>.<OnRun>
    Code lines:
    // Fire the get stream event
    OnGetDataExchFileContentEvent(Rec,TempBlob,EventHandled); <=====================
    
    IF EventHandled THEN BEGIN
      "File Name" := 'Data Stream';
      "File Content" := TempBlob.Blob;
    END;
Codeunit<Doc. Exch. Serv.- Doc. Status>.PROCEDURE<OnDocExchStatusDrillDown>
  Raised in: Codeunit<Doc. Exch. Serv.- Doc. Status>.PROCEDURE<DocExchStatusDrillDown>
    Code lines:
    IF NOT DataTypeManagement.GetRecordRef(DocRecVariant,DocRecRef) THEN
      EXIT;
    OnDocExchStatusDrillDown(DocRecRef,Handled); <=====================
    IF NOT Handled THEN
      DefaultDocExchStatusDrillDown(DocRecRef);
Codeunit<Role Center Notification Mgt.>.PROCEDURE<OnBeforeShowNotifications>
  Raised in: Codeunit<Role Center Notification Mgt.>.PROCEDURE<ShowNotifications>
    Code lines:
    OnBeforeShowNotifications; <=====================
    
    ResultEvaluation := ShowEvaluationNotification;
    ResultTrial := ShowTrialNotification;
    ResultTrialSuspended := ShowTrialSuspendedNotification;
    ResultPaidWarning := ShowPaidWarningNotification;
    ResultPaidSuspended := ShowPaidSuspendedNotification;
    ResultSandbox := ShowSandboxNotification;
    
    DataMigrationMgt.ShowDataMigrationRelatedGlobalNotifications;
    ...
Codeunit<Headline Management>.PROCEDURE<OnBeforeScheduleTask>
  Raised in: Codeunit<Headline Management>.PROCEDURE<ScheduleTask>
    Code lines:
    OnBeforeScheduleTask(CodeunitId); <=====================
    IF NOT TASKSCHEDULER.CANCREATETASK THEN
      EXIT;
    
    JobQueueEntry.SETRANGE("Object Type to Run",JobQueueEntry."Object Type to Run"::Codeunit);
    JobQueueEntry.SETRANGE("Object ID to Run",CodeunitId);
    JobQueueEntry.SETRANGE(Status,JobQueueEntry.Status::"In Process");
    IF NOT JobQueueEntry.ISEMPTY THEN
      EXIT;
    
Codeunit<Headline Management>.PROCEDURE<OnInvalidateHeadlines>
  Raised in: Codeunit<Headline Management>.PROCEDURE<OnBeforeUpdateLanguage>
    Code lines:
    OnInvalidateHeadlines; <=====================
  Raised in: Codeunit<Headline Management>.PROCEDURE<OnBeforeUpdateWorkdate>
    Code lines:
    OnInvalidateHeadlines; <=====================
Codeunit<Headline RC Business Manager>.PROCEDURE<OnComputeHeadlines>
  Raised in: Codeunit<Headline RC Business Manager>.<OnRun>
    Code lines:
    HeadlineRCBusinessManager.GET;
    WORKDATE := HeadlineRCBusinessManager."Workdate for computations";
    OnComputeHeadlines; <=====================
Codeunit<Headline RC Order Processor>.PROCEDURE<OnComputeHeadlines>
  Raised in: Codeunit<Headline RC Order Processor>.<OnRun>
    Code lines:
    HeadlineRCOrderProcessor.GET;
    WORKDATE := HeadlineRCOrderProcessor."Workdate for computations";
    OnComputeHeadlines; <=====================
Codeunit<Headline RC Accountant>.PROCEDURE<OnComputeHeadlines>
  Raised in: Codeunit<Headline RC Accountant>.<OnRun>
    Code lines:
    HeadlineRCAccountant.GET;
    WORKDATE := HeadlineRCAccountant."Workdate for computations";
    OnComputeHeadlines; <=====================
Codeunit<Headline RC Project Manager>.PROCEDURE<OnComputeHeadlines>
  Raised in: Codeunit<Headline RC Project Manager>.<OnRun>
    Code lines:
    HeadlineRCProjectManager.GET;
    WORKDATE := HeadlineRCProjectManager."Workdate for computations";
    OnComputeHeadlines; <=====================
Codeunit<Headline RC Relationship Mgt.>.PROCEDURE<OnComputeHeadlines>
  Raised in: Codeunit<Headline RC Relationship Mgt.>.<OnRun>
    Code lines:
    HeadlineRCRelationshipMgt.GET;
    WORKDATE := HeadlineRCRelationshipMgt."Workdate for computations";
    OnComputeHeadlines; <=====================
Codeunit<Headline RC Administrator>.PROCEDURE<OnComputeHeadlines>
  Raised in: Codeunit<Headline RC Administrator>.<OnRun>
    Code lines:
    HeadlineRCAdministrator.GET;
    WORKDATE := HeadlineRCAdministrator."Workdate for computations";
    OnComputeHeadlines; <=====================
Codeunit<Headline RC Team Member>.PROCEDURE<OnComputeHeadlines>
  Raised in: Codeunit<Headline RC Team Member>.<OnRun>
    Code lines:
    HeadlineRCTeamMember.GET;
    WORKDATE := HeadlineRCTeamMember."Workdate for computations";
    OnComputeHeadlines; <=====================
Codeunit<Headline RC Prod. Planner>.PROCEDURE<OnComputeHeadlines>
  Raised in: Codeunit<Headline RC Prod. Planner>.<OnRun>
    Code lines:
    HeadlineRCProdPlanner.GET;
    WORKDATE := HeadlineRCProdPlanner."Workdate for computations";
    OnComputeHeadlines; <=====================
Codeunit<Headline RC Serv. Dispatcher>.PROCEDURE<OnComputeHeadlines>
  Raised in: Codeunit<Headline RC Serv. Dispatcher>.<OnRun>
    Code lines:
    HeadlineRCServDispatcher.GET;
    WORKDATE := HeadlineRCServDispatcher."Workdate for computations";
    OnComputeHeadlines; <=====================
Codeunit<Workflow Setup>.PROCEDURE<OnAddWorkflowCategoriesToLibrary>
  Raised in: Codeunit<Workflow Setup>.PROCEDURE<InsertWorkflowCategories>
    Code lines:
    ...
    InsertWorkflowCategory(PurchDocCategoryTxt,PurchDocCategoryDescTxt);
    InsertWorkflowCategory(SalesDocCategoryTxt,SalesDocCategoryDescTxt);
    InsertWorkflowCategory(AdminCategoryTxt,AdminCategoryDescTxt);
    InsertWorkflowCategory(FinCategoryTxt,FinCategoryDescTxt);
    
    OnAddWorkflowCategoriesToLibrary; <=====================
Codeunit<Workflow Setup>.PROCEDURE<OnAfterInitWorkflowTemplates>
  Raised in: Codeunit<Workflow Setup>.PROCEDURE<InitWorkflow>
    Code lines:
    ...
    
    Workflow.SETRANGE(Template,TRUE);
    IF Workflow.ISEMPTY THEN
      InsertWorkflowTemplates;
    
    OnAfterInitWorkflowTemplates; <=====================
Codeunit<Workflow Setup>.PROCEDURE<OnAfterInsertApprovalsTableRelations>
  Raised in: Codeunit<Workflow Setup>.PROCEDURE<InsertApprovalsTableRelations>
    Code lines:
    ...
    
    InsertTableRelation(
      DATABASE::"Incoming Document",IncomingDocument.FIELDNO("Entry No."),DATABASE::"Gen. Journal Line",
      DummyGenJournalLine.FIELDNO("Incoming Document Entry No."));
    
    OnAfterInsertApprovalsTableRelations; <=====================
Codeunit<Workflow Setup>.PROCEDURE<OnInsertWorkflowTemplates>
  Raised in: Codeunit<Workflow Setup>.PROCEDURE<InsertWorkflowTemplates>
    Code lines:
    ...
    InsertItemUnitPriceChangeApprovalWorkflowTemplate;
    
    InsertGeneralJournalBatchApprovalWorkflowTemplate;
    InsertGeneralJournalLineApprovalWorkflowTemplate;
    
    OnInsertWorkflowTemplates; <=====================
Codeunit<Notification Management>.PROCEDURE<OnGetDocumentTypeAndNumber>
  Raised in: Codeunit<Notification Management>.PROCEDURE<GetDocumentTypeAndNumber>
    Code lines:
    ...
          FieldRef := RecRef.FIELD(1);
          DocumentNo := FORMAT(FieldRef.VALUE);
        END;
      ELSE BEGIN
        IsHandled := FALSE;
        OnGetDocumentTypeAndNumber(RecRef,DocumentType,DocumentNo,IsHandled); <=====================
        IF NOT IsHandled THEN BEGIN
          DocumentType := RecRef.CAPTION;
          FieldRef := RecRef.FIELD(3);
          DocumentNo := FORMAT(FieldRef.VALUE);
    ...
Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<OnAfterNotificationSent>
  Raised in: Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<SendNotification>
    Code lines:
    IF ISNULLGUID(NotificationToSend.ID) THEN
      NotificationToSend.ID := CREATEGUID;
    
    NotificationToSend.SEND;
    OnAfterNotificationSent(NotificationToSend,RecId.TABLENO); <=====================
    CreateNotificationContext(NotificationToSend.ID,RecId);
  Raised in: Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<SendNotificationWithAdditionalContext>
    Code lines:
    IF ISNULLGUID(NotificationToSend.ID) THEN
      NotificationToSend.ID := CREATEGUID;
    
    NotificationToSend.SEND;
    OnAfterNotificationSent(NotificationToSend,RecId.TABLENO); <=====================
    CreateNotificationContextWithAdditionalContext(NotificationToSend.ID,RecId,AdditionalContextId);
Codeunit<Workflow Event Handling>.PROCEDURE<OnAddWorkflowEventPredecessorsToLibrary>
  Raised in: Codeunit<Workflow Event Handling>.PROCEDURE<AddEventPredecessors>
    Code lines:
    ...
        AddEventPredecessor(RunWorkflowOnGeneralJournalBatchBalancedCode,RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
      RunWorkflowOnGeneralJournalBatchNotBalancedCode:
        AddEventPredecessor(RunWorkflowOnGeneralJournalBatchNotBalancedCode,RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
    END;
    
    OnAddWorkflowEventPredecessorsToLibrary(EventFunctionName); <=====================
Codeunit<Workflow Event Handling>.PROCEDURE<OnAddWorkflowEventsToLibrary>
  Raised in: Codeunit<Workflow Event Handling>.PROCEDURE<CreateEventsLibrary>
    Code lines:
    ...
      CreateGenJnlLineFromIncDocSuccessfulEventDescTxt,0,FALSE);
    AddEventToLibrary(
      RunWorkflowOnAfterCreateGenJnlLineFromIncomingDocFailCode,DATABASE::"Incoming Document",
      CreateGenJnlLineFromIncDocFailsEventDescTxt,0,FALSE);
    
    OnAddWorkflowEventsToLibrary; <=====================
    OnAddWorkflowTableRelationsToLibrary;
Codeunit<Workflow Event Handling>.PROCEDURE<OnAddWorkflowTableRelationsToLibrary>
  Raised in: Codeunit<Workflow Event Handling>.PROCEDURE<CreateEventsLibrary>
    Code lines:
    ...
    AddEventToLibrary(
      RunWorkflowOnAfterCreateGenJnlLineFromIncomingDocFailCode,DATABASE::"Incoming Document",
      CreateGenJnlLineFromIncDocFailsEventDescTxt,0,FALSE);
    
    OnAddWorkflowEventsToLibrary;
    OnAddWorkflowTableRelationsToLibrary; <=====================
Codeunit<Workflow Response Handling>.PROCEDURE<OnAddWorkflowResponsePredecessorsToLibrary>
  Raised in: Codeunit<Workflow Response Handling>.PROCEDURE<AddResponsePredecessors>
    Code lines:
    ...
      GetSendToOCRCode:
        AddResponsePredecessor(GetSendToOCRCode,WorkflowEventHandling.RunWorkflowOnAfterReadyForOCRIncomingDocCode);
      GetSendToOCRAsyncCode:
        AddResponsePredecessor(GetSendToOCRAsyncCode,WorkflowEventHandling.RunWorkflowOnAfterReadyForOCRIncomingDocCode);
    END;
    OnAddWorkflowResponsePredecessorsToLibrary(ResponseFunctionName); <=====================
Codeunit<Workflow Response Handling>.PROCEDURE<OnAddWorkflowResponsesToLibrary>
  Raised in: Codeunit<Workflow Response Handling>.PROCEDURE<CreateResponsesLibrary>
    Code lines:
    ...
    
    AddResponseToLibrary(RevertValueForFieldCode,0,RevertRecordValueTxt,'GROUP 6');
    AddResponseToLibrary(ApplyNewValuesCode,0,ApplyNewValuesTxt,'GROUP 7');
    AddResponseToLibrary(DiscardNewValuesCode,0,DiscardNewValuesTxt,'GROUP 0');
    
    OnAddWorkflowResponsesToLibrary; <=====================
Codeunit<Workflow Response Handling>.PROCEDURE<OnCheckHasRequiredArguments>
  Raised in: Codeunit<Workflow Response Handling>.PROCEDURE<HasRequiredArguments>
    Code lines:
    ...
        IF WorkflowStepArgument."Notification User ID" = '' THEN
          EXIT(FALSE);
    END;
    
    HasRequiredArgument := TRUE;
    OnCheckHasRequiredArguments(WorkflowStep,WorkflowStepArgument,HasRequiredArgument); <=====================
    EXIT(HasRequiredArgument);
Codeunit<Workflow Response Handling>.PROCEDURE<OnCheckIsArgumentMandatory>
  Raised in: Codeunit<Workflow Response Handling>.PROCEDURE<IsArgumentMandatory>
    Code lines:
    ...
        CreatePmtLineForPostedPurchaseDocCode]
    THEN
      EXIT(TRUE);
    
    ArgumentMandatory := FALSE;
    OnCheckIsArgumentMandatory(ResponseFunctionName,ArgumentMandatory); <=====================
    EXIT(ArgumentMandatory);
Codeunit<Workflow Response Handling>.PROCEDURE<OnExecuteWorkflowResponse>
  Raised in: Codeunit<Workflow Response Handling>.PROCEDURE<ExecuteResponse>
    Code lines:
    ...
        ApplyNewValuesCode:
          WorkflowChangeRecMgt.ApplyNewValues(Variant,ResponseWorkflowStepInstance);
        DiscardNewValuesCode:
          WorkflowChangeRecMgt.DiscardNewValues(Variant,ResponseWorkflowStepInstance);
        ELSE BEGIN
          OnExecuteWorkflowResponse(ResponseExecuted,Variant,xVariant,ResponseWorkflowStepInstance); <=====================
          IF NOT ResponseExecuted THEN
            ERROR(NotSupportedResponseErr,WorkflowResponse."Function Name");
        END;
      END;
Codeunit<Workflow Response Handling>.PROCEDURE<OnOpenDocument>
  Raised in: Codeunit<Workflow Response Handling>.PROCEDURE<OpenDocument>
    Code lines:
    ...
      DATABASE::"Sales Header":
        ReleaseSalesDocument.Reopen(Variant);
      DATABASE::"Incoming Document":
        ReleaseIncomingDocument.Reopen(Variant);
      ELSE BEGIN
        OnOpenDocument(RecRef,Handled); <=====================
        IF NOT Handled THEN
          ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      END;
    END;
Codeunit<Workflow Response Handling>.PROCEDURE<OnReleaseDocument>
  Raised in: Codeunit<Workflow Response Handling>.PROCEDURE<ReleaseDocument>
    Code lines:
    ...
      DATABASE::"Sales Header":
        ReleaseSalesDocument.PerformManualCheckAndRelease(Variant);
      DATABASE::"Incoming Document":
        ReleaseIncomingDocument.PerformManualRelease(Variant);
      ELSE BEGIN
        OnReleaseDocument(RecRef,Handled); <=====================
        IF NOT Handled THEN
          ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      END;
    END;
Codeunit<Approvals Mgmt.>.PROCEDURE<OnApproveApprovalRequest>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<ApproveSelectedApprovalRequest>
    Code lines:
    ...
    IF ApprovalEntry."Approver ID" <> USERID THEN
      CheckUserAsApprovalAdministrator;
    
    ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Approved);
    ApprovalEntry.MODIFY(TRUE);
    OnApproveApprovalRequest(ApprovalEntry); <=====================
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<SendApprovalRequestFromRecord>
    Code lines:
    ...
          ApprovalEntry2.VALIDATE(Status,ApprovalEntry2.Status::Open);
          ApprovalEntry2.MODIFY(TRUE);
          CreateApprovalEntryNotification(ApprovalEntry2,WorkflowStepInstance);
        UNTIL ApprovalEntry2.NEXT = 0;
      IF FindApprovedApprovalEntryForWorkflowUserGroup(ApprovalEntry,WorkflowStepInstance) THEN
        OnApproveApprovalRequest(ApprovalEntry); <=====================
      EXIT;
    END;
    
    ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Approved);
    ...
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<SendApprovalRequestFromRecord>
    Code lines:
    ...
          ApprovalEntry2.VALIDATE(Status,ApprovalEntry2.Status::Open);
          ApprovalEntry2.MODIFY(TRUE);
          CreateApprovalEntryNotification(ApprovalEntry2,WorkflowStepInstance);
        UNTIL ApprovalEntry2.NEXT = 0;
      IF FindApprovedApprovalEntryForWorkflowUserGroup(ApprovalEntry,WorkflowStepInstance) THEN
        OnApproveApprovalRequest(ApprovalEntry); <=====================
      EXIT;
    END;
    
    ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Approved);
    ...
Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelCustomerApprovalRequest>
  Raised in: Page<Customer List>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelCustomerApprovalRequest(Rec); <=====================
    WorkflowWebhookManagement.FindAndCancel(RECORDID);
  Raised in: Page<Customer Card>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelCustomerApprovalRequest(Rec); <=====================
    WorkflowWebhookManagement.FindAndCancel(RECORDID);
  Raised in: Table<Customer>.<OnDelete>
    Code lines:
    ApprovalsMgmt.OnCancelCustomerApprovalRequest(Rec); <=====================
    
    ServiceItem.SETRANGE("Customer No.","No.");
    IF ServiceItem.FINDFIRST THEN
      IF CONFIRM(
           Text008,
           FALSE,
           TABLECAPTION,
           "No.",
           ServiceItem.FIELDCAPTION("Customer No."))
    ...
Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelGeneralJournalBatchApprovalRequest>
  Raised in: Table<Gen. Journal Batch>.<OnDelete>
    Code lines:
    ApprovalsMgmt.OnCancelGeneralJournalBatchApprovalRequest(Rec); <=====================
    
    GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
    GenJnlAlloc.SETRANGE("Journal Batch Name",Name);
    GenJnlAlloc.DELETEALL;
    GenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
    GenJnlLine.SETRANGE("Journal Batch Name",Name);
    GenJnlLine.DELETEALL(TRUE);
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<TryCancelJournalBatchApprovalRequest>
    Code lines:
    GetGeneralJournalBatch(GenJournalBatch,GenJournalLine);
    OnCancelGeneralJournalBatchApprovalRequest(GenJournalBatch); <=====================
    WorkflowWebhookManagement.FindAndCancel(GenJournalBatch.RECORDID);
Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelGeneralJournalLineApprovalRequest>
  Raised in: Table<Gen. Journal Line>.<OnDelete>
    Code lines:
    ApprovalsMgmt.OnCancelGeneralJournalLineApprovalRequest(Rec); <=====================
    
    TESTFIELD("Check Printed",FALSE);
    
    ClearCustVendApplnEntry;
    ClearAppliedGenJnlLine;
    DeletePaymentFileErrors;
    ClearDataExchangeEntries(FALSE);
    
    GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
    ...
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<TryCancelJournalLineApprovalRequests>
    Code lines:
    REPEAT
      IF HasOpenApprovalEntries(GenJournalLine.RECORDID) THEN
        OnCancelGeneralJournalLineApprovalRequest(GenJournalLine); <=====================
      WorkflowWebhookManagement.FindAndCancel(GenJournalLine.RECORDID);
    UNTIL GenJournalLine.NEXT = 0;
    MESSAGE(ApprovalReqCanceledForSelectedLinesMsg);
Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelIncomingDocApprovalRequest>
  Raised in: Page<Incoming Documents>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelIncomingDocApprovalRequest(Rec); <=====================
  Raised in: Page<Incoming Document>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelIncomingDocApprovalRequest(Rec); <=====================
Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelItemApprovalRequest>
  Raised in: Page<Item Card>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelItemApprovalRequest(Rec); <=====================
    WorkflowWebhookManagement.FindAndCancel(RECORDID);
  Raised in: Page<Item List>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelItemApprovalRequest(Rec); <=====================
    WorkflowWebhookManagement.FindAndCancel(RECORDID);
  Raised in: Table<Item>.<OnDelete>
    Code lines:
    ApprovalsMgmt.OnCancelItemApprovalRequest(Rec); <=====================
    
    CheckJournalsAndWorksheets(0);
    CheckDocuments(0);
    
    MoveEntries.MoveItemEntries(Rec);
    
    ServiceItem.RESET;
    ServiceItem.SETRANGE("Item No.","No.");
    IF ServiceItem.FIND('-') THEN
    ...
Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelPurchaseApprovalRequest>
  Raised in: Page<Purchase Return Order>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
  Raised in: Page<Purchase Order List>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
    WorkflowWebhookManagement.FindAndCancel(RECORDID);
  Raised in: Page<Purchase Quotes>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
  Raised in: Page<Purchase Quote>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
  Raised in: Page<Purchase Credit Memo>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
    WorkflowWebhookMgt.FindAndCancel(RECORDID);
  Raised in: Page<Purchase Invoice>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
    WorkflowWebhookMgt.FindAndCancel(RECORDID);
  Raised in: Page<Purchase Order>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
    WorkflowWebhookMgt.FindAndCancel(RECORDID);
  Raised in: Page<Purchase Return Order List>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
  Raised in: Page<Blanket Purchase Orders>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
  Raised in: Page<Purchase Credit Memos>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
    WorkflowWebhookManagement.FindAndCancel(RECORDID);
  Raised in: Page<Purchase Invoices>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
    WorkflowWebhookManagement.FindAndCancel(RECORDID);
  Raised in: Page<Blanket Purchase Order>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelSalesApprovalRequest>
  Raised in: Page<Sales Return Order>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec); <=====================
  Raised in: Page<Sales Order List>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec); <=====================
    WorkflowWebhookManagement.FindAndCancel(RECORDID);
  Raised in: Page<Sales Return Order List>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec); <=====================
  Raised in: Page<Blanket Sales Orders>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec); <=====================
  Raised in: Page<Sales Credit Memos>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec); <=====================
    WorkflowWebhookManagement.FindAndCancel(RECORDID);
  Raised in: Page<Sales Invoice List>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec); <=====================
    WorkflowWebhookManagement.FindAndCancel(RECORDID);
  Raised in: Page<Sales Quotes>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec); <=====================
    WorkflowWebhookManagement.FindAndCancel(RECORDID);
  Raised in: Page<Sales Credit Memo>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec); <=====================
    WorkflowWebhookMgt.FindAndCancel(RECORDID);
  Raised in: Page<Sales Invoice>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec); <=====================
    WorkflowWebhookMgt.FindAndCancel(RECORDID);
  Raised in: Page<Sales Order>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec); <=====================
    WorkflowWebhookMgt.FindAndCancel(RECORDID);
  Raised in: Page<Sales Quote>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec); <=====================
    WorkflowWebhookMgt.FindAndCancel(RECORDID);
  Raised in: Page<Blanket Sales Order>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec); <=====================
Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelVendorApprovalRequest>
  Raised in: Page<Vendor List>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelVendorApprovalRequest(Rec); <=====================
    WorkflowWebhookManagement.FindAndCancel(RECORDID);
  Raised in: Page<Vendor Card>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelVendorApprovalRequest(Rec); <=====================
    WorkflowWebhookManagement.FindAndCancel(RECORDID);
  Raised in: Table<Vendor>.<OnDelete>
    Code lines:
    ApprovalsMgmt.OnCancelVendorApprovalRequest(Rec); <=====================
    
    MoveEntries.MoveVendorEntries(Rec);
    
    CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::Vendor);
    CommentLine.SETRANGE("No.","No.");
    CommentLine.DELETEALL;
    
    VendBankAcc.SETRANGE("Vendor No.","No.");
    VendBankAcc.DELETEALL;
    ...
Codeunit<Approvals Mgmt.>.PROCEDURE<OnDelegateApprovalRequest>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<SubstituteUserIdForApprovalEntry>
    Code lines:
    ...
    ELSE
      UserSetup.GET(UserSetup.Substitute);
    
    ApprovalEntry."Approver ID" := UserSetup."User ID";
    ApprovalEntry.MODIFY(TRUE);
    OnDelegateApprovalRequest(ApprovalEntry); <=====================
Codeunit<Approvals Mgmt.>.PROCEDURE<OnDeleteRecordInApprovalRequest>
  Raised in: Table<Purchase Header>.<OnDelete>
    Code lines:
    ...
      Rec,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,
      ReturnShptHeader,PurchInvHeaderPrepmt,PurchCrMemoHeaderPrepmt);
    VALIDATE("Applies-to ID",'');
    VALIDATE("Incoming Document Entry No.",0);
    
    ApprovalsMgmt.OnDeleteRecordInApprovalRequest(RECORDID); <=====================
    PurchLine.LOCKTABLE;
    
    WhseRequest.SETRANGE("Source Type",DATABASE::"Purchase Line");
    WhseRequest.SETRANGE("Source Subtype","Document Type");
    ...
  Raised in: Table<Sales Header>.<OnDelete>
    Code lines:
    ...
    UpdateOpportunity;
    
    VALIDATE("Applies-to ID",'');
    VALIDATE("Incoming Document Entry No.",0);
    
    ApprovalsMgmt.OnDeleteRecordInApprovalRequest(RECORDID); <=====================
    SalesLine.RESET;
    SalesLine.LOCKTABLE;
    
    WhseRequest.SETRANGE("Source Type",DATABASE::"Sales Line");
    ...
Codeunit<Approvals Mgmt.>.PROCEDURE<OnPopulateApprovalEntryArgument>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<PopulateApprovalEntryArgument>
    Code lines:
    ...
        BEGIN
          RecRef.SETTABLE(IncomingDocument);
          ApprovalEntryArgument."Document No." := FORMAT(IncomingDocument."Entry No.");
        END;
      ELSE
        OnPopulateApprovalEntryArgument(RecRef,ApprovalEntryArgument); <=====================
    END;
Codeunit<Approvals Mgmt.>.PROCEDURE<OnRejectApprovalRequest>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<RejectSelectedApprovalRequest>
    Code lines:
    ...
      ERROR(RejectOnlyOpenRequestsErr);
    
    IF ApprovalEntry."Approver ID" <> USERID THEN
      CheckUserAsApprovalAdministrator;
    
    OnRejectApprovalRequest(ApprovalEntry); <=====================
    ApprovalEntry.GET(ApprovalEntry."Entry No.");
    ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Rejected);
    ApprovalEntry.MODIFY(TRUE);
Codeunit<Approvals Mgmt.>.PROCEDURE<OnRenameRecordInApprovalRequest>
  Raised in: Table<Gen. Journal Batch>.<OnRename>
    Code lines:
    ApprovalsMgmt.OnRenameRecordInApprovalRequest(xRec.RECORDID,RECORDID); <=====================
    
    SetLastModifiedDateTime;
  Raised in: Table<Gen. Journal Line>.<OnRename>
    Code lines:
    ApprovalsMgmt.OnRenameRecordInApprovalRequest(xRec.RECORDID,RECORDID); <=====================
    
    TESTFIELD("Check Printed",FALSE);
  Raised in: Table<Item>.<OnRename>
    Code lines:
    SalesLine.RenameNo(SalesLine.Type::Item,xRec."No.","No.");
    PurchaseLine.RenameNo(PurchaseLine.Type::Item,xRec."No.","No.");
    
    ApprovalsMgmt.OnRenameRecordInApprovalRequest(xRec.RECORDID,RECORDID); <=====================
    ItemAttributeValueMapping.RenameItemAttributeValueMapping(xRec."No.","No.");
    SetLastDateTimeModified;
  Raised in: Table<Vendor>.<OnRename>
    Code lines:
    ApprovalsMgmt.OnRenameRecordInApprovalRequest(xRec.RECORDID,RECORDID); <=====================
    SetLastModifiedDateTime;
    IF xRec."Invoice Disc. Code" = xRec."No." THEN
      "Invoice Disc. Code" := "No.";
    
    CalendarManagement.RenameCustomizedBaseCalendarData(CustomizedCalendarChange."Source Type"::Vendor,"No.",xRec."No.");
  Raised in: Table<Customer>.<OnRename>
    Code lines:
    ApprovalsMgmt.OnRenameRecordInApprovalRequest(xRec.RECORDID,RECORDID); <=====================
    
    SetLastModifiedDateTime;
    IF xRec."Invoice Disc. Code" = xRec."No." THEN
      "Invoice Disc. Code" := "No.";
    CustomerTemplate.SETRANGE("Invoice Disc. Code",xRec."No.");
    CustomerTemplate.MODIFYALL("Invoice Disc. Code","No.");
    
    CalendarManagement.RenameCustomizedBaseCalendarData(CustomizedCalendarChange."Source Type"::Customer,"No.",xRec."No.");
Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendCustomerForApproval>
  Raised in: Page<Customer List>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckCustomerApprovalsWorkflowEnabled(Rec) THEN
      ApprovalsMgmt.OnSendCustomerForApproval(Rec); <=====================
  Raised in: Page<Customer Card>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckCustomerApprovalsWorkflowEnabled(Rec) THEN
      ApprovalsMgmt.OnSendCustomerForApproval(Rec); <=====================
Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendGeneralJournalBatchForApproval>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<TrySendJournalBatchApprovalRequest>
    Code lines:
    ...
    CheckGeneralJournalBatchApprovalsWorkflowEnabled(GenJournalBatch);
    IF HasOpenApprovalEntries(GenJournalBatch.RECORDID) OR
       HasAnyOpenJournalLineApprovalEntries(GenJournalBatch."Journal Template Name",GenJournalBatch.Name)
    THEN
      ERROR(PendingJournalBatchApprovalExistsErr);
    OnSendGeneralJournalBatchForApproval(GenJournalBatch); <=====================
Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendGeneralJournalLineForApproval>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<TrySendJournalLineApprovalRequests>
    Code lines:
    IF GenJournalLine.COUNT = 1 THEN
      CheckGeneralJournalLineApprovalsWorkflowEnabled(GenJournalLine);
    
    REPEAT
      IF WorkflowManagement.CanExecuteWorkflow(GenJournalLine,
           WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode) AND <=====================
         NOT HasOpenApprovalEntries(GenJournalLine.RECORDID)
      THEN BEGIN
        OnSendGeneralJournalLineForApproval(GenJournalLine); <=====================
        LinesSent += 1;
    ...
Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendIncomingDocForApproval>
  Raised in: Page<Incoming Documents>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    TestReadyForApproval;
    IF ApprovalsMgmt.CheckIncomingDocApprovalsWorkflowEnabled(Rec) THEN
      ApprovalsMgmt.OnSendIncomingDocForApproval(Rec); <=====================
  Raised in: Page<Incoming Document>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    TestReadyForApproval;
    IF ApprovalsMgmt.CheckIncomingDocApprovalsWorkflowEnabled(Rec) THEN
      ApprovalsMgmt.OnSendIncomingDocForApproval(Rec); <=====================
  Raised in: Codeunit<Office Management>.PROCEDURE<SendApprovalRequest>
    Code lines:
    IncomingDocument.TestReadyForApproval;
    IF ApprovalsMgmt.CheckIncomingDocApprovalsWorkflowEnabled(IncomingDocument) THEN
      ApprovalsMgmt.OnSendIncomingDocForApproval(IncomingDocument); <=====================
Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendItemForApproval>
  Raised in: Page<Item Card>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckItemApprovalsWorkflowEnabled(Rec) THEN
      ApprovalsMgmt.OnSendItemForApproval(Rec); <=====================
  Raised in: Page<Item List>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckItemApprovalsWorkflowEnabled(Rec) THEN
      ApprovalsMgmt.OnSendItemForApproval(Rec); <=====================
Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendPurchaseDocForApproval>
  Raised in: Page<Purchase Return Order>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
  Raised in: Page<Purchase Order List>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
  Raised in: Page<Purchase Quotes>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
  Raised in: Page<Purchase Quote>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF  ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
  Raised in: Page<Purchase Credit Memo>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
  Raised in: Page<Purchase Invoice>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
  Raised in: Page<Purchase Order>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
  Raised in: Page<Purchase Return Order List>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
  Raised in: Page<Blanket Purchase Orders>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
  Raised in: Page<Purchase Credit Memos>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
  Raised in: Page<Purchase Invoices>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
  Raised in: Page<Blanket Purchase Order>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendSalesDocForApproval>
  Raised in: Page<Sales Return Order>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendSalesDocForApproval(Rec); <=====================
  Raised in: Page<Sales Order List>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendSalesDocForApproval(Rec); <=====================
  Raised in: Page<Sales Return Order List>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendSalesDocForApproval(Rec); <=====================
  Raised in: Page<Blanket Sales Orders>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendSalesDocForApproval(Rec); <=====================
  Raised in: Page<Sales Credit Memos>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendSalesDocForApproval(Rec); <=====================
  Raised in: Page<Sales Invoice List>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendSalesDocForApproval(Rec); <=====================
  Raised in: Page<Sales Quotes>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendSalesDocForApproval(Rec); <=====================
  Raised in: Page<Sales Credit Memo>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendSalesDocForApproval(Rec); <=====================
  Raised in: Page<Sales Invoice>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendSalesDocForApproval(Rec); <=====================
  Raised in: Page<Sales Order>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendSalesDocForApproval(Rec); <=====================
  Raised in: Page<Sales Quote>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendSalesDocForApproval(Rec); <=====================
  Raised in: Page<Blanket Sales Order>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendSalesDocForApproval(Rec); <=====================
Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendVendorForApproval>
  Raised in: Page<Vendor List>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckVendorApprovalsWorkflowEnabled(Rec) THEN
      ApprovalsMgmt.OnSendVendorForApproval(Rec); <=====================
  Raised in: Page<Vendor Card>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckVendorApprovalsWorkflowEnabled(Rec) THEN
      ApprovalsMgmt.OnSendVendorForApproval(Rec); <=====================
Codeunit<Workflow Webhook Management>.PROCEDURE<OnCancelWorkflow>
  Raised in: Codeunit<Workflow Webhook Management>.PROCEDURE<Cancel>
    Code lines:
    ...
      ERROR(UserUnableToCancelErr,USERID);
    
    WorkflowWebhookEntry.VALIDATE(Response,WorkflowWebhookEntry.Response::Cancel);
    WorkflowWebhookEntry.MODIFY(TRUE);
    
    OnCancelWorkflow(WorkflowWebhookEntry); <=====================
Codeunit<Workflow Webhook Management>.PROCEDURE<OnContinueWorkflow>
  Raised in: Codeunit<Workflow Webhook Management>.PROCEDURE<Continue>
    Code lines:
    ...
      ERROR(UserUnableToContinueErr,USERID);
    
    WorkflowWebhookEntry.VALIDATE(Response,WorkflowWebhookEntry.Response::Continue);
    WorkflowWebhookEntry.MODIFY(TRUE);
    
    OnContinueWorkflow(WorkflowWebhookEntry); <=====================
Codeunit<Workflow Webhook Management>.PROCEDURE<OnFindTaskSchedulerAllowed>
  Raised in: Codeunit<Workflow Webhook Management>.PROCEDURE<SendWebhookNotificaton>
    Code lines:
    WorkflowWebhookNotification.StartNotification(WorkflowStepInstance.ID);
    
    IsTaskSchedulerAllowed := TRUE;
    OnFindTaskSchedulerAllowed(IsTaskSchedulerAllowed); <=====================
    
    IF IsTaskSchedulerAllowed THEN
      TASKSCHEDULER.CREATETASK(CODEUNIT::"Workflow Webhook Notify Task",0,TRUE,
        COMPANYNAME,0DT,WorkflowStepInstance.RECORDID)
    ELSE
      CODEUNIT.RUN(CODEUNIT::"Workflow Webhook Notify Task",WorkflowStepInstance);
Codeunit<Workflow Webhook Management>.PROCEDURE<OnRejectWorkflow>
  Raised in: Codeunit<Workflow Webhook Management>.PROCEDURE<Reject>
    Code lines:
    ...
      ERROR(UserUnableToRejectErr,USERID);
    
    WorkflowWebhookEntry.VALIDATE(Response,WorkflowWebhookEntry.Response::Reject);
    WorkflowWebhookEntry.MODIFY(TRUE);
    
    OnRejectWorkflow(WorkflowWebhookEntry); <=====================
Codeunit<Workflow Webhook Notification>.PROCEDURE<OnPostNotificationRequest>
  Raised in: Codeunit<Workflow Webhook Notification>.PROCEDURE<Notify>
    Code lines:
    RetryCounter := RetryCounter - 1;
    IF OnPostNotificationRequest(DataID,WorkflowStepInstanceID,NotificationUrl,RequestedByUserEmail) THEN BEGIN <=====================
      WorkflowWebhookNotification.Status := WorkflowWebhookNotification.Status::Sent;
      WorkflowWebhookNotification.SetErrorMessage('');
      WorkflowWebhookNotification.SetErrorDetails('');
      WorkflowWebhookNotification.MODIFY(TRUE);
      COMMIT;
    END ELSE BEGIN
      Exception := GETLASTERROROBJECT;
    
    ...
Codeunit<Workflow Webhook Notify Task>.PROCEDURE<OnFetchWorkflowWebhookNotificationInitParams>
  Raised in: Codeunit<Workflow Webhook Notify Task>.<OnRun>
    Code lines:
    ...
    UserTable.SETRANGE("User Name",WorkflowWebhookEntryTable."Initiated By User ID");
    IF UserTable.FINDFIRST THEN
      ContactEmail := UserTable."Contact Email";
    
    // Send notification
    OnFetchWorkflowWebhookNotificationInitParams(RetryCount,WaitTime,InitHandled); <=====================
    
    // If parameters not initialized by subscribers (mock subscriber for testing)
    IF NOT InitHandled THEN BEGIN
      // Set defaults
    ...
Codeunit<Office Management>.PROCEDURE<OnGetExternalHandlerCodeunit>
  Raised in: Codeunit<Office Management>.PROCEDURE<GetHandlerCodeunit>
    Code lines:
    ...
        EXIT(CODEUNIT::"Office Contact Handler");
      OfficeHostType.OutlookHyperlink:
        EXIT(CODEUNIT::"Office Document Handler");
    END;
    
    OnGetExternalHandlerCodeunit(OfficeAddinContext,HostType,ExternalHandler); <=====================
    IF ExternalHandler > 0 THEN
      EXIT(ExternalHandler);
    
    ERROR(CodeUnitNotFoundErr);
Codeunit<Office Host Management>.PROCEDURE<OnCloseCurrentPage>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<CloseCurrentPage>
    Code lines:
    OnCloseCurrentPage; <=====================
Codeunit<Office Host Management>.PROCEDURE<OnEmailHasAttachments>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<EmailHasAttachments>
    Code lines:
    OnEmailHasAttachments(Result); <=====================
    EXIT(Result);
Codeunit<Office Host Management>.PROCEDURE<OnGetEmailAndAttachments>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<GetEmailAndAttachments>
    Code lines:
    OnGetEmailAndAttachments(TempExchangeObject,Action,VendorNumber); <=====================
Codeunit<Office Host Management>.PROCEDURE<OnGetEmailBody>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<GetEmailBody>
    Code lines:
    OnGetEmailBody(OfficeAddinContext."Item ID",EmailBody); <=====================
Codeunit<Office Host Management>.PROCEDURE<OnGetFinancialsDocument>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<GetFinancialsDocument>
    Code lines:
    OnGetFinancialsDocument(OfficeAddinContext."Item ID",DocumentJSON); <=====================
Codeunit<Office Host Management>.PROCEDURE<OnGetHostType>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<GetHostType>
    Code lines:
    CheckHost;
    OnGetHostType(HostType); <=====================
    EXIT(HostType);
Codeunit<Office Host Management>.PROCEDURE<OnGetTempOfficeAddinContext>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<GetTempOfficeAddinContext>
    Code lines:
    OnGetTempOfficeAddinContext(TempOfficeAddinContext); <=====================
Codeunit<Office Host Management>.PROCEDURE<OnInitializeContext>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<InitializeContext>
    Code lines:
    CheckHost;
    OnInitializeContext(TempNewOfficeAddinContext); <=====================
Codeunit<Office Host Management>.PROCEDURE<OnInitializeExchangeObject>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<InitializeExchangeObject>
    Code lines:
    CheckHost;
    OnInitializeExchangeObject; <=====================
Codeunit<Office Host Management>.PROCEDURE<OnInitializeHost>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<InitializeHost>
    Code lines:
    OnInitializeHost(NewOfficeHost,NewHostType); <=====================
Codeunit<Office Host Management>.PROCEDURE<OnInvokeExtension>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<InvokeExtension>
    Code lines:
    CheckHost;
    OnInvokeExtension(FunctionName,Parameter1,Parameter2,Parameter3,Parameter4); <=====================
Codeunit<Office Host Management>.PROCEDURE<OnIsAvailable>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<IsAvailable>
    Code lines:
    OnIsAvailable(Result); <=====================
    EXIT(Result);
Codeunit<Office Host Management>.PROCEDURE<OnIsHostInitialized>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<CheckHost>
    Code lines:
    OnIsHostInitialized(Result); <=====================
    IF NOT Result THEN
      ERROR(OfficeHostNotInitializedErr);
Codeunit<Office Host Management>.PROCEDURE<OnSendToOCR>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<SendToOCR>
    Code lines:
    OnSendToOCR(IncomingDocument); <=====================
Codeunit<Office Document Handler>.PROCEDURE<OnCloseSuggestedLineItemsPage>
  Raised in: Codeunit<Office Document Handler>.PROCEDURE<ConvertSuggestedLinesToDocumentLines>
    Code lines:
    IF TempOfficeSuggestedLineItem.ISEMPTY THEN
      EXIT;
    
    PageAction := PAGE.RUNMODAL(PAGE::"Office Suggested Line Items",TempOfficeSuggestedLineItem);
    OnCloseSuggestedLineItemsPage(TempOfficeSuggestedLineItem,HeaderRecRef,PageAction); <=====================
Codeunit<Office Document Handler>.PROCEDURE<OnGenerateLinesFromText>
  Raised in: Codeunit<Office Document Handler>.PROCEDURE<GenerateLinesForDocument>
    Code lines:
    IF InstructionMgt.IsEnabled(InstructionMgt.AutomaticLineItemsDialogCode) THEN BEGIN
      OfficeMgt.GetContext(TempOfficeAddinContext);
      EmailBody := OfficeMgt.GetEmailBody(TempOfficeAddinContext);
      OnGenerateLinesFromText(HeaderRecRef,TempOfficeSuggestedLineItem,EmailBody); <=====================
      COMMIT;
    
      ConvertSuggestedLinesToDocumentLines(TempOfficeSuggestedLineItem,HeaderRecRef);
    END;
Codeunit<Add-in Manifest Management>.PROCEDURE<CreateBasicAddins>
Codeunit<Add-in Manifest Management>.PROCEDURE<CreateDefaultAddins>
  Raised in: Page<Office Add-in Management>.<OnInit>
    Code lines:
    IF ISEMPTY THEN
      AddinManifestManagement.CreateDefaultAddins(Rec); <=====================
  Raised in: Page<Office Add-in Management>.Action<Reset Default Add-ins>.<OnAction>
    Code lines:
    IF CONFIRM(ResetWarningQst) THEN
      AddinManifestManagement.CreateDefaultAddins(Rec); <=====================
  Raised in: Table<Office Add-in>.PROCEDURE<GetAddins>
    Code lines:
    IF ISEMPTY THEN
      AddinManifestManagement.CreateDefaultAddins(Rec); <=====================
    
    EXIT(FINDSET);
  Raised in: Codeunit<Add-in Deployment Helper>.PROCEDURE<CheckVersion>
    Code lines:
    AddinManifestMgt.GetAddinByHostType(OfficeAddin,HostType);
    AddinManifestMgt.GetAddinVersion(LatestAddinVersion,OfficeAddin."Manifest Codeunit");
    
    // Make sure that the version of the add-in in the table is up to date
    IF OfficeAddin.Version <> LatestAddinVersion THEN BEGIN
      AddinManifestMgt.CreateDefaultAddins(OfficeAddin); <=====================
      COMMIT;
      AddinManifestMgt.GetAddinByHostType(OfficeAddin,HostType);
    END;
    
    ...
Codeunit<Add-in Manifest Management>.PROCEDURE<GetAddin>
  Raised in: Codeunit<Add-in Manifest Management>.PROCEDURE<GetAddinByHostType>
    Code lines:
    GetManifestCodeunit(ManifestCodeunit,HostType);
    GetAddin(OfficeAddin,ManifestCodeunit); <=====================
Codeunit<Add-in Manifest Management>.PROCEDURE<GetAddinID>
Codeunit<Add-in Manifest Management>.PROCEDURE<GetAddinVersion>
  Raised in: Codeunit<Add-in Deployment Helper>.PROCEDURE<CheckVersion>
    Code lines:
    AddinManifestMgt.GetAddinByHostType(OfficeAddin,HostType);
    AddinManifestMgt.GetAddinVersion(LatestAddinVersion,OfficeAddin."Manifest Codeunit"); <=====================
    
    // Make sure that the version of the add-in in the table is up to date
    IF OfficeAddin.Version <> LatestAddinVersion THEN BEGIN
      AddinManifestMgt.CreateDefaultAddins(OfficeAddin);
      COMMIT;
      AddinManifestMgt.GetAddinByHostType(OfficeAddin,HostType);
    END;
    
    ...
Codeunit<Add-in Manifest Management>.PROCEDURE<GetManifestCodeunit>
  Raised in: Codeunit<Add-in Manifest Management>.PROCEDURE<GetAddinByHostType>
    Code lines:
    GetManifestCodeunit(ManifestCodeunit,HostType); <=====================
    GetAddin(OfficeAddin,ManifestCodeunit);
Codeunit<Add-in Manifest Management>.PROCEDURE<OnGenerateManifest>
  Raised in: Codeunit<Add-in Manifest Management>.PROCEDURE<GenerateManifest>
    Code lines:
    // Uses the current value of Manifest and updates XML nodes to reflect the current values
    VerifyHttps;
    IF OfficeAddin."Manifest Codeunit" <> 0 THEN
      OnGenerateManifest(OfficeAddin,ManifestText,OfficeAddin."Manifest Codeunit") <=====================
    ELSE BEGIN
      ManifestText := OfficeAddin.GetDefaultManifestText;
      SetCommonManifestItems(ManifestText);
    END;
Codeunit<Payroll Management>.PROCEDURE<OnImportPayroll>
  Raised in: Codeunit<Payroll Management>.PROCEDURE<ImportPayroll>
    Code lines:
    ...
        EXIT;
    END;
    
    IF EnabledPayrollServiceExists(TempServiceConnection) THEN
      IF SelectPayrollService(TempServiceConnection,SelectPayrollServiceToUseTxt) THEN
        OnImportPayroll(TempServiceConnection,GenJournalLine); <=====================
Codeunit<Payroll Management>.PROCEDURE<OnRegisterPayrollService>
  Raised in: Page<General Journal>.PROCEDURE<SetPayrollAppearance>
    Code lines:
    PayrollManagement.OnRegisterPayrollService(TempPayrollServiceConnection); <=====================
    ImportPayrollTransactionsAvailable := NOT TempPayrollServiceConnection.ISEMPTY;
  Raised in: Codeunit<Payroll Management>.PROCEDURE<ImportPayroll>
    Code lines:
    TempServiceConnection.DELETEALL;
    OnRegisterPayrollService(TempServiceConnection); <=====================
    
    IF TempServiceConnection.ISEMPTY THEN
      ERROR(PayrollServiceNotFoundErr);
    
    IF NOT EnabledPayrollServiceExists(TempServiceConnection) THEN BEGIN
      IF CONFIRM(EnablePayrollServicesQst) THEN
        EnablePayrollService(TempServiceConnection)
      ELSE
    ...
  Raised in: Codeunit<Payroll Management>.PROCEDURE<EnablePayrollService>
    Code lines:
    ...
    IF SelectPayrollService(TempServiceConnection,SelectPayrollServiceToEnableTxt) THEN BEGIN
      SelectedServiceRecordId := TempServiceConnection."Record ID";
      SelectedServiceName := TempServiceConnection.Name;
      SetupPayrollService(TempServiceConnection);
      TempServiceConnection.DELETEALL;
      OnRegisterPayrollService(TempServiceConnection); <=====================
      IF NOT TempServiceConnection.ISEMPTY THEN BEGIN
        TempServiceConnection.SETRANGE("Record ID",SelectedServiceRecordId);
        IF NOT EnabledPayrollServiceExists(TempServiceConnection) THEN
          ERROR(PayrollServiceDisabledErr,SelectedServiceName);
    ...
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnAfterFilterReversalEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<FilterReversalEntry>
    Code lines:
    ...
          ReversalEntry.SETRANGE("Entry Type",ReversalEntry."Entry Type"::Maintenance);
          MaintenanceLedgerEntry := RecVar;
          ReversalEntry.SETRANGE("Entry No.",MaintenanceLedgerEntry."Entry No.");
        END;
      ELSE
        OnAfterFilterReversalEntry(ReversalEntry,RecVar); <=====================
    END;
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnAfterPostReverse>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<Reverse>
    Code lines:
    ...
    IF GenJnlPostLine.GetNextEntryNo = 0 THEN
      GenJnlPostLine.StartPosting(GenJnlLine)
    ELSE
      GenJnlPostLine.ContinuePosting(GenJnlLine);
    
    OnAfterPostReverse(GenJnlLine); <=====================
    
    GenJnlPostLine.SetGLRegReverse(GLReg);
    
    CopyCustLedgEntry(CustLedgEntry,TempCustLedgEntry);
    ...
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnApplyCustLedgEntryByReversalOnBeforeInsertDtldCustLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ApplyCustLedgEntryByReversal>
    Code lines:
    ...
    NewDtldCustLedgEntry."Applied Cust. Ledger Entry No." := AppliedEntryNo;
    NewDtldCustLedgEntry."User ID" := USERID;
    NewDtldCustLedgEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
    NewDtldCustLedgEntry."Entry No." := NextDtldCustLedgEntryEntryNo;
    NextDtldCustLedgEntryEntryNo := NextDtldCustLedgEntryEntryNo + 1;
    OnApplyCustLedgEntryByReversalOnBeforeInsertDtldCustLedgEntry(NewDtldCustLedgEntry,DtldCustLedgEntry2); <=====================
    NewDtldCustLedgEntry.INSERT(TRUE);
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnApplyEmplLedgEntryByReversalOnBeforeInsertDtldEmplLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ApplyEmplLedgEntryByReversal>
    Code lines:
    ...
    NewDetailedEmployeeLedgerEntry."Applied Empl. Ledger Entry No." := AppliedEntryNo;
    NewDetailedEmployeeLedgerEntry."User ID" := USERID;
    NewDetailedEmployeeLedgerEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
    NewDetailedEmployeeLedgerEntry."Entry No." := NextDtldEmplLedgEntryNo;
    NextDtldEmplLedgEntryNo += 1;
    OnApplyEmplLedgEntryByReversalOnBeforeInsertDtldEmplLedgEntry(NewDetailedEmployeeLedgerEntry,DetailedEmployeeLedgerEntry2); <=====================
    NewDetailedEmployeeLedgerEntry.INSERT(TRUE);
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnApplyVendLedgEntryByReversalOnBeforeInsertDtldVendLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ApplyVendLedgEntryByReversal>
    Code lines:
    ...
    NewDtldVendLedgEntry."Applied Vend. Ledger Entry No." := AppliedEntryNo;
    NewDtldVendLedgEntry."User ID" := USERID;
    NewDtldVendLedgEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
    NewDtldVendLedgEntry."Entry No." := NextDtldVendLedgEntryEntryNo;
    NextDtldVendLedgEntryEntryNo := NextDtldVendLedgEntryEntryNo + 1;
    OnApplyVendLedgEntryByReversalOnBeforeInsertDtldVendLedgEntry(NewDtldVendLedgEntry,DtldVendLedgEntry2); <=====================
    NewDtldVendLedgEntry.INSERT(TRUE);
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnBeforeReverse>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<Reverse>
    Code lines:
    IsHandled := FALSE;
    OnBeforeReverse(ReversalEntry,ReversalEntry2,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SourceCodeSetup.GET;
    IF ReversalEntry2."Reversal Type" = ReversalEntry2."Reversal Type"::Register THEN
      GLReg2."No." := ReversalEntry2."G/L Register No.";
    
    ReversalEntry.CopyReverseFilters(
    ...
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseBankAccLedgEntryOnBeforeInsert>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ReverseBankAccLedgEntry>
    Code lines:
    ...
        "Reversed by Entry No." := BankAccLedgEntry."Entry No.";
      END;
      BankAccLedgEntry."Reversed by Entry No." := "Entry No.";
      BankAccLedgEntry.Reversed := TRUE;
      BankAccLedgEntry.MODIFY;
      OnReverseBankAccLedgEntryOnBeforeInsert(NewBankAccLedgEntry,BankAccLedgEntry); <=====================
      INSERT;
    END;
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseCustLedgEntryOnBeforeInsertCustLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ReverseCustLedgEntry>
    Code lines:
    ...
      END;
      CustLedgEntry."Applies-to ID" := '';
      CustLedgEntry."Reversed by Entry No." := "Entry No.";
      CustLedgEntry.Reversed := TRUE;
      CustLedgEntry.MODIFY;
      OnReverseCustLedgEntryOnBeforeInsertCustLedgEntry(NewCustLedgEntry,CustLedgEntry); <=====================
      INSERT;
    
      IF NextDtldCustLedgEntryEntryNo = 0 THEN BEGIN
        DtldCustLedgEntry.FINDLAST;
    ...
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseCustLedgEntryOnBeforeInsertDtldCustLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ReverseCustLedgEntry>
    Code lines:
    ...
        NewDtldCustLedgEntry."Cust. Ledger Entry No." := NewEntryNo;
        NewDtldCustLedgEntry."User ID" := USERID;
        NewDtldCustLedgEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
        NewDtldCustLedgEntry."Entry No." := NextDtldCustLedgEntryEntryNo;
        NextDtldCustLedgEntryEntryNo := NextDtldCustLedgEntryEntryNo + 1;
        OnReverseCustLedgEntryOnBeforeInsertDtldCustLedgEntry(NewDtldCustLedgEntry,DtldCustLedgEntry); <=====================
        NewDtldCustLedgEntry.INSERT(TRUE);
      UNTIL DtldCustLedgEntry.NEXT = 0;
    
      ApplyCustLedgEntryByReversal(
    ...
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseEmplLedgEntryOnBeforeInsertDtldEmplLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ReverseEmplLedgEntry>
    Code lines:
    ...
        NewDetailedEmployeeLedgerEntry."Employee Ledger Entry No." := NewEntryNo;
        NewDetailedEmployeeLedgerEntry."User ID" := USERID;
        NewDetailedEmployeeLedgerEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
        NewDetailedEmployeeLedgerEntry."Entry No." := NextDtldEmplLedgEntryNo;
        NextDtldEmplLedgEntryNo += 1;
        OnReverseEmplLedgEntryOnBeforeInsertDtldEmplLedgEntry(NewDetailedEmployeeLedgerEntry,DetailedEmployeeLedgerEntry); <=====================
        NewDetailedEmployeeLedgerEntry.INSERT(TRUE);
      UNTIL DetailedEmployeeLedgerEntry.NEXT = 0;
    
      ApplyEmplLedgEntryByReversal(
    ...
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseEmplLedgEntryOnBeforeInsertEmplLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ReverseEmplLedgEntry>
    Code lines:
    ...
      END;
      EmployeeLedgerEntry."Applies-to ID" := '';
      EmployeeLedgerEntry."Reversed by Entry No." := "Entry No.";
      EmployeeLedgerEntry.Reversed := TRUE;
      EmployeeLedgerEntry.MODIFY;
      OnReverseEmplLedgEntryOnBeforeInsertEmplLedgEntry(NewEmployeeLedgerEntry,EmployeeLedgerEntry); <=====================
      INSERT;
    
      IF NextDtldEmplLedgEntryNo = 0 THEN BEGIN
        DetailedEmployeeLedgerEntry.FINDLAST;
    ...
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseGLEntryOnBeforeInsertGLEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ReverseGLEntry>
    Code lines:
    ...
            GLEntry."Reversed by Entry No." := "Entry No.";
          END;
          "Reversed by Entry No." := GLEntry."Entry No.";
          Reversed := TRUE;
          MODIFY;
          OnReverseGLEntryOnBeforeInsertGLEntry(GLEntry,GenJnlLine,GLEntry2); <=====================
          GenJnlPostLine.InsertGLEntry(GenJnlLine,GLEntry,FALSE);
    
          CASE TRUE OF
            TempCustLedgEntry.GET("Entry No."):
    ...
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseVATEntryOnBeforeInsert>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ReverseVAT>
    Code lines:
    ...
            "Reversed by Entry No." := VATEntry."Entry No.";
          END;
          VATEntry."Reversed by Entry No." := "Entry No.";
          VATEntry.Reversed := TRUE;
          VATEntry.MODIFY;
          OnReverseVATEntryOnBeforeInsert(NewVATEntry,VATEntry); <=====================
          INSERT;
          GLEntryVATEntryLink.InsertLink(GLEntry."Entry No.","Entry No.");
          GenJnlPostLine.IncrNextVATEntryNo;
        END;
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseVendLedgEntryOnBeforeInsertDtldVendLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ReverseVendLedgEntry>
    Code lines:
    ...
        NewDtldVendLedgEntry."Vendor Ledger Entry No." := NewEntryNo;
        NewDtldVendLedgEntry."User ID" := USERID;
        NewDtldVendLedgEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
        NewDtldVendLedgEntry."Entry No." := NextDtldVendLedgEntryEntryNo;
        NextDtldVendLedgEntryEntryNo := NextDtldVendLedgEntryEntryNo + 1;
        OnReverseVendLedgEntryOnBeforeInsertDtldVendLedgEntry(NewDtldVendLedgEntry,DtldVendLedgEntry); <=====================
        NewDtldVendLedgEntry.INSERT(TRUE);
      UNTIL DtldVendLedgEntry.NEXT = 0;
    
      ApplyVendLedgEntryByReversal(
    ...
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseVendLedgEntryOnBeforeInsertVendLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ReverseVendLedgEntry>
    Code lines:
    ...
      END;
      VendLedgEntry."Applies-to ID" := '';
      VendLedgEntry."Reversed by Entry No." := "Entry No.";
      VendLedgEntry.Reversed := TRUE;
      VendLedgEntry.MODIFY;
      OnReverseVendLedgEntryOnBeforeInsertVendLedgEntry(NewVendLedgEntry,VendLedgEntry); <=====================
      INSERT;
    
      IF NextDtldVendLedgEntryEntryNo = 0 THEN BEGIN
        DtldVendLedgEntry.FINDLAST;
    ...
Codeunit<Deferral Utilities>.PROCEDURE<OnBeforePostedDeferralHeaderInsert>
  Raised in: Codeunit<Deferral Utilities>.PROCEDURE<CreateScheduleFromGL>
    Code lines:
    ...
      PostedDeferralHeader."Line No." := GenJournalLine."Line No.";
      PostedDeferralHeader."Currency Code" := GenJournalLine."Currency Code";
      PostedDeferralHeader."Deferral Account" := DeferralAccount;
      PostedDeferralHeader."Posting Date" := GenJournalLine."Posting Date";
      PostedDeferralHeader."Entry No." := FirstEntryNo;
      OnBeforePostedDeferralHeaderInsert(PostedDeferralHeader,GenJournalLine); <=====================
      PostedDeferralHeader.INSERT(TRUE);
      FilterDeferralLines(
        DeferralLine,DeferralHeader."Deferral Doc. Type"::"G/L",
        GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name",
    ...
Codeunit<Deferral Utilities>.PROCEDURE<OnBeforePostedDeferralLineInsert>
  Raised in: Codeunit<Deferral Utilities>.PROCEDURE<CreateScheduleFromGL>
    Code lines:
    ...
          PostedDeferralLine."Document Type" := 0;
          PostedDeferralLine."Document No." := '';
          PostedDeferralLine."Line No." := GenJournalLine."Line No.";
          PostedDeferralLine."Currency Code" := GenJournalLine."Currency Code";
          PostedDeferralLine."Deferral Account" := DeferralAccount;
          OnBeforePostedDeferralLineInsert(PostedDeferralLine,GenJournalLine); <=====================
          PostedDeferralLine.INSERT(TRUE);
        UNTIL DeferralLine.NEXT = 0;
      END;
    END;
    ...
Codeunit<Data Classification Mgt.>.PROCEDURE<OnGetPrivacyMasterTables>
  Raised in: Page<Data Subject>.<OnInit>
    Code lines:
    DataClassificationMgt.OnGetPrivacyMasterTables(Rec); <=====================
  Raised in: Page<Data Classification Wizard>.PROCEDURE<ResetControls>
    Code lines:
    ...
    NextEnabled := TRUE;
    FinishEnabled := FALSE;
    RESET;
    
    IF ISEMPTY THEN
      DataClassificationMgt.OnGetPrivacyMasterTables(Rec); <=====================
    
    CASE Step OF
      Step::Welcome:
        BackEnabled := FALSE;
    ...
  Raised in: Codeunit<Data Privacy Mgmt>.PROCEDURE<CreateEntities>
    Code lines:
    DataPrivacyEntities.RESET;
    DataPrivacyEntities.DELETEALL;
    DataClassificationMgt.OnGetPrivacyMasterTables(DataPrivacyEntities); <=====================
Codeunit<Data Classification Mgt.>.PROCEDURE<OnOpenExcelSheet>
  Raised in: Codeunit<Data Classification Mgt.>.PROCEDURE<ExportToExcelSheet>
    Code lines:
    ...
    
    TempExcelBuffer.WriteSheet(DataClassificationWorksheet.CAPTION,COMPANYNAME,USERID);
    TempExcelBuffer.CloseBook;
    
    ShouldOpenFile := TRUE;
    OnOpenExcelSheet(TempExcelBuffer,ShouldOpenFile); <=====================
    IF ShouldOpenFile THEN
      TempExcelBuffer.OpenExcelWithName(ExcelFileNameTxt);
Codeunit<Data Classification Mgt.>.PROCEDURE<OnUploadExcelSheet>
  Raised in: Codeunit<Data Classification Mgt.>.PROCEDURE<ImportExcelSheet>
    Code lines:
    DataSensitivity.SETRANGE("Company Name",COMPANYNAME);
    IF DataSensitivity.ISEMPTY THEN
      FillDataSensitivityTable;
    
    ShouldUploadFile := TRUE;
    OnUploadExcelSheet(TempExcelBuffer,ShouldUploadFile); <=====================
    IF ShouldUploadFile THEN BEGIN
      FileName := '';
      UPLOADINTOSTREAM(
        ImportTitleTxt,
    ...
Codeunit<Reversal-Post>.PROCEDURE<OnBeforeGLRegPostingReportPrint>
  Raised in: Codeunit<Reversal-Post>.<OnRun>
    Code lines:
    ...
    IF PrintRegister THEN BEGIN
      GenJnlTemplate.VALIDATE(Type);
      IF GenJnlTemplate."Posting Report ID" <> 0 THEN
        IF GLReg.FINDLAST THEN BEGIN
          GLReg.SETRECFILTER;
          OnBeforeGLRegPostingReportPrint(GenJnlTemplate."Posting Report ID",FALSE,FALSE,GLReg,Handled); <=====================
          IF NOT Handled THEN
            REPORT.RUN(GenJnlTemplate."Posting Report ID",FALSE,FALSE,GLReg);
        END;
    END;
    ...
Codeunit<Data Migration Mgt.>.PROCEDURE<OnAfterMigrationFinished>
  Raised in: Codeunit<Data Migration Mgt.>.<OnRun>
    Code lines:
    ...
      EXIT;
    
    // migrate any other tables if any
    CheckAbortAndMigrateRemainingEntities(DataMigrationStatus,Retry);
    
    OnAfterMigrationFinished(DataMigrationStatus,FALSE,StartTime,Retry); <=====================
  Raised in: Codeunit<Data Migration Mgt.>.PROCEDURE<CheckAbortRequestedAndMigrateEntity>
    Code lines:
    IF AbortRequested THEN BEGIN
      DataMigrationStatus.RESET;
      DataMigrationStatus.SETRANGE("Migration Type",DataMigrationStatus."Migration Type");
      SetAbortStatus(DataMigrationStatus);
      OnAfterMigrationFinished(DataMigrationStatus,TRUE,StartTime,ReRun); <=====================
      EXIT(TRUE);
    END;
    
    DataMigrationStatus.SETRANGE("Destination Table ID",DestinationTableId);
    HandleEntityMigration(DataMigrationStatus,BaseAppCodeunitToRun,ReRun);
  Raised in: Codeunit<Data Migration Mgt.>.PROCEDURE<CheckAbortAndMigrateRemainingEntities>
    Code lines:
    IF AbortRequested THEN BEGIN
      DataMigrationStatus.RESET;
      DataMigrationStatus.SETRANGE("Migration Type",DataMigrationStatus."Migration Type");
      SetAbortStatus(DataMigrationStatus);
      OnAfterMigrationFinished(DataMigrationStatus,TRUE,StartTime,Retry); <=====================
      EXIT;
    END;
    
    DataMigrationStatus.SETFILTER("Destination Table ID",STRSUBSTNO('<>%1&<>%2&<>%3&<>%4',
        DATABASE::Item,
    ...
Codeunit<Data Migration Mgt.>.PROCEDURE<OnBeforeMigrationStarted>
  Raised in: Codeunit<Data Migration Mgt.>.<OnRun>
    Code lines:
    EnableDataMigrationNotificationForAllUsers;
    DataMigrationStatus.GET("Record ID to Process");
    DataMigrationStatus.SETRANGE("Migration Type",DataMigrationStatus."Migration Type");
    Retry := "Parameter String" = RetryTxt;
    
    OnBeforeMigrationStarted(DataMigrationStatus,Retry); <=====================
    
    IF NOT Retry THEN BEGIN
      DataMigrationStatus.SETRANGE(Status,DataMigrationStatus.Status::Pending);
      DataMigrationFacade.OnFillStagingTables;
    ...
Codeunit<Data Migration Mgt.>.PROCEDURE<OnBeforeStartMigration>
  Raised in: Codeunit<Data Migration Mgt.>.PROCEDURE<StartMigration>
    Code lines:
    CheckMigrationInProgress(Retry);
    
    StartNewSession := TRUE;
    CheckExistingData := TRUE;
    OnBeforeStartMigration(StartNewSession,CheckExistingData); <=====================
    
    IF CheckExistingData THEN
      CheckDataAlreadyExist(MigrationType,Retry);
    
    DataMigrationStatus.RESET;
    ...
Codeunit<Assisted Company Setup>.PROCEDURE<OnBeforeScheduleTask>
  Raised in: Codeunit<Assisted Company Setup>.PROCEDURE<ScheduleConfigPackageImport>
    Code lines:
    WITH AssistedCompanySetupStatus DO BEGIN
      LOCKTABLE;
      GET(Name);
      OnBeforeScheduleTask(DoNotScheduleTask,TaskID); <=====================
      IF DoNotScheduleTask THEN
        "Task ID" := TaskID
      ELSE
        IF TASKSCHEDULER.CANCREATETASK THEN
          "Task ID" :=
            TASKSCHEDULER.CREATETASK(
    ...
Codeunit<Data Migration Notifier>.PROCEDURE<SkipShowingCustomerContactCreationNotification>
  Raised in: Codeunit<Data Migration Notifier>.PROCEDURE<ShowCustomerContactCreationNotification>
    Code lines:
    SkipShowingCustomerContactCreationNotification(SkipNotification); <=====================
    IF SkipNotification THEN
      EXIT;
    
    NotificationID := CheckCustVendNotificationIdEnabled(SourceTableID);
    IF ISNULLGUID(NotificationID) THEN
      EXIT;
    CASE SourceTableID OF
      DATABASE::Customer:
        IF NOT ContactBusinessRelation.FindByRelation(ContactBusinessRelation."Link to Table"::Customer,SourceNo) THEN
    ...
Codeunit<Encrypted Key/Value Management>.PROCEDURE<OnCleanUpEvent>
  Raised in: Codeunit<Encrypted Key/Value Management>.PROCEDURE<Cleanup>
    Code lines:
    ...
    
    LogActivity(CleanupEventTxt,RequestInitTxt,TRUE);
    COMMIT;
    
    ErrorOccured := FALSE;
    OnCleanUpEvent(ErrorOccured); <=====================
    
    IF NOT ErrorOccured THEN
      EncryptedKeyValue.DELETEALL;
    
    ...
Codeunit<Excel Data Migrator>.PROCEDURE<OnDownloadTemplate>
  Raised in: Codeunit<Excel Data Migrator>.PROCEDURE<ExportExcelTemplate>
    Code lines:
    OnDownloadTemplate(HideDialog); <=====================
    EXIT(ExportExcelTemplateByFileName(FileName,HideDialog));
Codeunit<Excel Data Migrator>.PROCEDURE<OnUploadFile>
  Raised in: Codeunit<Excel Data Migrator>.PROCEDURE<ImportExcelData>
    Code lines:
    OnUploadFile(ServerFile); <=====================
    IF ServerFile = '' THEN
      ServerFile := COPYSTR(FileManagement.UploadFile(ImportFromExcelTxt,ExcelFileExtensionTok),
          1,MAXSTRLEN(ServerFile));
    
    IF ServerFile <> '' THEN BEGIN
      ImportExcelDataByFileName(ServerFile);
      EXIT(TRUE);
    END;
    
Codeunit<Sandbox Deploymt. Cleanup>.PROCEDURE<OnClearConfiguration>
  Raised in: Codeunit<Sandbox Deploymt. Cleanup>.PROCEDURE<RaiseEventForEveryCompany>
    Code lines:
    IF Company.FINDSET THEN
      REPEAT
        OnClearConfiguration(Company.Name); <=====================
      UNTIL Company.NEXT = 0;
    OnClearConfiguration(''); <=====================
  Raised in: Codeunit<Sandbox Deploymt. Cleanup>.PROCEDURE<RaiseEventForEveryCompany>
    Code lines:
    IF Company.FINDSET THEN
      REPEAT
        OnClearConfiguration(Company.Name); <=====================
      UNTIL Company.NEXT = 0;
    OnClearConfiguration(''); <=====================
Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<OnAfterBindSubscription>
  Raised in: Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<Preview>
    Code lines:
    ...
      ERROR(SubscriberTypeErr);
    IF NOT RecVar.ISRECORD THEN
      ERROR(RecVarTypeErr);
    
    BINDSUBSCRIPTION(PostingPreviewEventHandler);
    OnAfterBindSubscription; <=====================
    
    RunResult := RunPreview(Subscriber,RecVar);
    
    UNBINDSUBSCRIPTION(PostingPreviewEventHandler);
    ...
Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<OnAfterIsActive>
  Raised in: Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<IsActive>
    Code lines:
    ...
    
    CLEAR(EventSubscription);
    EventSubscription.SETRANGE("Publisher Object ID",CODEUNIT::"Gen. Jnl.-Post Preview");
    EventSubscription.SETFILTER("Active Manual Instances",'<>%1',0);
    Result := Result AND (NOT EventSubscription.ISEMPTY);
    OnAfterIsActive(Result); <=====================
    EXIT(Result);
Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<OnAfterUnbindSubscription>
  Raised in: Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<Preview>
    Code lines:
    ...
    OnAfterBindSubscription;
    
    RunResult := RunPreview(Subscriber,RecVar);
    
    UNBINDSUBSCRIPTION(PostingPreviewEventHandler);
    OnAfterUnbindSubscription; <=====================
    
    // The OnRunPreview event expects subscriber following template: Result := <Codeunit>.RUN
    // So we assume RunPreview returns FALSE with the error.
    // To prevent return FALSE without thrown error we check error call stack.
    ...
Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<OnBeforeThrowError>
  Raised in: Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<ThrowError>
    Code lines:
    OnBeforeThrowError; <=====================
    ERROR(PreviewModeErr);
Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<OnRunPreview>
  Raised in: Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<RunPreview>
    Code lines:
    OnRunPreview(Result,Subscriber,RecVar); <=====================
    EXIT(Result);
Codeunit<Company-Initialize>.PROCEDURE<OnCompanyInitialize>
  Raised in: Codeunit<Company-Initialize>.<OnRun>
    Code lines:
    ...
    WorkflowSetup.InitWorkflow;
    TransformationRule.CreateDefaultTransformations;
    InitElectronicFormats;
    InitApplicationAreasForSaaS;
    
    OnCompanyInitialize; <=====================
    
    Window.CLOSE;
    
    COMMIT;
Codeunit<Posting Preview Event Handler>.PROCEDURE<OnAfterFillDocumentEntry>
  Raised in: Codeunit<Posting Preview Event Handler>.PROCEDURE<FillDocumentEntry>
    Code lines:
    ...
    InsertDocumentEntry(TempServiceLedgerEntry,TempDocumentEntry);
    InsertDocumentEntry(TempWarrantyLedgerEntry,TempDocumentEntry);
    InsertDocumentEntry(TempMaintenanceLedgerEntry,TempDocumentEntry);
    InsertDocumentEntry(TempJobLedgerEntry,TempDocumentEntry);
    
    OnAfterFillDocumentEntry(TempDocumentEntry); <=====================
Codeunit<Posting Preview Event Handler>.PROCEDURE<OnAfterShowEntries>
  Raised in: Codeunit<Posting Preview Event Handler>.PROCEDURE<ShowEntries>
    Code lines:
    ...
      DATABASE::"Maintenance Ledger Entry":
        PAGE.RUN(PAGE::"Maint. Ledg. Entries Preview",TempMaintenanceLedgerEntry);
      DATABASE::"Job Ledger Entry":
        PAGE.RUN(PAGE::"Job Ledger Entries Preview",TempJobLedgerEntry);
      ELSE
        OnAfterShowEntries(TableNo); <=====================
    END;
Codeunit<ML Prediction Management>.PROCEDURE<OnBeforeEvaluate>
  Raised in: Codeunit<ML Prediction Management>.PROCEDURE<Evaluate>
    Code lines:
    CallAzureEndPoint := TRUE;
    OnBeforeEvaluate(Model,Quality,RecordVar,CallAzureEndPoint); <=====================
    IF NOT CallAzureEndPoint THEN
      EXIT;
    AzureMLConnector.Initialize(ApiKey,ApiUri,ApiTimeout);
    TestInitialized;
    AzureMLConnector.AddParameter('method','evaluate');
    AzureMLConnector.AddParameter('model',Model);
    CreateInput;
    IF NOT AzureMLConnector.SendToAzureML(TRUE) THEN // hard coded to TRUE so that ML does update the usage stats
    ...
Codeunit<ML Prediction Management>.PROCEDURE<OnBeforePredict>
  Raised in: Codeunit<ML Prediction Management>.PROCEDURE<Predict>
    Code lines:
    CallAzureEndPoint := TRUE;
    OnBeforePredict(RecordVar,CallAzureEndPoint); <=====================
    IF NOT CallAzureEndPoint THEN
      EXIT;
    AzureMLConnector.Initialize(ApiKey,ApiUri,ApiTimeout);
    TestInitialized;
    AzureMLConnector.AddParameter('method','predict');
    AzureMLConnector.AddParameter('model',Model);
    CreateInput;
    IF NOT AzureMLConnector.SendToAzureML(TRUE) THEN // hard coded to TRUE so that ML does update the usage stats
    ...
Codeunit<ML Prediction Management>.PROCEDURE<OnBeforeTrain>
  Raised in: Codeunit<ML Prediction Management>.PROCEDURE<Train>
    Code lines:
    CallAzureEndPoint := TRUE;
    OnBeforeTrain(Model,Quality,CallAzureEndPoint); <=====================
    IF NOT CallAzureEndPoint THEN
      EXIT;
    AzureMLConnector.Initialize(ApiKey,ApiUri,ApiTimeout);
    TestInitialized;
    AzureMLConnector.AddParameter('method','train');
    AzureMLConnector.AddParameter('train_percent',FORMAT(TrainingPercent,0,9));
    CreateInput;
    IF NOT AzureMLConnector.SendToAzureML(TRUE) THEN // hard coded to TRUE so that ML does update the usage stats
    ...
Codeunit<Image Analysis Management>.PROCEDURE<OnAfterImageAnalysis>
  Raised in: Codeunit<Image Analysis Management>.PROCEDURE<Analyze>
    Code lines:
    ...
          ELSE
            IF LastError = '' THEN
              SetLastError(GenericErrorErr,FALSE);
    
    ImageAnalysisResult.SetJson(JSONManagement,AnalysisType);
    OnAfterImageAnalysis(ImageAnalysisResult); <=====================
    
    EXIT(NOT HasError);
Codeunit<Image Analysis Management>.PROCEDURE<OnBeforeImageAnalysis>
  Raised in: Codeunit<Image Analysis Management>.PROCEDURE<Analyze>
    Code lines:
    Initialize;
    SetLastError('',FALSE);
    OnBeforeImageAnalysis; <=====================
    
    IF (Key = '') OR (Uri = '') THEN
      SetLastError(NoApiKeyUriErr,FALSE)
    ELSE
      IF ImagePath = '' THEN
        SetLastError(NoImageErr,FALSE)
      ELSE
    ...
Codeunit<Item Jnl.-Check Line>.PROCEDURE<OnAfterAssignInvtPickRequired>
  Raised in: Codeunit<Item Jnl.-Check Line>.PROCEDURE<WhseOrderHandlingRequired>
    Code lines:
    ...
          IF ItemJnlLine.Quantity < 0 THEN
            EXIT(TRUE);
      END;
    
    InvtPickLocation := NOT Location."Require Shipment" AND Location."Require Pick" ;
    OnAfterAssignInvtPickRequired(ItemJnlLine,Location,InvtPickLocation); <=====================
    IF InvtPickLocation THEN
      CASE ItemJnlLine."Entry Type" OF
        ItemJnlLine."Entry Type"::Output:
          IF ItemJnlLine.Quantity < 0 THEN
    ...
Codeunit<Item Jnl.-Check Line>.PROCEDURE<OnAfterAssignInvtPutAwayRequired>
  Raised in: Codeunit<Item Jnl.-Check Line>.PROCEDURE<WhseOrderHandlingRequired>
    Code lines:
    InvtPutAwayLocation := NOT Location."Require Receive" AND Location."Require Put-away";
    OnAfterAssignInvtPutAwayRequired(ItemJnlLine,Location,InvtPutAwayLocation); <=====================
    IF InvtPutAwayLocation THEN
      CASE ItemJnlLine."Entry Type" OF
        ItemJnlLine."Entry Type"::Output:
          IF ItemJnlLine.Quantity >= 0 THEN
            EXIT(TRUE);
        ItemJnlLine."Entry Type"::Consumption,
        ItemJnlLine."Entry Type"::"Assembly Consumption":
          IF ItemJnlLine.Quantity < 0 THEN
    ...
Codeunit<Item Jnl.-Check Line>.PROCEDURE<OnAfterCheckItemJnlLine>
  Raised in: Codeunit<Item Jnl.-Check Line>.PROCEDURE<RunCheck>
    Code lines:
    ...
         (NOT GenJnlPostPreview.IsActive)
      THEN
        CheckItemJournalLineRestriction;
    END;
    
    OnAfterCheckItemJnlLine(ItemJnlLine); <=====================
Codeunit<O365 Sales Management>.PROCEDURE<OnGetQuickBooksVisible>
  Raised in: Codeunit<O365 Sales Management>.PROCEDURE<GetQboQbdVisibility>
    Code lines:
    ...
    
    IF QboEnabled THEN
      QboVisible := TRUE
    ELSE
      IF QboVisibleKV THEN
        OnGetQuickBooksVisible(QboVisible); <=====================
    
    IF QbdEnabled THEN
      QbdVisible := TRUE
    ELSE
    ...
  Raised in: Codeunit<O365 Sales Management>.PROCEDURE<GetQboQbdVisibility>
    Code lines:
    ...
    
    IF QboEnabled THEN
      QboVisible := TRUE
    ELSE
      IF QboVisibleKV THEN
        OnGetQuickBooksVisible(QboVisible); <=====================
    
    IF QbdEnabled THEN
      QbdVisible := TRUE
    ELSE
    ...
Codeunit<Res. Jnl.-Check Line>.PROCEDURE<OnAfterRunCheck>
  Raised in: Codeunit<Res. Jnl.-Check Line>.PROCEDURE<RunCheck>
    Code lines:
    ...
            DimMgt.GetDimValuePostingErr)
        ELSE
          ERROR(DimMgt.GetDimValuePostingErr);
    END;
    
    OnAfterRunCheck(ResJnlLine); <=====================
Codeunit<O365 Sales Background Setup>.PROCEDURE<OnAfterGraphSyncModified>
  Raised in: Codeunit<O365 Sales Background Setup>.PROCEDURE<InitializeGraphSync>
    Code lines:
    ...
      MarketingSetup.INSERT(TRUE);
    
    IF MarketingSetup."Sync with Microsoft Graph" <> EnableGraphSync THEN BEGIN
      MarketingSetup.VALIDATE("Sync with Microsoft Graph",EnableGraphSync);
      MarketingSetup.MODIFY(TRUE);
      OnAfterGraphSyncModified(EnableGraphSync,TriggerDeltaSync); <=====================
    END;
    
    IF NOT EnableGraphSync THEN
      EXIT;
    ...
Codeunit<O365 HTML Templ. Mgt.>.PROCEDURE<OnResizeCompanyLogo>
  Raised in: Codeunit<O365 HTML Templ. Mgt.>.PROCEDURE<FillCompanyLogo>
    Code lines:
    ...
    TempBlobResized.COPY(TempBlob);
    
    IF ImageHandlerManagement.ScaleDownFromBlob(TempBlobResized,MaxWidth,MaxHeight) THEN
      TempBlob.COPY(TempBlobResized);
    
    OnResizeCompanyLogo(TempBlob); <=====================
    
    GetCompanyLogoScaledDimensions(TempBlob,Width,Height,MaxWidth,MaxHeight);
    
    FillParameterValue(HTMLText,'CompanyLogo',TempBlob.GetHTMLImgSrc);
    ...
Codeunit<Res. Jnl.-Post Line>.PROCEDURE<OnAfterPostResJnlLine>
  Raised in: Codeunit<Res. Jnl.-Post Line>.PROCEDURE<Code>
    Code lines:
    ...
      ResLedgEntry.INSERT(TRUE);
    
      NextEntryNo := NextEntryNo + 1;
    END;
    
    OnAfterPostResJnlLine(ResJnlLine); <=====================
Codeunit<Res. Jnl.-Post Line>.PROCEDURE<OnBeforeResLedgEntryInsert>
  Raised in: Codeunit<Res. Jnl.-Post Line>.PROCEDURE<Code>
    Code lines:
    ...
      IF ResLedgEntry."Entry Type" = ResLedgEntry."Entry Type"::Usage THEN BEGIN
        PostTimeSheetDetail(ResJnlLine,ResLedgEntry."Quantity (Base)");
        ResLedgEntry.Chargeable := IsChargable(ResJnlLine,ResLedgEntry.Chargeable);
      END;
    
      OnBeforeResLedgEntryInsert(ResLedgEntry,ResJnlLine); <=====================
    
      ResLedgEntry.INSERT(TRUE);
    
      NextEntryNo := NextEntryNo + 1;
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterCalcPosShares>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<CalcPosShares>
    Code lines:
    ...
        PurchVarACY := "Unit Cost (ACY)" * "Invoiced Quantity" - DirCostACY - OvhdCostACY;
      END;
      CalcUnitCost := (DirCost <> 0) AND ("Unit Cost" = 0);
    END;
    
    OnAfterCalcPosShares( <=====================
      ItemJnlLine,DirCost,OvhdCost,PurchVar,DirCostACY,OvhdCostACY,PurchVarACY,CalcUnitCost,CalcPurchVar,Expected);
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterCalcPurchCorrShares>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InitValueEntry>
    Code lines:
    ...
          IF ("Invoiced Quantity" < 0) AND ("Applies-to Entry" <> 0) AND
             ("Entry Type" = "Entry Type"::Purchase) AND ("Item Charge No." = '') AND
             (ValueEntry."Entry Type" = ValueEntry."Entry Type"::"Direct Cost")
          THEN BEGIN
            CalcPurchCorrShares(OverheadAmount,OverheadAmountACY,VarianceAmount,VarianceAmountACY);
            OnAfterCalcPurchCorrShares( <=====================
              ValueEntry,ItemJnlLine,OverheadAmount,OverheadAmountACY,VarianceAmount,VarianceAmountACY);
          END;
        END
      END ELSE BEGIN
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterCheckItemTrackingInfo>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<CheckItemTrackingInfo>
    Code lines:
    ...
        THEN
          LotNoInfo.TESTFIELD(Blocked,FALSE);
      END;
    END;
    
    OnAfterCheckItemTrackingInfo(ItemJnlLine2,TrackingSpecification,SNInfoRequired,LotInfoRequired); <=====================
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInitItemLedgEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InitItemLedgEntry>
    Code lines:
    ...
      END;
      IF (ItemLedgEntry.Quantity < 0) AND ("Entry Type" <> "Entry Type"::Transfer) THEN
        ItemLedgEntry."Shipped Qty. Not Returned" := ItemLedgEntry.Quantity;
    END;
    
    OnAfterInitItemLedgEntry(ItemLedgEntry,ItemJnlLine,ItemLedgEntryNo); <=====================
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInitValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InitValueEntry>
    Code lines:
    ...
          END;
      END;
    
      RoundAmtValueEntry(ValueEntry);
    
      OnAfterInitValueEntry(ValueEntry,ItemJnlLine,ValueEntryNo); <=====================
    END;
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertCapLedgEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertCapLedgEntry>
    Code lines:
    ...
    
      OnBeforeInsertCapLedgEntry(CapLedgEntry,ItemJnlLine);
    
      CapLedgEntry.INSERT;
    
      OnAfterInsertCapLedgEntry(CapLedgEntry,ItemJnlLine); <=====================
    
      InsertItemReg(0,0,0,CapLedgEntry."Entry No.");
    END;
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertCapValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertCapValueEntry>
    Code lines:
    ...
      InvtPost.SetRunOnlyCheck(TRUE,NOT InvtSetup."Automatic Cost Posting",FALSE);
      IF InvtPost.BufferInvtPosting(ValueEntry) THEN
        InvtPost.PostInvtPostBufPerEntry(ValueEntry);
    
      ValueEntry.INSERT(TRUE);
      OnAfterInsertCapValueEntry(ValueEntry,ItemJnlLine); <=====================
    
      UpdateAdjmtProp(ValueEntry,CapLedgEntry."Posting Date");
    
      InsertItemReg(0,0,ValueEntry."Entry No.",0);
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertCorrItemLedgEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InitCorrItemLedgEntry>
    Code lines:
    ...
    ELSE
      NewItemLedgEntry."Applies-to Entry" := 0;
    
    OnBeforeInsertCorrItemLedgEntry(NewItemLedgEntry,OldItemLedgEntry,ItemJnlLine);
    NewItemLedgEntry.INSERT;
    OnAfterInsertCorrItemLedgEntry(NewItemLedgEntry,ItemJnlLine,OldItemLedgEntry); <=====================
    
    IF NewItemLedgEntry."Item Tracking" <> NewItemLedgEntry."Item Tracking"::None THEN
      ItemTrackingMgt.ExistingExpirationDate(
        NewItemLedgEntry."Item No.",
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertCorrValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertCorrValueEntry>
    Code lines:
    ...
    IF NewValueEntry.Inventoriable AND NOT Item."Inventory Value Zero" THEN
      PostInventoryToGL(NewValueEntry);
    
    NewValueEntry.INSERT;
    
    OnAfterInsertCorrValueEntry(NewValueEntry,ItemJnlLine); <=====================
    
    ItemApplnEntry.SetOutboundsNotUpdated(ItemLedgEntry);
    
    UpdateAdjmtProp(NewValueEntry,ItemLedgEntry."Posting Date");
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertItemLedgEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertItemLedgEntry>
    Code lines:
    ...
    
      ItemLedgEntry.UpdateItemTracking;
    
      OnBeforeInsertItemLedgEntry(ItemLedgEntry,ItemJnlLine);
      ItemLedgEntry.INSERT(TRUE);
      OnAfterInsertItemLedgEntry(ItemLedgEntry,ItemJnlLine,ItemLedgEntryNo,ValueEntryNo,ItemApplnEntryNo); <=====================
    
      InsertItemReg(ItemLedgEntry."Entry No.",0,0,0);
    END;
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertOHValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertOHValueEntry>
    Code lines:
    ...
      ValueEntry."Cost Amount (Actual) (ACY)" :=
        ROUND(OverheadAmountACY,Currency."Amount Rounding Precision");
    
    InsertValueEntry(ValueEntry,GlobalItemLedgEntry,FALSE);
    
    OnAfterInsertOHValueEntry(ValueEntry,Item,OverheadAmount,OverheadAmountACY); <=====================
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertValueEntry>
    Code lines:
    ...
      IF ValueEntry.Inventoriable AND NOT Item."Inventory Value Zero" THEN
        PostInventoryToGL(ValueEntry);
    
      ValueEntry.INSERT;
    
      OnAfterInsertValueEntry(ValueEntry,ItemJnlLine,ItemLedgEntry,ValueEntryNo); <=====================
    
      ItemApplnEntry.SetOutboundsNotUpdated(ItemLedgEntry);
    
      UpdateAdjmtProp(ValueEntry,ItemLedgEntry."Posting Date");
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterItemValuePosting>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<ItemValuePosting>
    Code lines:
    ...
         (GlobalItemLedgEntry.Quantity = GlobalItemLedgEntry."Invoiced Quantity")
      THEN
        UpdateItemApplnEntry(GlobalValueEntry."Item Ledger Entry No.","Posting Date");
    END;
    
    OnAfterItemValuePosting(GlobalValueEntry,ItemJnlLine,Item); <=====================
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterPostItemJnlLine>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<Code>
    Code lines:
    ...
        "Item Shpt. Entry No." := CapLedgEntryNo
      ELSE
        "Item Shpt. Entry No." := GlobalItemLedgEntry."Entry No.";
    END;
    
    OnAfterPostItemJnlLine(ItemJnlLine,GlobalItemLedgEntry); <=====================
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterSetupTempSplitItemJnlLineSetQty>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<SetupTempSplitItemJnlLine>
    Code lines:
    ...
      END;
    
      IF ItemJnlLine2."Phys. Inventory" THEN
        "Qty. (Phys. Inventory)" := "Qty. (Calculated)" + SignFactor * "Quantity (Base)";
    
      OnAfterSetupTempSplitItemJnlLineSetQty(TempSplitItemJnlLine,ItemJnlLine2,SignFactor); <=====================
    
      FloatingFactor := Quantity / NonDistrQuantity;
      IF FloatingFactor < 1 THEN BEGIN
        Amount := ROUND(NonDistrAmount * FloatingFactor,GLSetup."Amount Rounding Precision");
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeApplyItemLedgEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<ApplyItemLedgEntry>
    Code lines:
    OnBeforeApplyItemLedgEntry(ItemLedgEntry,OldItemLedgEntry,ValueEntry,CausedByTransfer,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    IF (ItemLedgEntry."Remaining Quantity" = 0) OR
       (ItemLedgEntry."Drop Shipment" AND (ItemLedgEntry."Applies-to Entry" = 0)) OR
       ((Item."Costing Method" = Item."Costing Method"::Specific) AND ItemLedgEntry.Positive)
    THEN
      EXIT;
    
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeCheckItemTrackingInfo>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<CheckItemTrackingInfo>
    Code lines:
    OnBeforeCheckItemTrackingInfo(ItemJnlLine2,TrackingSpecification,SNInfoRequired,LotInfoRequired); <=====================
    
    IF SNInfoRequired THEN BEGIN
      SerialNoInfo.GET(
        ItemJnlLine2."Item No.",ItemJnlLine2."Variant Code",TrackingSpecification."Serial No.");
      SerialNoInfo.TESTFIELD(Blocked,FALSE);
      IF TrackingSpecification."New Serial No." <> '' THEN BEGIN
        SerialNoInfo.GET(
          ItemJnlLine2."Item No.",ItemJnlLine2."Variant Code",TrackingSpecification."New Serial No.");
        SerialNoInfo.TESTFIELD(Blocked,FALSE);
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertCapLedgEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertCapLedgEntry>
    Code lines:
    ...
    
      CapLedgEntry."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
      CapLedgEntry."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
      CapLedgEntry."Dimension Set ID" := "Dimension Set ID";
    
      OnBeforeInsertCapLedgEntry(CapLedgEntry,ItemJnlLine); <=====================
    
      CapLedgEntry.INSERT;
    
      OnAfterInsertCapLedgEntry(CapLedgEntry,ItemJnlLine);
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertCapValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertCapValueEntry>
    Code lines:
    ...
    
      ValueEntry."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
      ValueEntry."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
      ValueEntry."Dimension Set ID" := "Dimension Set ID";
    
      OnBeforeInsertCapValueEntry(ValueEntry,ItemJnlLine); <=====================
    
      InvtPost.SetRunOnlyCheck(TRUE,NOT InvtSetup."Automatic Cost Posting",FALSE);
      IF InvtPost.BufferInvtPosting(ValueEntry) THEN
        InvtPost.PostInvtPostBufPerEntry(ValueEntry);
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertCorrItemLedgEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InitCorrItemLedgEntry>
    Code lines:
    ...
    IF OldItemLedgEntry.Positive THEN
      NewItemLedgEntry."Applies-to Entry" := OldItemLedgEntry."Entry No."
    ELSE
      NewItemLedgEntry."Applies-to Entry" := 0;
    
    OnBeforeInsertCorrItemLedgEntry(NewItemLedgEntry,OldItemLedgEntry,ItemJnlLine); <=====================
    NewItemLedgEntry.INSERT;
    OnAfterInsertCorrItemLedgEntry(NewItemLedgEntry,ItemJnlLine,OldItemLedgEntry);
    
    IF NewItemLedgEntry."Item Tracking" <> NewItemLedgEntry."Item Tracking"::None THEN
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertCorrValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertCorrValueEntry>
    Code lines:
    ...
    NewValueEntry."Cost Posted to G/L" := 0;
    NewValueEntry."Cost Posted to G/L (ACY)" := 0;
    NewValueEntry."Expected Cost Posted to G/L" := 0;
    NewValueEntry."Exp. Cost Posted to G/L (ACY)" := 0;
    
    OnBeforeInsertCorrValueEntry(NewValueEntry,OldValueEntry,ItemJnlLine); <=====================
    
    IF NewValueEntry.Inventoriable AND NOT Item."Inventory Value Zero" THEN
      PostInventoryToGL(NewValueEntry);
    
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertItemLedgEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertItemLedgEntry>
    Code lines:
    ...
        ItemLedgEntry."Job Task No." := "Job Task No.";
      END;
    
      ItemLedgEntry.UpdateItemTracking;
    
      OnBeforeInsertItemLedgEntry(ItemLedgEntry,ItemJnlLine); <=====================
      ItemLedgEntry.INSERT(TRUE);
      OnAfterInsertItemLedgEntry(ItemLedgEntry,ItemJnlLine,ItemLedgEntryNo,ValueEntryNo,ItemApplnEntryNo);
    
      InsertItemReg(ItemLedgEntry."Entry No.",0,0,0);
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertOHValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertOHValueEntry>
    Code lines:
    IF Item."Inventory Value Zero" THEN
      EXIT;
    
    OnBeforeInsertOHValueEntry(ValueEntry,Item,OverheadAmount,OverheadAmountACY); <=====================
    
    ValueEntryNo := ValueEntryNo + 1;
    
    ValueEntry."Entry No." := ValueEntryNo;
    ValueEntry."Item Charge No." := '';
    ValueEntry."Entry Type" := ValueEntry."Entry Type"::"Indirect Cost";
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertPhysInvtLedgEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertPhysInventoryEntry>
    Code lines:
    ...
      PhysInvtLedgEntry."Phys Invt Counting Period Code" :=
        "Phys Invt Counting Period Code";
      PhysInvtLedgEntry."Phys Invt Counting Period Type" :=
        "Phys Invt Counting Period Type";
    
      OnBeforeInsertPhysInvtLedgEntry(PhysInvtLedgEntry,ItemJnlLine); <=====================
      PhysInvtLedgEntry.INSERT;
    
      InsertItemReg(0,PhysInvtLedgEntry."Entry No.",0,0);
    END;
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertSetupTempSplitItemJnlLine>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<SetupTempSplitItemJnlLine>
    Code lines:
    ...
        "Applies-to Entry" := TempTrackingSpecification."Item Ledger Entry No."
      ELSE
        "Applies-to Entry" := TempTrackingSpecification."Appl.-to Item Entry";
      "Applies-from Entry" := TempTrackingSpecification."Appl.-from Item Entry";
    
      OnBeforeInsertSetupTempSplitItemJnlLine(TempTrackingSpecification,TempSplitItemJnlLine,PostItemJnlLine); <=====================
    
      INSERT;
    END;
    
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertTransferEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertTransferEntry>
    Code lines:
    ...
            ItemJnlLine,NewItemLedgEntry,NewItemLedgEntry."Remaining Quantity",TRUE);
    
      ApplyItemLedgEntry(NewItemLedgEntry,ItemLedgEntry2,NewValueEntry,TRUE);
      AutoTrack(NewItemLedgEntry,IsReserved);
    
      OnBeforeInsertTransferEntry(NewItemLedgEntry,OldItemLedgEntry,ItemJnlLine); <=====================
    
      InsertItemLedgEntry(NewItemLedgEntry,TRUE);
      InsertValueEntry(NewValueEntry,NewItemLedgEntry,TRUE);
    
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertValueEntry>
    Code lines:
    ...
          ValueEntry."Sales Amount (Expected)",
          ValueEntry."Purchase Amount (Expected)",
          ItemLedgEntry.Quantity = ItemLedgEntry."Invoiced Quantity");
      END;
    
      OnBeforeInsertValueEntry(ValueEntry,ItemJnlLine,ItemLedgEntry,ValueEntryNo); <=====================
    
      IF ValueEntry.Inventoriable AND NOT Item."Inventory Value Zero" THEN
        PostInventoryToGL(ValueEntry);
    
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertVarValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertVarValueEntry>
    Code lines:
    OnBeforeInsertVarValueEntry(ValueEntry,Item,VarianceAmount,VarianceAmountACY); <=====================
    
    IF (NOT ValueEntry.Inventoriable) OR Item."Inventory Value Zero" THEN
      EXIT;
    IF (VarianceAmount = 0) AND (VarianceAmountACY = 0) THEN
      EXIT;
    
    ValueEntryNo := ValueEntryNo + 1;
    
    ValueEntry."Entry No." := ValueEntryNo;
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforePostFlushedConsumpItemJnlLine>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<PostFlushedConsump>
    Code lines:
    ...
          OldTempTrackingSpecification.INSERT;
        UNTIL TempTrackingSpecification.NEXT = 0;
      ReserveProdOrderComp.TransferPOCompToItemJnlLine(
        ProdOrderComp,ItemJnlLine,ROUND(QtyToPost * ProdOrderComp."Qty. per Unit of Measure",0.00001));
    
      OnBeforePostFlushedConsumpItemJnlLine(ItemJnlLine); <=====================
    
      PrepareItem(ItemJnlLine);
      TrackingSpecExists := ItemTrackingMgt.RetrieveItemTracking(ItemJnlLine,TempTrackingSpecification);
      PostItemJnlLine := SetupSplitJnlLine(ItemJnlLine,TrackingSpecExists);
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforePostItemJnlLine>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<Code>
    Code lines:
    OnBeforePostItemJnlLine(ItemJnlLine); <=====================
    
    WITH ItemJnlLine DO BEGIN
      IF EmptyLine AND NOT Correction AND NOT Adjustment THEN
        IF NOT IsValueEntryForDeletedItem THEN
          EXIT;
    
      ItemJnlCheckLine.SetCalledFromInvtPutawayPick(CalledFromInvtPutawayPick);
      ItemJnlCheckLine.SetCalledFromAdjustment(CalledFromAdjustment);
    
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeSetupSplitJnlLine>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<SetupSplitJnlLine>
    Code lines:
    ...
    IF Item."Costing Method" = Item."Costing Method"::Specific THEN BEGIN
      Item.TESTFIELD("Item Tracking Code");
      ItemTrackingCode.TESTFIELD("SN Specific Tracking",TRUE);
    END;
    
    OnBeforeSetupSplitJnlLine(ItemJnlLine2,TrackingSpecExists); <=====================
    
    IF NOT ItemJnlLine2.Correction AND (ItemJnlLine2."Quantity (Base)" <> 0) AND TrackingSpecExists THEN BEGIN
      IF DisableItemTracking THEN BEGIN
        IF NOT TempTrackingSpecification.ISEMPTY THEN
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnCheckPostingCostToGL>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<Code>
    Code lines:
    ...
      InitValueEntryNo;
    
      GetInvtSetup;
      IF NOT CalledFromAdjustment THEN
        PostToGL := InvtSetup."Automatic Cost Posting";
      OnCheckPostingCostToGL(PostToGL); <=====================
    
      IF (SNRequired OR LotRequired) AND ("Quantity (Base)" <> 0) AND
         ("Value Entry Type" = "Value Entry Type"::"Direct Cost") AND
         NOT DisableItemTracking AND NOT Adjustment AND
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnGetValuationDateOnBeforeFindOldValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<GetValuationDate>
    Code lines:
    ...
      OldValueEntry.SETCURRENTKEY("Item Ledger Entry No.","Entry Type");
      OldValueEntry.SETRANGE("Item Ledger Entry No.","Entry No.");
      OldValueEntry.SETRANGE("Entry Type",OldValueEntry."Entry Type"::Revaluation);
      IF NOT OldValueEntry.FINDLAST THEN BEGIN
        OldValueEntry.SETRANGE("Entry Type");
        OnGetValuationDateOnBeforeFindOldValueEntry(OldValueEntry); <=====================
        OldValueEntry.FINDLAST;
      END;
      IF Positive THEN BEGIN
        IF (ValueEntry."Posting Date" < OldValueEntry."Valuation Date") OR
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnPostOutputOnBeforeProdOrderRtngLineModify>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<PostOutput>
    Code lines:
    ...
          IF Finished THEN
            ProdOrderRtngLine."Routing Status" := ProdOrderRtngLine."Routing Status"::Finished
          ELSE
            ProdOrderRtngLine."Routing Status" := ProdOrderRtngLine."Routing Status"::"In Progress";
          LastOperation := (NOT NextOperationExist(ProdOrderRtngLine));
          OnPostOutputOnBeforeProdOrderRtngLineModify(ProdOrderRtngLine,ProdOrderLine); <=====================
          ProdOrderRtngLine.MODIFY;
        END ELSE
          LastOperation := TRUE;
    
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnSetupSplitJnlLineOnBeforeSplitTempLines>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<SetupSplitJnlLine>
    Code lines:
    ...
            ItemJnlLine2."Qty. per Unit of Measure");
        NonDistrAmount := ItemJnlLine2.Amount;
        NonDistrAmountACY := ItemJnlLine2."Amount (ACY)";
        NonDistrDiscountAmount := ItemJnlLine2."Discount Amount";
    
        OnSetupSplitJnlLineOnBeforeSplitTempLines(TempSplitItemJnlLine,TempTrackingSpecification); <=====================
    
        TempTrackingSpecification.FINDSET;
        REPEAT
          IF ItemTrackingCode."Man. Warranty Date Entry Reqd." THEN
    ...
Codeunit<Resource-Find Cost>.PROCEDURE<OnAfterFindResUnitCost>
  Raised in: Codeunit<Resource-Find Cost>.PROCEDURE<FindResUnitCost>
    Code lines:
    ...
      Code := Res."No.";
      "Direct Unit Cost" := Res."Direct Unit Cost";
      "Unit Cost" := Res."Unit Cost";
    END;
    
    OnAfterFindResUnitCost(NearestResCost,Res); <=====================
Codeunit<Resource-Find Price>.PROCEDURE<OnAfterFindResPrice>
  Raised in: Codeunit<Resource-Find Price>.PROCEDURE<FindResPrice>
    Code lines:
    ...
    
      IF ResPrice2.GET(Type::All,'',"Work Type Code",'') THEN
        EXIT(TRUE);
    END;
    
    OnAfterFindResPrice(ResPrice,Res); <=====================
Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnAfterRun>
  Raised in: Codeunit<Gen. Jnl.-Apply>.<OnRun>
    Code lines:
    ...
          ERROR(
            Text005,
            FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));
      END;
    END;
    OnAfterRun(GenJnlLine); <=====================
    
    Rec := GenJnlLine;
Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnBeforeFindCustApply>
  Raised in: Codeunit<Gen. Jnl.-Apply>.<OnRun>
    Code lines:
    ...
                REPEAT
                  PaymentToleranceMgt.DelPmtTolApllnDocNo(GenJnlLine,CustLedgEntry."Document No.");
                  CheckAgainstApplnCurrency(CurrencyCode2,CustLedgEntry."Currency Code",AccType::Customer,TRUE);
                  UpdateCustLedgEntry(CustLedgEntry);
                  IsHandled := FALSE;
                  OnBeforeFindCustApply(GenJnlLine,CustLedgEntry,Amount,IsHandled); <=====================
                  IF NOT IsHandled THEN
                    IF PaymentToleranceMgt.CheckCalcPmtDiscGenJnlCust(Rec,CustLedgEntry,0,FALSE) AND
                       (ABS(CustLedgEntry."Amount to Apply") >=
                        ABS(CustLedgEntry."Remaining Amount" - CustLedgEntry."Remaining Pmt. Disc. Possible"))
    ...
Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnBeforeFindVendApply>
  Raised in: Codeunit<Gen. Jnl.-Apply>.<OnRun>
    Code lines:
    ...
                REPEAT
                  PaymentToleranceMgt.DelPmtTolApllnDocNo(GenJnlLine,VendLedgEntry."Document No.");
                  CheckAgainstApplnCurrency(CurrencyCode2,VendLedgEntry."Currency Code",AccType::Vendor,TRUE);
                  UpdateVendLedgEntry(VendLedgEntry);
                  IsHandled := FALSE;
                  OnBeforeFindVendApply(GenJnlLine,VendLedgEntry,Amount,IsHandled); <=====================
                  IF NOT IsHandled THEN
                    IF PaymentToleranceMgt.CheckCalcPmtDiscGenJnlVend(Rec,VendLedgEntry,0,FALSE) AND
                       (ABS(VendLedgEntry."Amount to Apply") >=
                        ABS(VendLedgEntry."Remaining Amount" - VendLedgEntry."Remaining Pmt. Disc. Possible"))
    ...
Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnBeforeRun>
  Raised in: Codeunit<Gen. Jnl.-Apply>.<OnRun>
    Code lines:
    GenJnlLine.COPY(Rec);
    
    OnBeforeRun(GenJnlLine); <=====================
    
    WITH GenJnlLine DO BEGIN
      GetCurrency;
      IF "Bal. Account Type" IN
         ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::Employee]
      THEN BEGIN
        AccType := "Bal. Account Type";
    ...
Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<OnAfterPostApplyCustLedgEntry>
  Raised in: Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<CustPostApplyCustLedgEntry>
    Code lines:
    ...
    
      EntryNoBeforeApplication := FindLastApplDtldCustLedgEntry;
    
      OnBeforePostApplyCustLedgEntry(GenJnlLine,CustLedgEntry);
      GenJnlPostLine.CustPostApplyCustLedgEntry(GenJnlLine,CustLedgEntry);
      OnAfterPostApplyCustLedgEntry(GenJnlLine,CustLedgEntry); <=====================
    
      EntryNoAfterApplication := FindLastApplDtldCustLedgEntry;
      IF EntryNoAfterApplication = EntryNoBeforeApplication THEN
        ERROR(NoEntriesAppliedErr,GenJnlLine.FIELDCAPTION("Applies-to ID"));
    ...
Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<OnAfterPostUnapplyCustLedgEntry>
  Raised in: Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<PostUnApplyCustomerCommit>
    Code lines:
    ...
      GenJnlLine."System-Created Entry" := TRUE;
      Window.OPEN(UnapplyingMsg);
    
      OnBeforePostUnapplyCustLedgEntry(GenJnlLine,CustLedgEntry,DtldCustLedgEntry2);
      GenJnlPostLine.UnapplyCustLedgEntry(GenJnlLine,DtldCustLedgEntry2);
      OnAfterPostUnapplyCustLedgEntry(GenJnlLine,CustLedgEntry,DtldCustLedgEntry2); <=====================
    
      IF PreviewMode THEN
        GenJnlPostPreview.ThrowError;
    
    ...
Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<OnBeforePostApplyCustLedgEntry>
  Raised in: Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<CustPostApplyCustLedgEntry>
    Code lines:
    ...
      GenJnlLine."Source Code" := SourceCodeSetup."Sales Entry Application";
      GenJnlLine."System-Created Entry" := TRUE;
    
      EntryNoBeforeApplication := FindLastApplDtldCustLedgEntry;
    
      OnBeforePostApplyCustLedgEntry(GenJnlLine,CustLedgEntry); <=====================
      GenJnlPostLine.CustPostApplyCustLedgEntry(GenJnlLine,CustLedgEntry);
      OnAfterPostApplyCustLedgEntry(GenJnlLine,CustLedgEntry);
    
      EntryNoAfterApplication := FindLastApplDtldCustLedgEntry;
    ...
Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<OnBeforePostUnapplyCustLedgEntry>
  Raised in: Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<PostUnApplyCustomerCommit>
    Code lines:
    ...
      GenJnlLine."Source Code" := SourceCodeSetup."Unapplied Sales Entry Appln.";
      GenJnlLine."Source Currency Code" := "Currency Code";
      GenJnlLine."System-Created Entry" := TRUE;
      Window.OPEN(UnapplyingMsg);
    
      OnBeforePostUnapplyCustLedgEntry(GenJnlLine,CustLedgEntry,DtldCustLedgEntry2); <=====================
      GenJnlPostLine.UnapplyCustLedgEntry(GenJnlLine,DtldCustLedgEntry2);
      OnAfterPostUnapplyCustLedgEntry(GenJnlLine,CustLedgEntry,DtldCustLedgEntry2);
    
      IF PreviewMode THEN
    ...
Codeunit<VendEntry-Apply Posted Entries>.PROCEDURE<OnBeforePostApplyVendLedgEntry>
  Raised in: Codeunit<VendEntry-Apply Posted Entries>.PROCEDURE<VendPostApplyVendLedgEntry>
    Code lines:
    ...
      GenJnlLine."Source Code" := SourceCodeSetup."Purchase Entry Application";
      GenJnlLine."System-Created Entry" := TRUE;
    
      EntryNoBeforeApplication := FindLastApplDtldVendLedgEntry;
    
      OnBeforePostApplyVendLedgEntry(GenJnlLine,VendLedgEntry); <=====================
      GenJnlPostLine.VendPostApplyVendLedgEntry(GenJnlLine,VendLedgEntry);
    
      EntryNoAfterApplication := FindLastApplDtldVendLedgEntry;
      IF EntryNoAfterApplication = EntryNoBeforeApplication THEN
    ...
Codeunit<VendEntry-Apply Posted Entries>.PROCEDURE<OnBeforePostUnapplyVendLedgEntry>
  Raised in: Codeunit<VendEntry-Apply Posted Entries>.PROCEDURE<PostUnApplyVendor>
    Code lines:
    ...
      GenJnlLine."Source No." := "Vendor No.";
      GenJnlLine."Source Code" := SourceCodeSetup."Unapplied Purch. Entry Appln.";
      GenJnlLine."Source Currency Code" := "Currency Code";
      GenJnlLine."System-Created Entry" := TRUE;
      Window.OPEN(UnapplyingMsg);
      OnBeforePostUnapplyVendLedgEntry(GenJnlLine,VendLedgEntry,DtldVendLedgEntry2); <=====================
      GenJnlPostLine.UnapplyVendLedgEntry(GenJnlLine,DtldVendLedgEntry2);
    
      IF PreviewMode THEN
        GenJnlPostPreview.ThrowError;
    ...
Codeunit<Document-Print>.PROCEDURE<OnBeforeDoPrintPurchHeader>
  Raised in: Codeunit<Document-Print>.PROCEDURE<PrintPurchHeader>
    Code lines:
    PurchHeader.SETRANGE("No.",PurchHeader."No.");
    CalcPurchDisc(PurchHeader);
    OnBeforeDoPrintPurchHeader(PurchHeader,GetPurchDocTypeUsage(PurchHeader),IsPrinted); <=====================
    IF IsPrinted THEN
      EXIT;
    
    ReportSelections.PrintWithGUIYesNoVendor(
      GetPurchDocTypeUsage(PurchHeader),PurchHeader,TRUE,PurchHeader.FIELDNO("Buy-from Vendor No."));
Codeunit<Document-Print>.PROCEDURE<OnBeforeDoPrintSalesHeader>
  Raised in: Codeunit<Document-Print>.PROCEDURE<DoPrintSalesHeader>
    Code lines:
    SalesHeader.SETRANGE("No.",SalesHeader."No.");
    CalcSalesDisc(SalesHeader);
    OnBeforeDoPrintSalesHeader(SalesHeader,GetSalesDocTypeUsage(SalesHeader),SendAsEmail,IsPrinted); <=====================
    IF IsPrinted THEN
      EXIT;
    
    IF SendAsEmail THEN
      ReportSelections.SendEmailToCust(
        GetSalesDocTypeUsage(SalesHeader),SalesHeader,SalesHeader."No.",SalesHeader.GetDocTypeTxt,TRUE,SalesHeader.GetBillToNo)
    ELSE
Codeunit<Document-Print>.PROCEDURE<OnBeforePrintAsmHeader>
  Raised in: Codeunit<Document-Print>.PROCEDURE<PrintAsmHeader>
    Code lines:
    AsmHeader.SETRANGE("No.",AsmHeader."No.");
    OnBeforePrintAsmHeader(AsmHeader,GetAsmHeaderDocTypeUsage(AsmHeader),IsPrinted); <=====================
    IF IsPrinted THEN
      EXIT;
    
    ReportSelections.Print(GetAsmHeaderDocTypeUsage(AsmHeader),AsmHeader,0);
Codeunit<Document-Print>.PROCEDURE<OnBeforePrintBankAccStmt>
  Raised in: Codeunit<Document-Print>.PROCEDURE<PrintBankAccStmt>
    Code lines:
    BankAccStmt.SETRECFILTER;
    OnBeforePrintBankAccStmt(BankAccStmt,IsPrinted); <=====================
    IF IsPrinted THEN
      EXIT;
    
    ReportSelections.Print(ReportSelections.Usage::"B.Stmt",BankAccStmt,0);
Codeunit<Document-Print>.PROCEDURE<OnBeforePrintCheck>
  Raised in: Codeunit<Document-Print>.PROCEDURE<PrintCheck>
    Code lines:
    GenJnlLine.COPY(NewGenJnlLine);
    GenJnlLine.OnCheckGenJournalLinePrintCheckRestrictions;
    OnBeforePrintCheck(GenJnlLine,IsPrinted); <=====================
    IF IsPrinted THEN
      EXIT;
    
    ReportSelections.Print(ReportSelections.Usage::"B.Check",GenJnlLine,0);
Codeunit<Document-Print>.PROCEDURE<OnBeforePrintProformaSalesInvoice>
  Raised in: Codeunit<Document-Print>.PROCEDURE<PrintProformaSalesInvoice>
    Code lines:
    SalesHeader.SETRECFILTER;
    OnBeforePrintProformaSalesInvoice(SalesHeader,ReportSelections.Usage::"Pro Forma S. Invoice",IsPrinted); <=====================
    IF IsPrinted THEN
      EXIT;
    
    ReportSelections.Print(ReportSelections.Usage::"Pro Forma S. Invoice",SalesHeader,SalesHeader.FIELDNO("Bill-to Customer No."));
Codeunit<Document-Print>.PROCEDURE<OnBeforePrintPurchHeaderArch>
  Raised in: Codeunit<Document-Print>.PROCEDURE<PrintPurchHeaderArch>
    Code lines:
    PurchHeaderArch.SETRECFILTER;
    OnBeforePrintPurchHeaderArch(PurchHeaderArch,GetPurchArchDocTypeUsage(PurchHeaderArch),IsPrinted); <=====================
    IF IsPrinted THEN
      EXIT;
    
    ReportSelection.PrintWithGUIYesNoVendor(
      GetPurchArchDocTypeUsage(PurchHeaderArch),PurchHeaderArch,TRUE,PurchHeaderArch.FIELDNO("Buy-from Vendor No."));
Codeunit<Document-Print>.PROCEDURE<OnBeforePrintSalesHeaderArch>
  Raised in: Codeunit<Document-Print>.PROCEDURE<PrintSalesHeaderArch>
    Code lines:
    SalesHeaderArch.SETRECFILTER;
    OnBeforePrintSalesHeaderArch(SalesHeaderArch,GetSalesArchDocTypeUsage(SalesHeaderArch),IsPrinted); <=====================
    IF IsPrinted THEN
      EXIT;
    
    ReportSelection.Print(GetSalesArchDocTypeUsage(SalesHeaderArch),SalesHeaderArch,SalesHeaderArch.FIELDNO("Bill-to Customer No."));
Codeunit<Document-Print>.PROCEDURE<OnBeforePrintSalesOrder>
  Raised in: Codeunit<Document-Print>.PROCEDURE<PrintSalesOrder>
    Code lines:
    IF SalesHeader."Document Type" <> SalesHeader."Document Type"::Order THEN
      EXIT;
    
    SalesHeader.SETRANGE("No.",SalesHeader."No.");
    CalcSalesDisc(SalesHeader);
    OnBeforePrintSalesOrder(SalesHeader,GetSalesOrderUsage(Usage),IsPrinted); <=====================
    IF IsPrinted THEN
      EXIT;
    
    ReportSelection.PrintWithGUIYesNo(GetSalesOrderUsage(Usage),SalesHeader,GUIALLOWED,SalesHeader.FIELDNO("Bill-to Customer No."));
Codeunit<Document-Print>.PROCEDURE<OnBeforePrintServiceContract>
  Raised in: Codeunit<Document-Print>.PROCEDURE<PrintServiceContract>
    Code lines:
    ServiceContract.SETRANGE("Contract No.",ServiceContract."Contract No.");
    OnBeforePrintServiceContract(ServiceContract,GetServContractTypeUsage(ServiceContract),IsPrinted); <=====================
    IF IsPrinted THEN
      EXIT;
    
    ReportSelection.FilterPrintUsage(GetServContractTypeUsage(ServiceContract));
    IF ReportSelection.ISEMPTY THEN
      ERROR(Text001,ReportSelection.TABLECAPTION,FORMAT(ServiceContract."Contract Type"),ServiceContract."Contract No.");
    
    ReportSelection.Print(
Codeunit<Document-Print>.PROCEDURE<OnBeforePrintServiceHeader>
  Raised in: Codeunit<Document-Print>.PROCEDURE<PrintServiceHeader>
    Code lines:
    ServiceHeader.SETRANGE("No.",ServiceHeader."No.");
    CalcServDisc(ServiceHeader);
    OnBeforePrintServiceHeader(ServiceHeader,GetServHeaderDocTypeUsage(ServiceHeader),IsPrinted); <=====================
    IF IsPrinted THEN
      EXIT;
    
    ReportSelection.FilterPrintUsage(GetServHeaderDocTypeUsage(ServiceHeader));
    IF ReportSelection.ISEMPTY THEN
      ERROR(Text002,ReportSelection.FIELDCAPTION("Report ID"),ServiceHeader.TABLECAPTION,ReportSelection.TABLECAPTION);
    
Codeunit<Document-Print>.PROCEDURE<OnBeforePrintTransferHeader>
  Raised in: Codeunit<Document-Print>.PROCEDURE<PrintTransferHeader>
    Code lines:
    TransHeader.SETRANGE("No.",TransHeader."No.");
    OnBeforePrintTransferHeader(TransHeader,IsPrinted); <=====================
    IF IsPrinted THEN
      EXIT;
    
    ReportSelections.Print(ReportSelections.Usage::Inv1,TransHeader,0);
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnAfterCheckJnlLine>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<CheckLines>
    Code lines:
    ...
             ("Inventory Value Per" = "Inventory Value Per"::" ") AND
             "Partial Revaluation"
          THEN
            CheckRemainingQty;
    
          OnAfterCheckJnlLine(ItemJnlLine,SuppressCommit); <=====================
        END;
    
        IF NEXT = 0 THEN
          FINDFIRST;
    ...
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnAfterCheckLines>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<CheckLines>
    Code lines:
    ...
          FINDFIRST;
      UNTIL "Line No." = StartLineNo;
      NoOfRecords := LineCount;
    END;
    
    OnAfterCheckLines(ItemJnlLine); <=====================
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnAfterItemJnlPostSumLine>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<ItemJnlPostSumLine>
    Code lines:
    ...
    
      IF ItemJnlLine."Update Standard Cost" THEN
        UpdateStdCost;
    END;
    
    OnAfterItemJnlPostSumLine(ItemJnlLine); <=====================
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnAfterPostJnlLines>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<Code>
    Code lines:
    ...
      END;
    
      IF PhysInvtCount THEN
        PhysInvtCountMgt.UpdateItemSKUListPhysInvtCount;
    
      OnAfterPostJnlLines(ItemJnlBatch,ItemJnlLine,ItemRegNo,WhseRegNo); <=====================
    
      Window.CLOSE;
      IF NOT SuppressCommit THEN
        COMMIT;
    ...
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnAfterPostWhseJnlLine>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<PostWhseJnlLine>
    Code lines:
    ...
            IF TempWhseJnlLine2.FINDSET THEN
              REPEAT
                WMSMgmt.CheckWhseJnlLine(TempWhseJnlLine2,1,0,FALSE);
                WhseJnlPostLine.RUN(TempWhseJnlLine2);
              UNTIL TempWhseJnlLine2.NEXT = 0;
            OnAfterPostWhseJnlLine(ItemJnlLine,SuppressCommit); <=====================
          END;
    
      IF "Entry Type" = "Entry Type"::Transfer THEN BEGIN
        GetLocation("New Location Code");
    ...
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<PostWhseJnlLine>
    Code lines:
    ...
            IF TempWhseJnlLine2.FINDSET THEN
              REPEAT
                WMSMgmt.CheckWhseJnlLine(TempWhseJnlLine2,1,0,FALSE);
                WhseJnlPostLine.RUN(TempWhseJnlLine2);
              UNTIL TempWhseJnlLine2.NEXT = 0;
            OnAfterPostWhseJnlLine(ItemJnlLine,SuppressCommit); <=====================
          END;
    
      IF "Entry Type" = "Entry Type"::Transfer THEN BEGIN
        GetLocation("New Location Code");
    ...
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnBeforeCheckLines>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<CheckLines>
    Code lines:
    OnBeforeCheckLines(ItemJnlLine); <=====================
    
    WITH ItemJnlLine DO BEGIN
      LineCount := 0;
      StartLineNo := "Line No.";
      REPEAT
        LineCount := LineCount + 1;
        Window.UPDATE(2,LineCount);
        CheckRecurringLine(ItemJnlLine);
    
    ...
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnBeforeIncrBatchName>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<HandleNonRecurringLine>
    Code lines:
    ...
      ItemJnlLine3.RESET;
      ItemJnlLine3.SETRANGE("Journal Template Name","Journal Template Name");
      ItemJnlLine3.SETRANGE("Journal Batch Name","Journal Batch Name");
      IF NOT ItemJnlLine3.FINDLAST THEN BEGIN
        IncrBatchName := INCSTR("Journal Batch Name") <> '';
        OnBeforeIncrBatchName(ItemJnlLine,IncrBatchName); <=====================
        IF IncrBatchName THEN BEGIN
          ItemJnlBatch.DELETE;
          ItemJnlBatch.Name := INCSTR("Journal Batch Name");
          IF ItemJnlBatch.INSERT THEN;
    ...
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnBeforeRaiseExceedLengthError>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<Code>
    Code lines:
    ...
      SETRANGE("Journal Batch Name","Journal Batch Name");
    
      ItemJnlTemplate.GET("Journal Template Name");
      ItemJnlBatch.GET("Journal Template Name","Journal Batch Name");
      RaiseError := STRLEN(INCSTR(ItemJnlBatch.Name)) > MAXSTRLEN(ItemJnlBatch.Name);
      OnBeforeRaiseExceedLengthError(ItemJnlBatch,RaiseError); <=====================
      IF RaiseError THEN
        ItemJnlBatch.FIELDERROR(Name,STRSUBSTNO(Text000,MAXSTRLEN(ItemJnlBatch.Name)));
    
      IF ItemJnlTemplate.Recurring THEN BEGIN
    ...
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnBeforeUpdateDeleteLines>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<Code>
    Code lines:
    ...
        InvtAdjmt.SetProperties(TRUE,InvtSetup."Automatic Cost Posting");
        InvtAdjmt.MakeMultiLevelAdjmt;
      END;
    
      // Update/delete lines
      OnBeforeUpdateDeleteLines(ItemJnlLine,ItemRegNo); <=====================
      IF "Line No." <> 0 THEN BEGIN
        IF ItemJnlTemplate.Recurring THEN BEGIN
          HandleRecurringLine(ItemJnlLine);
        END ELSE
    ...
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnPostLinesBeforePostWhseJnlLine>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<PostLines>
    Code lines:
    ...
            OriginalQuantityBase := "Quantity (Base)";
            IF NOT ItemJnlPostLine.RunWithCheck(ItemJnlLine) THEN
              ItemJnlPostLine.CheckItemTracking;
            IF "Value Entry Type" <> "Value Entry Type"::Revaluation THEN BEGIN
              ItemJnlPostLine.CollectTrackingSpecification(TempTrackingSpecification);
              OnPostLinesBeforePostWhseJnlLine(ItemJnlLine,SuppressCommit); <=====================
              PostWhseJnlLine(ItemJnlLine,OriginalQuantity,OriginalQuantityBase,TempTrackingSpecification);
            END;
          END;
    
    ...
Codeunit<GenJnlManagement>.PROCEDURE<OnAfterSetName>
  Raised in: Codeunit<GenJnlManagement>.PROCEDURE<SetName>
    Code lines:
    GenJnlLine.FILTERGROUP := 2;
    GenJnlLine.SETRANGE("Journal Batch Name",CurrentJnlBatchName);
    GenJnlLine.FILTERGROUP := 0;
    OnAfterSetName(GenJnlLine,CurrentJnlBatchName); <=====================
    IF GenJnlLine.FIND('-') THEN;
Codeunit<GenJnlManagement>.PROCEDURE<OnBeforeLookupName>
  Raised in: Codeunit<GenJnlManagement>.PROCEDURE<LookupName>
    Code lines:
    ...
    GenJnlBatch."Journal Template Name" := GenJnlLine.GETRANGEMAX("Journal Template Name");
    GenJnlBatch.Name := GenJnlLine.GETRANGEMAX("Journal Batch Name");
    GenJnlBatch.FILTERGROUP(2);
    GenJnlBatch.SETRANGE("Journal Template Name",GenJnlBatch."Journal Template Name");
    GenJnlBatch.FILTERGROUP(0);
    OnBeforeLookupName(GenJnlBatch); <=====================
    IF PAGE.RUNMODAL(0,GenJnlBatch) = ACTION::LookupOK THEN BEGIN
      CurrentJnlBatchName := GenJnlBatch.Name;
      SetName(CurrentJnlBatchName,GenJnlLine);
    END;
Codeunit<GenJnlManagement>.PROCEDURE<OnTemplateSelectionSetFilter>
  Raised in: Codeunit<GenJnlManagement>.PROCEDURE<TemplateSelection>
    Code lines:
    ...
    GenJnlTemplate.RESET;
    GenJnlTemplate.SETRANGE("Page ID",PageID);
    GenJnlTemplate.SETRANGE(Recurring,RecurringJnl);
    IF NOT RecurringJnl THEN
      GenJnlTemplate.SETRANGE(Type,PageTemplate);
    OnTemplateSelectionSetFilter(GenJnlTemplate,PageTemplate); <=====================
    
    CASE GenJnlTemplate.COUNT OF
      0:
        BEGIN
    ...
Codeunit<Gen. Jnl.-Post+Print>.PROCEDURE<OnBeforeGLRegPostingReportPrint>
  Raised in: Codeunit<Gen. Jnl.-Post+Print>.PROCEDURE<Code>
    Code lines:
    ...
          VendLedgEntry.SETRANGE("Entry No.",GLReg."From Entry No.",GLReg."To Entry No.");
          REPORT.RUN(GenJnlTemplate."Vendor Receipt Report ID",FALSE,FALSE,VendLedgEntry);
        END;
        IF GenJnlTemplate."Posting Report ID" <> 0 THEN BEGIN
          GLReg.SETRECFILTER;
          OnBeforeGLRegPostingReportPrint(GenJnlTemplate."Posting Report ID",FALSE,FALSE,GLReg,Handled); <=====================
          IF NOT Handled THEN
            REPORT.RUN(GenJnlTemplate."Posting Report ID",FALSE,FALSE,GLReg);
        END;
      END;
    ...
Codeunit<Gen. Jnl.-Post+Print>.PROCEDURE<OnBeforePostJournalBatch>
  Raised in: Codeunit<Gen. Jnl.-Post+Print>.PROCEDURE<Code>
    Code lines:
    ...
      THEN
        GenJnlTemplate.TESTFIELD("Posting Report ID");
      IF GenJnlTemplate.Recurring AND (GETFILTER("Posting Date") <> '') THEN
        FIELDERROR("Posting Date",Text000);
    
      OnBeforePostJournalBatch(GenJnlLine); <=====================
    
      IF NOT CONFIRM(Text001,FALSE) THEN
        EXIT;
    
    ...
Codeunit<Gen. Jnl.-B.Post+Print>.PROCEDURE<OnBeforeGLRegPostingReportPrint>
  Raised in: Codeunit<Gen. Jnl.-B.Post+Print>.PROCEDURE<Code>
    Code lines:
    ...
              VendLedgEntry.SETRANGE("Entry No.",GLReg."From Entry No.",GLReg."To Entry No.");
              REPORT.RUN(GenJnlTemplate."Vendor Receipt Report ID",FALSE,FALSE,VendLedgEntry);
            END;
            IF GenJnlTemplate."Posting Report ID" <> 0 THEN BEGIN
              GLReg.SETRECFILTER;
              OnBeforeGLRegPostingReportPrint(GenJnlTemplate."Posting Report ID",FALSE,FALSE,GLReg,Handled); <=====================
              IF NOT Handled THEN
                REPORT.RUN(GenJnlTemplate."Posting Report ID",FALSE,FALSE,GLReg);
            END;
          END;
    ...
Codeunit<ItemJnlManagement>.PROCEDURE<OnBeforeLookupName>
  Raised in: Codeunit<ItemJnlManagement>.PROCEDURE<LookupName>
    Code lines:
    ...
    ItemJnlBatch."Journal Template Name" := ItemJnlLine.GETRANGEMAX("Journal Template Name");
    ItemJnlBatch.Name := ItemJnlLine.GETRANGEMAX("Journal Batch Name");
    ItemJnlBatch.FILTERGROUP(2);
    ItemJnlBatch.SETRANGE("Journal Template Name",ItemJnlBatch."Journal Template Name");
    ItemJnlBatch.FILTERGROUP(0);
    OnBeforeLookupName(ItemJnlBatch); <=====================
    IF PAGE.RUNMODAL(0,ItemJnlBatch) = ACTION::LookupOK THEN BEGIN
      CurrentJnlBatchName := ItemJnlBatch.Name;
      SetName(CurrentJnlBatchName,ItemJnlLine);
    END;
Codeunit<ItemJnlManagement>.PROCEDURE<OnTemplateSelectionSetFilter>
  Raised in: Codeunit<ItemJnlManagement>.PROCEDURE<TemplateSelection>
    Code lines:
    ...
    
    ItemJnlTemplate.RESET;
    ItemJnlTemplate.SETRANGE("Page ID",PageID);
    ItemJnlTemplate.SETRANGE(Recurring,RecurringJnl);
    ItemJnlTemplate.SETRANGE(Type,PageTemplate);
    OnTemplateSelectionSetFilter(ItemJnlTemplate,PageTemplate); <=====================
    
    CASE ItemJnlTemplate.COUNT OF
      0:
        BEGIN
    ...
Codeunit<Document-Mailing>.PROCEDURE<OnAfterEmailSentSuccesfully>
  Raised in: Codeunit<Document-Mailing>.PROCEDURE<EmailFileInternal>
    Code lines:
    ...
      IF OfficeMgt.AttachAvailable THEN
        OfficeMgt.AttachDocument(AttachmentFilePath,AttachmentFileName,GetBodyText,Subject)
      ELSE BEGIN
        EmailSentSuccesfully := Send(HideDialog);
        IF EmailSentSuccesfully THEN
          OnAfterEmailSentSuccesfully(TempEmailItem,PostedDocNo,ReportUsage); <=====================
        EXIT(EmailSentSuccesfully);
      END;
    END;
Codeunit<Document-Mailing>.PROCEDURE<OnBeforeSendEmail>
  Raised in: Codeunit<Document-Mailing>.PROCEDURE<EmailFileInternal>
    Code lines:
    ...
      IF HtmlBodyFilePath <> '' THEN BEGIN
        VALIDATE("Plaintext Formatted",FALSE);
        VALIDATE("Body File Path",HtmlBodyFilePath);
      END;
    
      OnBeforeSendEmail(TempEmailItem,IsFromPostedDoc,PostedDocNo,HideDialog,ReportUsage); <=====================
    
      IF OfficeMgt.AttachAvailable THEN
        OfficeMgt.AttachDocument(AttachmentFilePath,AttachmentFileName,GetBodyText,Subject)
      ELSE BEGIN
    ...
Codeunit<Cust-Check Cr. Limit>.PROCEDURE<OnNewCheckRemoveCustomerNotifications>
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<GenJnlLineCheck>
    Code lines:
    IF NOT GUIALLOWED THEN
      EXIT;
    
    IF NOT SalesHeader.GET(GenJnlLine."Document Type",GenJnlLine."Document No.") THEN
      SalesHeader.INIT;
    OnNewCheckRemoveCustomerNotifications(SalesHeader.RECORDID,TRUE); <=====================
    
    IF CustCheckCreditLimit.GenJnlLineShowWarningAndGetCause(GenJnlLine,AdditionalContextId) THEN
      CreateAndSendNotification(SalesHeader.RECORDID,AdditionalContextId,'');
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<SalesHeaderCheck>
    Code lines:
    IF NOT GUIALLOWED THEN
      EXIT;
    
    OnNewCheckRemoveCustomerNotifications(SalesHeader.RECORDID,TRUE); <=====================
    
    IF NOT CustCheckCreditLimit.SalesHeaderShowWarningAndGetCause(SalesHeader,AdditionalContextId) THEN
      SalesHeader.OnCustomerCreditLimitNotExceeded
    ELSE
      IF InstructionMgt.IsEnabled(GetInstructionType(FORMAT(SalesHeader."Document Type"),SalesHeader."No.")) THEN BEGIN
        CreditLimitExceeded := TRUE;
    ...
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<SalesLineCheck>
    Code lines:
    IF NOT GUIALLOWED THEN
      EXIT;
    
    IF NOT SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.") THEN
      SalesHeader.INIT;
    OnNewCheckRemoveCustomerNotifications(SalesHeader.RECORDID,FALSE); <=====================
    
    IF NOT CustCheckCreditLimit.SalesLineShowWarningAndGetCause(SalesLine,AdditionalContextId) THEN
      SalesHeader.OnCustomerCreditLimitNotExceeded
    ELSE
    ...
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<ServiceHeaderCheck>
    Code lines:
    IF NOT GUIALLOWED THEN
      EXIT;
    
    OnNewCheckRemoveCustomerNotifications(ServiceHeader.RECORDID,TRUE); <=====================
    
    IF CustCheckCreditLimit.ServiceHeaderShowWarningAndGetCause(ServiceHeader,AdditionalContextId) THEN
      CreateAndSendNotification(ServiceHeader.RECORDID,AdditionalContextId,'');
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<ServiceLineCheck>
    Code lines:
    IF NOT GUIALLOWED THEN
      EXIT;
    
    IF NOT ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.") THEN
      ServiceHeader.INIT;
    OnNewCheckRemoveCustomerNotifications(ServiceHeader.RECORDID,FALSE); <=====================
    
    IF CustCheckCreditLimit.ServiceLineShowWarningAndGetCause(ServiceLine,AdditionalContextId) THEN
      CreateAndSendNotification(ServiceHeader.RECORDID,AdditionalContextId,'');
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<ServiceContractHeaderCheck>
    Code lines:
    IF NOT GUIALLOWED THEN
      EXIT;
    
    OnNewCheckRemoveCustomerNotifications(ServiceContractHeader.RECORDID,TRUE); <=====================
    
    IF CustCheckCreditLimit.ServiceContractHeaderShowWarningAndGetCause(ServiceContractHeader,AdditionalContextId) THEN
      CreateAndSendNotification(ServiceContractHeader.RECORDID,AdditionalContextId,'');
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<BlanketSalesOrderToOrderCheck>
    Code lines:
    IF NOT GUIALLOWED THEN
      EXIT;
    
    OnNewCheckRemoveCustomerNotifications(SalesOrderHeader.RECORDID,TRUE); <=====================
    
    IF CustCheckCreditLimit.SalesHeaderShowWarningAndGetCause(SalesOrderHeader,AdditionalContextId) THEN
      CreateAndSendNotification(SalesOrderHeader.RECORDID,AdditionalContextId,'');
  Raised in: Codeunit<ServContractManagement>.PROCEDURE<ChangeCustNoOnServContract>
    Code lines:
    ...
      IF "Customer No." <> NewCustomertNo THEN BEGIN
        IF ServMgtSetup."Register Contract Changes" THEN
          ContractChangeLog.LogContractChange(
            "Contract No.",0,FIELDCAPTION("Customer No."),0,"Customer No.",NewCustomertNo,'',0);
        "Customer No." := NewCustomertNo;
        CustCheckCrLimit.OnNewCheckRemoveCustomerNotifications(RECORDID,TRUE); <=====================
    
        Cust.GET(NewCustomertNo);
        SetHideValidationDialog(TRUE);
        IF Cust."Bill-to Customer No." <> '' THEN
    ...
Codeunit<Sales-Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<Sales-Printed>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<Sales Shpt.-Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<Sales Shpt.-Printed>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<Sales Inv.-Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<Sales Inv.-Printed>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<Sales Cr. Memo-Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<Sales Cr. Memo-Printed>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<Purch.Header-Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<Purch.Header-Printed>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<Purch.Rcpt.-Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<Purch.Rcpt.-Printed>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<Purch. Inv.-Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<Purch. Inv.-Printed>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<PurchCrMemo-Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<PurchCrMemo-Printed>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<Purch.HeaderArch-Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<Purch.HeaderArch-Printed>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<SalesCount-PrintedArch>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<SalesCount-PrintedArch>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<ReqJnlManagement>.PROCEDURE<OnAfterSetUpNewLine>
  Raised in: Codeunit<ReqJnlManagement>.PROCEDURE<SetUpNewLine>
    Code lines:
    ReqLine.Type := LastReqLine.Type;
    ReqLine."Recurring Method" := LastReqLine."Recurring Method";
    ReqLine."Order Date" := LastReqLine."Order Date";
    
    OnAfterSetUpNewLine(ReqLine,LastReqLine); <=====================
Codeunit<ReqJnlManagement>.PROCEDURE<OnBeforeLookupName>
  Raised in: Codeunit<ReqJnlManagement>.PROCEDURE<LookupName>
    Code lines:
    ...
    ReqWkshName."Worksheet Template Name" := ReqLine.GETRANGEMAX("Worksheet Template Name");
    ReqWkshName.Name := ReqLine.GETRANGEMAX("Journal Batch Name");
    ReqWkshName.FILTERGROUP(2);
    ReqWkshName.SETRANGE("Worksheet Template Name",ReqWkshName."Worksheet Template Name");
    ReqWkshName.FILTERGROUP(0);
    OnBeforeLookupName(ReqWkshName); <=====================
    IF PAGE.RUNMODAL(0,ReqWkshName) = ACTION::LookupOK THEN BEGIN
      CurrentJnlBatchName := ReqWkshName.Name;
      SetName(CurrentJnlBatchName,ReqLine);
    END;
Codeunit<ReqJnlManagement>.PROCEDURE<OnBeforeOpenJnl>
  Raised in: Codeunit<ReqJnlManagement>.PROCEDURE<OpenJnl>
    Code lines:
    OnBeforeOpenJnl(CurrentJnlBatchName,ReqLine); <=====================
    
    CheckTemplateName(ReqLine.GETRANGEMAX("Worksheet Template Name"),CurrentJnlBatchName);
    ReqLine.FILTERGROUP := 2;
    ReqLine.SETRANGE("Journal Batch Name",CurrentJnlBatchName);
    ReqLine.FILTERGROUP := 0;
Codeunit<ReqJnlManagement>.PROCEDURE<OnTemplateSelectionSetFilter>
  Raised in: Codeunit<ReqJnlManagement>.PROCEDURE<TemplateSelection>
    Code lines:
    ...
    
    ReqWkshTmpl.RESET;
    ReqWkshTmpl.SETRANGE("Page ID",PageID);
    ReqWkshTmpl.SETRANGE(Recurring,RecurringJnl);
    ReqWkshTmpl.SETRANGE(Type,Type);
    OnTemplateSelectionSetFilter(ReqWkshTmpl,Type); <=====================
    
    CASE ReqWkshTmpl.COUNT OF
      0:
        BEGIN
    ...
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterCarryOutReqLineAction>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<CarryOutReqLineAction>
    Code lines:
    ...
                InsertPurchOrderLine(ReqLine,PurchOrderHeader);
              END;
          END;
      END;
    
    OnAfterCarryOutReqLineAction(ReqLine,PurchOrderHeader,SuppressCommit,OrderCounter); <=====================
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterCheckReqWkshLine>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<CheckReqWkshLine>
    Code lines:
    ...
                SalesLine."Document No.",
                SalesLine."Line No."));
        END;
    END;
    
    OnAfterCheckReqWkshLine(ReqLine2,SuppressCommit); <=====================
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterFinalizeOrderHeader>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<FinalizeOrderHeader>
    Code lines:
    ...
            ReqLine2.DELETE(TRUE);
          END;
        UNTIL ReqLine2.NEXT = 0;
      END;
    END;
    OnAfterFinalizeOrderHeader(PurchOrderHeader,ReqLine); <=====================
    IF NOT SuppressCommit THEN
      COMMIT;
    
    CarryOutAction.SetPrintOrder(PrintPurchOrders);
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterInsertPurchOrderHeader>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<InsertHeader>
    Code lines:
    ...
          PurchOrderHeader."Ship-to Country/Region Code" := SalesHeader."Ship-to Country/Region Code";
        END;
      IF SpecialOrder THEN
        IF Vendor.GET(PurchOrderHeader."Buy-from Vendor No.") THEN
          PurchOrderHeader."Shipment Method Code" := Vendor."Shipment Method Code";
      OnAfterInsertPurchOrderHeader(ReqLine2,PurchOrderHeader,SuppressCommit); <=====================
      PurchOrderHeader.MODIFY;
      PurchOrderHeader.MARK(TRUE);
      TempDocumentEntry.INIT;
      TempDocumentEntry."Table ID" := DATABASE::"Purchase Header";
    ...
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterInsertPurchOrderLine>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<InsertPurchOrderLine>
    Code lines:
    ...
        IF PurchOrderLine2.FINDLAST THEN
          NextLineNo := PurchOrderLine2."Line No.";
      END;
    END;
    
    OnAfterInsertPurchOrderLine(PurchOrderLine,NextLineNo); <=====================
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterPurchOrderLineInsert>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<InsertPurchOrderLine>
    Code lines:
    ...
        DimMgt.GetCombinedDimensionSetID(
          DimensionSetIDArr,PurchOrderLine."Shortcut Dimension 1 Code",PurchOrderLine."Shortcut Dimension 2 Code");
    
      OnBeforePurchOrderLineInsert(PurchOrderHeader,PurchOrderLine,ReqLine2,SuppressCommit);
      PurchOrderLine.INSERT;
      OnAfterPurchOrderLineInsert(PurchOrderLine,ReqLine2); <=====================
    
      IF Reserve THEN
        ReserveBindingOrderToPurch(PurchOrderLine,ReqLine2);
    
    ...
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterReserveBindingOrderToPurch>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<ReserveBindingOrderToPurch>
    Code lines:
    ...
          END;
        END;
    END;
    PurchLine.MODIFY;
    
    OnAfterReserveBindingOrderToPurch(PurchLine,ReqLine,ReservQty,ReservQtyBase,SuppressCommit); <=====================
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterSet>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<Set>
    Code lines:
    ...
    PrintPurchOrders := NewPrintPurchOrder;
    OrderDateReq := PurchOrderHeader."Order Date";
    PostingDateReq := PurchOrderHeader."Posting Date";
    ReceiveDateReq := PurchOrderHeader."Expected Receipt Date";
    ReferenceReq := PurchOrderHeader."Your Reference";
    OnAfterSet(NewPurchOrderHeader,SuppressCommit); <=====================
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnBeforeCarryOutBatchActionCode>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<CarryOutBatchAction>
    Code lines:
    ReqLine.COPY(ReqLine2);
    ReqLine.SETRANGE("Accept Action Message",TRUE);
    OnBeforeCarryOutBatchActionCode(ReqLine); <=====================
    Code(ReqLine);
    ReqLine2 := ReqLine;
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnBeforeCarryOutReqLineAction>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<CarryOutReqLineAction>
    Code lines:
    OnBeforeCarryOutReqLineAction(ReqLine,Failed); <=====================
    IF Failed THEN BEGIN
      SetFailedReqLine(ReqLine);
      EXIT;
    END;
    
    WITH ReqLine DO
      CASE "Replenishment System" OF
        "Replenishment System"::Transfer:
          CASE "Action Message" OF
    ...
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnBeforeCode>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<Code>
    Code lines:
    OnBeforeCode(ReqLine); <=====================
    
    InitShipReceiveDetails;
    WITH ReqLine DO BEGIN
      CLEAR(PurchOrderHeader);
    
      SETRANGE("Worksheet Template Name","Worksheet Template Name");
      SETRANGE("Journal Batch Name","Journal Batch Name");
      IF NOT PlanningResiliency THEN
        LOCKTABLE;
    ...
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnBeforePurchOrderLineInsert>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<InsertPurchOrderLine>
    Code lines:
    ...
      DimensionSetIDArr[2] := "Dimension Set ID";
      PurchOrderLine."Dimension Set ID" :=
        DimMgt.GetCombinedDimensionSetID(
          DimensionSetIDArr,PurchOrderLine."Shortcut Dimension 1 Code",PurchOrderLine."Shortcut Dimension 2 Code");
    
      OnBeforePurchOrderLineInsert(PurchOrderHeader,PurchOrderLine,ReqLine2,SuppressCommit); <=====================
      PurchOrderLine.INSERT;
      OnAfterPurchOrderLineInsert(PurchOrderLine,ReqLine2);
    
      IF Reserve THEN
    ...
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnBeforePurchOrderLineValidateNo>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<InitPurchOrderLine>
    Code lines:
    ...
      PurchOrderLine."Buy-from Vendor No." := "Vendor No.";
      PurchOrderLine."Document No." := PurchOrderHeader."No.";
      NextLineNo := NextLineNo + 10000;
      PurchOrderLine."Line No." := NextLineNo;
      PurchOrderLine.VALIDATE(Type,Type);
      OnBeforePurchOrderLineValidateNo(PurchOrderLine,RequisitionLine); <=====================
      PurchOrderLine.VALIDATE("No.","No.");
      PurchOrderLine."Variant Code" := "Variant Code";
      PurchOrderLine.VALIDATE("Location Code","Location Code");
      PurchOrderLine.VALIDATE("Unit of Measure Code","Unit of Measure Code");
    ...
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnCheckFurtherReplenishmentSystems>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<CheckReqWkshLine>
    Code lines:
    ...
              TESTFIELD("Location Code");
              IF "Planning Line Origin" = "Planning Line Origin"::"Order Planning" THEN
                TESTFIELD("Supply From");
              TESTFIELD("Transfer-from Code");
            END ELSE
              OnCheckFurtherReplenishmentSystems(ReqLine2); <=====================
      END;
    
      IF NOT DimMgt.CheckDimIDComb("Dimension Set ID") THEN
        ERROR(
    ...
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnCheckNewNameNeccessary>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<Code>
    Code lines:
    ...
          ReqLine3.SETRANGE("Journal Batch Name","Journal Batch Name");
          IF NOT ReqLine3.FINDLAST THEN
            IF INCSTR("Journal Batch Name") <> '' THEN BEGIN
              ReqWkshName.GET("Worksheet Template Name","Journal Batch Name");
              NewReqWkshName := TRUE;
              OnCheckNewNameNeccessary(ReqWkshName,NewReqWkshName); <=====================
              IF NewReqWkshName THEN BEGIN
                ReqWkshName.DELETE;
                ReqWkshName.Name := INCSTR("Journal Batch Name");
                IF ReqWkshName.INSERT THEN;
    ...
Codeunit<VAT Entry - Edit>.PROCEDURE<OnBeforeVATEntryModify>
  Raised in: Codeunit<VAT Entry - Edit>.<OnRun>
    Code lines:
    ...
    VATEntry."Bill-to/Pay-to No." := "Bill-to/Pay-to No.";
    VATEntry."Ship-to/Order Address Code" := "Ship-to/Order Address Code";
    VATEntry."EU 3-Party Trade" := "EU 3-Party Trade";
    VATEntry."Country/Region Code" := "Country/Region Code";
    VATEntry."VAT Registration No." := "VAT Registration No.";
    OnBeforeVATEntryModify(VATEntry,Rec); <=====================
    VATEntry.TESTFIELD("Entry No.","Entry No.");
    VATEntry.MODIFY;
    Rec := VATEntry;
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnAfterCalcItemPlanningFields>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<CalcItemPlanningFields>
    Code lines:
    ...
        CALCFIELDS(
          "Trans. Ord. Shipment (Qty.)",
          "Qty. in Transit",
          "Trans. Ord. Receipt (Qty.)");
    
      OnAfterCalcItemPlanningFields(Item); <=====================
    END;
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnAfterCalculateNeed>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<CalculateNeed>
    Code lines:
    ...
        "Qty. on Sales Return";
      PlannedOrderReleases :=
        "Planned Order Release (Qty.)" +
        "Purch. Req. Release (Qty.)";
    END;
    OnAfterCalculateNeed(Item,GrossRequirement,PlannedOrderReceipt,ScheduledReceipt,PlannedOrderReleases); <=====================
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnAfterCalculateProjAvailableBalance>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<CalcAvailQuantities>
    Code lines:
    ...
      ProjAvailableBalance :=
        CalcProjAvailableBalance2(Item.Inventory,GrossRequirement,PlannedOrderRcpt,ScheduledRcpt)
    ELSE
      ProjAvailableBalance := CalcProjAvailableBalance(Item);
    
    OnAfterCalculateProjAvailableBalance(Item,ProjAvailableBalance); <=====================
    
    ExpectedInventory := AvailableMgt.ExpectedQtyOnHand(Item,TRUE,0,QtyAvailable,DMY2DATE(31,12,9999));
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromAsmHeader>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailFromAsmHeader>
    Code lines:
    ...
      TESTFIELD("Item No.");
      Item.RESET;
      Item.GET("Item No.");
      FilterItem(Item,"Location Code","Variant Code","Due Date");
    
      OnBeforeShowItemAvailFromAsmHeader(Item,AsmHeader); <=====================
      CASE AvailabilityType OF
        AvailabilityType::Date:
          IF ShowItemAvailByDate(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate) THEN
            VALIDATE("Due Date",NewDate);
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromAsmLine>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailFromAsmLine>
    Code lines:
    ...
      TESTFIELD("No.");
      Item.RESET;
      Item.GET("No.");
      FilterItem(Item,"Location Code","Variant Code","Due Date");
    
      OnBeforeShowItemAvailFromAsmLine(Item,AsmLine); <=====================
      CASE AvailabilityType OF
        AvailabilityType::Date:
          IF ShowItemAvailByDate(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate) THEN
            VALIDATE("Due Date",NewDate);
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromItem>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailFromItem>
    Code lines:
    WITH Item DO BEGIN
      TESTFIELD("No.");
    
      OnBeforeShowItemAvailFromItem(Item); <=====================
      CASE AvailabilityType OF
        AvailabilityType::Date:
          ShowItemAvailByDate(Item,'',NewDate,NewDate);
        AvailabilityType::Variant:
          ShowItemAvailVariant(Item,'',NewVariantCode,NewVariantCode);
        AvailabilityType::Location:
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromItemJnlLine>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailFromItemJnlLine>
    Code lines:
    ...
      TESTFIELD("Item No.");
      Item.RESET;
      Item.GET("Item No.");
      FilterItem(Item,"Location Code","Variant Code","Posting Date");
    
      OnBeforeShowItemAvailFromItemJnlLine(Item,ItemJnlLine); <=====================
      CASE AvailabilityType OF
        AvailabilityType::Date:
          IF ShowItemAvailByDate(Item,FIELDCAPTION("Posting Date"),"Posting Date",NewDate) THEN
            VALIDATE("Posting Date",NewDate);
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromPlanningComp>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailFromPlanningComp>
    Code lines:
    ...
      TESTFIELD("Item No.");
      Item.RESET;
      Item.GET("Item No.");
      FilterItem(Item,"Location Code","Variant Code","Due Date");
    
      OnBeforeShowItemAvailFromPlanningComp(Item,PlanningComp); <=====================
      CASE AvailabilityType OF
        AvailabilityType::Date:
          IF ShowItemAvailByDate(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate) THEN
            VALIDATE("Due Date",NewDate);
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromProdOrderComp>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailFromProdOrderComp>
    Code lines:
    ...
      TESTFIELD("Item No.");
      Item.RESET;
      Item.GET("Item No.");
      FilterItem(Item,"Location Code","Variant Code","Due Date");
    
      OnBeforeShowItemAvailFromProdOrderComp(Item,ProdOrderComp); <=====================
      CASE AvailabilityType OF
        AvailabilityType::Date:
          IF ShowItemAvailByDate(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate) THEN
            VALIDATE("Due Date",NewDate);
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromProdOrderLine>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailFromProdOrderLine>
    Code lines:
    ...
      TESTFIELD("Item No.");
      Item.RESET;
      Item.GET("Item No.");
      FilterItem(Item,"Location Code","Variant Code","Due Date");
    
      OnBeforeShowItemAvailFromProdOrderLine(Item,ProdOrderLine); <=====================
      CASE AvailabilityType OF
        AvailabilityType::Date:
          IF ShowItemAvailByDate(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate) THEN
            VALIDATE("Due Date",NewDate);
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromPurchLine>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailFromPurchLine>
    Code lines:
    ...
      TESTFIELD("No.");
      Item.RESET;
      Item.GET("No.");
      FilterItem(Item,"Location Code","Variant Code","Expected Receipt Date");
    
      OnBeforeShowItemAvailFromPurchLine(Item,PurchLine); <=====================
      CASE AvailabilityType OF
        AvailabilityType::Date:
          IF ShowItemAvailByDate(Item,FIELDCAPTION("Expected Receipt Date"),"Expected Receipt Date",NewDate) THEN
            VALIDATE("Expected Receipt Date",NewDate);
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromReqLine>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailFromReqLine>
    Code lines:
    ...
      TESTFIELD("No.");
      Item.RESET;
      Item.GET("No.");
      FilterItem(Item,"Location Code","Variant Code","Due Date");
    
      OnBeforeShowItemAvailFromReqLine(Item,ReqLine); <=====================
      CASE AvailabilityType OF
        AvailabilityType::Date:
          IF ShowItemAvailByDate(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate) THEN
            VALIDATE("Due Date",NewDate);
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromSalesLine>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailFromSalesLine>
    Code lines:
    ...
      TESTFIELD("No.");
      Item.RESET;
      Item.GET("No.");
      FilterItem(Item,"Location Code","Variant Code","Shipment Date");
    
      OnBeforeShowItemAvailFromSalesLine(Item,SalesLine); <=====================
      CASE AvailabilityType OF
        AvailabilityType::Date:
          IF ShowItemAvailByDate(Item,FIELDCAPTION("Shipment Date"),"Shipment Date",NewDate) THEN
            VALIDATE("Shipment Date",NewDate);
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromServLine>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailFromServLine>
    Code lines:
    ...
      TESTFIELD("No.");
      Item.RESET;
      Item.GET("No.");
      FilterItem(Item,"Location Code","Variant Code",ServHeader."Response Date");
    
      OnBeforeShowItemAvailFromServLine(Item,ServLine); <=====================
      CASE AvailabilityType OF
        AvailabilityType::Date:
          ShowItemAvailByDate(Item,ServHeader.FIELDCAPTION("Response Date"),ServHeader."Response Date",NewDate);
        AvailabilityType::Variant:
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromTransLine>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailFromTransLine>
    Code lines:
    ...
      TESTFIELD("Item No.");
      Item.RESET;
      Item.GET("Item No.");
      FilterItem(Item,"Transfer-from Code","Variant Code","Shipment Date");
    
      OnBeforeShowItemAvailFromTransLine(Item,TransLine); <=====================
      CASE AvailabilityType OF
        AvailabilityType::Date:
          IF ShowItemAvailByDate(Item,FIELDCAPTION("Shipment Date"),"Shipment Date",NewDate) THEN
            VALIDATE("Shipment Date",NewDate);
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromWhseActivLine>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailFromWhseActivLine>
    Code lines:
    ...
      TESTFIELD("Item No.");
      Item.RESET;
      Item.GET("Item No.");
      FilterItem(Item,"Location Code","Variant Code","Due Date");
    
      OnBeforeShowItemAvailFromWhseActivLine(Item,WhseActivLine); <=====================
      CASE AvailabilityType OF
        AvailabilityType::Date:
          ShowItemAvailByDate(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate);
        AvailabilityType::Variant:
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromWhseRcptLine>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailFromWhseRcptLine>
    Code lines:
    ...
      TESTFIELD("Item No.");
      Item.RESET;
      Item.GET("Item No.");
      FilterItem(Item,"Location Code","Variant Code","Due Date");
    
      OnBeforeShowItemAvailFromWhseRcptLine(Item,WhseRcptLine); <=====================
      CASE AvailabilityType OF
        AvailabilityType::Date:
          ShowItemAvailByDate(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate);
        AvailabilityType::Variant:
    ...
Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveBankAccEntries>
  Raised in: Codeunit<MoveEntries>.PROCEDURE<MoveBankAccEntries>
    Code lines:
    ...
    BankAccLedgEntry.MODIFYALL("Bank Account No.",'');
    CheckLedgEntry.SETCURRENTKEY("Bank Account No.");
    CheckLedgEntry.SETRANGE("Bank Account No.",BankAcc."No.");
    CheckLedgEntry.MODIFYALL("Bank Account No.",'');
    
    OnAfterMoveBankAccEntries(BankAcc,BankAccLedgEntry,CheckLedgEntry); <=====================
Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveCashFlowEntries>
  Raised in: Codeunit<MoveEntries>.PROCEDURE<MoveCashFlowEntries>
    Code lines:
    ...
    CFForecastEntry.RESET;
    CFForecastEntry.SETCURRENTKEY("Cash Flow Forecast No.");
    CFForecastEntry.SETRANGE("Cash Flow Account No.",CashFlowAccount."No.");
    CFForecastEntry.MODIFYALL("Cash Flow Account No.",'');
    
    OnAfterMoveCashFlowEntries(CashFlowAccount); <=====================
Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveCustEntries>
  Raised in: Codeunit<MoveEntries>.PROCEDURE<MoveCustEntries>
    Code lines:
    ...
    
    WarrantyLedgEntry.SETRANGE("Customer No.");
    WarrantyLedgEntry.SETRANGE("Bill-to Customer No.",Cust."No.");
    WarrantyLedgEntry.MODIFYALL("Bill-to Customer No.",'');
    
    OnAfterMoveCustEntries(Cust,CustLedgEntry,ReminderEntry,ServLedgEntry,WarrantyLedgEntry); <=====================
Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveDocRelatedEntries>
  Raised in: Codeunit<MoveEntries>.PROCEDURE<MoveDocRelatedEntries>
    Code lines:
    ...
    ValueEntry2.SETRANGE("Document No.",DocNo);
    ValueEntry2.SETRANGE("Document Type",CostCalcMgt.GetDocType(TableNo));
    ValueEntry2.SETFILTER("Document Line No.",'<>0');
    ValueEntry2.MODIFYALL("Document Line No.",0);
    
    OnAfterMoveDocRelatedEntries(TableNo,DocNo); <=====================
Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveGLEntries>
  Raised in: Codeunit<MoveEntries>.PROCEDURE<MoveGLEntries>
    Code lines:
    ...
    GLEntry.RESET;
    GLEntry.SETCURRENTKEY("G/L Account No.");
    GLEntry.SETRANGE("G/L Account No.",GLAcc."No.");
    GLEntry.MODIFYALL("G/L Account No.",'');
    
    OnAfterMoveGLEntries(GLAcc,GLEntry); <=====================
Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveItemEntries>
  Raised in: Codeunit<MoveEntries>.PROCEDURE<MoveItemEntries>
    Code lines:
    ...
    WarrantyLedgEntry.SETRANGE("Item No. (Serviced)");
    WarrantyLedgEntry.SETRANGE(Type,WarrantyLedgEntry.Type::Item);
    WarrantyLedgEntry.SETRANGE("No.",Item."No.");
    WarrantyLedgEntry.MODIFYALL("No.",'');
    
    OnAfterMoveItemEntries(Item,ItemLedgEntry,ValueEntry,ServLedgEntry,WarrantyLedgEntry); <=====================
Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveJobEntries>
  Raised in: Codeunit<MoveEntries>.PROCEDURE<MoveJobEntries>
    Code lines:
    ...
        Job.TABLECAPTION,Job."No.");
    
    ServLedgEntry.SETRANGE(Open);
    ServLedgEntry.MODIFYALL("Job No.",'');
    
    OnAfterMoveJobEntries(Job,JobLedgEntry,TimeSheetLine,ServLedgEntry); <=====================
Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveResEntries>
  Raised in: Codeunit<MoveEntries>.PROCEDURE<MoveResEntries>
    Code lines:
    ...
    WarrantyLedgEntry.LOCKTABLE;
    WarrantyLedgEntry.SETRANGE(Type,WarrantyLedgEntry.Type::Resource);
    WarrantyLedgEntry.SETRANGE("No.",Res."No.");
    WarrantyLedgEntry.MODIFYALL("No.",'');
    
    OnAfterMoveResEntries(Res,ResLedgEntry,ServLedgEntry,WarrantyLedgEntry); <=====================
Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveServContractLedgerEntries>
  Raised in: Codeunit<MoveEntries>.PROCEDURE<MoveServContractLedgerEntries>
    Code lines:
    ...
    
    WarrantyLedgEntry.LOCKTABLE;
    WarrantyLedgEntry.SETRANGE("Service Contract No.",ServiceContractHeader."Contract No.");
    WarrantyLedgEntry.MODIFYALL("Service Contract No.",'');
    
    OnAfterMoveServContractLedgerEntries(ServiceContractHeader); <=====================
Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveServiceCostLedgerEntries>
  Raised in: Codeunit<MoveEntries>.PROCEDURE<MoveServiceCostLedgerEntries>
    Code lines:
    ...
    WarrantyLedgEntry.LOCKTABLE;
    WarrantyLedgEntry.SETRANGE(Type,WarrantyLedgEntry.Type::"Service Cost");
    WarrantyLedgEntry.SETRANGE("No.",ServiceCost.Code);
    WarrantyLedgEntry.MODIFYALL("No.",'');
    
    OnAfterMoveServiceCostLedgerEntries(ServiceCost); <=====================
Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveServiceItemLedgerEntries>
  Raised in: Codeunit<MoveEntries>.PROCEDURE<MoveServiceItemLedgerEntries>
    Code lines:
    ...
    
    WarrantyLedgEntry.LOCKTABLE;
    WarrantyLedgEntry.SETRANGE("Service Item No. (Serviced)",ServiceItem."No.");
    WarrantyLedgEntry.MODIFYALL("Service Item No. (Serviced)",'');
    
    OnAfterMoveServiceItemLedgerEntries(ServiceItem); <=====================
Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveVendorEntries>
  Raised in: Codeunit<MoveEntries>.PROCEDURE<MoveVendorEntries>
    Code lines:
    ...
    
    WarrantyLedgEntry.LOCKTABLE;
    WarrantyLedgEntry.SETRANGE("Vendor No.",Vend."No.");
    WarrantyLedgEntry.MODIFYALL("Vendor No.",'');
    
    OnAfterMoveVendorEntries(Vend,VendLedgEntry,WarrantyLedgEntry); <=====================
Codeunit<PostSales-Delete>.PROCEDURE<OnAfterDeleteHeader>
  Raised in: Codeunit<PostSales-Delete>.PROCEDURE<DeleteHeader>
    Code lines:
    ...
        SalesCrMemoLine.Description := SourceCode.Description;
        SalesCrMemoLine.INSERT;
      END;
    END;
    
    OnAfterDeleteHeader( <=====================
      SalesHeader,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,SalesInvHeaderPrePmt,SalesCrMemoHeaderPrePmt);
Codeunit<PostSales-Delete>.PROCEDURE<OnAfterInitDeleteHeader>
  Raised in: Codeunit<PostSales-Delete>.PROCEDURE<InitDeleteHeader>
    Code lines:
    ...
        SalesCrMemoHeaderPrePmt."Source Code" := SourceCode;
        SalesCrMemoHeaderPrePmt."Prepayment Credit Memo" := TRUE;
      END;
    END;
    
    OnAfterInitDeleteHeader( <=====================
      SalesHeader,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,SalesInvHeaderPrePmt,SalesCrMemoHeaderPrePmt);
Codeunit<PostSales-Delete>.PROCEDURE<OnBeforeInitDeleteHeader>
  Raised in: Codeunit<PostSales-Delete>.PROCEDURE<InitDeleteHeader>
    Code lines:
    OnBeforeInitDeleteHeader( <=====================
      SalesHeader,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,SalesInvHeaderPrePmt,SalesCrMemoHeaderPrePmt,
      SourceCode);
    
    WITH SalesHeader DO BEGIN
      CLEAR(SalesShptHeader);
      CLEAR(SalesInvHeader);
      CLEAR(SalesCrMemoHeader);
      CLEAR(ReturnRcptHeader);
      SalesSetup.GET;
    ...
Codeunit<PostPurch-Delete>.PROCEDURE<OnAfterDeleteHeader>
  Raised in: Codeunit<PostPurch-Delete>.PROCEDURE<DeleteHeader>
    Code lines:
    ...
        PurchCrMemoLine.Description := SourceCode.Description;
        PurchCrMemoLine.INSERT;
      END;
    END;
    
    OnAfterDeleteHeader( <=====================
      PurchHeader,PurchRcptHeader,PurchInvHeader,PurchCrMemoHdr,ReturnShptHeader,PurchInvHeaderPrepmt,PurchCrMemoHdrPrepmt);
Codeunit<PostPurch-Delete>.PROCEDURE<OnBeforeDeletePurchCrMemoLines>
  Raised in: Codeunit<PostPurch-Delete>.PROCEDURE<DeletePurchCrMemoLines>
    Code lines:
    PurchCrMemoLine.SETRANGE("Document No.",PurchCrMemoHeader."No.");
    IF PurchCrMemoLine.FIND('-') THEN
      REPEAT
        OnBeforeDeletePurchCrMemoLines(PurchCrMemoLine); <=====================
        PurchCrMemoLine.DELETE;
      UNTIL PurchCrMemoLine.NEXT = 0;
    ItemTrackingMgt.DeleteItemEntryRelation(
      DATABASE::"Purch. Cr. Memo Line",0,PurchCrMemoHeader."No.",'',0,0,TRUE);
    
    MoveEntries.MoveDocRelatedEntries(DATABASE::"Purch. Cr. Memo Hdr.",PurchCrMemoHeader."No.");
Codeunit<PostPurch-Delete>.PROCEDURE<OnBeforeDeletePurchInvLines>
  Raised in: Codeunit<PostPurch-Delete>.PROCEDURE<DeletePurchInvLines>
    Code lines:
    PurchInvLine.SETRANGE("Document No.",PurchInvHeader."No.");
    IF PurchInvLine.FIND('-') THEN
      REPEAT
        OnBeforeDeletePurchInvLines(PurchInvLine); <=====================
        PurchInvLine.DELETE;
        ItemTrackingMgt.DeleteValueEntryRelation(PurchInvLine.RowID1);
      UNTIL PurchInvLine.NEXT = 0;
    
    MoveEntries.MoveDocRelatedEntries(DATABASE::"Purch. Inv. Header",PurchInvHeader."No.");
Codeunit<PostPurch-Delete>.PROCEDURE<OnBeforeDeletePurchRcptLines>
  Raised in: Codeunit<PostPurch-Delete>.PROCEDURE<DeletePurchRcptLines>
    Code lines:
    PurchRcptLine.SETRANGE("Document No.",PurchRcptHeader."No.");
    IF PurchRcptLine.FIND('-') THEN
      REPEAT
        OnBeforeDeletePurchRcptLines(PurchRcptLine); <=====================
        PurchRcptLine.TESTFIELD("Quantity Invoiced",PurchRcptLine.Quantity);
        PurchRcptLine.DELETE;
      UNTIL PurchRcptLine.NEXT = 0;
    ItemTrackingMgt.DeleteItemEntryRelation(
      DATABASE::"Purch. Rcpt. Line",0,PurchRcptHeader."No.",'',0,0,TRUE);
    
Codeunit<PostPurch-Delete>.PROCEDURE<OnBeforeDeletePurchShptLines>
  Raised in: Codeunit<PostPurch-Delete>.PROCEDURE<DeletePurchShptLines>
    Code lines:
    ReturnShipmentLine.SETRANGE("Document No.",ReturnShptHeader."No.");
    IF ReturnShipmentLine.FIND('-') THEN
      REPEAT
        OnBeforeDeletePurchShptLines(ReturnShipmentLine); <=====================
        ReturnShipmentLine.TESTFIELD("Quantity Invoiced",ReturnShipmentLine.Quantity);
        ReturnShipmentLine.DELETE;
      UNTIL ReturnShipmentLine.NEXT = 0;
    ItemTrackingMgt.DeleteItemEntryRelation(
      DATABASE::"Return Shipment Line",0,ReturnShptHeader."No.",'',0,0,TRUE);
    
Codeunit<PostPurch-Delete>.PROCEDURE<OnBeforeInitDeleteHeader>
  Raised in: Codeunit<PostPurch-Delete>.PROCEDURE<InitDeleteHeader>
    Code lines:
    OnBeforeInitDeleteHeader( <=====================
      PurchHeader,PurchRcptHeader,PurchInvHeader,PurchCrMemoHdr,ReturnShptHeader,PurchInvHeaderPrepmt,PurchCrMemoHdrPrepmt,
      SourceCode);
    
    WITH PurchHeader DO BEGIN
      CLEAR(PurchRcptHeader);
      CLEAR(PurchInvHeader);
      CLEAR(PurchCrMemoHdr);
      CLEAR(ReturnShptHeader);
      PurchSetup.GET;
    ...
Codeunit<Format Address>.PROCEDURE<OnAfterFormatAddress>
  Raised in: Codeunit<Format Address>.PROCEDURE<FormatAddr>
    Code lines:
    ...
              Index := Index + 1;
            UNTIL Index = 9;
          END;
      END;
    END;
    OnAfterFormatAddress(AddrArray,Name,Name2,Contact,Addr,Addr2,City,PostCode,County,CountryCode); <=====================
Codeunit<Format Address>.PROCEDURE<OnBeforeContactAddrAlt>
  Raised in: Codeunit<Format Address>.PROCEDURE<ContactAddrAlt>
    Code lines:
    OnBeforeContactAddrAlt(AddrArray,Cont,AltAddressCode,ActiveDate,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    RMSetup.GET;
    
    IF (Cont.Type = Cont.Type::Person) AND (Cont."Company No." <> '') THEN BEGIN
      ContCompany.GET(Cont."Company No.");
      CompanyAltAddressCode := ContCompany.ActiveAltAddress(ActiveDate);
      ContIdenticalAddress := Cont.IdenticalAddress(ContCompany);
    ...
Codeunit<Format Address>.PROCEDURE<OnBeforeCustomer>
  Raised in: Codeunit<Format Address>.PROCEDURE<Customer>
    Code lines:
    OnBeforeCustomer(AddrArray,Cust,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    WITH Cust DO
      FormatAddr(
        AddrArray,Name,"Name 2",Contact,Address,"Address 2",
        City,"Post Code",County,"Country/Region Code");
Codeunit<Format Address>.PROCEDURE<OnBeforeFormatAddress>
  Raised in: Codeunit<Format Address>.PROCEDURE<FormatAddr>
    Code lines:
    ...
    
      COMPRESSARRAY(AddrArray);
    END ELSE BEGIN
      SetLineNos(Country,NameLineNo,Name2LineNo,AddrLineNo,Addr2LineNo,ContLineNo,PostCodeCityLineNo,CountyLineNo,CountryLineNo);
    
      OnBeforeFormatAddress( <=====================
        Country,AddrArray,Name,Name2,Contact,Addr,Addr2,City,PostCode,County,CountryCode,NameLineNo,Name2LineNo,
        AddrLineNo,Addr2LineNo,ContLineNo,PostCodeCityLineNo,CountyLineNo,CountryLineNo,Handled);
      IF Handled THEN
        EXIT;
    ...
Codeunit<Format Address>.PROCEDURE<OnBeforeSalesCrMemoBillTo>
  Raised in: Codeunit<Format Address>.PROCEDURE<SalesCrMemoBillTo>
    Code lines:
    OnBeforeSalesCrMemoBillTo(AddrArray,SalesCrMemoHeader,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    WITH SalesCrMemoHeader DO
      FormatAddr(
        AddrArray,"Bill-to Name","Bill-to Name 2","Bill-to Contact","Bill-to Address","Bill-to Address 2",
        "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code");
Codeunit<Format Address>.PROCEDURE<OnBeforeSalesHeaderBillTo>
  Raised in: Codeunit<Format Address>.PROCEDURE<SalesHeaderBillTo>
    Code lines:
    OnBeforeSalesHeaderBillTo(AddrArray,SalesHeader,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    WITH SalesHeader DO
      FormatAddr(
        AddrArray,"Bill-to Name","Bill-to Name 2","Bill-to Contact","Bill-to Address","Bill-to Address 2",
        "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code");
Codeunit<Format Address>.PROCEDURE<OnBeforeSalesInvBillTo>
  Raised in: Codeunit<Format Address>.PROCEDURE<SalesInvBillTo>
    Code lines:
    OnBeforeSalesInvBillTo(AddrArray,SalesInvHeader,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    WITH SalesInvHeader DO
      FormatAddr(
        AddrArray,"Bill-to Name","Bill-to Name 2","Bill-to Contact","Bill-to Address","Bill-to Address 2",
        "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code");
Codeunit<Format Address>.PROCEDURE<OnBeforeVendor>
  Raised in: Codeunit<Format Address>.PROCEDURE<Vendor>
    Code lines:
    OnBeforeVendor(AddrArray,Vend,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    WITH Vend DO
      FormatAddr(
        AddrArray,Name,"Name 2",Contact,Address,"Address 2",
        City,"Post Code",County,"Country/Region Code");
Codeunit<Exchange Acc. G/L Journal Line>.PROCEDURE<OnAfterOnRun>
  Raised in: Codeunit<Exchange Acc. G/L Journal Line>.<OnRun>
    Code lines:
    ...
      "Source Currency Amount" := Amount;
      "Source Curr. VAT Base Amount" := "VAT Base Amount";
      "Source Curr. VAT Amount" := "VAT Amount";
    END;
    
    OnAfterOnRun(Rec,GenJnlLine2); <=====================
Codeunit<Exchange Acc. G/L Journal Line>.PROCEDURE<OnBeforeOnRun>
  Raised in: Codeunit<Exchange Acc. G/L Journal Line>.<OnRun>
    Code lines:
    OnBeforeOnRun(Rec); <=====================
    
    GenJnlLine2 := Rec;
    "Account Type" := GenJnlLine2."Bal. Account Type";
    "Account No." := GenJnlLine2."Bal. Account No.";
    "VAT %" := GenJnlLine2."Bal. VAT %";
    "VAT Amount" := GenJnlLine2."Bal. VAT Amount";
    "VAT Amount (LCY)" := GenJnlLine2."Bal. VAT Amount (LCY)";
    "VAT Difference" := GenJnlLine2."Bal. VAT Difference";
    "Gen. Posting Type" := GenJnlLine2."Bal. Gen. Posting Type";
    ...
Codeunit<CheckManagement>.PROCEDURE<OnAfterFinancialVoidCheck>
  Raised in: Codeunit<CheckManagement>.PROCEDURE<FinancialVoidCheck>
    Code lines:
    ...
    
    MarkCheckEntriesVoid(CheckLedgEntry,ConfirmFinancialVoid.GetVoidDate);
    COMMIT;
    UpdateAnalysisView.UpdateAll(0,TRUE);
    
    OnAfterFinancialVoidCheck(CheckLedgEntry); <=====================
Codeunit<CheckManagement>.PROCEDURE<OnAfterVoidCheck>
  Raised in: Codeunit<CheckManagement>.PROCEDURE<VoidCheck>
    Code lines:
    ...
    CheckLedgEntry2."Entry Status" := CheckLedgEntry2."Entry Status"::Voided;
    CheckLedgEntry2."Positive Pay Exported" := FALSE;
    CheckLedgEntry2.Open := FALSE;
    CheckLedgEntry2.MODIFY;
    
    OnAfterVoidCheck(GenJnlLine,CheckLedgEntry2); <=====================
Codeunit<CheckManagement>.PROCEDURE<OnBeforeFinancialVoidCheck>
  Raised in: Codeunit<CheckManagement>.PROCEDURE<FinancialVoidCheck>
    Code lines:
    OnBeforeFinancialVoidCheck(CheckLedgEntry); <=====================
    
    CheckLedgEntry.TESTFIELD("Entry Status",CheckLedgEntry."Entry Status"::Posted);
    CheckLedgEntry.TESTFIELD("Statement Status",CheckLedgEntry."Statement Status"::Open);
    CheckLedgEntry.TESTFIELD("Bal. Account No.");
    BankAcc.GET(CheckLedgEntry."Bank Account No.");
    BankAccLedgEntry2.GET(CheckLedgEntry."Bank Account Ledger Entry No.");
    SourceCodeSetup.GET;
    WITH GLEntry DO BEGIN
      SETCURRENTKEY("Transaction No.");
    ...
Codeunit<CheckManagement>.PROCEDURE<OnBeforeVoidCheck>
  Raised in: Codeunit<CheckManagement>.PROCEDURE<VoidCheck>
    Code lines:
    OnBeforeVoidCheck(GenJnlLine); <=====================
    
    GenJnlLine.TESTFIELD("Bank Payment Type",GenJnlLine2."Bank Payment Type"::"Computer Check");
    GenJnlLine.TESTFIELD("Check Printed",TRUE);
    GenJnlLine.TESTFIELD("Document No.");
    
    IF GenJnlLine."Bal. Account No." = '' THEN BEGIN
      GenJnlLine."Check Printed" := FALSE;
      GenJnlLine.DELETE(TRUE);
    END;
    ...
Codeunit<CheckManagement>.PROCEDURE<OnBeforeVoidCheckGenJnlLine2Modify>
  Raised in: Codeunit<CheckManagement>.PROCEDURE<VoidCheck>
    Code lines:
    ...
          END;
          GenJnlLine2."Document No." := '';
          GenJnlLine2."Document Date" := 0D;
          GenJnlLine2."Check Printed" := FALSE;
          GenJnlLine2.UpdateSource;
          OnBeforeVoidCheckGenJnlLine2Modify(GenJnlLine2,GenJnlLine); <=====================
          GenJnlLine2.MODIFY;
        END;
      UNTIL GenJnlLine2.NEXT = 0;
    
    ...
Codeunit<Bank Acc. Reconciliation Post>.PROCEDURE<OnBeforeBankAccStmtInsert>
  Raised in: Codeunit<Bank Acc. Reconciliation Post>.PROCEDURE<TransferToBankStmt>
    Code lines:
    ...
        BankAccStmtLine.INSERT;
        BankAccReconLine.ClearDataExchEntries;
      UNTIL BankAccReconLine.NEXT = 0;
    
    BankAccStmt.TRANSFERFIELDS(BankAccRecon);
    OnBeforeBankAccStmtInsert(BankAccStmt,BankAccRecon); <=====================
    BankAccStmt.INSERT;
Codeunit<Bank Acc. Reconciliation Post>.PROCEDURE<OnBeforePostedPmtReconInsert>
  Raised in: Codeunit<Bank Acc. Reconciliation Post>.PROCEDURE<TransferToPostPmtAppln>
    Code lines:
    ...
        PostedPmtReconLine.INSERT;
        BankAccReconLine.ClearDataExchEntries;
      UNTIL BankAccReconLine.NEXT = 0;
    
    PostedPmtReconHdr.TRANSFERFIELDS(BankAccRecon);
    OnBeforePostedPmtReconInsert(PostedPmtReconHdr,BankAccRecon); <=====================
    PostedPmtReconHdr.INSERT;
Codeunit<Bank Acc. Reconciliation Post>.PROCEDURE<OnPostPaymentApplicationsOnBeforeValidateApplyRequirements>
  Raised in: Codeunit<Bank Acc. Reconciliation Post>.PROCEDURE<PostPaymentApplications>
    Code lines:
    ...
      END ELSE BEGIN
        GLSetup.GET;
        ERROR(ExcessiveAmtErr,PaymentLineAmount,GLSetup.GetCurrencyCode(BankAcc."Currency Code"));
      END;
    
      OnPostPaymentApplicationsOnBeforeValidateApplyRequirements(BankAccReconLine,GenJnlLine,AppliedAmount); <=====================
    
      GenJnlLine.ValidateApplyRequirements(GenJnlLine);
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      IF NOT PostPaymentsOnly THEN BEGIN
    ...
Codeunit<Transfer Extended Text>.PROCEDURE<OnBeforeToPurchLineInsert>
  Raised in: Codeunit<Transfer Extended Text>.PROCEDURE<InsertPurchExtText>
    Code lines:
    ...
        ToPurchLine."Document No." := PurchLine."Document No.";
        ToPurchLine."Line No." := NextLineNo;
        NextLineNo := NextLineNo + LineSpacing;
        ToPurchLine.Description := TempExtTextLine.Text;
        ToPurchLine."Attached to Line No." := PurchLine."Line No.";
        OnBeforeToPurchLineInsert(ToPurchLine,PurchLine,TempExtTextLine,NextLineNo,LineSpacing); <=====================
        ToPurchLine.INSERT;
      UNTIL TempExtTextLine.NEXT = 0;
      MakeUpdateRequired := TRUE;
    END;
Codeunit<Transfer Extended Text>.PROCEDURE<OnBeforeToSalesLineInsert>
  Raised in: Codeunit<Transfer Extended Text>.PROCEDURE<InsertSalesExtText>
    Code lines:
    ...
        ToSalesLine."Document No." := SalesLine."Document No.";
        ToSalesLine."Line No." := NextLineNo;
        NextLineNo := NextLineNo + LineSpacing;
        ToSalesLine.Description := TempExtTextLine.Text;
        ToSalesLine."Attached to Line No." := SalesLine."Line No.";
        OnBeforeToSalesLineInsert(ToSalesLine,SalesLine,TempExtTextLine,NextLineNo,LineSpacing); <=====================
        ToSalesLine.INSERT;
      UNTIL TempExtTextLine.NEXT = 0;
      MakeUpdateRequired := TRUE;
    END;
Codeunit<Transfer Extended Text>.PROCEDURE<OnBeforeToServiceLineInsert>
  Raised in: Codeunit<Transfer Extended Text>.PROCEDURE<InsertServExtText>
    Code lines:
    ...
        ToServiceLine."Line No." := NextLineNo;
        NextLineNo := NextLineNo + LineSpacing;
        ToServiceLine.Description := TempExtTextLine.Text;
        ToServiceLine."Attached to Line No." := ServiceLine."Line No.";
        ToServiceLine."Service Item No." := ServiceLine."Service Item No.";
        OnBeforeToServiceLineInsert(ServiceLine,ToServiceLine,TempExtTextLine,NextLineNo,LineSpacing); <=====================
        ToServiceLine.INSERT(TRUE);
      UNTIL TempExtTextLine.NEXT = 0;
      MakeUpdateRequired := TRUE;
    END;
Codeunit<Shipment Header - Edit>.PROCEDURE<OnBeforeSalesShptHeaderModify>
  Raised in: Codeunit<Shipment Header - Edit>.<OnRun>
    Code lines:
    ...
    SalesShptHeader.LOCKTABLE;
    SalesShptHeader.FIND;
    SalesShptHeader."Shipping Agent Code" := "Shipping Agent Code";
    SalesShptHeader."Shipping Agent Service Code" := "Shipping Agent Service Code";
    SalesShptHeader."Package Tracking No." := "Package Tracking No.";
    OnBeforeSalesShptHeaderModify(SalesShptHeader,Rec); <=====================
    SalesShptHeader.TESTFIELD("No.","No.");
    SalesShptHeader.MODIFY;
    Rec := SalesShptHeader;
Codeunit<Reminder-Make>.PROCEDURE<OnAfterMakeReminder>
  Raised in: Codeunit<Reminder-Make>.PROCEDURE<MakeReminder>
    Code lines:
    ...
    RemoveLinesOfNegativeReminder(ReminderHeader);
    
    ReminderLevel.RESET;
    CustLedgEntry.RESET;
    
    OnAfterMakeReminder(ReminderHeader,ReminderLine); <=====================
    
    EXIT(TRUE);
Codeunit<Reminder-Issue>.PROCEDURE<OnAfterIssueReminder>
  Raised in: Codeunit<Reminder-Issue>.<OnRun>
    Code lines:
    ...
        UNTIL ReminderLine.NEXT = 0;
      ReminderLine.DELETEALL;
      DELETE;
    END;
    
    OnAfterIssueReminder(ReminderHeader,IssuedReminderHeader."No."); <=====================
Codeunit<Reminder-Issue>.PROCEDURE<OnBeforeIssueReminder>
  Raised in: Codeunit<Reminder-Issue>.<OnRun>
    Code lines:
    OnBeforeIssueReminder(ReminderHeader); <=====================
    
    WITH ReminderHeader DO BEGIN
      UpdateReminderRounding(ReminderHeader);
      IF (PostingDate <> 0D) AND (ReplacePostingDate OR ("Posting Date" = 0D)) THEN
        VALIDATE("Posting Date",PostingDate);
      TESTFIELD("Customer No.");
      CheckIfBlocked("Customer No.");
    
      TESTFIELD("Posting Date");
    ...
Codeunit<FinChrgMemo-Issue>.PROCEDURE<OnAfterInitGenJnlLine>
  Raised in: Codeunit<FinChrgMemo-Issue>.PROCEDURE<InitGenJnlLine>
    Code lines:
    ...
      GenJnlLine."Source Code" := SrcCode;
      GenJnlLine."Reason Code" := "Reason Code";
      GenJnlLine."System-Created Entry" := SystemCreatedEntry;
      GenJnlLine."Posting No. Series" := "Issuing No. Series";
      GenJnlLine."Salespers./Purch. Code" := '';
      OnAfterInitGenJnlLine(GenJnlLine,FinChrgMemoHeader); <=====================
    END;
Codeunit<FinChrgMemo-Issue>.PROCEDURE<OnAfterIssueFinChargeMemo>
  Raised in: Codeunit<FinChrgMemo-Issue>.<OnRun>
    Code lines:
    ...
    
      FinChrgMemoLine.DELETEALL;
      DELETE;
    END;
    
    OnAfterIssueFinChargeMemo(FinChrgMemoHeader,IssuedFinChrgMemoHeader."No."); <=====================
Codeunit<FinChrgMemo-Issue>.PROCEDURE<OnBeforeIssueFinChargeMemo>
  Raised in: Codeunit<FinChrgMemo-Issue>.<OnRun>
    Code lines:
    OnBeforeIssueFinChargeMemo(FinChrgMemoHeader); <=====================
    
    WITH FinChrgMemoHeader DO BEGIN
      UpdateFinanceChargeRounding(FinChrgMemoHeader);
      IF (PostingDate <> 0D) AND (ReplacePostingDate OR ("Posting Date" = 0D)) THEN
        VALIDATE("Posting Date",PostingDate);
      TESTFIELD("Customer No.");
      TESTFIELD("Posting Date");
      TESTFIELD("Document Date");
      TESTFIELD("Due Date");
    ...
Codeunit<NoSeriesManagement>.PROCEDURE<OnAfterGetNextNo3>
  Raised in: Codeunit<NoSeriesManagement>.PROCEDURE<GetNextNo3>
    Code lines:
    ...
    IF ModifySeries THEN
      NoSeriesLine.MODIFY
    ELSE
      LastNoSeriesLine := NoSeriesLine;
    
    OnAfterGetNextNo3(NoSeriesLine); <=====================
    
    EXIT(NoSeriesLine."Last No. Used");
Codeunit<Mail>.PROCEDURE<OnBeforeCreateMessage>
  Raised in: Codeunit<Mail>.PROCEDURE<CreateMessage>
    Code lines:
    Initialize;
    
    OnBeforeCreateMessage(ToAddresses,CcAddresses,BccAddresses,Subject,Body); <=====================
    
    OutlookMessageHelper.Recipients := ToAddresses;
    OutlookMessageHelper.CarbonCopyRecipients := CcAddresses;
    OutlookMessageHelper.BlindCarbonCopyRecipients := BccAddresses;
    OutlookMessageHelper.Subject := Subject;
    OutlookMessageHelper.BodyFormat := 2;
    OutlookMessageHelper.ShowNewMailDialogOnSend := ShowNewMailDialogOnSend;
    ...
Codeunit<Mail>.PROCEDURE<OnGetEmailAddressFromActiveDirectory>
  Raised in: Codeunit<Mail>.PROCEDURE<GetActiveDirectoryMailFromUser>
    Code lines:
    OnGetEmailAddressFromActiveDirectory(Email,Handled); <=====================
    IF Handled THEN
      EXIT(Email);
    EXIT(GetEmailAddressFromActiveDirectory);
Codeunit<ClientTypeManagement>.PROCEDURE<OnAfterGetCurrentClientType>
  Raised in: Codeunit<ClientTypeManagement>.PROCEDURE<GetCurrentClientType>
    Code lines:
    CurrClientType := CURRENTCLIENTTYPE;
    OnAfterGetCurrentClientType(CurrClientType); <=====================
Codeunit<LogInManagement>.PROCEDURE<OnAfterCompanyClose>
  Raised in: Codeunit<LogInManagement>.PROCEDURE<CompanyClose>
    Code lines:
    OnBeforeCompanyClose;
    IF GUIALLOWED OR (CURRENTCLIENTTYPE = CLIENTTYPE::Web) THEN
      LogInEnd;
    OnAfterCompanyClose; <=====================
Codeunit<LogInManagement>.PROCEDURE<OnAfterCompanyOpen>
  Raised in: Codeunit<LogInManagement>.PROCEDURE<CompanyOpen>
    Code lines:
    ...
    OnBeforeCompanyOpen;
    
    IF GUIALLOWED THEN
      LogInStart;
    
    OnAfterCompanyOpen; <=====================
    
    LogonManagement.SetLogonInProgress(FALSE);
Codeunit<LogInManagement>.PROCEDURE<OnAfterLogInEnd>
  Raised in: Codeunit<LogInManagement>.PROCEDURE<LogInEnd>
    Code lines:
    ...
          UserTimeRegister.INSERT;
        END;
      END;
    END;
    
    OnAfterLogInEnd; <=====================
Codeunit<LogInManagement>.PROCEDURE<OnAfterLogInStart>
  Raised in: Codeunit<LogInManagement>.PROCEDURE<LogInStart>
    Code lines:
    ...
    
    SetupMyRecords;
    
    ApplicationAreaMgmtFacade.SetupApplicationArea;
    
    OnAfterLogInStart; <=====================
Codeunit<LogInManagement>.PROCEDURE<OnBeforeCompanyClose>
  Raised in: Codeunit<LogInManagement>.PROCEDURE<CompanyClose>
    Code lines:
    OnBeforeCompanyClose; <=====================
    IF GUIALLOWED OR (CURRENTCLIENTTYPE = CLIENTTYPE::Web) THEN
      LogInEnd;
    OnAfterCompanyClose;
Codeunit<LogInManagement>.PROCEDURE<OnBeforeCompanyOpen>
  Raised in: Codeunit<LogInManagement>.PROCEDURE<CompanyOpen>
    Code lines:
    ...
    
    // This needs to be the very first thing to run before company open
    CODEUNIT.RUN(CODEUNIT::"Azure AD User Management");
    CODEUNIT.RUN(CODEUNIT::"SaaS Log In Management");
    
    OnBeforeCompanyOpen; <=====================
    
    IF GUIALLOWED THEN
      LogInStart;
    
    ...
Codeunit<SMTP Mail>.PROCEDURE<OnBeforeAddBCC>
  Raised in: Codeunit<SMTP Mail>.PROCEDURE<AddBCC>
    Code lines:
    OnBeforeAddBCC(Recipients); <=====================
    
    CheckValidEmailAddresses(Recipients);
    Result := Mail.AddBCC(Recipients);
    IF Result <> '' THEN
      ShowErrorNotification(STRSUBSTNO(RecipientErr,Recipients),Result);
Codeunit<SMTP Mail>.PROCEDURE<OnBeforeAddCC>
  Raised in: Codeunit<SMTP Mail>.PROCEDURE<AddCC>
    Code lines:
    OnBeforeAddCC(Recipients); <=====================
    
    CheckValidEmailAddresses(Recipients);
    Result := Mail.AddCC(Recipients);
    IF Result <> '' THEN
      ShowErrorNotification(STRSUBSTNO(RecipientErr,Recipients),Result);
Codeunit<SMTP Mail>.PROCEDURE<OnBeforeAddRecipients>
  Raised in: Codeunit<SMTP Mail>.PROCEDURE<AddRecipients>
    Code lines:
    OnBeforeAddRecipients(Recipients); <=====================
    
    CheckValidEmailAddresses(Recipients);
    Result := Mail.AddRecipients(Recipients);
    IF Result <> '' THEN
      ShowErrorNotification(STRSUBSTNO(RecipientErr,Recipients),Result);
Codeunit<SMTP Mail>.PROCEDURE<OnBeforeCreateMessage>
  Raised in: Codeunit<SMTP Mail>.PROCEDURE<CreateMessage>
    Code lines:
    OnBeforeCreateMessage(SenderName,SenderAddress,Recipients,Subject,Body,HtmlFormatted); <=====================
    
    IF Recipients <> '' THEN
      CheckValidEmailAddresses(Recipients);
    CheckValidEmailAddresses(SenderAddress);
    SMTPMailSetup.GetSetup;
    SMTPMailSetup.TESTFIELD("SMTP Server");
    IF NOT ISNULL(Mail) THEN BEGIN
      Mail.Dispose;
      CLEAR(Mail);
    ...
Codeunit<SMTP Mail>.PROCEDURE<OnBeforeTrySend>
  Raised in: Codeunit<SMTP Mail>.PROCEDURE<TrySend>
    Code lines:
    OnBeforeTrySend; <=====================
    SendResult := '';
    Password := SMTPMailSetup.GetPassword;
    WITH SMTPMailSetup DO
      SendResult :=
        Mail.Send(
          "SMTP Server",
          "SMTP Server Port",
          Authentication <> Authentication::Anonymous,
          "User ID",
    ...
Codeunit<Graph Mail>.PROCEDURE<OnGetGraphDomain>
  Raised in: Codeunit<Graph Mail>.PROCEDURE<GetGraphDomain>
    Code lines:
    ...
      EXIT('https://graph.microsoft-ppe.com/');
    
    IF EnvironmentMgt.IsPROD THEN
      EXIT('https://graph.microsoft.com/');
    
    OnGetGraphDomain(Domain); <=====================
    IF Domain = '' THEN
      Domain := 'https://graph.microsoft.com/';
    
    EXIT(Domain);
Codeunit<DimensionManagement>.PROCEDURE<OnAfterSetupObjectNoList>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<DefaultDimObjectNoWithGlobalDimsList>
    Code lines:
    ...
      REPEAT
        TempDimSetIDField.SETRANGE(TableNo,TempDimField.TableNo);
        IF TempDimSetIDField.ISEMPTY THEN
          InsertObject(TempAllObjWithCaption,TempDimField.TableNo);
      UNTIL TempDimField.NEXT = 0;
    OnAfterSetupObjectNoList(TempAllObjWithCaption); <=====================
Codeunit<DimensionManagement>.PROCEDURE<OnBeforeCheckDimValuePosting>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<CheckDimValuePosting>
    Code lines:
    IsChecked := FALSE;
    IsHandled := FALSE;
    OnBeforeCheckDimValuePosting(TableID,No,DimSetID,IsChecked,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(IsChecked);
    
    IF NOT CheckBlockedDimAndValues(DimSetID) THEN
      EXIT(FALSE);
    
    DefaultDim.SETFILTER("Value Posting",'<>%1',DefaultDim."Value Posting"::" ");
    ...
Codeunit<DimensionManagement>.PROCEDURE<OnBeforeGetDefaultDimID>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<GetDefaultDimID>
    Code lines:
    OnBeforeGetDefaultDimID(TableID,No,SourceCode,GlobalDim1Code,GlobalDim2Code,InheritFromDimSetID,InheritFromTableNo); <=====================
    
    GetGLSetup;
    IF InheritFromDimSetID > 0 THEN
      GetDimensionSet(TempDimSetEntry0,InheritFromDimSetID);
    TempDimBuf2.RESET;
    TempDimBuf2.DELETEALL;
    IF TempDimSetEntry0.FINDSET THEN
      REPEAT
        TempDimBuf2.INIT;
    ...
Codeunit<DimensionManagement>.PROCEDURE<OnCheckDimValueAllowed>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<CheckDimValueAllowed>
    Code lines:
    ...
    IF NOT DimValueAllowed THEN
      DimErr :=
        STRSUBSTNO(
          DimValueMustNotBeErr,DimVal.TABLECAPTION,DimVal."Dimension Code",DimVal.Code,FORMAT(DimVal."Dimension Value Type"))
    ELSE
      OnCheckDimValueAllowed(DimVal,DimValueAllowed,DimErr); <=====================
    
    EXIT(DimValueAllowed);
Codeunit<DimensionManagement>.PROCEDURE<OnCheckICDimValueAllowed>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<CheckICDimValueAllowed>
    Code lines:
    DimValueAllowed :=
      ICDimVal."Dimension Value Type" IN [ICDimVal."Dimension Value Type"::Standard,ICDimVal."Dimension Value Type"::"Begin-Total"];
    
    OnCheckICDimValueAllowed(ICDimVal,DimValueAllowed); <=====================
    
    EXIT(DimValueAllowed);
Codeunit<DimensionManagement>.PROCEDURE<OnGetRecDefaultDimID>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<GetRecDefaultDimID>
    Code lines:
    OnGetRecDefaultDimID(RecVariant,CurrFieldNo,TableID,No,SourceCode,InheritFromDimSetID,InheritFromTableNo); <=====================
    EXIT(GetDefaultDimID(TableID,No,SourceCode,GlobalDim1Code,GlobalDim2Code,InheritFromDimSetID,InheritFromTableNo));
Codeunit<DimensionManagement>.PROCEDURE<OnTypeToTableID2>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<TypeToTableID2>
    Code lines:
    ...
      Type::Item:
        EXIT(DATABASE::Item);
      Type::"G/L Account":
        EXIT(DATABASE::"G/L Account");
      ELSE BEGIN
        OnTypeToTableID2(TableID,Type); <=====================
        EXIT(TableID);
      END;
    END;
Codeunit<TextManagement>.PROCEDURE<OnAfterMakeDateFilter>
  Raised in: Codeunit<TextManagement>.PROCEDURE<MakeDateFilter>
    Code lines:
    MakeFilterExpression(FilterType::Date,DateFilterText);
    OnAfterMakeDateFilter(DateFilterText); <=====================
    EXIT(0);
Codeunit<TextManagement>.PROCEDURE<OnAfterMakeDateTimeFilter>
  Raised in: Codeunit<TextManagement>.PROCEDURE<MakeDateTimeFilter>
    Code lines:
    FilterText := DateTimeFilterText;
    MakeFilterExpression(FilterType::DateTime,FilterText);
    DateTimeFilterText := COPYSTR(FilterText,1,MAXSTRLEN(DateTimeFilterText));
    OnAfterMakeDateTimeFilter(DateTimeFilterText); <=====================
    EXIT(0);
Codeunit<TextManagement>.PROCEDURE<OnAfterMakeTextFilter>
  Raised in: Codeunit<TextManagement>.PROCEDURE<MakeTextFilter>
    Code lines:
    ...
          BEGIN
            Position := Position + STRLEN(PartOfText);
            GetMyFilterText(TextFilterText,DATABASE::"My Vendor");
          END;
      END;
    OnAfterMakeTextFilter(TextFilterText,Position); <=====================
    EXIT(Position);
Codeunit<TextManagement>.PROCEDURE<OnAfterMakeTimeFilter>
  Raised in: Codeunit<TextManagement>.PROCEDURE<MakeTimeFilter>
    Code lines:
    FilterText := TimeFilterText;
    MakeFilterExpression(FilterType::Time,FilterText);
    TimeFilterText := COPYSTR(FilterText,1,MAXSTRLEN(TimeFilterText));
    OnAfterMakeTimeFilter(TimeFilterText); <=====================
    EXIT(0);
Codeunit<TextManagement>.PROCEDURE<OnBeforeMakeTextFilter>
  Raised in: Codeunit<TextManagement>.PROCEDURE<MakeTextFilter>
    Code lines:
    OnBeforeMakeTextFilter(TextFilterText,Position,HandledByEvent); <=====================
    IF HandledByEvent THEN
      EXIT(Position);
    
    Position := 1;
    Length := STRLEN(TextFilterText);
    ReadCharacter(' ',TextFilterText,Position,Length);
    IF FindText(PartOfText,TextFilterText,Position,Length) THEN
      CASE PartOfText OF
        COPYSTR('ME',1,STRLEN(PartOfText)),COPYSTR(MeText,1,STRLEN(PartOfText)):
    ...
Codeunit<Release Sales Document>.PROCEDURE<OnAfterManualReleaseSalesDoc>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<PerformManualRelease>
    Code lines:
    IF PrepaymentMgt.TestSalesPrepayment(SalesHeader) THEN
      ERROR(UnpostedPrepaymentAmountsErr,SalesHeader."Document Type",SalesHeader."No.");
    
    OnBeforeManualReleaseSalesDoc(SalesHeader,PreviewMode);
    PerformManualCheckAndRelease(SalesHeader);
    OnAfterManualReleaseSalesDoc(SalesHeader,PreviewMode); <=====================
Codeunit<Release Sales Document>.PROCEDURE<OnAfterManualReOpenSalesDoc>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<PerformManualReopen>
    Code lines:
    IF SalesHeader.Status = SalesHeader.Status::"Pending Approval" THEN
      ERROR(Text003);
    
    OnBeforeManualReOpenSalesDoc(SalesHeader,PreviewMode);
    Reopen(SalesHeader);
    OnAfterManualReOpenSalesDoc(SalesHeader,PreviewMode); <=====================
Codeunit<Release Sales Document>.PROCEDURE<OnAfterReleaseATOs>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<Code>
    Code lines:
    ...
      LinesWereModified := LinesWereModified OR CalcAndUpdateVATOnLines(SalesHeader,SalesLine);
    
      OnAfterUpdateSalesDocLines(SalesHeader,LinesWereModified,PreviewMode);
    
      ReleaseATOs(SalesHeader);
      OnAfterReleaseATOs(SalesHeader,SalesLine,PreviewMode); <=====================
    
      MODIFY(TRUE);
    
      IF NotOnlyDropShipment THEN
    ...
Codeunit<Release Sales Document>.PROCEDURE<OnAfterReleaseSalesDoc>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<Code>
    Code lines:
    ...
        EXIT;
    
      IF PrepaymentMgt.TestSalesPrepayment(SalesHeader) AND ("Document Type" = "Document Type"::Order) THEN BEGIN
        Status := Status::"Pending Prepayment";
        MODIFY(TRUE);
        OnAfterReleaseSalesDoc(SalesHeader,PreviewMode,LinesWereModified); <=====================
        EXIT;
      END;
      Status := Status::Released;
    
    ...
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<Code>
    Code lines:
    ...
        EXIT;
    
      IF PrepaymentMgt.TestSalesPrepayment(SalesHeader) AND ("Document Type" = "Document Type"::Order) THEN BEGIN
        Status := Status::"Pending Prepayment";
        MODIFY(TRUE);
        OnAfterReleaseSalesDoc(SalesHeader,PreviewMode,LinesWereModified); <=====================
        EXIT;
      END;
      Status := Status::Released;
    
    ...
Codeunit<Release Sales Document>.PROCEDURE<OnAfterReopenSalesDoc>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<Reopen>
    Code lines:
    ...
      MODIFY(TRUE);
      IF "Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"] THEN
        WhseSalesRelease.Reopen(SalesHeader);
    END;
    
    OnAfterReopenSalesDoc(SalesHeader,PreviewMode); <=====================
Codeunit<Release Sales Document>.PROCEDURE<OnAfterUpdateSalesDocLines>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<Code>
    Code lines:
    ...
      END;
      Status := Status::Released;
    
      LinesWereModified := LinesWereModified OR CalcAndUpdateVATOnLines(SalesHeader,SalesLine);
    
      OnAfterUpdateSalesDocLines(SalesHeader,LinesWereModified,PreviewMode); <=====================
    
      ReleaseATOs(SalesHeader);
      OnAfterReleaseATOs(SalesHeader,SalesLine,PreviewMode);
    
    ...
Codeunit<Release Sales Document>.PROCEDURE<OnBeforeCalcInvDiscount>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<Code>
    Code lines:
    ...
    
      SalesLine.SETRANGE("Drop Shipment",FALSE);
      NotOnlyDropShipment := SalesLine.FINDFIRST;
      SalesLine.RESET;
    
      OnBeforeCalcInvDiscount(SalesHeader,PreviewMode); <=====================
    
      SalesSetup.GET;
      IF SalesSetup."Calc. Inv. Discount" THEN BEGIN
        PostingDate := "Posting Date";
    ...
Codeunit<Release Sales Document>.PROCEDURE<OnBeforeManualReleaseSalesDoc>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<PerformManualRelease>
    Code lines:
    IF PrepaymentMgt.TestSalesPrepayment(SalesHeader) THEN
      ERROR(UnpostedPrepaymentAmountsErr,SalesHeader."Document Type",SalesHeader."No.");
    
    OnBeforeManualReleaseSalesDoc(SalesHeader,PreviewMode); <=====================
    PerformManualCheckAndRelease(SalesHeader);
    OnAfterManualReleaseSalesDoc(SalesHeader,PreviewMode);
Codeunit<Release Sales Document>.PROCEDURE<OnBeforeManualReOpenSalesDoc>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<PerformManualReopen>
    Code lines:
    IF SalesHeader.Status = SalesHeader.Status::"Pending Approval" THEN
      ERROR(Text003);
    
    OnBeforeManualReOpenSalesDoc(SalesHeader,PreviewMode); <=====================
    Reopen(SalesHeader);
    OnAfterManualReOpenSalesDoc(SalesHeader,PreviewMode);
Codeunit<Release Sales Document>.PROCEDURE<OnBeforeModifySalesDoc>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<Code>
    Code lines:
    ...
        IF PostingDate <> "Posting Date" THEN
          VALIDATE("Posting Date",PostingDate);
      END;
    
      IsHandled := FALSE;
      OnBeforeModifySalesDoc(SalesHeader,PreviewMode,IsHandled); <=====================
      IF IsHandled THEN
        EXIT;
    
      IF PrepaymentMgt.TestSalesPrepayment(SalesHeader) AND ("Document Type" = "Document Type"::Order) THEN BEGIN
    ...
Codeunit<Release Sales Document>.PROCEDURE<OnBeforePerformManualRelease>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<PerformManualCheckAndRelease>
    Code lines:
    ...
    
    IF ApprovalsMgmt.IsSalesHeaderPendingApproval(SalesHeader) THEN
      ERROR(Text002);
    
    IsHandled := FALSE;
    OnBeforePerformManualRelease(SalesHeader,PreviewMode,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    CODEUNIT.RUN(CODEUNIT::"Release Sales Document",SalesHeader);
Codeunit<Release Sales Document>.PROCEDURE<OnBeforeReleaseSalesDoc>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<Code>
    Code lines:
    WITH SalesHeader DO BEGIN
      IF Status = Status::Released THEN
        EXIT;
    
      OnBeforeReleaseSalesDoc(SalesHeader,PreviewMode); <=====================
      IF NOT (PreviewMode OR SkipCheckReleaseRestrictions) THEN
        CheckSalesReleaseRestrictions;
    
      IF "Document Type" = "Document Type"::Quote THEN
        IF CheckCustomerCreated(TRUE) THEN
    ...
Codeunit<Release Sales Document>.PROCEDURE<OnBeforeReopenSalesDoc>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<Reopen>
    Code lines:
    OnBeforeReopenSalesDoc(SalesHeader,PreviewMode); <=====================
    
    WITH SalesHeader DO BEGIN
      IF Status = Status::Open THEN
        EXIT;
      Status := Status::Open;
    
      IF "Document Type" <> "Document Type"::Order THEN
        ReopenATOs(SalesHeader);
    
    ...
Codeunit<Release Sales Document>.PROCEDURE<OnCodeOnAfterCheck>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<Code>
    Code lines:
    ...
              SalesLine.TESTFIELD("Location Code");
          UNTIL SalesLine.NEXT = 0;
        SalesLine.SETFILTER(Type,'>0');
      END;
    
      OnCodeOnAfterCheck(SalesHeader,SalesLine); <=====================
    
      SalesLine.SETRANGE("Drop Shipment",FALSE);
      NotOnlyDropShipment := SalesLine.FINDFIRST;
      SalesLine.RESET;
    ...
Codeunit<Release Purchase Document>.PROCEDURE<OnAfterManualReleasePurchaseDoc>
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<PerformManualRelease>
    Code lines:
    IF PrepaymentMgt.TestPurchasePrepayment(PurchHeader) THEN
      ERROR(UnpostedPrepaymentAmountsErr,PurchHeader."Document Type",PurchHeader."No.");
    
    OnBeforeManualReleasePurchaseDoc(PurchHeader,PreviewMode);
    PerformManualCheckAndRelease(PurchHeader);
    OnAfterManualReleasePurchaseDoc(PurchHeader,PreviewMode); <=====================
Codeunit<Release Purchase Document>.PROCEDURE<OnAfterManualReopenPurchaseDoc>
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<PerformManualReopen>
    Code lines:
    IF PurchHeader.Status = PurchHeader.Status::"Pending Approval" THEN
      ERROR(Text003);
    
    OnBeforeManualReopenPurchaseDoc(PurchHeader,PreviewMode);
    Reopen(PurchHeader);
    OnAfterManualReopenPurchaseDoc(PurchHeader,PreviewMode); <=====================
Codeunit<Release Purchase Document>.PROCEDURE<OnAfterReleasePurchaseDoc>
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<Code>
    Code lines:
    ...
        EXIT;
    
      IF PrepaymentMgt.TestPurchasePrepayment(PurchaseHeader) AND ("Document Type" = "Document Type"::Order) THEN BEGIN
        Status := Status::"Pending Prepayment";
        MODIFY(TRUE);
        OnAfterReleasePurchaseDoc(PurchaseHeader,PreviewMode,LinesWereModified); <=====================
        EXIT;
      END;
      Status := Status::Released;
    
    ...
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<Code>
    Code lines:
    ...
        EXIT;
    
      IF PrepaymentMgt.TestPurchasePrepayment(PurchaseHeader) AND ("Document Type" = "Document Type"::Order) THEN BEGIN
        Status := Status::"Pending Prepayment";
        MODIFY(TRUE);
        OnAfterReleasePurchaseDoc(PurchaseHeader,PreviewMode,LinesWereModified); <=====================
        EXIT;
      END;
      Status := Status::Released;
    
    ...
Codeunit<Release Purchase Document>.PROCEDURE<OnAfterReopenPurchaseDoc>
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<Reopen>
    Code lines:
    ...
      Status := Status::Open;
    
      MODIFY(TRUE);
    END;
    
    OnAfterReopenPurchaseDoc(PurchHeader,PreviewMode); <=====================
Codeunit<Release Purchase Document>.PROCEDURE<OnBeforeCalcInvDiscount>
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<Code>
    Code lines:
    ...
    
      PurchLine.SETRANGE("Drop Shipment",FALSE);
      NotOnlyDropShipment := PurchLine.FIND('-');
      PurchLine.RESET;
    
      OnBeforeCalcInvDiscount(PurchaseHeader,PreviewMode); <=====================
    
      PurchSetup.GET;
      IF PurchSetup."Calc. Inv. Discount" THEN BEGIN
        PostingDate := "Posting Date";
    ...
Codeunit<Release Purchase Document>.PROCEDURE<OnBeforeManualReleasePurchaseDoc>
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<PerformManualRelease>
    Code lines:
    IF PrepaymentMgt.TestPurchasePrepayment(PurchHeader) THEN
      ERROR(UnpostedPrepaymentAmountsErr,PurchHeader."Document Type",PurchHeader."No.");
    
    OnBeforeManualReleasePurchaseDoc(PurchHeader,PreviewMode); <=====================
    PerformManualCheckAndRelease(PurchHeader);
    OnAfterManualReleasePurchaseDoc(PurchHeader,PreviewMode);
Codeunit<Release Purchase Document>.PROCEDURE<OnBeforeManualReopenPurchaseDoc>
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<PerformManualReopen>
    Code lines:
    IF PurchHeader.Status = PurchHeader.Status::"Pending Approval" THEN
      ERROR(Text003);
    
    OnBeforeManualReopenPurchaseDoc(PurchHeader,PreviewMode); <=====================
    Reopen(PurchHeader);
    OnAfterManualReopenPurchaseDoc(PurchHeader,PreviewMode);
Codeunit<Release Purchase Document>.PROCEDURE<OnBeforeModifyPurchDoc>
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<Code>
    Code lines:
    ...
        IF PostingDate <> "Posting Date" THEN
          VALIDATE("Posting Date",PostingDate);
      END;
    
      IsHandled := FALSE;
      OnBeforeModifyPurchDoc(PurchaseHeader,PreviewMode,IsHandled); <=====================
      IF IsHandled THEN
        EXIT;
    
      IF PrepaymentMgt.TestPurchasePrepayment(PurchaseHeader) AND ("Document Type" = "Document Type"::Order) THEN BEGIN
    ...
Codeunit<Release Purchase Document>.PROCEDURE<OnBeforePerformManualRelease>
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<PerformManualCheckAndRelease>
    Code lines:
    ...
    
    IF ApprovalsMgmt.IsPurchaseHeaderPendingApproval(PurchHeader) THEN
      ERROR(Text002);
    
    IsHandled := FALSE;
    OnBeforePerformManualRelease(PurchaseHeader,PreviewMode,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    CODEUNIT.RUN(CODEUNIT::"Release Purchase Document",PurchHeader);
Codeunit<Release Purchase Document>.PROCEDURE<OnBeforeReleasePurchaseDoc>
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<Code>
    Code lines:
    WITH PurchaseHeader DO BEGIN
      IF Status = Status::Released THEN
        EXIT;
    
      OnBeforeReleasePurchaseDoc(PurchaseHeader,PreviewMode); <=====================
      IF NOT (PreviewMode OR SkipCheckReleaseRestrictions) THEN
        CheckPurchaseReleaseRestrictions;
    
      TESTFIELD("Buy-from Vendor No.");
    
    ...
Codeunit<Release Purchase Document>.PROCEDURE<OnBeforeReopenPurchaseDoc>
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<Reopen>
    Code lines:
    OnBeforeReopenPurchaseDoc(PurchHeader,PreviewMode); <=====================
    
    WITH PurchHeader DO BEGIN
      IF Status = Status::Open THEN
        EXIT;
      IF "Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"] THEN
        WhsePurchRelease.Reopen(PurchHeader);
      Status := Status::Open;
    
      MODIFY(TRUE);
    ...
Codeunit<Release Purchase Document>.PROCEDURE<OnCodeOnAfterCheck>
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<Code>
    Code lines:
    ...
              PurchLine.TESTFIELD("Location Code");
          UNTIL PurchLine.NEXT = 0;
        PurchLine.SETFILTER(Type,'>0');
      END;
    
      OnCodeOnAfterCheck(PurchaseHeader,PurchLine); <=====================
    
      PurchLine.SETRANGE("Drop Shipment",FALSE);
      NotOnlyDropShipment := PurchLine.FIND('-');
      PurchLine.RESET;
    ...
Codeunit<Release Service Document>.PROCEDURE<OnAfterReleaseServiceDoc>
  Raised in: Codeunit<Release Service Document>.PROCEDURE<Code>
    Code lines:
    ...
      MODIFY(TRUE);
    
      IF "Document Type" = "Document Type"::Order THEN
        WhseServiceRelease.Release(ServiceHeader);
    
      OnAfterReleaseServiceDoc(ServiceHeader); <=====================
    END;
Codeunit<Release Service Document>.PROCEDURE<OnAfterReopenServiceDoc>
  Raised in: Codeunit<Release Service Document>.PROCEDURE<Reopen>
    Code lines:
    ...
      OnBeforeReopenServiceDoc(ServHeader);
      VALIDATE("Release Status","Release Status"::Open);
      MODIFY(TRUE);
      IF "Document Type" IN ["Document Type"::Order] THEN
        WhseServiceRelease.Reopen(ServHeader);
      OnAfterReopenServiceDoc(ServHeader); <=====================
    END;
Codeunit<Release Service Document>.PROCEDURE<OnBeforeReleaseServiceDoc>
  Raised in: Codeunit<Release Service Document>.PROCEDURE<Code>
    Code lines:
    WITH ServiceHeader DO BEGIN
      IF "Release Status" = "Release Status"::"Released to Ship" THEN
        EXIT;
    
      OnBeforeReleaseServiceDoc(ServiceHeader); <=====================
    
      IF "Document Type" = "Document Type"::Quote THEN
        TESTFIELD("Bill-to Customer No.");
      ServLine.SETRANGE("Document Type","Document Type");
      ServLine.SETRANGE("Document No.","No.");
    ...
Codeunit<Release Service Document>.PROCEDURE<OnBeforeReopenServiceDoc>
  Raised in: Codeunit<Release Service Document>.PROCEDURE<Reopen>
    Code lines:
    WITH ServHeader DO BEGIN
      IF "Release Status" = "Release Status"::Open THEN
        EXIT;
    
      OnBeforeReopenServiceDoc(ServHeader); <=====================
      VALIDATE("Release Status","Release Status"::Open);
      MODIFY(TRUE);
      IF "Document Type" IN ["Document Type"::Order] THEN
        WhseServiceRelease.Reopen(ServHeader);
      OnAfterReopenServiceDoc(ServHeader);
Codeunit<Release Service Document>.PROCEDURE<OnCodeOnAfterCheck>
  Raised in: Codeunit<Release Service Document>.PROCEDURE<Code>
    Code lines:
    ...
            ServLine.TESTFIELD("Location Code");
          UNTIL ServLine.NEXT = 0;
        ServLine.SETFILTER(Type,'<>%1',ServLine.Type::" ");
      END;
    
      OnCodeOnAfterCheck(ServiceHeader,ServLine); <=====================
    
      ServLine.RESET;
      VALIDATE("Release Status","Release Status"::"Released to Ship");
      ServLine.SetServHeader(ServiceHeader);
    ...
Codeunit<User Management>.PROCEDURE<OnAfterRenameRecord>
  Raised in: Codeunit<User Management>.PROCEDURE<RenameRecord>
    Code lines:
    ...
            MyTimeSheets.CHANGECOMPANY(Company);
            RecRef.SETTABLE(MyTimeSheets);
            MyTimeSheets.RENAME(UserName,MyTimeSheets."Time Sheet No.");
          END;
      END;
    OnAfterRenameRecord(RecRef,TableNo,NumberOfPrimaryKeyFields,UserName,Company); <=====================
Codeunit<File Management>.PROCEDURE<OnAfterGetToFilterTextSetOutExt>
  Raised in: Codeunit<File Management>.PROCEDURE<GetToFilterText>
    Code lines:
    ...
        OutExt := RDLFileTypeTok;
      'RDLC':
        OutExt := RDLFileTypeTok;
    END;
    
    OnAfterGetToFilterTextSetOutExt(FileName,OutExt); <=====================
    
    IF OutExt = '' THEN
      EXIT(AllFilesDescriptionTxt);
    EXIT(OutExt + '|' + AllFilesDescriptionTxt);  // Also give the option of the general selection
Codeunit<CaptionManagement>.PROCEDURE<OnAfterCaptionClassTranslate>
  Raised in: Codeunit<CaptionManagement>.PROCEDURE<DoCaptionClassTranslate>
    Code lines:
    Translation := CaptionManagement.CaptionClassTranslate(Language,CaptionExpr);
    OnAfterCaptionClassTranslate(Language,CaptionExpr,Translation); <=====================
Codeunit<Payment Tolerance Management>.PROCEDURE<OnBeforeCalcRemainingPmtDisc>
  Raised in: Codeunit<Payment Tolerance Management>.PROCEDURE<CalcRemainingPmtDisc>
    Code lines:
    OnBeforeCalcRemainingPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,GLSetup,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    IF ABS(NewCVLedgEntryBuf."Max. Payment Tolerance") > ABS(NewCVLedgEntryBuf."Remaining Amount") THEN
      NewCVLedgEntryBuf."Max. Payment Tolerance" := NewCVLedgEntryBuf."Remaining Amount";
    IF (((NewCVLedgEntryBuf."Document Type" IN [NewCVLedgEntryBuf."Document Type"::"Credit Memo",
                                                NewCVLedgEntryBuf."Document Type"::Invoice]) AND
         (OldCVLedgEntryBuf."Document Type" IN [OldCVLedgEntryBuf."Document Type"::Invoice,
                                                OldCVLedgEntryBuf."Document Type"::"Credit Memo"])) AND
    ...
Codeunit<Payment Tolerance Management>.PROCEDURE<OnBeforeCheckCalcPmtDisc>
  Raised in: Codeunit<Payment Tolerance Management>.PROCEDURE<CheckCalcPmtDisc>
    Code lines:
    OnBeforeCheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,CheckFilter,CheckAmount,Handled,Result); <=====================
    IF Handled THEN
      EXIT(Result);
    
    IF ((NewCVLedgEntryBuf."Document Type" IN [NewCVLedgEntryBuf."Document Type"::Refund,
                                               NewCVLedgEntryBuf."Document Type"::Payment]) AND
        (((OldCVLedgEntryBuf2."Document Type" = OldCVLedgEntryBuf2."Document Type"::"Credit Memo") AND
          (OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible" <> 0) AND
          (NewCVLedgEntryBuf."Posting Date" <= OldCVLedgEntryBuf2."Pmt. Discount Date")) OR
         ((OldCVLedgEntryBuf2."Document Type" = OldCVLedgEntryBuf2."Document Type"::Invoice) AND
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<ICOutboxTransactionCreated>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxSalesDocTrans>
    Code lines:
    ...
      IF NOT Post THEN BEGIN
        SalesHeader."IC Status" := SalesHeader."IC Status"::Pending;
        SalesHeader.MODIFY;
      END;
    END;
    OnBeforeICOutboxTransactionCreatedSalesDocTrans(SalesHeader,SalesLine,ICOutBoxSalesHeader,OutboxTransaction,LinesCreated); <=====================
    ICOutboxTransactionCreated(OutboxTransaction); <=====================
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxSalesInvTrans>
    Code lines:
    ...
            CreateICDocDimFromPostedDocDim(ICDocDim,SalesInvLine."Dimension Set ID",DATABASE::"IC Outbox Sales Line");
          END;
        UNTIL SalesInvLine.NEXT = 0;
    END;
    
    OnBeforeICOutboxTransactionCreatedSalesInvTrans(SalesInvHdr,SalesInvLine,ICOutBoxSalesHeader,OutboxTransaction); <=====================
    ICOutboxTransactionCreated(OutboxTransaction); <=====================
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxSalesCrMemoTrans>
    Code lines:
    ...
            ICDocDim."Line No." := SalesCrMemoLine."Line No.";
            CreateICDocDimFromPostedDocDim(ICDocDim,SalesCrMemoLine."Dimension Set ID",DATABASE::"IC Outbox Sales Line");
          END;
        UNTIL SalesCrMemoLine.NEXT = 0;
    END;
    OnBeforeICOutboxTransactionCreatedSalesCrMemoTrans(SalesCrMemoHdr,SalesCrMemoLine,ICOutBoxSalesHeader,OutboxTransaction); <=====================
    ICOutboxTransactionCreated(OutboxTransaction); <=====================
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxPurchDocTrans>
    Code lines:
    ...
      IF NOT Post THEN BEGIN
        PurchHeader."IC Status" := PurchHeader."IC Status"::Pending;
        PurchHeader.MODIFY;
      END;
    END;
    OnBeforeICOutboxTransactionCreatedPurchDocTrans(PurchHeader,PurchLine,ICOutBoxPurchHeader,OutboxTransaction,LinesCreated); <=====================
    ICOutboxTransactionCreated(OutboxTransaction); <=====================
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxJnlLine>
    Code lines:
    ...
          DATABASE::"IC Outbox Jnl. Line",TransactionNo,"IC Partner Code",
          OutboxJnlLine."Transaction Source","Line No.","Dimension Set ID");
        OutboxJnlLine.INSERT;
      END;
      ICOutboxTransaction.GET(TransactionNo,"IC Partner Code",TransactionSource,"Document Type");
      ICOutboxTransactionCreated(ICOutboxTransaction); <=====================
    END;
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterCreatePurchDocument>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreatePurchDocument>
    Code lines:
    ...
            ICDocDim,DATABASE::"IC Inbox Purchase Line","IC Transaction No.","IC Partner Code","Transaction Source","Line No.");
          IF ICDocDim.FIND('-') THEN
            DimMgt.MoveICDocDimtoICDocDim(ICDocDim,ICDocDim2,DATABASE::"Handled IC Inbox Purch. Line","Transaction Source");
        UNTIL NEXT = 0;
    END;
    OnAfterCreatePurchDocument(PurchHeader,ICInboxPurchHeader,HandledICInboxPurchHeader); <=====================
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterCreatePurchLines>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreatePurchLines>
    Code lines:
    ...
        DimMgt.GetCombinedDimensionSetID(DimensionSetIDArr,
          PurchLine."Shortcut Dimension 1 Code",PurchLine."Shortcut Dimension 2 Code");
      DimMgt.UpdateGlobalDimFromDimSetID(PurchLine."Dimension Set ID",PurchLine."Shortcut Dimension 1 Code",
        PurchLine."Shortcut Dimension 2 Code");
    
      OnAfterCreatePurchLines(ICInboxPurchLine,PurchLine); <=====================
      PurchLine.MODIFY;
    END;
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterCreateSalesLines>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateSalesLines>
    Code lines:
    ...
      SalesLine."Dimension Set ID" :=
        DimMgt.GetCombinedDimensionSetID(DimensionSetIDArr,
          SalesLine."Shortcut Dimension 1 Code",SalesLine."Shortcut Dimension 2 Code");
      DimMgt.UpdateGlobalDimFromDimSetID(SalesLine."Dimension Set ID",SalesLine."Shortcut Dimension 1 Code",
        SalesLine."Shortcut Dimension 2 Code");
      OnAfterCreateSalesLines(ICInboxSalesLine,SalesLine); <=====================
      SalesLine.MODIFY;
    END;
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterForwardToOutBoxPurchDoc>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<ForwardToOutBox>
    Code lines:
    ...
                  IF ICDocDim.FIND('-') THEN
                    DimMgt.MoveICDocDimtoICDocDim(
                      ICDocDim,ICDocDim2,DATABASE::"Handled IC Inbox Purch. Line",InboxPurchLine."Transaction Source");
                UNTIL InboxPurchLine.NEXT = 0;
            END;
            OnAfterForwardToOutBoxPurchDoc(InboxTransaction,OutboxTransaction); <=====================
          END;
      END;
      ICCommentLine.SETRANGE("Table Name",ICCommentLine."Table Name"::"Handled IC Inbox Transaction");
      ICCommentLine.SETRANGE("Transaction No.","Transaction No.");
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterForwardToOutBoxSalesDoc>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<ForwardToOutBox>
    Code lines:
    ...
                  IF ICDocDim.FIND('-') THEN
                    DimMgt.MoveICDocDimtoICDocDim(
                      ICDocDim,ICDocDim2,DATABASE::"Handled IC Inbox Sales Line",InboxSalesLine."Transaction Source");
                UNTIL InboxSalesLine.NEXT = 0;
            END;
            OnAfterForwardToOutBoxSalesDoc(InboxTransaction,OutboxTransaction); <=====================
          END;
        "Source Type"::"Purchase Document":
          BEGIN
            IF InboxPurchHdr.GET("Transaction No.","IC Partner Code","Transaction Source") THEN BEGIN
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterHandledICOutboxPurchHdrInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<MoveOutboxTransToHandledOutbox>
    Code lines:
    ...
    IF ICOutboxPurchHdr.FIND('-') THEN
      REPEAT
        HandledICOutboxPurchHdr.INIT;
        HandledICOutboxPurchHdr.TRANSFERFIELDS(ICOutboxPurchHdr,TRUE);
        HandledICOutboxPurchHdr.INSERT;
        OnAfterHandledICOutboxPurchHdrInsert(HandledICOutboxPurchHdr,ICOutboxPurchHdr); <=====================
        MoveICDocDimToHandled(
          DATABASE::"IC Outbox Purchase Header",DATABASE::"Handled IC Outbox Purch. Hdr",ICOutboxPurchHdr."IC Transaction No.",
          ICOutboxPurchHdr."IC Partner Code",ICOutboxPurchHdr."Transaction Source",0);
    
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterHandledICOutboxSalesHdrInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<MoveOutboxTransToHandledOutbox>
    Code lines:
    ...
    IF ICOutboxSalesHdr.FIND('-') THEN
      REPEAT
        HandledICOutboxSalesHdr.INIT;
        HandledICOutboxSalesHdr.TRANSFERFIELDS(ICOutboxSalesHdr,TRUE);
        HandledICOutboxSalesHdr.INSERT;
        OnAfterHandledICOutboxSalesHdrInsert(HandledICOutboxSalesHdr,ICOutboxSalesHdr); <=====================
        MoveICDocDimToHandled(
          DATABASE::"IC Outbox Sales Header",DATABASE::"Handled IC Outbox Sales Header",ICOutboxSalesHdr."IC Transaction No.",
          ICOutboxSalesHdr."IC Partner Code",ICOutboxSalesHdr."Transaction Source",0);
    
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeICOutboxTransactionCreatedPurchDocTrans>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxPurchDocTrans>
    Code lines:
    ...
      IF NOT Post THEN BEGIN
        PurchHeader."IC Status" := PurchHeader."IC Status"::Pending;
        PurchHeader.MODIFY;
      END;
    END;
    OnBeforeICOutboxTransactionCreatedPurchDocTrans(PurchHeader,PurchLine,ICOutBoxPurchHeader,OutboxTransaction,LinesCreated); <=====================
    ICOutboxTransactionCreated(OutboxTransaction);
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeICOutboxTransactionCreatedSalesCrMemoTrans>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxSalesCrMemoTrans>
    Code lines:
    ...
            ICDocDim."Line No." := SalesCrMemoLine."Line No.";
            CreateICDocDimFromPostedDocDim(ICDocDim,SalesCrMemoLine."Dimension Set ID",DATABASE::"IC Outbox Sales Line");
          END;
        UNTIL SalesCrMemoLine.NEXT = 0;
    END;
    OnBeforeICOutboxTransactionCreatedSalesCrMemoTrans(SalesCrMemoHdr,SalesCrMemoLine,ICOutBoxSalesHeader,OutboxTransaction); <=====================
    ICOutboxTransactionCreated(OutboxTransaction);
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeICOutboxTransactionCreatedSalesDocTrans>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxSalesDocTrans>
    Code lines:
    ...
      IF NOT Post THEN BEGIN
        SalesHeader."IC Status" := SalesHeader."IC Status"::Pending;
        SalesHeader.MODIFY;
      END;
    END;
    OnBeforeICOutboxTransactionCreatedSalesDocTrans(SalesHeader,SalesLine,ICOutBoxSalesHeader,OutboxTransaction,LinesCreated); <=====================
    ICOutboxTransactionCreated(OutboxTransaction);
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeICOutboxTransactionCreatedSalesInvTrans>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxSalesInvTrans>
    Code lines:
    ...
            CreateICDocDimFromPostedDocDim(ICDocDim,SalesInvLine."Dimension Set ID",DATABASE::"IC Outbox Sales Line");
          END;
        UNTIL SalesInvLine.NEXT = 0;
    END;
    
    OnBeforeICOutboxTransactionCreatedSalesInvTrans(SalesInvHdr,SalesInvLine,ICOutBoxSalesHeader,OutboxTransaction); <=====================
    ICOutboxTransactionCreated(OutboxTransaction);
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeInsertGenJnlLine>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateJournalLines>
    Code lines:
    ...
        VALIDATE("Pmt. Discount Date",InboxJnlLine."Payment Discount Date");
        Quantity := InboxJnlLine.Quantity;
        "IC Direction" := TempGenJnlLine."IC Direction"::Incoming;
        "IC Partner Transaction No." := InboxJnlLine."Transaction No.";
        "External Document No." := InboxJnlLine."Document No.";
        OnBeforeInsertGenJnlLine(GenJnlLine2,InboxJnlLine); <=====================
        INSERT;
        InOutBoxJnlLineDim.SETRANGE("Table ID",DATABASE::"IC Inbox Jnl. Line");
        InOutBoxJnlLineDim.SETRANGE("Transaction No.",InboxTransaction."Transaction No.");
        InOutBoxJnlLineDim.SETRANGE("Line No.",InboxJnlLine."Line No.");
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnRecreateInboxTransactionOnBeforeDeletePurchHeader>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<RecreateInboxTransaction>
    Code lines:
    ...
                UNTIL HandledInboxPurchLine.NEXT = 0;
            END;
            HandleICComments(ICCommentLine."Table Name"::"Handled IC Inbox Transaction",
              ICCommentLine."Table Name"::"IC Inbox Transaction",HandledInboxTransaction2."Transaction No.",
              HandledInboxTransaction2."IC Partner Code",HandledInboxTransaction2."Transaction Source");
            OnRecreateInboxTransactionOnBeforeDeletePurchHeader(HandledInboxPurchHdr,HandledInboxTransaction2); <=====================
            HandledInboxPurchHdr.DELETE(TRUE);
            HandledInboxTransaction.DELETE(TRUE);
          END;
      END;
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnRecreateInboxTransactionOnBeforeDeleteSalesHeader>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<RecreateInboxTransaction>
    Code lines:
    ...
                UNTIL HandledInboxSalesLine.NEXT = 0;
            END;
            HandleICComments(ICCommentLine."Table Name"::"Handled IC Inbox Transaction",
              ICCommentLine."Table Name"::"IC Inbox Transaction",HandledInboxTransaction2."Transaction No.",
              HandledInboxTransaction2."IC Partner Code",HandledInboxTransaction2."Transaction Source");
            OnRecreateInboxTransactionOnBeforeDeleteSalesHeader(HandledInboxSalesHdr,HandledInboxTransaction2); <=====================
            HandledInboxSalesHdr.DELETE(TRUE);
            HandledInboxTransaction.DELETE(TRUE);
            COMMIT;
          END;
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnRecreateOutboxTransactionOnBeforeDeletePurchHeader>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<RecreateOutboxTransaction>
    Code lines:
    ...
                UNTIL HandledOutboxPurchLine.NEXT = 0;
            END;
            HandleICComments(ICCommentLine."Table Name"::"Handled IC Outbox Transaction",
              ICCommentLine."Table Name"::"IC Outbox Transaction",HandledOutboxTransaction2."Transaction No.",
              HandledOutboxTransaction2."IC Partner Code",HandledOutboxTransaction2."Transaction Source");
            OnRecreateOutboxTransactionOnBeforeDeletePurchHeader(HandledOutboxPurchHdr,HandledOutboxTransaction2); <=====================
            HandledOutboxPurchHdr.DELETE(TRUE);
            HandledOutboxTransaction.DELETE(TRUE);
          END;
      END;
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnRecreateOutboxTransactionOnBeforeDeleteSalesHeader>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<RecreateOutboxTransaction>
    Code lines:
    ...
                UNTIL HandledOutboxSalesLine.NEXT = 0;
            END;
            HandleICComments(ICCommentLine."Table Name"::"Handled IC Outbox Transaction",
              ICCommentLine."Table Name"::"IC Outbox Transaction",HandledOutboxTransaction2."Transaction No.",
              HandledOutboxTransaction2."IC Partner Code",HandledOutboxTransaction2."Transaction Source");
            OnRecreateOutboxTransactionOnBeforeDeleteSalesHeader(HandledOutboxSalesHdr,HandledOutboxTransaction2); <=====================
            HandledOutboxSalesHdr.DELETE(TRUE);
            HandledOutboxTransaction.DELETE(TRUE);
          END;
        OutboxTransaction."Source Type"::"Purchase Document":
    ...
Codeunit<Consolidate>.PROCEDURE<OnBeforeGenJnlPostLine>
  Raised in: Codeunit<Consolidate>.PROCEDURE<GenJnlPostLineFinally>
    Code lines:
    TempGenJnlLine.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date");
    IF TempGenJnlLine.FINDSET THEN
      REPEAT
        Window.UPDATE(3,TempGenJnlLine."Account No.");
        OnBeforeGenJnlPostLine(TempGenJnlLine); <=====================
        GenJnlPostLine.RunWithCheck(TempGenJnlLine);
      UNTIL TempGenJnlLine.NEXT = 0;
Codeunit<Acc. Sched. BarChart DrillDown>.PROCEDURE<OnAfterAccSchedManagementSetGLAccColumnFilters>
  Raised in: Codeunit<Acc. Sched. BarChart DrillDown>.<OnRun>
    Code lines:
    ...
            COPYFILTER("Business Unit Filter",GLAcc."Business Unit Filter");
            COPYFILTER("G/L Budget Filter",GLAcc."Budget Filter");
            AccSchedManagement.SetGLAccRowFilters(GLAcc,AccSchedLine);
            OnAfterAccSchedManagementSetGLAccRowFilters(GLAcc,AccSchedLine,ColumnLayout);
            AccSchedManagement.SetGLAccColumnFilters(GLAcc,AccSchedLine,ColumnLayout);
            OnAfterAccSchedManagementSetGLAccColumnFilters(GLAcc,AccSchedLine,ColumnLayout); <=====================
            AccSchedName.GET("Schedule Name");
            IF AccSchedName."Analysis View Name" = '' THEN BEGIN
              COPYFILTER("Dimension 1 Filter",GLAcc."Global Dimension 1 Filter");
              COPYFILTER("Dimension 2 Filter",GLAcc."Global Dimension 2 Filter");
    ...
Codeunit<Acc. Sched. BarChart DrillDown>.PROCEDURE<OnAfterAccSchedManagementSetGLAccRowFilters>
  Raised in: Codeunit<Acc. Sched. BarChart DrillDown>.<OnRun>
    Code lines:
    ...
        ELSE
          IF Totaling <> '' THEN BEGIN
            COPYFILTER("Business Unit Filter",GLAcc."Business Unit Filter");
            COPYFILTER("G/L Budget Filter",GLAcc."Budget Filter");
            AccSchedManagement.SetGLAccRowFilters(GLAcc,AccSchedLine);
            OnAfterAccSchedManagementSetGLAccRowFilters(GLAcc,AccSchedLine,ColumnLayout); <=====================
            AccSchedManagement.SetGLAccColumnFilters(GLAcc,AccSchedLine,ColumnLayout);
            OnAfterAccSchedManagementSetGLAccColumnFilters(GLAcc,AccSchedLine,ColumnLayout);
            AccSchedName.GET("Schedule Name");
            IF AccSchedName."Analysis View Name" = '' THEN BEGIN
    ...
Codeunit<ReportManagement>.PROCEDURE<OnAfterGetPaperTrayForReport>
  Raised in: Codeunit<ReportManagement>.PROCEDURE<GetPaperTrayForReport>
    Code lines:
    OnAfterGetPaperTrayForReport(ReportID,FirstPage,DefaultPage,LastPage) <=====================
Codeunit<ReportManagement>.PROCEDURE<OnAfterGetPrinterName>
  Raised in: Codeunit<ReportManagement>.PROCEDURE<GetPrinterName>
    Code lines:
    ...
      IF NOT PrinterSelection.GET(USERID,ReportID) THEN
        IF NOT PrinterSelection.GET('',ReportID) THEN
          IF NOT PrinterSelection.GET(USERID,0) THEN
            IF PrinterSelection.GET('',0) THEN;
    PrinterName := PrinterSelection."Printer Name";
    OnAfterGetPrinterName(ReportID,PrinterName) <=====================
Codeunit<ReportManagement>.PROCEDURE<OnAfterHasCustomLayout>
  Raised in: Codeunit<ReportManagement>.PROCEDURE<HasCustomLayout>
    Code lines:
    IF ObjectType <> ObjectType::Report THEN
      ERROR(NotSupportedErr);
    
    LayoutType := ReportLayoutSelection.HasCustomLayout(ObjectID);
    OnAfterHasCustomLayout(ObjectType,ObjectID,LayoutType); <=====================
Codeunit<ReportManagement>.PROCEDURE<OnAfterSubstituteReport>
  Raised in: Codeunit<ReportManagement>.PROCEDURE<SubstituteReport>
    Code lines:
    OnAfterSubstituteReport(ReportId,NewReportId); <=====================
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterCalcVATAmountLines>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<CalcVATAmountLines>
    Code lines:
    ...
    
    VATAmountLine.UpdateLines(
      NewAmount,Currency,SalesHeader."Currency Factor",SalesHeader."Prices Including VAT",
      SalesHeader."VAT Base Discount %",SalesHeader."Tax Area Code",SalesHeader."Tax Liable",SalesHeader."Posting Date");
    
    OnAfterCalcVATAmountLines(SalesHeader,SalesLine,VATAmountLine,DocumentType); <=====================
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterCheckPrepmtDoc>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<CheckPrepmtDoc>
    Code lines:
    ...
      Cust.CheckBlockedCustOnDocs(Cust,PrepmtDocTypeToDocType(DocumentType),FALSE,TRUE);
      IF "Bill-to Customer No." <> "Sell-to Customer No." THEN BEGIN
        Cust.GET("Bill-to Customer No.");
        Cust.CheckBlockedCustOnDocs(Cust,PrepmtDocTypeToDocType(DocumentType),FALSE,TRUE);
      END;
      OnAfterCheckPrepmtDoc(SalesHeader,DocumentType,SuppressCommit); <=====================
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterFillInvLineBuffer>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<FillInvLineBuffer>
    Code lines:
    ...
      "VAT Amount" := SalesLine."Prepmt. Amt. Incl. VAT" - SalesLine."Prepayment Amount";
      "VAT Amount (ACY)" := SalesLine."Prepmt. Amt. Incl. VAT" - SalesLine."Prepayment Amount";
      "VAT Base Before Pmt. Disc." := -SalesLine."Prepayment Amount";
    END;
    
    OnAfterFillInvLineBuffer(PrepmtInvLineBuf,SalesLine); <=====================
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterInsertInvoiceRounding>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<InsertInvoiceRounding>
    Code lines:
    ...
          SalesLine."Prepayment Amount",SalesLine."Line Amount",0);
    
        "VAT Amount" := SalesLine."Amount Including VAT" - SalesLine."Line Amount";
        "VAT Amount (ACY)" := SalesLine."Amount Including VAT" - SalesLine."Line Amount";
      END;
      OnAfterInsertInvoiceRounding(SalesHeader,PrepmtInvLineBuf,TotalPrepmtInvLineBuf,PrevLineNo); <=====================
      EXIT(TRUE);
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterPostBalancingEntry>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<PostBalancingEntry>
    Code lines:
    ...
      "Applies-to Doc. Type" := DocType;
      "Applies-to Doc. No." := DocNo;
    
      OnBeforePostBalancingEntry(GenJnlLine,CustLedgEntry,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit);
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostBalancingEntry(GenJnlLine,CustLedgEntry,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit); <=====================
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterPostCustomerEntry>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<PostCustomerEntry>
    Code lines:
    ...
    
      Correction := (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
    
      OnBeforePostCustomerEntry(GenJnlLine,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit);
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostCustomerEntry(GenJnlLine,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit); <=====================
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterPostPrepayments>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<Code>
    Code lines:
    ...
      MODIFY;
    END;
    
    SalesHeader2 := SalesHeader;
    
    OnAfterPostPrepayments(SalesHeader2,DocumentType,SuppressCommit,SalesInvHeader,SalesCrMemoHeader); <=====================
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterPostPrepmtInvLineBuffer>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<PostPrepmtInvLineBuffer>
    Code lines:
    ...
      Correction :=
        (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
    
      OnBeforePostPrepmtInvLineBuffer(GenJnlLine,PrepmtInvLineBuffer,SuppressCommit);
      RunGenJnlPostLine(GenJnlLine);
      OnAfterPostPrepmtInvLineBuffer(GenJnlLine,PrepmtInvLineBuffer,SuppressCommit); <=====================
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterRoundAmounts>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<RoundAmounts>
    Code lines:
    ...
          "VAT Base Amount" := Amount;
      END;
    
    TotalPrepmtInvLineBufLCY.IncrAmounts(PrepmtInvLineBuf);
    
    OnAfterRoundAmounts(SalesHeader,PrepmtInvLineBuf,TotalPrepmtInvLineBuf,TotalPrepmtInvLineBufLCY); <=====================
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterSalesCrMemoHeaderInsert>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<InsertSalesCrMemoHeader>
    Code lines:
    ...
      SalesCrMemoHeader."Prepayment Order No." := "No.";
      SalesCrMemoHeader.Correction := GLSetup."Mark Cr. Memos as Corrections";
      SalesCrMemoHeader."No. Series" := PostingNoSeriesCode;
      OnBeforeSalesCrMemoHeaderInsert(SalesCrMemoHeader,SalesHeader,SuppressCommit);
      SalesCrMemoHeader.INSERT;
      OnAfterSalesCrMemoHeaderInsert(SalesCrMemoHeader,SalesHeader,SuppressCommit); <=====================
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterSalesCrMemoLineInsert>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<InsertSalesCrMemoLine>
    Code lines:
    ...
      SalesCrMemoLine."VAT Calculation Type" := "VAT Calculation Type";
      SalesCrMemoLine."VAT Base Amount" := "VAT Base Amount";
      SalesCrMemoLine."VAT Identifier" := "VAT Identifier";
      OnBeforeSalesCrMemoLineInsert(SalesCrMemoLine,SalesCrMemoHeader,PrepmtInvLineBuffer,SuppressCommit);
      SalesCrMemoLine.INSERT;
      OnAfterSalesCrMemoLineInsert(SalesCrMemoLine,SalesCrMemoHeader,PrepmtInvLineBuffer,SuppressCommit); <=====================
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterSalesInvHeaderInsert>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<InsertSalesInvHeader>
    Code lines:
    ...
      SalesInvHeader."Prepayment Invoice" := TRUE;
      SalesInvHeader."Prepayment Order No." := "No.";
      SalesInvHeader."No. Series" := PostingNoSeriesCode;
      OnBeforeSalesInvHeaderInsert(SalesInvHeader,SalesHeader,SuppressCommit);
      SalesInvHeader.INSERT;
      OnAfterSalesInvHeaderInsert(SalesInvHeader,SalesHeader,SuppressCommit); <=====================
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterSalesInvLineInsert>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<InsertSalesInvLine>
    Code lines:
    ...
      SalesInvLine."VAT Calculation Type" := "VAT Calculation Type";
      SalesInvLine."VAT Base Amount" := "VAT Base Amount";
      SalesInvLine."VAT Identifier" := "VAT Identifier";
      OnBeforeSalesInvLineInsert(SalesInvLine,SalesInvHeader,PrepmtInvLineBuffer,SuppressCommit);
      SalesInvLine.INSERT;
      OnAfterSalesInvLineInsert(SalesInvLine,SalesInvHeader,PrepmtInvLineBuffer,SuppressCommit); <=====================
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterUpdatePostedSalesDocument>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<UpdatePostedSalesDocument>
    Code lines:
    ...
          SalesCrMemoHeader."Cust. Ledger Entry No." := CustLedgerEntry."Entry No.";
          SalesCrMemoHeader.MODIFY;
        END;
    END;
    
    OnAfterUpdatePostedSalesDocument(DocumentType,DocumentNo,SuppressCommit); <=====================
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterUpdateVATOnLines>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<UpdateVATOnLines>
    Code lines:
    ...
            END;
          END;
        UNTIL NEXT = 0;
    END;
    
    OnAfterUpdateVATOnLines(SalesHeader,SalesLine,VATAmountLine,DocumentType); <=====================
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeCreditMemo>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<CreditMemo>
    Code lines:
    OnBeforeCreditMemo(SalesHeader,Handled); <=====================
    IF NOT Handled THEN
      Code(SalesHeader,1);
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeInvoice>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<Invoice>
    Code lines:
    OnBeforeInvoice(SalesHeader,Handled); <=====================
    IF NOT Handled THEN
      Code(SalesHeader,0);
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforePostBalancingEntry>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<PostBalancingEntry>
    Code lines:
    ...
      Correction := (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
    
      "Applies-to Doc. Type" := DocType;
      "Applies-to Doc. No." := DocNo;
    
      OnBeforePostBalancingEntry(GenJnlLine,CustLedgEntry,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit); <=====================
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostBalancingEntry(GenJnlLine,CustLedgEntry,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit);
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforePostCustomerEntry>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<PostCustomerEntry>
    Code lines:
    ...
      "Sales/Purch. (LCY)" := -TotalPrepmtInvLineBufferLCY.Amount;
      "Profit (LCY)" := -TotalPrepmtInvLineBufferLCY.Amount;
    
      Correction := (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
    
      OnBeforePostCustomerEntry(GenJnlLine,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit); <=====================
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostCustomerEntry(GenJnlLine,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit);
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforePostPrepayments>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<Code>
    Code lines:
    OnBeforePostPrepayments(SalesHeader2,DocumentType,SuppressCommit); <=====================
    
    SalesHeader := SalesHeader2;
    GLSetup.GET;
    SalesSetup.GET;
    WITH SalesHeader DO BEGIN
      CheckPrepmtDoc(SalesHeader,DocumentType);
    
      UpdateDocNos(SalesHeader,DocumentType,GenJnlLineDocNo,PostingNoSeriesCode);
    
    ...
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforePostPrepmtInvLineBuffer>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<PostPrepmtInvLineBuffer>
    Code lines:
    ...
      IF NOT PrepmtInvLineBuffer.Adjustment THEN
        "Gen. Posting Type" := "Gen. Posting Type"::Sale;
      Correction :=
        (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
    
      OnBeforePostPrepmtInvLineBuffer(GenJnlLine,PrepmtInvLineBuffer,SuppressCommit); <=====================
      RunGenJnlPostLine(GenJnlLine);
      OnAfterPostPrepmtInvLineBuffer(GenJnlLine,PrepmtInvLineBuffer,SuppressCommit);
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeSalesCrMemoHeaderInsert>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<InsertSalesCrMemoHeader>
    Code lines:
    ...
      SalesCrMemoHeader."No. Printed" := 0;
      SalesCrMemoHeader."Prepayment Credit Memo" := TRUE;
      SalesCrMemoHeader."Prepayment Order No." := "No.";
      SalesCrMemoHeader.Correction := GLSetup."Mark Cr. Memos as Corrections";
      SalesCrMemoHeader."No. Series" := PostingNoSeriesCode;
      OnBeforeSalesCrMemoHeaderInsert(SalesCrMemoHeader,SalesHeader,SuppressCommit); <=====================
      SalesCrMemoHeader.INSERT;
      OnAfterSalesCrMemoHeaderInsert(SalesCrMemoHeader,SalesHeader,SuppressCommit);
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeSalesCrMemoLineInsert>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<InsertSalesCrMemoLine>
    Code lines:
    ...
      SalesCrMemoLine."VAT Difference" := "VAT Difference";
      SalesCrMemoLine."Amount Including VAT" := "Amount Incl. VAT";
      SalesCrMemoLine."VAT Calculation Type" := "VAT Calculation Type";
      SalesCrMemoLine."VAT Base Amount" := "VAT Base Amount";
      SalesCrMemoLine."VAT Identifier" := "VAT Identifier";
      OnBeforeSalesCrMemoLineInsert(SalesCrMemoLine,SalesCrMemoHeader,PrepmtInvLineBuffer,SuppressCommit); <=====================
      SalesCrMemoLine.INSERT;
      OnAfterSalesCrMemoLineInsert(SalesCrMemoLine,SalesCrMemoHeader,PrepmtInvLineBuffer,SuppressCommit);
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeSalesInvHeaderInsert>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<InsertSalesInvHeader>
    Code lines:
    ...
      SalesInvHeader."User ID" := USERID;
      SalesInvHeader."No. Printed" := 0;
      SalesInvHeader."Prepayment Invoice" := TRUE;
      SalesInvHeader."Prepayment Order No." := "No.";
      SalesInvHeader."No. Series" := PostingNoSeriesCode;
      OnBeforeSalesInvHeaderInsert(SalesInvHeader,SalesHeader,SuppressCommit); <=====================
      SalesInvHeader.INSERT;
      OnAfterSalesInvHeaderInsert(SalesInvHeader,SalesHeader,SuppressCommit);
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeSalesInvLineInsert>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<InsertSalesInvLine>
    Code lines:
    ...
      SalesInvLine."VAT Difference" := "VAT Difference";
      SalesInvLine."Amount Including VAT" := "Amount Incl. VAT";
      SalesInvLine."VAT Calculation Type" := "VAT Calculation Type";
      SalesInvLine."VAT Base Amount" := "VAT Base Amount";
      SalesInvLine."VAT Identifier" := "VAT Identifier";
      OnBeforeSalesInvLineInsert(SalesInvLine,SalesInvHeader,PrepmtInvLineBuffer,SuppressCommit); <=====================
      SalesInvLine.INSERT;
      OnAfterSalesInvLineInsert(SalesInvLine,SalesInvHeader,PrepmtInvLineBuffer,SuppressCommit);
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterCalcVATAmountLines>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<CalcVATAmountLines>
    Code lines:
    ...
    
    VATAmountLine.UpdateLines(
      NewAmount,Currency,PurchHeader."Currency Factor",PurchHeader."Prices Including VAT",
      PurchHeader."VAT Base Discount %",PurchHeader."Tax Area Code",PurchHeader."Tax Liable",PurchHeader."Posting Date");
    
    OnAfterCalcVATAmountLines(PurchHeader,PurchLine,VATAmountLine,DocumentType); <=====================
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterCheckPrepmtDoc>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<CheckPrepmtDoc>
    Code lines:
    ...
      Vend.CheckBlockedVendOnDocs(Vend,TRUE);
      IF "Pay-to Vendor No." <> "Buy-from Vendor No." THEN BEGIN
        Vend.GET("Pay-to Vendor No.");
        Vend.CheckBlockedVendOnDocs(Vend,TRUE);
      END;
      OnAfterCheckPrepmtDoc(PurchHeader,DocumentType); <=====================
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterFillInvLineBuffer>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<FillInvLineBuffer>
    Code lines:
    ...
      "VAT Amount" := PurchLine."Prepmt. Amt. Incl. VAT" - PurchLine."Prepayment Amount";
      "VAT Amount (ACY)" := PurchLine."Prepmt. Amt. Incl. VAT" - PurchLine."Prepayment Amount";
      "VAT Base Before Pmt. Disc." := PurchLine."Prepayment Amount";
    END;
    
    OnAfterFillInvLineBuffer(PrepmtInvLineBuf,PurchLine,SuppressCommit); <=====================
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterInsertInvoiceRounding>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<InsertInvoiceRounding>
    Code lines:
    ...
        "VAT Amount (ACY)" := PurchLine."Amount Including VAT" - PurchLine."Line Amount";
      END;
      EXIT(TRUE);
    END;
    
    OnAfterInsertInvoiceRounding(PurchHeader,PrepmtInvLineBuf,TotalPrepmtInvLineBuf,PrevLineNo); <=====================
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPostBalancingEntry>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<PostBalancingEntry>
    Code lines:
    ...
      "Applies-to Doc. Type" := DocType;
      "Applies-to Doc. No." := DocNo;
    
      OnBeforePostBalancingEntry(GenJnlLine,VendLedgEntry,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit);
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostBalancingEntry(GenJnlLine,VendLedgEntry,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit); <=====================
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPostPrepayments>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<Code>
    Code lines:
    ...
    END;
    
    PurchHeader2 := PurchHeader;
    PurchHeader2.TriggerOnAfterPostPurchaseDoc(GenJnlPostLine,'','',PurchInvHeader."No.",PurchCrMemoHeader."No.");
    
    OnAfterPostPrepayments(PurchHeader2,DocumentType,SuppressCommit,PurchInvHeader,PurchCrMemoHeader); <=====================
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPostPrepmtInvLineBuffer>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<PostPrepmtInvLineBuffer>
    Code lines:
    ...
      IF NOT PrepmtInvLineBuffer.Adjustment THEN
        "Gen. Posting Type" := "Gen. Posting Type"::Purchase;
    
      OnBeforePostPrepmtInvLineBuffer(GenJnlLine,PrepmtInvLineBuffer,SuppressCommit);
      RunGenJnlPostLine(GenJnlLine);
      OnAfterPostPrepmtInvLineBuffer(GenJnlLine,PrepmtInvLineBuffer,SuppressCommit); <=====================
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPostVendorEntry>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<PostVendorEntry>
    Code lines:
    ...
    
      Correction := (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
    
      OnBeforePostVendorEntry(GenJnlLine,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit);
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostVendorEntry(GenJnlLine,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit); <=====================
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPurchCrMemoHeaderInsert>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<InsertPurchCrMemoHeader>
    Code lines:
    ...
      PurchCrMemoHdr."Prepayment Order No." := "No.";
      PurchCrMemoHdr.Correction := GLSetup."Mark Cr. Memos as Corrections";
      PurchCrMemoHdr."No. Series" := PostingNoSeriesCode;
      OnBeforePurchCrMemoHeaderInsert(PurchCrMemoHdr,PurchHeader,SuppressCommit);
      PurchCrMemoHdr.INSERT;
      OnAfterPurchCrMemoHeaderInsert(PurchCrMemoHdr,PurchHeader,SuppressCommit); <=====================
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPurchCrMemoLineInsert>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<InsertPurchCrMemoLine>
    Code lines:
    ...
      PurchCrMemoLine."VAT Identifier" := "VAT Identifier";
      PurchCrMemoLine."Job No." := "Job No.";
      PurchCrMemoLine."Job Task No." := "Job Task No.";
      OnBeforePurchCrMemoLineInsert(PurchCrMemoLine,PurchCrMemoHdr,PrepmtInvLineBuffer,SuppressCommit);
      PurchCrMemoLine.INSERT;
      OnAfterPurchCrMemoLineInsert(PurchCrMemoLine,PurchCrMemoHdr,PrepmtInvLineBuffer,SuppressCommit); <=====================
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPurchInvHeaderInsert>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<InsertPurchInvHeader>
    Code lines:
    ...
      PurchInvHeader."Prepayment Invoice" := TRUE;
      PurchInvHeader."Prepayment Order No." := "No.";
      PurchInvHeader."No. Series" := PostingNoSeriesCode;
      OnBeforePurchInvHeaderInsert(PurchInvHeader,PurchHeader,SuppressCommit);
      PurchInvHeader.INSERT;
      OnAfterPurchInvHeaderInsert(PurchInvHeader,PurchHeader,SuppressCommit); <=====================
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPurchInvLineInsert>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<InsertPurchInvLine>
    Code lines:
    ...
      PurchInvLine."VAT Identifier" := "VAT Identifier";
      PurchInvLine."Job No." := "Job No.";
      PurchInvLine."Job Task No." := "Job Task No.";
      OnBeforePurchInvLineInsert(PurchInvLine,PurchInvHeader,PrepmtInvLineBuffer,SuppressCommit);
      PurchInvLine.INSERT;
      OnAfterPurchInvLineInsert(PurchInvLine,PurchInvHeader,PrepmtInvLineBuffer,SuppressCommit); <=====================
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterRoundAmounts>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<RoundAmounts>
    Code lines:
    ...
          "VAT Base Amount" := Amount;
      END;
    
    TotalPrepmtInvLineBufLCY.IncrAmounts(PrepmtInvLineBuf);
    
    OnAfterRoundAmounts(PurchHeader,PrepmtInvLineBuf,TotalPrepmtInvLineBuf,TotalPrepmtInvLineBufLCY); <=====================
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterUpdatePostedPurchDocument>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<UpdatePostedPurchaseDocument>
    Code lines:
    ...
          PurchCrMemoHdr."Vendor Ledger Entry No." := VendorLedgerEntry."Entry No.";
          PurchCrMemoHdr.MODIFY;
        END;
    END;
    
    OnAfterUpdatePostedPurchDocument(DocumentType,DocumentNo,SuppressCommit); <=====================
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterUpdateVATOnLines>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<UpdateVATOnLines>
    Code lines:
    ...
            END;
          END;
        UNTIL NEXT = 0;
    END;
    
    OnAfterUpdateVATOnLines(PurchHeader,PurchLine,VATAmountLine,DocumentType); <=====================
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforeCreditMemo>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<CreditMemo>
    Code lines:
    OnBeforeCreditMemo(PurchHeader,Handled); <=====================
    IF NOT Handled THEN
      Code(PurchHeader,1);
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforeInvoice>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<Invoice>
    Code lines:
    OnBeforeInvoice(PurchHeader,Handled); <=====================
    IF NOT Handled THEN
      Code(PurchHeader,0);
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePostBalancingEntry>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<PostBalancingEntry>
    Code lines:
    ...
      Correction := (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
    
      "Applies-to Doc. Type" := DocType;
      "Applies-to Doc. No." := DocNo;
    
      OnBeforePostBalancingEntry(GenJnlLine,VendLedgEntry,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit); <=====================
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostBalancingEntry(GenJnlLine,VendLedgEntry,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit);
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePostPrepayments>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<Code>
    Code lines:
    OnBeforePostPrepayments(PurchHeader2,DocumentType,SuppressCommit); <=====================
    
    PurchHeader := PurchHeader2;
    GLSetup.GET;
    PurchSetup.GET;
    WITH PurchHeader DO BEGIN
      CheckPrepmtDoc(PurchHeader,DocumentType);
    
      UpdateDocNos(PurchHeader,DocumentType,GenJnlLineDocNo,PostingNoSeriesCode);
    
    ...
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePostPrepmtInvLineBuffer>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<PostPrepmtInvLineBuffer>
    Code lines:
    ...
    
      Correction := (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
      IF NOT PrepmtInvLineBuffer.Adjustment THEN
        "Gen. Posting Type" := "Gen. Posting Type"::Purchase;
    
      OnBeforePostPrepmtInvLineBuffer(GenJnlLine,PrepmtInvLineBuffer,SuppressCommit); <=====================
      RunGenJnlPostLine(GenJnlLine);
      OnAfterPostPrepmtInvLineBuffer(GenJnlLine,PrepmtInvLineBuffer,SuppressCommit);
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePostVendorEntry>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<PostVendorEntry>
    Code lines:
    ...
      "Sales/Purch. (LCY)" := -TotalPrepmtInvLineBufferLCY.Amount;
      "Profit (LCY)" := -TotalPrepmtInvLineBufferLCY.Amount;
    
      Correction := (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
    
      OnBeforePostVendorEntry(GenJnlLine,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit); <=====================
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostVendorEntry(GenJnlLine,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit);
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePurchCrMemoHeaderInsert>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<InsertPurchCrMemoHeader>
    Code lines:
    ...
      PurchCrMemoHdr."No. Printed" := 0;
      PurchCrMemoHdr."Prepayment Credit Memo" := TRUE;
      PurchCrMemoHdr."Prepayment Order No." := "No.";
      PurchCrMemoHdr.Correction := GLSetup."Mark Cr. Memos as Corrections";
      PurchCrMemoHdr."No. Series" := PostingNoSeriesCode;
      OnBeforePurchCrMemoHeaderInsert(PurchCrMemoHdr,PurchHeader,SuppressCommit); <=====================
      PurchCrMemoHdr.INSERT;
      OnAfterPurchCrMemoHeaderInsert(PurchCrMemoHdr,PurchHeader,SuppressCommit);
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePurchCrMemoLineInsert>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<InsertPurchCrMemoLine>
    Code lines:
    ...
      PurchCrMemoLine."VAT Calculation Type" := "VAT Calculation Type";
      PurchCrMemoLine."VAT Base Amount" := "VAT Base Amount";
      PurchCrMemoLine."VAT Identifier" := "VAT Identifier";
      PurchCrMemoLine."Job No." := "Job No.";
      PurchCrMemoLine."Job Task No." := "Job Task No.";
      OnBeforePurchCrMemoLineInsert(PurchCrMemoLine,PurchCrMemoHdr,PrepmtInvLineBuffer,SuppressCommit); <=====================
      PurchCrMemoLine.INSERT;
      OnAfterPurchCrMemoLineInsert(PurchCrMemoLine,PurchCrMemoHdr,PrepmtInvLineBuffer,SuppressCommit);
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePurchInvHeaderInsert>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<InsertPurchInvHeader>
    Code lines:
    ...
      PurchInvHeader."User ID" := USERID;
      PurchInvHeader."No. Printed" := 0;
      PurchInvHeader."Prepayment Invoice" := TRUE;
      PurchInvHeader."Prepayment Order No." := "No.";
      PurchInvHeader."No. Series" := PostingNoSeriesCode;
      OnBeforePurchInvHeaderInsert(PurchInvHeader,PurchHeader,SuppressCommit); <=====================
      PurchInvHeader.INSERT;
      OnAfterPurchInvHeaderInsert(PurchInvHeader,PurchHeader,SuppressCommit);
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePurchInvLineInsert>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<InsertPurchInvLine>
    Code lines:
    ...
      PurchInvLine."VAT Calculation Type" := "VAT Calculation Type";
      PurchInvLine."VAT Base Amount" := "VAT Base Amount";
      PurchInvLine."VAT Identifier" := "VAT Identifier";
      PurchInvLine."Job No." := "Job No.";
      PurchInvLine."Job Task No." := "Job Task No.";
      OnBeforePurchInvLineInsert(PurchInvLine,PurchInvHeader,PrepmtInvLineBuffer,SuppressCommit); <=====================
      PurchInvLine.INSERT;
      OnAfterPurchInvLineInsert(PurchInvLine,PurchInvHeader,PrepmtInvLineBuffer,SuppressCommit);
    END;
Codeunit<Job Queue Dispatcher>.PROCEDURE<OnAfterHandleRequest>
  Raised in: Codeunit<Job Queue Dispatcher>.PROCEDURE<HandleRequest>
    Code lines:
    ...
    
      IF DoesExistLocked THEN
        FinalizeRun;
    END;
    
    OnAfterHandleRequest(JobQueueEntry,WasSuccess); <=====================
Codeunit<Job Queue Dispatcher>.PROCEDURE<OnBeforeHandleRequest>
  Raised in: Codeunit<Job Queue Dispatcher>.PROCEDURE<HandleRequest>
    Code lines:
    JobQueueEntry.RefreshLocked;
    IF NOT JobQueueEntry.IsReadyToStart THEN
      EXIT;
    
    OnBeforeHandleRequest(JobQueueEntry); <=====================
    
    WITH JobQueueEntry DO BEGIN
      IF Status IN [Status::Ready,Status::"On Hold with Inactivity Timeout"] THEN BEGIN
        Status := Status::"In Process";
        "User Session Started" := CURRENTDATETIME;
    ...
Codeunit<Job Queue Dispatcher>.PROCEDURE<OnBeforeWaitForOthersWithSameCategory>
  Raised in: Codeunit<Job Queue Dispatcher>.PROCEDURE<WaitForOthersWithSameCategory>
    Code lines:
    OnBeforeWaitForOthersWithSameCategory(CurrJobQueueEntry,JobQueueEntry); <=====================
    
    IF CurrJobQueueEntry."Job Queue Category Code" = '' THEN
      EXIT(FALSE);
    
    // Use the Job Queue Category as a semaphore so only one checks at the time.
    JobQueueCategory.LOCKTABLE;
    IF NOT JobQueueCategory.GET(CurrJobQueueEntry."Job Queue Category Code") THEN
      EXIT(FALSE);
    
    ...
Codeunit<Job Queue Start Codeunit>.PROCEDURE<OnAfterRun>
  Raised in: Codeunit<Job Queue Start Codeunit>.<OnRun>
    Code lines:
    ...
    END;
    
    // Commit any remaining transactions from the target codeunit\report. This is necessary due
    // to buffered record insertion which may not have surfaced errors in CODEUNIT.RUN above.
    COMMIT;
    OnAfterRun(Rec); <=====================
Codeunit<Job Queue Start Codeunit>.PROCEDURE<OnBeforeRunReport>
  Raised in: Codeunit<Job Queue Start Codeunit>.PROCEDURE<RunReport>
    Code lines:
    IsHandled := FALSE;
    OnBeforeRunReport(ReportID,JobQueueEntry,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    ReportInbox.INIT;
    ReportInbox."User ID" := JobQueueEntry."User ID";
    ReportInbox."Job Queue Log Entry ID" := JobQueueEntry.ID;
    ReportInbox."Report ID" := ReportID;
    ReportInbox.Description := JobQueueEntry.Description;
    ...
Codeunit<AutoFormatManagement>.PROCEDURE<OnAfterAutoFormatTranslate>
  Raised in: Codeunit<AutoFormatManagement>.PROCEDURE<DoAutoFormatTranslate>
    Code lines:
    Translation := AutoFormatTranslate(AutoFormatType,AutoFormatExpr);
    OnAfterAutoFormatTranslate(AutoFormatType,AutoFormatExpr,Translation); <=====================
Codeunit<Job Queue Error Handler>.PROCEDURE<OnAfterLogError>
  Raised in: Codeunit<Job Queue Error Handler>.PROCEDURE<LogError>
    Code lines:
    ...
      END ELSE BEGIN
        JobQueueEntry.InsertLogEntry(JobQueueLogEntry);
        JobQueueEntry.FinalizeLogEntry(JobQueueLogEntry);
      END;
    END;
    OnAfterLogError(JobQueueEntry); <=====================
Codeunit<Job Queue Error Handler>.PROCEDURE<OnBeforeLogError>
  Raised in: Codeunit<Job Queue Error Handler>.PROCEDURE<LogError>
    Code lines:
    OnBeforeLogError(JobQueueLogEntry,JobQueueEntry); <=====================
    
    WITH JobQueueLogEntry DO BEGIN
      SETRANGE(ID,JobQueueEntry.ID);
      SETRANGE(Status,Status::"In Process");
      IF FINDFIRST THEN BEGIN
        SetErrorMessage(JobQueueEntry.GetErrorMessage);
        SetErrorCallStack(GETLASTERRORCALLSTACK);
        Status := Status::Error;
        MODIFY;
    ...
Codeunit<Job Queue - Enqueue>.PROCEDURE<OnAfterEnqueueJobQueueEntry>
  Raised in: Codeunit<Job Queue - Enqueue>.PROCEDURE<EnqueueJobQueueEntry>
    Code lines:
    ...
          Status := Status::Ready;
        MODIFY;
      END;
    END;
    
    OnAfterEnqueueJobQueueEntry(JobQueueEntry); <=====================
Codeunit<Job Queue - Enqueue>.PROCEDURE<OnBeforeJobQueueScheduleTask>
  Raised in: Codeunit<Job Queue - Enqueue>.PROCEDURE<CanScheduleTask>
    Code lines:
    OnBeforeJobQueueScheduleTask(JobQueueEntry,DoNotScheduleTask); <=====================
    EXIT(NOT DoNotScheduleTask);
Codeunit<Job Queue - Send Notification>.PROCEDURE<OnAfterRun>
  Raised in: Codeunit<Job Queue - Send Notification>.<OnRun>
    Code lines:
    ...
    RecordLink.Notify := TRUE;
    RecordLink."To User ID" := "User ID";
    SetText(Rec,RecordLink);
    RecordLink.INSERT;
    
    OnAfterRun(Rec,RecordLink); <=====================
Codeunit<Change Global Dimensions>.PROCEDURE<OnAfterGetObjectNoList>
  Raised in: Codeunit<Change Global Dimensions>.PROCEDURE<FindTablesWithDims>
    Code lines:
    DimensionManagement.DefaultDimObjectNoWithGlobalDimsList(TempAllObjWithCaption);
    DimensionManagement.GlobalDimObjectNoList(TempAllObjWithCaption);
    DimensionManagement.JobTaskDimObjectNoList(TempAllObjWithCaption);
    OnAfterGetObjectNoList(TempAllObjWithCaption); <=====================
    EXIT(TempAllObjWithCaption.FINDSET);
Codeunit<Change Global Dimensions>.PROCEDURE<OnBeforeScheduleTask>
  Raised in: Codeunit<Change Global Dimensions>.PROCEDURE<ScheduleJobForTable>
    Code lines:
    WITH ChangeGlobalDimLogEntry DO BEGIN
      OnBeforeScheduleTask("Table ID",DoNotScheduleTask,TaskID); <=====================
      IF DoNotScheduleTask THEN
        "Task ID" := TaskID
      ELSE BEGIN
        CancelTask;
        "Task ID" :=
          TASKSCHEDULER.CREATETASK(
            CODEUNIT::"Change Global Dimensions",CODEUNIT::"Change Global Dim Err. Handler",
            TRUE,COMPANYNAME,StartNotBefore,RECORDID);
    ...
Codeunit<Change Global Dimensions>.PROCEDURE<OnCountingActiveSessions>
  Raised in: Codeunit<Change Global Dimensions>.PROCEDURE<IsCurrentSessionActiveOnly>
    Code lines:
    OnCountingActiveSessions(Result); <=====================
    IF Result THEN
      EXIT(TRUE);
    // Ignore session types: Web Service,Client Service,NAS,Management Client
    ActiveSession.SETFILTER(
      "Client Type",'<>%1&<>%2&<>%3&<>%4',
      ActiveSession."Client Type"::"Web Service",ActiveSession."Client Type"::"Client Service",
      ActiveSession."Client Type"::NAS,ActiveSession."Client Type"::"Management Client");
    ActiveSession.SETFILTER("Session ID",'<>%1',SESSIONID);
    ActiveSession.SETRANGE("Server Instance ID",SERVICEINSTANCEID);
Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterGetDatabaseTableTriggerSetup>
  Raised in: Codeunit<GlobalTriggerManagement>.PROCEDURE<GetDatabaseTableTriggerSetup>
    Code lines:
    ChangeLogMgt.GetDatabaseTableTriggerSetup(TableId,OnDatabaseInsert,OnDatabaseModify,OnDatabaseDelete,OnDatabaseRename);
    IntegrationManagement.GetDatabaseTableTriggerSetup(TableId,OnDatabaseInsert,OnDatabaseModify,OnDatabaseDelete,OnDatabaseRename);
    OnAfterGetDatabaseTableTriggerSetup(TableId,OnDatabaseInsert,OnDatabaseModify,OnDatabaseDelete,OnDatabaseRename); <=====================
Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterGetGlobalTableTriggerMask>
  Raised in: Codeunit<GlobalTriggerManagement>.PROCEDURE<GetGlobalTableTriggerMask>
    Code lines:
    OnAfterGetGlobalTableTriggerMask(TableID,TableTriggerMask); <=====================
Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnDatabaseDelete>
  Raised in: Codeunit<GlobalTriggerManagement>.PROCEDURE<OnDatabaseDelete>
    Code lines:
    OnBeforeOnDatabaseDelete(RecRef);
    ChangeLogMgt.LogDeletion(RecRef);
    IntegrationManagement.OnDatabaseDelete(RecRef);
    OnAfterOnDatabaseDelete(RecRef); <=====================
Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnDatabaseInsert>
  Raised in: Codeunit<GlobalTriggerManagement>.PROCEDURE<OnDatabaseInsert>
    Code lines:
    OnBeforeOnDatabaseInsert(RecRef);
    ChangeLogMgt.LogInsertion(RecRef);
    IntegrationManagement.OnDatabaseInsert(RecRef);
    OnAfterOnDatabaseInsert(RecRef); <=====================
Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnDatabaseModify>
  Raised in: Codeunit<GlobalTriggerManagement>.PROCEDURE<OnDatabaseModify>
    Code lines:
    OnBeforeOnDatabaseModify(RecRef);
    ChangeLogMgt.LogModification(RecRef);
    IntegrationManagement.OnDatabaseModify(RecRef);
    OnAfterOnDatabaseModify(RecRef); <=====================
Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnDatabaseRename>
  Raised in: Codeunit<GlobalTriggerManagement>.PROCEDURE<OnDatabaseRename>
    Code lines:
    OnBeforeOnDatabaseRename(RecRef,xRecRef);
    ChangeLogMgt.LogRename(RecRef,xRecRef);
    IntegrationManagement.OnDatabaseRename(RecRef,xRecRef);
    OnAfterOnDatabaseRename(RecRef,xRecRef); <=====================
Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnGlobalDelete>
  Raised in: Codeunit<GlobalTriggerManagement>.PROCEDURE<OnGlobalDelete>
    Code lines:
    OnAfterOnGlobalDelete(RecRef); <=====================
Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnGlobalInsert>
  Raised in: Codeunit<GlobalTriggerManagement>.PROCEDURE<OnGlobalInsert>
    Code lines:
    OnAfterOnGlobalInsert(RecRef); <=====================
Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnGlobalModify>
  Raised in: Codeunit<GlobalTriggerManagement>.PROCEDURE<OnGlobalModify>
    Code lines:
    OnAfterOnGlobalModify(RecRef,xRecRef); <=====================
Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnGlobalRename>
  Raised in: Codeunit<GlobalTriggerManagement>.PROCEDURE<OnGlobalRename>
    Code lines:
    OnAfterOnGlobalRename(RecRef,xRecRef); <=====================
Codeunit<GlobalTriggerManagement>.PROCEDURE<OnBeforeOnDatabaseDelete>
  Raised in: Codeunit<GlobalTriggerManagement>.PROCEDURE<OnDatabaseDelete>
    Code lines:
    OnBeforeOnDatabaseDelete(RecRef); <=====================
    ChangeLogMgt.LogDeletion(RecRef);
    IntegrationManagement.OnDatabaseDelete(RecRef);
    OnAfterOnDatabaseDelete(RecRef);
Codeunit<GlobalTriggerManagement>.PROCEDURE<OnBeforeOnDatabaseInsert>
  Raised in: Codeunit<GlobalTriggerManagement>.PROCEDURE<OnDatabaseInsert>
    Code lines:
    OnBeforeOnDatabaseInsert(RecRef); <=====================
    ChangeLogMgt.LogInsertion(RecRef);
    IntegrationManagement.OnDatabaseInsert(RecRef);
    OnAfterOnDatabaseInsert(RecRef);
Codeunit<GlobalTriggerManagement>.PROCEDURE<OnBeforeOnDatabaseModify>
  Raised in: Codeunit<GlobalTriggerManagement>.PROCEDURE<OnDatabaseModify>
    Code lines:
    OnBeforeOnDatabaseModify(RecRef); <=====================
    ChangeLogMgt.LogModification(RecRef);
    IntegrationManagement.OnDatabaseModify(RecRef);
    OnAfterOnDatabaseModify(RecRef);
Codeunit<GlobalTriggerManagement>.PROCEDURE<OnBeforeOnDatabaseRename>
  Raised in: Codeunit<GlobalTriggerManagement>.PROCEDURE<OnDatabaseRename>
    Code lines:
    OnBeforeOnDatabaseRename(RecRef,xRecRef); <=====================
    ChangeLogMgt.LogRename(RecRef,xRecRef);
    IntegrationManagement.OnDatabaseRename(RecRef,xRecRef);
    OnAfterOnDatabaseRename(RecRef,xRecRef);
Codeunit<SaaS Log In Management>.PROCEDURE<OnSuppressApprovalForTrial>
  Raised in: Codeunit<SaaS Log In Management>.PROCEDURE<ShowTermsAndConditionsOnOpenCompany>
    Code lines:
    ...
        EXIT;
    
    IF NOT GUIALLOWED THEN BEGIN
      IF CURRENTCLIENTTYPE IN [CLIENTTYPE::OData,CLIENTTYPE::ODataV4] THEN BEGIN
        SuppressApprovalForTrial := FALSE;
        OnSuppressApprovalForTrial(SuppressApprovalForTrial); <=====================
        IF NOT SuppressApprovalForTrial THEN
          ERROR(RequireUserApprovalForTrialErr,Company.Name);
      END;
      EXIT;
    ...
Codeunit<WordManagement>.PROCEDURE<OnAddFieldsToMergeSource>
  Raised in: Codeunit<WordManagement>.PROCEDURE<AddFieldsToMergeSource>
    Code lines:
    ...
      AddNewEntry(CompanyInfo."Bank Branch No.",'');
      AddNewEntry(CompanyInfo."Bank Name",'');
      AddNewEntry(CompanyInfo."Bank Account No.",'');
      AddNewEntry(CompanyInfo."Giro No.",'');
      AddNewEntry(COPYSTR(FaxMailToValue,1,MAXSTRLEN(Name)),'');
      OnAddFieldsToMergeSource(TempNameValueBuffer,Salesperson,Country,Contact,CompanyInfo,SegLine,InteractLogEntry); <=====================
    
      RESET;
      IF FIND('-') THEN
        REPEAT
    ...
Codeunit<WordManagement>.PROCEDURE<OnBeforeCheckCanRunWord>
  Raised in: Codeunit<WordManagement>.PROCEDURE<CanRunWordApp>
    Code lines:
    OnBeforeCheckCanRunWord(CanRunWord,CanRunWordModified); <=====================
    IF CanRunWordModified THEN
      EXIT(CanRunWord);
    
    WordApplication := WordHelper.GetApplication(ErrorMessage);
    IF NOT ISNULL(WordApplication) THEN BEGIN
      CanRunWord := TRUE;
      WordHelper.CallQuit(WordApplication,FALSE);
      CLEAR(WordApplication);
    END;
Codeunit<WordManagement>.PROCEDURE<OnCreateHeaderAddFields>
  Raised in: Codeunit<WordManagement>.PROCEDURE<CreateHeader>
    Code lines:
    ...
      AddNewEntry(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Fax No."),'');
      AddNewEntry(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Bank Branch No."),'');
      AddNewEntry(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Bank Name"),'');
      AddNewEntry(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Bank Account No."),'');
      AddNewEntry(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Giro No."),'');
      OnCreateHeaderAddFields(TempNameValueBuffer,Salesperson,Country,Contact,CompanyInfo,SegLine,InteractionLogEntry); <=====================
      GLOBALLANGUAGE := MainLanguage;
      AddNewEntry(Text015,'');
    
      RESET;
    ...
Codeunit<CustVendBank-Update>.PROCEDURE<OnAfterUpdateBankAccount>
  Raised in: Codeunit<CustVendBank-Update>.PROCEDURE<UpdateBankAccount>
    Code lines:
    ...
      VALIDATE("Currency Code",Cont."Currency Code");
      TRANSFERFIELDS(Cont);
      "No." := ContBusRel."No.";
      "No. Series" := NoSeries;
      "Our Contact Code" := OurContactCode;
      OnAfterUpdateBankAccount(BankAcc,Cont); <=====================
      MODIFY;
    END;
Codeunit<CustVendBank-Update>.PROCEDURE<OnAfterUpdateCustomer>
  Raised in: Codeunit<CustVendBank-Update>.PROCEDURE<UpdateCustomer>
    Code lines:
    ...
      NoSeries := "No. Series";
      VATRegNo := "VAT Registration No.";
      TRANSFERFIELDS(Cont);
      "No." := ContBusRel."No.";
      "No. Series" := NoSeries;
      OnAfterUpdateCustomer(Cust,Cont); <=====================
      MODIFY;
      IF ("VAT Registration No." <> '') AND ("VAT Registration No." <> VATRegNo) THEN
        VATRegistrationLogMgt.LogCustomer(Cust);
    END;
Codeunit<CustVendBank-Update>.PROCEDURE<OnAfterUpdateVendor>
  Raised in: Codeunit<CustVendBank-Update>.PROCEDURE<UpdateVendor>
    Code lines:
    ...
      VATRegNo := "VAT Registration No.";
      TRANSFERFIELDS(Cont);
      "No." := ContBusRel."No.";
      "No. Series" := NoSeries;
      "Purchaser Code" := PurchaserCode;
      OnAfterUpdateVendor(Vend,Cont); <=====================
      MODIFY;
      IF ("VAT Registration No." <> '') AND ("VAT Registration No." <> VATRegNo) THEN
        VATRegistrationLogMgt.LogVendor(Vend);
    END;
Codeunit<CustCont-Update>.PROCEDURE<OnAfterTransferFieldsFromCustToCont>
  Raised in: Codeunit<CustCont-Update>.PROCEDURE<OnModify>
    Code lines:
    ...
    
    ContNo := Cont."No.";
    NoSeries := Cont."No. Series";
    Cont.VALIDATE("E-Mail",Cust."E-Mail");
    Cont.TRANSFERFIELDS(Cust);
    OnAfterTransferFieldsFromCustToCont(Cont,Cust); <=====================
    Cont."No." := ContNo ;
    Cont."No. Series" := NoSeries;
    Cont.VALIDATE(Name);
    Cont.OnModify(OldCont);
    ...
  Raised in: Codeunit<CustCont-Update>.PROCEDURE<InsertNewContact>
    Code lines:
    ...
    END;
    
    WITH Cont DO BEGIN
      INIT;
      TRANSFERFIELDS(Cust);
      OnAfterTransferFieldsFromCustToCont(Cont,Cust); <=====================
      VALIDATE(Name);
      VALIDATE("E-Mail");
      "No." := '';
      "No. Series" := '';
    ...
Codeunit<SegCriteriaManagement>.PROCEDURE<OnAfterSegCriteriaFilter>
  Raised in: Codeunit<SegCriteriaManagement>.PROCEDURE<SegCriteriaFilter>
    Code lines:
    ...
          ValueEntry.SETVIEW(View);
          EXIT(ValueEntry.GETFILTERS);
        END;
    END;
    
    OnAfterSegCriteriaFilter(TableNo,View,Filters); <=====================
    EXIT(Filters);
Codeunit<ArchiveManagement>.PROCEDURE<OnAfterAutoArchivePurchDocument>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<AutoArchivePurchDocument>
    Code lines:
    ...
            THEN
              ArchPurchDocumentNoConfirm(PurchaseHeader);
          END;
      END;
    
    OnAfterAutoArchivePurchDocument(PurchaseHeader); <=====================
Codeunit<ArchiveManagement>.PROCEDURE<OnAfterAutoArchiveSalesDocument>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<AutoArchiveSalesDocument>
    Code lines:
    ...
            THEN
              ArchSalesDocumentNoConfirm(SalesHeader);
          END;
      END;
    
    OnAfterAutoArchiveSalesDocument(SalesHeader); <=====================
Codeunit<ArchiveManagement>.PROCEDURE<OnAfterPurchHeaderArchiveInsert>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<StorePurchDocument>
    Code lines:
    ...
        DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."No.",PurchHeader."Doc. No. Occurrence");
    PurchHeaderArchive."Interaction Exist" := InteractionExist;
    RecordLinkManagement.CopyLinks(PurchHeader,PurchHeaderArchive);
    OnBeforePurchHeaderArchiveInsert(PurchHeaderArchive,PurchHeader);
    PurchHeaderArchive.INSERT;
    OnAfterPurchHeaderArchiveInsert(PurchHeaderArchive,PurchHeader); <=====================
    
    StorePurchDocumentComments(
      PurchHeader."Document Type",PurchHeader."No.",
      PurchHeader."Doc. No. Occurrence",PurchHeaderArchive."Version No.");
    ...
Codeunit<ArchiveManagement>.PROCEDURE<OnAfterRestoreSalesLine>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<RestoreSalesLines>
    Code lines:
    ...
            SalesHeaderArchive."Version No.");
          RecordLinkManagement.CopyLinks(SalesLineArchive,SalesLine);
          OnAfterTransferFromArchToSalesLine(SalesLine,SalesLineArchive);
          MODIFY(TRUE);
        END;
        OnAfterRestoreSalesLine(SalesHeader,SalesLine,SalesHeaderArchive,SalesLineArchive); <=====================
      UNTIL SalesLineArchive.NEXT = 0;
Codeunit<ArchiveManagement>.PROCEDURE<OnAfterSalesHeaderArchiveInsert>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<StoreSalesDocument>
    Code lines:
    ...
        DATABASE::"Sales Header",SalesHeader."Document Type",SalesHeader."No.",SalesHeader."Doc. No. Occurrence");
    SalesHeaderArchive."Interaction Exist" := InteractionExist;
    RecordLinkManagement.CopyLinks(SalesHeader,SalesHeaderArchive);
    OnBeforeSalesHeaderArchiveInsert(SalesHeaderArchive,SalesHeader);
    SalesHeaderArchive.INSERT;
    OnAfterSalesHeaderArchiveInsert(SalesHeaderArchive,SalesHeader); <=====================
    
    StoreSalesDocumentComments(
      SalesHeader."Document Type",SalesHeader."No.",
      SalesHeader."Doc. No. Occurrence",SalesHeaderArchive."Version No.");
    ...
Codeunit<ArchiveManagement>.PROCEDURE<OnAfterStorePurchLineArchive>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<StorePurchDocument>
    Code lines:
    ...
        END;
        IF PurchLine."Deferral Code" <> '' THEN
          StoreDeferrals(DeferralUtilities.GetPurchDeferralDocType,PurchLine."Document Type",
            PurchLine."Document No.",PurchLine."Line No.",PurchHeader."Doc. No. Occurrence",PurchHeaderArchive."Version No.");
    
        OnAfterStorePurchLineArchive(PurchHeader,PurchLine,PurchHeaderArchive,PurchLineArchive); <=====================
      UNTIL PurchLine.NEXT = 0;
Codeunit<ArchiveManagement>.PROCEDURE<OnAfterStoreSalesLineArchive>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<StoreSalesDocument>
    Code lines:
    ...
        END;
        IF SalesLine."Deferral Code" <> '' THEN
          StoreDeferrals(DeferralUtilities.GetSalesDeferralDocType,SalesLine."Document Type",
            SalesLine."Document No.",SalesLine."Line No.",SalesHeader."Doc. No. Occurrence",SalesHeaderArchive."Version No.");
    
        OnAfterStoreSalesLineArchive(SalesHeader,SalesLine,SalesHeaderArchive,SalesLineArchive); <=====================
      UNTIL SalesLine.NEXT = 0;
Codeunit<ArchiveManagement>.PROCEDURE<OnAfterTransferFromArchToSalesHeader>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<RestoreSalesDocument>
    Code lines:
    ...
      SalesHeader."Shortcut Dimension 2 Code" := SalesHeaderArchive."Shortcut Dimension 2 Code";
      SalesHeader."Dimension Set ID" := SalesHeaderArchive."Dimension Set ID";
      RecordLinkManagement.CopyLinks(SalesHeaderArchive,SalesHeader);
    
      SalesHeader.LinkSalesDocWithOpportunity(OldOpportunityNo);
      OnAfterTransferFromArchToSalesHeader(SalesHeader,SalesHeaderArchive); <=====================
    
      SalesHeader.MODIFY(TRUE);
    
      RestoreSalesLines(SalesHeaderArchive,SalesHeader);
    ...
Codeunit<ArchiveManagement>.PROCEDURE<OnAfterTransferFromArchToSalesLine>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<RestoreSalesLines>
    Code lines:
    ...
            SalesLineArchive."Document No.",
            SalesLineArchive."Line No.",
            SalesHeaderArchive."Doc. No. Occurrence",
            SalesHeaderArchive."Version No.");
          RecordLinkManagement.CopyLinks(SalesLineArchive,SalesLine);
          OnAfterTransferFromArchToSalesLine(SalesLine,SalesLineArchive); <=====================
          MODIFY(TRUE);
        END;
        OnAfterRestoreSalesLine(SalesHeader,SalesLine,SalesHeaderArchive,SalesLineArchive);
      UNTIL SalesLineArchive.NEXT = 0;
Codeunit<ArchiveManagement>.PROCEDURE<OnBeforeCheckIfDocumentIsPartiallyPosted>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<RestoreSalesDocument>
    Code lines:
    ...
      ERROR(Text009,SalesHeaderArchive."Document Type",SalesHeaderArchive."No.");
    
    SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);
    
    DoCheck := TRUE;
    OnBeforeCheckIfDocumentIsPartiallyPosted(SalesHeaderArchive,DoCheck); <=====================
    
    IF (SalesHeader."Document Type" = SalesHeader."Document Type"::Order) AND DoCheck THEN BEGIN
      SalesShptHeader.RESET;
      SalesShptHeader.SETCURRENTKEY("Order No.");
    ...
Codeunit<ArchiveManagement>.PROCEDURE<OnBeforePurchHeaderArchiveInsert>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<StorePurchDocument>
    Code lines:
    ...
    PurchHeaderArchive."Time Archived" := TIME;
    PurchHeaderArchive."Version No." := GetNextVersionNo(
        DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."No.",PurchHeader."Doc. No. Occurrence");
    PurchHeaderArchive."Interaction Exist" := InteractionExist;
    RecordLinkManagement.CopyLinks(PurchHeader,PurchHeaderArchive);
    OnBeforePurchHeaderArchiveInsert(PurchHeaderArchive,PurchHeader); <=====================
    PurchHeaderArchive.INSERT;
    OnAfterPurchHeaderArchiveInsert(PurchHeaderArchive,PurchHeader);
    
    StorePurchDocumentComments(
    ...
Codeunit<ArchiveManagement>.PROCEDURE<OnBeforeRestoreSalesDocument>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<RestoreSalesDocument>
    Code lines:
    OnBeforeRestoreSalesDocument(SalesHeaderArchive,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT SalesHeader.GET(SalesHeaderArchive."Document Type",SalesHeaderArchive."No.") THEN
      ERROR(Text009,SalesHeaderArchive."Document Type",SalesHeaderArchive."No.");
    
    SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);
    
    DoCheck := TRUE;
    ...
Codeunit<ArchiveManagement>.PROCEDURE<OnBeforeSalesHeaderArchiveInsert>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<StoreSalesDocument>
    Code lines:
    ...
    SalesHeaderArchive."Time Archived" := TIME;
    SalesHeaderArchive."Version No." := GetNextVersionNo(
        DATABASE::"Sales Header",SalesHeader."Document Type",SalesHeader."No.",SalesHeader."Doc. No. Occurrence");
    SalesHeaderArchive."Interaction Exist" := InteractionExist;
    RecordLinkManagement.CopyLinks(SalesHeader,SalesHeaderArchive);
    OnBeforeSalesHeaderArchiveInsert(SalesHeaderArchive,SalesHeader); <=====================
    SalesHeaderArchive.INSERT;
    OnAfterSalesHeaderArchiveInsert(SalesHeaderArchive,SalesHeader);
    
    StoreSalesDocumentComments(
    ...
Codeunit<Integration Management>.PROCEDURE<OnDeleteIntegrationRecord>
  Raised in: Codeunit<Integration Management>.PROCEDURE<OnDatabaseDelete>
    Code lines:
    ...
        // Archive
        IntegrationRecordArchive.TRANSFERFIELDS(IntegrationRecord);
        IF IntegrationRecordArchive.INSERT THEN;
    
        IF NOT SkipDeletion THEN BEGIN
          OnDeleteIntegrationRecord(RecRef); <=====================
          IntegrationRecord."Deleted On" := TimeStamp;
        END;
    
        CLEAR(IntegrationRecord."Record ID");
    ...
Codeunit<Integration Management>.PROCEDURE<OnGetIntegrationActivated>
  Raised in: Codeunit<Integration Management>.PROCEDURE<GetIntegrationActivated>
    Code lines:
    OnGetIntegrationDisabled(IsSyncDisabled);
    IF IsSyncDisabled THEN
      EXIT(FALSE);
    IF NOT IntegrationIsActivated THEN BEGIN
      OnGetIntegrationActivated(IsSyncEnabled); <=====================
      IF IsSyncEnabled THEN
        IntegrationIsActivated := TRUE
      ELSE
        IntegrationIsActivated := IsCRMConnectionEnabled OR GraphSyncRunner.IsGraphSyncEnabled;
    END;
    ...
Codeunit<Integration Management>.PROCEDURE<OnGetIntegrationDisabled>
  Raised in: Codeunit<Integration Management>.PROCEDURE<GetIntegrationActivated>
    Code lines:
    OnGetIntegrationDisabled(IsSyncDisabled); <=====================
    IF IsSyncDisabled THEN
      EXIT(FALSE);
    IF NOT IntegrationIsActivated THEN BEGIN
      OnGetIntegrationActivated(IsSyncEnabled);
      IF IsSyncEnabled THEN
        IntegrationIsActivated := TRUE
      ELSE
        IntegrationIsActivated := IsCRMConnectionEnabled OR GraphSyncRunner.IsGraphSyncEnabled;
    END;
    ...
Codeunit<Integration Management>.PROCEDURE<OnGetPredefinedIdValue>
  Raised in: Codeunit<Integration Management>.PROCEDURE<InsertUpdateIntegrationRecord>
    Code lines:
    ...
          OnUpdateRelatedRecordIdFields(RecRef);
          MODIFY;
        END ELSE BEGIN
          RESET;
          INIT;
          OnGetPredefinedIdValue("Integration ID",RecRef,Handled); <=====================
          IF NOT Handled THEN
            "Integration ID" := CREATEGUID;
          "Record ID" := RecRef.RECORDID;
          "Table ID" := RecRef.NUMBER;
    ...
Codeunit<Integration Management>.PROCEDURE<OnIsIntegrationRecord>
  Raised in: Codeunit<Integration Management>.PROCEDURE<IsIntegrationRecord>
    Code lines:
    OnIsIntegrationRecord(TableID,isIntegrationRecord); <=====================
    IF isIntegrationRecord THEN
      EXIT(TRUE);
    EXIT(TableID IN
      [DATABASE::Resource,
       DATABASE::"Shipping Agent",
       DATABASE::"Salesperson/Purchaser",
       DATABASE::Customer,
       DATABASE::Vendor,
       DATABASE::Dimension,
    ...
Codeunit<Integration Management>.PROCEDURE<OnIsIntegrationRecordChild>
  Raised in: Codeunit<Integration Management>.PROCEDURE<IsIntegrationRecordChild>
    Code lines:
    OnIsIntegrationRecordChild(TableID,isIntegrationRecordChild); <=====================
    IF isIntegrationRecordChild THEN
      EXIT(TRUE);
    
    EXIT(TableID IN
      [DATABASE::"Sales Line",
       DATABASE::"Currency Exchange Rate",
       DATABASE::"Sales Invoice Line",
       DATABASE::"Sales Cr.Memo Line",
       DATABASE::"Contact Alt. Address",
    ...
Codeunit<Integration Management>.PROCEDURE<OnUpdateReferencedIdField>
  Raised in: Codeunit<Integration Management>.PROCEDURE<InsertUpdateIntegrationRecord>
    Code lines:
    IF IsIntegrationRecord(RecRef.NUMBER) THEN
      WITH IntegrationRecord DO BEGIN
        SETRANGE("Record ID",RecRef.RECORDID);
        IF FINDFIRST THEN BEGIN
          "Modified On" := IntegrationLastModified;
          OnUpdateReferencedIdField(RecRef,"Integration ID",Handled); <=====================
          OnUpdateRelatedRecordIdFields(RecRef);
          MODIFY;
        END ELSE BEGIN
          RESET;
    ...
  Raised in: Codeunit<Integration Management>.PROCEDURE<InsertUpdateIntegrationRecord>
    Code lines:
    IF IsIntegrationRecord(RecRef.NUMBER) THEN
      WITH IntegrationRecord DO BEGIN
        SETRANGE("Record ID",RecRef.RECORDID);
        IF FINDFIRST THEN BEGIN
          "Modified On" := IntegrationLastModified;
          OnUpdateReferencedIdField(RecRef,"Integration ID",Handled); <=====================
          OnUpdateRelatedRecordIdFields(RecRef);
          MODIFY;
        END ELSE BEGIN
          RESET;
    ...
Codeunit<Integration Management>.PROCEDURE<OnUpdateRelatedRecordIdFields>
  Raised in: Codeunit<Integration Management>.PROCEDURE<InsertUpdateIntegrationRecord>
    Code lines:
    ...
      WITH IntegrationRecord DO BEGIN
        SETRANGE("Record ID",RecRef.RECORDID);
        IF FINDFIRST THEN BEGIN
          "Modified On" := IntegrationLastModified;
          OnUpdateReferencedIdField(RecRef,"Integration ID",Handled);
          OnUpdateRelatedRecordIdFields(RecRef); <=====================
          MODIFY;
        END ELSE BEGIN
          RESET;
          INIT;
    ...
  Raised in: Codeunit<Integration Management>.PROCEDURE<InsertUpdateIntegrationRecord>
    Code lines:
    ...
      WITH IntegrationRecord DO BEGIN
        SETRANGE("Record ID",RecRef.RECORDID);
        IF FINDFIRST THEN BEGIN
          "Modified On" := IntegrationLastModified;
          OnUpdateReferencedIdField(RecRef,"Integration ID",Handled);
          OnUpdateRelatedRecordIdFields(RecRef); <=====================
          MODIFY;
        END ELSE BEGIN
          RESET;
          INIT;
    ...
Codeunit<Exchange Web Services Server>.PROCEDURE<OnBeforeSaveHTMLEmailToInbox>
  Raised in: Codeunit<Exchange Web Services Server>.PROCEDURE<SaveHTMLEmailToInbox>
    Code lines:
    OnBeforeSaveHTMLEmailToInbox(EmailSubject,EmailBodyHTML,SenderAddress,SenderName,RecipientAddress); <=====================
    Service.SaveHtmlMessageToInbox(EmailSubject,EmailBodyHTML,SenderAddress,SenderName,RecipientAddress);
Codeunit<Exchange Web Services Server>.PROCEDURE<OnBeforeSendEmailMessageWithAttachment>
  Raised in: Codeunit<Exchange Web Services Server>.PROCEDURE<SendEmailMessageWithAttachment>
    Code lines:
    OnBeforeSendEmailMessageWithAttachment(Subject,RecipientAddress,BodyHTML,SenderAddress); <=====================
    Service.SendMessageAndSaveToSentItems(Subject,RecipientAddress,BodyHTML,AttachmentPath,SenderAddress,'');
Codeunit<CRM Integration Management>.PROCEDURE<OnAfterCRMIntegrationEnabled>
  Raised in: Codeunit<CRM Integration Management>.PROCEDURE<IsCRMIntegrationEnabled>
    Code lines:
    ...
            ELSE BEGIN
              CRMIntegrationEnabledState := CRMIntegrationEnabledState::"Enabled But Not For Current User";
              CRMIntegrationEnabledLastError := GetLastErrorMessage;
            END;
          IF CRMIntegrationEnabledState = CRMIntegrationEnabledState::Enabled THEN
            OnAfterCRMIntegrationEnabled; <=====================
        END;
      END;
    END;
    
Codeunit<Integration Record Synch.>.PROCEDURE<OnTransferFieldData>
  Raised in: Codeunit<Integration Record Synch.>.PROCEDURE<TransferFieldData>
    Code lines:
    // OnTransferFieldData is an event for handling an exceptional mapping that is not implemented by integration records <=====================
    OnTransferFieldData(SourceFieldRef,DestinationFieldRef,NewValue,IsValueFound,NeedsConversion); <=====================
    IF NOT IsValueFound THEN
      NewValue := SourceFieldRef.VALUE
    ELSE
      IF NOT NeedsConversion THEN BEGIN
        IF SkipNullGUID AND NewValue.ISGUID THEN
          IF ISNULLGUID(NewValue) THEN
            EXIT(FALSE);
        EXIT(SetDestinationValue(DestinationFieldRef,NewValue,ValidateDestinationField));
    ...
Codeunit<CRM Integration Table Synch.>.PROCEDURE<OnQueryPostFilterIgnoreRecord>
  Raised in: Codeunit<CRM Integration Table Synch.>.PROCEDURE<SynchNAVTableToCRM>
    Code lines:
    ...
      CacheFilteredNAVTable(SourceRecordRef,IntegrationTableMapping);
      ForceModify := IntegrationTableMapping."Delete After Synchronization";
      REPEAT
        IgnoreRecord := FALSE;
        IF SourceRecordRef.GET(IntegrationRecord."Record ID") THEN BEGIN
          OnQueryPostFilterIgnoreRecord(SourceRecordRef,IgnoreRecord); <=====================
          IF NOT IgnoreRecord THEN BEGIN
            IF NOT TempCRMIntegrationRecord.IsIntegrationIdCoupled(IntegrationRecord."Integration ID") THEN
              IgnoreRecord := IntegrationTableMapping."Synch. Only Coupled Records";
            IF NOT IgnoreRecord THEN
    ...
  Raised in: Codeunit<CRM Integration Table Synch.>.PROCEDURE<SynchCRMTableToNAV>
    Code lines:
    ...
    CreateCRMIntegrationRecordClone(IntegrationTableMapping."Table ID",TempCRMIntegrationRecord);
    ForceModify := IntegrationTableMapping."Delete After Synchronization";
    IF SourceRecordRef.FINDSET THEN
      REPEAT
        IgnoreRecord := FALSE;
        OnQueryPostFilterIgnoreRecord(SourceRecordRef,IgnoreRecord); <=====================
        IF NOT IgnoreRecord THEN BEGIN
          IF TempCRMIntegrationRecord.IsCRMRecordRefCoupled(SourceRecordRef) THEN
            TempCRMIntegrationRecord.DELETE
          ELSE
    ...
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnAfterApplyRecordTemplate>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<ApplyConfigTemplate>
    Code lines:
    ...
      OnBeforeApplyRecordTemplate(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,ConfigTemplateCode);
    
      IF ConfigTemplateHeader.GET(ConfigTemplateCode) THEN BEGIN
        ConfigTemplateManagement.UpdateRecord(ConfigTemplateHeader,DestinationRecordRef);
    
        OnAfterApplyRecordTemplate(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef); <=====================
      END ELSE BEGIN
        SynchAction := SynchActionType::Fail;
        LogSynchError(
          SourceRecordRef,DestinationRecordRef,
    ...
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnAfterInsertRecord>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<InsertRecord>
    Code lines:
    ...
    DestinationRecordRef.INSERT(TRUE);
    ApplyConfigTemplate(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,JobId,SynchAction);
    IF SynchAction <> SynchActionType::Fail THEN BEGIN
      UpdateIntegrationRecordCoupling(
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType);
      OnAfterInsertRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef); <=====================
      UpdateIntegrationRecordTimestamp(
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType,JobId);
    END;
    COMMIT;
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnAfterModifyRecord>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<ModifyRecord>
    Code lines:
    OnBeforeModifyRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef);
    
    IF DestinationRecordRef.MODIFY(TRUE) THEN BEGIN
      UpdateIntegrationRecordCoupling(
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType);
      OnAfterModifyRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef); <=====================
      UpdateIntegrationRecordTimestamp(
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType,JobId);
    END ELSE BEGIN
      OnErrorWhenModifyingRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef);
    ...
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnAfterTransferRecordFields>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<TransferFields>
    Code lines:
    ...
    
    IntegrationRecordSynch.SetParameters(SourceRecordRef,DestinationRecordRef,SynchAction <> SynchActionType::Insert);
    IF IntegrationRecordSynch.RUN THEN BEGIN
      IF ConflictFound AND IntegrationRecordSynch.GetWasModified THEN
        EXIT;
      OnAfterTransferRecordFields(SourceRecordRef,DestinationRecordRef, <=====================
        AdditionalFieldsModified,SynchAction <> SynchActionType::Insert);
      AdditionalFieldsModified := AdditionalFieldsModified OR IntegrationRecordSynch.GetWasModified;
    END ELSE BEGIN
      SynchAction := SynchActionType::Fail;
    ...
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnAfterUnchangedRecordHandled>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<SynchRecord>
    Code lines:
    ...
          IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,SynchAction,JobId,IntegrationTableConnectionType);
      SynchActionType::IgnoreUnchanged:
        BEGIN
          UpdateIntegrationRecordCoupling(
            IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType);
          OnAfterUnchangedRecordHandled(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef); <=====================
          UpdateIntegrationRecordTimestamp(
            IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType,JobId);
        END;
    END;
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnBeforeApplyRecordTemplate>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<ApplyConfigTemplate>
    Code lines:
    IF DestinationRecordRef.NUMBER = IntegrationTableMapping."Integration Table ID" THEN
      ConfigTemplateCode := IntegrationTableMapping."Int. Tbl. Config Template Code"
    ELSE
      ConfigTemplateCode := IntegrationTableMapping."Table Config Template Code";
    IF ConfigTemplateCode <> '' THEN BEGIN
      OnBeforeApplyRecordTemplate(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,ConfigTemplateCode); <=====================
    
      IF ConfigTemplateHeader.GET(ConfigTemplateCode) THEN BEGIN
        ConfigTemplateManagement.UpdateRecord(ConfigTemplateHeader,DestinationRecordRef);
    
    ...
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnBeforeInsertRecord>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<InsertRecord>
    Code lines:
    OnBeforeInsertRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef); <=====================
    DestinationRecordRef.INSERT(TRUE);
    ApplyConfigTemplate(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,JobId,SynchAction);
    IF SynchAction <> SynchActionType::Fail THEN BEGIN
      UpdateIntegrationRecordCoupling(
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType);
      OnAfterInsertRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef);
      UpdateIntegrationRecordTimestamp(
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType,JobId);
    END;
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnBeforeModifyRecord>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<ModifyRecord>
    Code lines:
    OnBeforeModifyRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef); <=====================
    
    IF DestinationRecordRef.MODIFY(TRUE) THEN BEGIN
      UpdateIntegrationRecordCoupling(
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType);
      OnAfterModifyRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef);
      UpdateIntegrationRecordTimestamp(
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType,JobId);
    END ELSE BEGIN
      OnErrorWhenModifyingRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef);
    ...
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnBeforeTransferRecordFields>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<TransferFields>
    Code lines:
    OnBeforeTransferRecordFields(SourceRecordRef,DestinationRecordRef); <=====================
    
    IntegrationRecordSynch.SetParameters(SourceRecordRef,DestinationRecordRef,SynchAction <> SynchActionType::Insert);
    IF IntegrationRecordSynch.RUN THEN BEGIN
      IF ConflictFound AND IntegrationRecordSynch.GetWasModified THEN
        EXIT;
      OnAfterTransferRecordFields(SourceRecordRef,DestinationRecordRef,
        AdditionalFieldsModified,SynchAction <> SynchActionType::Insert);
      AdditionalFieldsModified := AdditionalFieldsModified OR IntegrationRecordSynch.GetWasModified;
    END ELSE BEGIN
    ...
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnErrorWhenModifyingRecord>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<ModifyRecord>
    Code lines:
    ...
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType);
      OnAfterModifyRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef);
      UpdateIntegrationRecordTimestamp(
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType,JobId);
    END ELSE BEGIN
      OnErrorWhenModifyingRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef); <=====================
      SynchAction := SynchActionType::Fail;
      LogSynchError(
        SourceRecordRef,DestinationRecordRef,
        STRSUBSTNO(ModifyFailedErr,DestinationRecordRef.CAPTION,TextManagement.RemoveMessageTrailingDots(GETLASTERRORTEXT)),JobId);
    ...
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnFindUncoupledDestinationRecord>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<FindAndCoupleDestinationRecord>
    Code lines:
    OnFindUncoupledDestinationRecord( <=====================
      IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,DestinationIsDeleted,DestinationFound);
    IF DestinationFound THEN BEGIN
      UpdateIntegrationRecordCoupling(
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType);
      UpdateIntegrationRecordTimestamp(
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType,JobIdContext);
    END;
Codeunit<Integration Rec. Delete Invoke>.PROCEDURE<OnAfterDeleteRecord>
  Raised in: Codeunit<Integration Rec. Delete Invoke>.PROCEDURE<DeleteRecord>
    Code lines:
    ...
    OnBeforeDeleteRecord(IntegrationTableMapping,DestinationRecordRef);
    
    IF NOT DestinationRecordRef.DELETE THEN
      LogSynchError(DestinationRecordRef,GETLASTERRORTEXT,JobId);
    
    OnAfterDeleteRecord(IntegrationTableMapping,DestinationRecordRef); <=====================
    COMMIT;
Codeunit<Integration Rec. Delete Invoke>.PROCEDURE<OnBeforeDeleteRecord>
  Raised in: Codeunit<Integration Rec. Delete Invoke>.PROCEDURE<DeleteRecord>
    Code lines:
    ...
      EXIT;
    
    IF SynchAction <> SynchActionType::Delete THEN
      EXIT;
    
    OnBeforeDeleteRecord(IntegrationTableMapping,DestinationRecordRef); <=====================
    
    IF NOT DestinationRecordRef.DELETE THEN
      LogSynchError(DestinationRecordRef,GETLASTERRORTEXT,JobId);
    
    ...
Codeunit<Available Management>.PROCEDURE<OnAfterCalcAvailableQty>
  Raised in: Codeunit<Available Management>.PROCEDURE<CalcAvailableQty>
    Code lines:
    ...
        "Qty. on Job Order" -
        "Qty. on Purch. Return" +
        "Qty. on Assembly Order" +
        "Qty. on Sales Return";
    
      OnAfterCalcAvailableQty(Item,CalcAvailable,PlannedOrderReceiptDate,AvailableQty); <=====================
    
      EXIT(AvailableQty);
    END;
Codeunit<Available Management>.PROCEDURE<OnAfterCalcExpectedQty>
  Raised in: Codeunit<Available Management>.PROCEDURE<ExpectedQtyOnHand>
    Code lines:
    ...
      Available := CalcAvailableQty(Item,TRUE,PlannedOrderReceiptDate) - ExtraNetNeed;
    Item.COPY(CopyOfItem);
    
    ExpectedQty := CalcAvailableQty(Item,FALSE,0D) - ExtraNetNeed;
    
    OnAfterCalcExpectedQty(Item,CalcAvailable,ExtraNetNeed,Available,PlannedOrderReceiptDate,ExpectedQty); <=====================
    
    EXIT(ExpectedQty);
Codeunit<AddOnIntegrManagement>.PROCEDURE<OnBeforeCheckReceiptOrderStatus>
  Raised in: Codeunit<AddOnIntegrManagement>.PROCEDURE<CheckReceiptOrderStatus>
    Code lines:
    OnBeforeCheckReceiptOrderStatus(SalesLine,Checked); <=====================
    IF Checked THEN
      EXIT;
    
    IF SalesLine."Document Type" <> SalesLine."Document Type"::Order THEN
      EXIT;
    
    IF SalesLine.Type <> SalesLine.Type::Item THEN
      EXIT;
    
Codeunit<Output Jnl.-Expl. Route>.PROCEDURE<OnAfterInsertItemJnlLine>
  Raised in: Codeunit<Output Jnl.-Expl. Route>.PROCEDURE<InsertOutputJnlLine>
    Code lines:
    ...
    
    DimMgt.UpdateGlobalDimFromDimSetID(
      ItemJnlLine."Dimension Set ID",ItemJnlLine."Shortcut Dimension 1 Code",ItemJnlLine."Shortcut Dimension 2 Code");
    ItemJnlLine.INSERT;
    
    OnAfterInsertItemJnlLine(ItemJnlLine); <=====================
    
    LastItemJnlLine := ItemJnlLine;
Codeunit<Output Jnl.-Expl. Route>.PROCEDURE<OnBeforeDeleteItemJnlLine>
  Raised in: Codeunit<Output Jnl.-Expl. Route>.<OnRun>
    Code lines:
    ...
        END;
    UNTIL ProdOrderLine.NEXT = 0;
    
    ItemJnlLineReserve.DeleteLine(Rec);
    
    OnBeforeDeleteItemJnlLine(Rec); <=====================
    DELETE;
Codeunit<Output Jnl.-Expl. Route>.PROCEDURE<OnBeforeInsertOutputJnlLineWithoutRtngLine>
  Raised in: Codeunit<Output Jnl.-Expl. Route>.<OnRun>
    Code lines:
    ...
              ItemTrackingMgt.CopyItemTracking(ProdOrderLine.RowID1,LastItemJnlLine.RowID1,FALSE);
          END;
        UNTIL ProdOrderRtngLine.NEXT = 0;
      END ELSE
        IF ProdOrderLine."Remaining Quantity" > 0 THEN BEGIN
          OnBeforeInsertOutputJnlLineWithoutRtngLine(Rec,ProdOrderLine); <=====================
          InsertOutputJnlLine(
            Rec,NextLineNo,LineSpacing,
            ProdOrderLine."Line No.",
            ProdOrderLine."Item No.",
    ...
Codeunit<Output Jnl.-Expl. Route>.PROCEDURE<OnBeforeInsertOutputJnlLineWithRtngLine>
  Raised in: Codeunit<Output Jnl.-Expl. Route>.<OnRun>
    Code lines:
    ...
              ProdOrderLine."Quantity (Base)",
              ProdOrderRtngLine."Scrap Factor % (Accumulated)",
              ProdOrderRtngLine."Fixed Scrap Qty. (Accum.)") -
            CostCalcMgt.CalcActOutputQtyBase(ProdOrderLine,ProdOrderRtngLine);
          IF BaseQtyToPost > 0 THEN BEGIN
            OnBeforeInsertOutputJnlLineWithRtngLine(Rec,ProdOrderLine); <=====================
            InsertOutputJnlLine(
              Rec,NextLineNo,LineSpacing,
              ProdOrderLine."Line No.",
              ProdOrderLine."Item No.",
    ...
Codeunit<Prod. Order Status Management>.PROCEDURE<OnAfterChangeStatusOnProdOrder>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<ChangeStatusOnProdOrder>
    Code lines:
    ...
    END ELSE BEGIN
      TransProdOrder(ProdOrder);
      FlushProdOrder(ProdOrder,NewStatus,NewPostingDate);
      WhseProdRelease.Release(ProdOrder);
    END;
    OnAfterChangeStatusOnProdOrder(ProdOrder,ToProdOrder); <=====================
    
    COMMIT;
    
    CLEAR(InvtAdjmt);
Codeunit<Prod. Order Status Management>.PROCEDURE<OnAfterToProdOrderLineModify>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<TransProdOrderLine>
    Code lines:
    ...
            ReserveProdOrderLine.TransferPOLineToPOLine(FromProdOrderLine,ToProdOrderLine,0,TRUE);
          END;
          ToProdOrderLine.VALIDATE("Unit Cost","Unit Cost");
          OnCopyFromProdOrderLine(ToProdOrderLine,FromProdOrderLine);
          ToProdOrderLine.MODIFY;
          OnAfterToProdOrderLineModify(ToProdOrderLine,FromProdOrderLine,NewStatus); <=====================
        UNTIL NEXT = 0;
        OnAfterTransProdOrderLines(FromProdOrder,ToProdOrder);
        DELETEALL;
      END;
Codeunit<Prod. Order Status Management>.PROCEDURE<OnAfterTransProdOrder>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<TransProdOrder>
    Code lines:
    ...
      TransProdOrdRtngQltyMeas(FromProdOrder);
      TransProdOrderCmtLine(FromProdOrder);
      TransProdOrderRtngCmtLn(FromProdOrder);
      TransProdOrderBOMCmtLine(FromProdOrder);
      TransProdOrderCapNeed(FromProdOrder);
      OnAfterTransProdOrder(FromProdOrder,ToProdOrder); <=====================
      DELETE;
      FromProdOrder := ToProdOrder;
    END;
Codeunit<Prod. Order Status Management>.PROCEDURE<OnAfterTransProdOrderComp>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<TransProdOrderComp>
    Code lines:
    ...
              ToProdOrderComp.AutoReserve;
          END;
          OnCopyFromProdOrderComp(ToProdOrderComp,FromProdOrderComp);
          ToProdOrderComp.MODIFY;
        UNTIL NEXT = 0;
        OnAfterTransProdOrderComp(FromProdOrder,ToProdOrder); <=====================
        DELETEALL;
      END;
    END;
Codeunit<Prod. Order Status Management>.PROCEDURE<OnAfterTransProdOrderLines>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<TransProdOrderLine>
    Code lines:
    ...
          ToProdOrderLine.VALIDATE("Unit Cost","Unit Cost");
          OnCopyFromProdOrderLine(ToProdOrderLine,FromProdOrderLine);
          ToProdOrderLine.MODIFY;
          OnAfterToProdOrderLineModify(ToProdOrderLine,FromProdOrderLine,NewStatus);
        UNTIL NEXT = 0;
        OnAfterTransProdOrderLines(FromProdOrder,ToProdOrder); <=====================
        DELETEALL;
      END;
    END;
Codeunit<Prod. Order Status Management>.PROCEDURE<OnBeforeChangeStatusOnProdOrder>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<ChangeStatusOnProdOrder>
    Code lines:
    SetPostingInfo(NewStatus,NewPostingDate,NewUpdateUnitCost);
    OnBeforeChangeStatusOnProdOrder(ProdOrder,NewStatus); <=====================
    IF NewStatus = NewStatus::Finished THEN BEGIN
      CheckBeforeFinishProdOrder(ProdOrder);
      FlushProdOrder(ProdOrder,NewStatus,NewPostingDate);
      ReservMgt.DeleteDocumentReservation(DATABASE::"Prod. Order Line",ProdOrder.Status,ProdOrder."No.",FALSE);
      ErrorIfUnableToClearWIP(ProdOrder);
      TransProdOrder(ProdOrder);
    
      InvtSetup.GET;
    ...
Codeunit<Prod. Order Status Management>.PROCEDURE<OnBeforePostFlushItemJnlLine>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<FlushProdOrder>
    Code lines:
    ...
            IF NOT (ItemJnlLine.TimeIsEmpty AND (ItemJnlLine."Output Quantity" = 0)) THEN BEGIN
              DimMgt.UpdateGlobalDimFromDimSetID(ItemJnlLine."Dimension Set ID",ItemJnlLine."Shortcut Dimension 1 Code",
                ItemJnlLine."Shortcut Dimension 2 Code");
              IF ProdOrderRtngLine."Next Operation No." = '' THEN
                ReserveProdOrderLine.TransferPOLineToItemJnlLine(ProdOrderLine,ItemJnlLine,ItemJnlLine."Output Quantity (Base)");
              OnBeforePostFlushItemJnlLine(ItemJnlLine); <=====================
              ItemJnlPostLine.RunWithCheck(ItemJnlLine);
            END;
    
            IF (ProdOrderRtngLine."Flushing Method" = ProdOrderRtngLine."Flushing Method"::Backward) AND
    ...
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<FlushProdOrder>
    Code lines:
    ...
            IF NOT (ItemJnlLine.TimeIsEmpty AND (ItemJnlLine."Output Quantity" = 0)) THEN BEGIN
              DimMgt.UpdateGlobalDimFromDimSetID(ItemJnlLine."Dimension Set ID",ItemJnlLine."Shortcut Dimension 1 Code",
                ItemJnlLine."Shortcut Dimension 2 Code");
              IF ProdOrderRtngLine."Next Operation No." = '' THEN
                ReserveProdOrderLine.TransferPOLineToItemJnlLine(ProdOrderLine,ItemJnlLine,ItemJnlLine."Output Quantity (Base)");
              OnBeforePostFlushItemJnlLine(ItemJnlLine); <=====================
              ItemJnlPostLine.RunWithCheck(ItemJnlLine);
            END;
    
            IF (ProdOrderRtngLine."Flushing Method" = ProdOrderRtngLine."Flushing Method"::Backward) AND
    ...
Codeunit<Prod. Order Status Management>.PROCEDURE<OnCopyFromProdOrder>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<TransProdOrder>
    Code lines:
    ...
      ToProdOrder."Ending Date" := "Ending Date";
      ToProdOrder."Due Date" := "Due Date";
      ToProdOrder."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
      ToProdOrder."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
      ToProdOrder."Dimension Set ID" := "Dimension Set ID";
      OnCopyFromProdOrder(ToProdOrder,FromProdOrder); <=====================
      ToProdOrder.MODIFY;
    
      TransProdOrderLine(FromProdOrder);
      TransProdOrderRtngLine(FromProdOrder);
    ...
Codeunit<Prod. Order Status Management>.PROCEDURE<OnCopyFromProdOrderCapacityNeed>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<TransProdOrderCapNeed>
    Code lines:
    ...
          REPEAT
            ToProdOrderCapNeed := FromProdOrderCapNeed;
            ToProdOrderCapNeed.Status := ToProdOrder.Status;
            ToProdOrderCapNeed."Prod. Order No." := ToProdOrder."No.";
            ToProdOrderCapNeed."Allocated Time" := ToProdOrderCapNeed."Needed Time";
            OnCopyFromProdOrderCapacityNeed(ToProdOrderCapNeed,FromProdOrderCapNeed); <=====================
            ToProdOrderCapNeed.INSERT;
          UNTIL NEXT = 0;
          DELETEALL;
        END;
    ...
Codeunit<Prod. Order Status Management>.PROCEDURE<OnCopyFromProdOrderComp>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<TransProdOrderComp>
    Code lines:
    ...
            ToProdOrderComp.VALIDATE("Expected Quantity");
            ReserveProdOrderComp.TransferPOCompToPOComp(FromProdOrderComp,ToProdOrderComp,0,TRUE);
            IF ToProdOrderComp.Status IN [ToProdOrderComp.Status::"Firm Planned",ToProdOrderComp.Status::Released] THEN
              ToProdOrderComp.AutoReserve;
          END;
          OnCopyFromProdOrderComp(ToProdOrderComp,FromProdOrderComp); <=====================
          ToProdOrderComp.MODIFY;
        UNTIL NEXT = 0;
        OnAfterTransProdOrderComp(FromProdOrder,ToProdOrder);
        DELETEALL;
    ...
Codeunit<Prod. Order Status Management>.PROCEDURE<OnCopyFromProdOrderLine>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<TransProdOrderLine>
    Code lines:
    ...
            ToProdOrderLine.BlockDynamicTracking(TRUE);
            ToProdOrderLine.VALIDATE(Quantity);
            ReserveProdOrderLine.TransferPOLineToPOLine(FromProdOrderLine,ToProdOrderLine,0,TRUE);
          END;
          ToProdOrderLine.VALIDATE("Unit Cost","Unit Cost");
          OnCopyFromProdOrderLine(ToProdOrderLine,FromProdOrderLine); <=====================
          ToProdOrderLine.MODIFY;
          OnAfterToProdOrderLineModify(ToProdOrderLine,FromProdOrderLine,NewStatus);
        UNTIL NEXT = 0;
        OnAfterTransProdOrderLines(FromProdOrder,ToProdOrder);
    ...
Codeunit<Prod. Order Status Management>.PROCEDURE<OnCopyFromProdOrderRoutingLine>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<TransProdOrderRtngLine>
    Code lines:
    ...
            ProdOrderCapNeed.SETRANGE("Operation No.","Operation No.");
            ProdOrderCapNeed.SETRANGE("Requested Only",FALSE);
            ProdOrderCapNeed.CALCSUMS("Needed Time (ms)");
            ToProdOrderRtngLine."Expected Capacity Need" := ProdOrderCapNeed."Needed Time (ms)";
          END;
          OnCopyFromProdOrderRoutingLine(ToProdOrderRtngLine,FromProdOrderRtngLine); <=====================
          ToProdOrderRtngLine.INSERT;
        UNTIL NEXT = 0;
        DELETEALL;
      END;
Codeunit<Graph Webhook Sync To NAV>.PROCEDURE<OnFindWebhookSubscription>
  Raised in: Codeunit<Graph Webhook Sync To NAV>.<OnRun>
    Code lines:
    OnFindWebhookSubscription(WebhookSubscription,"Subscription ID",IntegrationMappingCode); <=====================
    IF IntegrationMappingCode = '' THEN
      EXIT;
    
    SENDTRACETAG('000016Z',GraphSubscriptionManagement.TraceCategory,VERBOSITY::Verbose,
      STRSUBSTNO(ReceivedNotificationTxt,"Change Type",IntegrationMappingCode,"Resource ID"),
      DATACLASSIFICATION::SystemMetadata);
    
    GraphConnectionSetup.RegisterConnections;
    GraphDataSetup.GetIntegrationTableMapping(IntegrationTableMapping,IntegrationMappingCode);
    ...
Codeunit<Graph Subscription Management>.PROCEDURE<OnBeforeAddOrUpdateGraphSubscriptions>
  Raised in: Codeunit<Graph Subscription Management>.PROCEDURE<CheckGraphSubscriptions>
    Code lines:
    GraphConnectionSetup.RegisterConnections;
    OnBeforeAddOrUpdateGraphSubscriptions(FirstTimeSync); <=====================
    IF FirstTimeSync THEN
      SyncMode := SyncModeOption::Full
    ELSE
      SyncMode := SyncModeOption::Delta;
Codeunit<Graph Subscription Management>.PROCEDURE<OnBeforeRunGraphSyncBackgroundSession>
  Raised in: Codeunit<Graph Subscription Management>.PROCEDURE<CanScheduleSyncTasks>
    Code lines:
    IF TASKSCHEDULER.CANCREATETASK THEN BEGIN
      AllowBackgroundSessions := TRUE;
      OnBeforeRunGraphSyncBackgroundSession(AllowBackgroundSessions); <=====================
    END;
Codeunit<Graph Subscription Management>.PROCEDURE<OnCanSyncOnInsert>
  Raised in: Codeunit<Graph Subscription Management>.PROCEDURE<CanSyncOnInsert>
    Code lines:
    CanSync := NOT GUIALLOWED;
    OnCanSyncOnInsert(CanSync); <=====================
Codeunit<Graph Subscription Management>.PROCEDURE<OnGetSourceRecordRef>
  Raised in: Codeunit<Graph Subscription Management>.PROCEDURE<GetSourceRecordRef>
    Code lines:
    OnGetSourceRecordRef(GraphRecordRef,WebhookNotification,IntegrationTableID,Retrieved); <=====================
Codeunit<Graph Subscription Management>.PROCEDURE<OnScheduleSyncTask>
  Raised in: Codeunit<Graph Subscription Management>.PROCEDURE<RescheduleTask>
    Code lines:
    ...
      ScheduledTask.SETRANGE(Record,RecordID);
    
    IF ScheduledTask.FINDFIRST THEN
      TASKSCHEDULER.CANCELTASK(ScheduledTask.ID);
    
    OnScheduleSyncTask(CodeunitID,FailureCodeunitID,NextTask,RecordID); <=====================
  Raised in: Codeunit<Graph Subscription Management>.PROCEDURE<ScheduleFutureSubscriptionRefreshes>
    Code lines:
    ...
    ScheduledTask.SETRANGE(Company,COMPANYNAME);
    ScheduledTask.SETRANGE("Run Codeunit",CODEUNIT::"Graph Subscription Management");
    TasksToCreate := MaximumNumberOfTasks - ScheduledTask.COUNT;
    FOR i := MaximumNumberOfTasks DOWNTO MaximumNumberOfTasks - TasksToCreate + 1 DO BEGIN
      DistanceIntoFuture := i * RefreshFrequency + BufferTime;
      OnScheduleSyncTask( <=====================
        CODEUNIT::"Graph Subscription Management",CODEUNIT::"Graph Delta Sync",CURRENTDATETIME + DistanceIntoFuture,0);
      TasksCreated += 1;
    END;
    
    ...
  Raised in: Codeunit<Graph Subscription Management>.PROCEDURE<ScheduleFutureSubscriptionRefreshes>
    Code lines:
    ...
    ScheduledTask.SETRANGE(Company,COMPANYNAME);
    ScheduledTask.SETRANGE("Run Codeunit",CODEUNIT::"Graph Subscription Management");
    TasksToCreate := MaximumNumberOfTasks - ScheduledTask.COUNT;
    FOR i := MaximumNumberOfTasks DOWNTO MaximumNumberOfTasks - TasksToCreate + 1 DO BEGIN
      DistanceIntoFuture := i * RefreshFrequency + BufferTime;
      OnScheduleSyncTask( <=====================
        CODEUNIT::"Graph Subscription Management",CODEUNIT::"Graph Delta Sync",CURRENTDATETIME + DistanceIntoFuture,0);
      TasksCreated += 1;
    END;
    
    ...
  Raised in: Codeunit<Graph Subscription Management>.PROCEDURE<ScheduleFutureSubscriptionRefreshes>
    Code lines:
    ...
    ScheduledTask.SETRANGE(Company,COMPANYNAME);
    ScheduledTask.SETRANGE("Run Codeunit",CODEUNIT::"Graph Subscription Management");
    TasksToCreate := MaximumNumberOfTasks - ScheduledTask.COUNT;
    FOR i := MaximumNumberOfTasks DOWNTO MaximumNumberOfTasks - TasksToCreate + 1 DO BEGIN
      DistanceIntoFuture := i * RefreshFrequency + BufferTime;
      OnScheduleSyncTask( <=====================
        CODEUNIT::"Graph Subscription Management",CODEUNIT::"Graph Delta Sync",CURRENTDATETIME + DistanceIntoFuture,0);
      TasksCreated += 1;
    END;
    
    ...
Codeunit<Graph Integration Table Sync>.PROCEDURE<OnBeforeSynchronizationStart>
  Raised in: Codeunit<Graph Integration Table Sync>.PROCEDURE<PerformScheduledSynchToIntegrationTable>
    Code lines:
    ...
        IF GraphIntegrationRecord.IsRecordCoupled(IntegrationRecord."Record ID") THEN BEGIN
          SourceRecordRef.GET(IntegrationRecord."Record ID");
          Found := TRUE;
        END;
    
      OnBeforeSynchronizationStart(IntegrationTableMapping,SourceRecordRef,SkipSyncOnRecord); <=====================
    
      IF Found AND (NOT SkipSyncOnRecord) THEN
        IF IntegrationTableSynch.Synchronize(SourceRecordRef,DestinationRecordRef,FALSE,FALSE) THEN BEGIN
          SaveChangeKeyFromDestinationRefToGraphIntegrationTable(IntegrationTableMapping,DestinationRecordRef);
    ...
  Raised in: Codeunit<Graph Integration Table Sync>.PROCEDURE<PerformScheduledSynchFromIntegrationTable>
    Code lines:
    ...
    IF SourceRecordRef.FINDSET THEN BEGIN
      SaveDeltaTokenFromSourceRecRefToIntegrationTable(SourceRecordRef,IntegrationTableMapping);
      REPEAT
        SourceRecordRef2 := SourceRecordRef.DUPLICATE;
        SkipSyncOnRecord := FALSE;
        OnBeforeSynchronizationStart(IntegrationTableMapping,SourceRecordRef2,SkipSyncOnRecord); <=====================
        IF NOT SkipSyncOnRecord THEN
          IF IntegrationTableSynch.Synchronize(SourceRecordRef2,DestinationRecordRef,TRUE,FALSE) THEN BEGIN
            SaveChangeKeyFromDestinationRefToGraphIntegrationTable(IntegrationTableMapping,SourceRecordRef2);
            ModifiedOn := IntegrationTableSynch.GetRowLastModifiedOn(IntegrationTableMapping,SourceRecordRef2);
    ...
  Raised in: Codeunit<Graph Integration Table Sync>.PROCEDURE<PerformRecordSynchToIntegrationTable>
    Code lines:
    ...
    IntegrationTableSynch.BeginIntegrationSynchJob(
      TABLECONNECTIONTYPE::MicrosoftGraph,IntegrationTableMapping,SourceRecordRef.NUMBER);
    
    LatestModifiedOn := 0DT;
    
    OnBeforeSynchronizationStart(IntegrationTableMapping,SourceRecordRef,SkipSyncOnRecord); <=====================
    IF NOT SkipSyncOnRecord THEN
      IF IntegrationTableSynch.Synchronize(SourceRecordRef,DestinationRecordRef,FALSE,FALSE) THEN BEGIN
        SaveChangeKeyFromDestinationRefToGraphIntegrationTable(IntegrationTableMapping,DestinationRecordRef);
        ModifiedOnIntegrationRecord.FindByRecordId(SourceRecordRef.RECORDID);
    ...
  Raised in: Codeunit<Graph Integration Table Sync>.PROCEDURE<PerformRecordSynchFromIntegrationTable>
    Code lines:
    ...
    // Peform synch.
    IntegrationTableSynch.BeginIntegrationSynchJob(
      TABLECONNECTIONTYPE::MicrosoftGraph,IntegrationTableMapping,SourceRecordRef.NUMBER);
    
    LatestModifiedOn := 0DT;
    OnBeforeSynchronizationStart(IntegrationTableMapping,SourceRecordRef,SkipSyncOnRecord); <=====================
    IF NOT SkipSyncOnRecord THEN
      IF IntegrationTableSynch.Synchronize(SourceRecordRef,DestinationRecordRef,TRUE,FALSE) THEN BEGIN
        SaveChangeKeyFromDestinationRefToGraphIntegrationTable(IntegrationTableMapping,SourceRecordRef);
        ModifiedOn := IntegrationTableSynch.GetRowLastModifiedOn(IntegrationTableMapping,SourceRecordRef);
    ...
  Raised in: Codeunit<Graph Integration Table Sync>.PROCEDURE<PerformRecordDeleteFromIntegrationTable>
    Code lines:
    IF GETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph) = '' THEN
      EXIT;
    
    IntegrationTableSynch.BeginIntegrationSynchJob(
      TABLECONNECTIONTYPE::MicrosoftGraph,IntegrationTableMapping,DestinationRecordRef.NUMBER);
    OnBeforeSynchronizationStart(IntegrationTableMapping,DestinationRecordRef,SkipSyncOnRecord); <=====================
    IntegrationTableSynch.Delete(DestinationRecordRef);
    IntegrationTableSynch.EndIntegrationSynchJob;
  Raised in: Codeunit<Graph Integration Table Sync>.PROCEDURE<PerformRecordDeleteToIntegrationTable>
    Code lines:
    IF GETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph) = '' THEN
      EXIT;
    
    IntegrationTableSynch.BeginIntegrationSynchJob(
      TABLECONNECTIONTYPE::MicrosoftGraph,IntegrationTableMapping,DestinationRecordRef.NUMBER);
    OnBeforeSynchronizationStart(IntegrationTableMapping,DestinationRecordRef,SkipSyncOnRecord); <=====================
    IF IntegrationTableSynch.Delete(DestinationRecordRef) THEN
      ArchiveIntegrationRecords(DestinationRecordRef,IntegrationTableMapping);
    
    IntegrationTableSynch.EndIntegrationSynchJob;
Codeunit<Graph Sync. Runner>.PROCEDURE<OnAfterRunDeltaSyncForEntity>
  Raised in: Codeunit<Graph Sync. Runner>.PROCEDURE<RunDeltaSyncForEntity>
    Code lines:
    ...
    RunIntegrationTableSynch(IntegrationTableMapping);
    
    IntegrationTableMapping.GET(IntegrationTableMapping.Name);
    IntegrationTableMapping.SetFullSyncEndAndCommit;
    
    OnAfterRunDeltaSyncForEntity(TableID); <=====================
Codeunit<Graph Sync. Runner>.PROCEDURE<OnAfterRunFullSyncForEntity>
  Raised in: Codeunit<Graph Sync. Runner>.PROCEDURE<RunFullSyncForEntity>
    Code lines:
    ...
    RunIntegrationTableSynch(IntegrationTableMapping);
    
    IntegrationTableMapping.GET(IntegrationTableMapping.Name);
    IntegrationTableMapping.SetFullSyncEndAndCommit;
    
    OnAfterRunFullSyncForEntity(TableID); <=====================
Codeunit<Graph Sync. Runner>.PROCEDURE<OnCheckAuxiliarySyncEnabled>
  Raised in: Codeunit<Graph Sync. Runner>.PROCEDURE<IsGraphSyncEnabled>
    Code lines:
    ...
      EXIT(FALSE);
    
    IF MarketingSetup."Sync with Microsoft Graph" THEN
      EXIT(TRUE);
    
    OnCheckAuxiliarySyncEnabled(AuxSyncEnabled); <=====================
    EXIT(AuxSyncEnabled);
Codeunit<Graph Sync. Runner>.PROCEDURE<OnRunGraphDeltaSync>
  Raised in: Codeunit<Graph Sync. Runner>.PROCEDURE<RunDeltaSync>
    Code lines:
    OnRunGraphDeltaSync; <=====================
Codeunit<Graph Sync. Runner>.PROCEDURE<OnRunGraphFullSync>
  Raised in: Codeunit<Graph Sync. Runner>.PROCEDURE<RunFullSync>
    Code lines:
    OnRunGraphFullSync; <=====================
Codeunit<Graph Sync. Runner>.PROCEDURE<OnSyncSynchronouslyCannotStartSession>
  Raised in: Codeunit<Graph Sync. Runner>.PROCEDURE<SyncFromGraphSynchronously>
    Code lines:
    // Start session will use CPU time of main thread while main thread is SLEEPing
    // Taskscheduler cannot be used since it requires a COMMIT to start
    SessionId := 0;
    
    IF NOT STARTSESSION(SessionId,CodeunitId,COMPANYNAME) THEN BEGIN
      OnSyncSynchronouslyCannotStartSession('Codeunit: ' + FORMAT(CodeunitId)); <=====================
      EXIT;
    END;
    
    StartDateTime := CURRENTDATETIME;
    ...
Codeunit<Graph Sync. Runner>.PROCEDURE<OnSyncSynchronouslyTimeout>
  Raised in: Codeunit<Graph Sync. Runner>.PROCEDURE<SyncFromGraphSynchronously>
    Code lines:
    ...
    
      TimePassed := CURRENTDATETIME - StartDateTime;
      TimeoutReached := TimePassed > TimeoutInSeconds * 1000;
    UNTIL TimeoutReached;
    
    OnSyncSynchronouslyTimeout('Codeunit: ' + FORMAT(CodeunitId)); <=====================
Codeunit<Graph Data Setup>.PROCEDURE<OnAddIntegrationMapping>
  Raised in: Codeunit<Graph Data Setup>.PROCEDURE<AddIntegrationMapping>
    Code lines:
    OnGetInboundTableID(MappingCode,TableID);
    OnAddIntegrationMapping(MappingCode); <=====================
Codeunit<Graph Data Setup>.PROCEDURE<OnCheckCanSyncRecord>
  Raised in: Codeunit<Graph Data Setup>.PROCEDURE<CanSyncRecord>
    Code lines:
    // Determines whether the record is empty based on the fields
    // within the integration field mapping table
    
    OnCheckCanSyncRecord(EntityRecRef,CanSync,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    EmptyRecordRef.OPEN(EntityRecRef.NUMBER);
    EmptyRecordRef.INIT;
    
    ...
Codeunit<Graph Data Setup>.PROCEDURE<OnCreateIntegrationMappings>
  Raised in: Codeunit<Graph Data Setup>.<OnRun>
    Code lines:
    OnCreateIntegrationMappings; <=====================
Codeunit<Graph Data Setup>.PROCEDURE<OnGetGraphRecord>
  Raised in: Codeunit<Graph Data Setup>.PROCEDURE<GetGraphRecord>
    Code lines:
    OnGetGraphRecord(GraphRecordRef,DestinationGraphID,TableID,Found); <=====================
Codeunit<Graph Data Setup>.PROCEDURE<OnGetInboundTableID>
  Raised in: Codeunit<Graph Data Setup>.PROCEDURE<GetInboundTableID>
    Code lines:
    OnGetInboundTableID(MappingCode,TableID); <=====================
  Raised in: Codeunit<Graph Data Setup>.PROCEDURE<AddIntegrationMapping>
    Code lines:
    OnGetInboundTableID(MappingCode,TableID); <=====================
    OnAddIntegrationMapping(MappingCode);
Codeunit<Graph Data Setup>.PROCEDURE<OnGetMappingCodeForTable>
  Raised in: Codeunit<Graph Data Setup>.PROCEDURE<GetMappingCodeForTable>
    Code lines:
    OnGetMappingCodeForTable(TableID,MappingCode); <=====================
Codeunit<Graph Connection Setup>.PROCEDURE<OnCheckForceSync>
  Raised in: Codeunit<Graph Connection Setup>.PROCEDURE<CanRunSync>
    Code lines:
    OnCheckForceSync(ForceSync); <=====================
    IF ForceSync THEN
      EXIT(TRUE);
    
    IF GETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph) <> '' THEN
      EXIT(FALSE);
    
    EXIT(TRUE);
Codeunit<Graph Connection Setup>.PROCEDURE<OnGetInboundConnectionName>
  Raised in: Codeunit<Graph Connection Setup>.PROCEDURE<GetInboundConnectionName>
    Code lines:
    OnGetInboundConnectionName(TableID,ConnectionName); <=====================
Codeunit<Graph Connection Setup>.PROCEDURE<OnGetInboundConnectionString>
  Raised in: Codeunit<Graph Connection Setup>.PROCEDURE<GetInboundConnectionString>
    Code lines:
    OnGetInboundConnectionString(TableID,ConnectionString); <=====================
Codeunit<Graph Connection Setup>.PROCEDURE<OnGetSubscriptionConnectionName>
  Raised in: Codeunit<Graph Connection Setup>.PROCEDURE<GetSubscriptionConnectionName>
    Code lines:
    OnGetSubscriptionConnectionName(TableID,ConnectionName); <=====================
Codeunit<Graph Connection Setup>.PROCEDURE<OnGetSubscriptionConnectionString>
  Raised in: Codeunit<Graph Connection Setup>.PROCEDURE<GetSubscriptionConnectionString>
    Code lines:
    OnGetSubscriptionConnectionString(TableID,ConnectionString); <=====================
Codeunit<Graph Connection Setup>.PROCEDURE<OnGetSynchronizeConnectionName>
  Raised in: Codeunit<Graph Connection Setup>.PROCEDURE<GetSynchronizeConnectionName>
    Code lines:
    OnGetSynchronizeConnectionName(TableID,ConnectionName); <=====================
Codeunit<Graph Connection Setup>.PROCEDURE<OnGetSynchronizeConnectionString>
  Raised in: Codeunit<Graph Connection Setup>.PROCEDURE<GetSynchronizeConnectionString>
    Code lines:
    OnGetSynchronizeConnectionString(TableID,ConnectionString); <=====================
Codeunit<Graph Connection Setup>.PROCEDURE<OnRegisterConnections>
  Raised in: Codeunit<Graph Connection Setup>.PROCEDURE<RegisterConnections>
    Code lines:
    OnRegisterConnections; <=====================
Codeunit<Graph Mgt - General Tools>.PROCEDURE<ApiSetup>
  Raised in: Codeunit<Graph Mgt - General Tools>.<OnRun>
    Code lines:
    ApiSetup; <=====================
  Raised in: Codeunit<Graph Mgt - General Tools>.PROCEDURE<APISetupIfEnabled>
    Code lines:
    IF IsApiEnabled THEN
      ApiSetup; <=====================
  Raised in: Codeunit<Graph Mgt - General Tools>.PROCEDURE<InitDemoCompanyApisForSaaS>
    Code lines:
    ...
    APIEntitiesSetup.SafeGet;
    
    IF APIEntitiesSetup."Demo Company API Initialized" THEN
      EXIT;
    
    GraphMgtGeneralTools.ApiSetup; <=====================
    
    APIEntitiesSetup.SafeGet;
    APIEntitiesSetup.VALIDATE("Demo Company API Initialized",TRUE);
    APIEntitiesSetup.MODIFY(TRUE);
  Raised in: Page<Native - General Setting>.PROCEDURE<FixIntegrationRecordIDs>
    Code lines:
    GraphMgtGeneralTools.ApiSetup; <=====================
    SetActionResponse(ActionContext);
  Raised in: Page<Native - Customer Entity>.<OnOpenPage>
    Code lines:
    EmptyIDPaymentTerms.SETRANGE(Id,EmptyGuid);
    EmptyIDPaymentMethod.SETRANGE(Id,EmptyGuid);
    IF EmptyIDPaymentTerms.FINDFIRST OR EmptyIDPaymentMethod.FINDFIRST THEN
      GraphMgtGeneralTools.ApiSetup; <=====================
    BINDSUBSCRIPTION(NativeAPILanguageHandler);
    TranslateContactIdFilterToCustomerNoFilter;
    SELECTLATESTVERSION;
Codeunit<Graph Mgt - General Tools>.PROCEDURE<OnForceIsApiEnabledVerification>
  Raised in: Codeunit<Graph Mgt - General Tools>.PROCEDURE<OnGetIntegrationActivated>
    Code lines:
    OnForceIsApiEnabledVerification(ForceIsApiEnabledVerification); <=====================
    
    IF NOT ForceIsApiEnabledVerification AND IsSyncEnabled THEN
      EXIT;
    
    IF ForceIsApiEnabledVerification THEN
      IF NOT IsApiEnabled THEN
        EXIT;
    
    IF NOT ApiWebService.READPERMISSION THEN
    ...
Codeunit<Graph Mgt - General Tools>.PROCEDURE<OnGetIsAPIEnabled>
  Raised in: Codeunit<Graph Mgt - General Tools>.PROCEDURE<IsApiEnabled>
    Code lines:
    OnGetIsAPIEnabled(Handled,IsAPIEnabled); <=====================
    IF Handled THEN
      EXIT(IsAPIEnabled);
    
    EXIT(ServerConfigSettingHandler.GetApiServicesEnabled);
Codeunit<Production Journal Mgt>.PROCEDURE<OnAfterInsertConsumptionJnlLine>
  Raised in: Codeunit<Production Journal Mgt>.PROCEDURE<InsertConsumptionJnlLine>
    Code lines:
    ...
      ItemJnlLine."Reason Code" := ItemJnlBatch."Reason Code";
      ItemJnlLine."Posting No. Series" := ItemJnlBatch."Posting No. Series";
    
      OnBeforeInsertConsumptionJnlLine(ItemJnlLine,ProdOrderComp,ProdOrderLine,Level);
      ItemJnlLine.INSERT;
      OnAfterInsertConsumptionJnlLine(ItemJnlLine); <=====================
    
      IF Item."Item Tracking Code" <> '' THEN
        ItemTrackingMgt.CopyItemTracking(RowID1,ItemJnlLine.RowID1,FALSE);
    END;
    ...
  Raised in: Codeunit<Production Journal Mgt>.PROCEDURE<InsertConsumptionJnlLine>
    Code lines:
    ...
      ItemJnlLine."Reason Code" := ItemJnlBatch."Reason Code";
      ItemJnlLine."Posting No. Series" := ItemJnlBatch."Posting No. Series";
    
      OnBeforeInsertConsumptionJnlLine(ItemJnlLine,ProdOrderComp,ProdOrderLine,Level);
      ItemJnlLine.INSERT;
      OnAfterInsertConsumptionJnlLine(ItemJnlLine); <=====================
    
      IF Item."Item Tracking Code" <> '' THEN
        ItemTrackingMgt.CopyItemTracking(RowID1,ItemJnlLine.RowID1,FALSE);
    END;
    ...
Codeunit<Production Journal Mgt>.PROCEDURE<OnAfterInsertOutputJnlLine>
  Raised in: Codeunit<Production Journal Mgt>.PROCEDURE<InsertOutputJnlLine>
    Code lines:
    ...
      ItemJnlLine."Reason Code" := ItemJnlBatch."Reason Code";
      ItemJnlLine."Posting No. Series" := ItemJnlBatch."Posting No. Series";
    
      OnBeforeInsertOutputJnlLine(ItemJnlLine,ProdOrderRtngLine,ProdOrderLine);
      ItemJnlLine.INSERT;
      OnAfterInsertOutputJnlLine(ItemJnlLine); <=====================
    
      IF ProdOrderRtngLine."Next Operation No." = '' THEN // Last or no Routing Line
        ItemTrackingMgt.CopyItemTracking(RowID1,ItemJnlLine.RowID1,FALSE);
    END;
    ...
Codeunit<Production Journal Mgt>.PROCEDURE<OnAfterSetTemplateAndBatchName>
  Raised in: Codeunit<Production Journal Mgt>.PROCEDURE<SetTemplateAndBatchName>
    Code lines:
    ...
    ToTemplateName := ItemJnlTemplate.Name;
    
    ToBatchName := '';
    User := UPPERCASE(USERID); // Uppercase in case of Windows Login
    
    OnAfterSetTemplateAndBatchName(ItemJnlTemplate,User); <=====================
    
    IF User <> '' THEN
      IF (STRLEN(User) < MAXSTRLEN(ItemJnlLine."Journal Batch Name")) AND (ItemJnlLine."Journal Batch Name" <> '') THEN
        ToBatchName := COPYSTR(ItemJnlLine."Journal Batch Name",1,MAXSTRLEN(ItemJnlLine."Journal Batch Name") - 1) + 'A'
    ...
Codeunit<Production Journal Mgt>.PROCEDURE<OnBeforeDeleteAllItemJnlLine>
  Raised in: Codeunit<Production Journal Mgt>.PROCEDURE<DeleteJnlLines>
    Code lines:
    ...
      REPEAT
        IF ReservEntryExist(ItemJnlLine2,ReservEntry) THEN
          ReservEntry.DELETEALL(TRUE);
      UNTIL ItemJnlLine2.NEXT = 0;
    
      OnBeforeDeleteAllItemJnlLine(ItemJnlLine2); <=====================
      ItemJnlLine2.DELETEALL(TRUE);
    END;
Codeunit<Production Journal Mgt>.PROCEDURE<OnBeforeInsertConsumptionJnlLine>
  Raised in: Codeunit<Production Journal Mgt>.PROCEDURE<InsertConsumptionJnlLine>
    Code lines:
    ...
      ItemJnlLine."Flushing Method" := "Flushing Method";
      ItemJnlLine."Source Code" := ItemJnlTemplate."Source Code";
      ItemJnlLine."Reason Code" := ItemJnlBatch."Reason Code";
      ItemJnlLine."Posting No. Series" := ItemJnlBatch."Posting No. Series";
    
      OnBeforeInsertConsumptionJnlLine(ItemJnlLine,ProdOrderComp,ProdOrderLine,Level); <=====================
      ItemJnlLine.INSERT;
      OnAfterInsertConsumptionJnlLine(ItemJnlLine);
    
      IF Item."Item Tracking Code" <> '' THEN
    ...
Codeunit<Production Journal Mgt>.PROCEDURE<OnBeforeInsertOutputJnlLine>
  Raised in: Codeunit<Production Journal Mgt>.PROCEDURE<InsertOutputJnlLine>
    Code lines:
    ...
      ItemJnlLine."Flushing Method" := ProdOrderRtngLine."Flushing Method";
      ItemJnlLine."Source Code" := ItemJnlTemplate."Source Code";
      ItemJnlLine."Reason Code" := ItemJnlBatch."Reason Code";
      ItemJnlLine."Posting No. Series" := ItemJnlBatch."Posting No. Series";
    
      OnBeforeInsertOutputJnlLine(ItemJnlLine,ProdOrderRtngLine,ProdOrderLine); <=====================
      ItemJnlLine.INSERT;
      OnAfterInsertOutputJnlLine(ItemJnlLine);
    
      IF ProdOrderRtngLine."Next Operation No." = '' THEN // Last or no Routing Line
    ...
Codeunit<Production Journal Mgt>.PROCEDURE<OnBeforeRunProductionJnl>
  Raised in: Codeunit<Production Journal Mgt>.PROCEDURE<Handling>
    Code lines:
    ...
    DeleteJnlLines(ToTemplateName,ToBatchName,ProdOrder."No.",ActualLineNo);
    
    CreateJnlLines(ProdOrder,ActualLineNo);
    
    IsHandled := FALSE;
    OnBeforeRunProductionJnl(ToTemplateName,ToBatchName,ProdOrder,ActualLineNo,PostingDate,IsHandled); <=====================
    IF NOT IsHandled THEN
      REPEAT
        LeaveForm := TRUE;
        CLEAR(ProductionJnl);
    ...
Codeunit<Calc. Item Availability>.PROCEDURE<OnAfterGetDocumentEntries>
  Raised in: Codeunit<Calc. Item Availability>.PROCEDURE<GetDocumentEntries>
    Code lines:
    ...
    TryGetProdOrderSupplyEntries(InvtEventBuf,Item);
    TryGetTransferOrderSupplyEntries(InvtEventBuf,Item);
    TryGetAsmOrderDemandEntries(InvtEventBuf,Item);
    TryGetAsmOrderSupllyEntries(InvtEventBuf,Item);
    
    OnAfterGetDocumentEntries(InvtEventBuf,Item,EntryNo); <=====================
Codeunit<Calc. Item Avail. Timeline>.PROCEDURE<OnAfterUpdateTimelineEventDetails>
  Raised in: Codeunit<Calc. Item Avail. Timeline>.PROCEDURE<UpdateTimelineEventDetails>
    Code lines:
    ...
              STRSUBSTNO('%1 %2 %3 %4',TXT017,AsmHeader."Document Type",AsmHeader."No.",AsmHeader.Description);
          END;
      END;
    END;
    
    OnAfterUpdateTimelineEventDetails(TempToTimelineEvent,TempFromInventoryEventBuffer); <=====================
Codeunit<Calc. Item Avail. Timeline>.PROCEDURE<OnCreateTimelineEventsBeforePlanning>
  Raised in: Codeunit<Calc. Item Avail. Timeline>.PROCEDURE<CreateTimelineEvents>
    Code lines:
    ...
      IF FINDSET THEN
        REPEAT
          InsertTimelineEvent(TempTimelineEvent,TempInventoryEventBuffer);
        UNTIL NEXT = 0;
    
      OnCreateTimelineEventsBeforePlanning(TempTimelineEvent,TempInventoryEventBuffer); <=====================
    
      // Planning Events - New supplies already planned
      SETFILTER("Availability Date",'<> %1',0D);
      SETRANGE(Type,Type::Plan);
    ...
Codeunit<Sales - Calc Discount By Type>.PROCEDURE<OnAfterResetRecalculateInvoiceDisc>
  Raised in: Codeunit<Sales - Calc Discount By Type>.PROCEDURE<ResetRecalculateInvoiceDisc>
    Code lines:
    SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
    SalesLine.SETRANGE("Document No.",SalesHeader."No.");
    SalesLine.SETRANGE("Recalculate Invoice Disc.",TRUE);
    SalesLine.MODIFYALL("Recalculate Invoice Disc.",FALSE);
    
    OnAfterResetRecalculateInvoiceDisc(SalesHeader); <=====================
Codeunit<FA Insert Ledger Entry>.PROCEDURE<OnBeforeInsertRegister>
  Raised in: Codeunit<FA Insert Ledger Entry>.PROCEDURE<InsertFA>
    Code lines:
    ...
    
    IF FALedgEntry3."FA Posting Category" = FALedgEntry3."FA Posting Category"::" " THEN
      IF FALedgEntry3."FA Posting Type" <= FALedgEntry3."FA Posting Type"::"Salvage Value" THEN
        CODEUNIT.RUN(CODEUNIT::"FA Check Consistency",FALedgEntry);
    
    OnBeforeInsertRegister(FALedgEntry,FALedgEntry2); <=====================
    
    InsertRegister(0,NextEntryNo);
Codeunit<FA Insert G/L Account>.PROCEDURE<OnGetBalAccAfterRestoreGenJnlLineFields>
  Raised in: Codeunit<FA Insert G/L Account>.PROCEDURE<GetBalAcc>
    Code lines:
    ...
          "Shortcut Dimension 1 Code" := TempFAGLPostBuf."Global Dimension 1 Code";
          "Shortcut Dimension 2 Code" := TempFAGLPostBuf."Global Dimension 2 Code";
          "Dimension Set ID" := TempFAGLPostBuf."Dimension Set ID";
          Description := TempGenJnlLine.Description;
          "FA Add.-Currency Factor" := TempGenJnlLine."FA Add.-Currency Factor";
          OnGetBalAccAfterRestoreGenJnlLineFields(GenJnlLine,TempGenJnlLine); <=====================
          InsertGenJnlLine(GenJnlLine);
        UNTIL TempFAGLPostBuf.NEXT = 0;
    END;
    TempFAGLPostBuf.DELETEALL;
Codeunit<FA Insert G/L Account>.PROCEDURE<OnGetBalAccAfterSaveGenJnlLineFields>
  Raised in: Codeunit<FA Insert G/L Account>.PROCEDURE<GetBalAcc>
    Code lines:
    ...
      TESTFIELD("Posting Group");
      TESTFIELD("FA Posting Type");
      TempGenJnlLine.Description := Description;
      TempGenJnlLine."FA Add.-Currency Factor" := "FA Add.-Currency Factor";
      SkipInsert := FALSE;
      OnGetBalAccAfterSaveGenJnlLineFields(TempGenJnlLine,GenJnlLine,SkipInsert); <=====================
      IF NOT SkipInsert THEN
        InsertBufferBalAcc(
          "FA Posting Type" - 1,-Amount,"Depreciation Book Code",
          "Posting Group","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code","Dimension Set ID",FALSE,FALSE);
    ...
Codeunit<FA Get G/L Account No.>.PROCEDURE<OnAfterGetAccNo>
  Raised in: Codeunit<FA Get G/L Account No.>.PROCEDURE<GetAccNo>
    Code lines:
    ...
          "FA Posting Type"::"Custom 2":
            GLAccNo := FAPostingGr.GetCustom2BalAccountOnDisposal;
        END;
    END;
    
    OnAfterGetAccNo(FALedgEntry,GLAccNo); <=====================
    EXIT(GLAccNo);
Codeunit<Make FA Ledger Entry>.PROCEDURE<OnAfterCopyFromFACard>
  Raised in: Codeunit<Make FA Ledger Entry>.PROCEDURE<CopyFromFACard>
    Code lines:
    ...
      "Accum. Depr. % (Custom 1)" := FADeprBook."Accum. Depr. % (Custom 1)";
      "Depr. % this year (Custom 1)" := FADeprBook."Depr. This Year % (Custom 1)";
      "Property Class (Custom 1)" := FADeprBook."Property Class (Custom 1)";
    END;
    
    OnAfterCopyFromFACard(FALedgEntry,FA,FADeprBook,xFALedgerEntry); <=====================
Codeunit<Make FA Ledger Entry>.PROCEDURE<OnAfterCopyFromFAJnlLine>
  Raised in: Codeunit<Make FA Ledger Entry>.PROCEDURE<CopyFromFAJnlLine>
    Code lines:
    ...
      "Journal Batch Name" := FAJnlLine."Journal Batch Name";
      "FA Posting Type" := FAJnlLine.ConvertToLedgEntry(FAJnlLine);
      "No. Series" := FAJnlLine."Posting No. Series";
    END;
    
    OnAfterCopyFromFAJnlLine(FALedgEntry,FAJnlLine); <=====================
Codeunit<Make FA Ledger Entry>.PROCEDURE<OnAfterCopyFromGenJnlLine>
  Raised in: Codeunit<Make FA Ledger Entry>.PROCEDURE<CopyFromGenJnlLine>
    Code lines:
    ...
      "No. Series" := GenJnlLine."Posting No. Series";
      FAJnlLine."FA Posting Type" := GenJnlLine."FA Posting Type" - 1;
      "FA Posting Type" := FAJnlLine.ConvertToLedgEntry(FAJnlLine);
    END;
    
    OnAfterCopyFromGenJnlLine(FALedgEntry,GenJnlLine); <=====================
Codeunit<Make FA Ledger Entry>.PROCEDURE<OnBeforeCopyFromFACard>
  Raised in: Codeunit<Make FA Ledger Entry>.PROCEDURE<CopyFromFACard>
    Code lines:
    OnBeforeCopyFromFACard(FALedgEntry,FA,FADeprBook,xFALedgerEntry); <=====================
    
    WITH FALedgEntry DO BEGIN
      "FA Class Code" := FA."FA Class Code";
      "FA Subclass Code" := FA."FA Subclass Code";
      "FA Location Code" := FA."FA Location Code";
      "Location Code" := FA."Location Code";
      "FA Exchange Rate" := FADeprBook.GetExchangeRate;
      "Depreciation Method" := FADeprBook."Depreciation Method";
      "Depreciation Starting Date" := FADeprBook."Depreciation Starting Date";
    ...
Codeunit<FA Check Consistency>.PROCEDURE<OnSetFAPostingDateOnBeforeFADeprBookModify>
  Raised in: Codeunit<FA Check Consistency>.PROCEDURE<SetFAPostingDate>
    Code lines:
    ...
          FADeprBook."Last Custom 2 Date" := MaxDate;
        "FA Posting Type"::"Proceeds on Disposal":
          FADeprBook."Disposal Date" := MinDate;
      END;
    
    OnSetFAPostingDateOnBeforeFADeprBookModify(FADeprBook,FALedgEntry2); <=====================
    FADeprBook.MODIFY;
Codeunit<Budget Depreciation>.PROCEDURE<OnBeforeGLBudgetEntryInsert>
  Raised in: Codeunit<Budget Depreciation>.PROCEDURE<CopyFAToBudget>
    Code lines:
    ...
        IF FAGLPostBuf."FA Posting Group" <> '' THEN
          GLBudgetEntry."Dimension Set ID" := FAGLPostBuf."Dimension Set ID"
        ELSE
          GLBudgetEntry."Dimension Set ID" := GetFADefaultDimSetID(FALedgEntry);
        UpdateDimCodesFromDimSetID(GLBudgetEntry,BudgetName);
        OnBeforeGLBudgetEntryInsert(GLBudgetEntry,FALedgEntry,FAGLPostBuf,BudgetName); <=====================
        GLBudgetEntry.INSERT;
      UNTIL FAInsertGLAcc.GetNextGLAcc(FAGLPostBuf) = 0;
Codeunit<FA Jnl.-Check Line>.PROCEDURE<OnAfterCheckFAJnlLine>
  Raised in: Codeunit<FA Jnl.-Check Line>.PROCEDURE<CheckFAJnlLine>
    Code lines:
    ...
    END;
    GenJnlPosting := FALSE;
    FAJnlLine := FAJnlLine2;
    CheckJnlLine;
    
    OnAfterCheckFAJnlLine(FAJnlLine2); <=====================
Codeunit<FA Jnl.-Check Line>.PROCEDURE<OnAfterCheckGenJnlLine>
  Raised in: Codeunit<FA Jnl.-Check Line>.<OnRun>
    Code lines:
    ...
    GenJnlPosting := TRUE;
    GenJnlLine := Rec;
    CheckJnlLine;
    CheckFADepAcrossFiscalYear;
    
    OnAfterCheckGenJnlLine(Rec); <=====================
Codeunit<FA Jnl.-Post Line>.PROCEDURE<OnAfterFAJnlPostLine>
  Raised in: Codeunit<FA Jnl.-Post Line>.PROCEDURE<FAJnlPostLine>
    Code lines:
    ...
        MakeFALedgEntry.CopyFromFAJnlLine(FALedgEntry,FAJnlLine);
        Code;
      END;
    END;
    
    OnAfterFAJnlPostLine(FAJnlLine); <=====================
Codeunit<FA Jnl.-Post Line>.PROCEDURE<OnAfterGenJnlPostLine>
  Raised in: Codeunit<FA Jnl.-Post Line>.PROCEDURE<GenJnlPostLine>
    Code lines:
    ...
        FALedgEntry."G/L Entry No." := NextGLEntryNo;
        Code;
      END;
    END;
    
    OnAfterGenJnlPostLine(GenJnlLine); <=====================
Codeunit<FA Reclass. Check Line>.PROCEDURE<OnAfterOnRun>
  Raised in: Codeunit<FA Reclass. Check Line>.<OnRun>
    Code lines:
    ...
      DeprBookCode := "Depreciation Book Code";
    
    IF "Depreciation Book Code" <> DeprBookCode THEN
      FIELDERROR("Depreciation Book Code",Text000);
    
    OnAfterOnRun(Rec); <=====================
Codeunit<Make Maintenance Ledger Entry>.PROCEDURE<OnAfterCopyFromFACard>
  Raised in: Codeunit<Make Maintenance Ledger Entry>.PROCEDURE<CopyFromFACard>
    Code lines:
    ...
      "FA Location Code" := FA."FA Location Code";
      "Location Code" := FA."Location Code";
      "FA Exchange Rate" := FADeprBook.GetExchangeRate;
    END;
    
    OnAfterCopyFromFACard(MaintenanceLedgEntry,FA,FADeprBook); <=====================
Codeunit<Make Maintenance Ledger Entry>.PROCEDURE<OnAfterCopyFromFAJnlLine>
  Raised in: Codeunit<Make Maintenance Ledger Entry>.PROCEDURE<CopyFromFAJnlLine>
    Code lines:
    ...
      "Maintenance Code" := FAJnlLine."Maintenance Code";
      Correction := FAJnlLine.Correction;
      "No. Series" := FAJnlLine."Posting No. Series";
    END;
    
    OnAfterCopyFromFAJnlLine(MaintenanceLedgEntry,FAJnlLine); <=====================
Codeunit<Make Maintenance Ledger Entry>.PROCEDURE<OnAfterCopyFromGenJnlLine>
  Raised in: Codeunit<Make Maintenance Ledger Entry>.PROCEDURE<CopyFromGenJnlLine>
    Code lines:
    ...
      "Use Tax" := GenJnlLine."Use Tax";
      Correction := GenJnlLine.Correction;
      "No. Series" := GenJnlLine."Posting No. Series";
    END;
    
    OnAfterCopyFromGenJnlLine(MaintenanceLedgEntry,GenJnlLine); <=====================
Codeunit<Item Subst.>.PROCEDURE<OnAssemblyCalcCustPriceOnAfterCalcQtyAvail>
  Raised in: Codeunit<Item Subst.>.PROCEDURE<AssemblyCalcCustPrice>
    Code lines:
    ...
            AvailToPromise.QtyAvailabletoPromise(
              Item,GrossReq,SchedRcpt,
              Item.GETRANGEMAX("Date Filter"),CompanyInfo."Check-Avail. Time Bucket",
              CompanyInfo."Check-Avail. Period Calc.");
          Item.CALCFIELDS(Inventory);
          OnAssemblyCalcCustPriceOnAfterCalcQtyAvail(Item,AssemblyLine,TempItemSubstitution); <=====================
          TempItemSubstitution.Inventory := Item.Inventory;
        END ELSE BEGIN
          TempItemSubstitution."Substitute Type" := TempItemSubstitution."Substitute Type"::"Nonstock Item";
          TempItemSubstitution."Quantity Avail. on Shpt. Date" := 0;
    ...
Codeunit<Item Subst.>.PROCEDURE<OnAssemblyCalcCustPriceOnBeforeCalcQtyAvail>
  Raised in: Codeunit<Item Subst.>.PROCEDURE<AssemblyCalcCustPrice>
    Code lines:
    ...
        TempItemSubstitution."Shipment Date" := TempSalesLine."Shipment Date";
        IF ItemSubstitution."Substitute Type" = ItemSubstitution."Substitute Type"::Item THEN BEGIN
          Item.GET(ItemSubstitution."Substitute No.");
          IF NOT SetupDataIsPresent THEN
            GetSetupData;
          OnAssemblyCalcCustPriceOnBeforeCalcQtyAvail(Item,AssemblyLine,TempItemSubstitution); <=====================
          TempItemSubstitution."Quantity Avail. on Shpt. Date" :=
            AvailToPromise.QtyAvailabletoPromise(
              Item,GrossReq,SchedRcpt,
              Item.GETRANGEMAX("Date Filter"),CompanyInfo."Check-Avail. Time Bucket",
    ...
Codeunit<Item Subst.>.PROCEDURE<OnCalcCustPriceOnAfterCalcQtyAvail>
  Raised in: Codeunit<Item Subst.>.PROCEDURE<CalcCustPrice>
    Code lines:
    ...
            AvailToPromise.QtyAvailabletoPromise(
              Item,GrossReq,SchedRcpt,
              Item.GETRANGEMAX("Date Filter"),CompanyInfo."Check-Avail. Time Bucket",
              CompanyInfo."Check-Avail. Period Calc.");
          Item.CALCFIELDS(Inventory);
          OnCalcCustPriceOnAfterCalcQtyAvail(Item,TempSalesLine,TempItemSubstitution); <=====================
          TempItemSubstitution.Inventory := Item.Inventory;
        END ELSE BEGIN
          TempItemSubstitution."Substitute Type" := TempItemSubstitution."Substitute Type"::"Nonstock Item";
          TempItemSubstitution."Quantity Avail. on Shpt. Date" := 0;
    ...
Codeunit<Item Subst.>.PROCEDURE<OnCalcCustPriceOnBeforeCalcQtyAvail>
  Raised in: Codeunit<Item Subst.>.PROCEDURE<CalcCustPrice>
    Code lines:
    ...
        TempItemSubstitution."Shipment Date" := TempSalesLine."Shipment Date";
        IF ItemSubstitution."Substitute Type" = ItemSubstitution."Substitute Type"::Item THEN BEGIN
          Item.GET(ItemSubstitution."Substitute No.");
          IF NOT SetupDataIsPresent THEN
            GetSetupData;
          OnCalcCustPriceOnBeforeCalcQtyAvail(Item,TempSalesLine,TempItemSubstitution); <=====================
          TempItemSubstitution."Quantity Avail. on Shpt. Date" :=
            AvailToPromise.QtyAvailabletoPromise(
              Item,GrossReq,SchedRcpt,
              Item.GETRANGEMAX("Date Filter"),CompanyInfo."Check-Avail. Time Bucket",
    ...
Codeunit<Item Subst.>.PROCEDURE<OnCreateSubstListOnAfterCalcQtyAvail>
  Raised in: Codeunit<Item Subst.>.PROCEDURE<CreateSubstList>
    Code lines:
    ...
          TempItemSubstitution."Quantity Avail. on Shpt. Date" :=
            AvailToPromise.QtyAvailabletoPromise(
              Item,GrossReq,SchedRcpt,
              Item.GETRANGEMAX("Date Filter"),2,ODF);
          Item.CALCFIELDS(Inventory);
          OnCreateSubstListOnAfterCalcQtyAvail(Item,ProdOrderCompSubst,TempItemSubstitution); <=====================
          TempItemSubstitution.Inventory := Item.Inventory;
        END;
    
        IF IsSubstitutionInserted(TempItemSubstitution,ItemSubstitution) THEN BEGIN
    ...
Codeunit<Item Subst.>.PROCEDURE<OnCreateSubstListOnBeforeCalcQtyAvail>
  Raised in: Codeunit<Item Subst.>.PROCEDURE<CreateSubstList>
    Code lines:
    ...
        TempItemSubstitution."Relations Level" := RelationsLevel2;
        TempItemSubstitution."Shipment Date" := DemandDate;
    
        IF CalcATP THEN BEGIN
          Item.GET(ItemSubstitution."Substitute No.");
          OnCreateSubstListOnBeforeCalcQtyAvail(Item,ProdOrderCompSubst,TempItemSubstitution); <=====================
          TempItemSubstitution."Quantity Avail. on Shpt. Date" :=
            AvailToPromise.QtyAvailabletoPromise(
              Item,GrossReq,SchedRcpt,
              Item.GETRANGEMAX("Date Filter"),2,ODF);
    ...
Codeunit<Item Subst.>.PROCEDURE<OnInsertInSubstServiceListOnAfterCalcQtyAvail>
  Raised in: Codeunit<Item Subst.>.PROCEDURE<InsertInSubstServiceList>
    Code lines:
    ...
            AvailToPromise.QtyAvailabletoPromise(
              Item,GrossReq,SchedRcpt,
              Item.GETRANGEMAX("Date Filter"),2,
              CompanyInfo."Check-Avail. Period Calc.");
          Item.CALCFIELDS(Inventory);
          OnInsertInSubstServiceListOnAfterCalcQtyAvail(Item,ServInvLine,TempItemSubstitution); <=====================
          TempItemSubstitution.Inventory := Item.Inventory;
        END;
    
        IF TempItemSubstitution.INSERT AND
    ...
Codeunit<Item Subst.>.PROCEDURE<OnInsertInSubstServiceListOnBeforeCalcQtyAvail>
  Raised in: Codeunit<Item Subst.>.PROCEDURE<InsertInSubstServiceList>
    Code lines:
    ...
    
        IF TempItemSubstitution."Substitute Type" = TempItemSubstitution.Type::Item THEN BEGIN
          Item.GET(ItemSubstitution."Substitute No.");
          IF NOT SetupDataIsPresent THEN
            GetSetupData;
          OnInsertInSubstServiceListOnBeforeCalcQtyAvail(Item,ServInvLine,TempItemSubstitution); <=====================
          TempItemSubstitution."Quantity Avail. on Shpt. Date" :=
            AvailToPromise.QtyAvailabletoPromise(
              Item,GrossReq,SchedRcpt,
              Item.GETRANGEMAX("Date Filter"),2,
    ...
Codeunit<Item Subst.>.PROCEDURE<OnItemSubstGetOnAfterSubstSalesLineItem>
  Raised in: Codeunit<Item Subst.>.PROCEDURE<ItemSubstGet>
    Code lines:
    ...
        TempSalesLine.CreateDim(
          DimMgt.TypeToTableID3(TempSalesLine.Type),TempSalesLine."No.",
          DATABASE::Job,TempSalesLine."Job No.",
          DATABASE::"Responsibility Center",TempSalesLine."Responsibility Center");
    
        OnItemSubstGetOnAfterSubstSalesLineItem(TempSalesLine); <=====================
    
        COMMIT;
        IF ItemCheckAvail.SalesLineCheck(TempSalesLine) THEN
          TempSalesLine := SalesLine;
    ...
Codeunit<Dist. Integration>.PROCEDURE<OnAfterInsertPurchLine>
  Raised in: Codeunit<Dist. Integration>.PROCEDURE<GetSpecialOrders>
    Code lines:
    ...
          PurchLine."Purchasing Code" := SalesLine."Purchasing Code";
          PurchLine."Special Order Sales No." := SalesLine."Document No.";
          PurchLine."Special Order Sales Line No." := SalesLine."Line No.";
          OnBeforeInsertPurchLine(PurchLine);
          PurchLine.INSERT;
          OnAfterInsertPurchLine(PurchLine); <=====================
    
          NextLineNo := NextLineNo + 10000;
    
          SalesLine."Unit Cost (LCY)" := PurchLine."Unit Cost (LCY)";
    ...
Codeunit<Dist. Integration>.PROCEDURE<OnAfterPurchItemCrossRefFound>
  Raised in: Codeunit<Dist. Integration>.PROCEDURE<EnterPurchaseItemCrossRef>
    Code lines:
    ...
          "Cross-Reference Type No." := ItemCrossReference."Cross-Reference Type No.";
          IF ItemCrossReference.Description <> '' THEN BEGIN
            Description := ItemCrossReference.Description;
            "Description 2" := ItemCrossReference."Description 2";
          END;
          OnAfterPurchItemCrossRefFound(PurchLine2,ItemCrossReference); <=====================
        END ELSE BEGIN
          "Cross-Reference No." := '';
          "Cross-Reference Type" := "Cross-Reference Type"::" ";
          "Cross-Reference Type No." := '';
    ...
Codeunit<Dist. Integration>.PROCEDURE<OnAfterSalesItemCrossRefFound>
  Raised in: Codeunit<Dist. Integration>.PROCEDURE<EnterSalesItemCrossRef>
    Code lines:
    ...
          IF ItemCrossReference.Description <> '' THEN BEGIN
            Description := ItemCrossReference.Description;
            "Description 2" := ItemCrossReference."Description 2";
          END;
          "Cross-Reference Type No." := ItemCrossReference."Cross-Reference Type No.";
          OnAfterSalesItemCrossRefFound(SalesLine2,ItemCrossReference); <=====================
        END ELSE BEGIN
          "Cross-Reference No." := '';
          "Cross-Reference Type" := "Cross-Reference Type"::" ";
          "Cross-Reference Type No." := '';
    ...
Codeunit<Dist. Integration>.PROCEDURE<OnBeforeInsertPurchLine>
  Raised in: Codeunit<Dist. Integration>.PROCEDURE<GetSpecialOrders>
    Code lines:
    ...
          PurchLine.GetItemTranslation;
          PurchLine."Special Order" := TRUE;
          PurchLine."Purchasing Code" := SalesLine."Purchasing Code";
          PurchLine."Special Order Sales No." := SalesLine."Document No.";
          PurchLine."Special Order Sales Line No." := SalesLine."Line No.";
          OnBeforeInsertPurchLine(PurchLine); <=====================
          PurchLine.INSERT;
          OnAfterInsertPurchLine(PurchLine);
    
          NextLineNo := NextLineNo + 10000;
    ...
Codeunit<Catalog Item Management>.PROCEDURE<OnAfterItemCrossReferenceFilter>
  Raised in: Codeunit<Catalog Item Management>.PROCEDURE<NonstockItemCrossRef>
    Code lines:
    ItemCrossReference.SETRANGE("Item No.",NonStock2."Item No.");
    ItemCrossReference.SETRANGE("Unit of Measure",NonStock2."Unit of Measure");
    ItemCrossReference.SETRANGE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::Vendor);
    ItemCrossReference.SETRANGE("Cross-Reference Type No.",NonStock2."Vendor No.");
    ItemCrossReference.SETRANGE("Cross-Reference No.",NonStock2."Vendor Item No.");
    OnAfterItemCrossReferenceFilter(ItemCrossReference,NonStock2); <=====================
    IF NOT ItemCrossReference.FINDFIRST THEN BEGIN
      ItemCrossReference.INIT;
      ItemCrossReference.VALIDATE("Item No.",NonStock2."Item No.");
      ItemCrossReference.VALIDATE("Unit of Measure",NonStock2."Unit of Measure");
    ...
  Raised in: Codeunit<Catalog Item Management>.PROCEDURE<NonstockItemCrossRef>
    Code lines:
    ItemCrossReference.SETRANGE("Item No.",NonStock2."Item No.");
    ItemCrossReference.SETRANGE("Unit of Measure",NonStock2."Unit of Measure");
    ItemCrossReference.SETRANGE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::Vendor);
    ItemCrossReference.SETRANGE("Cross-Reference Type No.",NonStock2."Vendor No.");
    ItemCrossReference.SETRANGE("Cross-Reference No.",NonStock2."Vendor Item No.");
    OnAfterItemCrossReferenceFilter(ItemCrossReference,NonStock2); <=====================
    IF NOT ItemCrossReference.FINDFIRST THEN BEGIN
      ItemCrossReference.INIT;
      ItemCrossReference.VALIDATE("Item No.",NonStock2."Item No.");
      ItemCrossReference.VALIDATE("Unit of Measure",NonStock2."Unit of Measure");
    ...
Codeunit<Catalog Item Management>.PROCEDURE<OnAfterItemCrossReferenceInsert>
  Raised in: Codeunit<Catalog Item Management>.PROCEDURE<NonstockItemCrossRef>
    Code lines:
    ...
      ItemCrossReference.VALIDATE("Unit of Measure",NonStock2."Unit of Measure");
      ItemCrossReference.VALIDATE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::Vendor);
      ItemCrossReference.VALIDATE("Cross-Reference Type No.",NonStock2."Vendor No.");
      ItemCrossReference.VALIDATE("Cross-Reference No.",NonStock2."Vendor Item No.");
      ItemCrossReference.INSERT;
      OnAfterItemCrossReferenceInsert(ItemCrossReference,NonStock2); <=====================
    END;
    IF NonStock2."Bar Code" <> '' THEN BEGIN
      ItemCrossReference.RESET;
      ItemCrossReference.SETRANGE("Item No.",NonStock2."Item No.");
    ...
  Raised in: Codeunit<Catalog Item Management>.PROCEDURE<NonstockItemCrossRef>
    Code lines:
    ...
      ItemCrossReference.VALIDATE("Unit of Measure",NonStock2."Unit of Measure");
      ItemCrossReference.VALIDATE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::Vendor);
      ItemCrossReference.VALIDATE("Cross-Reference Type No.",NonStock2."Vendor No.");
      ItemCrossReference.VALIDATE("Cross-Reference No.",NonStock2."Vendor Item No.");
      ItemCrossReference.INSERT;
      OnAfterItemCrossReferenceInsert(ItemCrossReference,NonStock2); <=====================
    END;
    IF NonStock2."Bar Code" <> '' THEN BEGIN
      ItemCrossReference.RESET;
      ItemCrossReference.SETRANGE("Item No.",NonStock2."Item No.");
    ...
Codeunit<Catalog Item Management>.PROCEDURE<OnBeforeCreateNewItem>
  Raised in: Codeunit<Catalog Item Management>.PROCEDURE<CreateNewItem>
    Code lines:
    ...
    Item."Net Weight" := NonstockItem."Net Weight";
    Item."Gross Weight" := NonstockItem."Gross Weight";
    Item."Manufacturer Code" := NonstockItem."Manufacturer Code";
    Item."Item Category Code" := DummyItemTemplate."Item Category Code";
    Item."Created From Nonstock Item" := TRUE;
    OnBeforeCreateNewItem(Item,DummyItemTemplate,NonstockItem); <=====================
    Item.INSERT;
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterCheckInvtPostingSetup>
  Raised in: Codeunit<TransferOrder-Post Shipment>.<OnRun>
    Code lines:
    ...
      SourceCode := SourceCodeSetup.Transfer;
      InvtSetup.GET;
      InvtSetup.TESTFIELD("Posted Transfer Shpt. Nos.");
    
      CheckInvtPostingSetup;
      OnAfterCheckInvtPostingSetup(TransHeader,TempWhseShptHeader,SourceCode); <=====================
    
      LockTables(InvtSetup."Automatic Cost Posting");
    
      // Insert shipment header
    ...
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterCreateItemJnlLine>
  Raised in: Codeunit<TransferOrder-Post Shipment>.PROCEDURE<CreateItemJnlLine>
    Code lines:
    ...
      "Applies-to Entry" := TransferLine."Appl.-to Item Entry";
      "Shpt. Method Code" := TransShptHeader2."Shipment Method Code";
      "Direct Transfer" := TransferLine."Direct Transfer";
    END;
    
    OnAfterCreateItemJnlLine(ItemJnlLine,TransferLine,TransShptHeader2,TransShptLine2); <=====================
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterInsertShptEntryRelation>
  Raised in: Codeunit<TransferOrder-Post Shipment>.PROCEDURE<InsertShptEntryRelation>
    Code lines:
    ...
          TempHandlingSpecification := TempHandlingSpecification2;
          TempHandlingSpecification."Source Prod. Order Line" := TransShptLine."Line No.";
          TempHandlingSpecification."Buffer Status" := TempHandlingSpecification."Buffer Status"::MODIFY;
          TempHandlingSpecification.INSERT;
        UNTIL TempHandlingSpecification2.NEXT = 0;
        OnAfterInsertShptEntryRelation(TransLine,WhseShip,0,SuppressCommit); <=====================
        EXIT(0);
      END;
    END ELSE BEGIN
      OnAfterInsertShptEntryRelation(TransLine,WhseShip,ItemJnlLine."Item Shpt. Entry No.",SuppressCommit); <=====================
    ...
  Raised in: Codeunit<TransferOrder-Post Shipment>.PROCEDURE<InsertShptEntryRelation>
    Code lines:
    ...
          TempHandlingSpecification := TempHandlingSpecification2;
          TempHandlingSpecification."Source Prod. Order Line" := TransShptLine."Line No.";
          TempHandlingSpecification."Buffer Status" := TempHandlingSpecification."Buffer Status"::MODIFY;
          TempHandlingSpecification.INSERT;
        UNTIL TempHandlingSpecification2.NEXT = 0;
        OnAfterInsertShptEntryRelation(TransLine,WhseShip,0,SuppressCommit); <=====================
        EXIT(0);
      END;
    END ELSE BEGIN
      OnAfterInsertShptEntryRelation(TransLine,WhseShip,ItemJnlLine."Item Shpt. Entry No.",SuppressCommit); <=====================
    ...
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterInsertTransShptHeader>
  Raised in: Codeunit<TransferOrder-Post Shipment>.PROCEDURE<InsertTransShptHeader>
    Code lines:
    ...
    TransShptHeader.CopyFromTransferHeader(TransHeader);
    TransShptHeader."No. Series" := NoSeries;
    TransShptHeader."No." := NoSeriesMgt.GetNextNo(NoSeries,TransHeader."Posting Date",TRUE);
    OnBeforeInsertTransShptHeader(TransShptHeader,TransHeader,SuppressCommit);
    TransShptHeader.INSERT;
    OnAfterInsertTransShptHeader(TransHeader,TransShptHeader); <=====================
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterInsertTransShptLine>
  Raised in: Codeunit<TransferOrder-Post Shipment>.PROCEDURE<InsertTransShptLine>
    Code lines:
    ...
      IF WhsePosting THEN
        PostWhseJnlLine(ItemJnlLine,OriginalQuantity,OriginalQuantityBase);
    END;
    OnBeforeInsertTransShptLine(TransShptLine,TransLine,SuppressCommit);
    TransShptLine.INSERT;
    OnAfterInsertTransShptLine(TransShptLine,TransLine,SuppressCommit); <=====================
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterTransferOrderPostShipment>
  Raised in: Codeunit<TransferOrder-Post Shipment>.<OnRun>
    Code lines:
    ...
      Window.CLOSE;
    END;
    UpdateAnalysisView.UpdateAll(0,TRUE);
    UpdateItemAnalysisView.UpdateAll(0,TRUE);
    Rec := TransHeader;
    OnAfterTransferOrderPostShipment(Rec,SuppressCommit); <=====================
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforeDeleteOneTransferOrder>
  Raised in: Codeunit<TransferOrder-Post Shipment>.<OnRun>
    Code lines:
    ...
      MODIFY;
    
      TransLine.SETRANGE(Quantity);
      TransLine.SETRANGE("Qty. to Ship");
      DeleteOne := ShouldDeleteOneTransferOrder(TransLine);
      OnBeforeDeleteOneTransferOrder(TransHeader,DeleteOne); <=====================
      IF DeleteOne THEN
        DeleteOneTransferOrder(TransHeader,TransLine)
      ELSE BEGIN
        WhseTransferRelease.Release(TransHeader);
    ...
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforeInsertTransShptHeader>
  Raised in: Codeunit<TransferOrder-Post Shipment>.PROCEDURE<InsertTransShptHeader>
    Code lines:
    TransShptHeader.INIT;
    TransShptHeader.CopyFromTransferHeader(TransHeader);
    TransShptHeader."No. Series" := NoSeries;
    TransShptHeader."No." := NoSeriesMgt.GetNextNo(NoSeries,TransHeader."Posting Date",TRUE);
    OnBeforeInsertTransShptHeader(TransShptHeader,TransHeader,SuppressCommit); <=====================
    TransShptHeader.INSERT;
    OnAfterInsertTransShptHeader(TransHeader,TransShptHeader);
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforeInsertTransShptLine>
  Raised in: Codeunit<TransferOrder-Post Shipment>.PROCEDURE<InsertTransShptLine>
    Code lines:
    ...
          WhseShptLine,PostedWhseShptHeader,PostedWhseShptLine,TempWhseSplitSpecification);
      END;
      IF WhsePosting THEN
        PostWhseJnlLine(ItemJnlLine,OriginalQuantity,OriginalQuantityBase);
    END;
    OnBeforeInsertTransShptLine(TransShptLine,TransLine,SuppressCommit); <=====================
    TransShptLine.INSERT;
    OnAfterInsertTransShptLine(TransShptLine,TransLine,SuppressCommit);
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforePostItemJournalLine>
  Raised in: Codeunit<TransferOrder-Post Shipment>.PROCEDURE<PostItem>
    Code lines:
    CreateItemJnlLine(ItemJnlLine,TransferLine,TransShptHeader2,TransShptLine2);
    ReserveItemJnlLine(ItemJnlLine,TransferLine,WhseShip,WhseShptHeader2);
    
    OnBeforePostItemJournalLine(ItemJnlLine,TransferLine,TransShptHeader2,TransShptLine2,SuppressCommit); <=====================
    ItemJnlPostLine.RunWithCheck(ItemJnlLine);
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforeTransferOrderPostShipment>
  Raised in: Codeunit<TransferOrder-Post Shipment>.<OnRun>
    Code lines:
    ReleaseDocument(Rec);
    TransHeader := Rec;
    TransHeader.SetHideValidationDialog(HideValidationDialog);
    
    OnBeforeTransferOrderPostShipment(TransHeader,SuppressCommit); <=====================
    
    WITH TransHeader DO BEGIN
      CheckBeforePost;
    
      WhseReference := "Posting from Whse. Ref.";
    ...
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterCheckInvtPostingSetup>
  Raised in: Codeunit<TransferOrder-Post Receipt>.<OnRun>
    Code lines:
    ...
      SourceCode := SourceCodeSetup.Transfer;
      InvtSetup.GET;
      InvtSetup.TESTFIELD("Posted Transfer Rcpt. Nos.");
    
      CheckInvtPostingSetup;
      OnAfterCheckInvtPostingSetup(TransHeader,TempWhseRcptHeader,SourceCode); <=====================
    
      LockTables(InvtSetup."Automatic Cost Posting");
    
      // Insert receipt header
    ...
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterInsertTransRcptLine>
  Raised in: Codeunit<TransferOrder-Post Receipt>.PROCEDURE<InsertTransRcptLine>
    Code lines:
    TransRcptLine.INIT;
    TransRcptLine."Document No." := ReceiptNo;
    TransRcptLine.CopyFromTransferLine(TransLine);
    OnBeforeInsertTransRcptLine(TransRcptLine,TransLine,SuppressCommit);
    TransRcptLine.INSERT;
    OnAfterInsertTransRcptLine(TransRcptLine,TransLine,SuppressCommit); <=====================
    
    IF TransLine."Qty. to Receive" > 0 THEN BEGIN
      OriginalQuantity := TransLine."Qty. to Receive";
      OriginalQuantityBase := TransLine."Qty. to Receive (Base)";
    ...
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterTransferOderPostReceipt>
  Raised in: Codeunit<TransferOrder-Post Receipt>.<OnRun>
    Code lines:
    ...
    UpdateAnalysisView.UpdateAll(0,TRUE);
    UpdateItemAnalysisView.UpdateAll(0,TRUE);
    Rec := TransHeader;
    
    OnAfterTransferOrderPostReceipt(Rec,SuppressCommit);
    OnAfterTransferOderPostReceipt(Rec); <=====================
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterTransferOrderPostReceipt>
  Raised in: Codeunit<TransferOrder-Post Receipt>.<OnRun>
    Code lines:
    ...
    END;
    UpdateAnalysisView.UpdateAll(0,TRUE);
    UpdateItemAnalysisView.UpdateAll(0,TRUE);
    Rec := TransHeader;
    
    OnAfterTransferOrderPostReceipt(Rec,SuppressCommit); <=====================
    OnAfterTransferOderPostReceipt(Rec);
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterTransLineUpdateQtyReceived>
  Raised in: Codeunit<TransferOrder-Post Receipt>.<OnRun>
    Code lines:
    ...
          TransLine.UpdateWithWarehouseShipReceive;
          ReservMgt.SetItemJnlLine(ItemJnlLine);
          ReservMgt.SetItemTrackingHandling(1); // Allow deletion
          ReservMgt.DeleteReservEntries(TRUE,0);
          TransLine.MODIFY;
          OnAfterTransLineUpdateQtyReceived(TransLine,SuppressCommit); <=====================
        UNTIL TransLine.NEXT = 0;
    
      IF WhseReceive THEN
        WhseRcptLine.LOCKTABLE;
    ...
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterTransRcptLineModify>
  Raised in: Codeunit<TransferOrder-Post Receipt>.PROCEDURE<InsertTransRcptLine>
    Code lines:
    ...
        WhsePostRcpt.CreatePostedRcptLine(
          WhseRcptLine,PostedWhseRcptHeader,PostedWhseRcptLine,TempWhseSplitSpecification);
      END;
      IF WhsePosting THEN
        PostWhseJnlLine(ItemJnlLine,OriginalQuantity,OriginalQuantityBase,TempWhseSplitSpecification);
      OnAfterTransRcptLineModify(TransRcptLine,TransLine,SuppressCommit); <=====================
    END;
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforeDeleteOneTransferHeader>
  Raised in: Codeunit<TransferOrder-Post Receipt>.<OnRun>
    Code lines:
    ...
      MODIFY;
    
      TransLine.SETRANGE(Quantity);
      TransLine.SETRANGE("Qty. to Receive");
      DeleteOne := ShouldDeleteOneTransferOrder(TransLine);
      OnBeforeDeleteOneTransferHeader(TransHeader,DeleteOne); <=====================
      IF DeleteOne THEN
        DeleteOneTransferOrder(TransHeader,TransLine)
      ELSE BEGIN
        WhseTransferRelease.Release(TransHeader);
    ...
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforeInsertTransRcptHeader>
  Raised in: Codeunit<TransferOrder-Post Receipt>.PROCEDURE<InsertTransRcptHeader>
    Code lines:
    OnBeforeInsertTransRcptHeader(TransRcptHeader,TransHeader,SuppressCommit,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    TransRcptHeader.INIT;
    TransRcptHeader.CopyFromTransferHeader(TransHeader);
    TransRcptHeader."No. Series" := NoSeries;
    TransRcptHeader."No." := NoSeriesMgt.GetNextNo(NoSeries,TransHeader."Posting Date",TRUE);
    OnBeforeTransRcptHeaderInsert(TransRcptHeader,TransHeader);
    TransRcptHeader.INSERT;
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforeInsertTransRcptLine>
  Raised in: Codeunit<TransferOrder-Post Receipt>.PROCEDURE<InsertTransRcptLine>
    Code lines:
    TransRcptLine.INIT;
    TransRcptLine."Document No." := ReceiptNo;
    TransRcptLine.CopyFromTransferLine(TransLine);
    OnBeforeInsertTransRcptLine(TransRcptLine,TransLine,SuppressCommit); <=====================
    TransRcptLine.INSERT;
    OnAfterInsertTransRcptLine(TransRcptLine,TransLine,SuppressCommit);
    
    IF TransLine."Qty. to Receive" > 0 THEN BEGIN
      OriginalQuantity := TransLine."Qty. to Receive";
      OriginalQuantityBase := TransLine."Qty. to Receive (Base)";
    ...
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforePostItemJournalLine>
  Raised in: Codeunit<TransferOrder-Post Receipt>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
    ItemJnlLine."Shpt. Method Code" := TransRcptHeader2."Shipment Method Code";
    ItemJnlLine."Direct Transfer" := TransLine."Direct Transfer";
    WriteDownDerivedLines(TransLine3);
    ItemJnlPostLine.SetPostponeReservationHandling(TRUE);
    
    OnBeforePostItemJournalLine(ItemJnlLine,TransLine3,TransRcptHeader2,TransRcptLine2,SuppressCommit); <=====================
    ItemJnlPostLine.RunWithCheck(ItemJnlLine);
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforeTransferOderPostReceipt>
  Raised in: Codeunit<TransferOrder-Post Receipt>.<OnRun>
    Code lines:
    ReleaseDocument(Rec);
    TransHeader := Rec;
    TransHeader.SetHideValidationDialog(HideValidationDialog);
    
    OnBeforeTransferOderPostReceipt(TransHeader); <=====================
    OnBeforeTransferOrderPostReceipt(TransHeader,SuppressCommit);
    
    WITH TransHeader DO BEGIN
      CheckBeforePost;
    
    ...
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforeTransferOrderPostReceipt>
  Raised in: Codeunit<TransferOrder-Post Receipt>.<OnRun>
    Code lines:
    ReleaseDocument(Rec);
    TransHeader := Rec;
    TransHeader.SetHideValidationDialog(HideValidationDialog);
    
    OnBeforeTransferOderPostReceipt(TransHeader);
    OnBeforeTransferOrderPostReceipt(TransHeader,SuppressCommit); <=====================
    
    WITH TransHeader DO BEGIN
      CheckBeforePost;
    
    ...
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforeTransRcptHeaderInsert>
  Raised in: Codeunit<TransferOrder-Post Receipt>.PROCEDURE<InsertTransRcptHeader>
    Code lines:
    ...
    
    TransRcptHeader.INIT;
    TransRcptHeader.CopyFromTransferHeader(TransHeader);
    TransRcptHeader."No. Series" := NoSeries;
    TransRcptHeader."No." := NoSeriesMgt.GetNextNo(NoSeries,TransHeader."Posting Date",TRUE);
    OnBeforeTransRcptHeaderInsert(TransRcptHeader,TransHeader); <=====================
    TransRcptHeader.INSERT;
Codeunit<TransferOrder-Post (Yes/No)>.PROCEDURE<OnAfterPost>
  Raised in: Codeunit<TransferOrder-Post (Yes/No)>.PROCEDURE<Code>
    Code lines:
    ...
            TransferPostReceipt.RUN(TransHeader);
        END;
      END;
    END;
    
    OnAfterPost(TransHeader); <=====================
Codeunit<TransferOrder-Post + Print>.PROCEDURE<OnAfterPost>
  Raised in: Codeunit<TransferOrder-Post + Print>.PROCEDURE<Code>
    Code lines:
    ...
        END;
        PrintReport(TransHeader,Selection);
      END;
    END;
    
    OnAfterPost(TransHeader); <=====================
Codeunit<Release Transfer Document>.PROCEDURE<OnAfterReleaseTransferDoc>
  Raised in: Codeunit<Release Transfer Document>.<OnRun>
    Code lines:
    ...
    MODIFY;
    
    WhseTransferRelease.SetCallFromTransferOrder(TRUE);
    WhseTransferRelease.Release(Rec);
    
    OnAfterReleaseTransferDoc(Rec); <=====================
Codeunit<Release Transfer Document>.PROCEDURE<OnAfterReopenTransferDoc>
  Raised in: Codeunit<Release Transfer Document>.PROCEDURE<Reopen>
    Code lines:
    ...
      WhseTransferRelease.Reopen(TransHeader);
      VALIDATE(Status,Status::Open);
      MODIFY;
    END;
    
    OnAfterReopenTransferDoc(TransHeader); <=====================
Codeunit<Release Transfer Document>.PROCEDURE<OnBeforeReleaseTransferDoc>
  Raised in: Codeunit<Release Transfer Document>.<OnRun>
    Code lines:
    IF Status = Status::Released THEN
      EXIT;
    
    OnBeforeReleaseTransferDoc(Rec); <=====================
    TESTFIELD("Transfer-from Code");
    TESTFIELD("Transfer-to Code");
    IF "Transfer-from Code" = "Transfer-to Code" THEN
      ERROR(Text001,"No.",FIELDCAPTION("Transfer-from Code"),FIELDCAPTION("Transfer-to Code"));
    IF NOT "Direct Transfer" THEN
      TESTFIELD("In-Transit Code")
    ...
Codeunit<Release Transfer Document>.PROCEDURE<OnBeforeReopenTransferDoc>
  Raised in: Codeunit<Release Transfer Document>.PROCEDURE<Reopen>
    Code lines:
    WITH TransHeader DO BEGIN
      IF Status = Status::Open THEN
        EXIT;
    
      OnBeforeReopenTransferDoc(TransHeader); <=====================
      WhseTransferRelease.Reopen(TransHeader);
      VALIDATE(Status,Status::Open);
      MODIFY;
    END;
    
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateRcptLineFromPurchLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<PurchLine2ReceiptLine>
    Code lines:
    ...
        "Bin Code" := WhseReceiptHeader."Bin Code";
      IF "Bin Code" = '' THEN
        "Bin Code" := PurchLine."Bin Code";
      UpdateReceiptLine(WhseReceiptLine,WhseReceiptHeader);
      CreateReceiptLine(WhseReceiptLine);
      OnAfterCreateRcptLineFromPurchLine(WhseReceiptLine,WhseReceiptHeader,PurchLine); <=====================
      EXIT(NOT HasErrorOccured);
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateRcptLineFromSalesLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<SalesLine2ReceiptLine>
    Code lines:
    ...
        "Bin Code" := WhseReceiptHeader."Bin Code";
      IF "Bin Code" = '' THEN
        "Bin Code" := SalesLine."Bin Code";
      UpdateReceiptLine(WhseReceiptLine,WhseReceiptHeader);
      CreateReceiptLine(WhseReceiptLine);
      OnAfterCreateRcptLineFromSalesLine(WhseReceiptLine,WhseReceiptHeader,SalesLine); <=====================
      EXIT(NOT HasErrorOccured);
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateRcptLineFromTransLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<TransLine2ReceiptLine>
    Code lines:
    ...
      IF "Bin Code" = '' THEN
        "Bin Code" := TransLine."Transfer-To Bin Code";
      OnBeforeUpdateRcptLineFromTransLine(WhseReceiptLine,TransLine);
      UpdateReceiptLine(WhseReceiptLine,WhseReceiptHeader);
      CreateReceiptLine(WhseReceiptLine);
      OnAfterCreateRcptLineFromTransLine(WhseReceiptLine,WhseReceiptHeader,TransLine); <=====================
      EXIT(NOT HasErrorOccured);
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateShptLineFromPurchLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<FromPurchLine2ShptLine>
    Code lines:
    ...
        "Bin Code" := WhseShptHeader."Bin Code";
      IF "Bin Code" = '' THEN
        "Bin Code" := PurchLine."Bin Code";
      UpdateShptLine(WhseShptLine,WhseShptHeader);
      CreateShptLine(WhseShptLine);
      OnAfterCreateShptLineFromPurchLine(WhseShptLine,WhseShptHeader,PurchLine); <=====================
      EXIT(NOT HasErrorOccured);
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateShptLineFromSalesLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<CreateShptLineFromSalesLine>
    Code lines:
    ...
      IF "Bin Code" = '' THEN
        "Bin Code" := SalesLine."Bin Code";
      UpdateShptLine(WhseShptLine,WhseShptHeader);
      OnBeforeCreateShptLineFromSalesLine(WhseShptLine,WhseShptHeader,SalesLine,SalesHeader);
      CreateShptLine(WhseShptLine);
      OnAfterCreateShptLineFromSalesLine(WhseShptLine,WhseShptHeader,SalesLine,SalesHeader); <=====================
      EXIT(NOT HasErrorOccured);
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateShptLineFromServiceLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<FromServiceLine2ShptLine>
    Code lines:
    ...
        "Bin Code" := WhseShptHeader."Bin Code";
      IF "Bin Code" = '' THEN
        "Bin Code" := ServiceLine."Bin Code";
      UpdateShptLine(WhseShptLine,WhseShptHeader);
      CreateShptLine(WhseShptLine);
      OnAfterCreateShptLineFromServiceLine(WhseShptLine,WhseShptHeader,ServiceLine); <=====================
      EXIT(NOT HasErrorOccured);
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateShptLineFromTransLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<FromTransLine2ShptLine>
    Code lines:
    ...
      IF "Bin Code" = '' THEN
        "Bin Code" := TransLine."Transfer-from Bin Code";
      UpdateShptLine(WhseShptLine,WhseShptHeader);
      OnBeforeCreateShptLineFromTransLine(WhseShptLine,WhseShptHeader,TransLine,TransHeader);
      CreateShptLine(WhseShptLine);
      OnAfterCreateShptLineFromTransLine(WhseShptLine,WhseShptHeader,TransLine,TransHeader); <=====================
      EXIT(NOT HasErrorOccured);
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterInitNewWhseShptLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<CreateShptLineFromSalesLine>
    Code lines:
    SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
    
    WITH WhseShptLine DO BEGIN
      InitNewLine(WhseShptHeader."No.");
      OnAfterInitNewWhseShptLine(WhseShptLine,WhseShptHeader,SalesLine); <=====================
      SetSource(DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      SalesLine.TESTFIELD("Unit of Measure Code");
      SetItemData(
        SalesLine."No.",SalesLine.Description,SalesLine."Description 2",SalesLine."Location Code",
        SalesLine."Variant Code",SalesLine."Unit of Measure Code",SalesLine."Qty. per Unit of Measure");
    ...
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterWhseReceiptLineInsert>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<CreateReceiptLine>
    Code lines:
    ...
      Item."No." := "Item No.";
      Item.ItemSKUGet(Item,"Location Code","Variant Code");
      "Shelf No." := Item."Shelf No.";
      Status := GetLineStatus;
      INSERT;
      OnAfterWhseReceiptLineInsert(WhseReceiptLine); <=====================
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterWhseShptLineInsert>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<CreateShptLine>
    Code lines:
    ...
      Item."No." := "Item No.";
      Item.ItemSKUGet(Item,"Location Code","Variant Code");
      "Shelf No." := Item."Shelf No.";
      OnBeforeWhseShptLineInsert(WhseShptLine);
      INSERT;
      OnAfterWhseShptLineInsert(WhseShptLine); <=====================
      CreateWhseItemTrackingLines;
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeCreateShptLineFromSalesLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<CreateShptLineFromSalesLine>
    Code lines:
    ...
      IF "Location Code" = WhseShptHeader."Location Code" THEN
        "Bin Code" := WhseShptHeader."Bin Code";
      IF "Bin Code" = '' THEN
        "Bin Code" := SalesLine."Bin Code";
      UpdateShptLine(WhseShptLine,WhseShptHeader);
      OnBeforeCreateShptLineFromSalesLine(WhseShptLine,WhseShptHeader,SalesLine,SalesHeader); <=====================
      CreateShptLine(WhseShptLine);
      OnAfterCreateShptLineFromSalesLine(WhseShptLine,WhseShptHeader,SalesLine,SalesHeader);
      EXIT(NOT HasErrorOccured);
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeCreateShptLineFromTransLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<FromTransLine2ShptLine>
    Code lines:
    ...
      IF "Location Code" = WhseShptHeader."Location Code" THEN
        "Bin Code" := WhseShptHeader."Bin Code";
      IF "Bin Code" = '' THEN
        "Bin Code" := TransLine."Transfer-from Bin Code";
      UpdateShptLine(WhseShptLine,WhseShptHeader);
      OnBeforeCreateShptLineFromTransLine(WhseShptLine,WhseShptHeader,TransLine,TransHeader); <=====================
      CreateShptLine(WhseShptLine);
      OnAfterCreateShptLineFromTransLine(WhseShptLine,WhseShptHeader,TransLine,TransHeader);
      EXIT(NOT HasErrorOccured);
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeUpdateRcptLineFromTransLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<TransLine2ReceiptLine>
    Code lines:
    ...
      "Starting Date" := WORKDATE;
      IF "Location Code" = WhseReceiptHeader."Location Code" THEN
        "Bin Code" := WhseReceiptHeader."Bin Code";
      IF "Bin Code" = '' THEN
        "Bin Code" := TransLine."Transfer-To Bin Code";
      OnBeforeUpdateRcptLineFromTransLine(WhseReceiptLine,TransLine); <=====================
      UpdateReceiptLine(WhseReceiptLine,WhseReceiptHeader);
      CreateReceiptLine(WhseReceiptLine);
      OnAfterCreateRcptLineFromTransLine(WhseReceiptLine,WhseReceiptHeader,TransLine);
      EXIT(NOT HasErrorOccured);
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeWhseShptLineInsert>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<CreateShptLine>
    Code lines:
    WITH WhseShptLine DO BEGIN
      Item."No." := "Item No.";
      Item.ItemSKUGet(Item,"Location Code","Variant Code");
      "Shelf No." := Item."Shelf No.";
      OnBeforeWhseShptLineInsert(WhseShptLine); <=====================
      INSERT;
      OnAfterWhseShptLineInsert(WhseShptLine);
      CreateWhseItemTrackingLines;
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnFromPurchLine2ShptLineOnAfterInitNewLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<FromPurchLine2ShptLine>
    Code lines:
    WITH WhseShptLine DO BEGIN
      InitNewLine(WhseShptHeader."No.");
      OnFromPurchLine2ShptLineOnAfterInitNewLine(WhseShptLine,WhseShptHeader,PurchLine); <=====================
      SetSource(DATABASE::"Purchase Line",PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.");
      PurchLine.TESTFIELD("Unit of Measure Code");
      SetItemData(
        PurchLine."No.",PurchLine.Description,PurchLine."Description 2",PurchLine."Location Code",
        PurchLine."Variant Code",PurchLine."Unit of Measure Code",PurchLine."Qty. per Unit of Measure");
      SetQtysOnShptLine(WhseShptLine,ABS(PurchLine."Outstanding Quantity"),ABS(PurchLine."Outstanding Qty. (Base)"));
      IF PurchLine."Document Type" = PurchLine."Document Type"::Order THEN
    ...
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnFromServiceLine2ShptLineOnAfterInitNewLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<FromServiceLine2ShptLine>
    Code lines:
    ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
    
    WITH WhseShptLine DO BEGIN
      InitNewLine(WhseShptHeader."No.");
      OnFromServiceLine2ShptLineOnAfterInitNewLine(WhseShptLine,WhseShptHeader,ServiceLine); <=====================
      SetSource(DATABASE::"Service Line",ServiceLine."Document Type",ServiceLine."Document No.",ServiceLine."Line No.");
      ServiceLine.TESTFIELD("Unit of Measure Code");
      SetItemData(
        ServiceLine."No.",ServiceLine.Description,ServiceLine."Description 2",ServiceLine."Location Code",
        ServiceLine."Variant Code",ServiceLine."Unit of Measure Code",ServiceLine."Qty. per Unit of Measure");
    ...
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnFromTransLine2ShptLineOnAfterInitNewLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<FromTransLine2ShptLine>
    Code lines:
    WITH WhseShptLine DO BEGIN
      InitNewLine(WhseShptHeader."No.");
      OnFromTransLine2ShptLineOnAfterInitNewLine(WhseShptLine,WhseShptHeader,TransLine); <=====================
      SetSource(DATABASE::"Transfer Line",0,TransLine."Document No.",TransLine."Line No.");
      TransLine.TESTFIELD("Unit of Measure Code");
      SetItemData(
        TransLine."Item No.",TransLine.Description,TransLine."Description 2",TransLine."Transfer-from Code",
        TransLine."Variant Code",TransLine."Unit of Measure Code",TransLine."Qty. per Unit of Measure");
      SetQtysOnShptLine(WhseShptLine,TransLine."Outstanding Quantity",TransLine."Outstanding Qty. (Base)");
      "Due Date" := TransLine."Shipment Date";
    ...
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnPurchLine2ReceiptLineOnAfterInitNewLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<PurchLine2ReceiptLine>
    Code lines:
    WITH WhseReceiptLine DO BEGIN
      InitNewLine(WhseReceiptHeader."No.");
      OnPurchLine2ReceiptLineOnAfterInitNewLine(WhseReceiptLine,WhseReceiptHeader,PurchLine); <=====================
      SetSource(DATABASE::"Purchase Line",PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.");
      PurchLine.TESTFIELD("Unit of Measure Code");
      SetItemData(
        PurchLine."No.",PurchLine.Description,PurchLine."Description 2",PurchLine."Location Code",
        PurchLine."Variant Code",PurchLine."Unit of Measure Code",PurchLine."Qty. per Unit of Measure");
      CASE PurchLine."Document Type" OF
        PurchLine."Document Type"::Order:
    ...
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnSalesLine2ReceiptLineOnAfterInitNewLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<SalesLine2ReceiptLine>
    Code lines:
    WITH WhseReceiptLine DO BEGIN
      InitNewLine(WhseReceiptHeader."No.");
      OnSalesLine2ReceiptLineOnAfterInitNewLine(WhseReceiptLine,WhseReceiptHeader,SalesLine); <=====================
      SetSource(DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      SalesLine.TESTFIELD("Unit of Measure Code");
      SetItemData(
        SalesLine."No.",SalesLine.Description,SalesLine."Description 2",SalesLine."Location Code",
        SalesLine."Variant Code",SalesLine."Unit of Measure Code",SalesLine."Qty. per Unit of Measure");
      CASE SalesLine."Document Type" OF
        SalesLine."Document Type"::Order:
    ...
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnTransLine2ReceiptLineOnAfterInitNewLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<TransLine2ReceiptLine>
    Code lines:
    WITH WhseReceiptLine DO BEGIN
      InitNewLine(WhseReceiptHeader."No.");
      OnTransLine2ReceiptLineOnAfterInitNewLine(WhseReceiptLine,WhseReceiptHeader,TransLine); <=====================
      SetSource(DATABASE::"Transfer Line",1,TransLine."Document No.",TransLine."Line No.");
      TransLine.TESTFIELD("Unit of Measure Code");
      SetItemData(
        TransLine."Item No.",TransLine.Description,TransLine."Description 2",TransLine."Transfer-to Code",
        TransLine."Variant Code",TransLine."Unit of Measure Code",TransLine."Qty. per Unit of Measure");
      VALIDATE("Qty. Received",TransLine."Quantity Received");
      TransLine.CALCFIELDS("Whse. Inbnd. Otsdg. Qty (Base)");
    ...
Codeunit<Get Source Doc. Inbound>.PROCEDURE<OnAfterGetInboundDocs>
  Raised in: Codeunit<Get Source Doc. Inbound>.PROCEDURE<GetInboundDocs>
    Code lines:
    ...
    WhseSourceFilterSelection.RUNMODAL;
    
    WhseReceiptHeader."Document Status" := WhseReceiptHeader.GetHeaderStatus(0);
    WhseReceiptHeader.MODIFY;
    
    OnAfterGetInboundDocs(WhseReceiptHeader); <=====================
Codeunit<Get Source Doc. Inbound>.PROCEDURE<OnAfterGetSingleInboundDoc>
  Raised in: Codeunit<Get Source Doc. Inbound>.PROCEDURE<GetSingleInboundDoc>
    Code lines:
    ...
    GetSourceDocuments.RUNMODAL;
    
    WhseReceiptHeader."Document Status" := WhseReceiptHeader.GetHeaderStatus(0);
    WhseReceiptHeader.MODIFY;
    
    OnAfterGetSingleInboundDoc(WhseReceiptHeader); <=====================
Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnAfterGetOutboundDocs>
  Raised in: Codeunit<Get Source Doc. Outbound>.PROCEDURE<GetOutboundDocs>
    Code lines:
    ...
    WhseSourceFilterSelection.RUNMODAL;
    
    WhseShptHeader."Document Status" := WhseShptHeader.GetDocumentStatus(0);
    WhseShptHeader.MODIFY;
    
    OnAfterGetOutboundDocs(WhseShptHeader); <=====================
Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnAfterGetSingleOutboundDoc>
  Raised in: Codeunit<Get Source Doc. Outbound>.PROCEDURE<GetSingleOutboundDoc>
    Code lines:
    ...
    
    WhseShptHeader."Document Status" :=
      WhseShptHeader.GetDocumentStatus(0);
    WhseShptHeader.MODIFY;
    
    OnAfterGetSingleOutboundDoc(WhseShptHeader); <=====================
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterCheckWhseRcptLine>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<Code>
    Code lines:
    ...
          TESTFIELD("Unit of Measure Code");
          WhseRqst.GET(
            WhseRqst.Type::Inbound,"Location Code","Source Type","Source Subtype","Source No.");
          IF WhseRqst."Document Status" <> WhseRqst."Document Status"::Released THEN
            ERROR(Text000,"Source Document","Source No.");
          OnAfterCheckWhseRcptLine(WhseRcptLine); <=====================
        UNTIL NEXT = 0
      ELSE
        ERROR(Text001);
    
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterCheckWhseRcptLines>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<Code>
    Code lines:
    ...
          OnAfterCheckWhseRcptLine(WhseRcptLine);
        UNTIL NEXT = 0
      ELSE
        ERROR(Text001);
    
      OnAfterCheckWhseRcptLines(WhseRcptHeader,WhseRcptLine); <=====================
    
      CounterSourceDocOK := 0;
      CounterSourceDocTotal := 0;
      CounterPutAways := 0;
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterFindWhseRcptLineForPurchLine>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<InitSourceDocumentLines>
    Code lines:
    ...
            PurchLine.SETRANGE("Document No.","Source No.");
            IF PurchLine.FIND('-') THEN
              REPEAT
                SETRANGE("Source Line No.",PurchLine."Line No.");
                IF FINDFIRST THEN BEGIN
                  OnAfterFindWhseRcptLineForPurchLine(WhseRcptLine2,PurchLine); <=====================
                  IF "Source Document" = "Source Document"::"Purchase Order" THEN BEGIN
                    ModifyLine := PurchLine."Qty. to Receive" <> "Qty. to Receive";
                    IF ModifyLine THEN
                      PurchLine.VALIDATE("Qty. to Receive","Qty. to Receive")
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterFindWhseRcptLineForSalesLine>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<InitSourceDocumentLines>
    Code lines:
    ...
            SalesLine.SETRANGE("Document No.","Source No.");
            IF SalesLine.FIND('-') THEN
              REPEAT
                SETRANGE("Source Line No.",SalesLine."Line No.");
                IF FINDFIRST THEN BEGIN
                  OnAfterFindWhseRcptLineForSalesLine(WhseRcptLine2,SalesLine); <=====================
                  IF "Source Document" = "Source Document"::"Sales Order" THEN BEGIN
                    ModifyLine := SalesLine."Qty. to Ship" <> -"Qty. to Receive";
                    IF ModifyLine THEN
                      SalesLine.VALIDATE("Qty. to Ship",-"Qty. to Receive");
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterFindWhseRcptLineForTransLine>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<InitSourceDocumentLines>
    Code lines:
    ...
            TransLine.SETRANGE("Derived From Line No.",0);
            IF TransLine.FIND('-') THEN
              REPEAT
                SETRANGE("Source Line No.",TransLine."Line No.");
                IF FINDFIRST THEN BEGIN
                  OnAfterFindWhseRcptLineForTransLine(WhseRcptLine2,TransLine); <=====================
                  ModifyLine := TransLine."Qty. to Receive" <> "Qty. to Receive";
                  IF ModifyLine THEN
                    TransLine.VALIDATE("Qty. to Receive","Qty. to Receive");
                  IF TransLine."Transfer-To Bin Code" <> "Bin Code" THEN BEGIN
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterInitPostedRcptLine>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<CreatePostedRcptLine>
    Code lines:
    UpdateWhseRcptLineBuf(WhseRcptLine);
    WITH PostedWhseRcptLine DO BEGIN
      INIT;
      TRANSFERFIELDS(WhseRcptLine);
      "No." := PostedWhseRcptHeader."No.";
      OnAfterInitPostedRcptLine(WhseRcptLine,PostedWhseRcptLine); <=====================
      Quantity := WhseRcptLine."Qty. to Receive";
      "Qty. (Base)" := WhseRcptLine."Qty. to Receive (Base)";
      CASE WhseRcptLine."Source Document" OF
        WhseRcptLine."Source Document"::"Purchase Order":
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterInitSourceDocumentLines>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<InitSourceDocumentLines>
    Code lines:
    ...
          OnInitSourceDocumentLines(WhseRcptLine2);
      END;
      SETRANGE("Source Line No.");
    END;
    
    OnAfterInitSourceDocumentLines(WhseRcptLine2); <=====================
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterPostUpdateWhseRcptLine>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<PostUpdateWhseDocuments>
    Code lines:
    ...
            WhseRcptLine2."Qty. to Cross-Dock" := 0;
            WhseRcptLine2."Qty. to Cross-Dock (Base)" := 0;
            WhseRcptLine2.Status := WhseRcptLine2.GetLineStatus;
            WhseRcptLine2.MODIFY;
          END;
          OnAfterPostUpdateWhseRcptLine(WhseRcptLine2); <=====================
        UNTIL NEXT = 0;
        DELETEALL;
      END;
    
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterPostWhseJnlLine>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<CreatePostedRcptLine>
    Code lines:
    ...
      INSERT;
    END;
    
    OnBeforePostWhseJnlLine(PostedWhseRcptHeader,PostedWhseRcptLine,WhseRcptLine);
    PostWhseJnlLine(PostedWhseRcptHeader,PostedWhseRcptLine,TempHandlingSpecification);
    OnAfterPostWhseJnlLine(WhseRcptLine); <=====================
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterRun>
  Raised in: Codeunit<Whse.-Post Receipt>.<OnRun>
    Code lines:
    ...
    
    WhseRcptLine.COPY(Rec);
    Code;
    Rec := WhseRcptLine;
    
    OnAfterRun(Rec); <=====================
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforePostSourceDocument>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<Code>
    Code lines:
    ...
        InitSourceDocumentHeader;
        COMMIT;
    
        CounterSourceDocTotal := CounterSourceDocTotal + 1;
    
        OnBeforePostSourceDocument(WhseRcptLine,PurchHeader,SalesHeader,TransHeader); <=====================
        PostSourceDocument(WhseRcptLine);
    
        IF FINDLAST THEN;
        SETRANGE("Source Type");
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforePostUpdateWhseDocuments>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<PostUpdateWhseDocuments>
    Code lines:
    OnBeforePostUpdateWhseDocuments(WhseRcptHeader); <=====================
    WITH WhseRcptLineBuf DO
      IF FIND('-') THEN BEGIN
        REPEAT
          WhseRcptLine2.GET("No.","Line No.");
          OnBeforePostUpdateWhseRcptLine(WhseRcptLine2);
          IF "Qty. Outstanding" = "Qty. to Receive" THEN
            WhseRcptLine2.DELETE
          ELSE BEGIN
            WhseRcptLine2.VALIDATE("Qty. Received","Qty. Received" + "Qty. to Receive");
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforePostUpdateWhseRcptLine>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<PostUpdateWhseDocuments>
    Code lines:
    OnBeforePostUpdateWhseDocuments(WhseRcptHeader);
    WITH WhseRcptLineBuf DO
      IF FIND('-') THEN BEGIN
        REPEAT
          WhseRcptLine2.GET("No.","Line No.");
          OnBeforePostUpdateWhseRcptLine(WhseRcptLine2); <=====================
          IF "Qty. Outstanding" = "Qty. to Receive" THEN
            WhseRcptLine2.DELETE
          ELSE BEGIN
            WhseRcptLine2.VALIDATE("Qty. Received","Qty. Received" + "Qty. to Receive");
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforePostWhseJnlLine>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<CreatePostedRcptLine>
    Code lines:
    ...
      "Whse. Receipt No." := WhseRcptLine."No.";
      "Whse Receipt Line No." := WhseRcptLine."Line No.";
      INSERT;
    END;
    
    OnBeforePostWhseJnlLine(PostedWhseRcptHeader,PostedWhseRcptLine,WhseRcptLine); <=====================
    PostWhseJnlLine(PostedWhseRcptHeader,PostedWhseRcptLine,TempHandlingSpecification);
    OnAfterPostWhseJnlLine(WhseRcptLine);
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforePurchLineModify>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<InitSourceDocumentLines>
    Code lines:
    ...
                  END ELSE BEGIN
                    ModifyLine := PurchLine."Return Qty. to Ship" <> 0;
                    IF ModifyLine THEN
                      PurchLine.VALIDATE("Return Qty. to Ship",0);
                  END;
                OnBeforePurchLineModify(PurchLine,WhseRcptLine2,ModifyLine); <=====================
                IF ModifyLine THEN
                  PurchLine.MODIFY;
              UNTIL PurchLine.NEXT = 0;
          END;
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforeRun>
  Raised in: Codeunit<Whse.-Post Receipt>.<OnRun>
    Code lines:
    OnBeforeRun(Rec); <=====================
    
    WhseRcptLine.COPY(Rec);
    Code;
    Rec := WhseRcptLine;
    
    OnAfterRun(Rec);
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforeSalesLineModify>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<InitSourceDocumentLines>
    Code lines:
    ...
                  END ELSE BEGIN
                    ModifyLine := SalesLine."Return Qty. to Receive" <> 0;
                    IF ModifyLine THEN
                      SalesLine.VALIDATE("Return Qty. to Receive",0);
                  END;
                OnBeforeSalesLineModify(SalesLine,WhseRcptLine2,ModifyLine); <=====================
                IF ModifyLine THEN
                  SalesLine.MODIFY;
              UNTIL SalesLine.NEXT = 0;
          END;
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforeTransLineModify>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<InitSourceDocumentLines>
    Code lines:
    ...
                END ELSE BEGIN
                  ModifyLine := TransLine."Qty. to Receive" <> 0;
                  IF ModifyLine THEN
                    TransLine.VALIDATE("Qty. to Receive",0);
                END;
                OnBeforeTransLineModify(TransLine,WhseRcptLine2,ModifyLine); <=====================
                IF ModifyLine THEN
                  TransLine.MODIFY;
              UNTIL TransLine.NEXT = 0;
          END;
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnCodeOnBeforeWhseRcptHeaderModify>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<Code>
    Code lines:
    ...
        WhseRcptHeader."Receiving No." :=
          NoSeriesMgt.GetNextNo(
            WhseRcptHeader."Receiving No. Series",WhseRcptHeader."Posting Date",TRUE);
      END;
      WhseRcptHeader."Create Posted Header" := TRUE;
      OnCodeOnBeforeWhseRcptHeaderModify(WhseRcptHeader,WhseRcptLine); <=====================
      WhseRcptHeader.MODIFY;
      COMMIT;
    
      SETCURRENTKEY("No.","Source Type","Source Subtype","Source No.","Source Line No.");
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnInitSourceDocumentHeader>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<InitSourceDocumentHeader>
    Code lines:
    ...
            END;
            IF ModifyHeader THEN
              TransHeader.MODIFY;
          END;
        ELSE
          OnInitSourceDocumentHeader(WhseRcptHeader,WhseRcptLine); <=====================
      END;
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnInitSourceDocumentLines>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<InitSourceDocumentLines>
    Code lines:
    ...
                IF ModifyLine THEN
                  TransLine.MODIFY;
              UNTIL TransLine.NEXT = 0;
          END;
        ELSE
          OnInitSourceDocumentLines(WhseRcptLine2); <=====================
      END;
      SETRANGE("Source Line No.");
    END;
    
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnPostSourceDocument>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<PostSourceDocument>
    Code lines:
    ...
                END;
            END;
            CLEAR(TransferPostReceipt);
          END;
        ELSE
          OnPostSourceDocument(WhseRcptHeader,WhseRcptLine); <=====================
      END;
    END;
Codeunit<Whse.-Post Receipt (Yes/No)>.PROCEDURE<OnAfterConfirmPost>
  Raised in: Codeunit<Whse.-Post Receipt (Yes/No)>.PROCEDURE<Code>
    Code lines:
    ...
      IF FIND THEN
        IF NOT HideDialog THEN
          IF NOT CONFIRM(Text000,FALSE) THEN
            EXIT;
    
      OnAfterConfirmPost(WhseReceiptLine); <=====================
    
      WhsePostReceipt.RUN(WhseReceiptLine);
      WhsePostReceipt.GetResultMessage;
      CLEAR(WhsePostReceipt);
Codeunit<Whse.-Post Receipt (Yes/No)>.PROCEDURE<OnBeforeConfirmWhseReceiptPost>
  Raised in: Codeunit<Whse.-Post Receipt (Yes/No)>.PROCEDURE<Code>
    Code lines:
    HideDialog := FALSE;
    IsPosted := FALSE;
    OnBeforeConfirmWhseReceiptPost(WhseReceiptLine,HideDialog,IsPosted); <=====================
    IF IsPosted THEN
      EXIT;
    
    WITH WhseReceiptLine DO BEGIN
      IF FIND THEN
        IF NOT HideDialog THEN
          IF NOT CONFIRM(Text000,FALSE) THEN
    ...
Codeunit<Whse.-Post Receipt + Print>.PROCEDURE<OnBeforeCode>
  Raised in: Codeunit<Whse.-Post Receipt + Print>.PROCEDURE<Code>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCode(WhseReceiptLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH WhseReceiptLine DO BEGIN
      WhsePostReceipt.RUN(WhseReceiptLine);
      WhsePostReceipt.GetResultMessage;
    
      PrintedDocuments := 0;
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterCheckWhseShptLine>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<Code>
    Code lines:
    ...
            TESTFIELD("Bin Code");
          IF NOT "Assemble to Order" THEN
            IF NOT FullATOPosted THEN
              ERROR(FullATONotPostedErr,"No.","Line No.");
    
          OnAfterCheckWhseShptLine(WhseShptLine); <=====================
        UNTIL NEXT = 0
      ELSE
        ERROR(Text001);
    
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterCheckWhseShptLines>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<Code>
    Code lines:
    ...
          OnAfterCheckWhseShptLine(WhseShptLine);
        UNTIL NEXT = 0
      ELSE
        ERROR(Text001);
    
      OnAfterCheckWhseShptLines(WhseShptHeader,WhseShptLine); <=====================
    
      CounterSourceDocOK := 0;
      CounterSourceDocTotal := 0;
    
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterCreateWhseJnlLine>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<CreateWhseJnlLine>
    Code lines:
    ...
            WhseJnlLine."Reference Document" := WhseJnlLine."Reference Document"::"Posted T. Shipment";
          END;
      END;
    END;
    
    OnAfterCreateWhseJnlLine(WhseJnlLine,PostedWhseShptLine); <=====================
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterFindWhseShptLineForPurchLine>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<HandlePurchaseLine>
    Code lines:
    ...
      PurchLine.SETRANGE("Document No.","Source No.");
      IF PurchLine.FIND('-') THEN
        REPEAT
          SETRANGE("Source Line No.",PurchLine."Line No.");
          IF FIND('-') THEN BEGIN
            OnAfterFindWhseShptLineForPurchLine(WhseShptLine,PurchLine); <=====================
            IF "Source Document" = "Source Document"::"Purchase Order" THEN BEGIN
              ModifyLine := PurchLine."Qty. to Receive" <> -"Qty. to Ship";
              IF ModifyLine THEN BEGIN
                PurchLine.VALIDATE("Qty. to Receive",-"Qty. to Ship");
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterFindWhseShptLineForSalesLine>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<HandleSalesLine>
    Code lines:
    ...
      SalesLine.SETRANGE("Document No.","Source No.");
      IF SalesLine.FIND('-') THEN
        REPEAT
          SETRANGE("Source Line No.",SalesLine."Line No.");
          IF FIND('-') THEN BEGIN
            OnAfterFindWhseShptLineForSalesLine(WhseShptLine,SalesLine); <=====================
            IF "Source Document" = "Source Document"::"Sales Order" THEN BEGIN
              SumOfQtyToShip := 0;
              SumOfQtyToShipBase := 0;
              GetATOAndNonATOLines(ATOWhseShptLine,NonATOWhseShptLine,ATOLineFound,NonATOLineFound);
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterFindWhseShptLineForTransLine>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<HandleTransferLine>
    Code lines:
    ...
      TransLine.SETRANGE("Derived From Line No.",0);
      IF TransLine.FIND('-') THEN
        REPEAT
          SETRANGE("Source Line No.",TransLine."Line No.");
          IF FIND('-') THEN BEGIN
            OnAfterFindWhseShptLineForTransLine(WhseShptLine,TransLine); <=====================
            ModifyLine := TransLine."Qty. to Ship" <> "Qty. to Ship";
            IF ModifyLine THEN
              TransLine.VALIDATE("Qty. to Ship","Qty. to Ship");
            IF (WhseShptHeader."Shipment Date" <> 0D) AND
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterInitSourceDocumentHeader>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<InitSourceDocumentHeader>
    Code lines:
    ...
          END;
        ELSE
          OnInitSourceDocumentHeader(WhseShptHeader,WhseShptLine);
      END;
    
    OnAfterInitSourceDocumentHeader(WhseShptLine); <=====================
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterPostUpdateWhseShptLine>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<PostUpdateWhseDocuments>
    Code lines:
    ...
            WhseShptLine2.VALIDATE("Qty. Outstanding","Qty. Outstanding" - "Qty. to Ship");
            WhseShptLine2."Qty. Shipped (Base)" := "Qty. Shipped (Base)" + "Qty. to Ship (Base)";
            WhseShptLine2."Qty. Outstanding (Base)" := "Qty. Outstanding (Base)" - "Qty. to Ship (Base)";
            WhseShptLine2.Status := WhseShptLine2.CalcStatusShptLine;
            WhseShptLine2.MODIFY;
            OnAfterPostUpdateWhseShptLine(WhseShptLine2); <=====================
          END;
        UNTIL NEXT = 0;
        DELETEALL;
      END;
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterPostWhseJnlLine>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<CreatePostedShptLine>
    Code lines:
    ...
      "Whse Shipment Line No." := WhseShptLine."Line No.";
      INSERT;
    END;
    
    PostWhseJnlLine(PostedWhseShptLine,TempHandlingSpecification);
    OnAfterPostWhseJnlLine(WhseShptLine); <=====================
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterPostWhseShipment>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<Code>
    Code lines:
    ...
        SETRANGE("Source Subtype");
        SETRANGE("Source No.");
      UNTIL NEXT = 0;
    END;
    
    OnAfterPostWhseShipment(WhseShptHeader); <=====================
    
    CLEAR(WMSMgt);
    CLEAR(WhseJnlRegisterLine);
    
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterRun>
  Raised in: Codeunit<Whse.-Post Shipment>.<OnRun>
    Code lines:
    ...
    
    WhseShptLine.COPY(Rec);
    Code;
    Rec := WhseShptLine;
    
    OnAfterRun(Rec); <=====================
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforeCheckWhseShptLines>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<Code>
    Code lines:
    WITH WhseShptLine DO BEGIN
      SETCURRENTKEY("No.");
      SETRANGE("No.","No.");
      OnBeforeCheckWhseShptLines(WhseShptLine); <=====================
      SETFILTER("Qty. to Ship",'>0');
      IF FIND('-') THEN
        REPEAT
          TESTFIELD("Unit of Measure Code");
          IF "Shipping Advice" = "Shipping Advice"::Complete THEN
            TESTFIELD("Qty. (Base)","Qty. to Ship (Base)" + "Qty. Shipped (Base)");
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforeDeleteUpdateWhseShptLine>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<PostUpdateWhseDocuments>
    Code lines:
    ...
    WITH WhseShptLineBuf DO
      IF FIND('-') THEN BEGIN
        REPEAT
          WhseShptLine2.GET("No.","Line No.");
          DeleteWhseShptLine := "Qty. Outstanding" = "Qty. to Ship";
          OnBeforeDeleteUpdateWhseShptLine(WhseShptLine2,DeleteWhseShptLine); <=====================
          IF DeleteWhseShptLine THEN BEGIN
            ItemTrackingMgt.SetDeleteReservationEntries(TRUE);
            ItemTrackingMgt.DeleteWhseItemTrkgLines(
              DATABASE::"Warehouse Shipment Line",0,"No.",'',0,"Line No.","Location Code",TRUE);
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforeInitSourceDocumentHeader>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<InitSourceDocumentHeader>
    Code lines:
    OnBeforeInitSourceDocumentHeader(WhseShptLine); <=====================
    
    WITH WhseShptLine DO
      CASE "Source Type" OF
        DATABASE::"Sales Line":
          BEGIN
            IF (SalesHeader."Posting Date" = 0D) OR
               (SalesHeader."Posting Date" <> WhseShptHeader."Posting Date")
            THEN BEGIN
              SalesRelease.Reopen(SalesHeader);
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforePostedWhseShptHeaderInsert>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<CreatePostedShptHeader>
    Code lines:
    ...
    PostedWhseShptHeader."Shipping Agent Service Code" := WhseShptHeader."Shipping Agent Service Code";
    PostedWhseShptHeader."Shipment Method Code" := WhseShptHeader."Shipment Method Code";
    PostedWhseShptHeader.Comment := WhseShptHeader.Comment;
    PostedWhseShptHeader."Whse. Shipment No." := WhseShptHeader."No.";
    PostedWhseShptHeader."External Document No." := WhseShptHeader."External Document No.";
    OnBeforePostedWhseShptHeaderInsert(PostedWhseShptHeader,WhseShptHeader); <=====================
    PostedWhseShptHeader.INSERT;
    
    WhseComment.SETRANGE("Table Name",WhseComment."Table Name"::"Whse. Shipment");
    WhseComment.SETRANGE(Type,WhseComment.Type::" ");
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforePostSourceDocument>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<Code>
    Code lines:
    ...
        InitSourceDocumentHeader;
        COMMIT;
    
        CounterSourceDocTotal := CounterSourceDocTotal + 1;
    
        OnBeforePostSourceDocument(WhseShptLine,PurchHeader,SalesHeader,TransHeader); <=====================
        PostSourceDocument(WhseShptLine);
    
        IF FINDLAST THEN;
        SETRANGE("Source Type");
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforePostUpdateWhseDocuments>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<PostUpdateWhseDocuments>
    Code lines:
    OnBeforePostUpdateWhseDocuments(WhseShptHeaderParam); <=====================
    WITH WhseShptLineBuf DO
      IF FIND('-') THEN BEGIN
        REPEAT
          WhseShptLine2.GET("No.","Line No.");
          DeleteWhseShptLine := "Qty. Outstanding" = "Qty. to Ship";
          OnBeforeDeleteUpdateWhseShptLine(WhseShptLine2,DeleteWhseShptLine);
          IF DeleteWhseShptLine THEN BEGIN
            ItemTrackingMgt.SetDeleteReservationEntries(TRUE);
            ItemTrackingMgt.DeleteWhseItemTrkgLines(
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforePostUpdateWhseShptLine>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<PostUpdateWhseDocuments>
    Code lines:
    ...
            ItemTrackingMgt.SetDeleteReservationEntries(TRUE);
            ItemTrackingMgt.DeleteWhseItemTrkgLines(
              DATABASE::"Warehouse Shipment Line",0,"No.",'',0,"Line No.","Location Code",TRUE);
            WhseShptLine2.DELETE;
          END ELSE BEGIN
            OnBeforePostUpdateWhseShptLine(WhseShptLine2); <=====================
            WhseShptLine2."Qty. Shipped" := "Qty. Shipped" + "Qty. to Ship";
            WhseShptLine2.VALIDATE("Qty. Outstanding","Qty. Outstanding" - "Qty. to Ship");
            WhseShptLine2."Qty. Shipped (Base)" := "Qty. Shipped (Base)" + "Qty. to Ship (Base)";
            WhseShptLine2."Qty. Outstanding (Base)" := "Qty. Outstanding (Base)" - "Qty. to Ship (Base)";
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforePurchLineModify>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<HandlePurchaseLine>
    Code lines:
    ...
              ELSE
                PurchLine.VALIDATE("Return Qty. to Ship",0);
              PurchLine.VALIDATE("Qty. to Invoice",0);
            END;
          END;
          OnBeforePurchLineModify(PurchLine,WhseShptLine,ModifyLine); <=====================
          IF ModifyLine THEN
            PurchLine.MODIFY;
        UNTIL PurchLine.NEXT = 0;
    END;
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforeRun>
  Raised in: Codeunit<Whse.-Post Shipment>.<OnRun>
    Code lines:
    OnBeforeRun(Rec); <=====================
    
    WhseShptLine.COPY(Rec);
    Code;
    Rec := WhseShptLine;
    
    OnAfterRun(Rec);
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforeSalesLineModify>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<HandleSalesLine>
    Code lines:
    ...
              ELSE
                SalesLine.VALIDATE("Return Qty. to Receive",0);
              SalesLine.VALIDATE("Qty. to Invoice",0);
            END;
          END;
          OnBeforeSalesLineModify(SalesLine,WhseShptLine,ModifyLine); <=====================
          IF ModifyLine THEN
            SalesLine.MODIFY;
        UNTIL SalesLine.NEXT = 0;
    END;
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforeTransLineModify>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<HandleTransferLine>
    Code lines:
    ...
            IF ModifyLine THEN BEGIN
              TransLine.VALIDATE("Qty. to Ship",0);
              TransLine.VALIDATE("Qty. to Receive",0);
            END;
          END;
          OnBeforeTransLineModify(TransLine,WhseShptLine,ModifyLine); <=====================
          IF ModifyLine THEN
            TransLine.MODIFY;
        UNTIL TransLine.NEXT = 0;
    END;
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnInitSourceDocumentHeader>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<InitSourceDocumentHeader>
    Code lines:
    ...
            END;
            IF ModifyHeader THEN
              ServiceHeader.MODIFY;
          END;
        ELSE
          OnInitSourceDocumentHeader(WhseShptHeader,WhseShptLine); <=====================
      END;
    
    OnAfterInitSourceDocumentHeader(WhseShptLine);
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnPostSourceDocument>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<PostSourceDocument>
    Code lines:
    ...
                END;
              END;
            CLEAR(ServicePost);
          END;
        ELSE
          OnPostSourceDocument(WhseShptHeader,WhseShptLine,CounterSourceDocOK); <=====================
      END;
    END;
Codeunit<Whse.-Post Shipment (Yes/No)>.PROCEDURE<OnAfterConfirmPost>
  Raised in: Codeunit<Whse.-Post Shipment (Yes/No)>.PROCEDURE<Code>
    Code lines:
    ...
          IF Selection = 0 THEN
            EXIT;
          Invoice := (Selection = 2);
        END;
    
      OnAfterConfirmPost(WhseShptLine,Invoice); <=====================
    
      WhsePostShipment.SetPostingSettings(Invoice);
      WhsePostShipment.SetPrint(FALSE);
      WhsePostShipment.RUN(WhseShptLine);
    ...
Codeunit<Whse.-Post Shipment (Yes/No)>.PROCEDURE<OnBeforeConfirmWhseShipmentPost>
  Raised in: Codeunit<Whse.-Post Shipment (Yes/No)>.PROCEDURE<Code>
    Code lines:
    HideDialog := FALSE;
    IsPosted := FALSE;
    OnBeforeConfirmWhseShipmentPost(WhseShptLine,HideDialog,Invoice,IsPosted); <=====================
    IF IsPosted THEN
      EXIT;
    
    WITH WhseShptLine DO BEGIN
      IF FIND THEN
        IF NOT HideDialog THEN BEGIN
          Selection := STRMENU(ShipInvoiceQst,1);
    ...
Codeunit<Whse.-Post Shipment + Print>.PROCEDURE<OnAfterConfirmPost>
  Raised in: Codeunit<Whse.-Post Shipment + Print>.PROCEDURE<Code>
    Code lines:
    ...
          IF Selection = 0 THEN
            EXIT;
          Invoice := (Selection = 2);
        END;
    
      OnAfterConfirmPost(WhseShptLine,Invoice); <=====================
    
      WhsePostShipment.SetPostingSettings(Invoice);
      WhsePostShipment.SetPrint(TRUE);
      WhsePostShipment.RUN(WhseShptLine);
    ...
Codeunit<Whse.-Post Shipment + Print>.PROCEDURE<OnBeforeCode>
  Raised in: Codeunit<Whse.-Post Shipment + Print>.PROCEDURE<Code>
    Code lines:
    HideDialog := FALSE;
    IsPosted := FALSE;
    OnBeforeCode(WhseShptLine,HideDialog,Invoice,IsPosted); <=====================
    IF IsPosted THEN
      EXIT;
    
    WITH WhseShptLine DO BEGIN
      IF FIND THEN
        IF NOT HideDialog THEN BEGIN
          Selection := STRMENU(ShipInvoiceQst,1);
    ...
Codeunit<Whse.-Service Release>.PROCEDURE<OnBeforeCreateWhseRequest>
  Raised in: Codeunit<Whse.-Service Release>.PROCEDURE<CreateWhseRqst>
    Code lines:
    ...
        "External Document No." := '';
        "Shipment Date" := ServiceLine.GetShipmentDate;
        "Shipment Method Code" := ServiceHeader."Shipment Method Code";
        "Shipping Agent Code" := ServiceHeader."Shipping Agent Code";
        "Completely Handled" := CalcCompletelyShipped(ServiceLine);
        OnBeforeCreateWhseRequest(WhseRqst,ServiceHeader,ServiceLine); <=====================
        IF NOT INSERT THEN
          MODIFY;
      END;
    END;
Codeunit<Whse.-Sales Release>.PROCEDURE<OnAfterRelease>
  Raised in: Codeunit<Whse.-Sales Release>.PROCEDURE<Release>
    Code lines:
    ...
      WhseRqst.SETRANGE("Document Status",Status::Open);
      IF NOT WhseRqst.ISEMPTY THEN
        WhseRqst.DELETEALL(TRUE);
    END;
    
    OnAfterRelease(SalesHeader); <=====================
Codeunit<Whse.-Sales Release>.PROCEDURE<OnAfterReopen>
  Raised in: Codeunit<Whse.-Sales Release>.PROCEDURE<Reopen>
    Code lines:
    ...
      WhseRqst.LOCKTABLE;
      IF NOT WhseRqst.ISEMPTY THEN
        WhseRqst.MODIFYALL("Document Status",WhseRqst."Document Status"::Open);
    END;
    
    OnAfterReopen(SalesHeader); <=====================
Codeunit<Whse.-Sales Release>.PROCEDURE<OnBeforeCreateWhseRequest>
  Raised in: Codeunit<Whse.-Sales Release>.PROCEDURE<CreateWhseRqst>
    Code lines:
    ...
      ELSE
        WhseRqst."Shipment Date" := SalesHeader."Shipment Date";
      SalesHeader.SETRANGE("Location Filter",SalesLine."Location Code");
      SalesHeader.CALCFIELDS("Completely Shipped");
      WhseRqst."Completely Handled" := SalesHeader."Completely Shipped";
      OnBeforeCreateWhseRequest(WhseRqst,SalesHeader,SalesLine); <=====================
      IF NOT WhseRqst.INSERT THEN
        WhseRqst.MODIFY;
    END;
Codeunit<Whse.-Purch. Release>.PROCEDURE<OnAfterRelease>
  Raised in: Codeunit<Whse.-Purch. Release>.PROCEDURE<Release>
    Code lines:
    ...
      FilterWarehouseRequest(WhseRqst,PurchHeader,WhseRqst."Document Status"::Open);
      IF NOT WhseRqst.ISEMPTY THEN
        WhseRqst.DELETEALL(TRUE);
    END;
    
    OnAfterRelease(PurchHeader); <=====================
Codeunit<Whse.-Purch. Release>.PROCEDURE<OnAfterReopen>
  Raised in: Codeunit<Whse.-Purch. Release>.PROCEDURE<Reopen>
    Code lines:
    ...
      FilterWarehouseRequest(WhseRqst,PurchHeader,WhseRqst."Document Status"::Released);
      IF NOT WhseRqst.ISEMPTY THEN
        WhseRqst.MODIFYALL("Document Status",WhseRqst."Document Status"::Open);
    END;
    
    OnAfterReopen(PurchHeader); <=====================
Codeunit<Whse.-Purch. Release>.PROCEDURE<OnBeforeCreateWhseRequest>
  Raised in: Codeunit<Whse.-Purch. Release>.PROCEDURE<CreateWhseRqst>
    Code lines:
    ...
      ELSE
        WhseRqst."Shipment Date" := PurchHeader."Expected Receipt Date";
      PurchHeader.SETRANGE("Location Filter",PurchLine."Location Code");
      PurchHeader.CALCFIELDS("Completely Received");
      WhseRqst."Completely Handled" := PurchHeader."Completely Received";
      OnBeforeCreateWhseRequest(WhseRqst,PurchHeader,PurchLine); <=====================
      IF NOT WhseRqst.INSERT THEN
        WhseRqst.MODIFY;
    END;
Codeunit<Whse.-Transfer Release>.PROCEDURE<OnAfterRelease>
  Raised in: Codeunit<Whse.-Transfer Release>.PROCEDURE<Release>
    Code lines:
    ...
        CreateOutboundWhseRequest(WhseRqst,TransHeader);
    
      DeleteOpenWhseRequest("No.");
    END;
    
    OnAfterRelease(TransHeader); <=====================
Codeunit<Whse.-Transfer Release>.PROCEDURE<OnAfterReopen>
  Raised in: Codeunit<Whse.-Transfer Release>.PROCEDURE<Reopen>
    Code lines:
    ...
        WhseRqst."Document Status" := Status::Open;
        WhseRqst.MODIFY;
      END;
    END;
    
    OnAfterReopen(TransHeader); <=====================
Codeunit<Whse.-Transfer Release>.PROCEDURE<OnBeforeCreateWhseRequest>
  Raised in: Codeunit<Whse.-Transfer Release>.PROCEDURE<CreateInboundWhseRequest>
    Code lines:
    ...
      "Location Code" := TransferHeader."Transfer-to Code";
      "Completely Handled" := TransferHeader."Completely Received";
      "Shipment Method Code" := TransferHeader."Shipment Method Code";
      "Shipping Agent Code" := TransferHeader."Shipping Agent Code";
      "Destination No." := TransferHeader."Transfer-to Code";
      OnBeforeCreateWhseRequest(WarehouseRequest,TransferHeader); <=====================
      IF CalledFromTransferOrder THEN BEGIN
        IF MODIFY THEN;
      END ELSE
        IF NOT INSERT THEN
    ...
  Raised in: Codeunit<Whse.-Transfer Release>.PROCEDURE<CreateOutboundWhseRequest>
    Code lines:
    ...
      "Shipment Method Code" := TransferHeader."Shipment Method Code";
      "Shipping Agent Code" := TransferHeader."Shipping Agent Code";
      "Shipping Advice" := TransferHeader."Shipping Advice";
      "Shipment Date" := TransferHeader."Shipment Date";
      "Destination No." := TransferHeader."Transfer-from Code";
      OnBeforeCreateWhseRequest(WarehouseRequest,TransferHeader); <=====================
      IF NOT INSERT THEN
        MODIFY;
    END;
Codeunit<Whse.-Production Release>.PROCEDURE<OnBeforeCreateWhsePickRequest>
  Raised in: Codeunit<Whse.-Production Release>.PROCEDURE<CreateWhseRqst>
    Code lines:
    ...
        WhsePickRqst."Completely Picked" :=
          ProdOrderCompletelyPicked(
            ProdOrderComp."Location Code",ProdOrder."No.",ProdOrder.Status,ProdOrderComp."Line No.");
        IF WhsePickRqst."Completely Picked" AND (NOT ProdOrderComp."Completely Picked") THEN
          WhsePickRqst."Completely Picked" := FALSE;
        OnBeforeCreateWhsePickRequest(WhsePickRqst,ProdOrderComp,ProdOrder); <=====================
        IF NOT WhsePickRqst.INSERT THEN
          WhsePickRqst.MODIFY;
      END
    END ELSE BEGIN
    ...
Codeunit<Whse.-Production Release>.PROCEDURE<OnBeforeCreateWhseRequest>
  Raised in: Codeunit<Whse.-Production Release>.PROCEDURE<CreateWhseRqst>
    Code lines:
    ...
          WhseRqst."Destination Type" := WhseRqst."Destination Type"::"Sales Order";
      END;
      WhseRqst."Destination No." := ProdOrder."Source No.";
      WhseRqst."Completely Handled" :=
        ProdOrderCompletelyHandled(ProdOrder,ProdOrderComp."Location Code");
      OnBeforeCreateWhseRequest(WhseRqst,ProdOrderComp,ProdOrder); <=====================
      IF NOT WhseRqst.INSERT THEN
        WhseRqst.MODIFY;
    END;
Codeunit<Whse.-Production Release>.PROCEDURE<OnBeforeReleaseWhseProdOrder>
  Raised in: Codeunit<Whse.-Production Release>.PROCEDURE<Release>
    Code lines:
    IF ProdOrder.Status <> ProdOrder.Status::Released THEN
      EXIT;
    
    OnBeforeReleaseWhseProdOrder(ProdOrder); <=====================
    
    WITH ProdOrder DO BEGIN
      ProdOrderComp.SETCURRENTKEY(Status,"Prod. Order No.","Location Code");
      ProdOrderComp.SETRANGE(Status,Status);
      ProdOrderComp.SETRANGE("Prod. Order No.","No.");
      ProdOrderComp.SETFILTER(
    ...
Codeunit<Whse. Management>.PROCEDURE<OnAfterGetSrcDocLineQtyOutstanding>
  Raised in: Codeunit<Whse. Management>.PROCEDURE<GetSrcDocLineQtyOutstanding>
    Code lines:
    ...
        QtyOutstanding := 0;
        QtyBaseOutstanding := 0;
      END;
    END;
    
    OnAfterGetSrcDocLineQtyOutstanding( <=====================
      SourceType,SourceSubType,SourceNo,SourceLineNo,SourceSubLineNo,QtyOutstanding,QtyBaseOutstanding);
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterAssemblyLineDelete>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<AssemblyLineDelete>
    Code lines:
    ...
         DATABASE::"Assembly Line",AssemblyLine."Document Type",AssemblyLine."Document No.",AssemblyLine."Line No.",0,
         AssemblyLine.Quantity)
    THEN
      ERROR(Text001,AssemblyLine.TABLECAPTION,TableCaptionValue);
    
    OnAfterAssemblyLineDelete(AssemblyLine); <=====================
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterAssemblyLineVerifyChange>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<AssemblyLineVerifyChange>
    Code lines:
    ...
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Quantity per"));
      IF Location.GET("Location Code") AND NOT Location."Require Shipment" THEN
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Quantity to Consume"));
    END;
    
    OnAfterAssemblyLineVerifyChange(NewRecRef,OldRecRef); <=====================
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterItemLineVerifyChange>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<ItemLineVerifyChange>
    Code lines:
    ...
        THEN
          FIELDERROR(Quantity,STRSUBSTNO(Text000,TableCaptionValue,TABLECAPTION));
      END;
    END;
    
    OnAfterItemLineVerifyChange(NewItemJnlLine,OldItemJnlLine); <=====================
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterProdComponentDelete>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<ProdComponentDelete>
    Code lines:
    ...
         ProdOrderComp.Status,ProdOrderComp."Prod. Order No.",ProdOrderComp."Prod. Order Line No.",
         ProdOrderComp."Line No.",ProdOrderComp.Quantity)
    THEN
      ERROR(Text001,ProdOrderComp.TABLECAPTION,TableCaptionValue);
    
    OnAfterProdComponentDelete(ProdOrderComp); <=====================
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterProdComponentVerifyChange>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<ProdComponentVerifyChange>
    Code lines:
    ...
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Quantity));
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Quantity per"));
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Expected Quantity"));
    END;
    
    OnAfterProdComponentVerifyChange(NewRecRef,OldRecRef); <=====================
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterProdOrderLineDelete>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<ProdOrderLineDelete>
    Code lines:
    ...
      IF WhseLinesExist(
           DATABASE::"Prod. Order Line",Status,"Prod. Order No.","Line No.",0,Quantity)
      THEN
        ERROR(Text001,TABLECAPTION,TableCaptionValue);
    
    OnAfterProdOrderLineDelete(ProdOrderLine); <=====================
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterProdOrderLineVerifyChange>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<ProdOrderLineVerifyChange>
    Code lines:
    ...
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Unit of Measure Code"));
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Due Date"));
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Quantity));
    END;
    
    OnAfterProdOrderLineVerifyChange(NewProdOrderLine,OldProdOrderLine); <=====================
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterPurchaseLineDelete>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<PurchaseLineDelete>
    Code lines:
    IF WhseLinesExist(
         DATABASE::"Purchase Line",PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.",0,PurchLine.Quantity)
    THEN
      ERROR(Text001,PurchLine.TABLECAPTION,TableCaptionValue);
    
    OnAfterPurchaseLineDelete(PurchLine); <=====================
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterPurchaseLineVerifyChange>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<PurchaseLineVerifyChange>
    Code lines:
    ...
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Job No."));
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Quantity));
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Qty. to Receive"));
    END;
    
    OnAfterPurchaseLineVerifyChange(NewPurchLine,OldPurchLine); <=====================
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterSalesLineDelete>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<SalesLineDelete>
    Code lines:
    ...
         DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",
         SalesLine."Line No.",0,SalesLine.Quantity)
    THEN
      ERROR(Text001,SalesLine.TABLECAPTION,TableCaptionValue);
    
    OnAfterSalesLineDelete(SalesLine); <=====================
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterSalesLineVerifyChange>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<SalesLineVerifyChange>
    Code lines:
    ...
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Qty. to Ship"));
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Qty. to Assemble to Order"));
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Shipment Date"));
    END;
    
    OnAfterSalesLineVerifyChange(NewRecRef,OldRecRef); <=====================
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterServiceLineDelete>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<ServiceLineDelete>
    Code lines:
    ...
         DATABASE::"Service Line",ServiceLine."Document Type",ServiceLine."Document No.",
         ServiceLine."Line No.",0,ServiceLine.Quantity)
    THEN
      ERROR(Text001,ServiceLine.TABLECAPTION,TableCaptionValue);
    
    OnAfterServiceLineDelete(ServiceLine); <=====================
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterServiceLineVerifyChange>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<ServiceLineVerifyChange>
    Code lines:
    ...
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Quantity));
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Variant Code"));
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Unit of Measure Code"));
    END;
    
    OnAfterServiceLineVerifyChange(NewRecRef,OldRecRef); <=====================
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterTransLineDelete>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<TransLineDelete>
    Code lines:
    ...
        ERROR(Text001,TABLECAPTION,TableCaptionValue);
      IF WhseLinesExist(DATABASE::"Transfer Line",1,"Document No.","Line No.",0,Quantity) THEN
        ERROR(Text001,TABLECAPTION,TableCaptionValue);
    END;
    
    OnAfterTransLineDelete(TransLine); <=====================
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterTransLineVerifyChange>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<TransLineVerifyChange>
    Code lines:
    ...
        IF "Qty. to Receive" <> OldTransLine."Qty. to Receive" THEN
          FIELDERROR("Qty. to Receive",STRSUBSTNO(Text000,TableCaptionValue,TABLECAPTION));
      END;
    END;
    
    OnAfterTransLineVerifyChange(NewTransLine,OldTransLine); <=====================
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnBeforeVerifyFieldNotChanged>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<VerifyFieldNotChanged>
    Code lines:
    IsHandled := FALSE;
    OnBeforeVerifyFieldNotChanged(NewRecRef,OldRecRef,FieldNumber,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    NewFieldRef := NewRecRef.FIELD(FieldNumber);
    OldFieldRef := OldRecRef.FIELD(FieldNumber);
    IF FORMAT(OldFieldRef.VALUE) <> FORMAT(NewFieldRef.VALUE) THEN
      NewFieldRef.FIELDERROR(STRSUBSTNO(Text000,TableCaptionValue,NewRecRef.CAPTION));
Codeunit<Whse.-Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<Whse.-Printed>.<OnRun>
    Code lines:
    LOCKTABLE;
    FIND;
    "No. Printed" := "No. Printed" + 1;
    "Date of Last Printing" := TODAY;
    "Time of Last Printing" := TIME;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<Available to Promise>.PROCEDURE<OnAfterCalcAvailableInventory>
  Raised in: Codeunit<Available to Promise>.PROCEDURE<CalcAvailableInventory>
    Code lines:
    Item.CALCFIELDS(Inventory,"Reserved Qty. on Inventory");
    AvailableInventory := Item.Inventory - Item."Reserved Qty. on Inventory";
    OnAfterCalcAvailableInventory(Item,AvailableInventory); <=====================
    EXIT(AvailableInventory);
Codeunit<Available to Promise>.PROCEDURE<OnAfterCalcGrossRequirement>
  Raised in: Codeunit<Available to Promise>.PROCEDURE<CalcGrossRequirement>
    Code lines:
    ...
        "Qty. on Job Order" +
        "Trans. Ord. Shipment (Qty.)" +
        "Qty. on Asm. Component" +
        "Qty. on Purch. Return";
    
      OnAfterCalcGrossRequirement(Item,GrossRequirement); <=====================
    
      EXIT(GrossRequirement);
    END;
Codeunit<Available to Promise>.PROCEDURE<OnAfterCalcReservedReceipt>
  Raised in: Codeunit<Available to Promise>.PROCEDURE<CalcReservedReceipt>
    Code lines:
    ...
        "Reserved Qty. on Purch. Orders" +
        "Res. Qty. on Inbound Transfer" +
        "Res. Qty. on Assembly Order" +
        "Res. Qty. on Sales Returns";
    
      OnAfterCalcReservedReceipt(Item,ReservedReceipt); <=====================
    
      EXIT(ReservedReceipt);
    END;
Codeunit<Available to Promise>.PROCEDURE<OnAfterCalcReservedRequirement>
  Raised in: Codeunit<Available to Promise>.PROCEDURE<CalcReservedRequirement>
    Code lines:
    ...
        "Res. Qty. on Job Order" +
        "Res. Qty. on Outbound Transfer" +
        "Res. Qty. on  Asm. Comp." +
        "Res. Qty. on Purch. Returns";
    
      OnAfterCalcReservedRequirement(Item,ReservedRequirement); <=====================
    
      EXIT(ReservedRequirement);
    END;
Codeunit<Available to Promise>.PROCEDURE<OnAfterCalcScheduledReceipt>
  Raised in: Codeunit<Available to Promise>.PROCEDURE<CalcScheduledReceipt>
    Code lines:
    ...
        "Trans. Ord. Receipt (Qty.)" +
        "Qty. in Transit" +
        "Qty. on Assembly Order" +
        "Qty. on Sales Return";
    
      OnAfterCalcScheduledReceipt(Item,ScheduledReceipt); <=====================
    
      EXIT(ScheduledReceipt);
    END;
Codeunit<Available to Promise>.PROCEDURE<OnAfterCalculateAvailability>
  Raised in: Codeunit<Available to Promise>.PROCEDURE<CalculateAvailability>
    Code lines:
    ...
    UpdateJobOrderAvail(AvailabilityAtDate,Item);
    UpdateTransOrderShptAvail(AvailabilityAtDate,Item);
    UpdateAsmOrderAvail(AvailabilityAtDate,Item);
    UpdateAsmCompAvail(AvailabilityAtDate,Item);
    
    OnAfterCalculateAvailability(AvailabilityAtDate,Item); <=====================
    
    Item.COPYFILTERS(Item2);
Codeunit<Available to Promise>.PROCEDURE<OnAfterQtyAvailableToPromise>
  Raised in: Codeunit<Available to Promise>.PROCEDURE<QtyAvailabletoPromise>
    Code lines:
    ...
    AvailableToPromise :=
      CalcAvailableInventory(Item) +
      (ScheduledReceipt - CalcReservedReceipt(Item)) -
      (GrossRequirement - CalcReservedRequirement(Item));
    
    OnAfterQtyAvailableToPromise(Item,ScheduledReceipt,GrossRequirement,AvailableToPromise); <=====================
    
    EXIT(AvailableToPromise);
Codeunit<Available to Promise>.PROCEDURE<OnBeforeQtyAvailableToPromise>
  Raised in: Codeunit<Available to Promise>.PROCEDURE<QtyAvailabletoPromise>
    Code lines:
    OnBeforeQtyAvailableToPromise(Item); <=====================
    
    ScheduledReceipt := CalcScheduledReceipt(Item);
    GrossRequirement := CalcGrossRequirement(Item);
    
    IF AvailabilityDate <> 0D THEN
      GrossRequirement :=
        GrossRequirement +
        CalculateLookahead(
          Item,PeriodType,
    ...
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnAfterBufferSalesPosting>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<BufferSalesPosting>
    Code lines:
    ...
            CostToPost,CostToPostACY,FALSE);
        ELSE
          ErrorNonValidCombination(ValueEntry);
      END;
    
    OnAfterBufferSalesPosting(TempInvtPostBuf,ValueEntry,PostBufDimNo); <=====================
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnAfterCalcCostToPostFromBuffer>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<BufferInvtPosting>
    Code lines:
    ...
        CalcCostToPost(ExpCostToPost,"Cost Amount (Expected)","Expected Cost Posted to G/L",PostToGL);
        CalcCostToPost(ExpCostToPostACY,"Cost Amount (Expected) (ACY)","Exp. Cost Posted to G/L (ACY)",PostToGL);
      END;
      CalcCostToPost(CostToPost,"Cost Amount (Actual)","Cost Posted to G/L",PostToGL);
      CalcCostToPost(CostToPostACY,"Cost Amount (Actual) (ACY)","Cost Posted to G/L (ACY)",PostToGL);
      OnAfterCalcCostToPostFromBuffer(ValueEntry,CostToPost,CostToPostACY,ExpCostToPost,ExpCostToPostACY); <=====================
      PostBufDimNo := 0;
    
      RunOnlyCheckSaved := RunOnlyCheck;
      IF NOT PostToGL THEN
    ...
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnAfterInitInvtPostBuf>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<InitInvtPostBuf>
    Code lines:
    ...
    SetAccNo(TempInvtPostBuf[PostBufDimNo],ValueEntry,BalAccType,AccType);
    SetPostBufAmounts(TempInvtPostBuf[PostBufDimNo],-CostToPost,-CostToPostACY,InterimAccount);
    TempInvtPostBuf[PostBufDimNo]."Dimension Set ID" := ValueEntry."Dimension Set ID";
    OnAfterInitTempInvtPostBuf;
    
    OnAfterInitInvtPostBuf(ValueEntry); <=====================
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnAfterInitTempInvtPostBuf>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<InitInvtPostBuf>
    Code lines:
    ...
    
    PostBufDimNo := PostBufDimNo + 1;
    SetAccNo(TempInvtPostBuf[PostBufDimNo],ValueEntry,AccType,BalAccType);
    SetPostBufAmounts(TempInvtPostBuf[PostBufDimNo],CostToPost,CostToPostACY,InterimAccount);
    TempInvtPostBuf[PostBufDimNo]."Dimension Set ID" := ValueEntry."Dimension Set ID";
    OnAfterInitTempInvtPostBuf; <=====================
    
    PostBufDimNo := PostBufDimNo + 1;
    SetAccNo(TempInvtPostBuf[PostBufDimNo],ValueEntry,BalAccType,AccType);
    SetPostBufAmounts(TempInvtPostBuf[PostBufDimNo],-CostToPost,-CostToPostACY,InterimAccount);
    ...
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<InitInvtPostBuf>
    Code lines:
    ...
    
    PostBufDimNo := PostBufDimNo + 1;
    SetAccNo(TempInvtPostBuf[PostBufDimNo],ValueEntry,AccType,BalAccType);
    SetPostBufAmounts(TempInvtPostBuf[PostBufDimNo],CostToPost,CostToPostACY,InterimAccount);
    TempInvtPostBuf[PostBufDimNo]."Dimension Set ID" := ValueEntry."Dimension Set ID";
    OnAfterInitTempInvtPostBuf; <=====================
    
    PostBufDimNo := PostBufDimNo + 1;
    SetAccNo(TempInvtPostBuf[PostBufDimNo],ValueEntry,BalAccType,AccType);
    SetPostBufAmounts(TempInvtPostBuf[PostBufDimNo],-CostToPost,-CostToPostACY,InterimAccount);
    ...
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnAfterSetAccNo>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<SetAccNo>
    Code lines:
    ...
            GLAccount.TESTFIELD(Blocked,FALSE);
          IF NOT CalledFromTestReport THEN
            "Account No." := '';
        END;
      END;
      OnAfterSetAccNo(InvtPostBuf,ValueEntry); <=====================
    END;
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforeInitInvtPostBuf>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<InitInvtPostBuf>
    Code lines:
    OnBeforeInitInvtPostBuf(ValueEntry); <=====================
    
    PostBufDimNo := PostBufDimNo + 1;
    SetAccNo(TempInvtPostBuf[PostBufDimNo],ValueEntry,AccType,BalAccType);
    SetPostBufAmounts(TempInvtPostBuf[PostBufDimNo],CostToPost,CostToPostACY,InterimAccount);
    TempInvtPostBuf[PostBufDimNo]."Dimension Set ID" := ValueEntry."Dimension Set ID";
    OnAfterInitTempInvtPostBuf;
    
    PostBufDimNo := PostBufDimNo + 1;
    SetAccNo(TempInvtPostBuf[PostBufDimNo],ValueEntry,BalAccType,AccType);
    ...
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforePostInvtPostBuf>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<PostInvtPostBuf>
    Code lines:
    ...
            GenJnlLine."Shortcut Dimension 2 Code");
          IF NOT CalledFromTestReport THEN
            IF NOT RunOnlyCheck THEN BEGIN
              IF NOT CalledFromItemPosting THEN
                GenJnlPostLine.SetOverDimErr;
              OnBeforePostInvtPostBuf(GenJnlLine,GlobalInvtPostBuf,ValueEntry,GenJnlPostLine); <=====================
              GenJnlPostLine.RunWithCheck(GenJnlLine)
            END ELSE
              GenJnlCheckLine.RunCheck(GenJnlLine)
          ELSE
    ...
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnPostInvtPostBufferOnBeforeFind>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<PostInvtPostBuf>
    Code lines:
    WITH GlobalInvtPostBuf DO BEGIN
      RESET;
      OnPostInvtPostBufferOnBeforeFind(GlobalInvtPostBuf); <=====================
      IF NOT FINDSET THEN
        EXIT;
    
      GenJnlLine.INIT;
      GenJnlLine."Document No." := DocNo;
      GenJnlLine."External Document No." := ExternalDocNo;
      GenJnlLine.Description := Desc;
    ...
Codeunit<ItemCostManagement>.PROCEDURE<OnBeforeCalcLastAdjEntryAvgCost>
  Raised in: Codeunit<ItemCostManagement>.PROCEDURE<CalcLastAdjEntryAvgCost>
    Code lines:
    OnBeforeCalcLastAdjEntryAvgCost(Item,AverageCost,AverageCostACY,AvgCostCalculated); <=====================
    IF AvgCostCalculated THEN
      EXIT;
    
    AverageCost := 0;
    AverageCostACY := 0;
    
    IF CalculateQuantity(Item) <> 0 THEN
      EXIT;
    IF NOT HasOpenEntries(Item) THEN
    ...
Codeunit<ItemCostManagement>.PROCEDURE<OnBeforeCalculateAverageCost>
  Raised in: Codeunit<ItemCostManagement>.PROCEDURE<CalculateAverageCost>
    Code lines:
    OnBeforeCalculateAverageCost(Item,AverageCost,AverageCostACY,AvgCostCalculated); <=====================
    IF AvgCostCalculated THEN
      EXIT;
    
    AverageCost := 0;
    AverageCostACY := 0;
    
    IF CalledFromAdjustment THEN
      ExcludeOpenOutbndCosts(Item,AverageCost,AverageCostACY,AverageQty);
    AverageQty := AverageQty + CalculateQuantity(Item);
    ...
Codeunit<ItemCostManagement>.PROCEDURE<OnBeforeUpdateUnitCost>
  Raised in: Codeunit<ItemCostManagement>.PROCEDURE<UpdateUnitCost>
    Code lines:
    OnBeforeUpdateUnitCost( <=====================
      Item,LocationCode,VariantCode,LastDirectCost,NewStdCost,UpdateSKU,FilterSKU,RecalcStdCost,CalledByFieldNo,UnitCostUpdated);
    IF UnitCostUpdated THEN
      EXIT;
    
    WITH Item DO BEGIN
      IF NewStdCost <> 0 THEN
        "Standard Cost" := NewStdCost;
    
      IF "Costing Method" = "Costing Method"::Standard THEN
    ...
Codeunit<ItemCostManagement>.PROCEDURE<OnBeforeUpdateUnitCostSKU>
  Raised in: Codeunit<ItemCostManagement>.PROCEDURE<UpdateUnitCostSKU>
    Code lines:
    OnBeforeUpdateUnitCostSKU(Item,SKU,LastDirectCost,NewStdCost,MatchSKU,CalledByFieldNo,UnitCostUpdated); <=====================
    IF UnitCostUpdated THEN
      EXIT;
    
    WITH SKU DO BEGIN
      IF NewStdCost <> 0 THEN
        "Standard Cost" := NewStdCost;
      IF Item."Costing Method" <> Item."Costing Method"::Standard THEN BEGIN
        GetInvtSetup;
        IF InvtSetup."Average Cost Calc. Type" <> InvtSetup."Average Cost Calc. Type"::Item THEN BEGIN
    ...
Codeunit<ItemCostManagement>.PROCEDURE<OnUpdateUnitCostSKUOnBeforeMatchSKU>
  Raised in: Codeunit<ItemCostManagement>.PROCEDURE<UpdateUnitCostSKU>
    Code lines:
    ...
        END ELSE
          "Unit Cost" := Item."Unit Cost";
      END ELSE
        "Unit Cost" := "Standard Cost";
    
      OnUpdateUnitCostSKUOnBeforeMatchSKU(SKU,Item); <=====================
      IF MatchSKU AND (LastDirectCost <> 0) THEN
        "Last Direct Cost" := LastDirectCost;
    
      IF CalledByFieldNo <> 0 THEN
    ...
Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnAfterCreateDocChargeAssgnt>
  Raised in: Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<CreateDocChargeAssgnt>
    Code lines:
    ...
          END;
        UNTIL FromPurchLine.NEXT = 0;
      END;
    END;
    
    OnAfterCreateDocChargeAssgnt(LastItemChargeAssgntPurch,ReceiptNo); <=====================
Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnAssignItemCharges>
  Raised in: Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<AssignItemCharges>
    Code lines:
    ...
        AssignByWeightMenuText:
          AssignByWeight(ItemChargeAssgntPurch,Currency,TotalQtyToAssign);
        AssignByVolumeMenuText:
          AssignByVolume(ItemChargeAssgntPurch,Currency,TotalQtyToAssign);
        ELSE BEGIN
          OnAssignItemCharges( <=====================
            SelectionTxt,ItemChargeAssgntPurch,Currency,PurchHeader,TotalQtyToAssign,TotalAmtToAssign,ItemChargesAssigned);
          IF NOT ItemChargesAssigned THEN
            ERROR(ItemChargesNotAssignedErr);
        END;
Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnBeforeCreateDocChargeAssgn>
  Raised in: Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<CreateDocChargeAssgnt>
    Code lines:
    OnBeforeCreateDocChargeAssgn(LastItemChargeAssgntPurch,FromPurchLine); <=====================
    
    WITH LastItemChargeAssgntPurch DO BEGIN
      FromPurchLine.SETRANGE("Document Type","Document Type");
      FromPurchLine.SETRANGE("Document No.","Document No.");
      FromPurchLine.SETRANGE(Type,FromPurchLine.Type::Item);
      IF FromPurchLine.FIND('-') THEN BEGIN
        NextLineNo := "Line No.";
        ItemChargeAssgntPurch.RESET;
        ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
    ...
Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnBeforeCreateReturnRcptChargeAssgnt>
  Raised in: Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<CreateReturnRcptChargeAssgnt>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCreateReturnRcptChargeAssgnt(FromReturnRcptLine,ItemChargeAssgntPurch,IsHandled); <=====================
    IF NOT IsHandled THEN
      FromReturnRcptLine.TESTFIELD("Job No.",'');
    NextLine := ItemChargeAssgntPurch."Line No.";
    ItemChargeAssgntPurch2.SETRANGE("Document Type",ItemChargeAssgntPurch."Document Type");
    ItemChargeAssgntPurch2.SETRANGE("Document No.",ItemChargeAssgntPurch."Document No.");
    ItemChargeAssgntPurch2.SETRANGE("Document Line No.",ItemChargeAssgntPurch."Document Line No.");
    ItemChargeAssgntPurch2.SETRANGE(
      "Applies-to Doc. Type",ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Return Receipt");
    ...
Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnBeforeCreateSalesShptChargeAssgnt>
  Raised in: Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<CreateSalesShptChargeAssgnt>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCreateSalesShptChargeAssgnt(FromSalesShptLine,ItemChargeAssgntPurch,IsHandled); <=====================
    IF NOT IsHandled THEN
      FromSalesShptLine.TESTFIELD("Job No.",'');
    NextLine := ItemChargeAssgntPurch."Line No.";
    ItemChargeAssgntPurch2.SETRANGE("Document Type",ItemChargeAssgntPurch."Document Type");
    ItemChargeAssgntPurch2.SETRANGE("Document No.",ItemChargeAssgntPurch."Document No.");
    ItemChargeAssgntPurch2.SETRANGE("Document Line No.",ItemChargeAssgntPurch."Document Line No.");
    ItemChargeAssgntPurch2.SETRANGE(
      "Applies-to Doc. Type",ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Sales Shipment");
    ...
Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnBeforeCreateShptChargeAssgnt>
  Raised in: Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<CreateShptChargeAssgnt>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCreateShptChargeAssgnt(FromReturnShptLine,ItemChargeAssgntPurch,IsHandled); <=====================
    IF NOT IsHandled THEN
      FromReturnShptLine.TESTFIELD("Job No.",'');
    NextLine := ItemChargeAssgntPurch."Line No.";
    ItemChargeAssgntPurch2.SETRANGE("Document Type",ItemChargeAssgntPurch."Document Type");
    ItemChargeAssgntPurch2.SETRANGE("Document No.",ItemChargeAssgntPurch."Document No.");
    ItemChargeAssgntPurch2.SETRANGE("Document Line No.",ItemChargeAssgntPurch."Document Line No.");
    ItemChargeAssgntPurch2.SETRANGE(
      "Applies-to Doc. Type",ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Return Shipment");
    ...
Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnBeforeInsertItemChargeAssgntWithAssignValues>
  Raised in: Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<InsertItemChargeAssgntWithAssignValues>
    Code lines:
    ...
    ItemChargeAssgntPurch."Unit Cost" := FromItemChargeAssgntPurch."Unit Cost";
    IF QtyToAssign <> 0 THEN BEGIN
      ItemChargeAssgntPurch."Amount to Assign" := AmountToAssign;
      ItemChargeAssgntPurch.VALIDATE("Qty. to Assign",QtyToAssign);
    END;
    OnBeforeInsertItemChargeAssgntWithAssignValues(ItemChargeAssgntPurch); <=====================
    ItemChargeAssgntPurch.INSERT;
Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnBeforeShowSuggestItemChargeAssignStrMenu>
  Raised in: Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<SuggestAssgnt>
    Code lines:
    ...
    SuggestItemChargeMenuTxt :=
      STRSUBSTNO('%1,%2,%3,%4',AssignEquallyMenuText,AssignByAmountMenuText,AssignByWeightMenuText,AssignByVolumeMenuText);
    IF ItemChargeAssgntPurch.COUNT > 1 THEN BEGIN
      Selection := 2;
      SuggestItemChargeMessageTxt := SuggestItemChargeMsg;
      OnBeforeShowSuggestItemChargeAssignStrMenu(PurchLine,SuggestItemChargeMenuTxt,SuggestItemChargeMessageTxt,Selection); <=====================
      IF SuggestItemChargeMenuTxt = '' THEN
        EXIT;
      IF STRLEN(DELCHR(SuggestItemChargeMenuTxt,'=',DELCHR(SuggestItemChargeMenuTxt,'=',','))) > 1 THEN
        Selection := STRMENU(SuggestItemChargeMenuTxt,Selection,SuggestItemChargeMessageTxt)
    ...
Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<OnAfterCreateDocChargeAssgnt>
  Raised in: Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<CreateDocChargeAssgn>
    Code lines:
    ...
          END;
        UNTIL FromSalesLine.NEXT = 0;
      END;
    END;
    
    OnAfterCreateDocChargeAssgnt(LastItemChargeAssgntSales,ShipmentNo); <=====================
Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<OnAssignItemCharges>
  Raised in: Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<AssignItemCharges>
    Code lines:
    ...
        AssignByWeightMenuText:
          AssignByWeight(ItemChargeAssgntSales,Currency,TotalQtyToAssign);
        AssignByVolumeMenuText:
          AssignByVolume(ItemChargeAssgntSales,Currency,TotalQtyToAssign);
        ELSE BEGIN
          OnAssignItemCharges( <=====================
            SelectionTxt,ItemChargeAssgntSales,Currency,SalesHeader,TotalQtyToAssign,TotalAmtToAssign,ItemChargesAssigned);
          IF NOT ItemChargesAssigned THEN
            ERROR(ItemChargesNotAssignedErr);
        END;
Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<OnBeforeCreateDocChargeAssgn>
  Raised in: Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<CreateDocChargeAssgn>
    Code lines:
    OnBeforeCreateDocChargeAssgn(LastItemChargeAssgntSales,FromSalesLine); <=====================
    
    WITH LastItemChargeAssgntSales DO BEGIN
      FromSalesLine.SETRANGE("Document Type","Document Type");
      FromSalesLine.SETRANGE("Document No.","Document No.");
      FromSalesLine.SETRANGE(Type,FromSalesLine.Type::Item);
      IF FromSalesLine.FIND('-') THEN BEGIN
        NextLineNo := "Line No.";
        ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
        ItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
    ...
Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<OnBeforeInsertItemChargeAssgntWithAssignValues>
  Raised in: Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<InsertItemChargeAssgntWithAssignValues>
    Code lines:
    ...
    ItemChargeAssgntSales."Unit Cost" := FromItemChargeAssgntSales."Unit Cost";
    IF QtyToAssign <> 0 THEN BEGIN
      ItemChargeAssgntSales."Amount to Assign" := AmountToAssign;
      ItemChargeAssgntSales.VALIDATE("Qty. to Assign",QtyToAssign);
    END;
    OnBeforeInsertItemChargeAssgntWithAssignValues(ItemChargeAssgntSales); <=====================
    ItemChargeAssgntSales.INSERT;
Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<OnBeforeShowSuggestItemChargeAssignStrMenu>
  Raised in: Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<SuggestAssignment>
    Code lines:
    ...
    SuggestItemChargeMenuTxt :=
      STRSUBSTNO('%1,%2,%3,%4',AssignEquallyMenuText,AssignByAmountMenuText,AssignByWeightMenuText,AssignByVolumeMenuText);
    IF ItemChargeAssgntSales.COUNT > 1 THEN BEGIN
      Selection := 2;
      SuggestItemChargeMessageTxt := SuggestItemChargeMsg;
      OnBeforeShowSuggestItemChargeAssignStrMenu(SalesLine,SuggestItemChargeMenuTxt,SuggestItemChargeMessageTxt,Selection); <=====================
      IF SuggestItemChargeMenuTxt = '' THEN
        EXIT;
      IF STRLEN(DELCHR(SuggestItemChargeMenuTxt,'=',DELCHR(SuggestItemChargeMenuTxt,'=',','))) > 1 THEN
        Selection := STRMENU(SuggestItemChargeMenuTxt,Selection,SuggestItemChargeMessageTxt)
    ...
Codeunit<Calculate Standard Cost>.PROCEDURE<OnBeforeCalcItems>
  Raised in: Codeunit<Calculate Standard Cost>.PROCEDURE<CalcItems>
    Code lines:
    NewTempItem.DELETEALL;
    
    Item2.COPY(Item);
    OnBeforeCalcItems(Item2); <=====================
    
    NoOfRecords := Item.COUNT;
    IF ShowDialog THEN
      Window.OPEN(Text002);
    
    IF Item2.FIND('-') THEN
    ...
Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnAfterCode>
  Raised in: Codeunit<Undo Purchase Receipt Line>.PROCEDURE<Code>
    Code lines:
    ...
      END;
    
      WhseUndoQty.PostTempWhseJnlLine(TempWhseJnlLine);
    END;
    
    OnAfterCode(PurchRcptLine); <=====================
Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnAfterCopyItemJnlLineFromPurchRcpt>
  Raised in: Codeunit<Undo Purchase Receipt Line>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
        ItemJnlLine."Unit Cost" := "Unit Cost (LCY)";
      END;
      ItemJnlLine.Quantity := -Quantity;
      ItemJnlLine."Quantity (Base)" := -"Quantity (Base)";
    
      OnAfterCopyItemJnlLineFromPurchRcpt(ItemJnlLine,PurchRcptHeader,PurchRcptLine); <=====================
    
      WhseUndoQty.InsertTempWhseJnlLine(ItemJnlLine,
        DATABASE::"Purchase Line",
        PurchLine."Document Type"::Order,
    ...
Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnAfterPurchRcptLineModify>
  Raised in: Codeunit<Undo Purchase Receipt Line>.PROCEDURE<Code>
    Code lines:
    ...
        "Qty. Invoiced (Base)" := "Quantity (Base)";
        "Qty. Rcd. Not Invoiced" := 0;
        Correction := TRUE;
    
        MODIFY;
        OnAfterPurchRcptLineModify(PurchRcptLine); <=====================
    
        IF NOT JobItem THEN
          JobItem := (Type = Type::Item) AND ("Job No." <> '');
      UNTIL NEXT = 0;
    ...
Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnAfterUpdateOrderLine>
  Raised in: Codeunit<Undo Purchase Receipt Line>.PROCEDURE<UpdateOrderLine>
    Code lines:
    WITH PurchRcptLine DO BEGIN
      PurchLine.GET(PurchLine."Document Type"::Order,"Order No.","Order Line No.");
      UndoPostingMgt.UpdatePurchLine(PurchLine,Quantity,"Quantity (Base)",TempGlobalItemLedgEntry);
      OnAfterUpdateOrderLine(PurchRcptLine,PurchLine); <=====================
    END;
Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnBeforeCheckPurchRcptLine>
  Raised in: Codeunit<Undo Purchase Receipt Line>.PROCEDURE<CheckPurchRcptLine>
    Code lines:
    OnBeforeCheckPurchRcptLine(PurchRcptLine); <=====================
    
    WITH PurchRcptLine DO BEGIN
      TESTFIELD(Type,Type::Item);
      IF "Qty. Rcd. Not Invoiced" <> Quantity THEN
        ERROR(Text004);
      TESTFIELD("Prod. Order No.",'');
      TESTFIELD("Sales Order No.",'');
      TESTFIELD("Sales Order Line No.",0);
    
    ...
Codeunit<Undo Return Shipment Line>.PROCEDURE<OnAfterCode>
  Raised in: Codeunit<Undo Return Shipment Line>.PROCEDURE<Code>
    Code lines:
    ...
      END;
    
      WhseUndoQty.PostTempWhseJnlLine(TempWhseJnlLine);
    END;
    
    OnAfterCode(ReturnShptLine); <=====================
Codeunit<Undo Return Shipment Line>.PROCEDURE<OnAfterCopyItemJnlLineFromReturnShpt>
  Raised in: Codeunit<Undo Return Shipment Line>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
      ItemJnlLine."Bin Code" := "Bin Code";
      ItemJnlLine.Quantity := "Quantity (Base)";
      ItemJnlLine."Quantity (Base)" := "Quantity (Base)";
      ItemJnlLine."Document Date" := ReturnShptHeader."Document Date";
    
      OnAfterCopyItemJnlLineFromReturnShpt(ItemJnlLine,ReturnShptHeader,ReturnShptLine); <=====================
    
      WhseUndoQty.InsertTempWhseJnlLine(ItemJnlLine,
        DATABASE::"Purchase Line",
        PurchLine."Document Type"::"Return Order",
    ...
Codeunit<Undo Return Shipment Line>.PROCEDURE<OnAfterReturnShptLineModify>
  Raised in: Codeunit<Undo Return Shipment Line>.PROCEDURE<Code>
    Code lines:
    ...
        "Qty. Invoiced (Base)" := "Quantity (Base)";
        "Return Qty. Shipped Not Invd." := 0;
        Correction := TRUE;
    
        MODIFY;
        OnAfterReturnShptLineModify(ReturnShptLine); <=====================
    
        IF NOT JobItem THEN
          JobItem := (Type = Type::Item) AND ("Job No." <> '');
      UNTIL NEXT = 0;
    ...
Codeunit<Undo Return Shipment Line>.PROCEDURE<OnAfterUpdatePurchLine>
  Raised in: Codeunit<Undo Return Shipment Line>.PROCEDURE<UpdateOrderLine>
    Code lines:
    WITH ReturnShptLine DO BEGIN
      PurchLine.GET(PurchLine."Document Type"::"Return Order","Return Order No.","Return Order Line No.");
      UndoPostingMgt.UpdatePurchLine(PurchLine,Quantity,"Quantity (Base)",TempGlobalItemLedgEntry);
      OnAfterUpdatePurchLine(PurchLine); <=====================
    END;
Codeunit<Undo Return Shipment Line>.PROCEDURE<OnBeforeCheckReturnShptLine>
  Raised in: Codeunit<Undo Return Shipment Line>.PROCEDURE<CheckReturnShptLine>
    Code lines:
    OnBeforeCheckReturnShptLine(ReturnShptLine); <=====================
    
    WITH ReturnShptLine DO BEGIN
      TESTFIELD(Type,Type::Item);
      IF "Return Qty. Shipped Not Invd." <> Quantity THEN
        ERROR(Text004);
      TESTFIELD("Prod. Order No.",'');
    
      UndoPostingMgt.TestReturnShptLine(ReturnShptLine);
      UndoPostingMgt.CollectItemLedgEntries(TempItemLedgEntry,DATABASE::"Return Shipment Line",
    ...
Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnAfterCode>
  Raised in: Codeunit<Undo Sales Shipment Line>.PROCEDURE<Code>
    Code lines:
    ...
        InvtAdjmt.SetJobUpdateProperties(TRUE);
        InvtAdjmt.MakeMultiLevelAdjmt;
      END;
    END;
    
    OnAfterCode(SalesShptLine); <=====================
Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnAfterCopyItemJnlLineFromSalesShpt>
  Raised in: Codeunit<Undo Sales Shipment Line>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
      ItemJnlLine.Correction := TRUE;
      ItemJnlLine."Variant Code" := "Variant Code";
      ItemJnlLine."Bin Code" := "Bin Code";
      ItemJnlLine."Document Date" := SalesShptHeader."Document Date";
    
      OnAfterCopyItemJnlLineFromSalesShpt(ItemJnlLine,SalesShptHeader,SalesShptLine); <=====================
    
      WhseUndoQty.InsertTempWhseJnlLine(ItemJnlLine,
        DATABASE::"Sales Line",
        SalesLine."Document Type"::Order,
    ...
Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnAfterInsertNewShipmentLine>
  Raised in: Codeunit<Undo Sales Shipment Line>.PROCEDURE<Code>
    Code lines:
    ...
    
        CLEAR(ItemJnlPostLine);
        ItemShptEntryNo := PostItemJnlLine(SalesShptLine,DocLineNo);
    
        InsertNewShipmentLine(SalesShptLine,ItemShptEntryNo,DocLineNo);
        OnAfterInsertNewShipmentLine(SalesShptLine,PostedWhseShptLine,PostedWhseShptLineFound,DocLineNo); <=====================
    
        IF PostedWhseShptLineFound THEN
          WhseUndoQty.UndoPostedWhseShptLine(PostedWhseShptLine);
    
    ...
Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnAfterSalesShptLineModify>
  Raised in: Codeunit<Undo Sales Shipment Line>.PROCEDURE<Code>
    Code lines:
    ...
        "Quantity Invoiced" := Quantity;
        "Qty. Invoiced (Base)" := "Quantity (Base)";
        "Qty. Shipped Not Invoiced" := 0;
        Correction := TRUE;
        MODIFY;
        OnAfterSalesShptLineModify(SalesShptLine); <=====================
    
        UndoFinalizePostATO(SalesShptLine);
      UNTIL NEXT = 0;
    
    ...
Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnAfterUpdateSalesLine>
  Raised in: Codeunit<Undo Sales Shipment Line>.PROCEDURE<UpdateOrderLine>
    Code lines:
    WITH SalesShptLine DO BEGIN
      SalesLine.GET(SalesLine."Document Type"::Order,"Order No.","Order Line No.");
      UndoPostingMgt.UpdateSalesLine(SalesLine,Quantity,"Quantity (Base)",TempGlobalItemLedgEntry);
      OnAfterUpdateSalesLine(SalesLine,SalesShptLine); <=====================
    END;
Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnBeforeCheckSalesShptLine>
  Raised in: Codeunit<Undo Sales Shipment Line>.PROCEDURE<CheckSalesShptLine>
    Code lines:
    OnBeforeCheckSalesShptLine(SalesShptLine); <=====================
    
    WITH SalesShptLine DO BEGIN
      TESTFIELD(Type,Type::Item);
      IF "Qty. Shipped Not Invoiced" <> Quantity THEN
        ERROR(Text005);
      TESTFIELD("Drop Shipment",FALSE);
    
      UndoPostingMgt.TestSalesShptLine(SalesShptLine);
      UndoPostingMgt.CollectItemLedgEntries(TempItemLedgEntry,DATABASE::"Sales Shipment Line",
    ...
Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnBeforeOnRun>
  Raised in: Codeunit<Undo Sales Shipment Line>.<OnRun>
    Code lines:
    IsHandled := FALSE;
    OnBeforeOnRun(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SETRANGE(Type,Type::Item);
    SETFILTER(Quantity,'<>0');
    IF NOT FIND('-') THEN
      ERROR(Text006);
    
    ...
Codeunit<Undo Return Receipt Line>.PROCEDURE<OnAfterCode>
  Raised in: Codeunit<Undo Return Receipt Line>.PROCEDURE<Code>
    Code lines:
    ...
      END;
    
      WhseUndoQty.PostTempWhseJnlLine(TempWhseJnlLine);
    END;
    
    OnAfterCode(ReturnRcptLine); <=====================
Codeunit<Undo Return Receipt Line>.PROCEDURE<OnAfterCopyItemJnlLineFromReturnRcpt>
  Raised in: Codeunit<Undo Return Receipt Line>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
      ItemJnlLine."Quantity (Base)" := "Quantity (Base)";
      ItemJnlLine."Unit of Measure Code" := "Unit of Measure Code";
      ItemJnlLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
      ItemJnlLine."Document Date" := ReturnRcptHeader."Document Date";
    
      OnAfterCopyItemJnlLineFromReturnRcpt(ItemJnlLine,ReturnRcptHeader,ReturnRcptLine); <=====================
    
      WhseUndoQty.InsertTempWhseJnlLine(ItemJnlLine,
        DATABASE::"Sales Line",
        SalesLine."Document Type"::"Return Order",
    ...
Codeunit<Undo Return Receipt Line>.PROCEDURE<OnAfterInsertNewReceiptLine>
  Raised in: Codeunit<Undo Return Receipt Line>.PROCEDURE<Code>
    Code lines:
    ...
            "Return Order Line No.");
    
        ItemShptEntryNo := PostItemJnlLine(ReturnRcptLine,DocLineNo);
    
        InsertNewReceiptLine(ReturnRcptLine,ItemShptEntryNo,DocLineNo);
        OnAfterInsertNewReceiptLine(ReturnRcptLine,PostedWhseRcptLine,PostedWhseRcptLineFound,DocLineNo); <=====================
    
        SalesLine.GET(SalesLine."Document Type"::"Return Order","Return Order No.",
          "Return Order Line No.");
        IF "Item Rcpt. Entry No." > 0 THEN BEGIN
    ...
Codeunit<Undo Return Receipt Line>.PROCEDURE<OnAfterReturnRcptLineModify>
  Raised in: Codeunit<Undo Return Receipt Line>.PROCEDURE<Code>
    Code lines:
    ...
        "Qty. Invoiced (Base)" := "Quantity (Base)";
        "Return Qty. Rcd. Not Invd." := 0;
        Correction := TRUE;
    
        MODIFY;
        OnAfterReturnRcptLineModify(ReturnRcptLine); <=====================
      UNTIL NEXT = 0;
    
      InvtSetup.GET;
      IF InvtSetup."Automatic Cost Adjustment" <>
    ...
Codeunit<Undo Return Receipt Line>.PROCEDURE<OnAfterUpdateSalesLine>
  Raised in: Codeunit<Undo Return Receipt Line>.PROCEDURE<UpdateOrderLine>
    Code lines:
    WITH ReturnRcptLine DO BEGIN
      SalesLine.GET(SalesLine."Document Type"::"Return Order","Return Order No.","Return Order Line No.");
      UndoPostingMgt.UpdateSalesLine(SalesLine,Quantity,"Quantity (Base)",TempGlobalItemLedgEntry);
      OnAfterUpdateSalesLine(ReturnRcptLine,SalesLine); <=====================
    END;
Codeunit<Undo Return Receipt Line>.PROCEDURE<OnBeforeCheckReturnRcptLine>
  Raised in: Codeunit<Undo Return Receipt Line>.PROCEDURE<CheckReturnRcptLine>
    Code lines:
    OnBeforeCheckReturnRcptLine(ReturnRcptLine); <=====================
    
    WITH ReturnRcptLine DO BEGIN
      TESTFIELD(Type,Type::Item);
      IF "Return Qty. Rcd. Not Invd." <> Quantity THEN
        ERROR(Text004);
    
      UndoPostingMgt.TestReturnRcptLine(ReturnRcptLine);
      UndoPostingMgt.CollectItemLedgEntries(TempItemLedgEntry,DATABASE::"Return Receipt Line",
        "Document No.","Line No.","Quantity (Base)","Item Rcpt. Entry No.");
    ...
Codeunit<Undo Posting Management>.PROCEDURE<OnAfterUpdatePurchline>
  Raised in: Codeunit<Undo Posting Management>.PROCEDURE<UpdatePurchLine>
    Code lines:
    ...
      MODIFY;
      RevertPostedItemTracking(TempUndoneItemLedgEntry,"Expected Receipt Date");
      xPurchLine."Quantity (Base)" := 0;
      ReservePurchLine.VerifyQuantity(PurchLine,xPurchLine);
    
      OnAfterUpdatePurchline(PurchLine); <=====================
    END;
Codeunit<Undo Posting Management>.PROCEDURE<OnAfterUpdateSalesLine>
  Raised in: Codeunit<Undo Posting Management>.PROCEDURE<UpdateSalesLine>
    Code lines:
    ...
      MODIFY;
      RevertPostedItemTracking(TempUndoneItemLedgEntry,"Shipment Date");
      xSalesLine."Quantity (Base)" := 0;
      ReserveSalesLine.VerifyQuantity(SalesLine,xSalesLine);
    
      OnAfterUpdateSalesLine(SalesLine); <=====================
    END;
Codeunit<Undo Posting Management>.PROCEDURE<OnAfterUpdateServLine>
  Raised in: Codeunit<Undo Posting Management>.PROCEDURE<UpdateServLine>
    Code lines:
    ...
      MODIFY;
      RevertPostedItemTracking(TempUndoneItemLedgEntry,"Posting Date");
      xServLine."Quantity (Base)" := 0;
      ReserveServLine.VerifyQuantity(ServLine,xServLine);
    
      OnAfterUpdateServLine(ServLine); <=====================
    END;
Codeunit<Undo Posting Management>.PROCEDURE<OnBeforePostItemJnlLine>
  Raised in: Codeunit<Undo Posting Management>.PROCEDURE<PostItemJnlLineAppliedToList>
    Code lines:
    ...
        NonDistrQuantityBase,ItemJnlLine."Quantity (Base)");
    
      NonDistrQuantity := NonDistrQuantity - ItemJnlLine.Quantity;
      NonDistrQuantityBase := NonDistrQuantityBase - ItemJnlLine."Quantity (Base)";
    
      OnBeforePostItemJnlLine(ItemJnlLine,TempApplyToItemLedgEntry); <=====================
      PostItemJnlLine(ItemJnlLine);
    
      IF ItemJnlLine."Job No." <> '' THEN BEGIN
        CLEAR(ItemJnlPostLine);
    ...
Codeunit<Undo Service Shipment Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServShpt>
  Raised in: Codeunit<Undo Service Shipment Line>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
      ItemJnlLine."Bin Code" := "Bin Code";
      ItemJnlLine.Quantity := -"Quantity (Base)";
      ItemJnlLine."Quantity (Base)" := -"Quantity (Base)";
      ItemJnlLine."Document Date" := ServShptHeader."Document Date";
    
      OnAfterCopyItemJnlLineFromServShpt(ItemJnlLine,ServShptHeader,ServShptLine); <=====================
    
      WhseUndoQty.InsertTempWhseJnlLine(ItemJnlLine,
        DATABASE::"Service Line",
        ServLine."Document Type"::Order,
    ...
Codeunit<Undo Service Consumption Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServShpt>
  Raised in: Codeunit<Undo Service Consumption Line>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
      "Invoiced Quantity" := QtyToConsume;
      "Invoiced Qty. (Base)" := QtyToConsumeBase;
    
      VALIDATE("Applies-from Entry",ItemEntryNo);
    
      OnAfterCopyItemJnlLineFromServShpt(ItemJnlLine,ServShptHeader,ServShptLine); <=====================
    
      WhseUndoQty.InsertTempWhseJnlLine(ItemJnlLine,
        DATABASE::"Service Line",ServiceLine."Document Type"::Order,ServShptHeader."Order No.",ServShptLine."Order Line No.",
        TempWhseJnlLine."Reference Document"::"Posted Shipment",TempWhseJnlLine,NextLineNo);
    ...
Codeunit<Undo Service Consumption Line>.PROCEDURE<OnBeforePostItemJnlLineWithIT>
  Raised in: Codeunit<Undo Service Consumption Line>.PROCEDURE<PostItemJnlLineWithIT>
    Code lines:
    ...
      IF QtyToConsume <> 0 THEN BEGIN
        QtyToConsume -= Quantity;
        QtyToConsumeBase -= "Quantity (Base)";
      END;
    
      OnBeforePostItemJnlLineWithIT(ItemJnlLine); <=====================
    
      UndoPostingMgt.CollectItemLedgEntries(TempItemLedgerEntry,DATABASE::"Service Shipment Line",
        ServShptLine."Document No.",ServShptLine."Line No.",ServShptLine."Quantity (Base)",
        ServShptLine."Item Shpt. Entry No.");
    ...
Codeunit<Undo Service Consumption Line>.PROCEDURE<OnBeforeReservEntryInsert>
  Raised in: Codeunit<Undo Service Consumption Line>.PROCEDURE<InsertNewReservationEntries>
    Code lines:
    ...
          ReservEntry.Description := ServShptLine.Description;
          ReservEntry."Creation Date" := WORKDATE;
          ReservEntry."Created By" := USERID;
          ReservEntry.UpdateItemTracking;
          ReservEntry."Appl.-to Item Entry" := "Entry No.";
          OnBeforeReservEntryInsert(ReservEntry,TempTrkgItemLedgEntry2); <=====================
          ReservEntry.INSERT;
          TempReservEntry := ReservEntry;
          TempReservEntry.INSERT;
        UNTIL NEXT = 0;
    ...
Codeunit<Undo Service Consumption Line>.PROCEDURE<OnBeforeTempGlobalItemEntryRelationInsert>
  Raised in: Codeunit<Undo Service Consumption Line>.PROCEDURE<InsertNewTrackSpecifications>
    Code lines:
    ...
    
          // collect/add another value entry relation, for the future new line
          TempGlobalItemEntryRelation."Item Entry No." := TempSSLItemLedgEntry."Entry No.";
          TempGlobalItemEntryRelation."Serial No." := TempSSLItemLedgEntry."Serial No.";
          TempGlobalItemEntryRelation."Lot No." := TempSSLItemLedgEntry."Lot No.";
          OnBeforeTempGlobalItemEntryRelationInsert(TempGlobalItemEntryRelation,TempSSLItemLedgEntry); <=====================
          IF TempGlobalItemEntryRelation.INSERT THEN;
    
          TempSSLItemLedgEntry.NEXT;
        UNTIL TempTrkgItemLedgEntry.NEXT = 0;
Codeunit<Cost Calculation Management>.PROCEDURE<OnCalcProdOrderLineExpCostOnExpOperCostCalculated>
  Raised in: Codeunit<Cost Calculation Management>.PROCEDURE<CalcProdOrderLineExpCost>
    Code lines:
    ...
      IF ProdOrderRtngLine.FIND('-') THEN
        REPEAT
          ExpOperCost :=
            ProdOrderRtngLine."Expected Operation Cost Amt." -
            ProdOrderRtngLine."Expected Capacity Ovhd. Cost";
          OnCalcProdOrderLineExpCostOnExpOperCostCalculated(ExpOperCost,ProdOrderRtngLine); <=====================
          IF ProdOrderRtngLine.Type = ProdOrderRtngLine.Type::"Work Center" THEN BEGIN
            IF NOT WorkCenter.GET(ProdOrderRtngLine."No.") THEN
              CLEAR(WorkCenter);
          END ELSE
    ...
Codeunit<Calculate BOM Tree>.PROCEDURE<OnAfterTransferFromProdBOM>
  Raised in: Codeunit<Calculate BOM Tree>.PROCEDURE<GenerateProdCompSubTree>
    Code lines:
    ...
                  BOMBuffer."Scrap %" := CombineScrapFactors(BOMBuffer."Scrap %","Scrap %");
                  IF CostCalculationMgt.FindRountingLine(RoutingLine,ProdBOMLine,WORKDATE,ParentItem."Routing No.") THEN
                    BOMBuffer."Scrap %" := CombineScrapFactors(BOMBuffer."Scrap %",RoutingLine."Scrap Factor % (Accumulated)" * 100);
                  BOMBuffer."Scrap %" := ROUND(BOMBuffer."Scrap %",0.00001);
    
                  OnAfterTransferFromProdBOM(BOMBuffer,ProdBOMLine); <=====================
    
                  CopyOfParentItem := ParentItem;
                  ParentItem."Routing No." := '';
                  ParentItem."Production BOM No." := "No.";
    ...
Codeunit<Calculate BOM Tree>.PROCEDURE<OnAfterTransferFromProdItem>
  Raised in: Codeunit<Calculate BOM Tree>.PROCEDURE<GenerateProdCompSubTree>
    Code lines:
    ...
                  IF ParentItem."Production BOM No." <> ParentBOMBuffer."Production BOM No." THEN BEGIN
                    BOMBuffer."Qty. per Parent" := BOMBuffer."Qty. per Parent" * ParentBOMBuffer."Qty. per Parent";
                    BOMBuffer."Scrap Qty. per Parent" := BOMBuffer."Scrap Qty. per Parent" * ParentBOMBuffer."Qty. per Parent";
                    BOMBuffer."Qty. per BOM Line" := BOMBuffer."Qty. per BOM Line" * ParentBOMBuffer."Qty. per Parent";
                  END;
                  OnAfterTransferFromProdItem(BOMBuffer,ProdBOMLine); <=====================
                  GenerateItemSubTree("No.",BOMBuffer);
                END;
              Type::"Production BOM":
                BEGIN
    ...
Codeunit<Calculate BOM Tree>.PROCEDURE<OnAfterTransferFromProdRouting>
  Raised in: Codeunit<Calculate BOM Tree>.PROCEDURE<GenerateProdCompSubTree>
    Code lines:
    ...
                EntryNo,RoutingLine,ParentBOMBuffer.Indentation + 1,
                ParentBOMBuffer."Qty. per Top Item" *
                UOMMgt.GetQtyPerUnitOfMeasure(ParentItem,ParentBOMBuffer."Unit of Measure Code"),
                ParentBOMBuffer."Needed by Date",
                ParentBOMBuffer."Location Code");
              OnAfterTransferFromProdRouting(BOMBuffer,RoutingLine); <=====================
              IF TreeType = TreeType::Cost THEN BEGIN
                LotSize := ParentBOMBuffer."Lot Size";
                IF LotSize = 0 THEN
                  LotSize := 1;
    ...
Codeunit<Calculate BOM Tree>.PROCEDURE<OnBeforeFilterBOMBuffer>
  Raised in: Codeunit<Calculate BOM Tree>.PROCEDURE<GenerateTreeForItemLocal>
    Code lines:
    ...
      ProdBOMLine.SETRANGE(Type,ProdBOMLine.Type::Item);
      ProdBOMLine.SETRANGE("No.","No.");
    
      IF HasBOM OR ("Routing No." <> '') THEN BEGIN
        IsHandled := FALSE;
        OnBeforeFilterBOMBuffer(ParentItem,BOMBuffer,DemandDate,TreeType,IsHandled); <=====================
        IF NOT IsHandled THEN BEGIN
          BOMBuffer.SetLocationVariantFiltersFrom(ItemFilter);
          BOMBuffer.TransferFromItem(EntryNo,ParentItem,DemandDate);
          GenerateItemSubTree("No.",BOMBuffer);
    ...
Codeunit<Inventory Adjustment>.PROCEDURE<OnPostItemJnlLineCopyFromValueEntry>
  Raised in: Codeunit<Inventory Adjustment>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
      ItemJnlLine."Dimension Set ID" := "Dimension Set ID";
    
      IF NOT SkipUpdateJobItemCost AND ("Job No." <> '') THEN
        CopyJobToAdjustmentBuf("Job No.");
    
      OnPostItemJnlLineCopyFromValueEntry(ItemJnlLine,OrigValueEntry); <=====================
      ItemJnlPostLine.RunWithCheck(ItemJnlLine);
    END;
Codeunit<Service Inv.-Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<Service Inv.-Printed>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<Service Shpt.-Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<Service Shpt.-Printed>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<Service Cr. Memo-Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<Service Cr. Memo-Printed>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<Service-Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<Service-Printed>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<ServLogManagement>.PROCEDURE<OnBeforeServItemEventDescription>
  Raised in: Codeunit<ServLogManagement>.PROCEDURE<ServItemEventDescription>
    Code lines:
    OnBeforeServItemEventDescription(EventNo); <=====================
    
    CASE EventNo OF
      1:
        EXIT(Text015);
      2:
        EXIT(Text016);
      3:
        EXIT(Text017);
      4:
    ...
Codeunit<ServLogManagement>.PROCEDURE<OnServItemEventDescription>
  Raised in: Codeunit<ServLogManagement>.PROCEDURE<ServItemEventDescription>
    Code lines:
    ...
      17:
        EXIT(Text031);
      18:
        EXIT(Text032);
      ELSE BEGIN
        OnServItemEventDescription(EventNo,Description,Handled); <=====================
        IF Handled THEN
          EXIT(Description);
        EXIT(UnknownEventTxt);
      END;
Codeunit<ServLogManagement>.PROCEDURE<OnServOrderEventDescription>
  Raised in: Codeunit<ServLogManagement>.PROCEDURE<ServOrderEventDescription>
    Code lines:
    ...
      23:
        EXIT(Text039);
      24:
        EXIT(Text040);
      ELSE BEGIN
        OnServOrderEventDescription(EventNo,Description,Handled); <=====================
        IF Handled THEN
          EXIT(Description);
        EXIT(UnknownEventTxt);
      END;
Codeunit<ServItemManagement>.PROCEDURE<OnBeforeInsertNewServItemComponent>
  Raised in: Codeunit<ServItemManagement>.PROCEDURE<AddOrReplaceSIComponent>
    Code lines:
    ...
            IF TrackingLinesExist THEN BEGIN
              NewServItemComponent."Serial No." := TempTrackingSpecification."Serial No.";
              IF TempTrackingSpecification.NEXT = 0 THEN
                TrackingLinesExist := FALSE;
            END;
            OnBeforeInsertNewServItemComponent(NewServItemComponent,ServLine); <=====================
            NewServItemComponent.INSERT;
            CLEAR(ServLogMgt);
            ServLogMgt.ServItemComponentAdded(NewServItemComponent);
    
    ...
  Raised in: Codeunit<ServItemManagement>.PROCEDURE<AddOrReplaceSIComponent>
    Code lines:
    ...
            IF TrackingLinesExist THEN BEGIN
              NewServItemComponent."Serial No." := TempTrackingSpecification."Serial No.";
              IF TempTrackingSpecification.NEXT = 0 THEN
                TrackingLinesExist := FALSE;
            END;
            OnBeforeInsertNewServItemComponent(NewServItemComponent,ServLine); <=====================
            NewServItemComponent.INSERT;
            CLEAR(ServLogMgt);
            ServLogMgt.ServItemComponentAdded(NewServItemComponent);
    
    ...
  Raised in: Codeunit<ServItemManagement>.PROCEDURE<AddOrReplaceSIComponent>
    Code lines:
    ...
            IF TrackingLinesExist THEN BEGIN
              NewServItemComponent."Serial No." := TempTrackingSpecification."Serial No.";
              IF TempTrackingSpecification.NEXT = 0 THEN
                TrackingLinesExist := FALSE;
            END;
            OnBeforeInsertNewServItemComponent(NewServItemComponent,ServLine); <=====================
            NewServItemComponent.INSERT;
            CLEAR(ServLogMgt);
            ServLogMgt.ServItemComponentAdded(NewServItemComponent);
    
    ...
Codeunit<ServItemManagement>.PROCEDURE<OnBeforeReplaceSIComponent>
  Raised in: Codeunit<ServItemManagement>.PROCEDURE<AddOrReplaceSIComponent>
    Code lines:
    IF (ServLine.Type <> ServLine.Type::Item) OR (ServLine."Qty. to Ship" = 0) THEN
      EXIT;
    
    OnBeforeReplaceSIComponent(ServLine,ServHeader,ServShptDocNo,ServShptLineNo,TempTrackingSpecification); <=====================
    
    WITH ServLine DO
      CASE "Spare Part Action" OF
        "Spare Part Action"::"Component Replaced":
          BEGIN
            CheckWholeNumber(ServLine);
    ...
Codeunit<ServItemManagement>.PROCEDURE<OnCreateServItemOnSalesLineShpt>
  Raised in: Codeunit<ServItemManagement>.PROCEDURE<CreateServItemOnSalesLineShpt>
    Code lines:
    ...
          ServItem."Warranty Ending Date (Labor)" :=
            CALCDATE(
              ServMgtSetup."Default Warranty Duration",
              SalesHeader."Posting Date");
    
          OnCreateServItemOnSalesLineShpt(ServItem,SalesHeader,SalesLine); <=====================
    
          ServItem.MODIFY;
          CLEAR(ServiceItemTEMP);
          ServiceItemTEMP := ServItem;
    ...
Codeunit<ServItemManagement>.PROCEDURE<OnCreateServItemOnServItemLine>
  Raised in: Codeunit<ServItemManagement>.PROCEDURE<CreateServItemOnServItemLine>
    Code lines:
    ...
      ServLogMgt.ServItemAutoCreated(ServItem);
      MESSAGE(Text001,ServItem."No.");
      "Service Item No." := ServItem."No.";
      "Contract No." := '';
    
      OnCreateServItemOnServItemLine(ServItem,ServItemLine); <=====================
    
      MODIFY;
      CreateDim(
        DATABASE::"Service Item","Service Item No.",
    ...
Codeunit<Service-Quote to Order>.PROCEDURE<OnAfterInsertServHeader>
  Raised in: Codeunit<Service-Quote to Order>.PROCEDURE<InsertServHeader>
    Code lines:
    ServiceHeaderOrder.INSERT(TRUE);
    ServiceHeaderOrder."Document Date" := ServiceHeaderQuote."Document Date";
    ServiceHeaderOrder."Location Code" := ServiceHeaderQuote."Location Code";
    ServiceHeaderOrder.MODIFY;
    
    OnAfterInsertServHeader(ServiceHeaderOrder,ServiceHeaderQuote); <=====================
Codeunit<Service-Quote to Order>.PROCEDURE<OnAfterInsertServiceLine>
  Raised in: Codeunit<Service-Quote to Order>.PROCEDURE<MakeOrder>
    Code lines:
    ...
          RepairStatus.RESET;
          RepairStatus.SETRANGE(Initial,TRUE);
          IF RepairStatus.FINDFIRST THEN
            ServItemLine2."Repair Status Code" := RepairStatus.Code;
          ServItemLine2.INSERT(TRUE);
          OnAfterInsertServiceLine(ServItemLine2,ServItemLine); <=====================
        UNTIL ServItemLine.NEXT = 0;
    
      UpdateResponseDateTime;
    
    ...
Codeunit<Service-Quote to Order>.PROCEDURE<OnBeforeRun>
  Raised in: Codeunit<Service-Quote to Order>.<OnRun>
    Code lines:
    OnBeforeRun(Rec); <=====================
    
    NewServHeader := Rec;
    
    ServMgtSetup.GET;
    
    NewServHeader."Document Type" := "Document Type"::Order;
    Customer.GET("Customer No.");
    Customer.CheckBlockedCustOnDocs(Customer,DocType::Quote,FALSE,FALSE);
    IF "Customer No." <> "Bill-to Customer No." THEN BEGIN
    ...
Codeunit<ServContractManagement>.PROCEDURE<OnAfterCreateServHeader>
  Raised in: Codeunit<ServContractManagement>.PROCEDURE<CreateServHeader>
    Code lines:
    ...
      ServDocReg."Source Document Type"::Contract,
      ServContract2."Contract No.",
      ServDocReg."Destination Document Type"::Invoice,
      ServHeader2."No.");
    
    OnAfterCreateServHeader(ServHeader2,ServContract2); <=====================
Codeunit<Lock-OpenServContract>.PROCEDURE<OnBeforeLockServContract>
  Raised in: Codeunit<Lock-OpenServContract>.PROCEDURE<LockServContract>
    Code lines:
    OnBeforeLockServContract(FromServContractHeader); <=====================
    
    ServContractHeader := FromServContractHeader;
    WITH ServContractHeader DO BEGIN
      IF "Change Status" = "Change Status"::Locked THEN
        EXIT;
      CALCFIELDS("Calcd. Annual Amount");
      TESTFIELD("Annual Amount","Calcd. Annual Amount");
      IF "Annual Amount" < 0 THEN
        ERROR(Text003);
    ...
Codeunit<SignServContractDoc>.PROCEDURE<OnAfterToServContractHeaderInsert>
  Raised in: Codeunit<SignServContractDoc>.PROCEDURE<SignContractQuote>
    Code lines:
    ...
      ToServContractHeader."Last Invoice Date" := ToServContractHeader."Starting Date";
      ToServContractHeader.VALIDATE("Last Invoice Period End",InvoiceTo);
    END;
    OnBeforeToServContractHeaderInsert(ToServContractHeader,FromServContractHeader);
    ToServContractHeader.INSERT;
    OnAfterToServContractHeaderInsert(ToServContractHeader,FromServContractHeader); <=====================
    
    IF ServMgtSetup."Register Contract Changes" THEN
      ContractChangeLog.LogContractChange(
        ToServContractHeader."Contract No.",0,ToServContractHeader.FIELDCAPTION(Status),0,
    ...
Codeunit<SignServContractDoc>.PROCEDURE<OnAfterToServContractLineInsert>
  Raised in: Codeunit<SignServContractDoc>.PROCEDURE<SignContractQuote>
    Code lines:
    ...
        ToServContractLine."Contract No." := FromServContractLine."Contract No.";
        ToServContractLine."Contract Status" := FromServContractLine."Contract Status"::Signed;
        ToServContractLine.SuspendStatusCheck(TRUE);
        OnBeforeToServContractLineInsert(ToServContractLine,FromServContractLine);
        ToServContractLine.INSERT(TRUE);
        OnAfterToServContractLineInsert(ToServContractLine,FromServContractLine); <=====================
        CLEAR(ServLogMgt);
        WPostLine := WPostLine + 1;
        Window.UPDATE(2,WPostLine);
      UNTIL FromServContractLine.NEXT = 0;
    ...
Codeunit<SignServContractDoc>.PROCEDURE<OnBeforeSignContract>
  Raised in: Codeunit<SignServContractDoc>.PROCEDURE<SignContract>
    Code lines:
    OnBeforeSignContract(FromServContractHeader); <=====================
    
    IF NOT HideDialog THEN
      CLEARALL;
    
    IF NOT HideDialog THEN
      IF NOT CONFIRM(Text010,TRUE,FromServContractHeader."Contract No.") THEN
        EXIT;
    
    ServContractHeader.GET(FromServContractHeader."Contract Type",FromServContractHeader."Contract No.");
    ...
Codeunit<SignServContractDoc>.PROCEDURE<OnBeforeSignContractQuote>
  Raised in: Codeunit<SignServContractDoc>.PROCEDURE<SignContractQuote>
    Code lines:
    OnBeforeSignContractQuote(FromServContractHeader); <=====================
    
    IF NOT HideDialog THEN
      CLEARALL;
    CheckServContractQuote(FromServContractHeader);
    IF NOT HideDialog THEN
      IF NOT CONFIRM(Text011,TRUE) THEN
        EXIT;
    IF NOT HideDialog THEN
      IF NOT CheckServContractNextPlannedServiceDate(FromServContractHeader) THEN
    ...
Codeunit<SignServContractDoc>.PROCEDURE<OnBeforeToServContractHeaderInsert>
  Raised in: Codeunit<SignServContractDoc>.PROCEDURE<SignContractQuote>
    Code lines:
    ...
    ToServContractHeader."Contract Type" := ToServContractHeader."Contract Type"::Contract;
    IF InvoiceNow THEN BEGIN
      ToServContractHeader."Last Invoice Date" := ToServContractHeader."Starting Date";
      ToServContractHeader.VALIDATE("Last Invoice Period End",InvoiceTo);
    END;
    OnBeforeToServContractHeaderInsert(ToServContractHeader,FromServContractHeader); <=====================
    ToServContractHeader.INSERT;
    OnAfterToServContractHeaderInsert(ToServContractHeader,FromServContractHeader);
    
    IF ServMgtSetup."Register Contract Changes" THEN
    ...
Codeunit<SignServContractDoc>.PROCEDURE<OnBeforeToServContractLineInsert>
  Raised in: Codeunit<SignServContractDoc>.PROCEDURE<SignContractQuote>
    Code lines:
    ...
        ToServContractLine := FromServContractLine;
        ToServContractLine."Contract Type" := ToServContractLine."Contract Type"::Contract;
        ToServContractLine."Contract No." := FromServContractLine."Contract No.";
        ToServContractLine."Contract Status" := FromServContractLine."Contract Status"::Signed;
        ToServContractLine.SuspendStatusCheck(TRUE);
        OnBeforeToServContractLineInsert(ToServContractLine,FromServContractLine); <=====================
        ToServContractLine.INSERT(TRUE);
        OnAfterToServContractLineInsert(ToServContractLine,FromServContractLine);
        CLEAR(ServLogMgt);
        WPostLine := WPostLine + 1;
    ...
Codeunit<Service-Calc. Discount>.PROCEDURE<OnBeforeCalcServDiscount>
  Raised in: Codeunit<Service-Calc. Discount>.PROCEDURE<CalculateInvoiceDiscount>
    Code lines:
    OnBeforeCalcServDiscount(ServHeader); <=====================
    
    SalesSetup.GET;
    WITH ServiceLine DO BEGIN
      LOCKTABLE;
      ServHeader.TESTFIELD("Customer Posting Group");
      CustPostingGr.GET(ServHeader."Customer Posting Group");
    
      IF NOT IsServiceChargeUpdated(ServiceLine) THEN BEGIN
        ServiceLine2.RESET;
    ...
Codeunit<Service-Post>.PROCEDURE<OnAfterPostServiceDoc>
  Raised in: Codeunit<Service-Post>.PROCEDURE<PostWithLines>
    Code lines:
    ...
    
    IF WhseShip THEN
      WhseServiceRelease.Release(ServiceHeader);
    COMMIT;
    
    OnAfterPostServiceDoc(ServiceHeader,ServShipmentNo,ServInvoiceNo,ServCrMemoNo); <=====================
    
    Window.CLOSE;
    UpdateAnalysisView.UpdateAll(0,TRUE);
    UpdateItemAnalysisView.UpdateAll(0,TRUE);
    ...
Codeunit<Service-Post>.PROCEDURE<OnBeforePostWithLines>
  Raised in: Codeunit<Service-Post>.PROCEDURE<PostWithLines>
    Code lines:
    OnBeforePostWithLines(PassedServHeader,PassedServLine,PassedShip,PassedConsume,PassedInvoice); <=====================
    
    ServiceHeader := PassedServHeader;
    
    CLEAR(ServDocumentsMgt);
    IF PostingDateExists AND (ReplacePostingDate OR (ServiceHeader."Posting Date" = 0D)) THEN BEGIN
      ServiceHeader.VALIDATE("Posting Date",PostingDate);
      ServiceHeader.VALIDATE("Currency Code");
    END;
    IF PostingDateExists AND (ReplaceDocumentDate OR (ServiceHeader."Document Date" = 0D)) THEN
    ...
Codeunit<Service-Post (Yes/No)>.PROCEDURE<OnAfterConfirmPost>
  Raised in: Codeunit<Service-Post (Yes/No)>.PROCEDURE<Code>
    Code lines:
    ...
            IF NOT PreviewMode THEN
              IF NOT CONFIRM(PostConfirmQst,FALSE,"Document Type") THEN
                EXIT;
        END;
    
      OnAfterConfirmPost(PassedServiceHeader,Ship,Consume,Invoice); <=====================
    
      ServicePost.SetPreviewMode(PreviewMode);
      ServicePost.PostWithLines(PassedServiceHeader,PassedServLine,Ship,Consume,Invoice);
    
    ...
Codeunit<Service-Post (Yes/No)>.PROCEDURE<OnBeforeConfirmServPost>
  Raised in: Codeunit<Service-Post (Yes/No)>.PROCEDURE<Code>
    Code lines:
    IF NOT PassedServiceHeader.FIND THEN
      ERROR(NothingToPostErr);
    
    HideDialog := FALSE;
    IsHandled := FALSE;
    OnBeforeConfirmServPost(PassedServiceHeader,HideDialog,Ship,Consume,Invoice,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH PassedServiceHeader DO BEGIN
    ...
Codeunit<Service-Post+Print>.PROCEDURE<OnAfterConfirmPost>
  Raised in: Codeunit<Service-Post+Print>.PROCEDURE<Code>
    Code lines:
    ...
        ELSE
          IF NOT CONFIRM(Text001,FALSE,"Document Type") THEN
            EXIT;
      END;
    
      OnAfterConfirmPost(ServiceHeader,Ship,Consume,Invoice); <=====================
    
      ServicePost.PostWithLines(ServiceHeader,PassedServLine,Ship,Consume,Invoice);
      GetReport(ServiceHeader);
      COMMIT;
Codeunit<Service-Post+Print>.PROCEDURE<OnBeforeConfirmPost>
  Raised in: Codeunit<Service-Post+Print>.PROCEDURE<Code>
    Code lines:
    HideDialog := FALSE;
    IsHandled := FALSE;
    OnBeforeConfirmPost(ServiceHeader,HideDialog,Ship,Consume,Invoice,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH ServiceHeader DO BEGIN
      CASE "Document Type" OF
        "Document Type"::Order:
          BEGIN
    ...
Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<OnAfterPostInvoicePostBuffer>
  Raised in: Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<PostInvoicePostBufferLine>
    Code lines:
    ...
      CopyFromInvoicePostBuffer(InvoicePostBuffer);
      "Gen. Posting Type" := "Gen. Posting Type"::Sale;
    
      OnBeforePostInvoicePostBuffer(GenJnlLine,InvoicePostBuffer,ServiceHeader,GenJnlPostLine);
      GLEntryNo := GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostInvoicePostBuffer(GenJnlLine,InvoicePostBuffer,ServiceHeader,GLEntryNo,GenJnlPostLine); <=====================
    END;
Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<OnBeforePostInvoicePostBuffer>
  Raised in: Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<PostInvoicePostBufferLine>
    Code lines:
    ...
    
      CopyFromServiceHeader(ServiceHeader);
      CopyFromInvoicePostBuffer(InvoicePostBuffer);
      "Gen. Posting Type" := "Gen. Posting Type"::Sale;
    
      OnBeforePostInvoicePostBuffer(GenJnlLine,InvoicePostBuffer,ServiceHeader,GenJnlPostLine); <=====================
      GLEntryNo := GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostInvoicePostBuffer(GenJnlLine,InvoicePostBuffer,ServiceHeader,GLEntryNo,GenJnlPostLine);
    END;
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterCheckCertificateOfSupplyStatus>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<CheckCertificateOfSupplyStatus>
    Code lines:
    ...
      IF VATPostingSetup.GET(ServShptHeader."VAT Bus. Posting Group",ServShptLine."VAT Prod. Posting Group") AND
         VATPostingSetup."Certificate of Supply Required"
      THEN BEGIN
        CertificateOfSupply.InitFromService(ServShptHeader);
        CertificateOfSupply.SetRequired(ServShptHeader."No.");
        OnAfterCheckCertificateOfSupplyStatus(ServShptHeader,ServShptLine); <=====================
      END;
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterFinalize>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<Finalize>
    Code lines:
    ...
      FinalizeLines;
      FinalizeItemLines;
      FinalizeHeader(PassedServHeader);
    END;
    
    OnAfterFinalize(PassedServHeader); <=====================
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterPrepareCrMemoHeader>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareCrMemoHeader>
    Code lines:
    ...
      ServOrderMgt.CopyCommentLines(
        DummyServCommentLine."Table Name"::"Service Header",
        DummyServCommentLine."Table Name"::"Service Cr.Memo Header",
        "No.",ServCrMemoHeader."No.");
    
      OnAfterPrepareCrMemoHeader(ServCrMemoHeader,ServHeader); <=====================
      EXIT(ServCrMemoHeader."No.");
    END;
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterPrepareInvoiceHeader>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareInvoiceHeader>
    Code lines:
    ...
        ServOrderMgt.CopyCommentLinesWithSubType(
          DummyServCommentLine."Table Name"::"Service Header",
          DummyServCommentLine."Table Name"::"Service Invoice Header",
          "No.",ServInvHeader."No.","Document Type");
    
      OnAfterPrepareInvoiceHeader(ServInvHeader,ServHeader); <=====================
      EXIT(ServInvHeader."No.");
    END;
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterPrepareShipmentHeader>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareShipmentHeader>
    Code lines:
    ...
        END;
      END;
    
      ServItemMgt.CopyReservationEntryService(ServHeader);
    
      OnAfterPrepareShipmentHeader(ServShptHeader,ServHeader); <=====================
      EXIT(ServShptHeader."No.");
    END;
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterServCrMemoHeaderInsert>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareCrMemoHeader>
    Code lines:
    ...
      ServCrMemoHeader."Source Code" := SrcCode;
      ServCrMemoHeader."User ID" := USERID;
      ServCrMemoHeader."No. Printed" := 0;
      OnBeforeServCrMemoHeaderInsert(ServCrMemoHeader,ServHeader);
      ServCrMemoHeader.INSERT;
      OnAfterServCrMemoHeaderInsert(ServCrMemoHeader,ServHeader); <=====================
    
      CLEAR(ServLogMgt);
      ServLogMgt.ServCrMemoPost("No.",ServCrMemoHeader."No.");
    
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterServCrMemoLineInsert>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareCrMemoLine>
    Code lines:
    ...
      ServCrMemoLine."Quantity (Base)" := "Qty. to Invoice (Base)";
      CALCFIELDS("Service Item Line Description");
      ServCrMemoLine."Service Item Line Description" := "Service Item Line Description";
      OnBeforeServCrMemoLineInsert(ServCrMemoLine,passedServLine);
      ServCrMemoLine.INSERT;
      OnAfterServCrMemoLineInsert(ServCrMemoLine,passedServLine); <=====================
    END;
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterServInvHeaderInsert>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareInvoiceHeader>
    Code lines:
    ...
      ServInvHeader."Source Code" := SrcCode;
      ServInvHeader."User ID" := USERID;
      ServInvHeader."No. Printed" := 0;
      OnBeforeServInvHeaderInsert(ServInvHeader,ServHeader);
      ServInvHeader.INSERT;
      OnAfterServInvHeaderInsert(ServInvHeader,ServHeader); <=====================
    
      CLEAR(ServLogMgt);
      CASE "Document Type" OF
        "Document Type"::Invoice:
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterServInvLineInsert>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareInvoiceLine>
    Code lines:
    ...
      ServInvLine."Quantity (Base)" := "Qty. to Invoice (Base)";
      CALCFIELDS("Service Item Line Description");
      ServInvLine."Service Item Line Description" := "Service Item Line Description";
      OnBeforeServInvLineInsert(ServInvLine,passedServLine);
      ServInvLine.INSERT;
      OnAfterServInvLineInsert(ServInvLine,passedServLine); <=====================
    END;
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterServShptHeaderInsert>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareShipmentHeader>
    Code lines:
    ...
        ServShptHeader."Source Code" := SrcCode;
        ServShptHeader."User ID" := USERID;
        ServShptHeader."No. Printed" := 0;
        OnBeforeServShptHeaderInsert(ServShptHeader,ServHeader);
        ServShptHeader.INSERT;
        OnAfterServShptHeaderInsert(ServShptHeader,ServHeader); <=====================
    
        CLEAR(ServLogMgt);
        ServLogMgt.ServOrderShipmentPost("No.",ServShptHeader."No.");
    
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterServShptItemLineInsert>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareShipmentHeader>
    Code lines:
    ...
            // create SSIL
            ServShptItemLine.TRANSFERFIELDS(ServItemLine);
            ServShptItemLine."No." := ServShptHeader."No.";
            OnBeforeServShptItemLineInsert(ServShptItemLine,ServItemLine);
            ServShptItemLine.INSERT;
            OnAfterServShptItemLineInsert(ServShptItemLine,ServItemLine); <=====================
    
            // set mgt. date and service dates
            IF (ServItemLine."Contract No." <> '') AND (ServItemLine."Contract Line No." <> 0) AND
               ("Contract No." <> '')
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterServShptLineInsert>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareShipmentLine>
    Code lines:
    ...
    
        CALCFIELDS("Service Item Line Description");
        ServShptLine."Service Item Line Description" := "Service Item Line Description";
        OnBeforeServShptLineInsert(ServShptLine,ServLine);
        ServShptLine.INSERT;
        OnAfterServShptLineInsert(ServShptLine,ServLine); <=====================
        CheckCertificateOfSupplyStatus(ServShptHeader,ServShptLine);
      END;
      // end inserting Service Shipment Line
    
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeFinalize>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<Finalize>
    Code lines:
    OnBeforeFinalize(PassedServHeader); <=====================
    
    // finalize codeunits calls
    ServPostingJnlsMgt.Finalize;
    
    // finalize posted documents
    FinalizeShipmentDocument;
    FinalizeInvoiceDocument;
    FinalizeCrMemoDocument;
    FinalizeWarrantyLedgerEntries(PassedServHeader,CloseCondition);
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeFinalizeCrMemoDocument>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<FinalizeCrMemoDocument>
    Code lines:
    OnBeforeFinalizeCrMemoDocument(ServCrMemoHeader); <=====================
    
    ServCrMemoHeader.RESET;
    IF ServCrMemoHeader.FINDFIRST THEN BEGIN
      PServCrMemoHeader.INIT;
      PServCrMemoHeader.COPY(ServCrMemoHeader);
      PServCrMemoHeader.INSERT;
    END;
    ServCrMemoHeader.DELETEALL;
    
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeFinalizeInvoiceDocument>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<FinalizeInvoiceDocument>
    Code lines:
    OnBeforeFinalizeInvoiceDocument(ServInvHeader); <=====================
    
    ServInvHeader.RESET;
    IF ServInvHeader.FINDFIRST THEN BEGIN
      PServInvHeader.INIT;
      PServInvHeader.COPY(ServInvHeader);
      PServInvHeader.INSERT;
    END;
    ServInvHeader.DELETEALL;
    
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeFinalizeShipmentDocument>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<FinalizeShipmentDocument>
    Code lines:
    OnBeforeFinalizeShipmentDocument(ServShptHeader); <=====================
    
    ServShptHeader.RESET;
    IF ServShptHeader.FINDFIRST THEN BEGIN
      PServShptHeader.INIT;
      PServShptHeader.COPY(ServShptHeader);
      PServShptHeader.INSERT;
    END;
    ServShptHeader.DELETEALL;
    
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeModifyServiceDocNoSeries>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<SetNoSeries>
    Code lines:
    ...
          "Posting No." := NoSeriesMgt.GetNextNo("Posting No. Series","Posting Date",TRUE);
          ModifyHeader := TRUE;
        END;
      END;
    
      OnBeforeModifyServiceDocNoSeries(ServHeader,PServHeader,ModifyHeader); <=====================
      MODIFY;
    
      IF ModifyHeader THEN BEGIN
        PServHeader."Shipping No." := "Shipping No.";
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeServCrMemoHeaderInsert>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareCrMemoHeader>
    Code lines:
    ...
      END;
      RecordLinkManagement.CopyLinks(ServHeader,ServCrMemoHeader);
      ServCrMemoHeader."Source Code" := SrcCode;
      ServCrMemoHeader."User ID" := USERID;
      ServCrMemoHeader."No. Printed" := 0;
      OnBeforeServCrMemoHeaderInsert(ServCrMemoHeader,ServHeader); <=====================
      ServCrMemoHeader.INSERT;
      OnAfterServCrMemoHeaderInsert(ServCrMemoHeader,ServHeader);
    
      CLEAR(ServLogMgt);
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeServCrMemoLineInsert>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareCrMemoLine>
    Code lines:
    ...
      ServCrMemoLine."Document No." := ServCrMemoHeader."No.";
      ServCrMemoLine.Quantity := "Qty. to Invoice";
      ServCrMemoLine."Quantity (Base)" := "Qty. to Invoice (Base)";
      CALCFIELDS("Service Item Line Description");
      ServCrMemoLine."Service Item Line Description" := "Service Item Line Description";
      OnBeforeServCrMemoLineInsert(ServCrMemoLine,passedServLine); <=====================
      ServCrMemoLine.INSERT;
      OnAfterServCrMemoLineInsert(ServCrMemoLine,passedServLine);
    END;
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeServInvHeaderInsert>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareInvoiceHeader>
    Code lines:
    ...
      IF ServMgtSetup."Copy Comments Order to Invoice" THEN
        RecordLinkManagement.CopyLinks(ServHeader,ServInvHeader);
      ServInvHeader."Source Code" := SrcCode;
      ServInvHeader."User ID" := USERID;
      ServInvHeader."No. Printed" := 0;
      OnBeforeServInvHeaderInsert(ServInvHeader,ServHeader); <=====================
      ServInvHeader.INSERT;
      OnAfterServInvHeaderInsert(ServInvHeader,ServHeader);
    
      CLEAR(ServLogMgt);
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeServInvLineInsert>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareInvoiceLine>
    Code lines:
    ...
      ServInvLine."Document No." := ServInvHeader."No.";
      ServInvLine.Quantity := "Qty. to Invoice";
      ServInvLine."Quantity (Base)" := "Qty. to Invoice (Base)";
      CALCFIELDS("Service Item Line Description");
      ServInvLine."Service Item Line Description" := "Service Item Line Description";
      OnBeforeServInvLineInsert(ServInvLine,passedServLine); <=====================
      ServInvLine.INSERT;
      OnAfterServInvLineInsert(ServInvLine,passedServLine);
    END;
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeServShptHeaderInsert>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareShipmentHeader>
    Code lines:
    ...
        IF ServMgtSetup."Copy Comments Order to Shpt." THEN
          RecordLinkManagement.CopyLinks(ServHeader,ServShptHeader);
        ServShptHeader."Source Code" := SrcCode;
        ServShptHeader."User ID" := USERID;
        ServShptHeader."No. Printed" := 0;
        OnBeforeServShptHeaderInsert(ServShptHeader,ServHeader); <=====================
        ServShptHeader.INSERT;
        OnAfterServShptHeaderInsert(ServShptHeader,ServHeader);
    
        CLEAR(ServLogMgt);
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeServShptItemLineInsert>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareShipmentHeader>
    Code lines:
    ...
        IF ServItemLine.FIND('-') THEN
          REPEAT
            // create SSIL
            ServShptItemLine.TRANSFERFIELDS(ServItemLine);
            ServShptItemLine."No." := ServShptHeader."No.";
            OnBeforeServShptItemLineInsert(ServShptItemLine,ServItemLine); <=====================
            ServShptItemLine.INSERT;
            OnAfterServShptItemLineInsert(ServShptItemLine,ServItemLine);
    
            // set mgt. date and service dates
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeServShptLineInsert>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareShipmentLine>
    Code lines:
    ...
            ServITRMgt.InsertShptEntryRelation(ServShptLine,
              TempHandlingSpecification,TempTrackingSpecificationInv,ItemLedgShptEntryNo);
    
        CALCFIELDS("Service Item Line Description");
        ServShptLine."Service Item Line Description" := "Service Item Line Description";
        OnBeforeServShptLineInsert(ServShptLine,ServLine); <=====================
        ServShptLine.INSERT;
        OnAfterServShptLineInsert(ServShptLine,ServLine);
        CheckCertificateOfSupplyStatus(ServShptHeader,ServShptLine);
      END;
    ...
Codeunit<Sales-Calc. Discount>.PROCEDURE<OnAfterCalcSalesDiscount>
  Raised in: Codeunit<Sales-Calc. Discount>.PROCEDURE<CalculateInvoiceDiscount>
    Code lines:
    ...
        UpdatePrepmtLineAmount(SalesHeader);
      END;
    END;
    
    SalesCalcDiscountByType.ResetRecalculateInvoiceDisc(SalesHeader);
    OnAfterCalcSalesDiscount(SalesHeader); <=====================
Codeunit<Sales-Calc. Discount>.PROCEDURE<OnBeforeCalcSalesDiscount>
  Raised in: Codeunit<Sales-Calc. Discount>.PROCEDURE<CalculateInvoiceDiscount>
    Code lines:
    SalesSetup.GET;
    IF UpdateHeader THEN
      SalesHeader.FIND; // To ensure we have the latest - otherwise update fails.
    OnBeforeCalcSalesDiscount(SalesHeader); <=====================
    
    WITH SalesLine DO BEGIN
      LOCKTABLE;
      SalesHeader.TESTFIELD("Customer Posting Group");
      CustPostingGr.GET(SalesHeader."Customer Posting Group");
    
    ...
Codeunit<Hybrid Deployment>.PROCEDURE<OnBeforeEnableReplication>
  Raised in: Codeunit<Hybrid Deployment>.PROCEDURE<EnableReplication>
    Code lines:
    OnBeforeEnableReplication(SourceProduct,NotificationUrl,SubscriptionId,ClientState); <=====================
    
    IF NOT TryEnableReplication(
         InstanceId,OnPremConnectionString,DatabaseConfiguration,IntegrationRuntimeName,NotificationUrl,ClientState,SubscriptionId)
    THEN
      ERROR(FailedEnableReplicationErr);
    
    IF RetryGetStatus(InstanceId,Output) = FailedTxt THEN
      ERROR(FailedEnableReplicationErr);
    
    ...
Codeunit<Hybrid Deployment>.PROCEDURE<OnCreateIntegrationRuntime>
  Raised in: Codeunit<Hybrid Deployment>.PROCEDURE<TryCreateIntegrationRuntime>
    Code lines:
    OnCreateIntegrationRuntime(InstanceId); <=====================
Codeunit<Hybrid Deployment>.PROCEDURE<OnDisableReplication>
  Raised in: Codeunit<Hybrid Deployment>.PROCEDURE<TryDisableReplication>
    Code lines:
    OnDisableReplication(InstanceId); <=====================
Codeunit<Hybrid Deployment>.PROCEDURE<OnEnableReplication>
  Raised in: Codeunit<Hybrid Deployment>.PROCEDURE<TryEnableReplication>
    Code lines:
    OnEnableReplication( <=====================
      OnPremConnectionString,DatabaseConfiguration,IntegrationRuntimeName,NotificationUrl,ClientState,SubscriptionId,InstanceId);
Codeunit<Hybrid Deployment>.PROCEDURE<OnGetIntegrationRuntimeKeys>
  Raised in: Codeunit<Hybrid Deployment>.PROCEDURE<TryGetIntegrationRuntimeKeys>
    Code lines:
    OnGetIntegrationRuntimeKeys(InstanceId); <=====================
Codeunit<Hybrid Deployment>.PROCEDURE<OnGetReplicationRunErrors>
  Raised in: Codeunit<Hybrid Deployment>.PROCEDURE<TryGetReplicationRunErrors>
    Code lines:
    OnGetReplicationRunErrors(InstanceId,RunId); <=====================
Codeunit<Hybrid Deployment>.PROCEDURE<OnGetRequestStatus>
  Raised in: Codeunit<Hybrid Deployment>.PROCEDURE<GetRequestStatus>
    Code lines:
    OnGetRequestStatus(RequestTrackingId,JsonOutput,Status); <=====================
Codeunit<Hybrid Deployment>.PROCEDURE<OnInitialize>
  Raised in: Codeunit<Hybrid Deployment>.PROCEDURE<Initialize>
    Code lines:
    SourceProduct := SourceProductId;
    OnInitialize(SourceProductId); <=====================
Codeunit<Hybrid Deployment>.PROCEDURE<OnRegenerateIntegrationRuntimeKeys>
  Raised in: Codeunit<Hybrid Deployment>.PROCEDURE<TryRegenerateIntegrationRuntimeKeys>
    Code lines:
    OnRegenerateIntegrationRuntimeKeys(InstanceId); <=====================
Codeunit<Hybrid Deployment>.PROCEDURE<OnRunReplication>
  Raised in: Codeunit<Hybrid Deployment>.PROCEDURE<TryRunReplication>
    Code lines:
    OnRunReplication(InstanceId); <=====================
Codeunit<Hybrid Deployment>.PROCEDURE<OnSetReplicationSchedule>
  Raised in: Codeunit<Hybrid Deployment>.PROCEDURE<TrySetReplicationSchedule>
    Code lines:
    OnSetReplicationSchedule(ReplicationFrequency,DaysToRun,TimeToRun,Activate,InstanceId); <=====================
Codeunit<Data Migration Facade>.PROCEDURE<OnApplySelectedData>
  Raised in: Codeunit<Data Migration Facade>.PROCEDURE<OnApplySelectedDataWizardSubscriber>
    Code lines:
    OnApplySelectedData(Sender,DataMigrationEntity,Handled); <=====================
Codeunit<Data Migration Facade>.PROCEDURE<OnBatchEditFromErrorView>
  Raised in: Page<Data Migration Error>.Action<BulkFixErrors>.<OnAction>
    Code lines:
    DataMigrationFacade.OnBatchEditFromErrorView("Migration Type","Destination Table ID"); <=====================
    
    IF NOT CONFIRM(STRSUBSTNO(MigrateEntitiesAgainQst,DataMigrationOverview.CAPTION),TRUE) THEN
      EXIT;
    
    StartMigration(Rec);
Codeunit<Data Migration Facade>.PROCEDURE<OnDataImport>
  Raised in: Codeunit<Data Migration Facade>.PROCEDURE<OnDataImportWizardSubscriber>
    Code lines:
    OnDataImport(Sender,Handled); <=====================
Codeunit<Data Migration Facade>.PROCEDURE<OnEnableTogglingDataMigrationOverviewPage>
  Raised in: Codeunit<Data Migration Facade>.PROCEDURE<OnEnableTogglingDataMigrationOverviewPageWizardSubscriber>
    Code lines:
    OnEnableTogglingDataMigrationOverviewPage(Sender,EnableTogglingOverviewPage); <=====================
Codeunit<Data Migration Facade>.PROCEDURE<OnFillStagingTables>
  Raised in: Codeunit<Data Migration Mgt.>.<OnRun>
    Code lines:
    ...
    
    OnBeforeMigrationStarted(DataMigrationStatus,Retry);
    
    IF NOT Retry THEN BEGIN
      DataMigrationStatus.SETRANGE(Status,DataMigrationStatus.Status::Pending);
      DataMigrationFacade.OnFillStagingTables; <=====================
      // Close the transaction here otherwise the CODEUNIT.RUN cannot be invoked
      COMMIT;
    END ELSE
      DataMigrationStatus.SETRANGE(Status,DataMigrationStatus.Status::"Completed with Errors");
    ...
Codeunit<Data Migration Facade>.PROCEDURE<OnFindBatchForAccountTransactions>
  Raised in: Page<Data Migration Overview>.PROCEDURE<GoToGeneralJournalForAccounts>
    Code lines:
    DataMigrationFacade.OnFindBatchForAccountTransactions(Rec,GenJournalBatchName); <=====================
    IF GenJournalBatchName <> '' THEN BEGIN
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatchName);
      IF GenJournalLine.FINDFIRST THEN BEGIN
        GenJournalLine.SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
        GenJournalLine.SETRANGE("Account Type",GenJournalLine."Account Type"::"G/L Account");
        PAGE.RUN(PAGE::"General Journal",GenJournalLine);
        EXIT;
      END;
    END;
  Raised in: Codeunit<Data Migration Mgt.>.PROCEDURE<DestTableHasAnyTransactions>
    Code lines:
    ...
          ItemJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
          ItemJournalLine.SETFILTER("Item No.",'<>%1','');
          EXIT(ItemJournalLine.FINDFIRST);
        END;
      ELSE BEGIN
        DataMigrationFacade.OnFindBatchForAccountTransactions(DataMigrationStatus,JournalBatchName); <=====================
        IF JournalBatchName = '' THEN
          EXIT(FALSE);
        GenJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
        GenJournalLine.SETRANGE("Account Type",GenJournalLine."Account Type"::"G/L Account");
    ...
Codeunit<Data Migration Facade>.PROCEDURE<OnFindBatchForCustomerTransactions>
  Raised in: Page<Data Migration Overview>.PROCEDURE<GoToGeneralJournalForCustomers>
    Code lines:
    DataMigrationFacade.OnFindBatchForCustomerTransactions("Migration Type",GenJournalBatchName); <=====================
    IF GenJournalBatchName <> '' THEN BEGIN
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatchName);
      IF GenJournalLine.FINDFIRST THEN BEGIN
        GenJournalLine.SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
        GenJournalLine.SETRANGE("Account Type",GenJournalLine."Account Type"::Customer);
        PAGE.RUN(PAGE::"General Journal",GenJournalLine);
        EXIT;
      END;
    END;
  Raised in: Codeunit<Data Migration Mgt.>.PROCEDURE<DestTableHasAnyTransactions>
    Code lines:
    ...
          GenJournalLine.SETFILTER("Account No.",'<>%1','');
          EXIT(GenJournalLine.FINDFIRST);
        END;
      DATABASE::Customer:
        BEGIN
          DataMigrationFacade.OnFindBatchForCustomerTransactions(DataMigrationStatus."Migration Type",JournalBatchName); <=====================
          IF JournalBatchName = '' THEN
            EXIT(FALSE);
          GenJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
          GenJournalLine.SETRANGE("Account Type",GenJournalLine."Account Type"::Customer);
    ...
Codeunit<Data Migration Facade>.PROCEDURE<OnFindBatchForItemTransactions>
  Raised in: Page<Data Migration Overview>.PROCEDURE<GoToItemJournal>
    Code lines:
    DataMigrationFacade.OnFindBatchForItemTransactions("Migration Type",ItemJournalBatchName); <=====================
    IF ItemJournalBatchName <> '' THEN BEGIN
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalBatchName);
      IF ItemJournalLine.FINDFIRST THEN BEGIN
        ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalLine."Journal Template Name");
        PAGE.RUN(PAGE::"Item Journal",ItemJournalLine);
        EXIT;
      END;
    END;
    PAGE.RUN(PAGE::"Item Journal");
  Raised in: Codeunit<Data Migration Mgt.>.PROCEDURE<DestTableHasAnyTransactions>
    Code lines:
    ...
          GenJournalLine.SETFILTER("Account No.",'<>%1','');
          EXIT(GenJournalLine.FINDFIRST);
        END;
      DATABASE::Item:
        BEGIN
          DataMigrationFacade.OnFindBatchForItemTransactions(DataMigrationStatus."Migration Type",JournalBatchName); <=====================
          IF JournalBatchName = '' THEN
            EXIT(FALSE);
          ItemJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
          ItemJournalLine.SETFILTER("Item No.",'<>%1','');
    ...
Codeunit<Data Migration Facade>.PROCEDURE<OnFindBatchForVendorTransactions>
  Raised in: Page<Data Migration Overview>.PROCEDURE<GoToGeneralJournalForVendors>
    Code lines:
    DataMigrationFacade.OnFindBatchForVendorTransactions("Migration Type",GenJournalBatchName); <=====================
    IF GenJournalBatchName <> '' THEN BEGIN
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatchName);
      IF GenJournalLine.FINDFIRST THEN BEGIN
        GenJournalLine.SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
        GenJournalLine.SETRANGE("Account Type",GenJournalLine."Account Type"::Vendor);
        PAGE.RUN(PAGE::"General Journal",GenJournalLine);
        EXIT;
      END;
    END;
  Raised in: Codeunit<Data Migration Mgt.>.PROCEDURE<DestTableHasAnyTransactions>
    Code lines:
    CASE DataMigrationStatus."Destination Table ID" OF
      DATABASE::Vendor:
        BEGIN
          DataMigrationFacade.OnFindBatchForVendorTransactions(DataMigrationStatus."Migration Type",JournalBatchName); <=====================
          IF JournalBatchName = '' THEN
            EXIT(FALSE);
          GenJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
          GenJournalLine.SETRANGE("Account Type",GenJournalLine."Account Type"::Vendor);
          GenJournalLine.SETFILTER("Account No.",'<>%1','');
          EXIT(GenJournalLine.FINDFIRST);
    ...
Codeunit<Data Migration Facade>.PROCEDURE<OnGetInstructions>
  Raised in: Codeunit<Data Migration Facade>.PROCEDURE<OnRegisterGetInstructionsWizardSubscriber>
    Code lines:
    OnGetInstructions(Sender,Instructions,Handled); <=====================
Codeunit<Data Migration Facade>.PROCEDURE<OnGetMigrationHelpTopicUrl>
  Raised in: Page<Data Migration About>.Control<LearnMore>.<OnDrillDown>
    Code lines:
    DataMigrationStatus.SETFILTER(Status,'%1|%2',
      DataMigrationStatus.Status::"In Progress",
      DataMigrationStatus.Status::Pending);
    IF DataMigrationStatus.FINDFIRST THEN
      DataMigrationFacade.OnGetMigrationHelpTopicUrl(DataMigrationStatus."Migration Type",Url); <=====================
    IF Url = '' THEN
      HYPERLINK(GeneralHelpTopicUrlTxt)
    ELSE
      HYPERLINK(Url);
Codeunit<Data Migration Facade>.PROCEDURE<OnInitDataMigrationError>
  Raised in: Page<Data Migration Error>.<OnAfterGetCurrRecord>
    Code lines:
    StagingTableRecId := "Source Staging Table Record ID";
    StagingTableRecIdSpecified := StagingTableRecId <> DummyRecordId;
    
    DataMigrationFacade.OnInitDataMigrationError("Migration Type",BulkFixErrorsButtonEnabled); <=====================
Codeunit<Data Migration Facade>.PROCEDURE<OnMigrationCompleted>
  Raised in: Codeunit<Data Migration Mgt.>.PROCEDURE<CheckIfMigrationIsCompleted>
    Code lines:
    ...
      '%1|%2|%3',
      DataMigrationStatus.Status::"In Progress",
      DataMigrationStatus.Status::Pending,
      DataMigrationStatus.Status::"Completed with Errors");
    IF DataMigrationStatus.ISEMPTY THEN
      DataMigrationFacade.OnMigrationCompleted(CurrentDataMigrationStatus); <=====================
Codeunit<Data Migration Facade>.PROCEDURE<OnRegisterDataMigrator>
  Raised in: Codeunit<Data Migration Facade>.PROCEDURE<OnRegisterDataMigratorWizardSubscriber>
    Code lines:
    OnRegisterDataMigrator(Sender); <=====================
Codeunit<Data Migration Facade>.PROCEDURE<OnSelectDataToApply>
  Raised in: Codeunit<Data Migration Facade>.PROCEDURE<OnSelectDataToApplyWizardSubscriber>
    Code lines:
    OnSelectDataToApply(Sender,DataMigrationEntity,Handled); <=====================
Codeunit<Data Migration Facade>.PROCEDURE<OnSelectRowFromDashboard>
  Raised in: Page<Data Migration Overview>.<Control>.<OnDrillDown>
    Code lines:
    DataMigrationFacade.OnSelectRowFromDashboard(Rec); <=====================
Codeunit<Data Migration Facade>.PROCEDURE<OnShowThatsItMessage>
  Raised in: Codeunit<Data Migration Facade>.PROCEDURE<OnShowThatsItMessageWizardSubscriber>
    Code lines:
    OnShowThatsItMessage(Sender,Message); <=====================
Codeunit<GL Acc. Data Migration Facade>.PROCEDURE<OnCreateOpeningBalanceTrx>
  Raised in: Codeunit<GL Acc. Data Migration Facade>.<OnRun>
    Code lines:
    FINDSET;
    REPEAT
      OnMigrateGlAccount("Staging Table RecId To Process");
      OnCreateOpeningBalanceTrx("Staging Table RecId To Process"); <=====================
      OnMigratePostingGroups("Staging Table RecId To Process");
      OnMigrateAccountTransactions("Staging Table RecId To Process");
      GLAccountIsSet := FALSE;
    UNTIL NEXT = 0;
Codeunit<GL Acc. Data Migration Facade>.PROCEDURE<OnMigrateAccountTransactions>
  Raised in: Codeunit<GL Acc. Data Migration Facade>.<OnRun>
    Code lines:
    FINDSET;
    REPEAT
      OnMigrateGlAccount("Staging Table RecId To Process");
      OnCreateOpeningBalanceTrx("Staging Table RecId To Process");
      OnMigratePostingGroups("Staging Table RecId To Process");
      OnMigrateAccountTransactions("Staging Table RecId To Process"); <=====================
      GLAccountIsSet := FALSE;
    UNTIL NEXT = 0;
Codeunit<GL Acc. Data Migration Facade>.PROCEDURE<OnMigrateGlAccount>
  Raised in: Codeunit<GL Acc. Data Migration Facade>.<OnRun>
    Code lines:
    FINDSET;
    REPEAT
      OnMigrateGlAccount("Staging Table RecId To Process"); <=====================
      OnCreateOpeningBalanceTrx("Staging Table RecId To Process");
      OnMigratePostingGroups("Staging Table RecId To Process");
      OnMigrateAccountTransactions("Staging Table RecId To Process");
      GLAccountIsSet := FALSE;
    UNTIL NEXT = 0;
Codeunit<GL Acc. Data Migration Facade>.PROCEDURE<OnMigratePostingGroups>
  Raised in: Codeunit<GL Acc. Data Migration Facade>.<OnRun>
    Code lines:
    FINDSET;
    REPEAT
      OnMigrateGlAccount("Staging Table RecId To Process");
      OnCreateOpeningBalanceTrx("Staging Table RecId To Process");
      OnMigratePostingGroups("Staging Table RecId To Process"); <=====================
      OnMigrateAccountTransactions("Staging Table RecId To Process");
      GLAccountIsSet := FALSE;
    UNTIL NEXT = 0;
Codeunit<Vendor Data Migration Facade>.PROCEDURE<OnMigrateVendor>
  Raised in: Codeunit<Vendor Data Migration Facade>.<OnRun>
    Code lines:
    FINDSET;
    ChartOfAccountsMigrated := DataMigrationStatusFacade.HasMigratedChartOfAccounts(Rec);
    REPEAT
      OnMigrateVendor("Staging Table RecId To Process"); <=====================
      OnMigrateVendorDimensions("Staging Table RecId To Process"); <=====================
    
      // migrate transactions for this vendor
      OnMigrateVendorPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated); <=====================
      OnMigrateVendorTransactions("Staging Table RecId To Process",ChartOfAccountsMigrated); <=====================
      GenJournalLineIsSet := FALSE;
    ...
Codeunit<Vendor Data Migration Facade>.PROCEDURE<OnMigrateVendorDimensions>
  Raised in: Codeunit<Vendor Data Migration Facade>.<OnRun>
    Code lines:
    FINDSET;
    ChartOfAccountsMigrated := DataMigrationStatusFacade.HasMigratedChartOfAccounts(Rec);
    REPEAT
      OnMigrateVendor("Staging Table RecId To Process");
      OnMigrateVendorDimensions("Staging Table RecId To Process"); <=====================
    
      // migrate transactions for this vendor
      OnMigrateVendorPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated);
      OnMigrateVendorTransactions("Staging Table RecId To Process",ChartOfAccountsMigrated);
      GenJournalLineIsSet := FALSE;
    ...
Codeunit<Vendor Data Migration Facade>.PROCEDURE<OnMigrateVendorPostingGroups>
  Raised in: Codeunit<Vendor Data Migration Facade>.<OnRun>
    Code lines:
    ...
    REPEAT
      OnMigrateVendor("Staging Table RecId To Process");
      OnMigrateVendorDimensions("Staging Table RecId To Process");
    
      // migrate transactions for this vendor
      OnMigrateVendorPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated); <=====================
      OnMigrateVendorTransactions("Staging Table RecId To Process",ChartOfAccountsMigrated);
      GenJournalLineIsSet := FALSE;
      VendorIsSet := FALSE;
    UNTIL NEXT = 0;
Codeunit<Vendor Data Migration Facade>.PROCEDURE<OnMigrateVendorTransactions>
  Raised in: Codeunit<Vendor Data Migration Facade>.<OnRun>
    Code lines:
    ...
      OnMigrateVendor("Staging Table RecId To Process");
      OnMigrateVendorDimensions("Staging Table RecId To Process");
    
      // migrate transactions for this vendor
      OnMigrateVendorPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated);
      OnMigrateVendorTransactions("Staging Table RecId To Process",ChartOfAccountsMigrated); <=====================
      GenJournalLineIsSet := FALSE;
      VendorIsSet := FALSE;
    UNTIL NEXT = 0;
Codeunit<Customer Data Migration Facade>.PROCEDURE<OnMigrateCustomer>
  Raised in: Codeunit<Customer Data Migration Facade>.<OnRun>
    Code lines:
    FINDSET;
    ChartOfAccountsMigrated := DataMigrationStatusFacade.HasMigratedChartOfAccounts(Rec);
    REPEAT
      OnMigrateCustomer("Staging Table RecId To Process"); <=====================
      OnMigrateCustomerDimensions("Staging Table RecId To Process"); <=====================
    
      // migrate transactions for this customer
      OnMigrateCustomerPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated); <=====================
      OnMigrateCustomerTransactions("Staging Table RecId To Process",ChartOfAccountsMigrated); <=====================
      GenJournalLineIsSet := FALSE;
    ...
Codeunit<Customer Data Migration Facade>.PROCEDURE<OnMigrateCustomerDimensions>
  Raised in: Codeunit<Customer Data Migration Facade>.<OnRun>
    Code lines:
    FINDSET;
    ChartOfAccountsMigrated := DataMigrationStatusFacade.HasMigratedChartOfAccounts(Rec);
    REPEAT
      OnMigrateCustomer("Staging Table RecId To Process");
      OnMigrateCustomerDimensions("Staging Table RecId To Process"); <=====================
    
      // migrate transactions for this customer
      OnMigrateCustomerPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated);
      OnMigrateCustomerTransactions("Staging Table RecId To Process",ChartOfAccountsMigrated);
      GenJournalLineIsSet := FALSE;
    ...
Codeunit<Customer Data Migration Facade>.PROCEDURE<OnMigrateCustomerPostingGroups>
  Raised in: Codeunit<Customer Data Migration Facade>.<OnRun>
    Code lines:
    ...
    REPEAT
      OnMigrateCustomer("Staging Table RecId To Process");
      OnMigrateCustomerDimensions("Staging Table RecId To Process");
    
      // migrate transactions for this customer
      OnMigrateCustomerPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated); <=====================
      OnMigrateCustomerTransactions("Staging Table RecId To Process",ChartOfAccountsMigrated);
      GenJournalLineIsSet := FALSE;
      CustomerIsSet := FALSE;
    UNTIL NEXT = 0;
Codeunit<Customer Data Migration Facade>.PROCEDURE<OnMigrateCustomerTransactions>
  Raised in: Codeunit<Customer Data Migration Facade>.<OnRun>
    Code lines:
    ...
      OnMigrateCustomer("Staging Table RecId To Process");
      OnMigrateCustomerDimensions("Staging Table RecId To Process");
    
      // migrate transactions for this customer
      OnMigrateCustomerPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated);
      OnMigrateCustomerTransactions("Staging Table RecId To Process",ChartOfAccountsMigrated); <=====================
      GenJournalLineIsSet := FALSE;
      CustomerIsSet := FALSE;
    UNTIL NEXT = 0;
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateCostingMethod>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    FINDSET;
    ChartOfAccountsMigrated := DataMigrationStatusFacade.HasMigratedChartOfAccounts(Rec);
    REPEAT
      OnMigrateItem("Staging Table RecId To Process");
      OnMigrateItemTrackingCode("Staging Table RecId To Process");
      OnMigrateCostingMethod("Staging Table RecId To Process"); // needs to be set after item tracking code because of onvalidate trigger check <=====================
      OnMigrateItemUnitOfMeasure("Staging Table RecId To Process");
      OnMigrateItemDiscountGroup("Staging Table RecId To Process");
      OnMigrateItemSalesLineDiscount("Staging Table RecId To Process");
      OnMigrateItemPrice("Staging Table RecId To Process");
    ...
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateInventoryTransactions>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    ...
      OnMigrateItemDimensions("Staging Table RecId To Process");
    
      // migrate transactions for this item as long as it is an inventory item
      IF GlobalItem.Type = GlobalItem.Type::Inventory THEN BEGIN
        OnMigrateItemPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated);
        OnMigrateInventoryTransactions("Staging Table RecId To Process",ChartOfAccountsMigrated); <=====================
        ItemJournalLineIsSet := FALSE;
      END;
      ItemIsSet := FALSE;
    UNTIL NEXT = 0;
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItem>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    FINDSET;
    ChartOfAccountsMigrated := DataMigrationStatusFacade.HasMigratedChartOfAccounts(Rec);
    REPEAT
      OnMigrateItem("Staging Table RecId To Process"); <=====================
      OnMigrateItemTrackingCode("Staging Table RecId To Process"); <=====================
      OnMigrateCostingMethod("Staging Table RecId To Process"); // needs to be set after item tracking code because of onvalidate trigger check
      OnMigrateItemUnitOfMeasure("Staging Table RecId To Process"); <=====================
      OnMigrateItemDiscountGroup("Staging Table RecId To Process"); <=====================
      OnMigrateItemSalesLineDiscount("Staging Table RecId To Process"); <=====================
      OnMigrateItemPrice("Staging Table RecId To Process"); <=====================
    ...
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemDimensions>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    ...
      OnMigrateItemUnitOfMeasure("Staging Table RecId To Process");
      OnMigrateItemDiscountGroup("Staging Table RecId To Process");
      OnMigrateItemSalesLineDiscount("Staging Table RecId To Process");
      OnMigrateItemPrice("Staging Table RecId To Process");
      OnMigrateItemTariffNo("Staging Table RecId To Process");
      OnMigrateItemDimensions("Staging Table RecId To Process"); <=====================
    
      // migrate transactions for this item as long as it is an inventory item
      IF GlobalItem.Type = GlobalItem.Type::Inventory THEN BEGIN
        OnMigrateItemPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated);
    ...
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemDiscountGroup>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    ...
    REPEAT
      OnMigrateItem("Staging Table RecId To Process");
      OnMigrateItemTrackingCode("Staging Table RecId To Process");
      OnMigrateCostingMethod("Staging Table RecId To Process"); // needs to be set after item tracking code because of onvalidate trigger check
      OnMigrateItemUnitOfMeasure("Staging Table RecId To Process");
      OnMigrateItemDiscountGroup("Staging Table RecId To Process"); <=====================
      OnMigrateItemSalesLineDiscount("Staging Table RecId To Process");
      OnMigrateItemPrice("Staging Table RecId To Process");
      OnMigrateItemTariffNo("Staging Table RecId To Process");
      OnMigrateItemDimensions("Staging Table RecId To Process");
    ...
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemPostingGroups>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    ...
      OnMigrateItemTariffNo("Staging Table RecId To Process");
      OnMigrateItemDimensions("Staging Table RecId To Process");
    
      // migrate transactions for this item as long as it is an inventory item
      IF GlobalItem.Type = GlobalItem.Type::Inventory THEN BEGIN
        OnMigrateItemPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated); <=====================
        OnMigrateInventoryTransactions("Staging Table RecId To Process",ChartOfAccountsMigrated);
        ItemJournalLineIsSet := FALSE;
      END;
      ItemIsSet := FALSE;
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemPrice>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    ...
      OnMigrateItemTrackingCode("Staging Table RecId To Process");
      OnMigrateCostingMethod("Staging Table RecId To Process"); // needs to be set after item tracking code because of onvalidate trigger check
      OnMigrateItemUnitOfMeasure("Staging Table RecId To Process");
      OnMigrateItemDiscountGroup("Staging Table RecId To Process");
      OnMigrateItemSalesLineDiscount("Staging Table RecId To Process");
      OnMigrateItemPrice("Staging Table RecId To Process"); <=====================
      OnMigrateItemTariffNo("Staging Table RecId To Process");
      OnMigrateItemDimensions("Staging Table RecId To Process");
    
      // migrate transactions for this item as long as it is an inventory item
    ...
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemSalesLineDiscount>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    ...
      OnMigrateItem("Staging Table RecId To Process");
      OnMigrateItemTrackingCode("Staging Table RecId To Process");
      OnMigrateCostingMethod("Staging Table RecId To Process"); // needs to be set after item tracking code because of onvalidate trigger check
      OnMigrateItemUnitOfMeasure("Staging Table RecId To Process");
      OnMigrateItemDiscountGroup("Staging Table RecId To Process");
      OnMigrateItemSalesLineDiscount("Staging Table RecId To Process"); <=====================
      OnMigrateItemPrice("Staging Table RecId To Process");
      OnMigrateItemTariffNo("Staging Table RecId To Process");
      OnMigrateItemDimensions("Staging Table RecId To Process");
    
    ...
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemTariffNo>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    ...
      OnMigrateCostingMethod("Staging Table RecId To Process"); // needs to be set after item tracking code because of onvalidate trigger check
      OnMigrateItemUnitOfMeasure("Staging Table RecId To Process");
      OnMigrateItemDiscountGroup("Staging Table RecId To Process");
      OnMigrateItemSalesLineDiscount("Staging Table RecId To Process");
      OnMigrateItemPrice("Staging Table RecId To Process");
      OnMigrateItemTariffNo("Staging Table RecId To Process"); <=====================
      OnMigrateItemDimensions("Staging Table RecId To Process");
    
      // migrate transactions for this item as long as it is an inventory item
      IF GlobalItem.Type = GlobalItem.Type::Inventory THEN BEGIN
    ...
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemTrackingCode>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    FINDSET;
    ChartOfAccountsMigrated := DataMigrationStatusFacade.HasMigratedChartOfAccounts(Rec);
    REPEAT
      OnMigrateItem("Staging Table RecId To Process");
      OnMigrateItemTrackingCode("Staging Table RecId To Process"); <=====================
      OnMigrateCostingMethod("Staging Table RecId To Process"); // needs to be set after item tracking code because of onvalidate trigger check
      OnMigrateItemUnitOfMeasure("Staging Table RecId To Process");
      OnMigrateItemDiscountGroup("Staging Table RecId To Process");
      OnMigrateItemSalesLineDiscount("Staging Table RecId To Process");
      OnMigrateItemPrice("Staging Table RecId To Process");
    ...
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemUnitOfMeasure>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    ...
    ChartOfAccountsMigrated := DataMigrationStatusFacade.HasMigratedChartOfAccounts(Rec);
    REPEAT
      OnMigrateItem("Staging Table RecId To Process");
      OnMigrateItemTrackingCode("Staging Table RecId To Process");
      OnMigrateCostingMethod("Staging Table RecId To Process"); // needs to be set after item tracking code because of onvalidate trigger check
      OnMigrateItemUnitOfMeasure("Staging Table RecId To Process"); <=====================
      OnMigrateItemDiscountGroup("Staging Table RecId To Process");
      OnMigrateItemSalesLineDiscount("Staging Table RecId To Process");
      OnMigrateItemPrice("Staging Table RecId To Process");
      OnMigrateItemTariffNo("Staging Table RecId To Process");
    ...
Codeunit<Sales-Explode BOM>.PROCEDURE<OnBeforeConfirmExplosion>
  Raised in: Codeunit<Sales-Explode BOM>.<OnRun>
    Code lines:
    ...
      TESTFIELD("Job Contract Entry No.",0);
    END;
    SalesHeader.GET("Document Type","Document No.");
    SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);
    
    OnBeforeConfirmExplosion(Rec,Selection,HideDialog); <=====================
    IF NOT HideDialog THEN BEGIN
      FromBOMComp.SETRANGE("Parent Item No.","No.");
      NoOfBOMComp := FromBOMComp.COUNT;
      IF NoOfBOMComp = 0 THEN
    ...
Codeunit<Sales-Explode BOM>.PROCEDURE<OnBeforeOnRun>
  Raised in: Codeunit<Sales-Explode BOM>.<OnRun>
    Code lines:
    OnBeforeOnRun(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    TESTFIELD(Type,Type::Item);
    TESTFIELD("Quantity Shipped",0);
    TESTFIELD("Return Qty. Received",0);
    
    CALCFIELDS("Reserved Qty. (Base)");
    TESTFIELD("Reserved Qty. (Base)",0);
    ...
Codeunit<Sales-Explode BOM>.PROCEDURE<OnInsertOfExplodedBOMLineToSalesLine>
  Raised in: Codeunit<Sales-Explode BOM>.PROCEDURE<ExplodeBOMCompLines>
    Code lines:
    ...
          IF NOT ItemTranslation.GET(FromBOMComp."No.",FromBOMComp."Variant Code",SalesHeader."Language Code") THEN
            ToSalesLine.Description := FromBOMComp.Description;
    
        ToSalesLine."BOM Item No." := BOMItemNo;
    
        OnInsertOfExplodedBOMLineToSalesLine(ToSalesLine,SalesLine,FromBOMComp); <=====================
    
        ToSalesLine.INSERT;
    
        ToSalesLine.VALIDATE("Qty. to Assemble to Order");
    ...
Codeunit<Power BI Service Mgt.>.PROCEDURE<OnGetReports>
  Raised in: Codeunit<Power BI Service Mgt.>.PROCEDURE<GetReports>
    Code lines:
    ...
    // Reports are marked as Enabled if they've previously been selected for the given context (page ID).
    IF NOT TempPowerBIReportBuffer.ISEMPTY THEN
      EXIT;
    
    IF NOT CanHandleServiceCalls THEN BEGIN
      OnGetReports(TempPowerBIReportBuffer,ExceptionMessage,ExceptionDetails,Context); <=====================
      EXIT;
    END;
    
    IF IsPPE THEN
    ...
Codeunit<Power BI Service Mgt.>.PROCEDURE<OnRetryUploads>
  Raised in: Codeunit<Power BI Service Mgt.>.PROCEDURE<RetryPartialUploadBatch>
    Code lines:
    ...
    
        ApiResponseList := PbiServiceWrapper.GetImportedReports(ImportIdList,
            COMPANYNAME,FinancialsAccessToken,GetServiceRetries);
      END ELSE BEGIN
        ApiResponseList := ApiResponseList.ImportedReportResponseList();
        OnRetryUploads(ImportIdList,ApiResponseList); <=====================
      END;
      FOREACH ApiResponse IN ApiResponseList DO
        WasSuccessful := WasSuccessful AND HandleUploadResponse(ApiResponse.ImportId,NullGuidTxt,ApiResponse.ImportedReport,
            ApiResponse.ShouldRetry,ApiResponse.RetryAfter);
    ...
Codeunit<Power BI Service Mgt.>.PROCEDURE<OnUploadReports>
  Raised in: Codeunit<Power BI Service Mgt.>.PROCEDURE<UploadDefaultReportBatch>
    Code lines:
    ...
    
        ApiResponseList := PbiServiceWrapper.ImportReports(ApiRequestList,
            COMPANYNAME,FinancialsAccessToken,GetServiceRetries);
      END ELSE BEGIN
        ApiResponseList := ApiResponseList.ImportReportResponseList();
        OnUploadReports(ApiRequestList,ApiResponseList); <=====================
      END;
      FOREACH ApiResponse IN ApiResponseList DO
        WasSuccessful := WasSuccessful AND HandleUploadResponse(ApiResponse.ImportId,ApiResponse.RequestReportId,
            ApiResponse.ImportedReport,ApiResponse.ShouldRetry,ApiResponse.RetryAfter);
    ...
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireAcquireOnBehalfOfToken>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<AcquireOnBehalfOfToken>
    Code lines:
    CheckProvider;
    IF CanHandle THEN
      AccessToken := AuthFlow.ALAcquireOnBehalfOfToken(ResourceName)
    ELSE
      OnAcquireAcquireOnBehalfOfToken(ResourceName,AccessToken); <=====================
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireAcquireOnBehalfOfTokenAndRefreshToken>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<AcquireOnBehalfOfTokenAndRefreshToken>
    Code lines:
    CheckProvider;
    IF CanHandle THEN
      AccessToken := AuthFlow.ALAcquireOnBehalfOfToken(ResourceName,RefreshToken)
    ELSE
      OnAcquireAcquireOnBehalfOfTokenAndRefreshToken(ResourceName,AccessToken,RefreshToken); <=====================
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireAcquireTokenFromRefreshToken>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<AcquireTokenFromRefreshToken>
    Code lines:
    CheckProvider;
    IF CanHandle THEN
      AccessToken := AuthFlow.ALAcquireTokenFromRefreshToken(RefreshToken,NewRefreshToken)
    ELSE
      OnAcquireAcquireTokenFromRefreshToken(RefreshToken,AccessToken,NewRefreshToken); <=====================
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireGuestToken>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<AcquireGuestToken>
    Code lines:
    CheckProvider;
    IF CanHandle THEN
      AccessToken := AuthFlow.ALAcquireGuestToken(ResourceName,GuestTenantId)
    ELSE
      OnAcquireGuestToken(ResourceName,GuestTenantId,AccessToken); <=====================
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireTokenByAuthorizationCode>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<AcquireTokenByAuthorizationCode>
    Code lines:
    CheckProvider;
    IF CanHandle THEN
      AccessToken := AuthFlow.ALAcquireTokenByAuthorizationCode(AuthorizationCode,ResourceName)
    ELSE
      OnAcquireTokenByAuthorizationCode(AuthorizationCode,ResourceName,AccessToken); <=====================
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireTokenByAuthorizationCodeWithCredentials>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<AcquireTokenByAuthorizationCodeWithCredentials>
    Code lines:
    CheckProvider;
    IF CanHandle THEN
      AccessToken := AuthFlow.ALAcquireTokenByAuthorizationCodeWithCredentials(AuthorizationCode,ClientID,ApplicationKey,ResourceName)
    ELSE
      OnAcquireTokenByAuthorizationCodeWithCredentials(AuthorizationCode,ClientID,ApplicationKey,ResourceName,AccessToken); <=====================
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireTokenFromCache>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<AcquireTokenFromCache>
    Code lines:
    CheckProvider;
    IF CanHandle THEN
      AccessToken := AuthFlow.ALAcquireTokenFromCache(ResourceName)
    ELSE
      OnAcquireTokenFromCache(ResourceName,AccessToken); <=====================
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireTokenFromCacheWithCredentials>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<AcquireTokenFromCacheWithCredentials>
    Code lines:
    CheckProvider;
    IF CanHandle THEN
      AccessToken := AuthFlow.ALAcquireTokenFromCacheWithCredentials(ClientID,AppKey,ResourceName)
    ELSE
      OnAcquireTokenFromCacheWithCredentials(ClientID,AppKey,ResourceName,AccessToken); <=====================
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnCheckProvider>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<CheckProvider>
    Code lines:
    IF CanHandle THEN
      Initialized := NOT ISNULL(AuthFlow)
    ELSE
      OnCheckProvider(Initialized); <=====================
    
    IF NOT Initialized THEN
      ERROR(ProviderNotInitializedErr);
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnCreateExchangeServiceWrapperWithToken>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<CreateExchangeServiceWrapperWithToken>
    Code lines:
    IF CanHandle THEN
      Service := ServiceFactory.CreateServiceWrapperWithToken(Token)
    ELSE
      OnCreateExchangeServiceWrapperWithToken(Token,Service); <=====================
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnGetSaasClientId>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<GetSaasClientId>
    Code lines:
    CheckProvider;
    IF CanHandle THEN
      ClientID := AuthFlow.ALGetSaasClientId
    ELSE
      OnGetSaasClientId(ClientID); <=====================
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnInitialize>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<Initialize>
    Code lines:
    IF CanHandle THEN
      AuthFlow := AuthFlow.ALAzureAdCodeGrantFlow(Uri.Uri(RedirectUri))
    ELSE
      OnInitialize(RedirectUri,AuthFlow); <=====================
Codeunit<Sales-Get Shipment>.PROCEDURE<OnAfterInsertLines>
  Raised in: Codeunit<Sales-Get Shipment>.PROCEDURE<CreateInvLines>
    Code lines:
    ...
            IF Type = Type::"Charge (Item)" THEN
              GetItemChargeAssgnt(SalesShptLine2,SalesLine."Qty. to Invoice");
          END;
        UNTIL NEXT = 0;
    
        OnAfterInsertLines(SalesHeader); <=====================
    
        CalcInvoiceDiscount(SalesLine);
      END;
    END;
Codeunit<Sales-Get Shipment>.PROCEDURE<OnBeforeInsertLines>
  Raised in: Codeunit<Sales-Get Shipment>.PROCEDURE<CreateInvLines>
    Code lines:
    ...
        SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
        SalesLine.SETRANGE("Document No.",SalesHeader."No.");
        SalesLine."Document Type" := SalesHeader."Document Type";
        SalesLine."Document No." := SalesHeader."No.";
        Window.OPEN(Text002 + Text003);
        OnBeforeInsertLines(SalesHeader); <=====================
    
        REPEAT
          LineCount := LineCount + 1;
          Window.UPDATE(1,LineCount);
    ...
Codeunit<Sales-Get Shipment>.PROCEDURE<OnBeforeTransferLineToSalesDoc>
  Raised in: Codeunit<Sales-Get Shipment>.PROCEDURE<CreateInvLines>
    Code lines:
    ...
                SalesHeader.FIELDCAPTION("Bill-to Customer No."),
                SalesHeader.TABLECAPTION,SalesHeader."No.",
                SalesShptHeader.TABLECAPTION,SalesShptHeader."No.");
              TransferLine := FALSE;
            END;
            OnBeforeTransferLineToSalesDoc(SalesShptHeader,SalesShptLine2,SalesHeader,TransferLine); <=====================
          END;
          IF TransferLine THEN BEGIN
            SalesShptLine := SalesShptLine2;
            SalesShptLine.TESTFIELD("VAT Bus. Posting Group",SalesHeader."VAT Bus. Posting Group");
    ...
Codeunit<Sales-Get Shipment>.PROCEDURE<OnRunAfterFilterSalesShpLine>
  Raised in: Codeunit<Sales-Get Shipment>.<OnRun>
    Code lines:
    ...
    SalesShptLine.SETRANGE("Bill-to Customer No.",SalesHeader."Bill-to Customer No.");
    SalesShptLine.SETRANGE("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
    SalesShptLine.SETFILTER("Qty. Shipped Not Invoiced",'<>0');
    SalesShptLine.SETRANGE("Currency Code",SalesHeader."Currency Code");
    SalesShptLine.SETRANGE("Authorized for Credit Card",FALSE);
    OnRunAfterFilterSalesShpLine(SalesShptLine,SalesHeader); <=====================
    
    GetShipments.SETTABLEVIEW(SalesShptLine);
    GetShipments.SetSalesHeader(SalesHeader);
    GetShipments.LOOKUPMODE := TRUE;
Codeunit<Item Tracking Management>.PROCEDURE<OnAfterInitReservEntry>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<InitReservEntry>
    Code lines:
    ...
        "Shipment Date" := Date;
      "Creation Date" := WORKDATE;
      "Created By" := USERID;
    END;
    
    OnAfterInitReservEntry(ReservEntry,ItemLedgEntryBuf); <=====================
Codeunit<Item Tracking Management>.PROCEDURE<OnAfterReserveEntryFilter>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<RetrieveItemTrackingFromReservEntry>
    Code lines:
    ...
      EXIT(RetrieveSubcontrItemTracking(ItemJnlLine,TempTrackingSpec));
    
    ReservEntry.SetSourceFilter(
      DATABASE::"Item Journal Line",ItemJnlLine."Entry Type",ItemJnlLine."Journal Template Name",ItemJnlLine."Line No.",TRUE);
    ReservEntry.SetSourceFilter2(ItemJnlLine."Journal Batch Name",0);
    OnAfterReserveEntryFilter(ItemJnlLine,ReservEntry); <=====================
    ReservEntry.SETFILTER("Qty. to Handle (Base)",'<>0');
    OnRetrieveItemTrackingFromReservEntryFilter(ReservEntry,ItemJnlLine);
    IF SumUpItemTracking(ReservEntry,TempTrackingSpec,FALSE,TRUE) THEN BEGIN
      ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Prospect);
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnAfterRetrieveAppliedExpirationDate>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<RetrieveAppliedExpirationDate>
    Code lines:
    ...
        ItemLedgEntry.GET(ItemApplnEntry."Inbound Item Entry No.");
        "Expiration Date" := ItemLedgEntry."Expiration Date";
      END;
    END;
    
    OnAfterRetrieveAppliedExpirationDate(TempItemLedgEntry,ItemApplnEntry); <=====================
Codeunit<Item Tracking Management>.PROCEDURE<OnAfterSplitPostedWhseReceiptLine>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<SplitPostedWhseRcptLine>
    Code lines:
    ...
    END ELSE BEGIN
      TempPostedWhseRcptLine := PostedWhseRcptLine;
      TempPostedWhseRcptLine.INSERT;
    END;
    
    OnAfterSplitPostedWhseReceiptLine(PostedWhseRcptLine,TempPostedWhseRcptLine); <=====================
Codeunit<Item Tracking Management>.PROCEDURE<OnAfterSplitWhseJnlLine>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<SplitWhseJnlLine>
    Code lines:
    ...
        OnBeforeTempWhseJnlLine2Insert(TempWhseJnlLine2,TempWhseJnlLine,TempWhseSplitSpecification,ToTransfer);
        TempWhseJnlLine2.INSERT;
      END;
    END;
    
    OnAfterSplitWhseJnlLine(TempWhseJnlLine,TempWhseJnlLine2); <=====================
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeCheckWhseItemTrkg>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<CheckWhseItemTrkg>
    Code lines:
    OnBeforeCheckWhseItemTrkg(TempWhseItemTrkgLine,WhseWkshLine,Checked); <=====================
    IF Checked THEN
      EXIT;
    
    WITH WhseWkshLine DO BEGIN
      IF WhseItemTrackingLine.FINDLAST THEN
        EntryNo := WhseItemTrackingLine."Entry No.";
    
      IF "Source Type" = DATABASE::"Prod. Order Component" THEN BEGIN
        SourceReservEntry.SetSourceFilter("Source Type","Source Subtype","Source No.","Source Subline No.",TRUE);
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeCreateWhseItemTrkgForReceipt>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<CreateWhseItemTrkgForReceipt>
    Code lines:
    ...
          WhseItemTrackingLine."Quantity (Base)" := ItemLedgEntry.Quantity;
          IF "Qty. (Base)" = "Qty. to Handle (Base)" THEN
            WhseItemTrackingLine."Qty. to Handle (Base)" := WhseItemTrackingLine."Quantity (Base)";
          WhseItemTrackingLine."Qty. to Handle" :=
            ROUND(WhseItemTrackingLine."Qty. to Handle (Base)" / WhseItemTrackingLine."Qty. per Unit of Measure",0.00001);
          OnBeforeCreateWhseItemTrkgForReceipt(WhseItemTrackingLine,WhseWkshLine); <=====================
          WhseItemTrackingLine.INSERT;
        UNTIL WhseItemEntryRelation.NEXT = 0;
    END;
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeCreateWhseItemTrkgForResEntry>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<CreateWhseItemTrkgForResEntry>
    Code lines:
    ...
    END ELSE
      IF WhseWkshLine."Qty. (Base)" = WhseWkshLine."Qty. to Handle (Base)" THEN BEGIN
        WhseItemTrackingLine."Qty. to Handle (Base)" := WhseItemTrackingLine."Quantity (Base)";
        WhseItemTrackingLine."Qty. to Handle" := -SourceReservEntry.Quantity;
      END;
    OnBeforeCreateWhseItemTrkgForResEntry(WhseItemTrackingLine,SourceReservEntry,WhseWkshLine); <=====================
    WhseItemTrackingLine.INSERT;
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeExistingExpirationDate>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<ExistingExpirationDate>
    Code lines:
    IsHandled := FALSE;
    OnBeforeExistingExpirationDate(ItemNo,Variant,LotNo,SerialNo,TestMultiple,EntriesExist,ExpDate,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT GetLotSNDataSet(ItemNo,Variant,LotNo,SerialNo,ItemLedgEntry) THEN BEGIN
      EntriesExist := FALSE;
      EXIT;
    END;
    
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeExistingExpirationDateAndQty>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<ExistingExpirationDateAndQty>
    Code lines:
    IsHandled := FALSE;
    OnBeforeExistingExpirationDateAndQty(ItemNo,Variant,LotNo,SerialNo,SumOfEntries,ExpDate,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SumOfEntries := 0;
    IF NOT GetLotSNDataSet(ItemNo,Variant,LotNo,SerialNo,ItemLedgEntry) THEN
      EXIT;
    
    ExpDate := ItemLedgEntry."Expiration Date";
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeFindTempHandlingSpecification>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<SumUpItemTracking>
    Code lines:
    ...
            IF ReservEntry."New Serial No." <> '' THEN
              TempHandlingSpecification.SETRANGE("New Serial No.",ReservEntry."New Serial No." );
            IF ReservEntry."New Lot No." <> '' THEN
              TempHandlingSpecification.SETRANGE("New Lot No.",ReservEntry."New Lot No.");
          END;
          OnBeforeFindTempHandlingSpecification(TempHandlingSpecification,ReservEntry); <=====================
          IF TempHandlingSpecification.FINDFIRST THEN BEGIN
            TempHandlingSpecification."Quantity (Base)" += ReservEntry."Quantity (Base)";
            TempHandlingSpecification."Qty. to Handle (Base)" += ReservEntry."Qty. to Handle (Base)";
            TempHandlingSpecification."Qty. to Invoice (Base)" += ReservEntry."Qty. to Invoice (Base)";
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeInsertReservEntryForPurchLine>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<InsertReservEntryForPurchLine>
    Code lines:
    ...
        "Reservation Status" := "Reservation Status"::Prospect;
      IF AppliedToItemEntry THEN
        "Appl.-to Item Entry" := ItemLedgEntryBuf."Entry No.";
      Description := PurchaseLine.Description;
      UpdateItemTracking;
      OnBeforeInsertReservEntryForPurchLine(ReservEntry,PurchaseLine); <=====================
      INSERT;
    END;
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeInsertReservEntryForSalesLine>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<InsertReservEntryForSalesLine>
    Code lines:
    ...
      IF AppliedFromItemEntry THEN
        "Appl.-from Item Entry" := ItemLedgEntryBuf."Entry No.";
      Description := SalesLine.Description;
      OnCopyItemLedgEntryTrkgToDocLine(ItemLedgEntryBuf,ReservEntry);
      UpdateItemTracking;
      OnBeforeInsertReservEntryForSalesLine(ReservEntry,SalesLine); <=====================
      INSERT;
    END;
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeInsertSplitInternalPutAwayLine>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<SplitInternalPutAwayLine>
    Code lines:
    ...
          WhseItemTrackingLine."Serial No.",WhseItemTrackingLine."Lot No.",
          WhseItemTrackingLine."Warranty Date",WhseItemTrackingLine."Expiration Date");
        TempPostedWhseRcptLine."Qty. (Base)" := WhseItemTrackingLine."Qty. to Handle (Base)";
        TempPostedWhseRcptLine.Quantity :=
          ROUND(TempPostedWhseRcptLine."Qty. (Base)" / TempPostedWhseRcptLine."Qty. per Unit of Measure",0.00001);
        OnBeforeInsertSplitInternalPutAwayLine(TempPostedWhseRcptLine,PostedWhseRcptLine,WhseItemTrackingLine); <=====================
        TempPostedWhseRcptLine.INSERT;
      UNTIL WhseItemTrackingLine.NEXT = 0
    ELSE BEGIN
      TempPostedWhseRcptLine := PostedWhseRcptLine;
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeInsertSplitPostedWhseRcptLine>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<SplitPostedWhseRcptLine>
    Code lines:
    ...
            WhseItemEntryRelation."Serial No.",WhseItemEntryRelation."Lot No.",
            ItemLedgEntry."Warranty Date",ItemLedgEntry."Expiration Date");
          TempPostedWhseRcptLine."Qty. (Base)" := ItemLedgEntry.Quantity;
          TempPostedWhseRcptLine.Quantity :=
            ROUND(TempPostedWhseRcptLine."Qty. (Base)" / TempPostedWhseRcptLine."Qty. per Unit of Measure",0.00001);
          OnBeforeInsertSplitPostedWhseRcptLine(TempPostedWhseRcptLine,PostedWhseRcptLine,WhseItemEntryRelation); <=====================
          TempPostedWhseRcptLine.INSERT;
        END;
    
        IF WhseSNRequired THEN BEGIN
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeInsertWhseItemTrkgLines>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<InsertWhseItemTrkgLines>
    Code lines:
    ...
        WhseItemTrkgLine.SetSourceFilter(SourceType,0,"No.","Line No.",FALSE);
        WhseItemTrkgLine.DELETEALL;
        WhseItemTrkgLine.INIT;
        WhseItemTrkgLine.SETCURRENTKEY("Serial No.","Lot No.");
        REPEAT
          OnBeforeInsertWhseItemTrkgLinesLoop(PostedWhseReceiptLine,WhseItemEntryRelation,WhseItemTrkgLine); <=====================
          WhseItemTrkgLine.SetTrackingFilterFromRelation(WhseItemEntryRelation);
          ItemLedgEntry.GET(WhseItemEntryRelation."Item Entry No.");
          IF (WhseItemEntryRelation."Lot No." <> WhseItemTrkgLine."Lot No.") OR
             (WhseItemEntryRelation."Serial No." <> WhseItemTrkgLine."Serial No.")
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeInsertWhseItemTrkgLinesLoop>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<InsertWhseItemTrkgLines>
    Code lines:
    ...
        WhseItemTrkgLine.SetSourceFilter(SourceType,0,"No.","Line No.",FALSE);
        WhseItemTrkgLine.DELETEALL;
        WhseItemTrkgLine.INIT;
        WhseItemTrkgLine.SETCURRENTKEY("Serial No.","Lot No.");
        REPEAT
          OnBeforeInsertWhseItemTrkgLinesLoop(PostedWhseReceiptLine,WhseItemEntryRelation,WhseItemTrkgLine); <=====================
          WhseItemTrkgLine.SetTrackingFilterFromRelation(WhseItemEntryRelation);
          ItemLedgEntry.GET(WhseItemEntryRelation."Item Entry No.");
          IF (WhseItemEntryRelation."Lot No." <> WhseItemTrkgLine."Lot No.") OR
             (WhseItemEntryRelation."Serial No." <> WhseItemTrkgLine."Serial No.")
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeModifyWhseItemTrkgLines>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<InsertWhseItemTrkgLines>
    Code lines:
    ...
            WhseItemTrkgLine.INSERT;
          END ELSE BEGIN
            WhseItemTrkgLine."Quantity Handled (Base)" += QtyHandledBase;
            WhseItemTrkgLine."Qty. Registered (Base)" += QtyHandledBase;
            WhseItemTrkgLine.VALIDATE("Quantity (Base)",WhseItemTrkgLine."Quantity (Base)" + ItemLedgEntry.Quantity);
            OnBeforeModifyWhseItemTrkgLines(WhseItemTrkgLine,PostedWhseReceiptLine,WhseItemEntryRelation); <=====================
            WhseItemTrkgLine.MODIFY;
          END;
        UNTIL WhseItemEntryRelation.NEXT = 0;
      END;
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeRetrieveAppliedExpirationDate>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<RetrieveAppliedExpirationDate>
    Code lines:
    OnBeforeRetrieveAppliedExpirationDate(TempItemLedgEntry); <=====================
    
    WITH TempItemLedgEntry DO BEGIN
      IF Positive THEN
        EXIT;
    
      ItemApplnEntry.RESET;
      ItemApplnEntry.SETCURRENTKEY("Outbound Item Entry No.","Item Ledger Entry No.","Cost Application");
      ItemApplnEntry.SETRANGE("Outbound Item Entry No.","Entry No.");
      ItemApplnEntry.SETRANGE("Item Ledger Entry No.","Entry No.");
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeTempWhseJnlLine2Insert>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<SplitWhseJnlLine>
    Code lines:
    ...
            NonDistrWeight -= TempWhseJnlLine2.Weight;
          END ELSE BEGIN // the last record
            TempWhseJnlLine2.Cubage := NonDistrCubage;
            TempWhseJnlLine2.Weight := NonDistrWeight;
          END;
          OnBeforeTempWhseJnlLine2Insert(TempWhseJnlLine2,TempWhseJnlLine,TempWhseSplitSpecification,ToTransfer); <=====================
          TempWhseJnlLine2.INSERT;
        UNTIL NEXT = 0
      ELSE BEGIN
        TempWhseJnlLine2 := TempWhseJnlLine;
    ...
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<SplitWhseJnlLine>
    Code lines:
    ...
            NonDistrWeight -= TempWhseJnlLine2.Weight;
          END ELSE BEGIN // the last record
            TempWhseJnlLine2.Cubage := NonDistrCubage;
            TempWhseJnlLine2.Weight := NonDistrWeight;
          END;
          OnBeforeTempWhseJnlLine2Insert(TempWhseJnlLine2,TempWhseJnlLine,TempWhseSplitSpecification,ToTransfer); <=====================
          TempWhseJnlLine2.INSERT;
        UNTIL NEXT = 0
      ELSE BEGIN
        TempWhseJnlLine2 := TempWhseJnlLine;
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeWhseExistingExpirationDate>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<WhseExistingExpirationDate>
    Code lines:
    IsHandled := FALSE;
    OnBeforeWhseExistingExpirationDate(ItemNo,VariantCode,Location,LotNo,SerialNo,EntriesExist,ExpDate,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    ExpDate := 0D;
    SumOfEntries := 0;
    
    IF Location."Adjustment Bin Code" = '' THEN
      EXIT;
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeWhseItemTrackingLineInsert>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<CheckWhseItemTrkg>
    Code lines:
    ...
              WhseItemTrackingLine."Quantity (Base)" := -SourceReservEntry."Quantity (Base)";
              IF "Qty. (Base)" = "Qty. to Handle (Base)" THEN
                WhseItemTrackingLine."Qty. to Handle (Base)" := WhseItemTrackingLine."Quantity (Base)";
              WhseItemTrackingLine."Qty. to Handle" :=
                ROUND(WhseItemTrackingLine."Qty. to Handle (Base)" / WhseItemTrackingLine."Qty. per Unit of Measure",0.00001);
              OnBeforeWhseItemTrackingLineInsert(WhseItemTrackingLine); <=====================
              WhseItemTrackingLine.INSERT;
            END;
          END;
        UNTIL SourceReservEntry.NEXT = 0;
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnCopyItemLedgEntryTrkgToDocLine>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<InsertReservEntryForSalesLine>
    Code lines:
    ...
      ELSE
        "Reservation Status" := "Reservation Status"::Prospect;
      IF AppliedFromItemEntry THEN
        "Appl.-from Item Entry" := ItemLedgEntryBuf."Entry No.";
      Description := SalesLine.Description;
      OnCopyItemLedgEntryTrkgToDocLine(ItemLedgEntryBuf,ReservEntry); <=====================
      UpdateItemTracking;
      OnBeforeInsertReservEntryForSalesLine(ReservEntry,SalesLine);
      INSERT;
    END;
Codeunit<Item Tracking Management>.PROCEDURE<OnIsOrderNetworkEntity>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<IsOrderNetworkEntity>
    Code lines:
    ...
      DATABASE::"Transfer Line":
        EXIT(TRUE);
      DATABASE::"Service Line":
        EXIT(Subtype IN [1]);
      ELSE BEGIN
        OnIsOrderNetworkEntity(Type,Subtype,IsNetworkEntity); <=====================
        EXIT(IsNetworkEntity);
      END;
    END;
Codeunit<Item Tracking Management>.PROCEDURE<OnRetrieveItemTrackingFromReservEntryFilter>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<RetrieveItemTrackingFromReservEntry>
    Code lines:
    ...
    ReservEntry.SetSourceFilter(
      DATABASE::"Item Journal Line",ItemJnlLine."Entry Type",ItemJnlLine."Journal Template Name",ItemJnlLine."Line No.",TRUE);
    ReservEntry.SetSourceFilter2(ItemJnlLine."Journal Batch Name",0);
    OnAfterReserveEntryFilter(ItemJnlLine,ReservEntry);
    ReservEntry.SETFILTER("Qty. to Handle (Base)",'<>0');
    OnRetrieveItemTrackingFromReservEntryFilter(ReservEntry,ItemJnlLine); <=====================
    IF SumUpItemTracking(ReservEntry,TempTrackingSpec,FALSE,TRUE) THEN BEGIN
      ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Prospect);
      IF NOT ReservEntry.ISEMPTY THEN
        ReservEntry.DELETEALL;
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnSyncActivItemTrkgOnBeforeInsertTempReservEntry>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<SynchronizeWhseActivItemTrkg>
    Code lines:
    ...
            TempReservEntry.Quantity := "Qty. Outstanding" * SignFactor;
            TempReservEntry."Qty. to Handle (Base)" := "Qty. to Handle (Base)" * SignFactor;
            TempReservEntry."Qty. to Invoice (Base)" := "Qty. to Handle (Base)" * SignFactor;
            TempReservEntry."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
            TempReservEntry.CopyTrackingFromWhseActivLine(WhseActivLine);
            OnSyncActivItemTrkgOnBeforeInsertTempReservEntry(TempReservEntry,WhseActivLine); <=====================
            TempReservEntry.INSERT;
    
            IF NOT IsBindingOrderToOrder THEN BEGIN
              ReservEntryBindingCheck.SetTrackingFilter("Serial No.","Lot No.");
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnTempPostedWhseRcptLineSetFilters>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<SplitPostedWhseRcptLine>
    Code lines:
    ...
        ItemLedgEntry.GET(WhseItemEntryRelation."Item Entry No.");
        TempPostedWhseRcptLine.SETRANGE("Serial No.",ItemLedgEntry."Serial No.");
        TempPostedWhseRcptLine.SETRANGE("Lot No.",ItemLedgEntry."Lot No.");
        TempPostedWhseRcptLine.SETRANGE("Warranty Date",ItemLedgEntry."Warranty Date");
        TempPostedWhseRcptLine.SETRANGE("Expiration Date",ItemLedgEntry."Expiration Date");
        OnTempPostedWhseRcptLineSetFilters(TempPostedWhseRcptLine,ItemLedgEntry,WhseItemEntryRelation); <=====================
        IF TempPostedWhseRcptLine.FINDFIRST THEN BEGIN
          TempPostedWhseRcptLine."Qty. (Base)" += ItemLedgEntry.Quantity;
          TempPostedWhseRcptLine.Quantity :=
            ROUND(TempPostedWhseRcptLine."Qty. (Base)" / TempPostedWhseRcptLine."Qty. per Unit of Measure",0.00001);
    ...
Codeunit<Item Tracking Data Collection>.PROCEDURE<OnAfterAssistEditTrackingNo>
  Raised in: Codeunit<Item Tracking Data Collection>.PROCEDURE<AssistEditTrackingNo>
    Code lines:
    ...
        IF ABS(NewQtyOnLine) > 1 THEN
          NewQtyOnLine := NewQtyOnLine / ABS(NewQtyOnLine); // Set to a signed value of 1.
    
      TempTrackingSpecification.VALIDATE("Quantity (Base)",NewQtyOnLine);
    
      OnAfterAssistEditTrackingNo(TempTrackingSpecification,TempGlobalEntrySummary); <=====================
    END;
Codeunit<Item Tracking Data Collection>.PROCEDURE<OnAfterCreateEntrySummary>
  Raised in: Codeunit<Item Tracking Data Collection>.PROCEDURE<CreateEntrySummary>
    Code lines:
    CreateEntrySummary2(TrackingSpecification,LookupMode::"Serial No.",TempReservEntry);
    CreateEntrySummary2(TrackingSpecification,LookupMode::"Lot No.",TempReservEntry);
    
    OnAfterCreateEntrySummary(TrackingSpecification,TempGlobalEntrySummary); <=====================
Codeunit<Item Tracking Data Collection>.PROCEDURE<OnAfterCreateEntrySummary2>
  Raised in: Codeunit<Item Tracking Data Collection>.PROCEDURE<CreateEntrySummary2>
    Code lines:
    ...
    IF DoInsert THEN
      TempGlobalEntrySummary.INSERT
    ELSE
      TempGlobalEntrySummary.MODIFY;
    
    OnAfterCreateEntrySummary2(TempGlobalEntrySummary,TempReservEntry); <=====================
Codeunit<Item Tracking Data Collection>.PROCEDURE<OnAfterRetrieveLookupData>
  Raised in: Codeunit<Item Tracking Data Collection>.PROCEDURE<RetrieveLookupData>
    Code lines:
    ...
    
    PartialGlobalDataSetExists := TRUE;
    FullGlobalDataSetExists := FullDataSet;
    AdjustForDoubleEntries;
    
    OnAfterRetrieveLookupData(TrackingSpecification,FullDataSet,TempGlobalReservEntry,TempGlobalEntrySummary); <=====================
Codeunit<Item Tracking Data Collection>.PROCEDURE<OnAfterTransferExpDateFromSummary>
  Raised in: Codeunit<Item Tracking Data Collection>.PROCEDURE<TransferExpDateFromSummary>
    Code lines:
    ...
      TrackingSpecification."Buffer Status2" := 0;
      TrackingSpecification."Expiration Date" := 0D;
      TrackingSpecification."New Expiration Date" := 0D;
    END;
    
    OnAfterTransferExpDateFromSummary(TrackingSpecification,TempEntrySummary); <=====================
Codeunit<Item Tracking Data Collection>.PROCEDURE<OnBeforeAssistEditTrackingNo>
  Raised in: Codeunit<Item Tracking Data Collection>.PROCEDURE<AssistEditTrackingNo>
    Code lines:
    OnBeforeAssistEditTrackingNo(TempTrackingSpecification,SearchForSupply,CurrentSignFactor,LookupMode,MaxQuantity); <=====================
    
    Window.OPEN(Text004);
    
    IF NOT FullGlobalDataSetExists THEN
      RetrieveLookupData(TempTrackingSpecification,TRUE);
    
    TempGlobalReservEntry.RESET;
    TempGlobalEntrySummary.RESET;
    
    ...
Codeunit<Item Tracking Data Collection>.PROCEDURE<OnBeforeTempGlobalChangedEntrySummaryInsert>
  Raised in: Codeunit<Item Tracking Data Collection>.PROCEDURE<UpdateTrackingGlobalChangeRec>
    Code lines:
    ...
      TempGlobalChangedEntrySummary."Lot No." := TempTrackingSpecificationChanged."Lot No.";
      TempGlobalChangedEntrySummary."Serial No." := TempTrackingSpecificationChanged."Serial No.";
      TempGlobalChangedEntrySummary."Current Pending Quantity" := NewQuantity;
      IF TempTrackingSpecificationChanged."Serial No." <> '' THEN
        TempGlobalChangedEntrySummary."Table ID" := DATABASE::"Tracking Specification"; // Not a summary line
      OnBeforeTempGlobalChangedEntrySummaryInsert(TempGlobalChangedEntrySummary,TempTrackingSpecificationChanged); <=====================
      TempGlobalChangedEntrySummary.INSERT;
      PartialGlobalDataSetExists := FALSE; // The partial data set does not cover the new line
    END ELSE
      IF LineIsDemand THEN BEGIN
    ...
Codeunit<Item Tracking Data Collection>.PROCEDURE<OnBeforeTempTrackingSpecificationInsert>
  Raised in: Codeunit<Item Tracking Data Collection>.PROCEDURE<AddSelectedTrackingToDataSet>
    Code lines:
    ...
        IF TempTrackingSpecification.IsReclass THEN BEGIN
          TempTrackingSpecification."New Serial No." := TempTrackingSpecification."Serial No.";
          TempTrackingSpecification."New Lot No." := TempTrackingSpecification."Lot No.";
        END;
        TempTrackingSpecification.VALIDATE("Quantity (Base)",TempEntrySummary."Selected Quantity");
        OnBeforeTempTrackingSpecificationInsert(TempTrackingSpecification,TempEntrySummary); <=====================
        TempTrackingSpecification.INSERT;
        UpdateTrackingDataSetWithChange(TempTrackingSpecification,TRUE,CurrentSignFactor,ChangeType::Insert);
      END;
    UNTIL TempEntrySummary.NEXT = 0;
    ...
Codeunit<Item Tracking Data Collection>.PROCEDURE<OnBeforeUpdateBinContent>
  Raised in: Codeunit<Item Tracking Data Collection>.PROCEDURE<CreateEntrySummary2>
    Code lines:
    ...
        TempGlobalEntrySummary."Serial No." := TempReservEntry."Serial No."
      ELSE
        TempGlobalEntrySummary."Serial No." := '';
      TempGlobalEntrySummary."Lot No." := TempReservEntry."Lot No.";
      TempGlobalEntrySummary."Bin Active" := CurrBinCode <> '';
      OnBeforeUpdateBinContent(TempGlobalEntrySummary,TempReservEntry); <=====================
      UpdateBinContent(TempGlobalEntrySummary);
    
      // If consumption/output fill in double entry value here:
      TempGlobalEntrySummary."Double-entry Adjustment" :=
    ...
Codeunit<Item Tracking Data Collection>.PROCEDURE<OnTransferItemLedgToTempRecOnBeforeInsert>
  Raised in: Codeunit<Item Tracking Data Collection>.PROCEDURE<TransferItemLedgToTempRec>
    Code lines:
    ...
            TempGlobalReservEntry."Expected Receipt Date" := 0D
          END ELSE
            TempGlobalReservEntry."Shipment Date" := DMY2DATE(31,12,9999);
    
          IsHandled := FALSE;
          OnTransferItemLedgToTempRecOnBeforeInsert(TempGlobalReservEntry,ItemLedgEntry,TrackingSpecification,IsHandled); <=====================
          IF NOT IsHandled THEN
            IF TempGlobalReservEntry.INSERT THEN
              CreateEntrySummary(TrackingSpecification,TempGlobalReservEntry);
        END;
Codeunit<Item Tracking Doc. Management>.PROCEDURE<OnRetrieveDocumentItemTracking>
  Raised in: Codeunit<Item Tracking Doc. Management>.PROCEDURE<RetrieveDocumentItemTracking>
    Code lines:
    ...
      DATABASE::"Service Shipment Header":
        RetrieveTrackingServiceShipment(TempTrackingSpecBuffer,SourceID);
      DATABASE::"Service Invoice Header":
        RetrieveTrackingServiceInvoice(TempTrackingSpecBuffer,SourceID);
      ELSE BEGIN
        OnRetrieveDocumentItemTracking(TempTrackingSpecBuffer,SourceID,Found); <=====================
        IF NOT Found THEN
          ERROR(TableNotSupportedErr,SourceType);
      END;
    END;
    ...
Codeunit<Purch - Calc Disc. By Type>.PROCEDURE<OnAfterResetRecalculateInvoiceDisc>
  Raised in: Codeunit<Purch - Calc Disc. By Type>.PROCEDURE<ResetRecalculateInvoiceDisc>
    Code lines:
    PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
    PurchLine.SETRANGE("Document No.",PurchHeader."No.");
    PurchLine.MODIFYALL("Recalculate Invoice Disc.",FALSE);
    
    OnAfterResetRecalculateInvoiceDisc(PurchHeader); <=====================
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchaseDocument>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchDoc>
    Code lines:
    ...
        MESSAGE(Text019);
      LinesNotCopied <> 0:
        MESSAGE(Text004);
    END;
    
    OnAfterCopyPurchaseDocument(FromDocType,FromDocNo,ToPurchHeader,FromDocOccurrenceNo,FromDocVersionNo,IncludeHeader); <=====================
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchaseHeader>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchDoc>
    Code lines:
    ...
          PurchDocType::"Return Order",
          PurchDocType::"Credit Memo":
            BEGIN
              TRANSFERFIELDS(FromPurchHeader,FALSE);
              UpdatePurchHeaderWhenCopyFromPurchHeader(ToPurchHeader,OldPurchHeader,FromDocType);
              OnAfterCopyPurchaseHeader(ToPurchHeader,OldPurchHeader); <=====================
            END;
          PurchDocType::"Posted Receipt":
            BEGIN
              VALIDATE("Buy-from Vendor No.",FromPurchRcptHeader."Buy-from Vendor No.");
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchInvLines>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchInvLinesToDoc>
    Code lines:
    ...
          IF NOT SplitLine THEN
            CopyPurchLinesToBuffer(
              FromPurchHeader,FromPurchLine,FromPurchLine2,FromPurchLineBuf,ToPurchHeader,TempDocPurchaseLine,
              "Document No.",NextLineNo);
    
          OnAfterCopyPurchInvLines(TempDocPurchaseLine,ToPurchHeader,FromPurchLineBuf,FromPurchInvLine); <=====================
        UNTIL NEXT = 0;
    
    // Create purchase line from buffer
    Window.UPDATE(1,FromLineCounter);
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchLineFromPurchLineBuffer>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchInvLinesToDoc>
    Code lines:
    ...
                  FillExactCostRevLink AND ExactCostRevMandatory,MissingExCostRevLink,
                  FromPurchHeader."Prices Including VAT",ToPurchHeader."Prices Including VAT",FALSE);
              END;
            END;
    
            OnAfterCopyPurchLineFromPurchLineBuffer(ToPurchLine,FromPurchInvLine,IncludeHeader,RecalculateLines); <=====================
          END;
        UNTIL NEXT = 0;
      END;
    END;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesDocument>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDoc>
    Code lines:
    ...
        MESSAGE(Text019);
      LinesNotCopied <> 0:
        MESSAGE(Text004);
    END;
    
    OnAfterCopySalesDocument(FromDocType,FromDocNo,ToSalesHeader,FromDocOccurrenceNo,FromDocVersionNo,IncludeHeader); <=====================
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesHeader>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDoc>
    Code lines:
    ...
          SalesDocType::"Credit Memo":
            BEGIN
              FromSalesHeader.CALCFIELDS("Work Description");
              TRANSFERFIELDS(FromSalesHeader,FALSE);
              UpdateSalesHeaderWhenCopyFromSalesHeader(ToSalesHeader,OldSalesHeader,FromDocType);
              OnAfterCopySalesHeader(ToSalesHeader,OldSalesHeader); <=====================
            END;
          SalesDocType::"Posted Shipment":
            BEGIN
              VALIDATE("Sell-to Customer No.",FromSalesShptHeader."Sell-to Customer No.");
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesInvLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesInvLinesToDoc>
    Code lines:
    ...
          IF NOT SplitLine THEN
            CopySalesLinesToBuffer(
              FromSalesHeader,FromSalesLine,FromSalesLine2,FromSalesLineBuf,
              ToSalesHeader,TempDocSalesLine,"Document No.",NextLineNo);
    
          OnAfterCopySalesInvLine(TempDocSalesLine,ToSalesHeader,FromSalesLineBuf,FromSalesInvLine); <=====================
        UNTIL NEXT = 0;
    
    // Create sales line from buffer
    Window.UPDATE(1,FromLineCounter);
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesLineFromSalesLineBuffer>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesInvLinesToDoc>
    Code lines:
    ...
                CopyItemLedgEntryTrackingToSalesLine(
                  ItemLedgEntryBuf,TempItemTrkgEntry,FromSalesLineBuf,ToSalesLine,ToSalesHeader."Prices Including VAT",
                  FromSalesHeader."Prices Including VAT",FillExactCostRevLink,MissingExCostRevLink);
            END;
    
            OnAfterCopySalesLineFromSalesLineBuffer(ToSalesLine,FromSalesInvLine,IncludeHeader,RecalculateLines); <=====================
          END;
        UNTIL NEXT = 0;
      END;
    END;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesToPurchDoc>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyFromSalesToPurchDoc>
    Code lines:
    ...
        INSERT(TRUE);
        IF (FromSalesLine.Type <> FromSalesLine.Type::" ") AND (Type = Type::Item) AND (Quantity <> 0) THEN
          CopyItemTrackingEntries(
            FromSalesLine,ToPurchLine,FromSalesHeader."Prices Including VAT",
            ToPurchHeader."Prices Including VAT");
        OnAfterCopySalesToPurchDoc(ToPurchLine,FromSalesLine); <=====================
      UNTIL FromSalesLine.NEXT = 0;
    END;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInitToPurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchLine>
    Code lines:
    ...
    THEN
      EXIT(FALSE);
    
    IF RecalculateLines AND NOT FromPurchLine."System-Created Entry" THEN BEGIN
      ToPurchLine.INIT;
      OnAfterInitToPurchLine(ToPurchLine); <=====================
    END ELSE BEGIN
      ToPurchLine := FromPurchLine;
      ToPurchLine."Returns Deferral Start Date" := 0D;
      IF ToPurchHeader."Document Type" IN [ToPurchHeader."Document Type"::Quote,ToPurchHeader."Document Type"::"Blanket Order"] THEN
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInitToSalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesLine>
    Code lines:
    ...
    THEN
      EXIT(FALSE);
    ToSalesLine.SetSalesHeader(ToSalesHeader);
    IF RecalculateLines AND NOT FromSalesLine."System-Created Entry" THEN BEGIN
      ToSalesLine.INIT;
      OnAfterInitToSalesLine(ToSalesLine); <=====================
    END ELSE BEGIN
      ToSalesLine := FromSalesLine;
      ToSalesLine."Returns Deferral Start Date" := 0D;
      IF ToSalesHeader."Document Type" IN [ToSalesHeader."Document Type"::Quote,ToSalesHeader."Document Type"::"Blanket Order"] THEN
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInsertToPurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchLine>
    Code lines:
    ...
    END;
    
    IF CopyThisLine THEN BEGIN
      OnBeforeInsertToPurchLine(ToPurchLine,FromPurchLine,FromPurchDocType,RecalculateLines,ToPurchHeader);
      ToPurchLine.INSERT;
      OnAfterInsertToPurchLine(ToPurchLine,FromPurchLine); <=====================
    END ELSE
      LinesNotCopied := LinesNotCopied + 1;
    EXIT(TRUE);
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInsertToSalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesLine>
    Code lines:
    ...
      OnBeforeInsertToSalesLine(ToSalesLine,FromSalesLine,FromSalesDocType,RecalculateLines,ToSalesHeader);
      ToSalesLine.INSERT;
      HandleAsmAttachedToSalesLine(ToSalesLine);
      IF ToSalesLine.Reserve = ToSalesLine.Reserve::Always THEN
        ToSalesLine.AutoReserve;
      OnAfterInsertToSalesLine(ToSalesLine,FromSalesLine); <=====================
    END ELSE
      LinesNotCopied := LinesNotCopied + 1;
    EXIT(TRUE);
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterTransfldsFromSalesToPurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<TransfldsFromSalesToPurchLine>
    Code lines:
    ...
        VALIDATE(Quantity,FromSalesLine."Outstanding Quantity");
      VALIDATE("Return Reason Code",FromSalesLine."Return Reason Code");
      VALIDATE("Direct Unit Cost");
      Description := FromSalesLine.Description;
      "Description 2" := FromSalesLine."Description 2";
      OnAfterTransfldsFromSalesToPurchLine(FromSalesLine,ToPurchLine); <=====================
    END;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterUpdatePurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<UpdatePurchLine>
    Code lines:
    ...
      ToPurchLine."Pay-to Vendor No." := ToPurchHeader."Pay-to Vendor No.";
    END;
    ToPurchLine.VALIDATE("Order No.",FromPurchLine."Order No.");
    ToPurchLine.VALIDATE("Order Line No.",FromPurchLine."Order Line No.");
    
    OnAfterUpdatePurchLine( <=====================
      ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLine,
      CopyThisLine,RecalculateAmount,FromPurchDocType,CopyPostedDeferral);
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterUpdateSalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<UpdateSalesLine>
    Code lines:
    ...
          ELSE
            ToSalesLine."Shipment Date" := WORKDATE;
      END;
    END;
    
    OnAfterUpdateSalesLine( <=====================
      ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLine,
      CopyThisLine,RecalculateAmount,FromSalesDocType,CopyPostedDeferral);
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeAddPurchDocLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<AddPurchDocLine>
    Code lines:
    OnBeforeAddPurchDocLine(TempDocPurchaseLine,BufferLineNo,DocumentNo,DocumentLineNo); <=====================
    
    TempDocPurchaseLine."Document No." := DocumentNo;
    TempDocPurchaseLine."Line No." := DocumentLineNo;
    TempDocPurchaseLine."Receipt Line No." := BufferLineNo;
    TempDocPurchaseLine.INSERT;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeAddSalesDocLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<AddSalesDocLine>
    Code lines:
    OnBeforeAddSalesDocLine(TempDocSalesLine,BufferLineNo,DocumentNo,DocumentLineNo); <=====================
    
    TempDocSalesLine."Document No." := DocumentNo;
    TempDocSalesLine."Line No." := DocumentLineNo;
    TempDocSalesLine."Shipment Line No." := BufferLineNo;
    TempDocSalesLine.INSERT;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyArchPurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyArchPurchLine>
    Code lines:
    CopyThisLine := TRUE;
    OnBeforeCopyArchPurchLine(ToPurchHeader,FromPurchHeaderArchive,FromPurchLineArchive,RecalculateLines,CopyThisLine); <=====================
    IF ((ToPurchHeader."Language Code" <> FromPurchHeaderArchive."Language Code") OR RecalculateLines) AND
       (FromPurchLineArchive."Attached to Line No." <> 0)
    THEN
      EXIT;
    
    IF RecalculateLines AND NOT FromPurchLineArchive."System-Created Entry" THEN
      ToPurchLine.INIT
    ELSE
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyArchSalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyArchSalesLine>
    Code lines:
    CopyThisLine := TRUE;
    OnBeforeCopyArchSalesLine(ToSalesHeader,FromSalesHeaderArchive,FromSalesLineArchive,RecalculateLines,CopyThisLine); <=====================
    IF ((ToSalesHeader."Language Code" <> FromSalesHeaderArchive."Language Code") OR RecalculateLines) AND
       (FromSalesLineArchive."Attached to Line No." <> 0)
    THEN
      EXIT;
    
    ToSalesLine.SetSalesHeader(ToSalesHeader);
    IF RecalculateLines AND NOT FromSalesLineArchive."System-Created Entry" THEN
      ToSalesLine.INIT
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchaseDocument>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchDoc>
    Code lines:
    ...
        IF FromDocNo = '' THEN
          ERROR(Text000);
        FIND;
      END;
    
      OnBeforeCopyPurchaseDocument(FromDocType,FromDocNo,ToPurchHeader); <=====================
    
      TransferOldExtLines.ClearLineNumbers;
    
      IF NOT InitAndCheckPurchaseDocuments(
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchInvLines>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchInvLinesToDoc>
    Code lines:
    ...
    FromPurchLineBuf.DELETEALL;
    TempItemTrkgEntry.RESET;
    TempItemTrkgEntry.DELETEALL;
    OpenWindow;
    
    OnBeforeCopyPurchInvLines(TempDocPurchaseLine,ToPurchHeader,FromPurchInvLine); <=====================
    
    // Fill purchase line buffer
    WITH FromPurchInvLine DO
      IF FINDSET THEN
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchLine>
    Code lines:
    CopyThisLine := TRUE;
    OnBeforeCopyPurchLine(ToPurchHeader,FromPurchHeader,FromPurchLine,RecalculateLines,CopyThisLine); <=====================
    CheckPurchRounding(FromPurchLine,RoundingLineInserted);
    
    IF ((ToPurchHeader."Language Code" <> FromPurchHeader."Language Code") OR RecalculateLines) AND
       (FromPurchLine."Attached to Line No." <> 0) OR
       FromPurchLine."Prepayment Line" OR RoundingLineInserted
    THEN
      EXIT(FALSE);
    
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchLines>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<UpdatePurchLine>
    Code lines:
    ...
      ToPurchLine."Drop Shipment" := FALSE;
      ToPurchLine."Special Order" := FALSE;
      IF VATPostingSetup.GET(ToPurchLine."VAT Bus. Posting Group",ToPurchLine."VAT Prod. Posting Group") THEN
        ToPurchLine."VAT Identifier" := VATPostingSetup."VAT Identifier";
    
      OnBeforeCopyPurchLines(ToPurchLine); <=====================
    
      CopyDocLines(RecalculateAmount,ToPurchLine,FromPurchLine);
    
      ToPurchLine.UpdateWithWarehouseReceive;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesDocument>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDoc>
    Code lines:
    ...
        IF FromDocNo = '' THEN
          ERROR(Text000);
        FIND;
      END;
    
      OnBeforeCopySalesDocument(FromDocType,FromDocNo,ToSalesHeader); <=====================
    
      TransferOldExtLines.ClearLineNumbers;
    
      IF NOT InitAndCheckSalesDocuments(
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesInvLines>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesInvLinesToDoc>
    Code lines:
    ...
    TempItemTrkgEntry.DELETEALL;
    OpenWindow;
    InitAsmCopyHandling(TRUE);
    TempSalesInvLine.DELETEALL;
    
    OnBeforeCopySalesInvLines(TempDocSalesLine,ToSalesHeader,FromSalesInvLine); <=====================
    
    // Fill sales line buffer
    SalesInvLineCount := 0;
    FirstLineText := FALSE;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesLine>
    Code lines:
    CopyThisLine := TRUE;
    OnBeforeCopySalesLine(ToSalesHeader,FromSalesHeader,FromSalesLine,RecalculateLines,CopyThisLine); <=====================
    CheckSalesRounding(FromSalesLine,RoundingLineInserted);
    
    IF ((ToSalesHeader."Language Code" <> FromSalesHeader."Language Code") OR RecalculateLines) AND
       (FromSalesLine."Attached to Line No." <> 0) OR
       FromSalesLine."Prepayment Line" OR RoundingLineInserted
    THEN
      EXIT(FALSE);
    ToSalesLine.SetSalesHeader(ToSalesHeader);
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesToPurchDoc>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyFromSalesToPurchDoc>
    Code lines:
    ...
        "Line No." := NextLineNo;
        IF FromSalesLine.Type = FromSalesLine.Type::" " THEN
          Description := FromSalesLine.Description
        ELSE
          TransfldsFromSalesToPurchLine(FromSalesLine,ToPurchLine);
        OnBeforeCopySalesToPurchDoc(ToPurchLine,FromSalesLine); <=====================
        INSERT(TRUE);
        IF (FromSalesLine.Type <> FromSalesLine.Type::" ") AND (Type = Type::Item) AND (Quantity <> 0) THEN
          CopyItemTrackingEntries(
            FromSalesLine,ToPurchLine,FromSalesHeader."Prices Including VAT",
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertOldPurchCombDocNoLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<InsertOldPurchCombDocNoLine>
    Code lines:
    ...
          Text018,
          COPYSTR(SELECTSTR(3,Text017) + OldDocNo,1,23),
          COPYSTR(SELECTSTR(4,Text017) + OldDocNo2,1,23));
    LanguageManagement.RestoreGlobalLanguage;
    
    OnBeforeInsertOldPurchCombDocNoLine(ToPurchHeader,ToPurchLine2,CopyFromInvoice,OldDocNo,OldDocNo2); <=====================
    ToPurchLine2.INSERT;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertOldPurchDocNoLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<InsertOldPurchDocNoLine>
    Code lines:
    ...
      ToPurchLine2.Description := STRSUBSTNO(CrMemoCancellationMsg,OldDocNo)
    ELSE
      ToPurchLine2.Description := STRSUBSTNO(Text015,SELECTSTR(OldDocType,Text014),OldDocNo);
    LanguageManagement.RestoreGlobalLanguage;
    
    OnBeforeInsertOldPurchDocNoLine(ToPurchHeader,ToPurchLine2,OldDocType,OldDocNo); <=====================
    ToPurchLine2.INSERT;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertOldSalesCombDocNoLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<InsertOldSalesCombDocNoLine>
    Code lines:
    ...
          Text018,
          COPYSTR(SELECTSTR(3,Text016) + OldDocNo,1,23),
          COPYSTR(SELECTSTR(4,Text016) + OldDocNo2,1,23));
    LanguageManagement.RestoreGlobalLanguage;
    
    OnBeforeInsertOldSalesCombDocNoLine(ToSalesHeader,ToSalesLine2,CopyFromInvoice,OldDocNo,OldDocNo2); <=====================
    ToSalesLine2.INSERT;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertOldSalesDocNoLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<InsertOldSalesDocNoLine>
    Code lines:
    ...
      ToSalesLine2.Description := STRSUBSTNO(CrMemoCancellationMsg,OldDocNo)
    ELSE
      ToSalesLine2.Description := STRSUBSTNO(Text015,SELECTSTR(OldDocType,Text013),OldDocNo);
    LanguageManagement.RestoreGlobalLanguage;
    
    OnBeforeInsertOldSalesDocNoLine(ToSalesHeader,ToSalesLine2,OldDocType,OldDocNo); <=====================
    ToSalesLine2.INSERT;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertToPurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchLine>
    Code lines:
    ...
      ToPurchLine."Shortcut Dimension 1 Code" := FromPurchLine."Shortcut Dimension 1 Code";
      ToPurchLine."Shortcut Dimension 2 Code" := FromPurchLine."Shortcut Dimension 2 Code";
    END;
    
    IF CopyThisLine THEN BEGIN
      OnBeforeInsertToPurchLine(ToPurchLine,FromPurchLine,FromPurchDocType,RecalculateLines,ToPurchHeader); <=====================
      ToPurchLine.INSERT;
      OnAfterInsertToPurchLine(ToPurchLine,FromPurchLine);
    END ELSE
      LinesNotCopied := LinesNotCopied + 1;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertToSalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesLine>
    Code lines:
    ...
      ToSalesLine."Shortcut Dimension 1 Code" := FromSalesLine."Shortcut Dimension 1 Code";
      ToSalesLine."Shortcut Dimension 2 Code" := FromSalesLine."Shortcut Dimension 2 Code";
    END;
    
    IF CopyThisLine THEN BEGIN
      OnBeforeInsertToSalesLine(ToSalesLine,FromSalesLine,FromSalesDocType,RecalculateLines,ToSalesHeader); <=====================
      ToSalesLine.INSERT;
      HandleAsmAttachedToSalesLine(ToSalesLine);
      IF ToSalesLine.Reserve = ToSalesLine.Reserve::Always THEN
        ToSalesLine.AutoReserve;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeModifyPurchHeader>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchDoc>
    Code lines:
    ...
            "Payment Discount %" := 0;
            "Pmt. Discount Date" := 0D;
          END;
        END;
    
        OnBeforeModifyPurchHeader(ToPurchHeader,FromDocType,FromDocNo,IncludeHeader,FromDocOccurrenceNo,FromDocVersionNo); <=====================
    
        IF CreateToHeader THEN BEGIN
          VALIDATE("Payment Terms Code");
          MODIFY(TRUE);
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeModifySalesHeader>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDoc>
    Code lines:
    ...
            "Payment Discount %" := 0;
            "Pmt. Discount Date" := 0D;
          END;
        END;
    
        OnBeforeModifySalesHeader(ToSalesHeader,FromDocType,FromDocNo,IncludeHeader,FromDocOccurrenceNo,FromDocVersionNo); <=====================
    
        IF CreateToHeader THEN BEGIN
          VALIDATE("Payment Terms Code");
          MODIFY(TRUE);
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeUpdatePurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<UpdatePurchLine>
    Code lines:
    OnBeforeUpdatePurchLine( <=====================
      ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLine,
      CopyThisLine,RecalculateAmount,FromPurchDocType,CopyPostedDeferral);
    
    CopyPostedDeferral := FALSE;
    DeferralDocType := DeferralUtilities.GetPurchDeferralDocType;
    IF RecalculateLines AND NOT FromPurchLine."System-Created Entry" THEN BEGIN
      RecalculatePurchLine(ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLine,CopyThisLine);
      IF IsDeferralToBeCopied(DeferralDocType,ToPurchLine."Document Type",FromPurchDocType) THEN
        ToPurchLine.VALIDATE("Deferral Code",FromPurchLine."Deferral Code");
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeUpdateSalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<UpdateSalesLine>
    Code lines:
    OnBeforeUpdateSalesLine( <=====================
      ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLine,
      CopyThisLine,RecalculateAmount,FromSalesDocType,CopyPostedDeferral);
    
    CopyPostedDeferral := FALSE;
    DeferralDocType := DeferralUtilities.GetSalesDeferralDocType;
    IF RecalculateLines AND NOT FromSalesLine."System-Created Entry" THEN BEGIN
      RecalculateSalesLine(ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLine,CopyThisLine);
      IF IsDeferralToBeCopied(DeferralDocType,ToSalesLine."Document Type",FromSalesDocType) THEN
        ToSalesLine.VALIDATE("Deferral Code",FromSalesLine."Deferral Code");
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyArchPurchLineOnAfterToPurchLineInsert>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyArchPurchLine>
    Code lines:
    ...
      END;
    
    IF CopyThisLine THEN BEGIN
      OnCopyArchPurchLineOnBeforeToPurchLineInsert(ToPurchLine,FromPurchLineArchive,RecalculateLines);
      ToPurchLine.INSERT;
      OnCopyArchPurchLineOnAfterToPurchLineInsert(ToPurchLine,FromPurchLineArchive); <=====================
    END ELSE
      LinesNotCopied := LinesNotCopied + 1;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyArchPurchLineOnBeforeToPurchLineInsert>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyArchPurchLine>
    Code lines:
    ...
        ToPurchLine2.FINDLAST;
        NextLineNo := ToPurchLine2."Line No.";
      END;
    
    IF CopyThisLine THEN BEGIN
      OnCopyArchPurchLineOnBeforeToPurchLineInsert(ToPurchLine,FromPurchLineArchive,RecalculateLines); <=====================
      ToPurchLine.INSERT;
      OnCopyArchPurchLineOnAfterToPurchLineInsert(ToPurchLine,FromPurchLineArchive);
    END ELSE
      LinesNotCopied := LinesNotCopied + 1;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyArchSalesLineOnAfterToSalesLineInsert>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyArchSalesLine>
    Code lines:
    ...
      END;
    
    IF CopyThisLine THEN BEGIN
      OnCopyArchSalesLineOnBeforeToSalesLineInsert(ToSalesLine,FromSalesLineArchive,RecalculateLines);
      ToSalesLine.INSERT;
      OnCopyArchSalesLineOnAfterToSalesLineInsert(ToSalesLine,FromSalesLineArchive); <=====================
    END ELSE
      LinesNotCopied := LinesNotCopied + 1;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyArchSalesLineOnBeforeToSalesLineInsert>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyArchSalesLine>
    Code lines:
    ...
        ToSalesLine2.FINDLAST;
        NextLineNo := ToSalesLine2."Line No.";
      END;
    
    IF CopyThisLine THEN BEGIN
      OnCopyArchSalesLineOnBeforeToSalesLineInsert(ToSalesLine,FromSalesLineArchive,RecalculateLines); <=====================
      ToSalesLine.INSERT;
      OnCopyArchSalesLineOnAfterToSalesLineInsert(ToSalesLine,FromSalesLineArchive);
    END ELSE
      LinesNotCopied := LinesNotCopied + 1;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchDocWithHeader>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchDoc>
    Code lines:
    ...
          VALIDATE("Payment Terms Code");
          MODIFY(TRUE);
        END ELSE
          MODIFY;
    
        OnCopyPurchDocWithHeader(FromDocType,FromDocNo,ToPurchHeader,FromDocOccurrenceNo,FromDocVersionNo); <=====================
      END;
    
      LinesNotCopied := 0;
      CASE FromDocType OF
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocWithHeader>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDoc>
    Code lines:
    ...
        IF CreateToHeader THEN BEGIN
          VALIDATE("Payment Terms Code");
          MODIFY(TRUE);
        END ELSE
          MODIFY;
        OnCopySalesDocWithHeader(FromDocType,FromDocNo,ToSalesHeader,FromDocOccurrenceNo,FromDocVersionNo); <=====================
      END;
    
      LinesNotCopied := 0;
      CASE FromDocType OF
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnUpdatePurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<RecalculatePurchLine>
    Code lines:
    ToPurchLine.VALIDATE(Type,FromPurchLine.Type);
    ToPurchLine.Description := FromPurchLine.Description;
    ToPurchLine.VALIDATE("Description 2",FromPurchLine."Description 2");
    OnUpdatePurchLine(ToPurchLine,FromPurchLine); <=====================
    
    IF (FromPurchLine.Type <> 0) AND (FromPurchLine."No." <> '') THEN BEGIN
      IF ToPurchLine.Type = ToPurchLine.Type::"G/L Account" THEN BEGIN
        ToPurchLine."No." := FromPurchLine."No.";
        GLAcc.GET(FromPurchLine."No.");
        CopyThisLine := GLAcc."Direct Posting";
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnUpdateSalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<RecalculateSalesLine>
    Code lines:
    ToSalesLine.VALIDATE(Type,FromSalesLine.Type);
    ToSalesLine.Description := FromSalesLine.Description;
    ToSalesLine.VALIDATE("Description 2",FromSalesLine."Description 2");
    OnUpdateSalesLine(ToSalesLine,FromSalesLine); <=====================
    
    IF (FromSalesLine.Type <> 0) AND (FromSalesLine."No." <> '') THEN BEGIN
      IF ToSalesLine.Type = ToSalesLine.Type::"G/L Account" THEN BEGIN
        ToSalesLine."No." := FromSalesLine."No.";
        GLAcc.GET(FromSalesLine."No.");
        CopyThisLine := GLAcc."Direct Posting";
    ...
Codeunit<Return Shipment - Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<Return Shipment - Printed>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<Return Receipt - Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<Return Receipt - Printed>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<ODataUtility>.PROCEDURE<OnEditInExcel>
  Raised in: Codeunit<ODataUtility>.PROCEDURE<EditJournalWorksheetInExcel>
    Code lines:
    CreateWorksheetWebService(PageCaption,PageId);
    
    Filter := STRSUBSTNO('Journal_Batch_Name eq ''%1'' and Journal_Template_Name eq ''%2''',JournalBatchName,JournalTemplateName);
    OnEditInExcel(PageCaption,Filter); <=====================
  Raised in: Codeunit<ODataUtility>.PROCEDURE<EditWorksheetInExcel>
    Code lines:
    CreateWorksheetWebService(PageCaption,PageId);
    OnEditInExcel(PageCaption,Filter); <=====================
  Raised in: Codeunit<ODataUtility>.PROCEDURE<ReRaiseOnEditInExcel>
    Code lines:
    OnEditInExcel(ServiceName,ODataFilter) <=====================
Codeunit<Booking Manager>.PROCEDURE<OnGetBookingMailboxes>
  Raised in: Codeunit<Booking Manager>.PROCEDURE<GetBookingMailboxes>
    Code lines:
    OnGetBookingMailboxes(TempBookingMailbox); <=====================
Codeunit<Booking Manager>.PROCEDURE<OnGetBookingServiceForBooking>
  Raised in: Codeunit<Booking Manager>.PROCEDURE<GetBookingServiceForBooking>
    Code lines:
    OnGetBookingServiceForBooking(TempBookingItem,TempBookingService); <=====================
Codeunit<Booking Manager>.PROCEDURE<OnRegisterAppointmentConnection>
  Raised in: Codeunit<Booking Manager>.PROCEDURE<RegisterAppointmentConnection>
    Code lines:
    OnRegisterAppointmentConnection; <=====================
Codeunit<Booking Manager>.PROCEDURE<OnSetBookingItemInvoiced>
  Raised in: Codeunit<Booking Manager>.PROCEDURE<SetBookingItemInvoiced>
    Code lines:
    OnSetBookingItemInvoiced(InvoicedBookingItem); <=====================
Codeunit<Booking Manager>.PROCEDURE<OnSynchronize>
  Raised in: Codeunit<Booking Manager>.PROCEDURE<Synchronize>
    Code lines:
    OnSynchronize(BookingItem); <=====================
Codeunit<Purch.-Calc.Discount>.PROCEDURE<OnAfterCalcPurchaseDiscount>
  Raised in: Codeunit<Purch.-Calc.Discount>.PROCEDURE<CalculateInvoiceDiscount>
    Code lines:
    ...
        UpdatePrepmtLineAmount(PurchHeader);
      END;
    END;
    
    PurchCalcDiscByType.ResetRecalculateInvoiceDisc(PurchHeader);
    OnAfterCalcPurchaseDiscount(PurchHeader); <=====================
Codeunit<Purch.-Calc.Discount>.PROCEDURE<OnBeforeCalcPurchaseDiscount>
  Raised in: Codeunit<Purch.-Calc.Discount>.PROCEDURE<CalculateInvoiceDiscount>
    Code lines:
    PurchSetup.GET;
    
    OnBeforeCalcPurchaseDiscount(PurchHeader); <=====================
    
    WITH PurchLine DO BEGIN
      LOCKTABLE;
      PurchHeader.TESTFIELD("Vendor Posting Group");
      VendPostingGr.GET(PurchHeader."Vendor Posting Group");
    
      PurchLine2.RESET;
    ...
Codeunit<Page Management>.PROCEDURE<OnAfterGetPageID>
  Raised in: Codeunit<Page Management>.PROCEDURE<GetPageID>
    Code lines:
    ...
        PageID := GetDefaultCardPageID(RecordRef.NUMBER);
    
    IF PageID = 0 THEN
      PageID := GetDefaultLookupPageID(RecordRef.NUMBER);
    
    OnAfterGetPageID(RecordRef,PageID); <=====================
    
    EXIT(PageID);
Codeunit<Page Management>.PROCEDURE<OnBeforeGetDefaultLookupPageID>
  Raised in: Codeunit<Page Management>.PROCEDURE<GetDefaultLookupPageID>
    Code lines:
    IF TableID = 0 THEN
      EXIT(0);
    
    PageID := 0;
    OnBeforeGetDefaultLookupPageID(TableID,PageID); <=====================
    IF PageID <> 0 THEN
      EXIT(PageID);
    
    TableMetadata.GET(TableID);
    EXIT(TableMetadata.LookupPageID);
  Raised in: Codeunit<Page Management>.PROCEDURE<GetDefaultLookupPageIDByVar>
    Code lines:
    IF NOT DataTypeManagement.GetRecordRef(RecRelatedVariant,RecordRef) THEN
      EXIT;
    
    TableID := RecordRef.NUMBER;
    PageID := 0;
    OnBeforeGetDefaultLookupPageID(TableID,PageID); <=====================
    IF PageID <> 0 THEN
      EXIT(PageID);
    
    TableMetadata.GET(TableID);
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindItemJnlLinePrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindItemJnlLinePrice>
    Code lines:
    ...
      IF FoundSalesPrice OR
         NOT ((CalledByFieldNo = FIELDNO(Quantity)) OR
              (CalledByFieldNo = FIELDNO("Variant Code")))
      THEN
        VALIDATE("Unit Amount",TempSalesPrice."Unit Price");
      OnAfterFindItemJnlLinePrice(ItemJnlLine,TempSalesPrice,CalledByFieldNo); <=====================
    END;
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindJobJnlLineLineDisc>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindJobJnlLineLineDisc>
    Code lines:
    ...
        CalcBestLineDisc(TempSalesLineDisc);
        "Line Discount %" := TempSalesLineDisc."Line Discount %";
      END;
    END;
    
    OnAfterFindJobJnlLineLineDisc(JobJnlLine,TempSalesLineDisc); <=====================
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindJobJnlLineResPrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindJobJnlLinePrice>
    Code lines:
    ...
        Type::Resource:
          BEGIN
            Job.GET("Job No.");
            SetResPrice("No.","Work Type Code","Currency Code");
            CODEUNIT.RUN(CODEUNIT::"Resource-Find Price",ResPrice);
            OnAfterFindJobJnlLineResPrice(JobJnlLine,ResPrice); <=====================
            ConvertPriceLCYToFCY(ResPrice."Currency Code",ResPrice."Unit Price");
            "Unit Price" := ResPrice."Unit Price" * "Qty. per Unit of Measure";
          END;
      END;
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindJobPlanningLineLineDisc>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindJobPlanningLineLineDisc>
    Code lines:
    ...
        ELSE
          "Line Discount %" := 0;
      END;
    END;
    
    OnAfterFindJobPlanningLineLineDisc(JobPlanningLine,TempSalesLineDisc); <=====================
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindJobPlanningLineResPrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindJobPlanningLinePrice>
    Code lines:
    ...
        Type::Resource:
          BEGIN
            Job.GET("Job No.");
            SetResPrice("No.","Work Type Code","Currency Code");
            CODEUNIT.RUN(CODEUNIT::"Resource-Find Price",ResPrice);
            OnAfterFindJobPlanningLineResPrice(JobPlanningLine,ResPrice); <=====================
            ConvertPriceLCYToFCY(ResPrice."Currency Code",ResPrice."Unit Price");
            "Unit Price" := ResPrice."Unit Price" * "Qty. per Unit of Measure";
          END;
      END;
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindSalesLineDisc>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindSalesLineDisc>
    Code lines:
    ...
            END;
          UNTIL NOT InclCampaigns;
        END;
    END;
    
    OnAfterFindSalesLineDisc( <=====================
      ToSalesLineDisc,CustNo,ContNo,CustDiscGrCode,CampaignNo,ItemNo,ItemDiscGrCode,VariantCode,UOM,
      CurrencyCode,StartingDate,ShowAll);
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindSalesLineLineDisc>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindSalesLineLineDisc>
    Code lines:
    ...
        SalesLineLineDiscExists(SalesHeader,SalesLine,FALSE);
        CalcBestLineDisc(TempSalesLineDisc);
    
        "Line Discount %" := TempSalesLineDisc."Line Discount %";
      END;
      OnAfterFindSalesLineLineDisc(SalesLine,SalesHeader,TempSalesLineDisc); <=====================
    END;
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindSalesLinePrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindSalesLinePrice>
    Code lines:
    ...
            ConvertPriceToVAT(FALSE,'','',ResPrice."Unit Price");
            ConvertPriceLCYToFCY(ResPrice."Currency Code",ResPrice."Unit Price");
            "Unit Price" := ResPrice."Unit Price" * "Qty. per Unit of Measure";
          END;
      END;
      OnAfterFindSalesLinePrice(SalesLine,SalesHeader,TempSalesPrice,ResPrice,CalledByFieldNo); <=====================
    END;
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindSalesLineResPrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindSalesLinePrice>
    Code lines:
    ...
          END;
        Type::Resource:
          BEGIN
            SetResPrice("No.","Work Type Code","Currency Code");
            CODEUNIT.RUN(CODEUNIT::"Resource-Find Price",ResPrice);
            OnAfterFindSalesLineResPrice(SalesLine,ResPrice); <=====================
            ConvertPriceToVAT(FALSE,'','',ResPrice."Unit Price");
            ConvertPriceLCYToFCY(ResPrice."Currency Code",ResPrice."Unit Price");
            "Unit Price" := ResPrice."Unit Price" * "Qty. per Unit of Measure";
          END;
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindSalesPrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindSalesPrice>
    Code lines:
    ...
          REPEAT
            SETRANGE("Sales Code",TempTargetCampaignGr."Campaign No.");
            CopySalesPriceToSalesPrice(FromSalesPrice,ToSalesPrice);
          UNTIL TempTargetCampaignGr.NEXT = 0;
      END;
      OnAfterFindSalesPrice( <=====================
        ToSalesPrice,FromSalesPrice,QtyPerUOM,Qty,CustNo,ContNo,CustPriceGrCode,CampaignNo,
        ItemNo,VariantCode,UOM,CurrencyCode,StartingDate,ShowAll);
    END;
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindServLineDisc>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindServLineDisc>
    Code lines:
    ...
            ROUND(CalcChargeableQty * "Unit Price",Currency."Amount Rounding Precision") *
            "Line Discount %" / 100,Currency."Amount Rounding Precision");
        "Inv. Discount Amount" := 0;
        "Inv. Disc. Amount to Invoice" := 0;
      END;
      OnAfterFindServLineDisc(ServLine,ServHeader,TempSalesLineDisc); <=====================
    END;
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindServLinePrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindServLinePrice>
    Code lines:
    ...
            ConvertPriceToVAT(FALSE,'','',ServCost."Default Unit Price");
            ConvertPriceLCYToFCY('',ServCost."Default Unit Price");
            "Unit Price" := ServCost."Default Unit Price";
          END;
      END;
      OnAfterFindServLinePrice(ServLine,ServHeader,TempSalesPrice,ResPrice,ServCost,CalledByFieldNo); <=====================
    END;
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindServLineResPrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindServLinePrice>
    Code lines:
    ...
          END;
        Type::Resource:
          BEGIN
            SetResPrice("No.","Work Type Code","Currency Code");
            CODEUNIT.RUN(CODEUNIT::"Resource-Find Price",ResPrice);
            OnAfterFindServLineResPrice(ServLine,ResPrice); <=====================
            ConvertPriceToVAT(FALSE,'','',ResPrice."Unit Price");
            ResPrice."Unit Price" := ResPrice."Unit Price" * "Qty. per Unit of Measure";
            ConvertPriceLCYToFCY(ResPrice."Currency Code",ResPrice."Unit Price");
            IF (ResPrice."Unit Price" > ServHeader."Max. Labor Unit Price") AND
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindStdItemJnlLinePrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindStdItemJnlLinePrice>
    Code lines:
    ...
      IF FoundSalesPrice OR
         NOT ((CalledByFieldNo = FIELDNO(Quantity)) OR
              (CalledByFieldNo = FIELDNO("Variant Code")))
      THEN
        VALIDATE("Unit Amount",TempSalesPrice."Unit Price");
      OnAfterFindStdItemJnlLinePrice(StdItemJnlLine,TempSalesPrice,CalledByFieldNo); <=====================
    END;
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterGetSalesLinePrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<GetSalesLinePrice>
    Code lines:
    ...
          "Line Discount %" := 0;
    
        VALIDATE("Unit Price",TempSalesPrice."Unit Price");
      END;
    
    OnAfterGetSalesLinePrice(SalesHeader,SalesLine,TempSalesPrice); <=====================
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterJobJnlLineLineDiscExists>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<JobJnlLineLineDiscExists>
    Code lines:
    ...
        OnBeforeJobJnlLineLineDiscExists(JobJnlLine);
        FindSalesLineDisc(
          TempSalesLineDisc,Job."Bill-to Customer No.",Job."Bill-to Contact No.",
          Job."Customer Disc. Group",'',"No.",Item."Item Disc. Group","Variant Code","Unit of Measure Code",
          "Currency Code",JobJnlLineStartDate(JobJnlLine,DateCaption),ShowAll);
        OnAfterJobJnlLineLineDiscExists(JobJnlLine); <=====================
        EXIT(TempSalesLineDisc.FIND('-'));
      END;
    EXIT(FALSE);
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterJobPlanningLineLineDiscExists>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<JobPlanningLineLineDiscExists>
    Code lines:
    ...
        OnBeforeJobPlanningLineLineDiscExists(JobPlanningLine);
        FindSalesLineDisc(
          TempSalesLineDisc,Job."Bill-to Customer No.",Job."Bill-to Contact No.",
          Job."Customer Disc. Group",'',"No.",Item."Item Disc. Group","Variant Code","Unit of Measure Code",
          "Currency Code",JobPlanningLineStartDate(JobPlanningLine,DateCaption),ShowAll);
        OnAfterJobPlanningLineLineDiscExists(JobPlanningLine); <=====================
        EXIT(TempSalesLineDisc.FIND('-'));
      END;
    EXIT(FALSE);
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterSalesLineLineDiscExists>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<SalesLineLineDiscExists>
    Code lines:
    ...
        OnBeforeSalesLineLineDiscExists(SalesLine);
        FindSalesLineDisc(
          TempSalesLineDisc,GetCustNoForSalesHeader(SalesHeader),SalesHeader."Bill-to Contact No.",
          "Customer Disc. Group",'',"No.",Item."Item Disc. Group","Variant Code","Unit of Measure Code",
          SalesHeader."Currency Code",SalesHeaderStartDate(SalesHeader,DateCaption),ShowAll);
        OnAfterSalesLineLineDiscExists(SalesLine,SalesHeader,TempSalesLineDisc,ShowAll); <=====================
        EXIT(TempSalesLineDisc.FINDFIRST);
      END;
    EXIT(FALSE);
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterSalesLinePriceExists>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<SalesLinePriceExists>
    Code lines:
    ...
        OnBeforeSalesLinePriceExists(SalesLine);
        FindSalesPrice(
          TempSalesPrice,GetCustNoForSalesHeader(SalesHeader),SalesHeader."Bill-to Contact No.",
          "Customer Price Group",'',"No.","Variant Code","Unit of Measure Code",
          SalesHeader."Currency Code",SalesHeaderStartDate(SalesHeader,DateCaption),ShowAll);
        OnAfterSalesLinePriceExists(SalesLine,SalesHeader,TempSalesPrice,ShowAll); <=====================
        EXIT(TempSalesPrice.FINDFIRST);
      END;
    EXIT(FALSE);
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterServLineLineDiscExists>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<ServLineLineDiscExists>
    Code lines:
    ...
        OnBeforeServLineLineDiscExists(ServLine);
        FindSalesLineDisc(
          TempSalesLineDisc,"Bill-to Customer No.",ServHeader."Bill-to Contact No.",
          "Customer Disc. Group",'',"No.",Item."Item Disc. Group","Variant Code","Unit of Measure Code",
          ServHeader."Currency Code",ServHeaderStartDate(ServHeader,DateCaption),ShowAll);
        OnAfterServLineLineDiscExists(ServLine); <=====================
        EXIT(TempSalesLineDisc.FIND('-'));
      END;
    EXIT(FALSE);
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterServLinePriceExists>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<ServLinePriceExists>
    Code lines:
    ...
        OnBeforeServLinePriceExists(ServLine);
        FindSalesPrice(
          TempSalesPrice,"Bill-to Customer No.",ServHeader."Bill-to Contact No.",
          "Customer Price Group",'',"No.","Variant Code","Unit of Measure Code",
          ServHeader."Currency Code",ServHeaderStartDate(ServHeader,DateCaption),ShowAll);
        OnAfterServLinePriceExists(ServLine); <=====================
        EXIT(TempSalesPrice.FIND('-'));
      END;
    EXIT(FALSE);
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindAnalysisReportPrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindAnalysisReportPrice>
    Code lines:
    OnBeforeFindAnalysisReportPrice(ItemNo,Date); <=====================
    
    SetCurrency('',0,0D);
    SetVAT(FALSE,0,0,'');
    SetUoM(0,1);
    Item.GET(ItemNo);
    
    FindSalesPrice(TempSalesPrice,'','','','',ItemNo,'','','',Date,FALSE);
    CalcBestUnitPrice(TempSalesPrice);
    IF FoundSalesPrice THEN
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindItemJnlLinePrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindItemJnlLinePrice>
    Code lines:
    OnBeforeFindItemJnlLinePrice(ItemJnlLine); <=====================
    
    WITH ItemJnlLine DO BEGIN
      SetCurrency('',0,0D);
      SetVAT(FALSE,0,0,'');
      SetUoM(ABS(Quantity),"Qty. per Unit of Measure");
      TESTFIELD("Qty. per Unit of Measure");
      Item.GET("Item No.");
    
      FindSalesPrice(
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindJobJnlLinePrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindJobJnlLinePrice>
    Code lines:
    OnBeforeFindJobJnlLinePrice(JobJnlLine); <=====================
    
    WITH JobJnlLine DO BEGIN
      SetCurrency("Currency Code","Currency Factor","Posting Date");
      SetVAT(FALSE,0,0,'');
      SetUoM(ABS(Quantity),"Qty. per Unit of Measure");
    
      CASE Type OF
        Type::Item:
          BEGIN
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindJobPlanningLinePrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindJobPlanningLinePrice>
    Code lines:
    OnBeforeFindJobPlanningLinePrice(JobPlanningLine); <=====================
    
    WITH JobPlanningLine DO BEGIN
      SetCurrency("Currency Code","Currency Factor","Planning Date");
      SetVAT(FALSE,0,0,'');
      SetUoM(ABS(Quantity),"Qty. per Unit of Measure");
      SetLineDisc(0,TRUE,TRUE);
    
      CASE Type OF
        Type::Item:
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindSalesLineDisc>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindSalesLineDisc>
    Code lines:
    OnBeforeFindSalesLineDisc( <=====================
      ToSalesLineDisc,CustNo,ContNo,CustDiscGrCode,CampaignNo,ItemNo,ItemDiscGrCode,VariantCode,UOM,
      CurrencyCode,StartingDate,ShowAll);
    
    WITH FromSalesLineDisc DO BEGIN
      SETFILTER("Ending Date",'%1|>=%2',0D,StartingDate);
      SETFILTER("Variant Code",'%1|%2',VariantCode,'');
      IF NOT ShowAll THEN BEGIN
        SETRANGE("Starting Date",0D,StartingDate);
        SETFILTER("Currency Code",'%1|%2',CurrencyCode,'');
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindSalesPrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindSalesPrice>
    Code lines:
    IF NOT ToSalesPrice.ISTEMPORARY THEN
      ERROR(TempTableErr);
    
    OnBeforeFindSalesPrice( <=====================
      ToSalesPrice,FromSalesPrice,QtyPerUOM,Qty,CustNo,ContNo,CustPriceGrCode,CampaignNo,
      ItemNo,VariantCode,UOM,CurrencyCode,StartingDate,ShowAll);
    
    WITH FromSalesPrice DO BEGIN
      SETRANGE("Item No.",ItemNo);
      SETFILTER("Variant Code",'%1|%2',VariantCode,'');
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindServLineDisc>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindServLineDisc>
    Code lines:
    OnBeforeFindServLineDisc(ServHeader,ServLine); <=====================
    
    WITH ServLine DO BEGIN
      SetCurrency(ServHeader."Currency Code",0,0D);
      SetUoM(ABS(Quantity),"Qty. per Unit of Measure");
    
      TESTFIELD("Qty. per Unit of Measure");
    
      IF Type = Type::Item THEN BEGIN
        Item.GET("No.");
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindStdItemJnlLinePrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindStdItemJnlLinePrice>
    Code lines:
    OnBeforeFindStdItemJnlLinePrice(StdItemJnlLine); <=====================
    
    WITH StdItemJnlLine DO BEGIN
      SetCurrency('',0,0D);
      SetVAT(FALSE,0,0,'');
      SetUoM(ABS(Quantity),"Qty. per Unit of Measure");
      TESTFIELD("Qty. per Unit of Measure");
      Item.GET("Item No.");
    
      FindSalesPrice(
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeJobJnlLineLineDiscExists>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<JobJnlLineLineDiscExists>
    Code lines:
    WITH JobJnlLine DO
      IF (Type = Type::Item) AND Item.GET("No.") THEN BEGIN
        Job.GET("Job No.");
        OnBeforeJobJnlLineLineDiscExists(JobJnlLine); <=====================
        FindSalesLineDisc(
          TempSalesLineDisc,Job."Bill-to Customer No.",Job."Bill-to Contact No.",
          Job."Customer Disc. Group",'',"No.",Item."Item Disc. Group","Variant Code","Unit of Measure Code",
          "Currency Code",JobJnlLineStartDate(JobJnlLine,DateCaption),ShowAll);
        OnAfterJobJnlLineLineDiscExists(JobJnlLine);
        EXIT(TempSalesLineDisc.FIND('-'));
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeJobPlanningLineLineDiscExists>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<JobPlanningLineLineDiscExists>
    Code lines:
    WITH JobPlanningLine DO
      IF (Type = Type::Item) AND Item.GET("No.") THEN BEGIN
        Job.GET("Job No.");
        OnBeforeJobPlanningLineLineDiscExists(JobPlanningLine); <=====================
        FindSalesLineDisc(
          TempSalesLineDisc,Job."Bill-to Customer No.",Job."Bill-to Contact No.",
          Job."Customer Disc. Group",'',"No.",Item."Item Disc. Group","Variant Code","Unit of Measure Code",
          "Currency Code",JobPlanningLineStartDate(JobPlanningLine,DateCaption),ShowAll);
        OnAfterJobPlanningLineLineDiscExists(JobPlanningLine);
        EXIT(TempSalesLineDisc.FIND('-'));
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeSalesLineLineDiscExists>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<SalesLineLineDiscExists>
    Code lines:
    WITH SalesLine DO
      IF (Type = Type::Item) AND Item.GET("No.") THEN BEGIN
        OnBeforeSalesLineLineDiscExists(SalesLine); <=====================
        FindSalesLineDisc(
          TempSalesLineDisc,GetCustNoForSalesHeader(SalesHeader),SalesHeader."Bill-to Contact No.",
          "Customer Disc. Group",'',"No.",Item."Item Disc. Group","Variant Code","Unit of Measure Code",
          SalesHeader."Currency Code",SalesHeaderStartDate(SalesHeader,DateCaption),ShowAll);
        OnAfterSalesLineLineDiscExists(SalesLine,SalesHeader,TempSalesLineDisc,ShowAll);
        EXIT(TempSalesLineDisc.FINDFIRST);
      END;
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeSalesLinePriceExists>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<SalesLinePriceExists>
    Code lines:
    WITH SalesLine DO
      IF (Type = Type::Item) AND Item.GET("No.") THEN BEGIN
        OnBeforeSalesLinePriceExists(SalesLine); <=====================
        FindSalesPrice(
          TempSalesPrice,GetCustNoForSalesHeader(SalesHeader),SalesHeader."Bill-to Contact No.",
          "Customer Price Group",'',"No.","Variant Code","Unit of Measure Code",
          SalesHeader."Currency Code",SalesHeaderStartDate(SalesHeader,DateCaption),ShowAll);
        OnAfterSalesLinePriceExists(SalesLine,SalesHeader,TempSalesPrice,ShowAll);
        EXIT(TempSalesPrice.FINDFIRST);
      END;
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeServLineLineDiscExists>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<ServLineLineDiscExists>
    Code lines:
    WITH ServLine DO
      IF (Type = Type::Item) AND Item.GET("No.") THEN BEGIN
        OnBeforeServLineLineDiscExists(ServLine); <=====================
        FindSalesLineDisc(
          TempSalesLineDisc,"Bill-to Customer No.",ServHeader."Bill-to Contact No.",
          "Customer Disc. Group",'',"No.",Item."Item Disc. Group","Variant Code","Unit of Measure Code",
          ServHeader."Currency Code",ServHeaderStartDate(ServHeader,DateCaption),ShowAll);
        OnAfterServLineLineDiscExists(ServLine);
        EXIT(TempSalesLineDisc.FIND('-'));
      END;
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeServLinePriceExists>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<ServLinePriceExists>
    Code lines:
    WITH ServLine DO
      IF (Type = Type::Item) AND Item.GET("No.") THEN BEGIN
        OnBeforeServLinePriceExists(ServLine); <=====================
        FindSalesPrice(
          TempSalesPrice,"Bill-to Customer No.",ServHeader."Bill-to Contact No.",
          "Customer Price Group",'',"No.","Variant Code","Unit of Measure Code",
          ServHeader."Currency Code",ServHeaderStartDate(ServHeader,DateCaption),ShowAll);
        OnAfterServLinePriceExists(ServLine);
        EXIT(TempSalesPrice.FIND('-'));
      END;
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnGetCustNoForSalesHeader>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<GetCustNoForSalesHeader>
    Code lines:
    CustNo := SalesHeader."Sell-to Customer No.";
    OnGetCustNoForSalesHeader(SalesHeader,CustNo); <=====================
    EXIT(CustNo);
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterFindPurchLineDisc>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<FindPurchLineDisc>
    Code lines:
    ...
          ToPurchLineDisc := FromPurchLineDisc;
          ToPurchLineDisc.INSERT;
        UNTIL NEXT = 0;
    END;
    
    OnAfterFindPurchLineDisc(ToPurchLineDisc,FromPurchLineDisc,ItemNo,QuantityPerUoM,Quantity,ShowAll); <=====================
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterFindPurchLinePrice>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<FindPurchLinePrice>
    Code lines:
    ...
               ("Prepmt. Amt. Inv." = 0)
            THEN
              "Direct Unit Cost" := TempPurchPrice."Direct Unit Cost";
          END;
      END;
      OnAfterFindPurchLinePrice(PurchLine,PurchHeader,TempPurchPrice,CalledByFieldNo); <=====================
    END;
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterFindReqLineDisc>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<FindReqLineDisc>
    Code lines:
    ...
        OnBeforeFindReqLineDisc(ReqLine);
        FindPurchLineDisc(
          TempPurchLineDisc,"Vendor No.","No.","Variant Code",
          "Unit of Measure Code","Currency Code","Order Date",FALSE,
          "Qty. per Unit of Measure",ABS(Quantity));
        OnAfterFindReqLineDisc(ReqLine); <=====================
        CalcBestLineDisc(TempPurchLineDisc);
    
        "Line Discount %" := TempPurchLineDisc."Line Discount %";
      END;
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterFindReqLinePrice>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<FindReqLinePrice>
    Code lines:
    ...
                ((CalledByFieldNo = FIELDNO("Variant Code")) AND NOT PriceInSKU))
        THEN
          "Direct Unit Cost" := TempPurchPrice."Direct Unit Cost";
      END;
    
    OnAfterFindReqLinePrice(ReqLine,TempPurchPrice,CalledByFieldNo); <=====================
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterGetPurchLinePrice>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<GetPurchLinePrice>
    Code lines:
    ...
        ConvertPriceLCYToFCY(TempPurchPrice."Currency Code",TempPurchPrice."Direct Unit Cost");
    
        VALIDATE("Direct Unit Cost",TempPurchPrice."Direct Unit Cost");
      END;
    
    OnAfterGetPurchLinePrice(PurchHeader,PurchLine,TempPurchPrice); <=====================
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterPurchLineLineDiscExists>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<PurchLineLineDiscExists>
    Code lines:
    ...
        OnBeforePurchLineLineDiscExists(PurchLine);
        FindPurchLineDisc(
          TempPurchLineDisc,"Pay-to Vendor No.","No.","Variant Code","Unit of Measure Code",
          PurchHeader."Currency Code",PurchHeaderStartDate(PurchHeader,DateCaption),ShowAll,
          "Qty. per Unit of Measure",Quantity);
        OnAfterPurchLineLineDiscExists(PurchLine); <=====================
        EXIT(TempPurchLineDisc.FIND('-'));
      END;
    EXIT(FALSE);
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterPurchLinePriceExists>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<PurchLinePriceExists>
    Code lines:
    ...
      IF (Type = Type::Item) AND Item.GET("No.") THEN BEGIN
        OnBeforePurchLinePriceExists(PurchLine);
        FindPurchPrice(
          TempPurchPrice,"Pay-to Vendor No.","No.","Variant Code","Unit of Measure Code",
          PurchHeader."Currency Code",PurchHeaderStartDate(PurchHeader,DateCaption),ShowAll);
        OnAfterPurchLinePriceExists(PurchLine); <=====================
        EXIT(TempPurchPrice.FIND('-'));
      END;
    EXIT(FALSE);
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnBeforeFindReqLineDisc>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<FindReqLineDisc>
    Code lines:
    ...
      SetUoM(ABS(Quantity),"Qty. per Unit of Measure");
    
      TESTFIELD("Qty. per Unit of Measure");
    
      IF Type = Type::Item THEN BEGIN
        OnBeforeFindReqLineDisc(ReqLine); <=====================
        FindPurchLineDisc(
          TempPurchLineDisc,"Vendor No.","No.","Variant Code",
          "Unit of Measure Code","Currency Code","Order Date",FALSE,
          "Qty. per Unit of Measure",ABS(Quantity));
    ...
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnBeforePurchLineLineDiscExists>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<PurchLineLineDiscExists>
    Code lines:
    WITH PurchLine DO
      IF (Type = Type::Item) AND Item.GET("No.") THEN BEGIN
        OnBeforePurchLineLineDiscExists(PurchLine); <=====================
        FindPurchLineDisc(
          TempPurchLineDisc,"Pay-to Vendor No.","No.","Variant Code","Unit of Measure Code",
          PurchHeader."Currency Code",PurchHeaderStartDate(PurchHeader,DateCaption),ShowAll,
          "Qty. per Unit of Measure",Quantity);
        OnAfterPurchLineLineDiscExists(PurchLine);
        EXIT(TempPurchLineDisc.FIND('-'));
      END;
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnBeforePurchLinePriceExists>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<PurchLinePriceExists>
    Code lines:
    WITH PurchLine DO
      IF (Type = Type::Item) AND Item.GET("No.") THEN BEGIN
        OnBeforePurchLinePriceExists(PurchLine); <=====================
        FindPurchPrice(
          TempPurchPrice,"Pay-to Vendor No.","No.","Variant Code","Unit of Measure Code",
          PurchHeader."Currency Code",PurchHeaderStartDate(PurchHeader,DateCaption),ShowAll);
        OnAfterPurchLinePriceExists(PurchLine);
        EXIT(TempPurchPrice.FIND('-'));
      END;
    EXIT(FALSE);
Codeunit<Sales Info-Pane Management>.PROCEDURE<OnAfterSetItemFilter>
  Raised in: Codeunit<Sales Info-Pane Management>.PROCEDURE<SetItemFilter>
    Code lines:
    Item.RESET;
    Item.SETRANGE("Date Filter",0D,CalcAvailabilityDate(SalesLine));
    Item.SETRANGE("Variant Filter",SalesLine."Variant Code");
    Item.SETRANGE("Location Filter",SalesLine."Location Code");
    Item.SETRANGE("Drop Shipment Filter",FALSE);
    OnAfterSetItemFilter(Item,SalesLine); <=====================
Codeunit<Purch.-Explode BOM>.PROCEDURE<OnBeforeInsertExplodedPurchLine>
  Raised in: Codeunit<Purch.-Explode BOM>.PROCEDURE<ExplodeBOMCompLines>
    Code lines:
    ...
          ToPurchLine.Description := FromBOMComp.Description
        ELSE
          IF NOT ItemTranslation.GET(FromBOMComp."No.",FromBOMComp."Variant Code",PurchHeader."Language Code") THEN
            ToPurchLine.Description := FromBOMComp.Description;
    
        OnBeforeInsertExplodedPurchLine(ToPurchLine,PurchLine,FromBOMComp); <=====================
    
        IF ToPurchLine.Type = 3 THEN // Resource
          MESSAGE(
            Text004,
    ...
Codeunit<Whse. Jnl.-Register Line>.PROCEDURE<OnAfterInsertWhseEntry>
  Raised in: Codeunit<Whse. Jnl.-Register Line>.PROCEDURE<InsertWhseEntry>
    Code lines:
    ...
            Bin.MODIFY;
          END;
      END;
    END;
    
    OnAfterInsertWhseEntry(WhseEntry); <=====================
Codeunit<Whse. Jnl.-Register Line>.PROCEDURE<OnBeforeInsertWhseEntry>
  Raised in: Codeunit<Whse. Jnl.-Register Line>.PROCEDURE<InsertWhseEntry>
    Code lines:
    ...
        ItemTrackingMgt.GetWhseExpirationDate("Item No.","Variant Code",Location,"Lot No.","Serial No.",ExistingExpDate);
        IF (ExistingExpDate <> 0D) AND ("Expiration Date" <> ExistingExpDate) THEN
          TESTFIELD("Expiration Date",ExistingExpDate)
      END;
    
      OnBeforeInsertWhseEntry(WhseEntry); <=====================
      INSERT;
      InsertWhseReg("Entry No.");
      IF Quantity > 0 THEN BEGIN
        IF Bin.Empty THEN BEGIN
    ...
Codeunit<Whse. Jnl.-Register Line>.PROCEDURE<OnInitWhseEntryCopyFromWhseJnlLine>
  Raised in: Codeunit<Whse. Jnl.-Register Line>.PROCEDURE<InitWhseEntry>
    Code lines:
    ...
      END;
      WhseEntry."Warranty Date" := "Warranty Date";
      WhseEntry."Phys Invt Counting Period Code" := "Phys Invt Counting Period Code";
      WhseEntry."Phys Invt Counting Period Type" := "Phys Invt Counting Period Type";
    
      OnInitWhseEntryCopyFromWhseJnlLine(WhseEntry,WhseJnlLine); <=====================
    
      IF Sign > 0 THEN BEGIN
        IF BinCode <> Location."Adjustment Bin Code" THEN BEGIN
          IF NOT ToBinContent.GET(
    ...
Codeunit<WMS Management>.PROCEDURE<OnAfterCheckWhseJnlLine>
  Raised in: Codeunit<WMS Management>.PROCEDURE<CheckWhseJnlLine>
    Code lines:
    ...
        VALIDATE("Qty. (Absolute, Base)");
        MODIFY;
      END;
    END;
    
    OnAfterCheckWhseJnlLine(WhseJnlLine,SourceJnl,DecreaseQtyBase,ToTransfer); <=====================
Codeunit<WMS Management>.PROCEDURE<OnAfterCreateWhseJnlLine>
  Raised in: Codeunit<WMS Management>.PROCEDURE<CreateWhseJnlLine>
    Code lines:
    ...
      ELSE
        WhseJnlLine."Reference Document" := WhseJnlLine."Reference Document"::"Job Journal";
      WhseJnlLine."Reference No." := "Document No.";
      TransferWhseItemTrkg(WhseJnlLine,ItemJnlLine);
      WhseJnlLine.Description := Description;
      OnAfterCreateWhseJnlLine(WhseJnlLine,ItemJnlLine,ToTransfer); <=====================
      EXIT(TRUE);
    END;
Codeunit<WMS Management>.PROCEDURE<OnAfterCreateWhseJnlLineFromConsumJnl>
  Raised in: Codeunit<WMS Management>.PROCEDURE<CreateWhseJnlLineFromConsumJnl>
    Code lines:
    ...
      WhseJnlLine."Source Document" := WhseMgt.GetSourceDocument(WhseJnlLine."Source Type",WhseJnlLine."Source Subtype");
      WhseJnlLine.SetWhseDoc(WhseJnlLine."Whse. Document Type"::Production,"Order No.","Order Line No.");
      WhseJnlLine."Reference Document" := WhseJnlLine."Reference Document"::"Prod.";
      WhseJnlLine."Reference No." := "Order No.";
      TransferWhseItemTrkg(WhseJnlLine,ItemJnlLine);
      OnAfterCreateWhseJnlLineFromConsumJnl(WhseJnlLine,ItemJnlLine); <=====================
    END;
Codeunit<WMS Management>.PROCEDURE<OnAfterCreateWhseJnlLineFromOutputJnl>
  Raised in: Codeunit<WMS Management>.PROCEDURE<CreateWhseJnlLineFromOutputJnl>
    Code lines:
    ...
      WhseJnlLine."Source Document" := WhseMgt.GetSourceDocument(WhseJnlLine."Source Type",WhseJnlLine."Source Subtype");
      WhseJnlLine.SetWhseDoc(WhseJnlLine."Whse. Document Type"::Production,"Order No.","Order Line No.");
      WhseJnlLine."Reference Document" := WhseJnlLine."Reference Document"::"Prod.";
      WhseJnlLine."Reference No." := "Order No.";
      TransferWhseItemTrkg(WhseJnlLine,ItemJnlLine);
      OnAfterCreateWhseJnlLineFromOutputJnl(WhseJnlLine,ItemJnlLine); <=====================
    END;
Codeunit<WMS Management>.PROCEDURE<OnAfterTransferWhseItemTrkg>
  Raised in: Codeunit<WMS Management>.PROCEDURE<TransferWhseItemTrkg>
    Code lines:
    ...
    IF WhseLNRequired THEN
      WhseJnlLine."Lot No." := ItemJnlLine."Lot No.";
    WhseJnlLine."Warranty Date" := ItemJnlLine."Warranty Date";
    WhseJnlLine."Expiration Date" := ItemJnlLine."Item Expiration Date";
    
    OnAfterTransferWhseItemTrkg(WhseJnlLine,ItemJnlLine); <=====================
Codeunit<WMS Management>.PROCEDURE<OnInitWhseJnlLineCopyFromItemJnlLine>
  Raised in: Codeunit<WMS Management>.PROCEDURE<InitWhseJnlLine>
    Code lines:
    ...
      "Registering No. Series" := ItemJnlLine."Posting No. Series";
      IF Location."Directed Put-away and Pick" THEN
        CalcCubageAndWeight(
          ItemJnlLine."Item No.",ItemJnlLine."Unit of Measure Code","Qty. (Absolute)",Cubage,Weight);
    
      OnInitWhseJnlLineCopyFromItemJnlLine(WhseJnlLine,ItemJnlLine); <=====================
    END;
Codeunit<WMS Management>.PROCEDURE<OnShowSourceDocLine>
  Raised in: Codeunit<WMS Management>.PROCEDURE<ShowSourceDocLine>
    Code lines:
    ...
          ServiceLine.SETRANGE("Document No.",SourceNo);
          ServiceLine.SETRANGE("Line No.",SourceLineNo);
          PAGE.RUN(PAGE::"Service Line List",ServiceLine);
        END;
      ELSE
        OnShowSourceDocLine(SourceType,SourceSubType,SourceNo,SourceLineNo,SourceSubLineNo); <=====================
    END;
Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnAfterCollectTrackingInformation>
  Raised in: Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<Code>
    Code lines:
    ...
            IF WhseLNRequired THEN
              TESTFIELD("Lot No.");
          END;
        END;
        ItemTrackingMgt.CollectItemTrkgInfWhseJnlLine(WhseJnlLine);
        OnAfterCollectTrackingInformation(WhseJnlLine); <=====================
        IF NEXT = 0 THEN
          FIND('-');
      UNTIL "Line No." = StartLineNo;
      ItemTrackingMgt.CheckItemTrkgInfBeforePost;
    ...
Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnAfterItemJnlPostLine>
  Raised in: Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<Code>
    Code lines:
    ...
    
        IF IsReclass("Journal Template Name") THEN
          IF CreateItemJnlLine(WhseJnlLine,ItemJnlLine) THEN
            ItemJnlPostLine.RunWithCheck(ItemJnlLine);
    
        OnAfterItemJnlPostLine(WhseJnlLine); <=====================
    
        IF IsPhysInvtCount(WhseJnlTemplate,"Phys Invt Counting Period Code","Phys Invt Counting Period Type") THEN BEGIN
          IF NOT PhysInvtCount THEN BEGIN
            PhysInvtCountMgt.InitTempItemSKUList;
    ...
Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnAfterPostJnlLines>
  Raised in: Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<Code>
    Code lines:
    ...
        UNTIL NoSeries.NEXT = 0;
    
      IF PhysInvtCount THEN
        PhysInvtCountMgt.UpdateItemSKUListPhysInvtCount;
    
      OnAfterPostJnlLines(WhseJnlBatch,WhseJnlLine,WhseRegNo); <=====================
    
      Window.CLOSE;
      COMMIT;
      CLEAR(WhseJnlRegisterLine);
Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnBeforeInsertTempHandlingSpecs>
  Raised in: Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<CreateTrackingSpecification>
    Code lines:
    ...
            ERROR(Text006);
        UNTIL WhseItemTrkgLine.NEXT = 0;
    
    IF WhseItemTrkgLine.FIND('-') THEN
      REPEAT
        OnBeforeInsertTempHandlingSpecs(WhseJnlLine,WhseItemTrkgLine); <=====================
    
        TempHandlingSpecification.INIT;
        TempHandlingSpecification.TRANSFERFIELDS(WhseItemTrkgLine);
        TempHandlingSpecification."Quantity actual Handled (Base)" := WhseItemTrkgLine."Qty. to Handle (Base)";
    ...
Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnBeforeRegisterLines>
  Raised in: Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<Code>
    Code lines:
    ...
      LineCount := 0;
      LastDocNo := '';
      LastDocNo2 := '';
      LastRegisteredDocNo := '';
      FIND('-');
      OnBeforeRegisterLines(WhseJnlLine,TempHandlingSpecification); <=====================
    
      REPEAT
        IF NOT EmptyLine AND
           (WhseJnlBatch."No. Series" <> '') AND
    ...
Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnBeforeWhseJnlRegisterLineRun>
  Raised in: Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<Code>
    Code lines:
    ...
            "Item No.","Unit of Measure Code","Qty. (Absolute)",Cubage,Weight);
    
        ItemTrackingMgt.SplitWhseJnlLine(WhseJnlLine,TempWhseJnlLine2,TempHandlingSpecification,FALSE);
        IF TempWhseJnlLine2.FIND('-') THEN
          REPEAT
            OnBeforeWhseJnlRegisterLineRun(TempWhseJnlLine2); <=====================
            WhseJnlRegisterLine.RUN(TempWhseJnlLine2);
          UNTIL TempWhseJnlLine2.NEXT = 0;
    
        IF IsReclass("Journal Template Name") THEN
    ...
Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnCheckWhseJnlLine>
  Raised in: Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<Code>
    Code lines:
    ...
          IF WhseSNRequired THEN
            TESTFIELD("Qty. per Unit of Measure",1);
          IF WhseJnlTemplate.Type <> WhseJnlTemplate.Type::"Physical Inventory" THEN
            CreateTrackingSpecification(WhseJnlLine,TempHandlingSpecification)
          ELSE BEGIN
            OnCheckWhseJnlLine(WhseJnlLine); <=====================
            IF WhseSNRequired THEN
              TESTFIELD("Serial No.");
            IF WhseLNRequired THEN
              TESTFIELD("Lot No.");
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterAutofillQtyToHandle>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<Code>
    Code lines:
    ...
        "Last Registering No." := "Registering No.";
        "Registering No." := '';
        MODIFY;
        IF NOT HideDialog THEN
          WhseActivLine.AutofillQtyToHandle(WhseActivLine);
        OnAfterAutofillQtyToHandle(WhseActivLine); <=====================
      END;
      IF NOT HideDialog THEN
        Window.CLOSE;
      COMMIT;
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterCheckWhseActivLine>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<CheckLines>
    Code lines:
    ...
            WhseActivLine.TESTFIELD("Unit of Measure Code");
            WhseActivLine.TESTFIELD("Bin Code");
            WhseActivLine.CheckWhseDocLine;
            UpdateTempBinContentBuffer(WhseActivLine);
          END;
          OnAfterCheckWhseActivLine(WhseActivLine); <=====================
    
          IF ((WhseActivLine."Activity Type" = WhseActivLine."Activity Type"::Pick) OR
              (WhseActivLine."Activity Type" = WhseActivLine."Activity Type"::"Invt. Pick") OR
              (WhseActivLine."Activity Type" = WhseActivLine."Activity Type"::"Invt. Movement")) AND
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterCreateRegActivLine>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<Code>
    Code lines:
    ...
          UpdateWindow(3,'');
          UpdateWindow(4,'');
          IF Location."Bin Mandatory" THEN
            RegisterWhseJnlLine(WhseActivLine);
          CreateRegActivLine(WhseActivLine);
          OnAfterCreateRegActivLine(WhseActivLine,RegisteredWhseActivLine,RegisteredInvtMovementLine); <=====================
        UNTIL WhseActivLine.NEXT = 0;
      END;
    
      TempWhseActivLineToReserve.DELETEALL;
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterFindWhseActivLine>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<Code>
    Code lines:
    ...
      IF WhseActivLine.FIND('-') THEN
        REPEAT
          CopyWhseActivityLineToReservBuf(TempWhseActivLineToReserve,WhseActivLine);
          IF Type <> Type::Movement THEN
            UpdateWhseSourceDocLine(WhseActivLine);
          OnAfterFindWhseActivLine(WhseActivLine); <=====================
          IF WhseActivLine."Qty. Outstanding" = WhseActivLine."Qty. to Handle" THEN BEGIN
            OnBeforeWhseActivLineDelete(WhseActivLine);
            WhseActivLine.DELETE
          END ELSE BEGIN
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterInitRegActLine>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<CreateRegActivLine>
    Code lines:
    ...
    END ELSE BEGIN
      RegisteredWhseActivLine.INIT;
      RegisteredWhseActivLine.TRANSFERFIELDS(WhseActivLine);
      RegisteredWhseActivLine."Activity Type" := RegisteredWhseActivHeader.Type;
      RegisteredWhseActivLine."No." := RegisteredWhseActivHeader."No.";
      OnAfterInitRegActLine(WhseActivLine,RegisteredWhseActivLine); <=====================
      RegisteredWhseActivLine.Quantity := WhseActivLine."Qty. to Handle";
      RegisteredWhseActivLine."Qty. (Base)" := WhseActivLine."Qty. to Handle (Base)";
      RegisteredWhseActivLine.INSERT;
    END;
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterInsRegWhseItemTrkgLine>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<InsertRegWhseItemTrkgLine>
    Code lines:
    ...
      "Created by Whse. Activity Line" := TRUE;
      ItemTrackingMgt.SetRegistering(TRUE);
      ItemTrackingMgt.CalcWhseItemTrkgLine(WhseItemTrkgLine2);
      INSERT;
    END;
    OnAfterInsRegWhseItemTrkgLine(WhseActivLine,WhseItemTrkgLine2); <=====================
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterRegisterWhseActivity>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<Code>
    Code lines:
    ...
        Window.CLOSE;
      COMMIT;
      CLEAR(WhseJnlRegisterLine);
    END;
    
    OnAfterRegisterWhseActivity(WhseActivHeader); <=====================
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterRegWhseItemTrkgLine>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<RegisterWhseItemTrkgLine>
    Code lines:
    ...
        TempTrackingSpecification.SetTracking(
          WhseActivLine2."Serial No.",WhseActivLine2."Lot No.",
          WhseActivLine2."Warranty Date",WhseActivLine2."Expiration Date");
        TempTrackingSpecification."Quantity (Base)" := QtyToRegisterBase;
        TempTrackingSpecification.INSERT;
        OnAfterRegWhseItemTrkgLine(WhseActivLine2,TempTrackingSpecification); <=====================
      END;
    END;
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<UpdateTempTracking>
    Code lines:
    ...
        TempTrackingSpecification.SetTracking("Serial No.","Lot No.","Warranty Date","Expiration Date");
        TempTrackingSpecification.Correction := TRUE;
        TempTrackingSpecification.INSERT;
        Inserted := TRUE;
        TempTrackingSpecification.RESET;
        OnAfterRegWhseItemTrkgLine(WhseActivLine2,TempTrackingSpecification); <=====================
      END;
    END;
    EXIT(Inserted);
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterWhseShptLineModify>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<UpdateWhseShptLine>
    Code lines:
    ...
    
    WhseShptLine.VALIDATE("Qty. to Ship",WhseShptLine."Qty. Picked" - WhseShptLine."Qty. Shipped");
    WhseShptLine."Qty. to Ship (Base)" := WhseShptLine."Qty. Picked (Base)" - WhseShptLine."Qty. Shipped (Base)";
    WhseShptLine.Status := WhseShptLine.CalcStatusShptLine;
    WhseShptLine.MODIFY;
    OnAfterWhseShptLineModify(WhseShptLine); <=====================
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeCheckLines>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<CheckLines>
    Code lines:
    OnBeforeCheckLines(WhseActivHeader,WhseActivLine); <=====================
    
    WITH WhseActivHeader DO BEGIN
      TempBinContentBuffer.DELETEALL;
      LineCount := 0;
      IF WhseActivLine.FIND('-') THEN
        REPEAT
          LineCount := LineCount + 1;
          UpdateWindow(2,'');
          WhseActivLine.CheckBinInSourceDoc;
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeCheckQtyAvailToInsertBase>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<CheckWhseItemTrkgLine>
    Code lines:
    ...
          UNTIL TempWhseActivLine.NEXT = 0;
    
          QtyAvailToRegisterBase := CalcQtyAvailToRegisterBase(TempWhseActivLine);
          IF QtyToRegisterBase > QtyAvailToRegisterBase THEN
            QtyAvailToInsertBase -= QtyToRegisterBase - QtyAvailToRegisterBase;
          OnBeforeCheckQtyAvailToInsertBase(TempWhseActivLine,QtyAvailToInsertBase); <=====================
          IF QtyAvailToInsertBase < 0 THEN
            ERROR(Text004);
    
          IF (TempWhseActivLine."Serial No." <> '') OR (TempWhseActivLine."Lot No." <> '') THEN
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeCode>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<Code>
    Code lines:
    OnBeforeCode(WhseActivLine); <=====================
    
    WITH WhseActivHeader DO BEGIN
      WhseActivLine.SETRANGE("Activity Type",WhseActivLine."Activity Type");
      WhseActivLine.SETRANGE("No.",WhseActivLine."No.");
      WhseActivLine.SETFILTER("Qty. to Handle (Base)",'<>0');
      IF WhseActivLine.ISEMPTY THEN
        ERROR(Text003);
      CheckWhseItemTrkgLine(WhseActivLine);
    
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeCreateRegActivHeader>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<CreateRegActivHeader>
    Code lines:
    OnBeforeCreateRegActivHeader(WhseActivHeader,IsHandled,RegisteredWhseActivHeader); <=====================
    IF IsHandled THEN
      EXIT;
    
    TableNameFrom := WhseCommentLine."Table Name"::"Whse. Activity Header";
    IF WhseActivHeader.Type = WhseActivHeader.Type::"Invt. Movement" THEN BEGIN
      RegisteredInvtMovementHdr.INIT;
      RegisteredInvtMovementHdr.TRANSFERFIELDS(WhseActivHeader);
      RegisteredInvtMovementHdr."No." := WhseActivHeader."Registering No.";
      RegisteredInvtMovementHdr."Invt. Movement No." := WhseActivHeader."No.";
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeUpdWhseActivHeader>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<Code>
    Code lines:
    ...
            LineCount := LineCount + 1;
          UNTIL WhseActivLine.NEXT = 0;
        IF LineCount = 1 THEN
          OldWhseActivLine.DELETE;
      END;
      OnBeforeUpdWhseActivHeader(WhseActivHeader); <=====================
      WhseActivLine.RESET;
      WhseActivLine.SETRANGE("Activity Type",Type);
      WhseActivLine.SETRANGE("No.","No.");
      WhseActivLine.SETFILTER("Qty. Outstanding",'<>%1',0);
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeWhseActivLineDelete>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<Code>
    Code lines:
    ...
          CopyWhseActivityLineToReservBuf(TempWhseActivLineToReserve,WhseActivLine);
          IF Type <> Type::Movement THEN
            UpdateWhseSourceDocLine(WhseActivLine);
          OnAfterFindWhseActivLine(WhseActivLine);
          IF WhseActivLine."Qty. Outstanding" = WhseActivLine."Qty. to Handle" THEN BEGIN
            OnBeforeWhseActivLineDelete(WhseActivLine); <=====================
            WhseActivLine.DELETE
          END ELSE BEGIN
            QtyDiff := WhseActivLine."Qty. Outstanding" - WhseActivLine."Qty. to Handle";
            QtyBaseDiff := WhseActivLine."Qty. Outstanding (Base)" - WhseActivLine."Qty. to Handle (Base)";
    ...
Codeunit<Whse.-Shipment Release>.PROCEDURE<OnAfterRelease>
  Raised in: Codeunit<Whse.-Shipment Release>.PROCEDURE<Release>
    Code lines:
    ...
        WhsePickRqst.DELETEALL(TRUE);
    
      COMMIT;
    END;
    
    OnAfterRelease(WhseShptHeader,WhseShptLine); <=====================
Codeunit<Whse.-Shipment Release>.PROCEDURE<OnAfterReopen>
  Raised in: Codeunit<Whse.-Shipment Release>.PROCEDURE<Reopen>
    Code lines:
    ...
    
      Status := Status::Open;
      MODIFY;
    END;
    
    OnAfterReopen(WhseShptHeader); <=====================
Codeunit<Whse.-Shipment Release>.PROCEDURE<OnAfterTestWhseShptLine>
  Raised in: Codeunit<Whse.-Shipment Release>.PROCEDURE<Release>
    Code lines:
    ...
              UNTIL AsmLine.NEXT = 0;
          END;
        END;
      UNTIL WhseShptLine.NEXT = 0;
    
      OnAfterTestWhseShptLine(WhseShptHeader,WhseShptLine); <=====================
    
      Status := Status::Released;
      MODIFY;
    
    ...
Codeunit<Whse.-Shipment Release>.PROCEDURE<OnBeforeRelease>
  Raised in: Codeunit<Whse.-Shipment Release>.PROCEDURE<Release>
    Code lines:
    WITH WhseShptHeader DO BEGIN
      IF Status = Status::Released THEN
        EXIT;
    
      OnBeforeRelease(WhseShptHeader); <=====================
    
      WhseShptLine.SETRANGE("No.","No.");
      WhseShptLine.SETFILTER(Quantity,'<>0');
      IF NOT WhseShptLine.FIND('-') THEN
        ERROR(Text000,TABLECAPTION,"No.");
    ...
Codeunit<Whse.-Shipment Release>.PROCEDURE<OnBeforeReopen>
  Raised in: Codeunit<Whse.-Shipment Release>.PROCEDURE<Reopen>
    Code lines:
    WITH WhseShptHeader DO BEGIN
      IF Status = Status::Open THEN
        EXIT;
    
      OnBeforeReopen(WhseShptHeader); <=====================
    
      PickWkshLine.SETCURRENTKEY("Whse. Document Type","Whse. Document No.");
      PickWkshLine.SETRANGE("Whse. Document Type",PickWkshLine."Whse. Document Type"::Shipment);
      PickWkshLine.SETRANGE("Whse. Document No.","No.");
      IF NOT PickWkshLine.ISEMPTY THEN
    ...
Codeunit<Whse. Worksheet-Create>.PROCEDURE<OnAfterFromProdOrderCompLineCreateWhseWkshLine>
  Raised in: Codeunit<Whse. Worksheet-Create>.PROCEDURE<FromProdOrderCompLine>
    Code lines:
    ...
      IF ("Location Code" <> '') AND (ToBinCode <> '') THEN BEGIN
        Bin.GET(LocationCode,ToBinCode);
        WhseWkshLine."To Zone Code" := Bin."Zone Code";
      END;
    END;
    OnAfterFromProdOrderCompLineCreateWhseWkshLine(WhseWkshLine,ProdOrderCompLine); <=====================
    IF CreateWhseWkshLine(WhseWkshLine) THEN
      EXIT(TRUE);
Codeunit<Whse. Worksheet-Create>.PROCEDURE<OnAfterFromWhseRcptLineCreateWhseWkshLine>
  Raised in: Codeunit<Whse. Worksheet-Create>.PROCEDURE<FromWhseRcptLine>
    Code lines:
    ...
      WhseWkshLine."Qty. per From Unit of Measure" := "Qty. per Unit of Measure";
      WhseWkshLine."Whse. Document Type" := WhseWkshLine."Whse. Document Type"::Receipt;
      WhseWkshLine."Whse. Document No." := "No.";
      WhseWkshLine."Whse. Document Line No." := "Line No.";
    
      OnAfterFromWhseRcptLineCreateWhseWkshLine(WhseWkshLine,PostedWhseRcptLine); <=====================
    END;
    IF CreateWhseWkshLine(WhseWkshLine) THEN
      EXIT(TRUE);
Codeunit<Whse. Worksheet-Create>.PROCEDURE<OnAfterTransferFromWhseShptLine>
  Raised in: Codeunit<Whse. Worksheet-Create>.PROCEDURE<TransferFromWhseShptLine>
    Code lines:
    ...
      WhseWkshLine."Whse. Document Type" := WhseWkshLine."Whse. Document Type"::Shipment;
      WhseWkshLine."Whse. Document No." := "No.";
      WhseWkshLine."Whse. Document Line No." := "Line No.";
    END;
    
    OnAfterTransferFromWhseShptLine(WhseWkshLine,WhseWkshTemplateName,WhseWkshName,WhseShptLine); <=====================
Codeunit<Create Pick>.PROCEDURE<OnAfterBinContentExistsFilter>
  Raised in: Codeunit<Create Pick>.PROCEDURE<BinContentExists>
    Code lines:
    ...
          SETRANGE("Serial No. Filter",TempWhseItemTrackingLine."Serial No.")
        ELSE
          SETFILTER("Serial No. Filter",'%1|%2',TempWhseItemTrackingLine."Serial No.",'');
      END;
      ASCENDING(FALSE);
      OnAfterBinContentExistsFilter(BinContent); <=====================
      EXIT(FINDSET);
    END;
Codeunit<Create Pick>.PROCEDURE<OnAfterCreateTempLineCheckReservation>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateTempLine>
    Code lines:
    ...
    
    CheckReservation(
      QtyBaseMaxAvailToPick,SourceType,SourceSubType,SourceNo,SourceLineNo,SourceSubLineNo,Location."Always Create Pick Line",
      QtyPerUnitofMeasure,TotalQtytoPick,TotalQtytoPickBase);
    
    OnAfterCreateTempLineCheckReservation( <=====================
      LocationCode,ItemNo,VariantCode,UnitofMeasureCode,QtyPerUnitofMeasure,TotalQtytoPick,TotalQtytoPickBase,
      SourceType,SourceSubType,SourceNo,SourceLineNo,SourceSubLineNo);
    
    RemQtyToPick := TotalQtytoPick;
    ...
Codeunit<Create Pick>.PROCEDURE<OnAfterSetValues>
  Raised in: Codeunit<Create Pick>.PROCEDURE<SetValues>
    Code lines:
    ...
    WhseSetup.GET;
    WhseSetupLocation.GetLocationSetup('',WhseSetupLocation);
    CLEAR(TempWhseActivLine);
    LastWhseItemTrkgLineNo := 0;
    
    OnAfterSetValues(AssignedID,SortPick,MaxNoOfSourceDoc,MaxNoOfLines,PerBin,PerZone,DoNotFillQtytoHandle,BreakbulkFilter); <=====================
Codeunit<Create Pick>.PROCEDURE<OnAfterWhseActivLineInsert>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateWhseDocLine>
    Code lines:
    ...
        WhseActivLine."Qty. to Handle (Base)" := 0;
        WhseActivLine.Cubage := 0;
        WhseActivLine.Weight := 0;
      END;
      WhseActivLine.INSERT;
      OnAfterWhseActivLineInsert(WhseActivLine); <=====================
    END;
    
    IF Location."Bin Mandatory" THEN
      CreateWhseDocPlaceLine(WhseActivLine.Quantity,WhseActivLine."Qty. (Base)",LineNo);
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateWhseDocTakeLine>
    Code lines:
    ...
            WhseActivLine2."Qty. to Handle (Base)" := 0;
            WhseActivLine2.Cubage := 0;
            WhseActivLine2.Weight := 0;
          END;
          WhseActivLine2.INSERT;
          OnAfterWhseActivLineInsert(WhseActivLine2); <=====================
    
          TempWhseActivLine.DELETE;
          LineNo := LineNo + 10000;
    
    ...
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateWhseDocTakeLine>
    Code lines:
    ...
            WhseActivLine2."Qty. to Handle (Base)" := 0;
            WhseActivLine2.Cubage := 0;
            WhseActivLine2.Weight := 0;
          END;
          WhseActivLine2.INSERT;
          OnAfterWhseActivLineInsert(WhseActivLine2); <=====================
    
          TempWhseActivLine.DELETE;
          LineNo := LineNo + 10000;
    
    ...
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateWhseDocPlaceLine>
    Code lines:
    ...
            WhseActivLine."Qty. to Handle (Base)" := 0;
            WhseActivLine.Cubage := 0;
            WhseActivLine.Weight := 0;
          END;
          WhseActivLine.INSERT;
          OnAfterWhseActivLineInsert(WhseActivLine); <=====================
        END;
      UNTIL (TempWhseActivLine.NEXT = 0) OR (PickQtyBase = 0);
    
    TempWhseActivLine.COPY(TempWhseActivLine2);
Codeunit<Create Pick>.PROCEDURE<OnBeforeSetBinCodeFilter>
  Raised in: Codeunit<Create Pick>.PROCEDURE<FindBWPickBin>
    Code lines:
    ...
      SETRANGE("Cross-Dock Bin",CrossDockBin);
      SETRANGE("Location Code",LocationCode);
      SETRANGE("Item No.",ItemNo);
      SETRANGE("Variant Code",VariantCode);
      GetLocation(LocationCode);
      OnBeforeSetBinCodeFilter(BinCodeFilterText,LocationCode,ItemNo,VariantCode,ToBinCode); <=====================
      IF Location."Require Pick" AND (Location."Shipment Bin Code" <> '') THEN
        AddToFilterText(BinCodeFilterText,'&','<>',Location."Shipment Bin Code");
      IF Location."Require Put-away" AND (Location."Receipt Bin Code" <> '') THEN
        AddToFilterText(BinCodeFilterText,'&','<>',Location."Receipt Bin Code");
    ...
Codeunit<Create Put-away>.PROCEDURE<OnAfterWhseActivLineInsert>
  Raised in: Codeunit<Create Put-away>.PROCEDURE<InsertBreakPackageLines>
    Code lines:
    ...
        WhseActivLine."Activity Type" := WhseActivHeader.Type;
        WhseActivLine."No." := WhseActivHeader."No.";
        WhseActivLine."Bin Code" := PostedWhseRcptLine."Bin Code";
        WhseActivLine."Zone Code" := PostedWhseRcptLine."Zone Code";
        WhseActivLine.INSERT;
        OnAfterWhseActivLineInsert(WhseActivLine); <=====================
      UNTIL TempWhseActivLine.NEXT = 0;
      EXIT(TRUE);
    END
  Raised in: Codeunit<Create Put-away>.PROCEDURE<CreateNewWhseActivity>
    Code lines:
    ...
      WhseActivLine."Lot No." := "Lot No.";
      WhseActivLine."Warranty Date" := "Warranty Date";
      WhseActivLine."Expiration Date" := "Expiration Date";
      OnBeforeWhseActivLineInsert(WhseActivLine,PostedWhseRcptLine);
      WhseActivLine.INSERT;
      OnAfterWhseActivLineInsert(WhseActivLine); <=====================
    END;
Codeunit<Create Put-away>.PROCEDURE<OnBeforeWhseActivLineInsert>
  Raised in: Codeunit<Create Put-away>.PROCEDURE<CreateNewWhseActivity>
    Code lines:
    ...
        WhseActivLine.TESTFIELD("Qty. per Unit of Measure",1);
      WhseActivLine."Serial No." := "Serial No.";
      WhseActivLine."Lot No." := "Lot No.";
      WhseActivLine."Warranty Date" := "Warranty Date";
      WhseActivLine."Expiration Date" := "Expiration Date";
      OnBeforeWhseActivLineInsert(WhseActivLine,PostedWhseRcptLine); <=====================
      WhseActivLine.INSERT;
      OnAfterWhseActivLineInsert(WhseActivLine);
    END;
Codeunit<Create Put-away>.PROCEDURE<OnFindBin>
  Raised in: Codeunit<Create Put-away>.PROCEDURE<FindBin>
    Code lines:
    ...
      SETFILTER("Bin Type Code",BinTypeFilter);
      SETRANGE("Cross-Dock Bin",FALSE);
      IF PutAwayTemplLine."Find Empty Bin" THEN
        SETRANGE(Empty,TRUE);
      IsHandled := FALSE;
      OnFindBin(PostedWhseRcptLine,PutAwayTemplLine,Bin,BinFound,IsHandled); <=====================
      IF IsHandled THEN
        EXIT(BinFound);
    
      IF FIND('+') THEN BEGIN
    ...
Codeunit<Create Put-away>.PROCEDURE<OnFindBinContent>
  Raised in: Codeunit<Create Put-away>.PROCEDURE<FindBinContent>
    Code lines:
    ...
        SETRANGE("Variant Code",VariantCode);
      END;
      IF PutAwayTemplLine."Find Unit of Measure Match" THEN
        SETRANGE("Unit of Measure Code",PutAwayItemUOM.Code);
      IsHandled := FALSE;
      OnFindBinContent(PostedWhseRcptLine,PutAwayTemplLine,BinContent,BinContentFound,IsHandled); <=====================
      IF NOT IsHandled THEN
        BinContentFound := FIND('+');
    
      EXIT(BinContentFound);
Codeunit<Create Put-away>.PROCEDURE<OnNextBin>
  Raised in: Codeunit<Create Put-away>.PROCEDURE<NextBin>
    Code lines:
    IF EverythingHandled THEN
      EXIT(FALSE);
    
    IsHandled := FALSE;
    OnNextBin(PostedWhseRcptLine,PutAwayTemplLine,Bin,BinFound,IsHandled); <=====================
    IF NOT IsHandled THEN
      BinFound := Bin.NEXT(-1) <> 0;
    
    EXIT(BinFound);
Codeunit<Create Put-away>.PROCEDURE<OnNextBinContent>
  Raised in: Codeunit<Create Put-away>.PROCEDURE<NextBinContent>
    Code lines:
    IF EverythingHandled THEN
      EXIT(FALSE);
    
    IsHandled := FALSE;
    OnNextBinContent(PostedWhseRcptLine,PutAwayTemplLine,BinContent,BinContentFound,IsHandled); <=====================
    IF NOT IsHandled THEN
      BinContentFound := BinContent.NEXT(-1) <> 0;
    
    EXIT(BinContentFound);
Codeunit<Whse. Undo Quantity>.PROCEDURE<OnBeforePostTempWhseJnlLine>
  Raised in: Codeunit<Whse. Undo Quantity>.PROCEDURE<PostTempWhseJnlLineCache>
    Code lines:
    OnBeforePostTempWhseJnlLine(TempWhseJnlLine); <=====================
    IF TempWhseJnlLine.FIND('-') THEN
      REPEAT
        WhseJnlRegLine.RegisterWhseJnlLine(TempWhseJnlLine);
      UNTIL TempWhseJnlLine.NEXT = 0;
Codeunit<Whse. Undo Quantity>.PROCEDURE<OnBeforeTempWhseJnlLineInsert>
  Raised in: Codeunit<Whse. Undo Quantity>.PROCEDURE<InsertTempWhseJnlLine>
    Code lines:
    ...
            TempWhseJnlLine."From Bin Code" := TempWhseJnlLine."Bin Code";
          END ELSE BEGIN
            TempWhseJnlLine."To Zone Code" := TempWhseJnlLine."Zone Code";
            TempWhseJnlLine."To Bin Code" := TempWhseJnlLine."Bin Code";
          END;
          OnBeforeTempWhseJnlLineInsert(TempWhseJnlLine,WhseEntry,ItemJnlLine); <=====================
          TempWhseJnlLine.INSERT;
          NextLineNo := TempWhseJnlLine."Line No." + 10000;
        UNTIL WhseEntry.NEXT(-1) = 0;
    END;
Codeunit<Create Inventory Put-away>.PROCEDURE<OnAfterInsertWhseActivLine>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<InsertWhseActivLine>
    Code lines:
    ...
      COMMIT;
    END;
    NewWhseActivLine."No." := WhseActivHeader."No.";
    NewWhseActivLine."Line No." := NextLineNo;
    NewWhseActivLine.INSERT;
    OnAfterInsertWhseActivLine(NewWhseActivLine,SNRequired,LNRequired); <=====================
    
    LineCreated := TRUE;
    NextLineNo := NextLineNo + 10000;
    RemQtyToPutAway -= NewWhseActivLine.Quantity;
Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeFindProdOrderComp>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<SetFilterProdCompLine>
    Code lines:
    ...
      IF NOT CheckLineExist THEN
        SETRANGE("Location Code",WhseActivHeader."Location Code");
      SETRANGE("Flushing Method","Flushing Method"::Manual);
      SETRANGE("Planning Level Code",0);
      SETFILTER("Remaining Quantity",'<0');
      OnBeforeFindProdOrderComp(ProdOrderComp); <=====================
      EXIT(FIND('-'));
    END;
Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeFindProdOrderLine>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<SetFilterProdOrderLine>
    Code lines:
    ...
      SETRANGE(Status,ProdOrder.Status);
      SETRANGE("Prod. Order No.",ProdOrder."No.");
      IF NOT CheckLineExist THEN
        SETRANGE("Location Code",WhseActivHeader."Location Code");
      SETFILTER("Remaining Quantity",'>%1',0);
      OnBeforeFindProdOrderLine(ProdOrderLine); <=====================
      EXIT(FIND('-'));
    END;
Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeFindPurchLine>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<SetFilterPurchLine>
    Code lines:
    ...
      SETRANGE(Type,Type::Item);
      IF PurchHeader."Document Type" = PurchHeader."Document Type"::Order THEN
        SETFILTER("Qty. to Receive",'>%1',0)
      ELSE
        SETFILTER("Return Qty. to Ship",'<%1',0);
      OnBeforeFindPurchLine(PurchLine); <=====================
      EXIT(FIND('-'));
    END;
Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeFindSalesLine>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<SetFilterSalesLine>
    Code lines:
    ...
      SETRANGE(Type,Type::Item);
      IF SalesHeader."Document Type" = SalesHeader."Document Type"::Order THEN
        SETFILTER("Qty. to Ship",'<%1',0)
      ELSE
        SETFILTER("Return Qty. to Receive",'>%1',0);
      OnBeforeFindSalesLine(SalesLine); <=====================
      EXIT(FIND('-'));
    END;
Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeFindTransLine>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<SetFilterTransferLine>
    Code lines:
    ...
      SETRANGE("Document No.",TransferHeader."No.");
      SETRANGE("Derived From Line No.",0);
      IF NOT CheckLineExist THEN
        SETRANGE("Transfer-to Code",WhseActivHeader."Location Code");
      SETFILTER("Qty. to Receive",'>%1',0);
      OnBeforeFindTransLine(TransferLine); <=====================
      EXIT(FIND('-'));
    END;
Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromComp>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<CreatePutAwayLinesFromComp>
    Code lines:
    ...
            NewWhseActivLine."Unit of Measure Code" := "Unit of Measure Code";
            NewWhseActivLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
            NewWhseActivLine.Description := Description;
            NewWhseActivLine."Due Date" := "Due Date";
            NewWhseActivLine."Source Document" := NewWhseActivLine."Source Document"::"Prod. Consumption";
            OnBeforeNewWhseActivLineInsertFromComp(NewWhseActivLine,ProdOrderComp); <=====================
            IF NOT ReservationFound AND SNRequired THEN
              REPEAT
                NewWhseActivLine."Line No." := NextLineNo;
                InsertWhseActivLine(NewWhseActivLine,1);
    ...
Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromProd>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<CreatePutAwayLinesFromProd>
    Code lines:
    ...
            NewWhseActivLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
            NewWhseActivLine.Description := Description;
            NewWhseActivLine."Description 2" := "Description 2";
            NewWhseActivLine."Due Date" := "Due Date";
            NewWhseActivLine."Source Document" := NewWhseActivLine."Source Document"::"Prod. Output";
            OnBeforeNewWhseActivLineInsertFromProd(NewWhseActivLine,ProdOrderLine); <=====================
            IF NOT ReservationFound AND SNRequired THEN
              REPEAT
                NewWhseActivLine."Line No." := NextLineNo;
                InsertWhseActivLine(NewWhseActivLine,1);
    ...
Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromPurchase>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<CreatePutAwayLinesFromPurchase>
    Code lines:
    ...
            NewWhseActivLine."Due Date" := "Expected Receipt Date";
            IF "Document Type" = "Document Type"::Order THEN
              NewWhseActivLine."Source Document" := NewWhseActivLine."Source Document"::"Purchase Order"
            ELSE
              NewWhseActivLine."Source Document" := NewWhseActivLine."Source Document"::"Purchase Return Order";
            OnBeforeNewWhseActivLineInsertFromPurchase(NewWhseActivLine,PurchLine); <=====================
            IF NOT ReservationFound AND SNRequired THEN
              REPEAT
                NewWhseActivLine."Line No." := NextLineNo;
                InsertWhseActivLine(NewWhseActivLine,1);
    ...
Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromSales>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<CreatePutAwayLinesFromSales>
    Code lines:
    ...
            NewWhseActivLine."Due Date" := "Planned Shipment Date";
            IF "Document Type" = "Document Type"::Order THEN
              NewWhseActivLine."Source Document" := NewWhseActivLine."Source Document"::"Sales Order"
            ELSE
              NewWhseActivLine."Source Document" := NewWhseActivLine."Source Document"::"Sales Return Order";
            OnBeforeNewWhseActivLineInsertFromSales(NewWhseActivLine,SalesLine); <=====================
            IF NOT ReservationFound AND SNRequired THEN
              REPEAT
                NewWhseActivLine."Line No." := NextLineNo;
                InsertWhseActivLine(NewWhseActivLine,1);
    ...
Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromTransfer>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<CreatePutAwayLinesFromTransfer>
    Code lines:
    ...
            NewWhseActivLine."Unit of Measure Code" := "Unit of Measure Code";
            NewWhseActivLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
            NewWhseActivLine.Description := Description;
            NewWhseActivLine."Description 2" := "Description 2";
            NewWhseActivLine."Due Date" := "Receipt Date";
            OnBeforeNewWhseActivLineInsertFromTransfer(NewWhseActivLine,TransferLine); <=====================
            IF NOT ReservationFound AND SNRequired THEN
              REPEAT
                NewWhseActivLine."Line No." := NextLineNo;
                InsertWhseActivLine(NewWhseActivLine,1);
    ...
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnAfterInsertWhseActivLine>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<CreatePickOrMoveLine>
    Code lines:
    ...
      END ELSE
        IF (RemQtyToPickBase > 0) AND (NOT HasExpiredItems) THEN
          InsertShelfWhseActivLine(NewWhseActivLine,RemQtyToPickBase);
    END;
    
    OnAfterInsertWhseActivLine(NewWhseActivLine,SNRequired,LNRequired); <=====================
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeFindAssemblyLine>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<SetFilterAssemblyLine>
    Code lines:
    ...
      IF NOT CheckLineExist THEN
        SETRANGE("Location Code",WhseActivHeader."Location Code");
      IF IsInvtMovement THEN
        SETFILTER("Bin Code",'<>%1','');
      SETFILTER("Remaining Quantity",'>0');
      OnBeforeFindAssemblyLine(AssemblyLine); <=====================
      EXIT(FIND('-'));
    END;
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeFindProdOrderComp>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<SetFilterProductionLine>
    Code lines:
    ...
          "Flushing Method"::"Pick + Forward",
          "Flushing Method"::"Pick + Backward");
      END ELSE
        SETRANGE("Flushing Method","Flushing Method"::Manual);
      SETFILTER("Remaining Quantity",'>0');
      OnBeforeFindProdOrderComp(ProdOrderComp); <=====================
      EXIT(FIND('-'));
    END;
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeFindPurchLine>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<SetFilterPurchLine>
    Code lines:
    ...
      SETRANGE(Type,Type::Item);
      IF PurchHeader."Document Type" = PurchHeader."Document Type"::Order THEN
        SETFILTER("Qty. to Receive",'<%1',0)
      ELSE
        SETFILTER("Return Qty. to Ship",'>%1',0);
      OnBeforeFindPurchLine(PurchLine); <=====================
      EXIT(FIND('-'));
    END;
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeFindSalesLine>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<SetFilterSalesLine>
    Code lines:
    ...
      SETRANGE(Type,Type::Item);
      IF SalesHeader."Document Type" = SalesHeader."Document Type"::Order THEN
        SETFILTER("Qty. to Ship",'>%1',0)
      ELSE
        SETFILTER("Return Qty. to Receive",'<%1',0);
      OnBeforeFindSalesLine(SalesLine,SalesHeader); <=====================
      EXIT(FIND('-'));
    END;
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeFindTransLine>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<SetFilterTransferLine>
    Code lines:
    ...
      SETRANGE("Document No.",TransferHeader."No.");
      SETRANGE("Derived From Line No.",0);
      IF NOT CheckLineExist THEN
        SETRANGE("Transfer-from Code",WhseActivHeader."Location Code");
      SETFILTER("Qty. to Ship",'>%1',0);
      OnBeforeFindTransLine(TransferLine); <=====================
      EXIT(FIND('-'));
    END;
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromAssembly>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<CreatePickOrMoveFromAssembly>
    Code lines:
    ...
          NewWhseActivLine."Due Date" := "Due Date";
          NewWhseActivLine."Destination Type" := NewWhseActivLine."Destination Type"::Item;
          NewWhseActivLine."Destination No." := AssemblyHeader."Item No.";
          RemQtyToPickBase := "Quantity (Base)" - "Remaining Quantity (Base)" +
            "Quantity to Consume (Base)" - "Qty. Picked (Base)";
          OnBeforeNewWhseActivLineInsertFromAssembly(NewWhseActivLine,AssemblyLine); <=====================
          CALCFIELDS("Reserved Quantity");
          CreatePickOrMoveLine(
            NewWhseActivLine,RemQtyToPickBase,RemQtyToPickBase,"Reserved Quantity" <> 0);
        END;
    ...
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromComp>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<CreatePickOrMoveFromProduction>
    Code lines:
    ...
          NewWhseActivLine."Due Date" := "Due Date";
          IF WhseActivHeader.Type = WhseActivHeader.Type::"Invt. Pick" THEN
            RemQtyToPickBase := "Remaining Qty. (Base)"
          ELSE
            RemQtyToPickBase := "Expected Qty. (Base)" - "Qty. Picked (Base)";
          OnBeforeNewWhseActivLineInsertFromComp(NewWhseActivLine,ProdOrderComp); <=====================
          CALCFIELDS("Reserved Quantity");
          CreatePickOrMoveLine(
            NewWhseActivLine,RemQtyToPickBase,RemQtyToPickBase,"Reserved Quantity" <> 0);
        END;
    ...
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromPurchase>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<CreatePickOrMoveFromPurchase>
    Code lines:
    ...
          END ELSE BEGIN
            NewWhseActivLine."Source Document" :=
              NewWhseActivLine."Source Document"::"Purchase Return Order";
            RemQtyToPickBase := "Return Qty. to Ship (Base)";
          END;
          OnBeforeNewWhseActivLineInsertFromPurchase(NewWhseActivLine,PurchLine); <=====================
          CALCFIELDS("Reserved Quantity");
          CreatePickOrMoveLine(
            NewWhseActivLine,RemQtyToPickBase,"Outstanding Qty. (Base)","Reserved Quantity" <> 0);
        END;
    ...
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromSales>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<CreatePickOrMoveFromSales>
    Code lines:
    ...
            RemQtyToPickBase := "Qty. to Ship (Base)";
          END ELSE BEGIN
            NewWhseActivLine."Source Document" := NewWhseActivLine."Source Document"::"Sales Return Order";
            RemQtyToPickBase := -"Return Qty. to Receive (Base)";
          END;
          OnBeforeNewWhseActivLineInsertFromSales(NewWhseActivLine,SalesLine); <=====================
          CALCFIELDS("Reserved Quantity");
          CreatePickOrMoveLine(
            NewWhseActivLine,RemQtyToPickBase,"Outstanding Qty. (Base)","Reserved Quantity" <> 0);
    
    ...
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromTransfer>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<CreatePickOrMoveFromTransfer>
    Code lines:
    ...
          NewWhseActivLine."Shipping Agent Service Code" := "Shipping Agent Service Code";
          NewWhseActivLine."Shipment Method Code" := TransferHeader."Shipment Method Code";
          NewWhseActivLine."Destination Type" := NewWhseActivLine."Destination Type"::Location;
          NewWhseActivLine."Destination No." := TransferHeader."Transfer-to Code";
          RemQtyToPickBase := "Qty. to Ship (Base)";
          OnBeforeNewWhseActivLineInsertFromTransfer(NewWhseActivLine,TransferLine); <=====================
          CALCFIELDS("Reserved Quantity Outbnd.");
          CreatePickOrMoveLine(
            NewWhseActivLine,RemQtyToPickBase,
            "Outstanding Qty. (Base)","Reserved Quantity Outbnd." <> 0);
    ...
Codeunit<Whse.-Act.-Post (Yes/No)>.PROCEDURE<OnBeforeConfirmPost>
  Raised in: Codeunit<Whse.-Act.-Post (Yes/No)>.PROCEDURE<Code>
    Code lines:
    HideDialog := FALSE;
    OnBeforeConfirmPost(WhseActivLine,HideDialog,Selection); <=====================
    
    WITH WhseActivLine DO BEGIN
      IF NOT HideDialog THEN
        CASE "Activity Type" OF
          "Activity Type"::"Invt. Put-away":
            IF NOT SelectForPutAway THEN
              EXIT;
          ELSE
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterCreateWhseJnlLine>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<CreateWhseJnlLine>
    Code lines:
    ...
      WhseJnlLine."Lot No." := "Lot No.";
      WhseJnlLine."Warranty Date" := "Warranty Date";
      WhseJnlLine."Expiration Date" := "Expiration Date";
    END;
    
    OnAfterCreateWhseJnlLine(WhseJnlLine,WhseActivLine); <=====================
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterInitSourceDocument>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<InitSourceDocument>
    Code lines:
    ...
            IF ModifyHeader THEN
              TransHeader.MODIFY;
          END;
      END;
    
    OnAfterInitSourceDocument(WhseActivHeader); <=====================
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterPurchLineModify>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<InitSourceDocument>
    Code lines:
    ...
                  PurchLine.VALIDATE("Qty. to Receive",0)
                ELSE
                  PurchLine.VALIDATE("Return Qty. to Ship",0);
                PurchLine.VALIDATE("Qty. to Invoice",0);
                PurchLine.MODIFY;
                OnAfterPurchLineModify(PurchLine); <=====================
              UNTIL PurchLine.NEXT = 0;
    
            IF (PurchHeader."Posting Date" <> "Posting Date") AND ("Posting Date" <> 0D) THEN BEGIN
              PurchRelease.Reopen(PurchHeader);
    ...
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<UpdateSourceDocument>
    Code lines:
    ...
              IF InvoiceSourceDoc THEN
                PurchLine.VALIDATE("Qty. to Invoice",-"Qty. to Handle");
            END;
            PurchLine."Bin Code" := "Bin Code";
            PurchLine.MODIFY;
            OnAfterPurchLineModify(PurchLine); <=====================
            OnUpdateSourceDocumentOnAfterPurchLineModify(PurchLine,TempWhseActivLine); <=====================
          END;
        DATABASE::"Sales Line":
          BEGIN
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterSalesLineModify>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<InitSourceDocument>
    Code lines:
    ...
                  SalesLine.VALIDATE("Qty. to Ship",0)
                ELSE
                  SalesLine.VALIDATE("Return Qty. to Receive",0);
                SalesLine.VALIDATE("Qty. to Invoice",0);
                SalesLine.MODIFY;
                OnAfterSalesLineModify(SalesLine); <=====================
              UNTIL SalesLine.NEXT = 0;
    
            IF (SalesHeader."Posting Date" <> "Posting Date") AND ("Posting Date" <> 0D) THEN BEGIN
              SalesRelease.Reopen(SalesHeader);
    ...
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<UpdateSourceDocument>
    Code lines:
    ...
            SalesLine.MODIFY;
            IF "Assemble to Order" THEN BEGIN
              ATOLink.UpdateQtyToAsmFromInvtPickLine(TempWhseActivLine);
              ATOLink.UpdateAsmBinCodeFromInvtPickLine(TempWhseActivLine);
            END;
            OnAfterSalesLineModify(SalesLine); <=====================
            OnUpdateSourceDocumentOnAfterSalesLineModify(SalesLine,TempWhseActivLine); <=====================
          END;
        DATABASE::"Transfer Line":
          BEGIN
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterTransLineModify>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<InitSourceDocument>
    Code lines:
    ...
            IF TransLine.FIND('-') THEN
              REPEAT
                TransLine.VALIDATE("Qty. to Ship",0);
                TransLine.VALIDATE("Qty. to Receive",0);
                TransLine.MODIFY;
                OnAfterTransLineModify(TransLine); <=====================
              UNTIL TransLine.NEXT = 0;
    
            IF (TransHeader."Posting Date" <> "Posting Date") AND ("Posting Date" <> 0D) THEN BEGIN
              TransHeader.CalledFromWarehouse(TRUE);
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterWhseActivLineModify>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<Code>
    Code lines:
    ...
            IF HideDialog THEN
              WhseActivLine.VALIDATE("Qty. to Handle",0);
            WhseActivLine.VALIDATE(
              "Qty. Handled",WhseActivLine.Quantity - WhseActivLine."Qty. Outstanding");
            WhseActivLine.MODIFY;
            OnAfterWhseActivLineModify(WhseActivLine); <=====================
          END;
        UNTIL WhseActivLine.NEXT = 0;
    
      WhseActivLine.RESET;
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnBeforeCheckLines>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<Code>
    Code lines:
    ...
          Text002);
        Window.UPDATE(1,"No.");
      END;
    
      // Check Lines
      OnBeforeCheckLines(WhseActivHeader); <=====================
      LineCount := 0;
      IF WhseActivLine.FIND('-') THEN BEGIN
        TempWhseActivLine.SETCURRENTKEY(
          "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.");
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnBeforeInitSourceDocument>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<InitSourceDocument>
    Code lines:
    OnBeforeInitSourceDocument(WhseActivHeader); <=====================
    
    WITH WhseActivHeader DO
      CASE "Source Type" OF
        DATABASE::"Purchase Line":
          BEGIN
            PurchHeader.GET("Source Subtype","Source No.");
            PurchLine.SETRANGE("Document Type","Source Subtype");
            PurchLine.SETRANGE("Document No.","Source No.");
            IF PurchLine.FIND('-') THEN
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnBeforeInsertTempWhseActivLine>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<InsertTempWhseActivLine>
    Code lines:
    OnBeforeInsertTempWhseActivLine(WhseActivLine,ItemTrackingRequired); <=====================
    
    WITH WhseActivLine DO BEGIN
      TempWhseActivLine.SetSourceFilter(
        "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.",FALSE);
      IF TempWhseActivLine.FIND('-') THEN BEGIN
        TempWhseActivLine."Qty. to Handle" := TempWhseActivLine."Qty. to Handle" + "Qty. to Handle";
        TempWhseActivLine.MODIFY;
      END ELSE BEGIN
        TempWhseActivLine.INIT;
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnCodeOnAfterCreatePostedWhseActivDocument>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<Code>
    Code lines:
    ...
    
          IF Location."Bin Mandatory" THEN
            PostWhseJnlLine(WhseActivLine);
          CreatePostedActivLine(WhseActivLine);
        UNTIL WhseActivLine.NEXT = 0;
        OnCodeOnAfterCreatePostedWhseActivDocument(WhseActivHeader); <=====================
      END;
    
      // Modify/delete activity header and activity lines
      TempWhseActivLine.DELETEALL;
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnPostConsumptionLineOnAfterCreateItemJnlLine>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<PostConsumptionLine>
    Code lines:
    ...
      ItemJnlLine."Variant Code" := "Variant Code";
      ItemJnlLine."Source Code" := SourceCodeSetup."Consumption Journal";
      ItemJnlLine."Gen. Bus. Posting Group" := ProdOrder."Gen. Bus. Posting Group";
      GetItem("Item No.");
      ItemJnlLine."Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";
      OnPostConsumptionLineOnAfterCreateItemJnlLine(ItemJnlLine,ProdOrderLine); <=====================
      ReserveProdOrderComp.TransferPOCompToItemJnlLine(ProdOrderComp,ItemJnlLine,ItemJnlLine."Quantity (Base)");
      ItemJnlPostLine.SetCalledFromInvtPutawayPick(TRUE);
      ItemJnlPostLine.RunWithCheck(ItemJnlLine);
      ReserveProdOrderComp.UpdateItemTrackingAfterPosting(ProdOrderComp);
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnUpdateSourceDocumentOnAfterPurchLineModify>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<UpdateSourceDocument>
    Code lines:
    ...
                PurchLine.VALIDATE("Qty. to Invoice",-"Qty. to Handle");
            END;
            PurchLine."Bin Code" := "Bin Code";
            PurchLine.MODIFY;
            OnAfterPurchLineModify(PurchLine);
            OnUpdateSourceDocumentOnAfterPurchLineModify(PurchLine,TempWhseActivLine); <=====================
          END;
        DATABASE::"Sales Line":
          BEGIN
            IF "Activity Type" = "Activity Type"::"Invt. Pick" THEN
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnUpdateSourceDocumentOnAfterSalesLineModify>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<UpdateSourceDocument>
    Code lines:
    ...
            IF "Assemble to Order" THEN BEGIN
              ATOLink.UpdateQtyToAsmFromInvtPickLine(TempWhseActivLine);
              ATOLink.UpdateAsmBinCodeFromInvtPickLine(TempWhseActivLine);
            END;
            OnAfterSalesLineModify(SalesLine);
            OnUpdateSourceDocumentOnAfterSalesLineModify(SalesLine,TempWhseActivLine); <=====================
          END;
        DATABASE::"Transfer Line":
          BEGIN
            TransLine.GET("Source No.","Source Line No.");
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnUpdateSourceDocumentOnAfterTransLineModify>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<UpdateSourceDocument>
    Code lines:
    ...
            END ELSE BEGIN
              TransLine."Transfer-from Bin Code" := "Bin Code";
              TransLine.VALIDATE("Qty. to Ship","Qty. to Handle");
            END;
            TransLine.MODIFY;
            OnUpdateSourceDocumentOnAfterTransLineModify(TransLine,TempWhseActivLine); <=====================
          END;
      END;
Codeunit<Whse.-Output Prod. Release>.PROCEDURE<OnAfterCheckWhseRqstProdOrderLine>
  Raised in: Codeunit<Whse.-Output Prod. Release>.PROCEDURE<CheckWhseRqst>
    Code lines:
    ...
                 ProdOrderLine2.Status,
                 ProdOrderLine2."Prod. Order No.")
            THEN
              WhseRqstCreated := FALSE;
          END;
          OnAfterCheckWhseRqstProdOrderLine(ProdOrderLine2,WhseRqst,WhseRqstCreated); <=====================
        UNTIL (ProdOrderLine2.NEXT = 0) OR NOT WhseRqstCreated;
    END;
    EXIT(WhseRqstCreated);
Codeunit<Purch.-Get Receipt>.PROCEDURE<OnAfterInsertLines>
  Raised in: Codeunit<Purch.-Get Receipt>.PROCEDURE<CreateInvLines>
    Code lines:
    ...
            IF Type = Type::"Charge (Item)" THEN
              GetItemChargeAssgnt(PurchRcptLine2,PurchLine."Qty. to Invoice");
          END;
        UNTIL NEXT = 0;
    
        OnAfterInsertLines(PurchHeader); <=====================
    
        CalcInvoiceDiscount(PurchLine);
      END;
    END;
Codeunit<Purch.-Get Receipt>.PROCEDURE<OnBeforeInsertLines>
  Raised in: Codeunit<Purch.-Get Receipt>.PROCEDURE<CreateInvLines>
    Code lines:
    ...
        PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
        PurchLine.SETRANGE("Document No.",PurchHeader."No.");
        PurchLine."Document Type" := PurchHeader."Document Type";
        PurchLine."Document No." := PurchHeader."No.";
    
        OnBeforeInsertLines(PurchHeader); <=====================
    
        REPEAT
          IF PurchRcptHeader."No." <> "Document No." THEN BEGIN
            PurchRcptHeader.GET("Document No.");
    ...
Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnAfterPurchaseLineInsert>
  Raised in: Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<Code>
    Code lines:
    ...
          PurchLine."Purchasing Code" := SalesLine."Purchasing Code";
          EVALUATE(PurchLine."Inbound Whse. Handling Time",'<0D>');
          PurchLine.VALIDATE("Inbound Whse. Handling Time");
          OnBeforePurchaseLineInsert(PurchLine,SalesLine);
          PurchLine.INSERT;
          OnAfterPurchaseLineInsert(PurchLine); <=====================
    
          NextLineNo := NextLineNo + 10000;
    
          SalesLine."Unit Cost (LCY)" := PurchLine."Unit Cost (LCY)";
    ...
Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnBeforePurchaseLineInsert>
  Raised in: Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<Code>
    Code lines:
    ...
          PurchLine."Sales Order Line No." := SalesLine."Line No.";
          PurchLine."Drop Shipment" := TRUE;
          PurchLine."Purchasing Code" := SalesLine."Purchasing Code";
          EVALUATE(PurchLine."Inbound Whse. Handling Time",'<0D>');
          PurchLine.VALIDATE("Inbound Whse. Handling Time");
          OnBeforePurchaseLineInsert(PurchLine,SalesLine); <=====================
          PurchLine.INSERT;
          OnAfterPurchaseLineInsert(PurchLine);
    
          NextLineNo := NextLineNo + 10000;
    ...
Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnGetDescriptionFromItem>
  Raised in: Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<GetDescriptionFromItem>
    Code lines:
    PurchaseLine.Description := Item.Description;
    PurchaseLine."Description 2" := Item."Description 2";
    OnGetDescriptionFromItem(PurchaseLine,Item); <=====================
Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnGetDescriptionFromItemTranslation>
  Raised in: Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<GetDescriptionFromItemTranslation>
    Code lines:
    ...
      Vend.GET(PurchHeader."Buy-from Vendor No.");
      IF Vend."Language Code" <> '' THEN
        IF ItemTranslation.GET(SalesLine."No.",SalesLine."Variant Code",Vend."Language Code") THEN BEGIN
          PurchaseLine.Description := ItemTranslation.Description;
          PurchaseLine."Description 2" := ItemTranslation."Description 2";
          OnGetDescriptionFromItemTranslation(PurchaseLine,ItemTranslation); <=====================
          EXIT(TRUE);
        END;
    END;
    EXIT(FALSE)
Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnGetDescriptionFromItemVariant>
  Raised in: Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<GetDescriptionFromItemVariant>
    Code lines:
    IF SalesLine."Variant Code" <> '' THEN BEGIN
      ItemVariant.GET(Item."No.",SalesLine."Variant Code");
      PurchaseLine.Description := ItemVariant.Description;
      PurchaseLine."Description 2" := ItemVariant."Description 2";
      OnGetDescriptionFromItemVariant(PurchaseLine,ItemVariant); <=====================
      EXIT(TRUE);
    END;
    EXIT(FALSE)
Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnGetDescriptionFromSalesLine>
  Raised in: Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<GetDescriptionFromSalesLine>
    Code lines:
    IF (SalesLine.Description <> '') OR (SalesLine."Description 2" <> '') THEN BEGIN
      PurchaseLine.Description := SalesLine.Description;
      PurchaseLine."Description 2" := SalesLine."Description 2";
      OnGetDescriptionFromSalesLine(PurchaseLine,SalesLine); <=====================
      EXIT(TRUE);
    END;
    EXIT(FALSE);
Codeunit<Calendar Management>.PROCEDURE<OnBeforeCalcDateBOC>
  Raised in: Codeunit<Calendar Management>.PROCEDURE<CalcDateBOC>
    Code lines:
    OnBeforeCalcDateBOC( <=====================
      FirstCalCode,FirstSourceType,FirstSourceCode,FirstAddCode,
      SecondCalCode,SecondSourceType,SecondSourceCode,SecondAddCode,CalConvTimeFrame,Handled);
    
    IF NOT Handled THEN BEGIN
      IF (FirstSourceType = FirstSourceType::"Shipping Agent") AND
         ((FirstSourceCode = '') OR (FirstAddCode = ''))
      THEN BEGIN
        FirstSourceType := FirstSourceType::Company;
        FirstSourceCode := '';
    ...
Codeunit<Sales-Post and Send>.PROCEDURE<OnBeforePostAndSend>
  Raised in: Codeunit<Sales-Post and Send>.PROCEDURE<Code>
    Code lines:
    HideDialog := FALSE;
    
    OnBeforePostAndSend(SalesHeader,HideDialog); <=====================
    IF NOT HideDialog THEN
      WITH SalesHeader DO
        CASE "Document Type" OF
          "Document Type"::Invoice,
          "Document Type"::"Credit Memo",
          "Document Type"::Order:
            IF NOT ConfirmPostAndSend(SalesHeader,TempDocumentSendingProfile) THEN
    ...
Codeunit<AccSchedManagement>.PROCEDURE<OnAfterSetCFAccColumnFilter>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<SetCFAccColumnFilter>
    Code lines:
    ...
              CFAccount.SETRANGE("Date Filter",0D,AccountingPeriodMgt.FindEndOfFiscalYear(ToDate));
          END;
      END;
    END;
    
    OnAfterSetCFAccColumnFilter(CFAccount,AccSchedLine2,ColumnLayout2); <=====================
Codeunit<AccSchedManagement>.PROCEDURE<OnAfterSetCFAccRowFilter>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<SetCFAccRowFilter>
    Code lines:
    ...
            CFAccount.SETFILTER("Account Type",'<>%1',CFAccount."Account Type"::Entry);
          END;
      END;
    END;
    
    OnAfterSetCFAccRowFilter(CFAccount,AccSchedLine2); <=====================
Codeunit<AccSchedManagement>.PROCEDURE<OnAfterSetGLAccColumnFilters>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<SetGLAccColumnFilters>
    Code lines:
    ...
              GLAcc.SETRANGE("Date Filter",0D,AccountingPeriodMgt.FindEndOfFiscalYear(ToDate));
          END;
      END;
    END;
    
    OnAfterSetGLAccColumnFilters(GLAcc,AccSchedLine2,ColumnLayout) <=====================
Codeunit<AccSchedManagement>.PROCEDURE<OnAfterSetGLAccRowFilters>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<SetGLAccRowFilters>
    Code lines:
    ...
            GLAcc.SETFILTER("No.",Totaling);
            GLAcc.SETFILTER("Account Type",'<>%1',GLAcc."Account Type"::Posting);
          END;
      END;
    
    OnAfterSetGLAccRowFilters(GLAcc,AccSchedLine2); <=====================
Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeCalcCellExit>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<CalcCell>
    Code lines:
    ...
      END;
    END;
    IF AccSchedLine."Show Opposite Sign" THEN
      Result := -Result;
    
    OnBeforeCalcCellExit(AccSchedLine,ColumnLayout,CalcAddCurr,Result); <=====================
    EXIT(Result);
Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeCalcCFAcc>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<CalcCFAccount>
    Code lines:
    ColValue := 0;
    IsHandled := FALSE;
    OnBeforeCalcCFAcc(CFAccount,AccSchedLine,ColumnLayout,ColValue,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(ColValue);
    
    IF AccSchedName.Name <> AccSchedLine."Schedule Name" THEN
      AccSchedName.GET(AccSchedLine."Schedule Name");
    
    IF ConflictAmountType(AccSchedLine,ColumnLayout."Amount Type",AmountType) THEN
    ...
Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeCalcCostType>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<CalcCostType>
    Code lines:
    ColValue := 0;
    IsHandled := FALSE;
    OnBeforeCalcCostType(CostType,AccSchedLine,ColumnLayout,CalcAddCurr,ColValue,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(ColValue);
    
    IF AccSchedName.Name <> AccSchedLine."Schedule Name" THEN
      AccSchedName.GET(AccSchedLine."Schedule Name");
    
    IF ConflictAmountType(AccSchedLine,ColumnLayout."Amount Type",AmountType) THEN
    ...
Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeCalcGLAcc>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<CalcGLAcc>
    Code lines:
    ColValue := 0;
    IsHandled := FALSE;
    OnBeforeCalcGLAcc(GLAcc,AccSchedLine,ColumnLayout,CalcAddCurr,ColValue,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(ColValue);
    
    UseDimFilter := FALSE;
    IF AccSchedName.Name <> AccSchedLine."Schedule Name" THEN
      AccSchedName.GET(AccSchedLine."Schedule Name");
    
    ...
Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeDrillDownFromOverviewPage>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<DrillDownFromOverviewPage>
    Code lines:
    IsHandled := FALSE;
    OnBeforeDrillDownFromOverviewPage(TempColumnLayout,AccScheduleLine,PeriodLength,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH AccScheduleLine DO BEGIN
      IF "Totaling Type" IN ["Totaling Type"::Formula,"Totaling Type"::"Set Base For Percent"] THEN
        MESSAGE(RowFormulaMsg,Totaling)
      ELSE
        DrillDown(TempColumnLayout,AccScheduleLine,PeriodLength);
Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeTestBalance>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<CalcGLAcc>
    Code lines:
    ...
            IF CalcAddCurr THEN
              ColValue := CalcLCYToACY(ColValue);
          END;
      END;
    
      OnBeforeTestBalance( <=====================
        GLAcc,AccSchedName,AccSchedLine,ColumnLayout,AmountType,ColValue,CalcAddCurr,TestBalance,GLEntry,GLBudgEntry);
    
      IF TestBalance THEN BEGIN
        IF AccSchedLine.Show = AccSchedLine.Show::"When Positive Balance" THEN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterCheckAndUpdate>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CheckAndUpdate>
    Code lines:
    ...
      InsertPostedHeaders(SalesHeader);
    
      UpdateIncomingDocument("Incoming Document Entry No.","Posting Date",GenJnlLineDocNo);
    END;
    
    OnAfterCheckAndUpdate(SalesHeader,SuppressCommit); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterCheckMandatoryFields>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CheckMandatoryHeaderFields>
    Code lines:
    ...
    SalesHeader.TESTFIELD("Sell-to Customer No.");
    SalesHeader.TESTFIELD("Bill-to Customer No.");
    SalesHeader.TESTFIELD("Posting Date");
    SalesHeader.TESTFIELD("Document Date");
    
    OnAfterCheckMandatoryFields(SalesHeader,SuppressCommit); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterCheckSalesDoc>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CheckAndUpdate>
    Code lines:
    ...
        ERROR(NothingToPostErr);
    
      IF ("Shipping Advice" = "Shipping Advice"::Complete) AND Ship THEN
        CheckShippingAdvice;
    
      OnAfterCheckSalesDoc(SalesHeader,SuppressCommit,WhseShip,WhseReceive); <=====================
    
      // Update
      IF Invoice THEN
        CreatePrepaymentLines(SalesHeader,TempPrepaymentSalesLine,TRUE);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterCheckTrackingAndWarehouseForReceive>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CheckTrackingAndWarehouseForReceive>
    Code lines:
    ...
      IF Receive THEN BEGIN
        CheckTrackingSpecification(SalesHeader,TempSalesLine);
        IF NOT (WhseReceive OR WhseShip OR InvtPickPutaway) THEN
          CheckWarehouse(TempSalesLine);
      END;
      OnAfterCheckTrackingAndWarehouseForReceive(SalesHeader,Receive,SuppressCommit,TempWhseShptHeader,TempWhseRcptHeader); <=====================
      EXIT(Receive);
    END;
Codeunit<Sales-Post>.PROCEDURE<OnAfterCheckTrackingAndWarehouseForShip>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CheckTrackingAndWarehouseForShip>
    Code lines:
    ...
      IF Ship THEN BEGIN
        CheckTrackingSpecification(SalesHeader,TempSalesLine);
        IF NOT (WhseShip OR WhseReceive OR InvtPickPutaway) THEN
          CheckWarehouse(TempSalesLine);
      END;
      OnAfterCheckTrackingAndWarehouseForShip(SalesHeader,Ship,SuppressCommit,TempWhseShptHeader,TempWhseRcptHeader); <=====================
      EXIT(Ship);
    END;
Codeunit<Sales-Post>.PROCEDURE<OnAfterDeleteAfterPosting>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<DeleteAfterPosting>
    Code lines:
    ...
      DeleteItemChargeAssgnt(SalesHeader);
      SalesCommentLine.DeleteComments("Document Type","No.");
      WarehouseRequest.DeleteRequest(DATABASE::"Sales Line","Document Type","No.");
    END;
    
    OnAfterDeleteAfterPosting(SalesHeader,SalesInvHeader,SalesCrMemoHeader,SuppressCommit); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterDivideAmount>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<DivideAmount>
    Code lines:
    ...
        TempVATAmountLineRemainder.MODIFY;
        IF "Deferral Code" <> '' THEN
          CalcDeferralAmounts(SalesHeader,SalesLine,OriginalDeferralAmount);
      END;
    
    OnAfterDivideAmount(SalesHeader,SalesLine,QtyType,SalesLineQty,TempVATAmountLine,TempVATAmountLineRemainder); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterFillInvoicePostBuffer>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<FillInvoicePostingBuffer>
    Code lines:
    ...
      ELSE
        SalesAccount := GenPostingSetup.GetSalesAccount;
    InvoicePostBuffer.SetAccount(SalesAccount,TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY);
    InvoicePostBuffer.UpdateVATBase(TotalVATBase,TotalVATBaseACY);
    InvoicePostBuffer."Deferral Code" := SalesLine."Deferral Code";
    OnAfterFillInvoicePostBuffer(InvoicePostBuffer,SalesLine,TempInvoicePostBuffer,SuppressCommit); <=====================
    UpdateInvoicePostBuffer(TempInvoicePostBuffer,InvoicePostBuffer,FALSE);
    IF SalesLine."Deferral Code" <> '' THEN BEGIN
      OnBeforeFillDeferralPostingBuffer(
        SalesLine,InvoicePostBuffer,TempInvoicePostBuffer,UseDate,InvDefLineNo,DeferralLineNo,SuppressCommit);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterFinalizePosting>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<FinalizePosting>
    Code lines:
    ...
          DeleteAfterPosting(SalesHeader);
      END;
    
      InsertValueEntryRelation;
    
      OnAfterFinalizePostingOnBeforeCommit( <=====================
        SalesHeader,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,GenJnlPostLine,SuppressCommit,PreviewMode);
    
      IF PreviewMode THEN BEGIN
        Window.CLOSE;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterFinalizePostingOnBeforeCommit>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<FinalizePosting>
    Code lines:
    ...
          DeleteAfterPosting(SalesHeader);
      END;
    
      InsertValueEntryRelation;
    
      OnAfterFinalizePostingOnBeforeCommit( <=====================
        SalesHeader,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,GenJnlPostLine,SuppressCommit,PreviewMode);
    
      IF PreviewMode THEN BEGIN
        Window.CLOSE;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterIncrAmount>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<IncrAmount>
    Code lines:
    ...
      Increment(TotalSalesLine."Prepmt Amt to Deduct","Prepmt Amt to Deduct");
      Increment(TotalSalesLine."Prepmt Amt Deducted","Prepmt Amt Deducted");
      Increment(TotalSalesLine."Prepayment VAT Difference","Prepayment VAT Difference");
      Increment(TotalSalesLine."Prepmt VAT Diff. to Deduct","Prepmt VAT Diff. to Deduct");
      Increment(TotalSalesLine."Prepmt VAT Diff. Deducted","Prepmt VAT Diff. Deducted");
      OnAfterIncrAmount(TotalSalesLine,SalesLine); <=====================
    END;
Codeunit<Sales-Post>.PROCEDURE<OnAfterInsertedPrepmtVATBaseToDeduct>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertedPrepmtVATBaseToDeduct>
    Code lines:
    ...
      "Attached to Line No." := PrepmtLineNo;
      "VAT Base Amount" := PrepmtVATBaseToDeduct;
      INSERT;
    END;
    
    OnAfterInsertedPrepmtVATBaseToDeduct( <=====================
      SalesHeader,SalesLine,PrepmtLineNo,TotalPrepmtAmtToDeduct,TempPrepmtDeductLCYSalesLine,PrepmtVATBaseToDeduct);
    
    EXIT(PrepmtVATBaseToDeduct);
Codeunit<Sales-Post>.PROCEDURE<OnAfterInvoiceRoundingAmount>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InvoiceRounding>
    Code lines:
    ...
        RoundingLineInserted := TRUE;
        RoundingLineNo := "Line No.";
      END;
    END;
    
    OnAfterInvoiceRoundingAmount(SalesHeader,SalesLine,TotalSalesLine,UseTempData,InvoiceRoundingAmount,SuppressCommit); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostBalancingEntry>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostBalancingEntry>
    Code lines:
    ...
          ROUND(CustLedgEntry."Remaining Pmt. Disc. Possible" / CustLedgEntry."Adjusted Currency Factor");
      "Allow Zero-Amount Posting" := TRUE;
    
      OnBeforePostBalancingEntry(GenJnlLine,SalesHeader,TotalSalesLine2,TotalSalesLineLCY2,SuppressCommit,PreviewMode);
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostBalancingEntry(GenJnlLine,SalesHeader,TotalSalesLine2,TotalSalesLineLCY2,SuppressCommit,GenJnlPostLine); <=====================
    END;
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostCustomerEntry>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostCustomerEntry>
    Code lines:
    ...
      "Profit (LCY)" := -(TotalSalesLineLCY2.Amount - TotalSalesLineLCY2."Unit Cost (LCY)");
      "Inv. Discount (LCY)" := -TotalSalesLineLCY2."Inv. Discount Amount";
    
      OnBeforePostCustomerEntry(GenJnlLine,SalesHeader,TotalSalesLine2,TotalSalesLineLCY2,SuppressCommit,PreviewMode);
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostCustomerEntry(GenJnlLine,SalesHeader,TotalSalesLine2,TotalSalesLineLCY2,SuppressCommit,GenJnlPostLine); <=====================
    END;
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostGLAndCustomer>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostGLAndCustomer>
    Code lines:
    ...
        PostBalancingEntry(
          SalesHeader,TotalSalesLine,TotalSalesLineLCY,GenJnlLineDocType,GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode);
      END;
    END;
    
    OnAfterPostGLAndCustomer(SalesHeader,GenJnlPostLine,TotalSalesLine,TotalSalesLineLCY,SuppressCommit); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostInvPostBuffer>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostInvoicePostBufferLine>
    Code lines:
    ...
        CopyFromInvoicePostBufferFA(InvoicePostBuffer);
      END;
    
      OnBeforePostInvPostBuffer(GenJnlLine,InvoicePostBuffer,SalesHeader,SuppressCommit,GenJnlPostLine,PreviewMode);
      GLEntryNo := RunGenJnlPostLine(GenJnlLine);
      OnAfterPostInvPostBuffer(GenJnlLine,InvoicePostBuffer,SalesHeader,GLEntryNo,SuppressCommit,GenJnlPostLine); <=====================
    END;
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostItemJnlLineWhseLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
            SalesLine,TempWhseTrackingSpecification,PostWhseJnlLine,QtyToBeInvoiced,TempATOTrackingSpecification)
        ELSE
          PostItemJnlLineTracking(SalesLine,TempWhseTrackingSpecification,PostWhseJnlLine,QtyToBeInvoiced,TempHandlingSpecification);
        PostItemJnlLineWhseLine(TempWhseJnlLine,TempWhseTrackingSpecification);
    
        OnAfterPostItemJnlLineWhseLine(SalesLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit); <=====================
    
        IF (SalesLine.Type = SalesLine.Type::Item) AND SalesHeader.Invoice THEN
          PostItemJnlLineItemCharges(SalesHeader,SalesLine,OriginalItemJnlLine,"Item Shpt. Entry No.");
      END;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostItemTrackingReturnRcpt>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemTrackingForReceipt>
    Code lines:
    ...
              0,0,
              QtyToBeInvoiced,
              QtyToBeInvoicedBase,
              // ReturnRcptLine."Item Rcpt. Entry No."
              ItemEntryRelation."Item Entry No.",'',TempTrackingSpecification,FALSE);
          OnAfterPostItemTrackingReturnRcpt(SalesInvHeader,SalesShptLine,TempTrackingSpecification,TrackingSpecificationExists); <=====================
          IF TrackingSpecificationExists THEN
            EndLoop := (TempTrackingSpecification.NEXT = 0) OR (RemQtyToBeInvoiced = 0)
          ELSE
            EndLoop :=
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostSalesDoc>
  Raised in: Codeunit<Sales-Post>.<OnRun>
    Code lines:
    ...
      COMMIT;
      UpdateAnalysisView.UpdateAll(0,TRUE);
      UpdateItemAnalysisView.UpdateAll(0,TRUE);
    END;
    
    OnAfterPostSalesDoc( <=====================
      Rec,GenJnlPostLine,SalesShptHeader."No.",ReturnRcptHeader."No.",SalesInvHeader."No.",SalesCrMemoHeader."No.",SuppressCommit);
    OnAfterPostSalesDocDropShipment(PurchRcptHeader."No.",SuppressCommit); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostSalesDocDropShipment>
  Raised in: Codeunit<Sales-Post>.<OnRun>
    Code lines:
    ...
      UpdateItemAnalysisView.UpdateAll(0,TRUE);
    END;
    
    OnAfterPostSalesDoc(
      Rec,GenJnlPostLine,SalesShptHeader."No.",ReturnRcptHeader."No.",SalesInvHeader."No.",SalesCrMemoHeader."No.",SuppressCommit);
    OnAfterPostSalesDocDropShipment(PurchRcptHeader."No.",SuppressCommit); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostSalesLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostSalesLine>
    Code lines:
    ...
          CreatePostedDeferralScheduleFromSalesDoc(xSalesLine,SalesCrMemoLine.GetDocumentType,
            SalesCrMemoHeader."No.",SalesCrMemoLine."Line No.",SalesCrMemoHeader."Posting Date");
        END;
    END;
    
    OnAfterPostSalesLine(SalesHeader,SalesLine,SuppressCommit); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostSalesLines>
  Raised in: Codeunit<Sales-Post>.<OnRun>
    Code lines:
    ...
          IF LastLineRetrieved AND SalesSetup."Invoice Rounding" THEN
            InvoiceRounding(SalesHeader,SalesLine,FALSE,BiggestLineNo);
        END;
      UNTIL LastLineRetrieved;
    
    OnAfterPostSalesLines( <=====================
      SalesHeader,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,WhseShip,WhseReceive,SalesLinesProcessed,
      SuppressCommit);
    
    IF NOT SalesHeader.IsCreditDocType THEN BEGIN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostUpdateOrderLineModifyTempLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostUpdateOrderLine>
    Code lines:
    ...
          IF ("Purch. Order Line No." <> 0) AND (Quantity = "Quantity Invoiced") THEN
            UpdateAssocLines(TempSalesLine);
          SetDefaultQuantity;
          ModifyTempLine(TempSalesLine);
    
          OnAfterPostUpdateOrderLineModifyTempLine(TempSalesLine,WhseShip,WhseReceive,SuppressCommit); <=====================
        UNTIL NEXT = 0;
    END;
Codeunit<Sales-Post>.PROCEDURE<OnAfterReleaseSalesDoc>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<ReleaseSalesDocument>
    Code lines:
    ...
        RefreshTempLines(SalesHeader,TempSalesLineGlobal);
      TESTFIELD(Status,Status::Released);
      Status := SavedStatus;
      RestoreSalesHeader(SalesHeader,SalesHeaderCopy);
      ReopenAsmOrders(TempAsmHeader);
      OnAfterReleaseSalesDoc(SalesHeader); <=====================
      IF NOT (PreviewMode OR SuppressCommit) THEN BEGIN
        MODIFY;
        COMMIT;
      END;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterResetTempLines>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<ResetTempLines>
    Code lines:
    TempSalesLineLocal.RESET;
    TempSalesLineLocal.COPY(TempSalesLineGlobal,TRUE);
    OnAfterResetTempLines(TempSalesLineLocal); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterReturnRcptHeaderInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertReturnReceiptHeader>
    Code lines:
    ...
        ReturnRcptHeader."Source Code" := SrcCode;
        ReturnRcptHeader."User ID" := USERID;
        ReturnRcptHeader."No. Printed" := 0;
        OnBeforeReturnRcptHeaderInsert(ReturnRcptHeader,SalesHeader,SuppressCommit);
        ReturnRcptHeader.INSERT(TRUE);
        OnAfterReturnRcptHeaderInsert(ReturnRcptHeader,SalesHeader,SuppressCommit); <=====================
    
        ApprovalsMgmt.PostApprovalEntries(RECORDID,ReturnRcptHeader.RECORDID,ReturnRcptHeader."No.");
    
        IF SalesSetup."Copy Cmts Ret.Ord. to Ret.Rcpt" THEN BEGIN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterReturnRcptLineInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertReturnReceiptLine>
    Code lines:
    ...
      ReturnRcptLine."Item Charge Base Amount" :=
        ROUND(CostBaseAmount / SalesLine.Quantity * ReturnRcptLine.Quantity);
    END;
    OnBeforeReturnRcptLineInsert(ReturnRcptLine,ReturnRcptHeader,SalesLine,SuppressCommit);
    ReturnRcptLine.INSERT(TRUE);
    OnAfterReturnRcptLineInsert(ReturnRcptLine,ReturnRcptHeader,SalesLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterReverseAmount>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<ReverseAmount>
    Code lines:
    ...
      "VAT Base Amount" := -"VAT Base Amount";
      "VAT Difference" := -"VAT Difference";
      "Amount Including VAT" := -"Amount Including VAT";
      "Line Discount Amount" := -"Line Discount Amount";
      "Inv. Discount Amount" := -"Inv. Discount Amount";
      OnAfterReverseAmount(SalesLine); <=====================
    END;
Codeunit<Sales-Post>.PROCEDURE<OnAfterRoundAmount>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<RoundAmount>
    Code lines:
    ...
      END;
      IncrAmount(SalesHeader,SalesLine,TotalSalesLineLCY);
      Increment(TotalSalesLineLCY."Unit Cost (LCY)",ROUND(SalesLineQty * "Unit Cost (LCY)"));
    END;
    
    OnAfterRoundAmount(SalesHeader,SalesLine,SalesLineQty); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesCrMemoHeaderInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertCrMemoHeader>
    Code lines:
    ...
      SalesCrMemoHeader."Source Code" := SrcCode;
      SalesCrMemoHeader."User ID" := USERID;
      SalesCrMemoHeader."No. Printed" := 0;
      OnBeforeSalesCrMemoHeaderInsert(SalesCrMemoHeader,SalesHeader,SuppressCommit);
      SalesCrMemoHeader.INSERT(TRUE);
      OnAfterSalesCrMemoHeaderInsert(SalesCrMemoHeader,SalesHeader,SuppressCommit); <=====================
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,SalesCrMemoHeader.RECORDID,SalesCrMemoHeader."No.");
    
      IF SalesSetup."Copy Cmts Ret.Ord. to Cr. Memo" THEN BEGIN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesCrMemoLineInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostSalesLine>
    Code lines:
    ...
            SalesCrMemoLine."Order No." := "Document No.";
            SalesCrMemoLine."Order Line No." := "Line No.";
          END;
          OnBeforeSalesCrMemoLineInsert(SalesCrMemoLine,SalesCrMemoHeader,xSalesLine,SuppressCommit);
          SalesCrMemoLine.INSERT(TRUE);
          OnAfterSalesCrMemoLineInsert( <=====================
            SalesCrMemoLine,SalesCrMemoHeader,SalesHeader,xSalesLine,TempItemChargeAssgntSales,SuppressCommit);
          CreatePostedDeferralScheduleFromSalesDoc(xSalesLine,SalesCrMemoLine.GetDocumentType,
            SalesCrMemoHeader."No.",SalesCrMemoLine."Line No.",SalesCrMemoHeader."Posting Date");
        END;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesInvHeaderInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertInvoiceHeader>
    Code lines:
    ...
      SalesInvHeader."User ID" := USERID;
      SalesInvHeader."No. Printed" := 0;
      SetPaymentInstructions(SalesHeader);
      OnBeforeSalesInvHeaderInsert(SalesInvHeader,SalesHeader,SuppressCommit);
      SalesInvHeader.INSERT(TRUE);
      OnAfterSalesInvHeaderInsert(SalesInvHeader,SalesHeader,SuppressCommit); <=====================
    
      UpdateWonOpportunities(SalesHeader);
      SegManagement.CreateCampaignEntryOnSalesInvoicePosting(SalesInvHeader);
    
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesInvLineInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostSalesLine>
    Code lines:
    ...
              SalesInvLine."Order No." := SalesShptLine."Order No.";
              SalesInvLine."Order Line No." := SalesShptLine."Order Line No.";
            END;
          OnBeforeSalesInvLineInsert(SalesInvLine,SalesInvHeader,xSalesLine,SuppressCommit);
          SalesInvLine.INSERT(TRUE);
          OnAfterSalesInvLineInsert( <=====================
            SalesInvLine,SalesInvHeader,xSalesLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit,SalesHeader);
          CreatePostedDeferralScheduleFromSalesDoc(xSalesLine,SalesInvLine.GetDocumentType,
            SalesInvHeader."No.",SalesInvLine."Line No.",SalesInvHeader."Posting Date");
        END ELSE BEGIN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesShptHeaderInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertShipmentHeader>
    Code lines:
    ...
      SalesShptHeader."Source Code" := SrcCode;
      SalesShptHeader."User ID" := USERID;
      SalesShptHeader."No. Printed" := 0;
      OnBeforeSalesShptHeaderInsert(SalesShptHeader,SalesHeader,SuppressCommit);
      SalesShptHeader.INSERT(TRUE);
      OnAfterSalesShptHeaderInsert(SalesShptHeader,SalesHeader,SuppressCommit); <=====================
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,SalesShptHeader.RECORDID,SalesShptHeader."No.");
    
      IF SalesSetup."Copy Comments Order to Shpt." THEN BEGIN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesShptLineInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertShipmentLine>
    Code lines:
    ...
      SalesShptLine."Item Charge Base Amount" :=
        ROUND(CostBaseAmount / SalesLine.Quantity * SalesShptLine.Quantity);
    END;
    OnBeforeSalesShptLineInsert(SalesShptLine,SalesShptHeader,SalesLine,SuppressCommit);
    SalesShptLine.INSERT(TRUE);
    OnAfterSalesShptLineInsert(SalesShptLine,SalesLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit); <=====================
    
    CheckCertificateOfSupplyStatus(SalesShptHeader,SalesShptLine);
    
    OnInvoiceSalesShptLine(SalesShptLine,SalesInvHeader."No.",xSalesLine."Line No.",xSalesLine."Qty. to Invoice",SuppressCommit);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterSetApplyToDocNo>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<SetApplyToDocNo>
    Code lines:
    ...
      "Bal. Account No." := SalesHeader."Bal. Account No.";
      "Applies-to Doc. Type" := DocType;
      "Applies-to Doc. No." := DocNo;
    END;
    
    OnAfterSetApplyToDocNo(GenJnlLine,SalesHeader); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterTestSalesLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<TestSalesLine>
    Code lines:
    ...
        SalesLine.TESTFIELD("Use Duplication List",FALSE);
      END;
      IF NOT ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) THEN
        SalesLine.TESTFIELD("Job No.",'');
    
      OnAfterTestSalesLine(SalesHeader,SalesLine,WhseShip,WhseReceive,SuppressCommit); <=====================
    END;
Codeunit<Sales-Post>.PROCEDURE<OnAfterUpdatePostingNos>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<UpdatePostingNos>
    Code lines:
    ...
            "Posting No." := PostingPreviewNoTok;
        END;
      END;
    END;
    
    OnAfterUpdatePostingNos(SalesHeader,NoSeriesMgt,SuppressCommit); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterUpdatePrepmtSalesLineWithRounding>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<UpdatePrepmtSalesLineWithRounding>
    Code lines:
    ...
        TotalSalesLine."Amount Including VAT" := 0;
        TotalSalesLineLCY."Amount Including VAT" := 0;
      END;
    END;
    
    OnAfterUpdatePrepmtSalesLineWithRounding( <=====================
      PrepmtSalesLine,TotalRoundingAmount,TotalPrepmtAmount,FinalInvoice,PricesInclVATRoundingAmount,
      TotalSalesLine,TotalSalesLineLCY);
Codeunit<Sales-Post>.PROCEDURE<OnBeforeDeleteAfterPosting>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<DeleteAfterPosting>
    Code lines:
    OnBeforeDeleteAfterPosting(SalesHeader,SalesInvHeader,SalesCrMemoHeader,SkipDelete,SuppressCommit); <=====================
    IF SkipDelete THEN
      EXIT;
    
    WITH SalesHeader DO BEGIN
      IF HASLINKS THEN
        DELETELINKS;
      DELETE;
      ReserveSalesLine.DeleteInvoiceSpecFromHeader(SalesHeader);
      DeleteATOLinks(SalesHeader);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeDivideAmount>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<DivideAmount>
    Code lines:
    IF RoundingLineInserted AND (RoundingLineNo = SalesLine."Line No.") THEN
      EXIT;
    
    OnBeforeDivideAmount(SalesHeader,SalesLine,QtyType,SalesLineQty,TempVATAmountLine,TempVATAmountLineRemainder); <=====================
    
    WITH SalesLine DO
      IF (SalesLineQty = 0) OR ("Unit Price" = 0) THEN BEGIN
        "Line Amount" := 0;
        "Line Discount Amount" := 0;
        "Inv. Discount Amount" := 0;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeFillDeferralPostingBuffer>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<FillInvoicePostingBuffer>
    Code lines:
    ...
    InvoicePostBuffer.UpdateVATBase(TotalVATBase,TotalVATBaseACY);
    InvoicePostBuffer."Deferral Code" := SalesLine."Deferral Code";
    OnAfterFillInvoicePostBuffer(InvoicePostBuffer,SalesLine,TempInvoicePostBuffer,SuppressCommit);
    UpdateInvoicePostBuffer(TempInvoicePostBuffer,InvoicePostBuffer,FALSE);
    IF SalesLine."Deferral Code" <> '' THEN BEGIN
      OnBeforeFillDeferralPostingBuffer( <=====================
        SalesLine,InvoicePostBuffer,TempInvoicePostBuffer,UseDate,InvDefLineNo,DeferralLineNo,SuppressCommit);
      FillDeferralPostingBuffer(SalesHeader,SalesLine,InvoicePostBuffer,AmtToDefer,AmtToDeferACY,DeferralAccount,SalesAccount);
    END;
Codeunit<Sales-Post>.PROCEDURE<OnBeforeFinalizePosting>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<FinalizePosting>
    Code lines:
    OnBeforeFinalizePosting(SalesHeader,TempSalesLineGlobal,EverythingInvoiced,SuppressCommit); <=====================
    
    WITH SalesHeader DO BEGIN
      IF ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"]) AND
         (NOT EverythingInvoiced)
      THEN BEGIN
        MODIFY;
        InsertTrackingSpecification(SalesHeader);
        PostUpdateOrderLine(SalesHeader);
        UpdateAssocOrder(TempDropShptPostBuffer);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeGetCountryCode>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<GetCountryCode>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetCountryCode(SalesHeader,SalesLine,CountryRegionCode,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(CountryRegionCode);
    
    IF SalesLine."Shipment No." <> '' THEN BEGIN
      SalesShipmentHeader.GET(SalesLine."Shipment No.");
      EXIT(
        GetCountryRegionCode(
          SalesLine."Sell-to Customer No.",
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeInsertICGenJnlLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertICGenJnlLine>
    Code lines:
    ...
          Amount := -SalesLine.Amount;
      END;
      IF "Bal. VAT %" <> 0 THEN
        Amount := ROUND(Amount * (1 + "Bal. VAT %" / 100),Currency."Amount Rounding Precision");
      VALIDATE(Amount);
      OnBeforeInsertICGenJnlLine(TempICGenJnlLine,SalesHeader,SalesLine,SuppressCommit); <=====================
      INSERT;
    END;
Codeunit<Sales-Post>.PROCEDURE<OnBeforeInsertReturnReceiptHeader>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertReturnReceiptHeader>
    Code lines:
    OnBeforeInsertReturnReceiptHeader(SalesHeader,ReturnRcptHeader,IsHandled,SuppressCommit); <=====================
    
    WITH SalesHeader DO BEGIN
      IF NOT IsHandled THEN BEGIN
        ReturnRcptHeader.INIT;
        ReturnRcptHeader.TRANSFERFIELDS(SalesHeader);
        ReturnRcptHeader."No." := "Return Receipt No.";
        IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
          ReturnRcptHeader."Return Order No. Series" := "No. Series";
          ReturnRcptHeader."Return Order No." := "No.";
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeInvoiceRoundingAmount>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InvoiceRounding>
    Code lines:
    ...
        TotalSalesLine."Amount Including VAT" -
        ROUND(
          TotalSalesLine."Amount Including VAT",Currency."Invoice Rounding Precision",Currency.InvoiceRoundingDirection),
        Currency."Amount Rounding Precision");
    
    OnBeforeInvoiceRoundingAmount( <=====================
      SalesHeader,TotalSalesLine."Amount Including VAT",UseTempData,InvoiceRoundingAmount,SuppressCommit);
    IF InvoiceRoundingAmount <> 0 THEN BEGIN
      CustPostingGr.GET(SalesHeader."Customer Posting Group");
      WITH SalesLine DO BEGIN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeItemJnlPostLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
          IF CheckApplFromItemEntry AND SalesLine.IsInventoriableItem THEN
            SalesLine.TESTFIELD("Appl.-from Item Entry");
        END;
    
        OriginalItemJnlLine := ItemJnlLine;
        OnBeforeItemJnlPostLine(ItemJnlLine,SalesLine,SalesHeader,SuppressCommit); <=====================
        ItemJnlPostLine.RunWithCheck(ItemJnlLine);
    
        IF IsATO THEN
          PostItemJnlLineTracking(
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostAssocItemJnlLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostAssocItemJnlLine>
    Code lines:
    ...
      "Applies-to Entry" := 0;
    END;
    
    IF PurchOrderLine."Job No." = '' THEN BEGIN
      TransferReservFromPurchLine(PurchOrderLine,ItemJnlLine,SalesLine,QtyToBeShippedBase);
      OnBeforePostAssocItemJnlLine(ItemJnlLine,PurchOrderLine,SuppressCommit); <=====================
      ItemJnlPostLine.RunWithCheck(ItemJnlLine);
    
      // Handle Item Tracking
      IF ItemJnlPostLine.CollectTrackingSpecification(TempHandlingSpecification2) THEN BEGIN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostBalancingEntry>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostBalancingEntry>
    Code lines:
    ...
        "Amount (LCY)" :=
          TotalSalesLineLCY2."Amount Including VAT" +
          ROUND(CustLedgEntry."Remaining Pmt. Disc. Possible" / CustLedgEntry."Adjusted Currency Factor");
      "Allow Zero-Amount Posting" := TRUE;
    
      OnBeforePostBalancingEntry(GenJnlLine,SalesHeader,TotalSalesLine2,TotalSalesLineLCY2,SuppressCommit,PreviewMode); <=====================
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostBalancingEntry(GenJnlLine,SalesHeader,TotalSalesLine2,TotalSalesLineLCY2,SuppressCommit,GenJnlPostLine);
    END;
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostCommitSalesDoc>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CheckAndUpdate>
    Code lines:
    ...
    
      ModifyHeader := UpdatePostingNos(SalesHeader);
    
      DropShipOrder := UpdateAssosOrderPostingNos(SalesHeader);
    
      OnBeforePostCommitSalesDoc(SalesHeader,GenJnlPostLine,PreviewMode,ModifyHeader,SuppressCommit,TempSalesLineGlobal); <=====================
      IF NOT PreviewMode AND ModifyHeader THEN BEGIN
        MODIFY;
        IF NOT SuppressCommit THEN
          COMMIT;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostCustomerEntry>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostCustomerEntry>
    Code lines:
    ...
      "Amount (LCY)" := -TotalSalesLineLCY2."Amount Including VAT";
      "Sales/Purch. (LCY)" := -TotalSalesLineLCY2.Amount;
      "Profit (LCY)" := -(TotalSalesLineLCY2.Amount - TotalSalesLineLCY2."Unit Cost (LCY)");
      "Inv. Discount (LCY)" := -TotalSalesLineLCY2."Inv. Discount Amount";
    
      OnBeforePostCustomerEntry(GenJnlLine,SalesHeader,TotalSalesLine2,TotalSalesLineLCY2,SuppressCommit,PreviewMode); <=====================
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostCustomerEntry(GenJnlLine,SalesHeader,TotalSalesLine2,TotalSalesLineLCY2,SuppressCommit,GenJnlPostLine);
    END;
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostGLAndCustomer>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostGLAndCustomer>
    Code lines:
    OnBeforePostGLAndCustomer(SalesHeader,TempInvoicePostBuffer,CustLedgEntry,SuppressCommit,PreviewMode); <=====================
    
    WITH SalesHeader DO BEGIN
      // Post sales and VAT to G/L entries from posting buffer
      PostInvoicePostBuffer(SalesHeader,TempInvoicePostBuffer);
    
      // Post customer entry
      IF GUIALLOWED THEN
        Window.UPDATE(4,1);
      PostCustomerEntry(
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostInvPostBuffer>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostInvoicePostBufferLine>
    Code lines:
    ...
      IF InvoicePostBuffer.Type = InvoicePostBuffer.Type::"Fixed Asset" THEN BEGIN
        "FA Posting Type" := "FA Posting Type"::Disposal;
        CopyFromInvoicePostBufferFA(InvoicePostBuffer);
      END;
    
      OnBeforePostInvPostBuffer(GenJnlLine,InvoicePostBuffer,SalesHeader,SuppressCommit,GenJnlPostLine,PreviewMode); <=====================
      GLEntryNo := RunGenJnlPostLine(GenJnlLine);
      OnAfterPostInvPostBuffer(GenJnlLine,InvoicePostBuffer,SalesHeader,GLEntryNo,SuppressCommit,GenJnlPostLine);
    END;
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostItemChargePerOrder>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemChargePerOrder>
    Code lines:
    OnBeforePostItemChargePerOrder(SalesHeader,SalesLine,ItemJnlLine2,ItemChargeSalesLine,SuppressCommit); <=====================
    
    WITH TempItemChargeAssgntSales DO BEGIN
      SalesLine.TESTFIELD("Job No.",'');
      SalesLine.TESTFIELD("Allow Item Charge Assignment",TRUE);
      ItemJnlLine2."Document No." := GenJnlLineDocNo;
      ItemJnlLine2."External Document No." := GenJnlLineExtDocNo;
      ItemJnlLine2."Item Charge No." := "Item Charge No.";
      ItemJnlLine2.Description := ItemChargeSalesLine.Description;
      ItemJnlLine2."Unit of Measure Code" := '';
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostItemJnlLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemJnlLine>
    Code lines:
    IF NOT ItemJnlRollRndg THEN BEGIN
      RemAmt := 0;
      RemDiscAmt := 0;
    END;
    
    OnBeforePostItemJnlLine( <=====================
      SalesHeader,SalesLine,QtyToBeShipped,QtyToBeShippedBase,QtyToBeInvoiced,QtyToBeInvoicedBase,
      ItemLedgShptEntryNo,ItemChargeNo,TrackingSpecification,IsATO,SuppressCommit);
    
    WITH ItemJnlLine DO BEGIN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostLines>
  Raised in: Codeunit<Sales-Post>.<OnRun>
    Code lines:
    ...
    // Lines
    SalesLine.RESET;
    SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
    SalesLine.SETRANGE("Document No.",SalesHeader."No.");
    
    OnBeforePostLines(SalesLine,SalesHeader,SuppressCommit,PreviewMode); <=====================
    
    LineCount := 0;
    RoundingLineInserted := FALSE;
    MergeSaleslines(SalesHeader,SalesLine,TempPrepaymentSalesLine,TempCombinedSalesLine);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostSalesDoc>
  Raised in: Codeunit<Sales-Post>.<OnRun>
    Code lines:
    OnBeforePostSalesDoc(Rec,SuppressCommit,PreviewMode); <=====================
    
    ValidatePostingAndDocumentDate(Rec);
    
    SavedPreviewMode := PreviewMode;
    SavedSuppressCommit := SuppressCommit;
    ClearAllVariables;
    SuppressCommit := SavedSuppressCommit;
    PreviewMode := SavedPreviewMode;
    
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostUpdateOrderLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostUpdateOrderLine>
    Code lines:
    OnBeforePostUpdateOrderLine(SalesHeader,TempSalesLineGlobal,SuppressCommit); <=====================
    
    ResetTempLines(TempSalesLine);
    WITH TempSalesLine DO BEGIN
      SETFILTER(Quantity,'<>0');
      IF FINDSET THEN
        REPEAT
          OnPostUpdateOrderLineOnBeforeInitTempSalesLineQuantities(SalesHeader,TempSalesLine);
          IF SalesHeader.Ship THEN BEGIN
            "Quantity Shipped" += "Qty. to Ship";
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeReleaseSalesDoc>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<ReleaseSalesDocument>
    Code lines:
    ...
        EXIT;
    
      SalesHeaderCopy := SalesHeader;
      SavedStatus := Status;
      GetOpenLinkedATOs(TempAsmHeader);
      OnBeforeReleaseSalesDoc(SalesHeader); <=====================
      LinesWereModified := ReleaseSalesDocument.ReleaseSalesHeader(SalesHeader,PreviewMode);
      IF LinesWereModified THEN
        RefreshTempLines(SalesHeader,TempSalesLineGlobal);
      TESTFIELD(Status,Status::Released);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeReturnRcptHeaderInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertReturnReceiptHeader>
    Code lines:
    ...
        END;
        ReturnRcptHeader."No. Series" := "Return Receipt No. Series";
        ReturnRcptHeader."Source Code" := SrcCode;
        ReturnRcptHeader."User ID" := USERID;
        ReturnRcptHeader."No. Printed" := 0;
        OnBeforeReturnRcptHeaderInsert(ReturnRcptHeader,SalesHeader,SuppressCommit); <=====================
        ReturnRcptHeader.INSERT(TRUE);
        OnAfterReturnRcptHeaderInsert(ReturnRcptHeader,SalesHeader,SuppressCommit);
    
        ApprovalsMgmt.PostApprovalEntries(RECORDID,ReturnRcptHeader.RECORDID,ReturnRcptHeader."No.");
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeReturnRcptLineInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertReturnReceiptLine>
    Code lines:
    ...
      ReturnRcptLine."Item Rcpt. Entry No." :=
        InsertReturnEntryRelation(ReturnRcptLine); // ItemLedgShptEntryNo;
      ReturnRcptLine."Item Charge Base Amount" :=
        ROUND(CostBaseAmount / SalesLine.Quantity * ReturnRcptLine.Quantity);
    END;
    OnBeforeReturnRcptLineInsert(ReturnRcptLine,ReturnRcptHeader,SalesLine,SuppressCommit); <=====================
    ReturnRcptLine.INSERT(TRUE);
    OnAfterReturnRcptLineInsert(ReturnRcptLine,ReturnRcptHeader,SalesLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit);
Codeunit<Sales-Post>.PROCEDURE<OnBeforeRoundAmount>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<RoundAmount>
    Code lines:
    OnBeforeRoundAmount(SalesHeader,SalesLine,SalesLineQty); <=====================
    
    WITH SalesLine DO BEGIN
      IncrAmount(SalesHeader,SalesLine,TotalSalesLine);
      Increment(TotalSalesLine."Net Weight",ROUND(SalesLineQty * "Net Weight",0.00001));
      Increment(TotalSalesLine."Gross Weight",ROUND(SalesLineQty * "Gross Weight",0.00001));
      Increment(TotalSalesLine."Unit Volume",ROUND(SalesLineQty * "Unit Volume",0.00001));
      Increment(TotalSalesLine.Quantity,SalesLineQty);
      IF "Units per Parcel" > 0 THEN
        Increment(
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesCrMemoHeaderInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertCrMemoHeader>
    Code lines:
    ...
        END;
      END;
      SalesCrMemoHeader."Source Code" := SrcCode;
      SalesCrMemoHeader."User ID" := USERID;
      SalesCrMemoHeader."No. Printed" := 0;
      OnBeforeSalesCrMemoHeaderInsert(SalesCrMemoHeader,SalesHeader,SuppressCommit); <=====================
      SalesCrMemoHeader.INSERT(TRUE);
      OnAfterSalesCrMemoHeaderInsert(SalesCrMemoHeader,SalesHeader,SuppressCommit);
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,SalesCrMemoHeader.RECORDID,SalesCrMemoHeader."No.");
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesCrMemoLineInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostSalesLine>
    Code lines:
    ...
          ItemJnlPostLine.CollectValueEntryRelation(TempValueEntryRelation,SalesCrMemoLine.RowID1);
          IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
            SalesCrMemoLine."Order No." := "Document No.";
            SalesCrMemoLine."Order Line No." := "Line No.";
          END;
          OnBeforeSalesCrMemoLineInsert(SalesCrMemoLine,SalesCrMemoHeader,xSalesLine,SuppressCommit); <=====================
          SalesCrMemoLine.INSERT(TRUE);
          OnAfterSalesCrMemoLineInsert(
            SalesCrMemoLine,SalesCrMemoHeader,SalesHeader,xSalesLine,TempItemChargeAssgntSales,SuppressCommit);
          CreatePostedDeferralScheduleFromSalesDoc(xSalesLine,SalesCrMemoLine.GetDocumentType,
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesInvHeaderInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertInvoiceHeader>
    Code lines:
    ...
        Window.UPDATE(1,STRSUBSTNO(InvoiceNoMsg,"Document Type","No.",SalesInvHeader."No."));
      SalesInvHeader."Source Code" := SrcCode;
      SalesInvHeader."User ID" := USERID;
      SalesInvHeader."No. Printed" := 0;
      SetPaymentInstructions(SalesHeader);
      OnBeforeSalesInvHeaderInsert(SalesInvHeader,SalesHeader,SuppressCommit); <=====================
      SalesInvHeader.INSERT(TRUE);
      OnAfterSalesInvHeaderInsert(SalesInvHeader,SalesHeader,SuppressCommit);
    
      UpdateWonOpportunities(SalesHeader);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesInvLineInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostSalesLine>
    Code lines:
    ...
          END ELSE
            IF SalesShptLine.GET("Shipment No.","Shipment Line No.") THEN BEGIN
              SalesInvLine."Order No." := SalesShptLine."Order No.";
              SalesInvLine."Order Line No." := SalesShptLine."Order Line No.";
            END;
          OnBeforeSalesInvLineInsert(SalesInvLine,SalesInvHeader,xSalesLine,SuppressCommit); <=====================
          SalesInvLine.INSERT(TRUE);
          OnAfterSalesInvLineInsert(
            SalesInvLine,SalesInvHeader,xSalesLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit,SalesHeader);
          CreatePostedDeferralScheduleFromSalesDoc(xSalesLine,SalesInvLine.GetDocumentType,
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesLineDeleteAll>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<DeleteAfterPosting>
    Code lines:
    ...
            TempSalesLine.DELETELINKS;
        UNTIL TempSalesLine.NEXT = 0;
    
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      OnBeforeSalesLineDeleteAll(SalesLine,SuppressCommit); <=====================
      SalesLine.DELETEALL;
      IF IdentityManagement.IsInvAppId AND CustInvoiceDisc.GET("Invoice Disc. Code") THEN
        CustInvoiceDisc.DELETE; // Cleanup of autogenerated cust. invoice discounts
    
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesShptHeaderInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertShipmentHeader>
    Code lines:
    ...
          TESTFIELD("External Document No.");
      END;
      SalesShptHeader."Source Code" := SrcCode;
      SalesShptHeader."User ID" := USERID;
      SalesShptHeader."No. Printed" := 0;
      OnBeforeSalesShptHeaderInsert(SalesShptHeader,SalesHeader,SuppressCommit); <=====================
      SalesShptHeader.INSERT(TRUE);
      OnAfterSalesShptHeaderInsert(SalesShptHeader,SalesHeader,SuppressCommit);
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,SalesShptHeader.RECORDID,SalesShptHeader."No.");
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesShptLineInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertShipmentLine>
    Code lines:
    ...
      SalesShptLine."Item Shpt. Entry No." :=
        InsertShptEntryRelation(SalesShptLine); // ItemLedgShptEntryNo
      SalesShptLine."Item Charge Base Amount" :=
        ROUND(CostBaseAmount / SalesLine.Quantity * SalesShptLine.Quantity);
    END;
    OnBeforeSalesShptLineInsert(SalesShptLine,SalesShptHeader,SalesLine,SuppressCommit); <=====================
    SalesShptLine.INSERT(TRUE);
    OnAfterSalesShptLineInsert(SalesShptLine,SalesLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit);
    
    CheckCertificateOfSupplyStatus(SalesShptHeader,SalesShptLine);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeTempPrepmtSalesLineInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CreatePrepaymentLines>
    Code lines:
    ...
              TempPrepmtSalesLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
              TempPrepmtSalesLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
              TempPrepmtSalesLine."Dimension Set ID" := "Dimension Set ID";
              TempPrepmtSalesLine."Line No." := NextLineNo;
              NextLineNo := NextLineNo + 10000;
              OnBeforeTempPrepmtSalesLineInsert(TempPrepmtSalesLine,TempSalesLine,SalesHeader,CompleteFunctionality); <=====================
              TempPrepmtSalesLine.INSERT;
    
              TransferExtText.PrepmtGetAnyExtText(
                TempPrepmtSalesLine."No.",DATABASE::"Sales Invoice Line",
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeTempPrepmtSalesLineModify>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CreatePrepaymentLines>
    Code lines:
    ...
                "Unit Price",TempPrepmtSalesLine."Unit Price" + "Prepmt Amt to Deduct");
              TempPrepmtSalesLine.VALIDATE("VAT Difference",VATDifference - "Prepmt VAT Diff. to Deduct");
              TempPrepmtSalesLine."Prepmt Amt to Deduct" := PrepmtAmtToDeduct;
              IF "Prepayment %" < TempPrepmtSalesLine."Prepayment %" THEN
                TempPrepmtSalesLine."Prepayment %" := "Prepayment %";
              OnBeforeTempPrepmtSalesLineModify(TempPrepmtSalesLine,TempSalesLine,SalesHeader,CompleteFunctionality); <=====================
              TempPrepmtSalesLine.MODIFY;
            END ELSE BEGIN
              TempPrepmtSalesLine.INIT;
              TempPrepmtSalesLine."Document Type" := SalesHeader."Document Type";
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeTestSalesLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<TestSalesLine>
    Code lines:
    OnBeforeTestSalesLine(SalesHeader,SalesLine,SuppressCommit); <=====================
    
    WITH SalesHeader DO BEGIN
      IF SalesLine.Type = SalesLine.Type::Item THEN
        DummyTrackingSpecification.CheckItemTrackingQuantity(
          DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.",
          SalesLine."Qty. to Ship (Base)",SalesLine."Qty. to Invoice (Base)",Ship,Invoice);
    
      CASE "Document Type" OF
        "Document Type"::Order:
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeUpdateInvoicedQtyOnShipmentLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemTrackingForShipment>
    Code lines:
    ...
              RemQtyToInvoiceCurrLine,QtyToBeInvoiced,
              RemQtyToInvoiceCurrLineBase,QtyToBeInvoicedBase);
    
          RemQtyToBeInvoiced := RemQtyToBeInvoiced - QtyToBeInvoiced;
          RemQtyToBeInvoicedBase := RemQtyToBeInvoicedBase - QtyToBeInvoicedBase;
          OnBeforeUpdateInvoicedQtyOnShipmentLine(SalesShptLine,SalesLine,SalesHeader,SalesInvHeader,SuppressCommit); <=====================
          UpdateInvoicedQtyOnShipmentLine(SalesShptLine,QtyToBeInvoiced,QtyToBeInvoicedBase);
          OnInvoiceSalesShptLine(SalesShptLine,SalesInvHeader."No.",SalesLine."Line No.",-QtyToBeInvoiced,SuppressCommit);
          IF SalesLine.Type = SalesLine.Type::Item THEN
            PostItemJnlLine(
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeUpdatePrepmtSalesLineWithRounding>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<UpdatePrepmtSalesLineWithRounding>
    Code lines:
    OnBeforeUpdatePrepmtSalesLineWithRounding( <=====================
      PrepmtSalesLine,TotalRoundingAmount,TotalPrepmtAmount,FinalInvoice,PricesInclVATRoundingAmount,
      TotalSalesLine,TotalSalesLineLCY);
    
    WITH PrepmtSalesLine DO BEGIN
      NewAmountIncludingVAT := TotalPrepmtAmount[1] + TotalPrepmtAmount[2] + TotalRoundingAmount[1] + TotalRoundingAmount[2];
      IF "Prepayment %" = 100 THEN
        TotalRoundingAmount[1] += "Amount Including VAT" - NewAmountIncludingVAT;
      AmountRoundingPrecision :=
        GetAmountRoundingPrecisionInLCY("Document Type","Document No.","Currency Code");
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeValidatePostingAndDocumentDate>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<ValidatePostingAndDocumentDate>
    Code lines:
    OnBeforeValidatePostingAndDocumentDate(SalesHeader,SuppressCommit); <=====================
    
    PostingDateExists :=
      BatchProcessingMgt.GetParameterBoolean(SalesHeader.RECORDID,BatchPostParameterTypes.ReplacePostingDate,ReplacePostingDate) AND
      BatchProcessingMgt.GetParameterBoolean(
        SalesHeader.RECORDID,BatchPostParameterTypes.ReplaceDocumentDate,ReplaceDocumentDate) AND
      BatchProcessingMgt.GetParameterDate(SalesHeader.RECORDID,BatchPostParameterTypes.PostingDate,PostingDate);
    
    IF PostingDateExists AND (ReplacePostingDate OR (SalesHeader."Posting Date" = 0D)) THEN BEGIN
      SalesHeader."Posting Date" := PostingDate;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnCalcInvDiscountSetFilter>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CalcInvDiscount>
    Code lines:
    ...
    
      SalesHeaderCopy := SalesHeader;
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      OnCalcInvDiscountSetFilter(SalesLine,SalesHeader); <=====================
      SalesLine.FINDFIRST;
      CODEUNIT.RUN(CODEUNIT::"Sales-Calc. Discount",SalesLine);
      RefreshTempLines(SalesHeader,TempSalesLineGlobal);
      GET("Document Type","No.");
    ...
Codeunit<Sales-Post>.PROCEDURE<OnCheckTrackingAndWarehouseForReceiveOnBeforeCheck>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CheckTrackingAndWarehouseForReceive>
    Code lines:
    ...
      SETFILTER("Return Qty. to Receive",'<>0');
      SETRANGE("Return Receipt No.",'');
      Receive := FINDFIRST;
      WhseShip := TempWhseShptHeader.FINDFIRST;
      WhseReceive := TempWhseRcptHeader.FINDFIRST;
      OnCheckTrackingAndWarehouseForReceiveOnBeforeCheck(SalesHeader,TempWhseShptHeader,TempWhseRcptHeader,Receive); <=====================
      IF Receive THEN BEGIN
        CheckTrackingSpecification(SalesHeader,TempSalesLine);
        IF NOT (WhseReceive OR WhseShip OR InvtPickPutaway) THEN
          CheckWarehouse(TempSalesLine);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnCheckTrackingAndWarehouseForShipOnBeforeCheck>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CheckTrackingAndWarehouseForShip>
    Code lines:
    WITH TempSalesLine DO BEGIN
      FindNotShippedLines(SalesHeader,TempSalesLine);
      Ship := FINDFIRST;
      WhseShip := TempWhseShptHeader.FINDFIRST;
      WhseReceive := TempWhseRcptHeader.FINDFIRST;
      OnCheckTrackingAndWarehouseForShipOnBeforeCheck(SalesHeader,TempWhseShptHeader,TempWhseRcptHeader,Ship); <=====================
      IF Ship THEN BEGIN
        CheckTrackingSpecification(SalesHeader,TempSalesLine);
        IF NOT (WhseShip OR WhseReceive OR InvtPickPutaway) THEN
          CheckWarehouse(TempSalesLine);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnFillInvoicePostingBufferOnBeforeDeferrals>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<FillInvoicePostingBuffer>
    Code lines:
    ...
        InvoicePostBuffer.UpdateVATBase(TotalVATBase,TotalVATBaseACY);
        UpdateInvoicePostBuffer(TempInvoicePostBuffer,InvoicePostBuffer,TRUE);
      END;
    END;
    
    OnFillInvoicePostingBufferOnBeforeDeferrals(SalesLine,TotalAmount,TotalAmountACY,UseDate); <=====================
    DeferralUtilities.AdjustTotalAmountForDeferralsNoBase(
      SalesLine."Deferral Code",AmtToDefer,AmtToDeferACY,TotalAmount,TotalAmountACY);
    
    InvoicePostBuffer.SetAmounts(
    ...
Codeunit<Sales-Post>.PROCEDURE<OnInvoiceSalesShptLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertShipmentLine>
    Code lines:
    ...
    SalesShptLine.INSERT(TRUE);
    OnAfterSalesShptLineInsert(SalesShptLine,SalesLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit);
    
    CheckCertificateOfSupplyStatus(SalesShptHeader,SalesShptLine);
    
    OnInvoiceSalesShptLine(SalesShptLine,SalesInvHeader."No.",xSalesLine."Line No.",xSalesLine."Qty. to Invoice",SuppressCommit); <=====================
    
    ServItemMgt.CreateServItemOnSalesLineShpt(SalesHeader,xSalesLine,SalesShptLine);
    IF SalesLine."BOM Item No." <> '' THEN BEGIN
      ServItemMgt.ReturnServItemComp(TempServiceItem1,TempServiceItemComp1);
    ...
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemTrackingForShipment>
    Code lines:
    ...
    
          RemQtyToBeInvoiced := RemQtyToBeInvoiced - QtyToBeInvoiced;
          RemQtyToBeInvoicedBase := RemQtyToBeInvoicedBase - QtyToBeInvoicedBase;
          OnBeforeUpdateInvoicedQtyOnShipmentLine(SalesShptLine,SalesLine,SalesHeader,SalesInvHeader,SuppressCommit);
          UpdateInvoicedQtyOnShipmentLine(SalesShptLine,QtyToBeInvoiced,QtyToBeInvoicedBase);
          OnInvoiceSalesShptLine(SalesShptLine,SalesInvHeader."No.",SalesLine."Line No.",-QtyToBeInvoiced,SuppressCommit); <=====================
          IF SalesLine.Type = SalesLine.Type::Item THEN
            PostItemJnlLine(
              SalesHeader,SalesLine,
              0,0,
    ...
Codeunit<Sales-Post>.PROCEDURE<OnPostItemChargePerOrderOnAfterCopyToItemJnlLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemChargePerOrder>
    Code lines:
    ...
      ItemJnlLine2."Shortcut Dimension 1 Code" := ItemChargeSalesLine."Shortcut Dimension 1 Code";
      ItemJnlLine2."Shortcut Dimension 2 Code" := ItemChargeSalesLine."Shortcut Dimension 2 Code";
      ItemJnlLine2."Dimension Set ID" := ItemChargeSalesLine."Dimension Set ID";
      ItemJnlLine2."Gen. Prod. Posting Group" := ItemChargeSalesLine."Gen. Prod. Posting Group";
    
      OnPostItemChargePerOrderOnAfterCopyToItemJnlLine(ItemJnlLine2,ItemChargeSalesLine,GLSetup,QtyToInvoice); <=====================
    END;
    
    WITH TempTrackingSpecificationInv DO BEGIN
      RESET;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnPostItemJnlLineOnBeforeTransferReservToItemJnlLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
          IF ShouldPostWhseJnlLine(SalesLine) THEN BEGIN
            CreateWhseJnlLine(ItemJnlLine,SalesLine,TempWhseJnlLine);
            PostWhseJnlLine := TRUE;
          END;
    
        OnPostItemJnlLineOnBeforeTransferReservToItemJnlLine(SalesLine,ItemJnlLine); <=====================
    
        IF QtyToBeShippedBase <> 0 THEN BEGIN
          IF SalesLine.IsCreditDocType THEN
            ReserveSalesLine.TransferSalesLineToItemJnlLine(SalesLine,ItemJnlLine,QtyToBeShippedBase,CheckApplFromItemEntry,FALSE)
    ...
Codeunit<Sales-Post>.PROCEDURE<OnPostSalesLineOnAfterTestUpdatedSalesLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostSalesLine>
    Code lines:
    ...
        PostATO(SalesHeader,SalesLine,TempPostedATOLink);
    
      UpdateSalesLineBeforePost(SalesHeader,SalesLine);
    
      TestUpdatedSalesLine(SalesLine);
      OnPostSalesLineOnAfterTestUpdatedSalesLine(SalesLine,EverythingInvoiced); <=====================
    
      IF "Qty. to Invoice" + "Quantity Invoiced" <> Quantity THEN
        EverythingInvoiced := FALSE;
    
    ...
Codeunit<Sales-Post>.PROCEDURE<OnPostUpdateOrderLineOnBeforeInitTempSalesLineQuantities>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostUpdateOrderLine>
    Code lines:
    ...
    ResetTempLines(TempSalesLine);
    WITH TempSalesLine DO BEGIN
      SETFILTER(Quantity,'<>0');
      IF FINDSET THEN
        REPEAT
          OnPostUpdateOrderLineOnBeforeInitTempSalesLineQuantities(SalesHeader,TempSalesLine); <=====================
          IF SalesHeader.Ship THEN BEGIN
            "Quantity Shipped" += "Qty. to Ship";
            "Qty. Shipped (Base)" += "Qty. to Ship (Base)";
          END;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnSendSalesDocument>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<SendPostedDocumentRecord>
    Code lines:
    WITH SalesHeader DO
      CASE "Document Type" OF
        "Document Type"::Order:
          BEGIN
            OnSendSalesDocument(Invoice AND Ship,SuppressCommit); <=====================
            IF Invoice THEN BEGIN
              SalesInvHeader.GET("Last Posting No.");
              SalesInvHeader.SETRECFILTER;
              SalesInvHeader.SendProfile(DocumentSendingProfile);
            END;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnSumSalesLines2SetFilter>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<SumSalesLines2>
    Code lines:
    ...
      GetGLSetup;
      SalesSetup.GET;
      GetCurrency("Currency Code");
      OldSalesLine.SETRANGE("Document Type","Document Type");
      OldSalesLine.SETRANGE("Document No.","No.");
      OnSumSalesLines2SetFilter(OldSalesLine,SalesHeader); <=====================
      RoundingLineInserted := FALSE;
      IF OldSalesLine.FINDSET THEN
        REPEAT
          IF NOT RoundingLineInserted THEN
    ...
Codeunit<Online Map Management>.PROCEDURE<OnAfterGetAddress>
  Raised in: Codeunit<Online Map Management>.PROCEDURE<GetAddress>
    Code lines:
    ...
          Parameters[10] := FORMAT(Geolocation.Latitude,0,2);
          Parameters[11] := FORMAT(Geolocation.Longitude,0,2);
        END;
    END;
    
    OnAfterGetAddress(TableID,RecPosition,Parameters,RecordRef); <=====================
Codeunit<Online Map Management>.PROCEDURE<OnAfterValidAddress>
  Raised in: Codeunit<Online Map Management>.PROCEDURE<ValidAddresses>
    Code lines:
    ...
                  DATABASE::"Ship-to Address",
                  DATABASE::"Order Address",
                  DATABASE::Vendor,
                  DATABASE::Geolocation];
    
    OnAfterValidAddress(TableID,IsValid); <=====================
    EXIT(IsValid);
Codeunit<Online Map Management>.PROCEDURE<OnBeforeGetAddress>
  Raised in: Codeunit<Online Map Management>.PROCEDURE<GetAddress>
    Code lines:
    OnBeforeGetAddress(TableID,RecPosition,Parameters,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    RecordRef.OPEN(TableID);
    RecordRef.SETPOSITION(RecPosition);
    IF NOT RecordRef.FIND('=') THEN
      ERROR(Text008);
    
    CASE TableID OF
    ...
Codeunit<Online Map Management>.PROCEDURE<OnBeforeValidAddress>
  Raised in: Codeunit<Online Map Management>.PROCEDURE<ValidAddresses>
    Code lines:
    OnBeforeValidAddress(TableID,IsValid); <=====================
    IF IsValid THEN
      EXIT(TRUE);
    
    IsValid :=
      TableID IN [DATABASE::"Bank Account",
                  DATABASE::"Company Information",
                  DATABASE::Contact,
                  DATABASE::Customer,
                  DATABASE::Employee,
    ...
Codeunit<Sales-Post (Yes/No)>.PROCEDURE<OnAfterConfirmPost>
  Raised in: Codeunit<Sales-Post (Yes/No)>.PROCEDURE<Code>
    Code lines:
    ...
    
    IF NOT HideDialog THEN
      IF NOT ConfirmPost(SalesHeader) THEN
        EXIT;
    
    OnAfterConfirmPost(SalesHeader); <=====================
    
    SalesSetup.GET;
    IF SalesSetup."Post with Job Queue" AND NOT PostAndSend THEN
      SalesPostViaJobQueue.EnqueueSalesDoc(SalesHeader)
    ...
Codeunit<Sales-Post (Yes/No)>.PROCEDURE<OnAfterPost>
  Raised in: Codeunit<Sales-Post (Yes/No)>.PROCEDURE<Code>
    Code lines:
    ...
    IF SalesSetup."Post with Job Queue" AND NOT PostAndSend THEN
      SalesPostViaJobQueue.EnqueueSalesDoc(SalesHeader)
    ELSE
      CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);
    
    OnAfterPost(SalesHeader); <=====================
Codeunit<Sales-Post (Yes/No)>.PROCEDURE<OnBeforeConfirmSalesPost>
  Raised in: Codeunit<Sales-Post (Yes/No)>.PROCEDURE<Code>
    Code lines:
    HideDialog := FALSE;
    IsHandled := FALSE;
    OnBeforeConfirmSalesPost(SalesHeader,HideDialog,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT HideDialog THEN
      IF NOT ConfirmPost(SalesHeader) THEN
        EXIT;
    
    ...
Codeunit<Sales-Post + Print>.PROCEDURE<OnAfterConfirmPost>
  Raised in: Codeunit<Sales-Post + Print>.PROCEDURE<Code>
    Code lines:
    ...
    
    IF NOT HideDialog THEN
      IF NOT ConfirmPost(SalesHeader) THEN
        EXIT;
    
    OnAfterConfirmPost(SalesHeader); <=====================
    
    SalesSetup.GET;
    IF SalesSetup."Post & Print with Job Queue" AND NOT SendReportAsEmail THEN
      SalesPostViaJobQueue.EnqueueSalesDoc(SalesHeader)
    ...
Codeunit<Sales-Post + Print>.PROCEDURE<OnAfterPost>
  Raised in: Codeunit<Sales-Post + Print>.PROCEDURE<Code>
    Code lines:
    ...
    ELSE BEGIN
      CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);
      GetReport(SalesHeader);
    END;
    
    OnAfterPost(SalesHeader); <=====================
    COMMIT;
Codeunit<Sales-Post + Print>.PROCEDURE<OnBeforeConfirmPost>
  Raised in: Codeunit<Sales-Post + Print>.PROCEDURE<Code>
    Code lines:
    HideDialog := FALSE;
    IsHandled := FALSE;
    OnBeforeConfirmPost(SalesHeader,HideDialog,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT HideDialog THEN
      IF NOT ConfirmPost(SalesHeader) THEN
        EXIT;
    
    ...
Codeunit<Cash Flow Management>.PROCEDURE<OnBeforeShowSource>
  Raised in: Codeunit<Cash Flow Management>.PROCEDURE<ShowSource>
    Code lines:
    OnBeforeShowSource(CFVariant,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    CFRecordRef.GETTABLE(CFVariant);
    CASE CFRecordRef.NUMBER OF
      DATABASE::"Cash Flow Worksheet Line":
        ShowSourceLocalCFWorkSheetLine(FALSE,CFVariant);
      DATABASE::"Cash Flow Forecast Entry":
        ShowSourceLocalCFEntry(FALSE,CFVariant);
Codeunit<Cash Flow Management>.PROCEDURE<OnBeforeShowSourceDocument>
  Raised in: Codeunit<Cash Flow Management>.PROCEDURE<ShowSourceDocument>
    Code lines:
    OnBeforeShowSourceDocument(CFVariant,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    CFRecordRef.GETTABLE(CFVariant);
    CASE CFRecordRef.NUMBER OF
      DATABASE::"Cash Flow Worksheet Line":
        ShowSourceLocalCFWorkSheetLine(TRUE,CFVariant);
      DATABASE::"Cash Flow Forecast Entry":
        ShowSourceLocalCFEntry(TRUE,CFVariant);
Codeunit<Cash Flow Management>.PROCEDURE<OnBeforeUpdateCashFlowForecast>
  Raised in: Codeunit<Cash Flow Management>.PROCEDURE<UpdateCashFlowForecast>
    Code lines:
    OnBeforeUpdateCashFlowForecast(CortanaIntelligenceEnabled,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    Window.OPEN(UpdatingMsg);
    
    IF NOT CashFlowSetup.GET THEN
      EXIT;
    
    IF NOT CashFlowForecast.GET(CashFlowSetup."CF No. on Chart in Role Center") THEN
    ...
Codeunit<Cash Flow Wksh. -Register Line>.PROCEDURE<OnAfterCreateForecastEntry>
  Raised in: Codeunit<Cash Flow Wksh. -Register Line>.PROCEDURE<Code>
    Code lines:
    ...
      IF CFForecastEntry.Description = CashFlowForecast.Description THEN
        CFForecastEntry.Description := '';
      CFForecastEntry."User ID" := USERID;
      CFForecastEntry."Entry No." := NextEntryNo;
    
      OnAfterCreateForecastEntry(CFForecastEntry,CFWkshLine); <=====================
      CFForecastEntry.INSERT;
    
      NextEntryNo := NextEntryNo + 1;
    END;
Codeunit<Sales-Quote to Order>.PROCEDURE<OnAfterInsertAllSalesOrderLines>
  Raised in: Codeunit<Sales-Quote to Order>.<OnRun>
    Code lines:
    ...
    CheckInProgressOpportunities(Rec);
    
    CreateSalesHeader(Rec,Cust."Prepayment %");
    
    TransferQuoteToSalesOrderLines(SalesQuoteLine,Rec,SalesOrderLine,SalesOrderHeader,Cust);
    OnAfterInsertAllSalesOrderLines(SalesOrderLine,Rec); <=====================
    
    SalesSetup.GET;
    CASE SalesSetup."Archive Quotes" OF
      SalesSetup."Archive Quotes"::Always:
    ...
Codeunit<Sales-Quote to Order>.PROCEDURE<OnAfterInsertSalesOrderLine>
  Raised in: Codeunit<Sales-Quote to Order>.PROCEDURE<TransferQuoteToSalesOrderLines>
    Code lines:
    ...
        OrderSalesLine.VALIDATE("Prepayment %");
        IF OrderSalesLine."No." <> '' THEN
          OrderSalesLine.DefaultDeferralCode;
        OnBeforeInsertSalesOrderLine(OrderSalesLine,OrderSalesHeader,QuoteSalesLine,QuoteSalesHeader);
        OrderSalesLine.INSERT;
        OnAfterInsertSalesOrderLine(OrderSalesLine,OrderSalesHeader,QuoteSalesLine,QuoteSalesHeader); <=====================
        ATOLink.MakeAsmOrderLinkedToSalesOrderLine(QuoteSalesLine,OrderSalesLine);
        SalesLineReserve.TransferSaleLineToSalesLine(
          QuoteSalesLine,OrderSalesLine,QuoteSalesLine."Outstanding Qty. (Base)");
        SalesLineReserve.VerifyQuantity(OrderSalesLine,QuoteSalesLine);
    ...
Codeunit<Sales-Quote to Order>.PROCEDURE<OnAfterOnRun>
  Raised in: Codeunit<Sales-Quote to Order>.<OnRun>
    Code lines:
    ...
    SalesQuoteLine.DELETEALL;
    
    IF NOT ShouldRedistributeInvoiceAmount THEN
      SalesCalcDiscountByType.ResetRecalculateInvoiceDisc(SalesOrderHeader);
    
    OnAfterOnRun(Rec,SalesOrderHeader); <=====================
Codeunit<Sales-Quote to Order>.PROCEDURE<OnBeforeDeleteSalesQuote>
  Raised in: Codeunit<Sales-Quote to Order>.<OnRun>
    Code lines:
    ...
    MoveWonLostOpportunites(Rec,SalesOrderHeader);
    
    ApprovalsMgmt.CopyApprovalEntryQuoteToOrder(RECORDID,SalesOrderHeader."No.",SalesOrderHeader.RECORDID);
    ApprovalsMgmt.DeleteApprovalEntries(RECORDID);
    
    OnBeforeDeleteSalesQuote(Rec,SalesOrderHeader); <=====================
    
    DELETELINKS;
    DELETE;
    
    ...
Codeunit<Sales-Quote to Order>.PROCEDURE<OnBeforeInsertSalesOrderHeader>
  Raised in: Codeunit<Sales-Quote to Order>.PROCEDURE<CreateSalesHeader>
    Code lines:
    ...
      SalesOrderHeader.Reserve := Reserve;
    
      SalesOrderHeader."Prepayment %" := PrepmtPercent;
      IF SalesOrderHeader."Posting Date" = 0D THEN
        SalesOrderHeader."Posting Date" := WORKDATE;
      OnBeforeInsertSalesOrderHeader(SalesOrderHeader,SalesHeader); <=====================
      SalesOrderHeader.MODIFY;
    END;
Codeunit<Sales-Quote to Order>.PROCEDURE<OnBeforeInsertSalesOrderLine>
  Raised in: Codeunit<Sales-Quote to Order>.PROCEDURE<TransferQuoteToSalesOrderLines>
    Code lines:
    ...
          OrderSalesLine."Prepayment %" := Customer."Prepayment %";
        PrepmtMgt.SetSalesPrepaymentPct(OrderSalesLine,OrderSalesHeader."Posting Date");
        OrderSalesLine.VALIDATE("Prepayment %");
        IF OrderSalesLine."No." <> '' THEN
          OrderSalesLine.DefaultDeferralCode;
        OnBeforeInsertSalesOrderLine(OrderSalesLine,OrderSalesHeader,QuoteSalesLine,QuoteSalesHeader); <=====================
        OrderSalesLine.INSERT;
        OnAfterInsertSalesOrderLine(OrderSalesLine,OrderSalesHeader,QuoteSalesLine,QuoteSalesHeader);
        ATOLink.MakeAsmOrderLinkedToSalesOrderLine(QuoteSalesLine,OrderSalesLine);
        SalesLineReserve.TransferSaleLineToSalesLine(
    ...
Codeunit<Sales-Quote to Order>.PROCEDURE<OnBeforeOnRun>
  Raised in: Codeunit<Sales-Quote to Order>.<OnRun>
    Code lines:
    OnBeforeOnRun(Rec); <=====================
    
    TESTFIELD("Document Type","Document Type"::Quote);
    ShouldRedistributeInvoiceAmount := SalesCalcDiscountByType.ShouldRedistributeInvoiceDiscountAmount(Rec);
    
    OnCheckSalesPostRestrictions;
    
    Cust.GET("Sell-to Customer No.");
    Cust.CheckBlockedCustOnDocs(Cust,"Document Type"::Order,TRUE,FALSE);
    IF "Sell-to Customer No." <> "Bill-to Customer No." THEN BEGIN
    ...
Codeunit<Config. Package Management>.PROCEDURE<OnPostProcessPackage>
  Raised in: Codeunit<Config. Package Management>.PROCEDURE<ProcessAppliedPackageRecords>
    Code lines:
    ...
          TempConfigPackageRecord.DELETE; // Remove it from the buffer to avoid deletion in the package
          COMMIT;
        END;
      UNTIL TempConfigRecordForProcessing.NEXT = 0;
    TempConfigRecordForProcessing.DELETEALL;
    OnPostProcessPackage; <=====================
Codeunit<Config. Package Management>.PROCEDURE<OnPreProcessPackage>
  Raised in: Codeunit<Config. Package Management>.PROCEDURE<ProcessAppliedPackageRecords>
    Code lines:
    OnPreProcessPackage(TempConfigRecordForProcessing,Subscriber); <=====================
    IF TempConfigRecordForProcessing.FINDSET THEN
      REPEAT
        IF NOT ConfigTableProcessingRule.Process(TempConfigRecordForProcessing) THEN BEGIN
          TempConfigRecordForProcessing.FindConfigRecord(TempConfigPackageRecord);
          RecordError(TempConfigPackageRecord,0,COPYSTR(GETLASTERRORTEXT,1,250));
          TempConfigPackageRecord.DELETE; // Remove it from the buffer to avoid deletion in the package
          COMMIT;
        END;
      UNTIL TempConfigRecordForProcessing.NEXT = 0;
    ...
Codeunit<Config. Template Management>.PROCEDURE<OnApplyTemplLinesWithoutValidationAfterRecRefCheck>
  Raised in: Codeunit<Config. Template Management>.PROCEDURE<ApplyTemplateLinesWithoutValidation>
    Code lines:
    ...
          IF RecordRef.FIELDEXIST(ConfigTemplateLine."Field ID") THEN BEGIN
            FieldRef := RecordRef.FIELD(ConfigTemplateLine."Field ID");
            ConfigValidateMgt.ValidateFieldValue(
              RecordRef,FieldRef,ConfigTemplateLine."Default Value",TRUE,ConfigTemplateLine."Language ID");
            RecordRef.MODIFY(FALSE);
            OnApplyTemplLinesWithoutValidationAfterRecRefCheck(ConfigTemplateHeader,ConfigTemplateLine,RecordRef); <=====================
          END;
      UNTIL ConfigTemplateLine.NEXT = 0;
Codeunit<Config. XML Exchange>.PROCEDURE<OnBeforeGetElementName>
  Raised in: Codeunit<Config. XML Exchange>.PROCEDURE<GetElementName>
    Code lines:
    OnBeforeGetElementName(NameIn); <=====================
    
    IF NOT XMLDOMManagement.IsValidXMLNameStartCharacter(NameIn[1]) THEN
      NameIn := '_' + NameIn;
    NameIn := COPYSTR(XMLDOMManagement.ReplaceXMLInvalidCharacters(NameIn,' '),1,MAXSTRLEN(NameIn));
    NameIn := DELCHR(NameIn,'=','?''`');
    NameIn := CONVERTSTR(NameIn,'<>,./\+&()%:','            ');
    NameIn := CONVERTSTR(NameIn,'-','_');
    NameIn := DELCHR(NameIn,'=',' ');
    EXIT(NameIn);
Codeunit<Config. Excel Exchange>.PROCEDURE<OnBeforeExportExcel>
  Raised in: Codeunit<Config. Excel Exchange>.PROCEDURE<ExportExcel>
    Code lines:
    OnBeforeExportExcel(ConfigPackageTable); <=====================
    
    TempSchemaFileName := CreateSchemaFile(ConfigPackageTable,RootElementName);
    TempSetupDataFileName := BuildDataSetForPackageTable(ExportFromWksht,ConfigPackageTable);
    
    CreateBook(TempBlob);
    WrkShtHelper := WrkShtHelper.WorksheetHelper(WrkbkWriter.FirstWorksheet.Worksheet);
    OpenXMLManagement.ImportSchema(WrkbkWriter,TempSchemaFileName,1,RootElementName);
    OpenXMLManagement.CreateSchemaConnection(WrkbkWriter,TempSetupDataFileName);
    
    ...
Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnAfterInsertAllSalesOrderLines>
  Raised in: Codeunit<Blanket Sales Order to Order>.<OnRun>
    Code lines:
    ...
          END;
        END;
      UNTIL BlanketOrderSalesLine.NEXT = 0;
    END;
    
    OnAfterInsertAllSalesOrderLines(Rec,SalesOrderHeader); <=====================
    
    IF SalesSetup."Default Posting Date" = SalesSetup."Default Posting Date"::"No Date" THEN BEGIN
      SalesOrderHeader."Posting Date" := 0D;
      SalesOrderHeader.MODIFY;
    ...
Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnAfterInsertSalesOrderLine>
  Raised in: Codeunit<Blanket Sales Order to Order>.<OnRun>
    Code lines:
    ...
          END;
          SalesOrderLine.DefaultDeferralCode;
          IF IsSalesOrderLineToBeInserted(SalesOrderLine) THEN BEGIN
            OnBeforeInsertSalesOrderLine(SalesOrderLine,SalesOrderHeader,BlanketOrderSalesLine,Rec);
            SalesOrderLine.INSERT;
            OnAfterInsertSalesOrderLine(SalesOrderLine,SalesOrderHeader,BlanketOrderSalesLine,Rec); <=====================
          END;
    
          IF ATOLink.AsmExistsForSalesLine(BlanketOrderSalesLine) THEN
            ATOLink.MakeAsmOrderLinkedToSalesOrderLine(BlanketOrderSalesLine,SalesOrderLine);
    ...
Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnBeforeInsertSalesOrderHeader>
  Raised in: Codeunit<Blanket Sales Order to Order>.PROCEDURE<CreateSalesHeader>
    Code lines:
    ...
      SalesOrderHeader."No. Printed" := 0;
      SalesOrderHeader.Status := SalesOrderHeader.Status::Open;
      SalesOrderHeader."No." := '';
    
      SalesOrderLine.LOCKTABLE;
      OnBeforeInsertSalesOrderHeader(SalesOrderHeader,SalesHeader); <=====================
      SalesOrderHeader.INSERT(TRUE);
    
      IF "Order Date" = 0D THEN
        SalesOrderHeader."Order Date" := WORKDATE
    ...
Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnBeforeInsertSalesOrderLine>
  Raised in: Codeunit<Blanket Sales Order to Order>.<OnRun>
    Code lines:
    ...
            SalesOrderLine."Qty. to Assemble to Order" := SalesOrderLine.Quantity;
            SalesOrderLine."Qty. to Asm. to Order (Base)" := SalesOrderLine."Quantity (Base)";
          END;
          SalesOrderLine.DefaultDeferralCode;
          IF IsSalesOrderLineToBeInserted(SalesOrderLine) THEN BEGIN
            OnBeforeInsertSalesOrderLine(SalesOrderLine,SalesOrderHeader,BlanketOrderSalesLine,Rec); <=====================
            SalesOrderLine.INSERT;
            OnAfterInsertSalesOrderLine(SalesOrderLine,SalesOrderHeader,BlanketOrderSalesLine,Rec);
          END;
    
    ...
Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnBeforeSalesOrderHeaderModify>
  Raised in: Codeunit<Blanket Sales Order to Order>.PROCEDURE<CreateSalesHeader>
    Code lines:
    ...
      SalesOrderHeader."Outbound Whse. Handling Time" := "Outbound Whse. Handling Time";
      SalesOrderHeader.Reserve := Reserve;
    
      SalesOrderHeader."Prepayment %" := PrepmtPercent;
    
      OnBeforeSalesOrderHeaderModify(SalesOrderHeader,SalesHeader); <=====================
      SalesOrderHeader.MODIFY;
    END;
Codeunit<Sales Post via Job Queue>.PROCEDURE<OnBeforeEnqueueSalesDoc>
  Raised in: Codeunit<Sales Post via Job Queue>.PROCEDURE<EnqueueSalesDocWithUI>
    Code lines:
    OnBeforeEnqueueSalesDoc(SalesHeader,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    WITH SalesHeader DO BEGIN
      IF NOT ("Job Queue Status" IN ["Job Queue Status"::" ","Job Queue Status"::Error]) THEN
        ERROR(WrongJobQueueStatus,"Document Type","No.");
      TempInvoice := Invoice;
      TempRcpt := Receive;
      TempShip := Ship;
    ...
Codeunit<Sales Post via Job Queue>.PROCEDURE<OnBeforeReleaseSalesDoc>
  Raised in: Codeunit<Sales Post via Job Queue>.PROCEDURE<EnqueueSalesDocWithUI>
    Code lines:
    ...
      IF NOT ("Job Queue Status" IN ["Job Queue Status"::" ","Job Queue Status"::Error]) THEN
        ERROR(WrongJobQueueStatus,"Document Type","No.");
      TempInvoice := Invoice;
      TempRcpt := Receive;
      TempShip := Ship;
      OnBeforeReleaseSalesDoc(SalesHeader); <=====================
      IF Status = Status::Open THEN
        CODEUNIT.RUN(CODEUNIT::"Release Sales Document",SalesHeader);
      Invoice := TempInvoice;
      Receive := TempRcpt;
    ...
Codeunit<Sales-Post + Email>.PROCEDURE<OnAfterConfirmPost>
  Raised in: Codeunit<Sales-Post + Email>.PROCEDURE<Code>
    Code lines:
    ...
              EXIT;
          ELSE
            ErrorPostAndDistribute(SalesHeader);
        END;
    
    OnAfterConfirmPost(SalesHeader); <=====================
    
    CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);
    COMMIT;
    SendDocumentReport(SalesHeader);
Codeunit<Sales-Post + Email>.PROCEDURE<OnBeforePostAndEMail>
  Raised in: Codeunit<Sales-Post + Email>.PROCEDURE<Code>
    Code lines:
    HideDialog := FALSE;
    IsHandled := FALSE;
    OnBeforePostAndEMail(SalesHeader,HideDialog,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT HideDialog THEN
      WITH SalesHeader DO
        CASE "Document Type" OF
          "Document Type"::Invoice,
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterCheckAndUpdate>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CheckAndUpdate>
    Code lines:
    ...
      InsertPostedHeaders(PurchHeader);
    
      UpdateIncomingDocument("Incoming Document Entry No.","Posting Date",GenJnlLineDocNo);
    END;
    
    OnAfterCheckAndUpdate(PurchHeader,SuppressCommit); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterCheckMandatoryFields>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CheckMandatoryHeaderFields>
    Code lines:
    ...
    PurchHeader.TESTFIELD("Buy-from Vendor No.");
    PurchHeader.TESTFIELD("Pay-to Vendor No.");
    PurchHeader.TESTFIELD("Posting Date");
    PurchHeader.TESTFIELD("Document Date");
    
    OnAfterCheckMandatoryFields(PurchHeader,SuppressCommit); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterCheckPurchDoc>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CheckAndUpdate>
    Code lines:
    ...
        CheckAssosOrderLines(PurchHeader);
    
      IF Invoice AND PurchSetup."Ext. Doc. No. Mandatory" THEN
        CheckExtDocNo(PurchHeader);
    
      OnAfterCheckPurchDoc(PurchHeader,SuppressCommit,WhseShip,WhseReceive); <=====================
    
      // Update
      IF Invoice THEN
        CreatePrepmtLines(PurchHeader,TempPrepmtPurchLine,TRUE);
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterCheckTrackingAndWarehouseForReceive>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CheckTrackingAndWarehouseForReceive>
    Code lines:
    ...
      IF Receive THEN BEGIN
        CheckTrackingSpecification(PurchHeader,TempPurchLine);
        IF NOT (WhseReceive OR WhseShip OR InvtPickPutaway) THEN
          CheckWarehouse(TempPurchLine);
      END;
      OnAfterCheckTrackingAndWarehouseForReceive(PurchHeader,Receive,SuppressCommit); <=====================
      EXIT(Receive);
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterCheckTrackingAndWarehouseForShip>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CheckTrackingAndWarehouseForShip>
    Code lines:
    ...
      IF Ship THEN BEGIN
        CheckTrackingSpecification(PurchHeader,TempPurchLine);
        IF NOT (WhseShip OR WhseReceive OR InvtPickPutaway) THEN
          CheckWarehouse(TempPurchLine);
      END;
      OnAfterCheckTrackingAndWarehouseForShip(PurchHeader,Ship,SuppressCommit); <=====================
      EXIT(Ship);
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterDeleteAfterPosting>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<DeleteAfterPosting>
    Code lines:
    ...
      DeleteItemChargeAssgnt(PurchHeader);
      PurchCommentLine.DeleteComments("Document Type","No.");
      WarehouseRequest.DeleteRequest(DATABASE::"Purchase Line","Document Type","No.");
    END;
    
    OnAfterDeleteAfterPosting(PurchHeader,PurchInvHeader,PurchCrMemoHeader,SuppressCommit); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterDivideAmount>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<DivideAmount>
    Code lines:
    ...
        TempVATAmountLineRemainder.MODIFY;
        IF "Deferral Code" <> '' THEN
          CalcDeferralAmounts(PurchHeader,PurchLine,OriginalDeferralAmount);
      END;
    
    OnAfterDivideAmount(PurchHeader,PurchLine,QtyType,PurchLineQty,TempVATAmountLine,TempVATAmountLineRemainder); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterFillInvoicePostBuffer>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<FillInvoicePostBuffer>
    Code lines:
    ...
      ELSE
        PurchAccount := GenPostingSetup.GetPurchAccount;
    InvoicePostBuffer.SetAccount(PurchAccount,TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY);
    InvoicePostBuffer.UpdateVATBase(TotalVATBase,TotalVATBaseACY);
    InvoicePostBuffer."Deferral Code" := PurchLine."Deferral Code";
    OnAfterFillInvoicePostBuffer(InvoicePostBuffer,PurchLine,TempInvoicePostBuffer,SuppressCommit); <=====================
    UpdateInvoicePostBuffer(TempInvoicePostBuffer,InvoicePostBuffer);
    IF PurchLine."Deferral Code" <> '' THEN BEGIN
      OnBeforeFillDeferralPostingBuffer(
        PurchLine,InvoicePostBuffer,TempInvoicePostBuffer,Usedate,InvDefLineNo,DeferralLineNo,SuppressCommit);
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterFinalizePosting>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<FinalizePosting>
    Code lines:
    ...
      END;
    
      InsertValueEntryRelation;
    END;
    
    OnAfterFinalizePostingOnBeforeCommit( <=====================
      PurchHeader,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,ReturnShptHeader,GenJnlPostLine,PreviewMode,SuppressCommit);
    
    IF PreviewMode THEN BEGIN
      Window.CLOSE;
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterFinalizePostingOnBeforeCommit>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<FinalizePosting>
    Code lines:
    ...
      END;
    
      InsertValueEntryRelation;
    END;
    
    OnAfterFinalizePostingOnBeforeCommit( <=====================
      PurchHeader,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,ReturnShptHeader,GenJnlPostLine,PreviewMode,SuppressCommit);
    
    IF PreviewMode THEN BEGIN
      Window.CLOSE;
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterIncrAmount>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<IncrAmount>
    Code lines:
    ...
      Increment(TotalPurchLine."Prepmt Amt to Deduct","Prepmt Amt to Deduct");
      Increment(TotalPurchLine."Prepmt Amt Deducted","Prepmt Amt Deducted");
      Increment(TotalPurchLine."Prepayment VAT Difference","Prepayment VAT Difference");
      Increment(TotalPurchLine."Prepmt VAT Diff. to Deduct","Prepmt VAT Diff. to Deduct");
      Increment(TotalPurchLine."Prepmt VAT Diff. Deducted","Prepmt VAT Diff. Deducted");
      OnAfterIncrAmount(TotalPurchLine,PurchLine); <=====================
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterInsertedPrepmtVATBaseToDeduct>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertedPrepmtVATBaseToDeduct>
    Code lines:
    ...
      "Attached to Line No." := PrepmtLineNo;
      "VAT Base Amount" := PrepmtVATBaseToDeduct;
      INSERT;
    END;
    
    OnAfterInsertedPrepmtVATBaseToDeduct( <=====================
      PurchHeader,PurchLine,PrepmtLineNo,TotalPrepmtAmtToDeduct,TempPrepmtDeductLCYPurchLine,PrepmtVATBaseToDeduct);
    
    EXIT(PrepmtVATBaseToDeduct);
Codeunit<Purch.-Post>.PROCEDURE<OnAfterInsertPostedHeaders>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertPostedHeaders>
    Code lines:
    ...
          GenJnlLineDocNo := PurchCrMemoHeader."No.";
          GenJnlLineExtDocNo := "Vendor Cr. Memo No.";
        END;
    END;
    
    OnAfterInsertPostedHeaders(PurchHeader,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,ReturnShptHeader); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterInvoiceRoundingAmount>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InvoiceRounding>
    Code lines:
    ...
        RoundingLineInserted := TRUE;
        RoundingLineNo := "Line No.";
      END;
    END;
    
    OnAfterInvoiceRoundingAmount( <=====================
      PurchHeader,PurchLine,TotalPurchLine,UseTempData,InvoiceRoundingAmount,SuppressCommit);
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostAccICLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostGLAccICLine>
    Code lines:
    ...
        JobPostLine.PostJobOnPurchaseLine(PurchHeader,PurchInvHeader,PurchCrMemoHeader,JobPurchLine,SrcCode);
      END;
      IF (PurchLine."IC Partner Code" <> '') AND PurchHeader.Invoice THEN
        InsertICGenJnlLine(PurchHeader,xPurchLine,ICGenJnlLineNo);
    
      OnAfterPostAccICLine(PurchLine,SuppressCommit); <=====================
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostBalancingEntry>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostBalancingEntry>
    Code lines:
    ...
          ROUND(VendLedgEntry."Remaining Pmt. Disc. Possible" / VendLedgEntry."Adjusted Currency Factor");
      "Allow Zero-Amount Posting" := TRUE;
    
      OnBeforePostBalancingEntry(GenJnlLine,PurchHeader,TotalPurchLine2,TotalPurchLineLCY2,PreviewMode,SuppressCommit);
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostBalancingEntry(GenJnlLine,PurchHeader,TotalPurchLine2,TotalPurchLineLCY2,SuppressCommit,GenJnlPostLine); <=====================
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostGLAndVendor>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostGLAndVendor>
    Code lines:
    ...
        PostBalancingEntry(
          PurchHeader,TotalPurchLine,TotalPurchLineLCY,GenJnlLineDocType,GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode);
      END;
    END;
    
    OnAfterPostGLAndVendor(PurchHeader,GenJnlPostLine,TotalPurchLine,TotalPurchLineLCY,SuppressCommit); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostInvPostBuffer>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostInvoicePostBufferLine>
    Code lines:
    ...
        CopyFromInvoicePostBufferFA(InvoicePostBuffer);
      END;
    
      OnBeforePostInvPostBuffer(GenJnlLine,InvoicePostBuffer,PurchHeader,GenJnlPostLine,PreviewMode,SuppressCommit);
      GLEntryNo := RunGenJnlPostLine(GenJnlLine);
      OnAfterPostInvPostBuffer(GenJnlLine,InvoicePostBuffer,PurchHeader,GLEntryNo,SuppressCommit,GenJnlPostLine); <=====================
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostItemJnlLineCopyProdOrder>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemJnlLineCopyProdOrder>
    Code lines:
    ...
      ItemJnlLine."Work Center No." := "Work Center No.";
      ItemJnlLine."Unit Cost Calculation" := ItemJnlLine."Unit Cost Calculation"::Units;
      IF Finished THEN
        ItemJnlLine.Finished := Finished;
    END;
    OnAfterPostItemJnlLineCopyProdOrder(ItemJnlLine,PurchLine,PurchRcptHeader,QtyToBeReceived,SuppressCommit); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostItemLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemLine>
    Code lines:
    ...
            PostAssocItemJnlLine(PurchHeader,PurchLine,TempDropShptPostBuffer.Quantity,TempDropShptPostBuffer."Quantity (Base)");
          TempDropShptPostBuffer.INSERT;
        END;
      END;
    
      OnAfterPostItemLine(PurchLine,SuppressCommit); <=====================
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostPurchaseDoc>
  Raised in: Codeunit<Purch.-Post>.<OnRun>
    Code lines:
    ...
      COMMIT;
      UpdateAnalysisView.UpdateAll(0,TRUE);
      UpdateItemAnalysisView.UpdateAll(0,TRUE);
    END;
    
    OnAfterPostPurchaseDoc( <=====================
      Rec,GenJnlPostLine,PurchRcptHeader."No.",ReturnShptHeader."No.",PurchInvHeader."No.",PurchCrMemoHeader."No.",
      SuppressCommit);
    OnAfterPostPurchaseDocDropShipment(SalesShptHeader."No.",SuppressCommit); <=====================
  Raised in: Table<Purchase Header>.PROCEDURE<TriggerOnAfterPostPurchaseDoc>
    Code lines:
    PurchPost.OnAfterPostPurchaseDoc(Rec,GenJnlPostLine,PurchRcpHdrNo,RetShptHdrNo,PurchInvHdrNo,PurchCrMemoHdrNo,FALSE); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostPurchaseDocDropShipment>
  Raised in: Codeunit<Purch.-Post>.<OnRun>
    Code lines:
    ...
    END;
    
    OnAfterPostPurchaseDoc(
      Rec,GenJnlPostLine,PurchRcptHeader."No.",ReturnShptHeader."No.",PurchInvHeader."No.",PurchCrMemoHeader."No.",
      SuppressCommit);
    OnAfterPostPurchaseDocDropShipment(SalesShptHeader."No.",SuppressCommit); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostPurchLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostPurchLine>
    Code lines:
    ...
          CreatePostedDeferralScheduleFromPurchDoc(xPurchLine,PurchCrMemoLine.GetDocumentType,
            PurchCrMemoHeader."No.",PurchCrMemoLine."Line No.",PurchCrMemoHeader."Posting Date");
        END;
    END;
    
    OnAfterPostPurchLine(PurchHeader,PurchLine,SuppressCommit); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostPurchLines>
  Raised in: Codeunit<Purch.-Post>.<OnRun>
    Code lines:
    ...
          IF LastLineRetrieved AND PurchSetup."Invoice Rounding" THEN
            InvoiceRounding(PurchHeader,PurchLine,FALSE,BiggestLineNo);
        END;
      UNTIL LastLineRetrieved;
    
    OnAfterPostPurchLines( <=====================
      PurchHeader,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,ReturnShptHeader,WhseShip,WhseReceive,PurchaseLinesProcessed,
      SuppressCommit);
    
    IF PurchHeader.IsCreditDocType THEN BEGIN
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostUpdateOrderLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostUpdateOrderLine>
    Code lines:
    ...
            ELSE
              InitQtyToReceive2;
          END;
          SetDefaultQuantity;
          ModifyTempLine(TempPurchLine);
          OnAfterPostUpdateOrderLine(TempPurchLine,WhseShip,WhseReceive,SuppressCommit); <=====================
        UNTIL NEXT = 0;
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostVendorEntry>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostVendorEntry>
    Code lines:
    ...
      "Sales/Purch. (LCY)" := -TotalPurchLineLCY2.Amount;
      "Inv. Discount (LCY)" := -TotalPurchLineLCY2."Inv. Discount Amount";
    
      OnBeforePostVendorEntry(GenJnlLine,PurchHeader,TotalPurchLine2,TotalPurchLineLCY2,PreviewMode,SuppressCommit);
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostVendorEntry(GenJnlLine,PurchHeader,TotalPurchLine2,TotalPurchLineLCY2,SuppressCommit,GenJnlPostLine); <=====================
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostWhseJnlLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
            PurchHeader,PurchLine,OriginalItemJnlLine,TempReservationEntry,QtyToBeInvoiced,QtyToBeReceived,
            TempHandlingSpecification,"Item Shpt. Entry No.");
    
      IF PostWhseJnlLine THEN BEGIN
        PostItemJnlLineWhseLine(TempWhseJnlLine,TempWhseTrackingSpecification,PurchLine,PostJobConsumptionBeforePurch);
        OnAfterPostWhseJnlLine(PurchLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit); <=====================
      END;
      IF (PurchLine.Type = PurchLine.Type::Item) AND PurchHeader.Invoice THEN
        PostItemJnlLineItemCharges(
          PurchHeader,PurchLine,OriginalItemJnlLine,"Item Shpt. Entry No.",TempTrackingSpecificationChargeAssmt);
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchCrMemoHeaderInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertCrMemoHeader>
    Code lines:
    ...
      PurchCrMemoHdr."Source Code" := SrcCode;
      PurchCrMemoHdr."User ID" := USERID;
      PurchCrMemoHdr."No. Printed" := 0;
      OnBeforePurchCrMemoHeaderInsert(PurchCrMemoHdr,PurchHeader,SuppressCommit);
      PurchCrMemoHdr.INSERT(TRUE);
      OnAfterPurchCrMemoHeaderInsert(PurchCrMemoHdr,PurchHeader,SuppressCommit); <=====================
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,PurchCrMemoHdr.RECORDID,PurchCrMemoHdr."No.");
    
      IF PurchSetup."Copy Cmts Ret.Ord. to Cr. Memo" THEN BEGIN
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchCrMemoLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostPurchLine>
    Code lines:
    ...
            PurchCrMemoLine."Order No." := "Document No.";
            PurchCrMemoLine."Order Line No." := "Line No.";
          END;
          OnBeforePurchCrMemoLineInsert(PurchCrMemoLine,PurchCrMemoHeader,PurchLine,SuppressCommit);
          PurchCrMemoLine.INSERT(TRUE);
          OnAfterPurchCrMemoLineInsert(PurchCrMemoLine,PurchCrMemoHeader,PurchLine,SuppressCommit); <=====================
          CreatePostedDeferralScheduleFromPurchDoc(xPurchLine,PurchCrMemoLine.GetDocumentType,
            PurchCrMemoHeader."No.",PurchCrMemoLine."Line No.",PurchCrMemoHeader."Posting Date");
        END;
    END;
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchInvHeaderInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertInvoiceHeader>
    Code lines:
    ...
      PurchInvHeader."Source Code" := SrcCode;
      PurchInvHeader."User ID" := USERID;
      PurchInvHeader."No. Printed" := 0;
      OnBeforePurchInvHeaderInsert(PurchInvHeader,PurchHeader,SuppressCommit);
      PurchInvHeader.INSERT(TRUE);
      OnAfterPurchInvHeaderInsert(PurchInvHeader,PurchHeader); <=====================
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,PurchInvHeader.RECORDID,PurchInvHeader."No.");
      IF PurchSetup."Copy Comments Order to Invoice" THEN BEGIN
        PurchCommentLine.CopyComments(
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchInvLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostPurchLine>
    Code lines:
    ...
              PurchInvLine."Order No." := PurchRcptLine."Order No.";
              PurchInvLine."Order Line No." := PurchRcptLine."Order Line No.";
            END;
          OnBeforePurchInvLineInsert(PurchInvLine,PurchInvHeader,PurchLine,SuppressCommit);
          PurchInvLine.INSERT(TRUE);
          OnAfterPurchInvLineInsert( <=====================
            PurchInvLine,PurchInvHeader,PurchLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit);
          CreatePostedDeferralScheduleFromPurchDoc(xPurchLine,PurchInvLine.GetDocumentType,
            PurchInvHeader."No.",PurchInvLine."Line No.",PurchInvHeader."Posting Date");
        END ELSE BEGIN // Credit Memo
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchRcptHeaderInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertReceiptHeader>
    Code lines:
    ...
        PurchRcptHeader."No. Printed" := 0;
        PurchRcptHeader."Source Code" := SrcCode;
        PurchRcptHeader."User ID" := USERID;
        OnBeforePurchRcptHeaderInsert(PurchRcptHeader,PurchHeader,SuppressCommit);
        PurchRcptHeader.INSERT(TRUE);
        OnAfterPurchRcptHeaderInsert(PurchRcptHeader,PurchHeader,SuppressCommit); <=====================
    
        ApprovalsMgmt.PostApprovalEntries(RECORDID,PurchRcptHeader.RECORDID,PurchRcptHeader."No.");
    
        IF PurchSetup."Copy Comments Order to Receipt" THEN BEGIN
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchRcptLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertReceiptLine>
    Code lines:
    ...
      PurchRcptLine."Item Rcpt. Entry No." := InsertRcptEntryRelation(PurchRcptLine);
      PurchRcptLine."Item Charge Base Amount" := ROUND(CostBaseAmount / PurchLine.Quantity * PurchRcptLine.Quantity);
    END;
    OnBeforePurchRcptLineInsert(PurchRcptLine,PurchRcptHeader,PurchLine,SuppressCommit);
    PurchRcptLine.INSERT(TRUE);
    OnAfterPurchRcptLineInsert(PurchLine,PurchRcptLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterResetTempLines>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<ResetTempLines>
    Code lines:
    TempPurchLineLocal.RESET;
    TempPurchLineLocal.COPY(TempPurchLineGlobal,TRUE);
    
    OnAfterResetTempLines(TempPurchLineGlobal); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterReturnShptHeaderInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertReturnShipmentHeader>
    Code lines:
    ...
      ReturnShptHeader."No. Printed" := 0;
      ReturnShptHeader."Source Code" := SrcCode;
      ReturnShptHeader."User ID" := USERID;
      OnBeforeReturnShptHeaderInsert(ReturnShptHeader,PurchHeader,SuppressCommit);
      ReturnShptHeader.INSERT(TRUE);
      OnAfterReturnShptHeaderInsert(ReturnShptHeader,PurchHeader,SuppressCommit); <=====================
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,ReturnShptHeader.RECORDID,ReturnShptHeader."No.");
    
      IF PurchSetup."Copy Cmts Ret.Ord. to Ret.Shpt" THEN BEGIN
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterReturnShptLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertReturnShipmentLine>
    Code lines:
    ...
      ReturnShptLine."Item Shpt. Entry No." := InsertReturnEntryRelation(ReturnShptLine);
      ReturnShptLine."Item Charge Base Amount" := ROUND(CostBaseAmount / PurchLine.Quantity * ReturnShptLine.Quantity);
    END;
    OnBeforeReturnShptLineInsert(ReturnShptLine,ReturnShptHeader,PurchLine,SuppressCommit);
    ReturnShptLine.INSERT(TRUE);
    OnAfterReturnShptLineInsert( <=====================
      ReturnShptLine,ReturnShptHeader,PurchLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit,TempWhseShptHeader);
    
    CheckCertificateOfSupplyStatus(ReturnShptHeader,ReturnShptLine);
Codeunit<Purch.-Post>.PROCEDURE<OnAfterReverseAmount>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<ReverseAmount>
    Code lines:
    ...
      "VAT Difference" := -"VAT Difference";
      "Amount Including VAT" := -"Amount Including VAT";
      "Line Discount Amount" := -"Line Discount Amount";
      "Inv. Discount Amount" := -"Inv. Discount Amount";
      "Salvage Value" := -"Salvage Value";
      OnAfterReverseAmount(PurchLine); <=====================
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterRoundAmount>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<RoundAmount>
    Code lines:
    ...
    
      IncrAmount(PurchHeader,PurchLine,TotalPurchLineLCY);
      Increment(TotalPurchLineLCY."Unit Cost (LCY)",ROUND(PurchLineQty * "Unit Cost (LCY)"));
    END;
    
    OnAfterRoundAmount(PurchHeader,PurchLine,PurchLineQty); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterSetApplyToDocNo>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<SetApplyToDocNo>
    Code lines:
    ...
      "Bal. Account No." := PurchHeader."Bal. Account No.";
      "Applies-to Doc. Type" := DocType;
      "Applies-to Doc. No." := DocNo;
    END;
    
    OnAfterSetApplyToDocNo(GenJnlLine,PurchHeader); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterTestPurchLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<TestPurchLine>
    Code lines:
    ...
            TESTFIELD("Qty. to Invoice",Quantity);
          END;
      END;
    END;
    
    OnAfterTestPurchLine(PurchHeader,PurchLine,WhseReceive,WhseShip); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterUpdatePostingNos>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<UpdatePostingNos>
    Code lines:
    ...
            "Posting No." := PostingPreviewNoTok;
        END;
      END;
    END;
    
    OnAfterUpdatePostingNos(PurchHeader,NoSeriesMgt,SuppressCommit); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterUpdatePrepmtPurchLineWithRounding>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<UpdatePrepmtPurchLineWithRounding>
    Code lines:
    ...
        TotalPurchLine."Amount Including VAT" := 0;
        TotalPurchLineLCY."Amount Including VAT" := 0;
      END;
    END;
    
    OnAfterUpdatePrepmtPurchLineWithRounding( <=====================
      PrepmtPurchLine,TotalRoundingAmount,TotalPrepmtAmount,FinalInvoice,PricesInclVATRoundingAmount,
      TotalPurchLine,TotalPurchLineLCY);
Codeunit<Purch.-Post>.PROCEDURE<OnAfterUpdatePurchLineBeforePost>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<UpdatePurchLineBeforePost>
    Code lines:
    ...
      END ELSE BEGIN
        "Qty. to Invoice" := 0;
        "Qty. to Invoice (Base)" := 0;
      END;
    END;
    OnAfterUpdatePurchLineBeforePost(PurchLine,WhseShip,WhseReceive); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeBlanketOrderPurchLineModify>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<UpdateBlanketOrderLine>
    Code lines:
    ...
          BlanketOrderPurchLine."Qty. to Invoice (Base)" :=
            BlanketOrderPurchLine."Quantity (Base)" - BlanketOrderPurchLine."Qty. Invoiced (Base)";
          BlanketOrderPurchLine."Qty. to Receive (Base)" :=
            BlanketOrderPurchLine."Quantity (Base)" - BlanketOrderPurchLine."Qty. Received (Base)";
    
          OnBeforeBlanketOrderPurchLineModify(BlanketOrderPurchLine,PurchLine); <=====================
          BlanketOrderPurchLine.MODIFY;
        END;
      END;
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeCheckExternalDocumentNumber>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CheckExternalDocumentNumber>
    Code lines:
    OnBeforeCheckExternalDocumentNumber(VendLedgEntry,PurchaseHeader,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    VendLedgEntry.RESET;
    VendLedgEntry.SETCURRENTKEY("External Document No.");
    VendLedgEntry.SETRANGE("Document Type",GenJnlLineDocType);
    VendLedgEntry.SETRANGE("External Document No.",GenJnlLineExtDocNo);
    VendLedgEntry.SETRANGE("Vendor No.",PurchaseHeader."Pay-to Vendor No.");
    VendLedgEntry.SETRANGE(Reversed,FALSE);
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeDeleteAfterPosting>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<DeleteAfterPosting>
    Code lines:
    OnBeforeDeleteAfterPosting(PurchHeader,PurchInvHeader,PurchCrMemoHeader,SkipDelete,SuppressCommit); <=====================
    IF SkipDelete THEN
      EXIT;
    
    WITH PurchHeader DO BEGIN
      IF HASLINKS THEN
        DELETELINKS;
      DELETE;
    
      ReservePurchLine.DeleteInvoiceSpecFromHeader(PurchHeader);
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeDivideAmount>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<DivideAmount>
    Code lines:
    IF RoundingLineInserted AND (RoundingLineNo = PurchLine."Line No.") THEN
      EXIT;
    
    OnBeforeDivideAmount(PurchHeader,PurchLine,QtyType,PurchLineQty,TempVATAmountLine,TempVATAmountLineRemainder); <=====================
    
    WITH PurchLine DO
      IF (PurchLineQty = 0) OR ("Direct Unit Cost" = 0) THEN BEGIN
        "Line Amount" := 0;
        "Line Discount Amount" := 0;
        "Inv. Discount Amount" := 0;
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeFillDeferralPostingBuffer>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<FillInvoicePostBuffer>
    Code lines:
    ...
    InvoicePostBuffer.UpdateVATBase(TotalVATBase,TotalVATBaseACY);
    InvoicePostBuffer."Deferral Code" := PurchLine."Deferral Code";
    OnAfterFillInvoicePostBuffer(InvoicePostBuffer,PurchLine,TempInvoicePostBuffer,SuppressCommit);
    UpdateInvoicePostBuffer(TempInvoicePostBuffer,InvoicePostBuffer);
    IF PurchLine."Deferral Code" <> '' THEN BEGIN
      OnBeforeFillDeferralPostingBuffer( <=====================
        PurchLine,InvoicePostBuffer,TempInvoicePostBuffer,Usedate,InvDefLineNo,DeferralLineNo,SuppressCommit);
      FillDeferralPostingBuffer(PurchHeader,PurchLine,InvoicePostBuffer,AmtToDefer,AmtToDeferACY,DeferralAccount,PurchAccount);
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeFinalizePosting>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<FinalizePosting>
    Code lines:
    OnBeforeFinalizePosting(PurchHeader,TempPurchLineGlobal,EverythingInvoiced,SuppressCommit); <=====================
    
    WITH PurchHeader DO BEGIN
      IF ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"]) AND
         (NOT EverythingInvoiced)
      THEN BEGIN
        MODIFY;
        InsertTrackingSpecification(PurchHeader);
        PostUpdateOrderLine(PurchHeader);
        UpdateAssocOrder(TempDropShptPostBuffer);
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeGetCountryCode>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<GetCountryCode>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetCountryCode(SalesHeader,SalesLine,CountryRegionCode,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(CountryRegionCode);
    
    IF SalesLine."Shipment No." <> '' THEN BEGIN
      SalesShipmentHeader.GET(SalesLine."Shipment No.");
      EXIT(
        GetCountryRegionCode(
          SalesLine."Sell-to Customer No.",
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeInsertReceiptHeader>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertReceiptHeader>
    Code lines:
    IsHandled := FALSE;
    OnBeforeInsertReceiptHeader(PurchHeader,PurchRcptHeader,IsHandled,SuppressCommit); <=====================
    
    WITH PurchHeader DO BEGIN
      IF NOT IsHandled THEN BEGIN
        PurchRcptHeader.INIT;
        PurchRcptHeader.TRANSFERFIELDS(PurchHeader);
        PurchRcptHeader."No." := "Receiving No.";
        IF "Document Type" = "Document Type"::Order THEN BEGIN
          PurchRcptHeader."Order No. Series" := "No. Series";
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeInvoiceRoundingAmount>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InvoiceRounding>
    Code lines:
    ...
        TotalPurchLine."Amount Including VAT" -
        ROUND(
          TotalPurchLine."Amount Including VAT",Currency."Invoice Rounding Precision",Currency.InvoiceRoundingDirection),
        Currency."Amount Rounding Precision");
    
    OnBeforeInvoiceRoundingAmount( <=====================
      PurchHeader,TotalPurchLine."Amount Including VAT",UseTempData,InvoiceRoundingAmount,SuppressCommit);
    IF InvoiceRoundingAmount <> 0 THEN BEGIN
      VendPostingGr.GET(PurchHeader."Vendor Posting Group");
      VendPostingGr.TESTFIELD("Invoice Rounding Account");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeItemJnlPostLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
          PostItemJnlLineJobConsumption(
            PurchHeader,PurchLine,OriginalItemJnlLine,TempReservationEntry,QtyToBeInvoiced,QtyToBeReceived,
            TempHandlingSpecification,0);
      END;
    
      OnBeforeItemJnlPostLine(ItemJnlLine,PurchLine,PurchHeader,SuppressCommit); <=====================
      ItemJnlPostLine.RunWithCheck(ItemJnlLine);
    
      IF NOT Subcontracting THEN
        PostItemJnlLineTracking(
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostAssocItemJnlLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostAssocItemJnlLine>
    Code lines:
    ...
      END;
    END;
    
    IF SalesOrderLine."Job Contract Entry No." = 0 THEN BEGIN
      TransferReservToItemJnlLine(SalesOrderLine,ItemJnlLine,PurchLine,QtyToBeShippedBase,TRUE);
      OnBeforePostAssocItemJnlLine(ItemJnlLine,SalesOrderLine,SuppressCommit); <=====================
      ItemJnlPostLine.RunWithCheck(ItemJnlLine);
      // Handle Item Tracking
      IF ItemJnlPostLine.CollectTrackingSpecification(TempHandlingSpecification2) THEN BEGIN
        IF TempHandlingSpecification2.FINDSET THEN
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostBalancingEntry>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostBalancingEntry>
    Code lines:
    ...
        "Amount (LCY)" :=
          TotalPurchLineLCY2."Amount Including VAT" +
          ROUND(VendLedgEntry."Remaining Pmt. Disc. Possible" / VendLedgEntry."Adjusted Currency Factor");
      "Allow Zero-Amount Posting" := TRUE;
    
      OnBeforePostBalancingEntry(GenJnlLine,PurchHeader,TotalPurchLine2,TotalPurchLineLCY2,PreviewMode,SuppressCommit); <=====================
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostBalancingEntry(GenJnlLine,PurchHeader,TotalPurchLine2,TotalPurchLineLCY2,SuppressCommit,GenJnlPostLine);
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostCommitPurchaseDoc>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CheckAndUpdate>
    Code lines:
    ...
    
      ModifyHeader := UpdatePostingNos(PurchHeader);
    
      DropShipOrder := UpdateAssosOrderPostingNos(PurchHeader);
    
      OnBeforePostCommitPurchaseDoc(PurchHeader,GenJnlPostLine,PreviewMode,ModifyHeader,SuppressCommit); <=====================
      IF NOT PreviewMode AND ModifyHeader THEN BEGIN
        MODIFY;
        COMMIT;
      END;
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostGLAccICLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostGLAccICLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforePostGLAccICLine(PurchHeader,PurchLine,ICGenJnlLineNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF (PurchLine."No." <> '') AND NOT PurchLine."System-Created Entry" THEN BEGIN
      GLAcc.GET(PurchLine."No.");
      GLAcc.TESTFIELD("Direct Posting");
      IF (PurchLine."Job No." <> '') AND (PurchLine."Qty. to Invoice" <> 0) THEN BEGIN
        CreateJobPurchLine(JobPurchLine,PurchLine,PurchHeader."Prices Including VAT");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostGLAndVendor>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostGLAndVendor>
    Code lines:
    OnBeforePostGLAndVendor(PurchHeader,TempInvoicePostBuffer,PreviewMode,SuppressCommit); <=====================
    
    WITH PurchHeader DO BEGIN
      // Post purchase and VAT to G/L entries from buffer
      PostInvoicePostingBuffer(PurchHeader,TempInvoicePostBuffer);
    
      // Check External Document number
      IF PurchSetup."Ext. Doc. No. Mandatory" OR (GenJnlLineExtDocNo <> '') THEN
        CheckExternalDocumentNumber(VendLedgEntry,PurchHeader);
    
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostInvPostBuffer>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostInvoicePostBufferLine>
    Code lines:
    ...
            "FA Posting Type" := "FA Posting Type"::Appreciation;
        END;
        CopyFromInvoicePostBufferFA(InvoicePostBuffer);
      END;
    
      OnBeforePostInvPostBuffer(GenJnlLine,InvoicePostBuffer,PurchHeader,GenJnlPostLine,PreviewMode,SuppressCommit); <=====================
      GLEntryNo := RunGenJnlPostLine(GenJnlLine);
      OnAfterPostInvPostBuffer(GenJnlLine,InvoicePostBuffer,PurchHeader,GLEntryNo,SuppressCommit,GenJnlPostLine);
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostItemChargePerOrder>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemChargePerOrder>
    Code lines:
    OnBeforePostItemChargePerOrder( <=====================
      PurchHeader,PurchLine,ItemJnlLine2,ItemChargePurchLine,TempTrackingSpecificationChargeAssmt,SuppressCommit,
      TempItemChargeAssgntPurch);
    
    WITH TempItemChargeAssgntPurch DO BEGIN
      PurchLine.TESTFIELD("Allow Item Charge Assignment",TRUE);
      ItemJnlLine2."Document No." := GenJnlLineDocNo;
      ItemJnlLine2."External Document No." := GenJnlLineExtDocNo;
      ItemJnlLine2."Item Charge No." := "Item Charge No.";
      ItemJnlLine2.Description := ItemChargePurchLine.Description;
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostItemJnlLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemJnlLine>
    Code lines:
    IF NOT ItemJnlRollRndg THEN BEGIN
      RemAmt := 0;
      RemDiscAmt := 0;
    END;
    
    OnBeforePostItemJnlLine( <=====================
      PurchHeader,PurchLine,QtyToBeReceived,QtyToBeReceivedBase,QtyToBeInvoiced,QtyToBeInvoicedBase,
      ItemLedgShptEntryNo,ItemChargeNo,TrackingSpecification,SuppressCommit);
    
    WITH ItemJnlLine DO BEGIN
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostItemJnlLineJobConsumption>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
    
      IF NOT Subcontracting THEN
        PostItemJnlLineTracking(
          PurchLine,TempWhseTrackingSpecification,TempTrackingSpecificationChargeAssmt,PostWhseJnlLine,QtyToBeInvoiced);
    
      OnBeforePostItemJnlLineJobConsumption( <=====================
        ItemJnlLine,PurchLine,PurchInvHeader,PurchCrMemoHeader,QtyToBeInvoiced,QtyToBeInvoicedBase,SrcCode);
    
      IF PurchLine."Job No." <> '' THEN
        IF NOT PostJobConsumptionBeforePurch THEN
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostLines>
  Raised in: Codeunit<Purch.-Post>.<OnRun>
    Code lines:
    ...
    // Lines
    PurchLine.RESET;
    PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
    PurchLine.SETRANGE("Document No.",PurchHeader."No.");
    
    OnBeforePostLines(PurchLine,PurchHeader,PreviewMode,SuppressCommit); <=====================
    
    LineCount := 0;
    RoundingLineInserted := FALSE;
    MergePurchLines(PurchHeader,PurchLine,TempPrepmtPurchLine,TempCombinedPurchLine);
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostPurchaseDoc>
  Raised in: Codeunit<Purch.-Post>.<OnRun>
    Code lines:
    OnBeforePostPurchaseDoc(Rec,PreviewMode,SuppressCommit); <=====================
    
    ValidatePostingAndDocumentDate(Rec);
    
    SavedPreviewMode := PreviewMode;
    SavedSuppressCommit := SuppressCommit;
    ClearAllVariables;
    PreviewMode := SavedPreviewMode;
    SuppressCommit := SavedSuppressCommit;
    
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostUpdateOrderLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostUpdateOrderLine>
    Code lines:
    OnBeforePostUpdateOrderLine(PurchHeader,TempPurchLineGlobal); <=====================
    
    ResetTempLines(TempPurchLine);
    WITH TempPurchLine DO BEGIN
      SETFILTER(Quantity,'<>0');
      IF FINDSET THEN
        REPEAT
          IF PurchHeader.Receive THEN BEGIN
            "Quantity Received" += "Qty. to Receive";
            "Qty. Received (Base)" += "Qty. to Receive (Base)";
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostVendorEntry>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostVendorEntry>
    Code lines:
    ...
      "Source Currency Amount" := -TotalPurchLine2."Amount Including VAT";
      "Amount (LCY)" := -TotalPurchLineLCY2."Amount Including VAT";
      "Sales/Purch. (LCY)" := -TotalPurchLineLCY2.Amount;
      "Inv. Discount (LCY)" := -TotalPurchLineLCY2."Inv. Discount Amount";
    
      OnBeforePostVendorEntry(GenJnlLine,PurchHeader,TotalPurchLine2,TotalPurchLineLCY2,PreviewMode,SuppressCommit); <=====================
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostVendorEntry(GenJnlLine,PurchHeader,TotalPurchLine2,TotalPurchLineLCY2,SuppressCommit,GenJnlPostLine);
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchCrMemoHeaderInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertCrMemoHeader>
    Code lines:
    ...
        END;
      END;
      PurchCrMemoHdr."Source Code" := SrcCode;
      PurchCrMemoHdr."User ID" := USERID;
      PurchCrMemoHdr."No. Printed" := 0;
      OnBeforePurchCrMemoHeaderInsert(PurchCrMemoHdr,PurchHeader,SuppressCommit); <=====================
      PurchCrMemoHdr.INSERT(TRUE);
      OnAfterPurchCrMemoHeaderInsert(PurchCrMemoHdr,PurchHeader,SuppressCommit);
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,PurchCrMemoHdr.RECORDID,PurchCrMemoHdr."No.");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchCrMemoLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostPurchLine>
    Code lines:
    ...
          ItemJnlPostLine.CollectValueEntryRelation(TempValueEntryRelation,COPYSTR(PurchCrMemoLine.RowID1,1,100));
          IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
            PurchCrMemoLine."Order No." := "Document No.";
            PurchCrMemoLine."Order Line No." := "Line No.";
          END;
          OnBeforePurchCrMemoLineInsert(PurchCrMemoLine,PurchCrMemoHeader,PurchLine,SuppressCommit); <=====================
          PurchCrMemoLine.INSERT(TRUE);
          OnAfterPurchCrMemoLineInsert(PurchCrMemoLine,PurchCrMemoHeader,PurchLine,SuppressCommit);
          CreatePostedDeferralScheduleFromPurchDoc(xPurchLine,PurchCrMemoLine.GetDocumentType,
            PurchCrMemoHeader."No.",PurchCrMemoLine."Line No.",PurchCrMemoHeader."Posting Date");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchInvHeaderInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertInvoiceHeader>
    Code lines:
    ...
      PurchInvHeader."Payment Reference" := "Payment Reference";
      PurchInvHeader."Payment Method Code" := "Payment Method Code";
      PurchInvHeader."Source Code" := SrcCode;
      PurchInvHeader."User ID" := USERID;
      PurchInvHeader."No. Printed" := 0;
      OnBeforePurchInvHeaderInsert(PurchInvHeader,PurchHeader,SuppressCommit); <=====================
      PurchInvHeader.INSERT(TRUE);
      OnAfterPurchInvHeaderInsert(PurchInvHeader,PurchHeader);
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,PurchInvHeader.RECORDID,PurchInvHeader."No.");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchInvLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostPurchLine>
    Code lines:
    ...
          END ELSE
            IF PurchRcptLine.GET("Receipt No.","Receipt Line No.") THEN BEGIN
              PurchInvLine."Order No." := PurchRcptLine."Order No.";
              PurchInvLine."Order Line No." := PurchRcptLine."Order Line No.";
            END;
          OnBeforePurchInvLineInsert(PurchInvLine,PurchInvHeader,PurchLine,SuppressCommit); <=====================
          PurchInvLine.INSERT(TRUE);
          OnAfterPurchInvLineInsert(
            PurchInvLine,PurchInvHeader,PurchLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit);
          CreatePostedDeferralScheduleFromPurchDoc(xPurchLine,PurchInvLine.GetDocumentType,
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchLineDeleteAll>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<DeleteAfterPosting>
    Code lines:
    ...
            TempPurchLine.DELETELINKS;
        UNTIL TempPurchLine.NEXT = 0;
    
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      OnBeforePurchLineDeleteAll(PurchLine,SuppressCommit); <=====================
      PurchLine.DELETEALL;
    
      DeleteItemChargeAssgnt(PurchHeader);
      PurchCommentLine.DeleteComments("Document Type","No.");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchRcptHeaderInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertReceiptHeader>
    Code lines:
    ...
          PurchRcptHeader."Order No." := "No.";
        END;
        PurchRcptHeader."No. Printed" := 0;
        PurchRcptHeader."Source Code" := SrcCode;
        PurchRcptHeader."User ID" := USERID;
        OnBeforePurchRcptHeaderInsert(PurchRcptHeader,PurchHeader,SuppressCommit); <=====================
        PurchRcptHeader.INSERT(TRUE);
        OnAfterPurchRcptHeaderInsert(PurchRcptHeader,PurchHeader,SuppressCommit);
    
        ApprovalsMgmt.PostApprovalEntries(RECORDID,PurchRcptHeader.RECORDID,PurchRcptHeader."No.");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchRcptLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertReceiptLine>
    Code lines:
    ...
          WhseShptLine,PostedWhseShptHeader,PostedWhseShptLine,TempWhseSplitSpecification);
      END;
      PurchRcptLine."Item Rcpt. Entry No." := InsertRcptEntryRelation(PurchRcptLine);
      PurchRcptLine."Item Charge Base Amount" := ROUND(CostBaseAmount / PurchLine.Quantity * PurchRcptLine.Quantity);
    END;
    OnBeforePurchRcptLineInsert(PurchRcptLine,PurchRcptHeader,PurchLine,SuppressCommit); <=====================
    PurchRcptLine.INSERT(TRUE);
    OnAfterPurchRcptLineInsert(PurchLine,PurchRcptLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit);
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeReturnShptHeaderInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertReturnShipmentHeader>
    Code lines:
    ...
      END;
      ReturnShptHeader."No. Series" := "Return Shipment No. Series";
      ReturnShptHeader."No. Printed" := 0;
      ReturnShptHeader."Source Code" := SrcCode;
      ReturnShptHeader."User ID" := USERID;
      OnBeforeReturnShptHeaderInsert(ReturnShptHeader,PurchHeader,SuppressCommit); <=====================
      ReturnShptHeader.INSERT(TRUE);
      OnAfterReturnShptHeaderInsert(ReturnShptHeader,PurchHeader,SuppressCommit);
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,ReturnShptHeader.RECORDID,ReturnShptHeader."No.");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeReturnShptLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertReturnShipmentLine>
    Code lines:
    ...
      END;
    
      ReturnShptLine."Item Shpt. Entry No." := InsertReturnEntryRelation(ReturnShptLine);
      ReturnShptLine."Item Charge Base Amount" := ROUND(CostBaseAmount / PurchLine.Quantity * ReturnShptLine.Quantity);
    END;
    OnBeforeReturnShptLineInsert(ReturnShptLine,ReturnShptHeader,PurchLine,SuppressCommit); <=====================
    ReturnShptLine.INSERT(TRUE);
    OnAfterReturnShptLineInsert(
      ReturnShptLine,ReturnShptHeader,PurchLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit,TempWhseShptHeader);
    
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeRoundAmount>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<RoundAmount>
    Code lines:
    OnBeforeRoundAmount(PurchHeader,PurchLine,PurchLineQty); <=====================
    
    WITH PurchLine DO BEGIN
      IncrAmount(PurchHeader,PurchLine,TotalPurchLine);
      Increment(TotalPurchLine."Net Weight",ROUND(PurchLineQty * "Net Weight",0.00001));
      Increment(TotalPurchLine."Gross Weight",ROUND(PurchLineQty * "Gross Weight",0.00001));
      Increment(TotalPurchLine."Unit Volume",ROUND(PurchLineQty * "Unit Volume",0.00001));
      Increment(TotalPurchLine.Quantity,PurchLineQty);
      IF "Units per Parcel" > 0 THEN
        Increment(TotalPurchLine."Units per Parcel",ROUND(PurchLineQty / "Units per Parcel",1,'>'));
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeSalesShptHeaderInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostCombineSalesOrderShipment>
    Code lines:
    ...
          SalesShptHeader."No." := SalesOrderHeader."Shipping No.";
          SalesShptHeader."Order No." := SalesOrderHeader."No.";
          SalesShptHeader."Posting Date" := "Posting Date";
          SalesShptHeader."Document Date" := "Document Date";
          SalesShptHeader."No. Printed" := 0;
          OnBeforeSalesShptHeaderInsert(SalesShptHeader,SalesOrderHeader,SuppressCommit); <=====================
          SalesShptHeader.INSERT(TRUE);
    
          ApprovalsMgmt.PostApprovalEntries(RECORDID,SalesShptHeader.RECORDID,SalesShptHeader."No.");
    
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeSalesShptLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostCombineSalesOrderShipment>
    Code lines:
    ...
              SalesShptLine.Quantity - SalesShptLine."Quantity Invoiced";
            IF SalesShptLine.Quantity <> 0 THEN BEGIN
              SalesShptLine."Item Shpt. Entry No." := TempDropShptPostBuffer."Item Shpt. Entry No.";
              SalesShptLine."Item Charge Base Amount" := SalesOrderLine."Line Amount";
            END;
            OnBeforeSalesShptLineInsert(SalesShptLine,SalesShptHeader,SalesOrderLine,SuppressCommit); <=====================
            SalesShptLine.INSERT;
            CheckSalesCertificateOfSupplyStatus(SalesShptHeader,SalesShptLine);
    
            SalesOrderLine."Qty. to Ship" := SalesShptLine.Quantity;
    ...
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostCombineSalesOrderShipment>
    Code lines:
    ...
              SalesShptLine.Quantity - SalesShptLine."Quantity Invoiced";
            IF SalesShptLine.Quantity <> 0 THEN BEGIN
              SalesShptLine."Item Shpt. Entry No." := TempDropShptPostBuffer."Item Shpt. Entry No.";
              SalesShptLine."Item Charge Base Amount" := SalesOrderLine."Line Amount";
            END;
            OnBeforeSalesShptLineInsert(SalesShptLine,SalesShptHeader,SalesOrderLine,SuppressCommit); <=====================
            SalesShptLine.INSERT;
            CheckSalesCertificateOfSupplyStatus(SalesShptHeader,SalesShptLine);
    
            SalesOrderLine."Qty. to Ship" := SalesShptLine.Quantity;
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeTempPrepmtPurchLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CreatePrepmtLines>
    Code lines:
    ...
              TempPrepmtPurchLine."Job No." := "Job No.";
              TempPrepmtPurchLine."Job Task No." := "Job Task No.";
              TempPrepmtPurchLine."Job Line Type" := "Job Line Type";
              TempPrepmtPurchLine."Line No." := NextLineNo;
              NextLineNo := NextLineNo + 10000;
              OnBeforeTempPrepmtPurchLineInsert(TempPrepmtPurchLine,TempPurchLine,PurchHeader,CompleteFunctionality); <=====================
              TempPrepmtPurchLine.INSERT;
    
              TransferExtText.PrepmtGetAnyExtText(
                TempPrepmtPurchLine."No.",DATABASE::"Purch. Inv. Line",
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeTempPrepmtPurchLineModify>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CreatePrepmtLines>
    Code lines:
    ...
                "Direct Unit Cost",TempPrepmtPurchLine."Direct Unit Cost" + "Prepmt Amt to Deduct");
              TempPrepmtPurchLine.VALIDATE("VAT Difference",VATDifference - "Prepmt VAT Diff. to Deduct");
              TempPrepmtPurchLine."Prepmt Amt to Deduct" := PrepmtAmtToDeduct;
              IF "Prepayment %" < TempPrepmtPurchLine."Prepayment %" THEN
                TempPrepmtPurchLine."Prepayment %" := "Prepayment %";
              OnBeforeTempPrepmtPurchLineModify(TempPrepmtPurchLine,TempPurchLine,PurchHeader,CompleteFunctionality); <=====================
              TempPrepmtPurchLine.MODIFY;
            END ELSE BEGIN
              TempPrepmtPurchLine.INIT;
              TempPrepmtPurchLine."Document Type" := PurchHeader."Document Type";
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeTestPurchLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<TestPurchLine>
    Code lines:
    OnBeforeTestPurchLine(PurchLine,PurchHeader,SuppressCommit); <=====================
    
    WITH PurchLine DO BEGIN
      IF Type = Type::Item THEN
        DummyTrackingSpecification.CheckItemTrackingQuantity(
          DATABASE::"Purchase Line","Document Type","Document No.","Line No.",
          "Qty. to Receive (Base)","Qty. to Invoice (Base)",PurchHeader.Receive,PurchHeader.Invoice);
    
      IF Type = Type::"Charge (Item)" THEN BEGIN
        TESTFIELD(Amount);
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeUpdateInvoicedQtyOnPurchRcptLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<UpdateInvoicedQtyOnPurchRcptLine>
    Code lines:
    OnBeforeUpdateInvoicedQtyOnPurchRcptLine(PurchRcptLine,QtyToBeInvoiced,QtyToBeInvoicedBase,SuppressCommit); <=====================
    WITH PurchRcptLine DO BEGIN
      "Quantity Invoiced" := "Quantity Invoiced" + QtyToBeInvoiced;
      "Qty. Invoiced (Base)" := "Qty. Invoiced (Base)" + QtyToBeInvoicedBase;
      "Qty. Rcd. Not Invoiced" := Quantity - "Quantity Invoiced";
      MODIFY;
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeUpdatePrepmtPurchLineWithRounding>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<UpdatePrepmtPurchLineWithRounding>
    Code lines:
    OnBeforeUpdatePrepmtPurchLineWithRounding( <=====================
      PrepmtPurchLine,TotalRoundingAmount,TotalPrepmtAmount,FinalInvoice,PricesInclVATRoundingAmount,
      TotalPurchLine,TotalPurchLineLCY);
    
    WITH PrepmtPurchLine DO BEGIN
      NewAmountIncludingVAT := TotalPrepmtAmount[1] + TotalPrepmtAmount[2] + TotalRoundingAmount[1] + TotalRoundingAmount[2];
      IF "Prepayment %" = 100 THEN
        TotalRoundingAmount[1] -= "Amount Including VAT" + NewAmountIncludingVAT;
      AmountRoundingPrecision :=
        GetAmountRoundingPrecisionInLCY("Document Type","Document No.","Currency Code");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeUpdatePurchLineBeforePost>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<UpdatePurchLineBeforePost>
    Code lines:
    WITH PurchLine DO BEGIN
      OnBeforeUpdatePurchLineBeforePost(PurchLine,PurchHeader,WhseShip,WhseReceive,RoundingLineInserted,SuppressCommit); <=====================
    
      IF NOT (PurchHeader.Receive OR RoundingLineInserted) THEN BEGIN
        "Qty. to Receive" := 0;
        "Qty. to Receive (Base)" := 0;
      END;
    
      IF NOT (PurchHeader.Ship OR RoundingLineInserted) THEN BEGIN
        "Return Qty. to Ship" := 0;
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeValidatePostingAndDocumentDate>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<ValidatePostingAndDocumentDate>
    Code lines:
    OnBeforeValidatePostingAndDocumentDate(PurchaseHeader,SuppressCommit); <=====================
    
    PostingDateExists :=
      BatchProcessingMgt.GetParameterBoolean(
        PurchaseHeader.RECORDID,BatchPostParameterTypes.ReplacePostingDate,ReplacePostingDate) AND
      BatchProcessingMgt.GetParameterBoolean(
        PurchaseHeader.RECORDID,BatchPostParameterTypes.ReplaceDocumentDate,ReplaceDocumentDate) AND
      BatchProcessingMgt.GetParameterDate(
        PurchaseHeader.RECORDID,BatchPostParameterTypes.PostingDate,PostingDate);
    
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnCopyAndCheckItemChargeOnBeforeLoop>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CopyAndCheckItemCharge>
    Code lines:
    ...
        UNTIL ItemChargeAssgntPurch.NEXT = 0;
    
      SETFILTER("Qty. to Invoice",'<>0');
      IF FINDSET THEN
        REPEAT
          OnCopyAndCheckItemChargeOnBeforeLoop(TempPurchLine,PurchHeader); <=====================
          TESTFIELD("Job No.",'');
          IF PurchHeader.Invoice AND
             ("Qty. to Receive" + "Return Qty. to Ship" <> 0) AND
             ((PurchHeader.Ship OR PurchHeader.Receive) OR
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnFillInvoicePostBufferOnAfterInitAmounts>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<FillInvoicePostBuffer>
    Code lines:
    GenPostingSetup.GET(PurchLine."Gen. Bus. Posting Group",PurchLine."Gen. Prod. Posting Group");
    InvoicePostBuffer.PreparePurchase(PurchLine);
    InitAmounts(PurchLine,TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY,AmtToDefer,AmtToDeferACY,DeferralAccount);
    InitVATBase(PurchLine,TotalVATBase,TotalVATBaseACY);
    
    OnFillInvoicePostBufferOnAfterInitAmounts( <=====================
      PurchHeader,PurchLine,PurchLineACY,TempInvoicePostBuffer,InvoicePostBuffer,TotalAmount,TotalAmountACY);
    
    IF PurchSetup."Discount Posting" IN
       [PurchSetup."Discount Posting"::"Invoice Discounts",PurchSetup."Discount Posting"::"All Discounts"]
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnGetItemChargeLineOnAfterGet>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<GetItemChargeLine>
    Code lines:
    ...
      IF (ItemChargePurchLine."Document Type" <> "Document Type") OR
         (ItemChargePurchLine."Document No." <> "Document No.") OR
         (ItemChargePurchLine."Line No." <> "Document Line No.")
      THEN BEGIN
        ItemChargePurchLine.GET("Document Type","Document No.","Document Line No.");
        OnGetItemChargeLineOnAfterGet(ItemChargePurchLine,PurchHeader); <=====================
        IF NOT PurchHeader.Receive THEN
          ItemChargePurchLine."Qty. to Receive" := 0;
        IF NOT PurchHeader.Ship THEN
          ItemChargePurchLine."Return Qty. to Ship" := 0;
    ...
Codeunit<Assembly-Post>.PROCEDURE<OnAfterCreateItemJnlLineFromAssemblyHeader>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<PostItemOutput>
    Code lines:
    ...
        ROUND(("Unit Cost" - "Overhead Rate") / (1 + "Indirect Cost %" / 100),
          GLSetup."Unit-Amount Rounding Precision"));
      ItemJnlLine.Correction := IsCorrection;
      UpdateItemCategoryAndGroupCode(ItemJnlLine);
    END;
    OnAfterCreateItemJnlLineFromAssemblyHeader(ItemJnlLine,AssemblyHeader); <=====================
    
    IF IsCorrection THEN
      PostCorrectionItemJnLine(
        ItemJnlLine,AssemblyHeader,ItemJnlPostLine,WhseJnlRegisterLine,DATABASE::"Posted Assembly Header",ApplyToEntryNo)
    ...
Codeunit<Assembly-Post>.PROCEDURE<OnAfterCreateItemJnlLineFromAssemblyLine>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<PostResourceConsumption>
    Code lines:
    ...
      ItemJnlLine.Description := Description;
      ItemJnlLine.Quantity := QtyToConsume;
      ItemJnlLine."Quantity (Base)" := QtyToConsumeBase;
      ItemJnlLine.Correction := IsCorrection;
    END;
    OnAfterCreateItemJnlLineFromAssemblyLine(ItemJnlLine,AssemblyLine); <=====================
    ItemJnlPostLine.RunWithCheck(ItemJnlLine);
    
    WITH ItemJnlLine DO BEGIN
      ResJnlLine.INIT;
    ...
Codeunit<Assembly-Post>.PROCEDURE<OnAfterCreateResJnlLineFromItemJnlLine>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<PostResourceConsumption>
    Code lines:
    ...
      ResJnlLine."Unit Cost" := AssemblyLine."Unit Cost";
      ResJnlLine."Total Cost" := AssemblyLine."Unit Cost" * ResJnlLine.Quantity;
      ResJnlLine."Source Code" := "Source Code";
      ResJnlLine."Posting No. Series" := "Posting No. Series";
      ResJnlLine."Qty. per Unit of Measure" := AssemblyLine."Qty. per Unit of Measure";
      OnAfterCreateResJnlLineFromItemJnlLine(ResJnlLine,ItemJnlLine,AssemblyLine); <=====================
      ResJnlPostLine.RunWithCheck(ResJnlLine);
    END;
    
    TimeSheetMgt.CreateTSLineFromAssemblyLine(AssemblyHeader,AssemblyLine,QtyToConsumeBase);
Codeunit<Assembly-Post>.PROCEDURE<OnAfterFinalizePost>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<FinalizePost>
    Code lines:
    ...
        IF NOT AssemblyCommentLine.ISEMPTY THEN
          AssemblyCommentLine.DELETEALL;
      END;
    END;
    
    OnAfterFinalizePost(AssemblyHeader); <=====================
Codeunit<Assembly-Post>.PROCEDURE<OnAfterInitPost>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<InitPost>
    Code lines:
    ...
      END;
    
      GetSourceCode(IsAsmToOrder);
    END;
    
    OnAfterInitPost(AssemblyHeader); <=====================
Codeunit<Assembly-Post>.PROCEDURE<OnAfterOnRun>
  Raised in: Codeunit<Assembly-Post>.<OnRun>
    Code lines:
    ...
    COMMIT;
    
    Window.CLOSE;
    Rec := AssemblyHeader;
    
    OnAfterOnRun(AssemblyHeader); <=====================
Codeunit<Assembly-Post>.PROCEDURE<OnAfterPost>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<Post>
    Code lines:
    ...
      TESTFIELD("Document Type","Document Type"::Order);
      PostLines(AssemblyHeader,AssemblyLine,PostedAssemblyHeader,ItemJnlPostLine,ResJnlPostLine,WhseJnlRegisterLine);
      PostHeader(AssemblyHeader,PostedAssemblyHeader,ItemJnlPostLine,WhseJnlRegisterLine);
    END;
    
    OnAfterPost(AssemblyHeader); <=====================
Codeunit<Assembly-Post>.PROCEDURE<OnAfterPostedAssemblyHeaderModify>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<PostHeader>
    Code lines:
    ...
      PostedAssemblyHeader."Quantity (Base)" := QtyToOutputBase;
      PostedAssemblyHeader."Cost Amount" := ROUND(PostedAssemblyHeader.Quantity * "Unit Cost");
    
      InsertHeaderItemEntryRelation(PostedAssemblyHeader,ItemJnlPostLine,ItemLedgEntryNo);
      PostedAssemblyHeader.MODIFY;
      OnAfterPostedAssemblyHeaderModify(PostedAssemblyHeader,AssemblyHeader); <=====================
    END;
Codeunit<Assembly-Post>.PROCEDURE<OnAfterPostedAssemblyLineInsert>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<PostLines>
    Code lines:
    ...
          PostedAssemblyLine."Order No." := "Document No.";
          PostedAssemblyLine."Order Line No." := "Line No.";
          InsertLineItemEntryRelation(PostedAssemblyLine,ItemJnlPostLine,ItemLedgEntryNo);
          OnBeforePostedAssemblyLineInsert(PostedAssemblyLine,AssemblyLine);
          PostedAssemblyLine.INSERT;
          OnAfterPostedAssemblyLineInsert(PostedAssemblyLine,AssemblyLine); <=====================
        UNTIL NEXT = 0;
    END;
Codeunit<Assembly-Post>.PROCEDURE<OnAfterRecreateAsmOrderWithUndo>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<RecreateAsmOrderWithUndo>
    Code lines:
    ...
          RestoreItemTracking(TempItemLedgEntry,"Document No.","Line No.",DATABASE::"Assembly Line","Document Type",0D,"Due Date");
          VerifyAsmLineReservAfterUndo(AsmLine);
        END;
      UNTIL PostedAsmLine.NEXT = 0;
    
    OnAfterRecreateAsmOrderWithUndo(PostedAsmHeader,AsmHeader); <=====================
Codeunit<Assembly-Post>.PROCEDURE<OnAfterUpdateAsmOrderWithUndo>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<UpdateAsmOrderWithUndo>
    Code lines:
    ...
          RestoreItemTracking(TempItemLedgEntry,"Document No.","Line No.",DATABASE::"Assembly Line","Document Type",0D,"Due Date");
          VerifyAsmLineReservAfterUndo(AsmLine);
        END;
      UNTIL PostedAsmLine.NEXT = 0;
    
    OnAfterUpdateAsmOrderWithUndo(PostedAsmHeader,AsmHeader); <=====================
Codeunit<Assembly-Post>.PROCEDURE<OnBeforeFinalizePost>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<FinalizePost>
    Code lines:
    OnBeforeFinalizePost(AssemblyHeader); <=====================
    
    MakeInvtAdjmt;
    
    WITH AssemblyHeader DO BEGIN
      // Delete header and lines
      AssemblyLine.RESET;
      AssemblyLine.SETRANGE("Document Type","Document Type");
      AssemblyLine.SETRANGE("Document No.","No.");
      IF "Remaining Quantity (Base)" = 0 THEN BEGIN
    ...
Codeunit<Assembly-Post>.PROCEDURE<OnBeforeInitPost>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<InitPost>
    Code lines:
    OnBeforeInitPost(AssemblyHeader); <=====================
    
    WITH AssemblyHeader DO BEGIN
      TESTFIELD("Document Type");
      TESTFIELD("Posting Date");
      PostingDate := "Posting Date";
      IF GenJnlCheckLine.DateNotAllowed("Posting Date") THEN
        FIELDERROR("Posting Date",Text001);
      TESTFIELD("Item No.");
      CheckDim(AssemblyHeader);
    ...
Codeunit<Assembly-Post>.PROCEDURE<OnBeforeOnRun>
  Raised in: Codeunit<Assembly-Post>.<OnRun>
    Code lines:
    OnBeforeOnRun(AssemblyHeader); <=====================
    
    // Replace posting date if called from batch posting
    ValidatePostingDate(Rec);
    
    CLEARALL;
    AssemblyHeader := Rec;
    
    IF IsAsmToOrder THEN
      TESTFIELD("Assemble to Order",FALSE);
    ...
Codeunit<Assembly-Post>.PROCEDURE<OnBeforePost>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<Post>
    Code lines:
    OnBeforePost(AssemblyHeader); <=====================
    
    WITH AssemblyHeader DO BEGIN
      SuspendStatusCheck(TRUE);
      LockTables(AssemblyLine,AssemblyHeader);
    
      // Insert posted assembly header
      IF "Document Type" = "Document Type"::Order THEN BEGIN
        PostedAssemblyHeader.INIT;
        PostedAssemblyHeader.TRANSFERFIELDS(AssemblyHeader);
    ...
Codeunit<Assembly-Post>.PROCEDURE<OnBeforePostCorrectionItemJnLine>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<PostCorrectionItemJnLine>
    Code lines:
    ...
        ItemJnlLine."Lot No." := TempItemLedgEntry."Lot No.";
        ItemJnlLine."Warranty Date" := TempItemLedgEntry."Warranty Date";
        ItemJnlLine."Item Expiration Date" := TempItemLedgEntry."Expiration Date";
        ItemJnlLine."Item Shpt. Entry No." := 0;
    
        OnBeforePostCorrectionItemJnLine(ItemJnlLine,TempItemLedgEntry); <=====================
    
        ItemJnlPostLine.RunWithCheck(ItemJnlLine);
        PostWhseJnlLine(AssemblyHeader,ItemJnlLine,ItemJnlPostLine,WhseJnlRegisterLine);
      UNTIL TempItemLedgEntry2.NEXT = 0;
Codeunit<Assembly-Post>.PROCEDURE<OnBeforePostedAssemblyLineInsert>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<PostLines>
    Code lines:
    ...
          PostedAssemblyLine."Quantity (Base)" := QtyToConsumeBase;
          PostedAssemblyLine."Cost Amount" := ROUND(PostedAssemblyLine.Quantity * "Unit Cost");
          PostedAssemblyLine."Order No." := "Document No.";
          PostedAssemblyLine."Order Line No." := "Line No.";
          InsertLineItemEntryRelation(PostedAssemblyLine,ItemJnlPostLine,ItemLedgEntryNo);
          OnBeforePostedAssemblyLineInsert(PostedAssemblyLine,AssemblyLine); <=====================
          PostedAssemblyLine.INSERT;
          OnAfterPostedAssemblyLineInsert(PostedAssemblyLine,AssemblyLine);
        UNTIL NEXT = 0;
    END;
Codeunit<Assembly-Post>.PROCEDURE<OnBeforePostItemConsumption>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<PostItemConsumption>
    Code lines:
    ...
      ItemJnlLine.Correction := IsCorrection;
      ItemJnlLine."Applies-to Entry" := "Appl.-to Item Entry";
      UpdateItemCategoryAndGroupCode(ItemJnlLine);
    END;
    
    OnBeforePostItemConsumption(AssemblyHeader,AssemblyLine,ItemJnlLine); <=====================
    
    IF IsCorrection THEN
      PostCorrectionItemJnLine(
        ItemJnlLine,AssemblyHeader,ItemJnlPostLine,WhseJnlRegisterLine,DATABASE::"Posted Assembly Line",ApplyToEntryNo)
    ...
Codeunit<Azure AD User Management>.PROCEDURE<OnInitialize>
  Raised in: Codeunit<Azure AD User Management>.PROCEDURE<Initialize>
    Code lines:
    ...
    
    IF CanHandle THEN BEGIN
      IF NOT TryCreateGraph(Graph) THEN
        EXIT(FALSE)
    END ELSE
      OnInitialize(Graph); <=====================
    
    IsInitialized := NOT ISNULL(Graph);
    EXIT(IsInitialized);
Codeunit<Application System Constants>.PROCEDURE<OnAfterGetApplicationVersion>
  Raised in: Codeunit<Application System Constants>.PROCEDURE<ApplicationVersion>
    Code lines:
    // Should be 'Build Version' with ! on both sides.
    ApplicationVersion := 'W1 13.0';
    OnAfterGetApplicationVersion(ApplicationVersion); <=====================
Codeunit<Release Assembly Document>.PROCEDURE<OnAfterReleaseAssemblyDoc>
  Raised in: Codeunit<Release Assembly Document>.<OnRun>
    Code lines:
    ...
    MODIFY;
    
    IF "Document Type" = "Document Type"::Order THEN
      WhseAssemblyRelease.Release(Rec);
    
    OnAfterReleaseAssemblyDoc(Rec); <=====================
Codeunit<Release Assembly Document>.PROCEDURE<OnAfterReopenAssemblyDoc>
  Raised in: Codeunit<Release Assembly Document>.PROCEDURE<Reopen>
    Code lines:
    ...
      MODIFY(TRUE);
    
      IF "Document Type" = "Document Type"::Order THEN
        WhseAssemblyRelease.Reopen(AssemblyHeader);
    
      OnAfterReopenAssemblyDoc(AssemblyHeader); <=====================
    END;
Codeunit<Release Assembly Document>.PROCEDURE<OnBeforeReleaseAssemblyDoc>
  Raised in: Codeunit<Release Assembly Document>.<OnRun>
    Code lines:
    IF Status = Status::Released THEN
      EXIT;
    
    OnBeforeReleaseAssemblyDoc(Rec); <=====================
    
    AssemblyLine.SETRANGE("Document Type","Document Type");
    AssemblyLine.SETRANGE("Document No.","No.");
    AssemblyLine.SETFILTER(Type,'<>%1',AssemblyLine.Type::" ");
    AssemblyLine.SETFILTER(Quantity,'<>0');
    IF NOT AssemblyLine.FIND('-') THEN
    ...
Codeunit<Release Assembly Document>.PROCEDURE<OnBeforeReopenAssemblyDoc>
  Raised in: Codeunit<Release Assembly Document>.PROCEDURE<Reopen>
    Code lines:
    WITH AssemblyHeader DO BEGIN
      IF Status = Status::Open THEN
        EXIT;
    
      OnBeforeReopenAssemblyDoc(AssemblyHeader); <=====================
    
      Status := Status::Open;
      MODIFY(TRUE);
    
      IF "Document Type" = "Document Type"::Order THEN
    ...
Codeunit<Invite External Accountant>.PROCEDURE<OnInvitationCreateNewUser>
  Raised in: Codeunit<Invite External Accountant>.PROCEDURE<CreateNewUser>
    Code lines:
    ...
      Count := Count + 1;
      Graph.TryGetUserByObjectId(InvitedUserId,GuestGraphUser);
    UNTIL (Graph.GetUserAssignedPlans(GuestGraphUser).Count > 1) OR (Count = 10);
    
    IF Graph.GetUserAssignedPlans(GuestGraphUser).Count > 1 THEN BEGIN
      OnInvitationCreateNewUser(TRUE); <=====================
      AzureADUserManagement.CreateNewUserFromGraphUser(GuestGraphUser);
    END ELSE
      OnInvitationCreateNewUser(FALSE); <=====================
  Raised in: Codeunit<Invite External Accountant>.PROCEDURE<CreateNewUser>
    Code lines:
    ...
      Count := Count + 1;
      Graph.TryGetUserByObjectId(InvitedUserId,GuestGraphUser);
    UNTIL (Graph.GetUserAssignedPlans(GuestGraphUser).Count > 1) OR (Count = 10);
    
    IF Graph.GetUserAssignedPlans(GuestGraphUser).Count > 1 THEN BEGIN
      OnInvitationCreateNewUser(TRUE); <=====================
      AzureADUserManagement.CreateNewUserFromGraphUser(GuestGraphUser);
    END ELSE
      OnInvitationCreateNewUser(FALSE); <=====================
Codeunit<Assembly Line Management>.PROCEDURE<OnAfterTransferBOMComponent>
  Raised in: Codeunit<Assembly Line Management>.PROCEDURE<AddBOMLine2>
    Code lines:
    ...
      AssemblyLine."Position 3" := BOMComponent."Position 3";
      IF "Location Code" <> '' THEN
        IF AssemblyLine.Type = AssemblyLine.Type::Item THEN
          AssemblyLine.VALIDATE("Location Code","Location Code");
    
      OnAfterTransferBOMComponent(AssemblyLine,BOMComponent); <=====================
    
      AssemblyLine.MODIFY(TRUE);
    END;
Codeunit<Assembly Line Management>.PROCEDURE<OnBeforeUpdateAssemblyLines>
  Raised in: Codeunit<Assembly Line Management>.PROCEDURE<UpdateAssemblyLines>
    Code lines:
    OnBeforeUpdateAssemblyLines(AsmHeader,OldAsmHeader,FieldNum,ReplaceLinesFromBOM,CurrFieldNo,CurrentFieldNum); <=====================
    
    IF (FieldNum <> CurrentFieldNum) OR // Update has been called from OnValidate of another field than was originally intended.
       ((NOT (FieldNum IN [AsmHeader.FIELDNO("Item No."),
                           AsmHeader.FIELDNO("Variant Code"),
                           AsmHeader.FIELDNO("Location Code"),
                           AsmHeader.FIELDNO("Starting Date"),
                           AsmHeader.FIELDNO(Quantity),
                           AsmHeader.FIELDNO("Unit of Measure Code"),
                           AsmHeader.FIELDNO("Quantity to Assemble"),
    ...
Codeunit<Postcode Service Manager>.PROCEDURE<OnCheckIsServiceConfigured>
  Raised in: Codeunit<Postcode Service Manager>.PROCEDURE<IsServiceConfigured>
    Code lines:
    OnCheckIsServiceConfigured(ServiceKey,IsConfigured); <=====================
Codeunit<Postcode Service Manager>.PROCEDURE<OnDiscoverPostcodeServices>
  Raised in: Codeunit<Postcode Service Manager>.PROCEDURE<DiscoverPostcodeServices>
    Code lines:
    OnDiscoverPostcodeServices(TempServiceListNameValueBuffer); <=====================
Codeunit<Postcode Service Manager>.PROCEDURE<OnRetrieveAddress>
  Raised in: Codeunit<Postcode Service Manager>.PROCEDURE<TryGetAddress>
    Code lines:
    OnRetrieveAddress(ServiceKey,TempEnteredAutocompleteAddress,TempSelectedAddressNameValueBuffer, <=====================
      TempAutocompleteAddress,IsSuccessful,ErrorMsg);
Codeunit<Postcode Service Manager>.PROCEDURE<OnRetrieveAddressList>
  Raised in: Codeunit<Postcode Service Manager>.PROCEDURE<TryGetAddressList>
    Code lines:
    OnRetrieveAddressList(ServiceKey,TempEnteredAutocompleteAddress,TempAddressListNameValueBuffer,IsSuccessful,ErrorMSg); <=====================
Codeunit<Postcode Service Manager>.PROCEDURE<OnShowConfigurationPage>
  Raised in: Codeunit<Postcode Service Manager>.PROCEDURE<ShowConfigurationPage>
    Code lines:
    OnShowConfigurationPage(ServiceKey,IsSuccessful); <=====================
Codeunit<Purch.-Post (Yes/No)>.PROCEDURE<OnAfterConfirmPost>
  Raised in: Codeunit<Purch.-Post (Yes/No)>.PROCEDURE<Code>
    Code lines:
    ...
    
    IF NOT HideDialog THEN
      IF NOT ConfirmPost(PurchaseHeader) THEN
        EXIT;
    
    OnAfterConfirmPost(PurchaseHeader); <=====================
    
    PurchSetup.GET;
    IF PurchSetup."Post with Job Queue" THEN
      PurchPostViaJobQueue.EnqueuePurchDoc(PurchaseHeader)
    ...
Codeunit<Purch.-Post (Yes/No)>.PROCEDURE<OnAfterPost>
  Raised in: Codeunit<Purch.-Post (Yes/No)>.PROCEDURE<Code>
    Code lines:
    ...
    IF PurchSetup."Post with Job Queue" THEN
      PurchPostViaJobQueue.EnqueuePurchDoc(PurchaseHeader)
    ELSE
      CODEUNIT.RUN(CODEUNIT::"Purch.-Post",PurchaseHeader);
    
    OnAfterPost(PurchaseHeader); <=====================
Codeunit<Purch.-Post (Yes/No)>.PROCEDURE<OnBeforeConfirmPost>
  Raised in: Codeunit<Purch.-Post (Yes/No)>.PROCEDURE<Code>
    Code lines:
    HideDialog := FALSE;
    IsHandled := FALSE;
    OnBeforeConfirmPost(PurchaseHeader,HideDialog,IsHandled); <=====================
    IF  IsHandled THEN
      EXIT;
    
    IF NOT HideDialog THEN
      IF NOT ConfirmPost(PurchaseHeader) THEN
        EXIT;
    
    ...
Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnAfterCopyProfile>
  Raised in: Codeunit<Conf./Personalization Mgt.>.PROCEDURE<CopyProfile>
    Code lines:
    ...
        UNTIL ProfileMetadata.NEXT = 0;
    END;
    
    CopyProfilePageMetadata(Profile,NewProfile);
    
    OnAfterCopyProfile(Profile,NewProfile); <=====================
Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnAfterGetDefaultRoleCenter>
  Raised in: Codeunit<Conf./Personalization Mgt.>.PROCEDURE<DefaultRoleCenterID>
    Code lines:
    ...
      RoleCenterID := PAGE::"Business Manager Role Center"; // BUSINESS MANAGER
    
    IF IdentityManagement.IsInvAppId THEN
      RoleCenterID := PAGE::"O365 Sales Activities RC"; // O365 Sales Activities RC
    
    OnAfterGetDefaultRoleCenter(RoleCenterID); <=====================
    EXIT(RoleCenterID);
Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnBeforeOpenSettings>
  Raised in: Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OpenSettings>
    Code lines:
    SettingsPageID := GetSettingsPageID;
    OnBeforeOpenSettings(SettingsPageID,Handled); <=====================
    IF NOT Handled THEN
      PAGE.RUN(SettingsPageID);
Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnGetBuiltInRoleCenterFilter>
  Raised in: Codeunit<Conf./Personalization Mgt.>.PROCEDURE<GetBuiltInSaaSProfilesFilter>
    Code lines:
    ...
    PageNos[12] := PAGE::"Whse. Worker WMS Role Center";
    
    FOR i := 1 TO ARRAYLEN(PageNos) DO
      RoleCenterFilter := RoleCenterFilter + '|' + FORMAT(PageNos[i]);
    RoleCenterFilter := DELSTR(RoleCenterFilter,1,1);
    OnGetBuiltInRoleCenterFilter(RoleCenterFilter); <=====================
Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnInitializeProfiles>
  Raised in: Codeunit<Conf./Personalization Mgt.>.PROCEDURE<InitializeProfiles>
    Code lines:
    ...
    InsertProfile(AccountingServicesTxt,AccountingServicesDescriptionTxt,9023);
    InsertProfile(SecurityAdministratorTxt,SecurityAdministratorDescriptionTxt,9024);
    InsertProfile(AccountantTxt,AccountantDescriptionTxt,9027);
    InsertProfile(O365SalesTxt,O365SalesDescriptionTxt,9029);
    InsertProfile(TeamMemberTxt,TeamMemberDescriptionTxt,9028);
    OnInitializeProfiles; <=====================
    COMMIT;
Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnProfileChanged>
  Raised in: Codeunit<Conf./Personalization Mgt.>.PROCEDURE<SetCurrentProfileID>
    Code lines:
    ...
      UserPersonalization."User SID" := USERSECURITYID;
      UserPersonalization."Profile ID" := ProfileID;
      UserPersonalization.INSERT(TRUE);
    END;
    
    OnProfileChanged(PrevProfileID,ProfileID); <=====================
  Raised in: Codeunit<Conf./Personalization Mgt.>.PROCEDURE<SetCurrentProfile>
    Code lines:
    ...
      UserPersonalization.Scope := AllProfile.Scope;
      UserPersonalization."App ID" := AllProfile."App ID";
      UserPersonalization.INSERT(TRUE);
    END;
    
    OnProfileChanged(PrevAllProfile."Profile ID",AllProfile."Profile ID"); <=====================
Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnRoleCenterOpen>
  Raised in: Table<O365 Sales Cue>.PROCEDURE<OnOpenActivitiesPageForRequestedDate>
    Code lines:
    ...
    
    CurrencyFormatTxt := STRSUBSTNO('%1<precision, 0:0><standard format, 0>',GLSetup.GetCurrencySymbol);
    
    IF GUIALLOWED THEN BEGIN
      RoleCenterNotificationMgt.ShowNotifications;
      ConfPersonalizationMgt.OnRoleCenterOpen; <=====================
    END
  Raised in: Page<O365 Activities>.<OnOpenPage>
    Code lines:
    ...
    ShowIntercompanyActivities := TRUE;
    ShowProductVideosActivities := ClientTypeManagement.GetCurrentClientType <> CLIENTTYPE::Phone;
    ShowIntelligentCloud := NOT PermissionManager.SoftwareAsAService;
    
    RoleCenterNotificationMgt.ShowNotifications;
    ConfPersonalizationMgt.OnRoleCenterOpen; <=====================
  Raised in: Page<User Security Activities>.<OnOpenPage>
    Code lines:
    ...
    DataSensitivity.SETRANGE("Company Name",COMPANYNAME);
    DataSensitivity.SETRANGE("Data Sensitivity",DataSensitivity."Data Sensitivity"::Unclassified);
    UnclassifiedFields := DataSensitivity.COUNT;
    
    RoleCenterNotificationMgt.ShowNotifications;
    ConfPersonalizationMgt.OnRoleCenterOpen; <=====================
    ShowIntelligentCloud := NOT SoftwareAsAService;
    
    IF PageNotifier.IsAvailable THEN BEGIN
      PageNotifier := PageNotifier.Create;
    ...
  Raised in: Page<SO Processor Activities>.<OnOpenPage>
    Code lines:
    ...
    SETRANGE("Date Filter",0D,WORKDATE - 1);
    SETFILTER("Date Filter2",'>=%1',WORKDATE);
    SETFILTER("User ID Filter",USERID);
    
    RoleCenterNotificationMgt.ShowNotifications;
    ConfPersonalizationMgt.OnRoleCenterOpen; <=====================
    
    IF PageNotifier.IsAvailable THEN BEGIN
      PageNotifier := PageNotifier.Create;
      PageNotifier.NotifyPageReady;
  Raised in: Page<Team Member Activities>.<OnOpenPage>
    Code lines:
    ...
      SETRANGE("User ID Filter",USERID);
      ShowTimeSheetsToApprove := FALSE;
    END;
    
    RoleCenterNotificationMgt.ShowNotifications;
    ConfPersonalizationMgt.OnRoleCenterOpen; <=====================
    
    IF PageNotifier.IsAvailable THEN BEGIN
      PageNotifier := PageNotifier.Create;
      PageNotifier.NotifyPageReady;
  Raised in: Page<Accountant Activities>.<OnOpenPage>
    Code lines:
    ...
    ShowProductVideosActivities := ClientTypeManagement.GetCurrentClientType <> CLIENTTYPE::Phone;
    ShowCheckForOCR := OCRServiceMgt.OcrServiceIsEnable;
    ShowIntelligentCloud := NOT PermissionManager.SoftwareAsAService;
    
    RoleCenterNotificationMgt.ShowNotifications;
    ConfPersonalizationMgt.OnRoleCenterOpen; <=====================
    
    IF PageNotifier.IsAvailable THEN BEGIN
      PageNotifier := PageNotifier.Create;
      PageNotifier.NotifyPageReady;
Codeunit<Application Area Mgmt.>.PROCEDURE<OnBeforeLookupExperienceTier>
  Raised in: Codeunit<Application Area Mgmt.>.PROCEDURE<LookupExperienceTier>
    Code lines:
    ...
    
    IF NOT ExperienceTierSetup.Invoicing THEN
      IF TempExperienceTierBuffer.GET(ExperienceTierSetup.FIELDNO(Invoicing)) THEN
        TempExperienceTierBuffer.DELETE;
    
    OnBeforeLookupExperienceTier(TempExperienceTierBuffer); <=====================
    IF PAGE.RUNMODAL(0,TempExperienceTierBuffer,TempExperienceTierBuffer."Experience Tier") = ACTION::LookupOK THEN BEGIN
      NewExperienceTier := TempExperienceTierBuffer."Experience Tier";
      EXIT(TRUE);
    END;
Codeunit<Application Area Mgmt.>.PROCEDURE<OnGetBasicExperienceAppAreas>
  Raised in: Codeunit<Application Area Mgmt.>.PROCEDURE<GetBasicExperienceAppAreas>
    Code lines:
    TempApplicationAreaSetup.Basic := TRUE;
    TempApplicationAreaSetup."Relationship Mgmt" := TRUE;
    
    OnGetBasicExperienceAppAreas(TempApplicationAreaSetup); <=====================
Codeunit<Application Area Mgmt.>.PROCEDURE<OnGetEssentialExperienceAppAreas>
  Raised in: Codeunit<Application Area Mgmt.>.PROCEDURE<GetEssentialExperienceAppAreas>
    Code lines:
    ...
    TempApplicationAreaSetup.Dimensions := TRUE;
    TempApplicationAreaSetup.ADCS := TRUE;
    TempApplicationAreaSetup.Planning := TRUE;
    TempApplicationAreaSetup.Comments := TRUE;
    
    OnGetEssentialExperienceAppAreas(TempApplicationAreaSetup); <=====================
Codeunit<Application Area Mgmt.>.PROCEDURE<OnGetPremiumExperienceAppAreas>
  Raised in: Codeunit<Application Area Mgmt.>.PROCEDURE<GetPremiumExperienceAppAreas>
    Code lines:
    GetEssentialExperienceAppAreas(TempApplicationAreaSetup);
    TempApplicationAreaSetup.Service := TRUE;
    TempApplicationAreaSetup.Manufacturing := TRUE;
    OnGetPremiumExperienceAppAreas(TempApplicationAreaSetup); <=====================
Codeunit<Application Area Mgmt.>.PROCEDURE<OnSetExperienceTier>
  Raised in: Codeunit<Application Area Mgmt.>.PROCEDURE<SetExperienceTier>
    Code lines:
    ...
        BEGIN
          TempApplicationAreaSetup.INIT;
          TempApplicationAreaSetup.Invoicing := TRUE;
        END;
      ELSE BEGIN
        OnSetExperienceTier(ExperienceTierSetup,TempApplicationAreaSetup,ApplicationAreasSet); <=====================
        IF NOT ApplicationAreasSet THEN
          EXIT;
      END;
    END;
    ...
Codeunit<Application Area Mgmt.>.PROCEDURE<OnValidateApplicationAreas>
  Raised in: Codeunit<Application Area Mgmt.>.PROCEDURE<ValidateApplicationAreasSet>
    Code lines:
    ...
      IF NOT ApplicationAreaSetupsMatch(TempApplicationAreaSetup,TempApplicationAreaSetup2,FALSE) THEN
        ERROR(InvoicingExpTierErr);
    END ELSE
      TempApplicationAreaSetup.TESTFIELD(Basic,TRUE);
    
    OnValidateApplicationAreas(ExperienceTierSetup,TempApplicationAreaSetup); <=====================
Codeunit<Application Area Mgmt. Facade>.PROCEDURE<OnBeforeLookupExperienceTier>
  Raised in: Codeunit<Application Area Mgmt. Facade>.PROCEDURE<RaiseOnBeforeLookupExperienceTier>
    Code lines:
    OnBeforeLookupExperienceTier(TempExperienceTierBuffer) <=====================
Codeunit<Application Area Mgmt. Facade>.PROCEDURE<OnGetBasicExperienceAppAreas>
  Raised in: Codeunit<Application Area Mgmt. Facade>.PROCEDURE<RaiseOnGetBasicExperienceAppAreas>
    Code lines:
    OnGetBasicExperienceAppAreas(TempApplicationAreaSetup) <=====================
Codeunit<Application Area Mgmt. Facade>.PROCEDURE<OnGetEssentialExperienceAppAreas>
  Raised in: Codeunit<Application Area Mgmt. Facade>.PROCEDURE<RaiseOnGetEssentialExperienceAppAreas>
    Code lines:
    OnGetEssentialExperienceAppAreas(TempApplicationAreaSetup); <=====================
Codeunit<Application Area Mgmt. Facade>.PROCEDURE<OnGetPremiumExperienceAppAreas>
  Raised in: Codeunit<Application Area Mgmt. Facade>.PROCEDURE<RaiseOnGetPremiumExperienceAppAreas>
    Code lines:
    OnGetPremiumExperienceAppAreas(TempApplicationAreaSetup); <=====================
Codeunit<Application Area Mgmt. Facade>.PROCEDURE<OnSetExperienceTier>
  Raised in: Codeunit<Application Area Mgmt. Facade>.PROCEDURE<RaiseOnSetExperienceTier>
    Code lines:
    OnSetExperienceTier(ExperienceTierSetup,TempApplicationAreaSetup,ApplicationAreasSet); <=====================
Codeunit<Application Area Mgmt. Facade>.PROCEDURE<OnValidateApplicationAreas>
  Raised in: Codeunit<Application Area Mgmt. Facade>.PROCEDURE<RaiseOnValidateApplicationAreas>
    Code lines:
    OnValidateApplicationAreas(ExperienceTierSetup,TempApplicationAreaSetup) <=====================
Codeunit<Purch.-Post + Print>.PROCEDURE<OnAfterConfirmPost>
  Raised in: Codeunit<Purch.-Post + Print>.PROCEDURE<Code>
    Code lines:
    ...
    
    IF NOT HideDialog THEN
      IF NOT ConfirmPost(PurchHeader) THEN
        EXIT;
    
    OnAfterConfirmPost(PurchHeader); <=====================
    
    PurchSetup.GET;
    IF PurchSetup."Post & Print with Job Queue" THEN
      PurchasePostViaJobQueue.EnqueuePurchDoc(PurchHeader)
    ...
Codeunit<Purch.-Post + Print>.PROCEDURE<OnAfterPost>
  Raised in: Codeunit<Purch.-Post + Print>.PROCEDURE<Code>
    Code lines:
    ...
    ELSE BEGIN
      CODEUNIT.RUN(CODEUNIT::"Purch.-Post",PurchHeader);
      GetReport(PurchHeader);
    END;
    
    OnAfterPost(PurchHeader); <=====================
Codeunit<Purch.-Post + Print>.PROCEDURE<OnBeforeConfirmPost>
  Raised in: Codeunit<Purch.-Post + Print>.PROCEDURE<Code>
    Code lines:
    HideDialog := FALSE;
    IsHandled := FALSE;
    OnBeforeConfirmPost(PurchHeader,HideDialog,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT HideDialog THEN
      IF NOT ConfirmPost(PurchHeader) THEN
        EXIT;
    
    ...
Codeunit<Purch.-Quote to Order (Yes/No)>.PROCEDURE<OnBeforePurchQuoteToOrder>
  Raised in: Codeunit<Purch.-Quote to Order (Yes/No)>.<OnRun>
    Code lines:
    TESTFIELD("Document Type","Document Type"::Quote);
    IF NOT CONFIRM(Text000,FALSE) THEN
      EXIT;
    
    IsHandled := FALSE;
    OnBeforePurchQuoteToOrder(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    PurchQuoteToOrder.RUN(Rec);
    ...
Codeunit<Time Sheet Management>.PROCEDURE<OnBeforeToTimeSheetLineInsert>
  Raised in: Codeunit<Time Sheet Management>.PROCEDURE<CopyPrevTimeSheetLines>
    Code lines:
    ...
              ToTimeSheetLine.VALIDATE("Cause of Absence Code",FromTimeSheetLine."Cause of Absence Code");
          END;
          ToTimeSheetLine.Description := FromTimeSheetLine.Description;
          ToTimeSheetLine.Chargeable := FromTimeSheetLine.Chargeable;
          ToTimeSheetLine."Work Type Code" := FromTimeSheetLine."Work Type Code";
          OnBeforeToTimeSheetLineInsert(ToTimeSheetLine,FromTimeSheetLine); <=====================
          ToTimeSheetLine.INSERT;
        UNTIL FromTimeSheetLine.NEXT = 0;
    END;
Codeunit<Time Sheet Management>.PROCEDURE<OnCheckInsertJobPlanningLine>
  Raised in: Codeunit<Time Sheet Management>.PROCEDURE<FillJobPlanningBuffer>
    Code lines:
    ...
    JobPlanningLine.SETRANGE("No.",TimeSheetHeader."Resource No.");
    JobPlanningLine.SETRANGE("Planning Date",TimeSheetHeader."Starting Date",TimeSheetHeader."Ending Date");
    IF JobPlanningLine.FINDSET THEN
      REPEAT
        SkipLine := FALSE;
        OnCheckInsertJobPlanningLine(JobPlanningLine,JobPlanningLineBuffer,SkipLine); <=====================
        IF NOT SkipLine THEN BEGIN
          JobPlanningLineBuffer.SETRANGE("Job No.",JobPlanningLine."Job No.");
          JobPlanningLineBuffer.SETRANGE("Job Task No.",JobPlanningLine."Job Task No.");
          IF JobPlanningLineBuffer.ISEMPTY THEN BEGIN
    ...
Codeunit<Time Sheet Approval Management>.PROCEDURE<OnAfterApprove>
  Raised in: Codeunit<Time Sheet Approval Management>.PROCEDURE<Approve>
    Code lines:
    ...
        Type::Absence:
          PostAbsence(TimeSheetLine);
        Type::Service:
          AfterApproveServiceOrderTmeSheetEntries(TimeSheetLine);
      END;
      OnAfterApprove(TimeSheetLine); <=====================
    END;
Codeunit<Time Sheet Approval Management>.PROCEDURE<OnAfterReject>
  Raised in: Codeunit<Time Sheet Approval Management>.PROCEDURE<Reject>
    Code lines:
    ...
        EXIT;
      TESTFIELD(Status,Status::Submitted);
      CheckApproverPermissions(TimeSheetLine);
      Status := Status::Rejected;
      MODIFY(TRUE);
      OnAfterReject(TimeSheetLine); <=====================
    END;
Codeunit<Time Sheet Approval Management>.PROCEDURE<OnAfterReopenApproved>
  Raised in: Codeunit<Time Sheet Approval Management>.PROCEDURE<ReopenApproved>
    Code lines:
    ...
      CheckApproverPermissions(TimeSheetLine);
      CheckLinkedServiceDoc(TimeSheetLine);
      UpdateApproverID;
      Status := Status::Submitted;
      MODIFY(TRUE);
      OnAfterReopenApproved(TimeSheetLine); <=====================
    END;
Codeunit<Time Sheet Approval Management>.PROCEDURE<OnAfterReopenSubmitted>
  Raised in: Codeunit<Time Sheet Approval Management>.PROCEDURE<ReopenSubmitted>
    Code lines:
    ...
      IF Status = Status::Open THEN
        EXIT;
      TESTFIELD(Status,Status::Submitted);
      Status := Status::Open;
      MODIFY(TRUE);
      OnAfterReopenSubmitted(TimeSheetLine); <=====================
    END;
Codeunit<Time Sheet Approval Management>.PROCEDURE<OnAfterSubmit>
  Raised in: Codeunit<Time Sheet Approval Management>.PROCEDURE<Submit>
    Code lines:
    ...
          TESTFIELD("Service Order No.");
      END;
      UpdateApproverID;
      Status := Status::Submitted;
      MODIFY(TRUE);
      OnAfterSubmit(TimeSheetLine); <=====================
    END;
Codeunit<Time Sheet Approval Management>.PROCEDURE<OnBeforeInsertEmployeeAbsence>
  Raised in: Codeunit<Time Sheet Approval Management>.PROCEDURE<PostAbsence>
    Code lines:
    ...
        EmployeeAbsence.VALIDATE("Employee No.",Employee."No.");
        EmployeeAbsence.VALIDATE("From Date",TimeSheetDetail.Date);
        EmployeeAbsence.VALIDATE("Cause of Absence Code",TimeSheetDetail."Cause of Absence Code");
        EmployeeAbsence.VALIDATE("Unit of Measure Code",Resource."Base Unit of Measure");
        EmployeeAbsence.VALIDATE(Quantity,TimeSheetDetail.Quantity);
        OnBeforeInsertEmployeeAbsence(EmployeeAbsence,TimeSheetLine,TimeSheetDetail); <=====================
        EmployeeAbsence.INSERT(TRUE);
    
        TimeSheetDetail.Posted := TRUE;
        TimeSheetDetail.MODIFY;
    ...
Codeunit<Mail Management>.PROCEDURE<OnAfterDeleteTempAttachments>
  Raised in: Codeunit<Mail Management>.PROCEDURE<DeleteTempAttachments>
    Code lines:
    ...
    IF TryDeleteTempAttachment(EmailItem."Attachment File Path 4") THEN;
    IF TryDeleteTempAttachment(EmailItem."Attachment File Path 5") THEN;
    IF TryDeleteTempAttachment(EmailItem."Attachment File Path 6") THEN;
    IF TryDeleteTempAttachment(EmailItem."Attachment File Path 7") THEN;
    
    OnAfterDeleteTempAttachments(EmailItem); <=====================
Codeunit<Mail Management>.PROCEDURE<OnBeforeCheckValidEmailAddress>
  Raised in: Codeunit<Mail Management>.PROCEDURE<CheckValidEmailAddresses>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckValidEmailAddress(Recipients,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF Recipients = '' THEN
      ERROR(InvalidEmailAddressErr,Recipients);
    
    TmpRecipients := DELCHR(Recipients,'<>',';');
    WHILE STRPOS(TmpRecipients,';') > 1 DO BEGIN
    ...
Codeunit<Mail Management>.PROCEDURE<OnBeforeDoSending>
  Raised in: Codeunit<Mail Management>.PROCEDURE<CanSend>
    Code lines:
    OnBeforeDoSending(CancelSending); <=====================
    EXIT(NOT CancelSending);
Codeunit<Mail Management>.PROCEDURE<OnBeforeSendMailOnWinClient>
  Raised in: Codeunit<Mail Management>.PROCEDURE<SendMailOnWinClient>
    Code lines:
    ...
      WITH TempEmailItem DO BEGIN
        IF "Attachment File Path" <> '' THEN BEGIN
          ClientAttachmentFilePath := DownloadPdfOnClient("Attachment File Path");
          ClientAttachmentFullName := FileManagement.MoveAndRenameClientFile(ClientAttachmentFilePath,"Attachment Name",'');
        END;
        OnBeforeSendMailOnWinClient(TempEmailItem); <=====================
        IF Mail.NewMessageAsync("Send to","Send CC","Send BCC",Subject,GetBodyText,ClientAttachmentFullName,NOT HideMailDialog) THEN BEGIN
          FileManagement.DeleteClientFile(ClientAttachmentFullName);
          MailSent := TRUE;
          EXIT(TRUE)
    ...
Codeunit<Mail Management>.PROCEDURE<OnBeforeSentViaSMTP>
  Raised in: Codeunit<Mail Management>.PROCEDURE<SendViaSMTP>
    Code lines:
    ...
      IF "Send CC" <> '' THEN
        SMTPMail.AddCC("Send CC");
      IF "Send BCC" <> '' THEN
        SMTPMail.AddBCC("Send BCC");
    END;
    OnBeforeSentViaSMTP(TempEmailItem); <=====================
    MailSent := SMTPMail.TrySend;
    IF NOT MailSent AND NOT HideSMTPError THEN
      ERROR(SMTPMail.GetLastSendMailErrorText);
    EXIT(MailSent);
Codeunit<Purch.-Quote to Order>.PROCEDURE<OnAfterInsertAllPurchOrderLines>
  Raised in: Codeunit<Purch.-Quote to Order>.<OnRun>
    Code lines:
    ...
        OnAfterInsertPurchOrderLine(PurchQuoteLine,PurchOrderLine);
    
        PurchLineReserve.VerifyQuantity(PurchOrderLine,PurchQuoteLine);
      UNTIL PurchQuoteLine.NEXT = 0;
    
    OnAfterInsertAllPurchOrderLines(PurchOrderLine,Rec); <=====================
    
    PurchSetup.GET;
    CASE PurchSetup."Archive Quotes" OF
      PurchSetup."Archive Quotes"::Always:
    ...
Codeunit<Purch.-Quote to Order>.PROCEDURE<OnAfterInsertPurchOrderLine>
  Raised in: Codeunit<Purch.-Quote to Order>.<OnRun>
    Code lines:
    ...
        PrepmtMgt.SetPurchPrepaymentPct(PurchOrderLine,PurchOrderHeader."Posting Date");
        PurchOrderLine.VALIDATE("Prepayment %");
        PurchOrderLine.DefaultDeferralCode;
        OnBeforeInsertPurchOrderLine(PurchOrderLine,PurchOrderHeader,PurchQuoteLine,Rec);
        PurchOrderLine.INSERT;
        OnAfterInsertPurchOrderLine(PurchQuoteLine,PurchOrderLine); <=====================
    
        PurchLineReserve.VerifyQuantity(PurchOrderLine,PurchQuoteLine);
      UNTIL PurchQuoteLine.NEXT = 0;
    
    ...
Codeunit<Purch.-Quote to Order>.PROCEDURE<OnBeforeDeletePurchQuote>
  Raised in: Codeunit<Purch.-Quote to Order>.<OnRun>
    Code lines:
    ...
    AssignItemCharges("Document Type","No.",PurchOrderHeader."Document Type",PurchOrderHeader."No.");
    
    ApprovalsMgmt.CopyApprovalEntryQuoteToOrder(RECORDID,PurchOrderHeader."No.",PurchOrderHeader.RECORDID);
    ApprovalsMgmt.DeleteApprovalEntries(RECORDID);
    
    OnBeforeDeletePurchQuote(Rec,PurchOrderHeader); <=====================
    
    DELETELINKS;
    DELETE;
    
    ...
Codeunit<Purch.-Quote to Order>.PROCEDURE<OnBeforeInsertPurchOrderHeader>
  Raised in: Codeunit<Purch.-Quote to Order>.PROCEDURE<CreatePurchHeader>
    Code lines:
    ...
      PurchOrderHeader."Inbound Whse. Handling Time" := "Inbound Whse. Handling Time";
    
      PurchOrderHeader."Prepayment %" := PrepmtPercent;
      IF PurchOrderHeader."Posting Date" = 0D THEN
        PurchOrderHeader."Posting Date" := WORKDATE;
      OnBeforeInsertPurchOrderHeader(PurchOrderHeader,PurchHeader); <=====================
      PurchOrderHeader.MODIFY;
    END;
Codeunit<Purch.-Quote to Order>.PROCEDURE<OnBeforeInsertPurchOrderLine>
  Raised in: Codeunit<Purch.-Quote to Order>.<OnRun>
    Code lines:
    ...
        IF Vend."Prepayment %" <> 0 THEN
          PurchOrderLine."Prepayment %" := Vend."Prepayment %";
        PrepmtMgt.SetPurchPrepaymentPct(PurchOrderLine,PurchOrderHeader."Posting Date");
        PurchOrderLine.VALIDATE("Prepayment %");
        PurchOrderLine.DefaultDeferralCode;
        OnBeforeInsertPurchOrderLine(PurchOrderLine,PurchOrderHeader,PurchQuoteLine,Rec); <=====================
        PurchOrderLine.INSERT;
        OnAfterInsertPurchOrderLine(PurchQuoteLine,PurchOrderLine);
    
        PurchLineReserve.VerifyQuantity(PurchOrderLine,PurchQuoteLine);
    ...
Codeunit<Document Report Mgt.>.PROCEDURE<OnAfterMergeWordDocument>
  Raised in: Codeunit<Document Report Mgt.>.PROCEDURE<MergeWordLayout>
    Code lines:
    ...
    
      ERROR(GETLASTERRORTEXT);
    END;
    
    COMMIT;
    OnAfterMergeWordDocument(ReportID,InStrXmlData,OutTempBlob); <=====================
    
    CurrentFileType := '';
    CASE ReportAction OF
      ReportAction::SaveAsWord:
    ...
Codeunit<Document Report Mgt.>.PROCEDURE<OnBeforeMergeDocument>
  Raised in: Codeunit<Document Report Mgt.>.PROCEDURE<MergeWordLayout>
    Code lines:
    IF ReportAction = ReportAction::Print THEN
      PrinterName := FileName;
    
    OutTempBlob.Blob.CREATEOUTSTREAM(OutStrWordDoc);
    OnBeforeMergeDocument(ReportID,ReportAction,InStrXmlData,PrinterName,OutStrWordDoc,Handled,FileName = ''); <=====================
    IF Handled THEN BEGIN
      IF (FileName <> '') AND OutTempBlob.Blob.HASVALUE THEN
        OutTempBlob.Blob.EXPORT(FileName);
      EXIT;
    END;
    ...
Codeunit<Document Report Mgt.>.PROCEDURE<OnBeforeMergeWordDocument>
  Raised in: Codeunit<Document Report Mgt.>.PROCEDURE<MergeWordLayout>
    Code lines:
    ...
      ValidateWordLayoutCheckOnly(ReportID,InStrWordDoc);
    END;
    
    // By default - throw an error in case of empty dataset
    VerifyXmlHasData := TRUE;
    OnBeforeMergeWordDocument(VerifyXmlHasData); <=====================
    IF VerifyXmlHasData THEN
      VerifyXmlContainsDataset(InStrXmlData);
    
    IF NOT TryXmlMergeWordDocument(InStrWordDoc,InStrXmlData,OutStrWordDoc) THEN BEGIN
    ...
Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnAfterInsertAllPurchOrderLines>
  Raised in: Codeunit<Blanket Purch. Order to Order>.<OnRun>
    Code lines:
    ...
            PurchBlanketOrderLine.MODIFY;
          END;
        END;
      UNTIL PurchBlanketOrderLine.NEXT = 0;
    
    OnAfterInsertAllPurchOrderLines(Rec,PurchOrderHeader); <=====================
    
    IF PurchSetup."Default Posting Date" = PurchSetup."Default Posting Date"::"No Date" THEN BEGIN
      PurchOrderHeader."Posting Date" := 0D;
      PurchOrderHeader.MODIFY;
    ...
Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnAfterPurchOrderLineInsert>
  Raised in: Codeunit<Blanket Purch. Order to Order>.<OnRun>
    Code lines:
    ...
          PurchOrderLine."Dimension Set ID" := PurchBlanketOrderLine."Dimension Set ID";
          PurchOrderLine.DefaultDeferralCode;
          IF IsPurchOrderLineToBeInserted(PurchOrderLine) THEN BEGIN
            OnBeforeInsertPurchOrderLine(PurchOrderLine,PurchOrderHeader,PurchBlanketOrderLine,Rec);
            PurchOrderLine.INSERT;
            OnAfterPurchOrderLineInsert(PurchOrderLine); <=====================
          END;
    
          IF PurchBlanketOrderLine."Qty. to Receive" <> 0 THEN BEGIN
            PurchBlanketOrderLine.VALIDATE("Qty. to Receive",0);
    ...
Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnBeforeInsertPurchOrderHeader>
  Raised in: Codeunit<Blanket Purch. Order to Order>.PROCEDURE<CreatePurchHeader>
    Code lines:
    ...
      PurchOrderHeader."No. Printed" := 0;
      PurchOrderHeader.Status := PurchOrderHeader.Status::Open;
      PurchOrderHeader."No." := '';
      PurchOrderHeader.InitRecord;
      PurchOrderLine.LOCKTABLE;
      OnBeforeInsertPurchOrderHeader(PurchOrderHeader,PurchHeader); <=====================
      PurchOrderHeader.INSERT(TRUE);
    
      IF "Order Date" = 0D THEN
        PurchOrderHeader."Order Date" := WORKDATE
    ...
Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnBeforeInsertPurchOrderLine>
  Raised in: Codeunit<Blanket Purch. Order to Order>.<OnRun>
    Code lines:
    ...
          PurchOrderLine."Shortcut Dimension 1 Code" := PurchBlanketOrderLine."Shortcut Dimension 1 Code";
          PurchOrderLine."Shortcut Dimension 2 Code" := PurchBlanketOrderLine."Shortcut Dimension 2 Code";
          PurchOrderLine."Dimension Set ID" := PurchBlanketOrderLine."Dimension Set ID";
          PurchOrderLine.DefaultDeferralCode;
          IF IsPurchOrderLineToBeInserted(PurchOrderLine) THEN BEGIN
            OnBeforeInsertPurchOrderLine(PurchOrderLine,PurchOrderHeader,PurchBlanketOrderLine,Rec); <=====================
            PurchOrderLine.INSERT;
            OnAfterPurchOrderLineInsert(PurchOrderLine);
          END;
    
    ...
Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnBeforePurchOrderHeaderModify>
  Raised in: Codeunit<Blanket Purch. Order to Order>.PROCEDURE<CreatePurchHeader>
    Code lines:
    ...
    
      PurchOrderHeader.InitFromPurchHeader(PurchHeader);
      PurchOrderHeader.VALIDATE("Posting Date");
    
      PurchOrderHeader."Prepayment %" := PrepmtPercent;
      OnBeforePurchOrderHeaderModify(PurchOrderHeader,PurchHeader); <=====================
      PurchOrderHeader.MODIFY;
    END;
Codeunit<Purchase Post via Job Queue>.PROCEDURE<OnBeforeEnqueuePurchDoc>
  Raised in: Codeunit<Purchase Post via Job Queue>.PROCEDURE<EnqueuePurchDocWithUI>
    Code lines:
    OnBeforeEnqueuePurchDoc(PurchHeader,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    WITH PurchHeader DO BEGIN
      IF NOT ("Job Queue Status" IN ["Job Queue Status"::" ","Job Queue Status"::Error]) THEN
        ERROR(WrongJobQueueStatus,"Document Type","No.");
      TempInvoice := Invoice;
      TempRcpt := Receive;
      TempShip := Ship;
    ...
Codeunit<Purchase Post via Job Queue>.PROCEDURE<OnBeforeReleasePurchDoc>
  Raised in: Codeunit<Purchase Post via Job Queue>.PROCEDURE<EnqueuePurchDocWithUI>
    Code lines:
    ...
      IF NOT ("Job Queue Status" IN ["Job Queue Status"::" ","Job Queue Status"::Error]) THEN
        ERROR(WrongJobQueueStatus,"Document Type","No.");
      TempInvoice := Invoice;
      TempRcpt := Receive;
      TempShip := Ship;
      OnBeforeReleasePurchDoc(PurchHeader); <=====================
      IF Status = Status::Open THEN
        CODEUNIT.RUN(CODEUNIT::"Release Purchase Document",PurchHeader);
      Invoice := TempInvoice;
      Receive := TempRcpt;
    ...
Codeunit<Payment Registration Mgt.>.PROCEDURE<OnAfterPostPaymentRegistration>
  Raised in: Codeunit<Payment Registration Mgt.>.PROCEDURE<Post>
    Code lines:
    ...
      END;
    UNTIL TempPaymentRegistrationBuffer.NEXT = 0;
    
    IF NOT PreviewMode THEN BEGIN
      CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post Batch",GenJournalLine);
      OnAfterPostPaymentRegistration(TempPaymentRegistrationBuffer); <=====================
    END ELSE
      GenJnlPostBatch.Preview(GenJournalLine);
Codeunit<Identity Management>.PROCEDURE<OnBeforeGetApplicationIdentifier>
  Raised in: Codeunit<Identity Management>.PROCEDURE<IsInvAppId>
    Code lines:
    AppId := APPLICATIONIDENTIFIER;
    OnBeforeGetApplicationIdentifier(AppId); <=====================
    EXIT(AppId = InvoiceTok);
  Raised in: Codeunit<Identity Management>.PROCEDURE<IsFinAppId>
    Code lines:
    AppId := APPLICATIONIDENTIFIER;
    OnBeforeGetApplicationIdentifier(AppId); <=====================
    EXIT(AppId = FinancialsTok);
  Raised in: Codeunit<Identity Management>.PROCEDURE<IsNavAppId>
    Code lines:
    AppId := APPLICATIONIDENTIFIER;
    OnBeforeGetApplicationIdentifier(AppId); <=====================
    EXIT(AppId = NavTok);
  Raised in: Codeunit<Identity Management>.PROCEDURE<IsC5AppId>
    Code lines:
    AppId := APPLICATIONIDENTIFIER;
    OnBeforeGetApplicationIdentifier(AppId); <=====================
    EXIT(AppId = C5Tok);
Codeunit<Effective Permissions Mgt.>.PROCEDURE<OnTenantPermissionModified>
  Raised in: Codeunit<Effective Permissions Mgt.>.PROCEDURE<ModifyPermission>
    Code lines:
    ...
    END;
    IF NOT CallModify THEN
      EXIT;
    TenantPermission.MODIFY;
    SendNotification(PermissionBuffer."Permission Set",PassedObjectType,PassedObjectId,PassedUserID,FieldNumChanged,OldValue);
    OnTenantPermissionModified(TenantPermission."Role ID"); <=====================
Codeunit<Data Upgrade Mgt.>.PROCEDURE<OnCheckPreconditionsPerCompany>
  Raised in: Codeunit<Data Upgrade Mgt.>.PROCEDURE<RaiseOnCheckPreconditionsPerCompany>
    Code lines:
    OnCheckPreconditionsPerCompany <=====================
Codeunit<Data Upgrade Mgt.>.PROCEDURE<OnCheckPreconditionsPerDatabase>
  Raised in: Codeunit<Data Upgrade Mgt.>.PROCEDURE<RaiseOnCheckPreconditionsPerDatabase>
    Code lines:
    OnCheckPreconditionsPerDatabase <=====================
Codeunit<Data Upgrade Mgt.>.PROCEDURE<OnIsUpgradeInProgress>
  Raised in: Codeunit<Data Upgrade Mgt.>.PROCEDURE<IsUpgradeInProgress>
    Code lines:
    OnIsUpgradeInProgress(UpgradeIsInProgress); <=====================
Codeunit<Data Upgrade Mgt.>.PROCEDURE<OnUpgradePerCompany>
  Raised in: Codeunit<Data Upgrade Mgt.>.PROCEDURE<RaiseOnUpgradePerCompany>
    Code lines:
    OnUpgradePerCompany <=====================
Codeunit<Data Upgrade Mgt.>.PROCEDURE<OnUpgradePerDatabase>
  Raised in: Codeunit<Data Upgrade Mgt.>.PROCEDURE<RaiseOnUpgradePerDatabase>
    Code lines:
    OnUpgradePerDatabase <=====================
Codeunit<Data Upgrade Mgt.>.PROCEDURE<OnValidateUpgradePerCompany>
  Raised in: Codeunit<Data Upgrade Mgt.>.PROCEDURE<RaiseOnValidateUpgradePerCompany>
    Code lines:
    OnValidateUpgradePerCompany <=====================
Codeunit<Data Upgrade Mgt.>.PROCEDURE<OnValidateUpgradePerDatabase>
  Raised in: Codeunit<Data Upgrade Mgt.>.PROCEDURE<RaiseOnValidateUpgradePerDatabase>
    Code lines:
    OnValidateUpgradePerDatabase <=====================
Codeunit<Check Routing Lines>.PROCEDURE<OnBeforeFindRoutingLines>
  Raised in: Codeunit<Check Routing Lines>.PROCEDURE<Calculate>
    Code lines:
    ...
    
    CalcPreviousOperations(RtngHeader,VersionCode);
    CalcSequenceBack(RtngHeader,VersionCode);
    CalcSequenceForward(RtngHeader,VersionCode);
    
    OnBeforeFindRoutingLines(RtngHeader,VersionCode); <=====================
    
    IF RtngLine.FIND('-') THEN
      REPEAT
        IF RtngLine."Next Operation No." <> '' THEN BEGIN
    ...
Codeunit<Routing Line-Copy Lines>.PROCEDURE<OnAfterCopyRouting>
  Raised in: Codeunit<Routing Line-Copy Lines>.PROCEDURE<CopyRouting>
    Code lines:
    ...
        RoutingCommentLine."Routing No." := RoutingHeader."No.";
        RoutingCommentLine."Version Code" := ToVersionCode;
        RoutingCommentLine.INSERT;
      UNTIL FromRoutingCommentLine.NEXT = 0;
    
    OnAfterCopyRouting(RoutingHeader,FromRoutingHeaderNo,FromVersionCode,ToVersionCode); <=====================
Codeunit<Routing Line-Copy Lines>.PROCEDURE<OnAfterDeleteRouting>
  Raised in: Codeunit<Routing Line-Copy Lines>.PROCEDURE<CopyRouting>
    Code lines:
    ...
    
    RoutingLine.SETRANGE("Routing No.",RoutingHeader."No.");
    RoutingLine.SETRANGE("Version Code",ToVersionCode);
    RoutingLine.DELETEALL(TRUE);
    
    OnAfterDeleteRouting(RoutingHeader,ToVersionCode); <=====================
    
    RoutingLine2.SETRANGE("Routing No.",FromRoutingHeaderNo);
    RoutingLine2.SETRANGE("Version Code",FromVersionCode);
    IF RoutingLine2.FIND('-') THEN
    ...
Codeunit<Routing Line-Copy Lines>.PROCEDURE<OnCopyRountingOnAfterRoutingLineInsert>
  Raised in: Codeunit<Routing Line-Copy Lines>.PROCEDURE<CopyRouting>
    Code lines:
    ...
      REPEAT
        RoutingLine := RoutingLine2;
        RoutingLine."Routing No." := RoutingHeader."No.";
        RoutingLine."Version Code" := ToVersionCode;
        RoutingLine.INSERT;
        OnCopyRountingOnAfterRoutingLineInsert(RoutingLine,RoutingLine2); <=====================
      UNTIL RoutingLine2.NEXT = 0;
    
    FromRoutingTool.SETRANGE("Routing No.",FromRoutingHeaderNo);
    FromRoutingTool.SETRANGE("Version Code",FromVersionCode);
    ...
Codeunit<Calendar Absence Management>.PROCEDURE<OnAfterUpdateAbsence>
  Raised in: Codeunit<Calendar Absence Management>.PROCEDURE<UpdateAbsence>
    Code lines:
    ...
    IF NOT Remove THEN
      CalAbsentEntry.MODIFY;
    
    GatherEntries(CalendarEntry3);
    
    OnAfterUpdateAbsence(CalAbsentEntry); <=====================
Codeunit<Production BOM-Copy>.PROCEDURE<OnAfterInsertProdBOMComponent>
  Raised in: Codeunit<Production BOM-Copy>.PROCEDURE<CopyBOM>
    Code lines:
    ...
        ToProdBOMLine."Version Code" := ToVersionCode;
        IF SkipBOMDeletion THEN
          ToProdBOMLine."Line No." := LineNo;
        OnBeforeInsertProdBOMComponent(ToProdBOMLine,FromProdBOMLine);
        ToProdBOMLine.INSERT;
        OnAfterInsertProdBOMComponent(ToProdBOMLine,FromProdBOMLine,CurrentBOMHeader,SkipBOMDeletion,LineNo); <=====================
      UNTIL FromProdBOMLine.NEXT = 0;
    
    IF SkipBOMDeletion THEN
      EXIT;
    ...
Codeunit<Production BOM-Copy>.PROCEDURE<OnBeforeCopyBOM>
  Raised in: Codeunit<Production BOM-Copy>.PROCEDURE<CopyBOM>
    Code lines:
    ...
          ProdBOMVersion.Status);
    END;
    
    LineNo := 0;
    SkipBOMDeletion := FALSE;
    OnBeforeCopyBOM(CurrentBOMHeader,BOMHeaderNo,FromVersionCode,ToVersionCode,SkipBOMDeletion,LineNo); <=====================
    IF NOT SkipBOMDeletion THEN BEGIN
      ToProdBOMLine.SETRANGE("Production BOM No.",CurrentBOMHeader."No.");
      ToProdBOMLine.SETRANGE("Version Code",ToVersionCode);
      ToProdBOMLine.DELETEALL;
    ...
Codeunit<Production BOM-Copy>.PROCEDURE<OnBeforeInsertProdBOMComponent>
  Raised in: Codeunit<Production BOM-Copy>.PROCEDURE<CopyBOM>
    Code lines:
    ...
        ToProdBOMLine := FromProdBOMLine;
        ToProdBOMLine."Production BOM No." := CurrentBOMHeader."No.";
        ToProdBOMLine."Version Code" := ToVersionCode;
        IF SkipBOMDeletion THEN
          ToProdBOMLine."Line No." := LineNo;
        OnBeforeInsertProdBOMComponent(ToProdBOMLine,FromProdBOMLine); <=====================
        ToProdBOMLine.INSERT;
        OnAfterInsertProdBOMComponent(ToProdBOMLine,FromProdBOMLine,CurrentBOMHeader,SkipBOMDeletion,LineNo);
      UNTIL FromProdBOMLine.NEXT = 0;
    
    ...
Codeunit<Prod. Order Route Management>.PROCEDURE<OnBeforeCalcPreviousOperations>
  Raised in: Codeunit<Prod. Order Route Management>.PROCEDURE<CalcPreviousOperations>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCalcPreviousOperations(ProdOrderLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SetRoutingFilter(
      ProdOrderRtngLine,ProdOrderLine.Status,ProdOrderLine."Prod. Order No.",
      ProdOrderLine."Routing No.",ProdOrderLine."Routing Reference No.");
    ProdOrderRtngLine.MODIFYALL("Previous Operation No.",'');
    
    ...
Codeunit<Prod. Order Route Management>.PROCEDURE<OnBeforeSetNextOperations>
  Raised in: Codeunit<Prod. Order Route Management>.PROCEDURE<SetNextOperations>
    Code lines:
    IsHandled := FALSE;
    OnBeforeSetNextOperations(ProdOrderLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SetRoutingFilter(
      ProdOrderRtngLine,ProdOrderLine.Status,ProdOrderLine."Prod. Order No.",
      ProdOrderLine."Routing No.",ProdOrderLine."Routing Reference No.");
    ProdOrderRtngLine.MODIFYALL("Next Operation No.",'');
    
    ...
Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterInsertProdRoutingLine>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<TransferRouting>
    Code lines:
    ...
        ProdOrderRoutingLine."Ending Time" := ProdOrderLine."Ending Time";
        ProdOrderRoutingLine."Ending Date" := ProdOrderLine."Ending Date";
        ProdOrderRoutingLine.UpdateDatetime;
        OnAfterTransferRoutingLine(ProdOrderLine,RoutingLine,ProdOrderRoutingLine);
        ProdOrderRoutingLine.INSERT;
        OnAfterInsertProdRoutingLine(ProdOrderRoutingLine,ProdOrderLine); <=====================
        TransferTaskInfo(ProdOrderRoutingLine,ProdOrderLine."Routing Version Code");
      UNTIL RoutingLine.NEXT = 0;
    
    OnAfterTransferRouting(ProdOrderLine);
Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterProdOrderCompFilter>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<TransferBOM>
    Code lines:
    ...
                ProdOrderComp.SETRANGE(Length,ProdBOMLine[Level].Length);
                ProdOrderComp.SETRANGE(Width,ProdBOMLine[Level].Width);
                ProdOrderComp.SETRANGE(Weight,ProdBOMLine[Level].Weight);
                ProdOrderComp.SETRANGE(Depth,ProdBOMLine[Level].Depth);
                ProdOrderComp.SETRANGE("Unit of Measure Code",ProdBOMLine[Level]."Unit of Measure Code");
                OnAfterProdOrderCompFilter(ProdOrderComp,ProdBOMLine[Level]); <=====================
                IF NOT ProdOrderComp.FINDFIRST THEN BEGIN
                  ProdOrderComp.RESET;
                  ProdOrderComp.SETRANGE(Status,ProdOrderLine.Status);
                  ProdOrderComp.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
    ...
Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterTransferBOMComponent>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<TransferBOM>
    Code lines:
    ...
                    ProdOrderComp."Planning Level Code" := ProdOrderLine."Planning Level Code" + 1;
                    Item2.GET(ProdOrderComp."Item No.");
                    ProdOrderComp."Item Low-Level Code" := Item2."Low-Level Code";
                  END;
                  ProdOrderComp.GetDefaultBin;
                  OnAfterTransferBOMComponent(ProdOrderLine,ProdBOMLine[Level],ProdOrderComp); <=====================
                  ProdOrderComp.INSERT(TRUE);
                END ELSE BEGIN
                  ProdOrderComp.SetIgnoreErrors;
                  ProdOrderComp.SETCURRENTKEY(Status,"Prod. Order No."); // Reset key
    ...
Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterTransferRouting>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<TransferRouting>
    Code lines:
    ...
        ProdOrderRoutingLine."Starting Time" := ProdOrderLine."Starting Time";
        ProdOrderRoutingLine."Starting Date" := ProdOrderLine."Starting Date";
        ProdOrderRoutingLine."Ending Time" := ProdOrderLine."Ending Time";
        ProdOrderRoutingLine."Ending Date" := ProdOrderLine."Ending Date";
        ProdOrderRoutingLine.UpdateDatetime;
        OnAfterTransferRoutingLine(ProdOrderLine,RoutingLine,ProdOrderRoutingLine); <=====================
        ProdOrderRoutingLine.INSERT;
        OnAfterInsertProdRoutingLine(ProdOrderRoutingLine,ProdOrderLine);
        TransferTaskInfo(ProdOrderRoutingLine,ProdOrderLine."Routing Version Code");
      UNTIL RoutingLine.NEXT = 0;
    ...
Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterTransferRoutingLine>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<TransferRouting>
    Code lines:
    ...
        ProdOrderRoutingLine."Starting Time" := ProdOrderLine."Starting Time";
        ProdOrderRoutingLine."Starting Date" := ProdOrderLine."Starting Date";
        ProdOrderRoutingLine."Ending Time" := ProdOrderLine."Ending Time";
        ProdOrderRoutingLine."Ending Date" := ProdOrderLine."Ending Date";
        ProdOrderRoutingLine.UpdateDatetime;
        OnAfterTransferRoutingLine(ProdOrderLine,RoutingLine,ProdOrderRoutingLine); <=====================
        ProdOrderRoutingLine.INSERT;
        OnAfterInsertProdRoutingLine(ProdOrderRoutingLine,ProdOrderLine);
        TransferTaskInfo(ProdOrderRoutingLine,ProdOrderLine."Routing Version Code");
      UNTIL RoutingLine.NEXT = 0;
    ...
Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterTransferTaskInfo>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<TransferTaskInfo>
    Code lines:
    ...
        ProdOrderRtngCommentLine."Prod. Order No." := FromProdOrderRoutingLine."Prod. Order No.";
        ProdOrderRtngCommentLine."Routing Reference No." := FromProdOrderRoutingLine."Routing Reference No.";
        ProdOrderRtngCommentLine.INSERT;
      UNTIL RoutingCommentLine.NEXT = 0;
    
    OnAfterTransferTaskInfo(FromProdOrderRoutingLine,VersionCode); <=====================
Codeunit<Calculate Routing Line>.PROCEDURE<OnAfterCalculateRoutingLine>
  Raised in: Codeunit<Calculate Routing Line>.PROCEDURE<CalculateRoutingLine>
    Code lines:
    ...
        CalcRoutingLineBack(CalcStartEndDate)
      ELSE
        CalcRoutingLineForward(CalcStartEndDate);
    END;
    
    OnAfterCalculateRoutingLine(ProdOrderRoutingLine); <=====================
    
    ProdOrderRoutingLine2 := ProdOrderRoutingLine;
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnAfterInitProdOrderLine>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<InitProdOrderLine>
    Code lines:
    ...
    ProdOrderLine."Planning Level Code" := 0;
    ProdOrderLine."Inventory Posting Group" := Item."Inventory Posting Group";
    ProdOrderLine.UpdateDatetime;
    ProdOrderLine.VALIDATE("Unit Cost");
    
    OnAfterInitProdOrderLine(ProdOrderLine,ProdOrder); <=====================
    
    NextProdOrderLineNo := NextProdOrderLineNo + 10000;
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnAfterProcessProdOrderLine>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<ProcessProdOrderLines>
    Code lines:
    ...
    
    IF ProdOrderLine.FINDSET(TRUE) THEN
      REPEAT
        IF NOT CalcProdOrder.Calculate(ProdOrderLine,Direction,TRUE,TRUE,TRUE,LetDueDateDecrease) THEN
          ErrorOccured := TRUE;
        OnAfterProcessProdOrderLine(ProdOrderLine,Direction,LetDueDateDecrease); <=====================
      UNTIL ProdOrderLine.NEXT = 0;
    
    EXIT(NOT ErrorOccured);
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnAfterProdOrderLineInsert>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<Copy>
    Code lines:
    ...
          OnBeforeProdOrderLineInsert(ProdOrderLine,ProdOrder,SalesLineIsSet,SalesLine);
          ProdOrderLine.INSERT;
          IF ProdOrderLine.HasErrorOccured THEN
            ErrorOccured := TRUE;
    
          OnAfterProdOrderLineInsert(ProdOrder,ProdOrderLine); <=====================
        END;
      ProdOrder."Source Type"::Family:
        IF NOT CopyFromFamily THEN
          ErrorOccured := TRUE;
    ...
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<InsertProdOrderLine>
    Code lines:
    ...
      ProdOrderLine3.MODIFY;
      ProdOrderLine := ProdOrderLine3;
      EXIT(FALSE);
    END;
    ProdOrderLine.INSERT;
    OnAfterProdOrderLineInsert(ProdOrder,ProdOrderLine); <=====================
    EXIT(TRUE);
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnAfterUpdateProdOrderLine>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<UpdateProdOrderLine>
    Code lines:
    ...
          ProdOrderLine3.MODIFY;
        END;
      UNTIL ProdOrderComp3.NEXT = 0;
    TempOldProdOrderComp.DELETEALL;
    
    OnAfterUpdateProdOrderLine(ProdOrderLine,Direction,LetDueDateDecrease); <=====================
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnBeforeProdOrderLine3Modify>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<InsertProdOrderLine>
    Code lines:
    ...
    
      IF ProdOrderLine3."Planning Level Code" < ProdOrderLine."Planning Level Code" THEN BEGIN
        ProdOrderLine3."Planning Level Code" := ProdOrderLine."Planning Level Code";
        UpdateCompPlanningLevel(ProdOrderLine3);
      END;
      OnBeforeProdOrderLine3Modify(ProdOrderLine3,ProdOrderLine); <=====================
      ProdOrderLine3.MODIFY;
      ProdOrderLine := ProdOrderLine3;
      EXIT(FALSE);
    END;
    ...
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnBeforeProdOrderLineInsert>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<Copy>
    Code lines:
    ...
          ProdOrderLine."Description 2" := ProdOrder."Description 2";
          ProdOrderLine.VALIDATE(Quantity,ProdOrder.Quantity);
          ProdOrderLine.UpdateDatetime;
          IF SalesLineIsSet THEN
            CopyDimFromSalesLine(SalesLine,ProdOrderLine);
          OnBeforeProdOrderLineInsert(ProdOrderLine,ProdOrder,SalesLineIsSet,SalesLine); <=====================
          ProdOrderLine.INSERT;
          IF ProdOrderLine.HasErrorOccured THEN
            ErrorOccured := TRUE;
    
    ...
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<CopyFromSalesOrder>
    Code lines:
    ...
        ProdOrderLine."Due Date" := SalesLine."Shipment Date";
        ProdOrderLine."Ending Date" :=
          LeadTimeMgt.PlannedEndingDate(ProdOrderLine."Item No.",ProdOrderLine."Location Code",'',ProdOrderLine."Due Date",'',2);
        ProdOrderLine.VALIDATE("Ending Date");
    
        OnBeforeProdOrderLineInsert(ProdOrderLine,ProdOrder,TRUE,SalesLine); <=====================
        InsertProdOrderLine;
        IF ProdOrderLine.HasErrorOccured THEN
          ErrorOccured := TRUE;
        ItemTrackingMgt.CopyItemTracking2(SalesLine.RowID1,ProdOrderLine.RowID1,TRUE,TRUE);
    ...
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCheckMakeOrderLineBeforeIf>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<CheckMakeOrderLine>
    Code lines:
    ...
    ELSE BEGIN
      ParentItem.GET(ProdOrderLine2."Item No.");
      MakeProdOrder := ParentItem."Manufacturing Policy" = ParentItem."Manufacturing Policy"::"Make-to-Order";
    END;
    
    OnCheckMakeOrderLineBeforeIf(ProdOrder,ProdOrderLine2,ProdOrderComp,MakeProdOrder); <=====================
    
    IF NOT MakeProdOrder THEN
      EXIT(FALSE);
    
    ...
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<CheckMakeOrderLine>
    Code lines:
    ...
    ELSE BEGIN
      ParentItem.GET(ProdOrderLine2."Item No.");
      MakeProdOrder := ParentItem."Manufacturing Policy" = ParentItem."Manufacturing Policy"::"Make-to-Order";
    END;
    
    OnCheckMakeOrderLineBeforeIf(ProdOrder,ProdOrderLine2,ProdOrderComp,MakeProdOrder); <=====================
    
    IF NOT MakeProdOrder THEN
      EXIT(FALSE);
    
    ...
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCheckMakeOrderLineBeforeInsert>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<CheckMakeOrderLine>
    Code lines:
    ...
    ProdOrderLine."Ending Time" := ProdOrderComp."Due Time";
    ProdOrderLine.UpdateDatetime;
    // this InsertNew is responsible for controlling if same POLine is added up or new POLine is created
    InsertNew := InsertNew AND (ProdOrderComp."Planning Level Code" > 1);
    
    OnCheckMakeOrderLineBeforeInsert(ProdOrderLine,ProdOrderComp); <=====================
    Inserted := InsertProdOrderLine;
    IF MultiLevel THEN
      IF Inserted THEN
        CalcProdOrder.Calculate(ProdOrderLine,Direction::Backward,TRUE,TRUE,TRUE,LetDueDateDecrease)
    ...
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCopyFromFamilyOnBeforeInsertProdOrderLine>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<CopyFromFamily>
    Code lines:
    ...
          ProdOrderLine.VALIDATE("Unit of Measure Code",FamilyLine."Unit of Measure Code");
          ProdOrderLine.VALIDATE(Quantity,FamilyLine.Quantity * ProdOrder.Quantity);
          ProdOrderLine."Routing No." := Family."Routing No.";
          ProdOrderLine."Routing Reference No." := 0;
          ProdOrderLine.UpdateDatetime;
          OnCopyFromFamilyOnBeforeInsertProdOrderLine(ProdOrderLine,FamilyLine); <=====================
          InsertProdOrderLine;
          IF ProdOrderLine.HasErrorOccured THEN
            ErrorOccured := TRUE;
        END;
    ...
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCopyFromSalesOrderOnBeforeProdOrderLineModify>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<CopyFromSalesOrder>
    Code lines:
    ...
          SalesLineReserve.BindToProdOrder(SalesLine,ProdOrderLine,
            ProdOrderLine."Remaining Quantity" - ProdOrderLine."Reserved Quantity",
            ProdOrderLine."Remaining Qty. (Base)" - ProdOrderLine."Reserved Qty. (Base)");
        END;
        CopyDimFromSalesLine(SalesLine,ProdOrderLine);
        OnCopyFromSalesOrderOnBeforeProdOrderLineModify(ProdOrderLine,SalesLine,SalesPlanLine); <=====================
        ProdOrderLine.MODIFY;
      UNTIL (SalesPlanLine.NEXT = 0);
    EXIT(NOT ErrorOccured);
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCopyFromSalesOrderOnBeforeSalesPlanLineInsert>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<CopyFromSalesOrder>
    Code lines:
    ...
          IF IsReplSystemProdOrder(SalesLine."No.",SalesLine."Variant Code",SalesLine."Location Code") THEN BEGIN
            SalesPlanLine.INIT;
            SalesPlanLine."Sales Order No." := SalesLine."Document No.";
            SalesPlanLine."Sales Order Line No." := SalesLine."Line No.";
            SalesPlanLine.VALIDATE("Item No.",SalesLine."No.");
            OnCopyFromSalesOrderOnBeforeSalesPlanLineInsert(SalesLine,SalesPlanLine); <=====================
            SalesPlanLine.INSERT;
          END;
      UNTIL SalesLine.NEXT = 0;
    
    ...
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnInitProdOrderLineAfterScrap>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<InitProdOrderLine>
    Code lines:
    ...
    ELSE
      CalcProdOrder.SetProdOrderLineBinCodeFromRoute(ProdOrderLine,ProdOrderLine."Location Code",ProdOrderLine."Routing No.");
    
    Item.GET(ItemNo);
    ProdOrderLine."Scrap %" := Item."Scrap %";
    OnInitProdOrderLineAfterScrap(ProdOrderLine,ProdOrder); <=====================
    ProdOrderLine."Due Date" := ProdOrder."Due Date";
    ProdOrderLine."Starting Date" := ProdOrder."Starting Date";
    ProdOrderLine."Starting Time" := ProdOrder."Starting Time";
    ProdOrderLine."Ending Date" := ProdOrder."Ending Date";
    ...
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnInitProdOrderLineAfterVariantCode>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<InitProdOrderLine>
    Code lines:
    ...
    ProdOrderLine."Line No." := NextProdOrderLineNo;
    ProdOrderLine."Routing Reference No." := ProdOrderLine."Line No.";
    ProdOrderLine.VALIDATE("Item No.",ItemNo);
    ProdOrderLine."Location Code" := LocationCode;
    ProdOrderLine."Variant Code" := VariantCode;
    OnInitProdOrderLineAfterVariantCode(ProdOrderLine,VariantCode); <=====================
    IF ProdOrder."Bin Code" <> '' THEN
      ProdOrderLine.VALIDATE("Bin Code",ProdOrder."Bin Code")
    ELSE
      CalcProdOrder.SetProdOrderLineBinCodeFromRoute(ProdOrderLine,ProdOrderLine."Location Code",ProdOrderLine."Routing No.");
    ...
Codeunit<Create Prod. Order from Sale>.PROCEDURE<OnAfterCreateProdOrder>
  Raised in: Codeunit<Create Prod. Order from Sale>.PROCEDURE<CreateProdOrder>
    Code lines:
    ...
      ProdOrder.VALIDATE("Source No.",SalesLine."No.");
      ProdOrder.VALIDATE(Description,SalesLine.Description);
      SalesLine.CALCFIELDS("Reserved Qty. (Base)");
      ProdOrder.Quantity := SalesLine."Outstanding Qty. (Base)" - SalesLine."Reserved Qty. (Base)";
    END;
    OnAfterCreateProdOrderFromSalesLine(ProdOrder,SalesLine); <=====================
    ProdOrder.MODIFY;
    ProdOrder.SETRANGE("No.",ProdOrder."No.");
    
    IsHandled := FALSE;
    ...
Codeunit<Create Prod. Order from Sale>.PROCEDURE<OnAfterCreateProdOrderFromSalesLine>
  Raised in: Codeunit<Create Prod. Order from Sale>.PROCEDURE<CreateProdOrder>
    Code lines:
    ...
      ProdOrder.VALIDATE("Source No.",SalesLine."No.");
      ProdOrder.VALIDATE(Description,SalesLine.Description);
      SalesLine.CALCFIELDS("Reserved Qty. (Base)");
      ProdOrder.Quantity := SalesLine."Outstanding Qty. (Base)" - SalesLine."Reserved Qty. (Base)";
    END;
    OnAfterCreateProdOrderFromSalesLine(ProdOrder,SalesLine); <=====================
    ProdOrder.MODIFY;
    ProdOrder.SETRANGE("No.",ProdOrder."No.");
    
    IsHandled := FALSE;
    ...
Codeunit<Create Prod. Order from Sale>.PROCEDURE<OnBeforeCreateProdOrderLines>
  Raised in: Codeunit<Create Prod. Order from Sale>.PROCEDURE<CreateProdOrder>
    Code lines:
    ...
    OnAfterCreateProdOrderFromSalesLine(ProdOrder,SalesLine);
    ProdOrder.MODIFY;
    ProdOrder.SETRANGE("No.",ProdOrder."No.");
    
    IsHandled := FALSE;
    OnBeforeCreateProdOrderLines(ProdOrder,SalesLine,IsHandled); <=====================
    IF NOT IsHandled THEN BEGIN
      CreateProdOrderLines.SetSalesLine(SalesLine);
      CreateProdOrderLines.Copy(ProdOrder,1,SalesLine."Variant Code",TRUE);
    END;
    ...
Codeunit<Planning Line Management>.PROCEDURE<OnAfterTransferRouting>
  Raised in: Codeunit<Planning Line Management>.PROCEDURE<TransferRouting>
    Code lines:
    ...
        PlanningRtngLine.UpdateDatetime;
        OnAfterTransferRtngLine(ReqLine,RtngLine,PlanningRtngLine);
        PlanningRtngLine.INSERT;
      UNTIL RtngLine.NEXT = 0;
    
    OnAfterTransferRouting(ReqLine); <=====================
Codeunit<Planning Line Management>.PROCEDURE<OnAfterTransferRtngLine>
  Raised in: Codeunit<Planning Line Management>.PROCEDURE<TransferRouting>
    Code lines:
    ...
        PlanningRtngLine."Starting Time" := ReqLine."Starting Time";
        PlanningRtngLine."Ending Date" := ReqLine."Ending Date";
        PlanningRtngLine."Ending Time" := ReqLine."Ending Time";
        PlanningRtngLine."Input Quantity" := ReqLine.Quantity;
        PlanningRtngLine.UpdateDatetime;
        OnAfterTransferRtngLine(ReqLine,RtngLine,PlanningRtngLine); <=====================
        PlanningRtngLine.INSERT;
      UNTIL RtngLine.NEXT = 0;
    
    OnAfterTransferRouting(ReqLine);
Codeunit<Planning Line Management>.PROCEDURE<OnBeforeInsertAsmPlanningComponent>
  Raised in: Codeunit<Planning Line Management>.PROCEDURE<TransferAsmBOM>
    Code lines:
    ...
    
                  PlanningComponent."Flushing Method" := CompSKU."Flushing Method";
                  PlanningComponent."Ref. Order Type" := ReqLine."Ref. Order Type";
                  PlanningComponent."Ref. Order Status" := ReqLine."Ref. Order Status";
                  PlanningComponent."Ref. Order No." := ReqLine."Ref. Order No.";
                  OnBeforeInsertAsmPlanningComponent(ReqLine,AsmBOMComp[Level],PlanningComponent); <=====================
                  PlanningComponent.INSERT;
                END ELSE BEGIN
                  PlanningComponent.RESET;
                  PlanningComponent.BlockDynamicTracking(Blocked);
    ...
Codeunit<Planning Line Management>.PROCEDURE<OnBeforeInsertPlanningComponent>
  Raised in: Codeunit<Planning Line Management>.PROCEDURE<TransferBOM>
    Code lines:
    ...
                    PlanningComponent."Planning Level Code" := ReqLine."Planning Level" + 1;
    
                  PlanningComponent."Ref. Order Type" := ReqLine."Ref. Order Type";
                  PlanningComponent."Ref. Order Status" := ReqLine."Ref. Order Status";
                  PlanningComponent."Ref. Order No." := ReqLine."Ref. Order No.";
                  OnBeforeInsertPlanningComponent(ReqLine,ProdBOMLine[Level],PlanningComponent); <=====================
                  PlanningComponent.INSERT;
                END ELSE BEGIN
                  PlanningComponent.RESET;
                  PlanningComponent.BlockDynamicTracking(Blocked);
    ...
Codeunit<Planning Line Management>.PROCEDURE<OnBeforeModifyPlanningComponent>
  Raised in: Codeunit<Planning Line Management>.PROCEDURE<TransferBOM>
    Code lines:
    ...
                  PlanningComponent.BlockDynamicTracking(Blocked);
                  PlanningComponent.VALIDATE(
                    "Quantity per",
                    PlanningComponent."Quantity per" + ProdBOMLine[Level]."Quantity per" * LineQtyPerUOM / ItemQtyPerUOM);
                  PlanningComponent.VALIDATE("Routing Link Code",ProdBOMLine[Level]."Routing Link Code");
                  OnBeforeModifyPlanningComponent(ReqLine,ProdBOMLine[Level],PlanningComponent); <=====================
                  PlanningComponent.MODIFY;
                END;
    
                // A temporary list of Planning Components handled is sustained:
    ...
Codeunit<Planning Line Management>.PROCEDURE<OnCheckMultiLevelStructureOnBeforeInsertPlanningLine>
  Raised in: Codeunit<Planning Line Management>.PROCEDURE<CheckMultiLevelStructure>
    Code lines:
    ...
    
        ReqLine3."Planning Level" := PlanningLevel + 1;
        ReqLine3."Related to Planning Line" := ReqLine2."Line No.";
        ReqLine3."Order Promising ID" := ReqLine2."Order Promising ID";
        ReqLine3."Order Promising Line ID" := ReqLine2."Order Promising Line ID";
        OnCheckMultiLevelStructureOnBeforeInsertPlanningLine(ReqLine3,PlanningComp); <=====================
        InsertPlanningLine(ReqLine3);
        ReqLine3.Quantity :=
          ROUND(
            ReqLine3."Quantity (Base)" /
    ...
Codeunit<Planning Line Management>.PROCEDURE<OnTransferBOMOnBeforeGetDefaultBin>
  Raised in: Codeunit<Planning Line Management>.PROCEDURE<TransferBOM>
    Code lines:
    ...
                  PlanningComponent.Description := ProdBOMLine[Level].Description;
                  PlanningComponent."Planning Line Origin" := ReqLine."Planning Line Origin";
                  PlanningComponent.VALIDATE("Unit of Measure Code",ProdBOMLine[Level]."Unit of Measure Code");
                  PlanningComponent."Quantity per" := ProdBOMLine[Level]."Quantity per" * LineQtyPerUOM / ItemQtyPerUOM;
                  PlanningComponent.VALIDATE("Routing Link Code",ProdBOMLine[Level]."Routing Link Code");
                  OnTransferBOMOnBeforeGetDefaultBin(PlanningComponent,ProdBOMLine[Level]); <=====================
                  PlanningComponent.GetDefaultBin;
                  PlanningComponent.Length := ProdBOMLine[Level].Length;
                  PlanningComponent.Width := ProdBOMLine[Level].Width;
                  PlanningComponent.Weight := ProdBOMLine[Level].Weight;
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnAfterInsertAsmHeader>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<InsertAsmHeader>
    Code lines:
    ...
    IF BOMComp.FIND('-') THEN
      REPEAT
        AsmHeader.AddBOMLine(BOMComp);
      UNTIL BOMComp.NEXT = 0;
    
    OnAfterInsertAsmHeader(ReqLine,AsmHeader); <=====================
    
    PrintAsmOrder(AsmHeader);
    TempDocumentEntry.INIT;
    TempDocumentEntry."Table ID" := DATABASE::"Assembly Header";
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnAfterInsertProdOrder>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<InsertProdOrder>
    Code lines:
    ...
      ProdOrder.MODIFY;
      InsertTempProdOrder(ReqLine,ProdOrder);
    END;
    InsertProdOrderLine(ReqLine,ProdOrder,Item);
    
    OnAfterInsertProdOrder(ProdOrder,ProdOrderChoice,ReqLine); <=====================
Codeunit<Carry Out Action>.PROCEDURE<OnAfterInsertProdOrderLine>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<InsertProdOrderLine>
    Code lines:
    ...
    TransferCapNeed(ReqLine,ProdOrder,ProdOrderLine."Routing No.",ProdOrderLine."Routing Reference No.");
    
    IF ProdOrderLine."Planning Level Code" > 0 THEN
      UpdateComponentLink(ProdOrderLine);
    
    OnAfterInsertProdOrderLine(ReqLine,ProdOrder,ProdOrderLine,Item); <=====================
    
    FinalizeOrderHeader(ProdOrder);
Codeunit<Carry Out Action>.PROCEDURE<OnAfterProdOrderChgAndReshedule>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<ProdOrderChgAndReshedule>
    Code lines:
    ...
            ProdOrder."Due Date" := "Due Date";
            ProdOrder.MODIFY;
    
            FinalizeOrderHeader(ProdOrder);
          END;
        OnAfterProdOrderChgAndReshedule(ReqLine,ProdOrderLine); <=====================
      END ELSE BEGIN
        MESSAGE(STRSUBSTNO(CouldNotChangeSupplyTxt,"Ref. Order No.","Ref. Line No."));
        EXIT(FALSE);
      END;
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnAfterProdOrderRtngLineInsert>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<TransferRouting>
    Code lines:
    ...
              FlushingMethod);
    
        ProdOrderRtngLine.UpdateDatetime;
        OnAfterTransferPlanningRtngLine(PlanningRtngLine,ProdOrderRtngLine);
        ProdOrderRtngLine.INSERT;
        OnAfterProdOrderRtngLineInsert(ProdOrderRtngLine,PlanningRtngLine,ProdOrder,ReqLine); <=====================
        CalcProdOrder.TransferTaskInfo(ProdOrderRtngLine,ReqLine."Routing Version Code");
      UNTIL PlanningRtngLine.NEXT = 0;
    
    EXIT(NOT PlanningRtngLine.ISEMPTY);
Codeunit<Carry Out Action>.PROCEDURE<OnAfterTransferAsmPlanningComp>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<TransferAsmPlanningComp>
    Code lines:
    ...
        AsmLine."Cost Amount" := PlanningComponent."Cost Amount";
    
        AsmLine."Shortcut Dimension 1 Code" := PlanningComponent."Shortcut Dimension 1 Code";
        AsmLine."Shortcut Dimension 2 Code" := PlanningComponent."Shortcut Dimension 2 Code";
    
        OnAfterTransferAsmPlanningComp(PlanningComponent,AsmLine); <=====================
    
        AsmLine.INSERT;
    
        ReservePlanningComponent.TransferPlanningCompToAsmLine(PlanningComponent,AsmLine,0,TRUE);
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnAfterTransferPlanningComp>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<TransferBOM>
    Code lines:
    ...
          ROUND(ProdOrderComp2."Remaining Quantity" * ProdOrderComp2."Qty. per Unit of Measure",0.00001);
        ProdOrderComp2."Shortcut Dimension 1 Code" := PlanningComponent."Shortcut Dimension 1 Code";
        ProdOrderComp2."Shortcut Dimension 2 Code" := PlanningComponent."Shortcut Dimension 2 Code";
        ProdOrderComp2."Dimension Set ID" := PlanningComponent."Dimension Set ID";
        ProdOrderComp2.UpdateDatetime;
        OnAfterTransferPlanningComp(PlanningComponent,ProdOrderComp2); <=====================
        ProdOrderComp2.INSERT;
        ReservePlanningComponent.TransferPlanningCompToPOComp(PlanningComponent,ProdOrderComp2,0,TRUE);
        IF ProdOrderComp2.Status IN [ProdOrderComp2.Status::"Firm Planned",ProdOrderComp2.Status::Released] THEN
          ProdOrderComp2.AutoReserve;
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnAfterTransferPlanningRtngLine>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<TransferRouting>
    Code lines:
    ...
          ProdOrderRtngLine."Open Shop Floor Bin Code" := WMSManagement.GetProdCenterBinCode(
              PlanningRtngLine.Type,PlanningRtngLine."No.",ReqLine."Location Code",TRUE,
              FlushingMethod);
    
        ProdOrderRtngLine.UpdateDatetime;
        OnAfterTransferPlanningRtngLine(PlanningRtngLine,ProdOrderRtngLine); <=====================
        ProdOrderRtngLine.INSERT;
        OnAfterProdOrderRtngLineInsert(ProdOrderRtngLine,PlanningRtngLine,ProdOrder,ReqLine);
        CalcProdOrder.TransferTaskInfo(ProdOrderRtngLine,ReqLine."Routing Version Code");
      UNTIL PlanningRtngLine.NEXT = 0;
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnAsmOrderChgAndResheduleOnBeforeAsmHeaderModify>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<AsmOrderChgAndReshedule>
    Code lines:
    ...
      IF AsmHeader.GET(AsmHeader."Document Type"::Order,"Ref. Order No.") THEN BEGIN
        AsmHeader.SetWarningsOff;
        AsmHeader.VALIDATE(Quantity,Quantity);
        AsmHeader.VALIDATE("Planning Flexibility","Planning Flexibility");
        AsmHeader.VALIDATE("Due Date","Due Date");
        OnAsmOrderChgAndResheduleOnBeforeAsmHeaderModify(ReqLine,AsmHeader); <=====================
        AsmHeader.MODIFY(TRUE);
        ReqLineReserve.TransferPlanningLineToAsmHdr(ReqLine,AsmHeader,0,TRUE);
        ReqLineReserve.UpdateDerivedTracking(ReqLine);
        ReservMgt.SetAssemblyHeader(AsmHeader);
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnInsertProdOrderLineWithReqLine>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<InsertProdOrderLine>
    Code lines:
    ...
      ProdOrderLine."Planning Flexibility" := ReqLine."Planning Flexibility";
    ProdOrderLine.UpdateDatetime;
    ProdOrderLine."Shortcut Dimension 1 Code" := ReqLine."Shortcut Dimension 1 Code";
    ProdOrderLine."Shortcut Dimension 2 Code" := ReqLine."Shortcut Dimension 2 Code";
    ProdOrderLine."Dimension Set ID" := ReqLine."Dimension Set ID";
    OnInsertProdOrderLineWithReqLine(ProdOrderLine,ReqLine); <=====================
    ProdOrderLine.INSERT;
    
    ReqLineReserve.TransferPlanningLineToPOLine(ReqLine,ProdOrderLine,ReqLine."Net Quantity (Base)",FALSE);
    IF ReqLine.Reserve AND NOT (ProdOrderLine.Status = ProdOrderLine.Status::Planned) THEN
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnInsertProdOrderWithReqLine>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<InsertProdOrder>
    Code lines:
    ...
      ProdOrder."Cost Amount" := ReqLine."Cost Amount";
      ProdOrder."Shortcut Dimension 1 Code" := ReqLine."Shortcut Dimension 1 Code";
      ProdOrder."Shortcut Dimension 2 Code" := ReqLine."Shortcut Dimension 2 Code";
      ProdOrder."Dimension Set ID" := ReqLine."Dimension Set ID";
      ProdOrder.UpdateDatetime;
      OnInsertProdOrderWithReqLine(ProdOrder,ReqLine); <=====================
      ProdOrder.MODIFY;
      InsertTempProdOrder(ReqLine,ProdOrder);
    END;
    InsertProdOrderLine(ReqLine,ProdOrder,Item);
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnInsertTransLineWithReqLine>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<InsertTransLine>
    Code lines:
    ...
    TransLine."Shortcut Dimension 2 Code" := ReqLine."Shortcut Dimension 2 Code";
    TransLine."Dimension Set ID" := ReqLine."Dimension Set ID";
    TransLine."Receipt Date" := ReqLine."Due Date";
    TransLine."Shipment Date" := ReqLine."Transfer Shipment Date";
    TransLine.VALIDATE("Planning Flexibility",ReqLine."Planning Flexibility");
    OnInsertTransLineWithReqLine(TransLine,ReqLine); <=====================
    TransLine.INSERT;
    
    ReqLineReserve.TransferReqLineToTransLine(ReqLine,TransLine,ReqLine."Quantity (Base)",FALSE);
    IF ReqLine.Reserve THEN
Codeunit<Carry Out Action>.PROCEDURE<OnPurchOrderChgAndResheduleOnBeforePurchLineModify>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<PurchOrderChgAndReshedule>
    Code lines:
    ...
    THEN BEGIN
      PurchLine.BlockDynamicTracking(TRUE);
      PurchLine.VALIDATE(Quantity,ReqLine.Quantity);
      PurchLine.VALIDATE("Expected Receipt Date",ReqLine."Due Date");
      PurchLine.VALIDATE("Planning Flexibility",ReqLine."Planning Flexibility");
      OnPurchOrderChgAndResheduleOnBeforePurchLineModify(ReqLine,PurchLine); <=====================
      PurchLine.MODIFY(TRUE);
      ReqLineReserve.TransferReqLineToPurchLine(ReqLine,PurchLine,0,TRUE);
      ReqLineReserve.UpdateDerivedTracking(ReqLine);
      ReservMgt.SetPurchLine(PurchLine);
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnTransOrderChgAndResheduleOnBeforeTransLineModify>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<TransOrderChgAndReshedule>
    Code lines:
    ...
      TransLine.BlockDynamicTracking(TRUE);
      TransLine.VALIDATE(Quantity,ReqLine.Quantity);
      TransLine.VALIDATE("Receipt Date",ReqLine."Due Date");
      TransLine."Shipment Date" := ReqLine."Transfer Shipment Date";
      TransLine.VALIDATE("Planning Flexibility",ReqLine."Planning Flexibility");
      OnTransOrderChgAndResheduleOnBeforeTransLineModify(ReqLine,TransLine); <=====================
      TransLine.MODIFY(TRUE);
      ReqLineReserve.TransferReqLineToTransLine(ReqLine,TransLine,0,TRUE);
      ReqLineReserve.UpdateDerivedTracking(ReqLine);
      ReservMgt.SetTransferLine(TransLine,0);
    ...
Codeunit<Create Reserv. Entry>.PROCEDURE<OnAfterCopyFromInsertReservEntry>
  Raised in: Codeunit<Create Reserv. Entry>.PROCEDURE<CreateEntry>
    Code lines:
    ...
      ReservEntry2."Source Ref. No." := InsertReservEntry2."Source Ref. No.";
      ReservEntry2."Serial No." := InsertReservEntry2."Serial No.";
      ReservEntry2."Lot No." := InsertReservEntry2."Lot No.";
      ReservEntry2."Qty. per Unit of Measure" := InsertReservEntry2."Qty. per Unit of Measure";
    
      OnAfterCopyFromInsertReservEntry(InsertReservEntry2,ReservEntry2); <=====================
    
      IF NOT QtyToHandleAndInvoiceIsSet THEN BEGIN
        ReservEntry2."Qty. to Handle (Base)" := ReservEntry2."Quantity (Base)";
        ReservEntry2."Qty. to Invoice (Base)" := ReservEntry2."Quantity (Base)";
    ...
Codeunit<Create Reserv. Entry>.PROCEDURE<OnAfterSignFactor>
  Raised in: Codeunit<Create Reserv. Entry>.PROCEDURE<SignFactor>
    Code lines:
    ...
          EXIT(-1);
      DATABASE::"Job Planning Line":
        EXIT(-1);
    END;
    
    OnAfterSignFactor(ReservEntry,Sign); <=====================
    EXIT(Sign);
Codeunit<Create Reserv. Entry>.PROCEDURE<OnBeforeUseOldReservEntry>
  Raised in: Codeunit<Create Reserv. Entry>.PROCEDURE<TransferReservEntry>
    Code lines:
    ...
        NewReservEntry.VALIDATE("Quantity (Base)",-TransferQty);
        NewReservEntry.MODIFY;
      END;
    END ELSE
      IF ABS(TransferQty) < ABS(OldReservEntry."Quantity (Base)") THEN BEGIN
        OnBeforeUseOldReservEntry(OldReservEntry,InsertReservEntry); <=====================
        IF OldReservEntry.Binding = OldReservEntry.Binding::"Order-to-Order" THEN
          SetBinding(OldReservEntry.Binding::"Order-to-Order");
        IF OldReservEntry."Disallow Cancellation" THEN
          SetDisallowCancellation(OldReservEntry."Disallow Cancellation");
    ...
Codeunit<Create Reserv. Entry>.PROCEDURE<OnCreateEntryOnBeforeSurplusCondition>
  Raised in: Codeunit<Create Reserv. Entry>.PROCEDURE<CreateEntry>
    Code lines:
    ...
    IF NOT QtyToHandleAndInvoiceIsSet THEN BEGIN
      ReservEntry."Qty. to Handle (Base)" := ReservEntry."Quantity (Base)";
      ReservEntry."Qty. to Invoice (Base)" := ReservEntry."Quantity (Base)";
    END;
    
    OnCreateEntryOnBeforeSurplusCondition(ReservEntry); <=====================
    
    IF Status < Status::Surplus THEN BEGIN
      InsertReservEntry2.TESTFIELD("Source Type");
    
    ...
Codeunit<Reservation Engine Mgt.>.PROCEDURE<OnAfterCreateText>
  Raised in: Codeunit<Reservation Engine Mgt.>.PROCEDURE<CreateText>
    Code lines:
    ...
                CalcAsmLine."Document Type","Source ID"));
          END;
      END;
    
      SourceTypeDesc := '';
      OnAfterCreateText(ReservEntry,SourceTypeDesc); <=====================
      EXIT(SourceTypeDesc);
    END;
Codeunit<Reservation Engine Mgt.>.PROCEDURE<OnAfterModifyShipmentDate>
  Raised in: Codeunit<Reservation Engine Mgt.>.PROCEDURE<ModifyShipmentDate>
    Code lines:
    ...
      ReservEntry2.MODIFY;
    
      ModifyActionMessageDating(ReservEntry2);
    END;
    
    OnAfterModifyShipmentDate(ReservEntry2,ReservEntry); <=====================
Codeunit<Reservation Engine Mgt.>.PROCEDURE<OnBeforeUpdateItemTracking>
  Raised in: Codeunit<Reservation Engine Mgt.>.PROCEDURE<ModifyItemTrackingOnTempRec>
    Code lines:
    ...
      ReservEntry2."Lot No." := TrackingSpecification."Lot No.";
      ReservEntry2."Serial No." := TrackingSpecification."Serial No.";
      ReservEntry2."Warranty Date" := TrackingSpecification."Warranty Date";
      ReservEntry2."Expiration Date" := TrackingSpecification."Expiration Date";
      ReservEntry2."Entry No." := LastEntryNo;
      OnBeforeUpdateItemTracking(ReservEntry2,TrackingSpecification); <=====================
      ReservEntry2.UpdateItemTracking;
      IF EntryMismatch THEN BEGIN
        IF NOT CalledRecursively THEN
          SaveLostReservQty(ReservEntry2); // Late Binding
    ...
  Raised in: Codeunit<Reservation Engine Mgt.>.PROCEDURE<ModifyItemTrackingOnTempRec>
    Code lines:
    ...
      ReservEntry2."Lot No." := TrackingSpecification."Lot No.";
      ReservEntry2."Serial No." := TrackingSpecification."Serial No.";
      ReservEntry2."Warranty Date" := TrackingSpecification."Warranty Date";
      ReservEntry2."Expiration Date" := TrackingSpecification."Expiration Date";
      ReservEntry2."Entry No." := LastEntryNo;
      OnBeforeUpdateItemTracking(ReservEntry2,TrackingSpecification); <=====================
      ReservEntry2.UpdateItemTracking;
      IF EntryMismatch THEN BEGIN
        IF NOT CalledRecursively THEN
          SaveLostReservQty(ReservEntry2); // Late Binding
    ...
Codeunit<Sales Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
  Raised in: Codeunit<Sales Line-Reserve>.PROCEDURE<VerifyChange>
    Code lines:
    ...
    NewSalesLine.CALCFIELDS("Reserved Qty. (Base)");
    ShowError := NewSalesLine."Reserved Qty. (Base)" <> 0;
    
    HasError := TestSalesLineModification(OldSalesLine,NewSalesLine,ShowError);
    
    OnVerifyChangeOnBeforeHasError(NewSalesLine,OldSalesLine,HasError,ShowError); <=====================
    
    IF HasError THEN
      ClearReservation(OldSalesLine,NewSalesLine);
    
    ...
Codeunit<Req. Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
  Raised in: Codeunit<Req. Line-Reserve>.PROCEDURE<VerifyChange>
    Code lines:
    ...
      ELSE
        HasError := TRUE;
    
    VerifyBinInReqLine(NewReqLine,OldReqLine,HasError);
    
    OnVerifyChangeOnBeforeHasError(NewReqLine,OldReqLine,HasError,ShowError); <=====================
    
    IF HasError THEN
      IF (NewReqLine."No." <> OldReqLine."No.") OR
         FindReservEntry(NewReqLine,TempReservEntry)
    ...
Codeunit<Purch. Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
  Raised in: Codeunit<Purch. Line-Reserve>.PROCEDURE<VerifyChange>
    Code lines:
    ...
        NewPurchLine.FIELDERROR("Location Code",Text003)
      ELSE
        HasError := TRUE;
    VerifyPurchLine(NewPurchLine,OldPurchLine,HasError);
    
    OnVerifyChangeOnBeforeHasError(NewPurchLine,OldPurchLine,HasError,ShowError); <=====================
    
    IF HasError THEN
      IF (NewPurchLine."No." <> OldPurchLine."No.") OR
         FindReservEntry(NewPurchLine,TempReservEntry)
    ...
Codeunit<Item Jnl. Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
  Raised in: Codeunit<Item Jnl. Line-Reserve>.PROCEDURE<VerifyChange>
    Code lines:
    ...
      ELSE
        HasError := TRUE;
    IF NewItemJnlLine."Line No." <> OldItemJnlLine."Line No." THEN
      HasError := TRUE;
    
    OnVerifyChangeOnBeforeHasError(NewItemJnlLine,OldItemJnlLine,HasError,ShowError); <=====================
    
    IF HasError THEN BEGIN
      FindReservEntry(NewItemJnlLine,TempReservEntry);
      TempReservEntry.ClearTrackingFilter;
    ...
Codeunit<Transfer Line-Reserve>.PROCEDURE<OnAfterCallItemTracking>
  Raised in: Codeunit<Transfer Line-Reserve>.PROCEDURE<CallItemTracking>
    Code lines:
    TrackingSpecification.InitFromTransLine(TransLine,AvalabilityDate,Direction);
    ItemTrackingLines.SetSourceSpec(TrackingSpecification,AvalabilityDate);
    ItemTrackingLines.SetInbound(TransLine.IsInbound);
    ItemTrackingLines.RUNMODAL;
    OnAfterCallItemTracking(TransLine); <=====================
  Raised in: Codeunit<Transfer Line-Reserve>.PROCEDURE<CallItemTracking2>
    Code lines:
    TrackingSpecification.InitFromTransLine(TransLine,AvailabilityDate,Direction);
    ItemTrackingLines.SetSourceSpec(TrackingSpecification,AvailabilityDate);
    ItemTrackingLines.SetSecondSourceQuantity(SecondSourceQuantityArray);
    ItemTrackingLines.RUNMODAL;
    OnAfterCallItemTracking(TransLine); <=====================
Codeunit<Transfer Line-Reserve>.PROCEDURE<OnTransferTransferToItemJnlLineTransferFields>
  Raised in: Codeunit<Transfer Line-Reserve>.PROCEDURE<TransferTransferToItemJnlLine>
    Code lines:
    ...
      REPEAT
        OldReservEntry.TestItemFields(TransLine."Item No.",TransLine."Variant Code",TransferLocation);
        OldReservEntry."New Serial No." := OldReservEntry."Serial No.";
        OldReservEntry."New Lot No." := OldReservEntry."Lot No.";
    
        OnTransferTransferToItemJnlLineTransferFields(OldReservEntry,TransLine,ItemJnlLine,TransferQty,Direction); <=====================
    
        TransferQty :=
          CreateReservEntry.TransferReservEntry(DATABASE::"Item Journal Line",
            ItemJnlLine."Entry Type",ItemJnlLine."Journal Template Name",
    ...
Codeunit<Transfer Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
  Raised in: Codeunit<Transfer Line-Reserve>.PROCEDURE<VerifyChange>
    Code lines:
    ...
    IF NewTransLine."Line No." <> OldTransLine."Line No." THEN BEGIN
      HasErrorInbnd := TRUE;
      HasErrorOutbnd := TRUE;
    END;
    
    OnVerifyChangeOnBeforeHasError(NewTransLine,OldTransLine,HasErrorInbnd,HasErrorOutbnd,ShowErrorInbnd,ShowErrorOutbnd); <=====================
    
    IF HasErrorOutbnd THEN BEGIN
      AutoTracking(OldTransLine,NewTransLine,TempReservEntry,0);
      AssignForPlanning(NewTransLine,0);
    ...
Codeunit<Prod. Order Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
  Raised in: Codeunit<Prod. Order Line-Reserve>.PROCEDURE<VerifyChange>
    Code lines:
    ...
      ELSE
        HasError := TRUE;
    IF NewProdOrderLine."Line No." <> OldProdOrderLine."Line No." THEN
      HasError := TRUE;
    
    OnVerifyChangeOnBeforeHasError(NewProdOrderLine,OldProdOrderLine,HasError,ShowError); <=====================
    
    IF HasError THEN
      IF (NewProdOrderLine."Item No." <> OldProdOrderLine."Item No.") OR
         FindReservEntry(NewProdOrderLine,TempReservEntry)
    ...
Codeunit<Prod. Order Comp.-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
  Raised in: Codeunit<Prod. Order Comp.-Reserve>.PROCEDURE<VerifyChange>
    Code lines:
    ...
      ELSE
        HasError := TRUE;
    IF NewProdOrderComp."Line No." <> OldProdOrderComp."Line No." THEN
      HasError := TRUE;
    
    OnVerifyChangeOnBeforeHasError(NewProdOrderComp,OldProdOrderComp,HasError,ShowError); <=====================
    
    IF HasError THEN
      IF (NewProdOrderComp."Item No." <> OldProdOrderComp."Item No.") OR
         FindReservEntry(NewProdOrderComp,TempReservEntry)
    ...
Codeunit<Plng. Component-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
  Raised in: Codeunit<Plng. Component-Reserve>.PROCEDURE<VerifyChange>
    Code lines:
    ...
        NewPlanningComponent.FIELDERROR("Variant Code",Text003);
    HasError := TRUE;
    IF NewPlanningComponent."Line No." <> OldPlanningComponent."Line No." THEN
      HasError := TRUE;
    
    OnVerifyChangeOnBeforeHasError(NewPlanningComponent,OldPlanningComponent,HasError,ShowError); <=====================
    
    IF HasError THEN
      IF (NewPlanningComponent."Item No." <> OldPlanningComponent."Item No.") OR
         FindReservEntry(NewPlanningComponent,TempReservEntry)
    ...
Codeunit<Service Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
  Raised in: Codeunit<Service Line-Reserve>.PROCEDURE<VerifyChange>
    Code lines:
    ...
      END;
    
    IF NewServiceLine."Line No." <> OldServiceLine."Line No." THEN
      HasError := TRUE;
    
    OnVerifyChangeOnBeforeHasError(NewServiceLine,OldServiceLine,HasError,ShowError); <=====================
    
    IF HasError THEN
      IF (NewServiceLine."No." <> OldServiceLine."No.") OR
         FindReservEntry(NewServiceLine,TempReservEntry)
    ...
Codeunit<Job Jnl. Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
  Raised in: Codeunit<Job Jnl. Line-Reserve>.PROCEDURE<VerifyChange>
    Code lines:
    ...
      HasError := TRUE;
    
    IF NewJobJnlLine."No." <> OldJobJnlLine."No." THEN
      HasError := TRUE;
    
    OnVerifyChangeOnBeforeHasError(NewJobJnlLine,OldJobJnlLine,HasError,ShowError); <=====================
    
    IF HasError THEN BEGIN
      FindReservEntry(NewJobJnlLine,TempReservEntry);
      TempReservEntry.ClearTrackingFilter;
    ...
Codeunit<Reservation Management>.PROCEDURE<OnAfterCalcReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<AutoReserveItemLedgEntry>
    Code lines:
    ...
            END ELSE BEGIN
              QtyThisLineBase := TotalAvailQty + QtyOnOutBound;
              QtyThisLine := ROUND(QtyThisLineBase,0.00001);
            END;
    
          OnAfterCalcReservation(CalcReservEntry,CalcItemLedgEntry,ReservSummEntryNo,QtyThisLine,QtyThisLineBase); <=====================
    
          CallTrackingSpecification.InitTrackingSpecification(
            DATABASE::"Item Ledger Entry",0,'','',0,CalcItemLedgEntry."Entry No.",
            CalcItemLedgEntry."Variant Code",CalcItemLedgEntry."Location Code",
    ...
Codeunit<Reservation Management>.PROCEDURE<OnAutoReserveItemLedgEntryOnFindFirstItemLedgEntry>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<AutoReserveItemLedgEntry>
    Code lines:
    ...
      AllocationsChanged :=
        LateBindingMgt.ReleaseForReservation3(CalcItemLedgEntry,CalcReservEntry,RemainingQtyToReserveBase);
    
    IsFound := FALSE;
    IsHandled := FALSE;
    OnAutoReserveItemLedgEntryOnFindFirstItemLedgEntry(CalcReservEntry,CalcItemLedgEntry,InvSearch,IsHandled,IsFound); <=====================
    IF NOT IsHandled THEN
      IsFound := CalcItemLedgEntry.FIND(InvSearch);
    IF IsFound THEN BEGIN
      IF Location."Bin Mandatory" OR Location."Require Pick" THEN BEGIN
    ...
Codeunit<Reservation Management>.PROCEDURE<OnAutoReserveItemLedgEntryOnFindNextItemLedgEntry>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<AutoReserveItemLedgEntry>
    Code lines:
    ...
              TotalAvailQty := TotalAvailQty - QtyThisLineBase;
        END;
    
        IsHandled := FALSE;
        IsFound := FALSE;
        OnAutoReserveItemLedgEntryOnFindNextItemLedgEntry(CalcReservEntry,CalcItemLedgEntry,InvSearch,IsHandled,IsFound); <=====================
        IF NOT IsHandled THEN
          IsFound := CalcItemLedgEntry.NEXT(InvNextStep) <> 0;
      UNTIL NOT IsFound OR (RemainingQtyToReserveBase = 0);
    END;
Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveAssemblyHeader>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<AutoReserveAssemblyHeader>
    Code lines:
    IsReserved := FALSE;
    OnBeforeAutoReserveAssemblyHeader( <=====================
      ReservSummEntryNo,RemainingQtyToReserve,RemainingQtyToReserve,Description,AvailabilityDate,IsReserved);
    IF IsReserved THEN
      EXIT;
    
    InitFilter(ReservSummEntryNo,AvailabilityDate);
    IF CalcAssemblyHeader.FIND(Search) THEN
      REPEAT
        CalcAssemblyHeader.CALCFIELDS("Reserved Qty. (Base)");
    ...
Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveAssemblyLine>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<AutoReserveAssemblyLine>
    Code lines:
    IsReserved := FALSE;
    OnBeforeAutoReserveAssemblyLine( <=====================
      ReservSummEntryNo,RemainingQtyToReserve,RemainingQtyToReserve,Description,AvailabilityDate,IsReserved);
    IF IsReserved THEN
      EXIT;
    
    InitFilter(ReservSummEntryNo,AvailabilityDate);
    IF CalcAssemblyLine.FIND(Search) THEN
      REPEAT
        CalcAssemblyLine.CALCFIELDS("Reserved Qty. (Base)");
    ...
Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveItemLedgEntry>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<AutoReserveItemLedgEntry>
    Code lines:
    IsReserved := FALSE;
    OnBeforeAutoReserveItemLedgEntry( <=====================
      ReservSummEntryNo,RemainingQtyToReserve,RemainingQtyToReserve,Description,AvailabilityDate,IsReserved,CalcReservEntry);
    IF IsReserved THEN
      EXIT;
    
    IF NOT Location.GET(CalcReservEntry."Location Code") THEN
      CLEAR(Location);
    
    InitFilter(ReservSummEntryNo,AvailabilityDate);
    ...
Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveJobPlanningLine>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<AutoReserveJobPlanningLine>
    Code lines:
    IsReserved := FALSE;
    OnBeforeAutoReserveJobPlanningLine( <=====================
      ReservSummEntryNo,RemainingQtyToReserve,RemainingQtyToReserve,Description,AvailabilityDate,IsReserved);
    IF IsReserved THEN
      EXIT;
    
    InitFilter(ReservSummEntryNo,AvailabilityDate);
    IF CalcJobPlanningLine.FIND(Search) THEN
      REPEAT
        CalcJobPlanningLine.CALCFIELDS("Reserved Qty. (Base)");
    ...
Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveProdOrderComp>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<AutoReserveProdOrderComp>
    Code lines:
    IsReserved := FALSE;
    OnBeforeAutoReserveProdOrderComp( <=====================
      ReservSummEntryNo,RemainingQtyToReserve,RemainingQtyToReserve,Description,AvailabilityDate,IsReserved);
    IF IsReserved THEN
      EXIT;
    
    InitFilter(ReservSummEntryNo,AvailabilityDate);
    IF CalcProdOrderComp.FIND(Search) THEN
      REPEAT
        CalcProdOrderComp.CALCFIELDS("Reserved Qty. (Base)");
    ...
Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveProdOrderLine>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<AutoReserveProdOrderLine>
    Code lines:
    IsReserved := FALSE;
    OnBeforeAutoReserveProdOrderLine( <=====================
      ReservSummEntryNo,RemainingQtyToReserve,RemainingQtyToReserve,Description,AvailabilityDate,IsReserved);
    IF IsReserved THEN
      EXIT;
    
    InitFilter(ReservSummEntryNo,AvailabilityDate);
    IF CalcProdOrderLine.FIND(Search) THEN
      REPEAT
        CalcProdOrderLine.CALCFIELDS("Reserved Qty. (Base)");
    ...
Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReservePurchLine>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<AutoReservePurchLine>
    Code lines:
    IsReserved := FALSE;
    OnBeforeAutoReservePurchLine( <=====================
      ReservSummEntryNo,RemainingQtyToReserve,RemainingQtyToReserve,Description,AvailabilityDate,IsReserved);
    IF IsReserved THEN
      EXIT;
    
    InitFilter(ReservSummEntryNo,AvailabilityDate);
    IF CalcPurchLine.FIND(Search) THEN
      REPEAT
        CalcPurchLine.CALCFIELDS("Reserved Qty. (Base)");
    ...
Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveSalesLine>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<AutoReserveSalesLine>
    Code lines:
    IsReserved := FALSE;
    OnBeforeAutoReserveSalesLine( <=====================
      ReservSummEntryNo,RemainingQtyToReserve,RemainingQtyToReserve,Description,AvailabilityDate,IsReserved);
    IF IsReserved THEN
      EXIT;
    
    InitFilter(ReservSummEntryNo,AvailabilityDate);
    IF CalcSalesLine.FIND(Search) THEN
      REPEAT
        CalcSalesLine.CALCFIELDS("Reserved Qty. (Base)");
    ...
Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveServLine>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<AutoReserveServLine>
    Code lines:
    IsReserved := FALSE;
    OnBeforeAutoReserveServLine( <=====================
      ReservSummEntryNo,RemainingQtyToReserve,RemainingQtyToReserve,Description,AvailabilityDate,IsReserved);
    IF IsReserved THEN
      EXIT;
    
    InitFilter(ReservSummEntryNo,AvailabilityDate);
    IF CalcServiceLine.FIND(Search) THEN
      REPEAT
        CalcServiceLine.CALCFIELDS("Reserved Qty. (Base)");
    ...
Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveTransLine>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<AutoReserveTransLine>
    Code lines:
    IsReserved := FALSE;
    OnBeforeAutoReserveTransLine( <=====================
      ReservSummEntryNo,RemainingQtyToReserve,RemainingQtyToReserve,Description,AvailabilityDate,IsReserved);
    IF IsReserved THEN
      EXIT;
    
    InitFilter(ReservSummEntryNo,AvailabilityDate);
    IF CalcTransLine.FIND(Search) THEN
      REPEAT
        CASE ReservSummEntryNo OF
    ...
Codeunit<Reservation Management>.PROCEDURE<OnBeforeCreateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<CreateReservation>
    Code lines:
    CalcReservEntry.TESTFIELD("Source Type");
    
    OnBeforeCreateReservation(TrackingSpecification,CalcReservEntry,CalcItemLedgEntry); <=====================
    
    CASE CalcReservEntry."Source Type" OF
      DATABASE::"Sales Line":
        BEGIN
          ReserveSalesLine.CreateReservationSetFrom(TrackingSpecification);
          ReserveSalesLine.CreateReservation(
            ForSalesLine,Description,ExpectedDate,Quantity,QuantityBase,
    ...
Codeunit<Reservation Management>.PROCEDURE<OnBeforeUpdateItemLedgEntryStats>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<UpdateItemLedgEntryStats>
    Code lines:
    OnBeforeUpdateItemLedgEntryStats(CalcReservEntry); <=====================
    IF CalcItemLedgEntry.READPERMISSION THEN BEGIN
      InitFilter(ValueArray[i],AvailabilityDate);
      IF CalcItemLedgEntry.FINDSET THEN
        REPEAT
          CalcItemLedgEntry.CALCFIELDS("Reserved Quantity");
          OnUpdateItemLedgEntryStatsUpdateTotals(CalcReservEntry,CalcItemLedgEntry,TotalAvailQty,QtyOnOutBound);
          ReservEntrySummary."Total Reserved Quantity" += CalcItemLedgEntry."Reserved Quantity";
          CalcSumValue += CalcItemLedgEntry."Remaining Quantity";
        UNTIL CalcItemLedgEntry.NEXT = 0;
    ...
Codeunit<Reservation Management>.PROCEDURE<OnSetAssemblyHeaderOnBeforeUpdateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<SetAssemblyHeader>
    Code lines:
    ...
    CalcReservEntry.SetItemData(
      NewAssemblyHeader."Item No.",NewAssemblyHeader.Description,NewAssemblyHeader."Location Code",NewAssemblyHeader."Variant Code",
      NewAssemblyHeader."Qty. per Unit of Measure");
    CalcReservEntry."Expected Receipt Date" := NewAssemblyHeader."Due Date";
    CalcReservEntry."Shipment Date" := NewAssemblyHeader."Due Date";
    OnSetAssemblyHeaderOnBeforeUpdateReservation(CalcReservEntry,NewAssemblyHeader); <=====================
    UpdateReservation((CreateReservEntry.SignFactor(CalcReservEntry) * ForAssemblyHeader."Remaining Quantity (Base)") < 0);
Codeunit<Reservation Management>.PROCEDURE<OnSetAssemblyLineOnBeforeUpdateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<SetAssemblyLine>
    Code lines:
    ...
      NewAssemblyLine."Qty. per Unit of Measure");
    IF NewAssemblyLine.Type <> NewAssemblyLine.Type::Item THEN
      CalcReservEntry."Item No." := '';
    CalcReservEntry."Expected Receipt Date" := NewAssemblyLine."Due Date";
    CalcReservEntry."Shipment Date" := NewAssemblyLine."Due Date";
    OnSetAssemblyLineOnBeforeUpdateReservation(CalcReservEntry,NewAssemblyLine); <=====================
    UpdateReservation((CreateReservEntry.SignFactor(CalcReservEntry) * ForAssemblyLine."Remaining Quantity (Base)") < 0);
Codeunit<Reservation Management>.PROCEDURE<OnSetItemJnlLineOnBeforeUpdateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<SetItemJnlLine>
    Code lines:
    ...
    CalcReservEntry.SetItemData(
      NewItemJnlLine."Item No.",NewItemJnlLine.Description,NewItemJnlLine."Location Code",NewItemJnlLine."Variant Code",
      NewItemJnlLine."Qty. per Unit of Measure");
    CalcReservEntry."Expected Receipt Date" := NewItemJnlLine."Posting Date";
    CalcReservEntry."Shipment Date" := NewItemJnlLine."Posting Date";
    OnSetItemJnlLineOnBeforeUpdateReservation(CalcReservEntry,NewItemJnlLine); <=====================
    UpdateReservation((CreateReservEntry.SignFactor(CalcReservEntry) * ForItemJnlLine."Quantity (Base)") < 0);
Codeunit<Reservation Management>.PROCEDURE<OnSetItemLedgEntryOnBeforeUpdateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<SetItemLedgEntry>
    Code lines:
    ...
      CalcReservEntry."Shipment Date" := DMY2DATE(31,12,9999);
    END ELSE BEGIN
      CalcReservEntry."Expected Receipt Date" := 0D;
      CalcReservEntry."Shipment Date" := 0D;
    END;
    OnSetItemLedgEntryOnBeforeUpdateReservation(CalcReservEntry,NewItemLedgEntry); <=====================
    UpdateReservation(Positive);
Codeunit<Reservation Management>.PROCEDURE<OnSetJobJnlLineOnBeforeUpdateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<SetJobJnlLine>
    Code lines:
    ...
    CalcReservEntry.SetItemData(
      NewJobJnlLine."No.",NewJobJnlLine.Description,NewJobJnlLine."Location Code",NewJobJnlLine."Variant Code",
      NewJobJnlLine."Qty. per Unit of Measure");
    CalcReservEntry."Expected Receipt Date" := NewJobJnlLine."Posting Date";
    CalcReservEntry."Shipment Date" := NewJobJnlLine."Posting Date";
    OnSetJobJnlLineOnBeforeUpdateReservation(CalcReservEntry,NewJobJnlLine); <=====================
    UpdateReservation((CreateReservEntry.SignFactor(CalcReservEntry) * ForJobJnlLine."Quantity (Base)") < 0);
Codeunit<Reservation Management>.PROCEDURE<OnSetJobPlanningLineOnBeforeUpdateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<SetJobPlanningLine>
    Code lines:
    ...
      NewJobPlanningLine."Qty. per Unit of Measure");
    IF NewJobPlanningLine.Type <> NewJobPlanningLine.Type::Item THEN
      CalcReservEntry."Item No." := '';
    CalcReservEntry."Expected Receipt Date" := NewJobPlanningLine."Planning Date";
    CalcReservEntry."Shipment Date" := NewJobPlanningLine."Planning Date";
    OnSetJobPlanningLineOnBeforeUpdateReservation(CalcReservEntry,NewJobPlanningLine); <=====================
    UpdateReservation((CreateReservEntry.SignFactor(CalcReservEntry) * ForJobPlanningLine."Remaining Qty. (Base)") <= 0);
Codeunit<Reservation Management>.PROCEDURE<OnSetPlanningCompOnBeforeUpdateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<SetPlanningComponent>
    Code lines:
    ...
    CalcReservEntry.SetItemData(
      NewPlanningComponent."Item No.",NewPlanningComponent.Description,NewPlanningComponent."Location Code",
      NewPlanningComponent."Variant Code",NewPlanningComponent."Qty. per Unit of Measure");
    CalcReservEntry."Expected Receipt Date" := NewPlanningComponent."Due Date";
    CalcReservEntry."Shipment Date" := NewPlanningComponent."Due Date";
    OnSetPlanningCompOnBeforeUpdateReservation(CalcReservEntry,NewPlanningComponent); <=====================
    UpdateReservation(ForPlanningComponent."Net Quantity (Base)" > 0);
Codeunit<Reservation Management>.PROCEDURE<OnSetProdOrderCompOnBeforeUpdateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<SetProdOrderComponent>
    Code lines:
    ...
    CalcReservEntry.SetItemData(
      NewProdOrderComp."Item No.",NewProdOrderComp.Description,NewProdOrderComp."Location Code",NewProdOrderComp."Variant Code",
      NewProdOrderComp."Qty. per Unit of Measure");
    CalcReservEntry."Expected Receipt Date" := NewProdOrderComp."Due Date";
    CalcReservEntry."Shipment Date" := NewProdOrderComp."Due Date";
    OnSetProdOrderCompOnBeforeUpdateReservation(CalcReservEntry,NewProdOrderComp); <=====================
    UpdateReservation(ForProdOrderComp."Remaining Qty. (Base)" > 0);
Codeunit<Reservation Management>.PROCEDURE<OnSetProdOrderLineOnBeforeUpdateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<SetProdOrderLine>
    Code lines:
    ...
      NewProdOrderLine."Item No.",NewProdOrderLine.Description,NewProdOrderLine."Location Code",NewProdOrderLine."Variant Code",
      NewProdOrderLine."Qty. per Unit of Measure");
    CalcReservEntry."Expected Receipt Date" := NewProdOrderLine."Due Date";
    CalcReservEntry."Shipment Date" := NewProdOrderLine."Due Date";
    CalcReservEntry."Planning Flexibility" := NewProdOrderLine."Planning Flexibility";
    OnSetProdOrderLineOnBeforeUpdateReservation(CalcReservEntry,NewProdOrderLine); <=====================
    UpdateReservation(ForProdOrderLine."Remaining Qty. (Base)" < 0);
Codeunit<Reservation Management>.PROCEDURE<OnSetPurchLineOnBeforeUpdateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<SetPurchLine>
    Code lines:
    ...
    IF NewPurchLine.Type <> NewPurchLine.Type::Item THEN
      CalcReservEntry."Item No." := '';
    CalcReservEntry."Expected Receipt Date" := NewPurchLine."Expected Receipt Date";
    CalcReservEntry."Shipment Date" := NewPurchLine."Expected Receipt Date";
    CalcReservEntry."Planning Flexibility" := NewPurchLine."Planning Flexibility";
    OnSetPurchLineOnBeforeUpdateReservation(CalcReservEntry,NewPurchLine); <=====================
    UpdateReservation((CreateReservEntry.SignFactor(CalcReservEntry) * ForPurchLine."Outstanding Qty. (Base)") < 0);
Codeunit<Reservation Management>.PROCEDURE<OnSetReqLineOnBeforeUpdateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<SetReqLine>
    Code lines:
    ...
    IF NewReqLine.Type <> NewReqLine.Type::Item THEN
      CalcReservEntry."Item No." := '';
    CalcReservEntry."Expected Receipt Date" := NewReqLine."Due Date";
    CalcReservEntry."Shipment Date" := NewReqLine."Due Date";
    CalcReservEntry."Planning Flexibility" := NewReqLine."Planning Flexibility";
    OnSetReqLineOnBeforeUpdateReservation(CalcReservEntry,NewReqLine); <=====================
    UpdateReservation(ForReqLine."Net Quantity (Base)" < 0);
Codeunit<Reservation Management>.PROCEDURE<OnSetSalesLineOnBeforeUpdateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<SetSalesLine>
    Code lines:
    ...
      NewSalesLine."Qty. per Unit of Measure");
    IF NewSalesLine.Type <> NewSalesLine.Type::Item THEN
      CalcReservEntry."Item No." := '';
    CalcReservEntry."Expected Receipt Date" := NewSalesLine."Shipment Date";
    CalcReservEntry."Shipment Date" := NewSalesLine."Shipment Date";
    OnSetSalesLineOnBeforeUpdateReservation(CalcReservEntry,NewSalesLine); <=====================
    
    UpdateReservation((CreateReservEntry.SignFactor(CalcReservEntry) * ForSalesLine."Outstanding Qty. (Base)") <= 0);
Codeunit<Reservation Management>.PROCEDURE<OnSetServLineOnBeforeUpdateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<SetServLine>
    Code lines:
    ...
      NewServiceLine."Qty. per Unit of Measure");
    IF NewServiceLine.Type <> NewServiceLine.Type::Item THEN
      CalcReservEntry."Item No." := '';
    CalcReservEntry."Expected Receipt Date" := NewServiceLine."Needed by Date";
    CalcReservEntry."Shipment Date" := NewServiceLine."Needed by Date";
    OnSetServLineOnBeforeUpdateReservation(CalcReservEntry,NewServiceLine); <=====================
    UpdateReservation((CreateReservEntry.SignFactor(CalcReservEntry) * ForServiceLine."Outstanding Qty. (Base)") <= 0);
Codeunit<Reservation Management>.PROCEDURE<OnSetTransLineOnBeforeUpdateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<SetTransferLine>
    Code lines:
    ...
            NewTransLine."Item No.",NewTransLine.Description,NewTransLine."Transfer-to Code",NewTransLine."Variant Code",
            NewTransLine."Qty. per Unit of Measure");
          CalcReservEntry."Expected Receipt Date" := NewTransLine."Receipt Date";
        END;
    END;
    OnSetTransLineOnBeforeUpdateReservation(CalcReservEntry,NewTransLine); <=====================
    UpdateReservation((CreateReservEntry.SignFactor(CalcReservEntry) * ForTransLine."Outstanding Qty. (Base)") <= 0);
Codeunit<Reservation Management>.PROCEDURE<OnUpdateItemLedgEntryStatsUpdateTotals>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<UpdateItemLedgEntryStats>
    Code lines:
    ...
    IF CalcItemLedgEntry.READPERMISSION THEN BEGIN
      InitFilter(ValueArray[i],AvailabilityDate);
      IF CalcItemLedgEntry.FINDSET THEN
        REPEAT
          CalcItemLedgEntry.CALCFIELDS("Reserved Quantity");
          OnUpdateItemLedgEntryStatsUpdateTotals(CalcReservEntry,CalcItemLedgEntry,TotalAvailQty,QtyOnOutBound); <=====================
          ReservEntrySummary."Total Reserved Quantity" += CalcItemLedgEntry."Reserved Quantity";
          CalcSumValue += CalcItemLedgEntry."Remaining Quantity";
        UNTIL CalcItemLedgEntry.NEXT = 0;
      IF HandleItemTracking2 THEN
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterDemandToInvProfile>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<DemandToInvtProfile>
    Code lines:
    ...
    TransAsmLineToProfile(InventoryProfile,Item);
    TransPlanningCompToProfile(InventoryProfile,Item);
    TransTransReqLineToProfile(InventoryProfile,Item,ToDate);
    TransShptTransLineToProfile(InventoryProfile,Item);
    
    OnAfterDemandToInvProfile(InventoryProfile,Item,TempItemTrkgEntry,LineNo); <=====================
    
    Item.COPY(CopyOfItem);
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterInsertSafetyStockDemands>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<InsertSafetyStockDemands>
    Code lines:
    ...
        DemandInvtProfile.INSERT;
      UNTIL TempSafetyStockInvtProfile.NEXT = 0;
    
    DemandInvtProfile.COPY(xDemandInvtProfile);
    
    OnAfterInsertSafetyStockDemands( <=====================
      DemandInvtProfile,xDemandInvtProfile,TempSafetyStockInvtProfile,TempSKU,PlanningStartDate,PlanToDate);
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterPostInvChgReminder>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<PostInvChgReminder>
    Code lines:
    ...
      InvChangeReminder."Remaining Quantity (Base)" += InvProfile."Safety Stock Quantity";
    END;
    
    IF NOT InvChangeReminder.INSERT THEN
      InvChangeReminder.MODIFY;
    OnAfterPostInvChgReminder(InvChangeReminder,InvProfile,PostOnlyMinimum); <=====================
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterPrePlanDateSupplyProc>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<PlanItem>
    Code lines:
    ...
            LastAvailableInventory += SupplyInvtProfile."Untracked Quantity";
            SupplyInvtProfile."Planning Flexibility" := SupplyInvtProfile."Planning Flexibility"::None;
            SupplyInvtProfile.MODIFY;
            SupplyExists := SupplyInvtProfile.NEXT <> 0;
          END;
          OnAfterPrePlanDateSupplyProc(SupplyInvtProfile,DemandInvtProfile,SupplyExists,DemandExists); <=====================
    
          IF LastAvailableInventory < 0 THEN BEGIN // Emergency order
            // Insert Supply
            InitSupply(SupplyInvtProfile,-LastAvailableInventory,PlanningStartDate - 1);
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterSetOrderPriority>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<SetPriority>
    Code lines:
    ...
            "Order Priority" := 600;
          DATABASE::"Production Forecast Entry":
            "Order Priority" := 800;
        END;
    
      OnAfterSetOrderPriority(InvProfile); <=====================
    
      TESTFIELD("Order Priority");
    
      // Inflexible supply must be handled before all other supply and is therefore grouped
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterSupplyToInvProfile>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<SupplytoInvProfile>
    Code lines:
    ...
    TransPurchLineToProfile(InventoryProfile,Item,ToDate);
    TransProdOrderToProfile(InventoryProfile,Item,ToDate);
    TransAsmHeaderToProfile(InventoryProfile,Item,ToDate);
    TransRcptTransLineToProfile(InventoryProfile,Item,ToDate);
    
    OnAfterSupplyToInvProfile(InventoryProfile,Item,ToDate,TempItemTrkgEntry,LineNo); <=====================
    
    Item.COPY(CopyOfItem);
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterTransToChildInvProfile>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<UnfoldItemTracking>
    Code lines:
    ...
            ChildInvProfile."Tracking Reference" := ParentInvProfile."Line No.";
            ChildInvProfile."Lot No." := TempItemTrkgEntry."Lot No.";
            ChildInvProfile."Serial No." := TempItemTrkgEntry."Serial No.";
            ChildInvProfile."Expiration Date" := TempItemTrkgEntry."Expiration Date";
            ChildInvProfile.TransferQtyFromItemTrgkEntry(TempItemTrkgEntry);
            OnAfterTransToChildInvProfile(TempItemTrkgEntry,ChildInvProfile); <=====================
            ChildInvProfile.INSERT;
            ParentInvProfile.ReduceQtyByItemTracking(ChildInvProfile);
            ParentInvProfile.MODIFY;
          UNTIL TempItemTrkgEntry.NEXT = 0;
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforeBlanketOrderConsumpFind>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<BlanketOrderConsump>
    Code lines:
    ...
      SETRANGE("No.",Item."No.");
      Item.COPYFILTER("Location Filter","Location Code");
      Item.COPYFILTER("Variant Filter","Variant Code");
      SETFILTER("Outstanding Qty. (Base)",'<>0');
      SETFILTER("Shipment Date",'>%1&<=%2',0D,ToDate);
      OnBeforeBlanketOrderConsumpFind(BlanketSalesLine); <=====================
      IF FIND('-') THEN
        REPEAT
          QtyReleased += CalcInventoryProfileRemainingQty(InventoryProfile,"Document No.");
          SETRANGE("Document No.","Document No.");
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforeCalculatePlanFromWorksheet>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<CalculatePlanFromWorksheet>
    Code lines:
    OnBeforeCalculatePlanFromWorksheet( <=====================
      Item,ManufacturingSetup2,TemplateName,WorksheetName,OrderDate,ToDate,MRPPlanning,RespectPlanningParm);
    
    PlanToDate := ToDate;
    InitVariables(InventoryProfile[1],ManufacturingSetup2,Item,TemplateName,WorksheetName,MRPPlanning);
    DemandToInvtProfile(InventoryProfile[1],Item,ToDate);
    OrderDate := ForecastConsumption(InventoryProfile[1],Item,OrderDate,ToDate);
    BlanketOrderConsump(InventoryProfile[1],Item,ToDate);
    SupplytoInvProfile(InventoryProfile[1],Item,ToDate);
    UnfoldItemTracking(InventoryProfile[1],InventoryProfile[2]);
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforeCheckScheduleOut>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<CheckScheduleOut>
    Code lines:
    OnBeforeCheckScheduleOut(SupplyInvtProfile,TempSKU,BucketSize); <=====================
    
    IF SupplyInvtProfile."Planning Flexibility" <> SupplyInvtProfile."Planning Flexibility"::Unlimited THEN
      EXIT(FALSE);
    
    IF (TargetDate - SupplyInvtProfile."Due Date") <= DampenersDays THEN
      PossibleDate := SupplyInvtProfile."Due Date"
    ELSE
      IF NOT LimitedHorizon OR
         (SupplyInvtProfile."Planning Level Code" > 0)
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforeDemandInvtProfileInsert>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<CreateDemand>
    Code lines:
    ...
    DemandInvtProfile."Order Relation" := OrderRelation;
    DemandInvtProfile."Source Type" := 0;
    DemandInvtProfile."Untracked Quantity" := NeededQuantity;
    DemandInvtProfile."Due Date" := NeededDueDate;
    DemandInvtProfile."Planning Flexibility" := DemandInvtProfile."Planning Flexibility"::None;
    OnBeforeDemandInvtProfileInsert(DemandInvtProfile,SKU); <=====================
    DemandInvtProfile.INSERT;
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforeMatchAttributesDemandApplicationLoop>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<MatchAttributes>
    Code lines:
    ...
        THEN
          SupplyInvtProfile.SETRANGE("Source Prod. Order Line",DemandInvtProfile."Source Prod. Order Line");
    
        SupplyInvtProfile.SetTrackingFilter(DemandInvtProfile);
        SupplyExists := SupplyInvtProfile.FINDFIRST;
        OnBeforeMatchAttributesDemandApplicationLoop(SupplyInvtProfile,DemandInvtProfile,SupplyExists); <=====================
        WHILE (DemandInvtProfile."Untracked Quantity" > 0) AND
              (NOT ApplyUntrackedQuantityToItemInventory(SupplyExists,ItemInventoryExists))
        DO BEGIN
          OnStartOfMatchAttributesDemandApplicationLoop(SupplyInvtProfile,DemandInvtProfile,SupplyExists);
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforePlanStepSettingOnStartOver>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<PlanItem>
    Code lines:
    ...
                BEGIN
                  IF DemandExists AND (DemandInvtProfile."Source Type" = DATABASE::"Transfer Line") THEN
                    WHILE CancelTransfer(SupplyInvtProfile,DemandInvtProfile,DemandExists) DO
                      DemandExists := DemandInvtProfile.NEXT <> 0;
    
                  OnBeforePlanStepSettingOnStartOver(SupplyInvtProfile,DemandInvtProfile,SupplyExists,DemandExists); <=====================
    
                  IF DemandExists THEN
                    IF DemandInvtProfile."Untracked Quantity" = 0 THEN
                      NextState := NextState::CloseDemand
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforePostInvChgReminder>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<PostInvChgReminder>
    Code lines:
    // Update information on changes in the Projected Inventory over time
    // Only the quantity that is known for sure should be posted
    
    OnBeforePostInvChgReminder(InvChangeReminder,InvProfile,PostOnlyMinimum); <=====================
    InvChangeReminder := InvProfile;
    
    IF PostOnlyMinimum THEN BEGIN
      InvChangeReminder."Remaining Quantity (Base)" -= InvProfile."Untracked Quantity";
      InvChangeReminder."Remaining Quantity (Base)" += InvProfile."Safety Stock Quantity";
    END;
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforePrePlanDateApplicationLoop>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<PlanItemCalcInitialInventory>
    Code lines:
    DemandInvtProfile.SETRANGE("Due Date",0D,PlanningStartDate - 1);
    SupplyInvtProfile.SETRANGE("Due Date",0D,PlanningStartDate - 1);
    DemandExists := DemandInvtProfile.FINDSET;
    SupplyExists := SupplyInvtProfile.FINDSET;
    OnBeforePrePlanDateApplicationLoop(SupplyInvtProfile,DemandInvtProfile,SupplyExists,DemandExists); <=====================
    WHILE DemandExists AND SupplyExists DO BEGIN
      OnStartOfPrePlanDateApplicationLoop(SupplyInvtProfile,DemandInvtProfile,SupplyExists,DemandExists);
      IF DemandInvtProfile."Untracked Quantity" > SupplyInvtProfile."Untracked Quantity" THEN BEGIN
        LastProjectedInventory += SupplyInvtProfile."Remaining Quantity (Base)";
        DemandInvtProfile."Untracked Quantity" -= SupplyInvtProfile."Untracked Quantity";
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforePrePlanDateDemandProc>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<PlanItem>
    Code lines:
    ...
    
          // Calculate initial inventory
          PlanItemCalcInitialInventory(
            DemandInvtProfile,SupplyInvtProfile,PlanningStartDate,DemandExists,SupplyExists,LastProjectedInventory);
    
          OnBeforePrePlanDateDemandProc(SupplyInvtProfile,DemandInvtProfile,SupplyExists,DemandExists); <=====================
          WHILE DemandExists DO BEGIN
            LastProjectedInventory -= DemandInvtProfile."Remaining Quantity (Base)";
            LastAvailableInventory -= DemandInvtProfile."Untracked Quantity";
            DemandInvtProfile."Untracked Quantity" := 0;
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforePrePlanDateSupplyProc>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<PlanItem>
    Code lines:
    ...
            DemandInvtProfile."Untracked Quantity" := 0;
            DemandInvtProfile.MODIFY;
            DemandExists := DemandInvtProfile.NEXT <> 0;
          END;
    
          OnBeforePrePlanDateSupplyProc(SupplyInvtProfile,DemandInvtProfile,SupplyExists,DemandExists); <=====================
          WHILE SupplyExists DO BEGIN
            LastProjectedInventory += SupplyInvtProfile."Remaining Quantity (Base)";
            LastAvailableInventory += SupplyInvtProfile."Untracked Quantity";
            SupplyInvtProfile."Planning Flexibility" := SupplyInvtProfile."Planning Flexibility"::None;
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnEndMatchAttributesDemandApplicationLoop>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<MatchAttributes>
    Code lines:
    ...
    
          IF SupplyInvtProfile."Untracked Quantity" < DemandInvtProfile."Untracked Quantity" THEN
            SupplyExists := CloseSupply(DemandInvtProfile,SupplyInvtProfile)
          ELSE
            CloseDemand(DemandInvtProfile,SupplyInvtProfile);
          OnEndMatchAttributesDemandApplicationLoop(SupplyInvtProfile,DemandInvtProfile,SupplyExists); <=====================
        END;
      UNTIL DemandInvtProfile.NEXT = 0;
    
    // Neutralize or generalize excess Order-To-Order Supply
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnEndOfPrePlanDateApplicationLoop>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<PlanItemCalcInitialInventory>
    Code lines:
    ...
        DemandInvtProfile.MODIFY;
        DemandExists := DemandInvtProfile.NEXT <> 0;
        IF NOT DemandExists THEN
          SupplyInvtProfile.MODIFY;
      END;
      OnEndOfPrePlanDateApplicationLoop(SupplyInvtProfile,DemandInvtProfile,SupplyExists,DemandExists); <=====================
    END;
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnFindCombinationAfterAssignTempSKU>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<FindCombination>
    Code lines:
    ...
    WHILE DemandBool OR SupplyBool DO BEGIN
      IF  DemandBool THEN BEGIN
        TempSKU."Item No." := DemandInvtProfile."Item No.";
        TempSKU."Variant Code" := DemandInvtProfile."Variant Code";
        TempSKU."Location Code" := DemandInvtProfile."Location Code";
        OnFindCombinationAfterAssignTempSKU(TempSKU,DemandInvtProfile); <=====================
      END ELSE BEGIN
        TempSKU."Item No." := SupplyInvtProfile."Item No.";
        TempSKU."Variant Code" := SupplyInvtProfile."Variant Code";
        TempSKU."Location Code" := SupplyInvtProfile."Location Code";
    ...
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<FindCombination>
    Code lines:
    ...
    WHILE DemandBool OR SupplyBool DO BEGIN
      IF  DemandBool THEN BEGIN
        TempSKU."Item No." := DemandInvtProfile."Item No.";
        TempSKU."Variant Code" := DemandInvtProfile."Variant Code";
        TempSKU."Location Code" := DemandInvtProfile."Location Code";
        OnFindCombinationAfterAssignTempSKU(TempSKU,DemandInvtProfile); <=====================
      END ELSE BEGIN
        TempSKU."Item No." := SupplyInvtProfile."Item No.";
        TempSKU."Variant Code" := SupplyInvtProfile."Variant Code";
        TempSKU."Location Code" := SupplyInvtProfile."Location Code";
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnStartOfMatchAttributesDemandApplicationLoop>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<MatchAttributes>
    Code lines:
    ...
        SupplyExists := SupplyInvtProfile.FINDFIRST;
        OnBeforeMatchAttributesDemandApplicationLoop(SupplyInvtProfile,DemandInvtProfile,SupplyExists);
        WHILE (DemandInvtProfile."Untracked Quantity" > 0) AND
              (NOT ApplyUntrackedQuantityToItemInventory(SupplyExists,ItemInventoryExists))
        DO BEGIN
          OnStartOfMatchAttributesDemandApplicationLoop(SupplyInvtProfile,DemandInvtProfile,SupplyExists); <=====================
          IF SupplyExists AND (DemandInvtProfile.Binding = DemandInvtProfile.Binding::"Order-to-Order") THEN BEGIN
            NewSupplyDate := SupplyInvtProfile."Due Date";
            CanBeRescheduled :=
              (SupplyInvtProfile."Fixed Date" = 0D) AND
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnStartOfPrePlanDateApplicationLoop>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<PlanItemCalcInitialInventory>
    Code lines:
    ...
    SupplyInvtProfile.SETRANGE("Due Date",0D,PlanningStartDate - 1);
    DemandExists := DemandInvtProfile.FINDSET;
    SupplyExists := SupplyInvtProfile.FINDSET;
    OnBeforePrePlanDateApplicationLoop(SupplyInvtProfile,DemandInvtProfile,SupplyExists,DemandExists);
    WHILE DemandExists AND SupplyExists DO BEGIN
      OnStartOfPrePlanDateApplicationLoop(SupplyInvtProfile,DemandInvtProfile,SupplyExists,DemandExists); <=====================
      IF DemandInvtProfile."Untracked Quantity" > SupplyInvtProfile."Untracked Quantity" THEN BEGIN
        LastProjectedInventory += SupplyInvtProfile."Remaining Quantity (Base)";
        DemandInvtProfile."Untracked Quantity" -= SupplyInvtProfile."Untracked Quantity";
        FrozenZoneTrack(SupplyInvtProfile,DemandInvtProfile);
    ...
Codeunit<AvailabilityManagement>.PROCEDURE<OnAfterCaseCalcCapableToPromise>
  Raised in: Codeunit<AvailabilityManagement>.PROCEDURE<CalcCapableToPromise>
    Code lines:
    ...
                  VALIDATE("Earliest Shipment Date",FeasibleDate)
                ELSE
                  VALIDATE("Earliest Shipment Date","Original Shipment Date");
              END;
          END;
          OnAfterCaseCalcCapableToPromise(OrderPromisingLine,CompanyInfo,OrderPromisingID,LastValidLine); <=====================
          MODIFY;
          CreateReservations(OrderPromisingLine);
        UNTIL NEXT = 0;
    
    ...
Codeunit<AvailabilityManagement>.PROCEDURE<OnAfterUpdateSourceLine>
  Raised in: Codeunit<AvailabilityManagement>.PROCEDURE<UpdateSourceLine>
    Code lines:
    ...
          END;
    
          JobPlanningLine.MODIFY;
        END;
    END;
    OnAfterUpdateSourceLine(OrderPromisingLine2); <=====================
Codeunit<AvailabilityManagement>.PROCEDURE<OnBeforeOrderPromisingLineInsert>
  Raised in: Codeunit<AvailabilityManagement>.PROCEDURE<InsertPromisingLine>
    Code lines:
    ...
        "Qty. per Unit of Measure" := 1;
      "Unavailable Quantity" :=
        ROUND("Unavailable Quantity (Base)" / "Qty. per Unit of Measure",0.00001);
      "Required Quantity" :=
        ROUND("Required Quantity (Base)" / "Qty. per Unit of Measure",0.00001);
      OnBeforeOrderPromisingLineInsert(OrderPromisingLine); <=====================
      INSERT;
    END;
Codeunit<AvailabilityManagement>.PROCEDURE<OnCreateReservationsAfterFirstCASE>
  Raised in: Codeunit<AvailabilityManagement>.PROCEDURE<CreateReservations>
    Code lines:
    ...
          NeededQty := JobPlanningLine2."Remaining Qty." - JobPlanningLine2."Reserved Quantity";
          NeededQtyBase := JobPlanningLine2."Remaining Qty. (Base)" - JobPlanningLine2."Reserved Qty. (Base)";
        END;
    END;
    
    OnCreateReservationsAfterFirstCASE(OrderPromisingLine,NeededQty,NeededQtyBase); <=====================
    
    ReqLine.SETCURRENTKEY("Order Promising ID","Order Promising Line ID","Order Promising Line No.");
    ReqLine.SETRANGE("Order Promising ID",OrderPromisingLine."Source ID");
    ReqLine.SETRANGE("Order Promising Line ID",OrderPromisingLine."Source Line No.");
    ...
Codeunit<AvailabilityManagement>.PROCEDURE<OnCreateReservationsAfterSecondCASE>
  Raised in: Codeunit<AvailabilityManagement>.PROCEDURE<CreateReservations>
    Code lines:
    ...
              JobPlanningLine2.Reserve := JobPlanningLine2.Reserve::Optional;
              JobPlanningLine2.MODIFY;
            END;
          END;
      END;
      OnCreateReservationsAfterSecondCASE(OrderPromisingLine,ReqLine,ReservQty,ReservQtyBase); <=====================
    END;
Page<Job Resource Prices>.PROCEDURE<OnAfterLookupCode>
  Raised in: Page<Job Resource Prices>.<Control>.<OnLookup>
    Code lines:
    OnAfterLookupCode(Rec); <=====================
Page<Available - Job Planning Lines>.PROCEDURE<OnAfterUpdateReservFrom>
  Raised in: Page<Available - Job Planning Lines>.PROCEDURE<UpdateReservFrom>
    Code lines:
    ...
          JobPlanningLine.FIND;
          SetJobPlanningLine(JobPlanningLine,ReservEntry);
        END;
    END;
    
    OnAfterUpdateReservFrom; <=====================
Page<Available - Job Planning Lines>.PROCEDURE<OnAfterUpdateReservMgt>
  Raised in: Page<Available - Job Planning Lines>.PROCEDURE<UpdateReservMgt>
    Code lines:
    ...
        ReservMgt.SetJobPlanningLine(JobPlanningLine);
      DATABASE::"Assembly Header":
        ReservMgt.SetAssemblyHeader(AssemblyHeader);
    END;
    
    OnAfterUpdateReservMgt; <=====================
Page<Company Detail>.PROCEDURE<OnGoToCompany>
  Raised in: Page<Company Detail>.Action<GoToClientCompany>.<OnAction>
    Code lines:
    HYPERLINK(GETURL(CLIENTTYPE::Web,COMPANYNAME));
    OnGoToCompany; <=====================
Page<Data Privacy Wizard>.PROCEDURE<OnDrillDownForEntityNumber>
  Raised in: Page<Data Privacy Wizard>.Control<EntityNo>.<OnDrillDown>
    Code lines:
    ...
        Users.GETRECORD(User);
        EntityNo := User."User Name";
      END;
    END;
    
    OnDrillDownForEntityNumber(EntityTypeTableNo,EntityNo); // Integration point to external devs <=====================
    
    NextActionEnabled := EntityNo <> '';
    PreviewActionEnabled := EntityNo <> '';
Page<Data Privacy Wizard>.PROCEDURE<OnEntityNoValidate>
  Raised in: Page<Data Privacy Wizard>.Control<EntityNo>.<OnValidate>
    Code lines:
    ...
        IF NOT User.FINDFIRST THEN
          ERROR(RecordNotFoundErr);
      END;
    END;
    
    OnEntityNoValidate(EntityTypeTableNo,EntityNo); <=====================
    
    NextActionEnabled := EntityNo <> '';
    PreviewActionEnabled := EntityNo <> '';
Page<Create Payment>.PROCEDURE<OnBeforeUpdateGnlJnlLineDimensionsFromTempBuffer>
  Raised in: Page<Create Payment>.PROCEDURE<MakeGenJnlLines>
    Code lines:
    ...
    
          "Creditor No." := TempPaymentBuffer."Creditor No.";
          "Payment Reference" := TempPaymentBuffer."Payment Reference";
          "Exported to Payment File" := TempPaymentBuffer."Exported to Payment File";
          "Applies-to Ext. Doc. No." := TempPaymentBuffer."Applies-to Ext. Doc. No.";
          OnBeforeUpdateGnlJnlLineDimensionsFromTempBuffer(GenJnlLine,TempPaymentBuffer); <=====================
          UpdateDimensions(GenJnlLine,TempPaymentBuffer);
          INSERT;
        END;
      UNTIL TempPaymentBuffer.NEXT = 0;
Page<Create Payment>.PROCEDURE<OnUpdateTempBufferFromVendorLedgerEntry>
  Raised in: Page<Create Payment>.PROCEDURE<MakeGenJnlLines>
    Code lines:
    ...
            TempPaymentBuffer."Payment Method Code" := VendorLedgerEntry."Payment Method Code";
          TempPaymentBuffer."Creditor No." := VendorLedgerEntry."Creditor No.";
          TempPaymentBuffer."Payment Reference" := VendorLedgerEntry."Payment Reference";
          TempPaymentBuffer."Exported to Payment File" := VendorLedgerEntry."Exported to Payment File";
          TempPaymentBuffer."Applies-to Ext. Doc. No." := VendorLedgerEntry."External Document No.";
          OnUpdateTempBufferFromVendorLedgerEntry(TempPaymentBuffer,VendorLedgerEntry); <=====================
          TempPaymentBuffer."Dimension Entry No." := 0;
          TempPaymentBuffer."Global Dimension 1 Code" := '';
          TempPaymentBuffer."Global Dimension 2 Code" := '';
          TempPaymentBuffer."Dimension Set ID" := 0;
    ...
Page<Payment Reconciliation Journal>.PROCEDURE<OnAfterImportBankTransactions>
  Raised in: Page<Payment Reconciliation Journal>.Action<ImportBankTransactions>.<OnAction>
    Code lines:
    OnAfterImportBankTransactions(SubscriberInvoked); <=====================
    IF NOT SubscriberInvoked THEN BEGIN
      BankAccReconciliation.GET("Statement Type","Bank Account No.","Statement No.");
      BankAccReconciliation.ImportBankStatement;
      IF BankAccReconciliation.FIND THEN;
    END;
Page<Payment Reconciliation Journal>.PROCEDURE<OnAtActionApplyAutomatically>
  Raised in: Page<Payment Reconciliation Journal>.Action<ApplyAutomatically>.<OnAction>
    Code lines:
    ...
    IF AppliedPaymentEntry.COUNT > 0 THEN
      IF NOT CONFIRM(RemoveExistingApplicationsQst) THEN
        EXIT;
    
    BankAccReconciliation.GET("Statement Type","Bank Account No.","Statement No.");
    OnAtActionApplyAutomatically(BankAccReconciliation,SubscriberInvoked); <=====================
    IF NOT SubscriberInvoked THEN
      CODEUNIT.RUN(CODEUNIT::"Match Bank Pmt. Appl.",BankAccReconciliation);
    CurrPage.UPDATE(FALSE);
Page<Payment Reconciliation Journal>.PROCEDURE<OnUpdateSorting>
  Raised in: Page<Payment Reconciliation Journal>.PROCEDURE<UpdateSorting>
    Code lines:
    ...
          BankAccReconciliationLine."Sorting Order" -= ScoreRange;
    
        BankAccReconciliationLine.MODIFY;
      UNTIL BankAccReconciliationLine.NEXT = 0;
    
      OnUpdateSorting(BankAccReconciliation,SubscriberInvoked); <=====================
      IF NOT SubscriberInvoked THEN
        SETCURRENTKEY("Sorting Order");
      ASCENDING(IsAscending);
    
    ...
Page<Payment Application>.PROCEDURE<OnSetBankAccReconcLine>
  Raised in: Page<Payment Application>.PROCEDURE<SetBankAccReconcLine>
    Code lines:
    BankAccReconLine := NewBankAccReconLine;
    TransferFromBankAccReconLine(NewBankAccReconLine);
    
    OnSetBankAccReconcLine(BankAccReconLine); <=====================
Page<Posted Sales Credit Memos>.PROCEDURE<OnBeforePrintRecords>
  Raised in: Page<Posted Sales Credit Memos>.<Action>.<OnAction>
    Code lines:
    SalesCrMemoHeader := Rec;
    CurrPage.SETSELECTIONFILTER(SalesCrMemoHeader);
    OnBeforePrintRecords(SalesCrMemoHeader); <=====================
    SalesCrMemoHeader.PrintRecords(TRUE);
Page<Headline RC Business Manager>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
  Raised in: Page<Headline RC Business Manager>.PROCEDURE<ComputeDefaultFieldsVisibility>
    Code lines:
    OnIsAnyExtensionHeadlineVisible(ExtensionHeadlinesVisible); <=====================
    DefaultFieldsVisible := NOT ExtensionHeadlinesVisible;
    UserGreetingVisible := HeadlineManagement.ShouldUserGreetingBeVisible;
Page<Headline RC Order Processor>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
  Raised in: Page<Headline RC Order Processor>.PROCEDURE<ComputeDefaultFieldsVisibility>
    Code lines:
    OnIsAnyExtensionHeadlineVisible(ExtensionHeadlinesVisible); <=====================
    DefaultFieldsVisible := NOT ExtensionHeadlinesVisible;
    UserGreetingVisible := HeadlineManagement.ShouldUserGreetingBeVisible;
Page<Headline RC Accountant>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
  Raised in: Page<Headline RC Accountant>.PROCEDURE<ComputeDefaultFieldsVisibility>
    Code lines:
    OnIsAnyExtensionHeadlineVisible(ExtensionHeadlinesVisible); <=====================
    DefaultFieldsVisible := NOT ExtensionHeadlinesVisible;
    UserGreetingVisible := HeadlineManagement.ShouldUserGreetingBeVisible;
Page<Headline RC Project Manager>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
  Raised in: Page<Headline RC Project Manager>.PROCEDURE<ComputeDefaultFieldsVisibility>
    Code lines:
    OnIsAnyExtensionHeadlineVisible(ExtensionHeadlinesVisible); <=====================
    DefaultFieldsVisible := NOT ExtensionHeadlinesVisible;
    UserGreetingVisible := HeadlineManagement.ShouldUserGreetingBeVisible;
Page<Headline RC Relationship Mgt.>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
  Raised in: Page<Headline RC Relationship Mgt.>.PROCEDURE<ComputeDefaultFieldsVisibility>
    Code lines:
    OnIsAnyExtensionHeadlineVisible(ExtensionHeadlinesVisible); <=====================
    DefaultFieldsVisible := NOT ExtensionHeadlinesVisible;
    UserGreetingVisible := HeadlineManagement.ShouldUserGreetingBeVisible;
Page<Headline RC Administrator>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
  Raised in: Page<Headline RC Administrator>.PROCEDURE<ComputeDefaultFieldsVisibility>
    Code lines:
    OnIsAnyExtensionHeadlineVisible(ExtensionHeadlinesVisible); <=====================
    DefaultFieldsVisible := NOT ExtensionHeadlinesVisible;
    UserGreetingVisible := HeadlineManagement.ShouldUserGreetingBeVisible;
Page<Headline RC Team Member>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
  Raised in: Page<Headline RC Team Member>.PROCEDURE<ComputeDefaultFieldsVisibility>
    Code lines:
    OnIsAnyExtensionHeadlineVisible(ExtensionHeadlinesVisible); <=====================
    DefaultFieldsVisible := NOT ExtensionHeadlinesVisible;
    UserGreetingVisible := HeadlineManagement.ShouldUserGreetingBeVisible;
Page<Headline RC Prod. Planner>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
  Raised in: Page<Headline RC Prod. Planner>.PROCEDURE<ComputeDefaultFieldsVisibility>
    Code lines:
    OnIsAnyExtensionHeadlineVisible(ExtensionHeadlinesVisible); <=====================
    DefaultFieldsVisible := NOT ExtensionHeadlinesVisible;
    UserGreetingVisible := HeadlineManagement.ShouldUserGreetingBeVisible;
Page<Headline RC Serv. Dispatcher>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
  Raised in: Page<Headline RC Serv. Dispatcher>.PROCEDURE<ComputeDefaultFieldsVisibility>
    Code lines:
    OnIsAnyExtensionHeadlineVisible(ExtensionHeadlinesVisible); <=====================
    DefaultFieldsVisible := NOT ExtensionHeadlinesVisible;
    UserGreetingVisible := HeadlineManagement.ShouldUserGreetingBeVisible;
Page<Posted Purchase Credit Memos>.PROCEDURE<OnBeforePrintRecords>
  Raised in: Page<Posted Purchase Credit Memos>.<Action>.<OnAction>
    Code lines:
    PurchCrMemoHdr := Rec;
    CurrPage.SETSELECTIONFILTER(PurchCrMemoHdr);
    OnBeforePrintRecords(PurchCrMemoHdr); <=====================
    PurchCrMemoHdr.PrintRecords(TRUE);
Page<My Notifications>.PROCEDURE<OnAfterInitializingNotificationWithDefaultState>
  Raised in: Page<My Notifications>.PROCEDURE<InitializeNotificationsWithDefaultState>
    Code lines:
    OnInitializingNotificationWithDefaultState;
    OnAfterInitializingNotificationWithDefaultState; <=====================
Page<My Notifications>.PROCEDURE<OnInitializingNotificationWithDefaultState>
  Raised in: Page<My Notifications>.<OnOpenPage>
    Code lines:
    OnInitializingNotificationWithDefaultState; <=====================
    SETRANGE("User Id",USERID);
  Raised in: Page<My Notifications>.PROCEDURE<InitializeNotificationsWithDefaultState>
    Code lines:
    OnInitializingNotificationWithDefaultState; <=====================
    OnAfterInitializingNotificationWithDefaultState;
Page<Sales Statistics>.PROCEDURE<OnAfterCalculateTotals>
  Raised in: Page<Sales Statistics>.PROCEDURE<CalculateTotals>
    Code lines:
    ...
    
    SalesLine.CalcVATAmountLines(0,Rec,TempSalesLine,TempVATAmountLine);
    TempVATAmountLine.MODIFYALL(Modified,FALSE);
    SetVATSpecification;
    
    OnAfterCalculateTotals(Rec,TotalSalesLine,TotalSalesLineLCY,TempVATAmountLine); <=====================
Page<Sales Statistics>.PROCEDURE<OnOpenPageOnBeforeSetEditable>
  Raised in: Page<Sales Statistics>.<OnOpenPage>
    Code lines:
    ...
    AllowInvDisc :=
      NOT (SalesSetup."Calc. Inv. Discount" AND CustInvDiscRecExists("Invoice Disc. Code"));
    AllowVATDifference :=
      SalesSetup."Allow VAT Difference" AND
      NOT ("Document Type" IN ["Document Type"::Quote,"Document Type"::"Blanket Order"]);
    OnOpenPageOnBeforeSetEditable(AllowInvDisc,AllowVATDifference); <=====================
    CurrPage.EDITABLE := AllowVATDifference OR AllowInvDisc;
    SetVATSpecification;
Page<Purchase Statistics>.PROCEDURE<OnAfterCalculateTotals>
  Raised in: Page<Purchase Statistics>.PROCEDURE<CalculateTotals>
    Code lines:
    ...
    
    PurchLine.CalcVATAmountLines(0,Rec,TempPurchLine,TempVATAmountLine);
    TempVATAmountLine.MODIFYALL(Modified,FALSE);
    SetVATSpecification;
    
    OnAfterCalculateTotals(Rec,TotalPurchLine,TotalPurchLineLCY,TempVATAmountLine); <=====================
Page<Purchase Statistics>.PROCEDURE<OnOpenPageOnBeforeSetEditable>
  Raised in: Page<Purchase Statistics>.<OnOpenPage>
    Code lines:
    ...
    AllowInvDisc :=
      NOT (PurchSetup."Calc. Inv. Discount" AND VendInvDiscRecExists("Invoice Disc. Code"));
    AllowVATDifference :=
      PurchSetup."Allow VAT Difference" AND
      NOT ("Document Type" IN ["Document Type"::Quote,"Document Type"::"Blanket Order"]);
    OnOpenPageOnBeforeSetEditable(AllowInvDisc,AllowVATDifference); <=====================
    CurrPage.EDITABLE := AllowVATDifference OR AllowInvDisc;
    SetVATSpecification;
Page<Office Suggested Line Items>.PROCEDURE<OnDisableMessage>
  Raised in: Page<Office Suggested Line Items>.<OnQueryClosePage>
    Code lines:
    IF CloseAction IN [ACTION::OK,ACTION::LookupOK] THEN
      IF DoNotShowAgain THEN
        OnDisableMessage; <=====================
Page<Payroll Import Transactions>.PROCEDURE<OnCreateSampleFile>
  Raised in: Page<Payroll Import Transactions>.Action<ActionCreateSampleFile>.<OnAction>
    Code lines:
    OnCreateSampleFile(TempServiceConnection); <=====================
Page<Payroll Import Transactions>.PROCEDURE<OnImportPayrollTransactions>
  Raised in: Page<Payroll Import Transactions>.Action<ActionNext>.<OnAction>
    Code lines:
    CASE Step OF
      0:
        BEGIN
          OnImportPayrollTransactions(TempServiceConnection,TempImportGLTransaction); <=====================
          IF TempImportGLTransaction.FINDSET THEN
            REPEAT
              Rec := TempImportGLTransaction;
              INSERT;
            UNTIL TempImportGLTransaction.NEXT = 0;
          IF FINDFIRST THEN BEGIN
    ...
Page<Data Migration Overview>.PROCEDURE<OnRequestAbort>
  Raised in: Page<Data Migration Overview>.Action<Stop Data Migration>.<OnAction>
    Code lines:
    OnRequestAbort; <=====================
    DataMigrationStatus.SETFILTER(
      Status,'%1|%2',DataMigrationStatus.Status::"In Progress",DataMigrationStatus.Status::Pending);
    IF DataMigrationStatus.FINDFIRST THEN
      DataMigrationMgt.SetAbortStatus(DataMigrationStatus);
Page<Incoming Document>.PROCEDURE<OnCloseIncomingDocumentFromAction>
  Raised in: Page<Incoming Document>.Action<OCRSetup>.<OnAction>
    Code lines:
    PAGE.RUNMODAL(PAGE::"OCR Service Setup");
    CurrPage.UPDATE;
    IF ClientTypeManagement.GetCurrentClientType = CLIENTTYPE::Web THEN
      IF OCRIsEnabled THEN BEGIN
        OnCloseIncomingDocumentFromAction(Rec); <=====================
        CurrPage.CLOSE;
      END;
Page<Incoming Documents>.PROCEDURE<OnCloseIncomingDocumentsFromActions>
  Raised in: Page<Incoming Documents>.Action<OCRSetup>.<OnAction>
    Code lines:
    PAGE.RUNMODAL(PAGE::"OCR Service Setup");
    CurrPage.UPDATE;
    IF ClientTypeManagement.GetCurrentClientType = CLIENTTYPE::Web THEN
      IF OCRIsEnabled THEN BEGIN
        OnCloseIncomingDocumentsFromActions(Rec); <=====================
        CurrPage.CLOSE;
      END;
Page<Customer Card>.PROCEDURE<OnBeforeCreateCustomerFromTemplate>
  Raised in: Page<Customer Card>.PROCEDURE<CreateCustomerFromTemplate>
    Code lines:
    OnBeforeCreateCustomerFromTemplate(NewMode); <=====================
    
    IF NewMode THEN BEGIN
      IF MiniCustomerTemplate.NewCustomerFromTemplate(Customer) THEN BEGIN
        IF VATRegNoSrvConfig.VATRegNoSrvIsEnabled THEN
          IF Customer."Validate EU Vat Reg. No." THEN BEGIN
            EUVATRegistrationNoCheck.SetRecordRef(Customer);
            COMMIT;
            EUVATRegistrationNoCheck.RUNMODAL;
            EUVATRegistrationNoCheck.GetRecordRef(CustomerRecRef);
    ...
Page<Customer Card>.PROCEDURE<SetCaption>
  Raised in: Page<Customer Card>.<OnInit>
    Code lines:
    ...
    ContactEditable := TRUE;
    
    OpenApprovalEntriesExistCurrUser := TRUE;
    
    CaptionTxt := CurrPage.CAPTION;
    SetCaption(CaptionTxt); <=====================
    CurrPage.CAPTION(CaptionTxt);
Page<O365 Import Export Settings>.PROCEDURE<OnInsertMenuItems>
  Raised in: Page<O365 Import Export Settings>.PROCEDURE<InsertMenuItems>
    Code lines:
    InsertPageMenuItem(PAGE::"O365 Export Invoices",ExportTitleLbl,ExportDescriptionLbl);
    OnInsertMenuItems(Rec); <=====================
    InsertPageMenuItem(PAGE::"O365 Sync with Microsoft Apps",SyncMSAppsLbl,'');
    
    IF NOT ClientTypeManagement.IsPhoneClientType THEN BEGIN
      InsertPageWithParameterMenuItem(
        PAGE::"O365 Import from Excel Wizard",
        DummyCustomer.TABLENAME,
        ImportCustomersTieleLbl,
        ImportCustomersDesriptionLbl);
    ...
Page<Customer List>.PROCEDURE<SetCaption>
  Raised in: Page<Customer List>.<OnInit>
    Code lines:
    SetCustomerNoVisibilityOnFactBoxes;
    
    CaptionTxt := CurrPage.CAPTION;
    SetCaption(CaptionTxt); <=====================
    CurrPage.CAPTION(CaptionTxt);
Page<Apply Customer Entries>.PROCEDURE<OnBeforeHandledChosenEntries>
  Raised in: Page<Apply Customer Entries>.PROCEDURE<HandleChosenEntries>
    Code lines:
    IsHandled := FALSE;
    OnBeforeHandledChosenEntries(Type,CurrentAmount,CurrencyCode,PostingDate,AppliedCustLedgEntry,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT AppliedCustLedgEntry.FINDSET(FALSE,FALSE) THEN
      EXIT;
    
    REPEAT
      TempAppliedCustLedgEntry := AppliedCustLedgEntry;
    ...
Page<Apply Vendor Entries>.PROCEDURE<OnBeforeHandledChosenEntries>
  Raised in: Page<Apply Vendor Entries>.PROCEDURE<HandleChosenEntries>
    Code lines:
    IsHandled := FALSE;
    OnBeforeHandledChosenEntries(Type,CurrentAmount,CurrencyCode,PostingDate,AppliedVendLedgEntry,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT AppliedVendLedgEntry.FINDSET(FALSE,FALSE) THEN
      EXIT;
    
    REPEAT
      TempAppliedVendLedgEntry := AppliedVendLedgEntry;
    ...
Page<BC O365 No. Series Card>.PROCEDURE<OnAfterNoSeriesModified>
  Raised in: Page<BC O365 No. Series Card>.PROCEDURE<UpdateLineForNewSeries>
    Code lines:
    ...
        NoSeriesLine.VALIDATE("Series Code",Code);
        NoSeriesLine.VALIDATE("Line No.",GetNextLineNo(Code));
        NoSeriesLine.VALIDATE("Starting No.",NextNoSeries);
        NoSeriesLine.INSERT(TRUE);
      END;
      OnAfterNoSeriesModified; <=====================
    END;
Page<BC O365 Quickbooks Settings>.PROCEDURE<OnQuickBooksDesktopSyncClicked>
  Raised in: Page<BC O365 Quickbooks Settings>.Control<SyncWithQbd>.<OnDrillDown>
    Code lines:
    OnQuickBooksDesktopSyncClicked; <=====================
Page<BC O365 Quickbooks Settings>.PROCEDURE<OnQuickBooksOnlineSyncClicked>
  Raised in: Page<BC O365 Quickbooks Settings>.Control<SyncWithQbo>.<OnDrillDown>
    Code lines:
    OnQuickBooksOnlineSyncClicked; <=====================
Page<Req. Worksheet>.PROCEDURE<OnBeforeOpenReqWorksheet>
  Raised in: Page<Req. Worksheet>.<OnOpenPage>
    Code lines:
    ...
    END;
    ReqJnlManagement.TemplateSelection(PAGE::"Req. Worksheet",FALSE,0,Rec,JnlSelected);
    IF NOT JnlSelected THEN
      ERROR('');
    
    OnBeforeOpenReqWorksheet(CurrentJnlBatchName); <=====================
    ReqJnlManagement.OpenJnl(CurrentJnlBatchName,Rec);
Page<Navigate>.PROCEDURE<OnAfterNavigateFindRecords>
  Raised in: Page<Navigate>.PROCEDURE<FindRecords>
    Code lines:
    ...
      CostEntry.SETCURRENTKEY("Document No.","Posting Date");
      CostEntry.SETFILTER("Document No.",DocNoFilter);
      CostEntry.SETFILTER("Posting Date",PostingDateFilter);
      InsertIntoDocEntry(Rec,DATABASE::"Cost Entry",0,CostEntry.TABLECAPTION,CostEntry.COUNT);
    END;
    OnAfterNavigateFindRecords(Rec,DocNoFilter,PostingDateFilter); <=====================
    DocExists := FINDFIRST;
    
    SetSource(0D,'','',0,'');
    IF DocExists THEN BEGIN
    ...
Page<Navigate>.PROCEDURE<OnAfterNavigateFindTrackingRecords>
  Raised in: Page<Navigate>.PROCEDURE<FindTrackingRecords>
    Code lines:
    ...
        InsertIntoDocEntry(Rec,TempRecordBuffer."Table No.",0,TempRecordBuffer."Table Name",DocNoOfRecords);
    
        TempRecordBuffer.SETRANGE("Table No.");
      UNTIL TempRecordBuffer.NEXT = 0;
    
    OnAfterNavigateFindTrackingRecords(Rec,SerialNoFilter,LotNoFilter); <=====================
    
    DocExists := FIND('-');
    
    UpdateFormAfterFindRecords;
Page<Navigate>.PROCEDURE<OnAfterNavigateShowRecords>
  Raised in: Page<Navigate>.PROCEDURE<ShowRecords>
    Code lines:
    ...
          PAGE.RUN(0,WarrantyLedgerEntry);
        DATABASE::"Cost Entry":
          PAGE.RUN(0,CostEntry);
      END;
    
    OnAfterNavigateShowRecords("Table ID",DocNoFilter,PostingDateFilter,ItemTrackingSearch,Rec); <=====================
Page<Navigate>.PROCEDURE<OnBeforeNavigateShowRecords>
  Raised in: Page<Navigate>.PROCEDURE<ShowRecords>
    Code lines:
    IsHandled := FALSE;
    OnBeforeNavigateShowRecords("Table ID",DocNoFilter,PostingDateFilter,ItemTrackingSearch,Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF ItemTrackingSearch THEN
      ItemTrackingNavigateMgt.Show("Table ID")
    ELSE
      CASE "Table ID" OF
        DATABASE::"Incoming Document":
    ...
Page<Item Availability Lines>.PROCEDURE<OnAfterSet>
  Raised in: Page<Item Availability Lines>.PROCEDURE<Set>
    Code lines:
    Item.COPY(NewItem);
    PeriodType := NewPeriodType;
    AmountType := NewAmountType;
    CurrPage.UPDATE(FALSE);
    
    OnAfterSet(Item,PeriodType,AmountType); <=====================
Page<Item Availability Lines>.PROCEDURE<OnAfterSetItemFilter>
  Raised in: Page<Item Availability Lines>.PROCEDURE<SetItemFilter>
    Code lines:
    IF AmountType = AmountType::"Net Change" THEN
      Item.SETRANGE("Date Filter","Period Start","Period End")
    ELSE
      Item.SETRANGE("Date Filter",0D,"Period End");
    OnAfterSetItemFilter(Item,"Period Start","Period End"); <=====================
Page<Sales Order Statistics>.PROCEDURE<OnOpenPageOnBeforeSetEditable>
  Raised in: Page<Sales Order Statistics>.<OnOpenPage>
    Code lines:
    SalesSetup.GET;
    AllowInvDisc := NOT (SalesSetup."Calc. Inv. Discount" AND CustInvDiscRecExists("Invoice Disc. Code"));
    AllowVATDifference :=
      SalesSetup."Allow VAT Difference" AND
      NOT ("Document Type" IN ["Document Type"::Quote,"Document Type"::"Blanket Order"]);
    OnOpenPageOnBeforeSetEditable(AllowInvDisc,AllowVATDifference); <=====================
    VATLinesFormIsEditable := AllowVATDifference OR AllowInvDisc;
    CurrPage.EDITABLE := VATLinesFormIsEditable;
Page<Purchase Order Statistics>.PROCEDURE<OnOpenPageOnBeforeSetEditable>
  Raised in: Page<Purchase Order Statistics>.<OnOpenPage>
    Code lines:
    ...
    AllowInvDisc :=
      NOT (PurchSetup."Calc. Inv. Discount" AND VendInvDiscRecExists("Invoice Disc. Code"));
    AllowVATDifference :=
      PurchSetup."Allow VAT Difference" AND
      NOT ("Document Type" IN ["Document Type"::Quote,"Document Type"::"Blanket Order"]);
    OnOpenPageOnBeforeSetEditable(AllowInvDisc,AllowVATDifference); <=====================
    VATLinesFormIsEditable := AllowVATDifference OR AllowInvDisc;
    CurrPage.EDITABLE := VATLinesFormIsEditable;
Page<G/L Balance by Dimension>.PROCEDURE<OnBeforeGLAccFilter>
  Raised in: Page<G/L Balance by Dimension>.<OnOpenPage>
    Code lines:
    OnBeforeGLAccFilter(GLAcc,GLAccFilter,LineDimOption,ColumnDimOption); <=====================
    GlobalDim1Filter := GLAcc.GETFILTER("Global Dimension 1 Filter");
    GlobalDim2Filter := GLAcc.GETFILTER("Global Dimension 2 Filter");
    
    GLSetup.GET;
    Dim1FilterEnable :=
      (GLSetup."Global Dimension 1 Code" <> '') AND
      (GLAcc.GETFILTER("Global Dimension 1 Filter") = '');
    Dim2FilterEnable :=
      (GLSetup."Global Dimension 2 Code" <> '') AND
    ...
Page<Sales Quote>.PROCEDURE<OnBeforeStatisticsAction>
  Raised in: Page<Sales Quote>.Action<Statistics>.<OnAction>
    Code lines:
    OnBeforeStatisticsAction(Rec,Handled); <=====================
    IF NOT Handled THEN BEGIN
      CalcInvDiscForHeader;
      COMMIT;
      PAGE.RUNMODAL(PAGE::"Sales Statistics",Rec);
      SalesCalcDiscByType.ResetRecalculateInvoiceDisc(Rec);
    END
Page<Sales Order>.PROCEDURE<OnBeforeStatisticsAction>
  Raised in: Page<Sales Order>.Action<Statistics>.<OnAction>
    Code lines:
    OnBeforeStatisticsAction(Rec,Handled); <=====================
    IF NOT Handled THEN BEGIN
      OpenSalesOrderStatistics;
      SalesCalcDiscountByType.ResetRecalculateInvoiceDisc(Rec);
    END
Page<Sales Invoice>.PROCEDURE<OnBeforeStatisticsAction>
  Raised in: Page<Sales Invoice>.Action<Statistics>.<OnAction>
    Code lines:
    OnBeforeStatisticsAction(Rec,Handled); <=====================
    IF NOT Handled THEN BEGIN
      CalcInvDiscForHeader;
      COMMIT;
      PAGE.RUNMODAL(PAGE::"Sales Statistics",Rec);
      SalesCalcDiscountByType.ResetRecalculateInvoiceDisc(Rec);
    END
Page<Reminder Lines>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Reminder Lines>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    
    IF TransferExtendedText.ReminderCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      TransferExtendedText.InsertReminderExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      CurrPage.UPDATE;
Page<Sales Credit Memo>.PROCEDURE<OnBeforeStatisticsAction>
  Raised in: Page<Sales Credit Memo>.Action<Statistics>.<OnAction>
    Code lines:
    OnBeforeStatisticsAction(Rec,Handled); <=====================
    IF NOT Handled THEN BEGIN
      CalcInvDiscForHeader;
      COMMIT;
      PAGE.RUNMODAL(PAGE::"Sales Statistics",Rec);
      SalesCalcDiscByType.ResetRecalculateInvoiceDisc(Rec);
    END
Page<Finance Charge Memo Lines>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Finance Charge Memo Lines>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    
    IF TransferExtendedText.FinChrgMemoCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      TransferExtendedText.InsertFinChrgMemoExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      CurrPage.UPDATE;
Page<Sales Order Subform>.PROCEDURE<OnAfterQuantityOnAfterValidate>
  Raised in: Page<Sales Order Subform>.PROCEDURE<QuantityOnAfterValidate>
    Code lines:
    ...
       (Quantity <> xRec.Quantity) AND
       NOT UpdateIsDone
    THEN
      CurrPage.UPDATE(TRUE);
    
    OnAfterQuantityOnAfterValidate(Rec); <=====================
Page<Sales Order Subform>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Sales Order Subform>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    IF TransferExtendedText.SalesCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      COMMIT;
      TransferExtendedText.InsertSalesExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      UpdateForm(TRUE);
Page<Sales Order Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
  Raised in: Page<Sales Order Subform>.<Control>.<OnLookup>
    Code lines:
    CrossReferenceNoLookUp;
    NoOnAfterValidate;
    OnCrossReferenceNoOnLookup(Rec); <=====================
Page<Sales Invoice Subform>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Sales Invoice Subform>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    IF TransferExtendedText.SalesCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      COMMIT;
      TransferExtendedText.InsertSalesExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      UpdatePage(TRUE);
Page<Sales Invoice Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
  Raised in: Page<Sales Invoice Subform>.<Control>.<OnLookup>
    Code lines:
    CrossReferenceNoLookUp;
    NoOnAfterValidate;
    OnCrossReferenceNoOnLookup(Rec); <=====================
Page<VAT Statement Preview Line>.PROCEDURE<OnBeforeOpenPageVATEntryTotaling>
  Raised in: Page<VAT Statement Preview Line>.<Control>.<OnDrillDown>
    Code lines:
    ...
            Selection::Closed:
              VATEntry.SETRANGE(Closed,TRUE);
            Selection::"Open and Closed":
              VATEntry.SETRANGE(Closed);
          END;
          OnBeforeOpenPageVATEntryTotaling(VATEntry,Rec); <=====================
          PAGE.RUN(PAGE::"VAT Entries",VATEntry);
        END;
      Type::"Row Totaling",
      Type::Description:
    ...
Page<Reservation Entries>.PROCEDURE<OnAfterLookupReserved>
  Raised in: Page<Reservation Entries>.PROCEDURE<LookupReserved>
    Code lines:
    ...
            AssemblyLine.SETRANGE("Line No.","Source Ref. No.");
            PAGE.RUNMODAL(0,AssemblyLine);
          END;
      END;
    
    OnAfterLookupReserved(ReservEntry); <=====================
Page<Reservation>.PROCEDURE<OnAfterRelatesToSummEntry>
  Raised in: Page<Reservation>.PROCEDURE<RelatesToSummEntry>
    Code lines:
    ...
        EXIT((FilterReservEntry."Source Type" = DATABASE::"Assembly Line") AND
          (FilterReservEntry."Source Subtype" = FromReservSummEntry."Entry No." - 151));
    END;
    
    IsHandled := FALSE;
    OnAfterRelatesToSummEntry(FromReservSummEntry,FilterReservEntry,IsHandled); <=====================
    EXIT(IsHandled);
Page<Reservation>.PROCEDURE<OnAfterSetAssemblyHeader>
  Raised in: Page<Reservation>.PROCEDURE<SetAssemblyHeader>
    Code lines:
    ...
    ReservEntry."Shipment Date" := AssemblyHeader."Due Date";
    
    CaptionText := AssemblyHeaderReserve.Caption(AssemblyHeader);
    UpdateReservFrom;
    
    OnAfterSetAssemblyHeader(Rec,ReservEntry); <=====================
Page<Reservation>.PROCEDURE<OnAfterSetAssemblyLine>
  Raised in: Page<Reservation>.PROCEDURE<SetAssemblyLine>
    Code lines:
    ...
    ReservEntry."Shipment Date" := AssemblyLine."Due Date";
    
    CaptionText := AssemblyLineReserve.Caption(AssemblyLine);
    UpdateReservFrom;
    
    OnAfterSetAssemblyLine(Rec,ReservEntry); <=====================
Page<Reservation>.PROCEDURE<OnAfterSetItemJnlLine>
  Raised in: Page<Reservation>.PROCEDURE<SetItemJnlLine>
    Code lines:
    ...
    ReservEntry."Shipment Date" := ItemJnlLine."Posting Date";
    
    CaptionText := ReserveItemJnlLine.Caption(ItemJnlLine);
    UpdateReservFrom;
    
    OnAfterSetItemJnlLine(Rec,ReservEntry); <=====================
Page<Reservation>.PROCEDURE<OnAfterSetJobPlanningLine>
  Raised in: Page<Reservation>.PROCEDURE<SetJobPlanningLine>
    Code lines:
    ...
    ReservEntry."Shipment Date" := JobPlanningLine."Planning Date";
    
    CaptionText := JobPlanningLineReserve.Caption(JobPlanningLine);
    UpdateReservFrom;
    
    OnAfterSetJobPlanningLine(Rec,ReservEntry); <=====================
Page<Reservation>.PROCEDURE<OnAfterSetPlanningComponent>
  Raised in: Page<Reservation>.PROCEDURE<SetPlanningComponent>
    Code lines:
    ...
    ReservEntry."Shipment Date" := PlanningComponent."Due Date";
    
    CaptionText := ReservePlanningComponent.Caption(PlanningComponent);
    UpdateReservFrom;
    
    OnAfterSetPlanningComponent(Rec,ReservEntry); <=====================
Page<Reservation>.PROCEDURE<OnAfterSetProdOrderComponent>
  Raised in: Page<Reservation>.PROCEDURE<SetProdOrderComponent>
    Code lines:
    ...
    ReservEntry."Shipment Date" := ProdOrderComp."Due Date";
    
    CaptionText := ReserveProdOrderComp.Caption(ProdOrderComp);
    UpdateReservFrom;
    
    OnAfterSetProdOrderComponent(Rec,ReservEntry); <=====================
Page<Reservation>.PROCEDURE<OnAfterSetProdOrderLine>
  Raised in: Page<Reservation>.PROCEDURE<SetProdOrderLine>
    Code lines:
    ...
    ReservEntry."Shipment Date" := ProdOrderLine."Due Date";
    
    CaptionText := ReserveProdOrderLine.Caption(ProdOrderLine);
    UpdateReservFrom;
    
    OnAfterSetProdOrderLine(Rec,ReservEntry); <=====================
Page<Reservation>.PROCEDURE<OnAfterSetPurchLine>
  Raised in: Page<Reservation>.PROCEDURE<SetPurchLine>
    Code lines:
    ...
    ReservEntry."Shipment Date" := PurchLine."Expected Receipt Date";
    
    CaptionText := ReservePurchLine.Caption(PurchLine);
    UpdateReservFrom;
    
    OnAfterSetPurchLine(Rec,ReservEntry); <=====================
Page<Reservation>.PROCEDURE<OnAfterSetReqLine>
  Raised in: Page<Reservation>.PROCEDURE<SetReqLine>
    Code lines:
    ...
    ReservEntry."Shipment Date" := ReqLine."Due Date";
    
    CaptionText := ReserveReqLine.Caption(ReqLine);
    UpdateReservFrom;
    
    OnAfterSetReqLine(Rec,ReservEntry); <=====================
Page<Reservation>.PROCEDURE<OnAfterSetSalesLine>
  Raised in: Page<Reservation>.PROCEDURE<SetSalesLine>
    Code lines:
    ...
    ReservEntry."Shipment Date" := SalesLine."Shipment Date";
    
    CaptionText := ReserveSalesLine.Caption(SalesLine);
    UpdateReservFrom;
    
    OnAfterSetSalesLine(Rec,ReservEntry); <=====================
Page<Reservation>.PROCEDURE<OnAfterSetServiceLine>
  Raised in: Page<Reservation>.PROCEDURE<SetServiceLine>
    Code lines:
    ...
    ReservEntry."Shipment Date" := ServiceLine."Needed by Date";
    
    CaptionText := ReserveServiceLine.Caption(ServiceLine);
    UpdateReservFrom;
    
    OnAfterSetServiceLine(Rec,ReservEntry); <=====================
Page<Reservation>.PROCEDURE<OnAfterSetTransLine>
  Raised in: Page<Reservation>.PROCEDURE<SetTransLine>
    Code lines:
    ...
    ReservEntry."Qty. per Unit of Measure" := CurrentTransLine."Qty. per Unit of Measure";
    
    CaptionText := ReserveTransLine.Caption(TransLine);
    UpdateReservFrom;
    
    OnAfterSetTransLine(Rec,ReservEntry); <=====================
Page<Reservation>.PROCEDURE<OnAfterUpdateReservFrom>
  Raised in: Page<Reservation>.PROCEDURE<UpdateReservFrom>
    Code lines:
    ...
      Rec := EntrySummary;
    END;
    
    UpdateNonSpecific; // Late Binding
    
    OnAfterUpdateReservFrom; <=====================
    
    IF FormIsOpen THEN
      CurrPage.UPDATE;
Page<Reservation>.PROCEDURE<OnFilterReservEntryOnAfterFilterSource>
  Raised in: Page<Reservation>.PROCEDURE<FilterReservEntry>
    Code lines:
    ...
          FilterReservEntry.SETRANGE("Source Type",DATABASE::"Assembly Line");
          FilterReservEntry.SETRANGE("Source Subtype",FromReservSummEntry."Entry No." - 151);
        END;
    END;
    
    OnFilterReservEntryOnAfterFilterSource(FilterReservEntry,FromReservSummEntry,ReservEntry); <=====================
    
    FilterReservEntry.SETRANGE(
      "Reservation Status",FilterReservEntry."Reservation Status"::Reservation);
    FilterReservEntry.SETRANGE("Location Code",ReservEntry."Location Code");
    ...
Page<Available - Sales Lines>.PROCEDURE<OnAfterUpdateReservFrom>
  Raised in: Page<Available - Sales Lines>.PROCEDURE<UpdateReservFrom>
    Code lines:
    ...
          JobPlanningLine.FIND;
          SetJobPlanningLine(JobPlanningLine,ReservEntry);
        END;
    END;
    
    OnAfterUpdateReservFrom; <=====================
Page<Available - Sales Lines>.PROCEDURE<OnAfterUpdateReservMgt>
  Raised in: Page<Available - Sales Lines>.PROCEDURE<UpdateReservMgt>
    Code lines:
    ...
        ReservMgt.SetServLine(ServiceInvLine);
      DATABASE::"Job Planning Line":
        ReservMgt.SetJobPlanningLine(JobPlanningLine);
    END;
    
    OnAfterUpdateReservMgt; <=====================
Page<Available - Requisition Lines>.PROCEDURE<OnAfterUpdateReservFrom>
  Raised in: Page<Available - Requisition Lines>.PROCEDURE<UpdateReservFrom>
    Code lines:
    ...
          JobPlanningLine.FIND;
          SetJobPlanningLine(JobPlanningLine,ReservEntry);
        END;
    END;
    
    OnAfterUpdateReservFrom; <=====================
Page<Available - Requisition Lines>.PROCEDURE<OnAfterUpdateReservMgt>
  Raised in: Page<Available - Requisition Lines>.PROCEDURE<UpdateReservMgt>
    Code lines:
    ...
        ReservMgt.SetServLine(ServLine);
      DATABASE::"Job Planning Line":
        ReservMgt.SetJobPlanningLine(JobPlanningLine);
    END;
    
    OnAfterUpdateReservMgt; <=====================
Page<Available - Purchase Lines>.PROCEDURE<OnAfterOpenPage>
  Raised in: Page<Available - Purchase Lines>.<OnOpenPage>
    Code lines:
    ...
          SETFILTER("Quantity (Base)",'<0')
        ELSE
          SETFILTER("Quantity (Base)",'>0');
    END;
    
    OnAfterOpenPage(Rec,ReservEntry); <=====================
Page<Available - Purchase Lines>.PROCEDURE<OnAfterUpdateReservFrom>
  Raised in: Page<Available - Purchase Lines>.PROCEDURE<UpdateReservFrom>
    Code lines:
    ...
          JobPlanningLine.FIND;
          SetJobPlanningLine(JobPlanningLine,ReservEntry);
        END;
    END;
    
    OnAfterUpdateReservFrom; <=====================
Page<Available - Purchase Lines>.PROCEDURE<OnAfterUpdateReservMgt>
  Raised in: Page<Available - Purchase Lines>.PROCEDURE<UpdateReservMgt>
    Code lines:
    ...
        ReservMgt.SetAssemblyLine(AssemblyLine);
      DATABASE::"Assembly Header":
        ReservMgt.SetAssemblyHeader(AssemblyHeader);
    END;
    
    OnAfterUpdateReservMgt; <=====================
Page<Available - Purchase Lines>.PROCEDURE<OnBeforeFilterReservEntry>
  Raised in: Page<Available - Purchase Lines>.PROCEDURE<ReservedThisLine>
    Code lines:
    ReservEntry2.RESET;
    IF ReservEntry."Source Type" = DATABASE::"Transfer Line" THEN
      ReservEntry."Source Subtype" := Direction;
    OnBeforeFilterReservEntry(ReservEntry,Direction); <=====================
    ReservePurchLine.FilterReservFor(ReservEntry2,Rec);
    ReservEntry2.SETRANGE("Reservation Status",ReservEntry2."Reservation Status"::Reservation);
    EXIT(ReservMgt.MarkReservConnection(ReservEntry2,ReservEntry));
Page<Available - Item Ledg. Entries>.PROCEDURE<OnAfterUpdateReservFrom>
  Raised in: Page<Available - Item Ledg. Entries>.PROCEDURE<UpdateReservFrom>
    Code lines:
    ...
          AssemblyHeader.FIND;
          SetAssemblyHeader(AssemblyHeader,ReservEntry);
        END;
    END;
    
    OnAfterUpdateReservFrom; <=====================
Page<Available - Item Ledg. Entries>.PROCEDURE<OnAfterUpdateReservMgt>
  Raised in: Page<Available - Item Ledg. Entries>.PROCEDURE<UpdateReservMgt>
    Code lines:
    ...
      DATABASE::"Assembly Header":
        ReservMgt.SetAssemblyHeader(AssemblyHeader);
    END;
    ReservMgt.SetSerialLotNo(ReservEntry."Serial No.",ReservEntry."Lot No.");
    
    OnAfterUpdateReservMgt; <=====================
Page<Contact Card>.PROCEDURE<OnBeforePrintContactCoverSheet>
  Raised in: Page<Contact Card>.Action<ContactCoverSheet>.<OnAction>
    Code lines:
    Contact := Rec;
    Contact.SETRECFILTER;
    ContactCoverSheetReportID := REPORT::"Contact Cover Sheet";
    OnBeforePrintContactCoverSheet(ContactCoverSheetReportID); <=====================
    REPORT.RUN(ContactCoverSheetReportID,TRUE,FALSE,Contact);
Page<Blanket Sales Order>.PROCEDURE<OnBeforeStatisticsAction>
  Raised in: Page<Blanket Sales Order>.Action<Statistics>.<OnAction>
    Code lines:
    OnBeforeStatisticsAction(Rec,Handled); <=====================
    IF NOT Handled THEN BEGIN
      OpenSalesOrderStatistics;
      SalesCalcDiscByType.ResetRecalculateInvoiceDisc(Rec);
    END
Page<Blanket Sales Order Subform>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Blanket Sales Order Subform>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    IF TransferExtendedText.SalesCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      COMMIT;
      TransferExtendedText.InsertSalesExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      UpdateForm(TRUE);
Page<Blanket Sales Order Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
  Raised in: Page<Blanket Sales Order Subform>.<Control>.<OnLookup>
    Code lines:
    CrossReferenceNoLookUp;
    InsertExtendedText(FALSE);
    OnCrossReferenceNoOnLookup(Rec); <=====================
Page<Blanket Purchase Order Subform>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Blanket Purchase Order Subform>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    IF TransferExtendedText.PurchCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      TransferExtendedText.InsertPurchExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      UpdateForm(TRUE);
Page<Blanket Purchase Order Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
  Raised in: Page<Blanket Purchase Order Subform>.<Control>.<OnLookup>
    Code lines:
    CrossReferenceNoLookUp;
    InsertExtendedText(FALSE);
    OnCrossReferenceNoOnLookup(Rec); <=====================
Page<Contact Profile Answers>.PROCEDURE<OnAfterUpdateProfileAnswer>
  Raised in: Page<Contact Profile Answers>.PROCEDURE<UpdateProfileAnswer>
    Code lines:
    ...
      ContProfileAnswer.INSERT(TRUE);
    END ELSE
      IF ContProfileAnswer.GET(Cont."No.",CurrentQuestionsChecklistCode,"Line No.") THEN
        ContProfileAnswer.DELETE(TRUE);
    
    OnAfterUpdateProfileAnswer(Rec,xRec,Cont); <=====================
Page<Purchase Order Subform>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Purchase Order Subform>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    IF TransferExtendedText.PurchCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      TransferExtendedText.InsertPurchExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      UpdateForm(TRUE);
Page<Purchase Order Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
  Raised in: Page<Purchase Order Subform>.<Control>.<OnLookup>
    Code lines:
    CrossReferenceNoLookUp;
    InsertExtendedText(FALSE);
    NoOnAfterValidate;
    OnCrossReferenceNoOnLookup(Rec); <=====================
Page<Default Dimensions-Multiple>.PROCEDURE<OnBeforeSetCommonDefaultCopyFields>
  Raised in: Page<Default Dimensions-Multiple>.PROCEDURE<SetCommonDefaultDim>
    Code lines:
    ...
                 TempDefaultDim3."Table ID",TempDefaultDim3."No.","Dimension Code")
            THEN BEGIN
              DefaultDim."Dimension Code" := "Dimension Code";
              DefaultDim."Dimension Value Code" := "Dimension Value Code";
              DefaultDim."Value Posting" := "Value Posting";
              OnBeforeSetCommonDefaultCopyFields(DefaultDim,Rec); <=====================
              DefaultDim.MODIFY(TRUE);
            END ELSE BEGIN
              DefaultDim.INIT;
              DefaultDim."Table ID" := TempDefaultDim3."Table ID";
    ...
  Raised in: Page<Default Dimensions-Multiple>.PROCEDURE<SetCommonDefaultDim>
    Code lines:
    ...
                 TempDefaultDim3."Table ID",TempDefaultDim3."No.","Dimension Code")
            THEN BEGIN
              DefaultDim."Dimension Code" := "Dimension Code";
              DefaultDim."Dimension Value Code" := "Dimension Value Code";
              DefaultDim."Value Posting" := "Value Posting";
              OnBeforeSetCommonDefaultCopyFields(DefaultDim,Rec); <=====================
              DefaultDim.MODIFY(TRUE);
            END ELSE BEGIN
              DefaultDim.INIT;
              DefaultDim."Table ID" := TempDefaultDim3."Table ID";
    ...
Page<Purch. Invoice Subform>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Purch. Invoice Subform>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    IF TransferExtendedText.PurchCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      TransferExtendedText.InsertPurchExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      UpdateForm(TRUE);
Page<Purch. Invoice Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
  Raised in: Page<Purch. Invoice Subform>.<Control>.<OnLookup>
    Code lines:
    CrossReferenceNoLookUp;
    NoOnAfterValidate;
    OnCrossReferenceNoOnLookup(Rec); <=====================
Page<Item Charge Assignment (Sales)>.PROCEDURE<OnUpdateQtyAssgntOnAfterAssignableQty>
  Raised in: Page<Item Charge Assignment (Sales)>.PROCEDURE<UpdateQtyAssgnt>
    Code lines:
    SalesLine2.CALCFIELDS("Qty. to Assign","Qty. Assigned");
    AssignableQty := SalesLine2."Qty. to Invoice" + SalesLine2."Quantity Invoiced" - SalesLine2."Qty. Assigned";
    OnUpdateQtyAssgntOnAfterAssignableQty(SalesLine2,AssignableQty); <=====================
    
    IF AssignableQty <> 0 THEN
      UnitCost := AssignableAmount / AssignableQty
    ELSE
      UnitCost := 0;
    
    ItemChargeAssgntSales.RESET;
    ...
Page<Service Lines>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Service Lines>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    
    IF TransferExtendedText.ServCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      AddExtendedText := TRUE;
      CurrPage.SAVERECORD;
      AddExtendedText := FALSE;
      TransferExtendedText.InsertServExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      CurrPage.UPDATE;
Page<Service Item Worksheet Subform>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Service Item Worksheet Subform>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    IF TransferExtendedText.ServCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      TransferExtendedText.InsertServExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      CurrPage.UPDATE;
Page<Service Invoice Subform>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Service Invoice Subform>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    IF TransferExtendedText.ServCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      TransferExtendedText.InsertServExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      UpdateForm(TRUE);
Page<Service Credit Memo Subform>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Service Credit Memo Subform>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    IF TransferExtendedText.ServCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      TransferExtendedText.InsertServExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      UpdateForm(TRUE);
Page<Service Quote Lines>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Service Quote Lines>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    IF TransferExtendedText.ServCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      TransferExtendedText.InsertServExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      CurrPage.UPDATE;
Page<Available - Service Lines>.PROCEDURE<OnAfterUpdateReservFrom>
  Raised in: Page<Available - Service Lines>.PROCEDURE<UpdateReservFrom>
    Code lines:
    ...
          JobPlanningLine.FIND;
          SetJobPlanningLine(JobPlanningLine,ReservEntry);
        END;
    END;
    
    OnAfterUpdateReservFrom; <=====================
Page<Available - Service Lines>.PROCEDURE<OnAfterUpdateReservMgt>
  Raised in: Page<Available - Service Lines>.PROCEDURE<UpdateReservMgt>
    Code lines:
    ...
        ReservMgt.SetServLine(ServInvLine);
      DATABASE::"Assembly Header":
        ReservMgt.SetAssemblyHeader(AssemblyHeader);
    END;
    
    OnAfterUpdateReservMgt; <=====================
Page<Azure AD Access Dialog>.PROCEDURE<OnOAuthAccessDenied>
  Raised in: Page<Azure AD Access Dialog>.EVENT<AuthorizationErrorOccurred>
    Code lines:
    // OnOAuthAccessDenied event is raised if Auth fails because access is denied <=====================
    // Subcribe to this event if you want to respond to it
    // description contains AADSTS65004 error code if user denied the request and AADSTS65005 if the client
    // has not set up required permissions for the resource being requested
    IF error = 'access_denied' THEN
      OnOAuthAccessDenied(description,ResourceFriendlyName) <=====================
    ELSE BEGIN
      IF NOT AzureAdAppSetup.ISEMPTY THEN BEGIN
        AzureAdAppSetup.FINDFIRST;
        ActivityLog.LogActivityForUser(
    ...
Page<Item Tracking Summary>.PROCEDURE<OnAfterSetCurrentBinAndItemTrkgCode>
  Raised in: Page<Item Tracking Summary>.PROCEDURE<SetCurrentBinAndItemTrkgCode>
    Code lines:
    ItemTrackingDataCollection.SetCurrentBinAndItemTrkgCode(BinCode,ItemTrackingCode);
    BinContentVisible := BinCode <> '';
    CurrBinCode := BinCode;
    CurrItemTrackingCode := ItemTrackingCode;
    OnAfterSetCurrentBinAndItemTrkgCode(CurrBinCode,CurrItemTrackingCode,BinContentVisible,Rec,TempReservEntry); <=====================
Page<Item Tracking Summary>.PROCEDURE<OnBeforeAutoSelectTrackingNo>
  Raised in: Page<Item Tracking Summary>.PROCEDURE<AutoSelectTrackingNo>
    Code lines:
    IsHandled := FALSE;
    OnBeforeAutoSelectTrackingNo(Rec,MaxQuantity,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF MaxQuantity = 0 THEN
      EXIT;
    
    SelectedQty := MaxQuantity;
    IF FINDSET THEN
    ...
Page<Item Tracking Lines>.PROCEDURE<OnAddReservEntriesToTempRecSetOnBeforeInsert>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<AddReservEntriesToTempRecSet>
    Code lines:
    ...
                TempTrackingSpecification."Quantity (Base)";
              TempTrackingSpecification."Qty. to Handle (Base)" := 0;
              TempTrackingSpecification."Qty. to Invoice (Base)" := 0;
            END;
            TempTrackingSpecification."Buffer Status" := Color;
            OnAddReservEntriesToTempRecSetOnBeforeInsert(TempTrackingSpecification,ReservEntry); <=====================
            TempTrackingSpecification.INSERT;
          END;
        END;
      UNTIL ReservEntry.NEXT = 0;
Page<Item Tracking Lines>.PROCEDURE<OnAfterAssignNewTrackingNo>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<AssignSerialNoBatch>
    Code lines:
    ...
    ItemTrackingDataCollection.SetSkipLot(TRUE);
    FOR i := 1 TO QtyToCreate DO BEGIN
      VALIDATE("Quantity Handled (Base)",0);
      VALIDATE("Quantity Invoiced (Base)",0);
      VALIDATE("Serial No.",NoSeriesMgt.GetNextNo(Item."Serial Nos.",WORKDATE,TRUE));
      OnAfterAssignNewTrackingNo(Rec); <=====================
      VALIDATE("Quantity (Base)",QtySignFactor);
      "Entry No." := NextEntryNo;
      IF TestTempSpecificationExists THEN
        ERROR('');
    ...
  Raised in: Page<Item Tracking Lines>.PROCEDURE<AssignLotNo>
    Code lines:
    ...
    
    Item.TESTFIELD("Lot Nos.");
    VALIDATE("Quantity Handled (Base)",0);
    VALIDATE("Quantity Invoiced (Base)",0);
    VALIDATE("Lot No.",NoSeriesMgt.GetNextNo(Item."Lot Nos.",WORKDATE,TRUE));
    OnAfterAssignNewTrackingNo(Rec); <=====================
    "Qty. per Unit of Measure" := QtyPerUOM;
    VALIDATE("Quantity (Base)",QtyToCreate);
    "Entry No." := NextEntryNo;
    TestTempSpecificationExists;
    ...
  Raised in: Page<Item Tracking Lines>.PROCEDURE<CreateCustomizedSNBatch>
    Code lines:
    ...
    
    IF CreateLotNo THEN BEGIN
      TESTFIELD("Lot No.",'');
      Item.TESTFIELD("Lot Nos.");
      VALIDATE("Lot No.",NoSeriesMgt.GetNextNo(Item."Lot Nos.",WORKDATE,TRUE));
      OnAfterAssignNewTrackingNo(Rec); <=====================
    END;
    
    FOR i := 1 TO QtyToCreate DO BEGIN
      VALIDATE("Quantity Handled (Base)",0);
    ...
  Raised in: Page<Item Tracking Lines>.PROCEDURE<CreateCustomizedSNBatch>
    Code lines:
    ...
    
    IF CreateLotNo THEN BEGIN
      TESTFIELD("Lot No.",'');
      Item.TESTFIELD("Lot Nos.");
      VALIDATE("Lot No.",NoSeriesMgt.GetNextNo(Item."Lot Nos.",WORKDATE,TRUE));
      OnAfterAssignNewTrackingNo(Rec); <=====================
    END;
    
    FOR i := 1 TO QtyToCreate DO BEGIN
      VALIDATE("Quantity Handled (Base)",0);
    ...
Page<Item Tracking Lines>.PROCEDURE<OnAfterClearTrackingSpec>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<RegisterChange>
    Code lines:
    ...
            RegisterChange(OldTrackingSpecification,OldTrackingSpecification,
              ChangeType::Insert,NOT IdenticalArray[2]);
          END ELSE BEGIN
            TempReservEntry.SetTrackingFilterFromSpec(OldTrackingSpecification);
            OldTrackingSpecification.ClearTracking;
            OnAfterClearTrackingSpec(OldTrackingSpecification); <=====================
            QtyToAdd :=
              CurrentSignFactor *
              ReservEngineMgt.AddItemTrackingToTempRecSet(
                TempReservEntry,OldTrackingSpecification,
    ...
  Raised in: Page<Item Tracking Lines>.PROCEDURE<RegisterChange>
    Code lines:
    ...
            RegisterChange(OldTrackingSpecification,OldTrackingSpecification,
              ChangeType::Insert,NOT IdenticalArray[2]);
          END ELSE BEGIN
            TempReservEntry.SetTrackingFilterFromSpec(OldTrackingSpecification);
            OldTrackingSpecification.ClearTracking;
            OnAfterClearTrackingSpec(OldTrackingSpecification); <=====================
            QtyToAdd :=
              CurrentSignFactor *
              ReservEngineMgt.AddItemTrackingToTempRecSet(
                TempReservEntry,OldTrackingSpecification,
    ...
Page<Item Tracking Lines>.PROCEDURE<OnAfterCopyTrackingSpec>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<RegisterChange>
    Code lines:
    ...
    
            OldTrackingSpecification."Quantity (Base)" := QtyToAdd;
            OldTrackingSpecification."Warranty Date" := NewTrackingSpecification."Warranty Date";
            OldTrackingSpecification."Expiration Date" := NewTrackingSpecification."Expiration Date";
            OldTrackingSpecification.Description := NewTrackingSpecification.Description;
            OnAfterCopyTrackingSpec(NewTrackingSpecification,OldTrackingSpecification); <=====================
    
            RegisterChange(OldTrackingSpecification,OldTrackingSpecification,
              ChangeType::Insert,NOT IdenticalArray[2]);
          END ELSE BEGIN
    ...
  Raised in: Page<Item Tracking Lines>.PROCEDURE<RegisterItemTrackingLines>
    Code lines:
    ...
        IF FormRunMode = FormRunMode::Reclass THEN BEGIN
          "New Serial No." := TempTrackingSpecification."New Serial No.";
          "New Lot No." := TempTrackingSpecification."New Lot No.";
          "New Expiration Date" := TempTrackingSpecification."New Expiration Date"
        END;
        OnAfterCopyTrackingSpec(TempTrackingSpecification,Rec); <=====================
        VALIDATE("Quantity (Base)",TempTrackingSpecification."Quantity (Base)");
        "Entry No." := NextEntryNo;
        INSERT;
      END;
    ...
Page<Item Tracking Lines>.PROCEDURE<OnAfterCreateReservEntryFor>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<RegisterChange>
    Code lines:
    ...
            0,
            OldTrackingSpecification."Quantity (Base)",
            OldTrackingSpecification."Serial No.",
            OldTrackingSpecification."Lot No.");
    
          OnAfterCreateReservEntryFor(OldTrackingSpecification,NewTrackingSpecification); <=====================
    
          CreateReservEntry.CreateEntry(OldTrackingSpecification."Item No.",
            OldTrackingSpecification."Variant Code",
            OldTrackingSpecification."Location Code",
    ...
Page<Item Tracking Lines>.PROCEDURE<OnAfterGetHandleSource>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<GetInvoiceSource>
    Code lines:
    ...
          DATABASE::"Prod. Order Line",
          DATABASE::"Prod. Order Component"]) OR
        (("Source Type" IN [DATABASE::"Sales Line",DATABASE::"Purchase Line",DATABASE::"Service Line"]) AND
         ("Source Subtype" IN [0,2,3,4]))
    END;
    OnAfterGetHandleSource(TrackingSpecification,QtyToInvoiceColumnIsHidden); <=====================
    EXIT(NOT QtyToInvoiceColumnIsHidden);
Page<Item Tracking Lines>.PROCEDURE<OnAfterMoveFields>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<ModifyFieldsWithinFilter>
    Code lines:
    ...
        ReservEntry1."Warranty Date" := TrackingSpecification."Warranty Date";
        ReservEntry1."Expiration Date" := TrackingSpecification."Expiration Date";
        ReservEntry1."New Serial No." := TrackingSpecification."New Serial No.";
        ReservEntry1."New Lot No." := TrackingSpecification."New Lot No.";
        ReservEntry1."New Expiration Date" := TrackingSpecification."New Expiration Date";
        OnAfterMoveFields(TrackingSpecification,ReservEntry1); <=====================
        ReservEntry1.MODIFY;
      UNTIL ReservEntry1.NEXT = 0;
Page<Item Tracking Lines>.PROCEDURE<OnAfterRegisterItemTrackingLines>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<RegisterItemTrackingLines>
    Code lines:
    ...
        VALIDATE("Quantity (Base)",TempTrackingSpecification."Quantity (Base)");
        "Entry No." := NextEntryNo;
        INSERT;
      END;
    UNTIL TempTrackingSpecification.NEXT = 0;
    OnAfterRegisterItemTrackingLines(SourceSpecification,TempTrackingSpecification,Rec,AvailabilityDate); <=====================
    
    RESET;
    IF FIND('-') THEN
      REPEAT
    ...
Page<Item Tracking Lines>.PROCEDURE<OnAfterSetSourceSpec>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<SetSourceSpec>
    Code lines:
    ...
    ItemTrackingDataCollection.RetrieveLookupData(Rec,FALSE);
    
    FunctionsDemandVisible := CurrentSignFactor * SourceQuantityArray[1] < 0;
    FunctionsSupplyVisible := NOT FunctionsDemandVisible;
    
    OnAfterSetSourceSpec(TrackingSpecification,Rec,AvailabilityDate,BlockCommit); <=====================
Page<Item Tracking Lines>.PROCEDURE<OnBeforeSetSourceSpec>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<SetSourceSpec>
    Code lines:
    OnBeforeSetSourceSpec(TrackingSpecification,ReservEntry); <=====================
    
    GetItem(TrackingSpecification."Item No.");
    ForBinCode := TrackingSpecification."Bin Code";
    SetFilters(TrackingSpecification);
    TempTrackingSpecification.DELETEALL;
    TempItemTrackLineInsert.DELETEALL;
    TempItemTrackLineModify.DELETEALL;
    TempItemTrackLineDelete.DELETEALL;
    
    ...
Page<Item Tracking Lines>.PROCEDURE<OnBeforeWriteToDatabase>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<WriteToDatabase>
    Code lines:
    OnBeforeWriteToDatabase(Rec,CurrentPageIsOpen); <=====================
    IF CurrentPageIsOpen THEN BEGIN
      TempReservEntry.LOCKTABLE;
      TempRecValid;
    
      IF Item."Order Tracking Policy" = Item."Order Tracking Policy"::None THEN
        QtyToAddAsBlank := 0
      ELSE
        QtyToAddAsBlank := UndefinedQtyArray[1] * CurrentSignFactor;
    
    ...
Page<Item Tracking Lines>.PROCEDURE<OnRegisterChangeOnAfterCreateReservEntry>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<RegisterChange>
    Code lines:
    ...
            OldTrackingSpecification."Location Code",
            OldTrackingSpecification.Description,
            ExpectedReceiptDate,
            ShipmentDate,0,CurrentEntryStatus);
          CreateReservEntry.GetLastEntry(ReservEntry1);
          OnRegisterChangeOnAfterCreateReservEntry(ReservEntry1,NewTrackingSpecification); <=====================
    
          IF Item."Order Tracking Policy" = Item."Order Tracking Policy"::"Tracking & Action Msg." THEN
            ReservEngineMgt.UpdateActionMessages(ReservEntry1);
    
    ...
Page<Item Tracking Lines>.PROCEDURE<OnSelectEntriesOnAfterTransferFields>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<SelectEntries>
    Code lines:
    ...
            BEGIN
              IF TempItemTrackLineModify.GET("Entry No.") THEN
                TempItemTrackLineModify.DELETE;
              IF TempItemTrackLineInsert.GET("Entry No.") THEN BEGIN
                TempItemTrackLineInsert.TRANSFERFIELDS(Rec);
                OnSelectEntriesOnAfterTransferFields(TempItemTrackLineInsert,Rec); <=====================
                TempItemTrackLineInsert.MODIFY;
              END ELSE BEGIN
                TempItemTrackLineModify.TRANSFERFIELDS(Rec);
                OnSelectEntriesOnAfterTransferFields(TempItemTrackLineModify,Rec); <=====================
    ...
  Raised in: Page<Item Tracking Lines>.PROCEDURE<SelectEntries>
    Code lines:
    ...
            BEGIN
              IF TempItemTrackLineModify.GET("Entry No.") THEN
                TempItemTrackLineModify.DELETE;
              IF TempItemTrackLineInsert.GET("Entry No.") THEN BEGIN
                TempItemTrackLineInsert.TRANSFERFIELDS(Rec);
                OnSelectEntriesOnAfterTransferFields(TempItemTrackLineInsert,Rec); <=====================
                TempItemTrackLineInsert.MODIFY;
              END ELSE BEGIN
                TempItemTrackLineModify.TRANSFERFIELDS(Rec);
                OnSelectEntriesOnAfterTransferFields(TempItemTrackLineModify,Rec); <=====================
    ...
  Raised in: Page<Item Tracking Lines>.PROCEDURE<SelectEntries>
    Code lines:
    ...
            BEGIN
              IF TempItemTrackLineModify.GET("Entry No.") THEN
                TempItemTrackLineModify.DELETE;
              IF TempItemTrackLineInsert.GET("Entry No.") THEN BEGIN
                TempItemTrackLineInsert.TRANSFERFIELDS(Rec);
                OnSelectEntriesOnAfterTransferFields(TempItemTrackLineInsert,Rec); <=====================
                TempItemTrackLineInsert.MODIFY;
              END ELSE BEGIN
                TempItemTrackLineModify.TRANSFERFIELDS(Rec);
                OnSelectEntriesOnAfterTransferFields(TempItemTrackLineModify,Rec); <=====================
    ...
Page<Whse. Item Tracking Lines>.PROCEDURE<OnAfterSetSource>
  Raised in: Page<Whse. Item Tracking Lines>.PROCEDURE<SetSource>
    Code lines:
    ...
    SetControlsAsReclass;
    
    SetFilters(Rec,FormSourceType);
    ItemTrackingMgt.UpdateQuantities(
      WhseWorksheetLine,TotalWhseItemTrackingLine,SourceQuantityArray,UndefinedQtyArray,FormSourceType);
    OnAfterSetSource(WhseWorksheetLine,WhseWrkshLine,SourceType); <=====================
    UpdateColorOfQty;
Page<Sales Return Order>.PROCEDURE<OnBeforeStatisticsAction>
  Raised in: Page<Sales Return Order>.Action<Statistics>.<OnAction>
    Code lines:
    OnBeforeStatisticsAction(Rec,Handled); <=====================
    IF NOT Handled THEN BEGIN
      OpenSalesOrderStatistics;
      SalesCalcDiscByType.ResetRecalculateInvoiceDisc(Rec);
    END
Page<Sales Return Order Subform>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Sales Return Order Subform>.PROCEDURE<InsertExtendedText>
    Code lines:
    IsHandled := FALSE;
    OnBeforeInsertExtendedText(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF TransferExtendedText.SalesCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      COMMIT;
      TransferExtendedText.InsertSalesExtText(Rec);
    END;
    ...
Page<Sales Return Order Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
  Raised in: Page<Sales Return Order Subform>.<Control>.<OnLookup>
    Code lines:
    CrossReferenceNoLookUp;
    NoOnAfterValidate;
    OnCrossReferenceNoOnLookup(Rec); <=====================
Page<Purchase Return Order Subform>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Purchase Return Order Subform>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    IF TransferExtendedText.PurchCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      TransferExtendedText.InsertPurchExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      UpdateForm(TRUE);
Page<Purchase Return Order Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
  Raised in: Page<Purchase Return Order Subform>.<Control>.<OnLookup>
    Code lines:
    CrossReferenceNoLookUp;
    InsertExtendedText(FALSE);
    NoOnAfterValidate;
    OnCrossReferenceNoOnLookup(Rec); <=====================
Page<Return Shipment Lines>.PROCEDURE<OnOpenPageOnSetFilters>
  Raised in: Page<Return Shipment Lines>.<OnOpenPage>
    Code lines:
    FILTERGROUP(2);
    SETRANGE(Type,Type::Item);
    SETFILTER(Quantity,'<>0');
    SETRANGE(Correction,FALSE);
    SETRANGE("Job No.",'');
    OnOpenPageOnSetFilters(Rec); <=====================
    FILTERGROUP(0);
Page<Job Queue Log Entries>.PROCEDURE<OnShowDetails>
  Raised in: Page<Job Queue Log Entries>.Action<Details>.<OnAction>
    Code lines:
    OnShowDetails(Rec); <=====================
Page<Item Attribute Value List>.PROCEDURE<OnAfterItemAttributeValueMappingDelete>
  Raised in: Page<Item Attribute Value List>.PROCEDURE<DeleteItemAttributeValueMapping>
    Code lines:
    ItemAttributeValueMapping.SETRANGE("Table ID",DATABASE::Item);
    ItemAttributeValueMapping.SETRANGE("No.",RelatedRecordCode);
    ItemAttributeValueMapping.SETRANGE("Item Attribute ID",AttributeToDeleteID);
    IF ItemAttributeValueMapping.FINDFIRST THEN BEGIN
      ItemAttributeValueMapping.DELETE;
      OnAfterItemAttributeValueMappingDelete(AttributeToDeleteID,RelatedRecordCode); <=====================
    END;
    
    ItemAttribute.GET(AttributeToDeleteID);
    ItemAttribute.RemoveUnusedArbitraryValues;
Page<Item Attribute Value List>.PROCEDURE<OnBeforeItemAttributeValueMappingModify>
  Raised in: Page<Item Attribute Value List>.Control<Value>.<OnValidate>
    Code lines:
    ...
    ItemAttributeValueMapping.SETRANGE("No.",RelatedRecordCode);
    ItemAttributeValueMapping.SETRANGE("Item Attribute ID",ItemAttributeValue."Attribute ID");
    
    IF ItemAttributeValueMapping.FINDFIRST THEN BEGIN
      ItemAttributeValueMapping."Item Attribute Value ID" := ItemAttributeValue.ID;
      OnBeforeItemAttributeValueMappingModify(ItemAttributeValueMapping,ItemAttributeValue,RelatedRecordCode); <=====================
      ItemAttributeValueMapping.MODIFY;
    END;
    
    ItemAttribute.GET("Attribute ID");
    ...
Page<Invite External Accountant>.PROCEDURE<OnInvitationEnd>
  Raised in: Page<Invite External Accountant>.Action<ActionNext>.<OnAction>
    Code lines:
    IF Step = Step::DefineInformation THEN BEGIN
      IF (NewUserEmailAddress <> '') AND (NewFirstName <> '') AND (NewLastName <> '') AND (NewUserWelcomeEmail <> '') THEN BEGIN
        IF InviteExternalAccountant.InvokeEmailAddressIsAADAccount(NewUserEmailAddress,ErrorMessage) THEN BEGIN
          Invite;
          OnInvitationEnd(WasInvitationSuccessful,InvitationResult,InviteProgress); <=====================
          NextStep(FALSE);
        END ELSE
          ERROR(ErrorMessage);
      END ELSE
        ERROR(NotAllFieldsEnteredErrorErr);
    ...
Page<Invite External Accountant>.PROCEDURE<OnInvitationNoAADPermissionsFail>
  Raised in: Page<Invite External Accountant>.<OnOpenPage>
    Code lines:
    ...
      OnInvitationNoExternalAccountantLicenseFail;
      ERROR(NoExternalAccountantLicenseAvailableErr);
    END;
    
    IF NOT InviteExternalAccountant.InvokeIsUserAdministrator THEN BEGIN
      OnInvitationNoAADPermissionsFail; <=====================
      ERROR(NoAADPermissionsErr);
    END;
    
    IF NOT (NavUserAccountHelper.IsSessionAdminSession OR NavUserAccountHelper.IsUserSuperInAllCompanies) THEN BEGIN
    ...
Page<Invite External Accountant>.PROCEDURE<OnInvitationNoExternalAccountantLicenseFail>
  Raised in: Page<Invite External Accountant>.<OnOpenPage>
    Code lines:
    ...
    
    IF NOT InviteExternalAccountant.VerifySMTPIsEnabledAndSetup THEN
      ERROR(SMTPMustBeSetupErrorErr);
    
    IF NOT InviteExternalAccountant.InvokeIsExternalAccountantLicenseAvailable(ErrorMessage) THEN BEGIN
      OnInvitationNoExternalAccountantLicenseFail; <=====================
      ERROR(NoExternalAccountantLicenseAvailableErr);
    END;
    
    IF NOT InviteExternalAccountant.InvokeIsUserAdministrator THEN BEGIN
    ...
Page<Invite External Accountant>.PROCEDURE<OnInvitationNoUserTablePermissionsFail>
  Raised in: Page<Invite External Accountant>.<OnOpenPage>
    Code lines:
    ...
      OnInvitationNoAADPermissionsFail;
      ERROR(NoAADPermissionsErr);
    END;
    
    IF NOT (NavUserAccountHelper.IsSessionAdminSession OR NavUserAccountHelper.IsUserSuperInAllCompanies) THEN BEGIN
      OnInvitationNoUserTablePermissionsFail; <=====================
      ERROR(NoUserTableWritePermissionErr);
    END;
    
    ProgressWindow.CLOSE;
    ...
Page<Invite External Accountant>.PROCEDURE<OnInvitationStart>
  Raised in: Page<Invite External Accountant>.<OnOpenPage>
    Code lines:
    OnInvitationStart; <=====================
    IF NOT PermissionManager.SoftwareAsAService THEN
      ERROR(SaaSOnlyErrorErr);
    
    ProgressWindow.OPEN(WizardOpenValidationMsg);
    
    IF NOT InviteExternalAccountant.VerifySMTPIsEnabledAndSetup THEN
      ERROR(SMTPMustBeSetupErrorErr);
    
    IF NOT InviteExternalAccountant.InvokeIsExternalAccountantLicenseAvailable(ErrorMessage) THEN BEGIN
    ...
Page<My Settings>.PROCEDURE<OnBeforeLanguageChange>
  Raised in: Page<My Settings>.<OnQueryClosePage>
    Code lines:
    ...
            sessionSetting.PROFILEAPPID := ProfileAppID;
            sessionSetting.PROFILESYSTEMSCOPE := ProfileScope = ProfileScope::System;
          END;
    
          IF "Language ID" <> LanguageID THEN BEGIN
            OnBeforeLanguageChange("Language ID",LanguageID); <=====================
            sessionSetting.LANGUAGEID := LanguageID;
          END;
    
          IF "Locale ID" <> LocaleID THEN
    ...
Page<My Settings>.PROCEDURE<OnBeforeWorkdateChange>
  Raised in: Page<My Settings>.Control<NewWorkdate>.<OnValidate>
    Code lines:
    IF NewWorkdate <> WORKDATE THEN
      OnBeforeWorkdateChange(WORKDATE,NewWorkdate); <=====================
    
    WORKDATE := NewWorkdate;
Page<My Settings>.PROCEDURE<OnCompanyChange>
  Raised in: Page<My Settings>.Control<Company>.<OnAssistEdit>
    Code lines:
    ...
    
    AllowedCompanies.LOOKUPMODE(TRUE);
    
    IF AllowedCompanies.RUNMODAL = ACTION::LookupOK THEN BEGIN
      AllowedCompanies.GETRECORD(SelectedCompany);
      OnCompanyChange(SelectedCompany.Name,IsSetupInProgress); <=====================
      IF IsSetupInProgress THEN BEGIN
        VarCompany := COMPANYNAME;
        MESSAGE(STRSUBSTNO(CompanySetUpInProgressMsg,SelectedCompany.Name,PRODUCTNAME.SHORT));
      END ELSE
    ...
Page<My Settings>.PROCEDURE<OnQueryClosePageEvent>
  Raised in: Page<My Settings>.<OnQueryClosePage>
    Code lines:
    ...
      END;
    
      IF WasEvaluation AND IsTrial THEN
        MESSAGE(STRSUBSTNO(TrialStartMsg,PRODUCTNAME.MARKETING));
    
      OnQueryClosePageEvent(LanguageID,LocaleID,TimeZoneID,VarCompany,ProfileID); <=====================
    
      IF AnythingUpdated THEN
        sessionSetting.REQUESTSESSIONUPDATE(TRUE);
    END;
Page<My Settings>.PROCEDURE<OnUserRoleCenterChange>
  Raised in: Page<My Settings>.Control<UserRoleCenter>.<OnAssistEdit>
    Code lines:
    ...
        ProfileAppID := AllProfile."App ID";
        ProfileScope := AllProfile.Scope;
      END;
    END;
    
    OnUserRoleCenterChange(ProfileID); <=====================
    UserPersonalizationCard.SetExperienceToEssential(ProfileID);
Page<Available - Assembly Headers>.PROCEDURE<OnAfterUpdateReservFrom>
  Raised in: Page<Available - Assembly Headers>.PROCEDURE<UpdateReservFrom>
    Code lines:
    ...
          JobPlanningLine.FIND;
          SetJobPlanningLine(JobPlanningLine,ReservEntry);
        END;
    END;
    
    OnAfterUpdateReservFrom; <=====================
Page<Available - Assembly Headers>.PROCEDURE<OnAfterUpdateReservMgt>
  Raised in: Page<Available - Assembly Headers>.PROCEDURE<UpdateReservMgt>
    Code lines:
    ...
        ReservMgt.SetJobPlanningLine(JobPlanningLine);
      DATABASE::"Assembly Line":
        ReservMgt.SetAssemblyLine(AssemblyLine);
    END;
    
    OnAfterUpdateReservMgt; <=====================
Page<Available - Assembly Lines>.PROCEDURE<OnAfterUpdateReservFrom>
  Raised in: Page<Available - Assembly Lines>.PROCEDURE<UpdateReservFrom>
    Code lines:
    ...
          JobPlanningLine.FIND;
          SetJobPlanningLine(JobPlanningLine,ReservEntry);
        END;
    END;
    
    OnAfterUpdateReservFrom; <=====================
Page<Available - Assembly Lines>.PROCEDURE<OnAfterUpdateReservMgt>
  Raised in: Page<Available - Assembly Lines>.PROCEDURE<UpdateReservMgt>
    Code lines:
    ...
        ReservMgt.SetServLine(ServiceLine);
      DATABASE::"Assembly Header":
        ReservMgt.SetAssemblyHeader(AssemblyHeader);
    END;
    
    OnAfterUpdateReservMgt; <=====================
Page<Sales Quote Subform>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Sales Quote Subform>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    IF TransferExtendedText.SalesCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      COMMIT;
      TransferExtendedText.InsertSalesExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      UpdateForm(TRUE);
Page<Sales Quote Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
  Raised in: Page<Sales Quote Subform>.<Control>.<OnLookup>
    Code lines:
    CrossReferenceNoLookUp;
    InsertExtendedText(FALSE);
    NoOnAfterValidate;
    OnCrossReferenceNoOnLookup(Rec); <=====================
Page<Time Sheet>.PROCEDURE<OnAfterFilterAllLines>
  Raised in: Page<Time Sheet>.PROCEDURE<FilterAllLines>
    Code lines:
    ...
        TimeSheetLine.SETFILTER(Status,'%1|%2',TimeSheetLine.Status::Open,TimeSheetLine.Status::Rejected);
      ActionType::Reopen:
        TimeSheetLine.SETRANGE(Status,TimeSheetLine.Status::Submitted);
    END;
    
    OnAfterFilterAllLines(TimeSheetLine,ActionType); <=====================
Page<Time Sheet>.PROCEDURE<OnAfterProcess>
  Raised in: Page<Time Sheet>.PROCEDURE<Process>
    Code lines:
    ...
          Action::"Reopen Selected",
          Action::"Reopen All":
            TimeSheetApprovalMgt.ReopenSubmitted(TimeSheetLine);
        END;
      UNTIL TimeSheetLine.NEXT = 0;
    OnAfterProcess(TempTimeSheetLine,Action); <=====================
    CurrPage.UPDATE(TRUE);
Page<Time Sheet>.PROCEDURE<OnProcessOnAfterTimeSheetLinesFiltered>
  Raised in: Page<Time Sheet>.PROCEDURE<Process>
    Code lines:
    ...
      Action::"Reopen All":
        FilterAllLines(TimeSheetLine,ActionType::Reopen);
      ELSE
        CurrPage.SETSELECTIONFILTER(TimeSheetLine);
    END;
    OnProcessOnAfterTimeSheetLinesFiltered(TimeSheetLine,Action); <=====================
    TimeSheetMgt.CopyFilteredTimeSheetLinesToBuffer(TimeSheetLine,TempTimeSheetLine);
    IF TimeSheetLine.FINDSET THEN
      REPEAT
        CASE Action OF
    ...
Page<Manager Time Sheet>.PROCEDURE<OnAfterFilterAllLines>
  Raised in: Page<Manager Time Sheet>.PROCEDURE<FilterAllLines>
    Code lines:
    ...
        TimeSheetLine.SETRANGE(Status,TimeSheetLine.Status::Submitted);
      ActionType::Reopen:
        TimeSheetLine.SETRANGE(Status,TimeSheetLine.Status::Approved);
    END;
    
    OnAfterFilterAllLines(TimeSheetLine,ActionType); <=====================
Page<Manager Time Sheet>.PROCEDURE<OnAfterProcess>
  Raised in: Page<Manager Time Sheet>.PROCEDURE<Process>
    Code lines:
    ...
          Action::"Reject Selected",
          Action::"Reject All":
            TimeSheetApprovalMgt.Reject(TimeSheetLine);
        END;
      UNTIL TimeSheetLine.NEXT = 0;
    OnAfterProcess(TempTimeSheetLine,Action); <=====================
    CurrPage.UPDATE(FALSE);
Page<Manager Time Sheet>.PROCEDURE<OnProcessOnAfterTimeSheetLinesFiltered>
  Raised in: Page<Manager Time Sheet>.PROCEDURE<Process>
    Code lines:
    ...
      Action::"Reopen All":
        FilterAllLines(TimeSheetLine,ActionType::Reopen);
      ELSE
        CurrPage.SETSELECTIONFILTER(TimeSheetLine);
    END;
    OnProcessOnAfterTimeSheetLinesFiltered(TimeSheetLine,Action); <=====================
    TimeSheetMgt.CopyFilteredTimeSheetLinesToBuffer(TimeSheetLine,TempTimeSheetLine);
    IF TimeSheetLine.FINDSET THEN
      REPEAT
        CASE Action OF
    ...
Page<Manager Time Sheet by Job>.PROCEDURE<OnAfterFilterAllLines>
  Raised in: Page<Manager Time Sheet by Job>.PROCEDURE<FilterAllLines>
    Code lines:
    ...
        TimeSheetLine.SETRANGE(Status,TimeSheetLine.Status::Submitted);
      ActionType::Reopen:
        TimeSheetLine.SETRANGE(Status,TimeSheetLine.Status::Approved);
    END;
    
    OnAfterFilterAllLines(TimeSheetLine,ActionType); <=====================
Page<Manager Time Sheet by Job>.PROCEDURE<OnAfterProcess>
  Raised in: Page<Manager Time Sheet by Job>.PROCEDURE<Process>
    Code lines:
    ...
          Action::"Reject Selected",
          Action::"Reject All":
            TimeSheetApprovalMgt.Reject(TimeSheetLine);
        END;
      UNTIL TimeSheetLine.NEXT = 0;
    OnAfterProcess(TempTimeSheetLine,Action); <=====================
    CurrPage.UPDATE(FALSE);
Page<Manager Time Sheet by Job>.PROCEDURE<OnProcessOnAfterTimeSheetLinesFiltered>
  Raised in: Page<Manager Time Sheet by Job>.PROCEDURE<Process>
    Code lines:
    ...
      Action::"Reopen All":
        FilterAllLines(TimeSheetLine,ActionType::Reopen);
      ELSE
        CurrPage.SETSELECTIONFILTER(TimeSheetLine);
    END;
    OnProcessOnAfterTimeSheetLinesFiltered(TimeSheetLine,Action); <=====================
    TimeSheetMgt.CopyFilteredTimeSheetLinesToBuffer(TimeSheetLine,TempTimeSheetLine);
    IF TimeSheetLine.FINDSET THEN
      REPEAT
        CASE Action OF
    ...
Page<Sales Cr. Memo Subform>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Sales Cr. Memo Subform>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    IF TransferExtendedText.SalesCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      COMMIT;
      TransferExtendedText.InsertSalesExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      UpdateForm(TRUE);
Page<Sales Cr. Memo Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
  Raised in: Page<Sales Cr. Memo Subform>.<Control>.<OnLookup>
    Code lines:
    CrossReferenceNoLookUp;
    InsertExtendedText(FALSE);
    NoOnAfterValidate;
    OnCrossReferenceNoOnLookup(Rec); <=====================
Page<Purchase Quote Subform>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Purchase Quote Subform>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    IF TransferExtendedText.PurchCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      TransferExtendedText.InsertPurchExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      UpdateForm(TRUE);
Page<Purchase Quote Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
  Raised in: Page<Purchase Quote Subform>.<Control>.<OnLookup>
    Code lines:
    CrossReferenceNoLookUp;
    InsertExtendedText(FALSE);
    NoOnAfterValidate;
    OnCrossReferenceNoOnLookup(Rec); <=====================
Page<Purch. Cr. Memo Subform>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Purch. Cr. Memo Subform>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    IF TransferExtendedText.PurchCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      TransferExtendedText.InsertPurchExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      UpdateForm(TRUE);
Page<Purch. Cr. Memo Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
  Raised in: Page<Purch. Cr. Memo Subform>.<Control>.<OnLookup>
    Code lines:
    CrossReferenceNoLookUp;
    InsertExtendedText(FALSE);
    NoOnAfterValidate;
    OnCrossReferenceNoOnLookup(Rec); <=====================
Page<Effective Permissions>.PROCEDURE<OnEffectivePermissionsPopulated>
  Raised in: Page<Effective Permissions>.PROCEDURE<FillByObject>
    Code lines:
    ...
    LastUsedUserID := CurrentUserID;
    LastUsedCompanyName := CurrentCompanyName;
    LastUsedObjectType := CurrentObjectType;
    LastUsedObjectId := CurrentObjectId;
    LastUsedShowAllObjects := ShowAllObjects;
    OnEffectivePermissionsPopulated(CurrentUserID,CurrentCompanyName,CurrentObjectType,CurrentObjectId); <=====================
Page<Available - Transfer Lines>.PROCEDURE<OnAfterUpdateReservFrom>
  Raised in: Page<Available - Transfer Lines>.PROCEDURE<UpdateReservFrom>
    Code lines:
    ...
          JobPlanningLine.FIND;
          SetJobPlanningLine(JobPlanningLine,ReservEntry);
        END;
    END;
    
    OnAfterUpdateReservFrom; <=====================
Page<Available - Transfer Lines>.PROCEDURE<OnAfterUpdateReservMgt>
  Raised in: Page<Available - Transfer Lines>.PROCEDURE<UpdateReservMgt>
    Code lines:
    ...
        ReservMgt.SetServLine(ServiceInvLine);
      DATABASE::"Job Planning Line":
        ReservMgt.SetJobPlanningLine(JobPlanningLine);
    END;
    
    OnAfterUpdateReservMgt; <=====================
Page<Available - Prod. Order Lines>.PROCEDURE<OnAfterUpdateReservFrom>
  Raised in: Page<Available - Prod. Order Lines>.PROCEDURE<UpdateReservFrom>
    Code lines:
    ...
          JobPlanningLine.FIND;
          SetJobPlanningLine(JobPlanningLine,ReservEntry);
        END;
    END;
    
    OnAfterUpdateReservFrom; <=====================
Page<Available - Prod. Order Lines>.PROCEDURE<OnAfterUpdateReservMgt>
  Raised in: Page<Available - Prod. Order Lines>.PROCEDURE<UpdateReservMgt>
    Code lines:
    ...
        ReservMgt.SetJobPlanningLine(JobPlanningLine);
      DATABASE::"Assembly Line":
        ReservMgt.SetAssemblyLine(AssemblyLine);
    END;
    
    OnAfterUpdateReservMgt; <=====================
Page<Available - Prod. Order Comp.>.PROCEDURE<OnAfterUpdateReservFrom>
  Raised in: Page<Available - Prod. Order Comp.>.PROCEDURE<UpdateReservFrom>
    Code lines:
    ...
          JobPlanningLine.FIND;
          SetJobPlanningLine(JobPlanningLine,ReservEntry);
        END;
    END;
    
    OnAfterUpdateReservFrom; <=====================
Page<Available - Prod. Order Comp.>.PROCEDURE<OnAfterUpdateReservMgt>
  Raised in: Page<Available - Prod. Order Comp.>.PROCEDURE<UpdateReservMgt>
    Code lines:
    ...
        ReservMgt.SetTransferLine(TransLine,ReservEntry."Source Subtype");
      DATABASE::"Service Line":
        ReservMgt.SetServLine(ServiceInvLine);
    END;
    
    OnAfterUpdateReservMgt; <=====================
Page<Avail. - Planning Components>.PROCEDURE<OnAfterUpdateReservFrom>
  Raised in: Page<Avail. - Planning Components>.PROCEDURE<UpdateReservFrom>
    Code lines:
    ...
          JobPlanningLine.FIND;
          SetJobPlanningLine(JobPlanningLine,ReservEntry);
        END;
    END;
    
    OnAfterUpdateReservFrom; <=====================
Page<Avail. - Planning Components>.PROCEDURE<OnAfterUpdateReservMgt>
  Raised in: Page<Avail. - Planning Components>.PROCEDURE<UpdateReservMgt>
    Code lines:
    ...
        ReservMgt.SetTransferLine(TransLine,ReservEntry."Source Subtype");
      DATABASE::"Service Line":
        ReservMgt.SetServLine(ServiceInvLine);
    END;
    
    OnAfterUpdateReservMgt; <=====================
Page<Item Availability Line List>.PROCEDURE<OnAfterLookupEntries>
  Raised in: Page<Item Availability Line List>.PROCEDURE<LookupEntries>
    Code lines:
    ...
        END;
      ELSE
        OnLookupExtensionTable(Item,"Table No.");
    END;
    
    OnAfterLookupEntries(Item,"Table No."); <=====================
Page<Item Availability Line List>.PROCEDURE<OnAfterMakeEntries>
  Raised in: Page<Item Availability Line List>.PROCEDURE<MakeEntries>
    Code lines:
    ...
            AssemblyHeader.TABLECAPTION,
            Item."Qty. on Assembly Order");
        END;
    END;
    
    OnAfterMakeEntries(Item,Rec,AvailType,Sign); <=====================
Page<Item Availability Line List>.PROCEDURE<OnItemCalcFields>
  Raised in: Page<Item Availability Line List>.PROCEDURE<MakeWhat>
    Code lines:
    ...
        "Qty. on Assembly Order",
        "Qty. on Asm. Component",
        "Qty. on Purch. Return",
        "Qty. on Sales Return");
    
      OnItemCalcFields(Item); <=====================
    
      IF Item.Inventory <> 0 THEN BEGIN
        "Table No." := DATABASE::"Item Ledger Entry";
        QuerySource := Item.FIELDNO(Inventory);
    ...
Page<Item Availability Line List>.PROCEDURE<OnItemLedgerEntrySetFilter>
  Raised in: Page<Item Availability Line List>.PROCEDURE<LookupEntries>
    Code lines:
    ...
          ItemLedgerEntry.SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
          ItemLedgerEntry.SETFILTER("Drop Shipment",Item.GETFILTER("Drop Shipment Filter"));
          ItemLedgerEntry.SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
          ItemLedgerEntry.SETFILTER("Global Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
          ItemLedgerEntry.SETFILTER("Global Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
          OnItemLedgerEntrySetFilter(ItemLedgerEntry); <=====================
          PAGE.RUNMODAL(0,ItemLedgerEntry);
        END;
      DATABASE::"Sales Line":
        BEGIN
    ...
Page<Item Availability Line List>.PROCEDURE<OnItemSetFilter>
  Raised in: Page<Item Availability Line List>.PROCEDURE<MakeWhat>
    Code lines:
    Sign := 1;
    IF AvailType <> AvailType::All THEN
      MakeEntries
    ELSE BEGIN
      Item.SETRANGE("Date Filter",0D,Item.GETRANGEMAX("Date Filter"));
      OnItemSetFilter(Item); <=====================
      Item.CALCFIELDS(
        "Qty. on Purch. Order",
        "Qty. on Sales Order",
        "Qty. on Service Order",
    ...
Page<Item Availability Line List>.PROCEDURE<OnLookupExtensionTable>
  Raised in: Page<Item Availability Line List>.PROCEDURE<LookupEntries>
    Code lines:
    ...
        BEGIN
          AssemblyLine.FindLinesWithItemToPlan(Item,AssemblyHeader."Document Type"::Order);
          PAGE.RUNMODAL(0,AssemblyLine);
        END;
      ELSE
        OnLookupExtensionTable(Item,"Table No."); <=====================
    END;
    
    OnAfterLookupEntries(Item,"Table No.");
Report<Post Inventory Cost to G/L>.PROCEDURE<OnBeforePreReport>
  Raised in: Report<Post Inventory Cost to G/L>.<OnPreReport>
    Code lines:
    OnBeforePreReport; <=====================
    
    ValueEntryFilter := PostValueEntryToGL.GETFILTERS;
    InvtSetup.GET;
Report<Copy Cost Acctg. Budget to G/L>.PROCEDURE<OnAfterUpdateBudgetDimensions>
  Raised in: Report<Copy Cost Acctg. Budget to G/L>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
      GLBudgetEntryTarget.UpdateDimSet(TempDimSetEntry,CostAccSetup."Cost Center Dimension","Cost Center Code");
    IF CostAccMgt.CostObjectExistsAsDimValue("Cost Object Code") THEN
      GLBudgetEntryTarget.UpdateDimSet(TempDimSetEntry,CostAccSetup."Cost Object Dimension","Cost Object Code");
    GLBudgetEntryTarget."Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry);
    UpdateBudgetDimensions(GLBudgetEntryTarget);
    OnAfterUpdateBudgetDimensions(GLBudgetEntryTarget); <=====================
    
    GLBudgetEntryTarget.Description :=
      COPYSTR(STRSUBSTNO(Text006,GETFILTER("Budget Name")),1,MAXSTRLEN(GLBudgetEntryTarget.Description));
    GLBudgetEntryTarget."User ID" := USERID;
    ...
Report<Standard Sales - Pro Forma Inv>.PROCEDURE<OnAfterLineOnPreDataItem>
  Raised in: Report<Standard Sales - Pro Forma Inv>.DataItem<Line>.<OnPreDataItem>
    Code lines:
    ...
    TotalAmount := 0;
    TotalVATAmount := 0;
    TotalAmountInclVAT := 0;
    SETRANGE(Type,Type::Item);
    
    OnAfterLineOnPreDataItem(Header,Line); <=====================
Report<Standard Sales - Pro Forma Inv>.PROCEDURE<OnBeforeLineOnAfterGetRecord>
  Raised in: Report<Standard Sales - Pro Forma Inv>.DataItem<Line>.<OnAfterGetRecord>
    Code lines:
    Item.GET("No.");
    OnBeforeLineOnAfterGetRecord(Header,Line); <=====================
    
    IF Quantity = 0 THEN BEGIN
      LinePrice := "Unit Price";
      LineAmount := 0;
      VATAmount := 0;
    END ELSE BEGIN
      LinePrice := ROUND(Amount / Quantity);
      LineAmount := ROUND(Amount * "Qty. to Invoice" / Quantity);
    ...
Report<Standard Sales - Draft Invoice>.PROCEDURE<OnAfterSalesPostGetSalesLines>
  Raised in: Report<Standard Sales - Draft Invoice>.DataItem<Header>.<OnAfterGetRecord>
    Code lines:
    ...
    VATAmountLine.DELETEALL;
    VATClauseLine.DELETEALL;
    Line.DELETEALL;
    CLEAR(SalesPost);
    SalesPost.GetSalesLines(Header,Line,0);
    OnAfterSalesPostGetSalesLines(Header,Line); <=====================
    
    Line.CalcVATAmountLines(0,Header,Line,VATAmountLine);
    Line.UpdateVATOnLines(0,Header,Line,VATAmountLine);
    
    ...
Report<Standard Sales - Invoice>.PROCEDURE<OnAfterLineOnPreDataItem>
  Raised in: Report<Standard Sales - Invoice>.DataItem<Line>.<OnPreDataItem>
    Code lines:
    ...
    TransHeaderAmount := 0;
    PrevLineAmount := 0;
    FirstLineHasBeenOutput := FALSE;
    CompanyInfo.Picture := TempBlobCompanyLogo.Blob;
    
    OnAfterLineOnPreDataItem(Header,Line); <=====================
Report<Standard Sales - Invoice>.PROCEDURE<OnBeforeGetDocumentCaption>
  Raised in: Report<Standard Sales - Invoice>.PROCEDURE<DocumentCaption>
    Code lines:
    OnBeforeGetDocumentCaption(Header,DocCaption); <=====================
    IF DocCaption <> '' THEN
      EXIT(DocCaption);
    EXIT(SalesInvoiceLbl);
Report<Standard Sales - Invoice>.PROCEDURE<OnBeforeLineOnAfterGetRecord>
  Raised in: Report<Standard Sales - Invoice>.DataItem<Line>.<OnAfterGetRecord>
    Code lines:
    InitializeShipmentLine;
    IF Type = Type::"G/L Account" THEN
      "No." := '';
    
    OnBeforeLineOnAfterGetRecord(Header,Line); <=====================
    
    IF "Line Discount %" = 0 THEN
      LineDiscountPctText := ''
    ELSE
      LineDiscountPctText := STRSUBSTNO('%1%',-ROUND("Line Discount %",0.1));
    ...
Report<Notification Email>.PROCEDURE<OnSetReportFieldPlaceholders>
  Raised in: Report<Notification Email>.PROCEDURE<SetReportFieldPlaceholders>
    Code lines:
    ...
          Field2Label := Item.FIELDCAPTION(Description);
          FieldRef := RecRef.FIELD(Item.FIELDNO(Description));
          Field2Value := FORMAT(FieldRef.VALUE);
        END;
      ELSE
        OnSetReportFieldPlaceholders(RecRef,Field1Label,Field1Value,Field2Label,Field2Value); <=====================
    END;
    
    CASE "Notification Entry".Type OF
      "Notification Entry".Type::Approval:
    ...
Report<Suggest Bank Acc. Recon. Lines>.PROCEDURE<OnPreDataItemBankAccount>
  Raised in: Report<Suggest Bank Acc. Recon. Lines>.<DataItem>.<OnPreDataItem>
    Code lines:
    OnPreDataItemBankAccount(ExcludeReversedEntries); <=====================
    
    IF EndDate = 0D THEN
      ERROR(Text000);
    
    BankAccReconLine.FilterBankRecLines(BankAccRecon);
    IF NOT BankAccReconLine.FINDLAST THEN BEGIN
      BankAccReconLine."Statement Type" := BankAccRecon."Statement Type";
      BankAccReconLine."Bank Account No." := BankAccRecon."Bank Account No.";
      BankAccReconLine."Statement No." := BankAccRecon."Statement No.";
    ...
Report<Send Overdue Appr. Notif.>.PROCEDURE<OnSendOverdueNotifications>
  Raised in: Report<Send Overdue Appr. Notif.>.<OnPreReport>
    Code lines:
    IF NOT ApprovalsMgmt.IsOverdueNotificationsWorkflowEnabled THEN
      ERROR(NoWorkflowEnabledErr);
    
    OnSendOverdueNotifications; <=====================
Report<Issue Finance Charge Memos>.PROCEDURE<OnBeforePrintRecords>
  Raised in: Report<Issue Finance Charge Memos>.<DataItem>.<OnPostDataItem>
    Code lines:
    ...
    IF PrintDoc <> PrintDoc::" " THEN
      IF TempIssuedFinChrgMemoHeader.FINDSET THEN
        REPEAT
          IssuedFinChrgMemoHeader := TempIssuedFinChrgMemoHeader;
          IsHandled := FALSE;
          OnBeforePrintRecords(IssuedFinChrgMemoHeader,IsHandled); <=====================
          IF NOT IsHandled THEN BEGIN
            IssuedFinChrgMemoHeader.SETRECFILTER;
            IssuedFinChrgMemoHeader.PrintRecords(FALSE,PrintDoc = PrintDoc::Email,HideDialog);
          END;
    ...
Report<Calc. and Post VAT Settlement>.PROCEDURE<OnAfterPostReport>
  Raised in: Report<Calc. and Post VAT Settlement>.<DataItem>.<OnPreDataItem>
    Code lines:
    ...
    ELSE BEGIN
      GLSetup.TESTFIELD("LCY Code");
      HeaderText := STRSUBSTNO(AllAmountsAreInTxt,GLSetup."LCY Code");
    END;
    
    OnAfterPostReport; <=====================
Report<Calc. and Post VAT Settlement>.PROCEDURE<OnAfterPreReport>
  Raised in: Report<Calc. and Post VAT Settlement>.<OnPreReport>
    Code lines:
    ...
    ELSE
      VATEntry.SETRANGE("Posting Date",EntrdStartDate,EndDateReq);
    VATDateFilter := VATEntry.GETFILTER("Posting Date");
    CLEAR(GenJnlPostLine);
    
    OnAfterPreReport; <=====================
Report<Calc. and Post VAT Settlement>.PROCEDURE<OnBeforePreReport>
  Raised in: Report<Calc. and Post VAT Settlement>.<OnPreReport>
    Code lines:
    OnBeforePreReport; <=====================
    
    IF PostingDate = 0D THEN
      ERROR(Text000);
    IF DocNo = '' THEN
      ERROR(Text001);
    IF GLAccSettle."No." = '' THEN
      ERROR(Text002);
    GLAccSettle.FIND;
    
    ...
Report<Sales Document - Test>.PROCEDURE<OnAfterSalesPostGetSalesLines>
  Raised in: Report<Sales Document - Test>.DataItem<CopyLoop>.<OnAfterGetRecord>
    Code lines:
    CLEAR(TempSalesLine);
    CLEAR(SalesPost);
    VATAmountLine.DELETEALL;
    TempSalesLine.DELETEALL;
    SalesPost.GetSalesLines("Sales Header",TempSalesLine,1);
    OnAfterSalesPostGetSalesLines("Sales Header",TempSalesLine); <=====================
    TempSalesLine.CalcVATAmountLines(0,"Sales Header",TempSalesLine,VATAmountLine);
    TempSalesLine.UpdateVATOnLines(0,"Sales Header",TempSalesLine,VATAmountLine);
    VATAmount := VATAmountLine.GetTotalVATAmount;
    VATBaseAmount := VATAmountLine.GetTotalVATBase;
    ...
Report<Sales - Invoice>.PROCEDURE<OnAfterGetRecordSalesInvoiceHeader>
  Raised in: Report<Sales - Invoice>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
    
    DimSetEntry1.SETRANGE("Dimension Set ID","Dimension Set ID");
    
    GetLineFeeNoteOnReportHist("No.");
    
    OnAfterGetRecordSalesInvoiceHeader("Sales Invoice Header"); <=====================
    OnGetReferenceText("Sales Invoice Header",ReferenceText,Handled);
Report<Sales - Invoice>.PROCEDURE<OnBeforeGetDocumentCaption>
  Raised in: Report<Sales - Invoice>.PROCEDURE<DocumentCaption>
    Code lines:
    OnBeforeGetDocumentCaption("Sales Invoice Header",DocCaption); <=====================
    IF DocCaption <> '' THEN
      EXIT(DocCaption);
    IF "Sales Invoice Header"."Prepayment Invoice" THEN
      EXIT(Text010);
    EXIT(Text004);
Report<Sales - Invoice>.PROCEDURE<OnGetReferenceText>
  Raised in: Report<Sales - Invoice>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
    DimSetEntry1.SETRANGE("Dimension Set ID","Dimension Set ID");
    
    GetLineFeeNoteOnReportHist("No.");
    
    OnAfterGetRecordSalesInvoiceHeader("Sales Invoice Header");
    OnGetReferenceText("Sales Invoice Header",ReferenceText,Handled); <=====================
Report<Sales - Credit Memo>.PROCEDURE<OnAfterGetRecordSalesCrMemoHeader>
  Raised in: Report<Sales - Credit Memo>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
    FormatAddressFields("Sales Cr.Memo Header");
    FormatDocumentFields("Sales Cr.Memo Header");
    
    DimSetEntry1.SETRANGE("Dimension Set ID","Dimension Set ID");
    
    OnAfterGetRecordSalesCrMemoHeader("Sales Cr.Memo Header"); <=====================
Report<Sales Reservation Avail.>.PROCEDURE<OnAfterSalesLineModify>
  Raised in: Report<Sales Reservation Avail.>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
      IF "Qty. per Unit of Measure" = 0 THEN
        "Qty. per Unit of Measure" := 1;
      VALIDATE("Qty. to Ship",
        ROUND(LineQuantityOnHand / "Qty. per Unit of Measure",0.00001));
      MODIFY;
      OnAfterSalesLineModify("Sales Line"); <=====================
    END;
    
    IF ClearDocumentStatus THEN BEGIN
      DocumentReceiptDate := 0D;
    ...
Report<Delete Invd Blnkt Sales Orders>.PROCEDURE<OnBeforeDeleteSalesHeader>
  Raised in: Report<Delete Invd Blnkt Sales Orders>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
              SalesCommentLine.SETRANGE("No.","No.");
              SalesCommentLine.DELETEALL;
    
              ApprovalsMgmt.DeleteApprovalEntries(RECORDID);
    
              OnBeforeDeleteSalesHeader("Sales Header"); <=====================
              DELETE;
    
              COMMIT;
            END;
    ...
Report<Copy Sales Document>.PROCEDURE<OnBeforeValidateIncludeHeader>
  Raised in: Report<Copy Sales Document>.PROCEDURE<ValidateDocNo>
    Code lines:
    ...
      ((DocType = DocType::"Posted Credit Memo") <>
       (SalesHeader."Document Type" IN
        [SalesHeader."Document Type"::"Return Order",SalesHeader."Document Type"::"Credit Memo"])) AND
      (SalesHeader."Bill-to Customer No." IN [FromSalesHeader."Bill-to Customer No.",'']);
    
    OnBeforeValidateIncludeHeader(IncludeHeader); <=====================
    ValidateIncludeHeader;
Report<Combine Shipments>.PROCEDURE<OnAfterGetRecordSalesOrderHeader>
  Raised in: Report<Combine Shipments>.DataItem<SalesOrderHeader>.<OnAfterGetRecord>
    Code lines:
    IsHandled := FALSE;
    OnAfterGetRecordSalesOrderHeader(SalesOrderHeader,IsHandled); <=====================
    IF IsHandled THEN
      CurrReport.SKIP;
    
    CurrReport.LANGUAGE := Language.GetLanguageID("Language Code");
    
    Window.UPDATE(1,"Bill-to Customer No.");
    Window.UPDATE(2,"No.");
Report<Combine Shipments>.PROCEDURE<OnAfterInsertSalesInvHeader>
  Raised in: Report<Combine Shipments>.PROCEDURE<InsertSalesInvHeader>
    Code lines:
    ...
      MODIFY;
      COMMIT;
      HasAmount := FALSE;
    END;
    
    OnAfterInsertSalesInvHeader(SalesHeader,"Sales Shipment Header"); <=====================
Report<Combine Shipments>.PROCEDURE<OnBeforePostReport>
  Raised in: Report<Combine Shipments>.<OnPostReport>
    Code lines:
    OnBeforePostReport; <=====================
Report<Combine Shipments>.PROCEDURE<OnBeforePreReport>
  Raised in: Report<Combine Shipments>.<OnPreReport>
    Code lines:
    OnBeforePreReport; <=====================
Report<Combine Shipments>.PROCEDURE<OnFinalizeSalesInvHeader>
  Raised in: Report<Combine Shipments>.PROCEDURE<FinalizeSalesInvHeader>
    Code lines:
    WITH SalesHeader DO BEGIN
      IF NOT HasAmount THEN BEGIN
        DELETE(TRUE);
        EXIT;
      END;
      OnFinalizeSalesInvHeader(SalesHeader); <=====================
      IF CalcInvDisc THEN
        SalesCalcDisc.RUN(SalesLine);
      FIND;
      COMMIT;
    ...
Report<Delete Invoiced Sales Orders>.PROCEDURE<OnAfterDeleteSalesLine>
  Raised in: Report<Delete Invoiced Sales Orders>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
                  IF SalesOrderLine.Type = SalesOrderLine.Type::Item THEN
                    ATOLink.DeleteAsmFromSalesLine(SalesOrderLine);
                  IF SalesOrderLine.HASLINKS THEN
                    SalesOrderLine.DELETELINKS;
                  SalesOrderLine.DELETE;
                  OnAfterDeleteSalesLine(SalesOrderLine); <=====================
                END ELSE
                  AllLinesDeleted := FALSE;
                UpdateAssPurchOrder;
              UNTIL SalesOrderLine.NEXT = 0;
    ...
Report<Suggest Vendor Payments>.PROCEDURE<OnBeforeUpdateGnlJnlLineDimensionsFromTempBuffer>
  Raised in: Report<Suggest Vendor Payments>.PROCEDURE<MakeGenJnlLines>
    Code lines:
    ...
          "Payment Method Code" := TempPaymentBuffer."Payment Method Code";
          "Creditor No." := TempPaymentBuffer."Creditor No.";
          "Payment Reference" := TempPaymentBuffer."Payment Reference";
          "Exported to Payment File" := TempPaymentBuffer."Exported to Payment File";
          "Applies-to Ext. Doc. No." := TempPaymentBuffer."Applies-to Ext. Doc. No.";
          OnBeforeUpdateGnlJnlLineDimensionsFromTempBuffer(GenJnlLine,TempPaymentBuffer); <=====================
          UpdateDimensions(GenJnlLine);
          INSERT;
          GenJnlLineInserted := TRUE;
        END;
Report<Suggest Vendor Payments>.PROCEDURE<OnUpdateTempBufferFromVendorLedgerEntry>
  Raised in: Report<Suggest Vendor Payments>.PROCEDURE<MakeGenJnlLines>
    Code lines:
    ...
            TempPaymentBuffer."Payment Method Code" := VendLedgEntry."Payment Method Code";
            TempPaymentBuffer."Creditor No." := VendLedgEntry."Creditor No.";
            TempPaymentBuffer."Payment Reference" := VendLedgEntry."Payment Reference";
            TempPaymentBuffer."Exported to Payment File" := VendLedgEntry."Exported to Payment File";
            TempPaymentBuffer."Applies-to Ext. Doc. No." := VendLedgEntry."External Document No.";
            OnUpdateTempBufferFromVendorLedgerEntry(TempPaymentBuffer,VendLedgEntry); <=====================
            SetTempPaymentBufferDims(DimBuf);
    
            VendLedgEntry.CALCFIELDS("Remaining Amount");
    
    ...
Report<Purchase Reservation Avail.>.PROCEDURE<OnAfterPurchLineModify>
  Raised in: Report<Purchase Reservation Avail.>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
      IF "Qty. per Unit of Measure" = 0 THEN
        "Qty. per Unit of Measure" := 1;
      VALIDATE("Qty. to Receive",
        ROUND(LineQuantityOnHand / "Qty. per Unit of Measure",0.00001));
      MODIFY;
      OnAfterPurchLineModify("Purchase Line"); <=====================
    END;
    
    IF ClearDocumentStatus THEN BEGIN
      DocumentReceiptDate := 0D;
    ...
Report<Copy Purchase Document>.PROCEDURE<OnBeforeValidateIncludeHeader>
  Raised in: Report<Copy Purchase Document>.PROCEDURE<ValidateDocNo>
    Code lines:
    ...
      (DocType IN [DocType::"Posted Invoice",DocType::"Posted Credit Memo"]) AND
      ((DocType = DocType::"Posted Credit Memo") <>
       (PurchHeader."Document Type" = PurchHeader."Document Type"::"Credit Memo")) AND
      (PurchHeader."Buy-from Vendor No." IN [FromPurchHeader."Buy-from Vendor No.",'']);
    
    OnBeforeValidateIncludeHeader(IncludeHeader); <=====================
    ValidateIncludeHeader;
Report<Delete Invoiced Purch. Orders>.PROCEDURE<OnBeforePurchLineDelete>
  Raised in: Report<Delete Invoiced Purch. Orders>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
                    ItemChargeAssgntPurch.DELETEALL;
                  END;
                  IF PurchLine.HASLINKS THEN
                    PurchLine.DELETELINKS;
    
                  OnBeforePurchLineDelete(PurchLine); <=====================
                  PurchLine.DELETE;
                END ELSE
                  AllLinesDeleted := FALSE;
                UpdateAssSalesOrder;
    ...
Report<Move IC Trans. to Partner Comp>.PROCEDURE<OnICInboxTransactionCreated>
  Raised in: Report<Move IC Trans. to Partner Comp>.PROCEDURE<TransferToPartner>
    Code lines:
    ...
      REPEAT
        PartnerICDocDim := TempICDocDim;
        PartnerICDocDim.INSERT;
      UNTIL TempICDocDim.NEXT = 0;
    
    OnICInboxTransactionCreated(PartnerInboxTransaction,CurrentPartner."Inbox Details"); <=====================
    
    TempICInboxTransaction.DELETEALL;
    TempInboxPurchHeader.DELETEALL;
    TempInboxPurchLine.RESET;
    ...
Report<Calc. Consumption>.PROCEDURE<OnAfterCreateConsumpJnlLine>
  Raised in: Report<Calc. Consumption>.PROCEDURE<CreateConsumpJnlLine>
    Code lines:
    ...
        ItemTrackingMgt.CopyItemTracking("Prod. Order Component".RowID1,ItemJnlLine.RowID1,FALSE);
    END;
    
    NextConsumpJnlLineNo := NextConsumpJnlLineNo + 10000;
    
    OnAfterCreateConsumpJnlLine(LocationCode,BinCode,QtyToPost,ItemJnlLine); <=====================
Report<Calc. Consumption>.PROCEDURE<OnAfterInsertItemJnlLine>
  Raised in: Report<Calc. Consumption>.PROCEDURE<CreateConsumpJnlLine>
    Code lines:
    ...
        ItemJnlLine."Bin Code" := BinCode;
      ItemJnlLine.VALIDATE("Order Line No.","Prod. Order Component"."Prod. Order Line No.");
      ItemJnlLine.VALIDATE("Prod. Order Comp. Line No.","Prod. Order Component"."Line No.");
    
      ItemJnlLine.INSERT;
      OnAfterInsertItemJnlLine(ItemJnlLine); <=====================
    
      IF Item."Item Tracking Code" <> '' THEN
        ItemTrackingMgt.CopyItemTracking("Prod. Order Component".RowID1,ItemJnlLine.RowID1,FALSE);
    END;
    ...
Report<Calc. Consumption>.PROCEDURE<OnBeforeCreateConsumpJnlLine>
  Raised in: Report<Calc. Consumption>.PROCEDURE<CreateConsumpJnlLine>
    Code lines:
    OnBeforeCreateConsumpJnlLine(LocationCode,BinCode,QtyToPost); <=====================
    
    Window.UPDATE(3,QtyToPost);
    
    IF Location.GET(LocationCode) AND Location."Require Pick" AND Location."Require Shipment" THEN
      "Prod. Order Component".AdjustQtyToQtyPicked(QtyToPost);
    
    IF (ItemJnlLine."Item No." = "Prod. Order Component"."Item No.") AND
       (LocationCode = ItemJnlLine."Location Code") AND
       (BinCode = ItemJnlLine."Bin Code")
    ...
Report<Create Stockkeeping Unit>.PROCEDURE<OnBeforeCreateSKU>
  Raised in: Report<Create Stockkeeping Unit>.PROCEDURE<CreateSKU>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCreateSKU(Item2,LocationCode,VariantCode,ItemInInventoryOnly,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    Item2.CALCFIELDS(Inventory);
    IF (ItemInInventoryOnly AND (Item2.Inventory > 0)) OR
       (NOT ItemInInventoryOnly)
    THEN
      IF NOT StockkeepingUnit.GET(LocationCode,Item2."No.",VariantCode) THEN BEGIN
    ...
Report<Create Stockkeeping Unit>.PROCEDURE<OnBeforeStockkeepingUnitInsert>
  Raised in: Report<Create Stockkeeping Unit>.PROCEDURE<CreateSKU>
    Code lines:
    ...
        StockkeepingUnit."Put-away Template Code" := Item2."Put-away Template Code";
        StockkeepingUnit.SetHideValidationDialog(TRUE);
        StockkeepingUnit.VALIDATE("Phys Invt Counting Period Code",Item2."Phys Invt Counting Period Code");
        StockkeepingUnit."Put-away Unit of Measure Code" := Item2."Put-away Unit of Measure Code";
        StockkeepingUnit."Use Cross-Docking" := Item2."Use Cross-Docking";
        OnBeforeStockkeepingUnitInsert(StockkeepingUnit,Item2); <=====================
        StockkeepingUnit.INSERT(TRUE);
      END;
Report<Get Source Documents>.PROCEDURE<OnAfterCreateWhseDocuments>
  Raised in: Report<Get Source Documents>.<DataItem>.<OnPostDataItem>
    Code lines:
    IF WhseHeaderCreated OR OneHeaderCreated THEN BEGIN
      OnAfterCreateWhseDocuments(WhseReceiptHeader,WhseShptHeader); <=====================
      WhseShptHeader.SortWhseDoc;
      WhseReceiptHeader.SortWhseDoc;
    END;
Report<Calculate Inventory Value>.PROCEDURE<OnAfterInsertItemJnlLine>
  Raised in: Report<Calculate Inventory Value>.PROCEDURE<InsertItemJnlLine>
    Code lines:
    ...
      END;
      "Update Standard Cost" := UpdStdCost;
      "Partial Revaluation" := TRUE;
      "Applied Amount" := AppliedAmount;
      INSERT;
      OnAfterInsertItemJnlLine(ItemJnlLine); <=====================
    END;
Report<Service - Invoice>.PROCEDURE<OnBeforeGetDocumentCaption>
  Raised in: Report<Service - Invoice>.PROCEDURE<DocumentCaption>
    Code lines:
    OnBeforeGetDocumentCaption("Service Invoice Header",DocCaption); <=====================
    IF DocCaption <> '' THEN
      EXIT(DocCaption);
    EXIT(Text004);
Report<Get Item Ledger Entries>.PROCEDURE<OnBeforeInsertItemJnlLine>
  Raised in: Report<Get Item Ledger Entries>.PROCEDURE<InsertItemJnlLine>
    Code lines:
    ...
      VALIDATE("Item No.");
      "Source Type" := "Source Type"::"Item Entry";
      VALIDATE(Quantity,ROUND(ABS(Quantity),0.00001));
      VALIDATE("Cost Regulation %",IndirectCostPctReq);
    
      OnBeforeInsertItemJnlLine(IntrastatJnlLine,"Item Ledger Entry"); <=====================
      INSERT;
    END;
Report<Get Item Ledger Entries>.PROCEDURE<OnBeforeInsertJobLedgerLine>
  Raised in: Report<Get Item Ledger Entries>.PROCEDURE<InsertJobLedgerLine>
    Code lines:
    ...
      "Source Type" := "Source Type"::"Job Entry";
      VALIDATE(Quantity,ROUND(ABS(Quantity),0.00001));
    
      VALIDATE("Cost Regulation %",IndirectCostPctReq);
    
      OnBeforeInsertJobLedgerLine(IntrastatJnlLine,"Job Ledger Entry"); <=====================
      INSERT;
    END;
Report<Get Item Ledger Entries>.PROCEDURE<OnBeforeInsertValueEntryLine>
  Raised in: Report<Get Item Ledger Entries>.PROCEDURE<InsertValueEntryLine>
    Code lines:
    ...
      VALIDATE("Item No.");
      "Source Type" := "Source Type"::"Item Entry";
      VALIDATE(Quantity,ROUND(ABS(Quantity),0.00001));
      VALIDATE("Cost Regulation %",IndirectCostPctReq);
    
      OnBeforeInsertValueEntryLine(IntrastatJnlLine,"Item Ledger Entry"); <=====================
      INSERT;
    END;
Report<Delete Invd Sales Ret. Orders>.PROCEDURE<OnBeforeDeleteSalesOrderHeader>
  Raised in: Report<Delete Invd Sales Ret. Orders>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
              IF NOT WhseRequest.ISEMPTY THEN
                WhseRequest.DELETEALL(TRUE);
    
              ApprovalsMgmt.DeleteApprovalEntries(RECORDID);
    
              OnBeforeDeleteSalesOrderHeader("Sales Header"); <=====================
              DELETE;
            END;
            COMMIT;
          END;
    ...
Report<Delete Invd Sales Ret. Orders>.PROCEDURE<OnBeforeDeleteSalesOrderLine>
  Raised in: Report<Delete Invd Sales Ret. Orders>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
                THEN BEGIN
                  IF SalesOrderLine.Type = SalesOrderLine.Type::"Charge (Item)" THEN BEGIN
                    ItemChargeAssgntSales.SETRANGE("Document Line No.",SalesOrderLine."Line No.");
                    ItemChargeAssgntSales.DELETEALL;
                  END;
                  OnBeforeDeleteSalesOrderLine(SalesOrderLine); <=====================
                  IF SalesOrderLine.HASLINKS THEN
                    SalesOrderLine.DELETELINKS;
                  SalesOrderLine.DELETE;
                END ELSE
    ...
Report<Delete Invd Purch. Ret. Orders>.PROCEDURE<OnBeforePurchLineDelete>
  Raised in: Report<Delete Invd Purch. Ret. Orders>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
                    ItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchLine."Line No.");
                    ItemChargeAssgntPurch.DELETEALL;
                  END;
                  IF PurchLine.HASLINKS THEN
                    PurchLine.DELETELINKS;
                  OnBeforePurchLineDelete(PurchLine); <=====================
                  PurchLine.DELETE;
                END ELSE
                  AllLinesDeleted := FALSE;
              UNTIL PurchLine.NEXT = 0;
    ...
Report<Create Ret.-Related Documents>.PROCEDURE<OnPreReportOnBeforeCopyPurchDoc>
  Raised in: Report<Create Ret.-Related Documents>.<OnPreReport>
    Code lines:
    ...
    
    IF CreatePO THEN BEGIN
      POPurchHeader."Document Type" := POPurchHeader."Document Type"::Order;
      CLEAR(CopyDocMgt);
      CopyDocMgt.SetProperties(TRUE,FALSE,FALSE,FALSE,TRUE,FALSE,FALSE);
      OnPreReportOnBeforeCopyPurchDoc(CopyDocMgt); <=====================
      CopyDocMgt.CopyFromSalesToPurchDoc(VendorNo,SROSalesHeader,POPurchHeader);
      TempRetRelDoc."Entry No." := 2;
      TempRetRelDoc."Document Type" := TempRetRelDoc."Document Type"::"Purchase Order";
      TempRetRelDoc."No." := POPurchHeader."No.";
    ...
Report<Create Ret.-Related Documents>.PROCEDURE<OnPreReportOnBeforeCopyPurchReturnDoc>
  Raised in: Report<Create Ret.-Related Documents>.<OnPreReport>
    Code lines:
    ...
    
    IF CreatePRO THEN BEGIN
      PROPurchHeader."Document Type" := PROPurchHeader."Document Type"::"Return Order";
      CLEAR(CopyDocMgt);
      CopyDocMgt.SetProperties(TRUE,FALSE,FALSE,FALSE,TRUE,FALSE,FALSE);
      OnPreReportOnBeforeCopyPurchReturnDoc(CopyDocMgt); <=====================
      CopyDocMgt.CopyFromSalesToPurchDoc(VendorNo,SROSalesHeader,PROPurchHeader);
      TempRetRelDoc."Entry No." := 1;
      TempRetRelDoc."Document Type" := TempRetRelDoc."Document Type"::"Purchase Return Order";
      TempRetRelDoc."No." := PROPurchHeader."No.";
    ...
Report<Create Ret.-Related Documents>.PROCEDURE<OnPreReportOnBeforeCopySalesDoc>
  Raised in: Report<Create Ret.-Related Documents>.<OnPreReport>
    Code lines:
    ...
    
    IF CreateSO THEN BEGIN
      SOSalesHeader."Document Type" := SOSalesHeader."Document Type"::Order;
      CLEAR(CopyDocMgt);
      CopyDocMgt.SetProperties(TRUE,FALSE,FALSE,TRUE,TRUE,FALSE,FALSE);
      OnPreReportOnBeforeCopySalesDoc(CopyDocMgt); <=====================
      CopyDocMgt.CopySalesDoc(DocType::"Return Order",SROSalesHeader."No.",SOSalesHeader);
      TempRetRelDoc."Entry No." := 3;
      TempRetRelDoc."Document Type" := TempRetRelDoc."Document Type"::"Sales Order";
      TempRetRelDoc."No." := SOSalesHeader."No.";
    ...
Report<Move Negative Purchase Lines>.PROCEDURE<OnBeforePreReport>
  Raised in: Report<Move Negative Purchase Lines>.<OnPreReport>
    Code lines:
    OnBeforePreReport(CopyDocMgt); <=====================
    CopyDocMgt.SetProperties(TRUE,FALSE,TRUE,TRUE,TRUE,FALSE,FALSE);
    IF (FromDocType = FromDocType::"Return Order") OR (FromDocType = FromDocType::"Credit Memo") THEN
      ToDocType := ToDocType2;
    ToPurchHeader."Document Type" := CopyDocMgt.PurchHeaderDocType(ToDocType);
    CopyDocMgt.CopyPurchDoc(FromDocType,FromPurchHeader."No.",ToPurchHeader);
Report<Move Negative Sales Lines>.PROCEDURE<OnBeforePreReport>
  Raised in: Report<Move Negative Sales Lines>.<OnPreReport>
    Code lines:
    OnBeforePreReport(CopyDocMgt); <=====================
    CopyDocMgt.SetProperties(TRUE,FALSE,TRUE,TRUE,TRUE,FALSE,FALSE);
    IF (FromDocType = FromDocType::"Return Order") OR (FromDocType = FromDocType::"Credit Memo") THEN
      ToDocType := ToDocType2;
    ToSalesHeader."Document Type" := CopyDocMgt.SalesHeaderDocType(ToDocType);
    CopyDocMgt.CopySalesDoc(FromDocType,FromSalesHeader."No.",ToSalesHeader);
Report<Get Sales Orders>.PROCEDURE<OnAfterInsertReqWkshLine>
  Raised in: Report<Get Sales Orders>.PROCEDURE<InsertReqWkshLine>
    Code lines:
    ...
        "Shortcut Dimension 1 Code" := SalesLine."Shortcut Dimension 1 Code";
        "Shortcut Dimension 2 Code" := SalesLine."Shortcut Dimension 2 Code";
        "Dimension Set ID" := SalesLine."Dimension Set ID";
        MODIFY;
      END;
      OnAfterInsertReqWkshLine(ReqLine,SalesLine); <=====================
    END;
Report<Get Sales Orders>.PROCEDURE<OnBeforeInsertReqWkshLine>
  Raised in: Report<Get Sales Orders>.PROCEDURE<InsertReqWkshLine>
    Code lines:
    ...
          "No.","Location Code","Variant Code","Due Date","Vendor No.","Ref. Order Type");
      CalcStartingDate('');
      UpdateDescription;
      UpdateDatetime;
    
      OnBeforeInsertReqWkshLine(ReqLine,SalesLine,SpecOrder); <=====================
      INSERT;
      ItemTrackingMgt.CopyItemTracking(SalesLine.RowID1,RowID1,TRUE);
      IF GetDim = GetDim::"Sales Line" THEN BEGIN
        "Shortcut Dimension 1 Code" := SalesLine."Shortcut Dimension 1 Code";
    ...
Report<Calculate Plan - Req. Wksh.>.PROCEDURE<OnAfterOnOpenPage>
  Raised in: Report<Calculate Plan - Req. Wksh.>.<RequestPage>.<OnOpenPage>
    Code lines:
    MfgSetup.GET;
    UseForecast := MfgSetup."Current Production Forecast";
    
    OnAfterOnOpenPage; <=====================
Report<Suggest Item Price on Wksh.>.PROCEDURE<OnBeforeModifyOrInsertSalesPriceWksh>
  Raised in: Report<Suggest Item Price on Wksh.>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
      IF NOT PriceAlreadyExists THEN BEGIN
        "Current Unit Price" := CurrentUnitPrice;
        "VAT Bus. Posting Gr. (Price)" := Item."VAT Bus. Posting Gr. (Price)";
      END;
    
      OnBeforeModifyOrInsertSalesPriceWksh(SalesPriceWksh); <=====================
    
      IF PriceAlreadyExists OR CreateNewPrices THEN BEGIN
        SalesPriceWksh2 := SalesPriceWksh;
        IF SalesPriceWksh2.FIND('=') THEN
    ...
Report<Suggest Item Price on Wksh.>.PROCEDURE<OnBeforeRoundMethod>
  Raised in: Report<Suggest Item Price on Wksh.>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
          ToCurrency."Unit-Amount Rounding Precision");
    
      IF CurrentUnitPrice > PriceLowerLimit THEN
        "New Unit Price" := CurrentUnitPrice * UnitPriceFactor;
    
      OnBeforeRoundMethod(SalesPriceWksh,Item,ToCurrency,UnitPriceFactor,PriceLowerLimit,CurrentUnitPrice); <=====================
    
      IF RoundingMethod.Code <> '' THEN BEGIN
        RoundingMethod."Minimum Amount" := "New Unit Price";
        IF RoundingMethod.FIND('=<') THEN BEGIN
    ...
Report<Suggest Sales Price on Wksh.>.PROCEDURE<OnBeforeModifyOrInsertSalesPriceWksh>
  Raised in: Report<Suggest Sales Price on Wksh.>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
    SalesPriceWksh."VAT Bus. Posting Gr. (Price)" := "VAT Bus. Posting Gr. (Price)";
    SalesPriceWksh."Allow Invoice Disc." := "Allow Invoice Disc.";
    SalesPriceWksh."Allow Line Disc." := "Allow Line Disc.";
    SalesPriceWksh.CalcCurrentPrice(PriceAlreadyExists);
    
    OnBeforeModifyOrInsertSalesPriceWksh(SalesPriceWksh); <=====================
    
    IF PriceAlreadyExists OR CreateNewPrices THEN BEGIN
      SalesPriceWksh2 := SalesPriceWksh;
      IF SalesPriceWksh2.FIND('=') THEN
    ...
Report<Implement Price Change>.PROCEDURE<OnAfterCopyToSalesPrice>
  Raised in: Report<Implement Price Change>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
    SalesPrice."Unit Price" := "New Unit Price";
    SalesPrice."Price Includes VAT" := "Price Includes VAT";
    SalesPrice."Allow Line Disc." := "Allow Line Disc.";
    SalesPrice."Allow Invoice Disc." := "Allow Invoice Disc.";
    SalesPrice."VAT Bus. Posting Gr. (Price)" := "VAT Bus. Posting Gr. (Price)";
    OnAfterCopyToSalesPrice(SalesPrice,"Sales Price Worksheet"); <=====================
    IF SalesPrice."Unit Price" <> 0 THEN
      IF NOT SalesPrice.INSERT(TRUE) THEN
        SalesPrice.MODIFY(TRUE);
Report<Whse.-Source - Create Document>.PROCEDURE<OnBeforeProcessWhseMovWkshLines>
  Raised in: Report<Whse.-Source - Create Document>.DataItem<Whse. Mov.-Worksheet Line>.<OnPreDataItem>
    Code lines:
    ...
    
    COPYFILTERS(WhseWkshLine);
    SETFILTER("Qty. to Handle (Base)",'>0');
    LOCKTABLE;
    
    OnBeforeProcessWhseMovWkshLines("Whse. Mov.-Worksheet Line"); <=====================
Report<Calculate Whse. Adjustment>.PROCEDURE<OnAfterFunctionInsertItemJnlLine>
  Raised in: Report<Calculate Whse. Adjustment>.PROCEDURE<InsertItemJnlLine>
    Code lines:
    ...
                WhseEntry2.SETFILTER("Serial No.",Item.GETFILTER("Serial No. Filter"));
              UNTIL WhseEntry2.NEXT = 0;
          END;
      END;
    END;
    OnAfterFunctionInsertItemJnlLine(ItemNo,VariantCode2,LocationCode2,Quantity2,QuantityBase2,UOM2,EntryType2,ItemJnlLine); <=====================
Report<Calculate Whse. Adjustment>.PROCEDURE<OnAfterInsertItemJnlLine>
  Raised in: Report<Calculate Whse. Adjustment>.PROCEDURE<InsertItemJnlLine>
    Code lines:
    ...
        VALIDATE(Quantity,Quantity2);
        "Quantity (Base)" := QuantityBase2;
        "Invoiced Qty. (Base)" := QuantityBase2;
        "Warehouse Adjustment" := TRUE;
        INSERT(TRUE);
        OnAfterInsertItemJnlLine(ItemJnlLine); <=====================
    
        IF Location.Code <> '' THEN
          IF Location."Directed Put-away and Pick" THEN BEGIN
            WhseEntry2.SETCURRENTKEY(
    ...
Report<Calculate Whse. Adjustment>.PROCEDURE<OnBeforeFunctionInsertItemJnlLine>
  Raised in: Report<Calculate Whse. Adjustment>.PROCEDURE<InsertItemJnlLine>
    Code lines:
    OnBeforeFunctionInsertItemJnlLine(ItemNo,VariantCode2,LocationCode2,Quantity2,QuantityBase2,UOM2,EntryType2); <=====================
    
    WITH ItemJnlLine DO BEGIN
      IF NextLineNo = 0 THEN BEGIN
        LOCKTABLE;
        RESET;
        SETRANGE("Journal Template Name","Journal Template Name");
        SETRANGE("Journal Batch Name","Journal Batch Name");
        IF FIND('+') THEN
          NextLineNo := "Line No.";
    ...
Report<Whse. Calculate Inventory>.PROCEDURE<OnAfterWhseJnlLineInsert>
  Raised in: Report<Whse. Calculate Inventory>.PROCEDURE<InsertWhseJnlLine>
    Code lines:
    ...
          "Whse. Document Type" :=
            "Whse. Document Type"::"Whse. Phys. Inventory";
          "Phys Invt Counting Period Code" := PhysInvtCountCode;
          "Phys Invt Counting Period Type" := CycleSourceType;
          INSERT(TRUE);
          OnAfterWhseJnlLineInsert(WhseJnlLine); <=====================
        END;
        IF WhseEntry.FIND('+') THEN;
        WhseEntry.SETRANGE("Lot No.");
        WhseEntry.SETRANGE("Serial No.");
    ...
Report<Whse. Get Bin Content>.PROCEDURE<OnAfterInsertItemJnlLine>
  Raised in: Report<Whse. Get Bin Content>.PROCEDURE<InsertItemJournalLine>
    Code lines:
    ...
      ItemJournalTempl.GET("Journal Template Name");
      ItemJournalBatch.GET("Journal Template Name","Journal Batch Name");
      "Source Code" := ItemJournalTempl."Source Code";
      "Posting No. Series" := ItemJournalBatch."Posting No. Series";
      INSERT;
      OnAfterInsertItemJnlLine(ItemJournalLine); <=====================
    END;
Report<Whse. Get Bin Content>.PROCEDURE<OnAfterInsertTempTrackingSpec>
  Raised in: Report<Whse. Get Bin Content>.PROCEDURE<InsertTempTrackingSpec>
    Code lines:
    ...
      TempTrackingSpecification."Expiration Date" := "Expiration Date";
      TempTrackingSpecification."New Expiration Date" := "Expiration Date";
      TempTrackingSpecification.VALIDATE("Quantity (Base)",QtyOnBin);
      TempTrackingSpecification."Entry No." += 1;
      TempTrackingSpecification.INSERT;
      OnAfterInsertTempTrackingSpec(TempTrackingSpecification,WarehouseEntry); <=====================
    END;
Report<Date Compress Whse. Entries>.PROCEDURE<OnBeforeInsertNewEntry>
  Raised in: Report<Date Compress Whse. Entries>.PROCEDURE<InsertNewEntry>
    Code lines:
    ...
    WhseEntry.Quantity := Qty;
    WhseEntry."Qty. (Base)" := QtyBase;
    WhseEntry.Cubage := Cubage;
    WhseEntry.Weight := Weight;
    WhseEntry."Entry Type" := EntryType;
    OnBeforeInsertNewEntry(WhseEntry); <=====================
    WhseEntry.INSERT;
Report<Calculate Inventory>.PROCEDURE<OnAfterFunctionInsertItemJnlLine>
  Raised in: Report<Calculate Inventory>.PROCEDURE<InsertItemJnlLine>
    Code lines:
    ...
            TempDimBufOut.DELETEALL;
          END;
        END;
      END;
    END;
    OnAfterFunctionInsertItemJnlLine(ItemNo,VariantCode2,DimEntryNo2,BinCode2,Quantity2,PhysInvQuantity,ItemJnlLine); <=====================
Report<Calculate Inventory>.PROCEDURE<OnAfterInsertItemJnlLine>
  Raised in: Report<Calculate Inventory>.PROCEDURE<InsertItemJnlLine>
    Code lines:
    ...
          "Last Item Ledger Entry No." := ItemLedgEntry."Entry No."
        ELSE
          "Last Item Ledger Entry No." := 0;
    
        INSERT(TRUE);
        OnAfterInsertItemJnlLine(ItemJnlLine); <=====================
    
        IF Location.Code <> '' THEN
          IF Location."Directed Put-away and Pick" THEN BEGIN
            WhseEntry.SETCURRENTKEY(
    ...
Report<Calculate Inventory>.PROCEDURE<OnBeforeFunctionInsertItemJnlLine>
  Raised in: Report<Calculate Inventory>.PROCEDURE<InsertItemJnlLine>
    Code lines:
    OnBeforeFunctionInsertItemJnlLine(ItemNo,VariantCode2,DimEntryNo2,BinCode2,Quantity2,PhysInvQuantity); <=====================
    
    WITH ItemJnlLine DO BEGIN
      IF NextLineNo = 0 THEN BEGIN
        LOCKTABLE;
        SETRANGE("Journal Template Name","Journal Template Name");
        SETRANGE("Journal Batch Name","Journal Batch Name");
        IF FINDLAST THEN
          NextLineNo := "Line No.";
    
    ...
Report<Adjust Cost - Item Entries>.PROCEDURE<OnBeforePreReport>
  Raised in: Report<Adjust Cost - Item Entries>.<OnPreReport>
    Code lines:
    OnBeforePreReport; <=====================
    
    ItemApplnEntry.LOCKTABLE;
    IF NOT ItemApplnEntry.FINDLAST THEN
      EXIT;
    ItemLedgEntry.LOCKTABLE;
    IF NOT ItemLedgEntry.FINDLAST THEN
      EXIT;
    AvgCostAdjmtEntryPoint.LOCKTABLE;
    IF AvgCostAdjmtEntryPoint.FINDLAST THEN;
    ...
Report<Export Budget to Excel>.PROCEDURE<OnAfterEnterDimFilter>
  Raised in: Report<Export Budget to Excel>.<DataItem>.<OnPostDataItem>
    Code lines:
    ...
    GLBudgetName.GET(GETFILTER("Budget Name"));
    EnterDimFilter(GLBudgetName."Budget Dimension 1 Code",GETFILTER("Budget Dimension 1 Code"));
    EnterDimFilter(GLBudgetName."Budget Dimension 2 Code",GETFILTER("Budget Dimension 2 Code"));
    EnterDimFilter(GLBudgetName."Budget Dimension 3 Code",GETFILTER("Budget Dimension 3 Code"));
    EnterDimFilter(GLBudgetName."Budget Dimension 4 Code",GETFILTER("Budget Dimension 4 Code"));
    OnAfterEnterDimFilter("G/L Budget Entry",ExcelBuf,RowNo); <=====================
    
    RowNo := RowNo + 2;
    HeaderRowNo := RowNo;
    EnterCell(HeaderRowNo,1,FIELDCAPTION("G/L Account No."),FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
    ...
Report<Close Income Statement>.PROCEDURE<OnBeforeCheckDimPostingRules>
  Raised in: Report<Close Income Statement>.PROCEDURE<CheckDimPostingRules>
    Code lines:
    OnBeforeCheckDimPostingRules(SelectedDim,ErrorText,Handled); <=====================
    IF Handled THEN
      EXIT(ErrorText);
    
    DefaultDim.SETRANGE("Table ID",DATABASE::"G/L Account");
    DefaultDim.SETFILTER(
      "Value Posting",'%1|%2',
      DefaultDim."Value Posting"::"Same Code",DefaultDim."Value Posting"::"Code Mandatory");
    
    IF DefaultDim.FIND('-') THEN
    ...
Report<Suggest Job Jnl. Lines>.PROCEDURE<OnAfterTransferTimeSheetDetailToJobJnlLine>
  Raised in: Report<Suggest Job Jnl. Lines>.<OnPostReport>
    Code lines:
    ...
              JobJnlLine."Posting No. Series" := JobJnlBatch."Posting No. Series";
              JobJnlLine.Description := TempTimeSheetLine.Description;
              JobJnlLine.VALIDATE(Quantity,QtyToPost);
              JobJnlLine.VALIDATE(Chargeable,TempTimeSheetLine.Chargeable);
              JobJnlLine."Reason Code" := JobJnlBatch."Reason Code";
              OnAfterTransferTimeSheetDetailToJobJnlLine(JobJnlLine,JobJnlTemplate,TempTimeSheetLine,TimeSheetDetail); <=====================
              JobJnlLine.INSERT;
            END;
          UNTIL TimeSheetDetail.NEXT = 0;
      UNTIL TempTimeSheetLine.NEXT = 0;
Report<Suggest Job Jnl. Lines>.PROCEDURE<OnBeforeInsertTempTimeSheetLine>
  Raised in: Report<Suggest Job Jnl. Lines>.PROCEDURE<FillTimeSheetLineBuffer>
    Code lines:
    ...
          TimeSheetLine.SETFILTER("Job Task No.",JobTaskNoFilter);
        TimeSheetLine.SETRANGE(Posted,FALSE);
        IF TimeSheetLine.FINDSET THEN
          REPEAT
            TempTimeSheetLine := TimeSheetLine;
            OnBeforeInsertTempTimeSheetLine(JobJnlLine,TimeSheetHeader,TempTimeSheetLine,SkipLine); <=====================
            IF NOT SkipLine THEN
              TempTimeSheetLine.INSERT;
          UNTIL TimeSheetLine.NEXT = 0;
      UNTIL TimeSheetHeader.NEXT = 0;
Report<Calculate Plan - Plan. Wksh.>.PROCEDURE<OnAfterOnOpenPage>
  Raised in: Report<Calculate Plan - Plan. Wksh.>.<RequestPage>.<OnOpenPage>
    Code lines:
    ...
      MPS := TRUE;
      MRP := TRUE;
    END ELSE
      MRP := NOT MPS;
    
    OnAfterOnOpenPage; <=====================
Report<Refresh Production Order>.PROCEDURE<OnAfterRefreshProdOrder>
  Raised in: Report<Refresh Production Order>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
      WhseProdRelease.Release("Production Order");
      IF CreateInbRqst THEN
        WhseOutputProdRelease.Release("Production Order");
    END;
    
    OnAfterRefreshProdOrder("Production Order",ErrorOccured); <=====================
    IF ErrorOccured THEN
      MESSAGE(Text005,ProdOrder.TABLECAPTION,ProdOrderLine.FIELDCAPTION("Bin Code"));
Report<Replan Production Order>.PROCEDURE<OnAfterLastProdOrderRtngLine>
  Raised in: Report<Replan Production Order>.<DataItem>.<OnPostDataItem>
    Code lines:
    CalcProdOrder.CalculateProdOrderDates("Prod. Order Line",TRUE);
    OnAfterLastProdOrderRtngLine("Prod. Order Line"); <=====================
Report<Replan Production Order>.PROCEDURE<OnProdOrderCompOnAfterGetRecordOnBeforeProdOrderModify>
  Raised in: Report<Replan Production Order>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
      ProdOrder."Low-Level Code" := MainProdOrder."Low-Level Code" + 1;
      ProdOrder."Source Type" := ProdOrder."Source Type"::Item;
      ProdOrder.VALIDATE("Source No.","Item No.");
      ProdOrder.VALIDATE(Quantity,ReqQty);
      ProdOrder."Location Code" := "Location Code";
      OnProdOrderCompOnAfterGetRecordOnBeforeProdOrderModify(ProdOrder,MainProdOrder); <=====================
      ProdOrder.MODIFY;
      CreateProdOrderLines.Copy(ProdOrder,1,"Variant Code",TRUE);
      ProdOrderLine.SETRANGE(Status,ProdOrder.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrder."No.");
    ...
Report<Calculate Work Center Calendar>.PROCEDURE<OnAfterDeleteWorkCenterCalendarEntries>
  Raised in: Report<Calculate Work Center Calendar>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
    Calendar.SETRANGE("Capacity Type",Calendar."Capacity Type"::"Work Center");
    Calendar.SETRANGE("No.","No.");
    Calendar.SETRANGE(Date,StartingDate,EndingDate);
    Calendar.DELETEALL;
    
    OnAfterDeleteWorkCenterCalendarEntries("Work Center",StartingDate,EndingDate); <=====================
    
    IF "Consolidated Calendar" THEN BEGIN
      Calendar.SETRANGE("No.");
      Calendar.SETCURRENTKEY("Work Center No.",Date);
    ...
Report<Copy Production Order Document>.PROCEDURE<OnAfterCopyProdLines>
  Raised in: Report<Copy Production Order Document>.PROCEDURE<CopyProdLines>
    Code lines:
    ...
        OnBeforeToProdOrderLineInsert(ToProdOrderLine,FromProdOrderLine);
        ToProdOrderLine.INSERT;
        LineNo := LineNo + 10000;
      UNTIL FromProdOrderLine.NEXT = 0;
    
    OnAfterCopyProdLines(ToProdOrderLine,FromProdOrderLine,IncludeHeader); <=====================
Report<Copy Production Order Document>.PROCEDURE<OnBeforeToProdOrderLineInsert>
  Raised in: Report<Copy Production Order Document>.PROCEDURE<CopyProdLines>
    Code lines:
    ...
        ToProdOrderLine."Qty. per Unit of Measure" := FromProdOrderLine."Qty. per Unit of Measure";
        ToProdOrderLine."Capacity Type Filter" := FromProdOrderLine."Capacity Type Filter";
        ToProdOrderLine."Capacity No. Filter" := FromProdOrderLine."Capacity No. Filter";
        ToProdOrderLine."Scrap %" := FromProdOrderLine."Scrap %";
        ToProdOrderLine."Date Filter" := FromProdOrderLine."Date Filter";
        OnBeforeToProdOrderLineInsert(ToProdOrderLine,FromProdOrderLine); <=====================
        ToProdOrderLine.INSERT;
        LineNo := LineNo + 10000;
      UNTIL FromProdOrderLine.NEXT = 0;
    
Report<Copy Production Order Document>.PROCEDURE<OnBeforeToProdOrderModify>
  Raised in: Report<Copy Production Order Document>.PROCEDURE<CopyProdOrder>
    Code lines:
    ...
      ToProdOrder."Work Center Filter" := FromProdOrder."Work Center Filter";
      ToProdOrder."Capacity Type Filter" := FromProdOrder."Capacity Type Filter";
      ToProdOrder."Capacity No. Filter" := FromProdOrder."Capacity No. Filter";
      ToProdOrder."Date Filter" := FromProdOrder."Date Filter";
      ToProdOrder.Comment := FromProdOrder.Comment;
      OnBeforeToProdOrderModify(ToProdOrder,FromProdOrder); <=====================
      ToProdOrder.MODIFY;
    END;
Table<Payment Service Setup>.PROCEDURE<OnCreatePaymentService>
  Raised in: Table<Payment Service Setup>.PROCEDURE<NewPaymentService>
    Code lines:
    ...
      0:
        EXIT(FALSE);
      1:
        BEGIN
          TempPaymentServiceSetupProviders.FINDFIRST;
          OnCreatePaymentService(TempPaymentServiceSetupProviders); <=====================
          EXIT(TRUE);
        END;
      ELSE BEGIN
        IF PAGE.RUNMODAL(PAGE::"Select Payment Service Type",TempPaymentServiceSetup) = ACTION::LookupOK THEN BEGIN
    ...
  Raised in: Table<Payment Service Setup>.PROCEDURE<NewPaymentService>
    Code lines:
    ...
      0:
        EXIT(FALSE);
      1:
        BEGIN
          TempPaymentServiceSetupProviders.FINDFIRST;
          OnCreatePaymentService(TempPaymentServiceSetupProviders); <=====================
          EXIT(TRUE);
        END;
      ELSE BEGIN
        IF PAGE.RUNMODAL(PAGE::"Select Payment Service Type",TempPaymentServiceSetup) = ACTION::LookupOK THEN BEGIN
    ...
Table<Payment Service Setup>.PROCEDURE<OnDoNotIncludeAnyPaymentServicesOnAllDocuments>
  Raised in: Codeunit<O365 Sales Invoice Payment>.PROCEDURE<SetPaypalDefault>
    Code lines:
    DummyPaymentServiceSetup.OnDoNotIncludeAnyPaymentServicesOnAllDocuments; <=====================
    PaypalAccountProxy.SetAlwaysIncludePaypalOnDocuments(TRUE,TRUE);
    UpdatePaymentServicesForInvoicesQuotesAndOrders;
  Raised in: Codeunit<O365 Sales Invoice Payment>.PROCEDURE<SetMspayDefault>
    Code lines:
    DummyPaymentServiceSetup.OnDoNotIncludeAnyPaymentServicesOnAllDocuments; <=====================
    PaypalAccountProxy.SetAlwaysIncludeMsPayOnDocuments(TRUE,TRUE);
    UpdatePaymentServicesForInvoicesQuotesAndOrders;
Table<Payment Service Setup>.PROCEDURE<OnRegisterPaymentServiceProviders>
  Raised in: Page<BC O365 Settings>.<OnInit>
    Code lines:
    TempPaymentServiceSetup.OnRegisterPaymentServiceProviders(TempPaymentServiceSetup); <=====================
    PaymentServicesVisible := NOT TempPaymentServiceSetup.ISEMPTY;
    
    QuickBooksVisible := O365SalesManagement.GetQuickBooksVisible;
    
    SetMailProviderVisibility;
  Raised in: Page<Select Payment Service Type>.<OnOpenPage>
    Code lines:
    OnRegisterPaymentServiceProviders(Rec); <=====================
  Raised in: Page<Payment Services>.<OnOpenPage>
    Code lines:
    OnRegisterPaymentServices(Rec);
    OnRegisterPaymentServiceProviders(TempPaymentServiceSetupProviders); <=====================
    IF TempPaymentServiceSetupProviders.ISEMPTY THEN
      ERROR(NoServicesInstalledErr);
  Raised in: Page<BC O365 My Settings>.<OnOpenPage>
    Code lines:
    TempPaymentServiceSetup.OnRegisterPaymentServiceProviders(TempPaymentServiceSetup); <=====================
    PaymentServicesVisible := NOT TempPaymentServiceSetup.ISEMPTY;
    
    QuickBooksVisible := O365SalesManagement.GetQuickBooksVisible;
    
    SetMailProviderVisibility;
    SetLanguageVisibility;
  Raised in: Table<Payment Service Setup>.PROCEDURE<AskUserToSetupNewPaymentService>
    Code lines:
    IF NOT GUIALLOWED THEN
      EXIT(FALSE);
    
    OnRegisterPaymentServiceProviders(TempPaymentServiceSetupProviders); <=====================
    IF NOT TempPaymentServiceSetupProviders.FINDFIRST THEN
      EXIT(FALSE);
    
    // Check if there are payment services that are not enabled
    OnRegisterPaymentServices(TempNotEnabledPaymentServiceSetupProviders);
    DefinedPaymentServiceExist := TempNotEnabledPaymentServiceSetupProviders.FINDFIRST;
    ...
  Raised in: Table<Payment Service Setup>.PROCEDURE<IsPaymentServiceVisible>
    Code lines:
    OnRegisterPaymentServiceProviders(TempPaymentServiceSetup); <=====================
    EXIT(NOT TempPaymentServiceSetup.ISEMPTY);
  Raised in: Table<Payment Service Setup>.PROCEDURE<NewPaymentService>
    Code lines:
    OnRegisterPaymentServiceProviders(TempPaymentServiceSetupProviders); <=====================
    CASE TempPaymentServiceSetupProviders.COUNT OF
      0:
        EXIT(FALSE);
      1:
        BEGIN
          TempPaymentServiceSetupProviders.FINDFIRST;
          OnCreatePaymentService(TempPaymentServiceSetupProviders);
          EXIT(TRUE);
        END;
    ...
Table<Payment Service Setup>.PROCEDURE<OnRegisterPaymentServices>
  Raised in: Page<Payment Services>.<OnOpenPage>
    Code lines:
    OnRegisterPaymentServices(Rec); <=====================
    OnRegisterPaymentServiceProviders(TempPaymentServiceSetupProviders);
    IF TempPaymentServiceSetupProviders.ISEMPTY THEN
      ERROR(NoServicesInstalledErr);
  Raised in: Page<Payment Services>.Action<NewAction>.<OnAction>
    Code lines:
    IF NewPaymentService THEN BEGIN
      RESET;
      DELETEALL;
      OnRegisterPaymentServices(Rec); <=====================
    END;
  Raised in: Page<Payment Services>.Action<Setup>.<OnAction>
    Code lines:
    OpenSetupCard;
    RESET;
    DELETEALL;
    OnRegisterPaymentServices(Rec); <=====================
  Raised in: Page<BC O365 Payment Services>.PROCEDURE<UpdateControls>
    Code lines:
    ...
    IF PaypalIsDefault THEN
      MsPayOrPaypalOption := MsPayOrPaypalOption::PayPal
    ELSE
      MsPayOrPaypalOption := MsPayOrPaypalOption::"Microsoft Pay";
    
    TempPaymentServiceSetup.OnRegisterPaymentServices(TempPaymentServiceSetup); <=====================
    TempPaymentServiceSetup.SETRANGE(Enabled,TRUE);
    NumberOfPaymentServiceSetups := TempPaymentServiceSetup.COUNT;
    IF NumberOfPaymentServiceSetups > 2 THEN
      SENDTRACETAG('00001WJ',PaymentServiceCategoryTxt,VERBOSITY::Warning,
    ...
  Raised in: Table<Payment Service Setup>.PROCEDURE<GetDefaultPaymentServices>
    Code lines:
    OnRegisterPaymentServices(TempPaymentServiceSetup); <=====================
    TempPaymentServiceSetup.SETRANGE("Always Include on Documents",TRUE);
    TempPaymentServiceSetup.SETRANGE(Enabled,TRUE);
    
    IF NOT TempPaymentServiceSetup.FINDFIRST THEN
      EXIT(FALSE);
    
    TransferToRecordSetBuffer(TempPaymentServiceSetup,TempRecordSetBuffer);
    RecordSetManagement.GetSet(TempRecordSetBuffer,SetID);
    IF SetID = 0 THEN
    ...
  Raised in: Table<Payment Service Setup>.PROCEDURE<GetEnabledPaymentServices>
    Code lines:
    TempPaymentServiceSetup.RESET;
    TempPaymentServiceSetup.DELETEALL;
    OnRegisterPaymentServices(TempPaymentServiceSetup); <=====================
    TempPaymentServiceSetup.SETRANGE(Enabled,TRUE);
    EXIT(TempPaymentServiceSetup.FINDSET);
  Raised in: Table<Payment Service Setup>.PROCEDURE<GetSelectedPaymentsText>
    Code lines:
    SelectedPaymentServices := NoPaymentMethodsSelectedTxt;
    
    IF SetID = 0 THEN
      EXIT;
    
    OnRegisterPaymentServices(TempPaymentServiceSetup); <=====================
    LoadSet(TempPaymentServiceSetup,SetID);
    
    TempPaymentServiceSetup.SETRANGE(Available,TRUE);
    IF NOT TempPaymentServiceSetup.FINDSET THEN
    ...
  Raised in: Table<Payment Service Setup>.PROCEDURE<AskUserToSetupNewPaymentService>
    Code lines:
    ...
    OnRegisterPaymentServiceProviders(TempPaymentServiceSetupProviders);
    IF NOT TempPaymentServiceSetupProviders.FINDFIRST THEN
      EXIT(FALSE);
    
    // Check if there are payment services that are not enabled
    OnRegisterPaymentServices(TempNotEnabledPaymentServiceSetupProviders); <=====================
    DefinedPaymentServiceExist := TempNotEnabledPaymentServiceSetupProviders.FINDFIRST;
    
    IF DefinedPaymentServiceExist THEN BEGIN
      SelectedOption := STRMENU(CreateOrUpdateOptionQst,1,SetupExistingServicesOrCreateNewQst);
    ...
Table<Sales Shipment Header>.PROCEDURE<OnBeforeEmailRecords>
  Raised in: Table<Sales Shipment Header>.PROCEDURE<EmailRecords>
    Code lines:
    OnBeforeEmailRecords(Rec,ShowDialog,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    DocumentSendingProfile.TrySendToEMail(
      DummyReportSelections.Usage::"S.Shipment",Rec,FIELDNO("No."),DocTxt,FIELDNO("Bill-to Customer No."),ShowDialog);
Table<Sales Shipment Header>.PROCEDURE<OnBeforePrintRecords>
  Raised in: Table<Sales Shipment Header>.PROCEDURE<PrintRecords>
    Code lines:
    WITH SalesShptHeader DO BEGIN
      COPY(Rec);
      OnBeforePrintRecords(SalesShptHeader,ShowRequestForm,IsHandled); <=====================
      IF IsHandled THEN
        EXIT;
    
      ReportSelection.PrintWithGUIYesNo(
        ReportSelection.Usage::"S.Shipment",SalesShptHeader,ShowRequestForm,FIELDNO("Bill-to Customer No."));
    END;
Table<Sales Shipment Line>.PROCEDURE<OnAfterInitFromSalesLine>
  Raised in: Table<Sales Shipment Line>.PROCEDURE<InitFromSalesLine>
    Code lines:
    ...
    IF SalesLine."Document Type" = SalesLine."Document Type"::Order THEN BEGIN
      "Order No." := SalesLine."Document No.";
      "Order Line No." := SalesLine."Line No.";
    END;
    
    OnAfterInitFromSalesLine(SalesShptHeader,SalesLine,Rec); <=====================
Table<Sales Shipment Line>.PROCEDURE<OnAfterInsertInvLineFromShptLine>
  Raised in: Table<Sales Shipment Line>.PROCEDURE<InsertInvLineFromShptLine>
    Code lines:
    ...
      SalesLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
      SalesLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
      SalesLine."Dimension Set ID" := "Dimension Set ID";
      OnBeforeInsertInvLineFromShptLine(Rec,SalesLine,SalesOrderLine);
      SalesLine.INSERT;
      OnAfterInsertInvLineFromShptLine(SalesLine); <=====================
    
      ItemTrackingMgt.CopyHandledItemTrkgToInvLine(SalesOrderLine,SalesLine);
    
      NextLineNo := NextLineNo + 10000;
    ...
Table<Sales Shipment Line>.PROCEDURE<OnBeforeCodeInsertInvLineFromShptLine>
  Raised in: Table<Sales Shipment Line>.PROCEDURE<InsertInvLineFromShptLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCodeInsertInvLineFromShptLine(Rec,SalesLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SETRANGE("Document No.","Document No.");
    
    TempSalesLine := SalesLine;
    IF SalesLine.FIND('+') THEN
      NextLineNo := SalesLine."Line No." + 10000
    ...
Table<Sales Shipment Line>.PROCEDURE<OnBeforeInsertInvLineFromShptLine>
  Raised in: Table<Sales Shipment Line>.PROCEDURE<InsertInvLineFromShptLine>
    Code lines:
    ...
      SalesLine."Document No." := TempSalesLine."Document No.";
      LanguageManagement.SetGlobalLanguageByCode(SalesInvHeader."Language Code");
      SalesLine.Description := STRSUBSTNO(Text000,"Document No.");
      LanguageManagement.RestoreGlobalLanguage;
      IsHandled := FALSE;
      OnBeforeInsertInvLineFromShptLineBeforeInsertTextLine(Rec,SalesLine,NextLineNo,IsHandled); <=====================
      IF NOT IsHandled THEN BEGIN
        SalesLine.INSERT;
        NextLineNo := NextLineNo + 10000;
      END;
    ...
Table<Sales Shipment Line>.PROCEDURE<OnBeforeInsertInvLineFromShptLineBeforeInsertTextLine>
  Raised in: Table<Sales Shipment Line>.PROCEDURE<InsertInvLineFromShptLine>
    Code lines:
    ...
      SalesLine."Document No." := TempSalesLine."Document No.";
      LanguageManagement.SetGlobalLanguageByCode(SalesInvHeader."Language Code");
      SalesLine.Description := STRSUBSTNO(Text000,"Document No.");
      LanguageManagement.RestoreGlobalLanguage;
      IsHandled := FALSE;
      OnBeforeInsertInvLineFromShptLineBeforeInsertTextLine(Rec,SalesLine,NextLineNo,IsHandled); <=====================
      IF NOT IsHandled THEN BEGIN
        SalesLine.INSERT;
        NextLineNo := NextLineNo + 10000;
      END;
    ...
Table<Sales Invoice Header>.PROCEDURE<OnGetPaymentReference>
  Raised in: Table<Sales Invoice Header>.PROCEDURE<GetPaymentReference>
    Code lines:
    OnGetPaymentReference(PaymentReference); <=====================
    EXIT(PaymentReference);
Table<Sales Invoice Header>.PROCEDURE<OnGetPaymentReferenceLbl>
  Raised in: Table<Sales Invoice Header>.PROCEDURE<GetPaymentReferenceLbl>
    Code lines:
    OnGetPaymentReferenceLbl(PaymentReferenceLbl); <=====================
    EXIT(PaymentReferenceLbl);
Table<Sales Invoice Line>.PROCEDURE<OnAfterInitFromSalesLine>
  Raised in: Table<Sales Invoice Line>.PROCEDURE<InitFromSalesLine>
    Code lines:
    ...
    "Posting Date" := SalesInvHeader."Posting Date";
    "Document No." := SalesInvHeader."No.";
    Quantity := SalesLine."Qty. to Invoice";
    "Quantity (Base)" := SalesLine."Qty. to Invoice (Base)";
    
    OnAfterInitFromSalesLine(Rec,SalesInvHeader,SalesLine); <=====================
Table<Sales Cr.Memo Line>.PROCEDURE<OnAfterInitFromSalesLine>
  Raised in: Table<Sales Cr.Memo Line>.PROCEDURE<InitFromSalesLine>
    Code lines:
    ...
    "Posting Date" := SalesCrMemoHeader."Posting Date";
    "Document No." := SalesCrMemoHeader."No.";
    Quantity := SalesLine."Qty. to Invoice";
    "Quantity (Base)" := SalesLine."Qty. to Invoice (Base)";
    
    OnAfterInitFromSalesLine(Rec,SalesCrMemoHeader,SalesLine); <=====================
Table<Purch. Rcpt. Line>.PROCEDURE<OnAfterInitFromPurchLine>
  Raised in: Table<Purch. Rcpt. Line>.PROCEDURE<InitFromPurchLine>
    Code lines:
    ...
      Factor := PurchLine."Qty. to Receive" / PurchLine.Quantity;
      IF Factor <> 1 THEN
        UpdateJobPrices(Factor);
    END;
    
    OnAfterInitFromPurchLine(PurchRcptHeader,PurchLine,Rec); <=====================
Table<Purch. Rcpt. Line>.PROCEDURE<OnAfterInsertInvLineFromRcptLine>
  Raised in: Table<Purch. Rcpt. Line>.PROCEDURE<InsertInvLineFromRcptLine>
    Code lines:
    ...
      ELSE
        PurchLine."Drop Shipment" := TRUE;
    
      OnBeforeInsertInvLineFromRcptLine(Rec,PurchLine);
      PurchLine.INSERT;
      OnAfterInsertInvLineFromRcptLine(PurchLine); <=====================
    
      ItemTrackingMgt.CopyHandledItemTrkgToInvLine2(PurchOrderLine,PurchLine);
    
      NextLineNo := NextLineNo + 10000;
    ...
Table<Purch. Rcpt. Line>.PROCEDURE<OnBeforeInsertInvLineFromRcptLine>
  Raised in: Table<Purch. Rcpt. Line>.PROCEDURE<InsertInvLineFromRcptLine>
    Code lines:
    ...
      PurchLine."Document Type" := TempPurchLine."Document Type";
      PurchLine."Document No." := TempPurchLine."Document No.";
      LanguageManagement.SetGlobalLanguageByCode(PurchInvHeader."Language Code");
      PurchLine.Description := STRSUBSTNO(Text000,"Document No.");
      LanguageManagement.RestoreGlobalLanguage;
      OnBeforeInsertInvLineFromRcptLineBeforeInsertTextLine(Rec,PurchLine,NextLineNo,Handled); <=====================
      IF NOT Handled THEN BEGIN
        PurchLine.INSERT;
        NextLineNo := NextLineNo + 10000;
      END;
    ...
Table<Purch. Rcpt. Line>.PROCEDURE<OnBeforeInsertInvLineFromRcptLineBeforeInsertTextLine>
  Raised in: Table<Purch. Rcpt. Line>.PROCEDURE<InsertInvLineFromRcptLine>
    Code lines:
    ...
      PurchLine."Document Type" := TempPurchLine."Document Type";
      PurchLine."Document No." := TempPurchLine."Document No.";
      LanguageManagement.SetGlobalLanguageByCode(PurchInvHeader."Language Code");
      PurchLine.Description := STRSUBSTNO(Text000,"Document No.");
      LanguageManagement.RestoreGlobalLanguage;
      OnBeforeInsertInvLineFromRcptLineBeforeInsertTextLine(Rec,PurchLine,NextLineNo,Handled); <=====================
      IF NOT Handled THEN BEGIN
        PurchLine.INSERT;
        NextLineNo := NextLineNo + 10000;
      END;
    ...
Table<Purch. Inv. Line>.PROCEDURE<OnAfterInitFromPurchLine>
  Raised in: Table<Purch. Inv. Line>.PROCEDURE<InitFromPurchLine>
    Code lines:
    ...
    "Posting Date" := PurchInvHeader."Posting Date";
    "Document No." := PurchInvHeader."No.";
    Quantity := PurchLine."Qty. to Invoice";
    "Quantity (Base)" := PurchLine."Qty. to Invoice (Base)";
    
    OnAfterInitFromPurchLine(PurchInvHeader,PurchLine,Rec); <=====================
Table<Transformation Rule>.PROCEDURE<OnCreateTransformationRules>
  Raised in: Page<Transformation Rules>.<OnOpenPage>
    Code lines:
    IF ISEMPTY THEN
      CreateDefaultTransformations;
    OnCreateTransformationRules; <=====================
  Raised in: Table<Transformation Rule>.PROCEDURE<CreateDefaultTransformations>
    Code lines:
    ...
    InsertRec(YYYYMMDDHHMMSSTxt,YYYYMMDDHHMMSSDescTxt,"Transformation Type"::"Date and Time Formatting",0,0,'yyyyMMddHHmmss','');
    InsertRec(ALPHANUMERIC_ONLYTxt,AlphaNumericDescTxt,"Transformation Type"::"Remove Non-Alphanumeric Characters",0,0,'','');
    InsertRec(DKNUMBERFORMATTxt,DKNUMBERFORMATDescTxt,"Transformation Type"::"Decimal Formatting",0,0,'','da-DK');
    InsertRec(USDATEFORMATTxt,USDATEFORMATDescTxt,"Transformation Type"::"Date Formatting",0,0,'','en-US');
    InsertRec(USDATETIMEFORMATTxt,USDATETIMEFORMATDescTxt,"Transformation Type"::"Date and Time Formatting",0,0,'','en-US');
    OnCreateTransformationRules; <=====================
    InsertFindAndReplaceRule(
      DeleteNOTPROVIDEDTxt,DeleteNOTPROVIDEDDescriptionTxt,"Transformation Type"::"Regular Expression - Replace",'NOTPROVIDED','');
Table<Transformation Rule>.PROCEDURE<OnTransformation>
  Raised in: Table<Transformation Rule>.PROCEDURE<TransformText>
    Code lines:
    ...
      "Transformation Type"::"Date and Time Formatting":
        NewValue := DateTimeFormatting(OldValue);
      "Transformation Type"::"Decimal Formatting":
        NewValue := DecimalFormatting(OldValue);
      "Transformation Type"::Custom:
        OnTransformation(Code,OldValue,NewValue); <=====================
    END;
    
    IF "Next Transformation Rule" <> '' THEN
      IF TransformationRule.GET("Next Transformation Rule") THEN
    ...
Table<Purch. Cr. Memo Line>.PROCEDURE<OnAfterInitFromPurchLine>
  Raised in: Table<Purch. Cr. Memo Line>.PROCEDURE<InitFromPurchLine>
    Code lines:
    ...
    "Posting Date" := PurchCrMemoHdr."Posting Date";
    "Document No." := PurchCrMemoHdr."No.";
    Quantity := PurchLine."Qty. to Invoice";
    "Quantity (Base)" := PurchLine."Qty. to Invoice (Base)";
    
    OnAfterInitFromPurchLine(PurchCrMemoHdr,PurchLine,Rec); <=====================
Table<Incoming Document>.PROCEDURE<OnAfterCreateGenJnlLineFromIncomingDocFail>
  Raised in: Table<Incoming Document>.PROCEDURE<CreateGenJnlLine>
    Code lines:
    ...
    GenJnlLine.Description := COPYSTR(Description,1,MAXSTRLEN(GenJnlLine.Description));
    
    IF GenJnlLine.INSERT(TRUE) THEN
      OnAfterCreateGenJnlLineFromIncomingDocSuccess(Rec)
    ELSE
      OnAfterCreateGenJnlLineFromIncomingDocFail(Rec); <=====================
    
    IF GenJnlLine.HASLINKS THEN
      GenJnlLine.DELETELINKS;
    IF GetURL <> '' THEN
    ...
  Raised in: Table<Incoming Document>.PROCEDURE<CreateGeneralJournalLineWithDataExchange>
    Code lines:
    ...
    
    ErrorMessage.SetContext(RECORDID);
    IF NOT ErrorMessage.HasErrors(FALSE) THEN
      OnAfterCreateGenJnlLineFromIncomingDocSuccess(Rec)
    ELSE
      OnAfterCreateGenJnlLineFromIncomingDocFail(Rec); <=====================
Table<Incoming Document>.PROCEDURE<OnAfterCreateGenJnlLineFromIncomingDocSuccess>
  Raised in: Table<Incoming Document>.PROCEDURE<CreateGenJnlLine>
    Code lines:
    ...
    GenJnlLine.SetUpNewLine(LastGenJnlLine,0,TRUE);
    GenJnlLine."Incoming Document Entry No." := "Entry No.";
    GenJnlLine.Description := COPYSTR(Description,1,MAXSTRLEN(GenJnlLine.Description));
    
    IF GenJnlLine.INSERT(TRUE) THEN
      OnAfterCreateGenJnlLineFromIncomingDocSuccess(Rec) <=====================
    ELSE
      OnAfterCreateGenJnlLineFromIncomingDocFail(Rec);
    
    IF GenJnlLine.HASLINKS THEN
    ...
  Raised in: Table<Incoming Document>.PROCEDURE<CreateGeneralJournalLineWithDataExchange>
    Code lines:
    ...
    
    CreateWithDataExchange("Document Type"::Journal);
    
    ErrorMessage.SetContext(RECORDID);
    IF NOT ErrorMessage.HasErrors(FALSE) THEN
      OnAfterCreateGenJnlLineFromIncomingDocSuccess(Rec) <=====================
    ELSE
      OnAfterCreateGenJnlLineFromIncomingDocFail(Rec);
Table<Incoming Document>.PROCEDURE<OnAfterCreatePurchHeaderFromIncomingDoc>
  Raised in: Table<Incoming Document>.PROCEDURE<CreatePurchDoc>
    Code lines:
    ...
        PurchHeader."Document Type" := PurchHeader."Document Type"::Invoice;
      DocumentType::"Credit Memo":
        PurchHeader."Document Type" := PurchHeader."Document Type"::"Credit Memo";
    END;
    PurchHeader.INSERT(TRUE);
    OnAfterCreatePurchHeaderFromIncomingDoc(PurchHeader); <=====================
    IF GetURL <> '' THEN
      PurchHeader.ADDLINK(GetURL,Description);
    PurchHeader."Incoming Document Entry No." := "Entry No.";
    PurchHeader.MODIFY;
    ...
Table<Incoming Document>.PROCEDURE<OnAfterCreateSalesHeaderFromIncomingDoc>
  Raised in: Table<Incoming Document>.PROCEDURE<CreateSalesDoc>
    Code lines:
    ...
        SalesHeader."Document Type" := SalesHeader."Document Type"::Invoice;
      DocumentType::"Credit Memo":
        SalesHeader."Document Type" := SalesHeader."Document Type"::"Credit Memo";
    END;
    SalesHeader.INSERT(TRUE);
    OnAfterCreateSalesHeaderFromIncomingDoc(SalesHeader); <=====================
    IF GetURL <> '' THEN
      SalesHeader.ADDLINK(GetURL,Description);
    SalesHeader."Incoming Document Entry No." := "Entry No.";
    SalesHeader.MODIFY;
    ...
Table<Incoming Document>.PROCEDURE<OnAfterUpdateDocumentFields>
  Raised in: Table<Incoming Document>.PROCEDURE<UpdateDocumentFields>
    Code lines:
    ...
      "Document No." := GenJournalLine."Document No.";
      EXIT;
    END;
    
    DocExists := FALSE;
    OnAfterUpdateDocumentFields(Rec,DocExists); <=====================
    IF NOT DocExists THEN
      ERROR(EntityNotFoundErr);
Table<Incoming Document>.PROCEDURE<OnCheckIncomingDocCreateDocRestrictions>
  Raised in: Table<Incoming Document>.PROCEDURE<CreateWithDataExchange>
    Code lines:
    FIND;
    
    IF ApprovalsMgmt.IsIncomingDocApprovalsWorkflowEnabled(Rec) AND (Status = Status::New) THEN
      ERROR(DocWhenApprovalIsCompleteErr);
    
    OnCheckIncomingDocCreateDocRestrictions; <=====================
    
    IF "Data Exchange Type" = '' THEN
      ERROR(DataExchangeTypeEmptyErr);
    
    ...
Table<Incoming Document>.PROCEDURE<OnCheckIncomingDocReleaseRestrictions>
  Raised in: Codeunit<Release Incoming Document>.<OnRun>
    Code lines:
    IF Status = Status::Released THEN
      EXIT;
    IF Status IN [Status::Created,Status::Posted] THEN
      ERROR(CanReleasedIfStatusErr,Status::"Pending Approval",Status::New,Status::Failed);
    
    OnCheckIncomingDocReleaseRestrictions; <=====================
    
    TESTFIELD(Posted,FALSE);
    
    IF NOT IsADocumentAttached THEN
    ...
Table<Incoming Document>.PROCEDURE<OnCheckIncomingDocSetForOCRRestrictions>
  Raised in: Codeunit<Send Incoming Document to OCR>.PROCEDURE<VerifySendToOCR>
    Code lines:
    ...
      IF "OCR Status" IN ["OCR Status"::Sent,"OCR Status"::Success,"OCR Status"::"Awaiting Verification"] THEN BEGIN
        ShowMessage(STRSUBSTNO(ErrorMessage,FORMAT("OCR Status")));
        EXIT(FALSE);
      END;
    
      OnCheckIncomingDocSetForOCRRestrictions; <=====================
    
      IF ApprovalsMgmt.IsIncomingDocApprovalsWorkflowEnabled(IncomingDocument) AND (Status = Status::New) THEN
        ERROR(OCRWhenApprovalIsCompleteErr);
    
    ...
Table<Incoming Document>.PROCEDURE<OnGetDataExchangePath>
  Raised in: Table<Incoming Document>.PROCEDURE<GetDataExchangePath>
    Code lines:
    ...
      FIELDNO("Order No."):
        EXIT(DataExchLineDef.GetPath(DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Vendor Order No.")));
      FIELDNO("VAT Amount"):
        EXIT(DataExchLineDef.GetPath(DATABASE::"G/L Entry",GLEntry.FIELDNO("VAT Amount")));
      ELSE BEGIN
        OnGetDataExchangePath(DataExchLineDef,FieldNumber,DataExchangePath); <=====================
        IF  DataExchangePath <> '' THEN
          EXIT(DataExchangePath);
      END;
    END;
    ...
Table<Mini Customer Template>.PROCEDURE<OnAfterCreateFieldRefArray>
  Raised in: Table<Mini Customer Template>.PROCEDURE<CreateFieldRefArray>
    Code lines:
    ...
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Reminder Terms Code")));
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("VAT Bus. Posting Group")));
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Block Payment Tolerance")));
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Allow Line Disc.")));
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Validate EU Vat Reg. No.")));
    OnAfterCreateFieldRefArray(FieldRefArray,RecRef); <=====================
Table<Item Template>.PROCEDURE<OnAfterCreateFieldRefArray>
  Raised in: Table<Item Template>.PROCEDURE<CreateFieldRefArray>
    Code lines:
    ...
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Item Disc. Group")));
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Tax Group Code")));
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Warehouse Class Code")));
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Item Category Code")));
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Service Item Group")));
    OnAfterCreateFieldRefArray(FieldRefArray,RecRef); <=====================
Table<Dimensions Template>.PROCEDURE<OnAfterCreateFieldRefArray>
  Raised in: Table<Dimensions Template>.PROCEDURE<CreateFieldRefArray>
    Code lines:
    I := 1;
    
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Dimension Code")));
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Dimension Value Code")));
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Value Posting")));
    OnAfterCreateFieldRefArray(FieldRefArray,RecRef); <=====================
Table<Mini Vendor Template>.PROCEDURE<OnAfterCreateFieldRefArray>
  Raised in: Table<Mini Vendor Template>.PROCEDURE<CreateFieldRefArray>
    Code lines:
    ...
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Post Code")));
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO(County)));
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("VAT Bus. Posting Group")));
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Block Payment Tolerance")));
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Validate EU Vat Reg. No.")));
    OnAfterCreateFieldRefArray(FieldRefArray,RecRef); <=====================
Table<O365 Getting Started>.PROCEDURE<OnO365DemoCompanyInitialize>
  Raised in: Codeunit<O365 Getting Started Mgt.>.PROCEDURE<CheckOrLaunchWizard>
    Code lines:
    ...
    
    WizardHasBeenShownToUser := O365GettingStarted.GET(USERID,ClientTypeManagement.GetCurrentClientType);
    
    IF NOT WizardHasBeenShownToUser THEN BEGIN
      IF NOT IdentityManagement.IsInvAppId THEN
        O365GettingStarted.OnO365DemoCompanyInitialize; <=====================
      IF Launch THEN BEGIN
        COMMIT;
        PAGE.RUNMODAL(PageToStart);
      END;
    ...
Table<Incoming Document Attachment>.PROCEDURE<OnAttachBinaryFile>
  Raised in: Table<Incoming Document>.PROCEDURE<AddXmlAttachmentFromXmlText>
    Code lines:
    ...
    IncomingDocumentAttachment.VALIDATE("File Extension",'xml');
    IncomingDocumentAttachment.Content.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
    OutStr.WRITETEXT(XmlText);
    IncomingDocumentAttachment.INSERT(TRUE);
    IF IncomingDocumentAttachment.Type IN [IncomingDocumentAttachment.Type::Image,IncomingDocumentAttachment.Type::PDF] THEN
      IncomingDocumentAttachment.OnAttachBinaryFile; <=====================
  Raised in: Codeunit<Import Attachment - Inc. Doc.>.PROCEDURE<ImportAttachment>
    Code lines:
    ...
      END;
    
      INSERT(TRUE);
    
      IF Type IN [Type::Image,Type::PDF] THEN
        OnAttachBinaryFile; <=====================
    END;
    EXIT(TRUE);
Table<Incoming Document Attachment>.PROCEDURE<OnBeforeExtractHeaderFields>
  Raised in: Table<Incoming Document Attachment>.PROCEDURE<ExtractHeaderFields>
    Code lines:
    ...
    AddFieldToFieldBuffer(TempFieldBuffer,IncomingDocument.FIELDNO("Vendor IBAN"));
    AddFieldToFieldBuffer(TempFieldBuffer,IncomingDocument.FIELDNO("Vendor Bank Branch No."));
    AddFieldToFieldBuffer(TempFieldBuffer,IncomingDocument.FIELDNO("Vendor Bank Account No."));
    AddFieldToFieldBuffer(TempFieldBuffer,IncomingDocument.FIELDNO("Vendor Phone No."));
    
    OnBeforeExtractHeaderFields(TempFieldBuffer,IncomingDocument); <=====================
    
    TempFieldBuffer.RESET;
    TempFieldBuffer.FINDSET;
    REPEAT
    ...
Table<Incoming Document Attachment>.PROCEDURE<OnGetBinaryContent>
  Raised in: Table<Incoming Document Attachment>.PROCEDURE<Export>
    Code lines:
    ...
      EXIT;
    
    IF DefaultFileName = '' THEN
      DefaultFileName := Name + '.' + "File Extension";
    
    OnGetBinaryContent(TempBlob); <=====================
    IF NOT TempBlob.Blob.HASVALUE THEN
      TempBlob.Blob := Content;
    EXIT(FileMgt.BLOBExport(TempBlob,DefaultFileName,ShowFileDialog));
  Raised in: Table<Incoming Document Attachment>.PROCEDURE<SendToOCR>
    Code lines:
    CALCFIELDS(Content);
    TempBlob.INIT;
    TempBlob."Primary Key" := "Incoming Document Entry No.";
    OnGetBinaryContent(TempBlob); <=====================
    IF NOT TempBlob.Blob.HASVALUE THEN
      TempBlob.Blob := Content;
    
    IF "External Document Reference" = '' THEN
      "External Document Reference" := LOWERCASE(DELCHR(FORMAT(CREATEGUID),'=','{}-'));
    MODIFY;
    ...
  Raised in: Table<Incoming Document Attachment>.PROCEDURE<UpdateIncomingDocumentHeaderFields>
    Code lines:
    IF Type <> Type::XML THEN
      EXIT;
    TempBlob.INIT;
    OnGetBinaryContent(TempBlob); <=====================
    IF NOT TempBlob.Blob.HASVALUE THEN
      TempBlob.Blob := Content;
    TempBlob.Blob.CREATEINSTREAM(InStream);
    IF NOT XMLDOMManagement.LoadXMLNodeFromInStream(InStream,XMLRootNode) THEN
      EXIT;
    IF NOT IncomingDocument.GET("Incoming Document Entry No.") THEN
    ...
Table<Service Connection>.PROCEDURE<OnRegisterServiceConnection>
  Raised in: Page<Service Connections>.PROCEDURE<ReloadServiceConnections>
    Code lines:
    DELETEALL;
    OnRegisterServiceConnection(Rec); <=====================
  Raised in: Page<Service Connections Part>.<OnOpenPage>
    Code lines:
    OnRegisterServiceConnection(Rec); <=====================
  Raised in: Page<Service Connections Part>.PROCEDURE<CallSetup>
    Code lines:
    ...
      EXIT;
    RecordRef.GET("Record ID");
    RecordRefVariant := RecordRef;
    PAGE.RUNMODAL("Page ID",RecordRefVariant);
    DELETE;
    OnRegisterServiceConnection(Rec); <=====================
    IF GET(xRec."No.") THEN;
    CurrPage.UPDATE(FALSE);
Table<My Notifications>.PROCEDURE<OnAfterIsNotificationEnabled>
  Raised in: Table<My Notifications>.PROCEDURE<IsEnabled>
    Code lines:
    IsNotificationEnabled := TRUE;
    
    IF GET(USERID,NotificationId) THEN
      IsNotificationEnabled := Enabled;
    
    OnAfterIsNotificationEnabled(NotificationId,IsNotificationEnabled); <=====================
    
    EXIT(IsNotificationEnabled);
Table<My Notifications>.PROCEDURE<OnStateChanged>
  Raised in: Table<My Notifications>.Field<Enabled>.<OnValidate>
    Code lines:
    IF Enabled <> xRec.Enabled THEN
      OnStateChanged("Notification Id",Enabled); <=====================
Table<Curr. Exch. Rate Update Setup>.PROCEDURE<OnBeforeSetupCurrencyExchRateService>
  Raised in: Table<Curr. Exch. Rate Update Setup>.PROCEDURE<SetupService>
    Code lines:
    OnBeforeSetupCurrencyExchRateService(Rec); <=====================
    IF ISEMPTY THEN
      CODEUNIT.RUN(CODEUNIT::"Set Up Curr Exch Rate Service");
Table<Job>.PROCEDURE<OnAfterChangeJobCompletionStatus>
  Raised in: Table<Job>.PROCEDURE<ChangeJobCompletionStatus>
    Code lines:
    ...
      JobCalcWIP.ReOpenJob("No.");
      "WIP Posting Date" := 0D;
      MESSAGE(ReverseCompletionEntriesMsg,GetReportCaption(REPORT::"Job Post WIP to G/L"));
    END;
    
    OnAfterChangeJobCompletionStatus(Rec,xRec) <=====================
Table<Job>.PROCEDURE<OnAfterUpdateBillToCust>
  Raised in: Table<Job>.PROCEDURE<UpdateCust>
    Code lines:
    ...
      "Language Code" := '';
      "Bill-to County" := '';
      VALIDATE("Bill-to Contact No.",'');
    END;
    
    OnAfterUpdateBillToCust(Rec); <=====================
Table<G/L Entry>.PROCEDURE<OnAfterCopyGLEntryFromGenJnlLine>
  Raised in: Table<G/L Entry>.PROCEDURE<CopyFromGenJnlLine>
    Code lines:
    ...
    "Reason Code" := GenJnlLine."Reason Code";
    "User ID" := USERID;
    "No. Series" := GenJnlLine."Posting No. Series";
    "IC Partner Code" := GenJnlLine."IC Partner Code";
    
    OnAfterCopyGLEntryFromGenJnlLine(Rec,GenJnlLine); <=====================
Table<Posted Deferral Line>.PROCEDURE<OnBeforeInitFromDeferralLine>
  Raised in: Table<Posted Deferral Line>.PROCEDURE<InitFromDeferralLine>
    Code lines:
    ...
    "Account No." := AccountNo;
    "Document Type" := NewDocumentType;
    "Document No." := NewDocumentNo;
    "Line No." := NewLineNo;
    "Deferral Account" := DeferralAccount;
    OnBeforeInitFromDeferralLine(Rec,DeferralLine); <=====================
    INSERT(TRUE);
Table<Standard Customer Sales Code>.PROCEDURE<OnAfterCreateSalesInvoice>
  Raised in: Table<Standard Customer Sales Code>.PROCEDURE<CreateSalesInvoice>
    Code lines:
    ...
    IF "Direct Debit Mandate ID" <> '' THEN
      SalesHeader.VALIDATE("Direct Debit Mandate ID","Direct Debit Mandate ID");
    SalesHeader.MODIFY;
    ApplyStdCodesToSalesLines(SalesHeader,Rec);
    
    OnAfterCreateSalesInvoice(SalesHeader,Rec); <=====================
Table<Standard Customer Sales Code>.PROCEDURE<OnBeforeApplyStdCodesToSalesLines>
  Raised in: Table<Standard Customer Sales Code>.PROCEDURE<ApplyStdCodesToSalesLines>
    Code lines:
    ...
    IF SalesHeader."Prices Including VAT" THEN
      Factor := 1
    ELSE
      Factor := 0;
    
    OnBeforeApplyStdCodesToSalesLinesLoop(StdSalesLine,SalesLine,SalesHeader,StdSalesCode); <=====================
    
    SalesLine.LOCKTABLE;
    StdSalesLine.LOCKTABLE;
    IF StdSalesLine.FIND('-') THEN
    ...
Table<Standard Customer Sales Code>.PROCEDURE<OnBeforeApplyStdCodesToSalesLinesLoop>
  Raised in: Table<Standard Customer Sales Code>.PROCEDURE<ApplyStdCodesToSalesLines>
    Code lines:
    ...
    IF SalesHeader."Prices Including VAT" THEN
      Factor := 1
    ELSE
      Factor := 0;
    
    OnBeforeApplyStdCodesToSalesLinesLoop(StdSalesLine,SalesLine,SalesHeader,StdSalesCode); <=====================
    
    SalesLine.LOCKTABLE;
    StdSalesLine.LOCKTABLE;
    IF StdSalesLine.FIND('-') THEN
    ...
Table<Standard Vendor Purchase Code>.PROCEDURE<OnBeforeApplyStdCodesToPurchaseLines>
  Raised in: Table<Standard Vendor Purchase Code>.PROCEDURE<ApplyStdCodesToPurchaseLines>
    Code lines:
    ...
    
        PurchLine."Shortcut Dimension 1 Code" := StdPurchLine."Shortcut Dimension 1 Code";
        PurchLine."Shortcut Dimension 2 Code" := StdPurchLine."Shortcut Dimension 2 Code";
    
        CombineDimensions(PurchLine,StdPurchLine);
        OnBeforeApplyStdCodesToPurchaseLines(PurchLine,StdPurchLine); <=====================
        IF StdPurchLine.InsertLine THEN BEGIN
          PurchLine."Line No." := GetNextLineNo(PurchLine);
          PurchLine.INSERT(TRUE);
          InsertExtendedText(PurchLine);
    ...
Table<Reversal Entry>.PROCEDURE<OnAfterCaption>
  Raised in: Table<Reversal Entry>.PROCEDURE<Caption>
    Code lines:
    ...
          EXIT(STRSUBSTNO('%1 %2 %3',FA.TABLECAPTION,FA."No.",FA.Description));
        END;
      "Entry Type"::VAT:
        EXIT(STRSUBSTNO('%1',VATEntry.TABLECAPTION));
      ELSE BEGIN
        OnAfterCaption(Rec,NewCaption); <=====================
        EXIT(NewCaption);
      END;
    END;
Table<Reversal Entry>.PROCEDURE<OnAfterCheckBankAcc>
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckBankAcc>
    Code lines:
    ...
    CheckLedgEntry.SETRANGE("Bank Account Ledger Entry No.",BankAccLedgEntry."Entry No.");
    IF NOT CheckLedgEntry.ISEMPTY THEN
      ERROR(
        Text003,BankAccLedgEntry.TABLECAPTION,BankAccLedgEntry."Entry No.");
    
    OnAfterCheckBankAcc(BankAcc,BankAccLedgEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCheckCust>
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckCust>
    Code lines:
    ...
    Cust.CheckBlockedCustOnJnls(Cust,CustLedgEntry."Document Type",FALSE);
    IF CustLedgEntry.Reversed THEN
      AlreadyReversedEntry(CustLedgEntry.TABLECAPTION,CustLedgEntry."Entry No.");
    CheckDtldCustLedgEntry(CustLedgEntry);
    
    OnAfterCheckCust(Cust,CustLedgEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCheckDtldCustLedgEntry>
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckDtldCustLedgEntry>
    Code lines:
    ...
    DtldCustLedgEntry.SETFILTER("Entry Type",'%1|%2',
      DtldCustLedgEntry."Entry Type"::"Realized Gain",DtldCustLedgEntry."Entry Type"::"Realized Loss");
    IF NOT DtldCustLedgEntry.ISEMPTY THEN
      ERROR(Text013,CustLedgEntry.TABLECAPTION,CustLedgEntry."Entry No.");
    
    OnAfterCheckDtldCustLedgEntry(DtldCustLedgEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCheckDtldEmplLedgEntry>
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckDtldEmplLedgEntry>
    Code lines:
    ...
    DetailedEmployeeLedgerEntry.SETFILTER("Entry Type",'<>%1',DetailedEmployeeLedgerEntry."Entry Type"::"Initial Entry");
    DetailedEmployeeLedgerEntry.SETRANGE(Unapplied,FALSE);
    IF NOT DetailedEmployeeLedgerEntry.ISEMPTY THEN
      ERROR(ReversalErrorForChangedEntry(EmployeeLedgerEntry.TABLECAPTION,EmployeeLedgerEntry."Entry No."));
    
    OnAfterCheckDtldEmplLedgEntry(DetailedEmployeeLedgerEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCheckDtldVendLedgEntry>
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckDtldVendLedgEntry>
    Code lines:
    ...
    DtldVendLedgEntry.SETFILTER("Entry Type",'%1|%2',
      DtldVendLedgEntry."Entry Type"::"Realized Gain",DtldVendLedgEntry."Entry Type"::"Realized Loss");
    IF NOT DtldVendLedgEntry.ISEMPTY THEN
      ERROR(Text013,VendLedgEntry.TABLECAPTION,VendLedgEntry."Entry No.");
    
    OnAfterCheckDtldVendLedgEntry(DtldVendLedgEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCheckEmpl>
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckEmpl>
    Code lines:
    ...
    Employee.CheckBlockedEmployeeOnJnls(FALSE);
    IF EmployeeLedgerEntry.Reversed THEN
      AlreadyReversedEntry(EmployeeLedgerEntry.TABLECAPTION,EmployeeLedgerEntry."Entry No.");
    CheckDtldEmplLedgEntry(EmployeeLedgerEntry);
    
    OnAfterCheckEmpl(Employee,EmployeeLedgerEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCheckEntries>
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckEntries>
    Code lines:
    ...
        REPEAT
          CheckVAT(VATEntry);
        UNTIL VATEntry.NEXT = 0;
    END;
    
    OnAfterCheckEntries; <=====================
    
    DateComprReg.CheckMaxDateCompressed(MaxPostingDate,1);
Table<Reversal Entry>.PROCEDURE<OnAfterCheckFA>
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckFA>
    Code lines:
    ...
    FADeprBook.GET(FA."No.",FALedgEntry."Depreciation Book Code");
    IF FADeprBook."Disposal Date" <> 0D THEN
      ERROR(Text008,DeprCalc.FAName(FA,FALedgEntry."Depreciation Book Code"));
    FALedgEntry.TESTFIELD("G/L Entry No.");
    
    OnAfterCheckFA(FA,FALedgEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCheckGLAcc>
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckGLAcc>
    Code lines:
    ...
      AlreadyReversedEntry(GLEntry.TABLECAPTION,GLEntry."Entry No.");
    BalanceCheckAmount := BalanceCheckAmount + GLEntry.Amount;
    IF GLSetup."Additional Reporting Currency" <> '' THEN
      BalanceCheckAddCurrAmount := BalanceCheckAddCurrAmount + GLEntry."Additional-Currency Amount";
    
    OnAfterCheckGLAcc(GLAcc,GLEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCheckMaintenance>
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckMaintenance>
    Code lines:
    ...
    IF MaintenanceLedgEntry.Reversed THEN
      AlreadyReversedEntry(MaintenanceLedgEntry.TABLECAPTION,MaintenanceLedgEntry."Entry No.");
    FADeprBook.GET(FA."No.",MaintenanceLedgEntry."Depreciation Book Code");
    MaintenanceLedgEntry.TESTFIELD("G/L Entry No.");
    
    OnAfterCheckMaintenance(FA,MaintenanceLedgEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCheckVAT>
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckVAT>
    Code lines:
    ...
    IF VATEntry.Reversed THEN
      AlreadyReversedEntry(VATEntry.TABLECAPTION,VATEntry."Entry No.");
    IF VATEntry."Unrealized VAT Entry No." <> 0 THEN
      ERROR(UnrealizedVATReverseError(VATEntry.TABLECAPTION,VATEntry."Entry No."));
    
    OnAfterCheckVAT(VATEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCheckVend>
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckVend>
    Code lines:
    ...
    Vend.CheckBlockedVendOnJnls(Vend,VendLedgEntry."Document Type",FALSE);
    IF VendLedgEntry.Reversed THEN
      AlreadyReversedEntry(VendLedgEntry.TABLECAPTION,VendLedgEntry."Entry No.");
    CheckDtldVendLedgEntry(VendLedgEntry);
    
    OnAfterCheckVend(Vend,VendLedgEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromBankAccLedgEntry>
  Raised in: Table<Reversal Entry>.PROCEDURE<CopyFromBankAccLedgEntry>
    Code lines:
    ...
    "Document Type" := BankAccLedgEntry."Document Type";
    "Document No." := BankAccLedgEntry."Document No.";
    "Bal. Account Type" := BankAccLedgEntry."Bal. Account Type";
    "Bal. Account No." := BankAccLedgEntry."Bal. Account No.";
    
    OnAfterCopyFromBankAccLedgEntry(Rec,BankAccLedgEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromCustLedgEntry>
  Raised in: Table<Reversal Entry>.PROCEDURE<CopyFromCustLedgEntry>
    Code lines:
    ...
    "Document Type" := CustLedgEntry."Document Type";
    "Document No." := CustLedgEntry."Document No.";
    "Bal. Account Type" := CustLedgEntry."Bal. Account Type";
    "Bal. Account No." := CustLedgEntry."Bal. Account No.";
    
    OnAfterCopyFromCustLedgEntry(Rec,CustLedgEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromEmplLedgEntry>
  Raised in: Table<Reversal Entry>.PROCEDURE<CopyFromEmployeeLedgerEntry>
    Code lines:
    ...
    "Document Type" := EmployeeLedgerEntry."Document Type";
    "Document No." := EmployeeLedgerEntry."Document No.";
    "Bal. Account Type" := EmployeeLedgerEntry."Bal. Account Type";
    "Bal. Account No." := EmployeeLedgerEntry."Bal. Account No.";
    
    OnAfterCopyFromEmplLedgEntry(Rec,EmployeeLedgerEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromFALedgEntry>
  Raised in: Table<Reversal Entry>.PROCEDURE<CopyFromFALedgEntry>
    Code lines:
    ...
    "Document Type" := FALedgEntry."Document Type";
    "Document No." := FALedgEntry."Document No.";
    "Bal. Account Type" := FALedgEntry."Bal. Account Type";
    "Bal. Account No." := FALedgEntry."Bal. Account No.";
    
    OnAfterCopyFromFALedgEntry(Rec,FALedgEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromGLEntry>
  Raised in: Table<Reversal Entry>.PROCEDURE<CopyFromGLEntry>
    Code lines:
    ...
    "Document Type" := GLEntry."Document Type";
    "Document No." := GLEntry."Document No.";
    "Bal. Account Type" := GLEntry."Bal. Account Type";
    "Bal. Account No." := GLEntry."Bal. Account No.";
    
    OnAfterCopyFromGLEntry(Rec,GLEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromMaintenanceEntry>
  Raised in: Table<Reversal Entry>.PROCEDURE<CopyFromMaintenanceEntry>
    Code lines:
    ...
    "Document Type" := MaintenanceLedgEntry."Document Type";
    "Document No." := MaintenanceLedgEntry."Document No.";
    "Bal. Account Type" := MaintenanceLedgEntry."Bal. Account Type";
    "Bal. Account No." := MaintenanceLedgEntry."Bal. Account No.";
    
    OnAfterCopyFromMaintenanceEntry(Rec,MaintenanceLedgEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromVATEntry>
  Raised in: Table<Reversal Entry>.PROCEDURE<CopyFromVATEntry>
    Code lines:
    ...
    Amount := VATEntry.Amount;
    "Amount (LCY)" := VATEntry.Amount;
    "Document Type" := VATEntry."Document Type";
    "Document No." := VATEntry."Document No.";
    
    OnAfterCopyFromVATEntry(Rec,VATEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromVendLedgEntry>
  Raised in: Table<Reversal Entry>.PROCEDURE<CopyFromVendLedgEntry>
    Code lines:
    ...
    "Document Type" := VendLedgEntry."Document Type";
    "Document No." := VendLedgEntry."Document No.";
    "Bal. Account Type" := VendLedgEntry."Bal. Account Type";
    "Bal. Account No." := VendLedgEntry."Bal. Account No.";
    
    OnAfterCopyFromVendLedgEntry(Rec,VendLedgEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterInsertReversalEntry>
  Raised in: Table<Reversal Entry>.PROCEDURE<InsertReversalEntry>
    Code lines:
    ...
    InsertFromBankAccLedgEntry(Number,RevType,NextLineNo);
    InsertFromFALedgEntry(Number,RevType,NextLineNo);
    InsertFromMaintenanceLedgEntry(Number,RevType,NextLineNo);
    InsertFromVATEntry(TempRevertTransactionNo,Number,RevType,NextLineNo);
    InsertFromGLEntry(TempRevertTransactionNo,Number,RevType,NextLineNo);
    OnAfterInsertReversalEntry(TempRevertTransactionNo,Number,RevType,NextLineNo); <=====================
    IF TempReversalEntry.FIND('-') THEN;
Table<Reversal Entry>.PROCEDURE<OnAfterSetReverseFilter>
  Raised in: Table<Reversal Entry>.PROCEDURE<SetReverseFilter>
    Code lines:
    ...
      MaintenanceLedgEntry.SETCURRENTKEY("G/L Entry No.");
      MaintenanceLedgEntry.SETRANGE("G/L Entry No.",GLReg."From Entry No.",GLReg."To Entry No.");
      VATEntry.SETRANGE("Entry No.",GLReg."From VAT Entry No.",GLReg."To VAT Entry No.");
    END;
    
    OnAfterSetReverseFilter(Number,RevType); <=====================
Table<Reversal Entry>.PROCEDURE<OnBeforeCheckEntries>
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckEntries>
    Code lines:
    ...
    FAReg.LOCKTABLE;
    GLSetup.GET;
    MaxPostingDate := 0D;
    
    SkipCheck := FALSE;
    OnBeforeCheckEntries(Rec,DATABASE::"G/L Entry",SkipCheck); <=====================
    IF NOT SkipCheck THEN BEGIN
      IF GLEntry.ISEMPTY THEN
        ERROR(CannotReverseDeletedErr,GLEntry.TABLECAPTION,GLAcc.TABLECAPTION);
      IF GLEntry.FIND('-') THEN BEGIN
    ...
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckEntries>
    Code lines:
    ...
    FAReg.LOCKTABLE;
    GLSetup.GET;
    MaxPostingDate := 0D;
    
    SkipCheck := FALSE;
    OnBeforeCheckEntries(Rec,DATABASE::"G/L Entry",SkipCheck); <=====================
    IF NOT SkipCheck THEN BEGIN
      IF GLEntry.ISEMPTY THEN
        ERROR(CannotReverseDeletedErr,GLEntry.TABLECAPTION,GLAcc.TABLECAPTION);
      IF GLEntry.FIND('-') THEN BEGIN
    ...
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckEntries>
    Code lines:
    ...
    FAReg.LOCKTABLE;
    GLSetup.GET;
    MaxPostingDate := 0D;
    
    SkipCheck := FALSE;
    OnBeforeCheckEntries(Rec,DATABASE::"G/L Entry",SkipCheck); <=====================
    IF NOT SkipCheck THEN BEGIN
      IF GLEntry.ISEMPTY THEN
        ERROR(CannotReverseDeletedErr,GLEntry.TABLECAPTION,GLAcc.TABLECAPTION);
      IF GLEntry.FIND('-') THEN BEGIN
    ...
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckEntries>
    Code lines:
    ...
    FAReg.LOCKTABLE;
    GLSetup.GET;
    MaxPostingDate := 0D;
    
    SkipCheck := FALSE;
    OnBeforeCheckEntries(Rec,DATABASE::"G/L Entry",SkipCheck); <=====================
    IF NOT SkipCheck THEN BEGIN
      IF GLEntry.ISEMPTY THEN
        ERROR(CannotReverseDeletedErr,GLEntry.TABLECAPTION,GLAcc.TABLECAPTION);
      IF GLEntry.FIND('-') THEN BEGIN
    ...
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckEntries>
    Code lines:
    ...
    FAReg.LOCKTABLE;
    GLSetup.GET;
    MaxPostingDate := 0D;
    
    SkipCheck := FALSE;
    OnBeforeCheckEntries(Rec,DATABASE::"G/L Entry",SkipCheck); <=====================
    IF NOT SkipCheck THEN BEGIN
      IF GLEntry.ISEMPTY THEN
        ERROR(CannotReverseDeletedErr,GLEntry.TABLECAPTION,GLAcc.TABLECAPTION);
      IF GLEntry.FIND('-') THEN BEGIN
    ...
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckEntries>
    Code lines:
    ...
    FAReg.LOCKTABLE;
    GLSetup.GET;
    MaxPostingDate := 0D;
    
    SkipCheck := FALSE;
    OnBeforeCheckEntries(Rec,DATABASE::"G/L Entry",SkipCheck); <=====================
    IF NOT SkipCheck THEN BEGIN
      IF GLEntry.ISEMPTY THEN
        ERROR(CannotReverseDeletedErr,GLEntry.TABLECAPTION,GLAcc.TABLECAPTION);
      IF GLEntry.FIND('-') THEN BEGIN
    ...
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckEntries>
    Code lines:
    ...
    FAReg.LOCKTABLE;
    GLSetup.GET;
    MaxPostingDate := 0D;
    
    SkipCheck := FALSE;
    OnBeforeCheckEntries(Rec,DATABASE::"G/L Entry",SkipCheck); <=====================
    IF NOT SkipCheck THEN BEGIN
      IF GLEntry.ISEMPTY THEN
        ERROR(CannotReverseDeletedErr,GLEntry.TABLECAPTION,GLAcc.TABLECAPTION);
      IF GLEntry.FIND('-') THEN BEGIN
    ...
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckEntries>
    Code lines:
    ...
    FAReg.LOCKTABLE;
    GLSetup.GET;
    MaxPostingDate := 0D;
    
    SkipCheck := FALSE;
    OnBeforeCheckEntries(Rec,DATABASE::"G/L Entry",SkipCheck); <=====================
    IF NOT SkipCheck THEN BEGIN
      IF GLEntry.ISEMPTY THEN
        ERROR(CannotReverseDeletedErr,GLEntry.TABLECAPTION,GLAcc.TABLECAPTION);
      IF GLEntry.FIND('-') THEN BEGIN
    ...
Table<Data Migration Error>.PROCEDURE<OnAfterErrorInserted>
  Raised in: Table<Data Migration Error>.PROCEDURE<CreateEntryWithMessage>
    Code lines:
    ...
    VALIDATE("Source Staging Table Record ID",SourceStagingTableRecordId);
    VALIDATE("Error Message",ErrorMessage);
    VALIDATE("Scheduled For Retry",FALSE);
    INSERT(TRUE);
    
    OnAfterErrorInserted(MigrationType,ErrorMessage); <=====================
Table<Customer>.PROCEDURE<OnBeforeIsContactUpdateNeeded>
  Raised in: Table<Customer>.PROCEDURE<IsContactUpdateNeeded>
    Code lines:
    ...
      (Contact <> xRec.Contact);
    
    IF NOT UpdateNeeded AND NOT ISTEMPORARY THEN
      UpdateNeeded := CustContUpdate.ContactNameIsBlank("No.");
    
    OnBeforeIsContactUpdateNeeded(Rec,xRec,UpdateNeeded); <=====================
    EXIT(UpdateNeeded);
Table<Data Migrator Registration>.PROCEDURE<OnApplySelectedData>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<NextAction>
    Code lines:
    ...
        BEGIN
          IF ShowPostingOptions THEN
            IF BallancesPostingOption = BallancesPostingOption::" " THEN
              ERROR(BallancesPostingErr);
          CurrPage.DataMigrationEntities.PAGE.CopyFromSourceTable(TempDataMigrationEntity);
          OnApplySelectedData(TempDataMigrationEntity,Handled); <=====================
          IF NOT Handled THEN
            ERROR('');
        END;
      Step::AccountSetup1:
    ...
Table<Data Migrator Registration>.PROCEDURE<OnCustomerVendorPostingSetup>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<NextAction>
    Code lines:
    ...
        BEGIN
          ListOfAccounts[1] := ReceivablesAccount;
          ListOfAccounts[2] := ServiceChargeAccount;
          ListOfAccounts[3] := PayablesAccount;
          ListOfAccounts[4] := PurchServiceChargeAccount;
          OnCustomerVendorPostingSetup(ListOfAccounts); <=====================
        END;
    END;
    NextStep(FALSE);
Table<Data Migrator Registration>.PROCEDURE<OnDataImport>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<NextAction>
    Code lines:
    ...
          OnShowBalance(ShowBalance);
          OnHideSelected(HideSelected);
          CurrPage.DataMigrationEntities.PAGE.SetShowBalance(ShowBalance);
          CurrPage.DataMigrationEntities.PAGE.SetHideSelected(HideSelected);
          OnValidateSettings;
          OnDataImport(Handled); <=====================
          IF NOT Handled THEN
            ERROR('');
          OnSelectDataToApply(TempDataMigrationEntity,Handled);
          CurrPage.DataMigrationEntities.PAGE.CopyToSourceTable(TempDataMigrationEntity);
    ...
Table<Data Migrator Registration>.PROCEDURE<OnDownloadTemplate>
  Raised in: Page<Data Migration Wizard>.Action<ActionDownloadTemplate>.<OnAction>
    Code lines:
    OnDownloadTemplate(Handled); <=====================
    IF NOT Handled THEN
      ERROR('');
Table<Data Migrator Registration>.PROCEDURE<OnEnableTogglingDataMigrationOverviewPage>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<ShowDoneStep>
    Code lines:
    ...
    END;
    OnHasErrors(ShowErrorsVisible);
    OnShowDuplicateContactsText(ShowDuplicateContactsText);
    OnShowThatsItMessage(ThatsItText);
    
    OnEnableTogglingDataMigrationOverviewPage(EnableTogglingOverviewPage); <=====================
    IF EnableTogglingOverviewPage THEN
      ShowOverviewPage := TRUE;
Table<Data Migrator Registration>.PROCEDURE<OnGetInstructions>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<NextAction>
    Code lines:
    CASE Step OF
      Step::ChooseSource:
        BEGIN
          OnGetInstructions(Instructions,Handled); <=====================
          IF NOT Handled THEN
            ERROR('');
        END;
      Step::Import:
        BEGIN
          OnShowBalance(ShowBalance);
    ...
Table<Data Migrator Registration>.PROCEDURE<OnGLPostingSetup>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<NextAction>
    Code lines:
    ...
          ListOfAccounts[7] := PurchLineDiscAccount;
          ListOfAccounts[8] := PurchInvDiscAccount;
          ListOfAccounts[9] := COGSAccount;
          ListOfAccounts[10] := InventoryAdjmtAccount;
          ListOfAccounts[11] := InventoryAccount;
          OnGLPostingSetup(ListOfAccounts); <=====================
        END;
      Step::AccountSetup2:
        BEGIN
          ListOfAccounts[1] := ReceivablesAccount;
    ...
Table<Data Migrator Registration>.PROCEDURE<OnHasAdvancedApply>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<ShowApplyStep>
    Code lines:
    ApplyVisible := TRUE;
    ShowPostingOptions := FALSE;
    NextEnabled := FALSE;
    ApplyButtonVisible := TRUE;
    ApplyButtonEnabled := TotalNoOfMigrationRecords > 0;
    OnHasAdvancedApply(OpenAdvancedApplyVisible); <=====================
    OnShowPostingOptions(ShowPostingOptions);
    IF ShowPostingOptions THEN BEGIN
      PostingDate := WORKDATE;
      CurrPage.DataMigrationEntities.PAGE.SetPostingInfromation(
    ...
Table<Data Migrator Registration>.PROCEDURE<OnHasErrors>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<ShowDoneStep>
    Code lines:
    ...
        NextEnabled := TRUE;
        FinishEnabled := FALSE;
        NextStep(FALSE);
      END;
    END;
    OnHasErrors(ShowErrorsVisible); <=====================
    OnShowDuplicateContactsText(ShowDuplicateContactsText);
    OnShowThatsItMessage(ThatsItText);
    
    OnEnableTogglingDataMigrationOverviewPage(EnableTogglingOverviewPage);
    ...
  Raised in: Page<Data Migration Wizard>.PROCEDURE<ShowPostingGroupDoneStep>
    Code lines:
    DoneVisible := TRUE;
    BackEnabled := FALSE;
    NextEnabled := FALSE;
    OnHasErrors(ShowErrorsVisible); <=====================
    FinishEnabled := TRUE;
Table<Data Migrator Registration>.PROCEDURE<OnHasSettings>
  Raised in: Page<Data Migration Wizard>.<Control>.<OnLookup>
    Code lines:
    IF PAGE.RUNMODAL(PAGE::"Data Migrators",Rec) = ACTION::LookupOK THEN BEGIN
      Text := Description;
      CLEAR(DataMigrationSettingsVisible);
      OnHasSettings(DataMigrationSettingsVisible); <=====================
      EXIT;
    END;
  Raised in: Page<Data Migration Wizard>.PROCEDURE<ShowImportStep>
    Code lines:
    ImportVisible := TRUE;
    OnHasTemplate(DownloadTemplateVisible);
    OnHasSettings(DataMigrationSettingsVisible); <=====================
Table<Data Migrator Registration>.PROCEDURE<OnHasTemplate>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<ShowImportStep>
    Code lines:
    ImportVisible := TRUE;
    OnHasTemplate(DownloadTemplateVisible); <=====================
    OnHasSettings(DataMigrationSettingsVisible);
Table<Data Migrator Registration>.PROCEDURE<OnHideSelected>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<NextAction>
    Code lines:
    ...
            ERROR('');
        END;
      Step::Import:
        BEGIN
          OnShowBalance(ShowBalance);
          OnHideSelected(HideSelected); <=====================
          CurrPage.DataMigrationEntities.PAGE.SetShowBalance(ShowBalance);
          CurrPage.DataMigrationEntities.PAGE.SetHideSelected(HideSelected);
          OnValidateSettings;
          OnDataImport(Handled);
    ...
Table<Data Migrator Registration>.PROCEDURE<OnOpenAdvancedApply>
  Raised in: Page<Data Migration Wizard>.Action<ActionOpenAdvancedApply>.<OnAction>
    Code lines:
    OnOpenAdvancedApply(TempDataMigrationEntity,Handled); <=====================
    CurrPage.DataMigrationEntities.PAGE.CopyToSourceTable(TempDataMigrationEntity);
    IF NOT Handled THEN
      ERROR('');
Table<Data Migrator Registration>.PROCEDURE<OnOpenSettings>
  Raised in: Page<Data Migration Wizard>.Action<ActionDataMigrationSettings>.<OnAction>
    Code lines:
    OnOpenSettings(Handled); <=====================
    IF NOT Handled THEN
      ERROR('');
Table<Data Migrator Registration>.PROCEDURE<OnPostingGroupSetup>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<ShowDoneStep>
    Code lines:
    DoneVisible := TRUE;
    NextEnabled := FALSE;
    FinishEnabled := TRUE;
    BackEnabled := FALSE;
    OnPostingGroupSetup(AccountSetupVisible); <=====================
    IF AccountSetupVisible THEN BEGIN
      TempDataMigrationEntity.RESET;
      TempDataMigrationEntity.SETRANGE("Table ID",15);
      TempDataMigrationEntity.SETRANGE(Selected,TRUE);
      IF TempDataMigrationEntity.FINDFIRST THEN BEGIN
    ...
Table<Data Migrator Registration>.PROCEDURE<OnRegisterDataMigrator>
  Raised in: Page<Data Migration Wizard>.<OnOpenPage>
    Code lines:
    OnRegisterDataMigrator; <=====================
    IF FINDFIRST THEN;
    ResetWizardControls;
    ShowIntroStep;
    DataMigrationMgt.CheckMigrationInProgress(FALSE);
Table<Data Migrator Registration>.PROCEDURE<OnSelectDataToApply>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<NextAction>
    Code lines:
    ...
          CurrPage.DataMigrationEntities.PAGE.SetHideSelected(HideSelected);
          OnValidateSettings;
          OnDataImport(Handled);
          IF NOT Handled THEN
            ERROR('');
          OnSelectDataToApply(TempDataMigrationEntity,Handled); <=====================
          CurrPage.DataMigrationEntities.PAGE.CopyToSourceTable(TempDataMigrationEntity);
          TotalNoOfMigrationRecords := GetTotalNoOfMigrationRecords(TempDataMigrationEntity);
          IF NOT Handled THEN
            ERROR('');
    ...
Table<Data Migrator Registration>.PROCEDURE<OnShowBalance>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<NextAction>
    Code lines:
    ...
          IF NOT Handled THEN
            ERROR('');
        END;
      Step::Import:
        BEGIN
          OnShowBalance(ShowBalance); <=====================
          OnHideSelected(HideSelected);
          CurrPage.DataMigrationEntities.PAGE.SetShowBalance(ShowBalance);
          CurrPage.DataMigrationEntities.PAGE.SetHideSelected(HideSelected);
          OnValidateSettings;
    ...
Table<Data Migrator Registration>.PROCEDURE<OnShowDuplicateContactsText>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<ShowDoneStep>
    Code lines:
    ...
        FinishEnabled := FALSE;
        NextStep(FALSE);
      END;
    END;
    OnHasErrors(ShowErrorsVisible);
    OnShowDuplicateContactsText(ShowDuplicateContactsText); <=====================
    OnShowThatsItMessage(ThatsItText);
    
    OnEnableTogglingDataMigrationOverviewPage(EnableTogglingOverviewPage);
    IF EnableTogglingOverviewPage THEN
Table<Data Migrator Registration>.PROCEDURE<OnShowErrors>
  Raised in: Page<Data Migration Wizard>.Action<ActionShowErrors>.<OnAction>
    Code lines:
    OnShowErrors(Handled); <=====================
    IF NOT Handled THEN
      ERROR('');
Table<Data Migrator Registration>.PROCEDURE<OnShowPostingOptions>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<ShowApplyStep>
    Code lines:
    ...
    ShowPostingOptions := FALSE;
    NextEnabled := FALSE;
    ApplyButtonVisible := TRUE;
    ApplyButtonEnabled := TotalNoOfMigrationRecords > 0;
    OnHasAdvancedApply(OpenAdvancedApplyVisible);
    OnShowPostingOptions(ShowPostingOptions); <=====================
    IF ShowPostingOptions THEN BEGIN
      PostingDate := WORKDATE;
      CurrPage.DataMigrationEntities.PAGE.SetPostingInfromation(
        BallancesPostingOption = BallancesPostingOption::"Post balances for me",PostingDate);
Table<Data Migrator Registration>.PROCEDURE<OnShowThatsItMessage>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<ShowDoneStep>
    Code lines:
    ...
        NextStep(FALSE);
      END;
    END;
    OnHasErrors(ShowErrorsVisible);
    OnShowDuplicateContactsText(ShowDuplicateContactsText);
    OnShowThatsItMessage(ThatsItText); <=====================
    
    OnEnableTogglingDataMigrationOverviewPage(EnableTogglingOverviewPage);
    IF EnableTogglingOverviewPage THEN
      ShowOverviewPage := TRUE;
Table<Data Migrator Registration>.PROCEDURE<OnValidateSettings>
  Raised in: Page<Data Migration Wizard>.PROCEDURE<NextAction>
    Code lines:
    ...
        BEGIN
          OnShowBalance(ShowBalance);
          OnHideSelected(HideSelected);
          CurrPage.DataMigrationEntities.PAGE.SetShowBalance(ShowBalance);
          CurrPage.DataMigrationEntities.PAGE.SetHideSelected(HideSelected);
          OnValidateSettings; <=====================
          OnDataImport(Handled);
          IF NOT Handled THEN
            ERROR('');
          OnSelectDataToApply(TempDataMigrationEntity,Handled);
    ...
Table<Assisted Company Setup Status>.PROCEDURE<OnEnabled>
  Raised in: Table<Assisted Company Setup Status>.Field<Enabled>.<OnValidate>
    Code lines:
    OnEnabled("Company Name",Enabled); <=====================
Table<Assisted Company Setup Status>.PROCEDURE<OnGetCompanySetupStatus>
  Raised in: Table<Assisted Company Setup Status>.PROCEDURE<GetCompanySetupStatus>
    Code lines:
    IF GET(Name) THEN
      OnGetCompanySetupStatus("Company Name",SetupStatus); <=====================
Table<Assisted Company Setup Status>.PROCEDURE<OnSetupStatusDrillDown>
  Raised in: Table<Assisted Company Setup Status>.PROCEDURE<DrillDownSetupStatus>
    Code lines:
    IF GET(Name) THEN
      OnSetupStatusDrillDown("Company Name"); <=====================
Table<Assisted Setup>.PROCEDURE<OnAssistedSetupCompleted>
  Raised in: Table<Assisted Setup>.PROCEDURE<SetStatus>
    Code lines:
    ...
    
    IF
       (AssistedSetup.Status = AssistedSetup.Status::Completed) AND
       (AssistedSetup."Assisted Setup Page ID" <> 0)
    THEN
      OnAssistedSetupCompleted(EnteryId); <=====================
Table<Assisted Setup>.PROCEDURE<VerifyYodleeIsInstalled>
  Raised in: Table<Assisted Setup>.PROCEDURE<Initialize>
    Code lines:
    ...
      GroupId,FALSE,"Item Type"::"Setup and Help");
    AddSetupAssistantResources(LastId,VideoUrlAdditionalReourcesTxt,'',0,0,'');
    AddAssistedSetupVideoCategory(LastId,ProductVideoCategory.Category::"Getting Started",'');
    LastId += 1;
    
    VerifyYodleeIsInstalled(IsYodleeInstalled); <=====================
    IF IsYodleeInstalled THEN BEGIN
      AddSetupAssistant(LastId,VideoBankintegrationNameTxt,SortingOption::SetUpBankIntegration,TRUE,GroupId,FALSE,
        "Item Type"::"Setup and Help");
      AddSetupAssistantResources(LastId,VideoBankintegrationTxt,HelpBankintegrationTxt,0,0,'');
    ...
Table<Aggregated Assisted Setup>.PROCEDURE<OnRegisterAssistedSetup>
  Raised in: Page<Assisted Setup>.<OnOpenPage>
    Code lines:
    OnRegisterAssistedSetup(Rec); <=====================
    SETCURRENTKEY("External Assisted Setup",Order);
    ASCENDING(TRUE);
Table<Aggregated Assisted Setup>.PROCEDURE<OnUpdateAssistedSetupStatus>
  Raised in: Table<Aggregated Assisted Setup>.PROCEDURE<RunAssistedSetup>
    Code lines:
    ...
            EXIT;
      END;
    
    COMMIT;
    PAGE.RUNMODAL("Assisted Setup Page ID");
    OnUpdateAssistedSetupStatus(Rec); <=====================
Table<Business Setup>.PROCEDURE<OnOpenBusinessSetupPage>
  Raised in: Page<Business Setup>.<Action>.<OnAction>
    Code lines:
    OnOpenBusinessSetupPage(Rec,Handled); <=====================
    IF (NOT Handled) AND ("Setup Page ID" <> 0) THEN
      PAGE.RUN("Setup Page ID");
Table<Business Setup>.PROCEDURE<OnRegisterBusinessSetup>
  Raised in: Page<Business Setup>.<OnOpenPage>
    Code lines:
    OnRegisterBusinessSetup(Rec); <=====================
Table<Res. Ledger Entry>.PROCEDURE<OnAfterCopyFromResJnlLine>
  Raised in: Table<Res. Ledger Entry>.PROCEDURE<CopyFromResJnlLine>
    Code lines:
    ...
    "No. Series" := ResJnlLine."Posting No. Series";
    "Source Type" := ResJnlLine."Source Type";
    "Source No." := ResJnlLine."Source No.";
    "Qty. per Unit of Measure" := ResJnlLine."Qty. per Unit of Measure";
    
    OnAfterCopyFromResJnlLine(Rec,ResJnlLine); <=====================
Table<Res. Journal Line>.PROCEDURE<OnAfterCopyResJnlLineFromJobJnlLine>
  Raised in: Table<Res. Journal Line>.PROCEDURE<CopyFromJobJnlLine>
    Code lines:
    ...
    "Total Price" := JobJnlLine."Line Amount (LCY)";
    "Time Sheet No." := JobJnlLine."Time Sheet No.";
    "Time Sheet Line No." := JobJnlLine."Time Sheet Line No.";
    "Time Sheet Date" := JobJnlLine."Time Sheet Date";
    
    OnAfterCopyResJnlLineFromJobJnlLine(Rec,JobJnlLine); <=====================
Table<Res. Journal Line>.PROCEDURE<OnAfterCopyResJnlLineFromSalesLine>
  Raised in: Table<Res. Journal Line>.PROCEDURE<CopyFromSalesLine>
    Code lines:
    ...
    "Unit Cost" := SalesLine."Unit Cost (LCY)";
    "Total Cost" := SalesLine."Unit Cost (LCY)" * Quantity;
    "Unit Price" := SalesLine."Unit Price";
    "Total Price" := -SalesLine.Amount;
    
    OnAfterCopyResJnlLineFromSalesLine(SalesLine,Rec); <=====================
Table<Res. Journal Line>.PROCEDURE<OnAfterCopyResJnlLineFromServLine>
  Raised in: Table<Res. Journal Line>.PROCEDURE<CopyFromServLine>
    Code lines:
    ...
    "Time Sheet No." := ServiceLine."Time Sheet No.";
    "Time Sheet Line No." := ServiceLine."Time Sheet Line No.";
    "Time Sheet Date" := ServiceLine."Time Sheet Date";
    "Job No." := ServiceLine."Job No.";
    
    OnAfterCopyResJnlLineFromServLine(ServiceLine,Rec); <=====================
Table<Res. Journal Line>.PROCEDURE<OnAfterCopyResJnlLineFromServShptLine>
  Raised in: Table<Res. Journal Line>.PROCEDURE<CopyFromServShptLine>
    Code lines:
    ...
    "Dimension Set ID" := ServShptLine."Dimension Set ID";
    "Gen. Bus. Posting Group" := ServShptLine."Gen. Bus. Posting Group";
    "Gen. Prod. Posting Group" := ServShptLine."Gen. Prod. Posting Group";
    "Entry Type" := "Entry Type"::Usage;
    
    OnAfterCopyResJnlLineFromServShptLine(ServShptLine,Rec); <=====================
Table<Res. Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Res. Journal Line>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    TableID[3] := Type3;
    No[3] := No3;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
Table<Cust. Ledger Entry>.PROCEDURE<OnAfterCopyCustLedgerEntryFromCVLedgEntryBuffer>
  Raised in: Table<Cust. Ledger Entry>.PROCEDURE<CopyFromCVLedgEntryBuffer>
    Code lines:
    ...
    "Remaining Amount" := CVLedgerEntryBuffer."Remaining Amount";
    "Remaining Amt. (LCY)" := CVLedgerEntryBuffer."Remaining Amt. (LCY)";
    "Original Amount" := CVLedgerEntryBuffer."Original Amount";
    "Original Amt. (LCY)" := CVLedgerEntryBuffer."Original Amt. (LCY)";
    
    OnAfterCopyCustLedgerEntryFromCVLedgEntryBuffer(Rec,CVLedgerEntryBuffer); <=====================
Table<Cust. Ledger Entry>.PROCEDURE<OnAfterCopyCustLedgerEntryFromGenJnlLine>
  Raised in: Table<Cust. Ledger Entry>.PROCEDURE<CopyFromGenJnlLine>
    Code lines:
    ...
    "Message to Recipient" := GenJnlLine."Message to Recipient";
    "Applies-to Ext. Doc. No." := GenJnlLine."Applies-to Ext. Doc. No.";
    "Payment Method Code" := GenJnlLine."Payment Method Code";
    "Exported to Payment File" := GenJnlLine."Exported to Payment File";
    
    OnAfterCopyCustLedgerEntryFromGenJnlLine(Rec,GenJnlLine); <=====================
Table<Job Journal Line>.PROCEDURE<OnAfterAssignGLAccountValues>
  Raised in: Table<Job Journal Line>.PROCEDURE<CopyFromGLAccount>
    Code lines:
    ...
    "Unit of Measure Code" := '';
    "Direct Unit Cost (LCY)" := 0;
    "Unit Cost (LCY)" := 0;
    "Unit Price" := 0;
    
    OnAfterAssignGLAccountValues(Rec,GLAcc); <=====================
Table<Job Journal Line>.PROCEDURE<OnAfterAssignItemUoM>
  Raised in: Table<Job Journal Line>.Field<Unit of Measure Code>.<OnValidate>
    Code lines:
    ...
    CASE Type OF
      Type::Item:
        BEGIN
          Item.GET("No.");
          "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
          OnAfterAssignItemUoM(Rec,Item); <=====================
        END;
      Type::Resource:
        BEGIN
          IF CurrFieldNo <> FIELDNO("Work Type Code") THEN
    ...
Table<Job Journal Line>.PROCEDURE<OnAfterAssignItemValues>
  Raised in: Table<Job Journal Line>.PROCEDURE<CopyFromItem>
    Code lines:
    ...
      GetItemTranslation;
    "Posting Group" := Item."Inventory Posting Group";
    "Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";
    VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
    
    OnAfterAssignItemValues(Rec,Item); <=====================
Table<Job Journal Line>.PROCEDURE<OnAfterAssignResourceUoM>
  Raised in: Table<Job Journal Line>.Field<Unit of Measure Code>.<OnValidate>
    Code lines:
    ...
            "Unit of Measure Code" := Resource."Base Unit of Measure";
          END;
          ResUnitofMeasure.GET("No.","Unit of Measure Code");
          "Qty. per Unit of Measure" := ResUnitofMeasure."Qty. per Unit of Measure";
          "Quantity (Base)" := Quantity * "Qty. per Unit of Measure";
          OnAfterAssignResourceUoM(Rec,Res); <=====================
        END;
      Type::"G/L Account":
        "Qty. per Unit of Measure" := 1;
    END;
Table<Job Journal Line>.PROCEDURE<OnAfterAssignResourceValues>
  Raised in: Table<Job Journal Line>.PROCEDURE<CopyFromResource>
    Code lines:
    ...
    "Gen. Prod. Posting Group" := Resource."Gen. Prod. Posting Group";
    VALIDATE("Unit of Measure Code",Resource."Base Unit of Measure");
    IF "Time Sheet No." = '' THEN
      Resource.TESTFIELD("Use Time Sheet",FALSE);
    
    OnAfterAssignResourceValues(Rec,Res); <=====================
Table<Job Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Job Journal Line>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    TableID[3] := Type3;
    No[3] := No3;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
Table<Job Journal Line>.PROCEDURE<OnAfterDeleteAmounts>
  Raised in: Table<Job Journal Line>.PROCEDURE<DeleteAmounts>
    Code lines:
    ...
    "Line Discount Amount (LCY)" := 0;
    "Line Discount Amount" := 0;
    "Remaining Qty." := 0;
    "Remaining Qty. (Base)" := 0;
    
    OnAfterDeleteAmounts(Rec); <=====================
Table<Job Journal Line>.PROCEDURE<OnAfterSetUpNewLine>
  Raised in: Table<Job Journal Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    ...
    "Entry Type" := "Entry Type"::Usage;
    "Source Code" := JobJnlTemplate."Source Code";
    "Reason Code" := JobJnlBatch."Reason Code";
    "Posting No. Series" := JobJnlBatch."Posting No. Series";
    
    OnAfterSetUpNewLine(Rec,LastJobJnlLine,JobJnlTemplate,JobJnlBatch); <=====================
Table<Job Journal Line>.PROCEDURE<OnAfterUpdateAllAmounts>
  Raised in: Table<Job Journal Line>.PROCEDURE<UpdateAllAmounts>
    Code lines:
    ...
    HandleCostFactor;
    UpdateUnitPrice;
    UpdateTotalPrice;
    UpdateAmountsAndDiscounts;
    
    OnAfterUpdateAllAmounts(Rec,xRec); <=====================
Table<Job Journal Line>.PROCEDURE<OnAfterUpdateAmountsAndDiscounts>
  Raised in: Table<Job Journal Line>.PROCEDURE<UpdateAmountsAndDiscounts>
    Code lines:
    ...
      "Line Discount Amount" := 0;
      "Line Amount (LCY)" := 0;
      "Line Discount Amount (LCY)" := 0;
    END;
    
    OnAfterUpdateAmountsAndDiscounts(Rec); <=====================
Table<Job Journal Line>.PROCEDURE<OnAfterUpdateTotalCost>
  Raised in: Table<Job Journal Line>.PROCEDURE<UpdateTotalCost>
    Code lines:
    "Total Cost" := ROUND("Unit Cost" * Quantity,AmountRoundingPrecisionFCY);
    "Total Cost (LCY)" := ROUND(
        CurrExchRate.ExchangeAmtFCYToLCY(
          "Posting Date","Currency Code","Total Cost","Currency Factor"),AmountRoundingPrecision);
    
    OnAfterUpdateTotalCost(Rec); <=====================
Table<Job Journal Line>.PROCEDURE<OnAfterUpdateTotalPrice>
  Raised in: Table<Job Journal Line>.PROCEDURE<UpdateTotalPrice>
    Code lines:
    "Total Price" := ROUND(Quantity * "Unit Price",AmountRoundingPrecisionFCY);
    "Total Price (LCY)" := ROUND(
        CurrExchRate.ExchangeAmtFCYToLCY(
          "Posting Date","Currency Code","Total Price","Currency Factor"),AmountRoundingPrecision);
    
    OnAfterUpdateTotalPrice(Rec); <=====================
Table<Job Journal Line>.PROCEDURE<OnBeforeRetrieveCostPrice>
  Raised in: Table<Job Journal Line>.PROCEDURE<RetrieveCostPrice>
    Code lines:
    OnBeforeRetrieveCostPrice(Rec,xRec,ShouldRetrieveCostPrice); <=====================
    IF ShouldRetrieveCostPrice THEN
      EXIT(TRUE);
    
    CASE Type OF
      Type::Item:
        IF ("No." <> xRec."No.") OR
           ("Location Code" <> xRec."Location Code") OR
           ("Variant Code" <> xRec."Variant Code") OR
           (Quantity <> xRec.Quantity) OR
    ...
Table<Job Journal Line>.PROCEDURE<OnBeforeUpdateAllAmounts>
  Raised in: Table<Job Journal Line>.PROCEDURE<UpdateAllAmounts>
    Code lines:
    OnBeforeUpdateAllAmounts(Rec,xRec); <=====================
    InitRoundingPrecisions;
    
    UpdateUnitCost;
    UpdateTotalCost;
    FindPriceAndDiscount(Rec,CurrFieldNo);
    HandleCostFactor;
    UpdateUnitPrice;
    UpdateTotalPrice;
    UpdateAmountsAndDiscounts;
    ...
Table<Job Journal Line>.PROCEDURE<OnBeforeValidateWorkTypeCodeQty>
  Raised in: Table<Job Journal Line>.Field<Work Type Code>.<OnValidate>
    Code lines:
    ...
      END ELSE BEGIN
        Res.GET("No.");
        "Unit of Measure Code" := Res."Base Unit of Measure";
        VALIDATE("Unit of Measure Code");
      END;
    OnBeforeValidateWorkTypeCodeQty(Rec,xRec,Res,WorkType); <=====================
    VALIDATE(Quantity);
Table<Gen. Jnl. Allocation>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Gen. Jnl. Allocation>.PROCEDURE<CreateDim>
    Code lines:
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(Rec,CurrFieldNo,TableID,No,'',"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
Table<Vendor>.PROCEDURE<OnBeforeIsContactUpdateNeeded>
  Raised in: Table<Vendor>.PROCEDURE<IsContactUpdateNeeded>
    Code lines:
    ...
      ("Home Page" <> xRec."Home Page");
    
    IF NOT UpdateNeeded AND NOT ISTEMPORARY THEN
      UpdateNeeded := VendContUpdate.ContactNameIsBlank("No.");
    
    OnBeforeIsContactUpdateNeeded(Rec,xRec,UpdateNeeded); <=====================
    EXIT(UpdateNeeded);
Table<Gen. Journal Batch>.PROCEDURE<OnCheckGenJournalLineExportRestrictions>
  Raised in: Codeunit<SEPA CT-Check Line>.PROCEDURE<CheckGenJnlLine>
    Code lines:
    GLSetup.GET;
    IF GenJournalBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name") THEN
      GenJournalBatch.OnCheckGenJournalLineExportRestrictions; <=====================
    WITH GenJnlLine DO BEGIN
      IF "Bal. Account Type" <> "Bal. Account Type"::"Bank Account" THEN
        InsertPaymentFileError(MustBeBankAccErr);
    
      IF "Bal. Account No." = '' THEN
        AddFieldEmptyError(GenJnlLine,TABLECAPTION,FIELDCAPTION("Bal. Account No."),'');
    
    ...
  Raised in: Codeunit<Payment Export Gen. Jnl Check>.PROCEDURE<CheckGenJournalBatch>
    Code lines:
    TempGenJournalBatch := GenJournalBatch;
    TempGenJournalBatch.INSERT;
    
    GenJournalBatch.OnCheckGenJournalLineExportRestrictions; <=====================
    
    IF NOT GenJournalBatch."Allow Payment Export" THEN
      AddBatchEmptyError(GenJournalLine,GenJournalBatch.FIELDCAPTION("Allow Payment Export"),'');
    
    IF GenJournalBatch."Bal. Account Type" <> GenJournalBatch."Bal. Account Type"::"Bank Account" THEN
      AddBatchEmptyError(GenJournalLine,GenJournalBatch.FIELDCAPTION("Bal. Account Type"),GenJournalBatch."Bal. Account Type");
    ...
Table<Gen. Journal Batch>.PROCEDURE<OnGeneralJournalBatchBalanced>
  Raised in: Table<Gen. Journal Batch>.PROCEDURE<CheckBalance>
    Code lines:
    Balance := GetBalance;
    
    IF Balance = 0 THEN
      OnGeneralJournalBatchBalanced <=====================
    ELSE
      OnGeneralJournalBatchNotBalanced;
Table<Gen. Journal Batch>.PROCEDURE<OnGeneralJournalBatchNotBalanced>
  Raised in: Table<Gen. Journal Batch>.PROCEDURE<CheckBalance>
    Code lines:
    Balance := GetBalance;
    
    IF Balance = 0 THEN
      OnGeneralJournalBatchBalanced
    ELSE
      OnGeneralJournalBatchNotBalanced; <=====================
Table<Gen. Journal Batch>.PROCEDURE<OnMoveGenJournalBatch>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<ProcessLines>
    Code lines:
    ...
      CLEAR(GenJnlCheckLine);
      CLEAR(GenJnlPostLine);
      CLEARMARKS;
    END;
    UpdateAnalysisView.UpdateAll(0,TRUE);
    GenJnlBatch.OnMoveGenJournalBatch(GLReg.RECORDID); <=====================
    IF NOT SuppressCommit THEN
      COMMIT;
    
    IF SkippedLine AND GUIALLOWED THEN
Table<Requisition Line>.PROCEDURE<OnAfterCreateDim>
  Raised in: Table<Requisition Line>.PROCEDURE<CreateDim>
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
Table<Requisition Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Requisition Line>.PROCEDURE<CreateDim>
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
Table<Requisition Line>.PROCEDURE<OnAfterTransferFromAsmHeader>
  Raised in: Table<Requisition Line>.PROCEDURE<TransferFromAsmHeader>
    Code lines:
    ...
    "Ref. Order Type" := "Ref. Order Type"::Assembly;
    "Ref. Order Status" := AsmHeader."Document Type";
    "Ref. Order No." := AsmHeader."No.";
    "Ref. Line No." := 0;
    
    OnAfterTransferFromAsmHeader(Rec,AsmHeader); <=====================
    
    GetDimFromRefOrderLine(FALSE);
Table<Requisition Line>.PROCEDURE<OnAfterTransferFromProdOrderLine>
  Raised in: Table<Requisition Line>.PROCEDURE<TransferFromProdOrderLine>
    Code lines:
    ...
    "Ref. Order No." := ProdOrderLine."Prod. Order No.";
    "Ref. Order Type" := "Ref. Order Type"::"Prod. Order";
    "Ref. Order Status" := ProdOrderLine.Status;
    "Ref. Line No." := ProdOrderLine."Line No.";
    
    OnAfterTransferFromProdOrderLine(Rec,ProdOrderLine); <=====================
    
    GetDimFromRefOrderLine(FALSE);
Table<Requisition Line>.PROCEDURE<OnAfterTransferFromPurchaseLine>
  Raised in: Table<Requisition Line>.PROCEDURE<TransferFromPurchaseLine>
    Code lines:
    ...
    "Ref. Order No." := PurchLine."Document No.";
    "Ref. Order Type" := "Ref. Order Type"::Purchase;
    "Ref. Line No." := PurchLine."Line No.";
    "Vendor No." := PurchLine."Buy-from Vendor No.";
    
    OnAfterTransferFromPurchaseLine(Rec,PurchLine); <=====================
    
    GetDimFromRefOrderLine(FALSE);
Table<Requisition Line>.PROCEDURE<OnAfterTransferFromTransLine>
  Raised in: Table<Requisition Line>.PROCEDURE<TransferFromTransLine>
    Code lines:
    ...
    "Ref. Order Type" := "Ref. Order Type"::Transfer;
    "Ref. Line No." := TransLine."Line No.";
    "Transfer-from Code" := TransLine."Transfer-from Code";
    "Transfer Shipment Date" := TransLine."Shipment Date";
    
    OnAfterTransferFromTransLine(Rec,TransLine); <=====================
    
    GetDimFromRefOrderLine(FALSE);
Table<Requisition Line>.PROCEDURE<OnAfterTransferToTrackingEntry>
  Raised in: Table<Requisition Line>.PROCEDURE<TransferToTrackingEntry>
    Code lines:
    ...
    IF TrkgReservEntry.Positive THEN
      TrkgReservEntry."Expected Receipt Date" := "Due Date"
    ELSE
      TrkgReservEntry."Shipment Date" := "Due Date";
    
    OnAfterTransferToTrackingEntry(TrkgReservEntry,Rec); <=====================
Table<Vendor Ledger Entry>.PROCEDURE<OnAfterCopyVendLedgerEntryFromCVLedgEntryBuffer>
  Raised in: Table<Vendor Ledger Entry>.PROCEDURE<CopyFromCVLedgEntryBuffer>
    Code lines:
    ...
    "Accepted Pmt. Disc. Tolerance" := CVLedgerEntryBuffer."Accepted Pmt. Disc. Tolerance";
    "Pmt. Tolerance (LCY)" := CVLedgerEntryBuffer."Pmt. Tolerance (LCY)";
    "Amount to Apply" := CVLedgerEntryBuffer."Amount to Apply";
    Prepayment := CVLedgerEntryBuffer.Prepayment;
    
    OnAfterCopyVendLedgerEntryFromCVLedgEntryBuffer(Rec,CVLedgerEntryBuffer); <=====================
Table<Vendor Ledger Entry>.PROCEDURE<OnAfterCopyVendLedgerEntryFromGenJnlLine>
  Raised in: Table<Vendor Ledger Entry>.PROCEDURE<CopyFromGenJnlLine>
    Code lines:
    ...
    "Creditor No." := GenJnlLine."Creditor No.";
    "Payment Reference" := GenJnlLine."Payment Reference";
    "Payment Method Code" := GenJnlLine."Payment Method Code";
    "Exported to Payment File" := GenJnlLine."Exported to Payment File";
    
    OnAfterCopyVendLedgerEntryFromGenJnlLine(Rec,GenJnlLine); <=====================
Table<VAT Entry>.PROCEDURE<OnAfterCopyFromGenJnlLine>
  Raised in: Table<VAT Entry>.PROCEDURE<CopyFromGenJnlLine>
    Code lines:
    ...
    "VAT Base Discount %" := GenJnlLine."VAT Base Discount %";
    "Bill-to/Pay-to No." := GenJnlLine."Bill-to/Pay-to No.";
    "Country/Region Code" := GenJnlLine."Country/Region Code";
    "VAT Registration No." := GenJnlLine."VAT Registration No.";
    
    OnAfterCopyFromGenJnlLine(Rec,GenJnlLine); <=====================
Table<Item>.PROCEDURE<OnAfterCheckDocuments>
  Raised in: Table<Item>.PROCEDURE<CheckDocuments>
    Code lines:
    ...
    CheckServContractLine(CurrFieldNo);
    CheckAsmHeader(CurrFieldNo);
    CheckAsmLine(CurrFieldNo);
    CheckJobPlanningLine(CurrFieldNo);
    
    OnAfterCheckDocuments(Rec,xRec,CurrFieldNo); <=====================
Table<Bank Account>.PROCEDURE<OnCheckAutoLogonPossibleEvent>
  Raised in: Table<Bank Account>.PROCEDURE<IsAutoLogonPossible>
    Code lines:
    AutoLogonPossible := TRUE;
    OnCheckAutoLogonPossibleEvent(Rec,AutoLogonPossible); <=====================
    EXIT(AutoLogonPossible)
Table<Bank Account>.PROCEDURE<OnCheckLinkedToStatementProviderEvent>
  Raised in: Table<Bank Account>.PROCEDURE<IsLinkedToBankStatementServiceProvider>
    Code lines:
    OnCheckLinkedToStatementProviderEvent(Rec,IsBankAccountLinked); <=====================
    EXIT(IsBankAccountLinked);
Table<Bank Account>.PROCEDURE<OnDisableStatementProviderEvent>
  Raised in: Table<Bank Account>.PROCEDURE<DisableStatementProviders>
    Code lines:
    OnGetStatementProvidersEvent(TempNameValueBuffer);
    IF TempNameValueBuffer.FINDSET THEN
      REPEAT
        OnDisableStatementProviderEvent(TempNameValueBuffer.Name); <=====================
      UNTIL TempNameValueBuffer.NEXT = 0;
Table<Bank Account>.PROCEDURE<OnGetDataExchangeDefinitionEvent>
  Raised in: Table<Bank Account>.PROCEDURE<GetDataExchDef>
    Code lines:
    OnGetDataExchangeDefinitionEvent(DataExchDefCodeResponse,Handled); <=====================
    IF NOT Handled THEN BEGIN
      TESTFIELD("Bank Statement Import Format");
      DataExchDefCodeResponse := "Bank Statement Import Format";
    END;
    
    IF DataExchDefCodeResponse = '' THEN
      ERROR(DataExchNotSetErr);
    
    BankExportImportSetup.GET(DataExchDefCodeResponse);
    ...
Table<Bank Account>.PROCEDURE<OnGetStatementProvidersEvent>
  Raised in: Table<Bank Account>.PROCEDURE<StatementProvidersExist>
    Code lines:
    OnGetStatementProvidersEvent(TempNameValueBuffer); <=====================
    EXIT(NOT TempNameValueBuffer.ISEMPTY);
  Raised in: Table<Bank Account>.PROCEDURE<SelectBankLinkingService>
    Code lines:
    OnGetStatementProvidersEvent(TempNameValueBuffer); <=====================
    
    IF TempNameValueBuffer.ISEMPTY THEN
      EXIT(''); // Action should not be visible in this case so should not occur
    
    IF (TempNameValueBuffer.COUNT = 1) OR (NOT GUIALLOWED) THEN
      EXIT(TempNameValueBuffer.Name);
    
    TempNameValueBuffer.FINDSET;
    REPEAT
    ...
  Raised in: Table<Bank Account>.PROCEDURE<DisableStatementProviders>
    Code lines:
    OnGetStatementProvidersEvent(TempNameValueBuffer); <=====================
    IF TempNameValueBuffer.FINDSET THEN
      REPEAT
        OnDisableStatementProviderEvent(TempNameValueBuffer.Name);
      UNTIL TempNameValueBuffer.NEXT = 0;
Table<Bank Account>.PROCEDURE<OnLinkStatementProviderEvent>
  Raised in: Table<Bank Account>.PROCEDURE<LinkStatementProvider>
    Code lines:
    StatementProvider := SelectBankLinkingService;
    
    IF StatementProvider <> '' THEN
      OnLinkStatementProviderEvent(BankAccount,StatementProvider); <=====================
Table<Bank Account>.PROCEDURE<OnMarkAccountLinkedEvent>
  Raised in: Page<Assisted Company Setup Wizard>.PROCEDURE<TryLinkBankAccount>
    Code lines:
    BankAccount.OnMarkAccountLinkedEvent(TempOnlineBankAccLink,BankAccount); <=====================
Table<Bank Account>.PROCEDURE<OnRefreshStatementProviderEvent>
  Raised in: Table<Bank Account>.PROCEDURE<RefreshStatementProvider>
    Code lines:
    StatementProvider := SelectBankLinkingService;
    
    IF StatementProvider <> '' THEN
      OnRefreshStatementProviderEvent(BankAccount,StatementProvider); <=====================
Table<Bank Account>.PROCEDURE<OnSimpleLinkStatementProviderEvent>
  Raised in: Table<Bank Account>.PROCEDURE<SimpleLinkStatementProvider>
    Code lines:
    StatementProvider := SelectBankLinkingService;
    
    IF StatementProvider <> '' THEN
      OnSimpleLinkStatementProviderEvent(OnlineBankAccLink,StatementProvider); <=====================
Table<Bank Account>.PROCEDURE<OnUnlinkStatementProviderEvent>
  Raised in: Table<Bank Account>.Field<Bank Stmt. Service Record ID>.<OnValidate>
    Code lines:
    IF FORMAT("Bank Stmt. Service Record ID") = '' THEN
      OnUnlinkStatementProviderEvent(Rec,Handled); <=====================
  Raised in: Table<Bank Account>.PROCEDURE<UnlinkStatementProvider>
    Code lines:
    OnUnlinkStatementProviderEvent(Rec,Handled); <=====================
Table<Bank Account>.PROCEDURE<OnUpdateBankAccountLinkingEvent>
  Raised in: Table<Bank Account>.PROCEDURE<UpdateBankAccountLinking>
    Code lines:
    StatementProvider := SelectBankLinkingService;
    
    IF StatementProvider <> '' THEN
      OnUpdateBankAccountLinkingEvent(Rec,StatementProvider); <=====================
Table<Bank Account Ledger Entry>.PROCEDURE<OnAfterCopyFromGenJnlLine>
  Raised in: Table<Bank Account Ledger Entry>.PROCEDURE<CopyFromGenJnlLine>
    Code lines:
    ...
    "Currency Code" := GenJnlLine."Currency Code";
    "User ID" := USERID;
    "Bal. Account Type" := GenJnlLine."Bal. Account Type";
    "Bal. Account No." := GenJnlLine."Bal. Account No.";
    
    OnAfterCopyFromGenJnlLine(Rec,GenJnlLine); <=====================
Table<Check Ledger Entry>.PROCEDURE<OnAfterCopyFromBankAccLedgEntry>
  Raised in: Table<Check Ledger Entry>.PROCEDURE<CopyFromBankAccLedgEntry>
    Code lines:
    ...
    Open := TRUE;
    "User ID" := USERID;
    "Check Date" := BankAccLedgEntry."Posting Date";
    "Check No." := BankAccLedgEntry."Document No.";
    
    OnAfterCopyFromBankAccLedgEntry(Rec,BankAccLedgEntry); <=====================
Table<Bank Acc. Reconciliation>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Bank Acc. Reconciliation>.PROCEDURE<CreateDim>
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    OldDimSetID := "Dimension Set ID";
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
    ...
Table<Bank Acc. Reconciliation Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Bank Acc. Reconciliation Line>.PROCEDURE<CreateDim>
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    BankAccReconciliation.GET("Statement Type","Bank Account No.","Statement No.");
    ...
Table<Native - API Tax Setup>.PROCEDURE<OnCanDeleteTaxSetup>
  Raised in: Table<Native - API Tax Setup>.PROCEDURE<DeleteRecord>
    Code lines:
    IF Default THEN
      ERROR(CannotRemoveDefaultTaxAreaErr);
    
    OnCanDeleteTaxSetup(PreventDelete,Rec); <=====================
    
    IF GeneralLedgerSetup.UseVat OR PreventDelete THEN
      ERROR(CannotDeleteSetupErr);
    
    IF TaxArea.GET(Code) THEN
      TaxArea.DELETE(TRUE);
Table<Native - API Tax Setup>.PROCEDURE<OnLoadSalesTaxSettings>
  Raised in: Table<Native - API Tax Setup>.PROCEDURE<LoadFromTaxArea>
    Code lines:
    CASE TempTaxAreaBuffer.Type OF
      TempTaxAreaBuffer.Type::VAT:
        LoadVATSettings;
      TaxAreaBuffer.Type::"Sales Tax":
        OnLoadSalesTaxSettings(Rec,TempTaxAreaBuffer); <=====================
    END;
Table<Native - API Tax Setup>.PROCEDURE<OnSaveSalesTaxSettings>
  Raised in: Table<Native - API Tax Setup>.PROCEDURE<SaveChanges>
    Code lines:
    CASE Type OF
      Type::VAT:
        SaveVATSettings(PreviousNativeAPITaxSetup);
      Type::"Sales Tax":
        OnSaveSalesTaxSettings(Rec); <=====================
    END;
Table<Reminder Header>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Reminder Header>.PROCEDURE<CreateDim>
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,SourceCodeSetup.Reminder,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
Table<Reminder Header>.PROCEDURE<OnAfterInsertLines>
  Raised in: Table<Reminder Header>.PROCEDURE<InsertLines>
    Code lines:
    ...
    ReminderRounding(Rec);
    InsertBeginTexts(Rec);
    InsertEndTexts(Rec);
    MODIFY;
    
    OnAfterInsertLines(Rec); <=====================
Table<Reminder Header>.PROCEDURE<OnAfterUpdateLines>
  Raised in: Table<Reminder Header>.PROCEDURE<UpdateLines>
    Code lines:
    ...
    END ELSE BEGIN
      InsertBeginTexts(ReminderHeader);
      InsertEndTexts(ReminderHeader);
    END;
    
    OnAfterUpdateLines(Rec); <=====================
Table<Reminder Header>.PROCEDURE<OnBeforeInsertBeginTexts>
  Raised in: Table<Reminder Header>.PROCEDURE<InsertBeginTexts>
    Code lines:
    OnBeforeInsertBeginTexts(ReminderHeader); <=====================
    
    ReminderLevel.SETRANGE("Reminder Terms Code",ReminderHeader."Reminder Terms Code");
    ReminderLevel.SETRANGE("No.",1,ReminderHeader."Reminder Level");
    IF ReminderLevel.FINDLAST THEN BEGIN
      ReminderText.RESET;
      ReminderText.SETRANGE("Reminder Terms Code",ReminderHeader."Reminder Terms Code");
      ReminderText.SETRANGE("Reminder Level",ReminderLevel."No.");
      ReminderText.SETRANGE(Position,ReminderText.Position::Beginning);
    
    ...
Table<Reminder Header>.PROCEDURE<OnBeforeInsertEndTexts>
  Raised in: Table<Reminder Header>.PROCEDURE<InsertEndTexts>
    Code lines:
    OnBeforeInsertEndTexts(ReminderHeader); <=====================
    
    ReminderLevel.SETRANGE("Reminder Terms Code",ReminderHeader."Reminder Terms Code");
    ReminderLevel.SETRANGE("No.",1,ReminderHeader."Reminder Level");
    IF ReminderLevel.FINDLAST THEN BEGIN
      ReminderText.SETRANGE(
        "Reminder Terms Code",ReminderHeader."Reminder Terms Code");
      ReminderText.SETRANGE("Reminder Level",ReminderLevel."No.");
      ReminderText.SETRANGE(Position,ReminderText.Position::Ending);
      ReminderLine.RESET;
    ...
Table<Reminder Header>.PROCEDURE<OnBeforeInsertReminderLine>
  Raised in: Table<Reminder Header>.PROCEDURE<InsertLines>
    Code lines:
    ...
            CaptionManagement.GetTranslatedFieldCaption(
              "Language Code",DATABASE::"Currency for Reminder Level",
              CurrencyForReminderLevel.FIELDNO("Additional Fee")),1,100);
        ReminderLine.VALIDATE(Amount,AdditionalFee);
        ReminderLine."Line Type" := ReminderLine."Line Type"::"Additional Fee";
        OnBeforeInsertReminderLine(ReminderLine); <=====================
        ReminderLine.INSERT;
        IF TransferExtendedText.ReminderCheckIfAnyExtText(ReminderLine,FALSE) THEN
          TransferExtendedText.InsertReminderExtText(ReminderLine);
      END;
    ...
  Raised in: Table<Reminder Header>.PROCEDURE<InsertTextLines>
    Code lines:
    ...
            MAXSTRLEN(ReminderLine.Description));
        IF ReminderText.Position = ReminderText.Position::Beginning THEN
          ReminderLine."Line Type" := ReminderLine."Line Type"::"Beginning Text"
        ELSE
          ReminderLine."Line Type" := ReminderLine."Line Type"::"Ending Text";
        OnBeforeInsertReminderLine(ReminderLine); <=====================
        ReminderLine.INSERT;
      UNTIL ReminderText.NEXT = 0;
      IF ReminderText.Position = ReminderText.Position::Beginning THEN
        InsertBlankLine(ReminderLine."Line Type"::"Beginning Text");
  Raised in: Table<Reminder Header>.PROCEDURE<InsertBlankLine>
    Code lines:
    NextLineNo := NextLineNo + LineSpacing;
    ReminderLine.INIT;
    ReminderLine."Line No." := NextLineNo;
    ReminderLine."Line Type" := LineType;
    OnBeforeInsertReminderLine(ReminderLine); <=====================
    ReminderLine.INSERT;
Table<Reminder Header>.PROCEDURE<OnBeforeReminderRounding>
  Raised in: Table<Reminder Header>.PROCEDURE<ReminderRounding>
    Code lines:
    OnBeforeReminderRounding(ReminderHeader,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    GetCurrency(ReminderHeader);
    IF Currency."Invoice Rounding Precision" = 0 THEN
      EXIT;
    
    ReminderHeader.CALCFIELDS(
      "Remaining Amount","Interest Amount","Additional Fee","VAT Amount","Add. Fee per Line");
    ...
Table<Reminder Line>.PROCEDURE<OnAfterCopyFromCustLedgEntry>
  Raised in: Table<Reminder Line>.Field<Entry No.>.<OnValidate>
    Code lines:
    ...
    "Document No." := CustLedgEntry."Document No.";
    Description := CustLedgEntry.Description;
    CustLedgEntry.CALCFIELDS(Amount,"Remaining Amount");
    "Original Amount" := CustLedgEntry.Amount;
    "Remaining Amount" := CustLedgEntry."Remaining Amount";
    OnAfterCopyFromCustLedgEntry(Rec,CustLedgEntry); <=====================
    
    "No. of Reminders" := GetNoOfReminderForCustLedgEntry("Entry No.");
    
    CalcFinChrg;
Table<Finance Charge Memo Header>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Finance Charge Memo Header>.PROCEDURE<CreateDim>
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,SourceCodeSetup."Finance Charge Memo",
    ...
Table<Finance Charge Memo Header>.PROCEDURE<OnBeforeInsertFinChrgMemoLine>
  Raised in: Table<Finance Charge Memo Header>.PROCEDURE<InsertLines>
    Code lines:
    ...
              "Posting Date","Currency Code",
              FinChrgTerms."Additional Fee (LCY)",CurrExchRate.ExchangeRate(
                "Posting Date","Currency Code"));
        FinChrgMemoLine.VALIDATE(Amount,CurrForFinChrgTerms."Additional Fee");
      END;
      OnBeforeInsertFinChrgMemoLine(FinChrgMemoLine); <=====================
      FinChrgMemoLine.INSERT;
      IF TransferExtendedText.FinChrgMemoCheckIfAnyExtText(FinChrgMemoLine,FALSE) THEN
        TransferExtendedText.InsertFinChrgMemoExtText(FinChrgMemoLine);
    END;
    ...
Table<Finance Charge Memo Line>.PROCEDURE<OnAfterCalcFinCharge>
  Raised in: Table<Finance Charge Memo Line>.PROCEDURE<CalcFinChrg>
    Code lines:
    ...
      GLAcc.TESTFIELD("Gen. Prod. Posting Group");
      VALIDATE("Gen. Prod. Posting Group",GLAcc."Gen. Prod. Posting Group");
      VALIDATE("VAT Prod. Posting Group",GLAcc."VAT Prod. Posting Group");
    END;
    
    OnAfterCalcFinCharge(Rec); <=====================
Table<Finance Charge Memo Line>.PROCEDURE<OnBeforeCalcFinCharge>
  Raised in: Table<Finance Charge Memo Line>.PROCEDURE<CalcFinChrg>
    Code lines:
    OnBeforeCalcFinCharge(Rec); <=====================
    
    GetFinChrgMemoHeader;
    Amount := 0;
    "VAT Amount" := 0;
    "VAT Calculation Type" := "VAT Calculation Type"::"Normal VAT";
    "Gen. Prod. Posting Group" := '';
    "VAT Prod. Posting Group" := '';
    "Interest Rate" := 0;
    FinChrgMemoLine := Rec;
    ...
Table<Tracking Specification>.PROCEDURE<OnAfterClearTracking>
  Raised in: Table<Tracking Specification>.PROCEDURE<ClearTracking>
    Code lines:
    "Serial No." := '';
    "Lot No." := '';
    "Warranty Date" := 0D;
    "Expiration Date" := 0D;
    
    OnAfterClearTracking(Rec); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterCopyTrackingFromItemLedgEntry>
  Raised in: Table<Tracking Specification>.PROCEDURE<CopyTrackingFromItemLedgEntry>
    Code lines:
    "Serial No." := ItemLedgerEntry."Serial No.";
    "Lot No." := ItemLedgerEntry."Lot No.";
    
    OnAfterCopyTrackingFromItemLedgEntry(Rec,ItemLedgerEntry); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterInitFromAsmHeader>
  Raised in: Table<Tracking Specification>.PROCEDURE<InitFromAsmHeader>
    Code lines:
    ...
    SetQuantities(
      AsmHeader."Quantity (Base)",AsmHeader."Quantity to Assemble",AsmHeader."Quantity to Assemble (Base)",
      AsmHeader."Quantity to Assemble",AsmHeader."Quantity to Assemble (Base)",
      AsmHeader."Assembled Quantity (Base)",AsmHeader."Assembled Quantity (Base)");
    
    OnAfterInitFromAsmHeader(Rec,AsmHeader); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterInitFromAsmLine>
  Raised in: Table<Tracking Specification>.PROCEDURE<InitFromAsmLine>
    Code lines:
    ...
    SetQuantities(
      AsmLine."Quantity (Base)",AsmLine."Quantity to Consume",AsmLine."Quantity to Consume (Base)",
      AsmLine."Quantity to Consume",AsmLine."Quantity to Consume (Base)",
      AsmLine."Consumed Quantity (Base)",AsmLine."Consumed Quantity (Base)");
    
    OnAfterInitFromAsmLine(Rec,AsmLine); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterInitFromItemJnlLine>
  Raised in: Table<Tracking Specification>.PROCEDURE<InitFromItemJnlLine>
    Code lines:
    ...
      ItemJnlLine."Journal Batch Name",0);
    SetQuantities(
      ItemJnlLine."Quantity (Base)",ItemJnlLine.Quantity,ItemJnlLine."Quantity (Base)",ItemJnlLine.Quantity,
      ItemJnlLine."Quantity (Base)",0,0);
    
    OnAfterInitFromItemJnlLine(Rec,ItemJnlLine); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterInitFromJobJnlLine>
  Raised in: Table<Tracking Specification>.PROCEDURE<InitFromJobJnlLine>
    Code lines:
    ...
      JobJnlLine."Journal Batch Name",0);
    SetQuantities(
      JobJnlLine."Quantity (Base)",JobJnlLine.Quantity,JobJnlLine."Quantity (Base)",JobJnlLine.Quantity,
      JobJnlLine."Quantity (Base)",0,0);
    
    OnAfterInitFromJobJnlLine(Rec,JobJnlLine); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterInitFromProdOrderComp>
  Raised in: Table<Tracking Specification>.PROCEDURE<InitFromProdOrderComp>
    Code lines:
    ...
      ProdOrderComp."Remaining Qty. (Base)",ProdOrderComp."Remaining Quantity",ProdOrderComp."Remaining Qty. (Base)",
      ProdOrderComp."Remaining Quantity",ProdOrderComp."Remaining Qty. (Base)",
      ProdOrderComp."Expected Qty. (Base)" - ProdOrderComp."Remaining Qty. (Base)",
      ProdOrderComp."Expected Qty. (Base)" - ProdOrderComp."Remaining Qty. (Base)");
    
    OnAfterInitFromProdOrderComp(Rec,ProdOrderComp); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterInitFromProdOrderLine>
  Raised in: Table<Tracking Specification>.PROCEDURE<InitFromProdOrderLine>
    Code lines:
    ...
    SetQuantities(
      ProdOrderLine."Quantity (Base)",ProdOrderLine."Remaining Quantity",ProdOrderLine."Remaining Qty. (Base)",
      ProdOrderLine."Remaining Quantity",ProdOrderLine."Remaining Qty. (Base)",ProdOrderLine."Finished Qty. (Base)",
      ProdOrderLine."Finished Qty. (Base)");
    
    OnAfterInitFromProdOrderLine(Rec,ProdOrderLine); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterInitFromProdPlanningComp>
  Raised in: Table<Tracking Specification>.PROCEDURE<InitFromProdPlanningComp>
    Code lines:
    ...
    NetQuantity := ROUND(PlanningComponent."Net Quantity (Base)" / PlanningComponent."Qty. per Unit of Measure",0.00001);
    SetQuantities(
      PlanningComponent."Net Quantity (Base)",NetQuantity,PlanningComponent."Net Quantity (Base)",NetQuantity,
      PlanningComponent."Net Quantity (Base)",0,0);
    
    OnAfterInitFromProdPlanningComp(Rec,PlanningComponent); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterInitFromPurchLine>
  Raised in: Table<Tracking Specification>.PROCEDURE<InitFromPurchLine>
    Code lines:
    ...
      SetQuantities(
        PurchLine."Quantity (Base)",PurchLine."Qty. to Receive",PurchLine."Qty. to Receive (Base)",
        PurchLine."Qty. to Invoice",PurchLine."Qty. to Invoice (Base)",PurchLine."Qty. Received (Base)",
        PurchLine."Qty. Invoiced (Base)");
    
    OnAfterInitFromPurchLine(Rec,PurchLine); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterInitFromReqLine>
  Raised in: Table<Tracking Specification>.PROCEDURE<InitFromReqLine>
    Code lines:
    ...
    SetSource(
      DATABASE::"Requisition Line",0,ReqLine."Worksheet Template Name",ReqLine."Line No.",ReqLine."Journal Batch Name",0);
    SetQuantities(
      ReqLine."Quantity (Base)",ReqLine.Quantity,ReqLine."Quantity (Base)",ReqLine.Quantity,ReqLine."Quantity (Base)",0,0);
    
    OnAfterInitFromReqLine(Rec,ReqLine); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterInitFromSalesLine>
  Raised in: Table<Tracking Specification>.PROCEDURE<InitFromSalesLine>
    Code lines:
    ...
    ELSE
      SetQuantities(
        SalesLine."Quantity (Base)",SalesLine."Qty. to Ship",SalesLine."Qty. to Ship (Base)",SalesLine."Qty. to Invoice",
        SalesLine."Qty. to Invoice (Base)",SalesLine."Qty. Shipped (Base)",SalesLine."Qty. Invoiced (Base)");
    
    OnAfterInitFromSalesLine(Rec,SalesLine); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterInitFromServLine>
  Raised in: Table<Tracking Specification>.PROCEDURE<InitFromServLine>
    Code lines:
    ...
      "Qty. to Handle" := ServiceLine."Qty. to Ship";
      "Qty. to Handle (Base)" := ServiceLine."Qty. to Ship (Base)";
      "Quantity Handled (Base)" := ServiceLine."Qty. Shipped (Base)";
    END;
    
    OnAfterInitFromServLine(Rec,ServiceLine); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterInitFromTransLine>
  Raised in: Table<Tracking Specification>.PROCEDURE<InitFromTransLine>
    Code lines:
    ...
            TransLine."Quantity (Base)",TransLine."Qty. Received (Base)",0);
          AvalabilityDate := TransLine."Receipt Date";
        END;
    END;
    
    OnAfterInitFromTransLine(Rec,TransLine); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterSetTrackingFilterFromEntrySummary>
  Raised in: Table<Tracking Specification>.PROCEDURE<SetTrackingFilterFromEntrySummary>
    Code lines:
    SETRANGE("Serial No.",EntrySummary."Serial No.");
    SETRANGE("Lot No.",EntrySummary."Lot No.");
    
    OnAfterSetTrackingFilterFromEntrySummary(Rec,EntrySummary); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterSetTrackingFilterFromReservEntry>
  Raised in: Table<Tracking Specification>.PROCEDURE<SetTrackingFilterFromReservEntry>
    Code lines:
    SETRANGE("Serial No.",ReservEntry."Serial No.");
    SETRANGE("Lot No.",ReservEntry."Lot No.");
    
    OnAfterSetTrackingFilterFromReservEntry(Rec,ReservEntry); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterSetTrackingFilterFromTrackingSpec>
  Raised in: Table<Tracking Specification>.PROCEDURE<SetTrackingFilterFromSpec>
    Code lines:
    SETRANGE("Serial No.",TrackingSpecification."Serial No.");
    SETRANGE("Lot No.",TrackingSpecification."Lot No.");
    
    OnAfterSetTrackingFilterFromTrackingSpec(Rec,TrackingSpecification); <=====================
Table<Reservation Entry>.PROCEDURE<OnAfterCopyTrackingFromItemLedgEntry>
  Raised in: Table<Reservation Entry>.PROCEDURE<CopyTrackingFromItemLedgEntry>
    Code lines:
    "Serial No." := ItemLedgerEntry."Serial No.";
    "Lot No." := ItemLedgerEntry."Lot No.";
    
    OnAfterCopyTrackingFromItemLedgEntry(Rec,ItemLedgerEntry); <=====================
Table<Reservation Entry>.PROCEDURE<OnAfterCopyTrackingFromReservEntry>
  Raised in: Table<Reservation Entry>.PROCEDURE<CopyTrackingFromReservEntry>
    Code lines:
    "Serial No." := ReservationEntry."Serial No.";
    "Lot No." := ReservationEntry."Lot No.";
    
    OnAfterCopyTrackingFromReservEntry(Rec,ReservationEntry); <=====================
Table<Reservation Entry>.PROCEDURE<OnAfterCopyTrackingFromTrackingSpec>
  Raised in: Table<Reservation Entry>.PROCEDURE<CopyTrackingFromSpec>
    Code lines:
    "Serial No." := TrackingSpecification."Serial No.";
    "Lot No." := TrackingSpecification."Lot No.";
    "Warranty Date" := TrackingSpecification."Warranty Date";
    "Expiration Date" := TrackingSpecification."Expiration Date";
    
    OnAfterCopyTrackingFromTrackingSpec(Rec,TrackingSpecification); <=====================
Table<Reservation Entry>.PROCEDURE<OnAfterCopyTrackingFromWhseActivLine>
  Raised in: Table<Reservation Entry>.PROCEDURE<CopyTrackingFromWhseActivLine>
    Code lines:
    "Serial No." := WarehouseActivityLine."Serial No.";
    "Lot No." := WarehouseActivityLine."Lot No.";
    "Expiration Date" := WarehouseActivityLine."Expiration Date";
    
    OnAfterCopyTrackingFromWhseActivLine(Rec,WarehouseActivityLine); <=====================
Table<Reservation Entry>.PROCEDURE<OnAfterSetTrackingFilterFromItemJnlLine>
  Raised in: Table<Reservation Entry>.PROCEDURE<SetTrackingFilterFromItemJnlLine>
    Code lines:
    SETRANGE("Serial No.",ItemJournalLine."Serial No.");
    SETRANGE("Lot No.",ItemJournalLine."Lot No.");
    
    OnAfterSetTrackingFilterFromItemJnlLine(Rec,ItemJournalLine); <=====================
Table<Reservation Entry>.PROCEDURE<OnAfterSetTrackingFilterFromReservEntry>
  Raised in: Table<Reservation Entry>.PROCEDURE<SetTrackingFilterFromReservEntry>
    Code lines:
    SETRANGE("Serial No.",ReservEntry."Serial No.");
    SETRANGE("Lot No.",ReservEntry."Lot No.");
    
    OnAfterSetTrackingFilterFromReservEntry(Rec,ReservEntry); <=====================
Table<Reservation Entry>.PROCEDURE<OnAfterSetTrackingFilterFromTrackingSpec>
  Raised in: Table<Reservation Entry>.PROCEDURE<SetTrackingFilterFromSpec>
    Code lines:
    SETRANGE("Serial No.",TrackingSpecification."Serial No.");
    SETRANGE("Lot No.",TrackingSpecification."Lot No.");
    
    OnAfterSetTrackingFilterFromTrackingSpec(Rec,TrackingSpecification); <=====================
Table<Reservation Entry>.PROCEDURE<OnAfterSetTrackingFilterFromWhseSpec>
  Raised in: Table<Reservation Entry>.PROCEDURE<SetTrackingFilterFromWhseSpec>
    Code lines:
    SETRANGE("Serial No.",WhseItemTrackingLine."Serial No.");
    SETRANGE("Lot No.",WhseItemTrackingLine."Lot No.");
    
    OnAfterSetTrackingFilterFromWhseSpec(Rec,WhseItemTrackingLine); <=====================
Table<Reservation Entry>.PROCEDURE<OnAfterTextCaption>
  Raised in: Table<Reservation Entry>.PROCEDURE<TextCaption>
    Code lines:
    ...
      DATABASE::"Transfer Line":
        EXIT(TransLine.TABLECAPTION);
      DATABASE::"Service Line":
        EXIT(ServLine.TABLECAPTION);
      ELSE BEGIN
        OnAfterTextCaption("Source Type",ExtensionTextCaption); <=====================
        IF ExtensionTextCaption <> '' THEN
          EXIT(ExtensionTextCaption);
        EXIT(Text001);
      END;
Table<Dimension>.PROCEDURE<OnBeforeCheckIfDimUsed>
  Raised in: Table<Dimension>.PROCEDURE<CheckIfDimUsed>
    Code lines:
    IF DimChecked = '' THEN
      EXIT;
    
    OnBeforeCheckIfDimUsed(DimChecked,DimTypeChecked,UsedAsCustomDim,CustomDimErr); <=====================
    
    CheckAllDim := DimTypeChecked IN [DimTypeChecked::" "];
    CheckGlobalDim := DimTypeChecked IN [DimTypeChecked::Global1,DimTypeChecked::Global2];
    CheckShortcutDim := DimTypeChecked IN [DimTypeChecked::Shortcut3,DimTypeChecked::Shortcut4,DimTypeChecked::Shortcut5,
                                           DimTypeChecked::Shortcut6,DimTypeChecked::Shortcut7,DimTypeChecked::Shortcut8];
    CheckBudgetDim := DimTypeChecked IN [DimTypeChecked::Budget1,DimTypeChecked::Budget2,DimTypeChecked::Budget3,
    ...
Table<Default Dimension>.PROCEDURE<OnAfterUpdateGlobalDimCode>
  Raised in: Table<Default Dimension>.PROCEDURE<UpdateGlobalDimCode>
    Code lines:
    ...
      DATABASE::"Cash Flow Manual Expense":
        UpdateNeutrPayGlobalDimCode(GlobalDimCodeNo,AccNo,NewDimValue);
      DATABASE::"Cash Flow Manual Revenue":
        UpdateNeutrRevGlobalDimCode(GlobalDimCodeNo,AccNo,NewDimValue);
      ELSE
        OnAfterUpdateGlobalDimCode(GlobalDimCodeNo,TableID,AccNo,NewDimValue); <=====================
    END;
Table<Sales Header>.PROCEDURE<OnAfterAppliesToDocNoOnLookup>
  Raised in: Table<Sales Header>.Field<Applies-to Doc. No.>.<OnLookup>
    Code lines:
    ...
      ApplyCustEntries.GetCustLedgEntry(CustLedgEntry);
      GenJnlApply.CheckAgainstApplnCurrency(
        "Currency Code",CustLedgEntry."Currency Code",GenJnlLine."Account Type"::Customer,TRUE);
      "Applies-to Doc. Type" := CustLedgEntry."Document Type";
      "Applies-to Doc. No." := CustLedgEntry."Document No.";
      OnAfterAppliesToDocNoOnLookup(Rec,CustLedgEntry); <=====================
    END;
    CLEAR(ApplyCustEntries);
Table<Sales Header>.PROCEDURE<OnAfterConfirmSalesPrice>
  Raised in: Table<Sales Header>.Field<Prices Including VAT>.<OnValidate>
    Code lines:
    ...
            CONFIRM(
              STRSUBSTNO(
                Text024,
                FIELDCAPTION("Prices Including VAT"),SalesLine.FIELDCAPTION("Unit Price")),
              TRUE);
        OnAfterConfirmSalesPrice(Rec,SalesLine,RecalculatePrice); <=====================
        SalesLine.SetSalesHeader(Rec);
    
        IF RecalculatePrice AND "Prices Including VAT" THEN
          SalesLine.MODIFYALL(Amount,0,TRUE);
    ...
Table<Sales Header>.PROCEDURE<OnAfterCopySellToCustomerAddressFieldsFromCustomer>
  Raised in: Table<Sales Header>.PROCEDURE<CopySellToCustomerAddressFieldsFromCustomer>
    Code lines:
    ...
    "VAT Country/Region Code" := SellToCustomer."Country/Region Code";
    "Shipping Advice" := SellToCustomer."Shipping Advice";
    "Responsibility Center" := UserSetupMgt.GetRespCenter(0,SellToCustomer."Responsibility Center");
    VALIDATE("Location Code",UserSetupMgt.GetLocation(0,SellToCustomer."Location Code","Responsibility Center"));
    
    OnAfterCopySellToCustomerAddressFieldsFromCustomer(Rec,SellToCustomer); <=====================
Table<Sales Header>.PROCEDURE<OnAfterCopyShipToCustomerAddressFieldsFromCustomer>
  Raised in: Table<Sales Header>.PROCEDURE<CopyShipToCustomerAddressFieldsFromCustomer>
    Code lines:
    ...
    IF Cust."Location Code" <> '' THEN
      VALIDATE("Location Code",Cust."Location Code");
    "Shipping Agent Code" := Cust."Shipping Agent Code";
    "Shipping Agent Service Code" := Cust."Shipping Agent Service Code";
    
    OnAfterCopyShipToCustomerAddressFieldsFromCustomer(Rec,SellToCustomer); <=====================
Table<Sales Header>.PROCEDURE<OnAfterCopyShipToCustomerAddressFieldsFromShipToAddr>
  Raised in: Table<Sales Header>.PROCEDURE<CopyShipToCustomerAddressFieldsFromShipToAddr>
    Code lines:
    ...
    "Shipping Agent Service Code" := ShipToAddr."Shipping Agent Service Code";
    IF ShipToAddr."Tax Area Code" <> '' THEN
      "Tax Area Code" := ShipToAddr."Tax Area Code";
    "Tax Liable" := ShipToAddr."Tax Liable";
    
    OnAfterCopyShipToCustomerAddressFieldsFromShipToAddr(Rec,ShipToAddr); <=====================
Table<Sales Header>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Sales Header>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[3] := No3;
    TableID[4] := Type4;
    No[4] := No4;
    TableID[5] := Type5;
    No[5] := No5;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    OldDimSetID := "Dimension Set ID";
    ...
Table<Sales Header>.PROCEDURE<OnAfterCreateSalesLine>
  Raised in: Table<Sales Header>.PROCEDURE<CreateSalesLine>
    Code lines:
    ...
      END;
      SalesLine.VALIDATE("Shipment Date",TempSalesLine."Shipment Date");
    END;
    OnBeforeSalesLineInsert(SalesLine,TempSalesLine);
    SalesLine.INSERT;
    OnAfterCreateSalesLine(SalesLine,TempSalesLine); <=====================
Table<Sales Header>.PROCEDURE<OnAfterDeleteAllTempSalesLines>
  Raised in: Table<Sales Header>.PROCEDURE<RecreateSalesLines>
    Code lines:
    ...
          ClearItemAssgntSalesFilter(TempItemChargeAssgntSales);
          TempSalesLine.SETRANGE(Type,SalesLine.Type::"Charge (Item)");
          CreateItemChargeAssgntSales(ItemChargeAssgntSales,TempItemChargeAssgntSales,TempSalesLine,TempInteger);
          TempSalesLine.SETRANGE(Type);
          TempSalesLine.DELETEALL;
          OnAfterDeleteAllTempSalesLines; <=====================
          ClearItemAssgntSalesFilter(TempItemChargeAssgntSales);
          TempItemChargeAssgntSales.DELETEALL;
        END;
      END ELSE
    ...
Table<Sales Header>.PROCEDURE<OnAfterGetNoSeriesCode>
  Raised in: Table<Sales Header>.PROCEDURE<GetNoSeriesCode>
    Code lines:
    ...
      "Document Type"::"Credit Memo":
        NoSeriesCode := SalesSetup."Credit Memo Nos.";
      "Document Type"::"Blanket Order":
        NoSeriesCode := SalesSetup."Blanket Order Nos.";
    END;
    OnAfterGetNoSeriesCode(Rec,SalesSetup,NoSeriesCode); <=====================
    EXIT(NoSeriesMgt.GetNoSeriesWithCheck(NoSeriesCode,SelectNoSeriesAllowed,"No. Series"));
Table<Sales Header>.PROCEDURE<OnAfterInitNoSeries>
  Raised in: Table<Sales Header>.PROCEDURE<InitNoSeries>
    Code lines:
    ...
    IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
      "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
      "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
    END;
    
    OnAfterInitNoSeries(Rec); <=====================
Table<Sales Header>.PROCEDURE<OnAfterInitRecord>
  Raised in: Table<Sales Header>.PROCEDURE<InitRecord>
    Code lines:
    ...
    UpdateOutboundWhseHandlingTime;
    
    "Responsibility Center" := UserSetupMgt.GetRespCenter(0,"Responsibility Center");
    "Doc. No. Occurrence" := ArchiveManagement.GetNextOccurrenceNo(DATABASE::"Sales Header","Document Type","No.");
    
    OnAfterInitRecord(Rec); <=====================
Table<Sales Header>.PROCEDURE<OnAfterInsertTempSalesLine>
  Raised in: Table<Sales Header>.PROCEDURE<RecreateReservEntryReqLine>
    Code lines:
    ...
        TempATOLink.INSERT;
        ATOLink.DELETE;
      END;
    
      TempSalesLine.INSERT;
      OnAfterInsertTempSalesLine(SalesLine,TempSalesLine); <=====================
      CopyReservEntryToTemp(SalesLine);
      RecreateReqLine(SalesLine,0,TRUE);
    UNTIL SalesLine.NEXT = 0;
Table<Sales Header>.PROCEDURE<OnAfterRecreateSalesLine>
  Raised in: Table<Sales Header>.PROCEDURE<RecreateSalesLines>
    Code lines:
    ...
          SalesLine.BlockDynamicTracking(TRUE);
          REPEAT
            IF TempSalesLine."Attached to Line No." = 0 THEN BEGIN
              CreateSalesLine(TempSalesLine);
              ExtendedTextAdded := FALSE;
              OnAfterRecreateSalesLine(SalesLine,TempSalesLine); <=====================
    
              IF SalesLine.Type = SalesLine.Type::Item THEN BEGIN
                ClearItemAssgntSalesFilter(TempItemChargeAssgntSales);
                TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type",TempSalesLine."Document Type");
    ...
Table<Sales Header>.PROCEDURE<OnAfterSalesQuoteAccepted>
  Raised in: Table<Sales Header>.Field<Quote Accepted>.<OnValidate>
    Code lines:
    IF "Quote Accepted" THEN BEGIN
      "Quote Accepted Date" := WORKDATE;
      OnAfterSalesQuoteAccepted(Rec); <=====================
    END ELSE
      "Quote Accepted Date" := 0D;
Table<Sales Header>.PROCEDURE<OnAfterSendSalesHeader>
  Raised in: Table<Sales Header>.PROCEDURE<EmailRecords>
    Code lines:
    ...
        DocumentSendingProfile.TrySendToEMail(
          DummyReportSelections.Usage::"S.Invoice Draft",Rec,FIELDNO("No."),
          GetDocTypeTxt,FIELDNO("Bill-to Customer No."),ShowDialog);
    END;
    
    OnAfterSendSalesHeader(Rec,ShowDialog); <=====================
Table<Sales Header>.PROCEDURE<OnAfterSetFieldsBilltoCustomer>
  Raised in: Table<Sales Header>.PROCEDURE<CopyBillToCustomerAddressFieldsFromCustomer>
    Code lines:
    ...
    IF "Document Type" = "Document Type"::Order THEN
      "Prepayment %" := BillToCustomer."Prepayment %";
    "Tax Area Code" := BillToCustomer."Tax Area Code";
    "Tax Liable" := BillToCustomer."Tax Liable";
    
    OnAfterSetFieldsBilltoCustomer(Rec,BillToCustomer); <=====================
Table<Sales Header>.PROCEDURE<OnAfterTestNoSeries>
  Raised in: Table<Sales Header>.PROCEDURE<TestNoSeries>
    Code lines:
    ...
        END;
      "Document Type"::"Blanket Order":
        SalesSetup.TESTFIELD("Blanket Order Nos.");
    END;
    
    OnAfterTestNoSeries(Rec); <=====================
Table<Sales Header>.PROCEDURE<OnAfterTransferExtendedTextForSalesLineRecreation>
  Raised in: Table<Sales Header>.PROCEDURE<RecreateSalesLines>
    Code lines:
    ...
              END;
            END ELSE
              IF NOT ExtendedTextAdded THEN BEGIN
                TransferExtendedText.SalesCheckIfAnyExtText(SalesLine,TRUE);
                TransferExtendedText.InsertSalesExtText(SalesLine);
                OnAfterTransferExtendedTextForSalesLineRecreation(SalesLine); <=====================
    
                SalesLine.FINDLAST;
                ExtendedTextAdded := TRUE;
              END;
    ...
Table<Sales Header>.PROCEDURE<OnAfterUpdateShipToAddress>
  Raised in: Table<Sales Header>.PROCEDURE<UpdateShipToAddress>
    Code lines:
    ...
          CompanyInfo."Ship-to City",CompanyInfo."Ship-to Post Code",CompanyInfo."Ship-to County",
          CompanyInfo."Ship-to Country/Region Code");
        "Ship-to Contact" := CompanyInfo."Ship-to Contact";
      END;
    
    OnAfterUpdateShipToAddress(Rec); <=====================
Table<Sales Header>.PROCEDURE<OnBeforeRecreateSalesLines>
  Raised in: Table<Sales Header>.PROCEDURE<RecreateSalesLines>
    Code lines:
    ...
      IF Confirmed THEN BEGIN
        SalesLine.LOCKTABLE;
        ItemChargeAssgntSales.LOCKTABLE;
        ReservEntry.LOCKTABLE;
        MODIFY;
        OnBeforeRecreateSalesLines(Rec); <=====================
        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type","Document Type");
        SalesLine.SETRANGE("Document No.","No.");
        IF SalesLine.FINDSET THEN BEGIN
    ...
Table<Sales Header>.PROCEDURE<OnBeforeSalesLineByChangedFieldNo>
  Raised in: Table<Sales Header>.PROCEDURE<UpdateSalesLinesByFieldNo>
    Code lines:
    ...
    SalesLine.RESET;
    SalesLine.SETRANGE("Document Type","Document Type");
    SalesLine.SETRANGE("Document No.","No.");
    IF SalesLine.FINDSET THEN
      REPEAT
        OnBeforeSalesLineByChangedFieldNo(SalesHeader,SalesLine,ChangedFieldNo,IsHandled); <=====================
        IF NOT IsHandled THEN
          CASE ChangedFieldNo OF
            FIELDNO("Shipment Date"):
              IF SalesLine."No." <> '' THEN
    ...
Table<Sales Header>.PROCEDURE<OnBeforeSalesLineInsert>
  Raised in: Table<Sales Header>.PROCEDURE<CreateSalesLine>
    Code lines:
    ...
        SalesLine."Purch. Order Line No." := TempSalesLine."Purch. Order Line No.";
        SalesLine."Drop Shipment" := SalesLine."Purch. Order Line No." <> 0;
      END;
      SalesLine.VALIDATE("Shipment Date",TempSalesLine."Shipment Date");
    END;
    OnBeforeSalesLineInsert(SalesLine,TempSalesLine); <=====================
    SalesLine.INSERT;
    OnAfterCreateSalesLine(SalesLine,TempSalesLine);
Table<Sales Header>.PROCEDURE<OnBeforeUpdateCurrencyFactor>
  Raised in: Table<Sales Header>.PROCEDURE<UpdateCurrencyFactor>
    Code lines:
    OnBeforeUpdateCurrencyFactor(Rec,Updated); <=====================
    IF Updated THEN
      EXIT;
    
    IF "Currency Code" <> '' THEN BEGIN
      IF "Posting Date" <> 0D THEN
        CurrencyDate := "Posting Date"
      ELSE
        CurrencyDate := WORKDATE;
    
    ...
Table<Sales Header>.PROCEDURE<OnCheckSalesPostRestrictions>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<CheckPrepmtDoc>
    Code lines:
    ...
    
      IF NOT CheckOpenPrepaymentLines(SalesHeader,DocumentType) THEN
        ERROR(Text001);
    
      CheckDim(SalesHeader);
      OnCheckSalesPostRestrictions; <=====================
      Cust.GET("Sell-to Customer No.");
      Cust.CheckBlockedCustOnDocs(Cust,PrepmtDocTypeToDocType(DocumentType),FALSE,TRUE);
      IF "Bill-to Customer No." <> "Sell-to Customer No." THEN BEGIN
        Cust.GET("Bill-to Customer No.");
    ...
  Raised in: Codeunit<Sales-Quote to Order>.<OnRun>
    Code lines:
    OnBeforeOnRun(Rec);
    
    TESTFIELD("Document Type","Document Type"::Quote);
    ShouldRedistributeInvoiceAmount := SalesCalcDiscountByType.ShouldRedistributeInvoiceDiscountAmount(Rec);
    
    OnCheckSalesPostRestrictions; <=====================
    
    Cust.GET("Sell-to Customer No.");
    Cust.CheckBlockedCustOnDocs(Cust,"Document Type"::Order,TRUE,FALSE);
    IF "Sell-to Customer No." <> "Bill-to Customer No." THEN BEGIN
    ...
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CheckPostRestrictions>
    Code lines:
    WITH SalesHeader DO BEGIN
      IF NOT PreviewMode THEN
        OnCheckSalesPostRestrictions; <=====================
    
      CheckCustBlockage(SalesHeader,"Sell-to Customer No.",TRUE);
      ValidateSalesPersonOnSalesHeader(SalesHeader,TRUE,TRUE);
    
      IF "Bill-to Customer No." <> "Sell-to Customer No." THEN
        CheckCustBlockage(SalesHeader,"Bill-to Customer No.",FALSE);
    
    ...
Table<Sales Header>.PROCEDURE<OnCheckSalesReleaseRestrictions>
  Raised in: Table<Sales Header>.PROCEDURE<CheckSalesReleaseRestrictions>
    Code lines:
    OnCheckSalesReleaseRestrictions; <=====================
    ApprovalsMgmt.PrePostApprovalCheckSales(Rec);
Table<Sales Header>.PROCEDURE<OnCustomerCreditLimitExceeded>
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<SalesHeaderCheck>
    Code lines:
    ...
    ELSE
      IF InstructionMgt.IsEnabled(GetInstructionType(FORMAT(SalesHeader."Document Type"),SalesHeader."No.")) THEN BEGIN
        CreditLimitExceeded := TRUE;
    
        CreateAndSendNotification(SalesHeader.RECORDID,AdditionalContextId,'');
        SalesHeader.OnCustomerCreditLimitExceeded; <=====================
      END;
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<SalesLineCheck>
    Code lines:
    ...
    IF NOT CustCheckCreditLimit.SalesLineShowWarningAndGetCause(SalesLine,AdditionalContextId) THEN
      SalesHeader.OnCustomerCreditLimitNotExceeded
    ELSE
      IF InstructionMgt.IsEnabled(GetInstructionType(FORMAT(SalesLine."Document Type"),SalesLine."Document No.")) THEN BEGIN
        CreateAndSendNotification(SalesHeader.RECORDID,AdditionalContextId,'');
        SalesHeader.OnCustomerCreditLimitExceeded; <=====================
      END;
  Raised in: Table<Sales Header>.PROCEDURE<CheckAvailableCreditLimit>
    Code lines:
    ...
      Customer.GET("Sell-to Customer No.");
    
    AvailableCreditLimit := Customer.CalcAvailableCredit;
    
    IF AvailableCreditLimit < 0 THEN
      OnCustomerCreditLimitExceeded <=====================
    ELSE
      OnCustomerCreditLimitNotExceeded;
    
    EXIT(AvailableCreditLimit);
Table<Sales Header>.PROCEDURE<OnCustomerCreditLimitNotExceeded>
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<SalesHeaderCheck>
    Code lines:
    ...
      EXIT;
    
    OnNewCheckRemoveCustomerNotifications(SalesHeader.RECORDID,TRUE);
    
    IF NOT CustCheckCreditLimit.SalesHeaderShowWarningAndGetCause(SalesHeader,AdditionalContextId) THEN
      SalesHeader.OnCustomerCreditLimitNotExceeded <=====================
    ELSE
      IF InstructionMgt.IsEnabled(GetInstructionType(FORMAT(SalesHeader."Document Type"),SalesHeader."No.")) THEN BEGIN
        CreditLimitExceeded := TRUE;
    
    ...
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<SalesLineCheck>
    Code lines:
    ...
    IF NOT SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.") THEN
      SalesHeader.INIT;
    OnNewCheckRemoveCustomerNotifications(SalesHeader.RECORDID,FALSE);
    
    IF NOT CustCheckCreditLimit.SalesLineShowWarningAndGetCause(SalesLine,AdditionalContextId) THEN
      SalesHeader.OnCustomerCreditLimitNotExceeded <=====================
    ELSE
      IF InstructionMgt.IsEnabled(GetInstructionType(FORMAT(SalesLine."Document Type"),SalesLine."Document No.")) THEN BEGIN
        CreateAndSendNotification(SalesHeader.RECORDID,AdditionalContextId,'');
        SalesHeader.OnCustomerCreditLimitExceeded;
  Raised in: Table<Sales Header>.PROCEDURE<CheckAvailableCreditLimit>
    Code lines:
    ...
    AvailableCreditLimit := Customer.CalcAvailableCredit;
    
    IF AvailableCreditLimit < 0 THEN
      OnCustomerCreditLimitExceeded
    ELSE
      OnCustomerCreditLimitNotExceeded; <=====================
    
    EXIT(AvailableCreditLimit);
Table<Sales Header>.PROCEDURE<OnUpdateSalesLineByChangedFieldName>
  Raised in: Table<Sales Header>.PROCEDURE<UpdateSalesLinesByFieldNo>
    Code lines:
    ...
                SalesLine.VALIDATE("Outbound Whse. Handling Time","Outbound Whse. Handling Time");
            SalesLine.FIELDNO("Deferral Code"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Deferral Code");
            ELSE
              OnUpdateSalesLineByChangedFieldName(Rec,SalesLine,Field."Field Caption"); <=====================
          END;
        SalesLineReserve.AssignForPlanning(SalesLine);
        SalesLine.MODIFY(TRUE);
      UNTIL SalesLine.NEXT = 0;
Table<Sales Line>.PROCEDURE<OnAfterAssignFieldsForNo>
  Raised in: Table<Sales Line>.Field<No.>.<OnValidate>
    Code lines:
    ...
        CopyFromFixedAsset;
      Type::"Charge (Item)":
        CopyFromItemCharge;
    END;
    
    OnAfterAssignFieldsForNo(Rec,xRec,SalesHeader); <=====================
    
    IF HasTypeToFillMandatoryFields AND (Type <> Type::"Fixed Asset") THEN
      VALIDATE("VAT Prod. Posting Group");
    
    ...
Table<Sales Line>.PROCEDURE<OnAfterAssignFixedAssetValues>
  Raised in: Table<Sales Line>.PROCEDURE<CopyFromFixedAsset>
    Code lines:
    ...
    GetFAPostingGroup;
    Description := FixedAsset.Description;
    "Description 2" := FixedAsset."Description 2";
    "Allow Invoice Disc." := FALSE;
    "Allow Item Charge Assignment" := FALSE;
    OnAfterAssignFixedAssetValues(Rec,FixedAsset); <=====================
Table<Sales Line>.PROCEDURE<OnAfterAssignGLAccountValues>
  Raised in: Table<Sales Line>.PROCEDURE<CopyFromGLAccount>
    Code lines:
    ...
    "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
    "Tax Group Code" := GLAcc."Tax Group Code";
    "Allow Invoice Disc." := FALSE;
    "Allow Item Charge Assignment" := FALSE;
    InitDeferralCode;
    OnAfterAssignGLAccountValues(Rec,GLAcc); <=====================
Table<Sales Line>.PROCEDURE<OnAfterAssignHeaderValues>
  Raised in: Table<Sales Line>.Field<No.>.<OnValidate>
    Code lines:
    ...
      CalendarMgmt.CalcDateBOC(
        '',SalesHeader."Shipment Date",CalChange."Source Type"::Location,"Location Code",'',
        CalChange."Source Type"::"Shipping Agent","Shipping Agent Code","Shipping Agent Service Code",FALSE);
    UpdateDates;
    
    OnAfterAssignHeaderValues(Rec,SalesHeader); <=====================
    
    CASE Type OF
      Type::" ":
        CopyFromStandardText;
    ...
Table<Sales Line>.PROCEDURE<OnAfterAssignItemChargeValues>
  Raised in: Table<Sales Line>.PROCEDURE<CopyFromItemCharge>
    Code lines:
    ...
    "Gen. Prod. Posting Group" := ItemCharge."Gen. Prod. Posting Group";
    "VAT Prod. Posting Group" := ItemCharge."VAT Prod. Posting Group";
    "Tax Group Code" := ItemCharge."Tax Group Code";
    "Allow Invoice Disc." := FALSE;
    "Allow Item Charge Assignment" := FALSE;
    OnAfterAssignItemChargeValues(Rec,ItemCharge); <=====================
Table<Sales Line>.PROCEDURE<OnAfterAssignItemUOM>
  Raised in: Table<Sales Line>.Field<Unit of Measure Code>.<OnValidate>
    Code lines:
    ...
          CheckItemAvailable(FIELDNO("Unit of Measure Code"));
          "Gross Weight" := Item."Gross Weight" * "Qty. per Unit of Measure";
          "Net Weight" := Item."Net Weight" * "Qty. per Unit of Measure";
          "Unit Volume" := Item."Unit Volume" * "Qty. per Unit of Measure";
          "Units per Parcel" := ROUND(Item."Units per Parcel" / "Qty. per Unit of Measure",0.00001);
          OnAfterAssignItemUOM(Rec,Item); <=====================
          IF (xRec."Unit of Measure Code" <> "Unit of Measure Code") AND (Quantity <> 0) THEN
            WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
          IF "Qty. per Unit of Measure" > xRec."Qty. per Unit of Measure" THEN
            InitItemAppl(FALSE);
    ...
Table<Sales Line>.PROCEDURE<OnAfterAssignItemValues>
  Raised in: Table<Sales Line>.PROCEDURE<CopyFromItem>
    Code lines:
    ...
      Reserve := Item.Reserve;
    
    "Unit of Measure Code" := Item."Sales Unit of Measure";
    InitDeferralCode;
    SetDefaultItemQuantity;
    OnAfterAssignItemValues(Rec,Item); <=====================
Table<Sales Line>.PROCEDURE<OnAfterAssignResourceUOM>
  Raised in: Table<Sales Line>.Field<Unit of Measure Code>.<OnValidate>
    Code lines:
    ...
            GetResource;
            "Unit of Measure Code" := Resource."Base Unit of Measure";
          END;
          ResUnitofMeasure.GET("No.","Unit of Measure Code");
          "Qty. per Unit of Measure" := ResUnitofMeasure."Qty. per Unit of Measure";
          OnAfterAssignResourceUOM(Rec,Resource,ResUnitofMeasure); <=====================
          UpdateUnitPrice(FIELDNO("Unit of Measure Code"));
          FindResUnitCost;
        END;
      Type::"G/L Account",Type::"Fixed Asset",
    ...
Table<Sales Line>.PROCEDURE<OnAfterAssignResourceValues>
  Raised in: Table<Sales Line>.PROCEDURE<CopyFromResource>
    Code lines:
    ...
    "VAT Prod. Posting Group" := Res."VAT Prod. Posting Group";
    "Tax Group Code" := Res."Tax Group Code";
    "Allow Item Charge Assignment" := FALSE;
    FindResUnitCost;
    InitDeferralCode;
    OnAfterAssignResourceValues(Rec,Res); <=====================
Table<Sales Line>.PROCEDURE<OnAfterAssignStdTxtValues>
  Raised in: Table<Sales Line>.PROCEDURE<CopyFromStandardText>
    Code lines:
    StandardText.GET("No.");
    Description := StandardText.Description;
    "Allow Item Charge Assignment" := FALSE;
    OnAfterAssignStdTxtValues(Rec,StandardText); <=====================
Table<Sales Line>.PROCEDURE<OnAfterAutoAsmToOrder>
  Raised in: Table<Sales Line>.PROCEDURE<AutoAsmToOrder>
    Code lines:
    OnBeforeAutoAsmToOrder(Rec);
    ATOLink.UpdateAsmFromSalesLine(Rec);
    OnAfterAutoAsmToOrder(Rec); <=====================
Table<Sales Line>.PROCEDURE<OnAfterBlanketOrderLookup>
  Raised in: Table<Sales Line>.PROCEDURE<BlanketOrderLookup>
    Code lines:
    ...
      SalesLine2.TESTFIELD("Document Type","Document Type"::"Blanket Order");
      "Blanket Order No." := SalesLine2."Document No.";
      VALIDATE("Blanket Order Line No.",SalesLine2."Line No.");
    END;
    
    OnAfterBlanketOrderLookup(Rec); <=====================
Table<Sales Line>.PROCEDURE<OnAfterCalcVATAmountLines>
  Raised in: Table<Sales Line>.PROCEDURE<CalcVATAmountLines>
    Code lines:
    ...
        VATAmountLine."Amount Including VAT" += TotalVATAmount;
        VATAmountLine."Calculated VAT Amount" += TotalVATAmount;
        VATAmountLine.MODIFY;
      END;
    
    OnAfterCalcVATAmountLines(SalesHeader,SalesLine,VATAmountLine,QtyType); <=====================
Table<Sales Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Sales Line>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    TableID[3] := Type3;
    No[3] := No3;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    GetSalesHeader;
    ...
Table<Sales Line>.PROCEDURE<OnAfterGetLineAmountToHandle>
  Raised in: Table<Sales Line>.PROCEDURE<GetLineAmountToHandle>
    Code lines:
    ...
    IF QtyToHandle <> Quantity THEN
      LineDiscAmount := ROUND(LineAmount * "Line Discount %" / 100,Currency."Amount Rounding Precision")
    ELSE
      LineDiscAmount := "Line Discount Amount";
    
    OnAfterGetLineAmountToHandle(Rec,QtyToHandle,LineAmount,LineDiscAmount); <=====================
    EXIT(LineAmount - LineDiscAmount);
Table<Sales Line>.PROCEDURE<OnAfterGetUnitCost>
  Raised in: Table<Sales Line>.PROCEDURE<GetUnitCost>
    Code lines:
    ...
    IF GetSKU THEN
      VALIDATE("Unit Cost (LCY)",SKU."Unit Cost" * "Qty. per Unit of Measure")
    ELSE
      VALIDATE("Unit Cost (LCY)",Item."Unit Cost" * "Qty. per Unit of Measure");
    
    OnAfterGetUnitCost(Rec,Item); <=====================
Table<Sales Line>.PROCEDURE<OnAfterInitHeaderDefaults>
  Raised in: Table<Sales Line>.PROCEDURE<InitHeaderDefaults>
    Code lines:
    ...
    "Shipping Agent Code" := SalesHeader."Shipping Agent Code";
    "Shipping Agent Service Code" := SalesHeader."Shipping Agent Service Code";
    "Outbound Whse. Handling Time" := SalesHeader."Outbound Whse. Handling Time";
    "Shipping Time" := SalesHeader."Shipping Time";
    
    OnAfterInitHeaderDefaults(Rec,SalesHeader); <=====================
Table<Sales Line>.PROCEDURE<OnAfterInitOutstandingAmount>
  Raised in: Table<Sales Line>.PROCEDURE<InitOutstandingAmount>
    Code lines:
    ...
          ROUND(
            AmountInclVAT * "Qty. Shipped Not Invoiced" / Quantity,
            Currency."Amount Rounding Precision"));
    END;
    
    OnAfterInitOutstandingAmount(Rec,SalesHeader,Currency); <=====================
Table<Sales Line>.PROCEDURE<OnAfterInitQtyToInvoice>
  Raised in: Table<Sales Line>.PROCEDURE<InitQtyToInvoice>
    Code lines:
    ...
    "VAT Difference" := 0;
    CalcInvDiscToInvoice;
    IF SalesHeader."Document Type" <> SalesHeader."Document Type"::Invoice THEN
      CalcPrepaymentToDeduct;
    
    OnAfterInitQtyToInvoice(Rec,CurrFieldNo); <=====================
Table<Sales Line>.PROCEDURE<OnAfterInitQtyToReceive>
  Raised in: Table<Sales Line>.PROCEDURE<InitQtyToReceive>
    Code lines:
    ...
      "Return Qty. to Receive (Base)" := "Outstanding Qty. (Base)";
    END ELSE
      IF "Return Qty. to Receive" <> 0 THEN
        "Return Qty. to Receive (Base)" := CalcBaseQty("Return Qty. to Receive");
    
    OnAfterInitQtyToReceive(Rec,CurrFieldNo); <=====================
    
    InitQtyToInvoice;
Table<Sales Line>.PROCEDURE<OnAfterInitQtyToShip>
  Raised in: Table<Sales Line>.PROCEDURE<InitQtyToShip>
    Code lines:
    ...
      IF "Qty. to Ship" <> 0 THEN
        "Qty. to Ship (Base)" := CalcBaseQty("Qty. to Ship");
    
    CheckServItemCreation;
    
    OnAfterInitQtyToShip(Rec,CurrFieldNo); <=====================
    
    InitQtyToInvoice;
Table<Sales Line>.PROCEDURE<OnAfterSetDefaultQuantity>
  Raised in: Table<Sales Line>.PROCEDURE<SetDefaultQuantity>
    Code lines:
    ...
        "Qty. to Invoice" := 0;
        "Qty. to Invoice (Base)" := 0;
      END;
    END;
    
    OnAfterSetDefaultQuantity(Rec,xRec); <=====================
Table<Sales Line>.PROCEDURE<OnAfterShowItemSub>
  Raised in: Table<Sales Line>.PROCEDURE<ShowItemSub>
    Code lines:
    ...
    TestStatusOpen;
    ItemSubstitutionMgt.ItemSubstGet(Rec);
    IF TransferExtendedText.SalesCheckIfAnyExtText(Rec,TRUE) THEN
      TransferExtendedText.InsertSalesExtText(Rec);
    
    OnAfterShowItemSub(Rec); <=====================
Table<Sales Line>.PROCEDURE<OnAfterTestStatusOpen>
  Raised in: Table<Sales Line>.PROCEDURE<TestStatusOpen>
    Code lines:
    ...
    GetSalesHeader;
    IF NOT "System-Created Entry" THEN
      IF HasTypeToFillMandatoryFields THEN
        SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);
    
    OnAfterTestStatusOpen(Rec,SalesHeader); <=====================
Table<Sales Line>.PROCEDURE<OnAfterUpdateAmounts>
  Raised in: Table<Sales Line>.PROCEDURE<UpdateAmounts>
    Code lines:
    ...
            FIELDERROR("Line Amount",STRSUBSTNO(Text044,xRec."Line Amount"));
          FIELDERROR("Line Amount",STRSUBSTNO(Text045,xRec."Line Amount"));
        END;
    END;
    
    OnAfterUpdateAmounts(Rec,xRec,CurrFieldNo); <=====================
    
    UpdateVATAmounts;
    InitOutstandingAmount;
    IF (CurrFieldNo <> 0) AND
    ...
Table<Sales Line>.PROCEDURE<OnAfterUpdateAmountsDone>
  Raised in: Table<Sales Line>.PROCEDURE<UpdateAmounts>
    Code lines:
    ...
    IF LineAmountChanged THEN BEGIN
      UpdateDeferralAmounts;
      LineAmountChanged := FALSE;
    END;
    
    OnAfterUpdateAmountsDone(Rec,xRec,CurrFieldNo); <=====================
Table<Sales Line>.PROCEDURE<OnAfterUpdateTotalAmounts>
  Raised in: Table<Sales Line>.PROCEDURE<UpdateVATAmounts>
    Code lines:
    ...
          TotalLineAmount := SalesLine2."Line Amount";
          TotalInvDiscAmount := SalesLine2."Inv. Discount Amount";
          TotalAmount := SalesLine2.Amount;
          TotalAmountInclVAT := SalesLine2."Amount Including VAT";
          TotalQuantityBase := SalesLine2."Quantity (Base)";
          OnAfterUpdateTotalAmounts(Rec,SalesLine2,TotalAmount,TotalAmountInclVAT,TotalLineAmount,TotalInvDiscAmount); <=====================
        END;
    
      IF SalesHeader."Prices Including VAT" THEN
        CASE "VAT Calculation Type" OF
    ...
Table<Sales Line>.PROCEDURE<OnAfterUpdateUnitPrice>
  Raised in: Table<Sales Line>.PROCEDURE<UpdateUnitPrice>
    Code lines:
    ...
          PriceCalcMgt.FindSalesLinePrice(SalesHeader,Rec,CalledByFieldNo);
        END;
    END;
    VALIDATE("Unit Price");
    
    OnAfterUpdateUnitPrice(Rec,xRec,CalledByFieldNo,CurrFieldNo); <=====================
Table<Sales Line>.PROCEDURE<OnAfterUpdateVATOnLines>
  Raised in: Table<Sales Line>.PROCEDURE<UpdateVATOnLines>
    Code lines:
    ...
            END;
          END;
        UNTIL NEXT = 0;
    END;
    
    OnAfterUpdateVATOnLines(SalesHeader,SalesLine,VATAmountLine,QtyType); <=====================
Table<Sales Line>.PROCEDURE<OnAfterValidateReturnReasonCode>
  Raised in: Table<Sales Line>.PROCEDURE<ValidateReturnReasonCode>
    Code lines:
    ...
      ELSE
        IF "Unit Price" = 0 THEN
          UpdateUnitPrice(CallingFieldNo);
    END;
    
    OnAfterValidateReturnReasonCode(Rec,CallingFieldNo); <=====================
Table<Sales Line>.PROCEDURE<OnBeforeAutoAsmToOrder>
  Raised in: Table<Sales Line>.PROCEDURE<AutoAsmToOrder>
    Code lines:
    OnBeforeAutoAsmToOrder(Rec); <=====================
    ATOLink.UpdateAsmFromSalesLine(Rec);
    OnAfterAutoAsmToOrder(Rec);
Table<Sales Line>.PROCEDURE<OnBeforeBlanketOrderLookup>
  Raised in: Table<Sales Line>.PROCEDURE<BlanketOrderLookup>
    Code lines:
    IsHandled := FALSE;
    OnBeforeBlanketOrderLookup(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SalesLine2.RESET;
    SalesLine2.SETCURRENTKEY("Document Type",Type,"No.");
    SalesLine2.SETRANGE("Document Type","Document Type"::"Blanket Order");
    SalesLine2.SETRANGE(Type,Type);
    SalesLine2.SETRANGE("No.","No.");
    ...
Table<Sales Line>.PROCEDURE<OnBeforeCheckAssocPurchOrder>
  Raised in: Table<Sales Line>.PROCEDURE<CheckAssocPurchOrder>
    Code lines:
    OnBeforeCheckAssocPurchOrder(Rec,TheFieldCaption,IsHandled); <=====================
    
    IF TheFieldCaption = '' THEN BEGIN // If sales line is being deleted
      IF "Purch. Order Line No." <> 0 THEN
        ERROR(Text000,"Purchase Order No.","Purch. Order Line No.");
      IF "Special Order Purch. Line No." <> 0 THEN
        ERROR(Text000,"Special Order Purchase No.","Special Order Purch. Line No.");
    END;
    
    IF "Purch. Order Line No." <> 0 THEN
    ...
Table<Sales Line>.PROCEDURE<OnBeforeUpdateUnitPrice>
  Raised in: Table<Sales Line>.PROCEDURE<UpdateUnitPrice>
    Code lines:
    OnBeforeUpdateUnitPrice(Rec,xRec,CalledByFieldNo,CurrFieldNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    GetSalesHeader;
    TESTFIELD("Qty. per Unit of Measure");
    
    CASE Type OF
      Type::Item,Type::Resource:
        BEGIN
    ...
Table<Sales Line>.PROCEDURE<OnBeforeVerifyReservedQty>
  Raised in: Table<Sales Line>.<OnInsert>
    Code lines:
    TestStatusOpen;
    IF Quantity <> 0 THEN BEGIN
      OnBeforeVerifyReservedQty(Rec,xRec,0); <=====================
      ReserveSalesLine.VerifyQuantity(Rec,xRec);
    END;
    LOCKTABLE;
    SalesHeader."No." := '';
    IF Type = Type::Item THEN
      IF SalesHeader.InventoryPickConflict("Document Type","Document No.",SalesHeader."Shipping Advice") THEN
        ERROR(Text056,SalesHeader."Shipping Advice");
    ...
  Raised in: Table<Sales Line>.Field<Quantity>.<OnValidate>
    Code lines:
    ...
      InitItemAppl(FALSE);
    
    IF Type = Type::Item THEN BEGIN
      UpdateUnitPrice(FIELDNO(Quantity));
      IF (xRec.Quantity <> Quantity) OR (xRec."Quantity (Base)" <> "Quantity (Base)") THEN BEGIN
        OnBeforeVerifyReservedQty(Rec,xRec,FIELDNO(Quantity)); <=====================
        ReserveSalesLine.VerifyQuantity(Rec,xRec);
        IF NOT "Drop Shipment" THEN
          UpdateWithWarehouseShip;
        WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
    ...
Table<Sales Line>.PROCEDURE<OnGetDeferralPostDate>
  Raised in: Table<Sales Line>.Field<Deferral Code>.<OnValidate>
    Code lines:
    GetSalesHeader;
    OnGetDeferralPostDate(SalesHeader,DeferralPostDate); <=====================
    IF DeferralPostDate = 0D THEN
      DeferralPostDate := SalesHeader."Posting Date";
    
    DeferralUtilities.DeferralCodeOnValidate(
      "Deferral Code",DeferralUtilities.GetSalesDeferralDocType,'','',
      "Document Type","Document No.","Line No.",
      GetDeferralAmount,DeferralPostDate,
      Description,SalesHeader."Currency Code");
    ...
  Raised in: Table<Sales Line>.PROCEDURE<UpdateDeferralAmounts>
    Code lines:
    GetSalesHeader;
    OnGetDeferralPostDate(SalesHeader,DeferralPostDate); <=====================
    IF DeferralPostDate = 0D THEN
      DeferralPostDate := SalesHeader."Posting Date";
    AdjustStartDate := TRUE;
    IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
      IF "Returns Deferral Start Date" = 0D THEN
        "Returns Deferral Start Date" := SalesHeader."Posting Date";
      DeferralPostDate := "Returns Deferral Start Date";
      AdjustStartDate := FALSE;
    ...
Table<Sales Line>.PROCEDURE<OnValidateNoOnCopyFromTempSalesLine>
  Raised in: Table<Sales Line>.Field<No.>.<OnValidate>
    Code lines:
    ...
    INIT;
    IF xRec."Line Amount" <> 0 THEN
      "Recalculate Invoice Disc." := TRUE;
    Type := TempSalesLine.Type;
    "No." := TempSalesLine."No.";
    OnValidateNoOnCopyFromTempSalesLine(Rec,TempSalesLine); <=====================
    IF "No." = '' THEN
      EXIT;
    
    IF HasTypeToFillMandatoryFields THEN
    ...
Table<Sales Line>.PROCEDURE<OnValidateTypeOnCopyFromTempSalesLine>
  Raised in: Table<Sales Line>.Field<Type>.<OnValidate>
    Code lines:
    ...
    
    Type := TempSalesLine.Type;
    "System-Created Entry" := TempSalesLine."System-Created Entry";
    "Currency Code" := SalesHeader."Currency Code";
    
    OnValidateTypeOnCopyFromTempSalesLine(Rec,TempSalesLine); <=====================
    
    IF Type = Type::Item THEN
      "Allow Item Charge Assignment" := TRUE
    ELSE
    ...
Table<Purchase Header>.PROCEDURE<OnAfterAppliesToDocNoOnLookup>
  Raised in: Table<Purchase Header>.Field<Applies-to Doc. No.>.<OnLookup>
    Code lines:
    ...
      ApplyVendEntries.GetVendLedgEntry(VendLedgEntry);
      GenJnlApply.CheckAgainstApplnCurrency(
        "Currency Code",VendLedgEntry."Currency Code",GenJnlLine."Account Type"::Vendor,TRUE);
      "Applies-to Doc. Type" := VendLedgEntry."Document Type";
      "Applies-to Doc. No." := VendLedgEntry."Document No.";
      OnAfterAppliesToDocNoOnLookup(Rec,VendLedgEntry); <=====================
    END;
    CLEAR(ApplyVendEntries);
Table<Purchase Header>.PROCEDURE<OnAfterConfirmPurchPrice>
  Raised in: Table<Purchase Header>.Field<Prices Including VAT>.<OnValidate>
    Code lines:
    ...
            STRSUBSTNO(
              Text025 +
              Text027,
              FIELDCAPTION("Prices Including VAT"),PurchLine.FIELDCAPTION("Direct Unit Cost")),
            TRUE);
        OnAfterConfirmPurchPrice(Rec,PurchLine,RecalculatePrice); <=====================
        PurchLine.SetPurchHeader(Rec);
    
        IF RecalculatePrice AND "Prices Including VAT" THEN
          PurchLine.MODIFYALL(Amount,0,TRUE);
    ...
Table<Purchase Header>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Purchase Header>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[2] := No2;
    TableID[3] := Type3;
    No[3] := No3;
    TableID[4] := Type4;
    No[4] := No4;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    OldDimSetID := "Dimension Set ID";
    ...
Table<Purchase Header>.PROCEDURE<OnAfterDeleteAllTempPurchLines>
  Raised in: Table<Purchase Header>.PROCEDURE<RecreatePurchLines>
    Code lines:
    ...
            END;
          UNTIL TempPurchLine.NEXT = 0;
    
        TempPurchLine.SETRANGE(Type);
        TempPurchLine.DELETEALL;
        OnAfterDeleteAllTempPurchLines; <=====================
        ClearItemAssgntPurchFilter(TempItemChargeAssgntPurch);
        TempItemChargeAssgntPurch.DELETEALL;
      END;
    END ELSE
    ...
Table<Purchase Header>.PROCEDURE<OnAfterGetNoSeriesCode>
  Raised in: Table<Purchase Header>.PROCEDURE<GetNoSeriesCode>
    Code lines:
    ...
      "Document Type"::"Credit Memo":
        NoSeriesCode := PurchSetup."Credit Memo Nos.";
      "Document Type"::"Blanket Order":
        NoSeriesCode := PurchSetup."Blanket Order Nos.";
    END;
    OnAfterGetNoSeriesCode(Rec,PurchSetup,NoSeriesCode); <=====================
    EXIT(NoSeriesMgt.GetNoSeriesWithCheck(NoSeriesCode,SelectNoSeriesAllowed,"No. Series"));
Table<Purchase Header>.PROCEDURE<OnAfterInitNoSeries>
  Raised in: Table<Purchase Header>.PROCEDURE<InitNoSeries>
    Code lines:
    ...
    IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
      "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
      "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
    END;
    
    OnAfterInitNoSeries(Rec); <=====================
Table<Purchase Header>.PROCEDURE<OnAfterInitRecord>
  Raised in: Table<Purchase Header>.PROCEDURE<InitRecord>
    Code lines:
    ...
      "Inbound Whse. Handling Time" := InvtSetup."Inbound Whse. Handling Time";
    
    "Responsibility Center" := UserSetupMgt.GetRespCenter(1,"Responsibility Center");
    "Doc. No. Occurrence" := ArchiveManagement.GetNextOccurrenceNo(DATABASE::"Purchase Header","Document Type","No.");
    
    OnAfterInitRecord(Rec); <=====================
Table<Purchase Header>.PROCEDURE<OnAfterRecreatePurchLine>
  Raised in: Table<Purchase Header>.PROCEDURE<RecreatePurchLines>
    Code lines:
    ...
    
            OnRecreatePurchLinesOnBeforeInsertPurchLine(PurchLine,TempPurchLine);
            PurchLine.INSERT;
            ExtendedTextAdded := FALSE;
    
            OnAfterRecreatePurchLine(PurchLine,TempPurchLine); <=====================
    
            IF PurchLine.Type = PurchLine.Type::Item THEN BEGIN
              ClearItemAssgntPurchFilter(TempItemChargeAssgntPurch);
              TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type",TempPurchLine."Document Type");
    ...
Table<Purchase Header>.PROCEDURE<OnAfterTestNoSeries>
  Raised in: Table<Purchase Header>.PROCEDURE<TestNoSeries>
    Code lines:
    ...
        END;
      "Document Type"::"Blanket Order":
        PurchSetup.TESTFIELD("Blanket Order Nos.");
    END;
    
    OnAfterTestNoSeries(Rec); <=====================
Table<Purchase Header>.PROCEDURE<OnAfterTransferExtendedTextForPurchaseLineRecreation>
  Raised in: Table<Purchase Header>.PROCEDURE<RecreatePurchLines>
    Code lines:
    ...
            END;
          END ELSE
            IF NOT ExtendedTextAdded THEN BEGIN
              TransferExtendedText.PurchCheckIfAnyExtText(PurchLine,TRUE);
              TransferExtendedText.InsertPurchExtText(PurchLine);
              OnAfterTransferExtendedTextForPurchaseLineRecreation(PurchLine); <=====================
              PurchLine.FINDLAST;
              ExtendedTextAdded := TRUE;
            END;
        UNTIL TempPurchLine.NEXT = 0;
    ...
Table<Purchase Header>.PROCEDURE<OnAfterUpdateShipToAddress>
  Raised in: Table<Purchase Header>.PROCEDURE<UpdateShipToAddress>
    Code lines:
    ...
        CompanyInfo."Ship-to City",CompanyInfo."Ship-to Post Code",CompanyInfo."Ship-to County",
        CompanyInfo."Ship-to Country/Region Code");
      "Ship-to Contact" := CompanyInfo."Ship-to Contact";
    END;
    
    OnAfterUpdateShipToAddress(Rec); <=====================
Table<Purchase Header>.PROCEDURE<OnBeforeRecreatePurchLines>
  Raised in: Table<Purchase Header>.PROCEDURE<RecreatePurchLines>
    Code lines:
    ...
    
    IF Confirmed THEN BEGIN
      PurchLine.LOCKTABLE;
      ItemChargeAssgntPurch.LOCKTABLE;
      MODIFY;
      OnBeforeRecreatePurchLines(Rec); <=====================
    
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
    ...
Table<Purchase Header>.PROCEDURE<OnBeforeUpdateCurrencyFactor>
  Raised in: Table<Purchase Header>.PROCEDURE<UpdateCurrencyFactor>
    Code lines:
    OnBeforeUpdateCurrencyFactor(Rec,Updated); <=====================
    IF Updated THEN
      EXIT;
    
    IF "Currency Code" <> '' THEN BEGIN
      IF "Posting Date" <> 0D THEN
        CurrencyDate := "Posting Date"
      ELSE
        CurrencyDate := WORKDATE;
    
    ...
Table<Purchase Header>.PROCEDURE<OnCheckPurchasePostRestrictions>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<CheckPrepmtDoc>
    Code lines:
    ...
        FIELDERROR("Posting Date",Text000);
    
      IF NOT CheckOpenPrepaymentLines(PurchHeader,DocumentType) THEN
        ERROR(Text001);
      CheckDim(PurchHeader);
      OnCheckPurchasePostRestrictions; <=====================
      Vend.GET("Buy-from Vendor No.");
      Vend.CheckBlockedVendOnDocs(Vend,TRUE);
      IF "Pay-to Vendor No." <> "Buy-from Vendor No." THEN BEGIN
        Vend.GET("Pay-to Vendor No.");
    ...
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CheckPostRestrictions>
    Code lines:
    IF NOT PreviewMode THEN
      PurchaseHeader.OnCheckPurchasePostRestrictions; <=====================
    
    Vendor.GET(PurchaseHeader."Buy-from Vendor No.");
    Vendor.CheckBlockedVendOnDocs(Vendor,TRUE);
    PurchaseHeader.ValidatePurchaserOnPurchHeader(PurchaseHeader,TRUE,TRUE);
    
    IF PurchaseHeader."Pay-to Vendor No." <> PurchaseHeader."Buy-from Vendor No." THEN BEGIN
      Vendor.GET(PurchaseHeader."Pay-to Vendor No.");
      Vendor.CheckBlockedVendOnDocs(Vendor,TRUE);
    ...
  Raised in: Codeunit<Purch.-Quote to Order>.<OnRun>
    Code lines:
    TESTFIELD("Document Type","Document Type"::Quote);
    ShouldRedistributeInvoiceAmount := PurchCalcDiscByType.ShouldRedistributeInvoiceDiscountAmount(Rec);
    
    OnCheckPurchasePostRestrictions; <=====================
    
    Vend.GET("Buy-from Vendor No.");
    Vend.CheckBlockedVendOnDocs(Vend,FALSE);
    
    ValidatePurchaserOnPurchHeader(Rec,TRUE,FALSE);
    
    ...
Table<Purchase Header>.PROCEDURE<OnCheckPurchaseReleaseRestrictions>
  Raised in: Table<Purchase Header>.PROCEDURE<CheckPurchaseReleaseRestrictions>
    Code lines:
    OnCheckPurchaseReleaseRestrictions; <=====================
    ApprovalsMgmt.PrePostApprovalCheckPurch(Rec);
Table<Purchase Header>.PROCEDURE<OnRecreatePurchLinesOnBeforeInsertPurchLine>
  Raised in: Table<Purchase Header>.PROCEDURE<RecreatePurchLines>
    Code lines:
    ...
                  ELSE
                    TransferSavedFields(PurchLine,TempPurchLine);
                END;
            END;
    
            OnRecreatePurchLinesOnBeforeInsertPurchLine(PurchLine,TempPurchLine); <=====================
            PurchLine.INSERT;
            ExtendedTextAdded := FALSE;
    
            OnAfterRecreatePurchLine(PurchLine,TempPurchLine);
    ...
Table<Purchase Header>.PROCEDURE<OnUpdatePurchLinesByChangedFieldName>
  Raised in: Table<Purchase Header>.PROCEDURE<UpdatePurchLinesByFieldNo>
    Code lines:
    ...
              PurchLine.VALIDATE("Inbound Whse. Handling Time","Inbound Whse. Handling Time");
          PurchLine.FIELDNO("Deferral Code"):
            IF PurchLine."No." <> '' THEN
              PurchLine.VALIDATE("Deferral Code");
          ELSE
            OnUpdatePurchLinesByChangedFieldName(Rec,PurchLine,Field."Field Caption"); <=====================
        END;
        PurchLine.MODIFY(TRUE);
        PurchLineReserve.VerifyChange(PurchLine,xPurchLine);
      UNTIL PurchLine.NEXT = 0;
Table<Purchase Header>.PROCEDURE<OnValidatePurchaseHeaderPayToVendorNo>
  Raised in: Table<Purchase Header>.Field<Pay-to Vendor No.>.<OnValidate>
    Code lines:
    ...
    VALIDATE("Prepmt. Payment Terms Code");
    VALIDATE("Payment Method Code");
    VALIDATE("Currency Code");
    VALIDATE("Creditor No.",Vend."Creditor No.");
    
    OnValidatePurchaseHeaderPayToVendorNo(Vend); <=====================
    
    IF "Document Type" = "Document Type"::Order THEN
      VALIDATE("Prepayment %",Vend."Prepayment %");
    
    ...
Table<CV Ledger Entry Buffer>.PROCEDURE<OnAfterCopyFromCustLedgerEntry>
  Raised in: Table<CV Ledger Entry Buffer>.PROCEDURE<CopyFromCustLedgEntry>
    Code lines:
    ...
    "Remaining Amount" := CustLedgEntry."Remaining Amount";
    "Remaining Amt. (LCY)" := CustLedgEntry."Remaining Amt. (LCY)";
    "Original Amount" := CustLedgEntry."Original Amount";
    "Original Amt. (LCY)" := CustLedgEntry."Original Amt. (LCY)";
    
    OnAfterCopyFromCustLedgerEntry(Rec,CustLedgEntry); <=====================
Table<CV Ledger Entry Buffer>.PROCEDURE<OnAfterCopyFromEmplLedgerEntry>
  Raised in: Table<CV Ledger Entry Buffer>.PROCEDURE<CopyFromEmplLedgEntry>
    Code lines:
    ...
    "Debit Amount (LCY)" := EmplLedgEntry."Debit Amount (LCY)";
    "Credit Amount (LCY)" := EmplLedgEntry."Credit Amount (LCY)";
    "No. Series" := EmplLedgEntry."No. Series";
    "Amount to Apply" := EmplLedgEntry."Amount to Apply";
    
    OnAfterCopyFromEmplLedgerEntry(Rec,EmplLedgEntry); <=====================
Table<CV Ledger Entry Buffer>.PROCEDURE<OnAfterCopyFromVendLedgerEntry>
  Raised in: Table<CV Ledger Entry Buffer>.PROCEDURE<CopyFromVendLedgEntry>
    Code lines:
    ...
    "Accepted Payment Tolerance" := VendLedgEntry."Accepted Payment Tolerance";
    "Accepted Pmt. Disc. Tolerance" := VendLedgEntry."Accepted Pmt. Disc. Tolerance";
    "Amount to Apply" := VendLedgEntry."Amount to Apply";
    Prepayment := VendLedgEntry.Prepayment;
    
    OnAfterCopyFromVendLedgerEntry(Rec,VendLedgEntry); <=====================
Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<OnAfterCopyFromCVLedgEntryBuf>
  Raised in: Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<CopyFromCVLedgEntryBuf>
    Code lines:
    ...
    "Currency Code" := CVLedgEntryBuf."Currency Code";
    "Initial Entry Due Date" := CVLedgEntryBuf."Due Date";
    "Initial Entry Global Dim. 1" := CVLedgEntryBuf."Global Dimension 1 Code";
    "Initial Entry Global Dim. 2" := CVLedgEntryBuf."Global Dimension 2 Code";
    "Initial Document Type" := CVLedgEntryBuf."Document Type";
    OnAfterCopyFromCVLedgEntryBuf(Rec,CVLedgEntryBuf); <=====================
Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<OnAfterCopyFromGenJnlLine>
  Raised in: Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<CopyFromGenJnlLine>
    Code lines:
    ...
    "User ID" := USERID;
    "Initial Entry Due Date" := GenJnlLine."Due Date";
    "Initial Entry Global Dim. 1" := GenJnlLine."Shortcut Dimension 1 Code";
    "Initial Entry Global Dim. 2" := GenJnlLine."Shortcut Dimension 2 Code";
    "Initial Document Type" := GenJnlLine."Document Type";
    OnAfterCopyFromGenJnlLine(Rec,GenJnlLine); <=====================
Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<OnBeforeInsertDtldCVLedgEntry>
  Raised in: Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<InitDtldCVLedgEntryBuf>
    Code lines:
    ...
      "Amount (LCY)" := AmountLCY;
      "Additional-Currency Amount" := AmountAddCurr;
      "Applied CV Ledger Entry No." := AppliedEntryNo;
      "Remaining Pmt. Disc. Possible" := RemainingPmtDiscPossible;
      "Max. Payment Tolerance" := MaxPaymentTolerance;
      OnBeforeInsertDtldCVLedgEntry(DtldCVLedgEntryBuf,GenJnlLine); <=====================
      InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,CVLedgEntryBuf,FALSE);
    END;
Table<Purchase Line>.PROCEDURE<OnAfterAssignFieldsForNo>
  Raised in: Table<Purchase Line>.Field<No.>.<OnValidate>
    Code lines:
    ...
        CopyFromFixedAsset;
      Type::"Charge (Item)":
        CopyFromItemCharge;
    END;
    
    OnAfterAssignFieldsForNo(Rec,xRec,PurchHeader); <=====================
    
    IF HasTypeToFillMandatoryFields AND NOT (Type = Type::"Fixed Asset") THEN
      VALIDATE("VAT Prod. Posting Group");
    
    ...
Table<Purchase Line>.PROCEDURE<OnAfterAssignFixedAssetValues>
  Raised in: Table<Purchase Line>.PROCEDURE<CopyFromFixedAsset>
    Code lines:
    ...
    GetFAPostingGroup;
    Description := FixedAsset.Description;
    "Description 2" := FixedAsset."Description 2";
    "Allow Invoice Disc." := FALSE;
    "Allow Item Charge Assignment" := FALSE;
    OnAfterAssignFixedAssetValues(Rec,FixedAsset); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterAssignGLAccountValues>
  Raised in: Table<Purchase Line>.PROCEDURE<CopyFromGLAccount>
    Code lines:
    ...
    "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
    "Tax Group Code" := GLAcc."Tax Group Code";
    "Allow Invoice Disc." := FALSE;
    "Allow Item Charge Assignment" := FALSE;
    InitDeferralCode;
    OnAfterAssignGLAccountValues(Rec,GLAcc); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterAssignHeaderValues>
  Raised in: Table<Purchase Line>.Field<No.>.<OnValidate>
    Code lines:
    ...
    GetPurchHeader;
    InitHeaderDefaults(PurchHeader);
    UpdateLeadTimeFields;
    UpdateDates;
    
    OnAfterAssignHeaderValues(Rec,PurchHeader); <=====================
    
    CASE Type OF
      Type::" ":
        CopyFromStandardText;
    ...
Table<Purchase Line>.PROCEDURE<OnAfterAssignItemChargeValues>
  Raised in: Table<Purchase Line>.PROCEDURE<CopyFromItemCharge>
    Code lines:
    ...
    "Tax Group Code" := ItemCharge."Tax Group Code";
    "Allow Invoice Disc." := FALSE;
    "Allow Item Charge Assignment" := FALSE;
    "Indirect Cost %" := 0;
    "Overhead Rate" := 0;
    OnAfterAssignItemChargeValues(Rec,ItemCharge); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterAssignItemUOM>
  Raised in: Table<Purchase Line>.Field<Unit of Measure Code>.<OnValidate>
    Code lines:
    ...
        "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
        "Gross Weight" := Item."Gross Weight" * "Qty. per Unit of Measure";
        "Net Weight" := Item."Net Weight" * "Qty. per Unit of Measure";
        "Unit Volume" := Item."Unit Volume" * "Qty. per Unit of Measure";
        "Units per Parcel" := ROUND(Item."Units per Parcel" / "Qty. per Unit of Measure",0.00001);
        OnAfterAssignItemUOM(Rec,Item); <=====================
        IF "Qty. per Unit of Measure" > xRec."Qty. per Unit of Measure" THEN
          InitItemAppl;
        UpdateUOMQtyPerStockQty;
      END ELSE
    ...
Table<Purchase Line>.PROCEDURE<OnAfterAssignItemValues>
  Raised in: Table<Purchase Line>.PROCEDURE<CopyFromItem>
    Code lines:
    ...
    IF PurchHeader."Language Code" <> '' THEN
      GetItemTranslation;
    
    "Unit of Measure Code" := Item."Purch. Unit of Measure";
    InitDeferralCode;
    OnAfterAssignItemValues(Rec,Item); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterAssignStdTxtValues>
  Raised in: Table<Purchase Line>.PROCEDURE<CopyFromStandardText>
    Code lines:
    StandardText.GET("No.");
    Description := StandardText.Description;
    "Allow Item Charge Assignment" := FALSE;
    OnAfterAssignStdTxtValues(Rec,StandardText); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterCalcVATAmountLines>
  Raised in: Table<Purchase Line>.PROCEDURE<CalcVATAmountLines>
    Code lines:
    ...
        VATAmountLine."Amount Including VAT" += TotalVATAmount;
        VATAmountLine."Calculated VAT Amount" += TotalVATAmount;
        VATAmountLine.MODIFY;
      END;
    
    OnAfterCalcVATAmountLines(PurchHeader,PurchLine,VATAmountLine,QtyType); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Purchase Line>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[2] := No2;
    TableID[3] := Type3;
    No[3] := No3;
    TableID[4] := Type4;
    No[4] := No4;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    GetPurchHeader;
    ...
Table<Purchase Line>.PROCEDURE<OnAfterCreateTempJobJnlLine>
  Raised in: Table<Purchase Line>.PROCEDURE<CreateTempJobJnlLine>
    Code lines:
    ...
      END;
      TempJobJnlLine.VALIDATE("Unit Price");
    END ELSE
      TempJobJnlLine.VALIDATE("Unit Cost (LCY)","Unit Cost (LCY)");
    
    OnAfterCreateTempJobJnlLine(TempJobJnlLine,Rec,xRec,GetPrices,CurrFieldNo); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterGetLineAmountToHandle>
  Raised in: Table<Purchase Line>.PROCEDURE<GetLineAmountToHandle>
    Code lines:
    ...
    IF QtyToHandle <> Quantity THEN
      LineDiscAmount := ROUND(LineAmount * "Line Discount %" / 100,Currency."Amount Rounding Precision")
    ELSE
      LineDiscAmount := "Line Discount Amount";
    
    OnAfterGetLineAmountToHandle(Rec,QtyToHandle,LineAmount,LineDiscAmount); <=====================
    EXIT(LineAmount - LineDiscAmount);
Table<Purchase Line>.PROCEDURE<OnAfterInitHeaderDefaults>
  Raised in: Table<Purchase Line>.PROCEDURE<InitHeaderDefaults>
    Code lines:
    ...
    "Requested Receipt Date" := PurchHeader."Requested Receipt Date";
    "Promised Receipt Date" := PurchHeader."Promised Receipt Date";
    "Inbound Whse. Handling Time" := PurchHeader."Inbound Whse. Handling Time";
    "Order Date" := PurchHeader."Order Date";
    
    OnAfterInitHeaderDefaults(Rec,PurchHeader); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterInitOutstandingAmount>
  Raised in: Table<Purchase Line>.PROCEDURE<InitOutstandingAmount>
    Code lines:
    ...
          ROUND(
            AmountInclVAT * "Qty. Rcd. Not Invoiced" / Quantity,
            Currency."Amount Rounding Precision"));
    END;
    
    OnAfterInitOutstandingAmount(Rec,xRec,PurchHeader,Currency); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterInitQtyToInvoice>
  Raised in: Table<Purchase Line>.PROCEDURE<InitQtyToInvoice>
    Code lines:
    ...
    "VAT Difference" := 0;
    CalcInvDiscToInvoice;
    IF PurchHeader."Document Type" <> PurchHeader."Document Type"::Invoice THEN
      CalcPrepaymentToDeduct;
    
    OnAfterInitQtyToInvoice(Rec,CurrFieldNo); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterInitQtyToReceive>
  Raised in: Table<Purchase Line>.PROCEDURE<InitQtyToReceive>
    Code lines:
    ...
      "Qty. to Receive (Base)" := "Outstanding Qty. (Base)";
    END ELSE
      IF "Qty. to Receive" <> 0 THEN
        "Qty. to Receive (Base)" := CalcBaseQty("Qty. to Receive");
    
    OnAfterInitQtyToReceive(Rec,CurrFieldNo); <=====================
    
    InitQtyToInvoice;
Table<Purchase Line>.PROCEDURE<OnAfterInitQtyToShip>
  Raised in: Table<Purchase Line>.PROCEDURE<InitQtyToShip>
    Code lines:
    ...
      "Return Qty. to Ship (Base)" := "Outstanding Qty. (Base)";
    END ELSE
      IF "Return Qty. to Ship" <> 0 THEN
        "Return Qty. to Ship (Base)" := CalcBaseQty("Return Qty. to Ship");
    
    OnAfterInitQtyToShip(Rec,CurrFieldNo); <=====================
    
    InitQtyToInvoice;
Table<Purchase Line>.PROCEDURE<OnAfterSetDefaultQuantity>
  Raised in: Table<Purchase Line>.PROCEDURE<SetDefaultQuantity>
    Code lines:
    ...
        "Qty. to Invoice" := 0;
        "Qty. to Invoice (Base)" := 0;
      END;
    END;
    
    OnAfterSetDefaultQuantity(Rec,xRec); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterUpdateAmounts>
  Raised in: Table<Purchase Line>.PROCEDURE<UpdateAmounts>
    Code lines:
    ...
            FIELDERROR("Line Amount",STRSUBSTNO(Text038,xRec."Line Amount"));
          FIELDERROR("Line Amount",STRSUBSTNO(Text039,xRec."Line Amount"));
        END;
    END;
    
    OnAfterUpdateAmounts(Rec,xRec,CurrFieldNo); <=====================
    
    UpdateVATAmounts;
    IF VATBaseAmount <> "VAT Base Amount" THEN
      LineAmountChanged := TRUE;
    ...
Table<Purchase Line>.PROCEDURE<OnAfterUpdateAmountsDone>
  Raised in: Table<Purchase Line>.PROCEDURE<UpdateAmounts>
    Code lines:
    ...
    IF Type = Type::"Charge (Item)" THEN
      UpdateItemChargeAssgnt;
    
    CalcPrepaymentToDeduct;
    
    OnAfterUpdateAmountsDone(Rec,xRec,CurrFieldNo); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterUpdateDirectUnitCost>
  Raised in: Table<Purchase Line>.PROCEDURE<UpdateDirectUnitCost>
    Code lines:
    ...
    
      IF CalledByFieldNo IN [FIELDNO("No."),FIELDNO("Variant Code"),FIELDNO("Location Code")] THEN
        UpdateItemReference;
    END;
    
    OnAfterUpdateDirectUnitCost(Rec,xRec,CalledByFieldNo,CurrFieldNo); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterUpdateJobPrices>
  Raised in: Table<Purchase Line>.PROCEDURE<UpdateJobPrices>
    Code lines:
    ...
      "Job Line Amount" := PurchRcptLine."Job Line Amount";
      "Job Line Discount %" := PurchRcptLine."Job Line Discount %";
      "Job Line Discount Amount" := PurchRcptLine."Job Line Discount Amount";
    END;
    
    OnAfterUpdateJobPrices(Rec,TempJobJnlLine,PurchRcptLine); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterUpdateTotalAmounts>
  Raised in: Table<Purchase Line>.PROCEDURE<UpdateVATAmounts>
    Code lines:
    ...
          TotalLineAmount := PurchLine2."Line Amount";
          TotalInvDiscAmount := PurchLine2."Inv. Discount Amount";
          TotalAmount := PurchLine2.Amount;
          TotalAmountInclVAT := PurchLine2."Amount Including VAT";
          TotalQuantityBase := PurchLine2."Quantity (Base)";
          OnAfterUpdateTotalAmounts(Rec,PurchLine2,TotalAmount,TotalAmountInclVAT,TotalLineAmount,TotalInvDiscAmount); <=====================
        END;
    
      IF PurchHeader."Prices Including VAT" THEN
        CASE "VAT Calculation Type" OF
    ...
Table<Purchase Line>.PROCEDURE<OnAfterUpdateUnitCost>
  Raised in: Table<Purchase Line>.PROCEDURE<UpdateUnitCost>
    Code lines:
    ...
    "Unit Cost (LCY)" := ROUND("Unit Cost (LCY)",GLSetup."Unit-Amount Rounding Precision");
    IF PurchHeader."Currency Code" <> '' THEN
      Currency.TESTFIELD("Unit-Amount Rounding Precision");
    "Unit Cost" := ROUND("Unit Cost",Currency."Unit-Amount Rounding Precision");
    
    OnAfterUpdateUnitCost(Rec,xRec,PurchHeader,Item,SKU,Currency,GLSetup); <=====================
    
    UpdateSalesCost;
    
    IF JobTaskIsSet AND NOT UpdateFromVAT AND NOT "Prepayment Line" THEN BEGIN
    ...
Table<Purchase Line>.PROCEDURE<OnAfterUpdateVATOnLines>
  Raised in: Table<Purchase Line>.PROCEDURE<UpdateVATOnLines>
    Code lines:
    ...
            END;
          END;
        UNTIL NEXT = 0;
    END;
    
    OnAfterUpdateVATOnLines(PurchHeader,PurchLine,VATAmountLine,QtyType); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterUpdateWithWarehouseReceive>
  Raised in: Table<Purchase Line>.PROCEDURE<UpdateWithWarehouseReceive>
    Code lines:
    ...
          ELSE
            VALIDATE("Return Qty. to Ship","Outstanding Quantity");
      END;
    
    GetPurchHeader;
    OnAfterUpdateWithWarehouseReceive(PurchHeader,Rec); <=====================
    
    SetDefaultQuantity;
Table<Purchase Line>.PROCEDURE<OnBeforeJobTaskIsSet>
  Raised in: Table<Purchase Line>.PROCEDURE<JobTaskIsSet>
    Code lines:
    JobTaskSet := FALSE;
    OnBeforeJobTaskIsSet(Rec,JobTaskSet); <=====================
    
    EXIT(
      (("Job No." <> '') AND ("Job Task No." <> '') AND (Type IN [Type::"G/L Account",Type::Item])) OR
      JobTaskSet);
Table<Purchase Line>.PROCEDURE<OnBeforeUpdateDirectUnitCost>
  Raised in: Table<Purchase Line>.PROCEDURE<UpdateDirectUnitCost>
    Code lines:
    OnBeforeUpdateDirectUnitCost(Rec,xRec,CalledByFieldNo,CurrFieldNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    IF (CurrFieldNo <> 0) AND ("Prod. Order No." <> '') THEN
      UpdateAmounts;
    
    IF ((CalledByFieldNo <> CurrFieldNo) AND (CurrFieldNo <> 0)) OR
       ("Prod. Order No." <> '')
    THEN
    ...
Table<Purchase Line>.PROCEDURE<OnBeforeVerifyReservedQty>
  Raised in: Table<Purchase Line>.<OnInsert>
    Code lines:
    TestStatusOpen;
    IF Quantity <> 0 THEN BEGIN
      OnBeforeVerifyReservedQty(Rec,xRec,0); <=====================
      ReservePurchLine.VerifyQuantity(Rec,xRec);
    END;
    LOCKTABLE;
    PurchHeader."No." := '';
    IF ("Deferral Code" <> '') AND (GetDeferralAmount <> 0) THEN
      UpdateDeferralAmounts;
  Raised in: Table<Purchase Line>.Field<Quantity>.<OnValidate>
    Code lines:
    ...
    IF Type = Type::"Charge (Item)" THEN
      "Line Discount %" := 0;
    
    UpdateWithWarehouseReceive;
    IF (xRec.Quantity <> Quantity) OR (xRec."Quantity (Base)" <> "Quantity (Base)") THEN BEGIN
      OnBeforeVerifyReservedQty(Rec,xRec,FIELDNO(Quantity)); <=====================
      ReservePurchLine.VerifyQuantity(Rec,xRec);
      WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
      CheckApplToItemLedgEntry;
    END;
    ...
Table<Purchase Line>.PROCEDURE<OnValidateNoOnCopyFromTempPurchLine>
  Raised in: Table<Purchase Line>.Field<No.>.<OnValidate>
    Code lines:
    ...
    INIT;
    IF xRec."Line Amount" <> 0 THEN
      "Recalculate Invoice Disc." := TRUE;
    Type := TempPurchLine.Type;
    "No." := TempPurchLine."No.";
    OnValidateNoOnCopyFromTempPurchLine(Rec,TempPurchLine); <=====================
    IF "No." = '' THEN
      EXIT;
    
    IF HasTypeToFillMandatoryFields THEN BEGIN
    ...
Table<Purchase Line>.PROCEDURE<OnValidateTypeOnCopyFromTempPurchLine>
  Raised in: Table<Purchase Line>.Field<Type>.<OnValidate>
    Code lines:
    ...
    IF xRec."Line Amount" <> 0 THEN
      "Recalculate Invoice Disc." := TRUE;
    
    Type := TempPurchLine.Type;
    "System-Created Entry" := TempPurchLine."System-Created Entry";
    OnValidateTypeOnCopyFromTempPurchLine(Rec,TempPurchLine); <=====================
    VALIDATE("FA Posting Type");
    
    IF Type = Type::Item THEN
      "Allow Item Charge Assignment" := TRUE
    ...
Table<Currency>.PROCEDURE<OnBeforeGetGainLossAccount>
  Raised in: Table<Currency>.PROCEDURE<GetGainLossAccount>
    Code lines:
    OnBeforeGetGainLossAccount(Rec,DtldCVLedgEntryBuf); <=====================
    
    CASE DtldCVLedgEntryBuf."Entry Type" OF
      DtldCVLedgEntryBuf."Entry Type"::"Unrealized Loss":
        EXIT(GetUnrealizedLossesAccount);
      DtldCVLedgEntryBuf."Entry Type"::"Unrealized Gain":
        EXIT(GetUnrealizedGainsAccount);
      DtldCVLedgEntryBuf."Entry Type"::"Realized Loss":
        EXIT(GetRealizedLossesAccount);
      DtldCVLedgEntryBuf."Entry Type"::"Realized Gain":
    ...
Table<Approval Entry>.PROCEDURE<OnAfterGetRecordDetails>
  Raised in: Table<Approval Entry>.PROCEDURE<RecordDetails>
    Code lines:
    ...
        END;
      ELSE
        Details := FORMAT("Record ID to Approve",0,1) + ChangeRecordDetails;
    END;
    
    OnAfterGetRecordDetails(RecRef,ChangeRecordDetails,Details); <=====================
Table<Workflow Webhook Subscription>.PROCEDURE<OnFindTaskSchedulerAllowed>
  Raised in: Table<Workflow Webhook Subscription>.<OnDelete>
    Code lines:
    ...
      WorkflowWebhookSubBuffer."WF Definition Id" := "WF Definition Id";
      WorkflowWebhookSubBuffer."Client Id" := "Client Id";
      WorkflowWebhookSubBuffer.INSERT;
    
      IsTaskSchedulerAllowed := TRUE;
      OnFindTaskSchedulerAllowed(IsTaskSchedulerAllowed); <=====================
    
      IF IsTaskSchedulerAllowed THEN
        TASKSCHEDULER.CREATETASK(CODEUNIT::"Workflow Webhook Sub Delete",0,TRUE,
          COMPANYNAME,0DT,Workflow.RECORDID)
    ...
Table<Job Queue Entry>.PROCEDURE<OnAfterReschedule>
  Raised in: Table<Job Queue Entry>.PROCEDURE<Reschedule>
    Code lines:
    ...
    IF Status IN [Status::Ready,Status::"On Hold with Inactivity Timeout"] THEN BEGIN
      SetDefaultValues(FALSE);
      EnqueueTask;
    END;
    
    OnAfterReschedule(Rec); <=====================
Table<Job Queue Entry>.PROCEDURE<OnBeforeClearServiceValues>
  Raised in: Table<Job Queue Entry>.PROCEDURE<ClearServiceValues>
    Code lines:
    OnBeforeClearServiceValues(Rec); <=====================
    
    "User Session Started" := 0DT;
    "User Service Instance ID" := 0;
    "User Session ID" := 0;
Table<Job Queue Entry>.PROCEDURE<OnBeforeInsertLogEntry>
  Raised in: Table<Job Queue Entry>.PROCEDURE<InsertLogEntry>
    Code lines:
    ...
    JobQueueLogEntry."Object ID to Run" := "Object ID to Run";
    JobQueueLogEntry.Description := Description;
    JobQueueLogEntry.Status := JobQueueLogEntry.Status::"In Process";
    JobQueueLogEntry."Processed by User ID" := USERID;
    JobQueueLogEntry."Job Queue Category Code" := "Job Queue Category Code";
    OnBeforeInsertLogEntry(JobQueueLogEntry,Rec); <=====================
    JobQueueLogEntry.INSERT(TRUE);
    LastJobQueueLogEntryNo := JobQueueLogEntry."Entry No.";
Table<Job Queue Entry>.PROCEDURE<OnBeforeModifyLogEntry>
  Raised in: Table<Job Queue Entry>.PROCEDURE<FinalizeLogEntry>
    Code lines:
    ...
      JobQueueLogEntry.SetErrorMessage(GetErrorMessage);
      JobQueueLogEntry.SetErrorCallStack(GETLASTERRORCALLSTACK);
    END ELSE
      JobQueueLogEntry.Status := JobQueueLogEntry.Status::Success;
    JobQueueLogEntry."End Date/Time" := CURRENTDATETIME;
    OnBeforeModifyLogEntry(JobQueueLogEntry,Rec); <=====================
    JobQueueLogEntry.MODIFY(TRUE);
Table<Job Queue Entry>.PROCEDURE<OnBeforeScheduleTask>
  Raised in: Table<Job Queue Entry>.PROCEDURE<ScheduleTask>
    Code lines:
    OnBeforeScheduleTask(Rec,TaskGUID); <=====================
    IF NOT ISNULLGUID(TaskGUID) THEN
      EXIT(TaskGUID);
    
    EXIT(
      TASKSCHEDULER.CREATETASK(
        CODEUNIT::"Job Queue Dispatcher",
        CODEUNIT::"Job Queue Error Handler",
        TRUE,COMPANYNAME,"Earliest Start Date/Time",RECORDID));
Table<Job Queue Entry>.PROCEDURE<OnBeforeSetStatusValue>
  Raised in: Table<Job Queue Entry>.PROCEDURE<SetStatusValue>
    Code lines:
    OnBeforeSetStatusValue(Rec,xRec,NewStatus); <=====================
    
    IF NewStatus = Status THEN
      EXIT;
    CASE NewStatus OF
      Status::Ready:
        BEGIN
          SetDefaultValues(FALSE);
          "Earliest Start Date/Time" := JobQueueDispatcher.CalcInitialRunTime(Rec,CURRENTDATETIME);
          EnqueueTask;
    ...
Table<Job Queue Entry>.PROCEDURE<OnFindingIfJobNeedsToBeRun>
  Raised in: Table<Job Queue Entry>.PROCEDURE<DoesJobNeedToBeRun>
    Code lines:
    OnFindingIfJobNeedsToBeRun(Result); <=====================
Table<Job Queue Log Entry>.PROCEDURE<OnBeforeMarkAsError>
  Raised in: Table<Job Queue Log Entry>.PROCEDURE<MarkAsError>
    Code lines:
    IF Status <> Status::"In Process" THEN
      ERROR(Text004);
    
    ErrorMessage := STRSUBSTNO(Text003,USERID);
    OnBeforeMarkAsError(Rec,JobQueueEntry,ErrorMessage); <=====================
    
    IF JobQueueEntry.GET(ID) THEN
      JobQueueEntry.SetError(ErrorMessage);
    
    Status := Status::Error;
    ...
Table<Change Global Dim. Log Entry>.PROCEDURE<OnFindingScheduledTask>
  Raised in: Table<Change Global Dim. Log Entry>.PROCEDURE<IsTaskScheduled>
    Code lines:
    OnFindingScheduledTask("Task ID",TaskExists); <=====================
    IF NOT TaskExists THEN
      EXIT(ScheduledTask.GET("Task ID"));
Table<Invoice Post. Buffer>.PROCEDURE<OnAfterInvPostBufferModify>
  Raised in: Table<Invoice Post. Buffer>.PROCEDURE<Update>
    Code lines:
    ...
      IF NOT InvoicePostBuffer."System-Created Entry" THEN
        "System-Created Entry" := FALSE;
      AdjustRoundingForUpdate;
      OnBeforeInvPostBufferModify(Rec,InvoicePostBuffer);
      MODIFY;
      OnAfterInvPostBufferModify(Rec,InvoicePostBuffer); <=====================
      InvDefLineNo := "Deferral Line No.";
    END ELSE BEGIN
      IF "Deferral Code" <> '' THEN BEGIN
        DeferralLineNo := DeferralLineNo + 1;
    ...
Table<Invoice Post. Buffer>.PROCEDURE<OnAfterInvPostBufferPreparePurchase>
  Raised in: Table<Invoice Post. Buffer>.PROCEDURE<PreparePurchase>
    Code lines:
    ...
      "VAT Base Amount (ACY)" := 0;
      "VAT Amount" := 0;
      "VAT Amount (ACY)" := 0;
    END;
    
    OnAfterInvPostBufferPreparePurchase(PurchLine,Rec); <=====================
Table<Invoice Post. Buffer>.PROCEDURE<OnAfterInvPostBufferPrepareSales>
  Raised in: Table<Invoice Post. Buffer>.PROCEDURE<PrepareSales>
    Code lines:
    ...
      "VAT Base Amount (ACY)" := 0;
      "VAT Amount" := 0;
      "VAT Amount (ACY)" := 0;
    END;
    
    OnAfterInvPostBufferPrepareSales(SalesLine,Rec); <=====================
Table<Invoice Post. Buffer>.PROCEDURE<OnAfterInvPostBufferPrepareService>
  Raised in: Table<Invoice Post. Buffer>.PROCEDURE<PrepareService>
    Code lines:
    ...
      "Tax Liable" := ServiceLine."Tax Liable";
      "Use Tax" := FALSE;
      Quantity := ServiceLine."Qty. to Invoice (Base)";
    END;
    
    OnAfterInvPostBufferPrepareService(ServiceLine,Rec); <=====================
Table<Invoice Post. Buffer>.PROCEDURE<OnAfterInvPostBufferUpdate>
  Raised in: Table<Invoice Post. Buffer>.PROCEDURE<Update>
    Code lines:
    ...
        InvDefLineNo := "Deferral Line No.";
      END;
      INSERT;
    END;
    
    OnAfterInvPostBufferUpdate(Rec,InvoicePostBuffer); <=====================
Table<Invoice Post. Buffer>.PROCEDURE<OnBeforeInvPostBufferModify>
  Raised in: Table<Invoice Post. Buffer>.PROCEDURE<Update>
    Code lines:
    ...
      Quantity += InvoicePostBuffer.Quantity;
      "VAT Base Before Pmt. Disc." += InvoicePostBuffer."VAT Base Before Pmt. Disc.";
      IF NOT InvoicePostBuffer."System-Created Entry" THEN
        "System-Created Entry" := FALSE;
      AdjustRoundingForUpdate;
      OnBeforeInvPostBufferModify(Rec,InvoicePostBuffer); <=====================
      MODIFY;
      OnAfterInvPostBufferModify(Rec,InvoicePostBuffer);
      InvDefLineNo := "Deferral Line No.";
    END ELSE BEGIN
    ...
Table<Invoice Post. Buffer>.PROCEDURE<OnBeforeInvPostBufferUpdate>
  Raised in: Table<Invoice Post. Buffer>.PROCEDURE<Update>
    Code lines:
    OnBeforeInvPostBufferUpdate(Rec,InvoicePostBuffer); <=====================
    
    Rec := InvoicePostBuffer;
    IF FIND THEN BEGIN
      Amount += InvoicePostBuffer.Amount;
      "VAT Amount" += InvoicePostBuffer."VAT Amount";
      "VAT Base Amount" += InvoicePostBuffer."VAT Base Amount";
      "Amount (ACY)" += InvoicePostBuffer."Amount (ACY)";
      "VAT Amount (ACY)" += InvoicePostBuffer."VAT Amount (ACY)";
      "VAT Difference" += InvoicePostBuffer."VAT Difference";
    ...
Table<Contact>.PROCEDURE<OnAfterGetSalutation>
  Raised in: Table<Contact>.PROCEDURE<GetSalutation>
    Code lines:
    ...
        NamePart[5] := Initials;
      SalutationFormula."Name 5"::"Company Name":
        NamePart[5] := "Company Name";
    END;
    
    OnAfterGetSalutation(SalutationType,LanguageCode,NamePart); <=====================
    
    FOR i := 1 TO 5 DO
      IF NamePart[i] = '' THEN BEGIN
        SubStr := '%' + FORMAT(i) + ' ';
    ...
Table<Contact>.PROCEDURE<OnAfterUpdateQuotesForContact>
  Raised in: Table<Contact>.PROCEDURE<UpdateQuotes>
    Code lines:
    ...
            SalesHeader2.MODIFY;
            SalesLine.SETRANGE("Document Type",SalesHeader2."Document Type");
            SalesLine.SETRANGE("Document No.",SalesHeader2."No.");
            SalesLine.MODIFYALL("Bill-to Customer No.",SalesHeader2."Bill-to Customer No.");
          UNTIL SalesHeader.NEXT = 0;
        OnAfterUpdateQuotesForContact(Cont,Customer); <=====================
      UNTIL Cont.NEXT = 0;
Table<Contact>.PROCEDURE<OnBeforeCustomerInsert>
  Raised in: Table<Contact>.PROCEDURE<CreateCustomer>
    Code lines:
    ...
      IF CustTemplate.GET(CustomerTemplate) THEN;
    
    CLEAR(Cust);
    Cust.SetInsertFromContact(TRUE);
    Cust."Contact Type" := Type;
    OnBeforeCustomerInsert(Cust,CustomerTemplate); <=====================
    Cust.INSERT(TRUE);
    Cust.SetInsertFromContact(FALSE);
    
    ContBusRel."Contact No." := "No.";
    ...
Table<Contact>.PROCEDURE<OnBeforeIsUpdateNeeded>
  Raised in: Table<Contact>.PROCEDURE<IsUpdateNeeded>
    Code lines:
    ...
      (County <> xRec.County) OR
      ("E-Mail" <> xRec."E-Mail") OR
      ("Home Page" <> xRec."Home Page") OR
      (Type <> xRec.Type);
    
    OnBeforeIsUpdateNeeded(Rec,xRec,UpdateNeeded); <=====================
    EXIT(UpdateNeeded);
Table<Contact>.PROCEDURE<OnBeforeVendorInsert>
  Raised in: Table<Contact>.PROCEDURE<CreateVendor>
    Code lines:
    ...
    RMSetup.GET;
    RMSetup.TESTFIELD("Bus. Rel. Code for Vendors");
    
    CLEAR(Vend);
    Vend.SetInsertFromContact(TRUE);
    OnBeforeVendorInsert(Vend); <=====================
    Vend.INSERT(TRUE);
    Vend.SetInsertFromContact(FALSE);
    
    IF Type = Type::Company THEN
    ...
Table<Contact>.PROCEDURE<OnCreateCustomerOnTransferFieldsFromTemplate>
  Raised in: Table<Contact>.PROCEDURE<CreateCustomer>
    Code lines:
    ...
      Cust."Payment Terms Code" := CustTemplate."Payment Terms Code";
      Cust."Payment Method Code" := CustTemplate."Payment Method Code";
      Cust."Prices Including VAT" := CustTemplate."Prices Including VAT";
      Cust."Shipment Method Code" := CustTemplate."Shipment Method Code";
      Cust.UpdateReferencedIds;
      OnCreateCustomerOnTransferFieldsFromTemplate(Cust,CustTemplate); <=====================
      Cust.MODIFY;
    
      DefaultDim.SETRANGE("Table ID",DATABASE::"Customer Template");
      DefaultDim.SETRANGE("No.",CustTemplate.Code);
    ...
Table<Interaction Log Entry>.PROCEDURE<OnAfterCopyFromSegment>
  Raised in: Table<Interaction Log Entry>.PROCEDURE<CopyFromSegment>
    Code lines:
    ...
    "Version No." := SegLine."Version No.";
    "Send Word Docs. as Attmt." := SegLine."Send Word Doc. As Attmt.";
    "Contact Via" := SegLine."Contact Via";
    "Opportunity No." := SegLine."Opportunity No.";
    
    OnAfterCopyFromSegment(Rec,SegLine); <=====================
Table<Segment Line>.PROCEDURE<OnAfterCopyFromInteractionLogEntry>
  Raised in: Table<Segment Line>.PROCEDURE<CopyFromInteractLogEntry>
    Code lines:
    ...
    "Version No." := InteractLogEntry."Version No.";
    "Send Word Doc. As Attmt." := InteractLogEntry."Send Word Docs. as Attmt.";
    "Contact Via" := InteractLogEntry."Contact Via";
    "Opportunity No." := InteractLogEntry."Opportunity No.";
    
    OnAfterCopyFromInteractionLogEntry(Rec,InteractLogEntry); <=====================
Table<Segment Line>.PROCEDURE<OnAfterCreateFromTask>
  Raised in: Table<Segment Line>.PROCEDURE<CreateFromTask>
    Code lines:
    ...
    VALIDATE("Contact No.",Task."Contact No.");
    "Salesperson Code" := Task."Salesperson Code";
    "Campaign No." := Task."Campaign No.";
    "Opportunity No." := Task."Opportunity No.";
    
    OnAfterCreateFromTask(Rec,Task); <=====================
Table<Segment Line>.PROCEDURE<OnAfterFinishWizard>
  Raised in: Table<Segment Line>.PROCEDURE<FinishWizard>
    Code lines:
    ...
          IF Mail.GetErrorDesc <> '' THEN
            ERROR(Text025,Mail.GetErrorDesc,PRODUCTNAME.FULL);
      END;
    END;
    
    OnAfterFinishWizard(Rec,InteractionLogEntry,IsFinish,Flag); <=====================
Table<To-do>.PROCEDURE<OnAfterSetFilterFromTask>
  Raised in: Table<To-do>.PROCEDURE<SetFilterFromTask>
    Code lines:
    ...
      "Campaign No." := SegHeader."Campaign No.";
      "Salesperson Code" := SegHeader."Salesperson Code";
      SETRANGE("Segment No.","Segment No.");
    END;
    
    OnAfterSetFilterFromTask(Task); <=====================
Table<To-do>.PROCEDURE<OnCreateTaskFromInteractLogEntryOnBeforeStartWizard>
  Raised in: Table<To-do>.PROCEDURE<CreateTaskFromInteractLogEntry>
    Code lines:
    INIT;
    VALIDATE("Contact No.",InteractionLogEntry."Contact No.");
    "Salesperson Code" := InteractionLogEntry."Salesperson Code";
    "Campaign No." := InteractionLogEntry."Campaign No.";
    
    OnCreateTaskFromInteractLogEntryOnBeforeStartWizard(Rec,InteractionLogEntry); <=====================
    StartWizard;
Table<To-do>.PROCEDURE<OnCreateTaskFromSalesHeaderoOnBeforeStartWizard>
  Raised in: Table<To-do>.PROCEDURE<CreateTaskFromSalesHeader>
    Code lines:
    ...
    IF SalesHeader."Campaign No." <> '' THEN BEGIN
      "Campaign No." := SalesHeader."Campaign No.";
      SETRANGE("Campaign No.","Campaign No.");
    END;
    
    OnCreateTaskFromSalesHeaderoOnBeforeStartWizard(Rec,SalesHeader); <=====================
    StartWizard;
Table<To-do>.PROCEDURE<OnCreateTaskFromTaskOnBeforeStartWizard>
  Raised in: Table<To-do>.PROCEDURE<CreateTaskFromTask>
    Code lines:
    DELETEALL;
    INIT;
    SetFilterFromTask(Task);
    
    OnCreateTaskFromTaskOnBeforeStartWizard(Rec,Task); <=====================
    StartWizard;
Table<Employee>.PROCEDURE<OnBeforeGetFullName>
  Raised in: Table<Employee>.PROCEDURE<FullName>
    Code lines:
    OnBeforeGetFullName(Rec,NewFullName,Handled); <=====================
    IF Handled THEN
      EXIT(NewFullName);
    
    IF "Middle Name" = '' THEN
      EXIT("First Name" + ' ' + "Last Name");
    
    EXIT("First Name" + ' ' + "Middle Name" + ' ' + "Last Name");
Table<Employee Ledger Entry>.PROCEDURE<OnAfterCopyEmplLedgerEntryFromCVLedgEntryBuffer>
  Raised in: Table<Employee Ledger Entry>.PROCEDURE<CopyFromCVLedgEntryBuffer>
    Code lines:
    ...
    "Debit Amount (LCY)" := CVLedgerEntryBuffer."Debit Amount (LCY)";
    "Credit Amount (LCY)" := CVLedgerEntryBuffer."Credit Amount (LCY)";
    "No. Series" := CVLedgerEntryBuffer."No. Series";
    "Amount to Apply" := CVLedgerEntryBuffer."Amount to Apply";
    
    OnAfterCopyEmplLedgerEntryFromCVLedgEntryBuffer(Rec,CVLedgerEntryBuffer); <=====================
Table<Employee Ledger Entry>.PROCEDURE<OnAfterCopyEmployeeLedgerEntryFromGenJnlLine>
  Raised in: Table<Employee Ledger Entry>.PROCEDURE<CopyFromGenJnlLine>
    Code lines:
    ...
    "User ID" := USERID;
    "Bal. Account Type" := GenJnlLine."Bal. Account Type";
    "Bal. Account No." := GenJnlLine."Bal. Account No.";
    "No. Series" := GenJnlLine."Posting No. Series";
    
    OnAfterCopyEmployeeLedgerEntryFromGenJnlLine(Rec,GenJnlLine); <=====================
Table<CRM Connection Setup>.PROCEDURE<OnGetDefaultCRMConnection>
  Raised in: Table<CRM Connection Setup>.PROCEDURE<GetDefaultCRMConnection>
    Code lines:
    OnGetDefaultCRMConnection(ConnectionName); <=====================
    EXIT(ConnectionName);
Table<CRM Connection Setup>.PROCEDURE<OnReadingCRMData>
  Raised in: Table<CRM Connection Setup>.PROCEDURE<DoReadCRMData>
    Code lines:
    OnReadingCRMData(SkipReading); <=====================
    EXIT(NOT SkipReading);
Table<Integration Synch. Job>.PROCEDURE<OnCanBeRemoved>
  Raised in: Table<Integration Synch. Job>.PROCEDURE<CanBeRemoved>
    Code lines:
    OnCanBeRemoved(Rec,AllowRemoval); <=====================
Table<Production Order>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Production Order>.PROCEDURE<CreateDim>
    Code lines:
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,'',"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
Table<Production Order>.PROCEDURE<OnBeforeAssignItemNo>
  Raised in: Table<Production Order>.Field<Source No.>.<OnValidate>
    Code lines:
    ...
          "Routing No." := Item."Routing No.";
          "Inventory Posting Group" := Item."Inventory Posting Group";
          "Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";
          "Unit Cost" := Item."Unit Cost";
          CreateDim(DATABASE::Item,"Source No.");
          OnBeforeAssignItemNo(Rec,xRec,Item,CurrFieldNo); <=====================
        END;
      "Source Type"::Family:
        BEGIN
          Family.GET("Source No.");
    ...
Table<Production Order>.PROCEDURE<OnBeforeMultiLevelMessage>
  Raised in: Table<Production Order>.PROCEDURE<MultiLevelMessage>
    Code lines:
    IsHandled := FALSE;
    OnBeforeMultiLevelMessage(IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    MESSAGE(MultiLevelMsg);
Table<Prod. Order Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Prod. Order Line>.PROCEDURE<CreateDim>
    Code lines:
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,'',
        "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",ProdOrder."Dimension Set ID",DATABASE::Item);
Table<Prod. Order Component>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Prod. Order Component>.PROCEDURE<CreateDim>
    Code lines:
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    ProdOrderLine.GET(Status,"Prod. Order No.","Prod. Order Line No.");
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,'',
Table<Prod. Order Component>.PROCEDURE<OnAfterProdOrderNeeds>
  Raised in: Table<Prod. Order Component>.PROCEDURE<ProdOrderNeeds>
    Code lines:
    ...
        ProdOrderRtngLine."Fixed Scrap Qty. (Accum.)"
    ELSE
      NeededQty :=
        ProdOrderLine.Quantity * (1 + ProdOrderLine."Scrap %" / 100) * (1 + "Scrap %" / 100);
    
    OnAfterProdOrderNeeds(Rec,ProdOrderLine,ProdOrderRtngLine,NeededQty); <=====================
    
    EXIT(NeededQty);
Table<Prod. Order Component>.PROCEDURE<OnAfterUpdateUnitCost>
  Raised in: Table<Prod. Order Component>.PROCEDURE<UpdateUnitCost>
    Code lines:
    ...
    "Direct Unit Cost" :=
      ROUND(
        ("Unit Cost" - "Overhead Rate") / (1 + "Indirect Cost %" / 100),
        GLSetup."Unit-Amount Rounding Precision");
    
    OnAfterUpdateUnitCost(Rec,GLSetup); <=====================
Table<Prod. Order Routing Line>.PROCEDURE<OnAfterMachineCtrTransferFields>
  Raised in: Table<Prod. Order Routing Line>.PROCEDURE<MachineCtrTransferFields>
    Code lines:
    ...
    "Unit Cost per" := MachineCenter."Unit Cost";
    "Direct Unit Cost" := MachineCenter."Direct Unit Cost";
    "Indirect Cost %" := MachineCenter."Indirect Cost %";
    "Overhead Rate" := MachineCenter."Overhead Rate";
    FillDefaultLocationAndBins;
    OnAfterMachineCtrTransferFields(Rec,WorkCenter,MachineCenter); <=====================
Table<Prod. Order Routing Line>.PROCEDURE<OnAfterTransferFromStdTaskComment>
  Raised in: Table<Prod. Order Routing Line>.Field<Standard Task Code>.<OnValidate>
    Code lines:
    ...
        ProdOrderRtngComment."Routing No." := "Routing No.";
        ProdOrderRtngComment."Operation No." := "Operation No.";
        ProdOrderRtngComment."Line No." := StdTaskComment."Line No.";
        ProdOrderRtngComment.Comment := StdTaskComment.Text;
        ProdOrderRtngComment.INSERT;
        OnAfterTransferFromStdTaskComment(ProdOrderRtngComment,StdTaskComment); <=====================
      UNTIL StdTaskComment.NEXT = 0;
Table<Prod. Order Routing Line>.PROCEDURE<OnAfterTransferFromStdTaskPersonnel>
  Raised in: Table<Prod. Order Routing Line>.Field<Standard Task Code>.<OnValidate>
    Code lines:
    ...
        ProdOrderRtngPersonnel."Operation No." := "Operation No.";
        ProdOrderRtngPersonnel."Line No." := StdTaskPersonnel."Line No.";
        ProdOrderRtngPersonnel."No." := StdTaskPersonnel."No.";
        ProdOrderRtngPersonnel.Description := StdTaskPersonnel.Description;
        ProdOrderRtngPersonnel.INSERT;
        OnAfterTransferFromStdTaskPersonnel(ProdOrderRtngPersonnel,StdTaskPersonnel); <=====================
      UNTIL StdTaskPersonnel.NEXT = 0;
    
    StdTaskQltyMeasure.SETRANGE("Standard Task Code","Standard Task Code");
    IF StdTaskQltyMeasure.FIND('-') THEN
    ...
Table<Prod. Order Routing Line>.PROCEDURE<OnAfterTransferFromStdTaskQltyMeasure>
  Raised in: Table<Prod. Order Routing Line>.Field<Standard Task Code>.<OnValidate>
    Code lines:
    ...
        ProdOrderRtngQltyMeas.Description := StdTaskQltyMeasure.Description;
        ProdOrderRtngQltyMeas."Min. Value" := StdTaskQltyMeasure."Min. Value";
        ProdOrderRtngQltyMeas."Max. Value" := StdTaskQltyMeasure."Max. Value";
        ProdOrderRtngQltyMeas."Mean Tolerance" := StdTaskQltyMeasure."Mean Tolerance";
        ProdOrderRtngQltyMeas.INSERT;
        OnAfterTransferFromStdTaskQltyMeasure(ProdOrderRtngQltyMeas,StdTaskQltyMeasure); <=====================
      UNTIL StdTaskQltyMeasure.NEXT = 0;
    
    StdTaskComment.SETRANGE("Standard Task Code","Standard Task Code");
    IF StdTaskComment.FIND('-') THEN
    ...
Table<Prod. Order Routing Line>.PROCEDURE<OnAfterTransferFromStdTaskTool>
  Raised in: Table<Prod. Order Routing Line>.Field<Standard Task Code>.<OnValidate>
    Code lines:
    ...
        ProdOrderRoutTool."Operation No." := "Operation No.";
        ProdOrderRoutTool."Line No." := StdTaskTool."Line No.";
        ProdOrderRoutTool."No." := StdTaskTool."No.";
        ProdOrderRoutTool.Description := StdTaskTool.Description;
        ProdOrderRoutTool.INSERT;
        OnAfterTransferFromStdTaskTool(ProdOrderRoutTool,StdTaskTool); <=====================
      UNTIL StdTaskTool.NEXT = 0;
    
    StdTaskPersonnel.SETRANGE("Standard Task Code","Standard Task Code");
    IF StdTaskPersonnel.FIND('-') THEN
    ...
Table<Prod. Order Routing Line>.PROCEDURE<OnAfterWorkCenterTransferFields>
  Raised in: Table<Prod. Order Routing Line>.PROCEDURE<WorkCenterTransferFields>
    Code lines:
    ...
    "Direct Unit Cost" := WorkCenter."Direct Unit Cost";
    "Indirect Cost %" := WorkCenter."Indirect Cost %";
    "Overhead Rate" := WorkCenter."Overhead Rate";
    "Unit Cost Calculation" := WorkCenter."Unit Cost Calculation";
    FillDefaultLocationAndBins;
    OnAfterWorkCenterTransferFields(Rec,WorkCenter); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromAsmOrder>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromAsmOrder>
    Code lines:
    ...
    AssemblyHeader.CALCFIELDS("Reserved Qty. (Base)");
    "Remaining Quantity (Base)" := AssemblyHeader."Remaining Quantity (Base)";
    "Reserved Quantity (Base)" := AssemblyHeader."Reserved Qty. (Base)";
    Positive := NOT ("Remaining Quantity (Base)" < 0);
    
    OnAfterTransferFromAsmOrder(Rec,AssemblyHeader); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromAsmOrderLine>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromAsmOrderLine>
    Code lines:
    ...
    AssemblyLine.CALCFIELDS("Reserved Qty. (Base)");
    "Remaining Quantity (Base)" := -AssemblyLine."Remaining Quantity (Base)";
    "Reserved Quantity (Base)" := -AssemblyLine."Reserved Qty. (Base)";
    Positive := NOT ("Remaining Quantity (Base)" < 0);
    
    OnAfterTransferFromAsmOrderLine(Rec,AssemblyLine); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromForecast>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromForecast>
    Code lines:
    ...
    "Remaining Quantity (Base)" := -UnconsumedQtyBase;
    "Reserved Quantity (Base)" := 0;
    "Orig. Quantity (Base)" := -ProdForecastEntry."Forecast Quantity (Base)";
    Positive := NOT ("Remaining Quantity (Base)" < 0);
    
    OnAfterTransferFromForecast(Rec,ProdForecastEntry); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromInboundTransOrder>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromInboundTransOrder>
    Code lines:
    ...
    "Remaining Quantity (Base)" := TransLine."Quantity (Base)" - TransLine."Qty. Received (Base)";
    "Reserved Quantity (Base)" := TransLine."Reserved Qty. Inbnd. (Base)" + TransLine."Reserved Qty. Shipped (Base)";
    Positive := NOT ("Remaining Quantity (Base)" < 0);
    "Transfer Direction" := "Transfer Direction"::Inbound;
    
    OnAfterTransferFromInboundTransOrder(Rec,TransLine); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromJobNeed>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromJobNeed>
    Code lines:
    ...
    JobPlanningLine.CALCFIELDS("Reserved Qty. (Base)");
    "Remaining Quantity (Base)" := -JobPlanningLine."Remaining Qty. (Base)";
    "Reserved Quantity (Base)" := -JobPlanningLine."Reserved Qty. (Base)";
    Positive := NOT ("Remaining Quantity (Base)" < 0);
    
    OnAfterTransferFromJobNeed(Rec,JobPlanningLine); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromOutboundTransfer>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromOutboundTransOrder>
    Code lines:
    ...
    "Remaining Quantity (Base)" := -TransLine."Outstanding Qty. (Base)";
    "Reserved Quantity (Base)" := -TransLine."Reserved Qty. Outbnd. (Base)";
    Positive := NOT ("Remaining Quantity (Base)" < 0);
    "Transfer Direction" := "Transfer Direction"::Outbound;
    
    OnAfterTransferFromOutboundTransfer(Rec,TransLine); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromPlanProdComp>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromPlanProdComp>
    Code lines:
    ...
    Positive := NOT ("Remaining Quantity (Base)" < 0);
    "Action Message" := ReqLine."Action Message";
    "Ref. Order No." := ReqLine."Ref. Order No.";
    "Ref. Order Type" := GetRefOrderTypeFromReqLine(ReqLine."Ref. Order Type");
    
    OnAfterTransferFromPlanProdComp(Rec,PlngComp,ReqLine); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromProdComp>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromProdComp>
    Code lines:
    ...
    ProdOrderComp.CALCFIELDS("Reserved Qty. (Base)");
    "Remaining Quantity (Base)" := -ProdOrderComp."Remaining Qty. (Base)";
    "Reserved Quantity (Base)" := -ProdOrderComp."Reserved Qty. (Base)";
    Positive := NOT ("Remaining Quantity (Base)" < 0);
    
    OnAfterTransferFromProdComp(Rec,ProdOrderComp); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromProdOrder>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromProdOrder>
    Code lines:
    ...
    ProdOrderLine.CALCFIELDS("Reserved Qty. (Base)");
    "Remaining Quantity (Base)" := ProdOrderLine."Remaining Qty. (Base)";
    "Reserved Quantity (Base)" := ProdOrderLine."Reserved Qty. (Base)";
    Positive := NOT ("Remaining Quantity (Base)" < 0);
    
    OnAfterTransferFromProdOrder(Rec,ProdOrderLine); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromPurchase>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromPurchase>
    Code lines:
    ...
    PurchLine.CALCFIELDS("Reserved Qty. (Base)");
    "Remaining Quantity (Base)" := -PurchLineReserve.ReservQuantity(PurchLine);
    "Reserved Quantity (Base)" := PurchLine."Reserved Qty. (Base)";
    Positive := NOT ("Remaining Quantity (Base)" < 0);
    
    OnAfterTransferFromPurchase(Rec,PurchLine); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromPurchReturn>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromPurchReturn>
    Code lines:
    ...
    PurchLine.CALCFIELDS("Reserved Qty. (Base)");
    "Remaining Quantity (Base)" := -PurchLineReserve.ReservQuantity(PurchLine);
    "Reserved Quantity (Base)" := PurchLine."Reserved Qty. (Base)";
    Positive := NOT ("Remaining Quantity (Base)" < 0);
    
    OnAfterTransferFromPurchReturn(Rec,PurchLine); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromReqLine>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromReqLine>
    Code lines:
    ...
    Positive := NOT ("Remaining Quantity (Base)" < 0);
    "Action Message" := ReqLine."Action Message";
    "Ref. Order No." := ReqLine."Ref. Order No.";
    "Ref. Order Type" := GetRefOrderTypeFromReqLine(ReqLine."Ref. Order Type");
    
    OnAfterTransferFromReqLine(Rec,ReqLine); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromReqLineTransDemand>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromReqLineTransDemand>
    Code lines:
    ...
    "Ref. Order No." := ReqLine."Ref. Order No.";
    "Ref. Order Type" := GetRefOrderTypeFromReqLine(ReqLine."Ref. Order Type");
    // Notice: Planned outbound transfer uses an opposite direction of transfer
    "Transfer Direction" := 1;
    
    OnAfterTransferFromReqLineTransDemand(Rec,ReqLine); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromSales>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromSales>
    Code lines:
    ...
    IF "Derived from Blanket Order" THEN BEGIN
      "Ref. Order No." := SalesLine."Blanket Order No.";
      "Ref. Order Line No." := SalesLine."Blanket Order Line No.";
    END;
    
    OnAfterTransferFromSales(Rec,SalesLine); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromSalesBlanketOrder>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromSalesBlanketOrder>
    Code lines:
    ...
    "Remaining Quantity (Base)" := -UnconsumedQtyBase;
    "Reserved Quantity (Base)" := 0;
    "Orig. Quantity (Base)" := -SalesLine."Quantity (Base)";
    Positive := NOT ("Remaining Quantity (Base)" < 0);
    
    OnAfterTransferFromSalesBlanketOrder(Rec,SalesLine); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromSalesReturn>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromSalesReturn>
    Code lines:
    ...
    IF "Derived from Blanket Order" THEN BEGIN
      "Ref. Order No." := SalesLine."Blanket Order No.";
      "Ref. Order Line No." := SalesLine."Blanket Order Line No.";
    END;
    
    OnAfterTransferFromSalesReturn(Rec,SalesLine); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromServiceNeed>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromServiceNeed>
    Code lines:
    ...
    ServLine.CALCFIELDS("Reserved Qty. (Base)");
    "Remaining Quantity (Base)" := -"Remaining Quantity (Base)";
    "Reserved Quantity (Base)" := -ServLine."Reserved Qty. (Base)";
    Positive := NOT ("Remaining Quantity (Base)" < 0);
    
    OnAfterTransferFromServiceNeed(Rec,ServLine); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferInventoryQty>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferInventoryQty>
    Code lines:
    ...
    
    "Reserved Quantity (Base)" := CalcReservedQuantity(ItemLedgEntry);
    
    Positive := NOT ("Remaining Quantity (Base)" < 0);
    
    OnAfterTransferInventoryQty(Rec,ItemLedgEntry); <=====================
Table<FA Ledger Entry>.PROCEDURE<OnAfterMoveToFAJnlLine>
  Raised in: Table<FA Ledger Entry>.PROCEDURE<MoveToFAJnl>
    Code lines:
    ...
    FAJnlLine."FA Reclassification Entry" := "Reclassification Entry";
    FAJnlLine."Index Entry" := "Index Entry";
    FAJnlLine."Line No." := NextLineNo;
    FAJnlLine."Dimension Set ID" := "Dimension Set ID";
    
    OnAfterMoveToFAJnlLine(FAJnlLine,Rec); <=====================
Table<FA Ledger Entry>.PROCEDURE<OnAfterMoveToGenJnlLine>
  Raised in: Table<FA Ledger Entry>.PROCEDURE<MoveToGenJnl>
    Code lines:
    ...
    GenJnlLine."FA Reclassification Entry" := "Reclassification Entry";
    GenJnlLine."Index Entry" := "Index Entry";
    GenJnlLine."Line No." := NextLineNo;
    GenJnlLine."Dimension Set ID" := "Dimension Set ID";
    
    OnAfterMoveToGenJnlLine(GenJnlLine,Rec); <=====================
Table<FA Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<FA Journal Line>.PROCEDURE<CreateDim>
    Code lines:
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,"Source Code","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
Table<FA Journal Line>.PROCEDURE<OnConvertToLedgEntryCase>
  Raised in: Table<FA Journal Line>.PROCEDURE<ConvertToLedgEntry>
    Code lines:
    ...
        FAJnlLine."FA Posting Type"::Disposal:
          "FA Posting Type" := "FA Posting Type"::"Proceeds on Disposal";
        FAJnlLine."FA Posting Type"::"Salvage Value":
          "FA Posting Type" := "FA Posting Type"::"Salvage Value";
        ELSE
          OnConvertToLedgEntryCase(FALedgEntry,FAJnlLine); <=====================
      END;
      EXIT("FA Posting Type");
    END;
Table<FA Reclass. Journal Line>.PROCEDURE<OnAfterSetUpNewLine>
  Raised in: Table<FA Reclass. Journal Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    "FA Posting Date" := LastFAReclassJnlLine."FA Posting Date";
    
    OnAfterSetUpNewLine(Rec,LastFAReclassJnlLine); <=====================
Table<Insurance Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Insurance Journal Line>.PROCEDURE<CreateDim>
    Code lines:
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,"Source Code","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
Table<Stockkeeping Unit>.PROCEDURE<OnAfterCopyFromItem>
  Raised in: Table<Stockkeeping Unit>.PROCEDURE<CopyFromItem>
    Code lines:
    ...
    "Assembly Policy" := Item."Assembly Policy";
    "Last Direct Cost" := Item."Last Direct Cost";
    "Standard Cost" := Item."Standard Cost";
    "Unit Cost" := Item."Unit Cost";
    
    OnAfterCopyFromItem(Rec,Item) <=====================
Table<Item Cross Reference>.PROCEDURE<OnAfterCreateItemVendor>
  Raised in: Table<Item Cross Reference>.PROCEDURE<CreateItemVendor>
    Code lines:
    ...
        ItemVend."Vendor No." := "Cross-Reference Type No.";
        ItemVend.VALIDATE("Vendor No.");
        ItemVend."Variant Code" := "Variant Code";
        ItemVend."Vendor Item No." := "Cross-Reference No.";
        ItemVend.INSERT;
        OnAfterCreateItemVendor(Rec,ItemVend); <=====================
      END;
    END;
Table<Item Cross Reference>.PROCEDURE<OnBeforeItemVendorDelete>
  Raised in: Table<Item Cross Reference>.PROCEDURE<DeleteItemVendor>
    Code lines:
    IF NOT MultipleCrossReferencesExist(ItemCrossReference) THEN
      IF ItemVend.GET(ItemCrossReference."Cross-Reference Type No.",ItemCrossReference."Item No.",ItemCrossReference."Variant Code") THEN
        IF UPPERCASE(DELCHR(ItemVend."Vendor Item No.",'<',' ')) = ItemCrossReference."Cross-Reference No." THEN BEGIN
          OnBeforeItemVendorDelete(ItemVend,ItemCrossReference); <=====================
          ItemVend.DELETE;
        END;
Table<Transfer Header>.PROCEDURE<OnAfterCheckBeforePost>
  Raised in: Table<Transfer Header>.PROCEDURE<CheckBeforePost>
    Code lines:
    ...
      VerifyNoInboundWhseHandlingOnLocation("Transfer-to Code");
    END;
    TESTFIELD(Status,Status::Released);
    TESTFIELD("Posting Date");
    
    OnAfterCheckBeforePost(Rec); <=====================
Table<Transfer Header>.PROCEDURE<OnUpdateTransLines>
  Raised in: Table<Transfer Header>.PROCEDURE<UpdateTransLines>
    Code lines:
    ...
            BEGIN
              TransferLine.VALIDATE("In-Transit Code",TransferHeader."In-Transit Code");
              TransferLine.VALIDATE("Item No.",TransferLine."Item No.");
            END;
          ELSE
            OnUpdateTransLines(TransferLine,TransferHeader,FieldID); <=====================
        END;
        TransferLine.MODIFY(TRUE);
      UNTIL TransferLine.NEXT = 0;
    END;
Table<Transfer Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Transfer Line>.PROCEDURE<CreateDim>
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,SourceCodeSetup.Transfer,
Table<Transfer Shipment Header>.PROCEDURE<OnAfterCopyFromTransferHeader>
  Raised in: Table<Transfer Shipment Header>.PROCEDURE<CopyFromTransferHeader>
    Code lines:
    ...
    "Entry/Exit Point" := TransHeader."Entry/Exit Point";
    Area := TransHeader.Area;
    "Transaction Specification" := TransHeader."Transaction Specification";
    "Direct Transfer" := TransHeader."Direct Transfer";
    
    OnAfterCopyFromTransferHeader(Rec,TransHeader); <=====================
Table<Transfer Shipment Line>.PROCEDURE<OnAfterCopyFromTransferLine>
  Raised in: Table<Transfer Shipment Line>.PROCEDURE<CopyFromTransferLine>
    Code lines:
    ...
    "Transfer-to Code" := TransLine."Transfer-to Code";
    "Transfer-from Bin Code" := TransLine."Transfer-from Bin Code";
    "Shipping Time" := TransLine."Shipping Time";
    "Item Category Code" := TransLine."Item Category Code";
    
    OnAfterCopyFromTransferLine(Rec,TransLine); <=====================
Table<Transfer Receipt Header>.PROCEDURE<OnAfterCopyFromTransferHeader>
  Raised in: Table<Transfer Receipt Header>.PROCEDURE<CopyFromTransferHeader>
    Code lines:
    ...
    "Entry/Exit Point" := TransHeader."Entry/Exit Point";
    Area := TransHeader.Area;
    "Transaction Specification" := TransHeader."Transaction Specification";
    "Direct Transfer" := TransHeader."Direct Transfer";
    
    OnAfterCopyFromTransferHeader(Rec,TransHeader); <=====================
Table<Transfer Receipt Line>.PROCEDURE<OnAfterCopyFromTransferLine>
  Raised in: Table<Transfer Receipt Line>.PROCEDURE<CopyFromTransferLine>
    Code lines:
    ...
    "Transfer-to Code" := TransLine."Transfer-to Code";
    "Transfer-To Bin Code" := TransLine."Transfer-To Bin Code";
    "Shipping Time" := TransLine."Shipping Time";
    "Item Category Code" := TransLine."Item Category Code";
    
    OnAfterCopyFromTransferLine(Rec,TransLine); <=====================
Table<Warehouse Request>.PROCEDURE<OnAfterDeleteRequest>
  Raised in: Table<Warehouse Request>.PROCEDURE<DeleteRequest>
    Code lines:
    SetSourceFilter(SourceType,SourceSubtype,SourceNo);
    IF NOT ISEMPTY THEN
      DELETEALL;
    
    OnAfterDeleteRequest(SourceType,SourceSubtype,SourceNo); <=====================
Table<Warehouse Activity Line>.PROCEDURE<OnAfterAutofillQtyToHandleLine>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<AutofillQtyToHandle>
    Code lines:
    ...
        REPEAT
          VALIDATE("Qty. to Handle","Qty. Outstanding");
          IF "Qty. to Handle (Base)" <> "Qty. Outstanding (Base)" THEN
            VALIDATE("Qty. to Handle (Base)","Qty. Outstanding (Base)");
          MODIFY;
          OnAfterAutofillQtyToHandleLine(WhseActivLine); <=====================
    
          IF NOT NotEnough THEN
            IF "Qty. to Handle" < "Qty. Outstanding" THEN
              NotEnough := TRUE;
    ...
Table<Warehouse Activity Line>.PROCEDURE<OnAfterDeleteQtyToHandle>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<DeleteQtyToHandle>
    Code lines:
    ...
          VALIDATE("Qty. to Handle",0);
          MODIFY;
          OnAfterUpdateQtyToHandleWhseActivLine(WhseActivLine);
        UNTIL NEXT = 0;
    END;
    OnAfterDeleteQtyToHandle(WhseActivLine); <=====================
Table<Warehouse Activity Line>.PROCEDURE<OnAfterTransferFromAssemblyLine>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<TransferFromAssemblyLine>
    Code lines:
    TransferAllButWhseDocDetailsFromAssemblyLine(AssemblyLine);
    "Whse. Document Type" := "Whse. Document Type"::Assembly;
    "Whse. Document No." := AssemblyLine."Document No.";
    "Whse. Document Line No." := AssemblyLine."Line No.";
    
    OnAfterTransferFromAssemblyLine(Rec,AssemblyLine); <=====================
Table<Warehouse Activity Line>.PROCEDURE<OnAfterTransferFromCompLine>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<TransferFromCompLine>
    Code lines:
    ...
    "Due Date" := ProdOrderCompLine."Due Date";
    "Whse. Document Type" := "Whse. Document Type"::Production;
    "Whse. Document No." := ProdOrderCompLine."Prod. Order No.";
    "Whse. Document Line No." := ProdOrderCompLine."Prod. Order Line No.";
    
    OnAfterTransferFromCompLine(Rec,ProdOrderCompLine); <=====================
Table<Warehouse Activity Line>.PROCEDURE<OnAfterTransferFromIntPickLine>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<TransferFromIntPickLine>
    Code lines:
    ...
    "Source Line No." := WhseInternalPickLine."Line No.";
    "Whse. Document Type" := "Whse. Document Type"::"Internal Pick";
    "Whse. Document No." := WhseInternalPickLine."No.";
    "Whse. Document Line No." := WhseInternalPickLine."Line No.";
    
    OnAfterTransferFromIntPickLine(Rec,WhseInternalPickLine); <=====================
Table<Warehouse Activity Line>.PROCEDURE<OnAfterTransferFromMovWkshLine>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<TransferFromMovWkshLine>
    Code lines:
    ...
    "Bin Type Code" := Bin."Bin Type Code";
    "Whse. Document Type" := "Whse. Document Type"::"Movement Worksheet";
    "Whse. Document No." := WhseWkshLine.Name;
    "Whse. Document Line No." := WhseWkshLine."Line No.";
    
    OnAfterTransferFromMovWkshLine(Rec,WhseWkshLine); <=====================
Table<Warehouse Activity Line>.PROCEDURE<OnAfterTransferFromShptLine>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<TransferFromShptLine>
    Code lines:
    ...
    "Shipping Advice" := WhseShptLine."Shipping Advice";
    "Whse. Document Type" := "Whse. Document Type"::Shipment;
    "Whse. Document No." := WhseShptLine."No.";
    "Whse. Document Line No." := WhseShptLine."Line No.";
    
    OnAfterTransferFromShptLine(Rec,WhseShptLine); <=====================
Table<Warehouse Activity Line>.PROCEDURE<OnAfterUpdateQtyToHandleWhseActivLine>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<DeleteQtyToHandle>
    Code lines:
    ...
    WITH WhseActivLine DO BEGIN
      IF FIND('-') THEN
        REPEAT
          VALIDATE("Qty. to Handle",0);
          MODIFY;
          OnAfterUpdateQtyToHandleWhseActivLine(WhseActivLine); <=====================
        UNTIL NEXT = 0;
    END;
    OnAfterDeleteQtyToHandle(WhseActivLine);
Table<Warehouse Activity Line>.PROCEDURE<OnBeforeAutofillQtyToHandle>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<AutofillQtyToHandle>
    Code lines:
    OnBeforeAutofillQtyToHandle(WhseActivLine); <=====================
    WITH WhseActivLine DO BEGIN
      NotEnough := FALSE;
      IF FIND('-') THEN
        REPEAT
          VALIDATE("Qty. to Handle","Qty. Outstanding");
          IF "Qty. to Handle (Base)" <> "Qty. Outstanding (Base)" THEN
            VALIDATE("Qty. to Handle (Base)","Qty. Outstanding (Base)");
          MODIFY;
          OnAfterAutofillQtyToHandleLine(WhseActivLine);
    ...
Table<Warehouse Activity Line>.PROCEDURE<OnBeforeDeleteQtyToHandle>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<DeleteQtyToHandle>
    Code lines:
    OnBeforeDeleteQtyToHandle(WhseActivLine); <=====================
    WITH WhseActivLine DO BEGIN
      IF FIND('-') THEN
        REPEAT
          VALIDATE("Qty. to Handle",0);
          MODIFY;
          OnAfterUpdateQtyToHandleWhseActivLine(WhseActivLine);
        UNTIL NEXT = 0;
    END;
    OnAfterDeleteQtyToHandle(WhseActivLine);
Table<Warehouse Activity Line>.PROCEDURE<OnBeforeDeleteRelatedWhseActivLines>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<DeleteRelatedWhseActivLines>
    Code lines:
    OnBeforeDeleteRelatedWhseActivLines(WhseActivLine,CalledFromHeader); <=====================
    
    WITH WhseActivLine DO BEGIN
      IF ("Activity Type" IN ["Activity Type"::"Invt. Put-away","Activity Type"::"Invt. Pick"]) AND
         (NOT CalledFromHeader)
      THEN
        EXIT;
    
      WhseActivLine2.SETCURRENTKEY(
        "Activity Type","No.","Whse. Document Type","Whse. Document No.","Whse. Document Line No.");
    ...
Table<Warehouse Activity Line>.PROCEDURE<OnBeforeDeleteWhseActivLine2>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<DeleteRelatedWhseActivLines>
    Code lines:
    ...
          WhseActivLine2.SETFILTER("Line No.",'<>%1',"Line No.")
        ELSE
          WhseActivLine2.SETRANGE("Line No.","Line No.");
      IF WhseActivLine2.FIND('-') THEN
        REPEAT
          OnBeforeDeleteWhseActivLine2(WhseActivLine2,CalledFromHeader); <=====================
          WhseActivLine2.DELETE; // to ensure correct item tracking update
          WhseActivLine2.DeleteBinContent(WhseActivLine2."Action Type"::Place);
          UpdateRelatedItemTrkg(WhseActivLine2);
        UNTIL WhseActivLine2.NEXT = 0;
    ...
Table<Warehouse Activity Line>.PROCEDURE<OnBeforeInsertNewWhseActivLine>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<SplitLine>
    Code lines:
    ...
      THEN BEGIN
        NewWhseActivLine."Zone Code" := '';
        NewWhseActivLine."Bin Code" := '';
      END;
    END;
    OnBeforeInsertNewWhseActivLine(WhseActivLine,NewWhseActivLine); <=====================
    NewWhseActivLine.INSERT;
    
    WhseActivLine.Quantity := WhseActivLine."Qty. to Handle" + WhseActivLine."Qty. Handled";
    WhseActivLine."Qty. (Base)" :=
    ...
Table<Warehouse Activity Line>.PROCEDURE<OnBeforeModifyOldWhseActivLine>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<SplitLine>
    Code lines:
    ...
    WhseActivLine."Qty. Outstanding (Base)" := WhseActivLine."Qty. to Handle (Base)";
    IF Location."Directed Put-away and Pick" THEN
      WMSMgt.CalcCubageAndWeight(
        WhseActivLine."Item No.",WhseActivLine."Unit of Measure Code",
        WhseActivLine."Qty. to Handle",WhseActivLine.Cubage,WhseActivLine.Weight);
    OnBeforeModifyOldWhseActivLine(WhseActivLine); <=====================
    WhseActivLine.MODIFY;
Table<Warehouse Activity Line>.PROCEDURE<OnBeforeSplitLines>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<SplitLine>
    Code lines:
    OnBeforeSplitLines(WhseActivLine); <=====================
    
    WhseActivLine.TESTFIELD("Qty. to Handle");
    IF WhseActivLine."Activity Type" = WhseActivLine."Activity Type"::"Put-away" THEN BEGIN
      IF WhseActivLine."Breakbulk No." <> 0 THEN
        ERROR(Text007);
      WhseActivLine.TESTFIELD("Action Type",WhseActivLine."Action Type"::Place);
    END;
    IF WhseActivLine."Qty. to Handle" = WhseActivLine."Qty. Outstanding" THEN
      WhseActivLine.FIELDERROR(
    ...
Table<Warehouse Source Filter>.PROCEDURE<OnBeforeSetTableView>
  Raised in: Table<Warehouse Source Filter>.PROCEDURE<SetFilters>
    Code lines:
    ...
    ServiceLine.SETFILTER("Shipping Agent Service Code","Shipping Agent Service Filter");
    
    TransLine.SETFILTER("Shipping Agent Code","Shipping Agent Code Filter");
    TransLine.SETFILTER("Shipping Agent Service Code","Shipping Agent Service Filter");
    
    OnBeforeSetTableView(WhseRequest,SalesHeader,SalesLine,PurchLine,TransLine,ServiceHeader,ServiceLine); <=====================
    
    GetSourceBatch.SETTABLEVIEW(WhseRequest);
    GetSourceBatch.SETTABLEVIEW(SalesHeader);
    GetSourceBatch.SETTABLEVIEW(SalesLine);
    ...
Table<BOM Buffer>.PROCEDURE<OnTransferFromAsmHeaderCopyFields>
  Raised in: Table<BOM Buffer>.PROCEDURE<TransferFromAsmHeader>
    Code lines:
    ...
    "Location Code" := AsmHeader."Location Code";
    "Variant Code" := AsmHeader."Variant Code";
    "Needed by Date" := AsmHeader."Due Date";
    Indentation := 0;
    
    OnTransferFromAsmHeaderCopyFields(Rec,AsmHeader); <=====================
    INSERT(TRUE);
Table<BOM Buffer>.PROCEDURE<OnTransferFromAsmLineCopyFields>
  Raised in: Table<BOM Buffer>.PROCEDURE<TransferFromAsmLine>
    Code lines:
    ...
    "Variant Code" := AsmLine."Variant Code";
    "Needed by Date" := AsmLine."Due Date";
    "Lead-Time Offset" := AsmLine."Lead-Time Offset";
    Indentation := 1;
    
    OnTransferFromAsmLineCopyFields(Rec,AsmLine); <=====================
    INSERT(TRUE);
Table<BOM Buffer>.PROCEDURE<OnTransferFromBOMCompCopyFields>
  Raised in: Table<BOM Buffer>.PROCEDURE<TransferFromBOMComp>
    Code lines:
    ...
    "Location Code" := ParentLocationCode;
    "Lead-Time Offset" := BOMComp."Lead-Time Offset";
    "Needed by Date" := NeedByDate;
    Indentation := NewIndentation;
    
    OnTransferFromBOMCompCopyFields(Rec,BOMComp); <=====================
    INSERT(TRUE);
Table<BOM Buffer>.PROCEDURE<OnTransferFromItemCopyFields>
  Raised in: Table<BOM Buffer>.PROCEDURE<TransferFromItem>
    Code lines:
    ...
    "Qty. per Parent" := 1;
    "Qty. per Top Item" := 1;
    "Needed by Date" := DemandDate;
    Indentation := 0;
    
    OnTransferFromItemCopyFields(Rec,Item); <=====================
    INSERT(TRUE);
Table<BOM Buffer>.PROCEDURE<OnTransferFromProdOrderCompCopyFields>
  Raised in: Table<BOM Buffer>.PROCEDURE<TransferFromProdOrderComp>
    Code lines:
    ...
    "Location Code" := ProdOrderComp."Location Code";
    "Needed by Date" := ProdOrderComp."Due Date";
    "Lead-Time Offset" := ProdOrderComp."Lead-Time Offset";
    Indentation := 1;
    
    OnTransferFromProdOrderCompCopyFields(Rec,ProdOrderComp); <=====================
    INSERT(TRUE);
Table<BOM Buffer>.PROCEDURE<OnTransferFromProdOrderLineCopyFields>
  Raised in: Table<BOM Buffer>.PROCEDURE<TransferFromProdOrderLine>
    Code lines:
    ...
    "Variant Code" := ProdOrderLine."Variant Code";
    "Location Code" := ProdOrderLine."Location Code";
    "Needed by Date" := ProdOrderLine."Due Date";
    Indentation := 0;
    
    OnTransferFromProdOrderLineCopyFields(Rec,ProdOrderLine); <=====================
    INSERT(TRUE);
Table<BOM Buffer>.PROCEDURE<OnTransferFromProdRoutingCopyFields>
  Raised in: Table<BOM Buffer>.PROCEDURE<TransferFromProdRouting>
    Code lines:
    ...
    "Qty. per Top Item" := "Qty. per Parent" * ParentQtyPer;
    "Location Code" := ParentLocationCode;
    "Needed by Date" := NeedByDate;
    Indentation := NewIndentation;
    
    OnTransferFromProdRoutingCopyFields(Rec,RoutingLine); <=====================
    INSERT(TRUE);
Table<Inventory Adjmt. Entry (Order)>.PROCEDURE<OnAfterGetSingleLevelCosts>
  Raised in: Table<Inventory Adjmt. Entry (Order)>.PROCEDURE<GetSingleLevelCosts>
    Code lines:
    ...
    "Single-Lvl Capacity Cost (ACY)" := "Single-Level Capacity Cost" * CurrExchRate;
    "Single-Lvl Subcontrd Cost(ACY)" := "Single-Level Subcontrd. Cost" * CurrExchRate;
    "Single-Lvl Cap. Ovhd Cost(ACY)" := "Single-Level Cap. Ovhd Cost" * CurrExchRate;
    "Single-Lvl Mfg. Ovhd Cost(ACY)" := "Single-Level Mfg. Ovhd Cost" * CurrExchRate;
    
    OnAfterGetSingleLevelCosts(Rec,Item); <=====================
Table<Inventory Adjmt. Entry (Order)>.PROCEDURE<OnAfterSetProdOrderLineTransferFields>
  Raised in: Table<Inventory Adjmt. Entry (Order)>.PROCEDURE<SetProdOrderLine>
    Code lines:
    ...
    "Routing Reference No." := ProdOrderLine."Routing Reference No.";
    "Cost is Adjusted" := FALSE;
    "Is Finished" := ProdOrderLine.Status = ProdOrderLine.Status::Finished;
    "Indirect Cost %" := ProdOrderLine."Indirect Cost %";
    "Overhead Rate" := ProdOrderLine."Overhead Rate";
    OnAfterSetProdOrderLineTransferFields(Rec,ProdOrderLine); <=====================
    
    GetUnitCostsFromProdOrderLine;
    IF NOT INSERT THEN;
Table<Service Header>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Service Header>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[3] := No3;
    TableID[4] := Type4;
    No[4] := No4;
    TableID[5] := Type5;
    No[5] := No5;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    OldDimSetID := "Dimension Set ID";
    ...
Table<Service Header>.PROCEDURE<OnAfterInitRecord>
  Raised in: Table<Service Header>.PROCEDURE<InitRecord>
    Code lines:
    ...
      ELSE
        "Responsibility Center" := UserSetupMgt.GetRespCenter(2,"Responsibility Center")
    ELSE
      "Responsibility Center" := UserSetupMgt.GetServiceFilter;
    
    OnAfterInitRecord(Rec); <=====================
Table<Service Header>.PROCEDURE<OnAfterTransferExtendedTextForServLineRecreation>
  Raised in: Table<Service Header>.PROCEDURE<CreateServiceLines>
    Code lines:
    ...
        ExtendedTextAdded := FALSE;
      END ELSE
        IF NOT ExtendedTextAdded THEN BEGIN
          TransferExtendedText.ServCheckIfAnyExtText(ServLine,TRUE);
          TransferExtendedText.InsertServExtText(ServLine);
          OnAfterTransferExtendedTextForServLineRecreation(ServLine); <=====================
          ServLine.FIND('+');
          ExtendedTextAdded := TRUE;
        END;
      CopyReservEntryFromTemp(TempServLine,ServLine."Line No.");
Table<Service Header>.PROCEDURE<OnAfterUpdateCust>
  Raised in: Table<Service Header>.PROCEDURE<UpdateCust>
    Code lines:
    ...
    IF ("Customer No." = "Bill-to Customer No.") OR
       ("Bill-to Customer No." = '')
    THEN
      VALIDATE("Bill-to Contact No.","Contact No.");
    
    OnAfterUpdateCust(Rec); <=====================
Table<Service Header>.PROCEDURE<OnAfterUpdateShipToAddress>
  Raised in: Table<Service Header>.PROCEDURE<UpdateShipToAddress>
    Code lines:
    ...
        "Ship-to Contact" := CompanyInfo."Ship-to Contact";
      END;
      "VAT Country/Region Code" := "Country/Region Code";
    END;
    
    OnAfterUpdateShipToAddress(Rec); <=====================
Table<Service Header>.PROCEDURE<OnBeforeInsertServLineOnServLineRecreation>
  Raised in: Table<Service Header>.PROCEDURE<CreateServiceLines>
    Code lines:
    ...
          ServLine."Fault Code" := TempServLine."Fault Code";
          ServLine.VALIDATE("Dimension Set ID",TempServLine."Dimension Set ID");
        END;
        "Link Service to Service Item" := TempLinkToServItem;
    
        OnBeforeInsertServLineOnServLineRecreation(ServLine); <=====================
        ServLine.INSERT;
        ExtendedTextAdded := FALSE;
      END ELSE
        IF NOT ExtendedTextAdded THEN BEGIN
    ...
Table<Service Header>.PROCEDURE<OnUpdateServLineByChangedFieldName>
  Raised in: Table<Service Header>.PROCEDURE<UpdateServLinesByFieldNo>
    Code lines:
    ...
              BEGIN
                ServLine.VALIDATE("Shipping Agent Service Code","Shipping Agent Service Code");
                ServLine.MODIFY(TRUE);
              END;
            ELSE
              OnUpdateServLineByChangedFieldName(ServHeader,ServLine,Field."Field Caption"); <=====================
          END;
        UNTIL ServLine.NEXT = 0;
    END;
Table<Service Item Line>.PROCEDURE<OnAfterAssignItemValues>
  Raised in: Table<Service Item Line>.Field<Item No.>.<OnValidate>
    Code lines:
    ...
      GetServHeader;
      IF (ServHeader."Language Code" = '') OR NOT GetItemTranslation THEN BEGIN
        Description := Item.Description;
        "Description 2" := Item."Description 2";
      END;
      OnAfterAssignItemValues(Rec,xRec,Item,ServHeader,CurrFieldNo); <=====================
    END ELSE BEGIN
      Description := '';
      "Description 2" := '';
    END;
Table<Service Line>.PROCEDURE<OnAfterAssignGLAccountValues>
  Raised in: Table<Service Line>.PROCEDURE<CopyFromGLAccount>
    Code lines:
    ...
    "Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
    "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
    "Tax Group Code" := GLAcc."Tax Group Code";
    "Allow Invoice Disc." := FALSE;
    
    OnAfterAssignGLAccountValues(Rec,GLAcc); <=====================
Table<Service Line>.PROCEDURE<OnAfterAssignHeaderValues>
  Raised in: Table<Service Line>.PROCEDURE<InitHeaderDefaults>
    Code lines:
    ...
    
    "Shipping Agent Code" := ServHeader."Shipping Agent Code";
    "Shipping Agent Service Code" := ServHeader."Shipping Agent Service Code";
    "Shipping Time" := ServHeader."Shipping Time";
    
    OnAfterAssignHeaderValues(Rec,ServHeader); <=====================
Table<Service Line>.PROCEDURE<OnAfterAssignItemValues>
  Raised in: Table<Service Line>.PROCEDURE<CopyFromItem>
    Code lines:
    ...
    END ELSE BEGIN
      Warranty := FALSE;
      "Warranty Disc. %" := 0;
    END;
    
    OnAfterAssignItemValues(Rec,Item,xRec,CurrFieldNo); <=====================
Table<Service Line>.PROCEDURE<OnAfterAssignResourceValues>
  Raised in: Table<Service Line>.PROCEDURE<CopyFromResource>
    Code lines:
    ...
    "Gen. Prod. Posting Group" := Res."Gen. Prod. Posting Group";
    "VAT Prod. Posting Group" := Res."VAT Prod. Posting Group";
    "Tax Group Code" := Res."Tax Group Code";
    FindResUnitCost;
    
    OnAfterAssignResourceValues(Rec,Res); <=====================
Table<Service Line>.PROCEDURE<OnAfterAssignServCostValues>
  Raised in: Table<Service Line>.PROCEDURE<CopyFromCost>
    Code lines:
    ...
         (NOT FaultReasonCode."Exclude Warranty Discount")
      THEN
        VALIDATE("Fault Reason Code",ServItemLine."Fault Reason Code");
    Quantity := ServCost."Default Quantity";
    
    OnAfterAssignServCostValues(Rec,ServCost); <=====================
Table<Service Line>.PROCEDURE<OnAfterAssignServItemValues>
  Raised in: Table<Service Line>.PROCEDURE<CopyFromServItem>
    Code lines:
    ...
            END;
        END;
      END;
    END;
    
    OnAfterAssignServItemValues(Rec,ServItem,ServItemComponent); <=====================
Table<Service Line>.PROCEDURE<OnAfterAssignStdTxtValues>
  Raised in: Table<Service Line>.PROCEDURE<CopyFromStdTxt>
    Code lines:
    StandardText.GET("No.");
    Description := StandardText.Description;
    
    OnAfterAssignStdTxtValues(Rec,StandardText); <=====================
Table<Service Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Service Line>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    TableID[3] := Type3;
    No[3] := No3;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    DimensionSetID := ServItemLine."Dimension Set ID";
    ...
Table<Service Line>.PROCEDURE<OnAfterInitOutstandingAmount>
  Raised in: Table<Service Line>.PROCEDURE<InitOutstandingAmount>
    Code lines:
    ...
          ROUND(
            AmountInclVAT * "Qty. Shipped Not Invoiced" / CalcChargeableQty,
            Currency."Amount Rounding Precision"));
    END;
    
    OnAfterInitOutstandingAmount(Rec,ServHeader,Currency); <=====================
Table<Service Line>.PROCEDURE<OnAfterInitQtyToConsume>
  Raised in: Table<Service Line>.PROCEDURE<InitQtyToConsume>
    Code lines:
    "Qty. to Consume" := MaxQtyToConsume;
    "Qty. to Consume (Base)" := MaxQtyToConsumeBase;
    OnAfterInitQtyToConsume(Rec,CurrFieldNo); <=====================
    
    InitQtyToInvoice;
Table<Service Line>.PROCEDURE<OnAfterInitQtyToInvoice>
  Raised in: Table<Service Line>.PROCEDURE<InitQtyToInvoice>
    Code lines:
    "Qty. to Invoice" := MaxQtyToInvoice;
    "Qty. to Invoice (Base)" := MaxQtyToInvoiceBase;
    "VAT Difference" := 0;
    CalcInvDiscToInvoice;
    
    OnAfterInitQtyToInvoice(Rec,CurrFieldNo); <=====================
Table<Service Line>.PROCEDURE<OnAfterInitQtyToShip>
  Raised in: Table<Service Line>.PROCEDURE<InitQtyToShip>
    Code lines:
    ...
      "Qty. to Ship (Base)" := "Outstanding Qty. (Base)";
    END;
    VALIDATE("Qty. to Consume");
    InitQtyToInvoice;
    
    OnAfterInitQtyToShip(Rec,CurrFieldNo); <=====================
Table<Service Line>.PROCEDURE<OnAfterUpdateUnitPrice>
  Raised in: Table<Service Line>.PROCEDURE<UpdateUnitPrice>
    Code lines:
    ...
    
    CalculateDiscount;
    SalesPriceCalcMgt.FindServLinePrice(ServHeader,Rec,CalledByFieldNo);
    VALIDATE("Unit Price");
    
    OnAfterUpdateUnitPrice(Rec,xRec,CalledByFieldNo,CurrFieldNo); <=====================
Table<Service Line>.PROCEDURE<OnBeforeUpdateUnitPrice>
  Raised in: Table<Service Line>.PROCEDURE<UpdateUnitPrice>
    Code lines:
    OnBeforeUpdateUnitPrice(Rec,xRec,CalledByFieldNo,CurrFieldNo); <=====================
    
    TESTFIELD("Qty. per Unit of Measure");
    ServHeader.GET("Document Type","Document No.");
    
    CalculateDiscount;
    SalesPriceCalcMgt.FindServLinePrice(ServHeader,Rec,CalledByFieldNo);
    VALIDATE("Unit Price");
    
    OnAfterUpdateUnitPrice(Rec,xRec,CalledByFieldNo,CurrFieldNo);
Table<Service Item>.PROCEDURE<OnAfterAssignItemValues>
  Raised in: Table<Service Item>.Field<Item No.>.<OnValidate>
    Code lines:
    ...
        VALIDATE("Sales Unit Price",Item."Unit Price");
        "Variant Code" := '';
        "Unit of Measure Code" := Item."Base Unit of Measure";
        IF Description = '' THEN
          VALIDATE(Description,Item.Description);
        OnAfterAssignItemValues(Rec,xRec,Item,CurrFieldNo); <=====================
        IF "Service Item Components" THEN BEGIN
          DeleteServItemComponents;
          CALCFIELDS("Service Item Components");
        END;
    ...
Table<Service Contract Line>.PROCEDURE<OnAfterSetupNewLine>
  Raised in: Table<Service Contract Line>.PROCEDURE<SetupNewLine>
    Code lines:
    ...
    IF "Starting Date" > ServContractHeader."First Service Date" THEN
      "Next Planned Service Date" := "Starting Date"
    ELSE
      "Next Planned Service Date" := ServContractHeader."First Service Date";
    
    OnAfterSetupNewLine(Rec,ServContractHeader); <=====================
Table<Service Contract Header>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Service Contract Header>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[3] := No3;
    TableID[4] := Type4;
    No[4] := No4;
    TableID[5] := Type5;
    No[5] := No5;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
Table<Standard Service Code>.PROCEDURE<OnBeforeInsertServLine>
  Raised in: Table<Standard Service Code>.PROCEDURE<InsertServiceLines>
    Code lines:
    ...
                    (ServLine."VAT %" / 100 * Factor + 1),Currency."Unit-Amount Rounding Precision"));
            END;
          ServLine."Dimension Set ID" := StdServLine."Dimension Set ID";
          IF StdServLine.InsertLine THEN BEGIN
            ServLine."Line No." := GetNextLineNo(ServLine);
            OnBeforeInsertServLine(ServLine); <=====================
            ServLine.INSERT(TRUE);
            InsertExtendedText(ServLine);
          END;
        UNTIL StdServLine.NEXT = 0;
Table<Standard Service Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Standard Service Line>.PROCEDURE<CreateDim>
    Code lines:
    SourceCodeSetup.GET;
    
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
    ...
Table<Standard Service Item Gr. Code>.PROCEDURE<OnBeforeInsertServLine>
  Raised in: Table<Standard Service Item Gr. Code>.PROCEDURE<InsertServiceLines>
    Code lines:
    ...
    
        CombineDimensions(ServLine,StdServLine);
    
        IF StdServLine.InsertLine THEN BEGIN
          ServLine."Line No." := GetNextLineNo(ServLine);
          OnBeforeInsertServLine(ServLine); <=====================
          ServLine.INSERT(TRUE);
          InsertExtendedText(ServLine);
        END;
      UNTIL StdServLine.NEXT = 0;
Table<Document Sending Profile>.PROCEDURE<OnAfterSend>
  Raised in: Table<Document Sending Profile>.PROCEDURE<Send>
    Code lines:
    SendToVAN(RecordVariant);
    SendToPrinter(ReportUsage,RecordVariant,CustomerFieldNo);
    TrySendToEMailGroupedMultipleSelection(ReportUsage,RecordVariant,DocumentNoFieldNo,DocName,CustomerFieldNo);
    SendToDisk(ReportUsage,RecordVariant,DocNo,DocName,ToCust);
    
    OnAfterSend(ReportUsage,RecordVariant,DocNo,ToCust,DocName,CustomerFieldNo,DocumentNoFieldNo); <=====================
Table<Document Sending Profile>.PROCEDURE<OnAfterSendVendor>
  Raised in: Table<Document Sending Profile>.PROCEDURE<SendVendor>
    Code lines:
    SendToVAN(RecordVariant);
    SendToPrinterVendor(ReportUsage,RecordVariant,VendorNoFieldNo);
    TrySendToEMailGroupedMultipleSelectionVendor(ReportUsage,RecordVariant,DocumentNoFieldNo,DocName,VendorNoFieldNo);
    SendToDiskVendor(ReportUsage,RecordVariant,DocNo,DocName,ToVendor);
    
    OnAfterSendVendor(ReportUsage,RecordVariant,DocNo,ToVendor,DocName,VendorNoFieldNo,DocumentNoFieldNo); <=====================
Table<Document Sending Profile>.PROCEDURE<OnBeforeSendCustomerRecords>
  Raised in: Table<Document Sending Profile>.PROCEDURE<SendCustomerRecords>
    Code lines:
    OnBeforeSendCustomerRecords(ReportUsage,RecordVariant,DocName,CustomerNo,DocumentNo,CustomerFieldNo,DocumentFieldNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    SingleCustomerSelected := IsSingleRecordSelected(RecordVariant,CustomerNo,CustomerFieldNo);
    
    IF NOT SingleCustomerSelected THEN
      IF NOT DocumentSendingProfile.ProfileSelectionMethodDialog(ProfileSelectionMethod,TRUE) THEN
        EXIT;
    
    ...
Table<Document Sending Profile>.PROCEDURE<OnBeforeSendVendorRecords>
  Raised in: Table<Document Sending Profile>.PROCEDURE<SendVendorRecords>
    Code lines:
    OnBeforeSendVendorRecords(ReportUsage,RecordVariant,DocName,VendorNo,DocumentNo,VendorFieldNo,DocumentFieldNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    SingleVendorSelected := IsSingleRecordSelected(RecordVariant,VendorNo,VendorFieldNo);
    
    IF NOT SingleVendorSelected THEN
      IF NOT DocumentSendingProfile.ProfileSelectionMethodDialog(ProfileSelectionMethod,FALSE) THEN
        EXIT;
    
    ...
Table<Document Sending Profile>.PROCEDURE<OnBeforeTrySendToEMail>
  Raised in: Table<Document Sending Profile>.PROCEDURE<TrySendToEMail>
    Code lines:
    OnBeforeTrySendToEMail(ReportUsage,RecordVariant,DocumentNoFieldNo,DocName,CustomerFieldNo,ShowDialog,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    IF ShowDialog THEN
      "E-Mail" := "E-Mail"::"Yes (Prompt for Settings)"
    ELSE
      "E-Mail" := "E-Mail"::"Yes (Use Default Settings)";
    
    "E-Mail Attachment" := "E-Mail Attachment"::PDF;
    ...
Table<Document Sending Profile>.PROCEDURE<OnBeforeTrySendToPrinter>
  Raised in: Table<Document Sending Profile>.PROCEDURE<TrySendToPrinter>
    Code lines:
    OnBeforeTrySendToPrinter(ReportUsage,RecordVariant,CustomerFieldNo,ShowDialog,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    IF ShowDialog THEN
      Printer := Printer::"Yes (Prompt for Settings)"
    ELSE
      Printer := Printer::"Yes (Use Default Settings)";
    
    SendToPrinter(ReportUsage,RecordVariant,CustomerFieldNo);
Table<Document Sending Profile>.PROCEDURE<OnCheckElectronicSendingEnabled>
  Raised in: Table<Document Sending Profile>.PROCEDURE<HasThirdPartyDocExchService>
    Code lines:
    OnCheckElectronicSendingEnabled(ExchServiceEnabled); <=====================
Table<Electronic Document Format>.PROCEDURE<OnDiscoverElectronicFormat>
  Raised in: Page<Document Sending Profile>.<OnOpenPage>
    Code lines:
    ElectronicDocumentFormat.OnDiscoverElectronicFormat; <=====================
    ElectronicDocumentsVisible := NOT ElectronicDocumentFormat.ISEMPTY;
  Raised in: Page<Electronic Document Format>.<OnOpenPage>
    Code lines:
    ElectronicDocumentFormat.INIT;
    ElectronicDocumentFormat.OnDiscoverElectronicFormat; <=====================
Table<Whse. Item Tracking Line>.PROCEDURE<OnAfterCopyTrackingFromItemLedgEntry>
  Raised in: Table<Whse. Item Tracking Line>.PROCEDURE<CopyTrackingFromItemLedgEntry>
    Code lines:
    "Serial No." := ItemLedgerEntry."Serial No.";
    "Lot No." := ItemLedgerEntry."Lot No.";
    "Warranty Date" := ItemLedgerEntry."Warranty Date";
    "Expiration Date" := ItemLedgerEntry."Expiration Date";
    
    OnAfterCopyTrackingFromItemLedgEntry(Rec,ItemLedgerEntry); <=====================
Table<Whse. Item Tracking Line>.PROCEDURE<OnAfterCopyTrackingFromReservEntry>
  Raised in: Table<Whse. Item Tracking Line>.PROCEDURE<CopyTrackingFromReservEntry>
    Code lines:
    "Serial No." := ReservEntry."Serial No.";
    "Lot No." := ReservEntry."Lot No.";
    "Warranty Date" := ReservEntry."Warranty Date";
    "Expiration Date" := ReservEntry."Expiration Date";
    
    OnAfterCopyTrackingFromReservEntry(Rec,ReservEntry); <=====================
Table<Return Shipment Line>.PROCEDURE<OnAfterInitFromPurchLine>
  Raised in: Table<Return Shipment Line>.PROCEDURE<InitFromPurchLine>
    Code lines:
    ...
    IF PurchLine."Document Type" = PurchLine."Document Type"::"Return Order" THEN BEGIN
      "Return Order No." := PurchLine."Document No.";
      "Return Order Line No." := PurchLine."Line No.";
    END;
    
    OnAfterInitFromPurchLine(ReturnShptHeader,PurchLine,Rec); <=====================
Table<Return Shipment Line>.PROCEDURE<OnAfterInsertInvLineFromRetShptLine>
  Raised in: Table<Return Shipment Line>.PROCEDURE<InsertInvLineFromRetShptLine>
    Code lines:
    ...
      PurchLine."Shortcut Dimension 2 Code" := PurchOrderLine."Shortcut Dimension 2 Code";
      PurchLine."Dimension Set ID" := PurchOrderLine."Dimension Set ID";
    
      OnBeforeInsertInvLineFromRetShptLine(PurchLine,PurchOrderLine);
      PurchLine.INSERT;
      OnAfterInsertInvLineFromRetShptLine(PurchLine); <=====================
    
      ItemTrackingMgt.CopyHandledItemTrkgToInvLine2(PurchOrderLine,PurchLine);
    
      NextLineNo := NextLineNo + 10000;
    ...
Table<Return Shipment Line>.PROCEDURE<OnBeforeInsertInvLineFromRetShptLine>
  Raised in: Table<Return Shipment Line>.PROCEDURE<InsertInvLineFromRetShptLine>
    Code lines:
    ...
          "Attached to Line No.");
      PurchLine."Shortcut Dimension 1 Code" := PurchOrderLine."Shortcut Dimension 1 Code";
      PurchLine."Shortcut Dimension 2 Code" := PurchOrderLine."Shortcut Dimension 2 Code";
      PurchLine."Dimension Set ID" := PurchOrderLine."Dimension Set ID";
    
      OnBeforeInsertInvLineFromRetShptLine(PurchLine,PurchOrderLine); <=====================
      PurchLine.INSERT;
      OnAfterInsertInvLineFromRetShptLine(PurchLine);
    
      ItemTrackingMgt.CopyHandledItemTrkgToInvLine2(PurchOrderLine,PurchLine);
    ...
Table<Return Receipt Line>.PROCEDURE<OnAfterInitFromSalesLine>
  Raised in: Table<Return Receipt Line>.PROCEDURE<InitFromSalesLine>
    Code lines:
    ...
    IF SalesLine."Document Type" = SalesLine."Document Type"::"Return Order" THEN BEGIN
      "Return Order No." := SalesLine."Document No.";
      "Return Order Line No." := SalesLine."Line No.";
    END;
    
    OnAfterInitFromSalesLine(ReturnRcptHeader,SalesLine,Rec); <=====================
Table<Return Receipt Line>.PROCEDURE<OnAftertInsertInvLineFromRetRcptLine>
  Raised in: Table<Return Receipt Line>.PROCEDURE<InsertInvLineFromRetRcptLine>
    Code lines:
    ...
      SalesLine."Shortcut Dimension 2 Code" := SalesOrderLine."Shortcut Dimension 2 Code";
      SalesLine."Dimension Set ID" := SalesOrderLine."Dimension Set ID";
    
      OnBeforeInsertInvLineFromRetRcptLine(SalesLine,SalesOrderLine,Rec);
      SalesLine.INSERT;
      OnAftertInsertInvLineFromRetRcptLine(SalesLine); <=====================
    
      ItemTrackingMgt.CopyHandledItemTrkgToInvLine(SalesOrderLine,SalesLine);
    
      NextLineNo := NextLineNo + 10000;
    ...
Table<Return Receipt Line>.PROCEDURE<OnBeforeInsertInvLineFromRetRcptLine>
  Raised in: Table<Return Receipt Line>.PROCEDURE<InsertInvLineFromRetRcptLine>
    Code lines:
    ...
      SalesLine."Document No." := TempSalesLine."Document No.";
      LanguageManagement.SetGlobalLanguageByCode(SalesHeader."Language Code");
      SalesLine.Description := STRSUBSTNO(Text000,"Document No.");
      LanguageManagement.RestoreGlobalLanguage;
      IsHandled := FALSE;
      OnBeforeInsertInvLineFromRetRcptLineBeforeInsertTextLine(Rec,SalesLine,NextLineNo,IsHandled); <=====================
      IF NOT IsHandled THEN BEGIN
        SalesLine.INSERT;
        NextLineNo := NextLineNo + 10000;
      END;
    ...
Table<Return Receipt Line>.PROCEDURE<OnBeforeInsertInvLineFromRetRcptLineBeforeInsertTextLine>
  Raised in: Table<Return Receipt Line>.PROCEDURE<InsertInvLineFromRetRcptLine>
    Code lines:
    ...
      SalesLine."Document No." := TempSalesLine."Document No.";
      LanguageManagement.SetGlobalLanguageByCode(SalesHeader."Language Code");
      SalesLine.Description := STRSUBSTNO(Text000,"Document No.");
      LanguageManagement.RestoreGlobalLanguage;
      IsHandled := FALSE;
      OnBeforeInsertInvLineFromRetRcptLineBeforeInsertTextLine(Rec,SalesLine,NextLineNo,IsHandled); <=====================
      IF NOT IsHandled THEN BEGIN
        SalesLine.INSERT;
        NextLineNo := NextLineNo + 10000;
      END;
    ...
Table<Sales Price>.PROCEDURE<OnBeforeNewSalesPriceInsert>
  Raised in: Table<Sales Price>.PROCEDURE<CopySalesPriceToCustomersSalesPrice>
    Code lines:
    IF SalesPrice.FINDSET THEN
      REPEAT
        NewSalesPrice := SalesPrice;
        NewSalesPrice."Sales Type" := NewSalesPrice."Sales Type"::Customer;
        NewSalesPrice."Sales Code" := CustNo;
        OnBeforeNewSalesPriceInsert(NewSalesPrice,SalesPrice); <=====================
        IF NewSalesPrice.INSERT THEN;
      UNTIL SalesPrice.NEXT = 0;
Table<Purchase Price>.PROCEDURE<OnBeforeNewPurchasePriceInsert>
  Raised in: Table<Purchase Price>.PROCEDURE<CopyPurchPriceToVendorsPurchPrice>
    Code lines:
    IF PurchPrice.FINDSET THEN
      REPEAT
        NewPurchasePrice := PurchPrice;
        NewPurchasePrice."Vendor No." := VendNo;
        OnBeforeNewPurchasePriceInsert(NewPurchasePrice,PurchPrice); <=====================
        IF NewPurchasePrice.INSERT THEN;
      UNTIL PurchPrice.NEXT = 0;
Table<Sales Price Worksheet>.PROCEDURE<OnAfterCalcCurrentPriceFound>
  Raised in: Table<Sales Price Worksheet>.PROCEDURE<CalcCurrentPrice>
    Code lines:
    ...
      "Price Includes VAT" := SalesPrice."Price Includes VAT";
      "Allow Line Disc." := SalesPrice."Allow Line Disc.";
      "Allow Invoice Disc." := SalesPrice."Allow Invoice Disc.";
      "VAT Bus. Posting Gr. (Price)" := SalesPrice."VAT Bus. Posting Gr. (Price)";
      PriceAlreadyExists := SalesPrice."Starting Date" = "Starting Date";
      OnAfterCalcCurrentPriceFound(Rec,SalesPrice); <=====================
    END ELSE BEGIN
      "Current Unit Price" := 0;
      PriceAlreadyExists := FALSE;
    END;
Table<Warehouse Receipt Header>.PROCEDURE<OnBeforeDeleteWhseRcptRelatedLines>
  Raised in: Table<Warehouse Receipt Header>.PROCEDURE<DeleteRelatedLines>
    Code lines:
    WhseRcptLine.SETRANGE("No.","No.");
    IF UseTableTrigger THEN BEGIN
      IF WhseRcptLine.FIND('-') THEN BEGIN
        REPEAT
          OnBeforeDeleteWhseRcptRelatedLines(WhseRcptLine); <=====================
          IF (WhseRcptLine.Quantity <> WhseRcptLine."Qty. Outstanding") AND
             (WhseRcptLine."Qty. Outstanding" <> 0)
          THEN
            IF NOT CONFIRM(Text008,FALSE) THEN
              ERROR(Text009)
    ...
Table<Warehouse Receipt Line>.PROCEDURE<OnAfterOpenItemTrackingLines>
  Raised in: Table<Warehouse Receipt Line>.PROCEDURE<OpenItemTrackingLines>
    Code lines:
    ...
          IF TransferLine.GET("Source No.","Source Line No.") THEN
            ReserveTransferLine.CallItemTracking2(TransferLine,Direction,SecondSourceQtyArray);
        END
    END;
    
    OnAfterOpenItemTrackingLines(Rec,SecondSourceQtyArray); <=====================
Table<Warehouse Shipment Header>.PROCEDURE<OnBeforeWhseShptLineDelete>
  Raised in: Table<Warehouse Shipment Header>.PROCEDURE<DeleteWarehouseShipmentLines>
    Code lines:
    ...
        IF WhseShptLine."Assemble to Order" THEN
          WhseShptLine.VALIDATE("Qty. to Ship",0);
        ItemTrackingMgt.DeleteWhseItemTrkgLines(DATABASE::"Warehouse Shipment Line",0,WhseShptLine."No.",
          '',0,WhseShptLine."Line No.",WhseShptLine."Location Code",TRUE);
    
        OnBeforeWhseShptLineDelete(WhseShptLine); <=====================
        WhseShptLine.DELETE;
      UNTIL WhseShptLine.NEXT = 0;
Table<Warehouse Shipment Line>.PROCEDURE<OnBeforeTestReleased>
  Raised in: Table<Warehouse Shipment Line>.PROCEDURE<TestReleased>
    Code lines:
    TESTFIELD("No.");
    GetWhseShptHeader("No.");
    OnBeforeTestReleased(WhseShptHeader); <=====================
    IF NOT StatusCheckSuspended THEN
      WhseShptHeader.TESTFIELD(Status,WhseShptHeader.Status::Open);
Table<Standard General Journal>.PROCEDURE<OnAfterCopyGenJnlFromStdJnl>
  Raised in: Table<Standard General Journal>.PROCEDURE<CopyGenJnlFromStdJnl>
    Code lines:
    ...
      GenJnlLine.VALIDATE("VAT Amount",StdGenJnlLine."VAT Amount");
    GenJnlLine.VALIDATE("Bal. VAT Prod. Posting Group");
    GenJnlLine."Dimension Set ID" := StdGenJnlLine."Dimension Set ID";
    IF GenJnlBatch."Allow VAT Difference" THEN
      GenJnlLine.VALIDATE("Bal. VAT Amount",StdGenJnlLine."Bal. VAT Amount");
    OnAfterCopyGenJnlFromStdJnl(GenJnlLine,StdGenJnlLine); <=====================
    GenJnlLine.INSERT(TRUE);
    
    LastGenJnlLine := GenJnlLine;
Table<Item Attribute>.PROCEDURE<OnBeforeCheckNameUniqueness>
  Raised in: Table<Item Attribute>.PROCEDURE<CheckNameUniqueness>
    Code lines:
    OnBeforeCheckNameUniqueness(ItemAttribute,Rec); <=====================
    
    ItemAttribute.SETRANGE(Name,NameToCheck);
    ItemAttribute.SETFILTER(ID,'<>%1',ItemAttribute.ID);
    IF NOT ItemAttribute.ISEMPTY THEN
      ERROR(NameAlreadyExistsErr,NameToCheck);
Table<Item Attribute Value>.PROCEDURE<OnGetValueInCurrentLanguage>
  Raised in: Table<Item Attribute Value>.PROCEDURE<GetValueInCurrentLanguageWithoutUnitOfMeasure>
    Code lines:
    ...
            EXIT(FORMAT(Value));
        ItemAttribute.Type::Decimal:
          IF Value <> '' THEN
            EXIT(FORMAT("Numeric Value"));
        ELSE BEGIN
          OnGetValueInCurrentLanguage(ItemAttribute,Rec); <=====================
          EXIT(Value);
        END;
      END;
    EXIT('');
Table<Item Attribute Value Selection>.PROCEDURE<OnBeforeFindItemAttributeCaseInsensitive>
  Raised in: Table<Item Attribute Value Selection>.PROCEDURE<FindItemAttributeCaseInsensitive>
    Code lines:
    OnBeforeFindItemAttributeCaseInsensitive(ItemAttribute,Rec); <=====================
    
    ItemAttribute.SETRANGE(Name,"Attribute Name");
    IF ItemAttribute.FINDFIRST THEN
      EXIT;
    
    AttributeName := LOWERCASE("Attribute Name");
    ItemAttribute.SETRANGE(Name);
    IF ItemAttribute.FINDSET THEN
      REPEAT
    ...
Table<Standard General Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Standard General Journal Line>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[3] := No3;
    TableID[4] := Type4;
    No[4] := No4;
    TableID[5] := Type5;
    No[5] := No5;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
Table<Standard Item Journal>.PROCEDURE<OnAfterCopyItemJnlFromStdJnl>
  Raised in: Table<Standard Item Journal>.PROCEDURE<CopyItemJnlFromStdJnl>
    Code lines:
    ...
    ItemJnlLine."Invoiced Qty. (Base)" := ROUND(ItemJnlLine."Invoiced Quantity" * ItemJnlLine."Qty. per Unit of Measure",0.00001);
    
    ItemJnlLine."Dimension Set ID" := StdItemJnlLine."Dimension Set ID";
    ItemJnlLine.INSERT(TRUE);
    
    OnAfterCopyItemJnlFromStdJnl(ItemJnlLine); <=====================
    
    LastItemJnlLine := ItemJnlLine;
Table<Standard Item Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Standard Item Journal Line>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    TableID[3] := Type3;
    No[3] := No3;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
Table<Report Selections>.PROCEDURE<OnAfterGetEmailBodyCustomer>
  Raised in: Table<Report Selections>.PROCEDURE<GetEmailBodyCustomText>
    Code lines:
    ...
          O365HTMLTemplMgt.CreateEmailBodyFromReportSelections(Rec,RecordVariant,CustEmailAddress,EmailBodyText);
    END;
    
    CustEmailAddress := GetEmailAddress(ReportUsage,RecordVariant,CustNo,TempBodyReportSelections);
    
    OnAfterGetEmailBodyCustomer(CustEmailAddress,ServerEmailBodyFilePath); <=====================
    
    EXIT(TRUE);
Table<Report Selections>.PROCEDURE<OnAfterGetEmailBodyVendor>
  Raised in: Table<Report Selections>.PROCEDURE<GetEmailBodyVendor>
    Code lines:
    ...
    FoundVendorEmailAddress :=
      FindEmailAddressForEmailLayout(TempBodyReportSelections."Email Body Layout Code",VendorNo,ReportUsage,DATABASE::Vendor);
    IF FoundVendorEmailAddress <> '' THEN
      VendorEmailAddress := FoundVendorEmailAddress;
    
    OnAfterGetEmailBodyVendor(VendorEmailAddress,ServerEmailBodyFilePath); <=====================
    
    EXIT(TRUE);
Table<Report Selections>.PROCEDURE<OnBeforeGetCustEmailAddress>
  Raised in: Table<Report Selections>.PROCEDURE<GetCustEmailAddress>
    Code lines:
    OnBeforeGetCustEmailAddress(BillToCustomerNo,ToAddress,ReportUsage,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(ToAddress);
    
    IF Customer.GET(BillToCustomerNo) THEN
      ToAddress := Customer."E-Mail"
    ELSE
      IF Contact.GET(BillToCustomerNo) THEN
        ToAddress := Contact."E-Mail";
    EXIT(ToAddress);
Table<Report Selections>.PROCEDURE<OnBeforeGetEmailBodyCustomer>
  Raised in: Table<Report Selections>.PROCEDURE<GetEmailBodyCustomText>
    Code lines:
    ServerEmailBodyFilePath := '';
    
    OnBeforeGetEmailBodyCustomer; <=====================
    
    IF CustEmailAddress = '' THEN
      CustEmailAddress := GetEmailAddressIgnoringLayout(ReportUsage,RecordVariant,CustNo);
    
    IF NOT FindEmailBodyUsage(ReportUsage,CustNo,TempBodyReportSelections) THEN
      EXIT(FALSE);
    
    ...
Table<Report Selections>.PROCEDURE<OnBeforeGetEmailBodyVendor>
  Raised in: Table<Report Selections>.PROCEDURE<GetEmailBodyVendor>
    Code lines:
    ServerEmailBodyFilePath := '';
    
    OnBeforeGetEmailBodyVendor; <=====================
    
    VendorEmailAddress := GetVendorEmailAddress(VendorNo,RecordVariant,ReportUsage);
    
    IF NOT FindEmailBodyUsageVendor(ReportUsage,VendorNo,TempBodyReportSelections) THEN
      EXIT(FALSE);
    
    ServerEmailBodyFilePath :=
    ...
Table<Report Selections>.PROCEDURE<OnBeforeGetVendorEmailAddress>
  Raised in: Table<Report Selections>.PROCEDURE<GetVendorEmailAddress>
    Code lines:
    OnBeforeGetVendorEmailAddress(BuyFromVendorNo,ToAddress,ReportUsage,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(ToAddress);
    
    ToAddress := GetPurchaseOrderEmailAddress(BuyFromVendorNo,RecVar,ReportUsage);
    
    IF ToAddress = '' THEN
      IF Vendor.GET(BuyFromVendorNo) THEN
        ToAddress := Vendor."E-Mail";
    
Table<Report Selections>.PROCEDURE<OnBeforePrint>
  Raised in: Table<Report Selections>.PROCEDURE<Print>
    Code lines:
    OnBeforePrint(ReportUsage,RecordVariant,CustomerNoFieldNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    PrintWithGUIYesNo(ReportUsage,RecordVariant,TRUE,CustomerNoFieldNo);
Table<Report Selections>.PROCEDURE<OnBeforePrintForUsage>
  Raised in: Table<Report Selections>.PROCEDURE<PrintForUsage>
    Code lines:
    OnBeforePrintForUsage(ReportUsage,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    FilterPrintUsage(ReportUsage);
    IF FINDSET THEN
      REPEAT
        REPORT.RUNMODAL("Report ID",TRUE);
      UNTIL NEXT = 0;
Table<Report Selections>.PROCEDURE<OnBeforePrintWithCheck>
  Raised in: Table<Report Selections>.PROCEDURE<PrintWithCheck>
    Code lines:
    OnBeforePrintWithCheck(ReportUsage,RecordVariant,CustomerNoFieldNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    PrintWithGUIYesNoWithCheck(ReportUsage,RecordVariant,TRUE,CustomerNoFieldNo);
Table<Report Selections>.PROCEDURE<OnBeforePrintWithGUIYesNo>
  Raised in: Table<Report Selections>.PROCEDURE<PrintWithGUIYesNo>
    Code lines:
    OnBeforePrintWithGUIYesNo(ReportUsage,RecordVariant,IsGUI,CustomerNoFieldNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    PrintDocumentsWithCheckGUIYesNoCommon(ReportUsage,RecordVariant,IsGUI,CustomerNoFieldNo,FALSE,DATABASE::Customer);
Table<Report Selections>.PROCEDURE<OnBeforePrintWithGUIYesNoVendor>
  Raised in: Table<Report Selections>.PROCEDURE<PrintWithGUIYesNoVendor>
    Code lines:
    OnBeforePrintWithGUIYesNoVendor(ReportUsage,RecordVariant,IsGUI,VendorNoFieldNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    PrintDocumentsWithCheckGUIYesNoCommon(ReportUsage,RecordVariant,IsGUI,VendorNoFieldNo,FALSE,DATABASE::Vendor);
Table<Report Selections>.PROCEDURE<OnBeforePrintWithGUIYesNoWithCheck>
  Raised in: Table<Report Selections>.PROCEDURE<PrintWithGUIYesNoWithCheck>
    Code lines:
    OnBeforePrintWithGUIYesNoWithCheck(ReportUsage,RecordVariant,IsGUI,CustomerNoFieldNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    PrintDocumentsWithCheckGUIYesNoCommon(ReportUsage,RecordVariant,IsGUI,CustomerNoFieldNo,TRUE,DATABASE::Customer);
Table<Report Selections>.PROCEDURE<OnBeforePrintWithGUIYesNoWithCheckVendor>
  Raised in: Table<Report Selections>.PROCEDURE<PrintWithGUIYesNoWithCheckVendor>
    Code lines:
    OnBeforePrintWithGUIYesNoWithCheckVendor(ReportUsage,RecordVariant,IsGUI,VendorNoFieldNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    PrintDocumentsWithCheckGUIYesNoCommon(ReportUsage,RecordVariant,IsGUI,VendorNoFieldNo,TRUE,DATABASE::Vendor);
Table<Report Selections>.PROCEDURE<OnBeforeSendEmailToCust>
  Raised in: Table<Report Selections>.PROCEDURE<SendEmailToCust>
    Code lines:
    OnBeforeSendEmailToCust(ReportUsage,RecordVariant,DocNo,DocName,ShowDialog,CustNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    RecRef.GETTABLE(RecordVariant);
    
    IF GraphMail.IsEnabled AND GraphMail.HasConfiguration THEN BEGIN
      IF O365DocumentSentHistory.NewInProgressFromRecRef(RecRef) THEN BEGIN
        O365DocumentSentHistory.SetStatusAsFailed;
        UpdateDocumentSentHistory := TRUE;
    ...
Table<Report Selections>.PROCEDURE<OnBeforeSendEmailToVendor>
  Raised in: Table<Report Selections>.PROCEDURE<SendEmailToVendor>
    Code lines:
    OnBeforeSendEmailToVendor(ReportUsage,RecordVariant,DocNo,DocName,ShowDialog,VendorNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    RecRef.GETTABLE(RecordVariant);
    
    IF GraphMail.IsEnabled AND GraphMail.HasConfiguration THEN BEGIN
      IF O365DocumentSentHistory.NewInProgressFromRecRef(RecRef) THEN BEGIN
        O365DocumentSentHistory.SetStatusAsFailed;
        UpdateDocumentSentHistory := TRUE;
    ...
Table<Report Selections>.PROCEDURE<OnBeforeSetReportLayout>
  Raised in: Table<Report Selections>.PROCEDURE<PrintDocumentsWithCheckGUIYesNoCommon>
    Code lines:
    OnBeforeSetReportLayout(RecordVariant); <=====================
    
    RecRef.GETTABLE(RecordVariant);
    GetUniqueAccountNos(TempNameValueBuffer,RecRef,AccountNoFieldNo);
    
    SelectTempReportSelectionsToPrint(TempReportSelections,TempNameValueBuffer,WithCheck,ReportUsage,TableNo);
    
    IF TempReportSelections.FINDSET THEN
      REPEAT
        IF TempReportSelections."Custom Report Layout Code" <> '' THEN
    ...
  Raised in: Table<Report Selections>.PROCEDURE<SendEmailToCustDirectly>
    Code lines:
    IF EmailParameter.GetEntryWithReportUsage(DocNo,ReportUsage,EmailParameter."Parameter Type"::Body) THEN
      EmailBodyText := EmailParameter.GetParameterValue;
    
    OnBeforeSetReportLayout(RecordVariant); <=====================
    BINDSUBSCRIPTION(MailManagement);
    FoundBody := GetEmailBodyCustomText(ServerEmailBodyFilePath,ReportUsage,RecordVariant,CustNo,EmailAddress,EmailBodyText);
    UNBINDSUBSCRIPTION(MailManagement);
    FoundAttachment := FindEmailAttachmentUsage(ReportUsage,CustNo,TempAttachReportSelections);
    
    CustomReportSelection.SETRANGE("Source Type",DATABASE::Customer);
    ...
  Raised in: Table<Report Selections>.PROCEDURE<SendEmailToVendorDirectly>
    Code lines:
    OnBeforeSetReportLayout(RecordVariant); <=====================
    BINDSUBSCRIPTION(MailManagement);
    FoundBody := GetEmailBodyVendor(ServerEmailBodyFilePath,ReportUsage,RecordVariant,VendorNo,EmailAddress);
    UNBINDSUBSCRIPTION(MailManagement);
    FoundAttachment := FindEmailAttachmentUsageVendor(ReportUsage,VendorNo,TempAttachReportSelections);
    
    CustomReportSelection.SETRANGE("Source Type",DATABASE::Vendor);
    CustomReportSelection.SETFILTER("Source No.",VendorNo);
    EXIT(SendEmailDirectly(
        ReportUsage,RecordVariant,DocNo,DocName,FoundBody,FoundAttachment,ServerEmailBodyFilePath,EmailAddress,ShowDialog,
  Raised in: Table<Report Selections>.PROCEDURE<SendToDisk>
    Code lines:
    OnBeforeSetReportLayout(RecordVariant); <=====================
    FindPrintUsage(ReportUsage,CustNo,TempReportSelections);
    WITH TempReportSelections DO
      REPEAT
        ServerAttachmentFilePath := SaveReportAsPDF("Report ID",RecordVariant,"Custom Report Layout Code");
        ClientAttachmentFileName := ElectronicDocumentFormat.GetAttachmentFileName(DocNo,DocName,'pdf');
    
        FileManagement.DownloadHandler(
          ServerAttachmentFilePath,
          '',
    ...
  Raised in: Table<Report Selections>.PROCEDURE<SendToDiskVendor>
    Code lines:
    OnBeforeSetReportLayout(RecordVariant); <=====================
    FindPrintUsageVendor(ReportUsage,VendorNo,TempReportSelections);
    WITH TempReportSelections DO
      REPEAT
        ServerAttachmentFilePath := SaveReportAsPDF("Report ID",RecordVariant,"Custom Report Layout Code");
        ClientAttachmentFileName := ElectronicDocumentFormat.GetAttachmentFileName(DocNo,DocName,'pdf');
    
        FileManagement.DownloadHandler(
          ServerAttachmentFilePath,
          '',
    ...
  Raised in: Table<Report Selections>.PROCEDURE<SendToZip>
    Code lines:
    OnBeforeSetReportLayout(RecordVariant); <=====================
    FindPrintUsage(ReportUsage,CustNo,TempReportSelections);
    WITH TempReportSelections DO
      REPEAT
        ServerAttachmentFilePath := SaveReportAsPDF("Report ID",RecordVariant,"Custom Report Layout Code");
        FileManagement.AddFileToZipArchive(
          ServerAttachmentFilePath,
          ElectronicDocumentFormat.GetAttachmentFileName(DocNo,'Invoice','pdf'));
      UNTIL NEXT = 0;
  Raised in: Table<Report Selections>.PROCEDURE<SendToZipVendor>
    Code lines:
    OnBeforeSetReportLayout(RecordVariant); <=====================
    FindPrintUsageVendor(ReportUsage,VendorNo,TempReportSelections);
    WITH TempReportSelections DO
      REPEAT
        ServerAttachmentFilePath := SaveReportAsPDF("Report ID",RecordVariant,"Custom Report Layout Code");
        FileManagement.AddFileToZipArchive(
          ServerAttachmentFilePath,
          ElectronicDocumentFormat.GetAttachmentFileName(DocNo,'Purchase Order','pdf'));
      UNTIL NEXT = 0;
  Raised in: Table<Report Selections>.PROCEDURE<SaveReportAsPDF>
    Code lines:
    OnBeforeSetReportLayout(RecordVariant); <=====================
    FilePath := COPYSTR(FileMgt.ServerTempFileName('pdf'),1,250);
    
    ReportLayoutSelection.SetTempLayoutSelected(LayoutCode);
    REPORT.SAVEASPDF(ReportID,FilePath,RecordVariant);
    ReportLayoutSelection.SetTempLayoutSelected('');
    
    COMMIT;
  Raised in: Table<Report Selections>.PROCEDURE<SaveReportAsHTML>
    Code lines:
    OnBeforeSetReportLayout(RecordVariant); <=====================
    FilePath := COPYSTR(FileMgt.ServerTempFileName('html'),1,250);
    
    ReportLayoutSelection.SetTempLayoutSelected(LayoutCode);
    REPORT.SAVEASHTML(ReportID,FilePath,RecordVariant);
    ReportLayoutSelection.SetTempLayoutSelected('');
    
    COMMIT;
Table<Report Selections>.PROCEDURE<OnFindReportSelections>
  Raised in: Table<Report Selections>.PROCEDURE<FindReportSelections>
    Code lines:
    IF CopyCustomReportSectionToReportSelection(AccountNo,ReportSelections,TableNo) THEN
      EXIT(TRUE);
    
    OnFindReportSelections(ReportSelections,Handled,Rec); <=====================
    IF Handled THEN
      EXIT(TRUE);
    
    EXIT(CopyReportSelectionToReportSelection(ReportSelections));
Table<Certificate of Supply>.PROCEDURE<OnAfterInitFromPurchase>
  Raised in: Table<Certificate of Supply>.PROCEDURE<InitFromPurchase>
    Code lines:
    ...
      "Customer/Vendor Name" := ReturnShipmentHeader."Ship-to Name";
      "Shipment Method Code" := ReturnShipmentHeader."Shipment Method Code";
      "Shipment/Posting Date" := ReturnShipmentHeader."Posting Date";
      "Ship-to Country/Region Code" := ReturnShipmentHeader."Ship-to Country/Region Code";
      "Customer/Vendor No." := ReturnShipmentHeader."Pay-to Vendor No.";
      OnAfterInitFromPurchase(Rec,ReturnShipmentHeader); <=====================
      INSERT(TRUE);
    END
Table<Certificate of Supply>.PROCEDURE<OnAfterInitFromSales>
  Raised in: Table<Certificate of Supply>.PROCEDURE<InitFromSales>
    Code lines:
    ...
      "Customer/Vendor Name" := SalesShipmentHeader."Ship-to Name";
      "Shipment Method Code" := SalesShipmentHeader."Shipment Method Code";
      "Shipment/Posting Date" := SalesShipmentHeader."Shipment Date";
      "Ship-to Country/Region Code" := SalesShipmentHeader."Ship-to Country/Region Code";
      "Customer/Vendor No." := SalesShipmentHeader."Bill-to Customer No.";
      OnAfterInitFromSales(Rec,SalesShipmentHeader); <=====================
      INSERT(TRUE);
    END
Table<Certificate of Supply>.PROCEDURE<OnAfterInitFromService>
  Raised in: Table<Certificate of Supply>.PROCEDURE<InitFromService>
    Code lines:
    ...
      "Customer/Vendor Name" := ServiceShipmentHeader."Ship-to Name";
      "Shipment Method Code" := '';
      "Shipment/Posting Date" := ServiceShipmentHeader."Posting Date";
      "Ship-to Country/Region Code" := ServiceShipmentHeader."Ship-to Country/Region Code";
      "Customer/Vendor No." := ServiceShipmentHeader."Bill-to Customer No.";
      OnAfterInitFromService(Rec,ServiceShipmentHeader); <=====================
      INSERT(TRUE);
    END
Table<Company Information>.PROCEDURE<OnAfterGetSystemIndicator>
  Raised in: Table<Company Information>.PROCEDURE<GetSystemIndicator>
    Code lines:
    ...
      "System Indicator"::Database:
        Text := GetDatabaseIndicatorText(FALSE);
      "System Indicator"::"Company+Database":
        Text := GetDatabaseIndicatorText(TRUE);
    END;
    OnAfterGetSystemIndicator(Text,Style) <=====================
Table<Language>.PROCEDURE<OnGetUserLanguageId>
  Raised in: Table<Language>.PROCEDURE<GetUserLanguage>
    Code lines:
    OnGetUserLanguageId(UserLanguageId,Handled); <=====================
    
    IF NOT Handled THEN
      UserLanguageId := GLOBALLANGUAGE;
    
    EXIT(GetLanguageCode(UserLanguageId));
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetBankAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetBankAccount>
    Code lines:
    ...
        BankAcc.TESTFIELD("Currency Code","Currency Code")
      ELSE
        "Currency Code" := BankAcc."Currency Code";
    ClearPostingGroups;
    
    OnAfterAccountNoOnValidateGetBankAccount(Rec,BankAcc,CurrFieldNo); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetBankBalAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetBankBalAccount>
    Code lines:
    ...
        BankAcc.TESTFIELD("Currency Code","Currency Code")
      ELSE
        "Currency Code" := BankAcc."Currency Code";
    ClearBalancePostingGroups;
    
    OnAfterAccountNoOnValidateGetBankBalAccount(Rec,BankAcc,CurrFieldNo); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetCustomerAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetCustomerAccount>
    Code lines:
    ...
      THEN
        ERROR('');
    VALIDATE("Payment Terms Code");
    CheckPaymentTolerance;
    
    OnAfterAccountNoOnValidateGetCustomerAccount(Rec,Cust,CurrFieldNo); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetCustomerBalAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetCustomerBalAccount>
    Code lines:
    ...
      THEN
        ERROR('');
    VALIDATE("Payment Terms Code");
    CheckPaymentTolerance;
    
    OnAfterAccountNoOnValidateGetCustomerBalAccount(Rec,Cust,CurrFieldNo); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetEmployeeAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetEmployeeAccount>
    Code lines:
    ...
    "Posting Group" := Employee."Employee Posting Group";
    SetSalespersonPurchaserCode(Employee."Salespers./Purch. Code","Salespers./Purch. Code");
    "Currency Code" := '';
    ClearPostingGroups;
    
    OnAfterAccountNoOnValidateGetEmployeeAccount(Rec,Employee); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetEmployeeBalAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetEmployeeBalAccount>
    Code lines:
    ...
    "Posting Group" := Employee."Employee Posting Group";
    SetSalespersonPurchaserCode(Employee."Salespers./Purch. Code","Salespers./Purch. Code");
    "Currency Code" := '';
    ClearBalancePostingGroups;
    
    OnAfterAccountNoOnValidateGetEmployeeBalAccount(Rec,Employee,CurrFieldNo); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetFAAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetFAAccount>
    Code lines:
    ...
    UpdateDescription(FA.Description);
    GetFADeprBook("Account No.");
    GetFAVATSetup;
    GetFAAddCurrExchRate;
    
    OnAfterAccountNoOnValidateGetFAAccount(Rec,FA); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetFABalAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetFABalAccount>
    Code lines:
    ...
      Description := FA.Description;
    GetFADeprBook("Bal. Account No.");
    GetFAVATSetup;
    GetFAAddCurrExchRate;
    
    OnAfterAccountNoOnValidateGetFABalAccount(Rec,FA); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetGLAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetGLAccount>
    Code lines:
    ...
    IF "Posting Date" <> 0D THEN
      IF "Posting Date" = CLOSINGDATE("Posting Date") THEN
        ClearPostingGroups;
    VALIDATE("Deferral Code",GLAcc."Default Deferral Template Code");
    
    OnAfterAccountNoOnValidateGetGLAccount(Rec,GLAcc); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetGLBalAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetGLBalAccount>
    Code lines:
    ...
    "Bal. Tax Group Code" := GLAcc."Tax Group Code";
    IF "Posting Date" <> 0D THEN
      IF "Posting Date" = CLOSINGDATE("Posting Date") THEN
        ClearBalancePostingGroups;
    
    OnAfterAccountNoOnValidateGetGLBalAccount(Rec,GLAcc); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetICPartnerAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetICPartnerAccount>
    Code lines:
    ...
    IF ("Bal. Account Type" = "Bal. Account Type"::"Bank Account") AND ("Currency Code" = '') THEN
      "Currency Code" := ICPartner."Currency Code";
    ClearPostingGroups;
    "IC Partner Code" := "Account No.";
    
    OnAfterAccountNoOnValidateGetICPartnerAccount(Rec,ICPartner); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetICPartnerBalAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetICPartnerBalAccount>
    Code lines:
    ...
    IF ("Account Type" = "Account Type"::"Bank Account") AND ("Currency Code" = '') THEN
      "Currency Code" := ICPartner."Currency Code";
    ClearBalancePostingGroups;
    "IC Partner Code" := "Bal. Account No.";
    
    OnAfterAccountNoOnValidateGetICPartnerBalAccount(Rec,ICPartner); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetVendorAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetVendorAccount>
    Code lines:
    ...
      THEN
        ERROR('');
    VALIDATE("Payment Terms Code");
    CheckPaymentTolerance;
    
    OnAfterAccountNoOnValidateGetVendorAccount(Rec,Vend,CurrFieldNo); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetVendorBalAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetVendorBalAccount>
    Code lines:
    ...
      THEN
        ERROR('');
    VALIDATE("Payment Terms Code");
    CheckPaymentTolerance;
    
    OnAfterAccountNoOnValidateGetVendorBalAccount(Rec,Vend,CurrFieldNo); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterClearBalPostingGroups>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<ClearBalancePostingGroups>
    Code lines:
    ...
    "Bal. Gen. Bus. Posting Group" := '';
    "Bal. Gen. Prod. Posting Group" := '';
    "Bal. VAT Bus. Posting Group" := '';
    "Bal. VAT Prod. Posting Group" := '';
    
    OnAfterClearBalPostingGroups(Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterClearCustApplnEntryFields>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<ClearCustApplnEntryFields>
    Code lines:
    CustLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
    CustLedgEntry."Accepted Payment Tolerance" := 0;
    CustLedgEntry."Amount to Apply" := 0;
    
    OnAfterClearCustApplnEntryFields(CustLedgEntry); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterClearEmplApplnEntryFields>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<ClearEmplApplnEntryFields>
    Code lines:
    EmplLedgEntry."Amount to Apply" := 0;
    
    OnAfterClearEmplApplnEntryFields(EmplLedgEntry); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterClearPostingGroups>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<ClearPostingGroups>
    Code lines:
    ...
    "Gen. Bus. Posting Group" := '';
    "Gen. Prod. Posting Group" := '';
    "VAT Bus. Posting Group" := '';
    "VAT Prod. Posting Group" := '';
    
    OnAfterClearPostingGroups(Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterClearVendApplnEntryFields>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<ClearVendApplnEntryFields>
    Code lines:
    VendLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
    VendLedgEntry."Accepted Payment Tolerance" := 0;
    VendLedgEntry."Amount to Apply" := 0;
    
    OnAfterClearVendApplnEntryFields(VendLedgEntry); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromCustLedgEntry>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyCustLedgEntry>
    Code lines:
    ...
    "Dimension Set ID" := CustLedgerEntry."Dimension Set ID";
    "Posting Group" := CustLedgerEntry."Customer Posting Group";
    "Source Type" := "Source Type"::Customer;
    "Source No." := CustLedgerEntry."Customer No.";
    
    OnAfterCopyGenJnlLineFromCustLedgEntry(CustLedgEntry,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromGenJnlAllocation>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromGenJnlAllocation>
    Code lines:
    ...
    "VAT %" := GenJnlAlloc."VAT %";
    "Source Currency Amount" := GenJnlAlloc."Additional-Currency Amount";
    Amount := GenJnlAlloc.Amount;
    "Amount (LCY)" := GenJnlAlloc.Amount;
    
    OnAfterCopyGenJnlLineFromGenJnlAllocation(GenJnlAlloc,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromInvPostBuffer>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromInvoicePostBuffer>
    Code lines:
    ...
    "VAT Amount" := InvoicePostBuffer."VAT Amount";
    "Source Curr. VAT Amount" := InvoicePostBuffer."VAT Amount (ACY)";
    "VAT Difference" := InvoicePostBuffer."VAT Difference";
    "VAT Base Before Pmt. Disc." := InvoicePostBuffer."VAT Base Before Pmt. Disc.";
    
    OnAfterCopyGenJnlLineFromInvPostBuffer(InvoicePostBuffer,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromInvPostBufferFA>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromInvoicePostBufferFA>
    Code lines:
    ...
    "Insurance No." := InvoicePostBuffer."Insurance No.";
    "Budgeted FA No." := InvoicePostBuffer."Budgeted FA No.";
    "Duplicate in Depreciation Book" := InvoicePostBuffer."Duplicate in Depreciation Book";
    "Use Duplication List" := InvoicePostBuffer."Use Duplication List";
    
    OnAfterCopyGenJnlLineFromInvPostBufferFA(InvoicePostBuffer,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPrepmtInvBuffer>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromPrepmtInvoiceBuffer>
    Code lines:
    ...
    "VAT Amount" := PrepmtInvLineBuffer."VAT Amount";
    "Source Curr. VAT Amount" := PrepmtInvLineBuffer."VAT Amount (ACY)";
    "VAT Difference" := PrepmtInvLineBuffer."VAT Difference";
    "VAT Base Before Pmt. Disc." := PrepmtInvLineBuffer."VAT Base Before Pmt. Disc.";
    
    OnAfterCopyGenJnlLineFromPrepmtInvBuffer(PrepmtInvLineBuffer,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPurchHeader>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromPurchHeader>
    Code lines:
    ...
    "Salespers./Purch. Code" := PurchHeader."Purchaser Code";
    "On Hold" := PurchHeader."On Hold";
    IF "Account Type" = "Account Type"::Vendor THEN
      "Posting Group" := PurchHeader."Vendor Posting Group";
    
    OnAfterCopyGenJnlLineFromPurchHeader(PurchHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPurchHeaderApplyTo>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromPurchHeaderApplyTo>
    Code lines:
    "Applies-to Doc. Type" := PurchHeader."Applies-to Doc. Type";
    "Applies-to Doc. No." := PurchHeader."Applies-to Doc. No.";
    "Applies-to ID" := PurchHeader."Applies-to ID";
    "Allow Application" := PurchHeader."Bal. Account No." = '';
    
    OnAfterCopyGenJnlLineFromPurchHeaderApplyTo(PurchHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPurchHeaderPayment>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromPurchHeaderPayment>
    Code lines:
    ...
    "Payment Discount %" := PurchHeader."Payment Discount %";
    "Creditor No." := PurchHeader."Creditor No.";
    "Payment Reference" := PurchHeader."Payment Reference";
    "Payment Method Code" := PurchHeader."Payment Method Code";
    
    OnAfterCopyGenJnlLineFromPurchHeaderPayment(PurchHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPurchHeaderPrepmt>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromPurchHeaderPrepmt>
    Code lines:
    ...
    "IC Partner Code" := PurchHeader."Buy-from IC Partner Code";
    "VAT Posting" := "VAT Posting"::"Manual VAT Entry";
    "System-Created Entry" := TRUE;
    Prepayment := TRUE;
    
    OnAfterCopyGenJnlLineFromPurchHeaderPrepmt(PurchHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPurchHeaderPrepmtPost>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromPurchHeaderPrepmtPost>
    Code lines:
    ...
    IF UsePmtDisc THEN BEGIN
      "Pmt. Discount Date" := PurchHeader."Prepmt. Pmt. Discount Date";
      "Payment Discount %" := PurchHeader."Prepmt. Payment Discount %";
    END;
    
    OnAfterCopyGenJnlLineFromPurchHeaderPrepmtPost(PurchHeader,Rec,UsePmtDisc); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromSalesHeader>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromSalesHeader>
    Code lines:
    ...
    "Salespers./Purch. Code" := SalesHeader."Salesperson Code";
    "On Hold" := SalesHeader."On Hold";
    IF "Account Type" = "Account Type"::Customer THEN
      "Posting Group" := SalesHeader."Customer Posting Group";
    
    OnAfterCopyGenJnlLineFromSalesHeader(SalesHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromSalesHeaderApplyTo>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromSalesHeaderApplyTo>
    Code lines:
    "Applies-to Doc. Type" := SalesHeader."Applies-to Doc. Type";
    "Applies-to Doc. No." := SalesHeader."Applies-to Doc. No.";
    "Applies-to ID" := SalesHeader."Applies-to ID";
    "Allow Application" := SalesHeader."Bal. Account No." = '';
    
    OnAfterCopyGenJnlLineFromSalesHeaderApplyTo(SalesHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromSalesHeaderPayment>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromSalesHeaderPayment>
    Code lines:
    ...
    "Payment Method Code" := SalesHeader."Payment Method Code";
    "Pmt. Discount Date" := SalesHeader."Pmt. Discount Date";
    "Payment Discount %" := SalesHeader."Payment Discount %";
    "Direct Debit Mandate ID" := SalesHeader."Direct Debit Mandate ID";
    
    OnAfterCopyGenJnlLineFromSalesHeaderPayment(SalesHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromSalesHeaderPrepmt>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromSalesHeaderPrepmt>
    Code lines:
    ...
    "IC Partner Code" := SalesHeader."Sell-to IC Partner Code";
    "VAT Posting" := "VAT Posting"::"Manual VAT Entry";
    "System-Created Entry" := TRUE;
    Prepayment := TRUE;
    
    OnAfterCopyGenJnlLineFromSalesHeaderPrepmt(SalesHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromSalesHeaderPrepmtPost>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromSalesHeaderPrepmtPost>
    Code lines:
    ...
    IF UsePmtDisc THEN BEGIN
      "Pmt. Discount Date" := SalesHeader."Prepmt. Pmt. Discount Date";
      "Payment Discount %" := SalesHeader."Prepmt. Payment Discount %";
    END;
    
    OnAfterCopyGenJnlLineFromSalesHeaderPrepmtPost(SalesHeader,Rec,UsePmtDisc); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromServHeader>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromServiceHeader>
    Code lines:
    ...
    "Posting No. Series" := ServiceHeader."Posting No. Series";
    "Ship-to/Order Address Code" := ServiceHeader."Ship-to Code";
    "EU 3-Party Trade" := ServiceHeader."EU 3-Party Trade";
    "Salespers./Purch. Code" := ServiceHeader."Salesperson Code";
    
    OnAfterCopyGenJnlLineFromServHeader(ServiceHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromServHeaderApplyTo>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromServiceHeaderApplyTo>
    Code lines:
    "Applies-to Doc. Type" := ServiceHeader."Applies-to Doc. Type";
    "Applies-to Doc. No." := ServiceHeader."Applies-to Doc. No.";
    "Applies-to ID" := ServiceHeader."Applies-to ID";
    "Allow Application" := ServiceHeader."Bal. Account No." = '';
    
    OnAfterCopyGenJnlLineFromServHeaderApplyTo(ServiceHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromServHeaderPayment>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromServiceHeaderPayment>
    Code lines:
    ...
    "Payment Terms Code" := ServiceHeader."Payment Terms Code";
    "Payment Method Code" := ServiceHeader."Payment Method Code";
    "Pmt. Discount Date" := ServiceHeader."Pmt. Discount Date";
    "Payment Discount %" := ServiceHeader."Payment Discount %";
    
    OnAfterCopyGenJnlLineFromServHeaderPayment(ServiceHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[3] := No3;
    TableID[4] := Type4;
    No[4] := No4;
    TableID[5] := Type5;
    No[5] := No5;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
Table<Gen. Journal Line>.PROCEDURE<OnAfterCreateTempJobJnlLine>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CreateTempJobJnlLine>
    Code lines:
    ...
      TempJobJnlLine."Line Discount %" := xRec."Job Line Discount %";
      TempJobJnlLine."Line Discount Amount" := xRec."Job Line Discount Amount";
      TempJobJnlLine.VALIDATE("Unit Price");
    END;
    
    OnAfterCreateTempJobJnlLine(TempJobJnlLine,Rec,xRec,CurrFieldNo); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterSetupNewLine>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    ...
    IF GenJnlBatch."Suggest Balancing Amount" THEN
      SuggestBalancingAmount(LastGenJnlLine,BottomLine);
    
    UpdateJournalBatchID;
    
    OnAfterSetupNewLine(Rec,GenJnlTemplate,GenJnlBatch,LastGenJnlLine,Balance,BottomLine); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterUpdatePricesFromJobJnlLine>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<UpdatePricesFromJobJnlLine>
    Code lines:
    ...
    "Job Line Amount (LCY)" := TempJobJnlLine."Line Amount (LCY)";
    "Job Line Disc. Amount (LCY)" := TempJobJnlLine."Line Discount Amount (LCY)";
    "Job Unit Cost (LCY)" := TempJobJnlLine."Unit Cost (LCY)";
    "Job Total Cost (LCY)" := TempJobJnlLine."Total Cost (LCY)";
    
    OnAfterUpdatePricesFromJobJnlLine(Rec,TempJobJnlLine); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterValidateApplyRequirements>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<ValidateApplyRequirements>
    Code lines:
    ...
                  Text015,TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                  EmplLedgEntry."Document Type",EmplLedgEntry."Document No.");
          END;
    END;
    
    OnAfterValidateApplyRequirements(TempGenJnlLine); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnBeforeCreateTempJobJnlLine>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CreateTempJobJnlLine>
    Code lines:
    OnBeforeCreateTempJobJnlLine(TempJobJnlLine,Rec,xRec,CurrFieldNo); <=====================
    
    TESTFIELD("Posting Date");
    CLEAR(TempJobJnlLine);
    TempJobJnlLine.DontCheckStdCost;
    TempJobJnlLine.VALIDATE("Job No.","Job No.");
    TempJobJnlLine.VALIDATE("Job Task No.","Job Task No.");
    IF CurrFieldNo <> FIELDNO("Posting Date") THEN
      TempJobJnlLine.VALIDATE("Posting Date","Posting Date")
    ELSE
    ...
Table<Gen. Journal Line>.PROCEDURE<OnBeforeLookUpAppliesToDocCust>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<LookUpAppliesToDocCust>
    Code lines:
    OnBeforeLookUpAppliesToDocCust(Rec,AccNo); <=====================
    
    CLEAR(CustLedgEntry);
    CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive,"Due Date");
    IF AccNo <> '' THEN
      CustLedgEntry.SETRANGE("Customer No.",AccNo);
    CustLedgEntry.SETRANGE(Open,TRUE);
    IF "Applies-to Doc. No." <> '' THEN BEGIN
      CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
      CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
    ...
Table<Gen. Journal Line>.PROCEDURE<OnBeforeLookUpAppliesToDocEmpl>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<LookUpAppliesToDocEmpl>
    Code lines:
    OnBeforeLookUpAppliesToDocEmpl(Rec,AccNo); <=====================
    
    CLEAR(EmplLedgEntry);
    EmplLedgEntry.SETCURRENTKEY("Employee No.",Open,Positive);
    IF AccNo <> '' THEN
      EmplLedgEntry.SETRANGE("Employee No.",AccNo);
    EmplLedgEntry.SETRANGE(Open,TRUE);
    IF "Applies-to Doc. No." <> '' THEN BEGIN
      EmplLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
      EmplLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
    ...
Table<Gen. Journal Line>.PROCEDURE<OnBeforeLookUpAppliesToDocVend>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<LookUpAppliesToDocVend>
    Code lines:
    OnBeforeLookUpAppliesToDocVend(Rec,AccNo); <=====================
    
    CLEAR(VendLedgEntry);
    VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date");
    IF AccNo <> '' THEN
      VendLedgEntry.SETRANGE("Vendor No.",AccNo);
    VendLedgEntry.SETRANGE(Open,TRUE);
    IF "Applies-to Doc. No." <> '' THEN BEGIN
      VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
      VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
    ...
Table<Gen. Journal Line>.PROCEDURE<OnCheckGenJournalLinePostRestrictions>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<CheckRestrictions>
    Code lines:
    IF NOT PreviewMode THEN
      GenJournalLine.OnCheckGenJournalLinePostRestrictions; <=====================
Table<Gen. Journal Line>.PROCEDURE<OnCheckGenJournalLinePrintCheckRestrictions>
  Raised in: Codeunit<Document-Print>.PROCEDURE<PrintCheck>
    Code lines:
    GenJnlLine.COPY(NewGenJnlLine);
    GenJnlLine.OnCheckGenJournalLinePrintCheckRestrictions; <=====================
    OnBeforePrintCheck(GenJnlLine,IsPrinted);
    IF IsPrinted THEN
      EXIT;
    
    ReportSelections.Print(ReportSelections.Usage::"B.Check",GenJnlLine,0);
Table<Gen. Journal Line>.PROCEDURE<OnGenJnlLineGetVendorAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetVendorAccount>
    Code lines:
    ...
    CheckICPartner(Vend."IC Partner Code","Account Type","Account No.");
    UpdateDescription(Vend.Name);
    "Payment Method Code" := Vend."Payment Method Code";
    "Creditor No." := Vend."Creditor No.";
    
    OnGenJnlLineGetVendorAccount(Vend); <=====================
    
    VALIDATE("Recipient Bank Account",Vend."Preferred Bank Account Code");
    "Posting Group" := Vend."Vendor Posting Group";
    SetSalespersonPurchaserCode(Vend."Purchaser Code","Salespers./Purch. Code");
    ...
Table<Gen. Journal Line>.PROCEDURE<OnMoveGenJournalLine>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostGLAcc>
    Code lines:
    ...
      InitVAT(GenJnlLine,GLEntry,VATPostingSetup);
      InsertGLEntry(GenJnlLine,GLEntry,TRUE);
      PostJob(GenJnlLine,GLEntry);
      PostVAT(GenJnlLine,GLEntry,VATPostingSetup);
      DeferralPosting("Deferral Code","Source Code","Account No.",GenJnlLine,Balancing);
      OnMoveGenJournalLine(GLEntry.RECORDID); <=====================
    END;
    
    OnAfterPostGLAcc(GenJnlLine);
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostCust>
    Code lines:
    ...
      IF DtldLedgEntryInserted THEN
        IF IsTempGLEntryBufEmpty THEN
          DtldCustLedgEntry.SetZeroTransNo(NextTransactionNo);
    
      DeferralPosting("Deferral Code","Source Code",ReceivablesAccount,GenJnlLine,Balancing);
      OnMoveGenJournalLine(CustLedgEntry.RECORDID); <=====================
    END;
    
    OnAfterPostCust(GenJnlLine,Balancing);
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostVend>
    Code lines:
    ...
    
      IF DtldLedgEntryInserted THEN
        IF IsTempGLEntryBufEmpty THEN
          DtldVendLedgEntry.SetZeroTransNo(NextTransactionNo);
      DeferralPosting("Deferral Code","Source Code",PayablesAccount,GenJnlLine,Balancing);
      OnMoveGenJournalLine(VendLedgEntry.RECORDID); <=====================
    END;
    
    OnAfterPostVend(GenJnlLine,Balancing);
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostEmployee>
    Code lines:
    ...
      // Posting GL Entry
      IF DtldLedgEntryInserted THEN
        IF IsTempGLEntryBufEmpty THEN
          DtldEmplLedgEntry.SetZeroTransNo(NextTransactionNo);
    
      OnMoveGenJournalLine(EmployeeLedgerEntry.RECORDID); <=====================
    END;
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostBankAcc>
    Code lines:
    ...
      BankAccPostingGr.TESTFIELD("G/L Bank Account No.");
      CreateGLEntryBalAcc(
        GenJnlLine,BankAccPostingGr."G/L Bank Account No.","Amount (LCY)","Source Currency Amount",
        "Bal. Account Type","Bal. Account No.");
      DeferralPosting("Deferral Code","Source Code",BankAccPostingGr."G/L Bank Account No.",GenJnlLine,Balancing);
      OnMoveGenJournalLine(BankAccLedgEntry.RECORDID); <=====================
    END;
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostFixedAsset>
    Code lines:
    ...
      VATEntryGLEntryNo := GLEntry."Entry No.";
    TempGLEntryBuf."Entry No." := VATEntryGLEntryNo; // Used later in InsertVAT(): GLEntryVATEntryLink.InsertLink(TempGLEntryBuf."Entry No.",VATEntry."Entry No.")
    PostVAT(GenJnlLine,GLEntry,VATPostingSetup);
    
    FAJnlPostLine.UpdateRegNo(GLReg."No.");
    GenJnlLine.OnMoveGenJournalLine(GLEntry.RECORDID); <=====================
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CreateGLEntryBalAcc>
    Code lines:
    InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,AmountAddCurr,TRUE,TRUE);
    GLEntry."Bal. Account Type" := BalAccType;
    GLEntry."Bal. Account No." := BalAccNo;
    InsertGLEntry(GenJnlLine,GLEntry,TRUE);
    GenJnlLine.OnMoveGenJournalLine(GLEntry.RECORDID); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromJobJnlLine>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromJobJnlLine>
    Code lines:
    ...
    "Amount (ACY)" := JobJnlLine."Total Cost";
    "Value Entry Type" := "Value Entry Type"::"Direct Cost";
    "Job No." := JobJnlLine."Job No.";
    "Job Task No." := JobJnlLine."Job Task No.";
    
    OnAfterCopyItemJnlLineFromJobJnlLine(Rec,JobJnlLine); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromPurchHeader>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromPurchHeader>
    Code lines:
    ...
    "Country/Region Code" := PurchHeader."Buy-from Country/Region Code";
    "Reason Code" := PurchHeader."Reason Code";
    "Source Currency Code" := PurchHeader."Currency Code";
    "Shpt. Method Code" := PurchHeader."Shipment Method Code";
    
    OnAfterCopyItemJnlLineFromPurchHeader(Rec,PurchHeader); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromPurchLine>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromPurchLine>
    Code lines:
    ...
    "Purchasing Code" := PurchLine."Purchasing Code";
    "Indirect Cost %" := PurchLine."Indirect Cost %";
    "Overhead Rate" := PurchLine."Overhead Rate";
    "Return Reason Code" := PurchLine."Return Reason Code";
    
    OnAfterCopyItemJnlLineFromPurchLine(Rec,PurchLine); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromSalesHeader>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromSalesHeader>
    Code lines:
    ...
    "Salespers./Purch. Code" := SalesHeader."Salesperson Code";
    "Reason Code" := SalesHeader."Reason Code";
    "Source Currency Code" := SalesHeader."Currency Code";
    "Shpt. Method Code" := SalesHeader."Shipment Method Code";
    
    OnAfterCopyItemJnlLineFromSalesHeader(Rec,SalesHeader); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromSalesLine>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromSalesLine>
    Code lines:
    ...
    "Value Entry Type" := "Value Entry Type"::"Direct Cost";
    "Source Type" := "Source Type"::Customer;
    "Source No." := SalesLine."Sell-to Customer No.";
    "Invoice-to Source No." := SalesLine."Bill-to Customer No.";
    
    OnAfterCopyItemJnlLineFromSalesLine(Rec,SalesLine); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServHeader>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromServHeader>
    Code lines:
    ...
    "Reason Code" := ServiceHeader."Reason Code";
    "Source Type" := "Source Type"::Customer;
    "Source No." := ServiceHeader."Customer No.";
    "Shpt. Method Code" := ServiceHeader."Shipment Method Code";
    
    OnAfterCopyItemJnlLineFromServHeader(Rec,ServiceHeader); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServLine>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromServLine>
    Code lines:
    ...
    "Order No." := ServiceLine."Document No.";
    "Order Line No." := ServiceLine."Line No.";
    "Job No." := ServiceLine."Job No.";
    "Job Task No." := ServiceLine."Job Task No.";
    
    OnAfterCopyItemJnlLineFromServLine(Rec,ServiceLine); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServShptHeader>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromServShptHeader>
    Code lines:
    ...
    "Country/Region Code" := ServShptHeader."VAT Country/Region Code";
    "Source Posting Group" := ServShptHeader."Customer Posting Group";
    "Salespers./Purch. Code" := ServShptHeader."Salesperson Code";
    "Reason Code" := ServShptHeader."Reason Code";
    
    OnAfterCopyItemJnlLineFromServShptHeader(Rec,ServShptHeader); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServShptLine>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromServShptLine>
    Code lines:
    ...
    "Qty. per Unit of Measure" := ServShptLine."Qty. per Unit of Measure";
    "Item Category Code" := ServShptLine."Item Category Code";
    Nonstock := ServShptLine.Nonstock;
    "Return Reason Code" := ServShptLine."Return Reason Code";
    
    OnAfterCopyItemJnlLineFromServShptLine(Rec,ServShptLine); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServShptLineUndo>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromServShptLineUndo>
    Code lines:
    ...
    "Derived from Blanket Order" := FALSE;
    "Item Category Code" := ServShptLine."Item Category Code";
    Nonstock := ServShptLine.Nonstock;
    "Return Reason Code" := ServShptLine."Return Reason Code";
    
    OnAfterCopyItemJnlLineFromServShptLineUndo(Rec,ServShptLine); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyTrackingFromSpec>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyTrackingFromSpec>
    Code lines:
    "Serial No." := TrackingSpecification."Serial No.";
    "Lot No." := TrackingSpecification."Lot No.";
    
    OnAfterCopyTrackingFromSpec(Rec,TrackingSpecification); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Item Journal Line>.PROCEDURE<CreateDim>
    Code lines:
    CreateTableArray(TableID,Type1,Type2,Type3);
    CreateCodeArray(No,No1,No2,No3);
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    PickDimension(TableID,No,0,0);
  Raised in: Table<Item Journal Line>.PROCEDURE<CreateDimWithProdOrderLine>
    Code lines:
    ...
      IF ProdOrderLine.GET(ProdOrderLine.Status::Released,"Order No.","Order Line No.") THEN
        InheritFromDimSetID := ProdOrderLine."Dimension Set ID";
    
    CreateTableArray(TableID,DATABASE::"Work Center",DATABASE::"Salesperson/Purchaser",0);
    CreateCodeArray(No,"Work Center No.","Salespers./Purch. Code",'');
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    PickDimension(TableID,No,InheritFromDimSetID,DATABASE::Item);
Table<Item Journal Line>.PROCEDURE<OnAfterOnValidateItemNoAssignByEntryType>
  Raised in: Table<Item Journal Line>.Field<Item No.>.<OnValidate>
    Code lines:
    ...
      "Unit of Measure Code" := Item."Base Unit of Measure";
    VALIDATE("Unit of Measure Code");
    IF "Variant Code" <> '' THEN
      VALIDATE("Variant Code");
    
    OnAfterOnValidateItemNoAssignByEntryType(ItemJnlLine,Item); <=====================
    
    CheckItemAvailable(FIELDNO("Item No."));
    
    IF ((NOT ("Order Type" IN ["Order Type"::Production,"Order Type"::Assembly])) OR ("Order No." = '')) AND NOT "Phys. Inventory"
    ...
Table<Item Journal Line>.PROCEDURE<OnAfterSetupNewLine>
  Raised in: Table<Item Journal Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    ...
    
    IF Location.GET("Location Code") THEN
      IF  Location."Directed Put-away and Pick" THEN
        "Location Code" := '';
    
    OnAfterSetupNewLine(Rec,LastItemJnlLine); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterUpdateAmount>
  Raised in: Table<Item Journal Line>.PROCEDURE<UpdateAmount>
    Code lines:
    Amount := ROUND(Quantity * "Unit Amount");
    
    OnAfterUpdateAmount(Rec); <=====================
Table<Item Journal Line>.PROCEDURE<OnBeforeRetrieveCosts>
  Raised in: Table<Item Journal Line>.PROCEDURE<RetrieveCosts>
    Code lines:
    IsHandled := FALSE;
    OnBeforeRetrieveCosts(Rec,UnitCost,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF ("Value Entry Type" <> "Value Entry Type"::"Direct Cost") OR
       ("Item Charge No." <> '')
    THEN
      EXIT;
    
    ...
Table<Item Journal Line>.PROCEDURE<OnBeforeVerifyReservedQty>
  Raised in: Table<Item Journal Line>.<OnModify>
    Code lines:
    OnBeforeVerifyReservedQty(Rec,xRec,0); <=====================
    ReserveItemJnlLine.VerifyChange(Rec,xRec);
    CheckPlanningAssignment;
  Raised in: Table<Item Journal Line>.Field<Item No.>.<OnValidate>
    Code lines:
    ...
      CreateDim(
        DATABASE::Item,"Item No.",
        DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
        DATABASE::"Work Center","Work Center No.");
    
    OnBeforeVerifyReservedQty(Rec,xRec,FIELDNO("Item No.")); <=====================
    ReserveItemJnlLine.VerifyChange(Rec,xRec);
Table<Item Journal Line>.PROCEDURE<OnCheckItemJournalLinePostRestrictions>
  Raised in: Table<Item Journal Line>.PROCEDURE<CheckItemJournalLineRestriction>
    Code lines:
    OnCheckItemJournalLinePostRestrictions; <=====================
Table<Config. Line>.PROCEDURE<OnBeforeShowTableData>
  Raised in: Table<Config. Line>.PROCEDURE<ShowTableData>
    Code lines:
    IsHandled := FALSE;
    OnBeforeShowTableData(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF ("Line Type" = "Line Type"::Table) AND ("Page ID" <> 0) THEN
      PAGE.RUN("Page ID");
Table<Config. Table Processing Rule>.PROCEDURE<OnDoesTableHaveCustomRuleInRapidStart>
  Raised in: Table<Config. Table Processing Rule>.PROCEDURE<DoesTableHaveCustomRuleInRapidStart>
    Code lines:
    OnDoesTableHaveCustomRuleInRapidStart("Table ID",Result); <=====================
Table<BOM Component>.PROCEDURE<OnAfterCopyFromItem>
  Raised in: Table<BOM Component>.PROCEDURE<CopyFromItem>
    Code lines:
    ...
    Item.FIND;
    ParentItem.FIND;
    IF ParentItem."Low-Level Code" >= Item."Low-Level Code" THEN
      ERROR(Text001,"No.");
    
    OnAfterCopyFromItem(Rec,Item); <=====================
Table<BOM Component>.PROCEDURE<OnAfterCopyFromResource>
  Raised in: Table<BOM Component>.PROCEDURE<CopyFromResource>
    Code lines:
    Res.GET("No.");
    "Assembly BOM" := FALSE;
    Description := Res.Name;
    "Unit of Measure Code" := Res."Base Unit of Measure";
    
    OnAfterCopyFromResource(Rec,Res); <=====================
Table<Assembly Header>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Assembly Header>.PROCEDURE<CreateDim>
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,SourceCodeSetup.Assembly,
    ...
Table<Assembly Header>.PROCEDURE<OnAfterInitRecord>
  Raised in: Table<Assembly Header>.PROCEDURE<InitRecord>
    Code lines:
    ...
    IF "Ending Date" = 0D THEN
      "Ending Date" := WORKDATE;
    
    SetDefaultLocation;
    
    OnAfterInitRecord(Rec); <=====================
Table<Assembly Line>.PROCEDURE<OnAfterCopyFromItem>
  Raised in: Table<Assembly Line>.PROCEDURE<CopyFromItem>
    Code lines:
    ...
    Reserve := Item.Reserve;
    VALIDATE(Quantity);
    VALIDATE("Quantity to Consume",
      MinValue(MaxQtyToConsume,CalcQuantity("Quantity per",AssemblyHeader."Quantity to Assemble")));
    
    OnAfterCopyFromItem(Rec,Item,AssemblyHeader); <=====================
Table<Assembly Line>.PROCEDURE<OnAfterCopyFromResource>
  Raised in: Table<Assembly Line>.PROCEDURE<CopyFromResource>
    Code lines:
    ...
    CreateDim(DATABASE::Resource,"No.",AssemblyHeader."Dimension Set ID");
    VALIDATE(Quantity);
    VALIDATE("Quantity to Consume",
      MinValue(MaxQtyToConsume,CalcQuantity("Quantity per",AssemblyHeader."Quantity to Assemble")));
    
    OnAfterCopyFromResource(Rec,Resource,AssemblyHeader); <=====================
Table<Assembly Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Assembly Line>.PROCEDURE<CreateDim>
    Code lines:
    ...
      EXIT;
    
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    AssemblySetup.GET;
    ...
Table<Assemble-to-Order Link>.PROCEDURE<OnAfterRemoveTrackingFromReservation>
  Raised in: Table<Assemble-to-Order Link>.PROCEDURE<RemoveTrackingFromReservation>
    Code lines:
    ...
      ReservEntry,TrackingSpecification,
      TrackingSpecification."Quantity (Base)",QtyToAdd,
      ItemTrackingCodeRec."SN Specific Tracking",
      ItemTrackingCodeRec."Lot Specific Tracking");
    
    OnAfterRemoveTrackingFromReservation(ReservEntry,TrackingSpecification,ItemTrackingCodeRec); <=====================
Table<Assemble-to-Order Link>.PROCEDURE<OnAfterUpdateAsm>
  Raised in: Table<Assemble-to-Order Link>.PROCEDURE<UpdateAsm>
    Code lines:
    ...
    INSERT;
    AsmHeader."Shortcut Dimension 1 Code" := NewSalesLine."Shortcut Dimension 1 Code";
    AsmHeader."Shortcut Dimension 2 Code" := NewSalesLine."Shortcut Dimension 2 Code";
    AsmHeader.MODIFY(TRUE);
    
    OnAfterUpdateAsm(AsmHeader); <=====================
Table<Assemble-to-Order Link>.PROCEDURE<OnBeforeRemoveTrackingFromReservation>
  Raised in: Table<Assemble-to-Order Link>.PROCEDURE<RemoveTrackingFromReservation>
    Code lines:
    OnBeforeRemoveTrackingFromReservation(ReservEntry,ItemTrackingCode); <=====================
    
    ReservEntry.SetPointerFilter;
    ReservEntry.SetTrackingFilterFromReservEntry(ReservEntry);
    
    TrackingSpecification.TRANSFERFIELDS(ReservEntry);
    TrackingSpecification.SetTracking('','',0D,0D);
    
    ItemTrackingCodeRec.GET(ItemTrackingCode);
    ReservEngineMgt.AddItemTrackingToTempRecSet(
    ...
Table<Time Sheet Detail>.PROCEDURE<OnAfterCopyFromTimeSheetLine>
  Raised in: Table<Time Sheet Detail>.PROCEDURE<CopyFromTimeSheetLine>
    Code lines:
    ...
    "Service Order Line No." := TimeSheetLine."Service Order Line No.";
    "Assembly Order No." := TimeSheetLine."Assembly Order No.";
    "Assembly Order Line No." := TimeSheetLine."Assembly Order Line No.";
    Status := TimeSheetLine.Status;
    
    OnAfterCopyFromTimeSheetLine(Rec,TimeSheetLine); <=====================
Table<Custom Report Layout>.PROCEDURE<OnAfterReportGetCustomRdlc>
  Raised in: Table<Custom Report Layout>.PROCEDURE<GetCustomRdlc>
    Code lines:
    ...
    END ELSE BEGIN
      REPORT.RDLCLAYOUT(ReportID,InStream);
      InStream.READ(RdlcTxt);
    END;
    
    OnAfterReportGetCustomRdlc("Report ID",RdlcTxt); <=====================
Table<Routing Line>.PROCEDURE<OnAfterMachineCtrTransferFields>
  Raised in: Table<Routing Line>.PROCEDURE<MachineCtrTransferFields>
    Code lines:
    ...
    "Minimum Process Time" := MachineCenter."Minimum Process Time";
    "Maximum Process Time" := MachineCenter."Maximum Process Time";
    "Concurrent Capacities" := MachineCenter."Concurrent Capacities";
    "Send-Ahead Quantity" := MachineCenter."Send-Ahead Quantity";
    
    OnAfterMachineCtrTransferFields(Rec,WorkCenter,MachineCenter); <=====================
Table<Routing Line>.PROCEDURE<OnAfterWorkCenterTransferFields>
  Raised in: Table<Routing Line>.PROCEDURE<WorkCenterTransferFields>
    Code lines:
    ...
      "Wait Time Unit of Meas. Code" := WorkCenter."Unit of Measure Code";
    IF "Move Time Unit of Meas. Code" = '' THEN
      "Move Time Unit of Meas. Code" := WorkCenter."Unit of Measure Code";
    Description := WorkCenter.Name;
    
    OnAfterWorkCenterTransferFields(Rec,WorkCenter); <=====================
Table<Planning Component>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Planning Component>.PROCEDURE<CreateDim>
    Code lines:
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    GetReqLine;
    DimensionSetIDArr[1] :=
      DimMgt.GetRecDefaultDimID(Rec,CurrFieldNo,TableID,No,'',"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
    DimensionSetIDArr[2] := ReqLine."Dimension Set ID";
    ...
Table<Planning Component>.PROCEDURE<OnAfterTransferFromAsmLine>
  Raised in: Table<Planning Component>.PROCEDURE<TransferFromAsmLine>
    Code lines:
    ...
    "Quantity (Base)" := AsmLine."Quantity per";
    "Expected Quantity (Base)" := AsmLine."Quantity (Base)";
    "Original Expected Qty. (Base)" := AsmLine."Quantity (Base)";
    UpdateDatetime;
    
    OnAfterTransferFromAsmLine(Rec,AsmLine); <=====================
Table<Planning Component>.PROCEDURE<OnAfterTransferFromComponent>
  Raised in: Table<Planning Component>.PROCEDURE<TransferFromComponent>
    Code lines:
    ...
    "Quantity (Base)" := ProdOrderComp."Quantity (Base)";
    "Expected Quantity (Base)" := ProdOrderComp."Expected Qty. (Base)";
    "Original Expected Qty. (Base)" := ProdOrderComp."Expected Qty. (Base)";
    UpdateDatetime;
    
    OnAfterTransferFromComponent(Rec,ProdOrderComp); <=====================
Table<Planning Routing Line>.PROCEDURE<OnAfterMachineCtrTransferFields>
  Raised in: Table<Planning Routing Line>.PROCEDURE<MachineCtrTransferfields>
    Code lines:
    ...
    "Unit Cost per" := MachineCenter."Unit Cost";
    "Direct Unit Cost" := MachineCenter."Direct Unit Cost";
    "Indirect Cost %" := MachineCenter."Indirect Cost %";
    "Overhead Rate" := MachineCenter."Overhead Rate";
    
    OnAfterMachineCtrTransferFields(Rec,WorkCenter,MachineCenter); <=====================
Table<Planning Routing Line>.PROCEDURE<OnAfterTransferFromProdOrderRouting>
  Raised in: Table<Planning Routing Line>.PROCEDURE<TransferFromProdOrderRouting>
    Code lines:
    ...
    "Ending Time" := ProdOrderRoutingLine."Ending Time";
    "Ending Date" := ProdOrderRoutingLine."Ending Date";
    UpdateDatetime;
    VALIDATE("Unit Cost per");
    
    OnAfterTransferFromProdOrderRouting(Rec,ProdOrderRoutingLine); <=====================
Table<Planning Routing Line>.PROCEDURE<OnAfterWorkCenterTransferFields>
  Raised in: Table<Planning Routing Line>.PROCEDURE<WorkCenterTransferfields>
    Code lines:
    ...
    "Unit Cost per" := WorkCenter."Unit Cost";
    "Direct Unit Cost" := WorkCenter."Direct Unit Cost";
    "Indirect Cost %" := WorkCenter."Indirect Cost %";
    "Overhead Rate" := WorkCenter."Overhead Rate";
    
    OnAfterWorkCenterTransferFields(Rec,WorkCenter); <=====================
Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromAsmHeader>
  Raised in: Table<Inventory Profile>.PROCEDURE<TransferFromAsmHeader>
    Code lines:
    ...
    "Qty. per Unit of Measure" := AsmHeader."Qty. per Unit of Measure";
    "Planning Flexibility" := AsmHeader."Planning Flexibility";
    IsSupply := "Untracked Quantity" >= 0;
    "Due Date" := AsmHeader."Due Date";
    
    OnAfterTransferFromAsmHeader(Rec,AsmHeader); <=====================
Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromAsmLine>
  Raised in: Table<Inventory Profile>.PROCEDURE<TransferFromAsmLine>
    Code lines:
    ...
    "Qty. per Unit of Measure" := AsmLine."Qty. per Unit of Measure";
    IsSupply := "Untracked Quantity" < 0;
    "Due Date" := AsmLine."Due Date";
    "Planning Flexibility" := "Planning Flexibility"::None;
    
    OnAfterTransferFromAsmLine(Rec,AsmLine); <=====================
Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromComponent>
  Raised in: Table<Inventory Profile>.PROCEDURE<TransferFromComponent>
    Code lines:
    ...
    "Remaining Quantity (Base)" := ProdOrderComp."Remaining Qty. (Base)";
    "Unit of Measure Code" := ProdOrderComp."Unit of Measure Code";
    "Qty. per Unit of Measure" := ProdOrderComp."Qty. per Unit of Measure";
    IsSupply := "Untracked Quantity" < 0;
    
    OnAfterTransferFromComponent(Rec,ProdOrderComp); <=====================
Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromInboundTransfer>
  Raised in: Table<Inventory Profile>.PROCEDURE<TransferFromInboundTransfer>
    Code lines:
    ...
    IsSupply := "Untracked Quantity" >= 0;
    "Starting Date" := TransLine."Shipment Date";
    "Due Date" := TransLine."Receipt Date";
    "Planning Flexibility" := TransLine."Planning Flexibility";
    
    OnAfterTransferFromInboundTransfer(Rec,TransLine); <=====================
Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromItemLedgerEntry>
  Raised in: Table<Inventory Profile>.PROCEDURE<TransferFromItemLedgerEntry>
    Code lines:
    ...
    "Serial No." := ItemLedgerEntry."Serial No.";
    IF TrackingExists THEN
      "Tracking Reference" := "Line No.";
    "Planning Flexibility" := "Planning Flexibility"::None;
    
    OnAfterTransferFromItemLedgerEntry(Rec,ItemLedgerEntry); <=====================
Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromJobPlanningLine>
  Raised in: Table<Inventory Profile>.PROCEDURE<TransferFromJobPlanningLine>
    Code lines:
    ...
    "Qty. per Unit of Measure" := JobPlanningLine."Qty. per Unit of Measure";
    IsSupply := "Untracked Quantity" < 0;
    "Due Date" := JobPlanningLine."Planning Date";
    "Planning Flexibility" := "Planning Flexibility"::None;
    
    OnAfterTransferFromJobPlanningLine(Rec,JobPlanningLine); <=====================
Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromOutboundTransfer>
  Raised in: Table<Inventory Profile>.PROCEDURE<TransferFromOutboundTransfer>
    Code lines:
    ...
    "Qty. per Unit of Measure" := TransLine."Qty. per Unit of Measure";
    IsSupply := "Untracked Quantity" < 0;
    "Due Date" := TransLine."Shipment Date";
    "Planning Flexibility" := TransLine."Planning Flexibility";
    
    OnAfterTransferFromOutboundTransfer(Rec,TransLine); <=====================
Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromOutboundTransfPlan>
  Raised in: Table<Inventory Profile>.PROCEDURE<TransferFromOutboundTransfPlan>
    Code lines:
    ...
    "Unit of Measure Code" := RequisitionLine."Unit of Measure Code";
    "Qty. per Unit of Measure" := RequisitionLine."Qty. per Unit of Measure";
    IsSupply := "Untracked Quantity" <= 0;
    "Due Date" := RequisitionLine."Transfer Shipment Date";
    
    OnAfterTransferFromOutboundTransfPlan(Rec,RequisitionLine); <=====================
Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromPlanComponent>
  Raised in: Table<Inventory Profile>.PROCEDURE<TransferFromPlanComponent>
    Code lines:
    ...
    "Remaining Quantity (Base)" := PlanningComponent."Expected Quantity (Base)";
    "Unit of Measure Code" := PlanningComponent."Unit of Measure Code";
    "Qty. per Unit of Measure" := PlanningComponent."Qty. per Unit of Measure";
    IsSupply := "Untracked Quantity" < 0;
    
    OnAfterTransferFromPlanComponent(Rec,PlanningComponent); <=====================
Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromProdOrderLine>
  Raised in: Table<Inventory Profile>.PROCEDURE<TransferFromProdOrderLine>
    Code lines:
    ...
    "Remaining Quantity (Base)" := ProdOrderLine."Remaining Qty. (Base)";
    "Unit of Measure Code" := ProdOrderLine."Unit of Measure Code";
    "Qty. per Unit of Measure" := ProdOrderLine."Qty. per Unit of Measure";
    IsSupply := "Untracked Quantity" >= 0;
    
    OnAfterTransferFromProdOrderLine(Rec,ProdOrderLine); <=====================
Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromPurchaseLine>
  Raised in: Table<Inventory Profile>.PROCEDURE<TransferFromPurchaseLine>
    Code lines:
    ...
    IsSupply := "Untracked Quantity" >= 0;
    "Due Date" := PurchaseLine."Expected Receipt Date";
    "Drop Shipment" := PurchaseLine."Drop Shipment";
    "Special Order" := PurchaseLine."Special Order";
    
    OnAfterTransferFromPurchaseLine(Rec,PurchaseLine); <=====================
Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromRequisitionLine>
  Raised in: Table<Inventory Profile>.PROCEDURE<TransferFromRequisitionLine>
    Code lines:
    ...
    "Qty. per Unit of Measure" := RequisitionLine."Qty. per Unit of Measure";
    IsSupply := "Untracked Quantity" >= 0;
    "Due Date" := RequisitionLine."Due Date";
    "Planning Flexibility" := RequisitionLine."Planning Flexibility";
    
    OnAfterTransferFromRequisitionLine(Rec,RequisitionLine); <=====================
Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromSalesLine>
  Raised in: Table<Inventory Profile>.PROCEDURE<TransferFromSalesLine>
    Code lines:
    ...
      "Ref. Blanket Order No." := SalesLine."Blanket Order No.";
    END;
    "Drop Shipment" := SalesLine."Drop Shipment";
    "Special Order" := SalesLine."Special Order";
    
    OnAfterTransferFromSalesLine(Rec,SalesLine); <=====================
Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromServLine>
  Raised in: Table<Inventory Profile>.PROCEDURE<TransferFromServLine>
    Code lines:
    ...
    "Qty. per Unit of Measure" := ServLine."Qty. per Unit of Measure";
    IsSupply := "Untracked Quantity" < 0;
    "Due Date" := ServLine."Needed by Date";
    "Planning Flexibility" := "Planning Flexibility"::None;
    
    OnAfterTransferFromServLine(Rec,ServLine); <=====================
Table<Order Promising Line>.PROCEDURE<OnAfterTransferFromJobPlanningLine>
  Raised in: Table<Order Promising Line>.PROCEDURE<TransferFromJobPlanningLine>
    Code lines:
    ...
    Quantity := JobPlanningLine."Remaining Qty.";
    "Unit of Measure Code" := JobPlanningLine."Unit of Measure Code";
    "Qty. per Unit of Measure" := JobPlanningLine."Qty. per Unit of Measure";
    "Quantity (Base)" := JobPlanningLine."Remaining Qty. (Base)";
    
    OnAfterTransferFromJobPlanningLine(Rec,JobPlanningLine); <=====================
Table<Order Promising Line>.PROCEDURE<OnAfterTransferFromSalesLine>
  Raised in: Table<Order Promising Line>.PROCEDURE<TransferFromSalesLine>
    Code lines:
    ...
    Quantity := SalesLine."Outstanding Quantity";
    "Unit of Measure Code" := SalesLine."Unit of Measure Code";
    "Qty. per Unit of Measure" := SalesLine."Qty. per Unit of Measure";
    "Quantity (Base)" := SalesLine."Outstanding Qty. (Base)";
    
    OnAfterTransferFromSalesLine(Rec,SalesLine); <=====================
Table<Order Promising Line>.PROCEDURE<OnAfterTransferFromServLine>
  Raised in: Table<Order Promising Line>.PROCEDURE<TransferFromServLine>
    Code lines:
    ...
    Quantity := ServLine."Outstanding Quantity";
    "Unit of Measure Code" := ServLine."Unit of Measure Code";
    "Qty. per Unit of Measure" := ServLine."Qty. per Unit of Measure";
    "Quantity (Base)" := ServLine."Outstanding Qty. (Base)";
    
    OnAfterTransferFromServLine(Rec,ServLine); <=====================
