5584 published events found.
Number of times a publisher was raised: 
1 : Codeunit<Calc. G/L Acc. Where-Used>.PROCEDURE<OnAfterCheckPostingGroups>
1 : Codeunit<Calc. G/L Acc. Where-Used>.PROCEDURE<OnAfterFillTableBuffer>
1 : Codeunit<Calc. G/L Acc. Where-Used>.PROCEDURE<OnBeforeShowGLAccWhereUsed>
1 : Codeunit<Calc. G/L Acc. Where-Used>.PROCEDURE<OnShowExtensionPage>
1 : Codeunit<Job Calculate WIP>.PROCEDURE<OnInsertWIPGLOnBeforeGenJnPostLine>
1 : Codeunit<Job Post-Line>.PROCEDURE<OnAfterJobPlanningLineModify>
1 : Codeunit<Job Post-Line>.PROCEDURE<OnAfterPostInvoiceContractLine>
1 : Codeunit<Job Post-Line>.PROCEDURE<OnBeforeCheckItemQuantityPurchCredit>
1 : Codeunit<Job Post-Line>.PROCEDURE<OnBeforeJobPlanningLineUpdateQtyToInvoice>
1 : Codeunit<Job Post-Line>.PROCEDURE<OnBeforePostInvoiceContractLine>
1 : Codeunit<Job Post-Line>.PROCEDURE<OnBeforePostJobOnPurchaseLine>
1 : Codeunit<Job Post-Line>.PROCEDURE<OnBeforeValidateRelationship>
1 : Codeunit<Job Post-Line>.PROCEDURE<OnPostInvoiceContractLineBeforeCheckJobLine>
1 : Codeunit<Job Post-Line>.PROCEDURE<OnPostPurchaseGLAccountsOnBeforeJobJnlPostLine>
1 : Codeunit<Job Post-Line>.PROCEDURE<OnPostSalesGLAccountsOnBeforeJobJnlPostLine>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnAfterCreateSalesInvoiceLines>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnAfterCreateSalesLine>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnAfterOpenSalesInvoice>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnAfterTestSalesHeader>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeCreateNewInvoice>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeCreateSalesInvoiceJobTask>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeCreateSalesInvoiceLines>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeDeleteSalesLine>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeGetCrMemoNo>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeGetInvoiceNo>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeInsertSalesHeader>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeInsertSalesLine>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeModifySalesHeader>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeModifySalesLine>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeOpenSalesInvoice>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeTestSalesHeader>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeTransferLine>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeUpdateSalesHeader>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnCreateSalesHeaderOnBeforeUpdateSalesHeader>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnCreateSalesInvoiceJobTaskOnAfterLinesCreated>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnCreateSalesInvoiceJobTaskOnBeforeCreateSalesLine>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnCreateSalesInvoiceJobTaskTestJob>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnCreateSalesInvoiceLinesOnBeforeCreateSalesLine>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnCreateSalesInvoiceLinesOnBeforeGetCustomer>
1 : Codeunit<Job Create-Invoice>.PROCEDURE<OnCreateSalesInvoiceLinesOnBeforeTestJob>
1 : Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromGenJnlLineToJnlLine>
1 : Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromJnlLineToLedgEntry>
1 : Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromJnlToPlanningLine>
1 : Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromJobLedgEntryToPlanningLine>
1 : Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromPlanningLineToJnlLine>
1 : Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromPlanningSalesLineToJnlLine>
1 : Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromPurchaseLineToJnlLine>
1 : Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromSalesHeaderToPlanningLine>
1 : Codeunit<Job Transfer Line>.PROCEDURE<OnBeforeFromPlanningSalesLineToJnlLine>
1 : Codeunit<Job Transfer Line>.PROCEDURE<OnBeforeFromPurchaseLineToJnlLine>
1 : Codeunit<Job Calculate Batches>.PROCEDURE<OnBeforeJobPlanningLineInsert>
1 : Codeunit<Job Calculate Batches>.PROCEDURE<OnBeforeTransferToPlanningLine>
1 : Codeunit<Copy Job>.PROCEDURE<OnAfterCopyJob>
1 : Codeunit<Copy Job>.PROCEDURE<OnAfterCopyJobTask>
1 : Codeunit<Job Jnl.-Check Line>.PROCEDURE<OnAfterRunCheck>
1 : Codeunit<Job Jnl.-Check Line>.PROCEDURE<OnBeforeCheckDim>
1 : Codeunit<Job Jnl.-Check Line>.PROCEDURE<OnBeforeCheckItemQuantityJobJnl>
1 : Codeunit<Job Jnl.-Check Line>.PROCEDURE<OnBeforeRunCheck>
1 : Codeunit<Job Jnl.-Check Line>.PROCEDURE<OnBeforeTestJobJnlLine>
1 : Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnAfterApplyUsageLink>
1 : Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnAfterCopyJobJnlLine>
1 : Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnAfterJobLedgEntryInsert>
1 : Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnAfterRunCode>
1 : Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnBeforeApplyUsageLink>
1 : Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnBeforeCheckJob>
1 : Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnBeforeCode>
1 : Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnBeforeCreateJobLedgEntry>
1 : Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnBeforeItemPosting>
1 : Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnBeforeJobLedgEntryInsert>
1 : Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnCheckJobOnBeforeTestJobTaskType>
1 : Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnGetJobConsumptionValueEntryFilter>
1 : Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnPostItemOnAfterApplyItemTracking>
1 : Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnPostItemOnBeforeGetJobConsumptionValueEntry>
1 : Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnPostItemOnBeforeUpdateTotalAmounts>
1 : Codeunit<Job Jnl.-Post Batch>.PROCEDURE<OnAfterCheckJnlLine>
1 : Codeunit<Job Jnl.-Post Batch>.PROCEDURE<OnAfterJobJnlPostLine>
1 : Codeunit<Job Jnl.-Post Batch>.PROCEDURE<OnAfterPostJnlLines>
1 : Codeunit<Job Jnl.-Post Batch>.PROCEDURE<OnBeforeDeleteNonRecJnlLines>
1 : Codeunit<Job Jnl.-Post Batch>.PROCEDURE<OnBeforeJobJnlPostLine>
1 : Codeunit<Job Jnl.-Post Batch>.PROCEDURE<OnBeforeUpdateAndDeleteLines>
1 : Codeunit<JobJnlManagement>.PROCEDURE<OnLookupNameOnAfterSetFilters>
1 : Codeunit<Job Jnl.-Post+Print>.PROCEDURE<OnBeforePostJournalBatch>
1 : Codeunit<Job Jnl.-Post+Print>.PROCEDURE<OnBeforePrintJobReg>
1 : Codeunit<Job Jnl.-B.Post+Print>.PROCEDURE<OnBeforePostJournalBatch>
1 : Codeunit<Job Link Usage>.PROCEDURE<OnAfterFindMatchingJobPlanningLine>
1 : Codeunit<Job Link Usage>.PROCEDURE<OnBeforeJobPlanningLineUse>
1 : Codeunit<Job Link Usage>.PROCEDURE<OnBeforeModifyJobPlanningLine>
1 : Codeunit<Job Link Usage>.PROCEDURE<OnMatchUsageUnspecifiedOnBeforeConfirm>
1 : Codeunit<Cust. Entry-Edit>.PROCEDURE<OnBeforeCustLedgEntryModify>
1 : Codeunit<Cust. Entry-Edit>.PROCEDURE<OnBeforeOnRun>
1 : Codeunit<Job Planning Line-Reserve>.PROCEDURE<OnAfterReservQuantity>
1 : Codeunit<Job Planning Line-Reserve>.PROCEDURE<OnBeforeCheckReservedQtyBase>
1 : Codeunit<Paypal Account Proxy>.PROCEDURE<GetMsPayIsEnabled>
1 : Codeunit<Paypal Account Proxy>.PROCEDURE<GetPaypalAccount>
1 : Codeunit<Paypal Account Proxy>.PROCEDURE<GetPaypalSetupOptions>
1 : Codeunit<Paypal Account Proxy>.PROCEDURE<SetAlwaysIncludeMsPayOnDocuments>
1 : Codeunit<Paypal Account Proxy>.PROCEDURE<SetAlwaysIncludePaypalOnDocuments>
2 : Codeunit<Paypal Account Proxy>.PROCEDURE<SetPaypalAccount>
2 : Codeunit<QBO Sync Proxy>.PROCEDURE<GetQBOSyncSettings>
1 : Codeunit<QBO Sync Proxy>.PROCEDURE<OnGetQBOAuthURL>
1 : Codeunit<QBO Sync Proxy>.PROCEDURE<SetQBOSyncEnabled>
2 : Codeunit<QBD Sync Proxy>.PROCEDURE<GetQBDSyncSettings>
1 : Codeunit<QBD Sync Proxy>.PROCEDURE<SendEmailInBackground>
1 : Codeunit<QBD Sync Proxy>.PROCEDURE<SetQBDSyncEnabled>
1 : Codeunit<QBD Sync Proxy>.PROCEDURE<SetQBDSyncSendToEmail>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnAfterCheckAccountNo>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnAfterCheckBalAccountNo>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnAfterCheckGenJnlLine>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnAfterDateNoAllowed>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckAccountNo>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckBalAccountNo>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckBalDocType>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckDimensions>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckDocType>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckICPartner>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckPostingDateInFiscalYear>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckPurchDocNoIsNotUsed>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckSalesDocNoIsNotUsed>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeDateNotAllowed>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeErrorIfNegativeAmt>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeErrorIfPositiveAmt>
1 : Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeRunCheck>
1 : Codeunit<CA Jnl.-Post Line>.PROCEDURE<OnAfterCostEntryInsert>
1 : Codeunit<CA Jnl.-Post Line>.PROCEDURE<OnBeforeCostEntryInsert>
1 : Codeunit<CA Jnl.-Post Batch>.PROCEDURE<OnAfterCode>
1 : Codeunit<Transfer GL Entries to CA>.PROCEDURE<OnAfterInsertCostJournalLine>
1 : Codeunit<CA Jnl.-Post+Print>.PROCEDURE<OnBeforePostJournalBatch>
1 : Codeunit<Vend. Entry-Edit>.PROCEDURE<OnBeforeVendLedgEntryModify>
1 : Codeunit<Empl. Entry-Edit>.PROCEDURE<OnBeforeEmplLedgEntryModify>
3 : Codeunit<OAuth 2.0 Mgt.>.PROCEDURE<OnBeforeCreateJsonRequest>
1 : Codeunit<G/L Entry-Edit>.PROCEDURE<OnBeforeGLLedgEntryModify>
1 : Codeunit<Data Privacy Mgmt>.PROCEDURE<OnAfterGetPackageCode>
1 : Codeunit<Data Privacy Mgmt>.PROCEDURE<OnAfterSetPrivacyBlocked>
1 : Codeunit<Data Privacy Mgmt>.PROCEDURE<OnCreateData>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterCalcCurrencyRealizedGainLoss>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterCalcMinimalPossibleLiability>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterCalcPaymentExceedsLiability>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterCalcPmtDiscount>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterCalcPmtDiscTolerance>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterCalcToleratedPaymentExceedsLiability>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterCustLedgEntryInsert>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterFindAmtForAppln>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterFinishPosting>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterGLFinishPosting>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterHandleAddCurrResidualGLEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitBankAccLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitCheckLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitCustLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitEmployeeLedgerEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitGLEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitGLEntryVAT>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitGLEntryVATCopy>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitGLRegister>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitNewDtldCVLedgEntryBuf>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitOldDtldCVLedgEntryBuf>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitVAT>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitVendLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInsertDtldCustLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInsertDtldVendLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInsertGlobalGLEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInsertVAT>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInsertVATEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterOldCustLedgEntryModify>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterOldVendLedgEntryModify>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostApply>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostCust>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostDeferral>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostDtldCVLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostGenJnlLine>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostGLAcc>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostUnrealVATEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostVAT>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostVend>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterRunWithCheck>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterRunWithoutCheck>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterSalesTaxCalculateInitSalesTaxLines>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterSettingIsTransactionConsistent>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterUpdateVATEntryTaxDetails>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterVendLedgEntryInsert>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnApplyCustLedgEntryOnAfterRecalculateAmounts>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnApplyCustLedgEntryOnBeforePrepareTempCustLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnApplyVendLedgEntryOnAfterRecalculateAmounts>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeApplyCustLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeApplyVendLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCalcAmtLCYAdjustment>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCalcAplication>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCalcCurrencyApplnRounding>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCalcCurrencyRealizedGainLoss>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCalcCurrencyUnrealizedGainLoss>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCalcPmtDisc>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCalcPmtDiscTolerance>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCalcPmtTolerance>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCheckGLAccDimError>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCheckPurchExtDocNo>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCode>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeContinuePosting>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCreateGLEntriesForTotalAmounts>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCreateGLEntriesForTotalAmountsUnapply>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCreateGLEntriesForTotalAmountsUnapplyVendor>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCreateGLEntryGainLossInsertGLEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCustLedgEntryInsert>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCustLedgEntryModify>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCustUnrealizedVAT>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeEmplLedgEntryModify>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeFindAmtForAppln>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeFinishPosting>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeGetDtldCustLedgEntryAccNo>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeGetDtldVendLedgEntryAccNo>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInitBankAccLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInitCheckEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInitCustLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInitEmployeeLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInitGLEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInitGLEntryVAT>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInitGLEntryVATCopy>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInitVAT>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInitVendLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertDtldCustLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertDtldCustLedgEntryUnapply>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertDtldEmplLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertDtldEmplLedgEntryUnapply>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertDtldVendLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertDtldVendLedgEntryUnapply>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertGLEntryBuffer>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertGLEntryFromVATEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertGlobalGLEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertPmtDiscVATForGLEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertPostUnrealVATEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertTempVATEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertVAT>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertVATEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePostApply>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePostDeferral>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePostDtldCVLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePostGenJnlLine>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePostGLAcc>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePostUnrealVATEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePostVAT>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePrepareTempCustledgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePrepareTempVendLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeSetDeferralDescription>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeStartOrContinuePosting>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeStartPosting>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeUpdateTotalAmounts>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeVendLedgEntryInsert>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeVendLedgEntryModify>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeVendUnrealizedVAT>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnCalcPmtDiscIfAdjVATCopyFields>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnCalcPmtDiscOnAfterAssignPmtDisc>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnCalcPmtToleranceOnAfterAssignPmtDisc>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnCodeOnBeforeFinishPosting>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnContinuePostingOnBeforeCalculateCurrentBalance>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnCustPostApplyCustLedgEntryOnBeforeCheckPostingGroup>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnCustUnrealizedVATOnAfterVATPartCalculation>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnCustUnrealizedVATOnBeforeInitGLEntryVAT>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnHandleAddCurrResidualGLEntryOnBeforeInsertGLEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnInsertPmtDiscVATForGLEntryOnAfterCopyFromGenJnlLine>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnInsertTempVATEntryOnBeforeInsert>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnInsertVATEntriesFromTempOnBeforeVATEntryInsert>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnInsertVATOnBeforeCreateGLEntryForReverseChargeVATToPurchAcc>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnInsertVATOnBeforeCreateGLEntryForReverseChargeVATToRevChargeAcc>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnNextTransactionNoNeeded>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPostApplyOnAfterRecalculateAmounts>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPostBankAccOnAfterBankAccLedgEntryInsert>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPostBankAccOnAfterCheckLedgEntryInsert>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPostBankAccOnBeforeBankAccLedgEntryInsert>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPostBankAccOnBeforeCheckLedgEntryInsert>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPostBankAccOnBeforeInitBankAccLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPostCustOnAfterCopyCVLedgEntryBuf>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPostDtldCVLedgEntryOnBeforeCreateGLEntryGainLoss>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPostFixedAssetOnBeforeInsertGLEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPostGLAccOnBeforeInsertGLEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPostUnapplyOnAfterVATEntrySetFilters>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPostUnapplyOnBeforeUnapplyVATEntry>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPostUnapplyOnBeforeVATEntryInsert>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPostVendOnAfterCopyCVLedgEntryBuf>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPrepareTempCustLedgEntryOnAfterSetFilters>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPrepareTempCustLedgEntryOnBeforeExit>
2 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPrepareTempCustLedgEntryOnBeforeTempOldCustLedgEntryInsert>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPrepareTempCustLedgEntryOnBeforeTestPositive>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPrepareTempVendLedgEntryOnAfterSetFilters>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPrepareTempVendLedgEntryOnBeforeExit>
2 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPrepareTempVendLedgEntryOnBeforeTempOldVendLedgEntryInsert>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnUnapplyCustLedgEntryOnAfterCreateGLEntriesForTotalAmounts>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnUnapplyCustLedgEntryOnAfterDtldCustLedgEntrySetFilters>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnUnapplyCustLedgEntryOnBeforeCheckPostingGroup>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnUnapplyCustLedgEntryOnBeforePostUnapply>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnUnapplyVendLedgEntryOnAfterCreateGLEntriesForTotalAmounts>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnUnapplyVendLedgEntryOnAfterFilterSourceEntries>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnUnapplyVendLedgEntryOnBeforeCheckPostingGroup>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnUnapplyVendLedgEntryOnBeforePostUnapply>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnVendPostApplyVendLedgEntryOnBeforeCheckPostingGroup>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnVendUnrealizedVATOnAfterVATPartCalculation>
1 : Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnVendUnrealizedVATOnBeforeInitGLEntryVAT>
1 : Codeunit<Process Data Exch.>.PROCEDURE<OnBeforeFormatFieldValue>
1 : Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<OnBeforeCreateGenJnlDataExchLine>
1 : Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<OnBeforeInsertPmtExportDataJnlFromGenJnlLine>
1 : Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<OnBeforePaymentExport>
1 : Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<OnCheckGenJnlLine>
1 : Codeunit<Pmt Export Mgt Vend Ledg Entry>.PROCEDURE<OnBeforeCreateVendLedgerDataExchLine>
1 : Codeunit<Pmt Export Mgt Vend Ledg Entry>.PROCEDURE<OnBeforeInsertPmtExportDataJnlFromVendorLedgerEntry>
1 : Codeunit<Pmt Export Mgt Vend Ledg Entry>.PROCEDURE<OnBeforePaymentExportVendorLedgerEntry>
1 : Codeunit<Pmt Export Mgt Cust Ledg Entry>.PROCEDURE<OnBeforeCreateCustLedgerDataExchLine>
1 : Codeunit<Pmt Export Mgt Cust Ledg Entry>.PROCEDURE<OnBeforePaymentExportCustLedgerEntry>
1 : Codeunit<Payment Export Gen. Jnl Check>.PROCEDURE<OnPaymentExportGenJnlCheck>
1 : Codeunit<Pmt. Export Vend. Ledger Check>.PROCEDURE<OnCheckEmptyPmtInfoVendorLedgerEntry>
1 : Codeunit<Pmt. Export Vend. Ledger Check>.PROCEDURE<OnPmtExportVendorLedgerCheck>
1 : Codeunit<Pmt. Export Cust. Ledger Check>.PROCEDURE<OnPmtExportCustLedgerCheck>
1 : Codeunit<Map DataExch To Intermediate>.PROCEDURE<OnBeforeIntermediateDataImportInsert>
1 : Codeunit<SEPA CT-Fill Export Buffer>.PROCEDURE<OnFillExportBufferOnSetAsRecipient>
1 : Codeunit<SEPA CT-Prepare Source>.PROCEDURE<OnAfterCreateTempJnlLines>
1 : Codeunit<Map Incoming Doc to Gen. Line>.PROCEDURE<OnBeforeGenJnlLineInsertFromIncomingDocument>
1 : Codeunit<SEPA DD-Prepare Source>.PROCEDURE<OnAfterCreateTempCollectionEntries>
1 : Codeunit<Read Data Exch. from File>.PROCEDURE<OnBeforeFileImport>
1 : Codeunit<Process Gen. Journal  Lines>.PROCEDURE<OnBeforeUpdateGenJnlLines>
1 : Codeunit<Match General Journal Lines>.PROCEDURE<OnGetAccountMappingOnBeforeCalculateStringNearness>
1 : Codeunit<Match Bank Pmt. Appl.>.PROCEDURE<OnAfterMatchBankPayments>
1 : Codeunit<Match Bank Payments>.PROCEDURE<OnDocumentMatchingForBankLedgerEntryOnBeforeMatch>
1 : Codeunit<Match Bank Payments>.PROCEDURE<OnFindTextMappingsOnBeforeCalculateStringNearness>
1 : Codeunit<Match Bank Payments>.PROCEDURE<OnInitBankAccLedgerEntriesMatchingBufferSetFilter>
1 : Codeunit<Match Bank Payments>.PROCEDURE<OnInitCustomerLedgerEntriesMatchingBufferSetFilter>
1 : Codeunit<Match Bank Payments>.PROCEDURE<OnInitVendorLedgerEntriesMatchingBufferSetFilter>
1 : Codeunit<Encryption Management>.PROCEDURE<OnBeforeDecryptDataInAllCompaniesOnPrem>
1 : Codeunit<Encryption Management>.PROCEDURE<OnBeforeEncryptDataInAllCompaniesOnPrem>
1 : Codeunit<Exp. Pre-Mapping Gen. Jnl.>.PROCEDURE<OnBeforeInsertPaymentExoprtData>
1 : Codeunit<Update Currency Exchange Rates>.PROCEDURE<OnBeforeGetCurrencyExchangeData>
1 : Codeunit<Update Currency Exchange Rates>.PROCEDURE<OnBeforeSyncCurrencyExchangeRatesLoop>
1 : Codeunit<Get Bank Stmt. Line Candidates>.PROCEDURE<OnBeforeTransferCandidatestoAppliedPmtEntries>
1 : Codeunit<Http Web Request Mgt.>.PROCEDURE<OnBeforeInvokeTestJSONRequest>
1 : Codeunit<Http Web Request Mgt.>.PROCEDURE<OnOverrideUrl>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterCode>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterIncrementBatchName>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterMakeRecurringTexts>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterMultiplyAmounts>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterPostAllocations>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterPostGenJnlLine>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterPostReversingLines>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterProcessBalanceOfLines>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterProcessLines>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterUpdateLineBalance>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeCheckBalance>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeCheckGenPostingType>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeCode>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeCommit>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeIfCheckBalance>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforePostAllocations>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforePostGenJnlLine>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeProcessBalanceOfLines>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeProcessLines>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeRaiseExceedLengthError>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeThrowPreviewError>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeUpdateAndDeleteLines>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeUpdateIncomingDocument>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnPostAllocationsOnBeforeCopyFromGenJnlAlloc>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnPostAllocationsOnBeforePostNotReversingLine>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnPostAllocationsOnBeforePostReversingLine>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnPostReversingLinesOnBeforeGenJnlPostLine>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnProcessLinesOnAfterAssignGLNegNo>
1 : Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnProcessLinesOnAfterPostGenJnlLines>
1 : Codeunit<Customer Mgt.>.PROCEDURE<OnAfterCalculateShipToBillToOptions>
1 : Codeunit<Customer Mgt.>.PROCEDURE<SkipSettingFilter>
1 : Codeunit<Correct Posted Sales Invoice>.PROCEDURE<OnAfterCreateCorrectiveSalesCrMemo>
1 : Codeunit<Correct Posted Sales Invoice>.PROCEDURE<OnAfterCreateCorrSalesInvoice>
1 : Codeunit<Correct Posted Sales Invoice>.PROCEDURE<OnAfterTestCorrectInvoiceIsAllowed>
1 : Codeunit<Correct Posted Sales Invoice>.PROCEDURE<OnAfterTestSalesLineType>
1 : Codeunit<Correct Posted Sales Invoice>.PROCEDURE<OnBeforeSalesHeaderInsert>
1 : Codeunit<Correct Posted Sales Invoice>.PROCEDURE<OnBeforeSelesHeaderInsert>
1 : Codeunit<CAL Test Runner Publisher>.PROCEDURE<OnSetSeed>
1 : Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnAfterInsertAllSalesInvLines>
1 : Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnAfterInsertSalesInvoiceLine>
1 : Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnAfterOnRun>
1 : Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnAfterSetSalesQuoteLineFilter>
1 : Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnBeforeDeleteSalesQuoteLines>
1 : Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnBeforeDeletionOfQuote>
1 : Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnBeforeInsertSalesInvoiceHeader>
1 : Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnBeforeInsertSalesInvoiceLine>
1 : Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnBeforeOnRun>
1 : Codeunit<Activities Mgt.>.PROCEDURE<OnGetRefreshInterval>
1 : Codeunit<Vendor Mgt.>.PROCEDURE<OnAfterSetFilterForExternalDocNo>
1 : Codeunit<Correct Posted Purch. Invoice>.PROCEDURE<OnAfterCreateCorrectivePurchCrMemo>
1 : Codeunit<Correct Posted Purch. Invoice>.PROCEDURE<OnAfterTestCorrectInvoiceIsAllowed>
1 : Codeunit<Correct Posted Purch. Invoice>.PROCEDURE<OnBeforePurchaseHeaderInsert>
1 : Codeunit<Purch. Doc. From Sales Doc.>.PROCEDURE<OnBeforeCreatePurchaseInvoice>
1 : Codeunit<Purch. Doc. From Sales Doc.>.PROCEDURE<OnCopySalesLinesToPurchaseLinesOnBeforeInsert>
1 : Codeunit<Purch. Doc. From Sales Doc.>.PROCEDURE<OnCopySalesLinesToPurchaseLinesOnLineTypeValidate>
1 : Codeunit<Purch. Doc. From Sales Doc.>.PROCEDURE<OnCreatePurchaseHeaderOnBeforeInsert>
1 : Codeunit<Release Incoming Document>.PROCEDURE<OnAfterCreateDocFromIncomingDocFail>
1 : Codeunit<Release Incoming Document>.PROCEDURE<OnAfterCreateDocFromIncomingDocSuccess>
1 : Codeunit<Release Incoming Document>.PROCEDURE<OnAfterReleaseIncomingDoc>
1 : Codeunit<Send Incoming Document to OCR>.PROCEDURE<OnAfterIncomingDocReadyForOCR>
2 : Codeunit<Send Incoming Document to OCR>.PROCEDURE<OnAfterIncomingDocReceivedFromOCR>
1 : Codeunit<Send Incoming Document to OCR>.PROCEDURE<OnAfterIncomingDocSentToOCR>
1 : Codeunit<Trial Balance Cache Mgt.>.PROCEDURE<OnGetCacheRefreshInterval>
1 : Codeunit<Telemetry Management>.PROCEDURE<OnBeforeTelemetryScheduleTask>
1 : Codeunit<Generate Master Data Telemetry>.PROCEDURE<OnMasterDataTelemetry>
1 : Codeunit<Generate Activity Telemetry>.PROCEDURE<OnActivityTelemetry>
1 : Codeunit<Sales Batch Post Mgt.>.PROCEDURE<OnAfterPrepareSalesHeader>
1 : Codeunit<Purchase Batch Post Mgt.>.PROCEDURE<OnAfterPreparePurchaseHeader>
1 : Codeunit<Batch Posting Print Mgt.>.PROCEDURE<OnAfterPrintPurchaseDocument>
1 : Codeunit<Batch Posting Print Mgt.>.PROCEDURE<OnAfterPrintSalesDocument>
1 : Codeunit<Batch Posting Print Mgt.>.PROCEDURE<OnBeforePrintDocument>
1 : Codeunit<Batch Processing Mgt.>.PROCEDURE<OnAfterBatchProcess>
1 : Codeunit<Batch Processing Mgt.>.PROCEDURE<OnAfterBatchProcessing>
1 : Codeunit<Batch Processing Mgt.>.PROCEDURE<OnBatchProcessOnBeforeShowMessage>
1 : Codeunit<Batch Processing Mgt.>.PROCEDURE<OnBeforeBatchProcess>
1 : Codeunit<Batch Processing Mgt.>.PROCEDURE<OnBeforeBatchProcessing>
1 : Codeunit<Batch Processing Mgt.>.PROCEDURE<OnCustomProcessing>
1 : Codeunit<Batch Processing Mgt.>.PROCEDURE<OnVerifyRecord>
1 : Codeunit<Gen. Jnl.-Show Entries>.PROCEDURE<OnAfterRun>
1 : Codeunit<DocumentNoVisibility>.PROCEDURE<OnBeforeBankAccountNoIsVisible>
1 : Codeunit<DocumentNoVisibility>.PROCEDURE<OnBeforeContactNoIsVisible>
1 : Codeunit<DocumentNoVisibility>.PROCEDURE<OnBeforeCustomerNoIsVisible>
1 : Codeunit<DocumentNoVisibility>.PROCEDURE<OnBeforeEmployeeNoIsVisible>
1 : Codeunit<DocumentNoVisibility>.PROCEDURE<OnBeforeFixedAssetNoIsVisible>
1 : Codeunit<DocumentNoVisibility>.PROCEDURE<OnBeforeItemNoIsVisible>
1 : Codeunit<DocumentNoVisibility>.PROCEDURE<OnBeforeJobNoIsVisible>
1 : Codeunit<DocumentNoVisibility>.PROCEDURE<OnBeforePurchaseDocumentNoIsVisible>
1 : Codeunit<DocumentNoVisibility>.PROCEDURE<OnBeforeResourceNoIsVisible>
1 : Codeunit<DocumentNoVisibility>.PROCEDURE<OnBeforeSalesDocumentNoIsVisible>
1 : Codeunit<DocumentNoVisibility>.PROCEDURE<OnBeforeTransferOrderNoIsVisible>
1 : Codeunit<DocumentNoVisibility>.PROCEDURE<OnBeforeVendorNoIsVisible>
1 : Codeunit<Doc. Exch. Service Mgt.>.PROCEDURE<OnAfterIncomingDocReceivedFromDocExch>
1 : Codeunit<Read Data Exch. from Stream>.PROCEDURE<OnGetDataExchFileContentEvent>
1 : Codeunit<Doc. Exch. Serv.- Doc. Status>.PROCEDURE<OnDocExchStatusDrillDown>
1 : Codeunit<Role Center Notification Mgt.>.PROCEDURE<OnBeforeShowNotifications>
1 : Codeunit<Headline Management>.PROCEDURE<OnBeforeScheduleTask>
2 : Codeunit<Headline Management>.PROCEDURE<OnInvalidateHeadlines>
1 : Codeunit<Headline RC Business Manager>.PROCEDURE<OnComputeHeadlines>
1 : Codeunit<Headline RC Order Processor>.PROCEDURE<OnComputeHeadlines>
1 : Codeunit<Headline RC Accountant>.PROCEDURE<OnComputeHeadlines>
1 : Codeunit<Headline RC Project Manager>.PROCEDURE<OnComputeHeadlines>
1 : Codeunit<Headline RC Relationship Mgt.>.PROCEDURE<OnComputeHeadlines>
1 : Codeunit<Headline RC Administrator>.PROCEDURE<OnComputeHeadlines>
1 : Codeunit<Headline RC Team Member>.PROCEDURE<OnComputeHeadlines>
1 : Codeunit<Headline RC Prod. Planner>.PROCEDURE<OnComputeHeadlines>
1 : Codeunit<Headline RC Serv. Dispatcher>.PROCEDURE<OnComputeHeadlines>
1 : Codeunit<Headline RC Security Admin>.PROCEDURE<OnComputeHeadlines>
1 : Codeunit<Headline RC Whse. Basic>.PROCEDURE<OnComputeHeadlines>
1 : Codeunit<Headline RC Whse. WMS>.PROCEDURE<OnComputeHeadlines>
1 : Codeunit<Headline RC Whse. Worker WMS>.PROCEDURE<OnComputeHeadlines>
1 : Codeunit<Gen. Jnl.-Show Card>.PROCEDURE<OnAfterRun>
1 : Codeunit<Workflow Management>.PROCEDURE<OnBeforeHandleEventWithxRec>
1 : Codeunit<Workflow Setup>.PROCEDURE<OnAddWorkflowCategoriesToLibrary>
1 : Codeunit<Workflow Setup>.PROCEDURE<OnAfterInitWorkflowTemplates>
1 : Codeunit<Workflow Setup>.PROCEDURE<OnAfterInsertApprovalsTableRelations>
1 : Codeunit<Workflow Setup>.PROCEDURE<OnInsertWorkflowTemplates>
1 : Codeunit<Notification Entry Dispatcher>.PROCEDURE<OnBeforeCreateMailAndDispatch>
1 : Codeunit<Notification Management>.PROCEDURE<OnBeforeGetActionTextFor>
1 : Codeunit<Notification Management>.PROCEDURE<OnGetDocumentTypeAndNumber>
2 : Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<OnAfterDeleteNotificationContext>
2 : Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<OnAfterInsertNotificationContext>
2 : Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<OnAfterNotificationSent>
1 : Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<OnBeforeSendNotification>
1 : Codeunit<Workflow Event Handling>.PROCEDURE<OnAddWorkflowEventPredecessorsToLibrary>
1 : Codeunit<Workflow Event Handling>.PROCEDURE<OnAddWorkflowEventsToLibrary>
1 : Codeunit<Workflow Event Handling>.PROCEDURE<OnAddWorkflowTableRelationsToLibrary>
1 : Codeunit<Workflow Response Handling>.PROCEDURE<OnAddWorkflowResponsePredecessorsToLibrary>
1 : Codeunit<Workflow Response Handling>.PROCEDURE<OnAddWorkflowResponsesToLibrary>
1 : Codeunit<Workflow Response Handling>.PROCEDURE<OnCheckHasRequiredArguments>
1 : Codeunit<Workflow Response Handling>.PROCEDURE<OnCheckIsArgumentMandatory>
1 : Codeunit<Workflow Response Handling>.PROCEDURE<OnExecuteWorkflowResponse>
1 : Codeunit<Workflow Response Handling>.PROCEDURE<OnOpenDocument>
1 : Codeunit<Workflow Response Handling>.PROCEDURE<OnReleaseDocument>
1 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnAfterCheckPurchaseApprovalPossible>
1 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnAfterCheckSalesApprovalPossible>
1 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnAfterCreateApprReqForApprTypeApprover>
1 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnAfterCreateApprReqForApprTypeSalespersPurchaser>
1 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnAfterCreateApprReqForApprTypeWorkflowUserGroup>
1 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnAfterIsSufficientApprover>
3 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnApproveApprovalRequest>
1 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnBeforeApprovalEntryInsert>
1 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnBeforeCheckUserAsApprovalAdministrator>
1 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnBeforeFindWorkflowUserGroupMember>
1 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnBeforePostedApprovalEntryInsert>
1 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelCustomerApprovalRequest>
3 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelGeneralJournalBatchApprovalRequest>
2 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelGeneralJournalLineApprovalRequest>
1 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelIncomingDocApprovalRequest>
1 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelItemApprovalRequest>
7 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelPurchaseApprovalRequest>
6 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelSalesApprovalRequest>
2 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelVendorApprovalRequest>
2 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnDelegateApprovalRequest>
2 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnDeleteRecordInApprovalRequest>
1 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnPopulateApprovalEntryArgument>
1 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnRejectApprovalRequest>
5 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnRenameRecordInApprovalRequest>
1 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendGeneralJournalBatchForApproval>
1 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendGeneralJournalLineForApproval>
2 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendIncomingDocForApproval>
7 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendPurchaseDocForApproval>
6 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendSalesDocForApproval>
1 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendVendorForApproval>
1 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnSetStatusToPendingApproval>
1 : Codeunit<Approvals Mgmt.>.PROCEDURE<OnSubstituteUserIdForApprovalEntry>
1 : Codeunit<Workflow Webhook Management>.PROCEDURE<OnCancelWorkflow>
1 : Codeunit<Workflow Webhook Management>.PROCEDURE<OnContinueWorkflow>
1 : Codeunit<Workflow Webhook Management>.PROCEDURE<OnFindTaskSchedulerAllowed>
1 : Codeunit<Workflow Webhook Management>.PROCEDURE<OnRejectWorkflow>
1 : Codeunit<Workflow Webhook Notification>.PROCEDURE<OnPostNotificationRequest>
1 : Codeunit<Workflow Webhook Notify Task>.PROCEDURE<OnFetchWorkflowWebhookNotificationInitParams>
1 : Codeunit<PEPPOL Management>.PROCEDURE<OnBeforeGetAccountingCustomerPartyTaxSchemeByFormat>
1 : Codeunit<PEPPOL Management>.PROCEDURE<OnBeforeGetAccountingSupplierPartyTaxScheme>
1 : Codeunit<Office Management>.PROCEDURE<OnGetExternalHandlerCodeunit>
1 : Codeunit<Office Host Management>.PROCEDURE<OnCloseCurrentPage>
1 : Codeunit<Office Host Management>.PROCEDURE<OnEmailHasAttachments>
1 : Codeunit<Office Host Management>.PROCEDURE<OnGetEmailAndAttachments>
1 : Codeunit<Office Host Management>.PROCEDURE<OnGetEmailBody>
1 : Codeunit<Office Host Management>.PROCEDURE<OnGetFinancialsDocument>
1 : Codeunit<Office Host Management>.PROCEDURE<OnGetHostType>
1 : Codeunit<Office Host Management>.PROCEDURE<OnGetTempOfficeAddinContext>
1 : Codeunit<Office Host Management>.PROCEDURE<OnInitializeContext>
1 : Codeunit<Office Host Management>.PROCEDURE<OnInitializeExchangeObject>
1 : Codeunit<Office Host Management>.PROCEDURE<OnInitializeHost>
1 : Codeunit<Office Host Management>.PROCEDURE<OnInvokeExtension>
1 : Codeunit<Office Host Management>.PROCEDURE<OnIsAvailable>
1 : Codeunit<Office Host Management>.PROCEDURE<OnIsHostInitialized>
1 : Codeunit<Office Host Management>.PROCEDURE<OnSendToOCR>
1 : Codeunit<Office Document Handler>.PROCEDURE<OnCloseSuggestedLineItemsPage>
1 : Codeunit<Office Document Handler>.PROCEDURE<OnGenerateLinesFromText>
4 : Codeunit<Add-in Manifest Management>.PROCEDURE<CreateDefaultAddins>
1 : Codeunit<Add-in Manifest Management>.PROCEDURE<GetAddin>
1 : Codeunit<Add-in Manifest Management>.PROCEDURE<GetAddinVersion>
1 : Codeunit<Add-in Manifest Management>.PROCEDURE<GetManifestCodeunit>
1 : Codeunit<Add-in Manifest Management>.PROCEDURE<OnGenerateManifest>
1 : Codeunit<Payroll Management>.PROCEDURE<OnImportPayroll>
3 : Codeunit<Payroll Management>.PROCEDURE<OnRegisterPayrollService>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnAfterFilterReversalEntry>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnAfterPostReverse>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnAfterReverseGLEntry>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnApplyCustLedgEntryByReversalOnBeforeInsertDtldCustLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnApplyEmplLedgEntryByReversalOnBeforeInsertDtldEmplLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnApplyVendLedgEntryByReversalOnBeforeInsertDtldVendLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnBeforeReverse>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseBankAccLedgEntryOnBeforeInsert>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseCustLedgEntryOnBeforeInsertCustLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseCustLedgEntryOnBeforeInsertDtldCustLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseEmplLedgEntryOnBeforeInsertDtldEmplLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseEmplLedgEntryOnBeforeInsertEmplLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseGLEntryOnBeforeInsertGLEntry>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseGLEntryOnBeforeLoop>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseOnBeforeFinishPosting>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseOnBeforeStartPosting>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseVATEntryOnBeforeInsert>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseVendLedgEntryOnBeforeInsertDtldVendLedgEntry>
1 : Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseVendLedgEntryOnBeforeInsertVendLedgEntry>
1 : Codeunit<Standard Codes Mgt.>.PROCEDURE<OnBeforeGetPurchRecurringLines>
1 : Codeunit<Standard Codes Mgt.>.PROCEDURE<OnBeforeGetSalesRecurringLines>
1 : Codeunit<Deferral Utilities>.PROCEDURE<OnAfterCalculateDaysPerPeriod>
1 : Codeunit<Deferral Utilities>.PROCEDURE<OnAfterCalculateEqualPerPeriod>
1 : Codeunit<Deferral Utilities>.PROCEDURE<OnAfterCalculateStraightline>
1 : Codeunit<Deferral Utilities>.PROCEDURE<OnAfterCalculateUserDefined>
1 : Codeunit<Deferral Utilities>.PROCEDURE<OnAfterCreateDeferralSchedule>
1 : Codeunit<Deferral Utilities>.PROCEDURE<OnAfterCreateScheduleFromGL>
1 : Codeunit<Deferral Utilities>.PROCEDURE<OnBeforeCalculateDaysPerPeriod>
1 : Codeunit<Deferral Utilities>.PROCEDURE<OnBeforeCalculateEqualPerPeriod>
1 : Codeunit<Deferral Utilities>.PROCEDURE<OnBeforeCalculateStraightline>
1 : Codeunit<Deferral Utilities>.PROCEDURE<OnBeforeCalculateUserDefined>
1 : Codeunit<Deferral Utilities>.PROCEDURE<OnBeforeCreateDeferralSchedule>
1 : Codeunit<Deferral Utilities>.PROCEDURE<OnBeforePostedDeferralHeaderInsert>
1 : Codeunit<Deferral Utilities>.PROCEDURE<OnBeforePostedDeferralLineInsert>
1 : Codeunit<Data Classification Mgt.>.PROCEDURE<OnGetPrivacyMasterTables>
1 : Codeunit<Data Classification Mgt.>.PROCEDURE<OnOpenExcelSheet>
1 : Codeunit<Data Classification Mgt.>.PROCEDURE<OnUploadExcelSheet>
1 : Codeunit<Reversal-Post>.PROCEDURE<OnBeforeGLRegPostingReportPrint>
3 : Codeunit<Data Migration Mgt.>.PROCEDURE<OnAfterMigrationFinished>
1 : Codeunit<Data Migration Mgt.>.PROCEDURE<OnBeforeMigrationStarted>
1 : Codeunit<Data Migration Mgt.>.PROCEDURE<OnBeforeStartMigration>
1 : Codeunit<Assisted Company Setup>.PROCEDURE<OnBeforeScheduleTask>
1 : Codeunit<Data Migration Notifier>.PROCEDURE<SkipShowingCustomerContactCreationNotification>
1 : Codeunit<Encrypted Key/Value Management>.PROCEDURE<OnCleanUpEvent>
1 : Codeunit<Excel Data Migrator>.PROCEDURE<OnDownloadTemplate>
1 : Codeunit<Excel Data Migrator>.PROCEDURE<OnUploadFile>
2 : Codeunit<Sandbox Deploymt. Cleanup>.PROCEDURE<OnClearConfiguration>
1 : Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<OnAfterBindSubscription>
1 : Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<OnAfterIsActive>
1 : Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<OnAfterUnbindSubscription>
1 : Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<OnBeforeThrowError>
1 : Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<OnRunPreview>
1 : Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<OnSystemSetPostingPreviewActive>
1 : Codeunit<Report Selection Mgt.>.PROCEDURE<OnAfterInitReportSelectionBank>
1 : Codeunit<Report Selection Mgt.>.PROCEDURE<OnAfterInitReportSelectionCust>
1 : Codeunit<Report Selection Mgt.>.PROCEDURE<OnAfterInitReportSelectionInvt>
1 : Codeunit<Report Selection Mgt.>.PROCEDURE<OnAfterInitReportSelectionProd>
1 : Codeunit<Report Selection Mgt.>.PROCEDURE<OnAfterInitReportSelectionPurch>
1 : Codeunit<Report Selection Mgt.>.PROCEDURE<OnAfterInitReportSelectionSales>
1 : Codeunit<Report Selection Mgt.>.PROCEDURE<OnAfterInitReportSelectionServ>
1 : Codeunit<Report Selection Mgt.>.PROCEDURE<OnAfterInitReportSelectionWhse>
1 : Codeunit<Report Selection Mgt.>.PROCEDURE<OnInitReportUsage>
1 : Codeunit<Report Selection Mgt.>.PROCEDURE<OnInitReportUsageWhse>
1 : Codeunit<Update Acc. Sched. KPI Data>.PROCEDURE<OnCalcValuesOnAfterCalculateValue>
1 : Codeunit<Update Acc. Sched. KPI Data>.PROCEDURE<OnInitSetupDataAnAfterTempAccScheduleLineInsert>
1 : Codeunit<Company-Initialize>.PROCEDURE<OnBeforeOnRun>
1 : Codeunit<Company-Initialize>.PROCEDURE<OnCompanyInitialize>
1 : Codeunit<Posting Preview Event Handler>.PROCEDURE<OnAfterFillDocumentEntry>
1 : Codeunit<Posting Preview Event Handler>.PROCEDURE<OnAfterShowEntries>
1 : Codeunit<ML Prediction Management>.PROCEDURE<OnBeforeEvaluate>
1 : Codeunit<ML Prediction Management>.PROCEDURE<OnBeforePredict>
1 : Codeunit<ML Prediction Management>.PROCEDURE<OnBeforeTrain>
1 : Codeunit<Image Analysis Management>.PROCEDURE<OnAfterImageAnalysis>
1 : Codeunit<Image Analysis Management>.PROCEDURE<OnBeforeImageAnalysis>
1 : Codeunit<Item Jnl.-Check Line>.PROCEDURE<OnAfterAssignInvtPickRequired>
1 : Codeunit<Item Jnl.-Check Line>.PROCEDURE<OnAfterAssignInvtPutAwayRequired>
1 : Codeunit<Item Jnl.-Check Line>.PROCEDURE<OnAfterCheckItemJnlLine>
1 : Codeunit<Item Jnl.-Check Line>.PROCEDURE<OnBeforeCheckBins>
1 : Codeunit<Item Jnl.-Check Line>.PROCEDURE<OnBeforeCheckDimensions>
1 : Codeunit<Item Jnl.-Check Line>.PROCEDURE<OnBeforeCheckLocation>
1 : Codeunit<Item Jnl.-Check Line>.PROCEDURE<OnBeforeCheckWarehouse>
1 : Codeunit<Res. Jnl.-Check Line>.PROCEDURE<OnAfterRunCheck>
1 : Codeunit<Res. Jnl.-Check Line>.PROCEDURE<OnBeforeRunCheck>
1 : Codeunit<O365 HTML Templ. Mgt.>.PROCEDURE<OnResizeCompanyLogo>
1 : Codeunit<Res. Jnl.-Post Line>.PROCEDURE<OnAfterPostResJnlLine>
1 : Codeunit<Res. Jnl.-Post Line>.PROCEDURE<OnBeforePostResJnlLine>
1 : Codeunit<Res. Jnl.-Post Line>.PROCEDURE<OnBeforeResLedgEntryInsert>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterApplyItemLedgEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterApplyItemLedgEntryOnBeforeCalcAppliedQty>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterApplyItemLedgEntrySetFilters>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterCalcPosShares>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterCalcPurchCorrShares>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterCheckItemTracking>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterCheckItemTrackingInfo>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterCreateItemJnlLineFromEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInitItemLedgEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInitValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertCapLedgEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertCapValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertConsumpEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertCorrItemLedgEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertCorrValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertItemLedgEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertOHValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterItemApplnEntryInsert>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterItemValuePosting>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterPostItem>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterPostItemJnlLine>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterPostOutput>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterPostSplitJnlLine>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterPrepareItem>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterSetupTempSplitItemJnlLineSetQty>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterUpdateAdjmtProp>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterUpdateProdOrderLine>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnApplyItemLedgEntryOnBeforeCloseReservEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnApplyItemLedgEntryOnBeforeOldItemLedgEntryModify>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeAllowProdApplication>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeApplyItemLedgEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeApplyItemLedgEntrySetFilters>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeCheckExpirationDate>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeCheckIsCyclicalLoop>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeCheckItemCorrection>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeCheckItemTrackingInfo>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeCheckItemTrackingIsEmpty>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeCheckSerialNo>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInitValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertCapLedgEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertCapValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertConsumpEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertCorrItemLedgEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertCorrValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertItemLedgEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertOHValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertPhysInvtLedgEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertSetupTempSplitItemJnlLine>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertTransferEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertVarValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeItemApplnEntryInsert>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeMoveApplication>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeNextOperationExist>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeOldItemLedgEntryModify>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforePostFlushedConsumpItemJnlLine>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforePostItem>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforePostItemJnlLine>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeProdOrderCompModify>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeProdOrderLineModify>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeRetrieveCostPerUnit>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeRunWithCheck>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeSetupSplitJnlLine>
2 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeTempItemEntryRelationInsert>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeTestFirstApplyItemLedgEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeUpdateProdOrderLine>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeVerifyInvoicedQty>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnCalcExpectedCostOnBeforeFindValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnCalcILEExpectedAmountOnBeforeCalcCostAmounts>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnCheckPostingCostToGL>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnGetValuationDateOnBeforeFindOldValueEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnInsertCapValueEntryOnAfterUpdateCostAmounts>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnInsertConsumpEntryOnBeforePostItem>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnInsertItemLedgEntryOnBeforeReservationError>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnInsertPostValueEntryToGLOnAfterTransferFields>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnInsertTransferEntryOnTransferValues>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnItemQtyPostingOnBeforeApplyItemLedgEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnPostConsumptionOnAfterInsertEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnPostFlushedConsumpOnAfterCalcQtyToPost>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnPostOutputOnAfterInsertCapLedgEntry>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnPostOutputOnAfterUpdateAmounts>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnPostOutputOnBeforeCreateWhseJnlLine>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnPostOutputOnBeforeProdOrderRtngLineModify>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnPostSplitJnlLineOnBeforeSplitJnlLine>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnReApplyOnBeforeStartApply>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnSetupSplitJnlLineOnBeforeSplitTempLines>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnTestFirstApplyItemLedgEntryOnAfterTestFields>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnTouchItemEntryCostOnAfterAfterSetAdjmtProp>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnUnApplyOnBeforeItemApplnEntryDelete>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnUnApplyOnBeforeUpdateItemLedgerEntries>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnUpdateUnitCostOnBeforeCalculateLastDirectCost>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnValuateAppliedAvgEntryOnAfterSetCostPerUnit>
1 : Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnValuateAppliedAvgEntryOnAfterUpdateCostAmounts>
1 : Codeunit<Resource-Find Cost>.PROCEDURE<OnAfterFindResUnitCost>
1 : Codeunit<Resource-Find Price>.PROCEDURE<OnAfterFindResPrice>
1 : Codeunit<Resource-Find Price>.PROCEDURE<OnBeforeFindResPrice>
1 : Codeunit<EmplEntry-Apply Posted Entries>.PROCEDURE<OnEmplPostApplyEmplLedgEntryOnBeforeGenJnlPostLine>
1 : Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnAfterApplyEmployeeLedgerEntry>
1 : Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnAfterCustLedgEntrySetFilters>
1 : Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnAfterRun>
1 : Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnAfterSelectCustLedgEntry>
1 : Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnAfterSelectEmplLedgEntry>
1 : Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnAfterSelectVendLedgEntry>
1 : Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnAfterVendLedgEntrySetFilters>
1 : Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnApplyCustomerLedgerEntryOnBeforeCheckAgainstApplnCurrency>
1 : Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnApplyEmployeeLedgerEntryOnBeforeUpdateAmount>
1 : Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnApplyVendorLedgerEntryOnBeforeCheckAgainstApplnCurrency>
1 : Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnBeforeFindCustApply>
1 : Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnBeforeFindVendApply>
1 : Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnBeforeRun>
1 : Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnBeforeSelectCustLedgEntry>
1 : Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnBeforeSelectEmplLedgEntry>
1 : Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnBeforeSelectVendLedgEntry>
1 : Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnSelectCustLedgEntryOnAfterSetFilters>
1 : Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnSelectEmplLedgEntryOnAfterSetFilters>
1 : Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnSelectVendLedgEntryOnAfterSetFilters>
1 : Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<OnAfterPostApplyCustLedgEntry>
1 : Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<OnAfterPostUnapplyCustLedgEntry>
1 : Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<OnBeforePostApplyCustLedgEntry>
1 : Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<OnBeforePostUnapplyCustLedgEntry>
1 : Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<OnFindLastApplEntryOnAfterSetFilters>
1 : Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<OnPostUnApplyCustomerCommitOnAfterSetFilters>
1 : Codeunit<VendEntry-Apply Posted Entries>.PROCEDURE<OnAfterPostApplyVendLedgEntry>
1 : Codeunit<VendEntry-Apply Posted Entries>.PROCEDURE<OnAfterPostUnapplyVendLedgEntry>
1 : Codeunit<VendEntry-Apply Posted Entries>.PROCEDURE<OnBeforePostApplyVendLedgEntry>
1 : Codeunit<VendEntry-Apply Posted Entries>.PROCEDURE<OnBeforePostUnapplyVendLedgEntry>
1 : Codeunit<Document-Print>.PROCEDURE<OnBeforeCalcPurchDisc>
1 : Codeunit<Document-Print>.PROCEDURE<OnBeforeCalcSalesDisc>
1 : Codeunit<Document-Print>.PROCEDURE<OnBeforeCalcServDisc>
1 : Codeunit<Document-Print>.PROCEDURE<OnBeforeDoPrintPurchHeader>
1 : Codeunit<Document-Print>.PROCEDURE<OnBeforeDoPrintSalesHeader>
1 : Codeunit<Document-Print>.PROCEDURE<OnBeforePrintAsmHeader>
1 : Codeunit<Document-Print>.PROCEDURE<OnBeforePrintBankAccStmt>
1 : Codeunit<Document-Print>.PROCEDURE<OnBeforePrintCheck>
1 : Codeunit<Document-Print>.PROCEDURE<OnBeforePrintProformaSalesInvoice>
1 : Codeunit<Document-Print>.PROCEDURE<OnBeforePrintPurchHeaderArch>
1 : Codeunit<Document-Print>.PROCEDURE<OnBeforePrintSalesHeaderArch>
1 : Codeunit<Document-Print>.PROCEDURE<OnBeforePrintSalesOrder>
1 : Codeunit<Document-Print>.PROCEDURE<OnBeforePrintServiceContract>
1 : Codeunit<Document-Print>.PROCEDURE<OnBeforePrintServiceHeader>
1 : Codeunit<Document-Print>.PROCEDURE<OnBeforePrintTransferHeader>
1 : Codeunit<Document-Print>.PROCEDURE<OnGetAsmHeaderTypeUsageElseCase>
1 : Codeunit<Document-Print>.PROCEDURE<OnGetPurchArchDocTypeUsageElseCase>
1 : Codeunit<Document-Print>.PROCEDURE<OnGetPurchDocTypeUsageElseCase>
1 : Codeunit<Document-Print>.PROCEDURE<OnGetSalesArchDocTypeUsageElseCase>
1 : Codeunit<Document-Print>.PROCEDURE<OnGetSalesDocTypeUsageElseCase>
1 : Codeunit<Document-Print>.PROCEDURE<OnGetServContractTypeUsageElseCase>
1 : Codeunit<Document-Print>.PROCEDURE<OnGetServHeaderDocTypeUsageElseCase>
1 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnAfterCheckJnlLine>
1 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnAfterCheckLines>
1 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnAfterConstructPostingNumber>
1 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnAfterItemJnlPostSumLine>
1 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnAfterPostJnlLines>
1 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnAfterPostLines>
2 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnAfterPostWhseJnlLine>
1 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnBeforeCheckItemAvailability>
1 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnBeforeCheckItemAvailabilityHandled>
1 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnBeforeCheckLines>
1 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnBeforeCode>
1 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnBeforeIncrBatchName>
1 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnBeforeItemJnlPostSumLine>
1 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnBeforeRaiseExceedLengthError>
1 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnBeforeUpdateDeleteLines>
1 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnHandleNonRecurringLineOnInsertNewLine>
1 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnHandleRecurringLineOnBeforeModify>
1 : Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnPostLinesBeforePostWhseJnlLine>
1 : Codeunit<GenJnlManagement>.PROCEDURE<OnAfterSetName>
1 : Codeunit<GenJnlManagement>.PROCEDURE<OnBeforeLookupName>
1 : Codeunit<GenJnlManagement>.PROCEDURE<OnTemplateSelectionSetFilter>
1 : Codeunit<Gen. Jnl.-Post>.PROCEDURE<OnBeforeCode>
1 : Codeunit<Gen. Jnl.-Post>.PROCEDURE<OnGenJnlLineSetFilter>
1 : Codeunit<Gen. Jnl.-Post+Print>.PROCEDURE<OnBeforeGLRegPostingReportPrint>
1 : Codeunit<Gen. Jnl.-Post+Print>.PROCEDURE<OnBeforePostJournalBatch>
1 : Codeunit<Gen. Jnl.-Post+Print>.PROCEDURE<OnGenJnlLineSetFilter>
1 : Codeunit<Gen. Jnl.-B.Post+Print>.PROCEDURE<OnBeforeGLRegPostingReportPrint>
1 : Codeunit<Gen. Jnl.-B.Post+Print>.PROCEDURE<OnBeforePostJournalBatch>
1 : Codeunit<ItemJnlManagement>.PROCEDURE<OnBeforeLookupName>
1 : Codeunit<ItemJnlManagement>.PROCEDURE<OnTemplateSelectionSetFilter>
1 : Codeunit<Item Jnl.-Post>.PROCEDURE<OnBeforeCode>
1 : Codeunit<Item Jnl.-Post+Print>.PROCEDURE<OnBeforePostJournalBatch>
1 : Codeunit<Item Jnl.-B.Post+Print>.PROCEDURE<OnBeforePostJournalBatch>
1 : Codeunit<Item Jnl.-Explode BOM>.PROCEDURE<OnBeforeToItemJnlLineInsert>
1 : Codeunit<Document-Mailing>.PROCEDURE<OnAfterEmailSentSuccesfully>
1 : Codeunit<Document-Mailing>.PROCEDURE<OnBeforeSendEmail>
1 : Codeunit<Res. Jnl.-Post+Print>.PROCEDURE<OnBeforePostJournalBatch>
1 : Codeunit<Res. Jnl.-B.Post+Print>.PROCEDURE<OnBeforePostJournalBatch>
1 : Codeunit<Error Message Management>.PROCEDURE<OnFindActiveSubscriber>
1 : Codeunit<Error Message Management>.PROCEDURE<OnFindFirstErrorMessage>
2 : Codeunit<Error Message Management>.PROCEDURE<OnGetLastErrorID>
1 : Codeunit<Error Message Management>.PROCEDURE<OnLogError>
1 : Codeunit<Error Message Management>.PROCEDURE<OnPopContext>
1 : Codeunit<Error Message Management>.PROCEDURE<OnPushContext>
1 : Codeunit<G/L Account-Indent>.PROCEDURE<OnAfterIndent>
1 : Codeunit<Item-Check Avail.>.PROCEDURE<OnAfterCalculate>
1 : Codeunit<Item-Check Avail.>.PROCEDURE<OnAfterItemJnlLineShowWarning>
8 : Codeunit<Cust-Check Cr. Limit>.PROCEDURE<OnNewCheckRemoveCustomerNotifications>
1 : Codeunit<Sales-Printed>.PROCEDURE<OnBeforeModify>
1 : Codeunit<Sales Shpt.-Printed>.PROCEDURE<OnBeforeModify>
1 : Codeunit<Sales Inv.-Printed>.PROCEDURE<OnBeforeModify>
1 : Codeunit<Sales Cr. Memo-Printed>.PROCEDURE<OnBeforeModify>
1 : Codeunit<Purch.Header-Printed>.PROCEDURE<OnBeforeModify>
1 : Codeunit<Purch.Rcpt.-Printed>.PROCEDURE<OnBeforeModify>
1 : Codeunit<Purch. Inv.-Printed>.PROCEDURE<OnBeforeModify>
1 : Codeunit<PurchCrMemo-Printed>.PROCEDURE<OnBeforeModify>
1 : Codeunit<Purch.HeaderArch-Printed>.PROCEDURE<OnBeforeModify>
1 : Codeunit<SalesCount-PrintedArch>.PROCEDURE<OnBeforeModify>
1 : Codeunit<ReqJnlManagement>.PROCEDURE<OnAfterSetUpNewLine>
1 : Codeunit<ReqJnlManagement>.PROCEDURE<OnBeforeLookupName>
1 : Codeunit<ReqJnlManagement>.PROCEDURE<OnBeforeOpenJnl>
1 : Codeunit<ReqJnlManagement>.PROCEDURE<OnTemplateSelectionSetFilter>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterCarryOutReqLineAction>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterCheckReqWkshLine>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterCode>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterFinalizeOrderHeader>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterInsertPurchOrderHeader>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterInsertPurchOrderLine>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterPurchOrderLineInsert>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterReserveBindingOrderToPurch>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterSet>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnBeforeCarryOutBatchActionCode>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnBeforeCarryOutReqLineAction>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnBeforeCheckInsertFinalizePurchaseOrderHeader>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnBeforeCode>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnBeforePurchOrderHeaderInsert>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnBeforePurchOrderLineInsert>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnBeforePurchOrderLineValidateNo>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnCheckFurtherReplenishmentSystems>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnCheckNewNameNeccessary>
1 : Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnFinalizeOrderHeaderOnAfterSetFiltersForRecurringReqLine>
1 : Codeunit<VAT Entry - Edit>.PROCEDURE<OnBeforeVATEntryModify>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnAfterCalcItemPlanningFields>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnAfterCalculateNeed>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnAfterCalculateProjAvailableBalance>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailByBOMLevel>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailByDate>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailByEvent>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailByLoc>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromAsmHeader>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromAsmLine>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromItem>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromItemJnlLine>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromPlanningComp>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromProdOrderComp>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromProdOrderLine>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromPurchLine>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromReqLine>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromSalesLine>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromServLine>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromTransLine>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromWhseActivLine>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromWhseRcptLine>
1 : Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailVariant>
1 : Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveBankAccEntries>
1 : Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveCashFlowEntries>
1 : Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveCustEntries>
1 : Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveDocRelatedEntries>
1 : Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveGLEntries>
1 : Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveItemEntries>
1 : Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveJobEntries>
1 : Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveResEntries>
1 : Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveServContractLedgerEntries>
1 : Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveServiceCostLedgerEntries>
1 : Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveServiceItemLedgerEntries>
1 : Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveVendorEntries>
1 : Codeunit<PostSales-Delete>.PROCEDURE<OnAfterDeleteHeader>
1 : Codeunit<PostSales-Delete>.PROCEDURE<OnAfterInitDeleteHeader>
1 : Codeunit<PostSales-Delete>.PROCEDURE<OnBeforeInitDeleteHeader>
1 : Codeunit<PostPurch-Delete>.PROCEDURE<OnAfterDeleteHeader>
1 : Codeunit<PostPurch-Delete>.PROCEDURE<OnAfterInitDeleteHeader>
1 : Codeunit<PostPurch-Delete>.PROCEDURE<OnBeforeDeletePurchCrMemoLines>
1 : Codeunit<PostPurch-Delete>.PROCEDURE<OnBeforeDeletePurchInvLines>
1 : Codeunit<PostPurch-Delete>.PROCEDURE<OnBeforeDeletePurchRcptLines>
1 : Codeunit<PostPurch-Delete>.PROCEDURE<OnBeforeDeletePurchShptLines>
1 : Codeunit<PostPurch-Delete>.PROCEDURE<OnBeforeInitDeleteHeader>
1 : Codeunit<Format Address>.PROCEDURE<OnAfterFormatAddress>
1 : Codeunit<Format Address>.PROCEDURE<OnBeforeContactAddrAlt>
1 : Codeunit<Format Address>.PROCEDURE<OnBeforeCustomer>
1 : Codeunit<Format Address>.PROCEDURE<OnBeforeFormatAddress>
1 : Codeunit<Format Address>.PROCEDURE<OnBeforeSalesCrMemoBillTo>
1 : Codeunit<Format Address>.PROCEDURE<OnBeforeSalesHeaderBillTo>
1 : Codeunit<Format Address>.PROCEDURE<OnBeforeSalesHeaderSellTo>
1 : Codeunit<Format Address>.PROCEDURE<OnBeforeSalesHeaderShipTo>
1 : Codeunit<Format Address>.PROCEDURE<OnBeforeSalesInvBillTo>
1 : Codeunit<Format Address>.PROCEDURE<OnBeforeServContractShipTo>
1 : Codeunit<Format Address>.PROCEDURE<OnBeforeVendor>
1 : Codeunit<Exchange Acc. G/L Journal Line>.PROCEDURE<OnAfterOnRun>
1 : Codeunit<Exchange Acc. G/L Journal Line>.PROCEDURE<OnBeforeOnRun>
1 : Codeunit<CheckManagement>.PROCEDURE<OnAfterCalcAmountToVoid>
1 : Codeunit<CheckManagement>.PROCEDURE<OnAfterFinancialVoidCheck>
1 : Codeunit<CheckManagement>.PROCEDURE<OnAfterVoidCheck>
1 : Codeunit<CheckManagement>.PROCEDURE<OnBeforeFinancialVoidCheck>
1 : Codeunit<CheckManagement>.PROCEDURE<OnBeforeVoidCheck>
1 : Codeunit<CheckManagement>.PROCEDURE<OnBeforeVoidCheckGenJnlLine2Modify>
7 : Codeunit<CheckManagement>.PROCEDURE<OnFinancialVoidCheckOnAfterPostBalAccLine>
1 : Codeunit<CheckManagement>.PROCEDURE<OnFinancialVoidCheckOnAfterPostVoidCheckLine>
7 : Codeunit<CheckManagement>.PROCEDURE<OnFinancialVoidCheckOnBeforePostBalAccLine>
1 : Codeunit<CheckManagement>.PROCEDURE<OnFinancialVoidCheckOnBeforePostCust>
1 : Codeunit<CheckManagement>.PROCEDURE<OnFinancialVoidCheckOnBeforePostEmp>
1 : Codeunit<CheckManagement>.PROCEDURE<OnFinancialVoidCheckOnBeforePostVend>
1 : Codeunit<CheckManagement>.PROCEDURE<OnFinancialVoidCheckOnBeforePostVoidCheckLine>
1 : Codeunit<CheckManagement>.PROCEDURE<OnPostRoundingAmountOnAfterGenJnlPostLine>
1 : Codeunit<CheckManagement>.PROCEDURE<OnPostRoundingAmountOnBeforeGenJnlPostLine>
1 : Codeunit<CheckManagement>.PROCEDURE<OnUnApplyCustInvoicesOnBeforePost>
1 : Codeunit<CheckManagement>.PROCEDURE<OnUnApplyVendInvoicesOnBeforePost>
1 : Codeunit<Format Document>.PROCEDURE<OnAfterSetSalesPurchaseLine>
1 : Codeunit<Bank Acc. Reconciliation Post>.PROCEDURE<OnBeforeBankAccStmtInsert>
1 : Codeunit<Bank Acc. Reconciliation Post>.PROCEDURE<OnBeforePostedPmtReconInsert>
1 : Codeunit<Bank Acc. Reconciliation Post>.PROCEDURE<OnPostPaymentApplicationsOnAfterInitGenJnlLine>
1 : Codeunit<Bank Acc. Reconciliation Post>.PROCEDURE<OnPostPaymentApplicationsOnBeforeValidateApplyRequirements>
1 : Codeunit<Transfer Extended Text>.PROCEDURE<OnBeforeReadLines>
1 : Codeunit<Transfer Extended Text>.PROCEDURE<OnBeforeToPurchLineInsert>
1 : Codeunit<Transfer Extended Text>.PROCEDURE<OnBeforeToReminderLineInsert>
1 : Codeunit<Transfer Extended Text>.PROCEDURE<OnBeforeToSalesLineInsert>
1 : Codeunit<Transfer Extended Text>.PROCEDURE<OnBeforeToServiceLineInsert>
1 : Codeunit<Transfer Extended Text>.PROCEDURE<OnDeletePurchLinesOnAfterSetFilters>
1 : Codeunit<Transfer Extended Text>.PROCEDURE<OnDeleteSalesLinesOnAfterSetFilters>
1 : Codeunit<Transfer Extended Text>.PROCEDURE<OnFinChrgMemoCheckIfAnyExtTextAutoText>
1 : Codeunit<Transfer Extended Text>.PROCEDURE<OnPrepmtGetAnyExtTextAfterReadLines>
1 : Codeunit<Transfer Extended Text>.PROCEDURE<OnPrepmtGetAnyExtTextBeforeReadLines>
1 : Codeunit<Transfer Extended Text>.PROCEDURE<OnPurchCheckIfAnyExtTextAutoText>
1 : Codeunit<Transfer Extended Text>.PROCEDURE<OnReminderCheckIfAnyExtTextAutoText>
1 : Codeunit<Transfer Extended Text>.PROCEDURE<OnSalesCheckIfAnyExtTextAutoText>
1 : Codeunit<Transfer Extended Text>.PROCEDURE<OnServCheckIfAnyExtTextAutoText>
1 : Codeunit<Shipment Header - Edit>.PROCEDURE<OnBeforeSalesShptHeaderModify>
1 : Codeunit<Reminder-Make>.PROCEDURE<OnAfterFilterCustLedgEntryReminderLevel>
1 : Codeunit<Reminder-Make>.PROCEDURE<OnAfterMakeReminder>
1 : Codeunit<Reminder-Make>.PROCEDURE<OnBeforeCustLedgerEntryFind>
1 : Codeunit<Reminder-Make>.PROCEDURE<OnBeforeReminderHeaderFind>
1 : Codeunit<Reminder-Make>.PROCEDURE<OnBeforeReminderHeaderModify>
1 : Codeunit<Reminder-Make>.PROCEDURE<OnBeforeReminderLineInsert>
1 : Codeunit<Reminder-Issue>.PROCEDURE<OnAfterInitGenJnlLine>
1 : Codeunit<Reminder-Issue>.PROCEDURE<OnAfterIssueReminder>
1 : Codeunit<Reminder-Issue>.PROCEDURE<OnAfterProcessReminderLines>
1 : Codeunit<Reminder-Issue>.PROCEDURE<OnAfterTestDeleteHeader>
1 : Codeunit<Reminder-Issue>.PROCEDURE<OnBeforeIssuedReminderHeaderInsert>
1 : Codeunit<Reminder-Issue>.PROCEDURE<OnBeforeIssuedReminderLineInsert>
1 : Codeunit<Reminder-Issue>.PROCEDURE<OnBeforeIssueReminder>
1 : Codeunit<Reminder-Issue>.PROCEDURE<OnBeforeReminderEntryInsert>
1 : Codeunit<FinChrgMemo-Make>.PROCEDURE<OnAfterFinChrgMemoLineCreated>
1 : Codeunit<FinChrgMemo-Issue>.PROCEDURE<OnAfterInitGenJnlLine>
1 : Codeunit<FinChrgMemo-Issue>.PROCEDURE<OnAfterIssueFinChargeMemo>
1 : Codeunit<FinChrgMemo-Issue>.PROCEDURE<OnBeforeIssueFinChargeMemo>
1 : Codeunit<NoSeriesManagement>.PROCEDURE<OnAfterGetNextNo3>
1 : Codeunit<NoSeriesManagement>.PROCEDURE<OnAfterSaveNoSeries>
1 : Codeunit<NoSeriesManagement>.PROCEDURE<OnBeforeDoGetNextNo>
1 : Codeunit<Mail>.PROCEDURE<OnBeforeCreateMessage>
1 : Codeunit<Mail>.PROCEDURE<OnGetEmailAddressFromActiveDirectory>
1 : Codeunit<ClientTypeManagement>.PROCEDURE<OnAfterGetCurrentClientType>
1 : Codeunit<LogInManagement>.PROCEDURE<OnAfterCompanyClose>
1 : Codeunit<LogInManagement>.PROCEDURE<OnAfterCompanyOpen>
1 : Codeunit<LogInManagement>.PROCEDURE<OnAfterLogInEnd>
1 : Codeunit<LogInManagement>.PROCEDURE<OnAfterLogInStart>
1 : Codeunit<LogInManagement>.PROCEDURE<OnBeforeCompanyClose>
1 : Codeunit<LogInManagement>.PROCEDURE<OnBeforeCompanyOpen>
1 : Codeunit<LogInManagement>.PROCEDURE<OnBeforeLogInStart>
1 : Codeunit<SMTP Mail>.PROCEDURE<OnAfterTrySend>
1 : Codeunit<SMTP Mail>.PROCEDURE<OnBeforeAddBCC>
1 : Codeunit<SMTP Mail>.PROCEDURE<OnBeforeAddCC>
1 : Codeunit<SMTP Mail>.PROCEDURE<OnBeforeAddRecipients>
1 : Codeunit<SMTP Mail>.PROCEDURE<OnBeforeCreateMessage>
1 : Codeunit<SMTP Mail>.PROCEDURE<OnBeforeTrySend>
1 : Codeunit<Client Type Management>.PROCEDURE<OnAfterGetCurrentClientType>
1 : Codeunit<Graph Mail>.PROCEDURE<OnGetGraphDomain>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnAfterConvertDimtoICDim>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnAfterConvertDimValuetoICDimVal>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnAfterConvertICDimtoDim>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnAfterConvertICDimValuetoDimValue>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnAfterGetRecDefaultDimID>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnAfterSetupObjectNoList>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnAfterValidateShortcutDimValues>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnBeforeCheckDimValuePosting>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnBeforeCheckICDim>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnBeforeCheckICDimValue>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnBeforeCheckValuePosting>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnBeforeGetDefaultDimID>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnBeforeLookupDimValueCode>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnBeforeLookupDimValueCodeNoUpdate>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnBeforeValidateDimValueCode>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnCheckDimValueAllowed>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnCheckICDimValueAllowed>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnGetDefaultDimOnBeforeCreate>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnGetRecDefaultDimID>
1 : Codeunit<DimensionManagement>.PROCEDURE<OnTypeToTableID2>
1 : Codeunit<TextManagement>.PROCEDURE<OnAfterMakeDateFilter>
1 : Codeunit<TextManagement>.PROCEDURE<OnAfterMakeDateTimeFilter>
1 : Codeunit<TextManagement>.PROCEDURE<OnAfterMakeTextFilter>
1 : Codeunit<TextManagement>.PROCEDURE<OnAfterMakeTimeFilter>
1 : Codeunit<TextManagement>.PROCEDURE<OnBeforeMakeTextFilter>
1 : Codeunit<Update Analysis View>.PROCEDURE<OnAfterInitLastEntryNo>
1 : Codeunit<Update Analysis View>.PROCEDURE<OnAfterUpdateAll>
1 : Codeunit<Update Analysis View>.PROCEDURE<OnBeforeUpdateAll>
1 : Codeunit<Update Analysis View>.PROCEDURE<OnBeforeUpdateOne>
1 : Codeunit<Update Analysis View>.PROCEDURE<OnUpdateOneOnBeforeUpdateAnalysisView>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnAfterManualReleaseSalesDoc>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnAfterManualReOpenSalesDoc>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnAfterReleaseATOs>
2 : Codeunit<Release Sales Document>.PROCEDURE<OnAfterReleaseSalesDoc>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnAfterReopenSalesDoc>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnAfterUpdateSalesDocLines>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnBeforeCalcInvDiscount>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnBeforeCheckCustomerCreated>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnBeforeManualReleaseSalesDoc>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnBeforeManualReOpenSalesDoc>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnBeforeModifySalesDoc>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnBeforePerformManualRelease>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnBeforeReleaseSalesDoc>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnBeforeReopenSalesDoc>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnBeforeSalesLineFind>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnCodeOnAfterCheck>
1 : Codeunit<Release Sales Document>.PROCEDURE<OnReopenOnBeforeSalesHeaderModify>
1 : Codeunit<Release Purchase Document>.PROCEDURE<OnAfterManualReleasePurchaseDoc>
1 : Codeunit<Release Purchase Document>.PROCEDURE<OnAfterManualReopenPurchaseDoc>
2 : Codeunit<Release Purchase Document>.PROCEDURE<OnAfterReleasePurchaseDoc>
1 : Codeunit<Release Purchase Document>.PROCEDURE<OnAfterReopenPurchaseDoc>
1 : Codeunit<Release Purchase Document>.PROCEDURE<OnBeforeCalcInvDiscount>
1 : Codeunit<Release Purchase Document>.PROCEDURE<OnBeforeManualReleasePurchaseDoc>
1 : Codeunit<Release Purchase Document>.PROCEDURE<OnBeforeManualReopenPurchaseDoc>
1 : Codeunit<Release Purchase Document>.PROCEDURE<OnBeforeModifyPurchDoc>
1 : Codeunit<Release Purchase Document>.PROCEDURE<OnBeforePerformManualRelease>
1 : Codeunit<Release Purchase Document>.PROCEDURE<OnBeforeReleasePurchaseDoc>
1 : Codeunit<Release Purchase Document>.PROCEDURE<OnBeforeReopenPurchaseDoc>
1 : Codeunit<Release Purchase Document>.PROCEDURE<OnCodeOnAfterCheck>
1 : Codeunit<Release Purchase Document>.PROCEDURE<OnCodeOnBeforeModifyHeader>
1 : Codeunit<Release Service Document>.PROCEDURE<OnAfterPerformManualRelease>
1 : Codeunit<Release Service Document>.PROCEDURE<OnAfterReleaseServiceDoc>
1 : Codeunit<Release Service Document>.PROCEDURE<OnAfterReopenServiceDoc>
1 : Codeunit<Release Service Document>.PROCEDURE<OnBeforePerformManualRelease>
1 : Codeunit<Release Service Document>.PROCEDURE<OnBeforeReleaseServiceDoc>
1 : Codeunit<Release Service Document>.PROCEDURE<OnBeforeReopenServiceDoc>
1 : Codeunit<Release Service Document>.PROCEDURE<OnCodeOnAfterCheck>
1 : Codeunit<User Management>.PROCEDURE<OnAfterRenameRecord>
1 : Codeunit<User Management>.PROCEDURE<OnAfterRenameUser>
1 : Codeunit<User Management>.PROCEDURE<OnBeforeRenameUser>
1 : Codeunit<User Management>.PROCEDURE<OnRenameUserOnBeforeProcessField>
1 : Codeunit<File Management>.PROCEDURE<OnAfterGetToFilterTextSetOutExt>
1 : Codeunit<File Management>.PROCEDURE<OnBeforeDownloadHandler>
1 : Codeunit<CaptionManagement>.PROCEDURE<OnAfterCaptionClassTranslate>
1 : Codeunit<CaptionManagement>.PROCEDURE<OnResolveCaptionClass>
1 : Codeunit<Change Log Management>.PROCEDURE<OnAfterIsAlwaysLoggedTable>
1 : Codeunit<Payment Tolerance Management>.PROCEDURE<OnAfterCalcMaxPmtTolerance>
1 : Codeunit<Payment Tolerance Management>.PROCEDURE<OnBeforeCalcMaxPmtTolerance>
1 : Codeunit<Payment Tolerance Management>.PROCEDURE<OnBeforeCalcRemainingPmtDisc>
1 : Codeunit<Payment Tolerance Management>.PROCEDURE<OnBeforeCheckCalcPmtDisc>
1 : Codeunit<Payment Tolerance Management>.PROCEDURE<OnCalcTolCustLedgEntryOnBeforeModify>
1 : Codeunit<Payment Tolerance Management>.PROCEDURE<OnCalcTolVendLedgEntryOnBeforeModify>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterCreatePurchDocument>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterCreatePurchLines>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterCreateSalesDocument>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterCreateSalesLines>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterForwardToOutBoxPurchDoc>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterForwardToOutBoxSalesDoc>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterHandledICOutboxPurchHdrInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterHandledICOutboxSalesHdrInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterICInboxPurchHeaderInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterICInboxPurchLineInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterICInboxSalesHeaderInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterICInboxSalesLineInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterICInboxTransInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterICOutBoxSalesHeaderTransferFields>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterICOutBoxSalesLineInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeCreateOutboxPurchDocTrans>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeCreateOutboxSalesCrMemoTrans>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeCreateOutboxSalesInvTrans>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeCreateSalesDocument>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeHandledICInboxSalesLineInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeHandledICOutboxPurchLineInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeHandledICOutboxSalesLineInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeHandledInboxTransactionInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeICInboxPurchHeaderInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeICInboxPurchLineInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeICInboxSalesHeaderInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeICInboxSalesLineInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeICInboxTransInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeICOutboxTransactionCreatedPurchDocTrans>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeICOutboxTransactionCreatedSalesCrMemoTrans>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeICOutboxTransactionCreatedSalesDocTrans>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeICOutboxTransactionCreatedSalesInvTrans>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeInboxSalesLineInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeInsertGenJnlLine>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeOutBoxTransactionInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnCreateOutboxPurchDocTransOnAfterICOutBoxPurchLineInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnCreateOutboxSalesCrMemoTransOnBeforeICOutBoxSalesLineInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnCreateOutboxSalesDocTransOnAfterICOutBoxSalesLineInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnCreateOutboxSalesInvTransOnBeforeICOutBoxSalesLineInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnCreatePurchDocumentOnBeforeHandledICInboxPurchLineInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnForwardToOutBoxOnBeforeHndlInboxSalesLineInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnForwardToOutBoxOnBeforeOutboxTransactionInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnInsertICOutboxJnlLine>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnInsertICOutboxPurchDocTransaction>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnInsertICOutboxSalesCrMemoTransaction>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnInsertICOutboxSalesDocTransaction>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnInsertICOutboxSalesInvTransaction>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnInsertICOutboxTransaction>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnRecreateInboxTransactionOnBeforeDeletePurchHeader>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnRecreateInboxTransactionOnBeforeDeleteSalesHeader>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnRecreateInboxTransactionOnBeforeInboxPurchHdrInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnRecreateInboxTransactionOnBeforeInboxPurchLineInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnRecreateInboxTransactionOnBeforeInboxSalesHdrInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnRecreateInboxTransactionOnBeforeInboxTransactionInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnRecreateOutboxTransactionOnBeforeDeletePurchHeader>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnRecreateOutboxTransactionOnBeforeDeleteSalesHeader>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnRecreateOutboxTransactionOnBeforeOutboxPurchHdrInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnRecreateOutboxTransactionOnBeforeOutboxPurchLineInsert>
1 : Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnRecreateOutboxTransactionOnBeforeOutboxTransactionInsert>
1 : Codeunit<IC Outbox Export>.PROCEDURE<OnRunOutboxTransactionsOnBeforeSend>
1 : Codeunit<Consolidate>.PROCEDURE<OnBeforeGenJnlPostLine>
1 : Codeunit<Consolidate>.PROCEDURE<OnBeforeInsertGLEntry>
1 : Codeunit<Acc. Sched. BarChart DrillDown>.PROCEDURE<OnAfterAccSchedManagementSetGLAccColumnFilters>
1 : Codeunit<Acc. Sched. BarChart DrillDown>.PROCEDURE<OnAfterAccSchedManagementSetGLAccRowFilters>
1 : Codeunit<ReportManagement>.PROCEDURE<OnAfterGetPaperTrayForReport>
1 : Codeunit<ReportManagement>.PROCEDURE<OnAfterGetPrinterName>
1 : Codeunit<ReportManagement>.PROCEDURE<OnAfterHasCustomLayout>
1 : Codeunit<ReportManagement>.PROCEDURE<OnAfterSubstituteReport>
1 : Codeunit<Prepayment Mgt.>.PROCEDURE<OnBeforeTestPurchPrepayment>
1 : Codeunit<Prepayment Mgt.>.PROCEDURE<OnBeforeTestSalesPrepayment>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterCalcVATAmountLines>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterCheckPrepmtDoc>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterFillInvLineBuffer>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterInsertInvoiceRounding>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterPostBalancingEntry>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterPostCustomerEntry>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterPostPrepayments>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterPostPrepmtInvLineBuffer>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterRoundAmounts>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterSalesCrMemoHeaderInsert>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterSalesCrMemoLineInsert>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterSalesInvHeaderInsert>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterSalesInvLineInsert>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterUpdatePostedSalesDocument>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterUpdateVATOnLines>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeCreditMemo>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeFillInvLineBuffer>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeInvoice>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforePostBalancingEntry>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforePostCustomerEntry>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforePostPrepayments>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforePostPrepmtInvLineBuffer>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeSalesCrMemoHeaderInsert>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeSalesCrMemoLineInsert>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeSalesInvHeaderInsert>
1 : Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeSalesInvLineInsert>
1 : Codeunit<Sales-Post Prepayment (Yes/No)>.PROCEDURE<OnAfterPostPrepmtCrMemoYN>
1 : Codeunit<Sales-Post Prepayment (Yes/No)>.PROCEDURE<OnAfterPostPrepmtInvoiceYN>
1 : Codeunit<Sales-Post Prepayment (Yes/No)>.PROCEDURE<OnBeforeGetReport>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterCalcVATAmountLines>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterCheckPrepmtDoc>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterFillInvLineBuffer>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterInsertInvoiceRounding>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPostBalancingEntry>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPostPrepayments>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPostPrepmtInvLineBuffer>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPostVendorEntry>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPurchCrMemoHeaderInsert>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPurchCrMemoLineInsert>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPurchInvHeaderInsert>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPurchInvLineInsert>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterRoundAmounts>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterUpdatePostedPurchDocument>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterUpdateVATOnLines>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforeCreditMemo>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforeInvoice>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePostBalancingEntry>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePostPrepayments>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePostPrepmtInvLineBuffer>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePostVendorEntry>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePurchCrMemoHeaderInsert>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePurchCrMemoLineInsert>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePurchInvHeaderInsert>
1 : Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePurchInvLineInsert>
1 : Codeunit<Purch.-Post Prepmt. (Yes/No)>.PROCEDURE<OnAfterPostPrepmtCrMemoYN>
1 : Codeunit<Purch.-Post Prepmt. (Yes/No)>.PROCEDURE<OnAfterPostPrepmtInvoiceYN>
1 : Codeunit<Purch.-Post Prepmt. (Yes/No)>.PROCEDURE<OnBeforeGetReport>
1 : Codeunit<Record Link Management>.PROCEDURE<OnAfterCopyLinks>
1 : Codeunit<Job Queue Dispatcher>.PROCEDURE<OnAfterExecuteJob>
1 : Codeunit<Job Queue Dispatcher>.PROCEDURE<OnAfterHandleRequest>
1 : Codeunit<Job Queue Dispatcher>.PROCEDURE<OnBeforeCalcNextRunTimeForRecurringJob>
1 : Codeunit<Job Queue Dispatcher>.PROCEDURE<OnBeforeExecuteJob>
1 : Codeunit<Job Queue Dispatcher>.PROCEDURE<OnBeforeHandleRequest>
1 : Codeunit<Job Queue Dispatcher>.PROCEDURE<OnBeforeWaitForOthersWithSameCategory>
1 : Codeunit<Job Queue Start Codeunit>.PROCEDURE<OnAfterRun>
1 : Codeunit<Job Queue Start Codeunit>.PROCEDURE<OnBeforeRunReport>
1 : Codeunit<AutoFormatManagement>.PROCEDURE<OnAfterAutoFormatTranslate>
1 : Codeunit<Job Queue Error Handler>.PROCEDURE<OnAfterLogError>
1 : Codeunit<Job Queue Error Handler>.PROCEDURE<OnBeforeLogError>
1 : Codeunit<Job Queue - Enqueue>.PROCEDURE<OnAfterEnqueueJobQueueEntry>
1 : Codeunit<Job Queue - Enqueue>.PROCEDURE<OnBeforeJobQueueScheduleTask>
1 : Codeunit<Job Queue - Send Notification>.PROCEDURE<OnAfterRun>
1 : Codeunit<Job Queue - Send Notification>.PROCEDURE<OnBeforeRun>
1 : Codeunit<Check Dimensions>.PROCEDURE<OnBeforeCheckPurchDim>
1 : Codeunit<Check Dimensions>.PROCEDURE<OnBeforeCheckSalesDim>
4 : Codeunit<Check Dimensions>.PROCEDURE<OnCheckDimValuePostingOnAfterCreateDimTableIDs>
1 : Codeunit<Change Global Dimensions>.PROCEDURE<OnAfterGetObjectNoList>
1 : Codeunit<Change Global Dimensions>.PROCEDURE<OnBeforeScheduleTask>
1 : Codeunit<Change Global Dimensions>.PROCEDURE<OnCountingActiveSessions>
1 : Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterGetDatabaseTableTriggerSetup>
1 : Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterGetGlobalTableTriggerMask>
1 : Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnDatabaseDelete>
1 : Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnDatabaseInsert>
1 : Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnDatabaseModify>
1 : Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnDatabaseRename>
1 : Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnGlobalDelete>
1 : Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnGlobalInsert>
1 : Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnGlobalModify>
1 : Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnGlobalRename>
1 : Codeunit<GlobalTriggerManagement>.PROCEDURE<OnBeforeOnDatabaseDelete>
1 : Codeunit<GlobalTriggerManagement>.PROCEDURE<OnBeforeOnDatabaseInsert>
1 : Codeunit<GlobalTriggerManagement>.PROCEDURE<OnBeforeOnDatabaseModify>
1 : Codeunit<GlobalTriggerManagement>.PROCEDURE<OnBeforeOnDatabaseRename>
1 : Codeunit<SaaS Log In Management>.PROCEDURE<OnSuppressApprovalForTrial>
1 : Codeunit<SegManagement>.PROCEDURE<OnAfterFindInteractTmplCode>
1 : Codeunit<SegManagement>.PROCEDURE<OnAfterFindInteractTmplSetupCaption>
1 : Codeunit<SegManagement>.PROCEDURE<OnBeforeDeliverySorterInsert>
1 : Codeunit<SegManagement>.PROCEDURE<OnLogSegmentOnAfterCreateInteractionLogEntries>
1 : Codeunit<TAPIManagement>.PROCEDURE<OnAfterCreateCommMethod>
1 : Codeunit<TAPIManagement>.PROCEDURE<OnBeforeDial>
1 : Codeunit<TAPIManagement>.PROCEDURE<OnDialContCustVendBankOnBeforemakePhoneCall>
1 : Codeunit<WordManagement>.PROCEDURE<OnAddFieldsToMergeSource>
1 : Codeunit<WordManagement>.PROCEDURE<OnBeforeCheckCanRunWord>
1 : Codeunit<WordManagement>.PROCEDURE<OnCreateHeaderAddFields>
1 : Codeunit<WordManagement>.PROCEDURE<OnDeactivate>
1 : Codeunit<WordManagement>.PROCEDURE<OnFindActiveSubscriber>
2 : Codeunit<WordManagement>.PROCEDURE<OnGetWord>
1 : Codeunit<CustVendBank-Update>.PROCEDURE<OnAfterUpdateBankAccount>
1 : Codeunit<CustVendBank-Update>.PROCEDURE<OnAfterUpdateCustomer>
1 : Codeunit<CustVendBank-Update>.PROCEDURE<OnAfterUpdateVendor>
2 : Codeunit<CustCont-Update>.PROCEDURE<OnAfterTransferFieldsFromCustToCont>
1 : Codeunit<CustCont-Update>.PROCEDURE<OnBeforeContactInsert>
1 : Codeunit<VendCont-Update>.PROCEDURE<OnAfterTransferFieldsFromVendToCont>
1 : Codeunit<VendCont-Update>.PROCEDURE<OnBeforeContactInsert>
1 : Codeunit<BankCont-Update>.PROCEDURE<OnAfterTransferFieldsFromBankAccToCont>
1 : Codeunit<SegCriteriaManagement>.PROCEDURE<OnAfterSegCriteriaFilter>
1 : Codeunit<SegCriteriaManagement>.PROCEDURE<OnBeforeInsertCriteriaAction>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnAfterAutoArchivePurchDocument>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnAfterAutoArchiveSalesDocument>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnAfterPurchHeaderArchiveInsert>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnAfterRestoreSalesDocument>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnAfterRestoreSalesLine>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnAfterSalesHeaderArchiveInsert>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnAfterStorePurchDocument>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnAfterStorePurchLineArchive>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnAfterStoreSalesDocument>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnAfterStoreSalesLineArchive>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnAfterTransferFromArchToSalesHeader>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnAfterTransferFromArchToSalesLine>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnBeforeAutoArchivePurchDocument>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnBeforeAutoArchiveSalesDocument>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnBeforeCheckIfDocumentIsPartiallyPosted>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnBeforePurchHeaderArchiveInsert>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnBeforePurchLineArchiveInsert>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnBeforeRestoreSalesDocument>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnBeforeSalesHeaderArchiveInsert>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnBeforeSalesHeaderInsert>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnBeforeSalesLineArchiveInsert>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnRestoreDocumentOnAfterDeleteSalesHeader>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnRestoreDocumentOnBeforeDeleteSalesHeader>
1 : Codeunit<ArchiveManagement>.PROCEDURE<OnRestoreSalesLinesOnAfterSalesLineInsert>
1 : Codeunit<Email Logging Dispatcher>.PROCEDURE<OnAfterInsertInteractionLogEntry>
1 : Codeunit<Integration Management>.PROCEDURE<OnDeleteIntegrationRecord>
1 : Codeunit<Integration Management>.PROCEDURE<OnEnabledDatabaseTriggersSetup>
1 : Codeunit<Integration Management>.PROCEDURE<OnGetIntegrationActivated>
1 : Codeunit<Integration Management>.PROCEDURE<OnGetIntegrationDisabled>
1 : Codeunit<Integration Management>.PROCEDURE<OnGetPredefinedIdValue>
1 : Codeunit<Integration Management>.PROCEDURE<OnIsIntegrationRecord>
1 : Codeunit<Integration Management>.PROCEDURE<OnIsIntegrationRecordChild>
1 : Codeunit<Integration Management>.PROCEDURE<OnUpdateReferencedIdField>
2 : Codeunit<Integration Management>.PROCEDURE<OnUpdateRelatedRecordIdFields>
1 : Codeunit<Employee/Resource Update>.PROCEDURE<OnAfterCalculateResourceUpdateNeeded>
1 : Codeunit<Employee/Resource Update>.PROCEDURE<OnAfterUpdateResource>
1 : Codeunit<Exchange Web Services Server>.PROCEDURE<OnBeforeSaveHTMLEmailToInbox>
1 : Codeunit<Exchange Web Services Server>.PROCEDURE<OnBeforeSendEmailMessageWithAttachment>
1 : Codeunit<CRM Integration Management>.PROCEDURE<OnAfterCRMIntegrationEnabled>
1 : Codeunit<CRM Setup Defaults>.PROCEDURE<OnAfterResetCustomerAccountMapping>
1 : Codeunit<Integration Record Synch.>.PROCEDURE<OnTransferFieldData>
2 : Codeunit<CRM Integration Table Synch.>.PROCEDURE<OnQueryPostFilterIgnoreRecord>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnAfterApplyRecordTemplate>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnAfterInsertRecord>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnAfterModifyRecord>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnAfterTransferRecordFields>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnAfterUnchangedRecordHandled>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnBeforeApplyRecordTemplate>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnBeforeInsertRecord>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnBeforeModifyRecord>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnBeforeTransferRecordFields>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnErrorWhenModifyingRecord>
1 : Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnFindUncoupledDestinationRecord>
1 : Codeunit<Integration Rec. Delete Invoke>.PROCEDURE<OnAfterDeleteRecord>
1 : Codeunit<Integration Rec. Delete Invoke>.PROCEDURE<OnBeforeDeleteRecord>
1 : Codeunit<Available Management>.PROCEDURE<OnAfterCalcAvailableQty>
1 : Codeunit<Available Management>.PROCEDURE<OnAfterCalcExpectedQty>
1 : Codeunit<Unit of Measure Management>.PROCEDURE<OnBeforeCubageRndPrecision>
1 : Codeunit<Unit of Measure Management>.PROCEDURE<OnBeforeGetQtyPerUnitOfMeasure>
1 : Codeunit<Unit of Measure Management>.PROCEDURE<OnBeforeGetResQtyPerUnitOfMeasure>
1 : Codeunit<Unit of Measure Management>.PROCEDURE<OnBeforeQtyRndPrecision>
1 : Codeunit<Unit of Measure Management>.PROCEDURE<OnBeforeTimeRndPrecision>
1 : Codeunit<Unit of Measure Management>.PROCEDURE<OnBeforeWeightRndPrecision>
1 : Codeunit<AddOnIntegrManagement>.PROCEDURE<OnBeforeCheckReceiptOrderStatus>
1 : Codeunit<Output Jnl.-Expl. Route>.PROCEDURE<OnAfterCalcBaseQtyToPost>
1 : Codeunit<Output Jnl.-Expl. Route>.PROCEDURE<OnAfterInsertItemJnlLine>
1 : Codeunit<Output Jnl.-Expl. Route>.PROCEDURE<OnBeforeDeleteItemJnlLine>
1 : Codeunit<Output Jnl.-Expl. Route>.PROCEDURE<OnBeforeInsertOutputJnlLineWithoutRtngLine>
1 : Codeunit<Output Jnl.-Expl. Route>.PROCEDURE<OnBeforeInsertOutputJnlLineWithRtngLine>
1 : Codeunit<Output Jnl.-Expl. Route>.PROCEDURE<OnBeforeOutputItemJnlLineInsert>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnAfterChangeStatusOnProdOrder>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnAfterToProdOrderLineModify>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnAfterTransProdOrder>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnAfterTransProdOrderComp>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnAfterTransProdOrderLines>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnAfterUpdateGlobalDim>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnBeforeChangeStatusOnProdOrder>
2 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnBeforePostFlushItemJnlLine>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnCheckMissingOutput>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnCopyFromProdOrder>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnCopyFromProdOrderCapacityNeed>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnCopyFromProdOrderComp>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnCopyFromProdOrderLine>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnCopyFromProdOrderRoutingLine>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnFlushProdOrderOnAfterFindProdOrderRtngLine>
1 : Codeunit<Prod. Order Status Management>.PROCEDURE<OnTransProdOrderCapNeedOnBeforeDeleteAll>
1 : Codeunit<Calc. Item Plan - Plan Wksh.>.PROCEDURE<OnAfterPlanThisItemMPS>
1 : Codeunit<Calc. Item Plan - Plan Wksh.>.PROCEDURE<OnBeforePlanThisItem>
1 : Codeunit<Graph Webhook Sync To NAV>.PROCEDURE<OnFindWebhookSubscription>
1 : Codeunit<Graph Subscription Management>.PROCEDURE<OnBeforeAddOrUpdateGraphSubscriptions>
1 : Codeunit<Graph Subscription Management>.PROCEDURE<OnBeforeRunGraphSyncBackgroundSession>
1 : Codeunit<Graph Subscription Management>.PROCEDURE<OnCanSyncOnInsert>
1 : Codeunit<Graph Subscription Management>.PROCEDURE<OnGetSourceRecordRef>
4 : Codeunit<Graph Subscription Management>.PROCEDURE<OnScheduleSyncTask>
6 : Codeunit<Graph Integration Table Sync>.PROCEDURE<OnBeforeSynchronizationStart>
1 : Codeunit<Graph Sync. Runner>.PROCEDURE<OnAfterRunDeltaSyncForEntity>
1 : Codeunit<Graph Sync. Runner>.PROCEDURE<OnAfterRunFullSyncForEntity>
1 : Codeunit<Graph Sync. Runner>.PROCEDURE<OnCheckAuxiliarySyncEnabled>
1 : Codeunit<Graph Sync. Runner>.PROCEDURE<OnRunGraphDeltaSync>
1 : Codeunit<Graph Sync. Runner>.PROCEDURE<OnRunGraphFullSync>
1 : Codeunit<Graph Sync. Runner>.PROCEDURE<OnSyncSynchronouslyCannotStartSession>
1 : Codeunit<Graph Sync. Runner>.PROCEDURE<OnSyncSynchronouslyTimeout>
1 : Codeunit<Graph Data Setup>.PROCEDURE<OnAddIntegrationMapping>
1 : Codeunit<Graph Data Setup>.PROCEDURE<OnCheckCanSyncRecord>
1 : Codeunit<Graph Data Setup>.PROCEDURE<OnCreateIntegrationMappings>
1 : Codeunit<Graph Data Setup>.PROCEDURE<OnGetGraphRecord>
2 : Codeunit<Graph Data Setup>.PROCEDURE<OnGetInboundTableID>
1 : Codeunit<Graph Data Setup>.PROCEDURE<OnGetMappingCodeForTable>
1 : Codeunit<Graph Connection Setup>.PROCEDURE<OnCheckForceSync>
1 : Codeunit<Graph Connection Setup>.PROCEDURE<OnGetInboundConnectionName>
1 : Codeunit<Graph Connection Setup>.PROCEDURE<OnGetInboundConnectionString>
1 : Codeunit<Graph Connection Setup>.PROCEDURE<OnGetSubscriptionConnectionName>
1 : Codeunit<Graph Connection Setup>.PROCEDURE<OnGetSubscriptionConnectionString>
1 : Codeunit<Graph Connection Setup>.PROCEDURE<OnGetSynchronizeConnectionName>
1 : Codeunit<Graph Connection Setup>.PROCEDURE<OnGetSynchronizeConnectionString>
1 : Codeunit<Graph Connection Setup>.PROCEDURE<OnRegisterConnections>
5 : Codeunit<Graph Mgt - General Tools>.PROCEDURE<ApiSetup>
1 : Codeunit<Graph Mgt - General Tools>.PROCEDURE<OnForceIsApiEnabledVerification>
1 : Codeunit<Graph Mgt - General Tools>.PROCEDURE<OnGetAPISubscriptionsEnabled>
1 : Codeunit<Graph Mgt - General Tools>.PROCEDURE<OnGetIsAPIEnabled>
1 : Codeunit<Production Journal Mgt>.PROCEDURE<OnAfterConsumptionJnlLineInsert>
1 : Codeunit<Production Journal Mgt>.PROCEDURE<OnAfterDataHasChanged>
1 : Codeunit<Production Journal Mgt>.PROCEDURE<OnAfterInsertConsumptionJnlLine>
1 : Codeunit<Production Journal Mgt>.PROCEDURE<OnAfterInsertOutputJnlLine>
1 : Codeunit<Production Journal Mgt>.PROCEDURE<OnAfterSetTemplateAndBatchName>
1 : Codeunit<Production Journal Mgt>.PROCEDURE<OnBeforeDeleteAllItemJnlLine>
1 : Codeunit<Production Journal Mgt>.PROCEDURE<OnBeforeInsertConsumptionJnlLine>
1 : Codeunit<Production Journal Mgt>.PROCEDURE<OnBeforeInsertOutputJnlLine>
1 : Codeunit<Production Journal Mgt>.PROCEDURE<OnBeforeRunProductionJnl>
1 : Codeunit<Production Journal Mgt>.PROCEDURE<OnCreateJnlLinesOnAfterFindProdOrderRtngLine>
1 : Codeunit<Production Journal Mgt>.PROCEDURE<OnCreateJnlLinesOnBeforeCheckProdOrderLine>
1 : Codeunit<Production Journal Mgt>.PROCEDURE<OnInsertConsumptionJnlLineOnBeforeCheck>
1 : Codeunit<Order Planning Mgt.>.PROCEDURE<OnBeforeReqLineModify>
1 : Codeunit<Order Planning Mgt.>.PROCEDURE<OnInsertDemandLinesOnBeforeReqLineInsert>
1 : Codeunit<Calc. Item Availability>.PROCEDURE<OnAfterGetDocumentEntries>
1 : Codeunit<Calc. Item Availability>.PROCEDURE<OnAfterGetSourceReferences>
1 : Codeunit<Calc. Item Availability>.PROCEDURE<OnAfterShowDocument>
1 : Codeunit<Calc. Inventory Page Data>.PROCEDURE<OnAfterUpdatePeriodTotals>
1 : Codeunit<Calc. Inventory Page Data>.PROCEDURE<OnDetailsForPeriodEntryOnBeforeInvtPageDataInsert>
1 : Codeunit<Calc. Inventory Page Data>.PROCEDURE<OnTransferToPeriodDetailsElseCase>
1 : Codeunit<Calc. Item Avail. Timeline>.PROCEDURE<OnAfterUpdateTimelineEventDetails>
1 : Codeunit<Calc. Item Avail. Timeline>.PROCEDURE<OnCreateTimelineEventsBeforePlanning>
1 : Codeunit<Sales - Calc Discount By Type>.PROCEDURE<OnAfterResetRecalculateInvoiceDisc>
1 : Codeunit<Sales - Calc Discount By Type>.PROCEDURE<OnBeforeApplyDefaultInvoiceDiscount>
1 : Codeunit<Sales - Calc Discount By Type>.PROCEDURE<OnBeforeShouldRedistributeInvoiceDiscountAmount>
1 : Codeunit<FA Insert Ledger Entry>.PROCEDURE<OnBeforeInsertFA>
1 : Codeunit<FA Insert Ledger Entry>.PROCEDURE<OnBeforeInsertRegister>
1 : Codeunit<FA Insert Ledger Entry>.PROCEDURE<OnInsertReverseEntryOnBeforeInsertRegister>
1 : Codeunit<FA Insert G/L Account>.PROCEDURE<OnAfterCopyFAGLPostBufFromFALederEntry>
1 : Codeunit<FA Insert G/L Account>.PROCEDURE<OnGetBalAccAfterRestoreGenJnlLineFields>
1 : Codeunit<FA Insert G/L Account>.PROCEDURE<OnGetBalAccAfterSaveGenJnlLineFields>
1 : Codeunit<FA Get G/L Account No.>.PROCEDURE<OnAfterGetAccNo>
1 : Codeunit<Make FA Ledger Entry>.PROCEDURE<OnAfterCopyFromFACard>
1 : Codeunit<Make FA Ledger Entry>.PROCEDURE<OnAfterCopyFromFAJnlLine>
1 : Codeunit<Make FA Ledger Entry>.PROCEDURE<OnAfterCopyFromGenJnlLine>
1 : Codeunit<Make FA Ledger Entry>.PROCEDURE<OnBeforeCopyFromFACard>
1 : Codeunit<Calculate Disposal>.PROCEDURE<OnCalcGainLossOnAfterSetEntryAmounts>
1 : Codeunit<FA Check Consistency>.PROCEDURE<OnSetFAPostingDateOnBeforeFADeprBookModify>
1 : Codeunit<Calculate Normal Depreciation>.PROCEDURE<OnAfterCalcSL>
1 : Codeunit<Calculate Normal Depreciation>.PROCEDURE<OnAfterCalculateDeprAmount>
1 : Codeunit<Calculate Normal Depreciation>.PROCEDURE<OnAfterTransferValues>
1 : Codeunit<Budget Depreciation>.PROCEDURE<OnBeforeGLBudgetEntryInsert>
1 : Codeunit<Depreciation Calculation>.PROCEDURE<OnAfterAdjustDepr>
1 : Codeunit<Depreciation Calculation>.PROCEDURE<OnAfterCalcDepreciation>
1 : Codeunit<Cancel FA Ledger Entries>.PROCEDURE<OnAfterInsertFAJnlLine>
1 : Codeunit<Cancel FA Ledger Entries>.PROCEDURE<OnAfterInsertGenJnlLine>
1 : Codeunit<Cancel FA Ledger Entries>.PROCEDURE<OnBeforeCheckType>
1 : Codeunit<Cancel FA Ledger Entries>.PROCEDURE<OnBeforeFAJnlLineInsert>
1 : Codeunit<Cancel FA Ledger Entries>.PROCEDURE<OnBeforeGenJnlLineInsert>
1 : Codeunit<FA General Report>.PROCEDURE<OnBeforeCalcFAPostedAmount>
1 : Codeunit<FA Jnl.-Check Line>.PROCEDURE<OnAfterCheckFAJnlLine>
1 : Codeunit<FA Jnl.-Check Line>.PROCEDURE<OnAfterCheckGenJnlLine>
1 : Codeunit<FA Jnl.-Check Line>.PROCEDURE<OnBeforeCheckFAPostingDate>
1 : Codeunit<FA Jnl.-Post Line>.PROCEDURE<OnAfterFAJnlPostLine>
1 : Codeunit<FA Jnl.-Post Line>.PROCEDURE<OnAfterGenJnlPostLine>
1 : Codeunit<FA Jnl.-Post Line>.PROCEDURE<OnBeforeFAJnlPostLine>
1 : Codeunit<FA Jnl.-Post Line>.PROCEDURE<OnBeforeGenJnlPostLine>
1 : Codeunit<FA Jnl.-Post Line>.PROCEDURE<OnBeforePostFixedAssetFromGenJnlLine>
1 : Codeunit<FA Jnl.-Post Batch>.PROCEDURE<OnBeforeCommit>
1 : Codeunit<FA Reclass. Check Line>.PROCEDURE<OnAfterOnRun>
1 : Codeunit<FA Reclass. Transfer Line>.PROCEDURE<OnBeforeGenJnlLineInsert>
1 : Codeunit<FA Reclass. Transfer Batch>.PROCEDURE<OnBeforeFAReclassJnlLineInsert>
1 : Codeunit<Make Maintenance Ledger Entry>.PROCEDURE<OnAfterCopyFromFACard>
1 : Codeunit<Make Maintenance Ledger Entry>.PROCEDURE<OnAfterCopyFromFAJnlLine>
1 : Codeunit<Make Maintenance Ledger Entry>.PROCEDURE<OnAfterCopyFromGenJnlLine>
1 : Codeunit<Make Ins. Coverage Ledg. Entry>.PROCEDURE<OnAfterCopyFromJnlLine>
1 : Codeunit<FA. Jnl.-Post+Print>.PROCEDURE<OnBeforePostJournalBatch>
1 : Codeunit<FA. Jnl.-B.Post+Print>.PROCEDURE<OnBeforePostJournalBatch>
1 : Codeunit<Insurance Jnl.-Post+Print>.PROCEDURE<OnBeforePostJournalBatch>
1 : Codeunit<Insurance Jnl.-B.Post+Print>.PROCEDURE<OnBeforePostJournalBatch>
1 : Codeunit<Document Totals>.PROCEDURE<OnAfterCalculatePurchaseSubPageTotals>
1 : Codeunit<Document Totals>.PROCEDURE<OnAfterCalculateSalesSubPageTotals>
1 : Codeunit<Document Totals>.PROCEDURE<OnAfterPurchaseLineSetFilters>
1 : Codeunit<Document Totals>.PROCEDURE<OnAfterPurchaseRedistributeInvoiceDiscountAmounts>
1 : Codeunit<Document Totals>.PROCEDURE<OnAfterSalesLineSetFilters>
1 : Codeunit<Document Totals>.PROCEDURE<OnAfterSalesRedistributeInvoiceDiscountAmounts>
1 : Codeunit<Document Totals>.PROCEDURE<OnBeforePurchUpdateTotalsControls>
1 : Codeunit<Document Totals>.PROCEDURE<OnBeforeSalesUpdateTotalsControls>
1 : Codeunit<Document Totals>.PROCEDURE<OnCalculateSalesSubPageTotalsOnAfterSetFilters>
1 : Codeunit<G/L Account Category Mgt.>.PROCEDURE<OnBeforeOnRunAccountScheduleReport>
1 : Codeunit<User Setup Management>.PROCEDURE<OnAfterGetPurchFilter2>
1 : Codeunit<User Setup Management>.PROCEDURE<OnAfterGetSalesFilter2>
1 : Codeunit<User Setup Management>.PROCEDURE<OnAfterGetServiceFilter2>
1 : Codeunit<User Setup Management>.PROCEDURE<OnBeforeGetSalesFilter2>
1 : Codeunit<Item Subst.>.PROCEDURE<OnAfterUpdateComponentBeforeAssign>
1 : Codeunit<Item Subst.>.PROCEDURE<OnAssemblyCalcCustPriceOnAfterCalcQtyAvail>
1 : Codeunit<Item Subst.>.PROCEDURE<OnAssemblyCalcCustPriceOnBeforeCalcQtyAvail>
1 : Codeunit<Item Subst.>.PROCEDURE<OnCalcCustPriceOnAfterCalcQtyAvail>
1 : Codeunit<Item Subst.>.PROCEDURE<OnCalcCustPriceOnBeforeCalcQtyAvail>
1 : Codeunit<Item Subst.>.PROCEDURE<OnCalcCustPriceOnBeforeTempItemSubstitutionInsert>
1 : Codeunit<Item Subst.>.PROCEDURE<OnCreateSubstListOnAfterCalcQtyAvail>
1 : Codeunit<Item Subst.>.PROCEDURE<OnCreateSubstListOnBeforeCalcQtyAvail>
1 : Codeunit<Item Subst.>.PROCEDURE<OnInsertInSubstServiceListOnAfterCalcQtyAvail>
1 : Codeunit<Item Subst.>.PROCEDURE<OnInsertInSubstServiceListOnBeforeCalcQtyAvail>
1 : Codeunit<Item Subst.>.PROCEDURE<OnItemSubstGetOnAfterSubstSalesLineItem>
1 : Codeunit<Dist. Integration>.PROCEDURE<OnAfterInsertPurchLine>
1 : Codeunit<Dist. Integration>.PROCEDURE<OnAfterPurchItemCrossRefFound>
1 : Codeunit<Dist. Integration>.PROCEDURE<OnAfterPurchItemCrossRefNotFound>
1 : Codeunit<Dist. Integration>.PROCEDURE<OnAfterSalesItemCrossRefFound>
1 : Codeunit<Dist. Integration>.PROCEDURE<OnAfterSalesItemCrossRefNotFound>
1 : Codeunit<Dist. Integration>.PROCEDURE<OnAfterSalesLineModify>
1 : Codeunit<Dist. Integration>.PROCEDURE<OnBeforeICRLookupPurchaseItem>
1 : Codeunit<Dist. Integration>.PROCEDURE<OnBeforeICRLookupSalesItem>
1 : Codeunit<Dist. Integration>.PROCEDURE<OnBeforeInsertPurchLine>
1 : Codeunit<Dist. Integration>.PROCEDURE<OnBeforeSalesLineModify>
1 : Codeunit<Dist. Integration>.PROCEDURE<OnGetSpecialOrdersOnAfterSalesLineSetFilters>
1 : Codeunit<Dist. Integration>.PROCEDURE<OnGetSpecialOrdersOnAfterTransferExtendedText>
1 : Codeunit<Dist. Integration>.PROCEDURE<OnGetSpecialOrdersOnBeforeSelectSalesHeader>
1 : Codeunit<Dist. Integration>.PROCEDURE<OnGetSpecialOrdersOnBeforeTestSalesHeader>
1 : Codeunit<Dist. Integration>.PROCEDURE<OnGetSpecialOrdersOnBeforeTestSalesLine>
1 : Codeunit<Catalog Item Management>.PROCEDURE<OnAfterCreateNewItem>
2 : Codeunit<Catalog Item Management>.PROCEDURE<OnAfterItemCrossReferenceFilter>
2 : Codeunit<Catalog Item Management>.PROCEDURE<OnAfterItemCrossReferenceInsert>
1 : Codeunit<Catalog Item Management>.PROCEDURE<OnBeforeCreateNewItem>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterCheckInvtPostingSetup>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterCreateItemJnlLine>
2 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterInsertShptEntryRelation>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterInsertTransShptHeader>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterInsertTransShptLine>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterInvtAdjmt>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterTransferOrderPostShipment>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterTransLineModify>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforeCheckItemInInventory>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforeCopyTransLines>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforeDeleteOneTransferOrder>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforeGenNextNo>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforeInsertTransShptHeader>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforeInsertTransShptLine>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforePostItemJournalLine>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforeTransferOrderPostShipment>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnCheckTransLine>
1 : Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnInsertTransShptLineOnAfterCreatePostedShptLine>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterCheckInvtPostingSetup>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterInsertTransRcptLine>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterTransferOderPostReceipt>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterTransferOrderPostReceipt>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterTransLineUpdateQtyReceived>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterTransRcptLineModify>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforeDeleteOneTransferHeader>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforeInsertTransRcptHeader>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforeInsertTransRcptLine>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforePostItemJournalLine>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforeTransferOderPostReceipt>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforeTransferOrderPostReceipt>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforeTransRcptHeaderInsert>
1 : Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnCheckTransLine>
1 : Codeunit<TransferOrder-Post (Yes/No)>.PROCEDURE<OnAfterPost>
1 : Codeunit<TransferOrder-Post (Yes/No)>.PROCEDURE<OnBeforePost>
1 : Codeunit<TransferOrder-Post + Print>.PROCEDURE<OnAfterPost>
1 : Codeunit<Release Transfer Document>.PROCEDURE<OnAfterReleaseTransferDoc>
1 : Codeunit<Release Transfer Document>.PROCEDURE<OnAfterReopenTransferDoc>
1 : Codeunit<Release Transfer Document>.PROCEDURE<OnBeforeCheckTransLines>
1 : Codeunit<Release Transfer Document>.PROCEDURE<OnBeforeReleaseTransferDoc>
1 : Codeunit<Release Transfer Document>.PROCEDURE<OnBeforeReopenTransferDoc>
1 : Codeunit<Categ. Generate Acc. Schedules>.PROCEDURE<OnAfterAddAccSchedLine>
1 : Codeunit<Categ. Generate Acc. Schedules>.PROCEDURE<OnAfterAddParentAccSchedLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateRcptLineFromPurchLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateRcptLineFromSalesLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateRcptLineFromTransLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateShptLineFromPurchLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateShptLineFromSalesLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateShptLineFromServiceLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateShptLineFromTransLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterInitNewWhseShptLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterWhseReceiptLineInsert>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterWhseShptLineInsert>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeCheckIfPurchLine2ReceiptLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeCheckIfPurchLine2ShptLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeCheckIfSalesLine2ReceiptLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeCheckIfSalesLine2ShptLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeCheckIfTransLine2ReceiptLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeCheckIfTransLine2ShipmentLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeCreateShptLineFromPurchLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeCreateShptLineFromSalesLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeCreateShptLineFromTransLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeUpdateRcptLineFromTransLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeWhseReceiptLineInsert>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeWhseShptLineInsert>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnFromPurchLine2ShptLineOnAfterInitNewLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnFromPurchLine2ShptLineOnBeforeCreateShptLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnFromServiceLine2ShptLineOnAfterInitNewLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnFromTransLine2ShptLineOnAfterInitNewLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnPurchLine2ReceiptLineOnAfterInitNewLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnPurchLine2ReceiptLineOnAfterSetQtysOnRcptLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnSalesLine2ReceiptLineOnAfterInitNewLine>
1 : Codeunit<Whse.-Create Source Document>.PROCEDURE<OnTransLine2ReceiptLineOnAfterInitNewLine>
1 : Codeunit<Get Source Doc. Inbound>.PROCEDURE<OnAfterFindWarehouseRequestForInbndTransferOrder>
1 : Codeunit<Get Source Doc. Inbound>.PROCEDURE<OnAfterFindWarehouseRequestForPurchaseOrder>
1 : Codeunit<Get Source Doc. Inbound>.PROCEDURE<OnAfterFindWarehouseRequestForSalesReturnOrder>
1 : Codeunit<Get Source Doc. Inbound>.PROCEDURE<OnAfterGetInboundDocs>
1 : Codeunit<Get Source Doc. Inbound>.PROCEDURE<OnAfterGetSingleInboundDoc>
1 : Codeunit<Get Source Doc. Inbound>.PROCEDURE<OnBeforeCreateFromInbndTransferOrder>
1 : Codeunit<Get Source Doc. Inbound>.PROCEDURE<OnBeforeCreateFromPurchOrder>
1 : Codeunit<Get Source Doc. Inbound>.PROCEDURE<OnBeforeCreateFromSalesReturnOrder>
1 : Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnAfterCreateWhseShipmentHeaderFromWhseRequest>
1 : Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnAfterFindWarehouseRequestForOutbndTransferOrder>
1 : Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnAfterFindWarehouseRequestForPurchReturnOrder>
1 : Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnAfterFindWarehouseRequestForSalesOrder>
1 : Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnAfterFindWarehouseRequestForServiceOrder>
1 : Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnAfterGetOutboundDocs>
1 : Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnAfterGetSingleOutboundDoc>
1 : Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnBeforeCheckAvailability>
1 : Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnBeforeCheckSalesHeader>
1 : Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnBeforeCreateFromOutbndTransferOrder>
1 : Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnBeforeCreateFromPurchaseReturnOrder>
1 : Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnBeforeCreateFromServiceOrder>
1 : Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnCheckSalesHeaderOnAfterSetLineFilters>
1 : Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnGetSingleWhsePickDocOnWhsePickRqstSetFilters>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterCheckWhseRcptLine>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterCheckWhseRcptLines>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterCode>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterCreatePutAwayDeleteBlankBinContent>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterCreatePutAwayDoc>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterFindWhseRcptLineForPurchLine>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterFindWhseRcptLineForSalesLine>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterFindWhseRcptLineForTransLine>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterInitPostedRcptLine>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterInitSourceDocumentLines>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterPostUpdateWhseDocuments>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterPostUpdateWhseRcptLine>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterPostWhseJnlLine>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterRun>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforeCreatePutAwayDoc>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforeInsertTempWhseJnlLine>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforePostedWhseRcptHeaderInsert>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforePostedWhseRcptLineInsert>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforePostSourceDocument>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforePostUpdateWhseDocuments>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforePostUpdateWhseRcptLine>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforePostWhseJnlLine>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforePurchLineModify>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforeRegisterWhseJnlLines>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforeRun>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforeSalesLineModify>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforeTransLineModify>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnCodeOnBeforeWhseRcptHeaderModify>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnCreatePutAwayDocOnBeforeCreatePutAwayRun>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnInitSourceDocumentHeader>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnInitSourceDocumentHeaderOnBeforePurchHeaderModify>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnInitSourceDocumentHeaderOnBeforeSalesHeaderModify>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnInitSourceDocumentHeaderOnBeforeTransHeaderModify>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnInitSourceDocumentLines>
1 : Codeunit<Whse.-Post Receipt>.PROCEDURE<OnPostSourceDocument>
1 : Codeunit<Whse.-Post Receipt (Yes/No)>.PROCEDURE<OnAfterConfirmPost>
1 : Codeunit<Whse.-Post Receipt (Yes/No)>.PROCEDURE<OnBeforeConfirmWhseReceiptPost>
1 : Codeunit<Whse.-Post Receipt + Print>.PROCEDURE<OnBeforeCode>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterCheckWhseShptLine>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterCheckWhseShptLines>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterCreateWhseJnlLine>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterFindWhseShptLineForPurchLine>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterFindWhseShptLineForSalesLine>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterFindWhseShptLineForTransLine>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterInitSourceDocumentHeader>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterPostedWhseShptHeaderInsert>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterPostUpdateWhseShptLine>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterPostWhseJnlLine>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterPostWhseShipment>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterRun>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforeCheckWhseShptLines>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforeDeleteUpdateWhseShptLine>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforeInitSourceDocumentHeader>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforePostedWhseShptHeaderInsert>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforePostSourceDocument>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforePostUpdateWhseDocuments>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforePostUpdateWhseShptLine>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforePostUpdateWhseShptLineModify>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforePostWhseJnlLine>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforePurchLineModify>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforeRun>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforeSalesLineModify>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforeTransLineModify>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnCreatePostedShptLineOnBeforePostWhseJnlLine>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnInitSourceDocumentHeader>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnInitSourceDocumentHeaderOnBeforePurchHeaderModify>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnInitSourceDocumentHeaderOnBeforeReopenSalesHeader>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnInitSourceDocumentHeaderOnBeforeSalesHeaderModify>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnInitSourceDocumentHeaderOnBeforeServiceHeaderModify>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnInitSourceDocumentHeaderOnBeforeTransHeaderModify>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnPostSourceDocument>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnPostSourceDocumentOnBeforePrintPurchReturnShipment>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnPostSourceDocumentOnBeforePrintSalesInvoice>
1 : Codeunit<Whse.-Post Shipment>.PROCEDURE<OnPostSourceDocumentOnBeforePrintSalesShipment>
1 : Codeunit<Whse.-Post Shipment (Yes/No)>.PROCEDURE<OnAfterConfirmPost>
1 : Codeunit<Whse.-Post Shipment (Yes/No)>.PROCEDURE<OnBeforeConfirmWhseShipmentPost>
1 : Codeunit<Whse.-Post Shipment + Print>.PROCEDURE<OnAfterConfirmPost>
1 : Codeunit<Whse.-Post Shipment + Print>.PROCEDURE<OnBeforeCode>
1 : Codeunit<Whse.-Post Receipt + Pr. Pos.>.PROCEDURE<OnBeforeCode>
1 : Codeunit<Whse.-Service Release>.PROCEDURE<OnAfterCreateWhseRqst>
1 : Codeunit<Whse.-Service Release>.PROCEDURE<OnAfterRelease>
1 : Codeunit<Whse.-Service Release>.PROCEDURE<OnAfterReleaseSetFilters>
1 : Codeunit<Whse.-Service Release>.PROCEDURE<OnAfterReopen>
1 : Codeunit<Whse.-Service Release>.PROCEDURE<OnBeforeCreateWhseRequest>
1 : Codeunit<Whse.-Service Release>.PROCEDURE<OnBeforeRelease>
1 : Codeunit<Whse.-Service Release>.PROCEDURE<OnBeforeReopen>
1 : Codeunit<Whse.-Sales Release>.PROCEDURE<OnAfterCreateWhseRequest>
1 : Codeunit<Whse.-Sales Release>.PROCEDURE<OnAfterRelease>
1 : Codeunit<Whse.-Sales Release>.PROCEDURE<OnAfterReleaseSetFilters>
1 : Codeunit<Whse.-Sales Release>.PROCEDURE<OnAfterReopen>
1 : Codeunit<Whse.-Sales Release>.PROCEDURE<OnBeforeCreateWhseRequest>
1 : Codeunit<Whse.-Sales Release>.PROCEDURE<OnBeforeRelease>
1 : Codeunit<Whse.-Sales Release>.PROCEDURE<OnBeforeReleaseSetWhseRequestSourceDocument>
1 : Codeunit<Whse.-Sales Release>.PROCEDURE<OnBeforeReopen>
1 : Codeunit<Whse.-Sales Release>.PROCEDURE<OnBeforeReopenSetWhseRequestSourceDocument>
1 : Codeunit<Whse.-Purch. Release>.PROCEDURE<OnAfterCreateWhseRqst>
1 : Codeunit<Whse.-Purch. Release>.PROCEDURE<OnAfterRelease>
1 : Codeunit<Whse.-Purch. Release>.PROCEDURE<OnAfterReleaseSetFilters>
1 : Codeunit<Whse.-Purch. Release>.PROCEDURE<OnAfterReopen>
1 : Codeunit<Whse.-Purch. Release>.PROCEDURE<OnBeforeCreateWhseRequest>
1 : Codeunit<Whse.-Purch. Release>.PROCEDURE<OnBeforeRelease>
1 : Codeunit<Whse.-Purch. Release>.PROCEDURE<OnBeforeReopen>
1 : Codeunit<Whse.-Purch. Release>.PROCEDURE<OnReleaseOnAfterCreateWhseRequest>
1 : Codeunit<Whse.-Transfer Release>.PROCEDURE<OnAfterCreateInboundWhseRequest>
1 : Codeunit<Whse.-Transfer Release>.PROCEDURE<OnAfterCreateOutboundWhseRequest>
1 : Codeunit<Whse.-Transfer Release>.PROCEDURE<OnAfterRelease>
1 : Codeunit<Whse.-Transfer Release>.PROCEDURE<OnAfterReopen>
2 : Codeunit<Whse.-Transfer Release>.PROCEDURE<OnBeforeCreateWhseRequest>
1 : Codeunit<Whse.-Transfer Release>.PROCEDURE<OnBeforeRelease>
1 : Codeunit<Whse.-Transfer Release>.PROCEDURE<OnBeforeReopen>
1 : Codeunit<Whse.-Production Release>.PROCEDURE<OnAfterDeleteLine>
1 : Codeunit<Whse.-Production Release>.PROCEDURE<OnAfterRelease>
2 : Codeunit<Whse.-Production Release>.PROCEDURE<OnBeforeCreateWhsePickRequest>
1 : Codeunit<Whse.-Production Release>.PROCEDURE<OnBeforeCreateWhseRequest>
1 : Codeunit<Whse.-Production Release>.PROCEDURE<OnBeforeReleaseWhseProdOrder>
1 : Codeunit<Whse.-Production Release>.PROCEDURE<OnBeforeWarehouseRequestUpdate>
1 : Codeunit<Whse. Management>.PROCEDURE<OnAfterGetSrcDocLineQtyOutstanding>
1 : Codeunit<Warehouse Document-Print>.PROCEDURE<OnBeforePrintInvtMovementHeader>
1 : Codeunit<Warehouse Document-Print>.PROCEDURE<OnBeforePrintInvtPickHeader>
1 : Codeunit<Warehouse Document-Print>.PROCEDURE<OnBeforePrintInvtPutAwayHeader>
1 : Codeunit<Warehouse Document-Print>.PROCEDURE<OnBeforePrintMovementHeader>
1 : Codeunit<Warehouse Document-Print>.PROCEDURE<OnBeforePrintPickHeader>
1 : Codeunit<Warehouse Document-Print>.PROCEDURE<OnBeforePrintPostedRcptHeader>
1 : Codeunit<Warehouse Document-Print>.PROCEDURE<OnBeforePrintPostedShptHeader>
1 : Codeunit<Warehouse Document-Print>.PROCEDURE<OnBeforePrintPutAwayHeader>
1 : Codeunit<Warehouse Document-Print>.PROCEDURE<OnBeforePrintRcptHeader>
1 : Codeunit<Warehouse Document-Print>.PROCEDURE<OnBeforePrintShptHeader>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterAssemblyLineDelete>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterAssemblyLineVerifyChange>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterItemLineVerifyChange>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterProdComponentDelete>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterProdComponentVerifyChange>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterProdOrderLineDelete>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterProdOrderLineVerifyChange>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterPurchaseLineDelete>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterPurchaseLineVerifyChange>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterSalesLineDelete>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterSalesLineVerifyChange>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterServiceLineDelete>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterServiceLineVerifyChange>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterTransLineDelete>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterTransLineVerifyChange>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnBeforeVerifyFieldNotChanged>
1 : Codeunit<Whse. Validate Source Line>.PROCEDURE<OnTransLineCommonVerificationOnBeforeQuantityCheck>
1 : Codeunit<Whse.-Printed>.PROCEDURE<OnBeforeModify>
1 : Codeunit<Whse. Cross-Dock Management>.PROCEDURE<OnAfterUpdateQtyToCrossDock>
1 : Codeunit<Whse. Cross-Dock Management>.PROCEDURE<OnShowCrossDockOnAfterReceiptLineModify>
1 : Codeunit<Available to Promise>.PROCEDURE<OnAfterCalcAvailableInventory>
1 : Codeunit<Available to Promise>.PROCEDURE<OnAfterCalcGrossRequirement>
1 : Codeunit<Available to Promise>.PROCEDURE<OnAfterCalcReservedReceipt>
1 : Codeunit<Available to Promise>.PROCEDURE<OnAfterCalcReservedRequirement>
1 : Codeunit<Available to Promise>.PROCEDURE<OnAfterCalcScheduledReceipt>
1 : Codeunit<Available to Promise>.PROCEDURE<OnAfterCalculateAvailability>
1 : Codeunit<Available to Promise>.PROCEDURE<OnAfterQtyAvailableToPromise>
1 : Codeunit<Available to Promise>.PROCEDURE<OnBeforeCalcGrossRequirement>
1 : Codeunit<Available to Promise>.PROCEDURE<OnBeforeCalcScheduledReceipt>
1 : Codeunit<Available to Promise>.PROCEDURE<OnBeforeQtyAvailableToPromise>
1 : Codeunit<Show Applied Entries>.PROCEDURE<OnBeforeInsertTempEntry>
2 : Codeunit<Show Applied Entries>.PROCEDURE<OnFindAppliedEntryOnAfterSetFilters>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnAfterBufferPosting>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnAfterBufferSalesPosting>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnAfterCalcCostToPostFromBuffer>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnAfterInitInvtPostBuf>
2 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnAfterInitTempInvtPostBuf>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnAfterSetAccNo>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnAfterSetAmt>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforeBufferAdjmtPosting>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforeBufferInvtPosting>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforeBufferOutputPosting>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforeBufferPosting>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforeBufferPurchPosting>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforeBufferSalesPosting>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforeCheckGLAcc>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforeCheckInvtPostBuf>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforeGetInvtPostSetup>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforeGLItemLedgRelationInsert>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforeInitInvtPostBuf>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforeOnRun>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforePostInvtPostBuf>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforeSetAccNo>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnPostInvtPostBufferOnBeforeFind>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnPostInvtPostBufOnAfterInitGenJnlLine>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnUpdateGlobalInvtPostBufOnBeforeModify>
1 : Codeunit<Inventory Posting To G/L>.PROCEDURE<OnUpdateValueEntryOnBeforeModify>
1 : Codeunit<Show Avg. Calc. - Item>.PROCEDURE<OnBeforeDrillDownAvgCostAdjmtPoint>
1 : Codeunit<ItemCostManagement>.PROCEDURE<OnBeforeCalcLastAdjEntryAvgCost>
1 : Codeunit<ItemCostManagement>.PROCEDURE<OnBeforeCalculateAverageCost>
1 : Codeunit<ItemCostManagement>.PROCEDURE<OnBeforeUpdateUnitCost>
1 : Codeunit<ItemCostManagement>.PROCEDURE<OnBeforeUpdateUnitCostSKU>
1 : Codeunit<ItemCostManagement>.PROCEDURE<OnUpdateStdCostSharesOnAfterCopyCosts>
1 : Codeunit<ItemCostManagement>.PROCEDURE<OnUpdateUnitCostOnBeforeNetInvoiceQtyCheck>
1 : Codeunit<ItemCostManagement>.PROCEDURE<OnUpdateUnitCostOnBeforeUpdateSKU>
1 : Codeunit<ItemCostManagement>.PROCEDURE<OnUpdateUnitCostOnBeforeValidatePriceProfitCalculation>
1 : Codeunit<ItemCostManagement>.PROCEDURE<OnUpdateUnitCostSKUOnBeforeMatchSKU>
1 : Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnAfterCreateDocChargeAssgnt>
1 : Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnAssignByAmountOnBeforeItemChargeAssignmentPurchModify>
1 : Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnAssignEquallyOnBeforeItemChargeAssignmentPurchModify>
1 : Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnAssignItemCharges>
1 : Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnBeforeAssignItemCharges>
1 : Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnBeforeCreateDocChargeAssgn>
1 : Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnBeforeCreateReturnRcptChargeAssgnt>
1 : Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnBeforeCreateSalesShptChargeAssgnt>
1 : Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnBeforeCreateShptChargeAssgnt>
1 : Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnBeforeInsertItemChargeAssgntWithAssignValues>
1 : Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnBeforeShowSuggestItemChargeAssignStrMenu>
1 : Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<OnAfterCreateDocChargeAssgnt>
1 : Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<OnAssignByAmountOnBeforeItemChargeAssignmentSalesModify>
1 : Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<OnAssignEquallyOnBeforeItemChargeAssignmentSalesModify>
1 : Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<OnAssignItemCharges>
1 : Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<OnBeforeAssignItemCharges>
1 : Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<OnBeforeCreateDocChargeAssgn>
1 : Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<OnBeforeInsertItemChargeAssgntWithAssignValues>
1 : Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<OnBeforeShowSuggestItemChargeAssignStrMenu>
1 : Codeunit<Change Exp. Cost Post. to G/L>.PROCEDURE<OnBeforePostValueEntryToGLInsert>
1 : Codeunit<Calculate Standard Cost>.PROCEDURE<OnAfterCalcRtngLineCost>
1 : Codeunit<Calculate Standard Cost>.PROCEDURE<OnBeforeCalcItem>
1 : Codeunit<Calculate Standard Cost>.PROCEDURE<OnBeforeCalcItems>
1 : Codeunit<Calculate Standard Cost>.PROCEDURE<OnCalcItemOnBeforeShowStrMenu>
1 : Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnAfterCode>
1 : Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnAfterCopyItemJnlLineFromPurchRcpt>
1 : Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnAfterInsertNewReceiptLine>
1 : Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnAfterNewPurchRcptLineInsert>
1 : Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnAfterPurchRcptLineModify>
1 : Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnAfterUpdateOrderLine>
1 : Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnBeforeBlanketOrderInitOutstanding>
1 : Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnBeforeCheckPurchRcptLine>
1 : Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnBeforeNewPurchRcptLineInsert>
1 : Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnBeforeOnRun>
1 : Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnBeforePostItemJnlLine>
1 : Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnBeforePurchRcptLineModify>
1 : Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnPostItemJournalInboundItemEntryPostingWithJob>
1 : Codeunit<Undo Return Shipment Line>.PROCEDURE<OnAfterCode>
1 : Codeunit<Undo Return Shipment Line>.PROCEDURE<OnAfterCopyItemJnlLineFromReturnShpt>
1 : Codeunit<Undo Return Shipment Line>.PROCEDURE<OnAfterInsertNewReturnShptLine>
1 : Codeunit<Undo Return Shipment Line>.PROCEDURE<OnAfterNewReturnShptLineInsert>
1 : Codeunit<Undo Return Shipment Line>.PROCEDURE<OnAfterReturnShptLineModify>
1 : Codeunit<Undo Return Shipment Line>.PROCEDURE<OnAfterUpdatePurchLine>
1 : Codeunit<Undo Return Shipment Line>.PROCEDURE<OnBeforeCheckReturnShptLine>
1 : Codeunit<Undo Return Shipment Line>.PROCEDURE<OnBeforeNewReturnShptLineInsert>
1 : Codeunit<Undo Return Shipment Line>.PROCEDURE<OnBeforeOnRun>
1 : Codeunit<Undo Return Shipment Line>.PROCEDURE<OnBeforePostItemJnlLine>
1 : Codeunit<Undo Return Shipment Line>.PROCEDURE<OnBeforeReturnShptLineModify>
1 : Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnAfterCode>
1 : Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnAfterCopyItemJnlLineFromSalesShpt>
1 : Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnAfterInsertNewShipmentLine>
1 : Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnAfterNewSalesShptLineInsert>
1 : Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnAfterSalesShptLineModify>
1 : Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnAfterUpdateSalesLine>
1 : Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnBeforeBlanketOrderInitOutstanding>
1 : Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnBeforeCheckSalesShptLine>
1 : Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnBeforeNewSalesShptLineInsert>
1 : Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnBeforeOnRun>
1 : Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnBeforePostItemJnlLine>
1 : Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnBeforeSalesShptLineModify>
1 : Codeunit<Undo Return Receipt Line>.PROCEDURE<OnAfterCode>
1 : Codeunit<Undo Return Receipt Line>.PROCEDURE<OnAfterCopyItemJnlLineFromReturnRcpt>
1 : Codeunit<Undo Return Receipt Line>.PROCEDURE<OnAfterInsertNewReceiptLine>
1 : Codeunit<Undo Return Receipt Line>.PROCEDURE<OnAfterNewReturnRcptLineInsert>
1 : Codeunit<Undo Return Receipt Line>.PROCEDURE<OnAfterReturnRcptLineModify>
1 : Codeunit<Undo Return Receipt Line>.PROCEDURE<OnAfterUpdateSalesLine>
1 : Codeunit<Undo Return Receipt Line>.PROCEDURE<OnBeforeCheckReturnRcptLine>
1 : Codeunit<Undo Return Receipt Line>.PROCEDURE<OnBeforeNewReturnRcptLineInsert>
1 : Codeunit<Undo Return Receipt Line>.PROCEDURE<OnBeforeOnRun>
1 : Codeunit<Undo Return Receipt Line>.PROCEDURE<OnBeforePostItemJnlLine>
1 : Codeunit<Undo Return Receipt Line>.PROCEDURE<OnBeforeReturnRcptLineModify>
1 : Codeunit<Undo Posting Management>.PROCEDURE<OnAfterUpdatePurchline>
1 : Codeunit<Undo Posting Management>.PROCEDURE<OnAfterUpdateSalesLine>
1 : Codeunit<Undo Posting Management>.PROCEDURE<OnAfterUpdateServLine>
1 : Codeunit<Undo Posting Management>.PROCEDURE<OnBeforePostItemJnlLine>
1 : Codeunit<Undo Posting Management>.PROCEDURE<OnBeforePostItemJnlLineForJob>
1 : Codeunit<Undo Posting Management>.PROCEDURE<OnBeforeReapplyJobConsumption>
1 : Codeunit<Undo Posting Management>.PROCEDURE<OnBeforeTestAllTransactions>
1 : Codeunit<Undo Posting Management>.PROCEDURE<OnBeforeTestPostedInvtPickLine>
1 : Codeunit<Undo Posting Management>.PROCEDURE<OnBeforeTestPostedInvtPutAwayLine>
1 : Codeunit<Undo Posting Management>.PROCEDURE<OnBeforeTestPostedWhseShipmentLine>
1 : Codeunit<Undo Posting Management>.PROCEDURE<OnBeforeTestRgstrdWhseActivityLine>
1 : Codeunit<Undo Posting Management>.PROCEDURE<OnBeforeTestWarehouseActivityLine>
1 : Codeunit<Undo Posting Management>.PROCEDURE<OnBeforeTestWarehouseEntry>
1 : Codeunit<Undo Posting Management>.PROCEDURE<OnBeforeTestWarehouseReceiptLine>
1 : Codeunit<Undo Posting Management>.PROCEDURE<OnBeforeTestWarehouseShipmentLine>
1 : Codeunit<Undo Posting Management>.PROCEDURE<OnBeforeTestWhseWorksheetLine>
1 : Codeunit<Undo Posting Management>.PROCEDURE<OnBeforeUndoValuePostingFromJob>
1 : Codeunit<Undo Posting Management>.PROCEDURE<OnPostItemJnlLineAppliedToListOnBeforeTempItemEntryRelationInsert>
2 : Codeunit<Undo Posting Management>.PROCEDURE<OnUpdateSalesLineOnBeforeInitOustanding>
1 : Codeunit<Undo Service Shipment Line>.PROCEDURE<OnAfterCode>
1 : Codeunit<Undo Service Shipment Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServShpt>
1 : Codeunit<Undo Service Shipment Line>.PROCEDURE<OnAfterInsertNewShipmentLine>
1 : Codeunit<Undo Service Shipment Line>.PROCEDURE<OnAfterUpdateOrderLine>
1 : Codeunit<Undo Service Shipment Line>.PROCEDURE<OnBeforeCheckServShptLine>
1 : Codeunit<Undo Service Shipment Line>.PROCEDURE<OnBeforeNewServiceShptLineInsert>
1 : Codeunit<Undo Service Shipment Line>.PROCEDURE<OnBeforeOnRun>
1 : Codeunit<Undo Service Shipment Line>.PROCEDURE<OnBeforePostResJnlLine>
1 : Codeunit<Undo Service Consumption Line>.PROCEDURE<OnAfterCode>
1 : Codeunit<Undo Service Consumption Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServShpt>
1 : Codeunit<Undo Service Consumption Line>.PROCEDURE<OnAfterUpdateOrderLine>
1 : Codeunit<Undo Service Consumption Line>.PROCEDURE<OnBeforeCheckServShptLine>
1 : Codeunit<Undo Service Consumption Line>.PROCEDURE<OnBeforeOnRun>
1 : Codeunit<Undo Service Consumption Line>.PROCEDURE<OnBeforePostItemJnlLineWithIT>
1 : Codeunit<Undo Service Consumption Line>.PROCEDURE<OnBeforeReservEntryInsert>
1 : Codeunit<Undo Service Consumption Line>.PROCEDURE<OnBeforeTempGlobalItemEntryRelationInsert>
1 : Codeunit<Close Inventory Period>.PROCEDURE<OnRunOnBeforeCheck>
1 : Codeunit<Cost Calculation Management>.PROCEDURE<OnBeforeCalcActNeededQtyBase>
1 : Codeunit<Cost Calculation Management>.PROCEDURE<OnBeforeCalcProdOrderActTimeUsed>
1 : Codeunit<Cost Calculation Management>.PROCEDURE<OnBeforeCalcProdOrderExpCapNeed>
1 : Codeunit<Cost Calculation Management>.PROCEDURE<OnBeforeCalcProdOrderLineStdCost>
1 : Codeunit<Cost Calculation Management>.PROCEDURE<OnCalcActOutputQtyBaseOnAfterSetFilters>
1 : Codeunit<Cost Calculation Management>.PROCEDURE<OnCalcProdOrderLineExpCostOnExpOperCostCalculated>
1 : Codeunit<Get Average Cost Calc Overview>.PROCEDURE<OnBeforeModifyAvgCostCalcOverview>
1 : Codeunit<Calculate BOM Tree>.PROCEDURE<OnAfterFilterBOMBuffer>
1 : Codeunit<Calculate BOM Tree>.PROCEDURE<OnAfterTransferFromProdBOM>
1 : Codeunit<Calculate BOM Tree>.PROCEDURE<OnAfterTransferFromProdItem>
1 : Codeunit<Calculate BOM Tree>.PROCEDURE<OnAfterTransferFromProdRouting>
1 : Codeunit<Calculate BOM Tree>.PROCEDURE<OnBeforeCalcRoutingLineCosts>
1 : Codeunit<Calculate BOM Tree>.PROCEDURE<OnBeforeFilterBOMBuffer>
1 : Codeunit<Calculate BOM Tree>.PROCEDURE<OnBeforeTransferFromProdBOM>
1 : Codeunit<Calculate BOM Tree>.PROCEDURE<OnTraverseCostTreeOnAfterAddCost>
1 : Codeunit<Phys. Invt. Order-Finish>.PROCEDURE<OnCodeOnAfterUpdateFromPhysInvtRecordLine>
1 : Codeunit<Phys. Invt. Order-Finish>.PROCEDURE<OnCreateReservEntriesOnBeforeInsert>
1 : Codeunit<Phys. Invt. Order-Finish>.PROCEDURE<OnCreateTrackingBufferLinesFromExpPhysInvtTracking>
1 : Codeunit<Phys. Invt. Order-Finish>.PROCEDURE<OnCreateTrackingBufferLinesFromPhysInvtRecordLine>
1 : Codeunit<Phys. Invt. Order-Finish>.PROCEDURE<OnUpdateBufferFromItemLedgerEntriesOnAfterUpdateExpectedQty>
1 : Codeunit<Phys. Invt. Order-Post>.PROCEDURE<OnInsertEntryRelationOnBeforeInsert>
1 : Codeunit<Phys. Invt. Tracking Mgt.>.PROCEDURE<OnTransferResEntryToItemJnlLineOnBeforeTransfer>
1 : Codeunit<Inventory Adjustment>.PROCEDURE<OnAfterMakeMultiLevelAdjmt>
1 : Codeunit<Inventory Adjustment>.PROCEDURE<OnBeforeMakeMultiLevelAdjmt>
1 : Codeunit<Inventory Adjustment>.PROCEDURE<OnMakeMultiLevelAdjmtOnAfterMakeAdjmt>
1 : Codeunit<Inventory Adjustment>.PROCEDURE<OnPostItemJnlLineCopyFromValueEntry>
1 : Codeunit<ServOrderManagement>.PROCEDURE<OnBeforeCalcContractDates>
1 : Codeunit<ServOrderManagement>.PROCEDURE<OnBeforeToCustInvDiscInsert>
1 : Codeunit<Service Inv.-Printed>.PROCEDURE<OnBeforeModify>
1 : Codeunit<Service Shpt.-Printed>.PROCEDURE<OnBeforeModify>
1 : Codeunit<Service Cr. Memo-Printed>.PROCEDURE<OnBeforeModify>
1 : Codeunit<Service-Printed>.PROCEDURE<OnBeforeModify>
1 : Codeunit<ServLogManagement>.PROCEDURE<OnBeforeServItemEventDescription>
1 : Codeunit<ServLogManagement>.PROCEDURE<OnServItemEventDescription>
1 : Codeunit<ServLogManagement>.PROCEDURE<OnServOrderEventDescription>
1 : Codeunit<ServLedgEntries-Post>.PROCEDURE<OnBeforeServLedgerEntryInsert>
1 : Codeunit<ServLedgEntries-Post>.PROCEDURE<OnBeforeServLedgerEntrySaleInsert>
1 : Codeunit<ServLedgEntries-Post>.PROCEDURE<OnBeforeWarrantyLedgerEntryInsert>
1 : Codeunit<ServLedgEntries-Post>.PROCEDURE<OnCreateCreditEntryOnBeforeServLedgEntryInsert>
1 : Codeunit<ServLedgEntries-Post>.PROCEDURE<OnInsertServLedgEntryCrMemoOnBeforeServLedgEntryInsert>
1 : Codeunit<ServLedgEntries-Post>.PROCEDURE<OnInsertServLedgerEntryCrMUsageOnBeforeServLedgEntryInsert>
1 : Codeunit<ServItemManagement>.PROCEDURE<OnBeforeCreateServItemOnSalesLineShpt>
3 : Codeunit<ServItemManagement>.PROCEDURE<OnBeforeInsertNewServItemComponent>
1 : Codeunit<ServItemManagement>.PROCEDURE<OnBeforeInsertServItemComponent>
1 : Codeunit<ServItemManagement>.PROCEDURE<OnBeforeReplaceSIComponent>
1 : Codeunit<ServItemManagement>.PROCEDURE<OnCreateServItemOnSalesLineShpt>
1 : Codeunit<ServItemManagement>.PROCEDURE<OnCreateServItemOnServItemLine>
1 : Codeunit<ServItemManagement>.PROCEDURE<OnCreateServItemOnServItemLineOnBeforeServItemModify>
1 : Codeunit<Service-Quote to Order>.PROCEDURE<OnAfterInsertServHeader>
1 : Codeunit<Service-Quote to Order>.PROCEDURE<OnAfterInsertServiceLine>
1 : Codeunit<Service-Quote to Order>.PROCEDURE<OnBeforeRun>
1 : Codeunit<Service-Quote to Order>.PROCEDURE<OnBeforeServCommentLineInsert>
1 : Codeunit<Service-Quote to Order>.PROCEDURE<OnBeforeServHeaderDelete>
1 : Codeunit<Service-Quote to Order>.PROCEDURE<OnBeforeServiceHeaderOrderModify>
1 : Codeunit<Service-Quote to Order>.PROCEDURE<OnBeforeServiceItemLineInsert>
1 : Codeunit<Service-Quote to Order>.PROCEDURE<OnBeforeServLineDeleteAll>
1 : Codeunit<Service-Quote to Order>.PROCEDURE<OnBeforeServOrderLineInsert>
1 : Codeunit<Service-Quote to Order>.PROCEDURE<OnBeforeTransferQuoteLineToOrderLineLoop>
1 : Codeunit<Service-Get Shipment>.PROCEDURE<OnAfterCreateInvLines>
1 : Codeunit<ServContractManagement>.PROCEDURE<OnAfterCreateContractLineCreditMemo>
1 : Codeunit<ServContractManagement>.PROCEDURE<OnAfterCreateInvoice>
1 : Codeunit<ServContractManagement>.PROCEDURE<OnAfterCreateInvoiceSetPostingDate>
1 : Codeunit<ServContractManagement>.PROCEDURE<OnAfterCreateOrGetCreditHeader>
1 : Codeunit<ServContractManagement>.PROCEDURE<OnAfterCreateServHeader>
1 : Codeunit<ServContractManagement>.PROCEDURE<OnAfterFinishCodeunit>
1 : Codeunit<ServContractManagement>.PROCEDURE<OnBeforeCalcContractAmount>
1 : Codeunit<ServContractManagement>.PROCEDURE<OnBeforeCreateContractLineCreditMemo>
1 : Codeunit<ServContractManagement>.PROCEDURE<OnBeforeCreateInvoice>
1 : Codeunit<ServContractManagement>.PROCEDURE<OnBeforeCreateServLineForNewContract>
1 : Codeunit<ServContractManagement>.PROCEDURE<OnBeforeLastServLineModify>
2 : Codeunit<ServContractManagement>.PROCEDURE<OnBeforeServHeaderModify>
1 : Codeunit<ServContractManagement>.PROCEDURE<OnBeforeServLedgEntryToServiceLine>
1 : Codeunit<ServContractManagement>.PROCEDURE<OnBeforeServLineInsert>
1 : Codeunit<ServContractManagement>.PROCEDURE<OnCreateContractLineCreditMemoOnBeforeCalcCreditAmount>
1 : Codeunit<ServContractManagement>.PROCEDURE<OnCreateDetailedServLineOnBeforeServLineInsertFirstLine>
1 : Codeunit<ServContractManagement>.PROCEDURE<OnCreateDetailedServLineOnBeforeServLineInsertNewContract>
1 : Codeunit<ServContractManagement>.PROCEDURE<OnCreateHeadingServLineOnBeforeServLineInsert>
1 : Codeunit<ServContractManagement>.PROCEDURE<OnCreateServiceLedgerEntryOnBeforeServLedgEntryInsert>
1 : Codeunit<ServContractManagement>.PROCEDURE<OnInsertMultipleServLedgEntriesOnBeforeServLedgEntryInsert>
1 : Codeunit<ServContractManagement>.PROCEDURE<OnServLedgEntryToServiceLineOnBeforeServLineInsert>
1 : Codeunit<Lock-OpenServContract>.PROCEDURE<OnAfterLockServContract>
1 : Codeunit<Lock-OpenServContract>.PROCEDURE<OnAfterOpenServContract>
1 : Codeunit<Lock-OpenServContract>.PROCEDURE<OnBeforeLockServContract>
1 : Codeunit<Lock-OpenServContract>.PROCEDURE<OnErrorIfServContractLinesHaveZeroAmount>
1 : Codeunit<SignServContractDoc>.PROCEDURE<OnAddendumToContractOnBeforeCreateServiceLinesLedgerEntries>
1 : Codeunit<SignServContractDoc>.PROCEDURE<OnAfterCheckServContractQuote>
1 : Codeunit<SignServContractDoc>.PROCEDURE<OnAfterSignContractQuote>
1 : Codeunit<SignServContractDoc>.PROCEDURE<OnAfterToServContractHeaderInsert>
1 : Codeunit<SignServContractDoc>.PROCEDURE<OnAfterToServContractLineInsert>
1 : Codeunit<SignServContractDoc>.PROCEDURE<OnBeforeAddendumToContract>
1 : Codeunit<SignServContractDoc>.PROCEDURE<OnBeforeCheckServContractHasZeroAmounts>
1 : Codeunit<SignServContractDoc>.PROCEDURE<OnBeforeCheckServContractQuote>
1 : Codeunit<SignServContractDoc>.PROCEDURE<OnBeforeServContractHeaderModify>
1 : Codeunit<SignServContractDoc>.PROCEDURE<OnBeforeSignContract>
1 : Codeunit<SignServContractDoc>.PROCEDURE<OnBeforeSignContractQuote>
1 : Codeunit<SignServContractDoc>.PROCEDURE<OnBeforeToServContractHeaderInsert>
1 : Codeunit<SignServContractDoc>.PROCEDURE<OnBeforeToServContractLineInsert>
1 : Codeunit<SignServContractDoc>.PROCEDURE<OnSignContractQuoteOnBeforeToServContractHeaderModify>
1 : Codeunit<Service-Calc. Discount>.PROCEDURE<OnAfterCalcServDiscount>
1 : Codeunit<Service-Calc. Discount>.PROCEDURE<OnBeforeCalcServDiscount>
1 : Codeunit<Service-Post and Send>.PROCEDURE<OnAfterPostAndBeforeSend>
1 : Codeunit<Service-Post and Send>.PROCEDURE<OnBeforeCode>
1 : Codeunit<Service-Post>.PROCEDURE<OnAfterFinalizePostingOnBeforeCommit>
1 : Codeunit<Service-Post>.PROCEDURE<OnAfterInitialize>
1 : Codeunit<Service-Post>.PROCEDURE<OnAfterPostServiceDoc>
1 : Codeunit<Service-Post>.PROCEDURE<OnAfterPostWithLines>
1 : Codeunit<Service-Post>.PROCEDURE<OnBeforeInitialize>
1 : Codeunit<Service-Post>.PROCEDURE<OnBeforePostWithLines>
1 : Codeunit<Service-Post>.PROCEDURE<OnBeforeRun>
1 : Codeunit<Service-Post>.PROCEDURE<OnBeforeServiceCrMemoHeaderInsert>
1 : Codeunit<Service-Post>.PROCEDURE<OnBeforeServiceInvHeaderInsert>
1 : Codeunit<Service-Post>.PROCEDURE<OnBeforeServiceShptHeaderInsert>
1 : Codeunit<Service-Post (Yes/No)>.PROCEDURE<OnAfterConfirmPost>
1 : Codeunit<Service-Post (Yes/No)>.PROCEDURE<OnAfterPost>
1 : Codeunit<Service-Post (Yes/No)>.PROCEDURE<OnBeforeConfirmServPost>
1 : Codeunit<Service-Post+Print>.PROCEDURE<OnAfterConfirmPost>
1 : Codeunit<Service-Post+Print>.PROCEDURE<OnAfterPost>
1 : Codeunit<Service-Post+Print>.PROCEDURE<OnBeforeConfirmPost>
1 : Codeunit<Serv-Amounts Mgt.>.PROCEDURE<OnAfterDivideAmount>
1 : Codeunit<Serv-Amounts Mgt.>.PROCEDURE<OnAfterFillInvoicePostBuffer>
1 : Codeunit<Serv-Amounts Mgt.>.PROCEDURE<OnAfterIncrAmount>
1 : Codeunit<Serv-Amounts Mgt.>.PROCEDURE<OnAfterReverseAmount>
1 : Codeunit<Serv-Amounts Mgt.>.PROCEDURE<OnBeforeDivideAmount>
1 : Codeunit<Serv-Amounts Mgt.>.PROCEDURE<OnBeforeInvoiceRoundingAmount>
1 : Codeunit<Serv-Amounts Mgt.>.PROCEDURE<OnBeforeRoundAmount>
1 : Codeunit<Serv-Amounts Mgt.>.PROCEDURE<OnBeforeUpdateInvPostBuffer>
1 : Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<OnAfterPostBalancingEntry>
1 : Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<OnAfterPostCustomerEntry>
1 : Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<OnAfterPostInvoicePostBuffer>
1 : Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<OnAfterTransferValuesToJobJnlLine>
1 : Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<OnBeforePostBalancingEntry>
1 : Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<OnBeforePostCustomerEntry>
1 : Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<OnBeforePostInvoicePostBuffer>
1 : Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<OnBeforePostItemJnlLine>
1 : Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<OnBeforePostJobJnlLine>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterCheckCertificateOfSupplyStatus>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterFinalize>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterFinalizeCrMemoDocument>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterFinalizeHeader>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterFinalizeInvoiceDocument>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterFinalizeShipmentDocument>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterInitialize>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterPrepareCrMemoHeader>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterPrepareDocument>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterPrepareInvoiceHeader>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterPrepareShipmentHeader>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterServCrMemoHeaderInsert>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterServCrMemoLineInsert>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterServInvHeaderInsert>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterServInvLineInsert>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterServShptHeaderInsert>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterServShptItemLineInsert>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterServShptLineInsert>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeFinalize>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeFinalizeCrMemoDocument>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeFinalizeInvoiceDocument>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeFinalizeShipmentDocument>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeInitialize>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeModifyServiceDocNoSeries>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeServCrMemoHeaderInsert>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeServCrMemoLineInsert>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeServInvHeaderInsert>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeServInvLineInsert>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeServShptHeaderInsert>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeServShptItemLineInsert>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeServShptLineInsert>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeSetGenJnlLineDocNos>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnPostDocumentLinesOnBeforeCheckServLine>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnPostDocumentLinesOnBeforePostInvoicePostBuffer>
1 : Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnUpdateShptLinesOnInvOnAfterServiceShptLineModify>
1 : Codeunit<Sales-Calc. Discount>.PROCEDURE<OnAfterCalcSalesDiscount>
1 : Codeunit<Sales-Calc. Discount>.PROCEDURE<OnAfterCustInvDiscRecExists>
1 : Codeunit<Sales-Calc. Discount>.PROCEDURE<OnAfterValidateSalesLine2Quantity>
1 : Codeunit<Sales-Calc. Discount>.PROCEDURE<OnBeforeCalcSalesDiscount>
1 : Codeunit<Sales-Calc. Discount>.PROCEDURE<OnBeforeServiceChargeSalesLineInsert>
1 : Codeunit<Hybrid Deployment>.PROCEDURE<OnBeforeEnableReplication>
1 : Codeunit<Hybrid Deployment>.PROCEDURE<OnCreateIntegrationRuntime>
1 : Codeunit<Hybrid Deployment>.PROCEDURE<OnDisableReplication>
1 : Codeunit<Hybrid Deployment>.PROCEDURE<OnEnableReplication>
1 : Codeunit<Hybrid Deployment>.PROCEDURE<OnGetErrorMessage>
1 : Codeunit<Hybrid Deployment>.PROCEDURE<OnGetIntegrationRuntimeKeys>
1 : Codeunit<Hybrid Deployment>.PROCEDURE<OnGetReplicationRunStatus>
1 : Codeunit<Hybrid Deployment>.PROCEDURE<OnGetRequestStatus>
1 : Codeunit<Hybrid Deployment>.PROCEDURE<OnGetVersionInformation>
1 : Codeunit<Hybrid Deployment>.PROCEDURE<OnInitialize>
1 : Codeunit<Hybrid Deployment>.PROCEDURE<OnPrepareTablesForReplication>
1 : Codeunit<Hybrid Deployment>.PROCEDURE<OnRegenerateIntegrationRuntimeKeys>
1 : Codeunit<Hybrid Deployment>.PROCEDURE<OnRunReplication>
1 : Codeunit<Hybrid Deployment>.PROCEDURE<OnRunUpgrade>
1 : Codeunit<Hybrid Deployment>.PROCEDURE<OnSetReplicationSchedule>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnApplySelectedData>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnBatchEditFromErrorView>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnDataImport>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnEnableTogglingDataMigrationOverviewPage>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnFillStagingTables>
2 : Codeunit<Data Migration Facade>.PROCEDURE<OnFindBatchForAccountTransactions>
2 : Codeunit<Data Migration Facade>.PROCEDURE<OnFindBatchForCustomerTransactions>
2 : Codeunit<Data Migration Facade>.PROCEDURE<OnFindBatchForItemTransactions>
2 : Codeunit<Data Migration Facade>.PROCEDURE<OnFindBatchForVendorTransactions>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnGetInstructions>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnGetMigrationHelpTopicUrl>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnInitDataMigrationError>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnMigrationCompleted>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnRegisterDataMigrator>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnSelectDataToApply>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnSelectRowFromDashboard>
1 : Codeunit<Data Migration Facade>.PROCEDURE<OnShowThatsItMessage>
1 : Codeunit<GL Acc. Data Migration Facade>.PROCEDURE<OnCreateOpeningBalanceTrx>
1 : Codeunit<GL Acc. Data Migration Facade>.PROCEDURE<OnMigrateAccountTransactions>
1 : Codeunit<GL Acc. Data Migration Facade>.PROCEDURE<OnMigrateGlAccount>
1 : Codeunit<GL Acc. Data Migration Facade>.PROCEDURE<OnMigrateGlAccountDimensions>
1 : Codeunit<GL Acc. Data Migration Facade>.PROCEDURE<OnMigratePostingGroups>
1 : Codeunit<Vendor Data Migration Facade>.PROCEDURE<OnMigrateVendor>
1 : Codeunit<Vendor Data Migration Facade>.PROCEDURE<OnMigrateVendorDimensions>
1 : Codeunit<Vendor Data Migration Facade>.PROCEDURE<OnMigrateVendorPostingGroups>
1 : Codeunit<Vendor Data Migration Facade>.PROCEDURE<OnMigrateVendorTransactions>
1 : Codeunit<Customer Data Migration Facade>.PROCEDURE<OnMigrateCustomer>
1 : Codeunit<Customer Data Migration Facade>.PROCEDURE<OnMigrateCustomerDimensions>
1 : Codeunit<Customer Data Migration Facade>.PROCEDURE<OnMigrateCustomerPostingGroups>
1 : Codeunit<Customer Data Migration Facade>.PROCEDURE<OnMigrateCustomerTransactions>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateCostingMethod>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateInventoryTransactions>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItem>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemDimensions>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemDiscountGroup>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemPostingGroups>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemPrice>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemSalesLineDiscount>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemTariffNo>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemTrackingCode>
1 : Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemUnitOfMeasure>
1 : Codeunit<API Webhook Notification Mgt.>.PROCEDURE<OnGetDelayTime>
1 : Codeunit<API Webhook Notification Send>.PROCEDURE<OnAfterProcessNotifications>
1 : Codeunit<API Webhook Notification Send>.PROCEDURE<OnAfterSendNotification>
1 : Codeunit<API Webhook Notification Send>.PROCEDURE<OnBeforeDeleteInactiveJobs>
1 : Codeunit<API Webhook Notification Send>.PROCEDURE<OnBeforeProcessNotifications>
1 : Codeunit<API Webhook Notification Send>.PROCEDURE<OnBeforeSendNotification>
1 : Codeunit<API Webhook Notification Send>.PROCEDURE<OnGetMaxNumberOfAttempts>
1 : Codeunit<API Webhook Notification Send>.PROCEDURE<OnGetMaxNumberOfNotifications>
1 : Codeunit<API Webhook Notification Send>.PROCEDURE<OnGetSendingNotificationTimeout>
1 : Codeunit<Sales-Explode BOM>.PROCEDURE<OnAfterConfirmExplosion>
1 : Codeunit<Sales-Explode BOM>.PROCEDURE<OnAfterExplodeBOMCompLines>
1 : Codeunit<Sales-Explode BOM>.PROCEDURE<OnBeforeConfirmExplosion>
1 : Codeunit<Sales-Explode BOM>.PROCEDURE<OnBeforeOnRun>
1 : Codeunit<Sales-Explode BOM>.PROCEDURE<OnBeforeToSalesLineModify>
1 : Codeunit<Sales-Explode BOM>.PROCEDURE<OnInsertOfExplodedBOMLineToSalesLine>
1 : Codeunit<Power BI Service Mgt.>.PROCEDURE<OnGetReports>
1 : Codeunit<Power BI Service Mgt.>.PROCEDURE<OnRetryUploads>
1 : Codeunit<Power BI Service Mgt.>.PROCEDURE<OnUploadReports>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireAcquireOnBehalfOfToken>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireGuestToken>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireOnBehalfOfTokenAndTokenCacheState>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireTokenByAuthorizationCode>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireTokenByAuthorizationCodeWithCredentials>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireTokenFromCache>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireTokenFromCacheState>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireTokenFromCacheWithCredentials>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnCheckProvider>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnCreateExchangeServiceWrapperWithToken>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnGetSaasClientId>
1 : Codeunit<Azure AD Auth Flow>.PROCEDURE<OnInitialize>
1 : Codeunit<Set Power BI User Config>.PROCEDURE<OnBeforeSetUserConfig>
1 : Codeunit<Sales-Get Shipment>.PROCEDURE<OnAfterCalcInvoiceDiscount>
1 : Codeunit<Sales-Get Shipment>.PROCEDURE<OnAfterInsertLine>
1 : Codeunit<Sales-Get Shipment>.PROCEDURE<OnAfterInsertLines>
1 : Codeunit<Sales-Get Shipment>.PROCEDURE<OnBeforeCalcUpdatePrepmtAmtToDeductRounding>
1 : Codeunit<Sales-Get Shipment>.PROCEDURE<OnBeforeGetItemChargeAssgnt>
1 : Codeunit<Sales-Get Shipment>.PROCEDURE<OnBeforeInsertLines>
1 : Codeunit<Sales-Get Shipment>.PROCEDURE<OnBeforeTransferLineToSalesDoc>
1 : Codeunit<Sales-Get Shipment>.PROCEDURE<OnRunAfterFilterSalesShpLine>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnAfterCreateTrackingSpecification>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnAfterInitReservEntry>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnAfterInsertWhseItemTrkgLinesLoop>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnAfterReserveEntryFilter>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnAfterRetrieveAppliedExpirationDate>
2 : Codeunit<Item Tracking Management>.PROCEDURE<OnAfterSplitPostedWhseReceiptLine>
2 : Codeunit<Item Tracking Management>.PROCEDURE<OnAfterSplitWhseJnlLine>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnAfterSynchronizeItemTracking>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeCheckWhseItemTrkg>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeCreateWhseItemTrkgForReceipt>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeCreateWhseItemTrkgForResEntry>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeExistingExpirationDate>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeExistingExpirationDateAndQty>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeFindTempHandlingSpecification>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeInsertReservEntryForPurchLine>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeInsertReservEntryForSalesLine>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeInsertSplitInternalPutAwayLine>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeInsertSplitPostedWhseRcptLine>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeInsertWhseItemTrkgLines>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeInsertWhseItemTrkgLinesLoop>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeModifySplitPostedWhseRcptLine>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeModifyWhseItemTrkgLines>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeRegisterItemTrackingLinesLoop>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeRegisterNewItemTrackingLines>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeRetrieveAppliedExpirationDate>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeTempTrackingSpecSummedUpModify>
2 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeTempWhseJnlLine2Insert>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeWhseExistingExpirationDate>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeWhseItemTrackingLineInsert>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnCheckItemTrkgInfBeforePostOnBeforeTempItemLotInfoInsert>
2 : Codeunit<Item Tracking Management>.PROCEDURE<OnCopyItemLedgEntryTrkgToDocLine>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnCopyItemTracking3OnBeforeSwapSign>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnIsOrderNetworkEntity>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnRetrieveItemTrackingFromReservEntryFilter>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnRetrieveSubcontrItemTrackingOnBeforeCheckLastOperation>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnSyncActivItemTrkgOnBeforeInsertTempReservEntry>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnSyncActivItemTrkgOnBeforeTempTrackingSpecModify>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnSynchronizeWhseActivItemTrkgOnAfterSetExpirationDate>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnSynchronizeWhseActivItemTrkgOnAfterSetToRowID>
1 : Codeunit<Item Tracking Management>.PROCEDURE<OnTempPostedWhseRcptLineSetFilters>
1 : Codeunit<Item Tracking Data Collection>.PROCEDURE<OnAddSelectedTrackingToDataSetOnAfterInitTrackingSpecification2>
1 : Codeunit<Item Tracking Data Collection>.PROCEDURE<OnAfterAssistEditTrackingNo>
1 : Codeunit<Item Tracking Data Collection>.PROCEDURE<OnAfterCreateEntrySummary>
1 : Codeunit<Item Tracking Data Collection>.PROCEDURE<OnAfterCreateEntrySummary2>
1 : Codeunit<Item Tracking Data Collection>.PROCEDURE<OnAfterRetrieveLookupData>
1 : Codeunit<Item Tracking Data Collection>.PROCEDURE<OnAfterTransferExpDateFromSummary>
1 : Codeunit<Item Tracking Data Collection>.PROCEDURE<OnAfterTransferReservEntryToTempRec>
1 : Codeunit<Item Tracking Data Collection>.PROCEDURE<OnBeforeAssistEditTrackingNo>
1 : Codeunit<Item Tracking Data Collection>.PROCEDURE<OnBeforeCreateEntrySummary2>
1 : Codeunit<Item Tracking Data Collection>.PROCEDURE<OnBeforeTempGlobalChangedEntrySummaryInsert>
1 : Codeunit<Item Tracking Data Collection>.PROCEDURE<OnBeforeTempTrackingSpecificationInsert>
1 : Codeunit<Item Tracking Data Collection>.PROCEDURE<OnBeforeTempTrackingSpecificationModify>
1 : Codeunit<Item Tracking Data Collection>.PROCEDURE<OnBeforeUpdateBinContent>
1 : Codeunit<Item Tracking Data Collection>.PROCEDURE<OnSelectMultipleTrackingNoOnBeforeSetSources>
1 : Codeunit<Item Tracking Data Collection>.PROCEDURE<OnTransferItemLedgToTempRecOnBeforeInsert>
1 : Codeunit<Late Binding Management>.PROCEDURE<OnBeforeTempSupplyReservEntryInsert>
1 : Codeunit<Item Tracking Doc. Management>.PROCEDURE<OnAfterAddTempRecordToSet>
1 : Codeunit<Item Tracking Doc. Management>.PROCEDURE<OnAfterFillTrackingSpecBufferFromItemLedgEntry>
1 : Codeunit<Item Tracking Doc. Management>.PROCEDURE<OnAfterFillTrackingSpecBufferFromReservEntry>
1 : Codeunit<Item Tracking Doc. Management>.PROCEDURE<OnAfterFillTrackingSpecBufferFromTrackingEntries>
1 : Codeunit<Item Tracking Doc. Management>.PROCEDURE<OnRetrieveDocumentItemTracking>
1 : Codeunit<Item Tracking Doc. Management>.PROCEDURE<OnRetrieveEntriesFromPostedInvOnBeforeAddTempRecordToSet>
1 : Codeunit<Item Tracing Mgt.>.PROCEDURE<OnAfterTransferData>
1 : Codeunit<Item Tracing Mgt.>.PROCEDURE<OnBeforeFindComponents>
1 : Codeunit<Item Tracing Mgt.>.PROCEDURE<OnBeforeShowDocument>
1 : Codeunit<Item Tracing Mgt.>.PROCEDURE<OnFindComponentsOnAfterSetFilters>
2 : Codeunit<Item Tracing Mgt.>.PROCEDURE<OnFindComponentsOnAfterTransferData>
1 : Codeunit<Item Tracing Mgt.>.PROCEDURE<OnFirstLevelOnAfterTransferData>
1 : Codeunit<Item Tracing Mgt.>.PROCEDURE<OnFirstLevelOnBeforeInsertFirstLevelEntry>
1 : Codeunit<Item Tracing Mgt.>.PROCEDURE<OnNextLevelOnAfterTransferData>
1 : Codeunit<Item Tracking Navigate Mgt.>.PROCEDURE<OnAfterShow>
1 : Codeunit<Item Tracking Navigate Mgt.>.PROCEDURE<OnFindItemLedgerEntryOnBeforeCaseDocumentType>
1 : Codeunit<Item Tracking Navigate Mgt.>.PROCEDURE<OnFindReservEntryOnBeforeCaseDocumentType>
1 : Codeunit<Item Tracking Navigate Mgt.>.PROCEDURE<OnFindTrackingRecordsForItemLedgerEntry>
1 : Codeunit<Purch - Calc Disc. By Type>.PROCEDURE<OnAfterResetRecalculateInvoiceDisc>
1 : Codeunit<Purch - Calc Disc. By Type>.PROCEDURE<OnBeforeApplyDefaultInvoiceDiscount>
1 : Codeunit<Purch - Calc Disc. By Type>.PROCEDURE<OnBeforeShouldRedistributeInvoiceDiscountAmount>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCheckFromPurchaseCrMemoHeader>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCheckFromPurchaseHeader>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCheckFromPurchaseInvHeader>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCheckFromPurchaseRcptHeader>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCheckFromPurchaseReturnShptHeader>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCheckFromSalesCrMemoHeader>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCheckFromSalesHeader>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCheckFromSalesInvHeader>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCheckFromSalesReturnRcptHeader>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCheckFromSalesShptHeader>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyArchPurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyArchSalesLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyFieldsFromOldPurchHeader>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyFieldsFromOldSalesHeader>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyFromPurchDocAssgntToLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyFromSalesDocAssgntToLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyFromSalesToPurchDoc>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPostedPurchInvoice>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPostedReceipt>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPostedReturnReceipt>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPostedReturnShipment>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPostedShipment>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchaseDocument>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchaseHeader>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchaseLinesToDoc>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchCrMemoLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchHeaderArchive>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchHeaderDone>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchInvLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchInvLines>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchLineFromPurchCrMemoLineBuffer>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchLineFromPurchLineBuffer>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchLineFromPurchRcptLineBuffer>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchLineFromReturnShptLineBuffer>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchLinesToBufferFields>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchRcptLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyReturnShptLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesDocument>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesHeader>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesHeaderArchive>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesHeaderDone>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesInvLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesLineFromReturnRcptLineBuffer>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesLineFromSalesCrMemoLineBuffer>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesLineFromSalesDocSalesLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesLineFromSalesLineBuffer>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesLineFromSalesShptLineBuffer>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesLinesToBufferFields>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesLinesToDoc>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesToPurchDoc>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInitAndCheckPurchaseDocuments>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInitAndCheckSalesDocuments>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInitPurchLineFields>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInitSalesLineFields>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInitToPurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInitToSalesLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInsertToPurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInsertToSalesLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterProcessServContractLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterRecalculateSalesLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterSetDefaultValuesToPurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterSetDefaultValuesToSalesLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterTransferFieldsFromCrMemoToInv>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterTransferTempAsmHeader>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterTransfldsFromSalesToPurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterUpdatePurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterUpdateSalesLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeAddPurchDocLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeAddSalesDocLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyArchPurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyArchSalesLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchaseDocForCrMemoCancelling>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchaseDocForInvoiceCancelling>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchaseDocument>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchaseJobFields>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchaseLinesToDoc>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchCrMemoLinesToDoc>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchInvLines>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchLineExtText>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchLines>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchReturnShptLinesToDoc>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesCrMemoLinesToBuffer>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesCrMemoLinesToDoc>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesDocForCrMemoCancelling>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesDocForInvoiceCancelling>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesDocument>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesInvLines>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesInvLinesToBuffer>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesJobFields>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesLineExtText>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesLinesToDoc>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesReturnRcptLinesToBuffer>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesReturnRcptLinesToDoc>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesShptLinesToBuffer>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesShptLinesToDoc>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesToPurchDoc>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeDeleteNegSalesLines>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInitPurchLineFields>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInitSalesLineFields>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertOldPurchCombDocNoLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertOldPurchDocNoLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertOldSalesCombDocNoLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertOldSalesDocNoLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertToPurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertToSalesLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeModifyPurchHeader>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeModifySalesHeader>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeRecalculateSalesLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeTransfldsFromSalesToPurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeUpdateCustLedgEntry>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeUpdatePurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeUpdateSalesLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeUpdateVendLedgEntry>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCheckCopyFromSalesCrMemoAvailOnAfterCheckItemAvailability>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCheckCopyFromSalesHeaderAvailOnAfterCheckItemAvailability>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCheckCopyFromSalesInvoiceAvailOnAfterCheckItemAvailability>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCheckCopyFromSalesRetRcptAvailOnAfterCheckItemAvailability>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCheckCopyFromSalesShptAvailOnAfterCheckItemAvailability>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyArchPurchLineOnAfterToPurchLineInsert>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyArchPurchLineOnBeforeToPurchLineInsert>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyArchSalesLineOnAfterToSalesLineInsert>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyArchSalesLineOnBeforeToSalesLineInsert>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyFromPurchDocAssgntToLineOnAfterSetFilters>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyFromPurchDocAssgntToLineOnBeforeInsert>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyFromSalesDocAssgntToLineOnAfterSetFilters>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyFromSalesDocAssgntToLineOnBeforeInsert>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyFromSalesToPurchDocOnAfterSetFilters>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyFromSalesToPurchDocOnBeforePurchaseHeaderInsert>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchCrMemoLinesToDocOnAfterTransferFields>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchCrMemoLinesToDocOnBeforeCopyPurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchDocOnAfterCopyPurchDocLines>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchDocOnBeforeCopyPurchDocCrMemoLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchDocOnBeforeCopyPurchDocInvLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchDocOnBeforeCopyPurchDocRcptLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchDocOnBeforeCopyPurchDocReturnShptLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchDocOnBeforeUpdatePurchInvoiceDiscountValue>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchDocWithHeader>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchDocWithoutHeader>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchInvLinesToDocOnAfterTransferFields>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchInvLinesToDocOnBeforeCopyPurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchLineOnAfterSetDimensions>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchLineOnBeforeCheckVATBusGroup>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchRcptLinesToDocOnAfterTransferFields>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchRcptLinesToDocOnBeforeCopyPurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchReturnShptLinesToDocOnAfterTransferFields>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchReturnShptLinesToDocOnBeforeCopyPurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesCrMemoLinesToDocOnBeforeCopySalesLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocCrMemoLineOnAfterSetFilters>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocInvLineOnAfterSetFilters>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocOnAfterCopySalesDocLines>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocOnAfterTransferArchSalesHeaderFields>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocOnAfterTransferPostedInvoiceFields>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocOnBeforeCopySalesDocCrMemoLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocOnBeforeCopySalesDocInvLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocOnBeforeCopySalesDocReturnRcptLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocOnBeforeCopySalesDocShptLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocOnBeforeTransferPostedInvoiceFields>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocOnBeforeTransferPostedReturnReceiptFields>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocOnBeforeTransferPostedShipmentFields>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocOnBeforeUpdateSalesInvoiceDiscountValue>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocReturnRcptLineOnAfterSetFilters>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocSalesLineArchiveOnAfterSetFilters>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocSalesLineOnAfterSetFilters>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocShptLineOnAfterSetFilters>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocWithHeader>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocWithoutHeader>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesInvLinesToDocOnBeforeCopySalesLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesLineOnAfterSetDimensions>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesLineOnAfterTransferFieldsToSalesLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesLineOnBeforeCheckVATBusGroup>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesLinesToBufferTransferFields>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesShptLinesToDocOnBeforeCopySalesLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnSplitPstdSalesLinesPerILETransferFields>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnUpdatePurchLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnUpdateSalesLine>
1 : Codeunit<Copy Document Mgt.>.PROCEDURE<OnUpdateSalesLineOnAfterRecalculateSalesLine>
1 : Codeunit<Sales-Get Return Receipts>.PROCEDURE<OnAfterCreateInvLines>
1 : Codeunit<Sales-Get Return Receipts>.PROCEDURE<OnBeforeTransferLineToSalesDoc>
1 : Codeunit<Purch.-Get Return Shipments>.PROCEDURE<OnAfterCreateInvLines>
1 : Codeunit<Purch.-Get Return Shipments>.PROCEDURE<OnBeforeTransferLineToPurchaseDoc>
1 : Codeunit<Return Shipment - Printed>.PROCEDURE<OnBeforeModify>
1 : Codeunit<Return Receipt - Printed>.PROCEDURE<OnBeforeModify>
3 : Codeunit<ODataUtility>.PROCEDURE<OnEditInExcel>
1 : Codeunit<Booking Manager>.PROCEDURE<OnGetBookingMailboxes>
1 : Codeunit<Booking Manager>.PROCEDURE<OnGetBookingServiceForBooking>
1 : Codeunit<Booking Manager>.PROCEDURE<OnRegisterAppointmentConnection>
1 : Codeunit<Booking Manager>.PROCEDURE<OnSetBookingItemInvoiced>
1 : Codeunit<Booking Manager>.PROCEDURE<OnSynchronize>
1 : Codeunit<Purch.-Calc.Discount>.PROCEDURE<OnAfterCalcPurchaseDiscount>
1 : Codeunit<Purch.-Calc.Discount>.PROCEDURE<OnBeforeCalcPurchaseDiscount>
1 : Codeunit<Page Management>.PROCEDURE<OnAfterGetPageID>
2 : Codeunit<Page Management>.PROCEDURE<OnBeforeGetDefaultLookupPageID>
1 : Codeunit<Page Management>.PROCEDURE<OnConditionalCardPageIDNotFound>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterCalcBestUnitPriceAsItemUnitPrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindItemJnlLinePrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindJobJnlLineLineDisc>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindJobJnlLineResPrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindJobPlanningLineLineDisc>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindJobPlanningLineResPrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindSalesLineDisc>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindSalesLineItemPrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindSalesLineLineDisc>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindSalesLinePrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindSalesLineResPrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindSalesPrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindServLineDisc>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindServLinePrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindServLineResPrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindStdItemJnlLinePrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterGetSalesLineLineDisc>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterGetSalesLinePrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterJobJnlLineFindJTPriceGLAccount>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterJobJnlLineFindJTPriceItem>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterJobJnlLineFindJTPriceResource>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterJobJnlLineLineDiscExists>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterJobPlanningLineLineDiscExists>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterSalesLineLineDiscExists>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterSalesLinePriceExists>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterServLineLineDiscExists>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterServLinePriceExists>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeConvertPriceToVAT>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindAnalysisReportPrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindItemJnlLinePrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindJobJnlLinePrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindJobPlanningLinePrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindSalesLineDisc>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindSalesLineLineDisc>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindSalesLinePrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindSalesPrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindServLineDisc>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindServLinePrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindStdItemJnlLinePrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeGetSalesLineLineDisc>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeJobJnlLineLineDiscExists>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeJobPlanningLineFindJTPrice>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeJobPlanningLineLineDiscExists>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeSalesLineLineDiscExists>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeSalesLinePriceExists>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeServLineLineDiscExists>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeServLinePriceExists>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnFindSalesLineDiscOnAfterSetFilters>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnFindSalesLineLineDiscOnBeforeCalcLineDisc>
1 : Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnGetCustNoForSalesHeader>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterFindJobJnlLinePrice>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterFindJobJnlLinePriceItem>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterFindJobJnlLinePriceResource>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterFindPurchLineDisc>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterFindPurchLineLineDisc>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterFindPurchLinePrice>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterFindPurchPrice>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterFindReqLineDisc>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterFindReqLinePrice>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterGetPurchLinePrice>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterJobJnlLineFindResCost>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterJobPlanningLineFindResCost>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterPurchLineLineDiscExists>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterPurchLinePriceExists>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnBeforeConvertPriceToVAT>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnBeforeFindPurchPrice>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnBeforeFindReqLineDisc>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnBeforeFindReqLinePrice>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnBeforePurchLineLineDiscExists>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnBeforePurchLinePriceExists>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnCalcBestDirectUnitCostOnAfterSetUnitCost>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnCalcBestDirectUnitCostOnBeforeNoPriceFound>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnFindItemJnlLinePriceOnBeforeCalcBestDirectUnitCost>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnFindJobJnlLinePriceOnBeforeCalcBestDirectUnitCost>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnGetPurchLineLineDiscOnAfterLookup>
1 : Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnGetPurchLinePriceOnAfterLookup>
1 : Codeunit<Find Record Management>.PROCEDURE<OnAfterFindRecordByDescriptionAndView>
1 : Codeunit<Find Record Management>.PROCEDURE<OnBeforeFindNoFromTypedValue>
1 : Codeunit<Find Record Management>.PROCEDURE<OnBeforeFindRecordByDescriptionAndView>
1 : Codeunit<Find Record Management>.PROCEDURE<OnBeforeFindRecordContainingSearchString>
1 : Codeunit<Find Record Management>.PROCEDURE<OnBeforeFindRecordStartingWithSearchString>
1 : Codeunit<Campaign Target Group Mgt>.PROCEDURE<OnBeforeActivateCampaign>
1 : Codeunit<Analysis Report Management>.PROCEDURE<OnAfterFilterItemAnalysisViewBudgetEntry>
1 : Codeunit<Analysis Report Management>.PROCEDURE<OnAfterFilterItemAnalysisViewEntry>
1 : Codeunit<Analysis Report Management>.PROCEDURE<OnAfterFilterItemBudgetEntry>
1 : Codeunit<Analysis Report Management>.PROCEDURE<OnAfterFilterItemLedgEntry>
1 : Codeunit<Analysis Report Management>.PROCEDURE<OnAfterFilterValueEntry>
1 : Codeunit<Analysis Report Management>.PROCEDURE<OnAfterSetItemColumnFilters>
1 : Codeunit<Analysis Report Management>.PROCEDURE<OnAfterSetItemRowFilters>
1 : Codeunit<Update Item Analysis View>.PROCEDURE<OnAfterInitializeTempItemAnalysisViewEntry>
1 : Codeunit<Update Item Analysis View>.PROCEDURE<OnAfterUpdateAll>
1 : Codeunit<Update Item Analysis View>.PROCEDURE<OnBeforeUpdateAll>
1 : Codeunit<Update Item Analysis View>.PROCEDURE<OnUpdateEntriesOnAfterSetFilters>
1 : Codeunit<Sales Info-Pane Management>.PROCEDURE<OnAfterSetItemFilter>
1 : Codeunit<Sales Info-Pane Management>.PROCEDURE<OnBeforeCalcAvailability>
1 : Codeunit<Purchases Info-Pane Management>.PROCEDURE<OnBeforeCalcAvailability>
1 : Codeunit<Purch.-Explode BOM>.PROCEDURE<OnBeforeInsertExplodedPurchLine>
1 : Codeunit<Purch.-Explode BOM>.PROCEDURE<OnExplodeBOMCompLinesOnBeforeCreatePurchLine>
1 : Codeunit<Whse. Jnl.-Register Line>.PROCEDURE<OnAfterInsertWhseEntry>
1 : Codeunit<Whse. Jnl.-Register Line>.PROCEDURE<OnBeforeCode>
1 : Codeunit<Whse. Jnl.-Register Line>.PROCEDURE<OnBeforeInsertWhseEntry>
1 : Codeunit<Whse. Jnl.-Register Line>.PROCEDURE<OnDeleteFromBinContentOnAfterSetFiltersForBinContent>
1 : Codeunit<Whse. Jnl.-Register Line>.PROCEDURE<OnDeleteFromBinContentOnAfterSetFiltersForWhseEntry>
1 : Codeunit<Whse. Jnl.-Register Line>.PROCEDURE<OnDeleteFromBinContentOnBeforeFieldError>
1 : Codeunit<Whse. Jnl.-Register Line>.PROCEDURE<OnInitWhseEntryCopyFromWhseJnlLine>
1 : Codeunit<WMS Management>.PROCEDURE<OnAfterCheckWhseJnlLine>
1 : Codeunit<WMS Management>.PROCEDURE<OnAfterCreateWhseJnlLine>
1 : Codeunit<WMS Management>.PROCEDURE<OnAfterCreateWhseJnlLineFromConsumJnl>
1 : Codeunit<WMS Management>.PROCEDURE<OnAfterCreateWhseJnlLineFromOutputJnl>
1 : Codeunit<WMS Management>.PROCEDURE<OnAfterSetZoneAndBins>
1 : Codeunit<WMS Management>.PROCEDURE<OnAfterTransferWhseItemTrkg>
1 : Codeunit<WMS Management>.PROCEDURE<OnBeforeCheckItemJnlLineFieldChange>
1 : Codeunit<WMS Management>.PROCEDURE<OnBeforeCheckItemJnlLineLocation>
1 : Codeunit<WMS Management>.PROCEDURE<OnBeforeCheckUserIsWhseEmployee>
1 : Codeunit<WMS Management>.PROCEDURE<OnBeforeGetAllowedLocation>
1 : Codeunit<WMS Management>.PROCEDURE<OnBeforeGetDefaultLocation>
1 : Codeunit<WMS Management>.PROCEDURE<OnBeforeLocationIsAllowed>
1 : Codeunit<WMS Management>.PROCEDURE<OnCheckBalanceQtyToHandleOnAfterSetFilters>
1 : Codeunit<WMS Management>.PROCEDURE<OnInitWhseJnlLineCopyFromItemJnlLine>
1 : Codeunit<WMS Management>.PROCEDURE<OnShowSourceDocLine>
1 : Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnAfterCheckItemAvailability>
1 : Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnAfterCode>
1 : Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnAfterCollectTrackingInformation>
1 : Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnAfterCreateItemJnlLine>
1 : Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnAfterItemJnlPostLine>
1 : Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnAfterPostJnlLines>
1 : Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnBeforeInsertTempHandlingSpecs>
1 : Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnBeforeRegisterLines>
1 : Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnBeforeTempHandlingSpecificationInsert>
1 : Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnBeforeWhseJnlRegisterLineRun>
1 : Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnCheckWhseJnlLine>
1 : Codeunit<Whse.-Act.-Register (Yes/No)>.PROCEDURE<OnBeforeCode>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterAssemblyLineModify>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterAutofillQtyToHandle>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterCheckWhseActivLine>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterCreateRegActivHeader>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterCreateRegActivLine>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterFindWhseActivLine>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterInitRegActLine>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterInitRegInvtMovementLine>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterInsRegWhseItemTrkgLine>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterPostedWhseRcptLineModify>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterProdCompLineModify>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterRegisteredInvtMovementHdrInsert>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterRegisteredInvtMovementLineInsert>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterRegisteredWhseActivHeaderInsert>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterRegisteredWhseActivLineInsert>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterRegisterWhseActivity>
2 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterRegWhseItemTrkgLine>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterWhseInternalPickLineModify>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterWhseInternalPutAwayLineModify>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterWhseShptLineModify>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeAssemblyLineModify>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeAutoReserveForSalesLine>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeCheckLines>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeCheckQtyAvailToInsertBase>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeCheckWhseItemTrkgLine>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeCode>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeCommit>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeCopyWhseActivityLineToReservBuf>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeCreateRegActivHeader>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforePostedWhseRcptLineModify>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeProdCompLineModify>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeRegisteredInvtMovementHdrInsert>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeRegisteredInvtMovementLineInsert>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeRegisteredWhseActivHeaderInsert>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeRegisteredWhseActivLineInsert>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeRegWhseItemTrkgLine>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeTempTrackingSpecificationInsert>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeUpdateWhseShptLine>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeUpdateWhseSourceDocLine>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeUpdWhseActivHeader>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeWhseActivHeaderDelete>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeWhseActivLineDelete>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeWhseActivLineModify>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeWhseInternalPickLineModify>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeWhseInternalPutAwayLineModify>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeWhseJnlRegisterLine>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnInsertRegWhseItemTrkgLineOnAfterCopyFields>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnUpdateTempBinContentBufferOnBeforeInsert>
1 : Codeunit<Whse.-Activity-Register>.PROCEDURE<OnUpdateWhseShptLineOnBeforeWhseShptLineModify>
1 : Codeunit<Replenishment>.PROCEDURE<OnBeforePickAccordingToFEFO>
1 : Codeunit<Whse.-Shipment Release>.PROCEDURE<OnAfterRelease>
1 : Codeunit<Whse.-Shipment Release>.PROCEDURE<OnAfterReopen>
1 : Codeunit<Whse.-Shipment Release>.PROCEDURE<OnAfterTestWhseShptLine>
1 : Codeunit<Whse.-Shipment Release>.PROCEDURE<OnBeforeRelease>
1 : Codeunit<Whse.-Shipment Release>.PROCEDURE<OnBeforeReopen>
1 : Codeunit<Whse. Worksheet-Create>.PROCEDURE<OnAfterFromProdOrderCompLineCreateWhseWkshLine>
1 : Codeunit<Whse. Worksheet-Create>.PROCEDURE<OnAfterFromWhseRcptLineCreateWhseWkshLine>
1 : Codeunit<Whse. Worksheet-Create>.PROCEDURE<OnAfterTransferFromWhseShptLine>
1 : Codeunit<Whse. Worksheet-Create>.PROCEDURE<OnCreateWhseWkshLineOnBeforeInsert>
1 : Codeunit<Whse. Worksheet-Create>.PROCEDURE<OnFromWhseInternalPickLineOnAfterTransferFields>
1 : Codeunit<Whse. Worksheet-Create>.PROCEDURE<OnFromWhseInternalPutawayLineOnAfterTransferFields>
1 : Codeunit<Create Pick>.PROCEDURE<OnAfterBinContentExistsFilter>
1 : Codeunit<Create Pick>.PROCEDURE<OnAfterCalcQtyOnPickAndReceiveBins>
1 : Codeunit<Create Pick>.PROCEDURE<OnAfterCalcReservedQtyOnInventory>
1 : Codeunit<Create Pick>.PROCEDURE<OnAfterCreateTempLineCheckReservation>
1 : Codeunit<Create Pick>.PROCEDURE<OnAfterCreateTempWhseItemTrackingLines>
1 : Codeunit<Create Pick>.PROCEDURE<OnAfterCreateWhseDocLine>
1 : Codeunit<Create Pick>.PROCEDURE<OnAfterCreateWhseDocument>
1 : Codeunit<Create Pick>.PROCEDURE<OnAfterFindWhseActivLine>
1 : Codeunit<Create Pick>.PROCEDURE<OnAfterSetAssemblyLine>
1 : Codeunit<Create Pick>.PROCEDURE<OnAfterSetProdOrderCompLine>
1 : Codeunit<Create Pick>.PROCEDURE<OnAfterSetValues>
1 : Codeunit<Create Pick>.PROCEDURE<OnAfterSetWhseInternalPickLine>
1 : Codeunit<Create Pick>.PROCEDURE<OnAfterSetWhseShipment>
1 : Codeunit<Create Pick>.PROCEDURE<OnAfterSetWhseWkshLine>
1 : Codeunit<Create Pick>.PROCEDURE<OnAfterTransferItemTrkgFields>
4 : Codeunit<Create Pick>.PROCEDURE<OnAfterWhseActivLineInsert>
1 : Codeunit<Create Pick>.PROCEDURE<OnBeforeCalcPickBin>
1 : Codeunit<Create Pick>.PROCEDURE<OnBeforeCalcTotalAvailQtyToPick>
1 : Codeunit<Create Pick>.PROCEDURE<OnBeforeCreateNewWhseDoc>
1 : Codeunit<Create Pick>.PROCEDURE<OnBeforeCreateTempItemTrkgLines>
1 : Codeunit<Create Pick>.PROCEDURE<OnBeforeCreateWhseDocument>
1 : Codeunit<Create Pick>.PROCEDURE<OnBeforeFindBWPickBin>
1 : Codeunit<Create Pick>.PROCEDURE<OnBeforeInsertTempItemTrkgLine>
1 : Codeunit<Create Pick>.PROCEDURE<OnBeforePickStrictExpirationPosting>
1 : Codeunit<Create Pick>.PROCEDURE<OnBeforeSetBinCodeFilter>
1 : Codeunit<Create Pick>.PROCEDURE<OnBeforeTempWhseActivLineInsert>
1 : Codeunit<Create Pick>.PROCEDURE<OnBeforeTempWhseItemTrackingLineModify>
1 : Codeunit<Create Pick>.PROCEDURE<OnBeforeTempWhseItemTrkgLineInsert>
1 : Codeunit<Create Pick>.PROCEDURE<OnBeforeWhseActivHeaderInsert>
1 : Codeunit<Create Pick>.PROCEDURE<OnBeforeWhseActivLineInsert>
2 : Codeunit<Create Pick>.PROCEDURE<OnCalcAvailQtyOnFindBreakBulkBin>
1 : Codeunit<Create Pick>.PROCEDURE<OnCalcAvailQtyOnFindBWPickBin>
1 : Codeunit<Create Pick>.PROCEDURE<OnCalcAvailQtyOnFindPickBin>
2 : Codeunit<Create Pick>.PROCEDURE<OnCalcAvailQtyOnFindSmallerUOMBin>
1 : Codeunit<Create Pick>.PROCEDURE<OnCalcQtyAssignedToPickOnAfterSetFilters>
1 : Codeunit<Create Pick>.PROCEDURE<OnCreateTempActivityLineOnAfterTransferFrom>
1 : Codeunit<Create Pick>.PROCEDURE<OnCreateTempLine2OnBeforeDirectedPutAwayAndPick>
1 : Codeunit<Create Pick>.PROCEDURE<OnCreateWhseDocPlaceLineOnAfterSetFilters>
1 : Codeunit<Create Pick>.PROCEDURE<OnCreateWhseDocTakeLineOnAfterSetFilters>
1 : Codeunit<Create Pick>.PROCEDURE<OnCreateWhseDocTakeLineOnBeforeWhseActivLineInsert>
1 : Codeunit<Create Pick>.PROCEDURE<OnCreateWhseDocumentOnAfterSaveOldValues>
1 : Codeunit<Create Pick>.PROCEDURE<OnCreateWhseDocumentOnAfterSetFiltersAfterLoop>
1 : Codeunit<Create Pick>.PROCEDURE<OnCreateWhseDocumentOnAfterSetFiltersBeforeLoop>
1 : Codeunit<Create Pick>.PROCEDURE<OnCreateWhseDocumentOnBeforeClearFilters>
1 : Codeunit<Create Pick>.PROCEDURE<OnCreateWhseDocumentOnBeforeCreateDocAndLine>
1 : Codeunit<Create Pick>.PROCEDURE<OnCreateWhseDocumentOnBeforeShowError>
1 : Codeunit<Create Pick>.PROCEDURE<OnFindBWPickBinOnBeforeEndLoop>
1 : Codeunit<Create Pick>.PROCEDURE<OnFindBWPickBinOnBeforeFindFromBinContent>
1 : Codeunit<Create Put-away>.PROCEDURE<OnAfterGetItemAndSKU>
1 : Codeunit<Create Put-away>.PROCEDURE<OnAfterGetWhseActivHeaderNo>
1 : Codeunit<Create Put-away>.PROCEDURE<OnAfterMakeCrossDockPutAway>
1 : Codeunit<Create Put-away>.PROCEDURE<OnAfterRun>
1 : Codeunit<Create Put-away>.PROCEDURE<OnAfterSetValues>
1 : Codeunit<Create Put-away>.PROCEDURE<OnAfterWhseActivHeaderInsert>
2 : Codeunit<Create Put-away>.PROCEDURE<OnAfterWhseActivLineInsert>
1 : Codeunit<Create Put-away>.PROCEDURE<OnBeforeCalcAvailCubageAndWeight>
1 : Codeunit<Create Put-away>.PROCEDURE<OnBeforeCode>
1 : Codeunit<Create Put-away>.PROCEDURE<OnBeforeCreateNewWhseActivity>
1 : Codeunit<Create Put-away>.PROCEDURE<OnBeforeGetPutAwayUOM>
1 : Codeunit<Create Put-away>.PROCEDURE<OnBeforeRun>
1 : Codeunit<Create Put-away>.PROCEDURE<OnBeforeWhseActivHeaderInsert>
1 : Codeunit<Create Put-away>.PROCEDURE<OnBeforeWhseActivLineInsert>
1 : Codeunit<Create Put-away>.PROCEDURE<OnCodeOnAfterCreateNewWhseActivity>
1 : Codeunit<Create Put-away>.PROCEDURE<OnFindBin>
1 : Codeunit<Create Put-away>.PROCEDURE<OnFindBinContent>
1 : Codeunit<Create Put-away>.PROCEDURE<OnNextBin>
1 : Codeunit<Create Put-away>.PROCEDURE<OnNextBinContent>
1 : Codeunit<Create Put-away>.PROCEDURE<OnUpdateTempWhseItemTrkgLines>
1 : Codeunit<Warehouse Availability Mgt.>.PROCEDURE<OnAfterCalcQtyRcvdNotAvailable>
1 : Codeunit<Warehouse Availability Mgt.>.PROCEDURE<OnAfterCalcReservedQtyOnInventory>
1 : Codeunit<Whse. Integration Management>.PROCEDURE<OnCheckBinTypeCode>
1 : Codeunit<Bin Create>.PROCEDURE<OnAfterBinInsert>
1 : Codeunit<Bin Create>.PROCEDURE<OnBeforeBinInsert>
1 : Codeunit<Whse. Undo Quantity>.PROCEDURE<OnAfterUndoPostedWhseRcptLine>
1 : Codeunit<Whse. Undo Quantity>.PROCEDURE<OnAfterUndoPostedWhseShptLine>
1 : Codeunit<Whse. Undo Quantity>.PROCEDURE<OnAfterUpdateWhseRequestRcpt>
1 : Codeunit<Whse. Undo Quantity>.PROCEDURE<OnAfterUpdateWhseRequestShpt>
1 : Codeunit<Whse. Undo Quantity>.PROCEDURE<OnBeforePostedWhseRcptLineInsert>
1 : Codeunit<Whse. Undo Quantity>.PROCEDURE<OnBeforePostedWhseShptLineInsert>
1 : Codeunit<Whse. Undo Quantity>.PROCEDURE<OnBeforePostTempWhseJnlLine>
1 : Codeunit<Whse. Undo Quantity>.PROCEDURE<OnBeforeTempWhseJnlLineInsert>
1 : Codeunit<Whse. Undo Quantity>.PROCEDURE<OnBeforeWhseRcptLineModify>
1 : Codeunit<Whse. Undo Quantity>.PROCEDURE<OnBeforeWhseShptLineModify>
1 : Codeunit<Whse. Undo Quantity>.PROCEDURE<OnFindPostedWhseRcptLineOnAfterSetFilters>
1 : Codeunit<Whse. Undo Quantity>.PROCEDURE<OnFindPostedWhseShptLineOnAfterSetFilters>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnAfterAutoCreatePutAway>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnAfterCreateInventoryPutaway>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnAfterInsertWhseActivLine>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnAfterUpdateWhseActivHeader>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeCreatePutAwayLinesFromCompLoop>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeCreatePutAwayLinesFromProdLoop>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeCreatePutAwayLinesFromPurchaseLoop>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeCreatePutAwayLinesFromSalesLoop>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeCreatePutAwayLinesFromTransferLoop>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeFindProdOrderComp>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeFindProdOrderLine>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeFindPurchLine>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeFindSalesLine>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeFindTransLine>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeInsertWhseActivLine>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromComp>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromProd>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromPurchase>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromSales>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromTransfer>
1 : Codeunit<Create Inventory Put-away>.PROCEDURE<OnInsertWhseActivLineOnBeforeAutoCreation>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnAfterAutoCreatePickOrMove>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnAfterCalcTotalAvailQtyToPickBase>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnAfterCreateInventoryPickMovement>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnAfterInsertWhseActivLine>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnAfterUpdateWhseActivHeader>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeCreatePickOrMoveLineFromProductionLoop>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeCreatePickOrMoveLineFromPurchaseLoop>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeCreatePickOrMoveLineFromSalesLoop>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeCreatePickOrMoveLineFromTransferLoop>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeCreateTempHandlingSpec>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeFindAssemblyLine>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeFindFromBinContent>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeFindProdOrderComp>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeFindPurchLine>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeFindSalesLine>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeFindTransLine>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeInsertPickOrMoveBinWhseActLine>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeNewWhseActivLineInsert>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromAssembly>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromComp>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromPurchase>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromSales>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromTransfer>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforePickStrictExpirationPosting>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeTempReservEntryInsert>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeWhseItemTrackingLineInsert>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnCreateInvtMvntWithoutSourceOnAfterTransferFields>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnCreatePickOrMoveLineFromHandlingSpec>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnInsertTempHandlingSpecOnBeforeValidateQtyBase>
1 : Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnInvtMvntWithoutSourceOnBeforeWhseActivHeaderModify>
1 : Codeunit<Whse.-Act.-Post (Yes/No)>.PROCEDURE<OnBeforeConfirmPost>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterCode>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterCreateWhseJnlLine>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterInitSourceDocument>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterPostWhseActivHeader>
2 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterPurchLineModify>
2 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterSalesLineModify>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterTransLineModify>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterWhseActivLineModify>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnBeforeCheckItemTracking>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnBeforeCheckLines>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnBeforeCode>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnBeforeInitSourceDocument>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnBeforeInsertTempWhseActivLine>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnBeforePostedInvtPickLineInsert>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnBeforePostedInvtPutAwayLineInsert>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnBeforePostWhseJnlLine>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnBeforeTempWhseActivLineInsert>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnBeforeUnhandledTransLineModify>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnBeforeUpdateSourceDocument>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnBeforeWhseActivLineDelete>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnCodeOnAfterCreatePostedWhseActivDocument>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnPostConsumptionLineOnAfterCreateItemJnlLine>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnPostOutputLineOnAfterCreateItemJnlLine>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnUpdateSourceDocumentOnAfterPurchLineModify>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnUpdateSourceDocumentOnAfterSalesLineModify>
1 : Codeunit<Whse.-Activity-Post>.PROCEDURE<OnUpdateSourceDocumentOnAfterTransLineModify>
1 : Codeunit<Whse.-Output Prod. Release>.PROCEDURE<OnAfterCheckWhseRqstProdOrderLine>
1 : Codeunit<Whse.-Output Prod. Release>.PROCEDURE<OnAfterCreateWhseRqst>
1 : Codeunit<Whse.-Output Prod. Release>.PROCEDURE<OnAfterDeleteLine>
1 : Codeunit<Whse.-Output Prod. Release>.PROCEDURE<OnBeforeWhseRequestInsert>
1 : Codeunit<Whse. Item Tracking FEFO>.PROCEDURE<OnAfterCreateEntrySummaryFEFO>
1 : Codeunit<Whse. Item Tracking FEFO>.PROCEDURE<OnBeforeFindFirstEntrySummaryFEFO>
1 : Codeunit<Whse. Item Tracking FEFO>.PROCEDURE<OnBeforeInsertEntrySummaryFEFO>
1 : Codeunit<Whse. Item Tracking FEFO>.PROCEDURE<OnBeforeSetSource>
1 : Codeunit<Whse. Item Tracking FEFO>.PROCEDURE<OnBeforeSummarizeInventoryFEFO>
1 : Codeunit<Whse. Item Tracking FEFO>.PROCEDURE<OnEntrySummaryFEFOExistsOnAfterSetFilters>
1 : Codeunit<Whse. Item Tracking FEFO>.PROCEDURE<OnSummarizeAdjustmentBinFEFOOnBeforeInsertEntrySummaryFEFO>
1 : Codeunit<Whse. Item Tracking FEFO>.PROCEDURE<OnSummarizeInventoryFEFOOnBeforeInsertEntrySummaryFEFO>
1 : Codeunit<Phys. Invt. Count.-Management>.PROCEDURE<OnBeforeCreatePhysInvtItemJnl>
1 : Codeunit<Phys. Invt. Count.-Management>.PROCEDURE<OnCreateCustomPhysInvtJournal>
1 : Codeunit<Phys. Invt. Count.-Management>.PROCEDURE<OnRunOnAfterSetItemFilters>
1 : Codeunit<Phys. Invt. Count.-Management>.PROCEDURE<OnRunOnAfterSetSKUFilters>
1 : Codeunit<Purch.-Get Receipt>.PROCEDURE<OnAfterCalcInvoiceDiscount>
1 : Codeunit<Purch.-Get Receipt>.PROCEDURE<OnAfterInsertLines>
1 : Codeunit<Purch.-Get Receipt>.PROCEDURE<OnAfterPurchRcptLineSetFilters>
1 : Codeunit<Purch.-Get Receipt>.PROCEDURE<OnBeforeCalcUpdatePrepmtAmtToDeductRounding>
1 : Codeunit<Purch.-Get Receipt>.PROCEDURE<OnBeforeGetItemChargeAssgnt>
1 : Codeunit<Purch.-Get Receipt>.PROCEDURE<OnBeforeInsertLines>
1 : Codeunit<Purch.-Get Receipt>.PROCEDURE<OnBeforeTransferLineToPurchaseDoc>
1 : Codeunit<VAT Report Release/Reopen>.PROCEDURE<OnBeforeValidate>
1 : Codeunit<Item Attribute Management>.PROCEDURE<OnBeforeBufferedItemAttributeValueMappingInsert>
1 : Codeunit<Item Attribute Management>.PROCEDURE<OnBeforeItemAttributeValueMappingInsert>
1 : Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnAfterPurchaseLineInsert>
1 : Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnAfterSalesLineModify>
1 : Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnBeforePurchaseLineInsert>
1 : Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnBeforeSalesLineModify>
1 : Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnCodeOnBeforeModify>
1 : Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnCodeOnBeforeSelectSalesHeader>
1 : Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnGetDescriptionFromItem>
1 : Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnGetDescriptionFromItemTranslation>
1 : Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnGetDescriptionFromItemVariant>
1 : Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnGetDescriptionFromSalesLine>
1 : Codeunit<Calendar Management>.PROCEDURE<OnBeforeCalcDateBOC>
1 : Codeunit<Calendar Management>.PROCEDURE<OnCalcDateBOCOnAfterCheckDates>
1 : Codeunit<Calendar Management>.PROCEDURE<OnCalcDateBOCOnAfterGetCalendarCodes>
1 : Codeunit<Calendar Management>.PROCEDURE<OnCalcDateBOCOnAfterSetNonworking>
1 : Codeunit<Sales-Post and Send>.PROCEDURE<OnAfterPostAndBeforeSend>
1 : Codeunit<Sales-Post and Send>.PROCEDURE<OnAfterPostAndSend>
1 : Codeunit<Sales-Post and Send>.PROCEDURE<OnBeforeConfirmAndSend>
1 : Codeunit<Sales-Post and Send>.PROCEDURE<OnBeforePostAndSend>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnAfterAccSchedLineInsert>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnAfterCalcCellValue>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnAfterSetCFAccColumnFilter>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnAfterSetCFAccRowFilter>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnAfterSetGLAccAnalysisViewBudgetEntries>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnAfterSetGLAccAnalysisViewEntryFilters>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnAfterSetGLAccColumnFilters>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnAfterSetGLAccGLBudgetEntryFilters>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnAfterSetGLAccGLEntryFilters>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnAfterSetGLAccRowFilters>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeCalcCellExit>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeCalcCFAcc>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeCalcCostType>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeCalcGLAcc>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeDrillDownFromOverviewPage>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeDrillDownOnAccounts>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeDrillDownOnGLAccount>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeEvaluateExpression>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeTestBalance>
1 : Codeunit<AccSchedManagement>.PROCEDURE<OnCalcCellValueOnBeforeExit>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterCheckAndUpdate>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterCheckMandatoryFields>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterCheckSalesDoc>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterCheckTrackingAndWarehouseForReceive>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterCheckTrackingAndWarehouseForShip>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterCreatePostedDeferralScheduleFromSalesDoc>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterDeleteAfterPosting>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterDivideAmount>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterFillInvoicePostBuffer>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterFinalizePosting>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterFinalizePostingOnBeforeCommit>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterIncrAmount>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterInitAssocItemJnlLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterInsertDropOrderPurchRcptHeader>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterInsertedPrepmtVATBaseToDeduct>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterInvoicePostingBufferAssignAmounts>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterInvoicePostingBufferSetAmounts>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterInvoiceRoundingAmount>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostBalancingEntry>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostCustomerEntry>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostGLAndCustomer>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostInvPostBuffer>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostItemJnlLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostItemJnlLineBeforePost>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostItemJnlLineWhseLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostItemTrackingForShipment>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostItemTrackingReturnRcpt>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostSalesDoc>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostSalesDocDropShipment>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostSalesLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostSalesLines>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPostUpdateOrderLineModifyTempLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPurchRcptHeaderInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterPurchRcptLineInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterReleaseSalesDoc>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterResetTempLines>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterRestoreSalesHeader>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterReturnRcptHeaderInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterReturnRcptLineInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterReverseAmount>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterRoundAmount>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesCrMemoHeaderInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesCrMemoLineInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesInvHeaderInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesInvLineInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesShptHeaderInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesShptLineInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterSetApplyToDocNo>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterTestSalesLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterUpdateAfterPosting>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterUpdateBlanketOrderLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterUpdatePostingNos>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterUpdatePrepmtSalesLineWithRounding>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterUpdateSalesHeader>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterUpdateSalesLineBeforePost>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterUpdateWhseDocuments>
1 : Codeunit<Sales-Post>.PROCEDURE<OnAfterValidatePostingAndDocumentDate>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeArchiveUnpostedOrder>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeBlanketOrderSalesLineModify>
2 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeCreatePostedWhseRcptHeader>
2 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeCreatePostedWhseShptHeader>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeCreatePrepaymentLines>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeDeleteAfterPosting>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeDivideAmount>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeFillDeferralPostingBuffer>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeFinalizePosting>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeGetCountryCode>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeInitAssocItemJnlLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeInsertICGenJnlLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeInsertPostedHeaders>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeInsertReturnReceiptHeader>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeInsertReturnReceiptLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeInvoicePostingBufferSetAmounts>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeInvoiceRoundingAmount>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeItemJnlPostLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeLockTables>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostAssocItemJnlLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostBalancingEntry>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostCommitSalesDoc>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostCustomerEntry>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostDropOrderShipment>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostGLAndCustomer>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostInvoicePostBuffer>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostInvPostBuffer>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostItemChargePerOrder>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostItemJnlLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostItemTrackingForReceiptCondition>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostItemTrackingForShipment>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostItemTrackingForShipmentCondition>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostItemTrackingReturnRcpt>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostJobContractLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostLines>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostSalesDoc>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostUpdateOrderLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePostUpdateOrderLineModifyTempLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePurchRcptHeaderInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforePurchRcptLineInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeReleaseSalesDoc>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeReturnRcptHeaderInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeReturnRcptLineInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeRoundAmount>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesCrMemoHeaderInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesCrMemoLineInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesInvHeaderInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesInvLineInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesLineDeleteAll>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesShptHeaderInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesShptLineInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeSendICDocument>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeShouldPostWhseJnlLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeTempDeferralLineInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeTempPrepmtSalesLineInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeTempPrepmtSalesLineModify>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeTestSalesLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeTestSalesLineFixedAsset>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeTestSalesLineItemCharge>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeTestSalesLineJob>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeTestSalesLineOthers>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeUpdateAssocLines>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeUpdateBlanketOrderLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeUpdateHandledICInboxTransaction>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeUpdateInvoicedQtyOnShipmentLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeUpdatePostingNo>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeUpdatePostingNos>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeUpdatePrepmtSalesLineWithRounding>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeUpdateSalesLineBeforePost>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeUpdateShippingNo>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeValidatePostingAndDocumentDate>
1 : Codeunit<Sales-Post>.PROCEDURE<OnBeforeWhseHandlingRequired>
1 : Codeunit<Sales-Post>.PROCEDURE<OnCalcInvDiscountSetFilter>
1 : Codeunit<Sales-Post>.PROCEDURE<OnCheckAndUpdateOnBeforeCalcInvDiscount>
1 : Codeunit<Sales-Post>.PROCEDURE<OnCheckTrackingAndWarehouseForReceiveOnBeforeCheck>
1 : Codeunit<Sales-Post>.PROCEDURE<OnCheckTrackingAndWarehouseForShipOnBeforeCheck>
1 : Codeunit<Sales-Post>.PROCEDURE<OnCopyAndCheckItemChargeOnBeforeLoop>
1 : Codeunit<Sales-Post>.PROCEDURE<OnCopyToTempLinesOnAfterSetFilters>
1 : Codeunit<Sales-Post>.PROCEDURE<OnFillInvoicePostingBufferOnAfterUpdateInvoicePostBuffer>
1 : Codeunit<Sales-Post>.PROCEDURE<OnFillInvoicePostingBufferOnBeforeDeferrals>
1 : Codeunit<Sales-Post>.PROCEDURE<OnFinalizePostingOnBeforeCreateOutboxSalesTrans>
1 : Codeunit<Sales-Post>.PROCEDURE<OnGetPostedDocumentRecordElseCase>
1 : Codeunit<Sales-Post>.PROCEDURE<OnInsertPostedHeadersOnBeforeInsertInvoiceHeader>
2 : Codeunit<Sales-Post>.PROCEDURE<OnInvoiceSalesShptLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnPostAssocItemJnlLineOnBeforePost>
1 : Codeunit<Sales-Post>.PROCEDURE<OnPostATOOnBeforePostedATOLinkInsert>
1 : Codeunit<Sales-Post>.PROCEDURE<OnPostBalancingEntryOnBeforeFindCustLedgEntry>
1 : Codeunit<Sales-Post>.PROCEDURE<OnPostItemChargeOnBeforePostItemJnlLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnPostItemChargePerOrderOnAfterCopyToItemJnlLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnPostItemChargePerOrderOnBeforeTestJobNo>
1 : Codeunit<Sales-Post>.PROCEDURE<OnPostItemChargePerShptOnBeforeTestJobNo>
1 : Codeunit<Sales-Post>.PROCEDURE<OnPostItemJnlLineOnAfterCopyDocumentFields>
1 : Codeunit<Sales-Post>.PROCEDURE<OnPostItemJnlLineOnBeforeTransferReservToItemJnlLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnPostItemTrackingForReceiptOnAfterSetFilters>
1 : Codeunit<Sales-Post>.PROCEDURE<OnPostItemTrackingForReceiptOnBeforeReturnRcptLineModify>
1 : Codeunit<Sales-Post>.PROCEDURE<OnPostSalesLineOnAfterPostItemTrackingLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnPostSalesLineOnAfterSetEverythingInvoiced>
1 : Codeunit<Sales-Post>.PROCEDURE<OnPostSalesLineOnAfterTestUpdatedSalesLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnPostSalesLineOnBeforeInsertCrMemoLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnPostSalesLineOnBeforeInsertInvoiceLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnPostSalesLineOnBeforeInsertReturnReceiptLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnPostSalesLineOnBeforeInsertShipmentLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnPostSalesLineOnBeforePostItemTrackingLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnPostSalesLineOnBeforeTestJobNo>
1 : Codeunit<Sales-Post>.PROCEDURE<OnPostUpdateOrderLineOnBeforeInitOutstanding>
1 : Codeunit<Sales-Post>.PROCEDURE<OnPostUpdateOrderLineOnBeforeInitTempSalesLineQuantities>
1 : Codeunit<Sales-Post>.PROCEDURE<OnRoundAmountOnBeforeIncrAmount>
1 : Codeunit<Sales-Post>.PROCEDURE<OnRunOnBeforeFinalizePosting>
1 : Codeunit<Sales-Post>.PROCEDURE<OnSendPostedDocumentRecordElseCase>
1 : Codeunit<Sales-Post>.PROCEDURE<OnSendSalesDocument>
1 : Codeunit<Sales-Post>.PROCEDURE<OnSumSalesLines2OnBeforeDivideAmount>
1 : Codeunit<Sales-Post>.PROCEDURE<OnSumSalesLines2SetFilter>
1 : Codeunit<Sales-Post>.PROCEDURE<OnUpdateAssocOrderOnAfterModifyPurchLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnUpdateAssocOrderOnBeforeModifyPurchLine>
1 : Codeunit<Sales-Post>.PROCEDURE<OnUpdateBlanketOrderLineOnBeforeCheck>
1 : Codeunit<Sales-Post>.PROCEDURE<OnUpdateBlanketOrderLineOnBeforeInitOutstanding>
1 : Codeunit<Online Map Management>.PROCEDURE<OnAfterGetAddress>
1 : Codeunit<Online Map Management>.PROCEDURE<OnAfterProcessWebDirections>
1 : Codeunit<Online Map Management>.PROCEDURE<OnAfterProcessWebMap>
1 : Codeunit<Online Map Management>.PROCEDURE<OnAfterValidAddress>
1 : Codeunit<Online Map Management>.PROCEDURE<OnBeforeGetAddress>
1 : Codeunit<Online Map Management>.PROCEDURE<OnBeforeValidAddress>
1 : Codeunit<Sales-Post (Yes/No)>.PROCEDURE<OnAfterConfirmPost>
1 : Codeunit<Sales-Post (Yes/No)>.PROCEDURE<OnAfterPost>
1 : Codeunit<Sales-Post (Yes/No)>.PROCEDURE<OnBeforeConfirmSalesPost>
1 : Codeunit<Sales-Post (Yes/No)>.PROCEDURE<OnRunPreviewOnAfterSetPostingFlags>
1 : Codeunit<Sales-Post + Print>.PROCEDURE<OnAfterConfirmPost>
1 : Codeunit<Sales-Post + Print>.PROCEDURE<OnAfterPost>
1 : Codeunit<Sales-Post + Print>.PROCEDURE<OnBeforeConfirmPost>
1 : Codeunit<Sales-Post + Print>.PROCEDURE<OnBeforeGetReport>
1 : Codeunit<Sales-Post + Print>.PROCEDURE<OnBeforePrintCrMemo>
1 : Codeunit<Sales-Post + Print>.PROCEDURE<OnBeforePrintInvoice>
1 : Codeunit<Sales-Post + Print>.PROCEDURE<OnBeforePrintReceive>
1 : Codeunit<Sales-Post + Print>.PROCEDURE<OnBeforePrintShip>
1 : Codeunit<Sales-Quote to Order (Yes/No)>.PROCEDURE<OnAfterSalesQuoteToOrderRun>
1 : Codeunit<Sales-Quote to Order (Yes/No)>.PROCEDURE<OnBeforeRun>
1 : Codeunit<Blnkt Sales Ord. to Ord. (Y/N)>.PROCEDURE<OnBeforeRun>
1 : Codeunit<Cash Flow Management>.PROCEDURE<OnBeforeGetTaxAmountFromPurchaseOrder>
1 : Codeunit<Cash Flow Management>.PROCEDURE<OnBeforeGetTaxAmountFromSalesOrder>
1 : Codeunit<Cash Flow Management>.PROCEDURE<OnBeforeShowSource>
1 : Codeunit<Cash Flow Management>.PROCEDURE<OnBeforeShowSourceDocument>
1 : Codeunit<Cash Flow Management>.PROCEDURE<OnBeforeUpdateCashFlowForecast>
1 : Codeunit<Cash Flow Wksh. -Register Line>.PROCEDURE<OnAfterCreateForecastEntry>
1 : Codeunit<Cash Flow Forecast Handler>.PROCEDURE<OnAfterHasMinimumHistoricalData>
1 : Codeunit<Cash Flow Forecast Handler>.PROCEDURE<OnAfterPreparePurchHistoryData>
1 : Codeunit<Cash Flow Forecast Handler>.PROCEDURE<OnAfterPrepareSalesHistoryData>
1 : Codeunit<Sales-Quote to Order>.PROCEDURE<OnAfterInsertAllSalesOrderLines>
1 : Codeunit<Sales-Quote to Order>.PROCEDURE<OnAfterInsertSalesOrderLine>
1 : Codeunit<Sales-Quote to Order>.PROCEDURE<OnAfterOnRun>
1 : Codeunit<Sales-Quote to Order>.PROCEDURE<OnBeforeCreateSalesHeader>
1 : Codeunit<Sales-Quote to Order>.PROCEDURE<OnBeforeDeleteSalesQuote>
1 : Codeunit<Sales-Quote to Order>.PROCEDURE<OnBeforeInsertSalesOrderHeader>
1 : Codeunit<Sales-Quote to Order>.PROCEDURE<OnBeforeInsertSalesOrderLine>
1 : Codeunit<Sales-Quote to Order>.PROCEDURE<OnBeforeModifySalesOrderHeader>
1 : Codeunit<Sales-Quote to Order>.PROCEDURE<OnBeforeOnRun>
1 : Codeunit<Sales-Quote to Order>.PROCEDURE<OnBeforeTransferQuoteLineToOrderLineLoop>
1 : Codeunit<Sales-Quote to Order>.PROCEDURE<OnTransferQuoteToOrderLinesOnAfterSetFilters>
1 : Codeunit<Config. Package Management>.PROCEDURE<OnAfterValidatePackageDataRelation>
1 : Codeunit<Config. Package Management>.PROCEDURE<OnBeforeGetFieldRelationTableNo>
1 : Codeunit<Config. Package Management>.PROCEDURE<OnModifyRecordDataFieldsOnBeforeFindConfigPackageField>
1 : Codeunit<Config. Package Management>.PROCEDURE<OnPostProcessPackage>
1 : Codeunit<Config. Package Management>.PROCEDURE<OnPreProcessPackage>
1 : Codeunit<Config. Template Management>.PROCEDURE<OnApplyTemplLinesWithoutValidationAfterRecRefCheck>
1 : Codeunit<Config. Template Management>.PROCEDURE<OnBeforeUpdateWithSkipFields>
1 : Codeunit<Config. XML Exchange>.PROCEDURE<OnBeforeGetElementName>
1 : Codeunit<Config. Management>.PROCEDURE<OnFindPage>
1 : Codeunit<Config. Excel Exchange>.PROCEDURE<OnBeforeExportExcel>
1 : Codeunit<Config. Excel Exchange>.PROCEDURE<OnImportExcelFile>
1 : Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnAfterInsertAllSalesOrderLines>
1 : Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnAfterInsertSalesOrderLine>
1 : Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnAfterResetQuantityFields>
1 : Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnAfterRun>
1 : Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnBeforeCreateSalesHeader>
1 : Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnBeforeInsertSalesOrderHeader>
1 : Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnBeforeInsertSalesOrderLine>
1 : Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnBeforeReserveItemsManuallyLoop>
1 : Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnBeforeRun>
1 : Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnBeforeSalesOrderHeaderModify>
1 : Codeunit<Sales Post via Job Queue>.PROCEDURE<OnBeforeEnqueueSalesDoc>
1 : Codeunit<Sales Post via Job Queue>.PROCEDURE<OnBeforeReleaseSalesDoc>
1 : Codeunit<Custom Layout Reporting>.PROCEDURE<OnBeforeVerifyXmlContainsDataset>
1 : Codeunit<ReadSoft OCR Master Data Sync>.PROCEDURE<OnBeforeSendRequest>
1 : Codeunit<Sales-Post + Email>.PROCEDURE<OnAfterConfirmPost>
1 : Codeunit<Sales-Post + Email>.PROCEDURE<OnAfterPostAndBeforeSend>
1 : Codeunit<Sales-Post + Email>.PROCEDURE<OnAfterPostAndSend>
1 : Codeunit<Sales-Post + Email>.PROCEDURE<OnBeforePostAndEMail>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterBlanketOrderPurchLineModify>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterCheckAndUpdate>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterCheckMandatoryFields>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterCheckPurchDoc>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterCheckTrackingAndWarehouseForReceive>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterCheckTrackingAndWarehouseForShip>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterCreatePostedDeferralScheduleFromPurchDoc>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterDeleteAfterPosting>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterDivideAmount>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterFillInvoicePostBuffer>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterFinalizePosting>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterFinalizePostingOnBeforeCommit>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterIncrAmount>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterInitAssocItemJnlLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterInsertCombinedSalesShipment>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterInsertedPrepmtVATBaseToDeduct>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterInsertPostedHeaders>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterInvoiceRoundingAmount>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostAccICLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostBalancingEntry>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostGLAndVendor>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostInvPostBuffer>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostItemJnlLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostItemJnlLineCopyProdOrder>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostItemLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostItemTrackingLine>
2 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostPurchaseDoc>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostPurchaseDocDropShipment>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostPurchLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostPurchLines>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostUpdateOrderLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostVendorEntry>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostWhseJnlLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchCrMemoHeaderInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchCrMemoLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchInvHeaderInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchInvLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchRcptHeaderInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchRcptLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterResetTempLines>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterRestorePurchaseHeader>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterReturnShptHeaderInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterReturnShptLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterReverseAmount>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterRoundAmount>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterSalesShptHeaderInsert>
2 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterSalesShptLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterSaveTempWhseSplitSpec>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterSetApplyToDocNo>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterTestPurchLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterUpdateInvoicedQtyOnPurchRcptLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterUpdateInvoicedQtyOnReturnShptLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterUpdatePostingNos>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterUpdatePrepmtPurchLineWithRounding>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterUpdatePurchaseHeader>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterUpdatePurchLineBeforePost>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnAfterValidatePostingAndDocumentDate>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeArchiveUnpostedOrder>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeBlanketOrderPurchLineModify>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeCheckExternalDocumentNumber>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeCheckICDocumentDuplicatePosting>
2 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeCreatePostedWhseRcptHeader>
2 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeCreatePostedWhseShptHeader>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeCreatePrepmtLines>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeDeleteAfterPosting>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeDivideAmount>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeFillDeferralPostingBuffer>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeFinalizePosting>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeGetCountryCode>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeInitAssocItemJnlLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeInsertPostedHeaders>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeInsertReceiptHeader>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeInvoicePostingBufferSetAmounts>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeInvoiceRoundingAmount>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeItemJnlPostLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeLockTables>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostAssocItemJnlLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostBalancingEntry>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostCombineSalesOrderShipment>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostCommitPurchaseDoc>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostGLAccICLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostGLAndVendor>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostInvoicePostBuffer>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostInvPostBuffer>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostItemChargePerOrder>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostItemJnlLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostItemJnlLineJobConsumption>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostItemTrackingForReceiptCondition>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostItemTrackingForShipmentCondition>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostLines>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostPurchaseDoc>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostUpdateOrderLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostUpdateOrderLineModifyTempLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostVendorEntry>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchCrMemoHeaderInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchCrMemoLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchInvHeaderInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchInvLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchLineDeleteAll>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchRcptHeaderInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchRcptLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeReturnShptHeaderInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeReturnShptLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeRevertWarehouseEntry>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeRoundAmount>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeSalesShptHeaderInsert>
2 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeSalesShptLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeSendICDocument>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeTempDeferralLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeTempPrepmtPurchLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeTempPrepmtPurchLineModify>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeTestPurchLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeTestPurchLineFixedAsset>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeTestPurchLineItemCharge>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeTestPurchLineJob>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeTestPurchLineOthers>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeUpdateBlanketOrderLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeUpdateHandledICInboxTransaction>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeUpdateInvoicedQtyOnPurchRcptLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeUpdatePrepmtPurchLineWithRounding>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeUpdatePurchLineBeforePost>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeValidatePostingAndDocumentDate>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnBeforeWhseHandlingRequired>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnCheckAndUpdateOnBeforeCalcInvDiscount>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnCopyAndCheckItemChargeOnBeforeLoop>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnCopyToTempLinesOnAfterSetFilters>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnFillInvoicePostBufferOnAfterInitAmounts>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnFillInvoicePostingBufferOnAfterUpdateInvoicePostBuffer>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnGetItemChargeLineOnAfterGet>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnInsertICGenJnlLineOnBeforeICGenJnlLineInsert>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnPostItemChargeOnBeforePostItemJnlLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnPostItemChargePerOrderOnAfterCopyToItemJnlLine>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnPostItemChargePerRetShptOnBeforeTestJobNo>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnPostItemChargePerSalesRetRcptOnBeforeTestJobNo>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnPostItemChargePerSalesShptOnBeforeTestJobNo>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnPostItemJnlLineJobConsumption>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnPostItemJnlLineOnAfterCopyDocumentFields>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnPostItemJnlLineOnAfterSetFactor>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnPostItemJnlLineOnBeforeCopyDocumentFields>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnPostPurchLineOnAfterSetEverythingInvoiced>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnPostUpdateInvoiceLineOnAfterPurchOrderLineModify>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnReleasePurchDocumentOnBeforeSetStatus>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnRoundAmountOnBeforeIncrAmount>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnRunOnBeforeFinalizePosting>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnUpdateAssocOrderOnAfterSalesOrderLineModify>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnUpdateBlanketOrderLineOnBeforeCheck>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnUpdateBlanketOrderLineOnBeforeInitOutstanding>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnUpdateWhseDocumentsOnAfterUpdateWhseRcpt>
1 : Codeunit<Purch.-Post>.PROCEDURE<OnUpdateWhseDocumentsOnAfterUpdateWhseShpt>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterCreateItemJnlLineFromAssemblyHeader>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterCreateItemJnlLineFromAssemblyLine>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterCreateResJnlLineFromItemJnlLine>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterCreateWhseJnlLineFromItemJnlLine>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterFinalizePost>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterInitPost>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterOnRun>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterPost>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterPostedAssemblyHeaderModify>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterPostedAssemblyLineInsert>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterRecreateAsmOrderWithUndo>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterUndoInitPost>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterUndoPost>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnAfterUpdateAsmOrderWithUndo>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnBeforeFinalizePost>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnBeforeInitPost>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnBeforeOnRun>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnBeforePost>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnBeforePostCorrectionItemJnLine>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnBeforePostedAssemblyLineInsert>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnBeforePostItemConsumption>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnBeforeRecreatedAsmHeaderInsert>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnPostOnAfterCopyComments>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnUndoPostHeaderOnAfterTransferFields>
1 : Codeunit<Assembly-Post>.PROCEDURE<OnUndoPostLinesOnAfterTransferFields>
1 : Codeunit<Azure AD User Management>.PROCEDURE<OnInitialize>
1 : Codeunit<Application System Constants>.PROCEDURE<OnAfterGetApplicationVersion>
1 : Codeunit<Small Business Report Catalog>.PROCEDURE<OnBeforeRunDetailTrialBalanceReport>
1 : Codeunit<Release Assembly Document>.PROCEDURE<OnAfterReleaseAssemblyDoc>
1 : Codeunit<Release Assembly Document>.PROCEDURE<OnAfterReopenAssemblyDoc>
1 : Codeunit<Release Assembly Document>.PROCEDURE<OnBeforeReleaseAssemblyDoc>
1 : Codeunit<Release Assembly Document>.PROCEDURE<OnBeforeReopenAssemblyDoc>
2 : Codeunit<Invite External Accountant>.PROCEDURE<OnInvitationCreateNewUser>
1 : Codeunit<Whse.-Assembly Release>.PROCEDURE<OnBeforeWhseRequestInsert>
1 : Codeunit<Assembly Line Management>.PROCEDURE<OnAfterTransferBOMComponent>
1 : Codeunit<Assembly Line Management>.PROCEDURE<OnBeforeReplaceAssemblyLines>
1 : Codeunit<Assembly Line Management>.PROCEDURE<OnBeforeShowAvailability>
1 : Codeunit<Assembly Line Management>.PROCEDURE<OnBeforeUpdateAssemblyLines>
1 : Codeunit<Postcode Service Manager>.PROCEDURE<OnCheckIsServiceConfigured>
1 : Codeunit<Postcode Service Manager>.PROCEDURE<OnDiscoverPostcodeServices>
1 : Codeunit<Postcode Service Manager>.PROCEDURE<OnRetrieveAddress>
1 : Codeunit<Postcode Service Manager>.PROCEDURE<OnRetrieveAddressList>
1 : Codeunit<Postcode Service Manager>.PROCEDURE<OnShowConfigurationPage>
1 : Codeunit<Purch.-Post (Yes/No)>.PROCEDURE<OnAfterConfirmPost>
1 : Codeunit<Purch.-Post (Yes/No)>.PROCEDURE<OnAfterPost>
1 : Codeunit<Purch.-Post (Yes/No)>.PROCEDURE<OnBeforeConfirmPost>
1 : Codeunit<Purch.-Post (Yes/No)>.PROCEDURE<OnBeforeRunPurchPost>
1 : Codeunit<Assembly Info-Pane Management>.PROCEDURE<OnBeforeLookupItem>
1 : Codeunit<Help & Support Management>.PROCEDURE<OnBeforeGetSupportInformation>
1 : Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnAfterCopyProfile>
1 : Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnAfterGetDefaultRoleCenter>
1 : Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnBeforeOpenSettings>
1 : Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnGetBuiltInRoleCenterFilter>
1 : Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnInitializeProfiles>
2 : Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnProfileChanged>
1 : Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnRoleCenterOpen>
1 : Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnTranslateProfileID>
1 : Codeunit<Application Area Mgmt.>.PROCEDURE<OnBeforeLookupExperienceTier>
1 : Codeunit<Application Area Mgmt.>.PROCEDURE<OnGetBasicExperienceAppAreas>
1 : Codeunit<Application Area Mgmt.>.PROCEDURE<OnGetEssentialExperienceAppAreas>
1 : Codeunit<Application Area Mgmt.>.PROCEDURE<OnGetPremiumExperienceAppAreas>
1 : Codeunit<Application Area Mgmt.>.PROCEDURE<OnSetExperienceTier>
1 : Codeunit<Application Area Mgmt.>.PROCEDURE<OnValidateApplicationAreas>
1 : Codeunit<Application Area Mgmt. Facade>.PROCEDURE<OnBeforeLookupExperienceTier>
1 : Codeunit<Application Area Mgmt. Facade>.PROCEDURE<OnGetBasicExperienceAppAreas>
1 : Codeunit<Application Area Mgmt. Facade>.PROCEDURE<OnGetEssentialExperienceAppAreas>
1 : Codeunit<Application Area Mgmt. Facade>.PROCEDURE<OnGetPremiumExperienceAppAreas>
1 : Codeunit<Application Area Mgmt. Facade>.PROCEDURE<OnSetExperienceTier>
1 : Codeunit<Application Area Mgmt. Facade>.PROCEDURE<OnValidateApplicationAreas>
1 : Codeunit<Purch.-Post + Print>.PROCEDURE<OnAfterConfirmPost>
1 : Codeunit<Purch.-Post + Print>.PROCEDURE<OnAfterPost>
1 : Codeunit<Purch.-Post + Print>.PROCEDURE<OnBeforeConfirmPost>
1 : Codeunit<Purch.-Post + Print>.PROCEDURE<OnBeforeGetReport>
1 : Codeunit<Purch.-Post + Print>.PROCEDURE<OnBeforePrintCrMemo>
1 : Codeunit<Purch.-Post + Print>.PROCEDURE<OnBeforePrintInvoice>
1 : Codeunit<Purch.-Post + Print>.PROCEDURE<OnBeforePrintReceive>
1 : Codeunit<Purch.-Post + Print>.PROCEDURE<OnBeforePrintShip>
1 : Codeunit<Assembly Header-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
1 : Codeunit<Assembly Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
1 : Codeunit<Purch.-Quote to Order (Yes/No)>.PROCEDURE<OnBeforePurchQuoteToOrder>
1 : Codeunit<Blnkt Purch Ord. to Ord. (Y/N)>.PROCEDURE<OnBeforeRun>
1 : Codeunit<Time Sheet Management>.PROCEDURE<OnBeforeToTimeSheetLineInsert>
1 : Codeunit<Time Sheet Management>.PROCEDURE<OnCheckInsertJobPlanningLine>
1 : Codeunit<Time Sheet Approval Management>.PROCEDURE<OnAfterApprove>
1 : Codeunit<Time Sheet Approval Management>.PROCEDURE<OnAfterReject>
1 : Codeunit<Time Sheet Approval Management>.PROCEDURE<OnAfterReopenApproved>
1 : Codeunit<Time Sheet Approval Management>.PROCEDURE<OnAfterReopenSubmitted>
1 : Codeunit<Time Sheet Approval Management>.PROCEDURE<OnAfterSubmit>
1 : Codeunit<Time Sheet Approval Management>.PROCEDURE<OnBeforeInsertEmployeeAbsence>
1 : Codeunit<Mail Management>.PROCEDURE<OnAfterDeleteTempAttachments>
1 : Codeunit<Mail Management>.PROCEDURE<OnAfterGetSenderEmailAddress>
1 : Codeunit<Mail Management>.PROCEDURE<OnBeforeCheckValidEmailAddress>
1 : Codeunit<Mail Management>.PROCEDURE<OnBeforeDoSending>
1 : Codeunit<Mail Management>.PROCEDURE<OnBeforeQualifyFromAddress>
1 : Codeunit<Mail Management>.PROCEDURE<OnBeforeSendMailOnWinClient>
1 : Codeunit<Mail Management>.PROCEDURE<OnBeforeSentViaSMTP>
1 : Codeunit<Purch.-Quote to Order>.PROCEDURE<OnAfterInsertAllPurchOrderLines>
1 : Codeunit<Purch.-Quote to Order>.PROCEDURE<OnAfterInsertPurchOrderLine>
1 : Codeunit<Purch.-Quote to Order>.PROCEDURE<OnAfterRun>
1 : Codeunit<Purch.-Quote to Order>.PROCEDURE<OnBeforeCreatePurchHeader>
1 : Codeunit<Purch.-Quote to Order>.PROCEDURE<OnBeforeDeletePurchQuote>
1 : Codeunit<Purch.-Quote to Order>.PROCEDURE<OnBeforeInsertPurchOrderHeader>
1 : Codeunit<Purch.-Quote to Order>.PROCEDURE<OnBeforeInsertPurchOrderLine>
1 : Codeunit<Purch.-Quote to Order>.PROCEDURE<OnBeforeRun>
1 : Codeunit<Purch.-Quote to Order>.PROCEDURE<OnBeforeTransferQuoteLineToOrderLineLoop>
1 : Codeunit<Document Report Mgt.>.PROCEDURE<OnAfterGetCustomLayoutCode>
1 : Codeunit<Document Report Mgt.>.PROCEDURE<OnAfterMergeWordDocument>
1 : Codeunit<Document Report Mgt.>.PROCEDURE<OnBeforeCalculateUpgradeChangeSetSetCustomReportLayoutFilters>
1 : Codeunit<Document Report Mgt.>.PROCEDURE<OnBeforeMergeDocument>
1 : Codeunit<Document Report Mgt.>.PROCEDURE<OnBeforeMergeWordDocument>
1 : Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnAfterInsertAllPurchOrderLines>
1 : Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnAfterPurchOrderLineInsert>
1 : Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnAfterResetQuantityFields>
1 : Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnAfterRun>
1 : Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnBeforeCreatePurchHeader>
1 : Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnBeforeInsertPurchOrderHeader>
1 : Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnBeforeInsertPurchOrderLine>
1 : Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnBeforePurchOrderHeaderModify>
1 : Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnBeforeRun>
1 : Codeunit<Purchase Post via Job Queue>.PROCEDURE<OnBeforeEnqueuePurchDoc>
1 : Codeunit<Purchase Post via Job Queue>.PROCEDURE<OnBeforeReleasePurchDoc>
1 : Codeunit<Payment Registration Mgt.>.PROCEDURE<OnAfterPostPaymentRegistration>
1 : Codeunit<Payment Registration Mgt.>.PROCEDURE<OnBeforeGenJournalLineInsert>
1 : Codeunit<Identity Management>.PROCEDURE<OnAfterKeyLenCheck>
4 : Codeunit<Identity Management>.PROCEDURE<OnBeforeGetApplicationIdentifier>
1 : Codeunit<Effective Permissions Mgt.>.PROCEDURE<OnTenantPermissionModified>
1 : Codeunit<Data Upgrade Mgt.>.PROCEDURE<OnCheckPreconditionsPerCompany>
1 : Codeunit<Data Upgrade Mgt.>.PROCEDURE<OnCheckPreconditionsPerDatabase>
1 : Codeunit<Data Upgrade Mgt.>.PROCEDURE<OnIsUpgradeInProgress>
1 : Codeunit<Data Upgrade Mgt.>.PROCEDURE<OnUpgradePerCompany>
1 : Codeunit<Data Upgrade Mgt.>.PROCEDURE<OnUpgradePerDatabase>
1 : Codeunit<Data Upgrade Mgt.>.PROCEDURE<OnValidateUpgradePerCompany>
1 : Codeunit<Data Upgrade Mgt.>.PROCEDURE<OnValidateUpgradePerDatabase>
1 : Codeunit<Check Routing Lines>.PROCEDURE<OnBeforeFindRoutingLines>
1 : Codeunit<Check Routing Lines>.PROCEDURE<OnCalculateOnAfterCalcScrapQtyAndFactor>
1 : Codeunit<Routing Line-Copy Lines>.PROCEDURE<OnAfterCopyRouting>
1 : Codeunit<Routing Line-Copy Lines>.PROCEDURE<OnAfterDeleteRouting>
1 : Codeunit<Routing Line-Copy Lines>.PROCEDURE<OnCopyRountingOnAfterRoutingLineInsert>
1 : Codeunit<CalendarManagement>.PROCEDURE<OnBeforeCalculateSchedule>
1 : Codeunit<CalendarManagement>.PROCEDURE<OnCalculateScheduleOnBeforeProcessShopCalendar>
1 : Codeunit<CalendarManagement>.PROCEDURE<OnCalculateScheduleOnSetShopCalendarFilters>
1 : Codeunit<Calendar Absence Management>.PROCEDURE<OnAfterUpdateAbsence>
1 : Codeunit<Production BOM-Copy>.PROCEDURE<OnAfterInsertProdBOMComponent>
1 : Codeunit<Production BOM-Copy>.PROCEDURE<OnBeforeCopyBOM>
1 : Codeunit<Production BOM-Copy>.PROCEDURE<OnBeforeInsertProdBOMComponent>
1 : Codeunit<Production BOM-Check>.PROCEDURE<OnAfterCode>
1 : Codeunit<Production BOM-Check>.PROCEDURE<OnAfterProdBomLineCheck>
1 : Codeunit<Where-Used Management>.PROCEDURE<OnBeforeWhereUsedListInsert>
1 : Codeunit<Where-Used Management>.PROCEDURE<OnBuildWhereUsedListOnLoopProdBomComponent>
1 : Codeunit<BOM Matrix Management>.PROCEDURE<OnBuildMatrixForItemOnAfterGetItem>
1 : Codeunit<BOM Matrix Management>.PROCEDURE<OnBuildMatrixForItemOnBeforeComponentListFind>
1 : Codeunit<BOM Matrix Management>.PROCEDURE<OnBuildMatrixForItemOnBeforeRecursion>
1 : Codeunit<Prod. Order Route Management>.PROCEDURE<OnBeforeCalcPreviousOperations>
1 : Codeunit<Prod. Order Route Management>.PROCEDURE<OnBeforeSetNextOperations>
1 : Codeunit<Prod. Order Route Management>.PROCEDURE<OnBeforeUpdateComponentsBin>
1 : Codeunit<Prod. Order Route Management>.PROCEDURE<OnCalculateOnAfterCalcScrapQtyAndFactor>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterInsertProdRoutingLine>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterProdOrderCompFilter>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterTransferBOM>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterTransferBOMComponent>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterTransferRouting>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterTransferRoutingLine>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterTransferTaskInfo>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnBeforeCalculate>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnBeforeCalculateProdOrderDates>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnBeforeCopyProdBOMComments>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnBeforeProdOrderCompModify>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnBeforeTransferBOM>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnBeforeTransferBOMComponent>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnBeforeTransferRouting>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnBeforeUpdateProdOrderDates>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnCalculateComponentsOnBeforeUpdateRoutingLinkCode>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnCalculateOnBeforeCheckNextOperation>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnCalculateOnBeforeCheckPrevOperation>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnCalculateProdOrderDatesOnAfterSetFilters>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnCalculateProdOrderDatesOnSetBeforeDueDate>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnTransferBOMOnAfterCalcReqQty>
1 : Codeunit<Calculate Prod. Order>.PROCEDURE<OnTransferBOMOnAfterSetFiltersProdBOMLine>
1 : Codeunit<Calculate Routing Line>.PROCEDURE<OnAfterCalculateRoutingLine>
1 : Codeunit<Calculate Routing Line>.PROCEDURE<OnBeforeCalcExpectedCost>
1 : Codeunit<Calculate Routing Line>.PROCEDURE<OnBeforeScheduleRoutingLine>
1 : Codeunit<Calculate Routing Line>.PROCEDURE<OnCalculateRoutingLineOnAfterProdOrderLineSetFilters>
1 : Codeunit<Calculate Routing Line>.PROCEDURE<OnCalculateRoutingLineOnBeforeCalcExpectedOperOutput>
1 : Codeunit<OrderTrackingManagement>.PROCEDURE<OnAfterInsertTrackingEntry>
1 : Codeunit<OrderTrackingManagement>.PROCEDURE<OnBeforeTempOrderTrackingEntryInsert>
1 : Codeunit<OrderTrackingManagement>.PROCEDURE<OnDrillOrdersUpCaseElse>
1 : Codeunit<OrderTrackingManagement>.PROCEDURE<OnInsertOrderTrackingEntry>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnAfterInitProdOrderLine>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnAfterProcessProdOrderLine>
2 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnAfterProdOrderLineInsert>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnAfterReserveMultiLevelStructureComp>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnAfterUpdateProdOrderLine>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnBeforeCopyFromSalesOrder>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnBeforeInsertProdOrderLine>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnBeforeProcessProdOrderLine>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnBeforeProdOrderLine3Modify>
2 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnBeforeProdOrderLineInsert>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnBeforeReserveMultiLevelStructureComp>
2 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCheckMakeOrderLineBeforeIf>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCheckMakeOrderLineBeforeInsert>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCheckMakeOrderLineOnAfterUpdateProdOrderLine>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCopyFromFamilyOnAfterInsertProdOrderLine>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCopyFromFamilyOnBeforeInsertProdOrderLine>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCopyFromSalesOrderOnBeforeProdOrderLineModify>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCopyFromSalesOrderOnBeforeSalesPlanLineInsert>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnInitProdOrderLineAfterScrap>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnInitProdOrderLineAfterVariantCode>
1 : Codeunit<Create Prod. Order Lines>.PROCEDURE<OnInitProdOrderLineBeforeAssignItemNo>
1 : Codeunit<Create Prod. Order from Sale>.PROCEDURE<OnAfterCreateProdOrder>
1 : Codeunit<Create Prod. Order from Sale>.PROCEDURE<OnAfterCreateProdOrderFromSalesLine>
1 : Codeunit<Create Prod. Order from Sale>.PROCEDURE<OnBeforeCreateProdOrderLines>
1 : Codeunit<Calculate Low-Level Code>.PROCEDURE<OnAfterCalcLevels>
1 : Codeunit<Calculate Low-Level Code>.PROCEDURE<OnBeforeItemModify>
1 : Codeunit<Calculate Low-Level Code>.PROCEDURE<OnCalcLevelsForProdBOM>
1 : Codeunit<Planning Line Management>.PROCEDURE<OnAfterInsertPlanningLine>
1 : Codeunit<Planning Line Management>.PROCEDURE<OnAfterIsPlannedAsmCompFound>
1 : Codeunit<Planning Line Management>.PROCEDURE<OnAfterIsPlannedCompFound>
1 : Codeunit<Planning Line Management>.PROCEDURE<OnAfterTransferRouting>
1 : Codeunit<Planning Line Management>.PROCEDURE<OnAfterTransferRtngLine>
1 : Codeunit<Planning Line Management>.PROCEDURE<OnBeforeCalculate>
1 : Codeunit<Planning Line Management>.PROCEDURE<OnBeforeInsertAsmPlanningComponent>
1 : Codeunit<Planning Line Management>.PROCEDURE<OnBeforeInsertPlanningComponent>
1 : Codeunit<Planning Line Management>.PROCEDURE<OnBeforeModifyPlanningComponent>
1 : Codeunit<Planning Line Management>.PROCEDURE<OnBeforeTransferRouting>
1 : Codeunit<Planning Line Management>.PROCEDURE<OnCalculateOnBeforeTransferBOM>
1 : Codeunit<Planning Line Management>.PROCEDURE<OnCheckMultiLevelStructureOnBeforeInsertPlanningLine>
1 : Codeunit<Planning Line Management>.PROCEDURE<OnTransferBOMOnAfterProdBOMLineSetFilters>
1 : Codeunit<Planning Line Management>.PROCEDURE<OnTransferBOMOnBeforeGetDefaultBin>
1 : Codeunit<Planning Line Management>.PROCEDURE<OnTransferBOMOnBeforeTransferPlanningComponent>
1 : Codeunit<Planning Line Management>.PROCEDURE<OnTransferBOMOnBeforeUpdatePlanningComp>
1 : Codeunit<Calculate Planning Route Line>.PROCEDURE<OnBeforeCalculateRouteLine>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnAfterCarryOutToReqWksh>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnAfterDeleteOrderLines>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnAfterInsertAsmHeader>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnAfterInsertProdOrder>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnAfterInsertProdOrderLine>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnAfterProdOrderChgAndReshedule>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnAfterProdOrderRtngLineInsert>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnAfterTransferAsmPlanningComp>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnAfterTransferPlanningComp>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnAfterTransferPlanningRtngLine>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnAfterTransLineInsert>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnAsmOrderChgAndResheduleOnBeforeAsmHeaderModify>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnBeforeDeleteOrderLines>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnBeforePrintPurchaseOrder>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnBeforeTransHeaderInsert>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnCarryOutToReqWkshOnAfterPlanningCompInsert>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnCarryOutToReqWkshOnAfterPlanningRoutingLineInsert>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnInsertProdOrderLineOnAfterTransferRouting>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnInsertProdOrderLineWithReqLine>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnInsertProdOrderWithReqLine>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnInsertTransLineWithReqLine>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnProdOrderChgAndResheduleOnAfterValidateQuantity>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnProdOrderChgAndResheduleOnBeforeProdOrderModify>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnPurchOrderChgAndResheduleOnBeforePurchLineModify>
1 : Codeunit<Carry Out Action>.PROCEDURE<OnTransOrderChgAndResheduleOnBeforeTransLineModify>
1 : Codeunit<Reservation-Check Date Confl.>.PROCEDURE<OnUpdateDateFilterReservEntryLoop>
1 : Codeunit<Create Reserv. Entry>.PROCEDURE<OnAfterCheckValidity>
1 : Codeunit<Create Reserv. Entry>.PROCEDURE<OnAfterCopyFromInsertReservEntry>
1 : Codeunit<Create Reserv. Entry>.PROCEDURE<OnAfterReservEntryInsertNonSurplus>
1 : Codeunit<Create Reserv. Entry>.PROCEDURE<OnAfterSignFactor>
1 : Codeunit<Create Reserv. Entry>.PROCEDURE<OnBeforeCreateRemainingNonSurplusReservEntry>
1 : Codeunit<Create Reserv. Entry>.PROCEDURE<OnBeforeCreateRemainingReservEntry>
1 : Codeunit<Create Reserv. Entry>.PROCEDURE<OnBeforeReservEntryInsert>
1 : Codeunit<Create Reserv. Entry>.PROCEDURE<OnBeforeReservEntryInsertNonSurplus>
1 : Codeunit<Create Reserv. Entry>.PROCEDURE<OnBeforeSplitNonSurplusReservEntry>
1 : Codeunit<Create Reserv. Entry>.PROCEDURE<OnBeforeSplitReservEntry>
1 : Codeunit<Create Reserv. Entry>.PROCEDURE<OnBeforeUseOldReservEntry>
1 : Codeunit<Create Reserv. Entry>.PROCEDURE<OnCreateEntryOnBeforeSurplusCondition>
1 : Codeunit<Create Reserv. Entry>.PROCEDURE<OnTransferReservEntryOnBeforeUpdateItemTracking>
1 : Codeunit<Reservation Engine Mgt.>.PROCEDURE<OnAfterCreateText>
1 : Codeunit<Reservation Engine Mgt.>.PROCEDURE<OnAfterModifyShipmentDate>
1 : Codeunit<Reservation Engine Mgt.>.PROCEDURE<OnAfterSetItemTracking2>
2 : Codeunit<Reservation Engine Mgt.>.PROCEDURE<OnBeforeUpdateItemTracking>
1 : Codeunit<Sales Line-Reserve>.PROCEDURE<OnAfterReservQuantity>
1 : Codeunit<Sales Line-Reserve>.PROCEDURE<OnBeforeDeleteLine>
1 : Codeunit<Sales Line-Reserve>.PROCEDURE<OnTestSalesLineModificationOnBeforeTestJobNo>
1 : Codeunit<Sales Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
1 : Codeunit<Req. Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
1 : Codeunit<Purch. Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
1 : Codeunit<Item Jnl. Line-Reserve>.PROCEDURE<OnBeforeVerifyQuantity>
1 : Codeunit<Item Jnl. Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
2 : Codeunit<Transfer Line-Reserve>.PROCEDURE<OnAfterCallItemTracking>
1 : Codeunit<Transfer Line-Reserve>.PROCEDURE<OnBeforeVerifyReserved>
1 : Codeunit<Transfer Line-Reserve>.PROCEDURE<OnTransferTransferToItemJnlLineTransferFields>
1 : Codeunit<Transfer Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
1 : Codeunit<Prod. Order Line-Reserve>.PROCEDURE<OnAfterCallItemTracking>
1 : Codeunit<Prod. Order Line-Reserve>.PROCEDURE<OnBeforeTransferPOLineToPOLine>
1 : Codeunit<Prod. Order Line-Reserve>.PROCEDURE<OnDeleteLineOnAfterDeleteReservEntries>
1 : Codeunit<Prod. Order Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
1 : Codeunit<Prod. Order Comp.-Reserve>.PROCEDURE<OnAfterCallItemTracking>
1 : Codeunit<Prod. Order Comp.-Reserve>.PROCEDURE<OnBeforeTransferPOCompToPOComp>
1 : Codeunit<Prod. Order Comp.-Reserve>.PROCEDURE<OnDeleteLineOnAfterDeleteReservEntries>
1 : Codeunit<Prod. Order Comp.-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
1 : Codeunit<Plng. Component-Reserve>.PROCEDURE<OnAfterCallItemTracking>
1 : Codeunit<Plng. Component-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
1 : Codeunit<Service Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
1 : Codeunit<Job Jnl. Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
1 : Codeunit<Reservation Management>.PROCEDURE<OnAfterAutoReserve>
1 : Codeunit<Reservation Management>.PROCEDURE<OnAfterCalcReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnAfterInitFilter>
1 : Codeunit<Reservation Management>.PROCEDURE<OnAfterSetValueArray>
1 : Codeunit<Reservation Management>.PROCEDURE<OnAutoReserveItemLedgEntryOnFindFirstItemLedgEntry>
1 : Codeunit<Reservation Management>.PROCEDURE<OnAutoReserveItemLedgEntryOnFindNextItemLedgEntry>
1 : Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveAssemblyHeader>
1 : Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveAssemblyLine>
1 : Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveItemLedgEntry>
1 : Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveJobPlanningLine>
1 : Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveProdOrderComp>
1 : Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveProdOrderLine>
1 : Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReservePurchLine>
1 : Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveSalesLine>
1 : Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveServLine>
1 : Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveTransLine>
1 : Codeunit<Reservation Management>.PROCEDURE<OnBeforeCreateReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnBeforeDeleteDocumentReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnBeforeUpdateItemLedgEntryStats>
1 : Codeunit<Reservation Management>.PROCEDURE<OnGetSourceRecordValue>
1 : Codeunit<Reservation Management>.PROCEDURE<OnLookupDocument>
1 : Codeunit<Reservation Management>.PROCEDURE<OnLookupLine>
1 : Codeunit<Reservation Management>.PROCEDURE<OnSetAssemblyHeaderOnBeforeUpdateReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnSetAssemblyLineOnBeforeUpdateReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnSetItemJnlLineOnBeforeUpdateReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnSetItemLedgEntryOnBeforeUpdateReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnSetJobJnlLineOnBeforeUpdateReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnSetJobPlanningLineOnBeforeUpdateReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnSetPlanningCompOnBeforeUpdateReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnSetProdOrderCompOnBeforeUpdateReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnSetProdOrderLineOnBeforeUpdateReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnSetPurchLineOnBeforeUpdateReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnSetReqLineOnBeforeUpdateReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnSetSalesLineOnBeforeUpdateReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnSetServLineOnBeforeUpdateReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnSetTransLineOnBeforeUpdateReservation>
1 : Codeunit<Reservation Management>.PROCEDURE<OnUpdateItemLedgEntryStatsUpdateTotals>
1 : Codeunit<Reservation Management>.PROCEDURE<OnUpdateItemTrackingLineStatsOnBeforeReservEntrySummaryInsert>
1 : Codeunit<Calc. Low-level code>.PROCEDURE<OnAfterFindTopLevel>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterCalculatePlanFromWorksheet>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterDemandToInvProfile>
2 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterFindLinesWithItemToPlan>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterGetRoutingFromProdOrder>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterInsertSafetyStockDemands>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterPlanItemNextStateCloseDemand>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterPostInvChgReminder>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterPrePlanDateSupplyProc>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterRecalculateReqLine>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterSetOrderPriority>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterShouldDeleteReservEntry>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterSupplyToInvProfile>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterTransferAttributes>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterTransToChildInvProfile>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforeAdjustPlanLine>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforeBlanketOrderConsumpFind>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforeCalculatePlanFromWorksheet>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforeCheckScheduleOut>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforeCommonBalancing>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforeDemandInvtProfileInsert>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforeDemandToInvProfile>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforeMaintainProjectedInventory>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforeMatchAttributesDemandApplicationLoop>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforePlanStepSettingOnStartOver>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforePostInvChgReminder>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforePrePlanDateApplicationLoop>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforePrePlanDateDemandProc>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforePrePlanDateSupplyProc>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforeSupplyToInvProfile>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnCalculatePlanFromWorksheetOnAfterForecastConsumption>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnCalculatePlanFromWorksheetOnAfterPlanItem>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnEndMatchAttributesDemandApplicationLoop>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnEndOfPrePlanDateApplicationLoop>
2 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnFindCombinationAfterAssignTempSKU>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnFindReplishmentLocationOnBeforeFindSKU>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnForecastConsumptionOnBeforeFindDemandInvtProfile>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnMaintainPlanningLineOnAfterLineCreated>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnMaintainPlanningLineOnAfterReqLineInsert>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnMaintainPlanningLineOnBeforeAdjustPlanLine>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnMaintainPlanningLineOnBeforeReqLineInsert>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnMaintainPlanningLineOnBeforeSupplyInvtProfileInsert>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnPlanItemOnBeforeSumDemandInvtProfile>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnPlanItemOnBeforeSumSupplyInvtProfile>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnStartOfMatchAttributesDemandApplicationLoop>
1 : Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnStartOfPrePlanDateApplicationLoop>
1 : Codeunit<Capable to Promise>.PROCEDURE<OnBeforeReqLineInsert>
1 : Codeunit<AvailabilityManagement>.PROCEDURE<OnAfterCaseCalcCapableToPromise>
1 : Codeunit<AvailabilityManagement>.PROCEDURE<OnAfterUpdateSourceLine>
1 : Codeunit<AvailabilityManagement>.PROCEDURE<OnBeforeOrderPromisingLineInsert>
1 : Codeunit<AvailabilityManagement>.PROCEDURE<OnCreateReservationsAfterFirstCASE>
1 : Codeunit<AvailabilityManagement>.PROCEDURE<OnCreateReservationsAfterSecondCASE>
1 : Codeunit<Upgrade Tag Mgt>.PROCEDURE<OnGetPerCompanyUpgradeTags>
1 : Codeunit<Upgrade Tag Mgt>.PROCEDURE<OnGetPerDatabaseUpgradeTags>
1 : Page<Available - Job Planning Lines>.PROCEDURE<OnAfterSetFilters>
1 : Page<Available - Job Planning Lines>.PROCEDURE<OnAfterUpdateReservFrom>
1 : Page<Available - Job Planning Lines>.PROCEDURE<OnAfterUpdateReservMgt>
1 : Page<Company Detail>.PROCEDURE<OnGoToCompany>
1 : Page<Document Attachment Details>.PROCEDURE<OnAfterOpenForRecRef>
1 : Page<Document Attachment Factbox>.PROCEDURE<OnBeforeDrillDown>
1 : Page<Data Privacy Wizard>.PROCEDURE<OnDrillDownForEntityNumber>
1 : Page<Data Privacy Wizard>.PROCEDURE<OnEntityNoValidate>
1 : Page<Create Payment>.PROCEDURE<OnBeforeUpdateGnlJnlLineDimensionsFromTempBuffer>
1 : Page<Create Payment>.PROCEDURE<OnUpdateTempBufferFromVendorLedgerEntry>
1 : Page<Payment Reconciliation Journal>.PROCEDURE<OnAfterImportBankTransactions>
6 : Page<Payment Reconciliation Journal>.PROCEDURE<OnAfterValidateShortcutDimCode>
1 : Page<Payment Reconciliation Journal>.PROCEDURE<OnAtActionApplyAutomatically>
1 : Page<Payment Reconciliation Journal>.PROCEDURE<OnUpdateSorting>
1 : Page<Payment Application>.PROCEDURE<OnSetBankAccReconcLine>
1 : Page<Help And Chart Wrapper>.PROCEDURE<OnBeforeInitializeSelectedChart>
1 : Page<Headline RC Business Manager>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
1 : Page<Headline RC Order Processor>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
1 : Page<Headline RC Accountant>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
1 : Page<Headline RC Project Manager>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
1 : Page<Headline RC Relationship Mgt.>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
1 : Page<Headline RC Administrator>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
1 : Page<Headline RC Team Member>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
1 : Page<Headline RC Prod. Planner>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
1 : Page<Headline RC Serv. Dispatcher>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
1 : Page<Headline RC Security Admin>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
1 : Page<Headline RC Whse. Basic>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
1 : Page<Headline RC Whse. WMS>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
1 : Page<Headline RC Whse. Worker WMS>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
1 : Page<My Notifications>.PROCEDURE<OnAfterInitializingNotificationWithDefaultState>
2 : Page<My Notifications>.PROCEDURE<OnInitializingNotificationWithDefaultState>
1 : Page<Sales Statistics>.PROCEDURE<OnAfterCalculateTotals>
1 : Page<Sales Statistics>.PROCEDURE<OnOpenPageOnBeforeSetEditable>
1 : Page<Purchase Statistics>.PROCEDURE<OnAfterCalculateTotals>
1 : Page<Purchase Statistics>.PROCEDURE<OnOpenPageOnBeforeSetEditable>
1 : Page<Office Suggested Line Items>.PROCEDURE<OnDisableMessage>
1 : Page<Payroll Import Transactions>.PROCEDURE<OnCreateSampleFile>
1 : Page<Payroll Import Transactions>.PROCEDURE<OnImportPayrollTransactions>
1 : Page<Reverse Entries>.PROCEDURE<OnBeforeGetEntryTypeText>
1 : Page<Data Migration Overview>.PROCEDURE<OnRequestAbort>
1 : Page<Incoming Document>.PROCEDURE<OnCloseIncomingDocumentFromAction>
1 : Page<Incoming Doc. Attach. FactBox>.PROCEDURE<OnAfterLoadDataFromRecord>
1 : Page<O365 Import Export Settings>.PROCEDURE<OnInsertMenuItems>
1 : Page<Apply Customer Entries>.PROCEDURE<OnAfterCalcApplnAmount>
1 : Page<Apply Customer Entries>.PROCEDURE<OnAfterCalcApplnAmountToApply>
1 : Page<Apply Customer Entries>.PROCEDURE<OnAfterCalcApplnRemainingAmount>
1 : Page<Apply Customer Entries>.PROCEDURE<OnAfterExchangeAmountsOnLedgerEntry>
1 : Page<Apply Customer Entries>.PROCEDURE<OnBeforeCalcApplnAmount>
2 : Page<Apply Customer Entries>.PROCEDURE<OnBeforeEarlierPostingDateError>
1 : Page<Apply Customer Entries>.PROCEDURE<OnBeforeHandledChosenEntries>
1 : Page<Apply Customer Entries>.PROCEDURE<OnBeforeSetApplyingCustLedgEntry>
1 : Page<Apply Vendor Entries>.PROCEDURE<OnAfterCalcApplnAmount>
1 : Page<Apply Vendor Entries>.PROCEDURE<OnAfterCalcApplnAmountToApply>
1 : Page<Apply Vendor Entries>.PROCEDURE<OnAfterCalcApplnRemainingAmount>
1 : Page<Apply Vendor Entries>.PROCEDURE<OnAfterExchangeAmountsOnLedgerEntry>
1 : Page<Apply Vendor Entries>.PROCEDURE<OnBeforeCalcApplnAmount>
2 : Page<Apply Vendor Entries>.PROCEDURE<OnBeforeEarlierPostingDateError>
1 : Page<Apply Vendor Entries>.PROCEDURE<OnBeforeHandledChosenEntries>
1 : Page<Apply Vendor Entries>.PROCEDURE<OnBeforeSetApplyingVendLedgEntry>
1 : Page<BC O365 No. Series Card>.PROCEDURE<OnAfterNoSeriesModified>
1 : Page<BC O365 Quickbooks Settings>.PROCEDURE<OnQuickBooksDesktopSyncClicked>
1 : Page<BC O365 Quickbooks Settings>.PROCEDURE<OnQuickBooksOnlineSyncClicked>
6 : Page<Sales Journal>.PROCEDURE<OnAfterValidateShortcutDimCode>
6 : Page<Purchase Journal>.PROCEDURE<OnAfterValidateShortcutDimCode>
1 : Page<Vendor Card>.PROCEDURE<OnBeforeCreateVendorFromTemplate>
6 : Page<Recurring General Journal>.PROCEDURE<OnAfterValidateShortcutDimCode>
1 : Page<Check Credit Limit>.PROCEDURE<OnAfterCalcCreditLimitLCY>
1 : Page<Reconciliation>.PROCEDURE<OnBeforeGLAccNetChangeInsert>
1 : Page<G/L Acc. Balance/Budget Lines>.PROCEDURE<OnAfterCalcFormFields>
1 : Page<Item Availability Lines>.PROCEDURE<OnAfterSet>
1 : Page<Item Availability Lines>.PROCEDURE<OnAfterSetItemFilter>
1 : Page<Res. Availability Lines>.PROCEDURE<OnAfterCalcLine>
1 : Page<Res. Gr. Availability Lines>.PROCEDURE<OnAfterCalcLine>
6 : Page<General Journal>.PROCEDURE<OnAfterValidateShortcutDimCode>
1 : Page<Sales Order Statistics>.PROCEDURE<OnOpenPageOnBeforeSetEditable>
1 : Page<Purchase Order Statistics>.PROCEDURE<OnOpenPageOnBeforeSetEditable>
1 : Page<G/L Balance by Dimension>.PROCEDURE<OnBeforeGLAccFilter>
1 : Page<Sales Quote>.PROCEDURE<OnBeforeStatisticsAction>
1 : Page<G/L Account Balance Lines>.PROCEDURE<OnBeforeBalanceDrillDown>
1 : Page<Sales Order>.PROCEDURE<OnBeforeStatisticsAction>
1 : Page<Sales Order>.PROCEDURE<OnPostOnAfterSetDocumentIsPosted>
1 : Page<Sales Invoice>.PROCEDURE<OnBeforeStatisticsAction>
1 : Page<Sales Invoice>.PROCEDURE<OnPostOnAfterSetDocumentIsPosted>
1 : Page<Reminder Lines>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Sales Credit Memo>.PROCEDURE<OnBeforeStatisticsAction>
1 : Page<Sales Credit Memo>.PROCEDURE<OnPostOnAfterSetDocumentIsPosted>
1 : Page<Finance Charge Memo Lines>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Sales Order Subform>.PROCEDURE<OnAfterQuantityOnAfterValidate>
1 : Page<Sales Order Subform>.PROCEDURE<OnAfterValidateShortcutDimCode>
1 : Page<Sales Order Subform>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Sales Order Subform>.PROCEDURE<OnBeforeSetDefaultType>
1 : Page<Sales Order Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
6 : Page<Sales Invoice Subform>.PROCEDURE<OnAfterValidateShortcutDimCode>
1 : Page<Sales Invoice Subform>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Sales Invoice Subform>.PROCEDURE<OnBeforeSetDefaultType>
1 : Page<Sales Invoice Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
1 : Page<VAT Statement Preview Line>.PROCEDURE<OnBeforeOpenPageVATEntryTotaling>
1 : Page<Purchase Quote>.PROCEDURE<OnAfterCalculateCurrentShippingAndPayToOption>
1 : Page<Acc. Schedule Overview>.PROCEDURE<OnAfterSetDimFilters>
1 : Page<Acc. Schedule Overview>.PROCEDURE<OnAfterValidateCostCenterFilter>
1 : Page<Acc. Schedule Overview>.PROCEDURE<OnAfterValidateCostObjectFilter>
1 : Page<Reservation Entries>.PROCEDURE<OnAfterLookupReserved>
1 : Page<Reservation>.PROCEDURE<OnAfterRelatesToSummEntry>
1 : Page<Reservation>.PROCEDURE<OnAfterSetAssemblyHeader>
1 : Page<Reservation>.PROCEDURE<OnAfterSetAssemblyLine>
1 : Page<Reservation>.PROCEDURE<OnAfterSetItemJnlLine>
1 : Page<Reservation>.PROCEDURE<OnAfterSetJobPlanningLine>
1 : Page<Reservation>.PROCEDURE<OnAfterSetPlanningComponent>
1 : Page<Reservation>.PROCEDURE<OnAfterSetProdOrderComponent>
1 : Page<Reservation>.PROCEDURE<OnAfterSetProdOrderLine>
1 : Page<Reservation>.PROCEDURE<OnAfterSetPurchLine>
1 : Page<Reservation>.PROCEDURE<OnAfterSetReqLine>
1 : Page<Reservation>.PROCEDURE<OnAfterSetSalesLine>
1 : Page<Reservation>.PROCEDURE<OnAfterSetServiceLine>
1 : Page<Reservation>.PROCEDURE<OnAfterSetTransLine>
1 : Page<Reservation>.PROCEDURE<OnAfterUpdateReservFrom>
1 : Page<Reservation>.PROCEDURE<OnFilterReservEntryOnAfterFilterSource>
1 : Page<Reservation>.PROCEDURE<OnGetSerialLotNoOnAfterSetTrackingFields>
1 : Page<Available - Sales Lines>.PROCEDURE<OnAfterSetFilters>
1 : Page<Available - Sales Lines>.PROCEDURE<OnAfterUpdateReservFrom>
1 : Page<Available - Sales Lines>.PROCEDURE<OnAfterUpdateReservMgt>
1 : Page<Purchase Order>.PROCEDURE<OnAfterCalculateCurrentShippingAndPayToOption>
1 : Page<Available - Requisition Lines>.PROCEDURE<OnAfterSetFilters>
1 : Page<Available - Requisition Lines>.PROCEDURE<OnAfterUpdateReservFrom>
1 : Page<Available - Requisition Lines>.PROCEDURE<OnAfterUpdateReservMgt>
1 : Page<Available - Purchase Lines>.PROCEDURE<OnAfterOpenPage>
1 : Page<Available - Purchase Lines>.PROCEDURE<OnAfterUpdateReservFrom>
1 : Page<Available - Purchase Lines>.PROCEDURE<OnAfterUpdateReservMgt>
1 : Page<Available - Purchase Lines>.PROCEDURE<OnBeforeFilterReservEntry>
1 : Page<Available - Item Ledg. Entries>.PROCEDURE<OnAfterSetFilters>
1 : Page<Available - Item Ledg. Entries>.PROCEDURE<OnAfterUpdateReservFrom>
1 : Page<Available - Item Ledg. Entries>.PROCEDURE<OnAfterUpdateReservMgt>
1 : Page<Available - Item Ledg. Entries>.PROCEDURE<OnBeforeCreateReservation>
1 : Page<Contact Card>.PROCEDURE<OnBeforePrintContactCoverSheet>
1 : Page<Blanket Sales Order>.PROCEDURE<OnBeforeStatisticsAction>
1 : Page<Create Interaction>.PROCEDURE<OnAfterCaption>
1 : Page<Blanket Sales Order Subform>.PROCEDURE<OnAfterValidateShortcutDimCode>
1 : Page<Blanket Sales Order Subform>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Blanket Sales Order Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
1 : Page<Marketing Setup>.PROCEDURE<OnAfterMarketingSetupEmailLoggingCompleted>
5 : Page<Marketing Setup>.PROCEDURE<OnAfterMarketingSetupEmailLoggingUsed>
1 : Page<Purchase Invoice>.PROCEDURE<OnAfterCalculateCurrentShippingAndPayToOption>
6 : Page<Blanket Purchase Order Subform>.PROCEDURE<OnAfterValidateShortcutDimCode>
1 : Page<Blanket Purchase Order Subform>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Blanket Purchase Order Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
1 : Page<Contact Profile Answers>.PROCEDURE<OnAfterUpdateProfileAnswer>
6 : Page<Purchase Order Subform>.PROCEDURE<OnAfterValidateShortcutDimCode>
1 : Page<Purchase Order Subform>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Purchase Order Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
1 : Page<Prod. Order Line List>.PROCEDURE<OnAfterShowDocument>
2 : Page<Default Dimensions-Multiple>.PROCEDURE<OnBeforeSetCommonDefaultCopyFields>
6 : Page<Purch. Invoice Subform>.PROCEDURE<OnAfterValidateShortcutDimCode>
1 : Page<Purch. Invoice Subform>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Purch. Invoice Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
1 : Page<Production Journal>.PROCEDURE<OnAfterSetFilterGroup>
6 : Page<Production Journal>.PROCEDURE<OnAfterValidateShortcutDimCode>
1 : Page<VAT Rate Change Log Entries>.PROCEDURE<OnAfterShow>
6 : Page<Fixed Asset G/L Journal>.PROCEDURE<OnAfterValidateShortcutDimCode>
6 : Page<Fixed Asset Journal>.PROCEDURE<OnAfterValidateShortcutDimCode>
6 : Page<Recurring Fixed Asset Journal>.PROCEDURE<OnAfterValidateShortcutDimCode>
6 : Page<Insurance Journal>.PROCEDURE<OnAfterValidateShortcutDimCode>
1 : Page<Transfer Route Specification>.PROCEDURE<OnBeforeClosePage>
6 : Page<Revaluation Journal>.PROCEDURE<OnAfterValidateShortcutDimCode>
1 : Page<Item Charge Assignment (Sales)>.PROCEDURE<OnUpdateQtyAssgntOnAfterAssignableQty>
1 : Page<Sales Shipment Lines>.PROCEDURE<OnAfterSetFilters>
1 : Page<Posted Sales Document Lines>.PROCEDURE<OnBeforeCopyLineToDoc>
1 : Page<Posted Purchase Document Lines>.PROCEDURE<OnBeforeCopyLineToDoc>
1 : Page<BOM Structure>.PROCEDURE<OnRefreshPageOnBeforeRaiseError>
1 : Page<Service Lines>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Service Lines>.PROCEDURE<OnBeforeSetSelectionFilter>
1 : Page<Service Item Worksheet Subform>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Service Invoice Subform>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Service Credit Memo Subform>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Service Quote Lines>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Available - Service Lines>.PROCEDURE<OnAfterSetFilters>
1 : Page<Available - Service Lines>.PROCEDURE<OnAfterUpdateReservFrom>
1 : Page<Available - Service Lines>.PROCEDURE<OnAfterUpdateReservMgt>
1 : Page<Res. Availability Lines (SM)>.PROCEDURE<OnAfterCapacityOnDrillDown>
1 : Page<Res.Gr Availability Lines (SM)>.PROCEDURE<OnAfterCapacityOnDrillDown>
6 : Page<IC General Journal>.PROCEDURE<OnAfterValidateShortcutDimCode>
1 : Page<Unapply Customer Entries>.PROCEDURE<OnBeforeRecInsert>
1 : Page<Unapply Customer Entries>.PROCEDURE<OnInsertEntriesOnAfterSetFilters>
1 : Page<Unapply Vendor Entries>.PROCEDURE<OnBeforeRecInsert>
1 : Page<Azure AD Access Dialog>.PROCEDURE<OnOAuthAccessDenied>
1 : Page<Item Tracking Summary>.PROCEDURE<OnAfterSetCurrentBinAndItemTrkgCode>
1 : Page<Item Tracking Summary>.PROCEDURE<OnBeforeAutoSelectTrackingNo>
1 : Page<Item Tracking Lines>.PROCEDURE<OnAddReservEntriesToTempRecSetOnBeforeInsert>
4 : Page<Item Tracking Lines>.PROCEDURE<OnAfterAssignNewTrackingNo>
2 : Page<Item Tracking Lines>.PROCEDURE<OnAfterClearTrackingSpec>
2 : Page<Item Tracking Lines>.PROCEDURE<OnAfterCopyTrackingSpec>
1 : Page<Item Tracking Lines>.PROCEDURE<OnAfterCreateReservEntryFor>
1 : Page<Item Tracking Lines>.PROCEDURE<OnAfterEntriesAreIdentical>
1 : Page<Item Tracking Lines>.PROCEDURE<OnAfterGetHandleSource>
1 : Page<Item Tracking Lines>.PROCEDURE<OnAfterGetInvoiceSource>
1 : Page<Item Tracking Lines>.PROCEDURE<OnAfterMoveFields>
1 : Page<Item Tracking Lines>.PROCEDURE<OnAfterRegisterItemTrackingLines>
1 : Page<Item Tracking Lines>.PROCEDURE<OnAfterSetControls>
1 : Page<Item Tracking Lines>.PROCEDURE<OnAfterSetSourceSpec>
1 : Page<Item Tracking Lines>.PROCEDURE<OnAfterSynchronizeLinkedSources>
1 : Page<Item Tracking Lines>.PROCEDURE<OnBeforeAddToGlobalRecordSet>
1 : Page<Item Tracking Lines>.PROCEDURE<OnBeforeClosePage>
3 : Page<Item Tracking Lines>.PROCEDURE<OnBeforeCollectTempTrackingSpecificationInsert>
1 : Page<Item Tracking Lines>.PROCEDURE<OnBeforeDeleteRecord>
1 : Page<Item Tracking Lines>.PROCEDURE<OnBeforeLotNoAssistEdit>
1 : Page<Item Tracking Lines>.PROCEDURE<OnBeforeSerialNoAssistEdit>
1 : Page<Item Tracking Lines>.PROCEDURE<OnBeforeSerialNoOnAfterValidate>
1 : Page<Item Tracking Lines>.PROCEDURE<OnBeforeSetSecondSourceQuantity>
1 : Page<Item Tracking Lines>.PROCEDURE<OnBeforeSetSourceSpec>
1 : Page<Item Tracking Lines>.PROCEDURE<OnBeforeUpdateUndefinedQty>
1 : Page<Item Tracking Lines>.PROCEDURE<OnBeforeWriteToDatabase>
1 : Page<Item Tracking Lines>.PROCEDURE<OnInsertRecordOnBeforeTempItemTrackLineInsert>
1 : Page<Item Tracking Lines>.PROCEDURE<OnRegisterChangeOnAfterCreateReservEntry>
1 : Page<Item Tracking Lines>.PROCEDURE<OnRegisterChangeOnAfterModify>
3 : Page<Item Tracking Lines>.PROCEDURE<OnSelectEntriesOnAfterTransferFields>
2 : Page<Item Tracking Lines>.PROCEDURE<OnSetQtyToHandleAndInvoiceOnBeforeReservEntryModify>
1 : Page<Item Tracking Lines>.PROCEDURE<OnSetQtyToHandleAndInvoiceOnBeforeTrackingSpecModify>
1 : Page<Item Tracking Lines>.PROCEDURE<OnWriteToDatabaseOnBeforeRegisterDecrease>
1 : Page<Item Tracking Lines>.PROCEDURE<OnWriteToDatabaseOnBeforeRegisterInsert>
1 : Page<Whse. Item Tracking Lines>.PROCEDURE<OnAfterSetSource>
1 : Page<Whse. Item Tracking Lines>.PROCEDURE<OnBeforeItemTrackingLineInsert>
1 : Page<Sales Return Order>.PROCEDURE<OnBeforeStatisticsAction>
6 : Page<Sales Return Order Subform>.PROCEDURE<OnAfterValidateShortcutDimCode>
1 : Page<Sales Return Order Subform>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Sales Return Order Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
6 : Page<Purchase Return Order Subform>.PROCEDURE<OnAfterValidateShortcutDimCode>
1 : Page<Purchase Return Order Subform>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Purchase Return Order Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
1 : Page<Return Shipment Lines>.PROCEDURE<OnOpenPageOnSetFilters>
1 : Page<Job Queue Log Entries>.PROCEDURE<OnShowDetails>
1 : Page<Error Messages>.PROCEDURE<OnDrillDown>
1 : Page<Error Messages>.PROCEDURE<OnOpenRelatedRecord>
1 : Page<VAT Report>.PROCEDURE<OnAfterInitPageControllers>
1 : Page<Item Attribute Value List>.PROCEDURE<OnAfterItemAttributeValueMappingDelete>
1 : Page<Item Attribute Value List>.PROCEDURE<OnBeforeItemAttributeValueMappingModify>
1 : Page<Online Map Address Selector>.PROCEDURE<OnLoadLocationLookupElseCase>
1 : Page<Online Map Address Selector>.PROCEDURE<OnSetTableNoElseCase>
1 : Page<Invite External Accountant>.PROCEDURE<OnInvitationEnd>
1 : Page<Invite External Accountant>.PROCEDURE<OnInvitationNoAADPermissionsFail>
1 : Page<Invite External Accountant>.PROCEDURE<OnInvitationNoExternalAccountantLicenseFail>
1 : Page<Invite External Accountant>.PROCEDURE<OnInvitationNoUserTablePermissionsFail>
1 : Page<Invite External Accountant>.PROCEDURE<OnInvitationStart>
1 : Page<Approval Comments FactBox>.PROCEDURE<OnAfterSetFilterFromApprovalEntry>
1 : Page<My Settings>.PROCEDURE<OnBeforeLanguageChange>
1 : Page<My Settings>.PROCEDURE<OnBeforeWorkdateChange>
1 : Page<My Settings>.PROCEDURE<OnCompanyChange>
1 : Page<My Settings>.PROCEDURE<OnQueryClosePageEvent>
1 : Page<My Settings>.PROCEDURE<OnUserRoleCenterChange>
1 : Page<Budget Matrix>.PROCEDURE<OnAfterSetIncomeBalanceGLAccFilterOnGLAcc>
1 : Page<Resource Alloc. per Job Matrix>.PROCEDURE<OnAfterMatrixOnDrillDown>
1 : Page<Resource Alloc. per Job Matrix>.PROCEDURE<OnMatrixOnAfterGetRecordOnBeforeMatrixRecLoop>
1 : Page<ResGrp. Alloc. per Job Matrix>.PROCEDURE<OnAfterMatrixOnDrillDown>
1 : Page<ResGrp. Alloc. per Job Matrix>.PROCEDURE<OnMatrixOnAfterGetRecordOnBeforeMatrixRecLoop>
1 : Page<Item Statistics Matrix>.PROCEDURE<OnSetFiltersElseCase>
1 : Page<Resource Capacity Matrix>.PROCEDURE<OnAfterMatrixOnDrillDown>
1 : Page<Res. Group Capacity Matrix>.PROCEDURE<OnAfterMatrixOnDrillDown>
1 : Page<Available - Assembly Headers>.PROCEDURE<OnAfterSetFilters>
1 : Page<Available - Assembly Headers>.PROCEDURE<OnAfterUpdateReservFrom>
1 : Page<Available - Assembly Headers>.PROCEDURE<OnAfterUpdateReservMgt>
1 : Page<Available - Assembly Lines>.PROCEDURE<OnAfterSetFilters>
1 : Page<Available - Assembly Lines>.PROCEDURE<OnAfterUpdateReservFrom>
1 : Page<Available - Assembly Lines>.PROCEDURE<OnAfterUpdateReservMgt>
1 : Page<Sales Quote Subform>.PROCEDURE<OnAfterValidateShortcutDimCode>
1 : Page<Sales Quote Subform>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Sales Quote Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
1 : Page<Time Sheet>.PROCEDURE<OnAfterFilterAllLines>
1 : Page<Time Sheet>.PROCEDURE<OnAfterProcess>
1 : Page<Time Sheet>.PROCEDURE<OnProcessOnAfterTimeSheetLinesFiltered>
1 : Page<Manager Time Sheet>.PROCEDURE<OnAfterFilterAllLines>
1 : Page<Manager Time Sheet>.PROCEDURE<OnAfterProcess>
1 : Page<Manager Time Sheet>.PROCEDURE<OnProcessOnAfterTimeSheetLinesFiltered>
1 : Page<Manager Time Sheet by Job>.PROCEDURE<OnAfterFilterAllLines>
1 : Page<Manager Time Sheet by Job>.PROCEDURE<OnAfterProcess>
1 : Page<Manager Time Sheet by Job>.PROCEDURE<OnProcessOnAfterTimeSheetLinesFiltered>
6 : Page<Sales Cr. Memo Subform>.PROCEDURE<OnAfterValidateShortcutDimCode>
1 : Page<Sales Cr. Memo Subform>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Sales Cr. Memo Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
6 : Page<Purchase Quote Subform>.PROCEDURE<OnAfterValidateShortcutDimCode>
1 : Page<Purchase Quote Subform>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Purchase Quote Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
6 : Page<Purch. Cr. Memo Subform>.PROCEDURE<OnAfterValidateShortcutDimCode>
1 : Page<Purch. Cr. Memo Subform>.PROCEDURE<OnBeforeInsertExtendedText>
1 : Page<Purch. Cr. Memo Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
1 : Page<Effective Permissions>.PROCEDURE<OnEffectivePermissionsPopulated>
1 : Page<Production Order Statistics>.PROCEDURE<OnBeforeCalcVariance>
1 : Page<Prod. Order Components>.PROCEDURE<OnBeforeReserveComp>
1 : Page<Change Status on Prod. Order>.PROCEDURE<OnAfterSet>
1 : Page<Sales Order Planning>.PROCEDURE<OnBeforeCreateProdOrder>
1 : Page<Sales Order Planning>.PROCEDURE<OnMakeLinesSetOnAfterSetFilters>
1 : Page<Work Center Load>.PROCEDURE<OnBeforeOpenPage>
1 : Page<Machine Center Load>.PROCEDURE<OnBeforeOpenPage>
1 : Page<Available - Transfer Lines>.PROCEDURE<OnAfterSetFilters>
1 : Page<Available - Transfer Lines>.PROCEDURE<OnAfterUpdateReservFrom>
1 : Page<Available - Transfer Lines>.PROCEDURE<OnAfterUpdateReservMgt>
1 : Page<Available - Prod. Order Lines>.PROCEDURE<OnAfterSetFilters>
1 : Page<Available - Prod. Order Lines>.PROCEDURE<OnAfterUpdateReservFrom>
1 : Page<Available - Prod. Order Lines>.PROCEDURE<OnAfterUpdateReservMgt>
1 : Page<Available - Prod. Order Comp.>.PROCEDURE<OnAfterSetFilters>
1 : Page<Available - Prod. Order Comp.>.PROCEDURE<OnAfterUpdateReservFrom>
1 : Page<Available - Prod. Order Comp.>.PROCEDURE<OnAfterUpdateReservMgt>
1 : Page<Avail. - Planning Components>.PROCEDURE<OnAfterUpdateReservFrom>
1 : Page<Avail. - Planning Components>.PROCEDURE<OnAfterUpdateReservMgt>
1 : Page<Item Availability Line List>.PROCEDURE<OnAfterLookupEntries>
1 : Page<Item Availability Line List>.PROCEDURE<OnAfterMakeEntries>
1 : Page<Item Availability Line List>.PROCEDURE<OnItemCalcFields>
1 : Page<Item Availability Line List>.PROCEDURE<OnItemLedgerEntrySetFilter>
1 : Page<Item Availability Line List>.PROCEDURE<OnItemSetFilter>
1 : Page<Item Availability Line List>.PROCEDURE<OnLookupExtensionTable>
1 : Report<Job Create Sales Invoice>.PROCEDURE<OnAfterPostReport>
1 : Report<Job Create Sales Invoice>.PROCEDURE<OnAfterPreReport>
1 : Report<Job Create Sales Invoice>.PROCEDURE<OnBeforeJobTaskOnAfterGetRecord>
1 : Report<Job Create Sales Invoice>.PROCEDURE<OnBeforePostReport>
1 : Report<Copy Cost Acctg. Budget to G/L>.PROCEDURE<OnAfterUpdateBudgetDimensions>
1 : Report<Post Direct Debit Collection>.PROCEDURE<OnAfterCreateJnlLine>
1 : Report<Standard Sales - Pro Forma Inv>.PROCEDURE<OnAfterLineOnPreDataItem>
1 : Report<Standard Sales - Pro Forma Inv>.PROCEDURE<OnBeforeLineOnAfterGetRecord>
1 : Report<Standard Sales - Draft Invoice>.PROCEDURE<OnAfterSalesPostGetSalesLines>
1 : Report<Standard Sales - Invoice>.PROCEDURE<OnAfterGetSalesHeader>
1 : Report<Standard Sales - Invoice>.PROCEDURE<OnAfterLineOnPreDataItem>
1 : Report<Standard Sales - Invoice>.PROCEDURE<OnBeforeGetDocumentCaption>
1 : Report<Standard Sales - Invoice>.PROCEDURE<OnBeforeLineOnAfterGetRecord>
1 : Report<Notification Email>.PROCEDURE<OnAfterSetReportFieldPlaceholders>
1 : Report<Notification Email>.PROCEDURE<OnBeforeGetDocumentTypeAndNumber>
1 : Report<Notification Email>.PROCEDURE<OnSetReportFieldPlaceholders>
1 : Report<Suggest Bank Acc. Recon. Lines>.PROCEDURE<OnPreDataItemBankAccount>
1 : Report<Send Overdue Appr. Notif.>.PROCEDURE<OnSendOverdueNotifications>
1 : Report<Create Reminders>.PROCEDURE<OnBeforeOnPostReport>
1 : Report<Create Reminders>.PROCEDURE<OnBeforeOnPreReport>
1 : Report<Issue Reminders>.PROCEDURE<OnBeforePrintIssuedReminderHeader>
1 : Report<Issue Finance Charge Memos>.PROCEDURE<OnBeforePrintRecords>
1 : Report<General Journal - Test>.PROCEDURE<OnAfterCheckGenJnlLine>
1 : Report<General Journal - Test>.PROCEDURE<OnAfterCheckGLAcc>
1 : Report<General Journal - Test>.PROCEDURE<OnBeforeGenJournalLineOnAfterGetRecord>
1 : Report<General Journal - Test>.PROCEDURE<OnBeforeWarningIfNegativeAmt>
1 : Report<General Journal - Test>.PROCEDURE<OnBeforeWarningIfPositiveAmt>
1 : Report<Sales Document - Test>.PROCEDURE<OnAfterSalesPostGetSalesLines>
1 : Report<Sales - Quote>.PROCEDURE<OnAfterInitReport>
1 : Report<Sales - Quote>.PROCEDURE<OnAfterPostDataItem>
1 : Report<Order Confirmation>.PROCEDURE<OnAfterInitReport>
1 : Report<Order Confirmation>.PROCEDURE<OnAfterPostDataItem>
1 : Report<Sales - Invoice>.PROCEDURE<OnAfterGetRecordSalesInvoiceHeader>
1 : Report<Sales - Invoice>.PROCEDURE<OnAfterInitReport>
1 : Report<Sales - Invoice>.PROCEDURE<OnAfterPostDataItem>
1 : Report<Sales - Invoice>.PROCEDURE<OnBeforeGetDocumentCaption>
1 : Report<Sales - Invoice>.PROCEDURE<OnGetReferenceText>
1 : Report<Sales - Credit Memo>.PROCEDURE<OnAfterGetRecordSalesCrMemoHeader>
1 : Report<Sales - Credit Memo>.PROCEDURE<OnAfterInitReport>
1 : Report<Sales - Credit Memo>.PROCEDURE<OnAfterPostDataItem>
1 : Report<Sales - Shipment>.PROCEDURE<OnAfterInitReport>
1 : Report<Sales - Shipment>.PROCEDURE<OnAfterPostDataItem>
1 : Report<Sales Reservation Avail.>.PROCEDURE<OnAfterSalesLineModify>
1 : Report<Delete Invd Blnkt Sales Orders>.PROCEDURE<OnBeforeDeleteSalesHeader>
1 : Report<Delete Invd Blnkt Sales Orders>.PROCEDURE<OnBeforeDeleteSalesLines>
1 : Report<Copy Sales Document>.PROCEDURE<OnAfterOpenPage>
1 : Report<Copy Sales Document>.PROCEDURE<OnAfterValidateIncludeHeader>
1 : Report<Copy Sales Document>.PROCEDURE<OnBeforeValidateIncludeHeader>
1 : Report<Copy Sales Document>.PROCEDURE<OnPreReportOnBeforeCopySalesDoc>
1 : Report<Combine Shipments>.PROCEDURE<OnAfterGetRecordSalesOrderHeader>
1 : Report<Combine Shipments>.PROCEDURE<OnAfterInsertSalesInvHeader>
1 : Report<Combine Shipments>.PROCEDURE<OnAfterShouldFinalizeSalesInvHeader>
1 : Report<Combine Shipments>.PROCEDURE<OnBeforeFinalizeSalesInvHeader>
1 : Report<Combine Shipments>.PROCEDURE<OnBeforePostReport>
1 : Report<Combine Shipments>.PROCEDURE<OnBeforePreReport>
1 : Report<Combine Shipments>.PROCEDURE<OnBeforeSalesInvHeaderInsert>
1 : Report<Combine Shipments>.PROCEDURE<OnBeforeSalesInvHeaderModify>
1 : Report<Combine Shipments>.PROCEDURE<OnFinalizeSalesInvHeader>
1 : Report<Combine Shipments>.PROCEDURE<OnFinalizeSalesInvHeaderOnAfterDelete>
1 : Report<Combine Shipments>.PROCEDURE<OnFinalizeSalesInvHeaderOnBeforeDelete>
1 : Report<Combine Shipments>.PROCEDURE<OnSalesOrderHeaderOnPreDataItem>
1 : Report<Delete Invoiced Sales Orders>.PROCEDURE<OnAfterDeleteSalesLine>
1 : Report<Delete Invoiced Sales Orders>.PROCEDURE<OnBeforeDeleteSalesHeader>
1 : Report<Copy Company>.PROCEDURE<OnAfterSetNewNameToNewCompanyInfo>
1 : Report<Suggest Vendor Payments>.PROCEDURE<OnBeforeHandledVendLedgEntry>
1 : Report<Suggest Vendor Payments>.PROCEDURE<OnBeforeUpdateGnlJnlLineDimensionsFromTempBuffer>
1 : Report<Suggest Vendor Payments>.PROCEDURE<OnGetVendLedgEntriesOnBeforeLoop>
1 : Report<Suggest Vendor Payments>.PROCEDURE<OnUpdateTempBufferFromVendorLedgerEntry>
1 : Report<Purchase - Quote>.PROCEDURE<OnAfterInitReport>
1 : Report<Purchase - Quote>.PROCEDURE<OnAfterPostDataItem>
1 : Report<Order>.PROCEDURE<OnAfterInitReport>
1 : Report<Order>.PROCEDURE<OnAfterPostDataItem>
1 : Report<Purchase - Invoice>.PROCEDURE<OnAfterInitReport>
1 : Report<Purchase - Invoice>.PROCEDURE<OnAfterPostDataItem>
1 : Report<Purchase - Credit Memo>.PROCEDURE<OnAfterInitReport>
1 : Report<Purchase - Credit Memo>.PROCEDURE<OnAfterPostDataItem>
1 : Report<Purchase - Receipt>.PROCEDURE<OnAfterInitReport>
1 : Report<Purchase - Receipt>.PROCEDURE<OnAfterPostDataItem>
1 : Report<Purchase Reservation Avail.>.PROCEDURE<OnAfterPurchLineModify>
1 : Report<Delete Invd Blnkt Purch Orders>.PROCEDURE<OnBeforeDeletePurchaseHeader>
1 : Report<Delete Invd Blnkt Purch Orders>.PROCEDURE<OnBeforeDeletePurchLines>
1 : Report<Copy Purchase Document>.PROCEDURE<OnAfterOpenPage>
1 : Report<Copy Purchase Document>.PROCEDURE<OnBeforeValidateIncludeHeader>
1 : Report<Copy Purchase Document>.PROCEDURE<OnPreReportOnBeforeCopyPurchaseDoc>
1 : Report<Carry Out Action Msg. - Req.>.PROCEDURE<OnAfterSetReqWkshLine>
1 : Report<Carry Out Action Msg. - Req.>.PROCEDURE<OnBeforePreReport>
1 : Report<Delete Invoiced Purch. Orders>.PROCEDURE<OnBeforeDeletePurchaseHeader>
1 : Report<Delete Invoiced Purch. Orders>.PROCEDURE<OnBeforePurchLineDelete>
1 : Report<Complete IC Inbox Action>.PROCEDURE<OnAfterMoveICInboxPurchHeaderToHandled>
1 : Report<Complete IC Inbox Action>.PROCEDURE<OnAfterMoveICInboxSalesHeaderToHandled>
1 : Report<Move IC Trans. to Partner Comp>.PROCEDURE<OnBeforeHandledICInboxPurchHdrDelete>
1 : Report<Move IC Trans. to Partner Comp>.PROCEDURE<OnBeforeHandledICInboxPurchLineDelete>
1 : Report<Move IC Trans. to Partner Comp>.PROCEDURE<OnBeforeHandledICInboxSalesHdrDelete>
1 : Report<Move IC Trans. to Partner Comp>.PROCEDURE<OnBeforeHandledICInboxSalesLineDelete>
1 : Report<Move IC Trans. to Partner Comp>.PROCEDURE<OnICInboxTransactionCreated>
1 : Report<Add Contacts>.PROCEDURE<OnBeforeInsertSegmentLine>
1 : Report<Calc. Consumption>.PROCEDURE<OnAfterCreateConsumpJnlLine>
1 : Report<Calc. Consumption>.PROCEDURE<OnAfterInsertItemJnlLine>
1 : Report<Calc. Consumption>.PROCEDURE<OnBeforeCreateConsumpJnlLine>
1 : Report<Calc. Consumption>.PROCEDURE<OnBeforeInsertItemJnlLine>
1 : Report<Get Source Documents>.PROCEDURE<OnAfterCreateRcptHeader>
1 : Report<Get Source Documents>.PROCEDURE<OnAfterCreateShptHeader>
1 : Report<Get Source Documents>.PROCEDURE<OnAfterCreateWhseDocuments>
3 : Report<Get Source Documents>.PROCEDURE<OnAfterProcessDocumentLine>
1 : Report<Get Source Documents>.PROCEDURE<OnAfterPurchaseLineOnPreDataItem>
1 : Report<Get Source Documents>.PROCEDURE<OnAfterSalesHeaderOnAfterGetRecord>
1 : Report<Get Source Documents>.PROCEDURE<OnAfterSalesHeaderOnPreDataItem>
1 : Report<Get Source Documents>.PROCEDURE<OnAfterSalesLineOnPreDataItem>
1 : Report<Get Source Documents>.PROCEDURE<OnAfterServiceLineOnPreDataItem>
1 : Report<Get Source Documents>.PROCEDURE<OnAfterTransferLineOnPreDataItem>
1 : Report<Get Source Documents>.PROCEDURE<OnAfterTransHeaderOnAfterGetRecord>
1 : Report<Get Source Documents>.PROCEDURE<OnAfterWarehouseRequestOnPreDataItem>
1 : Report<Get Source Documents>.PROCEDURE<OnBeforeCreateRcptHeader>
1 : Report<Get Source Documents>.PROCEDURE<OnBeforeCreateShptHeader>
1 : Report<Get Source Documents>.PROCEDURE<OnBeforeCreateWhseDocuments>
1 : Report<Get Source Documents>.PROCEDURE<OnBeforeWarehouseRequestOnAfterGetRecord>
1 : Report<Get Source Documents>.PROCEDURE<OnBeforeWhseShptHeaderInsert>
1 : Report<Get Source Documents>.PROCEDURE<OnSalesLineOnAfterGetRecordOnBeforeCreateRcptHeader>
1 : Report<Get Source Documents>.PROCEDURE<OnSalesLineOnAfterGetRecordOnBeforeCreateShptHeader>
1 : Report<Get Source Documents>.PROCEDURE<OnTransferLineOnAfterGetRecordOnBeforeCreateRcptHeader>
1 : Report<Get Source Documents>.PROCEDURE<OnTransferLineOnAfterGetRecordOnBeforeCreateShptHeader>
1 : Report<Create Pick>.PROCEDURE<OnAfterGetResultMessage>
1 : Report<Create Pick>.PROCEDURE<OnAfterSetQuantityToPick>
1 : Report<Create Pick>.PROCEDURE<OnBeforeCheckPickActivity>
1 : Report<Create Warehouse Location>.PROCEDURE<OnCreateWhseJnlLineOnBeforeCheck>
1 : Report<Calculate Inventory Value>.PROCEDURE<OnAfterInsertItemJnlLine>
1 : Report<Service - Invoice>.PROCEDURE<OnBeforeGetDocumentCaption>
1 : Report<Delete Invoiced Service Orders>.PROCEDURE<OnBeforeDeleteServiceHeader>
1 : Report<Get Item Ledger Entries>.PROCEDURE<OnBeforeInsertItemJnlLine>
1 : Report<Get Item Ledger Entries>.PROCEDURE<OnBeforeInsertJobLedgerLine>
1 : Report<Get Item Ledger Entries>.PROCEDURE<OnBeforeInsertValueEntryLine>
1 : Report<Adjust Exchange Rates>.PROCEDURE<OnAfterInitDtldCustLedgerEntry>
1 : Report<Adjust Exchange Rates>.PROCEDURE<OnAfterInitDtldVendLedgerEntry>
1 : Report<Adjust Exchange Rates>.PROCEDURE<OnBeforeOnInitReport>
1 : Report<Contract Price Update - Test>.PROCEDURE<OnBeforeTempServiceContractLineModify>
1 : Report<Contr. Serv. Orders - Test>.PROCEDURE<OnBeforeFindServiceItemLine>
1 : Report<Batch Post Service Orders>.PROCEDURE<OnAfterPostReport>
1 : Report<Batch Post Service Orders>.PROCEDURE<OnBeforePreReport>
1 : Report<Batch Post Service Invoices>.PROCEDURE<OnAfterPostReport>
1 : Report<Batch Post Service Invoices>.PROCEDURE<OnBeforePreReport>
1 : Report<Batch Post Service Cr. Memos>.PROCEDURE<OnAfterPostReport>
1 : Report<Batch Post Service Cr. Memos>.PROCEDURE<OnBeforePreReport>
1 : Report<Create Contract Invoices>.PROCEDURE<OnAfterServiceContractHeaderOnAfterGetRecord>
1 : Report<Create Contract Invoices>.PROCEDURE<OnAfterServiceContractHeaderOnPostDataItem>
1 : Report<Create Contract Invoices>.PROCEDURE<OnAfterServiceContractHeaderOnPreDataItem>
1 : Report<Create Contract Invoices>.PROCEDURE<OnBeforeServiceContractHeaderOnAfterGetRecord>
1 : Report<Update Contract Prices>.PROCEDURE<OnBeforeServiceContractLineModify>
1 : Report<Create Contract Service Orders>.PROCEDURE<OnAfterInsertServItemLine>
1 : Report<Return Order Confirmation>.PROCEDURE<OnAfterInitReport>
1 : Report<Return Order Confirmation>.PROCEDURE<OnAfterPostDataItem>
1 : Report<Purchase - Return Shipment>.PROCEDURE<OnAfterInitReport>
1 : Report<Purchase - Return Shipment>.PROCEDURE<OnAfterPostDataItem>
1 : Report<Return Order>.PROCEDURE<OnAfterInitReport>
1 : Report<Return Order>.PROCEDURE<OnAfterPostDataItem>
1 : Report<Sales - Return Receipt>.PROCEDURE<OnAfterInitReport>
1 : Report<Sales - Return Receipt>.PROCEDURE<OnAfterPostDataItem>
1 : Report<Delete Invd Sales Ret. Orders>.PROCEDURE<OnBeforeDeleteSalesOrderHeader>
1 : Report<Delete Invd Sales Ret. Orders>.PROCEDURE<OnBeforeDeleteSalesOrderLine>
1 : Report<Combine Return Receipts>.PROCEDURE<OnAfterSalesOrderHeaderOnPreDataItem>
1 : Report<Combine Return Receipts>.PROCEDURE<OnAfterShouldFinalizeSalesInvHeader>
1 : Report<Combine Return Receipts>.PROCEDURE<OnBeforeSalesCrMemoHeaderInsert>
1 : Report<Combine Return Receipts>.PROCEDURE<OnBeforeSalesCrMemoHeaderModify>
1 : Report<Delete Invd Purch. Ret. Orders>.PROCEDURE<OnBeforeDeletePurchaseHeader>
1 : Report<Delete Invd Purch. Ret. Orders>.PROCEDURE<OnBeforePurchLineDelete>
1 : Report<Create Ret.-Related Documents>.PROCEDURE<OnPreReportOnBeforeCopyPurchDoc>
1 : Report<Create Ret.-Related Documents>.PROCEDURE<OnPreReportOnBeforeCopyPurchReturnDoc>
1 : Report<Create Ret.-Related Documents>.PROCEDURE<OnPreReportOnBeforeCopySalesDoc>
1 : Report<Move Negative Purchase Lines>.PROCEDURE<OnBeforePreReport>
1 : Report<Move Negative Sales Lines>.PROCEDURE<OnBeforePreReport>
1 : Report<Get Sales Orders>.PROCEDURE<OnAfterInsertReqWkshLine>
1 : Report<Get Sales Orders>.PROCEDURE<OnBeforeInsertReqWkshLine>
1 : Report<Calculate Plan - Req. Wksh.>.PROCEDURE<OnAfterItemOnPostDataItem>
1 : Report<Calculate Plan - Req. Wksh.>.PROCEDURE<OnAfterItemOnPreDataItem>
1 : Report<Calculate Plan - Req. Wksh.>.PROCEDURE<OnAfterOnOpenPage>
1 : Report<Calculate Plan - Req. Wksh.>.PROCEDURE<OnAfterSkipPlanningForItemOnReqWksh>
1 : Report<Calculate Plan - Req. Wksh.>.PROCEDURE<OnBeforeSkipPlanningForItemOnReqWksh>
1 : Report<Suggest Item Price on Wksh.>.PROCEDURE<OnBeforeModifyOrInsertSalesPriceWksh>
1 : Report<Suggest Item Price on Wksh.>.PROCEDURE<OnBeforeRoundMethod>
1 : Report<Suggest Sales Price on Wksh.>.PROCEDURE<OnBeforeModifyOrInsertSalesPriceWksh>
1 : Report<Suggest Sales Price on Wksh.>.PROCEDURE<OnSalesPriceOnAfterGetRecordOnAfterCheck>
1 : Report<Implement Price Change>.PROCEDURE<OnAfterCopyToSalesPrice>
1 : Report<Copy Item>.PROCEDURE<OnAfterCopyExtendedTexts>
1 : Report<Copy Item>.PROCEDURE<OnAfterCopyItem>
1 : Report<Copy Item>.PROCEDURE<OnAfterOpenPage>
1 : Report<Copy Item>.PROCEDURE<OnAfterPostReport>
1 : Report<Copy Item>.PROCEDURE<OnBeforeInitSeries>
1 : Report<Whse.-Source - Create Document>.PROCEDURE<OnAfterCreatePutAwayDeleteBlankBinContent>
1 : Report<Whse.-Source - Create Document>.PROCEDURE<OnAfterGetRecordProdOrderComponent>
1 : Report<Whse.-Source - Create Document>.PROCEDURE<OnAfterOpenPage>
1 : Report<Whse.-Source - Create Document>.PROCEDURE<OnAfterPostedWhseReceiptLineOnPostDataItem>
1 : Report<Whse.-Source - Create Document>.PROCEDURE<OnAfterPostReport>
1 : Report<Whse.-Source - Create Document>.PROCEDURE<OnAfterSetPostedWhseReceiptLine>
1 : Report<Whse.-Source - Create Document>.PROCEDURE<OnAfterSetProdOrder>
1 : Report<Whse.-Source - Create Document>.PROCEDURE<OnAfterSetWhseInternalPickLine>
1 : Report<Whse.-Source - Create Document>.PROCEDURE<OnAfterSetWhseInternalPutAway>
1 : Report<Whse.-Source - Create Document>.PROCEDURE<OnAfterSetWhseWkshLine>
2 : Report<Whse.-Source - Create Document>.PROCEDURE<OnBeforeProcessWhseMovWkshLines>
1 : Report<Whse.-Source - Create Document>.PROCEDURE<OnBeforeSortWhseDocsForPrints>
1 : Report<Calculate Whse. Adjustment>.PROCEDURE<OnAfterFunctionInsertItemJnlLine>
1 : Report<Calculate Whse. Adjustment>.PROCEDURE<OnAfterInsertItemJnlLine>
1 : Report<Calculate Whse. Adjustment>.PROCEDURE<OnBeforeAdjmtBinQuantityBufferInsert>
1 : Report<Calculate Whse. Adjustment>.PROCEDURE<OnBeforeFunctionInsertItemJnlLine>
1 : Report<Whse.-Shipment - Create Pick>.PROCEDURE<OnAfterCalculateQuantityToPick>
1 : Report<Whse.-Shipment - Create Pick>.PROCEDURE<OnAfterPostReport>
1 : Report<Whse.-Shipment - Create Pick>.PROCEDURE<OnBeforePrintPickingList>
1 : Report<Create Invt Put-away/Pick/Mvmt>.PROCEDURE<OnBeforeOpenPage>
1 : Report<Whse. Calculate Inventory>.PROCEDURE<OnAfterWhseJnlLineInsert>
1 : Report<Whse. Calculate Inventory>.PROCEDURE<OnBeforeWhseJnlLineInsert>
1 : Report<Whse. Get Bin Content>.PROCEDURE<OnAfterInsertItemJnlLine>
1 : Report<Whse. Get Bin Content>.PROCEDURE<OnAfterInsertTempTrackingSpec>
1 : Report<Date Compress Whse. Entries>.PROCEDURE<OnAfterGetWarehouseEntryOnAfterInitNewWhseEntry>
1 : Report<Date Compress Whse. Entries>.PROCEDURE<OnBeforeInsertNewEntry>
1 : Report<Date Compress Whse. Entries>.PROCEDURE<OnUpdateITWhseEntriesOnAfterSetWhseEntry2>
1 : Report<Date Compress Whse. Entries>.PROCEDURE<OnUpdateITWhseEntriesOnBeforeLocalWhseEntry2Modify>
1 : Report<VAT Report Request Page>.PROCEDURE<OnAfterSetPeriodIsEditable>
1 : Report<Calculate Inventory>.PROCEDURE<OnAfterFunctionInsertItemJnlLine>
1 : Report<Calculate Inventory>.PROCEDURE<OnAfterInsertItemJnlLine>
1 : Report<Calculate Inventory>.PROCEDURE<OnAfterItemOnPreDataItem>
1 : Report<Calculate Inventory>.PROCEDURE<OnBeforeFunctionInsertItemJnlLine>
1 : Report<Export Budget to Excel>.PROCEDURE<OnAfterCopyFilterGLAccount>
1 : Report<Export Budget to Excel>.PROCEDURE<OnAfterEnterDimFilter>
1 : Report<Copy - VAT Posting Setup>.PROCEDURE<OnAfterCopyVATPostingSetup>
1 : Report<Config. Package - Process>.PROCEDURE<OnBeforeTextTransformation>
1 : Report<Copy - General Posting Setup>.PROCEDURE<OnAfterCopyGenPostingSetup>
1 : Report<Export Consolidation>.PROCEDURE<OnAfterGLEntryOnAfterGetRecord>
1 : Report<Export Consolidation>.PROCEDURE<OnBeforeGLEntryOnAfterGetRecord>
1 : Report<Suggest Job Jnl. Lines>.PROCEDURE<OnAfterTransferTimeSheetDetailToJobJnlLine>
1 : Report<Suggest Job Jnl. Lines>.PROCEDURE<OnBeforeInsertTempTimeSheetLine>
1 : Report<Date Compress General Ledger>.PROCEDURE<OnBeforeInitRegisters>
1 : Report<Calculate Subcontracts>.PROCEDURE<OnAfterTransferProdOrderRoutingLine>
1 : Report<Calculate Subcontracts>.PROCEDURE<OnBeforeReqWkshLineInsert>
1 : Report<Calculate Subcontracts>.PROCEDURE<OnBeforeValidateUnitCost>
1 : Report<Calculate Plan - Plan. Wksh.>.PROCEDURE<OnAfterItemOnPostDataItem>
1 : Report<Calculate Plan - Plan. Wksh.>.PROCEDURE<OnAfterItemOnPreDataItem>
1 : Report<Calculate Plan - Plan. Wksh.>.PROCEDURE<OnAfterOnOpenPage>
1 : Report<Carry Out Action Msg. - Plan.>.PROCEDURE<OnBeforePreReport>
1 : Report<Refresh Production Order>.PROCEDURE<OnAfterRefreshProdOrder>
1 : Report<Refresh Production Order>.PROCEDURE<OnBeforeCalcProdOrder>
1 : Report<Refresh Production Order>.PROCEDURE<OnBeforeCalcProdOrderLine>
1 : Report<Refresh Production Order>.PROCEDURE<OnBeforeCalcProdOrderLines>
1 : Report<Replan Production Order>.PROCEDURE<OnAfterLastProdOrderRtngLine>
1 : Report<Replan Production Order>.PROCEDURE<OnProdOrderCompOnAfterGetRecordOnBeforeCreateProdOrderLines>
1 : Report<Replan Production Order>.PROCEDURE<OnProdOrderCompOnAfterGetRecordOnBeforeProdOrderModify>
2 : Report<Exchange Production BOM Item>.PROCEDURE<OnBeforeInsertNewProdBOMLine>
1 : Report<Calculate Work Center Calendar>.PROCEDURE<OnAfterDeleteWorkCenterCalendarEntries>
1 : Report<Copy Production Order Document>.PROCEDURE<OnAfterCopyProdLines>
1 : Report<Copy Production Order Document>.PROCEDURE<OnBeforeToProdOrderLineInsert>
1 : Report<Copy Production Order Document>.PROCEDURE<OnBeforeToProdOrderModify>
1 : Table<Job Planning Line>.PROCEDURE<OnAfterDeleteAmounts>
1 : Table<Job Planning Line>.PROCEDURE<OnAfterInitJobPlanningLine>
1 : Table<Job Planning Line>.PROCEDURE<OnAfterResourceFindCost>
1 : Table<Job Planning Line>.PROCEDURE<OnAfterSetupNewLine>
1 : Table<Job Planning Line>.PROCEDURE<OnAfterUpdateAllAmounts>
1 : Table<Job Planning Line>.PROCEDURE<OnAfterValidateModification>
1 : Table<Job Planning Line>.PROCEDURE<OnBeforeRetrieveCostPrice>
1 : Table<Job Planning Line>.PROCEDURE<OnBeforeUpdateAllAmounts>
2 : Table<Payment Service Setup>.PROCEDURE<OnCreatePaymentService>
2 : Table<Payment Service Setup>.PROCEDURE<OnDoNotIncludeAnyPaymentServicesOnAllDocuments>
7 : Table<Payment Service Setup>.PROCEDURE<OnRegisterPaymentServiceProviders>
5 : Table<Payment Service Setup>.PROCEDURE<OnRegisterPaymentServices>
1 : Table<Sales Shipment Header>.PROCEDURE<OnBeforeEmailRecords>
1 : Table<Sales Shipment Header>.PROCEDURE<OnBeforeGetTrackingInternetAddr>
1 : Table<Sales Shipment Header>.PROCEDURE<OnBeforePrintRecords>
1 : Table<Sales Shipment Header>.PROCEDURE<OnBeforeSendProfile>
1 : Table<Sales Shipment Line>.PROCEDURE<OnAfterClearSalesLineValues>
1 : Table<Sales Shipment Line>.PROCEDURE<OnAfterInitFromSalesLine>
1 : Table<Sales Shipment Line>.PROCEDURE<OnAfterInsertInvLineFromShptLine>
1 : Table<Sales Shipment Line>.PROCEDURE<OnBeforeCodeInsertInvLineFromShptLine>
1 : Table<Sales Shipment Line>.PROCEDURE<OnBeforeInsertInvLineFromShptLine>
1 : Table<Sales Shipment Line>.PROCEDURE<OnBeforeInsertInvLineFromShptLineBeforeInsertTextLine>
1 : Table<Sales Shipment Line>.PROCEDURE<OnInsertInvLineFromShptLineOnAfterAssignDescription>
1 : Table<Sales Shipment Line>.PROCEDURE<OnInsertInvLineFromShptLineOnAfterUpdatePrepaymentsAmounts>
1 : Table<Sales Invoice Header>.PROCEDURE<OnBeforeEmailRecords>
1 : Table<Sales Invoice Header>.PROCEDURE<OnBeforePrintRecords>
1 : Table<Sales Invoice Header>.PROCEDURE<OnBeforeSendProfile>
1 : Table<Sales Invoice Header>.PROCEDURE<OnBeforeSendRecords>
1 : Table<Sales Invoice Header>.PROCEDURE<OnGetPaymentReference>
1 : Table<Sales Invoice Header>.PROCEDURE<OnGetPaymentReferenceLbl>
1 : Table<Sales Invoice Line>.PROCEDURE<OnAfterInitFromSalesLine>
1 : Table<Sales Cr.Memo Header>.PROCEDURE<OnBeforeEmailRecords>
1 : Table<Sales Cr.Memo Header>.PROCEDURE<OnBeforePrintRecords>
1 : Table<Sales Cr.Memo Header>.PROCEDURE<OnBeforeSendProfile>
1 : Table<Sales Cr.Memo Header>.PROCEDURE<OnBeforeSendRecords>
1 : Table<OAuth 2.0 Setup>.PROCEDURE<OnAfterRequestAccessToken>
1 : Table<OAuth 2.0 Setup>.PROCEDURE<OnBeforeInvokeRequest>
1 : Table<OAuth 2.0 Setup>.PROCEDURE<OnBeforeRefreshAccessToken>
1 : Table<OAuth 2.0 Setup>.PROCEDURE<OnBeforeRequestAccessToken>
1 : Table<OAuth 2.0 Setup>.PROCEDURE<OnBeforeRequestAuthoizationCode>
1 : Table<Sales Cr.Memo Line>.PROCEDURE<OnAfterInitFromSalesLine>
1 : Table<Document Attachment>.PROCEDURE<OnBeforeInsertAttachment>
1 : Table<Document Attachment>.PROCEDURE<OnBeforeSaveAttachment>
1 : Table<Direct Debit Collection Entry>.PROCEDURE<OnBeforeCheckSEPA>
1 : Table<Direct Debit Collection Entry>.PROCEDURE<OnBeforeDocTypeErr>
1 : Table<Direct Debit Collection Entry>.PROCEDURE<OnBeforeExportSEPA>
1 : Table<Direct Debit Collection Entry>.PROCEDURE<OnBeforeValidateTransferAmount>
1 : Table<Purch. Rcpt. Line>.PROCEDURE<OnAfterCopyFromPurchRcptLine>
1 : Table<Purch. Rcpt. Line>.PROCEDURE<OnAfterInitFromPurchLine>
1 : Table<Purch. Rcpt. Line>.PROCEDURE<OnAfterInsertInvLineFromRcptLine>
1 : Table<Purch. Rcpt. Line>.PROCEDURE<OnBeforeInsertInvLineFromRcptLine>
1 : Table<Purch. Rcpt. Line>.PROCEDURE<OnBeforeInsertInvLineFromRcptLineBeforeInsertTextLine>
1 : Table<Purch. Rcpt. Line>.PROCEDURE<OnInsertInvLineFromRcptLineOnAfterAssignDescription>
1 : Table<Purch. Inv. Header>.PROCEDURE<OnBeforePrintRecords>
1 : Table<Purch. Inv. Line>.PROCEDURE<OnAfterInitFromPurchLine>
1 : Table<XML Buffer>.PROCEDURE<OnNormalizeElementValue>
2 : Table<Transformation Rule>.PROCEDURE<OnCreateTransformationRules>
1 : Table<Transformation Rule>.PROCEDURE<OnTransformation>
1 : Table<Purch. Cr. Memo Hdr.>.PROCEDURE<OnBeforePrintRecords>
1 : Table<Ledger Entry Matching Buffer>.PROCEDURE<OnBeforeInsertFromBankAccountLedgerEntry>
1 : Table<Ledger Entry Matching Buffer>.PROCEDURE<OnBeforeInsertFromCustomerLedgerEntry>
1 : Table<Ledger Entry Matching Buffer>.PROCEDURE<OnBeforeInsertFromVendorLedgerEntry>
1 : Table<Purch. Cr. Memo Line>.PROCEDURE<OnAfterInitFromPurchLine>
2 : Table<Incoming Document>.PROCEDURE<OnAfterCreateGenJnlLineFromIncomingDocFail>
2 : Table<Incoming Document>.PROCEDURE<OnAfterCreateGenJnlLineFromIncomingDocSuccess>
1 : Table<Incoming Document>.PROCEDURE<OnAfterCreatePurchHeaderFromIncomingDoc>
1 : Table<Incoming Document>.PROCEDURE<OnAfterCreateSalesHeaderFromIncomingDoc>
1 : Table<Incoming Document>.PROCEDURE<OnAfterFindPostedRecord>
1 : Table<Incoming Document>.PROCEDURE<OnAfterFindUnpostedRecord>
1 : Table<Incoming Document>.PROCEDURE<OnAfterGetRelatedRecordCaption>
1 : Table<Incoming Document>.PROCEDURE<OnAfterUpdateDocumentFields>
1 : Table<Incoming Document>.PROCEDURE<OnCheckIncomingDocCreateDocRestrictions>
1 : Table<Incoming Document>.PROCEDURE<OnCheckIncomingDocReleaseRestrictions>
1 : Table<Incoming Document>.PROCEDURE<OnCheckIncomingDocSetForOCRRestrictions>
1 : Table<Incoming Document>.PROCEDURE<OnGetDataExchangePath>
1 : Table<Mini Customer Template>.PROCEDURE<OnAfterCreateFieldRefArray>
1 : Table<Mini Customer Template>.PROCEDURE<OnAfterInsertCustomerFromTemplate>
1 : Table<Mini Customer Template>.PROCEDURE<OnCreateConfigTemplateFromExistingCustomerOnBeforeInitTempRec>
1 : Table<Item Template>.PROCEDURE<OnAfterCreateFieldRefArray>
1 : Table<Item Template>.PROCEDURE<OnAfterInsertItemFromTemplate>
1 : Table<Item Template>.PROCEDURE<OnAfterUpdateItemFromTemplate>
1 : Table<Item Template>.PROCEDURE<OnBeforeInitItemNo>
1 : Table<Item Template>.PROCEDURE<OnCreateConfigTemplateFromExistingItemOnBeforeInitTempRec>
1 : Table<Dimensions Template>.PROCEDURE<OnAfterCreateFieldRefArray>
1 : Table<Mini Vendor Template>.PROCEDURE<OnAfterCreateFieldRefArray>
1 : Table<Mini Vendor Template>.PROCEDURE<OnAfterInsertVendorFromTemplate>
1 : Table<Mini Vendor Template>.PROCEDURE<OnCreateConfigTemplateFromExistingVendorOnBeforeInitTempRec>
1 : Table<O365 Getting Started>.PROCEDURE<OnO365DemoCompanyInitialize>
2 : Table<Incoming Document Attachment>.PROCEDURE<OnAttachBinaryFile>
1 : Table<Incoming Document Attachment>.PROCEDURE<OnBeforeExtractHeaderFields>
3 : Table<Incoming Document Attachment>.PROCEDURE<OnGetBinaryContent>
3 : Table<Service Connection>.PROCEDURE<OnRegisterServiceConnection>
1 : Table<Named Forward Link>.PROCEDURE<OnLoad>
1 : Table<G/L Account>.PROCEDURE<OnAfterCheckGLAcc>
1 : Table<My Notifications>.PROCEDURE<OnAfterIsNotificationEnabled>
1 : Table<My Notifications>.PROCEDURE<OnStateChanged>
1 : Table<Curr. Exch. Rate Update Setup>.PROCEDURE<OnAfterGetWebServiceURL>
1 : Table<Curr. Exch. Rate Update Setup>.PROCEDURE<OnBeforeSetupCurrencyExchRateService>
1 : Table<Job>.PROCEDURE<OnAfterChangeJobCompletionStatus>
1 : Table<Job>.PROCEDURE<OnAfterUpdateBillToCust>
1 : Table<Job>.PROCEDURE<OnBeforeChangeJobCompletionStatus>
1 : Table<Job>.PROCEDURE<OnBeforeCopyDefaultDimensionsFromCustomer>
1 : Table<Job>.PROCEDURE<OnBeforeTestBlocked>
1 : Table<Job>.PROCEDURE<OnBeforeUpdateJobTaskDimension>
1 : Table<Job>.PROCEDURE<OnBeforeValidateBillToCustomerNo>
1 : Table<G/L Entry>.PROCEDURE<OnAfterCopyFromDeferralPostBuffer>
1 : Table<G/L Entry>.PROCEDURE<OnAfterCopyGLEntryFromGenJnlLine>
1 : Table<Posted Deferral Line>.PROCEDURE<OnBeforeInitFromDeferralLine>
1 : Table<Standard Customer Sales Code>.PROCEDURE<OnAfterApplyStdCodesToSalesLinesLoop>
1 : Table<Standard Customer Sales Code>.PROCEDURE<OnAfterCreateSalesInvoice>
1 : Table<Standard Customer Sales Code>.PROCEDURE<OnBeforeApplyStdCodesToSalesLines>
1 : Table<Standard Customer Sales Code>.PROCEDURE<OnBeforeApplyStdCodesToSalesLinesLoop>
1 : Table<Standard Purchase Line>.PROCEDURE<OnAfterValidateGLAccountNo>
1 : Table<Standard Vendor Purchase Code>.PROCEDURE<OnBeforeApplyStdCodesToPurchaseLines>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCaption>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCheckBankAcc>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCheckCust>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCheckDtldCustLedgEntry>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCheckDtldEmplLedgEntry>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCheckDtldVendLedgEntry>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCheckEmpl>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCheckEntries>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCheckFA>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCheckGLAcc>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCheckMaintenance>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCheckVAT>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCheckVend>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromBankAccLedgEntry>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromCustLedgEntry>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromEmplLedgEntry>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromFALedgEntry>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromGLEntry>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromMaintenanceEntry>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromVATEntry>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromVendLedgEntry>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterInsertReversalEntry>
1 : Table<Reversal Entry>.PROCEDURE<OnAfterSetReverseFilter>
8 : Table<Reversal Entry>.PROCEDURE<OnBeforeCheckEntries>
1 : Table<Reversal Entry>.PROCEDURE<OnBeforeCheckGLAcc>
1 : Table<Reversal Entry>.PROCEDURE<OnBeforeCheckRegister>
1 : Table<Reversal Entry>.PROCEDURE<OnBeforeReverseEntries>
1 : Table<Data Migration Error>.PROCEDURE<OnAfterErrorInserted>
1 : Table<Customer>.PROCEDURE<OnAfterCopyFromCustomerTemplate>
1 : Table<Customer>.PROCEDURE<OnAfterHasAnyOpenOrPostedDocuments>
1 : Table<Customer>.PROCEDURE<OnAfterValidateCity>
1 : Table<Customer>.PROCEDURE<OnAfterValidatePostCode>
1 : Table<Customer>.PROCEDURE<OnBeforeCheckBlockedCust>
1 : Table<Customer>.PROCEDURE<OnBeforeIsContactUpdateNeeded>
1 : Table<Customer>.PROCEDURE<OnBeforeValidateShortcutDimCode>
1 : Table<Customer>.PROCEDURE<OnBeforeVATRegistrationValidation>
1 : Table<Assisted Company Setup Status>.PROCEDURE<OnEnabled>
1 : Table<Assisted Company Setup Status>.PROCEDURE<OnGetCompanySetupStatus>
1 : Table<Assisted Company Setup Status>.PROCEDURE<OnSetupStatusDrillDown>
1 : Table<Assisted Setup>.PROCEDURE<OnAssistedSetupCompleted>
1 : Table<Assisted Setup>.PROCEDURE<OnBeforeUpdateAssistedSetupStatus>
1 : Table<Assisted Setup>.PROCEDURE<VerifyYodleeIsInstalled>
1 : Table<Aggregated Assisted Setup>.PROCEDURE<OnRegisterAssistedSetup>
1 : Table<Aggregated Assisted Setup>.PROCEDURE<OnUpdateAssistedSetupStatus>
1 : Table<Business Setup>.PROCEDURE<OnOpenBusinessSetupPage>
1 : Table<Business Setup>.PROCEDURE<OnRegisterBusinessSetup>
1 : Table<Cust. Invoice Disc.>.PROCEDURE<OnBeforeGetRec>
1 : Table<Res. Ledger Entry>.PROCEDURE<OnAfterCopyFromResJnlLine>
1 : Table<Res. Journal Line>.PROCEDURE<OnAfterCopyResJnlLineFromJobJnlLine>
1 : Table<Res. Journal Line>.PROCEDURE<OnAfterCopyResJnlLineFromSalesHeader>
1 : Table<Res. Journal Line>.PROCEDURE<OnAfterCopyResJnlLineFromSalesLine>
1 : Table<Res. Journal Line>.PROCEDURE<OnAfterCopyResJnlLineFromServHeader>
1 : Table<Res. Journal Line>.PROCEDURE<OnAfterCopyResJnlLineFromServLine>
1 : Table<Res. Journal Line>.PROCEDURE<OnAfterCopyResJnlLineFromServShptHeader>
1 : Table<Res. Journal Line>.PROCEDURE<OnAfterCopyResJnlLineFromServShptLine>
1 : Table<Res. Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Cust. Ledger Entry>.PROCEDURE<OnAfterCopyCustLedgerEntryFromCVLedgEntryBuffer>
1 : Table<Cust. Ledger Entry>.PROCEDURE<OnAfterCopyCustLedgerEntryFromGenJnlLine>
1 : Table<Cust. Ledger Entry>.PROCEDURE<OnAfterShowDoc>
1 : Table<Cust. Ledger Entry>.PROCEDURE<OnBeforeDrillDownEntries>
1 : Table<Cust. Ledger Entry>.PROCEDURE<OnBeforeDrillDownOnOverdueEntries>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterAssignGLAccountUoM>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterAssignGLAccountValues>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterAssignItemUoM>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterAssignItemValues>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterAssignResourceUoM>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterAssignResourceValues>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterDeleteAmounts>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterResourceFindCost>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterSetUpNewLine>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterUpdateAllAmounts>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterUpdateAmountsAndDiscounts>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterUpdateDimensions>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterUpdateTotalCost>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterUpdateTotalPrice>
1 : Table<Job Journal Line>.PROCEDURE<OnAfterUpdateUnitCost>
1 : Table<Job Journal Line>.PROCEDURE<OnBeforeCheckItemAvailable>
1 : Table<Job Journal Line>.PROCEDURE<OnBeforeEmptyLine>
1 : Table<Job Journal Line>.PROCEDURE<OnBeforeRetrieveCostPrice>
1 : Table<Job Journal Line>.PROCEDURE<OnBeforeSetUpNewLine>
1 : Table<Job Journal Line>.PROCEDURE<OnBeforeUpdateAllAmounts>
1 : Table<Job Journal Line>.PROCEDURE<OnBeforeValidateWorkTypeCodeQty>
1 : Table<Job Journal Line>.PROCEDURE<OnValidateJobNoOnBeforeCheckJob>
1 : Table<Gen. Jnl. Allocation>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Post Code>.PROCEDURE<OnBeforeCheckClearPostCodeCityCounty>
1 : Table<Post Code>.PROCEDURE<OnBeforeLookupPostCode>
1 : Table<Post Code>.PROCEDURE<OnBeforeValidateCity>
1 : Table<Post Code>.PROCEDURE<OnBeforeValidatePostCode>
1 : Table<Vendor>.PROCEDURE<OnAfterValidateCity>
1 : Table<Vendor>.PROCEDURE<OnAfterValidatePostCode>
1 : Table<Vendor>.PROCEDURE<OnBeforeCheckBlockedVend>
1 : Table<Vendor>.PROCEDURE<OnBeforeIsContactUpdateNeeded>
1 : Table<Vendor>.PROCEDURE<OnBeforeValidateShortcutDimCode>
1 : Table<Vendor>.PROCEDURE<OnBeforeVATRegistrationValidation>
2 : Table<Gen. Journal Batch>.PROCEDURE<OnCheckGenJournalLineExportRestrictions>
1 : Table<Gen. Journal Batch>.PROCEDURE<OnGeneralJournalBatchBalanced>
1 : Table<Gen. Journal Batch>.PROCEDURE<OnGeneralJournalBatchNotBalanced>
1 : Table<Gen. Journal Batch>.PROCEDURE<OnMoveGenJournalBatch>
1 : Table<Requisition Line>.PROCEDURE<OnAfterCopyFromItem>
1 : Table<Requisition Line>.PROCEDURE<OnAfterCreateDim>
1 : Table<Requisition Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Requisition Line>.PROCEDURE<OnAfterDeleteRelations>
1 : Table<Requisition Line>.PROCEDURE<OnAfterFilterLinesWithItemToPlan>
1 : Table<Requisition Line>.PROCEDURE<OnAfterGetDirectCost>
1 : Table<Requisition Line>.PROCEDURE<OnAfterSetReplenishmentSystemFromAssembly>
1 : Table<Requisition Line>.PROCEDURE<OnAfterSetReplenishmentSystemFromProdOrder>
1 : Table<Requisition Line>.PROCEDURE<OnAfterSetReplenishmentSystemFromPurchase>
1 : Table<Requisition Line>.PROCEDURE<OnAfterSetReplenishmentSystemFromTransfer>
1 : Table<Requisition Line>.PROCEDURE<OnAfterTransferFromAsmHeader>
1 : Table<Requisition Line>.PROCEDURE<OnAfterTransferFromProdOrderLine>
1 : Table<Requisition Line>.PROCEDURE<OnAfterTransferFromPurchaseLine>
1 : Table<Requisition Line>.PROCEDURE<OnAfterTransferFromTransLine>
1 : Table<Requisition Line>.PROCEDURE<OnAfterTransferFromUnplannedDemand>
1 : Table<Requisition Line>.PROCEDURE<OnAfterTransferToTrackingEntry>
1 : Table<Requisition Line>.PROCEDURE<OnBeforeCopyFromItem>
2 : Table<Requisition Line>.PROCEDURE<OnBeforeGetDefaultBin>
1 : Table<Requisition Line>.PROCEDURE<OnBeforeGetDirectCost>
1 : Table<Requisition Line>.PROCEDURE<OnBeforeLookupVendor>
1 : Table<Requisition Line>.PROCEDURE<OnBeforeSetFromBinCode>
1 : Table<Requisition Line>.PROCEDURE<OnGetLocationCodeOnBeforeUpdate>
1 : Table<Requisition Line>.PROCEDURE<OnSetReplenishmentSystemFromProdOrderOnAfterSetProdFields>
1 : Table<Requisition Line>.PROCEDURE<OnUpdateDescriptionFromItem>
1 : Table<Requisition Line>.PROCEDURE<OnUpdateDescriptionFromItemTranslation>
1 : Table<Requisition Line>.PROCEDURE<OnUpdateDescriptionFromItemVariant>
1 : Table<Requisition Line>.PROCEDURE<OnUpdateDescriptionFromSalesLine>
1 : Table<Requisition Line>.PROCEDURE<OnValidateLocationCodeOnBeforeGetDefaultBin>
1 : Table<Requisition Line>.PROCEDURE<OnValidateQuantityOnBeforeUnitCost>
1 : Table<Vendor Ledger Entry>.PROCEDURE<OnAfterCopyVendLedgerEntryFromCVLedgEntryBuffer>
1 : Table<Vendor Ledger Entry>.PROCEDURE<OnAfterCopyVendLedgerEntryFromGenJnlLine>
1 : Table<Vendor Ledger Entry>.PROCEDURE<OnAfterShowDoc>
1 : Table<Vendor Ledger Entry>.PROCEDURE<OnBeforeDrillDownEntries>
1 : Table<Vendor Ledger Entry>.PROCEDURE<OnBeforeDrillDownOnOverdueEntries>
1 : Table<General Posting Setup>.PROCEDURE<OnBeforeGetPurchPrepmtAccount>
1 : Table<General Posting Setup>.PROCEDURE<OnBeforeGetSalesPrepmtAccount>
1 : Table<VAT Entry>.PROCEDURE<OnAfterCopyFromGenJnlLine>
1 : Table<Item>.PROCEDURE<OnAfterCheckDocuments>
1 : Table<Item>.PROCEDURE<OnAfterDeleteRelatedData>
1 : Table<Item>.PROCEDURE<OnBeforeTestNoPurchLinesExist>
1 : Table<Item>.PROCEDURE<OnBeforeValidateStandardCost>
1 : Table<Bank Account>.PROCEDURE<OnAfterIsUpdateNeeded>
1 : Table<Bank Account>.PROCEDURE<OnCheckAutoLogonPossibleEvent>
1 : Table<Bank Account>.PROCEDURE<OnCheckLinkedToStatementProviderEvent>
1 : Table<Bank Account>.PROCEDURE<OnDisableStatementProviderEvent>
1 : Table<Bank Account>.PROCEDURE<OnGetDataExchangeDefinitionEvent>
3 : Table<Bank Account>.PROCEDURE<OnGetStatementProvidersEvent>
1 : Table<Bank Account>.PROCEDURE<OnLinkStatementProviderEvent>
1 : Table<Bank Account>.PROCEDURE<OnMarkAccountLinkedEvent>
1 : Table<Bank Account>.PROCEDURE<OnRefreshStatementProviderEvent>
1 : Table<Bank Account>.PROCEDURE<OnSimpleLinkStatementProviderEvent>
2 : Table<Bank Account>.PROCEDURE<OnUnlinkStatementProviderEvent>
1 : Table<Bank Account>.PROCEDURE<OnUpdateBankAccountLinkingEvent>
1 : Table<Bank Account Ledger Entry>.PROCEDURE<OnAfterCopyFromGenJnlLine>
1 : Table<Check Ledger Entry>.PROCEDURE<OnAfterCopyFromBankAccLedgEntry>
1 : Table<Bank Acc. Reconciliation>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Bank Acc. Reconciliation Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Native - API Tax Setup>.PROCEDURE<OnCanDeleteTaxSetup>
1 : Table<Native - API Tax Setup>.PROCEDURE<OnLoadSalesTaxSettings>
1 : Table<Native - API Tax Setup>.PROCEDURE<OnSaveSalesTaxSettings>
1 : Table<VAT Amount Line>.PROCEDURE<OnAfterCalcLineAmount>
1 : Table<VAT Amount Line>.PROCEDURE<OnAfterCopyFromPurchCrMemoLine>
1 : Table<VAT Amount Line>.PROCEDURE<OnAfterCopyFromPurchInvLine>
1 : Table<VAT Amount Line>.PROCEDURE<OnAfterCopyFromSalesCrMemoLine>
1 : Table<VAT Amount Line>.PROCEDURE<OnAfterCopyFromSalesInvLine>
1 : Table<VAT Amount Line>.PROCEDURE<OnAfterCopyFromServCrMemoLine>
1 : Table<VAT Amount Line>.PROCEDURE<OnAfterCopyFromServInvLine>
1 : Table<VAT Amount Line>.PROCEDURE<OnAfterSalesTaxCalculateCalculateTax>
1 : Table<VAT Amount Line>.PROCEDURE<OnAfterSalesTaxCalculateReverseCalculateTax>
1 : Table<VAT Amount Line>.PROCEDURE<OnInsertLineOnBeforeModify>
1 : Table<Reminder Header>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Reminder Header>.PROCEDURE<OnAfterGetIssuingNoSeriesCode>
1 : Table<Reminder Header>.PROCEDURE<OnAfterGetNoSeriesCode>
1 : Table<Reminder Header>.PROCEDURE<OnAfterInsertLines>
1 : Table<Reminder Header>.PROCEDURE<OnAfterTestNoSeries>
1 : Table<Reminder Header>.PROCEDURE<OnAfterUpdateLines>
1 : Table<Reminder Header>.PROCEDURE<OnBeforeGetIssuingNoSeriesCode>
1 : Table<Reminder Header>.PROCEDURE<OnBeforeGetNoSeriesCode>
1 : Table<Reminder Header>.PROCEDURE<OnBeforeInsertBeginTexts>
1 : Table<Reminder Header>.PROCEDURE<OnBeforeInsertEndTexts>
3 : Table<Reminder Header>.PROCEDURE<OnBeforeInsertReminderLine>
2 : Table<Reminder Header>.PROCEDURE<OnBeforeInsertReminderTextLine>
1 : Table<Reminder Header>.PROCEDURE<OnBeforeReminderRounding>
1 : Table<Reminder Header>.PROCEDURE<OnBeforeTestNoSeries>
1 : Table<Reminder Line>.PROCEDURE<OnAfterCalcFinChrg>
1 : Table<Reminder Line>.PROCEDURE<OnAfterCopyFromCustLedgEntry>
1 : Table<Reminder Line>.PROCEDURE<OnBeforeCalcFinChrg>
1 : Table<Reminder Line>.PROCEDURE<OnBeforeLookupDocNo>
1 : Table<Reminder Line>.PROCEDURE<OnBeforeValidateDocumentNo>
1 : Table<Reminder Line>.PROCEDURE<OnBeforeValidateEntryNo>
1 : Table<Issued Reminder Header>.PROCEDURE<OnBeforePrintRecords>
1 : Table<Reminder Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
1 : Table<Finance Charge Memo Header>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Finance Charge Memo Header>.PROCEDURE<OnAfterGetIssuingNoSeriesCode>
1 : Table<Finance Charge Memo Header>.PROCEDURE<OnAfterGetNoSeriesCode>
1 : Table<Finance Charge Memo Header>.PROCEDURE<OnAfterTestNoSeries>
1 : Table<Finance Charge Memo Header>.PROCEDURE<OnBeforeGetIssuingNoSeriesCode>
1 : Table<Finance Charge Memo Header>.PROCEDURE<OnBeforeGetNoSeriesCode>
1 : Table<Finance Charge Memo Header>.PROCEDURE<OnBeforeInsertFinChrgMemoLine>
1 : Table<Finance Charge Memo Header>.PROCEDURE<OnBeforeTestNoSeries>
1 : Table<Finance Charge Memo Line>.PROCEDURE<OnAfterCalcFinCharge>
1 : Table<Finance Charge Memo Line>.PROCEDURE<OnBeforeCalcFinCharge>
1 : Table<Issued Fin. Charge Memo Header>.PROCEDURE<OnBeforePrintRecords>
1 : Table<Fin. Charge Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
1 : Table<Item Ledger Entry>.PROCEDURE<OnAfterFilterLinesWithItemToPlan>
1 : Table<Item Ledger Entry>.PROCEDURE<OnBeforeVerifyOnInventory>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterClearTracking>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterCopyTrackingFromItemLedgEntry>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterInitFromAsmHeader>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterInitFromAsmLine>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterInitFromItemJnlLine>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterInitFromJobJnlLine>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterInitFromProdOrderComp>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterInitFromProdOrderLine>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterInitFromProdPlanningComp>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterInitFromPurchLine>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterInitFromReqLine>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterInitFromSalesLine>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterInitFromServLine>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterInitFromTransLine>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterInitQtyToInvoice>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterInitQtyToShip>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterLookupApplFromItemEntrySetFilters>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterSetTrackingFilterFromEntrySummary>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterSetTrackingFilterFromReservEntry>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterSetTrackingFilterFromTrackingSpec>
1 : Table<Tracking Specification>.PROCEDURE<OnAfterValidateApplFromItemEntry>
1 : Table<Tracking Specification>.PROCEDURE<OnBeforeInitQtyToInvoice>
1 : Table<Tracking Specification>.PROCEDURE<OnBeforeInitQtyToShip>
1 : Table<Tracking Specification>.PROCEDURE<OnBeforeTestFieldError>
1 : Table<Tracking Specification>.PROCEDURE<OnBeforeUpdateTrackingSpecification>
1 : Table<Tracking Specification>.PROCEDURE<OnValidateQtyToHandleOnBeforeInitQtyToInvoice>
1 : Table<Reservation Entry>.PROCEDURE<OnAfterClearItemTrackingFields>
1 : Table<Reservation Entry>.PROCEDURE<OnAfterClearTracking>
1 : Table<Reservation Entry>.PROCEDURE<OnAfterCopyTrackingFromItemLedgEntry>
1 : Table<Reservation Entry>.PROCEDURE<OnAfterCopyTrackingFromReservEntry>
1 : Table<Reservation Entry>.PROCEDURE<OnAfterCopyTrackingFromTrackingSpec>
1 : Table<Reservation Entry>.PROCEDURE<OnAfterCopyTrackingFromWhseActivLine>
1 : Table<Reservation Entry>.PROCEDURE<OnAfterSetTrackingFilterFromItemJnlLine>
1 : Table<Reservation Entry>.PROCEDURE<OnAfterSetTrackingFilterFromReservEntry>
1 : Table<Reservation Entry>.PROCEDURE<OnAfterSetTrackingFilterFromTrackingSpec>
1 : Table<Reservation Entry>.PROCEDURE<OnAfterSetTrackingFilterFromWhseSpec>
1 : Table<Reservation Entry>.PROCEDURE<OnAfterTextCaption>
1 : Table<Reservation Entry>.PROCEDURE<OnBeforeSummEntryNo>
1 : Table<Dimension>.PROCEDURE<OnBeforeCheckIfDimUsed>
1 : Table<Default Dimension>.PROCEDURE<OnAfterUpdateGlobalDimCode>
1 : Table<Sales Header>.PROCEDURE<OnAfterAppliesToDocNoOnLookup>
1 : Table<Sales Header>.PROCEDURE<OnAfterChangePricesIncludingVAT>
1 : Table<Sales Header>.PROCEDURE<OnAfterCheckBillToCust>
1 : Table<Sales Header>.PROCEDURE<OnAfterCheckCreditLimitCondition>
1 : Table<Sales Header>.PROCEDURE<OnAfterCheckCreditMaxBeforeInsert>
1 : Table<Sales Header>.PROCEDURE<OnAfterCheckSellToCust>
1 : Table<Sales Header>.PROCEDURE<OnAfterCheckShippingAdvice>
1 : Table<Sales Header>.PROCEDURE<OnAfterConfirmSalesPrice>
1 : Table<Sales Header>.PROCEDURE<OnAfterCopyFromSellToCustTemplate>
1 : Table<Sales Header>.PROCEDURE<OnAfterCopySellToAddressToBillToAddress>
1 : Table<Sales Header>.PROCEDURE<OnAfterCopySellToAddressToShipToAddress>
1 : Table<Sales Header>.PROCEDURE<OnAfterCopySellToCustomerAddressFieldsFromCustomer>
1 : Table<Sales Header>.PROCEDURE<OnAfterCopyShipToCustomerAddressFieldsFromCustomer>
1 : Table<Sales Header>.PROCEDURE<OnAfterCopyShipToCustomerAddressFieldsFromShipToAddr>
1 : Table<Sales Header>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Sales Header>.PROCEDURE<OnAfterCreateSalesLine>
1 : Table<Sales Header>.PROCEDURE<OnAfterDeleteAllTempSalesLines>
1 : Table<Sales Header>.PROCEDURE<OnAfterGetNoSeriesCode>
1 : Table<Sales Header>.PROCEDURE<OnAfterGetPostingNoSeriesCode>
1 : Table<Sales Header>.PROCEDURE<OnAfterGetPrepaymentPostingNoSeriesCode>
1 : Table<Sales Header>.PROCEDURE<OnAfterInitNoSeries>
1 : Table<Sales Header>.PROCEDURE<OnAfterInitRecord>
1 : Table<Sales Header>.PROCEDURE<OnAfterInsertTempSalesLine>
1 : Table<Sales Header>.PROCEDURE<OnAfterIsApprovedForPosting>
1 : Table<Sales Header>.PROCEDURE<OnAfterIsApprovedForPostingBatch>
1 : Table<Sales Header>.PROCEDURE<OnAfterIsShipToAddressEqualToSellToAddress>
1 : Table<Sales Header>.PROCEDURE<OnAfterRecreateSalesLine>
1 : Table<Sales Header>.PROCEDURE<OnAfterSalesQuoteAccepted>
1 : Table<Sales Header>.PROCEDURE<OnAfterSendSalesHeader>
1 : Table<Sales Header>.PROCEDURE<OnAfterSetApplyToFilters>
1 : Table<Sales Header>.PROCEDURE<OnAfterSetFieldsBilltoCustomer>
1 : Table<Sales Header>.PROCEDURE<OnAfterTestNoSeries>
1 : Table<Sales Header>.PROCEDURE<OnAfterTestQuantityShippedField>
1 : Table<Sales Header>.PROCEDURE<OnAfterTestStatusOpen>
1 : Table<Sales Header>.PROCEDURE<OnAfterTransferExtendedTextForSalesLineRecreation>
1 : Table<Sales Header>.PROCEDURE<OnAfterUpdateBillToCont>
1 : Table<Sales Header>.PROCEDURE<OnAfterUpdateCurrencyFactor>
1 : Table<Sales Header>.PROCEDURE<OnAfterUpdateSalesLines>
1 : Table<Sales Header>.PROCEDURE<OnAfterUpdateSellToCont>
1 : Table<Sales Header>.PROCEDURE<OnAfterUpdateSellToCust>
1 : Table<Sales Header>.PROCEDURE<OnAfterUpdateShipToAddress>
1 : Table<Sales Header>.PROCEDURE<OnAfterValidateShortcutDimCode>
1 : Table<Sales Header>.PROCEDURE<OnBeforeCheckCreditLimit>
1 : Table<Sales Header>.PROCEDURE<OnBeforeCheckCreditLimitIfLineNotInsertedYet>
1 : Table<Sales Header>.PROCEDURE<OnBeforeCheckCreditMaxBeforeInsert>
1 : Table<Sales Header>.PROCEDURE<OnBeforeConfirmBillToContactNoChange>
1 : Table<Sales Header>.PROCEDURE<OnBeforeConfirmUpdateCurrencyFactor>
1 : Table<Sales Header>.PROCEDURE<OnBeforeCopyShipToCustomerAddressFieldsFromCustomer>
1 : Table<Sales Header>.PROCEDURE<OnBeforeCopyShipToCustomerAddressFieldsFromShipToAddr>
1 : Table<Sales Header>.PROCEDURE<OnBeforeGetNoSeriesCode>
1 : Table<Sales Header>.PROCEDURE<OnBeforeGetPostingNoSeriesCode>
1 : Table<Sales Header>.PROCEDURE<OnBeforeInitInsert>
1 : Table<Sales Header>.PROCEDURE<OnBeforeInitRecord>
1 : Table<Sales Header>.PROCEDURE<OnBeforeIsCreditDocType>
1 : Table<Sales Header>.PROCEDURE<OnBeforeRecreateSalesLines>
1 : Table<Sales Header>.PROCEDURE<OnBeforeSalesLineByChangedFieldNo>
1 : Table<Sales Header>.PROCEDURE<OnBeforeSalesLineInsert>
1 : Table<Sales Header>.PROCEDURE<OnBeforeSetSecurityFilterOnRespCenter>
1 : Table<Sales Header>.PROCEDURE<OnBeforeTestNoSeries>
1 : Table<Sales Header>.PROCEDURE<OnBeforeTestSalesLineFieldsBeforeRecreate>
1 : Table<Sales Header>.PROCEDURE<OnBeforeTestStatusOpen>
1 : Table<Sales Header>.PROCEDURE<OnBeforeUpdateAllLineDim>
1 : Table<Sales Header>.PROCEDURE<OnBeforeUpdateCurrencyFactor>
1 : Table<Sales Header>.PROCEDURE<OnBeforeUpdateLocationCode>
1 : Table<Sales Header>.PROCEDURE<OnBeforeUpdateSalesLinesByFieldNo>
3 : Table<Sales Header>.PROCEDURE<OnCheckSalesPostRestrictions>
1 : Table<Sales Header>.PROCEDURE<OnCheckSalesReleaseRestrictions>
1 : Table<Sales Header>.PROCEDURE<OnCopySelltoCustomerAddressFieldsFromCustomerOnAfterAssignRespCenter>
1 : Table<Sales Header>.PROCEDURE<OnCreateDimOnBeforeUpdateLines>
1 : Table<Sales Header>.PROCEDURE<OnCreateSalesLineOnAfterAssignType>
3 : Table<Sales Header>.PROCEDURE<OnCustomerCreditLimitExceeded>
3 : Table<Sales Header>.PROCEDURE<OnCustomerCreditLimitNotExceeded>
1 : Table<Sales Header>.PROCEDURE<OnInitInsertOnBeforeInitRecord>
1 : Table<Sales Header>.PROCEDURE<OnRecreateSalesLinesOnAfterSetSalesLineFilters>
1 : Table<Sales Header>.PROCEDURE<OnRecreateSalesLinesOnBeforeConfirm>
1 : Table<Sales Header>.PROCEDURE<OnUpdateBillToCustOnAfterSalesQuote>
1 : Table<Sales Header>.PROCEDURE<OnUpdateSalesLineByChangedFieldName>
1 : Table<Sales Header>.PROCEDURE<OnUpdateSalesLinesByFieldNoOnBeforeSalesLineModify>
1 : Table<Sales Header>.PROCEDURE<OnValidateBilltoCustomerTemplateCodeBeforeRecreateSalesLines>
2 : Table<Sales Header>.PROCEDURE<OnValidatePaymentTermsCodeOnBeforeCalcDueDate>
2 : Table<Sales Header>.PROCEDURE<OnValidatePaymentTermsCodeOnBeforeCalcPmtDiscDate>
1 : Table<Sales Header>.PROCEDURE<OnValidatePostingDateOnBeforeAssignDocumentDate>
1 : Table<Sales Header>.PROCEDURE<OnValidatePricesIncludingVATOnBeforeSalesLineModify>
1 : Table<Sales Header>.PROCEDURE<OnValidateSellToCustomerNoAfterInit>
1 : Table<Sales Header>.PROCEDURE<OnValidateShippingAgentCodeOnBeforeUpdateLines>
1 : Table<Analysis View>.PROCEDURE<OnAfterAnalysisViewReset>
1 : Table<Analysis View Entry>.PROCEDURE<OnAfterDrillDown>
1 : Table<Analysis View Entry>.PROCEDURE<OnBeforeDrilldown>
1 : Table<Sales Line>.PROCEDURE<OnAfterAssignFieldsForNo>
1 : Table<Sales Line>.PROCEDURE<OnAfterAssignFixedAssetValues>
1 : Table<Sales Line>.PROCEDURE<OnAfterAssignGLAccountValues>
1 : Table<Sales Line>.PROCEDURE<OnAfterAssignHeaderValues>
1 : Table<Sales Line>.PROCEDURE<OnAfterAssignItemChargeValues>
1 : Table<Sales Line>.PROCEDURE<OnAfterAssignItemUOM>
1 : Table<Sales Line>.PROCEDURE<OnAfterAssignItemValues>
1 : Table<Sales Line>.PROCEDURE<OnAfterAssignResourceUOM>
1 : Table<Sales Line>.PROCEDURE<OnAfterAssignResourceValues>
1 : Table<Sales Line>.PROCEDURE<OnAfterAssignStdTxtValues>
1 : Table<Sales Line>.PROCEDURE<OnAfterAutoAsmToOrder>
1 : Table<Sales Line>.PROCEDURE<OnAfterAutoReserve>
1 : Table<Sales Line>.PROCEDURE<OnAfterBlanketOrderLookup>
1 : Table<Sales Line>.PROCEDURE<OnAfterCalcLineAmount>
1 : Table<Sales Line>.PROCEDURE<OnAfterCalcVATAmountLines>
1 : Table<Sales Line>.PROCEDURE<OnAfterCheckCreditLimitCondition>
1 : Table<Sales Line>.PROCEDURE<OnAfterCopyFromItem>
2 : Table<Sales Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Sales Line>.PROCEDURE<OnAfterFilterLinesWithItemToPlan>
1 : Table<Sales Line>.PROCEDURE<OnAfterFindResUnitCost>
1 : Table<Sales Line>.PROCEDURE<OnAfterGetItemTranslation>
1 : Table<Sales Line>.PROCEDURE<OnAfterGetLineAmountToHandle>
1 : Table<Sales Line>.PROCEDURE<OnAfterGetSalesHeader>
1 : Table<Sales Line>.PROCEDURE<OnAfterGetUnitCost>
1 : Table<Sales Line>.PROCEDURE<OnAfterInitHeaderDefaults>
1 : Table<Sales Line>.PROCEDURE<OnAfterInitOutstanding>
1 : Table<Sales Line>.PROCEDURE<OnAfterInitOutstandingAmount>
1 : Table<Sales Line>.PROCEDURE<OnAfterInitOutstandingQty>
1 : Table<Sales Line>.PROCEDURE<OnAfterInitQtyToAsm>
1 : Table<Sales Line>.PROCEDURE<OnAfterInitQtyToInvoice>
1 : Table<Sales Line>.PROCEDURE<OnAfterInitQtyToReceive>
1 : Table<Sales Line>.PROCEDURE<OnAfterInitQtyToShip>
1 : Table<Sales Line>.PROCEDURE<OnAfterInitQtyToShip2>
2 : Table<Sales Line>.PROCEDURE<OnAfterSalesTaxCalculate>
2 : Table<Sales Line>.PROCEDURE<OnAfterSalesTaxCalculateReverse>
1 : Table<Sales Line>.PROCEDURE<OnAfterSetDefaultQuantity>
1 : Table<Sales Line>.PROCEDURE<OnAfterSetReserveWithoutPurchasingCode>
1 : Table<Sales Line>.PROCEDURE<OnAfterShowItemSub>
1 : Table<Sales Line>.PROCEDURE<OnAfterTestStatusOpen>
1 : Table<Sales Line>.PROCEDURE<OnAfterUpdateAmounts>
1 : Table<Sales Line>.PROCEDURE<OnAfterUpdateAmountsDone>
1 : Table<Sales Line>.PROCEDURE<OnAfterUpdateDates>
1 : Table<Sales Line>.PROCEDURE<OnAfterUpdateItemCrossRef>
1 : Table<Sales Line>.PROCEDURE<OnAfterUpdateLineDiscPct>
1 : Table<Sales Line>.PROCEDURE<OnAfterUpdateTotalAmounts>
1 : Table<Sales Line>.PROCEDURE<OnAfterUpdateUnitPrice>
1 : Table<Sales Line>.PROCEDURE<OnAfterUpdateVATAmounts>
1 : Table<Sales Line>.PROCEDURE<OnAfterUpdateVATOnLines>
1 : Table<Sales Line>.PROCEDURE<OnAfterValidateCrossReferenceNo>
1 : Table<Sales Line>.PROCEDURE<OnAfterValidateReturnReasonCode>
1 : Table<Sales Line>.PROCEDURE<OnBeforeAddItems>
1 : Table<Sales Line>.PROCEDURE<OnBeforeAutoAsmToOrder>
1 : Table<Sales Line>.PROCEDURE<OnBeforeAutoReserve>
1 : Table<Sales Line>.PROCEDURE<OnBeforeBlanketOrderLookup>
1 : Table<Sales Line>.PROCEDURE<OnBeforeCalcInvDiscToInvoice>
1 : Table<Sales Line>.PROCEDURE<OnBeforeCalcPlannedDeliveryDate>
1 : Table<Sales Line>.PROCEDURE<OnBeforeCalcVATAmountLines>
1 : Table<Sales Line>.PROCEDURE<OnBeforeCheckAssocPurchOrder>
1 : Table<Sales Line>.PROCEDURE<OnBeforeCheckItemAvailable>
1 : Table<Sales Line>.PROCEDURE<OnBeforeCopyFromItem>
1 : Table<Sales Line>.PROCEDURE<OnBeforeCrossReferenceNoAssign>
1 : Table<Sales Line>.PROCEDURE<OnBeforeGetDefaultBin>
1 : Table<Sales Line>.PROCEDURE<OnBeforeGetUnitCost>
1 : Table<Sales Line>.PROCEDURE<OnBeforeInitQtyToAsm>
1 : Table<Sales Line>.PROCEDURE<OnBeforeIsAsmToOrderRequired>
1 : Table<Sales Line>.PROCEDURE<OnBeforeMaxQtyToInvoice>
1 : Table<Sales Line>.PROCEDURE<OnBeforeMaxQtyToInvoiceBase>
1 : Table<Sales Line>.PROCEDURE<OnBeforeOpenItemTrackingLines>
1 : Table<Sales Line>.PROCEDURE<OnBeforeShowItemSub>
1 : Table<Sales Line>.PROCEDURE<OnBeforeShowReservation>
1 : Table<Sales Line>.PROCEDURE<OnBeforeShowReservationEntries>
1 : Table<Sales Line>.PROCEDURE<OnBeforeTestJobPlanningLine>
1 : Table<Sales Line>.PROCEDURE<OnBeforeTestStatusOpen>
1 : Table<Sales Line>.PROCEDURE<OnBeforeUpdateLineDiscPct>
1 : Table<Sales Line>.PROCEDURE<OnBeforeUpdatePrepmtAmounts>
1 : Table<Sales Line>.PROCEDURE<OnBeforeUpdatePrepmtSetupFields>
1 : Table<Sales Line>.PROCEDURE<OnBeforeUpdateUnitPrice>
1 : Table<Sales Line>.PROCEDURE<OnBeforeUpdateVATAmounts>
1 : Table<Sales Line>.PROCEDURE<OnBeforeValidateReturnReasonCode>
2 : Table<Sales Line>.PROCEDURE<OnBeforeVerifyReservedQty>
1 : Table<Sales Line>.PROCEDURE<OnCalcShipmentDateOnPlannedShipmentDate>
1 : Table<Sales Line>.PROCEDURE<OnCheckWarehouseOnBeforeShowDialog>
1 : Table<Sales Line>.PROCEDURE<OnCopyFromItemOnAfterCheck>
1 : Table<Sales Line>.PROCEDURE<OnCrossReferenceNoLookupOnBeforeValidateUnitPrice>
2 : Table<Sales Line>.PROCEDURE<OnGetDeferralPostDate>
1 : Table<Sales Line>.PROCEDURE<OnInitQtyToShip2OnBeforeCalcInvDiscToInvoice>
1 : Table<Sales Line>.PROCEDURE<OnShowItemChargeAssgntOnBeforeCalcItemCharge>
1 : Table<Sales Line>.PROCEDURE<OnUpdateAmountOnBeforeCheckCreditLimit>
1 : Table<Sales Line>.PROCEDURE<OnUpdateUnitPriceOnBeforeFindPrice>
1 : Table<Sales Line>.PROCEDURE<OnValidateDescriptionOnBeforeCannotFindDescrError>
1 : Table<Sales Line>.PROCEDURE<OnValidateLocationCodeOnBeforeSetShipmentDate>
1 : Table<Sales Line>.PROCEDURE<OnValidateNoOnAfterUpdateUnitPrice>
1 : Table<Sales Line>.PROCEDURE<OnValidateNoOnAfterVerifyChange>
1 : Table<Sales Line>.PROCEDURE<OnValidateNoOnBeforeInitRec>
1 : Table<Sales Line>.PROCEDURE<OnValidateNoOnBeforeUpdateDates>
1 : Table<Sales Line>.PROCEDURE<OnValidateNoOnCopyFromTempSalesLine>
1 : Table<Sales Line>.PROCEDURE<OnValidateQtyToReturnAfterInitQty>
1 : Table<Sales Line>.PROCEDURE<OnValidateQtyToShipAfterInitQty>
1 : Table<Sales Line>.PROCEDURE<OnValidateQuantityOnAfterCalcBaseQty>
1 : Table<Sales Line>.PROCEDURE<OnValidateQuantityOnBeforeGetUnitCost>
1 : Table<Sales Line>.PROCEDURE<OnValidateTypeOnAfterCheckItem>
1 : Table<Sales Line>.PROCEDURE<OnValidateTypeOnCopyFromTempSalesLine>
1 : Table<Sales Line>.PROCEDURE<OnValidateVariantCodeOnAfterChecks>
1 : Table<Sales Line>.PROCEDURE<OnValidateVATProdPostingGroupOnBeforeCheckVATCalcType>
1 : Table<Excel Buffer>.PROCEDURE<OnBeforeParseCellValue>
1 : Table<Purchase Header>.PROCEDURE<OnAfterAddShipToAddress>
1 : Table<Purchase Header>.PROCEDURE<OnAfterAppliesToDocNoOnLookup>
1 : Table<Purchase Header>.PROCEDURE<OnAfterChangePricesIncludingVAT>
1 : Table<Purchase Header>.PROCEDURE<OnAfterCheckBuyFromVendor>
1 : Table<Purchase Header>.PROCEDURE<OnAfterCheckPayToVendor>
1 : Table<Purchase Header>.PROCEDURE<OnAfterConfirmPurchPrice>
1 : Table<Purchase Header>.PROCEDURE<OnAfterCopyBuyFromVendorAddressFieldsFromVendor>
1 : Table<Purchase Header>.PROCEDURE<OnAfterCopyBuyFromVendorFieldsFromVendor>
1 : Table<Purchase Header>.PROCEDURE<OnAfterCopyPayToVendorAddressFieldsFromVendor>
1 : Table<Purchase Header>.PROCEDURE<OnAfterCopyShipToVendorAddressFieldsFromVendor>
1 : Table<Purchase Header>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Purchase Header>.PROCEDURE<OnAfterDeleteAllTempPurchLines>
1 : Table<Purchase Header>.PROCEDURE<OnAfterGetNoSeriesCode>
1 : Table<Purchase Header>.PROCEDURE<OnAfterGetPostingNoSeriesCode>
1 : Table<Purchase Header>.PROCEDURE<OnAfterGetPrepaymentPostingNoSeriesCode>
1 : Table<Purchase Header>.PROCEDURE<OnAfterInitNoSeries>
1 : Table<Purchase Header>.PROCEDURE<OnAfterInitRecord>
1 : Table<Purchase Header>.PROCEDURE<OnAfterRecreatePurchLine>
1 : Table<Purchase Header>.PROCEDURE<OnAfterSetShipToForSpecOrder>
1 : Table<Purchase Header>.PROCEDURE<OnAfterTestNoSeries>
1 : Table<Purchase Header>.PROCEDURE<OnAfterTestStatusOpen>
1 : Table<Purchase Header>.PROCEDURE<OnAfterTransferExtendedTextForPurchaseLineRecreation>
1 : Table<Purchase Header>.PROCEDURE<OnAfterUpdateBuyFromCont>
1 : Table<Purchase Header>.PROCEDURE<OnAfterUpdateBuyFromVend>
1 : Table<Purchase Header>.PROCEDURE<OnAfterUpdateCurrencyFactor>
1 : Table<Purchase Header>.PROCEDURE<OnAfterUpdatePayToCont>
1 : Table<Purchase Header>.PROCEDURE<OnAfterUpdatePayToVend>
1 : Table<Purchase Header>.PROCEDURE<OnAfterUpdatePurchLines>
2 : Table<Purchase Header>.PROCEDURE<OnAfterUpdateShipToAddress>
1 : Table<Purchase Header>.PROCEDURE<OnAfterValidateShortcutDimCode>
1 : Table<Purchase Header>.PROCEDURE<OnBeforeInitInsert>
1 : Table<Purchase Header>.PROCEDURE<OnBeforeInitRecord>
1 : Table<Purchase Header>.PROCEDURE<OnBeforeIsCreditDocType>
1 : Table<Purchase Header>.PROCEDURE<OnBeforeRecreatePurchLines>
1 : Table<Purchase Header>.PROCEDURE<OnBeforeSetSecurityFilterOnRespCenter>
1 : Table<Purchase Header>.PROCEDURE<OnBeforeTestNoSeries>
1 : Table<Purchase Header>.PROCEDURE<OnBeforeTestStatusOpen>
1 : Table<Purchase Header>.PROCEDURE<OnBeforeUpdateAllLineDim>
1 : Table<Purchase Header>.PROCEDURE<OnBeforeUpdateCurrencyFactor>
1 : Table<Purchase Header>.PROCEDURE<OnBeforeUpdateLocationCode>
1 : Table<Purchase Header>.PROCEDURE<OnBeforeUpdatePurchLinesByFieldNo>
3 : Table<Purchase Header>.PROCEDURE<OnCheckPurchasePostRestrictions>
1 : Table<Purchase Header>.PROCEDURE<OnCheckPurchaseReleaseRestrictions>
1 : Table<Purchase Header>.PROCEDURE<OnCreateDimOnBeforeUpdateLines>
1 : Table<Purchase Header>.PROCEDURE<OnInitInsertOnBeforeInitRecord>
1 : Table<Purchase Header>.PROCEDURE<OnRecreatePurchLinesOnAfterValidateType>
1 : Table<Purchase Header>.PROCEDURE<OnRecreatePurchLinesOnBeforeConfirm>
1 : Table<Purchase Header>.PROCEDURE<OnRecreatePurchLinesOnBeforeInsertPurchLine>
1 : Table<Purchase Header>.PROCEDURE<OnRecreatePurchLinesOnBeforeTempPurchLineInsert>
1 : Table<Purchase Header>.PROCEDURE<OnUpdatePurchLinesByChangedFieldName>
1 : Table<Purchase Header>.PROCEDURE<OnValidateBuyFromVendorNoBeforeRecreateLines>
2 : Table<Purchase Header>.PROCEDURE<OnValidatePaymentTermsCodeOnBeforeCalcDueDate>
2 : Table<Purchase Header>.PROCEDURE<OnValidatePaymentTermsCodeOnBeforeCalcPmtDiscDate>
1 : Table<Purchase Header>.PROCEDURE<OnValidatePaytoVendorNoBeforeRecreateLines>
1 : Table<Purchase Header>.PROCEDURE<OnValidatePurchaseHeaderPayToVendorNo>
1 : Table<VAT Registration No. Format>.PROCEDURE<OnBeforeCheckContact>
1 : Table<VAT Registration No. Format>.PROCEDURE<OnBeforeCheckCust>
1 : Table<VAT Registration No. Format>.PROCEDURE<OnBeforeCheckVend>
1 : Table<VAT Registration No. Format>.PROCEDURE<OnBeforeTest>
1 : Table<VAT Registration No. Format>.PROCEDURE<OnTestTable>
1 : Table<CV Ledger Entry Buffer>.PROCEDURE<OnAfterCopyFromCustLedgerEntry>
1 : Table<CV Ledger Entry Buffer>.PROCEDURE<OnAfterCopyFromEmplLedgerEntry>
1 : Table<CV Ledger Entry Buffer>.PROCEDURE<OnAfterCopyFromVendLedgerEntry>
1 : Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<OnAfterCopyFromCVLedgEntryBuf>
1 : Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<OnAfterCopyFromGenJnlLine>
1 : Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<OnAfterCopyPostingGroupsFromVATEntry>
1 : Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<OnAfterInitFromGenJnlLine>
1 : Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<OnBeforeCreateDtldCVLedgEntryBuf>
1 : Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<OnBeforeInsertDtldCVLedgEntry>
1 : Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<OnInsertDtldCVLedgEntryOnBeforeInsert>
1 : Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<OnInsertDtldCVLedgEntryOnBeforeModify>
1 : Table<Purchase Line>.PROCEDURE<OnAfterAssignFieldsForNo>
1 : Table<Purchase Line>.PROCEDURE<OnAfterAssignFixedAssetValues>
1 : Table<Purchase Line>.PROCEDURE<OnAfterAssignGLAccountValues>
1 : Table<Purchase Line>.PROCEDURE<OnAfterAssignHeaderValues>
1 : Table<Purchase Line>.PROCEDURE<OnAfterAssignItemChargeValues>
1 : Table<Purchase Line>.PROCEDURE<OnAfterAssignItemUOM>
1 : Table<Purchase Line>.PROCEDURE<OnAfterAssignItemValues>
1 : Table<Purchase Line>.PROCEDURE<OnAfterAssignStdTxtValues>
1 : Table<Purchase Line>.PROCEDURE<OnAfterBlanketOrderLookup>
1 : Table<Purchase Line>.PROCEDURE<OnAfterCalcLineAmount>
1 : Table<Purchase Line>.PROCEDURE<OnAfterCalcVATAmountLines>
1 : Table<Purchase Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Purchase Line>.PROCEDURE<OnAfterCreateTempJobJnlLine>
1 : Table<Purchase Line>.PROCEDURE<OnAfterFilterLinesWithItemToPlan>
1 : Table<Purchase Line>.PROCEDURE<OnAfterGetDeferralAmount>
1 : Table<Purchase Line>.PROCEDURE<OnAfterGetItem>
1 : Table<Purchase Line>.PROCEDURE<OnAfterGetItemTranslation>
1 : Table<Purchase Line>.PROCEDURE<OnAfterGetLineAmountToHandle>
1 : Table<Purchase Line>.PROCEDURE<OnAfterGetPurchHeader>
1 : Table<Purchase Line>.PROCEDURE<OnAfterInitHeaderDefaults>
1 : Table<Purchase Line>.PROCEDURE<OnAfterInitOutstandingAmount>
1 : Table<Purchase Line>.PROCEDURE<OnAfterInitOutstandingQty>
1 : Table<Purchase Line>.PROCEDURE<OnAfterInitQtyToInvoice>
1 : Table<Purchase Line>.PROCEDURE<OnAfterInitQtyToReceive>
1 : Table<Purchase Line>.PROCEDURE<OnAfterInitQtyToShip>
2 : Table<Purchase Line>.PROCEDURE<OnAfterSalesTaxCalculate>
2 : Table<Purchase Line>.PROCEDURE<OnAfterSalesTaxCalculateReverse>
1 : Table<Purchase Line>.PROCEDURE<OnAfterSetDefaultQuantity>
1 : Table<Purchase Line>.PROCEDURE<OnAfterTestStatusOpen>
1 : Table<Purchase Line>.PROCEDURE<OnAfterUpdateAmounts>
1 : Table<Purchase Line>.PROCEDURE<OnAfterUpdateAmountsDone>
1 : Table<Purchase Line>.PROCEDURE<OnAfterUpdateDirectUnitCost>
1 : Table<Purchase Line>.PROCEDURE<OnAfterUpdateJobPrices>
1 : Table<Purchase Line>.PROCEDURE<OnAfterUpdateSalesCost>
1 : Table<Purchase Line>.PROCEDURE<OnAfterUpdateTotalAmounts>
1 : Table<Purchase Line>.PROCEDURE<OnAfterUpdateUnitCost>
1 : Table<Purchase Line>.PROCEDURE<OnAfterUpdateVATAmounts>
1 : Table<Purchase Line>.PROCEDURE<OnAfterUpdateVATOnLines>
1 : Table<Purchase Line>.PROCEDURE<OnAfterUpdateWithWarehouseReceive>
1 : Table<Purchase Line>.PROCEDURE<OnAfterValidateCrossReferenceNo>
1 : Table<Purchase Line>.PROCEDURE<OnBeforeAddItems>
1 : Table<Purchase Line>.PROCEDURE<OnBeforeBlanketOrderLookup>
1 : Table<Purchase Line>.PROCEDURE<OnBeforeCalcInvDiscToInvoice>
1 : Table<Purchase Line>.PROCEDURE<OnBeforeCalcVATAmountLines>
1 : Table<Purchase Line>.PROCEDURE<OnBeforeCopyFromItem>
1 : Table<Purchase Line>.PROCEDURE<OnBeforeCreateTempJobJnlLine>
1 : Table<Purchase Line>.PROCEDURE<OnBeforeGetDefaultBin>
1 : Table<Purchase Line>.PROCEDURE<OnBeforeJobSetCurrencyFactor>
1 : Table<Purchase Line>.PROCEDURE<OnBeforeJobTaskIsSet>
1 : Table<Purchase Line>.PROCEDURE<OnBeforeMaxQtyToInvoice>
1 : Table<Purchase Line>.PROCEDURE<OnBeforeMaxQtyToInvoiceBase>
1 : Table<Purchase Line>.PROCEDURE<OnBeforeOpenItemTrackingLines>
1 : Table<Purchase Line>.PROCEDURE<OnBeforeShowReservation>
1 : Table<Purchase Line>.PROCEDURE<OnBeforeShowReservationEntries>
1 : Table<Purchase Line>.PROCEDURE<OnBeforeTestStatusOpen>
1 : Table<Purchase Line>.PROCEDURE<OnBeforeUpdateDirectUnitCost>
1 : Table<Purchase Line>.PROCEDURE<OnBeforeUpdatePrepmtAmounts>
1 : Table<Purchase Line>.PROCEDURE<OnBeforeUpdatePrepmtSetupFields>
1 : Table<Purchase Line>.PROCEDURE<OnBeforeUpdateSalesCost>
1 : Table<Purchase Line>.PROCEDURE<OnBeforeUpdateVATAmounts>
2 : Table<Purchase Line>.PROCEDURE<OnBeforeVerifyReservedQty>
1 : Table<Purchase Line>.PROCEDURE<OnCopyFromItemOnAfterCheck>
1 : Table<Purchase Line>.PROCEDURE<OnCrossReferenceNoLookupOnBeforeValidateDirectUnitCost>
1 : Table<Purchase Line>.PROCEDURE<OnUpdateDirectUnitCostOnBeforeFindPrice>
1 : Table<Purchase Line>.PROCEDURE<OnValidateCrossReferenceNoOnBeforeAssignNo>
1 : Table<Purchase Line>.PROCEDURE<OnValidateExpectedReceiptDateOnBeforeCheckDateConflict>
1 : Table<Purchase Line>.PROCEDURE<OnValidateNoOnAfterAssignQtyFromXRec>
1 : Table<Purchase Line>.PROCEDURE<OnValidateNoOnAfterChecks>
1 : Table<Purchase Line>.PROCEDURE<OnValidateNoOnAfterVerifyChange>
1 : Table<Purchase Line>.PROCEDURE<OnValidateNoOnBeforeInitRec>
1 : Table<Purchase Line>.PROCEDURE<OnValidateNoOnCopyFromTempPurchLine>
1 : Table<Purchase Line>.PROCEDURE<OnValidateQtyToReceiveOnAfterCheck>
1 : Table<Purchase Line>.PROCEDURE<OnValidateQtyToReceiveOnAfterInitQty>
1 : Table<Purchase Line>.PROCEDURE<OnValidateQuantityOnBeforeDropShptCheck>
1 : Table<Purchase Line>.PROCEDURE<OnValidateTypeOnAfterCheckItem>
1 : Table<Purchase Line>.PROCEDURE<OnValidateTypeOnCopyFromTempPurchLine>
1 : Table<Purchase Line>.PROCEDURE<OnValidateVariantCodeOnAfterValidationChecks>
1 : Table<Purchase Line>.PROCEDURE<OnValidateVATProdPostingGroupOnBeforeCheckVATCalcType>
1 : Table<Currency>.PROCEDURE<OnAfterInitRoundingPrecision>
1 : Table<Currency>.PROCEDURE<OnBeforeGetGainLossAccount>
1 : Table<IC Outbox Transaction>.PROCEDURE<OnBeforeOutboxCheckSend>
1 : Table<IC Inbox Transaction>.PROCEDURE<OnAfterInboxCheckAccept>
1 : Table<IC Inbox Transaction>.PROCEDURE<OnBeforeInboxCheckAccept>
1 : Table<IC Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
1 : Table<Purch. Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
1 : Table<Purch. Comment Line>.PROCEDURE<OnBeforeCopyComments>
1 : Table<Sales Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
1 : Table<Sales Comment Line>.PROCEDURE<OnBeforeCopyComments>
1 : Table<Approval Entry>.PROCEDURE<OnAfterGetRecordDetails>
1 : Table<Workflow Webhook Subscription>.PROCEDURE<OnFindTaskSchedulerAllowed>
1 : Table<Job Queue Entry>.PROCEDURE<OnAfterReschedule>
1 : Table<Job Queue Entry>.PROCEDURE<OnBeforeClearServiceValues>
1 : Table<Job Queue Entry>.PROCEDURE<OnBeforeInsertLogEntry>
1 : Table<Job Queue Entry>.PROCEDURE<OnBeforeModifyLogEntry>
1 : Table<Job Queue Entry>.PROCEDURE<OnBeforeScheduleTask>
1 : Table<Job Queue Entry>.PROCEDURE<OnBeforeSetStatusValue>
1 : Table<Job Queue Entry>.PROCEDURE<OnFindingIfJobNeedsToBeRun>
1 : Table<Job Queue Log Entry>.PROCEDURE<OnBeforeMarkAsError>
1 : Table<Dimension Set Entry>.PROCEDURE<OnBeforeGetDimensionSetID>
1 : Table<Change Global Dim. Log Entry>.PROCEDURE<OnFindingScheduledTask>
1 : Table<Invoice Post. Buffer>.PROCEDURE<OnAfterInvPostBufferModify>
1 : Table<Invoice Post. Buffer>.PROCEDURE<OnAfterInvPostBufferPreparePurchase>
1 : Table<Invoice Post. Buffer>.PROCEDURE<OnAfterInvPostBufferPrepareSales>
1 : Table<Invoice Post. Buffer>.PROCEDURE<OnAfterInvPostBufferPrepareService>
1 : Table<Invoice Post. Buffer>.PROCEDURE<OnAfterInvPostBufferUpdate>
1 : Table<Invoice Post. Buffer>.PROCEDURE<OnBeforeInvPostBufferModify>
1 : Table<Invoice Post. Buffer>.PROCEDURE<OnBeforeInvPostBufferUpdate>
1 : Table<Contact>.PROCEDURE<OnAfterGetSalutation>
1 : Table<Contact>.PROCEDURE<OnAfterInheritCompanyToPersonData>
1 : Table<Contact>.PROCEDURE<OnAfterModifyBillToCustomerNo>
1 : Table<Contact>.PROCEDURE<OnAfterModifySellToCustomerNo>
1 : Table<Contact>.PROCEDURE<OnAfterSetTypeForContact>
1 : Table<Contact>.PROCEDURE<OnAfterUpdateQuotesForContact>
1 : Table<Contact>.PROCEDURE<OnAfterValidateCity>
1 : Table<Contact>.PROCEDURE<OnAfterValidatePostCode>
1 : Table<Contact>.PROCEDURE<OnAfterVendorInsert>
1 : Table<Contact>.PROCEDURE<OnBeforeApplyCompanyChangeToPerson>
1 : Table<Contact>.PROCEDURE<OnBeforeCheckCompanyNo>
1 : Table<Contact>.PROCEDURE<OnBeforeChooseCustomerTemplate>
1 : Table<Contact>.PROCEDURE<OnBeforeCustomerInsert>
1 : Table<Contact>.PROCEDURE<OnBeforeDuplicateCheck>
1 : Table<Contact>.PROCEDURE<OnBeforeFindCustomerTemplate>
1 : Table<Contact>.PROCEDURE<OnBeforeIsUpdateNeeded>
1 : Table<Contact>.PROCEDURE<OnBeforeVATRegistrationValidation>
1 : Table<Contact>.PROCEDURE<OnBeforeVendorInsert>
1 : Table<Contact>.PROCEDURE<OnCreateCustomerOnBeforeCustomerModify>
1 : Table<Contact>.PROCEDURE<OnCreateCustomerOnBeforeUpdateQuotes>
1 : Table<Contact>.PROCEDURE<OnCreateCustomerOnTransferFieldsFromTemplate>
1 : Table<Rlshp. Mgt. Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
1 : Table<Interaction Log Entry>.PROCEDURE<OnAfterCopyFromSegment>
1 : Table<Interaction Log Entry>.PROCEDURE<OnBeforeOpenAttachment>
1 : Table<Interaction Log Entry>.PROCEDURE<OnOpenAttachmentOnBeforeShowAttachment>
1 : Table<Segment Header>.PROCEDURE<OnAfterUpdateSegHeader>
1 : Table<Segment Header>.PROCEDURE<OnAfterUpdateSegLinesByFieldNo>
1 : Table<Segment Header>.PROCEDURE<OnBeforeUpdateSegHeader>
1 : Table<Segment Line>.PROCEDURE<OnAfterCheckStatus>
1 : Table<Segment Line>.PROCEDURE<OnAfterCopyFromInteractionLogEntry>
1 : Table<Segment Line>.PROCEDURE<OnAfterCreateFromTask>
1 : Table<Segment Line>.PROCEDURE<OnAfterFinishWizard>
1 : Table<Segment Line>.PROCEDURE<OnAfterInitLine>
1 : Table<Segment Line>.PROCEDURE<OnBeforeCheckStatus>
1 : Table<Segment Line>.PROCEDURE<OnBeforeStartWizard>
1 : Table<Segment Line>.PROCEDURE<OnBeforeStartWizard2>
1 : Table<Segment Line>.PROCEDURE<OnCreateInteractionFromContactOnBeforeStartWizard>
1 : Table<Segment Line>.PROCEDURE<OnCreateInteractionFromInteractLogEntryOnBeforeStartWizard>
1 : Table<Segment Line>.PROCEDURE<OnCreateInteractionFromOppOnBeforeStartWizard>
1 : Table<Segment Line>.PROCEDURE<OnCreateInteractionFromSalespersonOnBeforeStartWizard>
1 : Table<Segment Line>.PROCEDURE<OnCreateInteractionFromTaskOnBeforeStartWizard>
1 : Table<To-do>.PROCEDURE<OnAfterSetFilterFromTask>
1 : Table<To-do>.PROCEDURE<OnBeforeCreateSubTask>
1 : Table<To-do>.PROCEDURE<OnBeforeInsertTaskAndRelatedData>
1 : Table<To-do>.PROCEDURE<OnBeforeReassignSalespersonTaskToTeam>
1 : Table<To-do>.PROCEDURE<OnBeforeReassignTeamTaskToSalesperson>
1 : Table<To-do>.PROCEDURE<OnCreateTaskFromInteractLogEntryOnBeforeStartWizard>
1 : Table<To-do>.PROCEDURE<OnCreateTaskFromSalesHeaderOnBeforeStartWizard>
1 : Table<To-do>.PROCEDURE<OnCreateTaskFromSalesHeaderoOnBeforeStartWizard>
1 : Table<To-do>.PROCEDURE<OnCreateTaskFromTaskOnBeforeStartWizard>
1 : Table<Inter. Log Entry Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
1 : Table<Employee>.PROCEDURE<OnBeforeCheckBlockedEmployee>
1 : Table<Employee>.PROCEDURE<OnBeforeGetFullName>
1 : Table<Human Resource Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
1 : Table<HR Confidential Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
1 : Table<Employee Ledger Entry>.PROCEDURE<OnAfterCopyEmplLedgerEntryFromCVLedgEntryBuffer>
1 : Table<Employee Ledger Entry>.PROCEDURE<OnAfterCopyEmployeeLedgerEntryFromGenJnlLine>
1 : Table<CRM Connection Setup>.PROCEDURE<OnGetDefaultCRMConnection>
1 : Table<CRM Connection Setup>.PROCEDURE<OnReadingCRMData>
1 : Table<Integration Synch. Job>.PROCEDURE<OnCanBeRemoved>
1 : Table<Integration Synch. Job Errors>.PROCEDURE<OnForceSynchronizeDataIntegration>
1 : Table<Integration Synch. Job Errors>.PROCEDURE<OnIsDataIntegrationEnabled>
1 : Table<Item Unit of Measure>.PROCEDURE<OnAfterCalcCubage>
1 : Table<Item Unit of Measure>.PROCEDURE<OnAfterCalcWeight>
1 : Table<Production Order>.PROCEDURE<OnAdjustStartEndingDateOnBeforeSetDueDate>
1 : Table<Production Order>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Production Order>.PROCEDURE<OnAfterOnDelete>
1 : Table<Production Order>.PROCEDURE<OnAfterUpdateDateTime>
1 : Table<Production Order>.PROCEDURE<OnBeforeAssignFamily>
1 : Table<Production Order>.PROCEDURE<OnBeforeAssignItemNo>
1 : Table<Production Order>.PROCEDURE<OnBeforeAssignSalesHeader>
1 : Table<Production Order>.PROCEDURE<OnBeforeDeleteFnshdProdOrderRelations>
1 : Table<Production Order>.PROCEDURE<OnBeforeDeleteRelations>
1 : Table<Production Order>.PROCEDURE<OnBeforeMultiLevelMessage>
1 : Table<Production Order>.PROCEDURE<OnBeforeUpdateProdOrderLineDueDate>
1 : Table<Prod. Order Line>.PROCEDURE<OnAfterCheckEndingDate>
1 : Table<Prod. Order Line>.PROCEDURE<OnAfterCopyFromItem>
1 : Table<Prod. Order Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Prod. Order Line>.PROCEDURE<OnAfterDeleteProdOrderRtngLines>
1 : Table<Prod. Order Line>.PROCEDURE<OnAfterOnDelete>
2 : Table<Prod. Order Line>.PROCEDURE<OnAfterRecalculate>
1 : Table<Prod. Order Line>.PROCEDURE<OnAfterUpdateDateTime>
1 : Table<Prod. Order Line>.PROCEDURE<OnBeforeDeleteProdOrderRtngLines>
1 : Table<Prod. Order Line>.PROCEDURE<OnBeforeDeleteRelations>
1 : Table<Prod. Order Line>.PROCEDURE<OnDeleteRelationsNotCalledFromComponentFilter>
1 : Table<Prod. Order Line>.PROCEDURE<OnDeleteRelationsNotCalledFromComponentInitFields>
1 : Table<Prod. Order Line>.PROCEDURE<OnUpdateProdOrderCompOnAfterFind>
1 : Table<Prod. Order Line>.PROCEDURE<OnUpdateProdOrderCompOnBeforeModify>
1 : Table<Prod. Order Component>.PROCEDURE<OnAfterAutoReserve>
1 : Table<Prod. Order Component>.PROCEDURE<OnAfterCopyFromPlanningComp>
1 : Table<Prod. Order Component>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Prod. Order Component>.PROCEDURE<OnAfterProdOrderNeeds>
1 : Table<Prod. Order Component>.PROCEDURE<OnAfterRoundExpectedQuantity>
1 : Table<Prod. Order Component>.PROCEDURE<OnAfterUpdateUnitCost>
1 : Table<Prod. Order Component>.PROCEDURE<OnBeforeAdjustQtyToQtyPicked>
1 : Table<Prod. Order Component>.PROCEDURE<OnBeforeAutoReserve>
1 : Table<Prod. Order Component>.PROCEDURE<OnBeforeBinCodeOnLookup>
1 : Table<Prod. Order Component>.PROCEDURE<OnDeleteOnBeforeGetProdOrderLine>
1 : Table<Prod. Order Component>.PROCEDURE<OnGetNeededQtyAfterCalcActConsumptionQty>
1 : Table<Prod. Order Component>.PROCEDURE<OnGetNeededQtyAfterCalcCompQtyBase>
1 : Table<Prod. Order Component>.PROCEDURE<OnGetNeededQtyOnAfterLastOperationFound>
1 : Table<Prod. Order Component>.PROCEDURE<OnGetNeededQtyOnBeforeAddOutputQtyBase>
1 : Table<Prod. Order Component>.PROCEDURE<OnValidateCalculationFormulaOnAfterSetQuantity>
1 : Table<Prod. Order Component>.PROCEDURE<OnValidateExpectedQtyBaseOnAfterCalcActConsumptionQty>
1 : Table<Prod. Order Component>.PROCEDURE<OnValidateExpectedQuantityOnAfterCalcActConsumptionQty>
1 : Table<Prod. Order Component>.PROCEDURE<OnValidateItemNoOnBeforeGetDefaultBin>
1 : Table<Prod. Order Component>.PROCEDURE<OnValidateRoutingLinkCodeBeforeValidateDueDate>
1 : Table<Prod. Order Routing Line>.PROCEDURE<OnAfterCalcStartingEndingDates>
1 : Table<Prod. Order Routing Line>.PROCEDURE<OnAfterFillDefaultLocationAndBins>
1 : Table<Prod. Order Routing Line>.PROCEDURE<OnAfterMachineCtrTransferFields>
1 : Table<Prod. Order Routing Line>.PROCEDURE<OnAfterSetRecalcStatus>
1 : Table<Prod. Order Routing Line>.PROCEDURE<OnAfterTransferFromStdTaskComment>
1 : Table<Prod. Order Routing Line>.PROCEDURE<OnAfterTransferFromStdTaskPersonnel>
1 : Table<Prod. Order Routing Line>.PROCEDURE<OnAfterTransferFromStdTaskQltyMeasure>
1 : Table<Prod. Order Routing Line>.PROCEDURE<OnAfterTransferFromStdTaskTool>
1 : Table<Prod. Order Routing Line>.PROCEDURE<OnAfterUpdateDateTime>
1 : Table<Prod. Order Routing Line>.PROCEDURE<OnAfterValidateNo>
1 : Table<Prod. Order Routing Line>.PROCEDURE<OnAfterWorkCenterTransferFields>
1 : Table<Prod. Order Routing Line>.PROCEDURE<OnBeforeCalcStartingEndingDates>
1 : Table<Prod. Order Routing Line>.PROCEDURE<OnBeforeDeleteRelations>
1 : Table<Prod. Order Routing Line>.PROCEDURE<OnBeforeFillDefaultLocationAndBins>
1 : Table<Prod. Order Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
1 : Table<Prod. Order Comment Line>.PROCEDURE<OnBeforeCheckFinishedOrder>
1 : Table<Prod. Order Rtng Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
1 : Table<Picture Entity>.PROCEDURE<OnDeletePictureElseCase>
1 : Table<Picture Entity>.PROCEDURE<OnGetDefaultMediaDescriptionElseCase>
1 : Table<Picture Entity>.PROCEDURE<OnGetMediaIDElseCase>
1 : Table<Picture Entity>.PROCEDURE<OnSavePictureElseCase>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromAsmOrder>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromAsmOrderLine>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromForecast>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromInboundTransOrder>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromJobNeed>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromOutboundTransfer>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromPlanProdComp>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromProdComp>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromProdOrder>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromPurchase>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromPurchReturn>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromReqLine>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromReqLineTransDemand>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromSales>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromSalesBlanketOrder>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromSalesReturn>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromServiceNeed>
1 : Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferInventoryQty>
1 : Table<Inventory Page Data>.PROCEDURE<OnUpdateInventorysOnAfterCalculatingInventorys>
1 : Table<FA Ledger Entry>.PROCEDURE<OnAfterConvertPostingType>
1 : Table<FA Ledger Entry>.PROCEDURE<OnAfterMoveToFAJnlLine>
1 : Table<FA Ledger Entry>.PROCEDURE<OnAfterMoveToGenJnlLine>
1 : Table<FA Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<FA Journal Line>.PROCEDURE<OnConvertToLedgEntryCase>
1 : Table<FA Reclass. Journal Line>.PROCEDURE<OnAfterSetUpNewLine>
1 : Table<Insurance Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<G/L Account Category>.PROCEDURE<OnBeforeGetTotaling>
1 : Table<G/L Account Category>.PROCEDURE<OnGetBalanceOnAfterGetTotaling>
1 : Table<Stockkeeping Unit>.PROCEDURE<OnAfterCopyFromItem>
1 : Table<Stockkeeping Unit>.PROCEDURE<OnBeforeValidateStandardCost>
1 : Table<Stockkeeping Unit Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
1 : Table<Item Cross Reference>.PROCEDURE<OnAfterCreateItemVendor>
1 : Table<Item Cross Reference>.PROCEDURE<OnBeforeItemVendorDelete>
1 : Table<Transfer Header>.PROCEDURE<OnAfterCheckBeforePost>
1 : Table<Transfer Header>.PROCEDURE<OnAfterGetNoSeriesCode>
1 : Table<Transfer Header>.PROCEDURE<OnAfterInitRecord>
1 : Table<Transfer Header>.PROCEDURE<OnBeforeGetNoSeriesCode>
1 : Table<Transfer Header>.PROCEDURE<OnBeforeTransLineDeleteAll>
1 : Table<Transfer Header>.PROCEDURE<OnUpdateTransLines>
1 : Table<Transfer Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Transfer Line>.PROCEDURE<OnAfterGetTransHeader>
1 : Table<Transfer Line>.PROCEDURE<OnAfterResetPostedQty>
1 : Table<Transfer Line>.PROCEDURE<OnValidateQuantityOnBeforeTransLineVerifyChange>
1 : Table<Transfer Shipment Header>.PROCEDURE<OnAfterCopyFromTransferHeader>
1 : Table<Transfer Shipment Line>.PROCEDURE<OnAfterCopyFromTransferLine>
1 : Table<Transfer Receipt Header>.PROCEDURE<OnAfterCopyFromTransferHeader>
1 : Table<Transfer Receipt Line>.PROCEDURE<OnAfterCopyFromTransferLine>
1 : Table<Inventory Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
1 : Table<Warehouse Request>.PROCEDURE<OnAfterDeleteRequest>
1 : Table<Warehouse Activity Header>.PROCEDURE<OnAfterGetNoSeriesCode>
1 : Table<Warehouse Activity Header>.PROCEDURE<OnBeforeErrorIfUserIsNotWhseEmployee>
1 : Table<Warehouse Activity Header>.PROCEDURE<OnBeforeGetUserLocation>
1 : Table<Warehouse Activity Header>.PROCEDURE<OnBeforeSortWhseDoc>
1 : Table<Warehouse Activity Header>.PROCEDURE<OnCaseSortWhseDoc>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnAfterAutofillQtyToHandleLine>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnAfterClearTracking>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnAfterClearTrackingFilter>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnAfterCopyTrackingFromSpec>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnAfterDeleteQtyToHandle>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnAfterInitTrackingSpecFromWhseActivLine>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnAfterLookupTrackingSummary>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnAfterSetTrackingFilter>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnAfterSplitLines>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnAfterTransferFromAssemblyLine>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnAfterTransferFromCompLine>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnAfterTransferFromIntPickLine>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnAfterTransferFromMovWkshLine>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnAfterTransferFromPickWkshLine>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnAfterTransferFromShptLine>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnAfterUpdateQtyToHandleWhseActivLine>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnBeforeAutofillQtyToHandle>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnBeforeCheckWhseDocLine>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnBeforeDeleteQtyToHandle>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnBeforeDeleteRelatedWhseActivLines>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnBeforeDeleteWhseActivLine2>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnBeforeInsertNewWhseActivLine>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnBeforeModifyOldWhseActivLine>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnBeforeSplitLines>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnBeforeValidateQtyToHandle>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnCreateNewUOMLineOnBeforeNewWhseActivLineInsert>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnLookUpTrackingSummaryOnAfterAssistEditTrackingNo>
1 : Table<Warehouse Activity Line>.PROCEDURE<OnLookUpTrackingSummaryOnAfterCheckDataSet>
1 : Table<Warehouse Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
1 : Table<Warehouse Source Filter>.PROCEDURE<OnBeforeSetTableView>
1 : Table<Inventory Posting Setup>.PROCEDURE<OnAfterSuggestSetupAccount>
1 : Table<BOM Buffer>.PROCEDURE<OnTransferFromAsmHeaderCopyFields>
1 : Table<BOM Buffer>.PROCEDURE<OnTransferFromAsmLineCopyFields>
1 : Table<BOM Buffer>.PROCEDURE<OnTransferFromBOMCompCopyFields>
1 : Table<BOM Buffer>.PROCEDURE<OnTransferFromItemCopyFields>
1 : Table<BOM Buffer>.PROCEDURE<OnTransferFromProdCompCopyFields>
1 : Table<BOM Buffer>.PROCEDURE<OnTransferFromProdOrderCompCopyFields>
1 : Table<BOM Buffer>.PROCEDURE<OnTransferFromProdOrderLineCopyFields>
1 : Table<BOM Buffer>.PROCEDURE<OnTransferFromProdRoutingCopyFields>
1 : Table<Phys. Invt. Order Header>.PROCEDURE<OnGetSamePhysInvtOrderLineOnAfterSetFilters>
1 : Table<Phys. Invt. Order Line>.PROCEDURE<OnBeforeShowItemLedgerEntries>
1 : Table<Phys. Invt. Order Line>.PROCEDURE<OnBeforeShowPhysInvtLedgerEntries>
1 : Table<Phys. Invt. Order Line>.PROCEDURE<OnCalcQtyAndLastItemLedgExpectedSetItemLedgEntryFilters>
1 : Table<Phys. Invt. Order Line>.PROCEDURE<OnCalcQtyAndLastItemLedgExpectedSetWhseEntryFilters>
1 : Table<Phys. Invt. Order Line>.PROCEDURE<OnCalcQtyAndTrackLinesExpectedOnBeforeInsertFromWhseEntry>
1 : Table<Phys. Invt. Order Line>.PROCEDURE<OnCalcQtyAndTrackLinesExpectedOnBeforeModifyFromItemLedgEntry>
1 : Table<Phys. Invt. Order Line>.PROCEDURE<OnCalcQtyAndTrackLinesExpectedSetItemLedgEntryFilters>
1 : Table<Phys. Invt. Record Line>.PROCEDURE<OnShowUsedTrackLinesOnAfterInsertFromItemLedgEntry>
1 : Table<Phys. Invt. Record Line>.PROCEDURE<OnShowUsedTrackLinesOnAfterInsertFromWhseEntry>
1 : Table<Phys. Invt. Record Line>.PROCEDURE<OnShowUsedTrackLinesSetItemLedgerEntryFilters>
1 : Table<Phys. Invt. Record Line>.PROCEDURE<OnShowUsedTrackLinesSetWhseEntryFilters>
1 : Table<Phys. Invt. Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
1 : Table<Inventory Adjmt. Entry (Order)>.PROCEDURE<OnAfterGetSingleLevelCosts>
1 : Table<Inventory Adjmt. Entry (Order)>.PROCEDURE<OnAfterSetProdOrderLineTransferFields>
1 : Table<Service Header>.PROCEDURE<OnAfterCopyBillToCustomerFields>
1 : Table<Service Header>.PROCEDURE<OnAfterCopyCustomerFields>
1 : Table<Service Header>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Service Header>.PROCEDURE<OnAfterGetPostingNoSeriesCode>
1 : Table<Service Header>.PROCEDURE<OnAfterInitRecord>
1 : Table<Service Header>.PROCEDURE<OnAfterTransferExtendedTextForServLineRecreation>
1 : Table<Service Header>.PROCEDURE<OnAfterUpdateCust>
1 : Table<Service Header>.PROCEDURE<OnAfterUpdateShipToAddress>
1 : Table<Service Header>.PROCEDURE<OnAfterValidateShortcutDimCode>
1 : Table<Service Header>.PROCEDURE<OnBeforeConfirmUpdateContractNo>
1 : Table<Service Header>.PROCEDURE<OnBeforeGetNoSeries>
1 : Table<Service Header>.PROCEDURE<OnBeforeGetPostingNoSeriesCode>
1 : Table<Service Header>.PROCEDURE<OnBeforeInsertServLineOnServLineRecreation>
1 : Table<Service Header>.PROCEDURE<OnBeforeTestMandatoryFields>
1 : Table<Service Header>.PROCEDURE<OnBeforeTestNoSeries>
1 : Table<Service Header>.PROCEDURE<OnBeforeTestNoSeriesManual>
1 : Table<Service Header>.PROCEDURE<OnBeforeUpdateAllLineDim>
1 : Table<Service Header>.PROCEDURE<OnCreateDimOnBeforeUpdateLines>
1 : Table<Service Header>.PROCEDURE<OnUpdateServLineByChangedFieldName>
1 : Table<Service Item Line>.PROCEDURE<OnAfterAssignItemValues>
1 : Table<Service Item Line>.PROCEDURE<OnAfterSetServItemInfo>
1 : Table<Service Item Line>.PROCEDURE<OnBeforeOnModify>
1 : Table<Service Item Line>.PROCEDURE<OnBeforeUpdateResponseTimeHours>
1 : Table<Service Item Line>.PROCEDURE<OnBeforeValidateSerialNo>
1 : Table<Service Item Line>.PROCEDURE<OnBeforeValidateWarranty>
1 : Table<Service Item Line>.PROCEDURE<OnBeforeValidateWarrantyLabor>
1 : Table<Service Item Line>.PROCEDURE<OnBeforeValidateWarrantyParts>
1 : Table<Service Item Line>.PROCEDURE<OnRecreateServLine>
1 : Table<Service Line>.PROCEDURE<OnAfterAssignGLAccountValues>
1 : Table<Service Line>.PROCEDURE<OnAfterAssignHeaderValues>
1 : Table<Service Line>.PROCEDURE<OnAfterAssignItemValues>
1 : Table<Service Line>.PROCEDURE<OnAfterAssignResourceValues>
1 : Table<Service Line>.PROCEDURE<OnAfterAssignServCostValues>
1 : Table<Service Line>.PROCEDURE<OnAfterAssignServItemValues>
1 : Table<Service Line>.PROCEDURE<OnAfterAssignStdTxtValues>
1 : Table<Service Line>.PROCEDURE<OnAfterCalcLineAmount>
1 : Table<Service Line>.PROCEDURE<OnAfterCalculateDiscount>
1 : Table<Service Line>.PROCEDURE<OnAfterCalcVATAmountLines>
1 : Table<Service Line>.PROCEDURE<OnAfterClearFields>
1 : Table<Service Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Service Line>.PROCEDURE<OnAfterFilterLinesWithItemToPlan>
1 : Table<Service Line>.PROCEDURE<OnAfterGetItemTranslation>
1 : Table<Service Line>.PROCEDURE<OnAfterGetUnitCost>
1 : Table<Service Line>.PROCEDURE<OnAfterInitOutstandingAmount>
1 : Table<Service Line>.PROCEDURE<OnAfterInitQtyToConsume>
1 : Table<Service Line>.PROCEDURE<OnAfterInitQtyToInvoice>
1 : Table<Service Line>.PROCEDURE<OnAfterInitQtyToShip>
1 : Table<Service Line>.PROCEDURE<OnAfterResourseFindCost>
1 : Table<Service Line>.PROCEDURE<OnAfterTestStatusOpen>
1 : Table<Service Line>.PROCEDURE<OnAfterUpdateUnitPrice>
1 : Table<Service Line>.PROCEDURE<OnAfterUpdateVATAmounts>
1 : Table<Service Line>.PROCEDURE<OnAfterUpdateVATOnLines>
1 : Table<Service Line>.PROCEDURE<OnBeforeTestStatusOpen>
1 : Table<Service Line>.PROCEDURE<OnBeforeUpdateUnitPrice>
1 : Table<Service Line>.PROCEDURE<OnBeforeUpdateVATAmounts>
1 : Table<Service Line>.PROCEDURE<OnInitHeaderDefaultsOnAfterAssignLocationCode>
1 : Table<Service Line>.PROCEDURE<OnReplaceServItemOnCopyFromReplacementItem>
1 : Table<Service Line>.PROCEDURE<OnValidateVariantCodeOnAssignItem>
1 : Table<Service Line>.PROCEDURE<OnValidateVariantCodeOnAssignItemVariant>
1 : Table<Service Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
1 : Table<Service Ledger Entry>.PROCEDURE<OnAfterCopyFromServHeader>
1 : Table<Service Ledger Entry>.PROCEDURE<OnAfterCopyFromServLine>
1 : Table<Repair Status>.PROCEDURE<OnReturnStatusCodeElseCase>
1 : Table<Service Item>.PROCEDURE<OnAfterAssignItemValues>
1 : Table<Service Item>.PROCEDURE<OnAfterDeleteServItemComponents>
1 : Table<Service Item>.PROCEDURE<OnBeforeMessageIfServItemLinesExist>
1 : Table<Service Order Allocation>.PROCEDURE<OnBeforeCheckAllocationEntry>
1 : Table<Service Contract Line>.PROCEDURE<OnAfterGetServiceItem>
1 : Table<Service Contract Line>.PROCEDURE<OnAfterSetupNewLine>
1 : Table<Service Contract Line>.PROCEDURE<OnAfterTestStatusOpen>
1 : Table<Service Contract Line>.PROCEDURE<OnBeforeValidateContractExpirationDate>
1 : Table<Service Contract Line>.PROCEDURE<OnBeforeValidateLineDiscountPercent>
1 : Table<Service Contract Header>.PROCEDURE<OnAfterAssistEdit>
1 : Table<Service Contract Header>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Service Contract Header>.PROCEDURE<OnAfterUpdContractChangeLog>
1 : Table<Filed Service Contract Header>.PROCEDURE<OnAfterFileContract>
1 : Table<Service Shipment Line>.PROCEDURE<OnAfterServiceInvLineInsert>
1 : Table<Service Shipment Line>.PROCEDURE<OnBeforeServiceInvLineInsert>
1 : Table<Service Invoice Header>.PROCEDURE<OnBeforePrintRecords>
1 : Table<Standard Service Code>.PROCEDURE<OnBeforeInsertServLine>
1 : Table<Standard Service Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Standard Service Item Gr. Code>.PROCEDURE<OnBeforeInsertServLine>
1 : Table<Document Sending Profile>.PROCEDURE<OnAfterSend>
1 : Table<Document Sending Profile>.PROCEDURE<OnAfterSendVendor>
1 : Table<Document Sending Profile>.PROCEDURE<OnBeforeSend>
1 : Table<Document Sending Profile>.PROCEDURE<OnBeforeSendCustomerRecords>
1 : Table<Document Sending Profile>.PROCEDURE<OnBeforeSendVendor>
1 : Table<Document Sending Profile>.PROCEDURE<OnBeforeSendVendorRecords>
1 : Table<Document Sending Profile>.PROCEDURE<OnBeforeTrySendToEMail>
1 : Table<Document Sending Profile>.PROCEDURE<OnBeforeTrySendToPrinter>
1 : Table<Document Sending Profile>.PROCEDURE<OnCheckElectronicSendingEnabled>
2 : Table<Electronic Document Format>.PROCEDURE<OnDiscoverElectronicFormat>
1 : Table<Merge Duplicates Buffer>.PROCEDURE<OnAfterFindRelatedFields>
1 : Table<Item Entry Relation>.PROCEDURE<OnAfterInitFromTrackingSpec>
1 : Table<Whse. Item Tracking Line>.PROCEDURE<OnAfterCopyTrackingFromItemLedgEntry>
1 : Table<Whse. Item Tracking Line>.PROCEDURE<OnAfterCopyTrackingFromReservEntry>
1 : Table<Whse. Item Tracking Line>.PROCEDURE<OnAfterInitQtyToHandle>
1 : Table<Whse. Item Tracking Line>.PROCEDURE<OnAfterLookUpTrackingSummary>
1 : Table<Whse. Item Tracking Line>.PROCEDURE<OnBeforeLookUpTrackingSummary>
1 : Table<Return Shipment Line>.PROCEDURE<OnAfterCopyFieldsFromReturnShipmentLine>
1 : Table<Return Shipment Line>.PROCEDURE<OnAfterInitFromPurchLine>
1 : Table<Return Shipment Line>.PROCEDURE<OnAfterInsertInvLineFromRetShptLine>
1 : Table<Return Shipment Line>.PROCEDURE<OnBeforeInsertInvLineFromRetShptLine>
1 : Table<Return Receipt Line>.PROCEDURE<OnAfterCopyFieldsFromReturnReceiptLine>
1 : Table<Return Receipt Line>.PROCEDURE<OnAfterInitFromSalesLine>
1 : Table<Return Receipt Line>.PROCEDURE<OnAftertInsertInvLineFromRetRcptLine>
1 : Table<Return Receipt Line>.PROCEDURE<OnBeforeInsertInvLineFromRetRcptLine>
1 : Table<Return Receipt Line>.PROCEDURE<OnBeforeInsertInvLineFromRetRcptLineBeforeInsertTextLine>
1 : Table<Error Message>.PROCEDURE<OnBeforeLogMessage>
1 : Table<Sales Price>.PROCEDURE<OnBeforeNewSalesPriceInsert>
1 : Table<Purchase Price>.PROCEDURE<OnBeforeNewPurchasePriceInsert>
1 : Table<Sales Price Worksheet>.PROCEDURE<OnAfterCalcCurrentPriceFound>
1 : Table<Standard Address>.PROCEDURE<OnBeforeToString>
1 : Table<Warehouse Employee>.PROCEDURE<OnBeforeCheckDefault>
1 : Table<Bin Content>.PROCEDURE<OnBeforeGetWhseLocation>
1 : Table<Bin Content>.PROCEDURE<OnCalcQtyBaseOnAfterSetFiltersForWhseActivLine>
1 : Table<Bin Content>.PROCEDURE<OnCalcQtyBaseOnAfterSetFiltersForWhseJnlLine>
1 : Table<Bin Content>.PROCEDURE<OnCalcTotalATOComponentsPickQtyBaseOnAfterSetFilters>
1 : Table<Bin Content>.PROCEDURE<OnCalcTotalNegativeAdjmtQtyBaseOnAfterSetFilters>
1 : Table<Bin Content>.PROCEDURE<OnCalcTotalQtyBaseOnAfterSetFilters>
1 : Table<Bin Type>.PROCEDURE<OnBeforeCheckCombination>
1 : Table<Warehouse Journal Line>.PROCEDURE<OnBeforeCheckName>
1 : Table<Warehouse Journal Line>.PROCEDURE<OnBeforeCheckTemplateName>
1 : Table<Warehouse Receipt Header>.PROCEDURE<OnAfterAssistEdit>
1 : Table<Warehouse Receipt Header>.PROCEDURE<OnBeforeDeleteWhseRcptRelatedLines>
1 : Table<Warehouse Receipt Header>.PROCEDURE<OnBeforeErrorIfUserIsNotWhseEmployee>
1 : Table<Warehouse Receipt Line>.PROCEDURE<OnAfterOpenItemTrackingLines>
1 : Table<Warehouse Receipt Line>.PROCEDURE<OnBeforeOpenItemTrackingLines>
1 : Table<Warehouse Receipt Line>.PROCEDURE<OnBeforeValidateQtyToReceive>
1 : Table<Posted Whse. Receipt Header>.PROCEDURE<OnBeforeErrorIfUserIsNotWhseEmployee>
1 : Table<Warehouse Shipment Header>.PROCEDURE<OnAfterAssistEdit>
1 : Table<Warehouse Shipment Header>.PROCEDURE<OnBeforeErrorIfUserIsNotWhseEmployee>
1 : Table<Warehouse Shipment Header>.PROCEDURE<OnBeforeWhseShptLineDelete>
1 : Table<Warehouse Shipment Line>.PROCEDURE<OnAfterCreatePickDoc>
1 : Table<Warehouse Shipment Line>.PROCEDURE<OnAfterGetWhseShptHeader>
1 : Table<Warehouse Shipment Line>.PROCEDURE<OnBeforeCompareQtyToShipAndOutstandingQty>
1 : Table<Warehouse Shipment Line>.PROCEDURE<OnBeforeCompareShipAndPickQty>
1 : Table<Warehouse Shipment Line>.PROCEDURE<OnBeforeCreatePickDoc>
1 : Table<Warehouse Shipment Line>.PROCEDURE<OnBeforeOpenItemTrackingLines>
1 : Table<Warehouse Shipment Line>.PROCEDURE<OnBeforeTestReleased>
1 : Table<Warehouse Shipment Line>.PROCEDURE<OnValidateQuantityStatusUpdate>
1 : Table<Posted Whse. Shipment Header>.PROCEDURE<OnBeforeErrorIfUserIsNotWhseEmployee>
1 : Table<Whse. Worksheet Line>.PROCEDURE<OnAfterAutofillQtyToHandle>
1 : Table<Whse. Worksheet Line>.PROCEDURE<OnBeforeCheckBin>
1 : Table<Whse. Worksheet Line>.PROCEDURE<OnBeforeCheckTemplateName>
1 : Table<Whse. Worksheet Line>.PROCEDURE<OnBeforeCheckWhseEmployee>
1 : Table<Whse. Worksheet Line>.PROCEDURE<OnBeforeCheckWhseWkshName>
1 : Table<Whse. Worksheet Line>.PROCEDURE<OnCalcAvailQtyToMoveOnAfterSetFilters>
1 : Table<Whse. Internal Put-away Line>.PROCEDURE<OnBeforeOpenItemTrackingLines>
1 : Table<Whse. Internal Put-away Line>.PROCEDURE<OnOpenItemTrackingLinesOnBeforeSetSource>
1 : Table<Bin Creation Worksheet Line>.PROCEDURE<OnBeforeCheckName>
1 : Table<Internal Movement Header>.PROCEDURE<OnBeforeOpenInternalMovementHeader>
1 : Table<Bin>.PROCEDURE<OnAfterSetUpNewLine>
1 : Table<Standard General Journal>.PROCEDURE<OnAfterCopyGenJnlFromStdJnl>
1 : Table<Item Attribute>.PROCEDURE<OnBeforeCheckNameUniqueness>
1 : Table<Item Attribute Value>.PROCEDURE<OnAfterHasBeenUsed>
1 : Table<Item Attribute Value>.PROCEDURE<OnGetValueInCurrentLanguage>
1 : Table<Item Attribute Value>.PROCEDURE<OnLoadItemAttributesFactBoxDataOnBeforeInsert>
1 : Table<Item Attribute Value Selection>.PROCEDURE<OnBeforeFindItemAttributeCaseInsensitive>
1 : Table<Item Attribute Value Selection>.PROCEDURE<OnInsertRecordOnBeforeItemAttrValueSelectionInsert>
1 : Table<Standard General Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Standard Item Journal>.PROCEDURE<OnAfterCopyItemJnlFromStdJnl>
1 : Table<Standard Item Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Report Selections>.PROCEDURE<OnAfterGetEmailBodyCustomer>
1 : Table<Report Selections>.PROCEDURE<OnAfterGetEmailBodyVendor>
1 : Table<Report Selections>.PROCEDURE<OnAfterPrintDocument>
1 : Table<Report Selections>.PROCEDURE<OnAfterSendEmailDirectly>
1 : Table<Report Selections>.PROCEDURE<OnBeforeGetCustEmailAddress>
1 : Table<Report Selections>.PROCEDURE<OnBeforeGetEmailBodyCustomer>
1 : Table<Report Selections>.PROCEDURE<OnBeforeGetEmailBodyVendor>
1 : Table<Report Selections>.PROCEDURE<OnBeforeGetVendorEmailAddress>
1 : Table<Report Selections>.PROCEDURE<OnBeforePrint>
1 : Table<Report Selections>.PROCEDURE<OnBeforePrintDocument>
1 : Table<Report Selections>.PROCEDURE<OnBeforePrintForUsage>
1 : Table<Report Selections>.PROCEDURE<OnBeforePrintWithCheck>
1 : Table<Report Selections>.PROCEDURE<OnBeforePrintWithGUIYesNo>
1 : Table<Report Selections>.PROCEDURE<OnBeforePrintWithGUIYesNoVendor>
1 : Table<Report Selections>.PROCEDURE<OnBeforePrintWithGUIYesNoWithCheck>
1 : Table<Report Selections>.PROCEDURE<OnBeforePrintWithGUIYesNoWithCheckVendor>
1 : Table<Report Selections>.PROCEDURE<OnBeforeSaveReportAsPDF>
1 : Table<Report Selections>.PROCEDURE<OnBeforeSendEmailToCust>
1 : Table<Report Selections>.PROCEDURE<OnBeforeSendEmailToVendor>
9 : Table<Report Selections>.PROCEDURE<OnBeforeSetReportLayout>
1 : Table<Report Selections>.PROCEDURE<OnFindReportSelections>
1 : Table<Report Selections>.PROCEDURE<OnGetEmailBodyCustomerTextOnAfterNotFindEmailBodyUsage>
1 : Table<Report Selections>.PROCEDURE<OnGetEmailBodyVendorTextOnAfterNotFindEmailBodyUsage>
1 : Table<Certificate of Supply>.PROCEDURE<OnAfterInitFromPurchase>
1 : Table<Certificate of Supply>.PROCEDURE<OnAfterInitFromSales>
1 : Table<Certificate of Supply>.PROCEDURE<OnAfterInitFromService>
1 : Table<Company Information>.PROCEDURE<OnAfterGetSystemIndicator>
1 : Table<Language>.PROCEDURE<OnGetLanguageID>
1 : Table<Language>.PROCEDURE<OnGetUserLanguageId>
1 : Table<Gen. Journal Template>.PROCEDURE<OnAfterValidateType>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetBankAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetBankBalAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetCustomerAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetCustomerBalAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetEmployeeAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetEmployeeBalAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetFAAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetFABalAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetGLAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetGLBalAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetICPartnerAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetICPartnerBalAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetVendorAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetVendorBalAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCheckDirectPosting>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterClearBalPostingGroups>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterClearCustApplnEntryFields>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterClearEmplApplnEntryFields>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterClearPostingGroups>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterClearVendApplnEntryFields>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromCustLedgEntry>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromGenJnlAllocation>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromInvPostBuffer>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromInvPostBufferFA>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPrepmtInvBuffer>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPurchHeader>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPurchHeaderApplyTo>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPurchHeaderPayment>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPurchHeaderPrepmt>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPurchHeaderPrepmtPost>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromSalesHeader>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromSalesHeaderApplyTo>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromSalesHeaderPayment>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromSalesHeaderPrepmt>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromSalesHeaderPrepmtPost>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromServHeader>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromServHeaderApplyTo>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromServHeaderPayment>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCreateFAAcquisitionLines>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterCreateTempJobJnlLine>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterGetCustLedgerEntry>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterGetEmplLedgerEntry>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterGetVendLedgerEntry>
3 : Table<Gen. Journal Line>.PROCEDURE<OnAfterSalesTaxCalculateCalculateTax>
3 : Table<Gen. Journal Line>.PROCEDURE<OnAfterSalesTaxCalculateReverseCalculateTax>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterSetAmountWithRemaining>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterSetJournalLineFieldsFromApplication>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterSetupNewLine>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterUpdateDocumentTypeAndAppliesToFields>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterUpdatePricesFromJobJnlLine>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterValidateApplyRequirements>
1 : Table<Gen. Journal Line>.PROCEDURE<OnAfterValidateShortcutDimCode>
1 : Table<Gen. Journal Line>.PROCEDURE<OnBeforeCheckDirectPosting>
1 : Table<Gen. Journal Line>.PROCEDURE<OnBeforeCheckDocNoBasedOnNoSeries>
1 : Table<Gen. Journal Line>.PROCEDURE<OnBeforeCheckIfPostingDateIsEarlier>
1 : Table<Gen. Journal Line>.PROCEDURE<OnBeforeCreateTempJobJnlLine>
1 : Table<Gen. Journal Line>.PROCEDURE<OnBeforeLookUpAppliesToDocCust>
1 : Table<Gen. Journal Line>.PROCEDURE<OnBeforeLookUpAppliesToDocEmpl>
1 : Table<Gen. Journal Line>.PROCEDURE<OnBeforeLookUpAppliesToDocVend>
1 : Table<Gen. Journal Line>.PROCEDURE<OnBeforeSetAmountWithCustLedgEntry>
1 : Table<Gen. Journal Line>.PROCEDURE<OnBeforeSetAmountWithVendLedgEntry>
1 : Table<Gen. Journal Line>.PROCEDURE<OnBeforeValidateBalGenBusPostingGroup>
1 : Table<Gen. Journal Line>.PROCEDURE<OnBeforeValidateBalGenPostingType>
1 : Table<Gen. Journal Line>.PROCEDURE<OnBeforeValidateBalGenProdPostingGroup>
1 : Table<Gen. Journal Line>.PROCEDURE<OnBeforeValidateGenBusPostingGroup>
1 : Table<Gen. Journal Line>.PROCEDURE<OnBeforeValidateGenPostingType>
1 : Table<Gen. Journal Line>.PROCEDURE<OnBeforeValidateGenProdPostingGroup>
1 : Table<Gen. Journal Line>.PROCEDURE<OnBeforeValidateShortcutDimCode>
1 : Table<Gen. Journal Line>.PROCEDURE<OnCheckGenJournalLinePostRestrictions>
1 : Table<Gen. Journal Line>.PROCEDURE<OnCheckGenJournalLinePrintCheckRestrictions>
1 : Table<Gen. Journal Line>.PROCEDURE<OnGenJnlLineGetVendorAccount>
1 : Table<Gen. Journal Line>.PROCEDURE<OnGetCustLedgerEntryOnAfterAssignCustomerNo>
1 : Table<Gen. Journal Line>.PROCEDURE<OnGetFAVATSetupOnBeforeCheckGLAcc>
1 : Table<Gen. Journal Line>.PROCEDURE<OnGetVendLedgerEntryOnAfterAssignVendorNo>
1 : Table<Gen. Journal Line>.PROCEDURE<OnLookUpAppliesToDocCustOnAfterSetFilters>
1 : Table<Gen. Journal Line>.PROCEDURE<OnLookUpAppliesToDocCustOnAfterUpdateDocumentTypeAndAppliesTo>
1 : Table<Gen. Journal Line>.PROCEDURE<OnLookUpAppliesToDocEmplOnAfterSetFilters>
1 : Table<Gen. Journal Line>.PROCEDURE<OnLookUpAppliesToDocEmplOnAfterUpdateDocumentTypeAndAppliesTo>
1 : Table<Gen. Journal Line>.PROCEDURE<OnLookUpAppliesToDocVendOnAfterSetFilters>
1 : Table<Gen. Journal Line>.PROCEDURE<OnLookUpAppliesToDocVendOnAfterUpdateDocumentTypeAndAppliesTo>
1 : Table<Gen. Journal Line>.PROCEDURE<OnModifyOnBeforeTestCheckPrinted>
7 : Table<Gen. Journal Line>.PROCEDURE<OnMoveGenJournalLine>
1 : Table<Gen. Journal Line>.PROCEDURE<OnSetUpNewLineOnBeforeIncrDocNo>
1 : Table<Gen. Journal Line>.PROCEDURE<OnUpdateLineBalanceOnAfterAssignBalanceLCY>
1 : Table<Gen. Journal Line>.PROCEDURE<OnValidateAccountNoOnAfterAssignValue>
1 : Table<Gen. Journal Line>.PROCEDURE<OnValidateAccountNoOnBeforeAssignValue>
1 : Table<Gen. Journal Line>.PROCEDURE<OnValidateAmountOnAfterAssignAmountLCY>
1 : Table<Gen. Journal Line>.PROCEDURE<OnValidateBalAccountNoOnAfterAssignValue>
1 : Table<Gen. Journal Line>.PROCEDURE<OnValidateBalAccountNoOnBeforeAssignValue>
1 : Table<Gen. Journal Line>.PROCEDURE<OnValidateBalVATPctOnAfterAssignBalVATAmountLCY>
1 : Table<Gen. Journal Line>.PROCEDURE<OnValidatePaymentTermsCodeOnBeforeCalculateDueDate>
1 : Table<Gen. Journal Line>.PROCEDURE<OnValidatePaymentTermsCodeOnBeforeCalculatePmtDiscountDate>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterClearTracking>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyFromMachineCenter>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyFromProdOrderComp>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyFromProdOrderLine>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyFromWorkCenter>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromJobJnlLine>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromPurchHeader>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromPurchLine>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromSalesHeader>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromSalesLine>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServHeader>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServLine>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServShptHeader>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServShptLine>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServShptLineUndo>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterCopyTrackingFromSpec>
2 : Table<Item Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterGetItemChange>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterItemPosting>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterOnValidateItemNoAssignByEntryType>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterSetupNewLine>
1 : Table<Item Journal Line>.PROCEDURE<OnAfterUpdateAmount>
1 : Table<Item Journal Line>.PROCEDURE<OnBeforePostingItemJnlFromProduction>
1 : Table<Item Journal Line>.PROCEDURE<OnBeforeRetrieveCosts>
1 : Table<Item Journal Line>.PROCEDURE<OnBeforeSelectItemEntry>
1 : Table<Item Journal Line>.PROCEDURE<OnBeforeValidateScrapCode>
2 : Table<Item Journal Line>.PROCEDURE<OnBeforeVerifyReservedQty>
1 : Table<Item Journal Line>.PROCEDURE<OnCheckItemJournalLinePostRestrictions>
1 : Table<Item Journal Line>.PROCEDURE<OnCreateAssemblyDimOnAfterCreateDimSetIDArr>
1 : Table<Item Journal Line>.PROCEDURE<OnCreateProdDimOnAfterCreateDimSetIDArr>
1 : Table<Item Journal Line>.PROCEDURE<OnLastOutputOperationOnBeforeTestRoutingNo>
1 : Table<Item Journal Line>.PROCEDURE<OnSelectItemEntryOnBeforeOpenPage>
1 : Table<Item Journal Line>.PROCEDURE<OnValidateItemNoOnAfterGetItem>
1 : Table<Item Journal Line>.PROCEDURE<OnValidateQuantityOnBeforeGetUnitAmount>
1 : Table<Acc. Schedule Name>.PROCEDURE<OnBeforePrint>
1 : Table<Acc. Schedule Line>.PROCEDURE<OnAfterLookupTotaling>
1 : Table<Acc. Schedule Line>.PROCEDURE<OnBeforeLookupTotaling>
1 : Table<Config. Line>.PROCEDURE<OnBeforeShowTableData>
1 : Table<Config. Table Processing Rule>.PROCEDURE<OnDoesTableHaveCustomRuleInRapidStart>
1 : Table<BOM Component>.PROCEDURE<OnAfterCopyFromItem>
1 : Table<BOM Component>.PROCEDURE<OnAfterCopyFromResource>
1 : Table<BOM Component>.PROCEDURE<OnBeforeCopyFromItem>
1 : Table<BOM Component>.PROCEDURE<OnBeforeValidateAgainstRecursion>
1 : Table<Assembly Header>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Assembly Header>.PROCEDURE<OnAfterInitQtyToAssemble>
1 : Table<Assembly Header>.PROCEDURE<OnAfterInitRecord>
1 : Table<Assembly Header>.PROCEDURE<OnAfterInitRemaining>
1 : Table<Assembly Line>.PROCEDURE<OnAfterCalcExpectedInventory>
1 : Table<Assembly Line>.PROCEDURE<OnAfterCopyFromItem>
1 : Table<Assembly Line>.PROCEDURE<OnAfterCopyFromResource>
1 : Table<Assembly Line>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Assembly Line>.PROCEDURE<OnAfterFilterLinesWithItemToPlan>
1 : Table<Assembly Line>.PROCEDURE<OnBeforeCalcQtyToPick>
1 : Table<Assembly Line>.PROCEDURE<OnBeforeCalcQtyToPickBase>
1 : Table<Assemble-to-Order Link>.PROCEDURE<OnAfterRemoveTrackingFromReservation>
1 : Table<Assemble-to-Order Link>.PROCEDURE<OnAfterUpdateAsm>
1 : Table<Assemble-to-Order Link>.PROCEDURE<OnBeforeAsmHeaderInsert>
1 : Table<Assemble-to-Order Link>.PROCEDURE<OnBeforeAsmHeaderModify>
1 : Table<Assemble-to-Order Link>.PROCEDURE<OnBeforeInsertAsmHeader>
1 : Table<Assemble-to-Order Link>.PROCEDURE<OnBeforeRemoveTrackingFromReservation>
1 : Table<Assemble-to-Order Link>.PROCEDURE<OnBeforeSalesLineCheckAvailShowWarning>
1 : Table<Assemble-to-Order Link>.PROCEDURE<OnRemoveTrackingFromReservationOnAfterSetTracking>
1 : Table<Assemble-to-Order Link>.PROCEDURE<OnRollUpPriceOnAfterFindSalesLinePrice>
1 : Table<Assemble-to-Order Link>.PROCEDURE<OnRollUpPriceOnBeforeFindSalesLinePrice>
1 : Table<Assemble-to-Order Link>.PROCEDURE<OnUpdateAsmOnBeforeSynchronizeAsmFromSalesLine>
1 : Table<Assembly Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
1 : Table<Email Item>.PROCEDURE<OnAttachIncomingDocumentsOnAfterSetFilter>
1 : Table<Email Item>.PROCEDURE<OnBeforeGetBodyText>
1 : Table<Email Item>.PROCEDURE<OnBeforeSend>
1 : Table<Time Sheet Detail>.PROCEDURE<OnAfterCopyFromTimeSheetLine>
1 : Table<Time Sheet Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
1 : Table<G/L Budget Entry>.PROCEDURE<OnAfterShowDimensions>
1 : Table<G/L Budget Entry>.PROCEDURE<OnAfterUpdateDimensionSetId>
1 : Table<G/L Budget Entry>.PROCEDURE<OnInsertOnAfterUpdateDimSets>
1 : Table<Custom Report Layout>.PROCEDURE<OnAfterReportGetCustomRdlc>
1 : Table<Custom Report Layout>.PROCEDURE<OnCopyRecordOnBeforeInsertLayout>
1 : Table<Custom Report Layout>.PROCEDURE<OnGetFileExtension>
1 : Table<Custom Report Layout>.PROCEDURE<OnImportLayoutBlob>
1 : Table<Custom Report Layout>.PROCEDURE<OnImportLayoutSetFileFilter>
1 : Table<Custom Report Layout>.PROCEDURE<OnInitBuiltInLayout>
1 : Table<Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
1 : Table<Work Center>.PROCEDURE<OnBeforeAssistEdit>
1 : Table<Work Center>.PROCEDURE<OnValidateWorkCenterGroupCodeBeforeModify>
1 : Table<Machine Center>.PROCEDURE<OnValidateWorkCenterNoBeforeModify>
1 : Table<Routing Line>.PROCEDURE<OnAfterDeleteRelations>
1 : Table<Routing Line>.PROCEDURE<OnAfterMachineCtrTransferFields>
1 : Table<Routing Line>.PROCEDURE<OnAfterWorkCenterTransferFields>
1 : Table<Routing Line>.PROCEDURE<OnBeforeTestStatus>
1 : Table<Manufacturing Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
1 : Table<Production BOM Line>.PROCEDURE<OnAfterTestStatus>
1 : Table<Production BOM Line>.PROCEDURE<OnValidateNoOnAfterAssignItemFields>
1 : Table<Production BOM Line>.PROCEDURE<OnValidateNoOnAfterAssignProdBOMFields>
1 : Table<Routing Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
1 : Table<Production BOM Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
1 : Table<Production BOM Version>.PROCEDURE<OnValidateStatusBeforeCommit>
1 : Table<Production BOM Version>.PROCEDURE<OnValidateStatusBeforeModify>
1 : Table<Routing Version>.PROCEDURE<OnValidateStatusBeforeCommit>
1 : Table<Planning Component>.PROCEDURE<OnAfterCreateDimTableIDs>
1 : Table<Planning Component>.PROCEDURE<OnAfterPlanningNeeds>
1 : Table<Planning Component>.PROCEDURE<OnAfterTransferFromAsmLine>
1 : Table<Planning Component>.PROCEDURE<OnAfterTransferFromComponent>
1 : Table<Planning Component>.PROCEDURE<OnBeforeGetWMSDefaultBin>
1 : Table<Planning Component>.PROCEDURE<OnBeforePlanningNeeds>
1 : Table<Planning Component>.PROCEDURE<OnValidateRoutingLinkCodeOnBeforeValidateDueDate>
1 : Table<Planning Routing Line>.PROCEDURE<OnAfterMachineCtrTransferFields>
1 : Table<Planning Routing Line>.PROCEDURE<OnAfterTransferFromProdOrderRouting>
1 : Table<Planning Routing Line>.PROCEDURE<OnAfterTransferFromReqLine>
1 : Table<Planning Routing Line>.PROCEDURE<OnAfterTransferFromRoutingLine>
1 : Table<Planning Routing Line>.PROCEDURE<OnAfterWorkCenterTransferFields>
1 : Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromAsmHeader>
1 : Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromAsmLine>
1 : Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromComponent>
1 : Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromInboundTransfer>
1 : Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromItemLedgerEntry>
1 : Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromJobPlanningLine>
1 : Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromOutboundTransfer>
1 : Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromOutboundTransfPlan>
1 : Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromPlanComponent>
1 : Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromProdOrderLine>
1 : Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromPurchaseLine>
1 : Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromRequisitionLine>
1 : Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromSalesLine>
1 : Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromServLine>
1 : Table<Inventory Profile>.PROCEDURE<OnAfterTransferToTrackingEntry>
1 : Table<Order Promising Line>.PROCEDURE<OnAfterTransferFromJobPlanningLine>
1 : Table<Order Promising Line>.PROCEDURE<OnAfterTransferFromSalesLine>
1 : Table<Order Promising Line>.PROCEDURE<OnAfterTransferFromServLine>
0 : Codeunit<Add-in Manifest Management>.PROCEDURE<CreateBasicAddins>
0 : Codeunit<Add-in Manifest Management>.PROCEDURE<GetAddinID>
0 : Table<Data Migrator Registration>.PROCEDURE<OnCustomerVendorPostingSetup>
0 : Table<Data Migrator Registration>.PROCEDURE<OnGLPostingSetup>
0 : Table<Data Migrator Registration>.PROCEDURE<OnHasAdvancedApply>
0 : Table<Data Migrator Registration>.PROCEDURE<OnHasErrors>
0 : Table<Data Migrator Registration>.PROCEDURE<OnHasSettings>
0 : Table<Data Migrator Registration>.PROCEDURE<OnHasTemplate>
0 : Table<Data Migrator Registration>.PROCEDURE<OnHideSelected>
0 : Table<Data Migrator Registration>.PROCEDURE<OnOpenAdvancedApply>
0 : Table<Data Migrator Registration>.PROCEDURE<OnOpenSettings>
0 : Table<Data Migrator Registration>.PROCEDURE<OnPostingGroupSetup>
0 : Table<Data Migrator Registration>.PROCEDURE<OnShowBalance>
0 : Table<Data Migrator Registration>.PROCEDURE<OnShowDuplicateContactsText>
0 : Table<Data Migrator Registration>.PROCEDURE<OnShowErrors>
0 : Table<Data Migrator Registration>.PROCEDURE<OnShowPostingOptions>
0 : Table<Data Migrator Registration>.PROCEDURE<OnValidateSettings>

DETAILS:
Codeunit<Calc. G/L Acc. Where-Used>.PROCEDURE<OnAfterCheckPostingGroups>
  Raised in: Codeunit<Calc. G/L Acc. Where-Used>.PROCEDURE<CheckPostingGroups>
    Code lines:
    ...
    IF FillTableBuffer(TableBuffer) THEN
      REPEAT
        CheckTable(GLAccNo,TableBuffer.Number);
      UNTIL TableBuffer.NEXT = 0;
    
    OnAfterCheckPostingGroups(GLAccWhereUsed,GLAccNo); <=====================
Codeunit<Calc. G/L Acc. Where-Used>.PROCEDURE<OnAfterFillTableBuffer>
  Raised in: Codeunit<Calc. G/L Acc. Where-Used>.PROCEDURE<FillTableBuffer>
    Code lines:
    ...
    AddTable(TableBuffer,DATABASE::"Business Unit");
    AddTable(TableBuffer,DATABASE::"Cash Flow Setup");
    
    AddCountryTables(TableBuffer);
    
    OnAfterFillTableBuffer(TableBuffer); <=====================
    
    EXIT(TableBuffer.FINDSET);
Codeunit<Calc. G/L Acc. Where-Used>.PROCEDURE<OnBeforeShowGLAccWhereUsed>
  Raised in: Codeunit<Calc. G/L Acc. Where-Used>.PROCEDURE<ShowGLAccWhereUsed>
    Code lines:
    OnBeforeShowGLAccWhereUsed(GLAccWhereUsed); <=====================
    
    GLAccWhereUsed.SETCURRENTKEY("Table Name");
    PAGE.RUNMODAL(0,GLAccWhereUsed);
Codeunit<Calc. G/L Acc. Where-Used>.PROCEDURE<OnShowExtensionPage>
  Raised in: Codeunit<Calc. G/L Acc. Where-Used>.PROCEDURE<ShowSetupForm>
    Code lines:
    ...
        DATABASE::"Sales & Receivables Setup":
          PAGE.RUN(PAGE::"Sales & Receivables Setup");
        DATABASE::"Purchases & Payables Setup":
          PAGE.RUN(PAGE::"Purchases & Payables Setup");
        ELSE
          OnShowExtensionPage(GLAccWhereUsed); <=====================
      END;
Codeunit<Job Calculate WIP>.PROCEDURE<OnInsertWIPGLOnBeforeGenJnPostLine>
  Raised in: Codeunit<Job Calculate WIP>.PROCEDURE<InsertWIPGL>
    Code lines:
    ...
    END;
    CLEAR(DimMgt);
    DimMgt.UpdateGlobalDimFromDimSetID(GenJnlLine."Dimension Set ID",GenJnlLine."Shortcut Dimension 1 Code",
      GenJnlLine."Shortcut Dimension 2 Code");
    
    OnInsertWIPGLOnBeforeGenJnPostLine(GenJnlLine); <=====================
    GenJnPostLine.RunWithCheck(GenJnlLine);
Codeunit<Job Post-Line>.PROCEDURE<OnAfterJobPlanningLineModify>
  Raised in: Codeunit<Job Post-Line>.PROCEDURE<PostInvoiceContractLine>
    Code lines:
    ...
    OnBeforeJobPlanningLineUpdateQtyToInvoice(SalesHeader,SalesLine,JobPlanningLine,JobPlanningLineInvoice,JobLedgEntryNo);
    
    JobPlanningLine.UpdateQtyToInvoice;
    JobPlanningLine.MODIFY;
    
    OnAfterJobPlanningLineModify(JobPlanningLine); <=====================
    
    IF JobPlanningLine.Type <> JobPlanningLine.Type::Text THEN
      PostJobOnSalesLine(JobPlanningLine,SalesHeader,SalesLine,EntryType::Sale);
    
Codeunit<Job Post-Line>.PROCEDURE<OnAfterPostInvoiceContractLine>
  Raised in: Codeunit<Job Post-Line>.PROCEDURE<PostInvoiceContractLine>
    Code lines:
    ...
    OnAfterJobPlanningLineModify(JobPlanningLine);
    
    IF JobPlanningLine.Type <> JobPlanningLine.Type::Text THEN
      PostJobOnSalesLine(JobPlanningLine,SalesHeader,SalesLine,EntryType::Sale);
    
    OnAfterPostInvoiceContractLine(SalesHeader,SalesLine); <=====================
Codeunit<Job Post-Line>.PROCEDURE<OnBeforeCheckItemQuantityPurchCredit>
  Raised in: Codeunit<Job Post-Line>.PROCEDURE<CheckItemQuantityPurchCredit>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckItemQuantityPurchCredit(PurchaseHeader,PurchaseLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    Job.GET(PurchaseLine."Job No.");
    IF Job.GetQuantityAvailable(PurchaseLine."No.",PurchaseLine."Location Code",PurchaseLine."Variant Code",0,2) <
       -PurchaseLine."Return Qty. to Ship (Base)"
    THEN
      ERROR(
    ...
Codeunit<Job Post-Line>.PROCEDURE<OnBeforeJobPlanningLineUpdateQtyToInvoice>
  Raised in: Codeunit<Job Post-Line>.PROCEDURE<PostInvoiceContractLine>
    Code lines:
    ...
          JobPlanningLineInvoice."Job Ledger Entry No." := JobLedgEntryNo;
          JobPlanningLineInvoice.MODIFY;
        END;
    END;
    
    OnBeforeJobPlanningLineUpdateQtyToInvoice(SalesHeader,SalesLine,JobPlanningLine,JobPlanningLineInvoice,JobLedgEntryNo); <=====================
    
    JobPlanningLine.UpdateQtyToInvoice;
    JobPlanningLine.MODIFY;
    
    ...
Codeunit<Job Post-Line>.PROCEDURE<OnBeforePostInvoiceContractLine>
  Raised in: Codeunit<Job Post-Line>.PROCEDURE<PostInvoiceContractLine>
    Code lines:
    OnBeforePostInvoiceContractLine(SalesHeader,SalesLine); <=====================
    
    JobPlanningLine.SETCURRENTKEY("Job Contract Entry No.");
    JobPlanningLine.SETRANGE("Job Contract Entry No.",SalesLine."Job Contract Entry No.");
    JobPlanningLine.FINDFIRST;
    Job.GET(JobPlanningLine."Job No.");
    
    IF Job."Invoice Currency Code" = '' THEN BEGIN
      Job.TESTFIELD("Currency Code",SalesHeader."Currency Code");
      Job.TESTFIELD("Currency Code",JobPlanningLine."Currency Code");
    ...
Codeunit<Job Post-Line>.PROCEDURE<OnBeforePostJobOnPurchaseLine>
  Raised in: Codeunit<Job Post-Line>.PROCEDURE<PostJobOnPurchaseLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforePostJobOnPurchaseLine(PurchHeader,PurchInvHeader,PurchCrMemoHdr,PurchLine,JobJnlLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF (PurchLine.Type <> PurchLine.Type::Item) AND (PurchLine.Type <> PurchLine.Type::"G/L Account") THEN
      EXIT;
    CLEAR(JobJnlLine);
    PurchLine.TESTFIELD("Job No.");
    PurchLine.TESTFIELD("Job Task No.");
    ...
Codeunit<Job Post-Line>.PROCEDURE<OnBeforeValidateRelationship>
  Raised in: Codeunit<Job Post-Line>.PROCEDURE<ValidateRelationship>
    Code lines:
    OnBeforeValidateRelationship(SalesHeader,SalesLine,JobPlanningLine); <=====================
    
    JobTask.GET(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.");
    Txt := STRSUBSTNO(Text000,
        JobTask.TABLECAPTION,JobTask.FIELDCAPTION("Job No."),JobTask."Job No.",
        JobTask.FIELDCAPTION("Job Task No."),JobTask."Job Task No.");
    
    IF JobPlanningLine.Type = JobPlanningLine.Type::Text THEN
      IF SalesLine.Type <> SalesLine.Type::" " THEN
        SalesLine.FIELDERROR(Type,Txt);
    ...
Codeunit<Job Post-Line>.PROCEDURE<OnPostInvoiceContractLineBeforeCheckJobLine>
  Raised in: Codeunit<Job Post-Line>.PROCEDURE<PostInvoiceContractLine>
    Code lines:
    ...
      Job.TESTFIELD("Currency Code",'');
      JobPlanningLine.TESTFIELD("Currency Code",'');
    END;
    
    SalesHeader.TESTFIELD("Bill-to Customer No.",Job."Bill-to Customer No.");
    OnPostInvoiceContractLineBeforeCheckJobLine(SalesHeader,SalesLine,JobPlanningLine,JobLineChecked); <=====================
    IF NOT JobLineChecked THEN BEGIN
      JobPlanningLine.CALCFIELDS("Qty. Transferred to Invoice");
      IF JobPlanningLine.Type <> JobPlanningLine.Type::Text THEN
        JobPlanningLine.TESTFIELD("Qty. Transferred to Invoice");
    ...
Codeunit<Job Post-Line>.PROCEDURE<OnPostPurchaseGLAccountsOnBeforeJobJnlPostLine>
  Raised in: Codeunit<Job Post-Line>.PROCEDURE<PostPurchaseGLAccounts>
    Code lines:
    ...
          TempJobJournalLine.RESET;
          TempJobJournalLine.SETRANGE("Line No.","Line No.");
          TempJobJournalLine.FINDFIRST;
          JobJnlPostLine.SetGLEntryNo(GLEntryNo);
          IsHandled := FALSE;
          OnPostPurchaseGLAccountsOnBeforeJobJnlPostLine(TempJobJournalLine,TempPurchaseLineJob,IsHandled); <=====================
          IF NOT IsHandled THEN
            JobJnlPostLine.RunWithCheck(TempJobJournalLine);
        UNTIL NEXT = 0;
        DELETEALL;
    ...
Codeunit<Job Post-Line>.PROCEDURE<OnPostSalesGLAccountsOnBeforeJobJnlPostLine>
  Raised in: Codeunit<Job Post-Line>.PROCEDURE<PostSalesGLAccounts>
    Code lines:
    ...
        REPEAT
          TempJobJournalLine.RESET;
          TempJobJournalLine.SETRANGE("Line No.","Line No.");
          TempJobJournalLine.FINDFIRST;
          JobJnlPostLine.SetGLEntryNo(GLEntryNo);
          OnPostSalesGLAccountsOnBeforeJobJnlPostLine(TempJobJournalLine,TempSalesLineJob); <=====================
          JobJnlPostLine.RunWithCheck(TempJobJournalLine);
        UNTIL NEXT = 0;
        DELETEALL;
      END;
Codeunit<Job Create-Invoice>.PROCEDURE<OnAfterCreateSalesInvoiceLines>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<CreateSalesInvoiceLines>
    Code lines:
    ...
    JobPlanningLineSource.CALCFIELDS("Qty. Transferred to Invoice");
    
    IF NoOfSalesLinesCreated = 0 THEN
      ERROR(Text002,JobPlanningLine.TABLECAPTION,JobPlanningLine.FIELDCAPTION("Qty. to Transfer to Invoice"));
    
    OnAfterCreateSalesInvoiceLines(SalesHeader,NewInvoice); <=====================
Codeunit<Job Create-Invoice>.PROCEDURE<OnAfterCreateSalesLine>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<CreateSalesLine>
    Code lines:
    ...
      JobPlanningLine."VAT %" := SalesLine."VAT %";
    END;
    IF TransferExtendedText.SalesCheckIfAnyExtText(SalesLine,FALSE) THEN
      TransferExtendedText.InsertSalesExtText(SalesLine);
    
    OnAfterCreateSalesLine(SalesLine,SalesHeader,Job,JobPlanningLine); <=====================
Codeunit<Job Create-Invoice>.PROCEDURE<OnAfterOpenSalesInvoice>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<OpenSalesInvoice>
    Code lines:
    ...
              ERROR(Text012,SalesCrMemoHeader.TABLECAPTION,"Document No.");
            PAGE.RUNMODAL(PAGE::"Posted Sales Credit Memo",SalesCrMemoHeader);
          END;
      END;
    
    OnAfterOpenSalesInvoice(JobPlanningLineInvoice); <=====================
Codeunit<Job Create-Invoice>.PROCEDURE<OnAfterTestSalesHeader>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<TestSalesHeader>
    Code lines:
    ...
    
    IF Job."Currency Code" <> '' THEN
      SalesHeader.TESTFIELD("Currency Code",Job."Currency Code")
    ELSE
      SalesHeader.TESTFIELD("Currency Code",Job."Invoice Currency Code");
    OnAfterTestSalesHeader(SalesHeader,Job); <=====================
Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeCreateNewInvoice>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<CreateNewInvoice>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCreateNewInvoice(JobTask,InvoicePerTask,OldJobNo,OldJobTaskNo,LastJobTask,NewInvoice,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(NewInvoice);
    
    IF LastJobTask THEN
      NewInvoice := TRUE
    ELSE BEGIN
      IF OldJobNo <> '' THEN BEGIN
        IF InvoicePerTask THEN
    ...
Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeCreateSalesInvoiceJobTask>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<CreateSalesInvoiceJobTask>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCreateSalesInvoiceJobTask( <=====================
      JobTask2,PostingDate,InvoicePerTask,NoOfInvoices,OldJobNo,OldJobTaskNo,LastJobTask,IsHandled);
    IF IsHandled THEN
      EXIT;
    
    CLEARALL;
    IF NOT LastJobTask THEN BEGIN
      JobTask := JobTask2;
      IF JobTask."Job No." = '' THEN
    ...
Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeCreateSalesInvoiceLines>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<CreateSalesInvoiceLines>
    Code lines:
    OnBeforeCreateSalesInvoiceLines(JobPlanningLineSource,InvoiceNo,NewInvoice,PostingDate,CreditMemo); <=====================
    
    CLEARALL;
    Job.GET(JobNo);
    OnCreateSalesInvoiceLinesOnBeforeTestJob(Job);
    IF Job.Blocked = Job.Blocked::All THEN
      Job.TestBlocked;
    IF Job."Currency Code" = '' THEN
      JobInvCurrency := Job."Invoice Currency Code" <> '';
    Job.TESTFIELD("Bill-to Customer No.");
    ...
Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeDeleteSalesLine>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<DeleteSalesLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforeDeleteSalesLine(SalesLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH JobPlanningLineInvoice DO BEGIN
      CASE SalesLine."Document Type" OF
        SalesLine."Document Type"::Invoice:
          SETRANGE("Document Type","Document Type"::Invoice);
        SalesLine."Document Type"::"Credit Memo":
    ...
Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeGetCrMemoNo>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<CreateSalesInvoice>
    Code lines:
    ...
        GetSalesInvoiceNo.GetInvoiceNo(Done,NewInvoice,PostingDate,InvoiceNo);
    END ELSE BEGIN
      GetSalesCrMemoNo.SetCustomer(JobPlanningLine."Job No.");
      GetSalesCrMemoNo.RUNMODAL;
      IsHandled := FALSE;
      OnBeforeGetCrMemoNo(JobPlanningLine,Done,NewInvoice,PostingDate,InvoiceNo,IsHandled); <=====================
      IF NOT IsHandled THEN
        GetSalesCrMemoNo.GetCreditMemoNo(Done,NewInvoice,PostingDate,InvoiceNo);
    END;
    
    ...
Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeGetInvoiceNo>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<CreateSalesInvoice>
    Code lines:
    IF NOT CrMemo THEN BEGIN
      GetSalesInvoiceNo.SetCustomer(JobPlanningLine."Job No.");
      GetSalesInvoiceNo.RUNMODAL;
      IsHandled := FALSE;
      OnBeforeGetInvoiceNo(JobPlanningLine,Done,NewInvoice,PostingDate,InvoiceNo,IsHandled); <=====================
      IF NOT IsHandled THEN
        GetSalesInvoiceNo.GetInvoiceNo(Done,NewInvoice,PostingDate,InvoiceNo);
    END ELSE BEGIN
      GetSalesCrMemoNo.SetCustomer(JobPlanningLine."Job No.");
      GetSalesCrMemoNo.RUNMODAL;
    ...
Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeInsertSalesHeader>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<CreateSalesHeader>
    Code lines:
    ...
    IF SalesHeader."Document Type" = SalesHeader."Document Type"::Invoice THEN
      SalesSetup.TESTFIELD("Invoice Nos.");
    IF SalesHeader."Document Type" = SalesHeader."Document Type"::"Credit Memo" THEN
      SalesSetup.TESTFIELD("Credit Memo Nos.");
    SalesHeader."Posting Date" := PostingDate;
    OnBeforeInsertSalesHeader(SalesHeader,Job); <=====================
    SalesHeader.INSERT(TRUE);
    Cust.GET(Job."Bill-to Customer No.");
    Cust.TESTFIELD("Bill-to Customer No.",'');
    SalesHeader.VALIDATE("Sell-to Customer No.",Job."Bill-to Customer No.");
    ...
Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeInsertSalesLine>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<CreateSalesLine>
    Code lines:
    ...
          DimSetIDArr,SalesLine."Shortcut Dimension 1 Code",SalesLine."Shortcut Dimension 2 Code");
    END;
    SalesLine.Description := JobPlanningLine.Description;
    SalesLine."Description 2" := JobPlanningLine."Description 2";
    SalesLine."Line No." := GetNextLineNo(SalesLine);
    OnBeforeInsertSalesLine(SalesLine,SalesHeader,Job,JobPlanningLine); <=====================
    SalesLine.INSERT(TRUE);
    
    IF SalesLine.Type <> SalesLine.Type::" " THEN BEGIN
      NoOfSalesLinesCreated += 1;
    ...
Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeModifySalesHeader>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<CreateSalesHeader>
    Code lines:
    ...
    
    IsHandled := FALSE;
    OnCreateSalesHeaderOnBeforeUpdateSalesHeader(SalesHeader,Job,IsHandled);
    IF NOT IsHandled THEN
      UpdateSalesHeader(SalesHeader,Job);
    OnBeforeModifySalesHeader(SalesHeader,Job); <=====================
    SalesHeader.MODIFY(TRUE);
Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeModifySalesLine>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<CreateSalesLine>
    Code lines:
    ...
          ROUND(
            SalesLine."Inv. Discount Amount" * (1 + (SalesLine."VAT %" / 100)),
            Currency."Amount Rounding Precision"));
      END;
      SalesLine.VALIDATE("Job Contract Entry No.",JobPlanningLine."Job Contract Entry No.");
      OnBeforeModifySalesLine(SalesLine,SalesHeader,Job,JobPlanningLine); <=====================
      SalesLine.MODIFY;
      JobPlanningLine."VAT Unit Price" := SalesLine."Unit Price";
      JobPlanningLine."VAT Line Discount Amount" := SalesLine."Line Discount Amount";
      JobPlanningLine."VAT Line Amount" := SalesLine."Line Amount";
    ...
Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeOpenSalesInvoice>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<OpenSalesInvoice>
    Code lines:
    IsHandled := FALSE;
    OnBeforeOpenSalesInvoice(JobPlanningLineInvoice,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH JobPlanningLineInvoice DO
      CASE "Document Type" OF
        "Document Type"::Invoice:
          BEGIN
            SalesHeader.GET(SalesHeader."Document Type"::Invoice,"Document No.");
    ...
Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeTestSalesHeader>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<TestSalesHeader>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTestSalesHeader(SalesHeader,Job,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SalesHeader.TESTFIELD("Bill-to Customer No.",Job."Bill-to Customer No.");
    SalesHeader.TESTFIELD("Sell-to Customer No.",Job."Bill-to Customer No.");
    
    IF Job."Currency Code" <> '' THEN
      SalesHeader.TESTFIELD("Currency Code",Job."Currency Code")
    ...
Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeTransferLine>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<TransferLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTransferLine(JobPlanningLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH JobPlanningLine DO BEGIN
      IF NOT "Contract Line" THEN
        EXIT(FALSE);
      IF Type = Type::Text THEN
        EXIT(TRUE);
    ...
Codeunit<Job Create-Invoice>.PROCEDURE<OnBeforeUpdateSalesHeader>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<UpdateSalesHeader>
    Code lines:
    IsHandled := FALSE;
    OnBeforeUpdateSalesHeader(SalesHeader,Job,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SalesHeader."Bill-to Contact No." := Job."Bill-to Contact No.";
    SalesHeader."Bill-to Contact" := Job."Bill-to Contact";
    SalesHeader."Bill-to Name" := Job."Bill-to Name";
    SalesHeader."Bill-to Address" := Job."Bill-to Address";
    SalesHeader."Bill-to Address 2" := Job."Bill-to Address 2";
    ...
Codeunit<Job Create-Invoice>.PROCEDURE<OnCreateSalesHeaderOnBeforeUpdateSalesHeader>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<CreateSalesHeader>
    Code lines:
    ...
      SalesHeader.VALIDATE("Currency Code",Job."Invoice Currency Code");
    IF PostingDate <> 0D THEN
      SalesHeader.VALIDATE("Posting Date",PostingDate);
    
    IsHandled := FALSE;
    OnCreateSalesHeaderOnBeforeUpdateSalesHeader(SalesHeader,Job,IsHandled); <=====================
    IF NOT IsHandled THEN
      UpdateSalesHeader(SalesHeader,Job);
    OnBeforeModifySalesHeader(SalesHeader,Job);
    SalesHeader.MODIFY(TRUE);
Codeunit<Job Create-Invoice>.PROCEDURE<OnCreateSalesInvoiceJobTaskOnAfterLinesCreated>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<CreateSalesInvoiceJobTask>
    Code lines:
    ...
          JobPlanningLine.MODIFY;
        UNTIL TempJobPlanningLine.NEXT = 0;
      TempJobPlanningLine.DELETEALL;
    END;
    
    OnCreateSalesInvoiceJobTaskOnAfterLinesCreated(SalesHeader,Job); <=====================
    
    IF LastJobTask THEN BEGIN
      IF NoOfSalesLinesCreated = 0 THEN
        ERROR(Text002,JobPlanningLine.TABLECAPTION,JobPlanningLine.FIELDCAPTION("Qty. to Transfer to Invoice"));
    ...
Codeunit<Job Create-Invoice>.PROCEDURE<OnCreateSalesInvoiceJobTaskOnBeforeCreateSalesLine>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<CreateSalesInvoiceJobTask>
    Code lines:
    ...
                                      JobPlanningLine.Type::"G/L Account"]
          THEN
            JobPlanningLine.TESTFIELD("No.");
          TestExchangeRate(JobPlanningLine,PostingDate);
    
          OnCreateSalesInvoiceJobTaskOnBeforeCreateSalesLine(JobPlanningLine,SalesHeader,SalesHeader2,NoOfSalesLinesCreated); <=====================
          CreateSalesLine(JobPlanningLine);
    
          JobPlanningLineInvoice."Job No." := JobPlanningLine."Job No.";
          JobPlanningLineInvoice."Job Task No." := JobPlanningLine."Job Task No.";
    ...
Codeunit<Job Create-Invoice>.PROCEDURE<OnCreateSalesInvoiceJobTaskTestJob>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<CreateSalesInvoiceJobTask>
    Code lines:
    ...
        EXIT;
      Job.GET(TempJobPlanningLine."Job No.");
      JobTask.GET(TempJobPlanningLine."Job No.",TempJobPlanningLine."Job Task No.");
    END;
    
    OnCreateSalesInvoiceJobTaskTestJob(Job); <=====================
    Job.TESTFIELD("Bill-to Customer No.");
    IF Job.Blocked = Job.Blocked::All THEN
      Job.TestBlocked;
    IF Job."Currency Code" = '' THEN
    ...
Codeunit<Job Create-Invoice>.PROCEDURE<OnCreateSalesInvoiceLinesOnBeforeCreateSalesLine>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<CreateSalesInvoiceLines>
    Code lines:
    ...
                                      JobPlanningLine.Type::Item,
                                      JobPlanningLine.Type::"G/L Account"]
          THEN
            JobPlanningLine.TESTFIELD("No.");
    
          OnCreateSalesInvoiceLinesOnBeforeCreateSalesLine( <=====================
            JobPlanningLine,SalesHeader,SalesHeader2,NewInvoice,NoOfSalesLinesCreated);
          CreateSalesLine(JobPlanningLine);
    
          JobPlanningLineInvoice.InitFromJobPlanningLine(JobPlanningLine);
    ...
Codeunit<Job Create-Invoice>.PROCEDURE<OnCreateSalesInvoiceLinesOnBeforeGetCustomer>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<CreateSalesInvoiceLines>
    Code lines:
    ...
    IF Job."Currency Code" = '' THEN
      JobInvCurrency := Job."Invoice Currency Code" <> '';
    Job.TESTFIELD("Bill-to Customer No.");
    
    IsHandled := FALSE;
    OnCreateSalesInvoiceLinesOnBeforeGetCustomer(JobPlanningLineSource,Cust,IsHandled); <=====================
    IF NOT IsHandled THEN
      Cust.GET(Job."Bill-to Customer No.");
    IF CreditMemo THEN
      SalesHeader2."Document Type" := SalesHeader2."Document Type"::"Credit Memo"
    ...
Codeunit<Job Create-Invoice>.PROCEDURE<OnCreateSalesInvoiceLinesOnBeforeTestJob>
  Raised in: Codeunit<Job Create-Invoice>.PROCEDURE<CreateSalesInvoiceLines>
    Code lines:
    OnBeforeCreateSalesInvoiceLines(JobPlanningLineSource,InvoiceNo,NewInvoice,PostingDate,CreditMemo);
    
    CLEARALL;
    Job.GET(JobNo);
    OnCreateSalesInvoiceLinesOnBeforeTestJob(Job); <=====================
    IF Job.Blocked = Job.Blocked::All THEN
      Job.TestBlocked;
    IF Job."Currency Code" = '' THEN
      JobInvCurrency := Job."Invoice Currency Code" <> '';
    Job.TESTFIELD("Bill-to Customer No.");
    ...
Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromGenJnlLineToJnlLine>
  Raised in: Codeunit<Job Transfer Line>.PROCEDURE<FromGenJnlLineToJnlLine>
    Code lines:
    ...
    JobJnlLine."Line Discount Amount (LCY)" := GenJnlLine."Job Line Disc. Amount (LCY)";
    JobJnlLine."Line Discount Amount" := GenJnlLine."Job Line Discount Amount";
    
    JobJnlLine."Line Discount %" := GenJnlLine."Job Line Discount %";
    
    OnAfterFromGenJnlLineToJnlLine(JobJnlLine,GenJnlLine); <=====================
Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromJnlLineToLedgEntry>
  Raised in: Codeunit<Job Transfer Line>.PROCEDURE<FromJnlLineToLedgEntry>
    Code lines:
    ...
    JobLedgEntry."Unit Cost" := JobJnlLine2."Unit Cost";
    JobLedgEntry."Unit Price" := JobJnlLine2."Unit Price";
    
    JobLedgEntry."Line Discount %" := JobJnlLine2."Line Discount %";
    
    OnAfterFromJnlLineToLedgEntry(JobLedgEntry,JobJnlLine2); <=====================
Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromJnlToPlanningLine>
  Raised in: Codeunit<Job Transfer Line>.PROCEDURE<FromJnlToPlanningLine>
    Code lines:
    ...
    JobPlanningLine."Line Discount %" := JobJnlLine."Line Discount %";
    
    JobPlanningLine."Line Discount Amount (LCY)" := JobJnlLine."Line Discount Amount (LCY)";
    JobPlanningLine."Line Discount Amount" := JobJnlLine."Line Discount Amount";
    
    OnAfterFromJnlToPlanningLine(JobPlanningLine,JobJnlLine); <=====================
Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromJobLedgEntryToPlanningLine>
  Raised in: Codeunit<Job Transfer Line>.PROCEDURE<FromJobLedgEntryToPlanningLine>
    Code lines:
    ...
    JobPlanningLine."Line Discount %" := JobLedgEntry."Line Discount %";
    
    JobPlanningLine."Line Discount Amount (LCY)" := JobLedgEntry."Line Discount Amount (LCY)";
    JobPlanningLine."Line Discount Amount" := JobLedgEntry."Line Discount Amount";
    
    OnAfterFromJobLedgEntryToPlanningLine(JobPlanningLine,JobLedgEntry); <=====================
Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromPlanningLineToJnlLine>
  Raised in: Codeunit<Job Transfer Line>.PROCEDURE<FromPlanningLineToJnlLine>
    Code lines:
    ...
    JobJnlLine."Direct Unit Cost (LCY)" := JobPlanningLine."Direct Unit Cost (LCY)";
    JobJnlLine.VALIDATE("Unit Cost",JobPlanningLine."Unit Cost");
    JobJnlLine.VALIDATE("Unit Price",JobPlanningLine."Unit Price");
    JobJnlLine.VALIDATE("Line Discount %",JobPlanningLine."Line Discount %");
    
    OnAfterFromPlanningLineToJnlLine(JobJnlLine,JobPlanningLine); <=====================
    
    JobJnlLine.UpdateDimensions;
    ItemTrackingMgt.CopyItemTracking(JobPlanningLine.RowID1,JobJnlLine.RowID1,FALSE);
    
Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromPlanningSalesLineToJnlLine>
  Raised in: Codeunit<Job Transfer Line>.PROCEDURE<FromPlanningSalesLineToJnlLine>
    Code lines:
    ...
        JobPlanningLine."Unit Price");
    END ELSE
      ValidateUnitCostAndPrice(JobJnlLine,SalesLine,SalesLine."Unit Cost",JobPlanningLine."Unit Price");
    JobJnlLine.VALIDATE("Line Discount %",SalesLine."Line Discount %");
    
    OnAfterFromPlanningSalesLineToJnlLine(JobJnlLine,JobPlanningLine,SalesHeader,SalesLine,EntryType); <=====================
Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromPurchaseLineToJnlLine>
  Raised in: Codeunit<Job Transfer Line>.PROCEDURE<FromPurchaseLineToJnlLine>
    Code lines:
    ...
      JobJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
      JobJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
      JobJnlLine."Dimension Set ID" := "Dimension Set ID";
    END;
    
    OnAfterFromPurchaseLineToJnlLine(JobJnlLine,PurchHeader,PurchInvHeader,PurchCrMemoHeader,PurchLine,SourceCode); <=====================
Codeunit<Job Transfer Line>.PROCEDURE<OnAfterFromSalesHeaderToPlanningLine>
  Raised in: Codeunit<Job Transfer Line>.PROCEDURE<FromSalesHeaderToPlanningLine>
    Code lines:
    ...
      END ELSE BEGIN
        JobPlanningLine."Unit Price (LCY)" := SalesLine."Unit Price" / CurrencyFactor;
        JobPlanningLine."Total Price (LCY)" := JobPlanningLine."Unit Price (LCY)" * JobPlanningLine.Quantity;
        JobPlanningLine."Line Amount (LCY)" := JobPlanningLine."Total Price (LCY)";
      END;
      OnAfterFromSalesHeaderToPlanningLine(JobPlanningLine,SalesLine,CurrencyFactor); <=====================
      JobPlanningLine.MODIFY;
    END;
Codeunit<Job Transfer Line>.PROCEDURE<OnBeforeFromPlanningSalesLineToJnlLine>
  Raised in: Codeunit<Job Transfer Line>.PROCEDURE<FromPlanningSalesLineToJnlLine>
    Code lines:
    OnBeforeFromPlanningSalesLineToJnlLine(JobPlanningLine,SalesHeader,SalesLine,JobJnlLine,EntryType); <=====================
    
    JobJnlLine."Job No." := JobPlanningLine."Job No.";
    JobJnlLine."Job Task No." := JobPlanningLine."Job Task No.";
    JobJnlLine.Type := JobPlanningLine.Type;
    JobTask.GET(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.");
    JobJnlLine."Posting Date" := SalesHeader."Posting Date";
    JobJnlLine."Document Date" := SalesHeader."Document Date";
    JobJnlLine."Document No." := SalesLine."Document No.";
    JobJnlLine."Entry Type" := EntryType;
    ...
Codeunit<Job Transfer Line>.PROCEDURE<OnBeforeFromPurchaseLineToJnlLine>
  Raised in: Codeunit<Job Transfer Line>.PROCEDURE<FromPurchaseLineToJnlLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforeFromPurchaseLineToJnlLine(PurchHeader,PurchInvHeader,PurchCrMemoHeader,PurchLine,SourceCode,JobJnlLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH PurchLine DO BEGIN
      JobJnlLine.DontCheckStdCost;
      JobJnlLine.VALIDATE("Job No.","Job No.");
      JobJnlLine.VALIDATE("Job Task No.","Job Task No.");
      JobTask.GET("Job No.","Job Task No.");
    ...
Codeunit<Job Calculate Batches>.PROCEDURE<OnBeforeJobPlanningLineInsert>
  Raised in: Codeunit<Job Calculate Batches>.PROCEDURE<SplitOneLine>
    Code lines:
    ...
    JobPlanningLine.VALIDATE("Line Type",JobPlanningLine."Line Type"::Budget);
    JobPlanningLine."Serial No." := '';
    JobPlanningLine."Lot No." := '';
    JobPlanningLine."Line No." := NextLineNo;
    JobPlanningLine.InitJobPlanningLine;
    OnBeforeJobPlanningLineInsert(JobPlanningLine); <=====================
    JobPlanningLine.INSERT(TRUE);
    EXIT(TRUE);
Codeunit<Job Calculate Batches>.PROCEDURE<OnBeforeTransferToPlanningLine>
  Raised in: Codeunit<Job Calculate Batches>.PROCEDURE<TransferToPlanningLine>
    Code lines:
    JobLedgEntry.LOCKTABLE;
    IF JobLedgEntry.FIND('-') THEN
      REPEAT
        OnBeforeTransferToPlanningLine(JobLedgEntry); <=====================
        JobLedgEntry.TESTFIELD("Job No.");
        JobLedgEntry.TESTFIELD("Job Task No.");
        JobLedgEntry.TESTFIELD("Entry Type",JobLedgEntry."Entry Type"::Usage);
        JobLedgEntry."Line Type" := LineType;
        CLEAR(JobPostLine);
        JobPostLine.InsertPlLineFromLedgEntry(JobLedgEntry);
    ...
Codeunit<Copy Job>.PROCEDURE<OnAfterCopyJob>
  Raised in: Codeunit<Copy Job>.PROCEDURE<CopyJob>
    Code lines:
    ...
    CopyJobTasks(SourceJob,TargetJob);
    
    IF CopyPrices THEN
      CopyJobPrices(SourceJob,TargetJob);
    
    OnAfterCopyJob(TargetJob,SourceJob); <=====================
    TargetJob.MODIFY;
Codeunit<Copy Job>.PROCEDURE<OnAfterCopyJobTask>
  Raised in: Codeunit<Copy Job>.PROCEDURE<CopyJobTasks>
    Code lines:
    ...
          JobPlanningLineSource = JobPlanningLineSource::"Job Ledger Entries":
            CopyJLEsToJobPlanningLines(SourceJobTask,TargetJobTask);
        END;
        IF CopyDimensions THEN
          CopyJobTaskDimensions(SourceJobTask,TargetJobTask);
        OnAfterCopyJobTask(TargetJobTask,SourceJobTask,CopyPrices,CopyQuantity); <=====================
      UNTIL SourceJobTask.NEXT = 0;
Codeunit<Job Jnl.-Check Line>.PROCEDURE<OnAfterRunCheck>
  Raised in: Codeunit<Job Jnl.-Check Line>.PROCEDURE<RunCheck>
    Code lines:
    ...
      END;
      IF "Line Type" IN ["Line Type"::Billable,"Line Type"::"Both Budget and Billable"] THEN
        TESTFIELD(Chargeable,TRUE);
    END;
    
    OnAfterRunCheck(JobJnlLine); <=====================
Codeunit<Job Jnl.-Check Line>.PROCEDURE<OnBeforeCheckDim>
  Raised in: Codeunit<Job Jnl.-Check Line>.PROCEDURE<CheckDim>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckDim(JobJnlLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH JobJnlLine DO BEGIN
      IF NOT DimMgt.CheckDimIDComb("Dimension Set ID") THEN
        ERROR(
          CombinationBlockedErr,
          TABLECAPTION,"Journal Template Name","Journal Batch Name","Line No.",
    ...
Codeunit<Job Jnl.-Check Line>.PROCEDURE<OnBeforeCheckItemQuantityJobJnl>
  Raised in: Codeunit<Job Jnl.-Check Line>.PROCEDURE<CheckItemQuantityJobJnl>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckItemQuantityJobJnl(JobJnlline,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF JobJnlline.IsNonInventoriableItem THEN
      EXIT;
    
    Job.GET(JobJnlline."Job No.");
    IF (Job.GetQuantityAvailable(JobJnlline."No.",JobJnlline."Location Code",JobJnlline."Variant Code",0,2) +
    ...
Codeunit<Job Jnl.-Check Line>.PROCEDURE<OnBeforeRunCheck>
  Raised in: Codeunit<Job Jnl.-Check Line>.PROCEDURE<RunCheck>
    Code lines:
    OnBeforeRunCheck(JobJnlLine); <=====================
    
    WITH JobJnlLine DO BEGIN
      IF EmptyLine THEN
        EXIT;
    
      TestJobJnlLine(JobJnlLine);
    
      Job.GET("Job No.");
      Job.TESTFIELD(Status,Job.Status::Open);
    ...
Codeunit<Job Jnl.-Check Line>.PROCEDURE<OnBeforeTestJobJnlLine>
  Raised in: Codeunit<Job Jnl.-Check Line>.PROCEDURE<TestJobJnlLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTestJobJnlLine(JobJournalLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH JobJournalLine DO BEGIN
      TESTFIELD("Job No.");
      TESTFIELD("Job Task No.");
      TESTFIELD("No.");
      TESTFIELD("Posting Date");
    ...
Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnAfterApplyUsageLink>
  Raised in: Codeunit<Job Jnl.-Post Line>.PROCEDURE<CreateJobLedgEntry>
    Code lines:
    ...
        ELSE
          JobPostLine.InsertPlLineFromLedgEntry(JobLedgEntry)
      END;
    
    NextEntryNo := NextEntryNo + 1;
    OnAfterApplyUsageLink(JobLedgEntry); <=====================
    
    EXIT(JobLedgEntryNo);
Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnAfterCopyJobJnlLine>
  Raised in: Codeunit<Job Jnl.-Post Line>.PROCEDURE<Code>
    Code lines:
    ...
      Job.GET("Job No.");
      CheckJob(JobJnlLine,Job);
    
      JobJnlLine2 := JobJnlLine;
    
      OnAfterCopyJobJnlLine(JobJnlLine,JobJnlLine2); <=====================
    
      JobJnlLine2."Source Currency Total Cost" := 0;
      JobJnlLine2."Source Currency Total Price" := 0;
      JobJnlLine2."Source Currency Line Amount" := 0;
    ...
Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnAfterJobLedgEntryInsert>
  Raised in: Codeunit<Job Jnl.-Post Line>.PROCEDURE<CreateJobLedgEntry>
    Code lines:
    ...
      JobLedgEntry."Lot No." := JobJnlLine2."Lot No.";
    END;
    
    OnBeforeJobLedgEntryInsert(JobLedgEntry,JobJnlLine2);
    JobLedgEntry.INSERT(TRUE);
    OnAfterJobLedgEntryInsert(JobLedgEntry,JobJnlLine2); <=====================
    
    JobReg."To Entry No." := NextEntryNo;
    JobReg.MODIFY;
    
    ...
Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnAfterRunCode>
  Raised in: Codeunit<Job Jnl.-Post Line>.PROCEDURE<Code>
    Code lines:
    ...
        END;
      END ELSE
        JobLedgEntryNo := CreateJobLedgEntry(JobJnlLine2);
    END;
    
    OnAfterRunCode(JobJnlLine2,JobLedgEntryNo); <=====================
    
    EXIT(JobLedgEntryNo);
Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnBeforeApplyUsageLink>
  Raised in: Codeunit<Job Jnl.-Post Line>.PROCEDURE<CreateJobLedgEntry>
    Code lines:
    ...
    JobReg."To Entry No." := NextEntryNo;
    JobReg.MODIFY;
    
    JobLedgEntryNo := JobLedgEntry."Entry No.";
    IsHandled := FALSE;
    OnBeforeApplyUsageLink(JobLedgEntry,JobJnlLine2,IsHandled); <=====================
    IF NOT IsHandled THEN
      IF JobLedgEntry."Entry Type" = JobLedgEntry."Entry Type"::Usage THEN BEGIN
        // Usage Link should be applied if it is enabled for the job,
        // if a Job Planning Line number is defined or if it is enabled for a Job Planning Line.
    ...
Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnBeforeCheckJob>
  Raised in: Codeunit<Job Jnl.-Post Line>.PROCEDURE<CheckJob>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckJob(JobJnlLine,Job,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH JobJnlLine DO BEGIN
      Job.TestBlocked;
      Job.TESTFIELD("Bill-to Customer No.");
      Cust.GET(Job."Bill-to Customer No.");
      TESTFIELD("Currency Code",Job."Currency Code");
    ...
Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnBeforeCode>
  Raised in: Codeunit<Job Jnl.-Post Line>.PROCEDURE<Code>
    Code lines:
    OnBeforeCode(JobJnlLine); <=====================
    
    GetGLSetup;
    
    WITH JobJnlLine DO BEGIN
      IF EmptyLine THEN
        EXIT;
    
      IF CheckLine THEN
        JobJnlCheckLine.RunCheck(JobJnlLine);
    ...
Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnBeforeCreateJobLedgEntry>
  Raised in: Codeunit<Job Jnl.-Post Line>.PROCEDURE<CreateJobLedgEntry>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCreateJobLedgEntry(JobJnlLine2,IsHandled,JobLedgEntryNo); <=====================
    IF IsHandled THEN
      EXIT(JobLedgEntryNo);
    
    SetCurrency(JobJnlLine2);
    
    JobLedgEntry.INIT;
    JobTransferLine.FromJnlLineToLedgEntry(JobJnlLine2,JobLedgEntry);
    
    ...
Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnBeforeItemPosting>
  Raised in: Codeunit<Job Jnl.-Post Line>.PROCEDURE<PostItem>
    Code lines:
    WITH JobJnlLine DO BEGIN
      IF NOT "Job Posting Only" THEN BEGIN
        IsHandled := FALSE;
        OnBeforeItemPosting(JobJnlLine2,NextEntryNo,IsHandled); <=====================
        IF NOT IsHandled THEN BEGIN
          InitItemJnlLine;
          JobJnlLineReserve.TransJobJnlLineToItemJnlLine(JobJnlLine2,ItemJnlLine,ItemJnlLine."Quantity (Base)");
    
          ApplyToJobContractEntryNo := FALSE;
          IF JobPlanningLine.GET("Job No.","Job Task No.","Job Planning Line No.") THEN
    ...
Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnBeforeJobLedgEntryInsert>
  Raised in: Codeunit<Job Jnl.-Post Line>.PROCEDURE<CreateJobLedgEntry>
    Code lines:
    ...
    IF JobLedgEntry."Entry Type" = JobLedgEntry."Entry Type"::Sale THEN BEGIN
      JobLedgEntry."Serial No." := JobJnlLine2."Serial No.";
      JobLedgEntry."Lot No." := JobJnlLine2."Lot No.";
    END;
    
    OnBeforeJobLedgEntryInsert(JobLedgEntry,JobJnlLine2); <=====================
    JobLedgEntry.INSERT(TRUE);
    OnAfterJobLedgEntryInsert(JobLedgEntry,JobJnlLine2);
    
    JobReg."To Entry No." := NextEntryNo;
    ...
Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnCheckJobOnBeforeTestJobTaskType>
  Raised in: Codeunit<Job Jnl.-Post Line>.PROCEDURE<CheckJob>
    Code lines:
    ...
      Job.TestBlocked;
      Job.TESTFIELD("Bill-to Customer No.");
      Cust.GET(Job."Bill-to Customer No.");
      TESTFIELD("Currency Code",Job."Currency Code");
      IsHandled := FALSE;
      OnCheckJobOnBeforeTestJobTaskType(JobJnlLine,IsHandled); <=====================
      IF NOT IsHandled THEN BEGIN
        JobTask.GET("Job No.","Job Task No.");
        JobTask.TESTFIELD("Job Task Type",JobTask."Job Task Type"::Posting);
      END;
Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnGetJobConsumptionValueEntryFilter>
  Raised in: Codeunit<Job Jnl.-Post Line>.PROCEDURE<GetJobConsumptionValueEntry>
    Code lines:
    ...
      ValueEntry.SETRANGE("Job No.","Job No.");
      ValueEntry.SETRANGE("Job Task No.","Job Task No.");
      ValueEntry.SETRANGE("Document No.","Document No.");
      ValueEntry.SETRANGE("Item Ledger Entry Type",ValueEntry."Item Ledger Entry Type"::"Negative Adjmt.");
      ValueEntry.SETRANGE("Job Ledger Entry No.",0);
      OnGetJobConsumptionValueEntryFilter(ValueEntry,JobJnlLine); <=====================
    END;
    EXIT(ValueEntry.FINDSET);
Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnPostItemOnAfterApplyItemTracking>
  Raised in: Codeunit<Job Jnl.-Post Line>.PROCEDURE<PostItem>
    Code lines:
    ...
            IF JobLedgEntry2.FINDFIRST AND (JobLedgEntry2.Quantity = -ItemLedgEntry.Quantity) THEN
              SkipJobLedgerEntry := TRUE
            ELSE BEGIN
              JobJnlLine2."Serial No." := ItemLedgEntry."Serial No.";
              JobJnlLine2."Lot No." := ItemLedgEntry."Lot No.";
              OnPostItemOnAfterApplyItemTracking(JobJnlLine2,ItemLedgEntry,JobLedgEntry2,SkipJobLedgerEntry); <=====================
            END;
          END;
          IF NOT SkipJobLedgerEntry THEN BEGIN
            TempRemainingQty := JobJnlLine2."Remaining Qty.";
    ...
Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnPostItemOnBeforeGetJobConsumptionValueEntry>
  Raised in: Codeunit<Job Jnl.-Post Line>.PROCEDURE<PostItem>
    Code lines:
    ...
          ItemJnlPostLine.CollectTrackingSpecification(TempTrackingSpecification);
          PostWhseJnlLine(ItemJnlLine2,ItemJnlLine2.Quantity,ItemJnlLine2."Quantity (Base)",TempTrackingSpecification);
        END;
      END;
    
      OnPostItemOnBeforeGetJobConsumptionValueEntry(JobJnlLine); <=====================
      IF GetJobConsumptionValueEntry(ValueEntry,JobJnlLine) THEN BEGIN
        RemainingAmount := JobJnlLine2."Line Amount";
        RemainingAmountLCY := JobJnlLine2."Line Amount (LCY)";
        RemainingQtyToTrack := JobJnlLine2.Quantity;
    ...
Codeunit<Job Jnl.-Post Line>.PROCEDURE<OnPostItemOnBeforeUpdateTotalAmounts>
  Raised in: Codeunit<Job Jnl.-Post Line>.PROCEDURE<PostItem>
    Code lines:
    ...
            JobJnlLine2.Quantity := -ValueEntry."Invoiced Quantity" / "Qty. per Unit of Measure";
            JobJnlLine2."Quantity (Base)" :=
              ROUND(JobJnlLine2.Quantity * "Qty. per Unit of Measure",UOMMgt.QtyRndPrecision);
            Currency.Initialize("Currency Code");
    
            OnPostItemOnBeforeUpdateTotalAmounts(JobJnlLine2,ItemLedgEntry,ValueEntry); <=====================
    
            UpdateJobJnlLineTotalAmounts(JobJnlLine2,Currency."Amount Rounding Precision");
            UpdateJobJnlLineAmount(
              JobJnlLine2,RemainingAmount,RemainingAmountLCY,RemainingQtyToTrack,Currency."Amount Rounding Precision");
    ...
Codeunit<Job Jnl.-Post Batch>.PROCEDURE<OnAfterCheckJnlLine>
  Raised in: Codeunit<Job Jnl.-Post Batch>.PROCEDURE<Code>
    Code lines:
    ...
      REPEAT
        LineCount := LineCount + 1;
        Window.UPDATE(2,LineCount);
        CheckRecurringLine(JobJnlLine);
        JobJnlCheckLine.RunCheck(JobJnlLine);
        OnAfterCheckJnlLine(JobJnlLine); <=====================
        IF NEXT = 0 THEN
          FIND('-');
      UNTIL "Line No." = StartLineNo;
      NoOfRecords := LineCount;
    ...
Codeunit<Job Jnl.-Post Batch>.PROCEDURE<OnAfterJobJnlPostLine>
  Raised in: Codeunit<Job Jnl.-Post Batch>.PROCEDURE<Code>
    Code lines:
    ...
              "Document No." := NoSeriesMgt2[PostingNoSeriesNo].GetNextNo("Posting No. Series","Posting Date",FALSE);
              LastPostedDocNo := "Document No.";
            END;
        OnBeforeJobJnlPostLine(JobJnlLine);
        JobJnlPostLine.RunWithCheck(JobJnlLine);
        OnAfterJobJnlPostLine(JobJnlLine); <=====================
      UNTIL NEXT = 0;
    
      InvtSetup.GET;
      IF InvtSetup."Automatic Cost Adjustment" <>
    ...
Codeunit<Job Jnl.-Post Batch>.PROCEDURE<OnAfterPostJnlLines>
  Raised in: Codeunit<Job Jnl.-Post Batch>.PROCEDURE<Code>
    Code lines:
    ...
    
      INIT;
      "Line No." := JobRegNo;
    
      UpdateAndDeleteLines;
      OnAfterPostJnlLines(JobJnlBatch,JobJnlLine,JobRegNo); <=====================
    
      COMMIT;
    END;
    UpdateAnalysisView.UpdateAll(0,TRUE);
    ...
Codeunit<Job Jnl.-Post Batch>.PROCEDURE<OnBeforeDeleteNonRecJnlLines>
  Raised in: Codeunit<Job Jnl.-Post Batch>.PROCEDURE<UpdateAndDeleteLines>
    Code lines:
    ...
          JobJnlLine2.COPYFILTERS(JobJnlLine);
          JobJnlLine2.SETFILTER("No.",'<>%1','');
          IF JobJnlLine2.FIND THEN; // Remember the last line
          JobJnlLine3.COPY(JobJnlLine);
          IsHandled := FALSE;
          OnBeforeDeleteNonRecJnlLines(JobJnlLine3,IsHandled); <=====================
          IF NOT IsHandled THEN BEGIN
            JobJnlLine3.DELETEALL;
            JobJnlLine3.RESET;
            JobJnlLine3.SETRANGE("Journal Template Name","Journal Template Name");
    ...
Codeunit<Job Jnl.-Post Batch>.PROCEDURE<OnBeforeJobJnlPostLine>
  Raised in: Codeunit<Job Jnl.-Post Batch>.PROCEDURE<Code>
    Code lines:
    ...
              LastDocNo := "Document No.";
              EVALUATE(PostingNoSeriesNo,NoSeries.Description);
              "Document No." := NoSeriesMgt2[PostingNoSeriesNo].GetNextNo("Posting No. Series","Posting Date",FALSE);
              LastPostedDocNo := "Document No.";
            END;
        OnBeforeJobJnlPostLine(JobJnlLine); <=====================
        JobJnlPostLine.RunWithCheck(JobJnlLine);
        OnAfterJobJnlPostLine(JobJnlLine);
      UNTIL NEXT = 0;
    
    ...
Codeunit<Job Jnl.-Post Batch>.PROCEDURE<OnBeforeUpdateAndDeleteLines>
  Raised in: Codeunit<Job Jnl.-Post Batch>.PROCEDURE<UpdateAndDeleteLines>
    Code lines:
    OnBeforeUpdateAndDeleteLines(JobJnlLine); <=====================
    
    WITH JobJnlLine DO BEGIN
      IF JobRegNo <> 0 THEN
        IF JobJnlTemplate.Recurring THEN BEGIN
          // Recurring journal
          LineCount := 0;
          JobJnlLine2.COPYFILTERS(JobJnlLine);
          JobJnlLine2.FIND('-');
          REPEAT
    ...
Codeunit<JobJnlManagement>.PROCEDURE<OnLookupNameOnAfterSetFilters>
  Raised in: Codeunit<JobJnlManagement>.PROCEDURE<LookupName>
    Code lines:
    COMMIT;
    JobJnlBatch."Journal Template Name" := JobJnlLine.GETRANGEMAX("Journal Template Name");
    JobJnlBatch.Name := JobJnlLine.GETRANGEMAX("Journal Batch Name");
    JobJnlBatch.FILTERGROUP(2);
    JobJnlBatch.SETRANGE("Journal Template Name",JobJnlBatch."Journal Template Name");
    OnLookupNameOnAfterSetFilters(JobJnlBatch); <=====================
    JobJnlBatch.FILTERGROUP(0);
    IF PAGE.RUNMODAL(0,JobJnlBatch) = ACTION::LookupOK THEN BEGIN
      CurrentJnlBatchName := JobJnlBatch.Name;
      SetName(CurrentJnlBatchName,JobJnlLine);
Codeunit<Job Jnl.-Post+Print>.PROCEDURE<OnBeforePostJournalBatch>
  Raised in: Codeunit<Job Jnl.-Post+Print>.PROCEDURE<Code>
    Code lines:
    ...
      JobJnlTemplate.TESTFIELD("Posting Report ID");
      IF JobJnlTemplate.Recurring AND (GETFILTER("Posting Date") <> '') THEN
        FIELDERROR("Posting Date",Text000);
    
      HideDialog := FALSE;
      OnBeforePostJournalBatch(JobJnlLine,HideDialog); <=====================
      IF NOT HideDialog THEN
        IF NOT CONFIRM(Text001) THEN
          EXIT;
    
    ...
Codeunit<Job Jnl.-Post+Print>.PROCEDURE<OnBeforePrintJobReg>
  Raised in: Codeunit<Job Jnl.-Post+Print>.PROCEDURE<Code>
    Code lines:
    ...
      CODEUNIT.RUN(CODEUNIT::"Job Jnl.-Post Batch",JobJnlLine);
    
      IF JobReg.GET("Line No.") THEN BEGIN
        JobReg.SETRECFILTER;
        IsHandled := FALSE;
        OnBeforePrintJobReg(JobReg,IsHandled); <=====================
        IF NOT IsHandled THEN
          REPORT.RUN(JobJnlTemplate."Posting Report ID",FALSE,FALSE,JobReg);
      END;
    
    ...
Codeunit<Job Jnl.-B.Post+Print>.PROCEDURE<OnBeforePostJournalBatch>
  Raised in: Codeunit<Job Jnl.-B.Post+Print>.PROCEDURE<Code>
    Code lines:
    WITH JobJnlBatch DO BEGIN
      JobJnlTemplate.GET("Journal Template Name");
      JobJnlTemplate.TESTFIELD("Posting Report ID");
    
      HideDialog := FALSE;
      OnBeforePostJournalBatch(JobJnlBatch,HideDialog); <=====================
      IF NOT HideDialog THEN
        IF NOT CONFIRM(Text000) THEN
          EXIT;
    
    ...
Codeunit<Job Link Usage>.PROCEDURE<OnAfterFindMatchingJobPlanningLine>
  Raised in: Codeunit<Job Link Usage>.PROCEDURE<FindMatchingJobPlanningLine>
    Code lines:
    ...
    // Match unspecific Job Planning Line.
    IF JobPlanningLine.FINDFIRST THEN
      EXIT(TRUE);
    
    JobPlanningLineFound := FALSE;
    OnAfterFindMatchingJobPlanningLine(JobPlanningLine,JobLedgerEntry,JobPlanningLineFound); <=====================
    EXIT(JobPlanningLineFound);
Codeunit<Job Link Usage>.PROCEDURE<OnBeforeJobPlanningLineUse>
  Raised in: Codeunit<Job Link Usage>.PROCEDURE<MatchUsageUnspecified>
    Code lines:
    ...
        ELSE
          MatchedQty := RemainingQtyToMatch;
        MatchedTotalCost := (JobLedgerEntry."Total Cost" / JobLedgerEntry."Quantity (Base)") * MatchedQty;
        MatchedLineAmount := (JobLedgerEntry."Line Amount" / JobLedgerEntry."Quantity (Base)") * MatchedQty;
    
        OnBeforeJobPlanningLineUse(JobPlanningLine,JobLedgerEntry); <=====================
        JobPlanningLine.SetUsagePostingDateAndCurrencyFactor(JobLedgerEntry."Posting Date",JobLedgerEntry."Currency Factor");
        JobPlanningLine.Use(CalcQtyFromBaseQty(MatchedQty,JobPlanningLine."Qty. per Unit of Measure"),
          MatchedTotalCost,MatchedLineAmount);
        RemainingQtyToMatch -= MatchedQty;
    ...
Codeunit<Job Link Usage>.PROCEDURE<OnBeforeModifyJobPlanningLine>
  Raised in: Codeunit<Job Link Usage>.PROCEDURE<CreateJobPlanningLine>
    Code lines:
    ...
    JobPlanningLine.SETRANGE("Job Task No.",JobLedgerEntry."Job Task No.");
    JobPlanningLine.SETRANGE("Schedule Line",TRUE);
    JobPlanningLine.FINDLAST;
    JobPlanningLine.VALIDATE("Usage Link",TRUE);
    JobPlanningLine.VALIDATE(Quantity,RemainingQtyToMatch);
    OnBeforeModifyJobPlanningLine(JobPlanningLine,JobLedgerEntry); <=====================
    JobPlanningLine.MODIFY;
    
    // If type is Both Budget And Billable and that type isn't allowed,
    // retrieve the Billabe line and modify the quantity as well.
    ...
Codeunit<Job Link Usage>.PROCEDURE<OnMatchUsageUnspecifiedOnBeforeConfirm>
  Raised in: Codeunit<Job Link Usage>.PROCEDURE<MatchUsageUnspecified>
    Code lines:
    RemainingQtyToMatch := JobLedgerEntry."Quantity (Base)";
    REPEAT
      IF NOT FindMatchingJobPlanningLine(JobPlanningLine,JobLedgerEntry) THEN
        IF EmptyLineType THEN BEGIN
          OnMatchUsageUnspecifiedOnBeforeConfirm(JobPlanningLine,JobLedgerEntry,Confirmed); <=====================
          IF NOT Confirmed THEN
            Confirmed := CONFIRM(ConfirmUsageWithBlankLineTypeQst,FALSE);
          IF NOT Confirmed THEN
            ERROR('');
          RemainingQtyToMatch := 0;
    ...
Codeunit<Cust. Entry-Edit>.PROCEDURE<OnBeforeCustLedgEntryModify>
  Raised in: Codeunit<Cust. Entry-Edit>.<OnRun>
    Code lines:
    ...
      CustLedgEntry.VALIDATE("Applies-to Ext. Doc. No.","Applies-to Ext. Doc. No.");
      CustLedgEntry.VALIDATE("Message to Recipient","Message to Recipient");
      CustLedgEntry."Direct Debit Mandate ID" := "Direct Debit Mandate ID";
    END;
    CustLedgEntry.VALIDATE("Exported to Payment File","Exported to Payment File");
    OnBeforeCustLedgEntryModify(CustLedgEntry,Rec); <=====================
    CustLedgEntry.TESTFIELD("Entry No.","Entry No.");
    CustLedgEntry.MODIFY;
    Rec := CustLedgEntry;
Codeunit<Cust. Entry-Edit>.PROCEDURE<OnBeforeOnRun>
  Raised in: Codeunit<Cust. Entry-Edit>.<OnRun>
    Code lines:
    OnBeforeOnRun(Rec,CustLedgEntry,DtldCustLedgEntry); <=====================
    
    CustLedgEntry := Rec;
    CustLedgEntry.LOCKTABLE;
    CustLedgEntry.FIND;
    CustLedgEntry."On Hold" := "On Hold";
    IF CustLedgEntry.Open THEN BEGIN
      CustLedgEntry."Due Date" := "Due Date";
      DtldCustLedgEntry.SETCURRENTKEY("Cust. Ledger Entry No.");
      DtldCustLedgEntry.SETRANGE("Cust. Ledger Entry No.",CustLedgEntry."Entry No.");
    ...
Codeunit<Job Planning Line-Reserve>.PROCEDURE<OnAfterReservQuantity>
  Raised in: Codeunit<Job Planning Line-Reserve>.PROCEDURE<ReservQuantity>
    Code lines:
    ...
          QtyToReserve := JobPlanningLine."Remaining Qty.";
          QtyToReserveBase := JobPlanningLine."Remaining Qty. (Base)";
        END;
    END;
    
    OnAfterReservQuantity(JobPlanningLine,QtyToReserve,QtyToReserveBase); <=====================
Codeunit<Job Planning Line-Reserve>.PROCEDURE<OnBeforeCheckReservedQtyBase>
  Raised in: Codeunit<Job Planning Line-Reserve>.PROCEDURE<CheckReservedQtyBase>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckReservedQtyBase(JobPlanningLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF ABS(JobPlanningLine."Remaining Qty. (Base)") < ABS(JobPlanningLine."Reserved Qty. (Base)") + QuantityBase THEN
      ERROR(
        Text000,
        ABS(JobPlanningLine."Remaining Qty. (Base)") - ABS(JobPlanningLine."Reserved Qty. (Base)"));
Codeunit<Paypal Account Proxy>.PROCEDURE<GetMsPayIsEnabled>
  Raised in: Page<Native - General Setting>.PROCEDURE<AssertCanChangePaypalSetup>
    Code lines:
    PaypalAccountProxy.GetMsPayIsEnabled(MsPayIsEnabled); <=====================
    
    IF MsPayIsEnabled THEN
      ERROR(CannotSetUpPaypalErr);
Codeunit<Paypal Account Proxy>.PROCEDURE<GetPaypalAccount>
  Raised in: Table<Native - Gen. Settings Buffer>.PROCEDURE<LoadRecord>
    Code lines:
    ...
    IF GeneralLedgerSetup.UseVat THEN
      "VAT/Tax Rounding Precision" := 2
    ELSE
      "VAT/Tax Rounding Precision" := 3;
    
    PaypalAccountProxy.GetPaypalAccount("Paypal Email Address"); <=====================
    
    TempNativeAPITaxSetup.LoadSetupRecords;
    TempNativeAPITaxSetup.SETRANGE(Default,TRUE);
    IF TempNativeAPITaxSetup.FINDFIRST THEN BEGIN
    ...
Codeunit<Paypal Account Proxy>.PROCEDURE<GetPaypalSetupOptions>
  Raised in: Page<BC O365 Payment Services>.PROCEDURE<UpdateControls>
    Code lines:
    PaypalAccountProxy.GetPaypalSetupOptions(PaypalIsEnabled,PaypalIsDefault); <=====================
    
    IF PaypalIsDefault THEN
      MsPayOrPaypalOption := MsPayOrPaypalOption::PayPal
    ELSE
      MsPayOrPaypalOption := MsPayOrPaypalOption::"Microsoft Pay Payments";
    
    TempPaymentServiceSetup.OnRegisterPaymentServices(TempPaymentServiceSetup);
    TempPaymentServiceSetup.SETRANGE(Enabled,TRUE);
    NumberOfPaymentServiceSetups := TempPaymentServiceSetup.COUNT;
    ...
Codeunit<Paypal Account Proxy>.PROCEDURE<SetAlwaysIncludeMsPayOnDocuments>
  Raised in: Codeunit<O365 Sales Invoice Payment>.PROCEDURE<SetMspayDefault>
    Code lines:
    DummyPaymentServiceSetup.OnDoNotIncludeAnyPaymentServicesOnAllDocuments;
    PaypalAccountProxy.SetAlwaysIncludeMsPayOnDocuments(TRUE,TRUE); <=====================
    UpdatePaymentServicesForInvoicesQuotesAndOrders;
Codeunit<Paypal Account Proxy>.PROCEDURE<SetAlwaysIncludePaypalOnDocuments>
  Raised in: Codeunit<O365 Sales Invoice Payment>.PROCEDURE<SetPaypalDefault>
    Code lines:
    DummyPaymentServiceSetup.OnDoNotIncludeAnyPaymentServicesOnAllDocuments;
    PaypalAccountProxy.SetAlwaysIncludePaypalOnDocuments(TRUE,TRUE); <=====================
    UpdatePaymentServicesForInvoicesQuotesAndOrders;
Codeunit<Paypal Account Proxy>.PROCEDURE<SetPaypalAccount>
  Raised in: Page<BC O365 Payment Services>.<Control>.<OnValidate>
    Code lines:
    IF MsPayOrPaypalOption = MsPayOrPaypalOption::"Microsoft Pay Payments" THEN BEGIN
      O365SalesInvoicePayment.SetMspayDefault;
      IF CONFIRM(RemovePaypalSettingsQst) THEN
        PaypalAccountProxy.SetPaypalAccount('',TRUE); <=====================
    END ELSE
      O365SalesInvoicePayment.SetPaypalDefault;
    
    UpdateControls;
    CurrPage.UPDATE;
  Raised in: Table<Native - Gen. Settings Buffer>.PROCEDURE<SaveRecord>
    Code lines:
    IF xRec."Currency Symbol" <> "Currency Symbol" THEN
      UpdateCurrencySymbol;
    
    IF xRec."Paypal Email Address" <> "Paypal Email Address" THEN
      PaypalAccountProxy.SetPaypalAccount("Paypal Email Address",TRUE); <=====================
    
    IF xRec."Country/Region Code" <> "Country/Region Code" THEN
      UpdateCountryRegionCode;
    
    IF xRec."Language Locale ID" <> "Language Locale ID" THEN
    ...
Codeunit<QBO Sync Proxy>.PROCEDURE<GetQBOSyncSettings>
  Raised in: Page<Native - Sync Services Setting>.PROCEDURE<SetCalculatedFields>
    Code lines:
    QBOSyncProxy.GetQBOSyncSettings(QBOSyncTitle,QBOSyncDescription,QBOSyncEnabled); <=====================
    QBDSyncProxy.GetQBDSyncSettings(QBDSyncTitle,QBDSyncDescription,QBDSyncEnabled,QBDSyncSendToEmail);
  Raised in: Codeunit<O365 Sales Management>.PROCEDURE<GetQboQbdVisibility>
    Code lines:
    // QuickBooks Online should be visible if the extension is installed (i.e. someone replies to the event)
    QBOSyncProxy.GetQBOSyncSettings(QbOnlineTitle,QbOnlineDescription,QbOnlineEnabled); <=====================
    QbOnlineVisible := (QbOnlineTitle <> '') OR (QbOnlineDescription <> '');
    
    // QuickBooks Desktop should be visible if the extension is installed (i.e. someone replies to the event)
    QBDSyncProxy.GetQBDSyncSettings(QbDesktopTitle,QbDesktopDescription,QbDesktopEnabled,QbDesktopEmail);
    QbDesktopVisible := (QbDesktopTitle <> '') OR (QbDesktopDescription <> '');
Codeunit<QBO Sync Proxy>.PROCEDURE<OnGetQBOAuthURL>
  Raised in: Page<Native - QBO Sync Auth>.<OnAfterGetRecord>
    Code lines:
    QBOSyncProxy.OnGetQBOAuthURL; <=====================
    AuthorizationURL := QBOSyncProxy.GetQBOAuthURL;
Codeunit<QBO Sync Proxy>.PROCEDURE<SetQBOSyncEnabled>
  Raised in: Page<Native - Sync Services Setting>.Control<qboSyncEnabled>.<OnValidate>
    Code lines:
    IF QBOSyncEnabled THEN
      ERROR(CantEnableSyncFromHereErr);
    QBOSyncProxy.SetQBOSyncEnabled(QBOSyncEnabled); <=====================
Codeunit<QBD Sync Proxy>.PROCEDURE<GetQBDSyncSettings>
  Raised in: Page<Native - Sync Services Setting>.PROCEDURE<SetCalculatedFields>
    Code lines:
    QBOSyncProxy.GetQBOSyncSettings(QBOSyncTitle,QBOSyncDescription,QBOSyncEnabled);
    QBDSyncProxy.GetQBDSyncSettings(QBDSyncTitle,QBDSyncDescription,QBDSyncEnabled,QBDSyncSendToEmail); <=====================
  Raised in: Codeunit<O365 Sales Management>.PROCEDURE<GetQboQbdVisibility>
    Code lines:
    // QuickBooks Online should be visible if the extension is installed (i.e. someone replies to the event)
    QBOSyncProxy.GetQBOSyncSettings(QbOnlineTitle,QbOnlineDescription,QbOnlineEnabled);
    QbOnlineVisible := (QbOnlineTitle <> '') OR (QbOnlineDescription <> '');
    
    // QuickBooks Desktop should be visible if the extension is installed (i.e. someone replies to the event)
    QBDSyncProxy.GetQBDSyncSettings(QbDesktopTitle,QbDesktopDescription,QbDesktopEnabled,QbDesktopEmail); <=====================
    QbDesktopVisible := (QbDesktopTitle <> '') OR (QbDesktopDescription <> '');
Codeunit<QBD Sync Proxy>.PROCEDURE<SendEmailInBackground>
  Raised in: Page<Native - Sync Services Setting>.PROCEDURE<SendInstructionsByEmail>
    Code lines:
    QBDSyncProxy.SendEmailInBackground(Handled); <=====================
    IF NOT Handled THEN
      ERROR(SendingEmailErr);
    ODataActionManagement.SetDeleteResponseLocation(ActionContext,PAGE::"Native - Sync Services Setting");
Codeunit<QBD Sync Proxy>.PROCEDURE<SetQBDSyncEnabled>
  Raised in: Page<Native - Sync Services Setting>.Control<qbdSyncEnabled>.<OnValidate>
    Code lines:
    QBDSyncProxy.SetQBDSyncEnabled(QBDSyncEnabled); <=====================
Codeunit<QBD Sync Proxy>.PROCEDURE<SetQBDSyncSendToEmail>
  Raised in: Page<Native - Sync Services Setting>.Control<qbdSyncSendToEmail>.<OnValidate>
    Code lines:
    IF QBDSyncSendToEmail = '' THEN
      ERROR(SendToEmailErr);
    
    QBDSyncProxy.SetQBDSyncSendToEmail(QBDSyncSendToEmail); <=====================
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnAfterCheckAccountNo>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<CheckAccountNo>
    Code lines:
    ...
              IF GenJnlTemplate.Type <> GenJnlTemplate.Type::Intercompany THEN
                FIELDERROR("Account Type");
          END;
      END;
    
    OnAfterCheckAccountNo(GenJnlLine); <=====================
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnAfterCheckBalAccountNo>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<CheckBalAccountNo>
    Code lines:
    ...
            IF GenJnlTemplate.Type <> GenJnlTemplate.Type::Intercompany THEN
              FIELDERROR("Bal. Account Type");
          END;
      END;
    
    OnAfterCheckBalAccountNo(GenJnlLine); <=====================
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnAfterCheckGenJnlLine>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<RunCheck>
    Code lines:
    ...
    END;
    
    IF CostAccSetup.GET THEN
      CostAccMgt.CheckValidCCAndCOInGLEntry(GenJnlLine."Dimension Set ID");
    
    OnAfterCheckGenJnlLine(GenJnlLine); <=====================
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnAfterDateNoAllowed>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<IsDateNotAllowed>
    Code lines:
    DateIsNotAllowed := NOT UserSetupManagement.IsPostingDateValidWithSetup(PostingDate,SetupRecordID);
    OnAfterDateNoAllowed(PostingDate,DateIsNotAllowed); <=====================
    EXIT(DateIsNotAllowed);
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckAccountNo>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<CheckAccountNo>
    Code lines:
    OnBeforeCheckAccountNo(GenJnlLine,CheckDone); <=====================
    IF CheckDone THEN
      EXIT;
    
    WITH GenJnlLine DO
      CASE "Account Type" OF
        "Account Type"::"G/L Account":
          BEGIN
            IF ("Gen. Bus. Posting Group" <> '') OR ("Gen. Prod. Posting Group" <> '') OR
               ("VAT Bus. Posting Group" <> '') OR ("VAT Prod. Posting Group" <> '')
    ...
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckBalAccountNo>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<CheckBalAccountNo>
    Code lines:
    OnBeforeCheckBalAccountNo(GenJnlLine,CheckDone); <=====================
    IF CheckDone THEN
      EXIT;
    
    WITH GenJnlLine DO
      CASE "Bal. Account Type" OF
        "Bal. Account Type"::"G/L Account":
          BEGIN
            IF ("Bal. Gen. Bus. Posting Group" <> '') OR ("Bal. Gen. Prod. Posting Group" <> '') OR
               ("Bal. VAT Bus. Posting Group" <> '') OR ("Bal. VAT Prod. Posting Group" <> '')
    ...
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckBalDocType>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<CheckBalDocType>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckBalDocType(GenJnlLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH GenJnlLine DO
      IF "Document Type" <> 0 THEN BEGIN
        IF ("Bal. Account Type" = "Bal. Account Type"::Employee) AND NOT
           ("Document Type" IN ["Document Type"::Payment,"Document Type"::" "])
        THEN
    ...
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckDimensions>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<CheckDimensions>
    Code lines:
    OnBeforeCheckDimensions(GenJnlLine,CheckDone); <=====================
    IF CheckDone THEN
      EXIT;
    
    WITH GenJnlLine DO BEGIN
      IF NOT DimMgt.CheckDimIDComb("Dimension Set ID") THEN
        ThrowGenJnlLineError(GenJnlLine,Text011,DimMgt.GetDimCombErr);
    
      TableID[1] := DimMgt.TypeToTableID1("Account Type");
      No[1] := "Account No.";
    ...
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckDocType>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<CheckDocType>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckDocType(GenJnlLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH GenJnlLine DO
      IF "Document Type" <> 0 THEN BEGIN
        IF ("Account Type" = "Account Type"::Employee) AND NOT
           ("Document Type" IN ["Document Type"::Payment,"Document Type"::" "])
        THEN
    ...
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckICPartner>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<CheckICPartner>
    Code lines:
    OnBeforeCheckICPartner(AccountType,AccountNo,DocumentType,CheckDone); <=====================
    IF CheckDone THEN
      EXIT;
    
    CASE AccountType OF
      AccountType::Customer:
        IF Customer.GET(AccountNo) THEN BEGIN
          Customer.CheckBlockedCustOnJnls(Customer,DocumentType,TRUE);
          IF (Customer."IC Partner Code" <> '') AND (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND
             ICPartner.GET(Customer."IC Partner Code")
    ...
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckPostingDateInFiscalYear>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<CheckDates>
    Code lines:
    ...
           ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account")
        THEN
          FIELDERROR("Posting Date",Text000);
        IF NOT SkipFiscalYearCheck THEN BEGIN
          IsHandled := FALSE;
          OnBeforeCheckPostingDateInFiscalYear(GenJnlLine,IsHandled); <=====================
          IF NOT IsHandled THEN
            AccountingPeriodMgt.CheckPostingDateInFiscalYear("Posting Date");
        END;
      END;
    ...
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckPurchDocNoIsNotUsed>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<CheckPurchDocNoIsNotUsed>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckPurchDocNoIsNotUsed(DocType,DocNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    OldVendLedgEntry.SETRANGE("Document No.",DocNo);
    OldVendLedgEntry.SETRANGE("Document Type",DocType);
    IF OldVendLedgEntry.FINDFIRST THEN
      ERROR(PurchDocAlreadyExistsErr,OldVendLedgEntry."Document Type",DocNo);
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeCheckSalesDocNoIsNotUsed>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<CheckSalesDocNoIsNotUsed>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckSalesDocNoIsNotUsed(DocType,DocNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    OldCustLedgEntry.SETRANGE("Document No.",DocNo);
    OldCustLedgEntry.SETRANGE("Document Type",DocType);
    IF OldCustLedgEntry.FINDFIRST THEN
      ERROR(SalesDocAlreadyExistsErr,OldCustLedgEntry."Document Type",DocNo);
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeDateNotAllowed>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<CheckDates>
    Code lines:
    ...
          IF NOT IsHandled THEN
            AccountingPeriodMgt.CheckPostingDateInFiscalYear("Posting Date");
        END;
      END;
    
      OnBeforeDateNotAllowed(GenJnlLine,DateCheckDone); <=====================
      IF NOT DateCheckDone THEN
        IF DateNotAllowed("Posting Date") THEN
          FIELDERROR("Posting Date",Text001);
    
    ...
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeErrorIfNegativeAmt>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<ErrorIfNegativeAmt>
    Code lines:
    RaiseError := GenJnlLine.Amount < 0;
    OnBeforeErrorIfNegativeAmt(GenJnlLine,RaiseError); <=====================
    IF RaiseError THEN
      GenJnlLine.FIELDERROR(Amount,Text007);
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeErrorIfPositiveAmt>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<ErrorIfPositiveAmt>
    Code lines:
    RaiseError := GenJnlLine.Amount > 0;
    OnBeforeErrorIfPositiveAmt(GenJnlLine,RaiseError); <=====================
    IF RaiseError THEN
      GenJnlLine.FIELDERROR(Amount,Text008);
Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<OnBeforeRunCheck>
  Raised in: Codeunit<Gen. Jnl.-Check Line>.PROCEDURE<RunCheck>
    Code lines:
    OnBeforeRunCheck(GenJnlLine); <=====================
    
    GLSetup.GET;
    WITH GenJnlLine DO BEGIN
      IF EmptyLine THEN
        EXIT;
    
      IF NOT GenJnlTemplateFound THEN BEGIN
        IF GenJnlTemplate.GET("Journal Template Name") THEN;
        GenJnlTemplateFound := TRUE;
    ...
Codeunit<CA Jnl.-Post Line>.PROCEDURE<OnAfterCostEntryInsert>
  Raised in: Codeunit<CA Jnl.-Post Line>.PROCEDURE<InsertCostEntries>
    Code lines:
    ...
      CostEntry."Batch Name" := "Journal Batch Name";
      CostEntry."Allocation Description" := "Allocation Description";
      CostEntry."Allocation ID" := "Allocation ID";
      OnBeforeCostEntryInsert(CostEntry,CostJnlLine);
      CostEntry.INSERT;
      OnAfterCostEntryInsert(CostEntry,CostJnlLine); <=====================
    END;
    TotalCredit := TotalCredit + CostEntry."Credit Amount";
    TotalDebit := TotalDebit + CostEntry."Debit Amount";
    CreateCostRegister;
Codeunit<CA Jnl.-Post Line>.PROCEDURE<OnBeforeCostEntryInsert>
  Raised in: Codeunit<CA Jnl.-Post Line>.PROCEDURE<InsertCostEntries>
    Code lines:
    ...
      CostEntry.Allocated := Allocated;
      CostEntry."User ID" := USERID;
      CostEntry."Batch Name" := "Journal Batch Name";
      CostEntry."Allocation Description" := "Allocation Description";
      CostEntry."Allocation ID" := "Allocation ID";
      OnBeforeCostEntryInsert(CostEntry,CostJnlLine); <=====================
      CostEntry.INSERT;
      OnAfterCostEntryInsert(CostEntry,CostJnlLine);
    END;
    TotalCredit := TotalCredit + CostEntry."Credit Amount";
    ...
Codeunit<CA Jnl.-Post Batch>.PROCEDURE<OnAfterCode>
  Raised in: Codeunit<CA Jnl.-Post Batch>.PROCEDURE<Code>
    Code lines:
    ...
        DELETEALL;
    
      COMMIT;
    END;
    
    OnAfterCode(CostJnlLine); <=====================
Codeunit<Transfer GL Entries to CA>.PROCEDURE<OnAfterInsertCostJournalLine>
  Raised in: Codeunit<Transfer GL Entries to CA>.PROCEDURE<InsertCostJournalLine>
    Code lines:
    ...
      TempCostJnlLine."Cost Object Code" := CostObjectCode;
    TempCostJnlLine."Source Code" := SourceCodeSetup."G/L Entry to CA";
    TempCostJnlLine."G/L Entry No." := GLEntry."Entry No.";
    TempCostJnlLine."System-Created Entry" := TRUE;
    TempCostJnlLine.INSERT;
    OnAfterInsertCostJournalLine(TempCostJnlLine); <=====================
    
    NoOfJnlLines := NoOfJnlLines + 1;
    MaintainTotals(GLEntry.Amount);
Codeunit<CA Jnl.-Post+Print>.PROCEDURE<OnBeforePostJournalBatch>
  Raised in: Codeunit<CA Jnl.-Post+Print>.PROCEDURE<Code>
    Code lines:
    WITH CostJnlLine DO BEGIN
      CostJnlTemplate.GET("Journal Template Name");
      CostJnlTemplate.TESTFIELD("Posting Report ID");
    
      HideDialog := FALSE;
      OnBeforePostJournalBatch(CostJnlLine,HideDialog); <=====================
      IF NOT HideDialog THEN
        IF NOT CONFIRM(Text001) THEN
          EXIT;
    
    ...
Codeunit<Vend. Entry-Edit>.PROCEDURE<OnBeforeVendLedgEntryModify>
  Raised in: Codeunit<Vend. Entry-Edit>.<OnRun>
    Code lines:
    ...
      VendLedgEntry.VALIDATE("Message to Recipient","Message to Recipient");
    END;
    VendLedgEntry.VALIDATE("Exported to Payment File","Exported to Payment File");
    VendLedgEntry.VALIDATE("Creditor No.","Creditor No.");
    VendLedgEntry.VALIDATE("Payment Reference","Payment Reference");
    OnBeforeVendLedgEntryModify(VendLedgEntry,Rec); <=====================
    VendLedgEntry.TESTFIELD("Entry No.","Entry No.");
    VendLedgEntry.MODIFY;
    Rec := VendLedgEntry;
Codeunit<Empl. Entry-Edit>.PROCEDURE<OnBeforeEmplLedgEntryModify>
  Raised in: Codeunit<Empl. Entry-Edit>.<OnRun>
    Code lines:
    ...
      EmplLedgEntry.VALIDATE("Message to Recipient","Message to Recipient");
    END;
    EmplLedgEntry.VALIDATE("Exported to Payment File","Exported to Payment File");
    EmplLedgEntry.VALIDATE("Creditor No.","Creditor No.");
    EmplLedgEntry.VALIDATE("Payment Reference","Payment Reference");
    OnBeforeEmplLedgEntryModify(EmplLedgEntry,Rec); <=====================
    EmplLedgEntry.TESTFIELD("Entry No.","Entry No.");
    EmplLedgEntry.MODIFY;
    Rec := EmplLedgEntry;
Codeunit<OAuth 2.0 Mgt.>.PROCEDURE<OnBeforeCreateJsonRequest>
  Raised in: Codeunit<OAuth 2.0 Mgt.>.PROCEDURE<RequestAccessToken>
    Code lines:
    OnBeforeCreateJsonRequest(RequestJson); <=====================
    IF RequestJson <> '' THEN
      IF JSONMgt.InitializeFromString(RequestJson) THEN
        IF JSONMgt.SelectTokenFromRoot(GetTestToken) THEN BEGIN
          ClientID := JSONMgt.GetValue('ClientID');
          ClientSecret := JSONMgt.GetValue('ClientSecret');
        END;
    
    WITH OAuth20Setup DO BEGIN
      Status := Status::Disabled;
    ...
  Raised in: Codeunit<OAuth 2.0 Mgt.>.PROCEDURE<RefreshAccessToken>
    Code lines:
    OnBeforeCreateJsonRequest(RequestJson); <=====================
    IF RequestJson <> '' THEN
      IF JSONMgt.InitializeFromString(RequestJson) THEN
        IF JSONMgt.SelectTokenFromRoot(GetTestToken) THEN BEGIN
          ClientID := JSONMgt.GetValue('ClientID');
          ClientSecret := JSONMgt.GetValue('ClientSecret');
          RefreshToken := JSONMgt.GetValue('RefreshToken');
        END;
    
    WITH OAuth20Setup DO BEGIN
    ...
  Raised in: Codeunit<OAuth 2.0 Mgt.>.PROCEDURE<InvokeSingleRequest>
    Code lines:
    OnBeforeCreateJsonRequest(RequestJson); <=====================
    IF RequestJson <> '' THEN
      IF JSONMgt.InitializeFromString(RequestJson) THEN
        IF JSONMgt.SelectTokenFromRoot(GetTestToken) THEN
          AccessToken := JSONMgt.GetValue('AccessToken');
    
    WITH OAuth20Setup DO BEGIN
      TESTFIELD("Service URL");
      TESTFIELD("Access Token");
    
    ...
Codeunit<G/L Entry-Edit>.PROCEDURE<OnBeforeGLLedgEntryModify>
  Raised in: Codeunit<G/L Entry-Edit>.<OnRun>
    Code lines:
    BINDSUBSCRIPTION(GLEntryEdit);
    GLEntry := Rec;
    GLEntry.LOCKTABLE;
    GLEntry.FIND;
    GLEntry.Description := Description;
    OnBeforeGLLedgEntryModify(GLEntry,Rec); <=====================
    GLEntry.TESTFIELD("Entry No.","Entry No.");
    GLEntry.MODIFY(TRUE);
    Rec := GLEntry;
Codeunit<Data Privacy Mgmt>.PROCEDURE<OnAfterGetPackageCode>
  Raised in: Codeunit<Data Privacy Mgmt>.PROCEDURE<GetPackageCode>
    Code lines:
    ...
        BEGIN
          PackageCodeKeep := 'USR' + TempEntityNumber;
          PackageCodeTemp := 'US*' + TempEntityNumber;
        END;
      ELSE
        OnAfterGetPackageCode(EntityTypeTableNo,EntityNo,ActionType,PackageCodeTemp,PackageCodeKeep); <=====================
    END;
    
    IF ActionType = ActionType::"Create a data privacy configuration package" THEN
      EXIT(PackageCodeKeep);
    ...
Codeunit<Data Privacy Mgmt>.PROCEDURE<OnAfterSetPrivacyBlocked>
  Raised in: Codeunit<Data Privacy Mgmt>.PROCEDURE<SetPrivacyBlocked>
    Code lines:
    ...
          IF NOT SalespersonPurchaser."Privacy Blocked" THEN BEGIN
            SalespersonPurchaser.VALIDATE("Privacy Blocked",TRUE);
            IF SalespersonPurchaser.MODIFY THEN;
          END;
      ELSE
        OnAfterSetPrivacyBlocked(EntityTypeTableNo,EntityNo); <=====================
    END;
Codeunit<Data Privacy Mgmt>.PROCEDURE<OnCreateData>
  Raised in: Codeunit<Data Privacy Mgmt>.PROCEDURE<CreateData>
    Code lines:
    ...
              RecRef.GETTABLE(UserSetup);
              CreateRelatedData(RecRef,EntityTypeTableNo,EntityNo,PackageCode,ActionType,GeneratePreview,DataSensitivityOption);
            END;
        END;
      ELSE
        OnCreateData(EntityTypeTableNo,EntityNo,PackageCode,ActionType,GeneratePreview,DataSensitivityOption); <=====================
    END;
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterCalcCurrencyRealizedGainLoss>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CalcCurrencyRealizedGainLoss>
    Code lines:
    ...
    
    IF CVLedgEntryBuf."Currency Code" = '' THEN
      EXIT;
    
    RealizedGainLossLCY := AppliedAmountLCY - ROUND(AppliedAmount / CVLedgEntryBuf."Original Currency Factor");
    OnAfterCalcCurrencyRealizedGainLoss(CVLedgEntryBuf,AppliedAmount,AppliedAmountLCY,RealizedGainLossLCY); <=====================
    
    IF RealizedGainLossLCY <> 0 THEN
      IF RealizedGainLossLCY < 0 THEN
        TempDtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterCalcMinimalPossibleLiability>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CalcPmtDisc>
    Code lines:
    ...
      NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,PmtTolAmtToBeApplied,IsHandled);
    IF IsHandled THEN
      EXIT;
    
    MinimalPossibleLiability := ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible");
    OnAfterCalcMinimalPossibleLiability(NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,MinimalPossibleLiability); <=====================
    
    PaymentExceedsLiability := ABS(OldCVLedgEntryBuf2."Amount to Apply") >= MinimalPossibleLiability;
    OnAfterCalcPaymentExceedsLiability(
      NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,MinimalPossibleLiability,PaymentExceedsLiability);
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterCalcPaymentExceedsLiability>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CalcPmtDisc>
    Code lines:
    ...
    
    MinimalPossibleLiability := ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible");
    OnAfterCalcMinimalPossibleLiability(NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,MinimalPossibleLiability);
    
    PaymentExceedsLiability := ABS(OldCVLedgEntryBuf2."Amount to Apply") >= MinimalPossibleLiability;
    OnAfterCalcPaymentExceedsLiability( <=====================
      NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,MinimalPossibleLiability,PaymentExceedsLiability);
    
    ToleratedPaymentExceedsLiability :=
      ABS(NewCVLedgEntryBuf."Remaining Amount" + PmtTolAmtToBeApplied) >= MinimalPossibleLiability;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterCalcPmtDiscount>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CalcPmtDisc>
    Code lines:
    ...
      IF (NewCVLedgEntryBuf."Currency Code" = AddCurrencyCode) AND (AddCurrencyCode <> '') THEN
        PmtDiscAddCurr := PmtDisc
      ELSE
        PmtDiscAddCurr := CalcLCYToAddCurr(PmtDiscLCY);
    
      OnAfterCalcPmtDiscount( <=====================
        NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
        PmtTolAmtToBeApplied,PmtDisc,PmtDiscLCY,PmtDiscAddCurr);
    
      IF NOT GLSetup."Pmt. Disc. Excl. VAT" AND GLSetup."Adjust for Payment Disc." AND
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterCalcPmtDiscTolerance>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CalcPmtDiscTolerance>
    Code lines:
    ...
    PmtDiscTolLCY :=
      ROUND(
        (NewCVLedgEntryBuf."Original Amount" + PmtDiscTol) / NewCVLedgEntryBuf."Original Currency Factor") -
      NewCVLedgEntryBuf."Original Amt. (LCY)";
    
    OnAfterCalcPmtDiscTolerance( <=====================
      NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
      PmtDiscTol,PmtDiscTolLCY,PmtDiscTolAddCurr);
    
    OldCVLedgEntryBuf."Pmt. Disc. Given (LCY)" := -PmtDiscTolLCY;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterCalcToleratedPaymentExceedsLiability>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CalcPmtDisc>
    Code lines:
    ...
    OnAfterCalcPaymentExceedsLiability(
      NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,MinimalPossibleLiability,PaymentExceedsLiability);
    
    ToleratedPaymentExceedsLiability :=
      ABS(NewCVLedgEntryBuf."Remaining Amount" + PmtTolAmtToBeApplied) >= MinimalPossibleLiability;
    OnAfterCalcToleratedPaymentExceedsLiability( <=====================
      NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,MinimalPossibleLiability,
      ToleratedPaymentExceedsLiability,PmtTolAmtToBeApplied);
    
    IF (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,TRUE,TRUE) AND
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterCustLedgEntryInsert>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostCust>
    Code lines:
    ...
      CustLedgEntry.INSERT(TRUE);
    
      // Post detailed customer entries
      DtldLedgEntryInserted := PostDtldCustLedgEntries(GenJnlLine,TempDtldCVLedgEntryBuf,CustPostingGr,TRUE);
    
      OnAfterCustLedgEntryInsert(CustLedgEntry,GenJnlLine); <=====================
    
      // Post Reminder Terms - Note About Line Fee on Report
      LineFeeNoteOnReportHist.Save(CustLedgEntry);
    
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterFindAmtForAppln>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<FindAmtForAppln>
    Code lines:
    ...
      ELSE
        // Post the realized gain or loss on the OldCVLedgEntryBuf
        AppliedAmountLCY := ROUND(AppliedAmount / NewCVLedgEntryBuf."Original Currency Factor");
    END;
    
    OnAfterFindAmtForAppln( <=====================
      NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,AppliedAmount,AppliedAmountLCY,OldAppliedAmount);
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterFinishPosting>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<FinishPosting>
    Code lines:
    ...
      IF CostAccSetup."Auto Transfer from G/L" THEN
        TransferGlEntriesToCA.GetGLEntries;
    
    FirstEntryNo := 0;
    
    OnAfterFinishPosting(GlobalGLEntry,GLReg,IsTransactionConsistent); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterGLFinishPosting>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<Code>
    Code lines:
    ...
    
      OnCodeOnBeforeFinishPosting(GenJnlLine,Balancing);
      IsTransactionConsistent := FinishPosting(GenJnlLine);
    END;
    
    OnAfterGLFinishPosting( <=====================
      GlobalGLEntry,GenJnlLine,IsTransactionConsistent,FirstTransactionNo,GLReg,TempGLEntryBuf,NextEntryNo,NextTransactionNo);
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterHandleAddCurrResidualGLEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<HandleAddCurrResidualGLEntry>
    Code lines:
    ...
      CheckGLAccDimError(GenJnlLine,GLEntry."G/L Account No.");
    
      TotalAddCurrAmount := 0;
    END;
    
    OnAfterHandleAddCurrResidualGLEntry(GenJnlLine,GLEntry2); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitBankAccLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InitBankAccLedgEntry>
    Code lines:
    ...
    BankAccLedgEntry.INIT;
    BankAccLedgEntry.CopyFromGenJnlLine(GenJnlLine);
    BankAccLedgEntry."Entry No." := NextEntryNo;
    BankAccLedgEntry."Transaction No." := NextTransactionNo;
    
    OnAfterInitBankAccLedgEntry(BankAccLedgEntry,GenJnlLine); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitCheckLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InitCheckLedgEntry>
    Code lines:
    ...
    
    CheckLedgEntry.INIT;
    CheckLedgEntry.CopyFromBankAccLedgEntry(BankAccLedgEntry);
    CheckLedgEntry."Entry No." := NextCheckEntryNo;
    
    OnAfterInitCheckLedgEntry(CheckLedgEntry,BankAccLedgEntry); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitCustLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InitCustLedgEntry>
    Code lines:
    ...
    CustLedgEntry.INIT;
    CustLedgEntry.CopyFromGenJnlLine(GenJnlLine);
    CustLedgEntry."Entry No." := NextEntryNo;
    CustLedgEntry."Transaction No." := NextTransactionNo;
    
    OnAfterInitCustLedgEntry(CustLedgEntry,GenJnlLine); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitEmployeeLedgerEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InitEmployeeLedgerEntry>
    Code lines:
    ...
    EmployeeLedgerEntry.INIT;
    EmployeeLedgerEntry.CopyFromGenJnlLine(GenJnlLine);
    EmployeeLedgerEntry."Entry No." := NextEntryNo;
    EmployeeLedgerEntry."Transaction No." := NextTransactionNo;
    
    OnAfterInitEmployeeLedgerEntry(EmployeeLedgerEntry,GenJnlLine); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitGLEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InitGLEntry>
    Code lines:
    ...
    GLEntry."System-Created Entry" := SystemCreatedEntry;
    GLEntry.Amount := Amount;
    GLEntry."Additional-Currency Amount" :=
      GLCalcAddCurrency(Amount,AmountAddCurr,GLEntry."Additional-Currency Amount",UseAmountAddCurr,GenJnlLine);
    
    OnAfterInitGLEntry(GLEntry,GenJnlLine); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitGLEntryVAT>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InitGLEntryVAT>
    Code lines:
    ...
      InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,FALSE,TRUE);
      GLEntry."Additional-Currency Amount" := AmountAddCurr;
      GLEntry."Bal. Account No." := BalAccNo;
    END;
    SummarizeVAT(GLSetup."Summarize G/L Entries",GLEntry);
    OnAfterInitGLEntryVAT(GenJnlLine,GLEntry); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitGLEntryVATCopy>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InitGLEntryVATCopy>
    Code lines:
    ...
    InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,FALSE,TRUE);
    GLEntry."Additional-Currency Amount" := AmountAddCurr;
    GLEntry."Bal. Account No." := BalAccNo;
    GLEntry.CopyPostingGroupsFromVATEntry(VATEntry);
    SummarizeVAT(GLSetup."Summarize G/L Entries",GLEntry);
    OnAfterInitGLEntryVATCopy(GenJnlLine,GLEntry); <=====================
    
    EXIT(GLEntry."Entry No.");
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitGLRegister>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<StartPosting>
    Code lines:
    ...
      GLReg."Source Code" := "Source Code";
      GLReg."Journal Batch Name" := "Journal Batch Name";
      GLReg."User ID" := USERID;
      IsGLRegInserted := FALSE;
    
      OnAfterInitGLRegister(GLReg,GenJnlLine); <=====================
    
      GetCurrencyExchRate(GenJnlLine);
      TempGLEntryBuf.DELETEALL;
      CalculateCurrentBalance(
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitNewDtldCVLedgEntryBuf>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CalcApplication>
    Code lines:
    ...
      GenJnlLine,NewCVLedgEntryBuf,DtldCVLedgEntryBuf,
      DtldCVLedgEntryBuf."Entry Type"::Application,-AppliedAmount,-AppliedAmountLCY,0,
      NewCVLedgEntryBuf."Entry No.",PrevNewCVLedgEntryBuf."Remaining Pmt. Disc. Possible",
      PrevNewCVLedgEntryBuf."Max. Payment Tolerance");
    
    OnAfterInitNewDtldCVLedgEntryBuf( <=====================
      DtldCVLedgEntryBuf,NewCVLedgEntryBuf,OldCVLedgEntryBuf,PrevNewCVLedgEntryBuf,PrevOldCVLedgEntryBuf,GenJnlLine);
    
    NewCVLedgEntryBuf.Open := NewCVLedgEntryBuf."Remaining Amount" <> 0;
    IF NOT NewCVLedgEntryBuf.Open AND NOT AllApplied THEN
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitOldDtldCVLedgEntryBuf>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CalcApplication>
    Code lines:
    ...
      GenJnlLine,OldCVLedgEntryBuf,DtldCVLedgEntryBuf,
      DtldCVLedgEntryBuf."Entry Type"::Application,OldAppliedAmount,AppliedAmountLCY,0,
      NewCVLedgEntryBuf."Entry No.",PrevOldCVLedgEntryBuf."Remaining Pmt. Disc. Possible",
      PrevOldCVLedgEntryBuf."Max. Payment Tolerance");
    
    OnAfterInitOldDtldCVLedgEntryBuf( <=====================
      DtldCVLedgEntryBuf,NewCVLedgEntryBuf,OldCVLedgEntryBuf,PrevNewCVLedgEntryBuf,PrevOldCVLedgEntryBuf,GenJnlLine);
    
    OldCVLedgEntryBuf.Open := OldCVLedgEntryBuf."Remaining Amount" <> 0;
    IF NOT OldCVLedgEntryBuf.Open THEN
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitVAT>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InitVAT>
    Code lines:
    ...
      END;
    
    GLEntry."Additional-Currency Amount" :=
      GLCalcAddCurrency(GLEntry.Amount,GLEntry."Additional-Currency Amount",GLEntry."Additional-Currency Amount",TRUE,GenJnlLine);
    
    OnAfterInitVAT(GenJnlLine,GLEntry,VATPostingSetup,AddCurrGLEntryVATAmt); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInitVendLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InitVendLedgEntry>
    Code lines:
    ...
    VendLedgEntry.INIT;
    VendLedgEntry.CopyFromGenJnlLine(GenJnlLine);
    VendLedgEntry."Entry No." := NextEntryNo;
    VendLedgEntry."Transaction No." := NextTransactionNo;
    
    OnAfterInitVendLedgEntry(VendLedgEntry,GenJnlLine); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInsertDtldCustLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertDtldCustLedgEntry>
    Code lines:
    ...
      "Source Code" := GenJnlLine."Source Code";
      "Transaction No." := NextTransactionNo;
      UpdateDebitCredit(GenJnlLine.Correction);
      OnBeforeInsertDtldCustLedgEntry(DtldCustLedgEntry,GenJnlLine,DtldCVLedgEntryBuf);
      INSERT(TRUE);
      OnAfterInsertDtldCustLedgEntry(DtldCustLedgEntry,GenJnlLine,DtldCVLedgEntryBuf,Offset); <=====================
    END;
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInsertDtldVendLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertDtldVendLedgEntry>
    Code lines:
    ...
      "Source Code" := GenJnlLine."Source Code";
      "Transaction No." := NextTransactionNo;
      UpdateDebitCredit(GenJnlLine.Correction);
      OnBeforeInsertDtldVendLedgEntry(DtldVendLedgEntry,GenJnlLine,DtldCVLedgEntryBuf);
      INSERT(TRUE);
      OnAfterInsertDtldVendLedgEntry(DtldVendLedgEntry,GenJnlLine,DtldCVLedgEntryBuf,Offset); <=====================
    END;
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInsertGlobalGLEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<FinishPosting>
    Code lines:
    ...
          GlobalGLEntry."Add.-Currency Credit Amount" := 0;
        END;
        GlobalGLEntry."Prior-Year Entry" := GlobalGLEntry."Posting Date" < FiscalYearStartDate;
        OnBeforeInsertGlobalGLEntry(GlobalGLEntry,GenJnlLine);
        GlobalGLEntry.INSERT(TRUE);
        OnAfterInsertGlobalGLEntry(GlobalGLEntry); <=====================
      UNTIL TempGLEntryBuf.NEXT = 0;
    
      GLReg."To VAT Entry No." := NextVATEntryNo - 1;
      GLReg."To Entry No." := GlobalGLEntry."Entry No.";
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInsertVAT>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertVAT>
    Code lines:
    ...
    
        OnBeforeInsertVATEntry(VATEntry,GenJnlLine);
        VATEntry.INSERT(TRUE);
        GLEntryVATEntryLink.InsertLink(TempGLEntryBuf."Entry No.",VATEntry."Entry No.");
        NextVATEntryNo := NextVATEntryNo + 1;
        OnAfterInsertVATEntry(GenJnlLine,VATEntry,TempGLEntryBuf."Entry No.",NextVATEntryNo); <=====================
      END;
    
      // VAT for G/L entry/entries
      IF (GLEntryVATAmount <> 0) OR
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterInsertVATEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertVAT>
    Code lines:
    ...
    
        OnBeforeInsertVATEntry(VATEntry,GenJnlLine);
        VATEntry.INSERT(TRUE);
        GLEntryVATEntryLink.InsertLink(TempGLEntryBuf."Entry No.",VATEntry."Entry No.");
        NextVATEntryNo := NextVATEntryNo + 1;
        OnAfterInsertVATEntry(GenJnlLine,VATEntry,TempGLEntryBuf."Entry No.",NextVATEntryNo); <=====================
      END;
    
      // VAT for G/L entry/entries
      IF (GLEntryVATAmount <> 0) OR
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterOldCustLedgEntryModify>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<ApplyCustLedgEntry>
    Code lines:
    ...
      OldCustLedgEntry := TempOldCustLedgEntry;
      OldCustLedgEntry."Applies-to ID" := '';
      OldCustLedgEntry."Amount to Apply" := 0;
      OldCustLedgEntry.MODIFY;
    
      OnAfterOldCustLedgEntryModify(OldCustLedgEntry); <=====================
    
      IF GLSetup."Unrealized VAT" OR
         (GLSetup."Prepayment Unrealized VAT" AND TempOldCustLedgEntry.Prepayment)
      THEN
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterOldVendLedgEntryModify>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<ApplyVendLedgEntry>
    Code lines:
    ...
      OldVendLedgEntry := TempOldVendLedgEntry;
      OldVendLedgEntry."Applies-to ID" := '';
      OldVendLedgEntry."Amount to Apply" := 0;
      OldVendLedgEntry.MODIFY;
    
      OnAfterOldVendLedgEntryModify(OldVendLedgEntry); <=====================
    
      IF GLSetup."Unrealized VAT" OR
         (GLSetup."Prepayment Unrealized VAT" AND TempOldVendLedgEntry.Prepayment)
      THEN
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostApply>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostApply>
    Code lines:
    ...
    
    PaymentToleranceMgt.CalcRemainingPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,GLSetup);
    
    CalcAmtLCYAdjustment(OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine);
    
    OnAfterPostApply(GenJnlLine,DtldCVLedgEntryBuf,OldCVLedgEntryBuf,NewCVLedgEntryBuf,NewCVLedgEntryBuf2); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostCust>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostCust>
    Code lines:
    ...
    
      DeferralPosting("Deferral Code","Source Code",ReceivablesAccount,GenJnlLine,Balancing);
      OnMoveGenJournalLine(CustLedgEntry.RECORDID);
    END;
    
    OnAfterPostCust(GenJnlLine,Balancing,TempGLEntryBuf,NextEntryNo,NextTransactionNo); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostDeferral>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostDeferral>
    Code lines:
    ...
        UNTIL DeferralLine.NEXT = 0;
      END ELSE
        ERROR(NoDeferralScheduleErr,"Line No.","Deferral Code");
    END;
    
    OnAfterPostDeferral(GenJournalLine,TempGLEntryBuf,AccountNo); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostDtldCVLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostDtldCVLedgEntry>
    Code lines:
    ...
          ;
        ELSE
          FIELDERROR("Entry Type");
      END;
    
    OnAfterPostDtldCVLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,Unapply,AccNo,AdjAmount,NextEntryNo); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostGenJnlLine>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostGenJnlLine>
    Code lines:
    ...
          PostFixedAsset(GenJnlLine);
        "Account Type"::"IC Partner":
          PostICPartner(GenJnlLine);
      END;
    
    OnAfterPostGenJnlLine(GenJnlLine,Balancing); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostGLAcc>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostGLAcc>
    Code lines:
    ...
      PostVAT(GenJnlLine,GLEntry,VATPostingSetup);
      DeferralPosting("Deferral Code","Source Code","Account No.",GenJnlLine,Balancing);
      OnMoveGenJournalLine(GLEntry.RECORDID);
    END;
    
    OnAfterPostGLAcc(GenJnlLine,TempGLEntryBuf,NextEntryNo,NextTransactionNo,Balancing); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostUnrealVATEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostUnrealVATEntry>
    Code lines:
    ...
    VATEntry2."Add.-Curr. Rem. Unreal. Amount" :=
      VATEntry2."Add.-Curr. Rem. Unreal. Amount" - VATEntry."Additional-Currency Amount";
    VATEntry2."Add.-Curr. Rem. Unreal. Base" :=
      VATEntry2."Add.-Curr. Rem. Unreal. Base" - VATEntry."Additional-Currency Base";
    VATEntry2.MODIFY;
    OnAfterPostUnrealVATEntry(GenJnlLine,VATEntry2); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostVAT>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostVAT>
    Code lines:
    ...
              InsertSummarizedVAT(GenJnlLine);
            END;
          END;
      END;
    
    OnAfterPostVAT(GenJnlLine,GLEntry,VATPostingSetup); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterPostVend>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostVend>
    Code lines:
    ...
          DtldVendLedgEntry.SetZeroTransNo(NextTransactionNo);
      DeferralPosting("Deferral Code","Source Code",PayablesAccount,GenJnlLine,Balancing);
      OnMoveGenJournalLine(VendLedgEntry.RECORDID);
    END;
    
    OnAfterPostVend(GenJnlLine,Balancing,TempGLEntryBuf,NextEntryNo,NextTransactionNo); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterRunWithCheck>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<RunWithCheck>
    Code lines:
    GenJnlLine.COPY(GenJnlLine2);
    Code(GenJnlLine,TRUE);
    OnAfterRunWithCheck(GenJnlLine); <=====================
    GenJnlLine2 := GenJnlLine;
    EXIT(GLEntryNo);
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterRunWithoutCheck>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<RunWithoutCheck>
    Code lines:
    GenJnlLine.COPY(GenJnlLine2);
    Code(GenJnlLine,FALSE);
    OnAfterRunWithoutCheck(GenJnlLine); <=====================
    GenJnlLine2 := GenJnlLine;
    EXIT(GLEntryNo);
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterSalesTaxCalculateCalculateTax>
  Raised in: 
    Code lines:
    ...
                      GLEntry."VAT Amount" :=
                        ROUND(
                          SalesTaxCalculate.CalculateTax(
                            "Tax Area Code","Tax Group Code","Tax Liable",
                            "Posting Date","Amount (LCY)",Quantity,0));
                      OnAfterSalesTaxCalculateCalculateTax(GenJnlLine,GLEntry,LCYCurrency); <=====================
                      GLEntry.Amount := "Amount (LCY)";
                    END ELSE BEGIN
                      GLEntry.Amount :=
                        ROUND(
    ...
  Raised in: 
    Code lines:
    ...
                  "VAT Amount" := 0
                ELSE
                  "VAT Amount" :=
                    SalesTaxCalculate.CalculateTax(
                      TaxAreaCode,"Tax Group Code",TaxLiable,PostingDate,"VAT Base",Quantity,CurrencyFactor);
                OnAfterSalesTaxCalculateCalculateTax(Rec,Currency); <=====================
                IF "VAT Base" = 0 THEN
                  "VAT %" := 0
                ELSE
                  "VAT %" := ROUND(100 * "VAT Amount" / "VAT Base",0.00001);
    ...
  Raised in: 
    Code lines:
    ...
        END ELSE BEGIN
          "Bal. VAT Amount" :=
            SalesTaxCalculate.CalculateTax(
              "Bal. Tax Area Code","Bal. Tax Group Code","Bal. Tax Liable",
              "Posting Date","Bal. VAT Base Amount",Quantity,"Currency Factor");
          OnAfterSalesTaxCalculateCalculateTax(Rec,CurrFieldNo); <=====================
          IF "Bal. VAT Base Amount" <> 0 THEN
            "Bal. VAT %" := ROUND(100 * "Bal. VAT Amount" / "Bal. VAT Base Amount",0.00001)
          ELSE
            "Bal. VAT %" := 0;
    ...
  Raised in: 
    Code lines:
    ...
        END ELSE BEGIN
          "VAT Amount" :=
            SalesTaxCalculate.CalculateTax(
              "Tax Area Code","Tax Group Code","Tax Liable","Posting Date",
              "VAT Base Amount",Quantity,"Currency Factor");
          OnAfterSalesTaxCalculateCalculateTax(Rec,CurrFieldNo); <=====================
          IF "VAT Base Amount" <> 0 THEN
            "VAT %" := ROUND(100 * "VAT Amount" / "VAT Base Amount",0.00001)
          ELSE
            "VAT %" := 0;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterSalesTaxCalculateInitSalesTaxLines>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostVAT>
    Code lines:
    ...
            ELSE BEGIN
              CLEAR(SalesTaxCalculate);
              SalesTaxCalculate.InitSalesTaxLines(
                "Tax Area Code","Tax Group Code","Tax Liable",
                SalesTaxBaseAmount,Quantity,"Posting Date",GLEntry."VAT Amount");
              OnAfterSalesTaxCalculateInitSalesTaxLines(GenJnlLine,GLEntry,SalesTaxBaseAmount); <=====================
              SrcCurrVATAmount := 0;
              SrcCurrSalesTaxBaseAmount := CalcLCYToAddCurr(SalesTaxBaseAmount);
              RemSrcCurrVATAmount := AddCurrGLEntryVATAmt;
              TaxDetailFound := FALSE;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterSalesTaxCalculateReverseCalculateTax>
  Raised in: 
    Code lines:
    ...
                      GLEntry.Amount :=
                        ROUND(
                          SalesTaxCalculate.ReverseCalculateTax(
                            "Tax Area Code","Tax Group Code","Tax Liable",
                            "Posting Date","Amount (LCY)",Quantity,0));
                      OnAfterSalesTaxCalculateReverseCalculateTax(GenJnlLine,GLEntry,LCYCurrency); <=====================
                      GLEntry."VAT Amount" := "Amount (LCY)" - GLEntry.Amount;
                    END;
                    GLEntry."Additional-Currency Amount" := "Source Currency Amount";
                    IF "Source Currency Code" = AddCurrencyCode THEN
    ...
  Raised in: 
    Code lines:
    ...
                  "VAT Base" :=
                    ROUND(
                      SalesTaxCalculate.ReverseCalculateTax(
                        TaxAreaCode,"Tax Group Code",TaxLiable,PostingDate,"Amount Including VAT",Quantity,CurrencyFactor),
                      Currency."Amount Rounding Precision");
                OnAfterSalesTaxCalculateReverseCalculateTax(Rec,Currency); <=====================
                "VAT Amount" := "VAT Difference" + "Amount Including VAT" - "VAT Base";
                IF "VAT Base" = 0 THEN
                  "VAT %" := 0
                ELSE
    ...
  Raised in: 
    Code lines:
    ...
          "Bal. VAT Amount" :=
            -(Amount -
              SalesTaxCalculate.ReverseCalculateTax(
                "Bal. Tax Area Code","Bal. Tax Group Code","Bal. Tax Liable",
                "Posting Date",Amount,Quantity,"Currency Factor"));
          OnAfterSalesTaxCalculateReverseCalculateTax(Rec,CurrFieldNo); <=====================
          IF Amount + "Bal. VAT Amount" <> 0 THEN
            "Bal. VAT %" := ROUND(100 * -"Bal. VAT Amount" / (Amount + "Bal. VAT Amount"),0.00001)
          ELSE
            "Bal. VAT %" := 0;
    ...
  Raised in: 
    Code lines:
    ...
          "VAT Amount" :=
            Amount -
            SalesTaxCalculate.ReverseCalculateTax(
              "Tax Area Code","Tax Group Code","Tax Liable",
              "Posting Date",Amount,Quantity,"Currency Factor");
          OnAfterSalesTaxCalculateReverseCalculateTax(Rec,CurrFieldNo); <=====================
          IF Amount - "VAT Amount" <> 0 THEN
            "VAT %" := ROUND(100 * "VAT Amount" / (Amount - "VAT Amount"),0.00001)
          ELSE
            "VAT %" := 0;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterSettingIsTransactionConsistent>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<FinishPosting>
    Code lines:
    ...
    
    IsTransactionConsistent :=
      (BalanceCheckAmount = 0) AND (BalanceCheckAmount2 = 0) AND
      (BalanceCheckAddCurrAmount = 0) AND (BalanceCheckAddCurrAmount2 = 0);
    
    OnAfterSettingIsTransactionConsistent(GenJnlLine,IsTransactionConsistent); <=====================
    
    IF TempGLEntryBuf.FINDSET THEN BEGIN
      REPEAT
        GlobalGLEntry := TempGLEntryBuf;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterUpdateVATEntryTaxDetails>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<UpdateVATEntryTaxDetails>
    Code lines:
    ...
      VATEntry."Tax Type" := TaxDetail."Tax Type";
      VATEntry."Tax on Tax" := TaxDetail."Calculate Tax on Tax";
    END;
    VATEntry."Tax Jurisdiction Code" := TaxDetail."Tax Jurisdiction Code";
    
    OnAfterUpdateVATEntryTaxDetails(VATEntry,TaxDetail); <=====================
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnAfterVendLedgEntryInsert>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostVend>
    Code lines:
    ...
      VendLedgEntry.INSERT(TRUE);
    
      // Post detailed vendor entries
      DtldLedgEntryInserted := PostDtldVendLedgEntries(GenJnlLine,TempDtldCVLedgEntryBuf,VendPostingGr,TRUE);
    
      OnAfterVendLedgEntryInsert(VendLedgEntry,GenJnlLine); <=====================
    
      IF DtldLedgEntryInserted THEN
        IF IsTempGLEntryBufEmpty THEN
          DtldVendLedgEntry.SetZeroTransNo(NextTransactionNo);
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnApplyCustLedgEntryOnAfterRecalculateAmounts>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<ApplyCustLedgEntry>
    Code lines:
    ...
         (GLSetup."Prepayment Unrealized VAT" AND TempOldCustLedgEntry.Prepayment)
      THEN
        IF IsNotPayment(TempOldCustLedgEntry."Document Type") THEN BEGIN
          TempOldCustLedgEntry.RecalculateAmounts(
            NewCVLedgEntryBuf."Currency Code",TempOldCustLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date");
          OnApplyCustLedgEntryOnAfterRecalculateAmounts(TempOldCustLedgEntry,OldCustLedgEntry,NewCVLedgEntryBuf,GenJnlLine); <=====================
          CustUnrealizedVAT(
            GenJnlLine,
            TempOldCustLedgEntry,
            CurrExchRate.ExchangeAmount(
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnApplyCustLedgEntryOnBeforePrepareTempCustLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<ApplyCustLedgEntry>
    Code lines:
    ...
    NewRemainingAmtBeforeAppln := NewCVLedgEntryBuf."Remaining Amount";
    NewCVLedgEntryBuf2 := NewCVLedgEntryBuf;
    
    ApplyingDate := GenJnlLine."Posting Date";
    
    OnApplyCustLedgEntryOnBeforePrepareTempCustLedgEntry(GenJnlLine,NewCVLedgEntryBuf,DtldCVLedgEntryBuf,NextEntryNo); <=====================
    IF NOT PrepareTempCustLedgEntry(GenJnlLine,NewCVLedgEntryBuf,TempOldCustLedgEntry,Cust,ApplyingDate) THEN
      EXIT;
    
    GenJnlLine."Posting Date" := ApplyingDate;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnApplyVendLedgEntryOnAfterRecalculateAmounts>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<ApplyVendLedgEntry>
    Code lines:
    ...
         (GLSetup."Prepayment Unrealized VAT" AND TempOldVendLedgEntry.Prepayment)
      THEN
        IF IsNotPayment(TempOldVendLedgEntry."Document Type") THEN BEGIN
          TempOldVendLedgEntry.RecalculateAmounts(
            NewCVLedgEntryBuf."Currency Code",TempOldVendLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date");
          OnApplyVendLedgEntryOnAfterRecalculateAmounts(TempOldVendLedgEntry,OldVendLedgEntry,NewCVLedgEntryBuf,GenJnlLine); <=====================
          VendUnrealizedVAT(
            GenJnlLine,
            TempOldVendLedgEntry,
            CurrExchRate.ExchangeAmount(
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeApplyCustLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<ApplyCustLedgEntry>
    Code lines:
    OnBeforeApplyCustLedgEntry(NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,Cust); <=====================
    
    IF NewCVLedgEntryBuf."Amount to Apply" = 0 THEN
      EXIT;
    
    AllApplied := TRUE;
    IF (GenJnlLine."Applies-to Doc. No." = '') AND (GenJnlLine."Applies-to ID" = '') AND
       NOT
       ((Cust."Application Method" = Cust."Application Method"::"Apply to Oldest") AND
        GenJnlLine."Allow Application")
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeApplyVendLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<ApplyVendLedgEntry>
    Code lines:
    OnBeforeApplyVendLedgEntry(NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,Vend); <=====================
    
    IF NewCVLedgEntryBuf."Amount to Apply" = 0 THEN
      EXIT;
    
    AllApplied := TRUE;
    IF (GenJnlLine."Applies-to Doc. No." = '') AND (GenJnlLine."Applies-to ID" = '') AND
       NOT
       ((Vend."Application Method" = Vend."Application Method"::"Apply to Oldest") AND
        GenJnlLine."Allow Application")
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCalcAmtLCYAdjustment>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CalcAmtLCYAdjustment>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCalcAmtLCYAdjustment(CVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF CVLedgEntryBuf."Currency Code" = '' THEN
      EXIT;
    
    AdjustedAmountLCY :=
      ROUND(CVLedgEntryBuf."Remaining Amount" / CVLedgEntryBuf."Adjusted Currency Factor");
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCalcAplication>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CalcApplication>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCalcAplication( <=====================
      NewCVLedgEntryBuf,OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,
      AppliedAmount,AppliedAmountLCY,OldAppliedAmount,PrevNewCVLedgEntryBuf,PrevOldCVLedgEntryBuf,AllApplied,IsHandled);
    IF IsHandled THEN
      EXIT;
    
    IF AppliedAmount = 0 THEN
      EXIT;
    
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCalcCurrencyApplnRounding>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostApply>
    Code lines:
    ...
      CalcPmtDiscTolerance(
        NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
        NextTransactionNo,FirstNewVATEntryNo);
    
    IsHandled := FALSE;
    OnBeforeCalcCurrencyApplnRounding( <=====================
      GenJnlLine,DtldCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,OldCVLedgEntryBuf3,
      NewCVLedgEntryBuf,NewCVLedgEntryBuf2,IsHandled);
    IF NOT IsHandled THEN
      CalcCurrencyApplnRounding(
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCalcCurrencyRealizedGainLoss>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CalcCurrencyRealizedGainLoss>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCalcCurrencyRealizedGainLoss( <=====================
      CVLedgEntryBuf,TempDtldCVLedgEntryBuf,GenJnlLine,AppliedAmount,AppliedAmountLCY,IsHandled);
    IF IsHandled THEN
      EXIT;
    
    IF CVLedgEntryBuf."Currency Code" = '' THEN
      EXIT;
    
    RealizedGainLossLCY := AppliedAmountLCY - ROUND(AppliedAmount / CVLedgEntryBuf."Original Currency Factor");
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCalcCurrencyUnrealizedGainLoss>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CalcCurrencyUnrealizedGainLoss>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCalcCurrencyUnrealizedGainLoss( <=====================
      CVLedgEntryBuf,TempDtldCVLedgEntryBuf,GenJnlLine,AppliedAmount,RemainingAmountBeforeAppln,IsHandled);
    IF IsHandled THEN
      EXIT;
    
    IF (CVLedgEntryBuf."Currency Code" = '') OR (RemainingAmountBeforeAppln = 0) THEN
      EXIT;
    
    // Calculate Unrealized GainLoss
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCalcPmtDisc>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CalcPmtDisc>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCalcPmtDisc( <=====================
      NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,PmtTolAmtToBeApplied,IsHandled);
    IF IsHandled THEN
      EXIT;
    
    MinimalPossibleLiability := ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible");
    OnAfterCalcMinimalPossibleLiability(NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,MinimalPossibleLiability);
    
    PaymentExceedsLiability := ABS(OldCVLedgEntryBuf2."Amount to Apply") >= MinimalPossibleLiability;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCalcPmtDiscTolerance>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CalcPmtDiscTolerance>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCalcPmtDiscTolerance( <=====================
      NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,IsHandled);
    IF IsHandled THEN
      EXIT;
    
    IF NOT OldCVLedgEntryBuf2."Accepted Pmt. Disc. Tolerance" THEN
      EXIT;
    
    PmtDiscTol := -OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible";
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCalcPmtTolerance>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CalcPmtTolerance>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCalcPmtTolerance( <=====================
      NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,PmtTolAmtToBeApplied,IsHandled);
    IF IsHandled THEN
      EXIT;
    
    IF OldCVLedgEntryBuf2."Accepted Payment Tolerance" = 0 THEN
      EXIT;
    
    PmtTol := -OldCVLedgEntryBuf2."Accepted Payment Tolerance";
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCheckGLAccDimError>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CheckGLAccDimError>
    Code lines:
    OnBeforeCheckGLAccDimError(GenJnlLine,GLAccNo); <=====================
    
    IF (GenJnlLine.Amount = 0) AND (GenJnlLine."Amount (LCY)" = 0) THEN
      EXIT;
    
    TableID[1] := DATABASE::"G/L Account";
    AccNo[1] := GLAccNo;
    IF DimMgt.CheckDimValuePosting(TableID,AccNo,GenJnlLine."Dimension Set ID") THEN
      EXIT;
    
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCheckPurchExtDocNo>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostVend>
    Code lines:
    ...
    
      // Check the document no.
      IF "Recurring Method" = 0 THEN
        IF IsNotPayment("Document Type") THEN BEGIN
          GenJnlCheckLine.CheckPurchDocNoIsNotUsed("Document Type","Document No.");
          OnBeforeCheckPurchExtDocNo(GenJnlLine,VendLedgEntry,CVLedgEntryBuf,CheckExtDocNoHandled); <=====================
          IF NOT CheckExtDocNoHandled THEN
            CheckPurchExtDocNo(GenJnlLine);
        END;
    
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCode>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<Code>
    Code lines:
    IsPosted := FALSE;
    OnBeforeCode(GenJnlLine,CheckLine,IsPosted,GLReg); <=====================
    IF IsPosted THEN
      EXIT;
    
    GetGLSourceCode;
    
    WITH GenJnlLine DO BEGIN
      IF EmptyLine THEN BEGIN
        InitLastDocDate(GenJnlLine);
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeContinuePosting>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<ContinuePosting>
    Code lines:
    OnBeforeContinuePosting(GenJnlLine,GLReg,NextEntryNo,NextTransactionNo); <=====================
    
    IF NextTransactionNoNeeded(GenJnlLine) THEN BEGIN
      CheckPostUnrealizedVAT(GenJnlLine,FALSE);
      NextTransactionNo := NextTransactionNo + 1;
      InitLastDocDate(GenJnlLine);
      FirstNewVATEntryNo := NextVATEntryNo;
    END;
    
    OnContinuePostingOnBeforeCalculateCurrentBalance(GenJnlLine,NextTransactionNo);
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCreateGLEntriesForTotalAmounts>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CreateGLEntriesForTotalAmounts>
    Code lines:
    OnBeforeCreateGLEntriesForTotalAmounts(InvPostBuf,GenJnlLine,GLAccNo); <=====================
    
    GLEntryInserted := FALSE;
    
    WITH InvPostBuf DO BEGIN
      RESET;
      IF FINDSET THEN
        REPEAT
          IF (Amount <> 0) OR ("Amount (ACY)" <> 0) AND (AddCurrencyCode <> '') THEN BEGIN
            DimMgt.UpdateGenJnlLineDim(GenJnlLine,"Dimension Set ID");
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCreateGLEntriesForTotalAmountsUnapply>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<UnapplyCustLedgEntry>
    Code lines:
    ...
      DtldCustLedgEntry2.MODIFY;
    
      UpdateCustLedgEntry(DtldCustLedgEntry2);
    UNTIL DtldCustLedgEntry2.NEXT = 0;
    
    OnBeforeCreateGLEntriesForTotalAmountsUnapply(DtldCustLedgEntry,CustPostingGr,GenJnlLine,TempInvPostBuf); <=====================
    CreateGLEntriesForTotalAmountsUnapply(GenJnlLine,TempInvPostBuf,CustPostingGr.GetReceivablesAccount);
    
    OnUnapplyCustLedgEntryOnAfterCreateGLEntriesForTotalAmounts(GenJnlLine2,DtldCustLedgEntry);
    
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCreateGLEntriesForTotalAmountsUnapplyVendor>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<UnapplyVendLedgEntry>
    Code lines:
    ...
      DtldVendLedgEntry2.MODIFY;
    
      UpdateVendLedgEntry(DtldVendLedgEntry2);
    UNTIL DtldVendLedgEntry2.NEXT = 0;
    
    OnBeforeCreateGLEntriesForTotalAmountsUnapplyVendor(DtldVendLedgEntry,VendPostingGr,GenJnlLine,TempInvPostBuf); <=====================
    CreateGLEntriesForTotalAmountsUnapply(GenJnlLine,TempInvPostBuf,VendPostingGr.GetPayablesAccount);
    
    OnUnapplyVendLedgEntryOnAfterCreateGLEntriesForTotalAmounts(GenJnlLine2,DtldVendLedgEntry);
    
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCreateGLEntryGainLossInsertGLEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CreateGLEntryGainLoss>
    Code lines:
    InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,UseAmountAddCurr,TRUE);
    OnBeforeCreateGLEntryGainLossInsertGLEntry(GenJnlLine,GLEntry); <=====================
    InsertGLEntry(GenJnlLine,GLEntry,TRUE);
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCustLedgEntryInsert>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostCust>
    Code lines:
    ...
      CustLedgEntry.CopyFromCVLedgEntryBuffer(CVLedgEntryBuf);
      CustLedgEntry."Amount to Apply" := 0;
      CustLedgEntry."Applies-to Doc. No." := '';
      IF SalesSetup."Copy Customer Name to Entries" THEN
        CustLedgEntry."Customer Name" := Cust.Name;
      OnBeforeCustLedgEntryInsert(CustLedgEntry,GenJnlLine); <=====================
      CustLedgEntry.INSERT(TRUE);
    
      // Post detailed customer entries
      DtldLedgEntryInserted := PostDtldCustLedgEntries(GenJnlLine,TempDtldCVLedgEntryBuf,CustPostingGr,TRUE);
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCustLedgEntryModify>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<UpdateCustLedgEntry>
    Code lines:
    ...
      CustLedgEntry."Pmt. Disc. Given (LCY)" := 0;
      CustLedgEntry."Pmt. Tolerance (LCY)" := 0;
      CustLedgEntry."Calculate Interest" := FALSE;
    END;
    
    OnBeforeCustLedgEntryModify(CustLedgEntry,DtldCustLedgEntry); <=====================
    CustLedgEntry.MODIFY;
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeCustUnrealizedVAT>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CustUnrealizedVAT>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCustUnrealizedVAT(GenJnlLine,CustLedgEntry2,SettledAmount,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    PaidAmount := CustLedgEntry2."Amount (LCY)" - CustLedgEntry2."Remaining Amt. (LCY)";
    VATEntry2.RESET;
    VATEntry2.SETCURRENTKEY("Transaction No.");
    VATEntry2.SETRANGE("Transaction No.",CustLedgEntry2."Transaction No.");
    IF VATEntry2.FINDSET THEN
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeEmplLedgEntryModify>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<UpdateEmplLedgEntry>
    Code lines:
    ...
      EmplLedgEntry."Closed at Date" := 0D;
      EmplLedgEntry."Closed by Amount" := 0;
      EmplLedgEntry."Closed by Amount (LCY)" := 0;
    END;
    
    OnBeforeEmplLedgEntryModify(EmplLedgEntry,DtldEmplLedgEntry); <=====================
    EmplLedgEntry.MODIFY;
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeFindAmtForAppln>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<FindAmtForAppln>
    Code lines:
    IsHandled := FALSE;
    OnBeforeFindAmtForAppln( <=====================
      NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,AppliedAmount,AppliedAmountLCY,OldAppliedAmount,IsHandled,
      ApplnRoundingPrecision);
    IF IsHandled THEN
      EXIT;
    
    IF OldCVLedgEntryBuf2.GETFILTER(Positive) <> '' THEN BEGIN
      IF OldCVLedgEntryBuf2."Amount to Apply" <> 0 THEN BEGIN
        IF (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,FALSE,FALSE) AND
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeFinishPosting>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<FinishPosting>
    Code lines:
    OnBeforeFinishPosting(GenJnlLine); <=====================
    
    IsTransactionConsistent :=
      (BalanceCheckAmount = 0) AND (BalanceCheckAmount2 = 0) AND
      (BalanceCheckAddCurrAmount = 0) AND (BalanceCheckAddCurrAmount2 = 0);
    
    OnAfterSettingIsTransactionConsistent(GenJnlLine,IsTransactionConsistent);
    
    IF TempGLEntryBuf.FINDSET THEN BEGIN
      REPEAT
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeGetDtldCustLedgEntryAccNo>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<GetDtldCustLedgEntryAccNo>
    Code lines:
    OnBeforeGetDtldCustLedgEntryAccNo(GenJnlLine,DtldCVLedgEntryBuf,CustPostingGr,OriginalTransactionNo,Unapply); <=====================
    
    WITH DtldCVLedgEntryBuf DO BEGIN
      AmountCondition := IsDebitAmount(DtldCVLedgEntryBuf,Unapply);
      CASE "Entry Type" OF
        "Entry Type"::"Initial Entry":
          ;
        "Entry Type"::Application:
          ;
        "Entry Type"::"Unrealized Loss",
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeGetDtldVendLedgEntryAccNo>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<GetDtldVendLedgEntryAccNo>
    Code lines:
    OnBeforeGetDtldVendLedgEntryAccNo(GenJnlLine,DtldCVLedgEntryBuf,VendPostingGr,OriginalTransactionNo,Unapply); <=====================
    
    WITH DtldCVLedgEntryBuf DO BEGIN
      AmountCondition := IsDebitAmount(DtldCVLedgEntryBuf,Unapply);
      CASE "Entry Type" OF
        "Entry Type"::"Initial Entry":
          ;
        "Entry Type"::Application:
          ;
        "Entry Type"::"Unrealized Loss",
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInitBankAccLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InitBankAccLedgEntry>
    Code lines:
    OnBeforeInitBankAccLedgEntry(BankAccLedgEntry,GenJnlLine); <=====================
    
    BankAccLedgEntry.INIT;
    BankAccLedgEntry.CopyFromGenJnlLine(GenJnlLine);
    BankAccLedgEntry."Entry No." := NextEntryNo;
    BankAccLedgEntry."Transaction No." := NextTransactionNo;
    
    OnAfterInitBankAccLedgEntry(BankAccLedgEntry,GenJnlLine);
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInitCheckEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InitCheckLedgEntry>
    Code lines:
    OnBeforeInitCheckEntry(BankAccLedgEntry,CheckLedgEntry); <=====================
    
    CheckLedgEntry.INIT;
    CheckLedgEntry.CopyFromBankAccLedgEntry(BankAccLedgEntry);
    CheckLedgEntry."Entry No." := NextCheckEntryNo;
    
    OnAfterInitCheckLedgEntry(CheckLedgEntry,BankAccLedgEntry);
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInitCustLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InitCustLedgEntry>
    Code lines:
    OnBeforeInitCustLedgEntry(CustLedgEntry,GenJnlLine); <=====================
    
    CustLedgEntry.INIT;
    CustLedgEntry.CopyFromGenJnlLine(GenJnlLine);
    CustLedgEntry."Entry No." := NextEntryNo;
    CustLedgEntry."Transaction No." := NextTransactionNo;
    
    OnAfterInitCustLedgEntry(CustLedgEntry,GenJnlLine);
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInitEmployeeLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InitEmployeeLedgerEntry>
    Code lines:
    OnBeforeInitEmployeeLedgEntry(EmployeeLedgerEntry,GenJnlLine); <=====================
    
    EmployeeLedgerEntry.INIT;
    EmployeeLedgerEntry.CopyFromGenJnlLine(GenJnlLine);
    EmployeeLedgerEntry."Entry No." := NextEntryNo;
    EmployeeLedgerEntry."Transaction No." := NextTransactionNo;
    
    OnAfterInitEmployeeLedgerEntry(EmployeeLedgerEntry,GenJnlLine);
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInitGLEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InitGLEntry>
    Code lines:
    OnBeforeInitGLEntry(GenJnlLine); <=====================
    
    IF GLAccNo <> '' THEN BEGIN
      GLAcc.GET(GLAccNo);
      GLAcc.TESTFIELD(Blocked,FALSE);
      GLAcc.TESTFIELD("Account Type",GLAcc."Account Type"::Posting);
    
      // Check the Value Posting field on the G/L Account if it is not checked already in Codeunit 11
      IF (NOT
          ((GLAccNo = GenJnlLine."Account No.") AND
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInitGLEntryVAT>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InitGLEntryVAT>
    Code lines:
    OnBeforeInitGLEntryVAT(GenJnlLine,GLEntry); <=====================
    IF UseAmtAddCurr THEN
      InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,AmountAddCurr,TRUE,TRUE)
    ELSE BEGIN
      InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,FALSE,TRUE);
      GLEntry."Additional-Currency Amount" := AmountAddCurr;
      GLEntry."Bal. Account No." := BalAccNo;
    END;
    SummarizeVAT(GLSetup."Summarize G/L Entries",GLEntry);
    OnAfterInitGLEntryVAT(GenJnlLine,GLEntry);
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInitGLEntryVATCopy>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InitGLEntryVATCopy>
    Code lines:
    OnBeforeInitGLEntryVATCopy(GenJnlLine,GLEntry); <=====================
    InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,FALSE,TRUE);
    GLEntry."Additional-Currency Amount" := AmountAddCurr;
    GLEntry."Bal. Account No." := BalAccNo;
    GLEntry.CopyPostingGroupsFromVATEntry(VATEntry);
    SummarizeVAT(GLSetup."Summarize G/L Entries",GLEntry);
    OnAfterInitGLEntryVATCopy(GenJnlLine,GLEntry);
    
    EXIT(GLEntry."Entry No.");
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInitVAT>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InitVAT>
    Code lines:
    OnBeforeInitVAT(GenJnlLine,GLEntry,VATPostingSetup); <=====================
    
    LCYCurrency.InitRoundingPrecision;
    WITH GenJnlLine DO
      IF "Gen. Posting Type" <> 0 THEN BEGIN // None
        VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
        TESTFIELD("VAT Calculation Type",VATPostingSetup."VAT Calculation Type");
        CASE "VAT Posting" OF
          "VAT Posting"::"Automatic VAT Entry":
            BEGIN
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInitVendLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InitVendLedgEntry>
    Code lines:
    OnBeforeInitVendLedgEntry(VendLedgEntry,GenJnlLine); <=====================
    
    VendLedgEntry.INIT;
    VendLedgEntry.CopyFromGenJnlLine(GenJnlLine);
    VendLedgEntry."Entry No." := NextEntryNo;
    VendLedgEntry."Transaction No." := NextTransactionNo;
    
    OnAfterInitVendLedgEntry(VendLedgEntry,GenJnlLine);
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertDtldCustLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertDtldCustLedgEntry>
    Code lines:
    ...
      "Journal Batch Name" := GenJnlLine."Journal Batch Name";
      "Reason Code" := GenJnlLine."Reason Code";
      "Source Code" := GenJnlLine."Source Code";
      "Transaction No." := NextTransactionNo;
      UpdateDebitCredit(GenJnlLine.Correction);
      OnBeforeInsertDtldCustLedgEntry(DtldCustLedgEntry,GenJnlLine,DtldCVLedgEntryBuf); <=====================
      INSERT(TRUE);
      OnAfterInsertDtldCustLedgEntry(DtldCustLedgEntry,GenJnlLine,DtldCVLedgEntryBuf,Offset);
    END;
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertDtldCustLedgEntryUnapply>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertDtldCustLedgEntryUnapply>
    Code lines:
    ...
      Unapplied := TRUE;
      "Unapplied by Entry No." := OldDtldCustLedgEntry."Entry No.";
      "Document No." := GenJnlLine."Document No.";
      "Source Code" := GenJnlLine."Source Code";
      "User ID" := USERID;
      OnBeforeInsertDtldCustLedgEntryUnapply(NewDtldCustLedgEntry,GenJnlLine,OldDtldCustLedgEntry); <=====================
      INSERT(TRUE);
    END;
    NextDtldLedgEntryNo := NextDtldLedgEntryNo + 1;
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertDtldEmplLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertDtldEmplLedgEntry>
    Code lines:
    ...
      "Journal Batch Name" := GenJnlLine."Journal Batch Name";
      "Reason Code" := GenJnlLine."Reason Code";
      "Source Code" := GenJnlLine."Source Code";
      "Transaction No." := NextTransactionNo;
      UpdateDebitCredit(GenJnlLine.Correction);
      OnBeforeInsertDtldEmplLedgEntry(DtldEmplLedgEntry,GenJnlLine,DtldCVLedgEntryBuf); <=====================
      INSERT(TRUE);
    END;
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertDtldEmplLedgEntryUnapply>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertDtldEmplLedgEntryUnapply>
    Code lines:
    ...
      Unapplied := TRUE;
      "Unapplied by Entry No." := OldDtldEmplLedgEntry."Entry No.";
      "Document No." := GenJnlLine."Document No.";
      "Source Code" := GenJnlLine."Source Code";
      "User ID" := USERID;
      OnBeforeInsertDtldEmplLedgEntryUnapply(NewDtldEmplLedgEntry,GenJnlLine,OldDtldEmplLedgEntry); <=====================
      INSERT(TRUE);
    END;
    NextDtldLedgEntryNo := NextDtldLedgEntryNo + 1;
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertDtldVendLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertDtldVendLedgEntry>
    Code lines:
    ...
      "Journal Batch Name" := GenJnlLine."Journal Batch Name";
      "Reason Code" := GenJnlLine."Reason Code";
      "Source Code" := GenJnlLine."Source Code";
      "Transaction No." := NextTransactionNo;
      UpdateDebitCredit(GenJnlLine.Correction);
      OnBeforeInsertDtldVendLedgEntry(DtldVendLedgEntry,GenJnlLine,DtldCVLedgEntryBuf); <=====================
      INSERT(TRUE);
      OnAfterInsertDtldVendLedgEntry(DtldVendLedgEntry,GenJnlLine,DtldCVLedgEntryBuf,Offset);
    END;
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertDtldVendLedgEntryUnapply>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertDtldVendLedgEntryUnapply>
    Code lines:
    ...
      Unapplied := TRUE;
      "Unapplied by Entry No." := OldDtldVendLedgEntry."Entry No.";
      "Document No." := GenJnlLine."Document No.";
      "Source Code" := GenJnlLine."Source Code";
      "User ID" := USERID;
      OnBeforeInsertDtldVendLedgEntryUnapply(NewDtldVendLedgEntry,GenJnlLine,OldDtldVendLedgEntry); <=====================
      INSERT(TRUE);
    END;
    NextDtldLedgEntryNo := NextDtldLedgEntryNo + 1;
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertGLEntryBuffer>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertGLEntry>
    Code lines:
    ...
      UpdateDebitCredit(GenJnlLine.Correction);
    END;
    
    TempGLEntryBuf := GLEntry;
    
    OnBeforeInsertGLEntryBuffer(TempGLEntryBuf,GenJnlLine, <=====================
      BalanceCheckAmount,BalanceCheckAmount2,BalanceCheckAddCurrAmount,BalanceCheckAddCurrAmount2,NextEntryNo);
    
    TempGLEntryBuf.INSERT;
    
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertGLEntryFromVATEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CreateGLEntryFromVATEntry>
    Code lines:
    InitGLEntry(GenJnlLine,GLEntry,VATAccNo,Amount,0,FALSE,TRUE);
    GLEntry."Additional-Currency Amount" := AmountAddCurr;
    GLEntry.CopyPostingGroupsFromVATEntry(VATEntry);
    OnBeforeInsertGLEntryFromVATEntry(GLEntry,VATEntry); <=====================
    InsertGLEntry(GenJnlLine,GLEntry,TRUE);
    EXIT(GLEntry."Entry No.");
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertGlobalGLEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<FinishPosting>
    Code lines:
    ...
          GlobalGLEntry."Additional-Currency Amount" := 0;
          GlobalGLEntry."Add.-Currency Debit Amount" := 0;
          GlobalGLEntry."Add.-Currency Credit Amount" := 0;
        END;
        GlobalGLEntry."Prior-Year Entry" := GlobalGLEntry."Posting Date" < FiscalYearStartDate;
        OnBeforeInsertGlobalGLEntry(GlobalGLEntry,GenJnlLine); <=====================
        GlobalGLEntry.INSERT(TRUE);
        OnAfterInsertGlobalGLEntry(GlobalGLEntry);
      UNTIL TempGLEntryBuf.NEXT = 0;
    
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertPmtDiscVATForGLEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertPmtDiscVATForGLEntry>
    Code lines:
    ...
    // The total payment discount in currency is posted on the entry made in
    // the function CalcPmtDisc.
    DtldCVLedgEntryBuf."User ID" := USERID;
    DtldCVLedgEntryBuf."Use Additional-Currency Amount" := TRUE;
    
    OnBeforeInsertPmtDiscVATForGLEntry(DtldCVLedgEntryBuf,GenJnlLine,VATEntry2); <=====================
    
    CASE VATEntry2.Type OF
      VATEntry2.Type::Purchase:
        CASE VATEntry2."VAT Calculation Type" OF
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertPostUnrealVATEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostUnrealVATEntry>
    Code lines:
    ...
    VATEntry.Closed := FALSE;
    VATEntry."Transaction No." := NextTransactionNo;
    VATEntry."Sales Tax Connection No." := NextConnectionNo;
    VATEntry."Unrealized VAT Entry No." := VATEntry2."Entry No.";
    VATEntry."Base Before Pmt. Disc." := VATEntry.Base;
    OnBeforeInsertPostUnrealVATEntry(VATEntry,GenJnlLine); <=====================
    VATEntry.INSERT(TRUE);
    GLEntryVATEntryLink.InsertLink(GLEntryNo + 1,NextVATEntryNo);
    NextVATEntryNo := NextVATEntryNo + 1;
    
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertTempVATEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertPmtDiscVATForVATEntry>
    Code lines:
    ...
      TempVATEntry."Additional-Currency Base" := 0;
      TempVATEntry."Additional-Currency Amount" := 0;
      TempVATEntry."Add.-Currency Unrealized Amt." := 0;
      TempVATEntry."Add.-Currency Unrealized Base" := 0;
    END;
    OnBeforeInsertTempVATEntry(TempVATEntry,GenJnlLine,VATEntry2); <=====================
    TempVATEntry.INSERT;
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertVAT>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertVAT>
    Code lines:
    OnBeforeInsertVAT( <=====================
      GenJnlLine,VATEntry,UnrealizedVAT,AddCurrencyCode,VATPostingSetup,GLEntryAmount,GLEntryVATAmount,GLEntryBaseAmount,
      SrcCurrCode,SrcCurrGLEntryAmt,SrcCurrGLEntryVATAmt,SrcCurrGLEntryBaseAmt);
    
    WITH GenJnlLine DO BEGIN
      // Post VAT
      // VAT for VAT entry
      VATEntry.INIT;
      VATEntry.CopyFromGenJnlLine(GenJnlLine);
      VATEntry."Entry No." := NextVATEntryNo;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeInsertVATEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertVAT>
    Code lines:
    ...
        IF "System-Created Entry" THEN
          VATEntry."Base Before Pmt. Disc." := "VAT Base Before Pmt. Disc."
        ELSE
          VATEntry."Base Before Pmt. Disc." := GLEntryAmount;
    
        OnBeforeInsertVATEntry(VATEntry,GenJnlLine); <=====================
        VATEntry.INSERT(TRUE);
        GLEntryVATEntryLink.InsertLink(TempGLEntryBuf."Entry No.",VATEntry."Entry No.");
        NextVATEntryNo := NextVATEntryNo + 1;
        OnAfterInsertVATEntry(GenJnlLine,VATEntry,TempGLEntryBuf."Entry No.",NextVATEntryNo);
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePostApply>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostApply>
    Code lines:
    OnBeforePostApply(GenJnlLine,DtldCVLedgEntryBuf,OldCVLedgEntryBuf,NewCVLedgEntryBuf,NewCVLedgEntryBuf2); <=====================
    
    OldRemainingAmtBeforeAppln := OldCVLedgEntryBuf."Remaining Amount";
    OldCVLedgEntryBuf3 := OldCVLedgEntryBuf;
    
    // Management of posting in multiple currencies
    OldCVLedgEntryBuf2 := OldCVLedgEntryBuf;
    OldCVLedgEntryBuf.COPYFILTER(Positive,OldCVLedgEntryBuf2.Positive);
    ApplnRoundingPrecision := GetApplnRoundPrecision(NewCVLedgEntryBuf,OldCVLedgEntryBuf);
    
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePostDeferral>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostDeferral>
    Code lines:
    OnBeforePostDeferral(GenJournalLine,AccountNo); <=====================
    
    WITH GenJournalLine DO BEGIN
      IF "Source Type" IN ["Source Type"::Vendor,"Source Type"::Customer] THEN
        // Purchasing and Sales, respectively
        // We can create these types directly from the GL window, need to make sure we don't already have a deferral schedule
        // created for this GL Trx before handing it off to sales/purchasing subsystem
        IF "Source Code" <> GLSourceCode THEN BEGIN
          PostDeferralPostBuffer(GenJournalLine);
          EXIT;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePostDtldCVLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostDtldCVLedgEntry>
    Code lines:
    OnBeforePostDtldCVLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,AccNo,Unapply,AdjAmount); <=====================
    
    WITH DtldCVLedgEntryBuf DO
      CASE "Entry Type" OF
        "Entry Type"::"Initial Entry":
          ;
        "Entry Type"::Application:
          ;
        "Entry Type"::"Unrealized Loss",
        "Entry Type"::"Unrealized Gain",
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePostGenJnlLine>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostGenJnlLine>
    Code lines:
    OnBeforePostGenJnlLine(GenJnlLine,Balancing); <=====================
    
    WITH GenJnlLine DO
      CASE "Account Type" OF
        "Account Type"::"G/L Account":
          PostGLAcc(GenJnlLine,Balancing);
        "Account Type"::Customer:
          PostCust(GenJnlLine,Balancing);
        "Account Type"::Vendor:
          PostVend(GenJnlLine,Balancing);
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePostGLAcc>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostGLAcc>
    Code lines:
    OnBeforePostGLAcc(GenJnlLine,GLEntry); <=====================
    
    WITH GenJnlLine DO BEGIN
      GLAcc.GET("Account No.");
      // G/L entry
      InitGLEntry(GenJnlLine,GLEntry,
        "Account No.","Amount (LCY)",
        "Source Currency Amount",TRUE,"System-Created Entry");
      IF NOT "System-Created Entry" THEN
        IF "Posting Date" = NORMALDATE("Posting Date") THEN
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePostUnrealVATEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostUnrealVATEntry>
    Code lines:
    OnBeforePostUnrealVATEntry(GenJnlLine,VATEntry); <=====================
    VATEntry.LOCKTABLE;
    VATEntry := VATEntry2;
    VATEntry."Entry No." := NextVATEntryNo;
    VATEntry."Posting Date" := GenJnlLine."Posting Date";
    VATEntry."Document No." := GenJnlLine."Document No.";
    VATEntry."External Document No." := GenJnlLine."External Document No.";
    VATEntry."Document Type" := GenJnlLine."Document Type";
    VATEntry.Amount := VATAmount;
    VATEntry.Base := VATBase;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePostVAT>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostVAT>
    Code lines:
    IsHandled := FALSE;
    OnBeforePostVAT(GenJnlLine,GLEntry,VATPostingSetup,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH GenJnlLine DO
      // Post VAT
      // VAT for VAT entry
      CASE "VAT Calculation Type" OF
        "VAT Calculation Type"::"Normal VAT",
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePrepareTempCustledgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PrepareTempCustLedgEntry>
    Code lines:
    OnBeforePrepareTempCustledgEntry(GenJnlLine,NewCVLedgEntryBuf); <=====================
    
    IF GenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
      // Find the entry to be applied to
      OldCustLedgEntry.RESET;
      OldCustLedgEntry.SETCURRENTKEY("Document No.");
      OldCustLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
      OldCustLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
      OldCustLedgEntry.SETRANGE("Customer No.",NewCVLedgEntryBuf."CV No.");
      OldCustLedgEntry.SETRANGE(Open,TRUE);
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforePrepareTempVendLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PrepareTempVendLedgEntry>
    Code lines:
    OnBeforePrepareTempVendLedgEntry(GenJnlLine,NewCVLedgEntryBuf); <=====================
    
    IF GenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
      // Find the entry to be applied to
      OldVendLedgEntry.RESET;
      OldVendLedgEntry.SETCURRENTKEY("Document No.");
      OldVendLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
      OldVendLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
      OldVendLedgEntry.SETRANGE("Vendor No.",NewCVLedgEntryBuf."CV No.");
      OldVendLedgEntry.SETRANGE(Open,TRUE);
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeSetDeferralDescription>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<SetDeferralDescription>
    Code lines:
    IsHandled := FALSE;
    OnBeforeSetDeferralDescription(GenJournalLine,DeferralLine,DeferralDescription,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(DeferralDescription);
    
    EXIT(GenJournalLine.Description);
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeStartOrContinuePosting>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<Code>
    Code lines:
    ...
      IF "Due Date" = 0D THEN
        "Due Date" := "Posting Date";
    
      JobLine := ("Job No." <> '');
    
      OnBeforeStartOrContinuePosting(GenJnlLine,LastDocType,LastDocNo,LastDate,NextEntryNo); <=====================
    
      IF NextEntryNo = 0 THEN
        StartPosting(GenJnlLine)
      ELSE
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeStartPosting>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<StartPosting>
    Code lines:
    OnBeforeStartPosting(GenJnlLine); <=====================
    
    WITH GenJnlLine DO BEGIN
      InitNextEntryNo;
      FirstTransactionNo := NextTransactionNo;
    
      InitLastDocDate(GenJnlLine);
      CurrentBalance := 0;
    
      FiscalYearStartDate := AccountingPeriodMgt.GetPeriodStartingDate;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeUpdateTotalAmounts>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<UpdateTotalAmounts>
    Code lines:
    OnBeforeUpdateTotalAmounts( <=====================
      TempInvPostBuf,DimSetID,DtldCVLedgEntryBuf."Amount (LCY)",DtldCVLedgEntryBuf."Additional-Currency Amount",IsHandled,
      DtldCVLedgEntryBuf);
    IF IsHandled THEN
      EXIT;
    
    WITH TempInvPostBuf DO BEGIN
      SETRANGE("Dimension Set ID",DimSetID);
      IF FINDFIRST THEN BEGIN
        Amount += DtldCVLedgEntryBuf."Amount (LCY)";
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeVendLedgEntryInsert>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostVend>
    Code lines:
    ...
      VendLedgEntry.CopyFromCVLedgEntryBuffer(CVLedgEntryBuf);
      VendLedgEntry."Amount to Apply" := 0;
      VendLedgEntry."Applies-to Doc. No." := '';
      IF PurchSetup."Copy Vendor Name to Entries" THEN
        VendLedgEntry."Vendor Name" := Vend.Name;
      OnBeforeVendLedgEntryInsert(VendLedgEntry,GenJnlLine); <=====================
      VendLedgEntry.INSERT(TRUE);
    
      // Post detailed vendor entries
      DtldLedgEntryInserted := PostDtldVendLedgEntries(GenJnlLine,TempDtldCVLedgEntryBuf,VendPostingGr,TRUE);
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeVendLedgEntryModify>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<UpdateVendLedgEntry>
    Code lines:
    ...
      VendLedgEntry."Closed by Currency Amount" := 0;
      VendLedgEntry."Pmt. Disc. Rcd.(LCY)" := 0;
      VendLedgEntry."Pmt. Tolerance (LCY)" := 0;
    END;
    
    OnBeforeVendLedgEntryModify(VendLedgEntry,DtldVendLedgEntry); <=====================
    VendLedgEntry.MODIFY;
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnBeforeVendUnrealizedVAT>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<VendUnrealizedVAT>
    Code lines:
    IsHandled := FALSE;
    OnBeforeVendUnrealizedVAT(GenJnlLine,VendLedgEntry2,SettledAmount,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    VATEntry2.RESET;
    VATEntry2.SETCURRENTKEY("Transaction No.");
    VATEntry2.SETRANGE("Transaction No.",VendLedgEntry2."Transaction No.");
    PaidAmount := -VendLedgEntry2."Amount (LCY)" + VendLedgEntry2."Remaining Amt. (LCY)";
    IF VATEntry2.FINDSET THEN
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnCalcPmtDiscIfAdjVATCopyFields>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CalcPmtDiscIfAdjVAT>
    Code lines:
    ...
            DtldCVLedgEntryBuf2.CopyFromCVLedgEntryBuf(NewCVLedgEntryBuf);
            // The total payment discount in currency is posted on the entry made in
            // the function CalcPmtDisc.
            DtldCVLedgEntryBuf2."User ID" := USERID;
            DtldCVLedgEntryBuf2."Additional-Currency Amount" := -VATBaseAddCurr;
            OnCalcPmtDiscIfAdjVATCopyFields(DtldCVLedgEntryBuf2,OldCVLedgEntryBuf,GenJnlLine); <=====================
            DtldCVLedgEntryBuf2.CopyPostingGroupsFromVATEntry(VATEntry2);
            TotalVATAmount := 0;
            LastConnectionNo := VATEntry2."Sales Tax Connection No.";
          END;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnCalcPmtDiscOnAfterAssignPmtDisc>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CalcPmtDisc>
    Code lines:
    ...
      PmtDiscLCY :=
        ROUND(
          (NewCVLedgEntryBuf."Original Amount" + PmtDisc) / NewCVLedgEntryBuf."Original Currency Factor") -
        NewCVLedgEntryBuf."Original Amt. (LCY)";
    
      OnCalcPmtDiscOnAfterAssignPmtDisc(PmtDisc,PmtDiscLCY,OldCVLedgEntryBuf,OldCVLedgEntryBuf2); <=====================
    
      OldCVLedgEntryBuf."Pmt. Disc. Given (LCY)" := -PmtDiscLCY;
    
      IF (NewCVLedgEntryBuf."Currency Code" = AddCurrencyCode) AND (AddCurrencyCode <> '') THEN
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnCalcPmtToleranceOnAfterAssignPmtDisc>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CalcPmtTolerance>
    Code lines:
    ...
    PmtTolLCY :=
      ROUND(
        (NewCVLedgEntryBuf."Original Amount" + PmtTol) / NewCVLedgEntryBuf."Original Currency Factor") -
      NewCVLedgEntryBuf."Original Amt. (LCY)";
    
    OnCalcPmtToleranceOnAfterAssignPmtDisc( <=====================
      PmtTol,PmtTolLCY,PmtTolAmtToBeApplied,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,
      NewCVLedgEntryBuf,DtldCVLedgEntryBuf,NextTransactionNo,FirstNewVATEntryNo);
    
    OldCVLedgEntryBuf."Accepted Payment Tolerance" := 0;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnCodeOnBeforeFinishPosting>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<Code>
    Code lines:
    ...
    
      CheckPostUnrealizedVAT(GenJnlLine,TRUE);
    
      CreateDeferralScheduleFromGL(GenJnlLine,Balancing);
    
      OnCodeOnBeforeFinishPosting(GenJnlLine,Balancing); <=====================
      IsTransactionConsistent := FinishPosting(GenJnlLine);
    END;
    
    OnAfterGLFinishPosting(
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnContinuePostingOnBeforeCalculateCurrentBalance>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<ContinuePosting>
    Code lines:
    ...
      NextTransactionNo := NextTransactionNo + 1;
      InitLastDocDate(GenJnlLine);
      FirstNewVATEntryNo := NextVATEntryNo;
    END;
    
    OnContinuePostingOnBeforeCalculateCurrentBalance(GenJnlLine,NextTransactionNo); <=====================
    
    GetCurrencyExchRate(GenJnlLine);
    TempGLEntryBuf.DELETEALL;
    CalculateCurrentBalance(
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnCustPostApplyCustLedgEntryOnBeforeCheckPostingGroup>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CustPostApplyCustLedgEntry>
    Code lines:
    ...
        ContinuePosting(GenJnlLine);
    
      Cust.GET(CustLedgEntry."Customer No.");
      Cust.CheckBlockedCustOnJnls(Cust,"Document Type",TRUE);
    
      OnCustPostApplyCustLedgEntryOnBeforeCheckPostingGroup(GenJnlLine,Cust); <=====================
    
      IF "Posting Group" = '' THEN BEGIN
        Cust.TESTFIELD("Customer Posting Group");
        "Posting Group" := Cust."Customer Posting Group";
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnCustUnrealizedVATOnAfterVATPartCalculation>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CustUnrealizedVAT>
    Code lines:
    ...
            PaidAmount,
            CustLedgEntry2."Amount (LCY)",
            TotalUnrealVATAmountFirst,
            TotalUnrealVATAmountLast);
    
        OnCustUnrealizedVATOnAfterVATPartCalculation( <=====================
          GenJnlLine,CustLedgEntry2,PaidAmount,TotalUnrealVATAmountFirst,TotalUnrealVATAmountLast,SettledAmount,VATEntry2);
    
        IF VATPart > 0 THEN BEGIN
          CASE VATEntry2."VAT Calculation Type" OF
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnCustUnrealizedVATOnBeforeInitGLEntryVAT>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CustUnrealizedVAT>
    Code lines:
    ...
              ROUND(
                VATEntry2."Add.-Curr. Rem. Unreal. Base" * VATPart,
                AddCurrency."Amount Rounding Precision");
          END;
    
          OnCustUnrealizedVATOnBeforeInitGLEntryVAT(GenJnlLine,VATEntry2,VATAmount,VATBase,VATAmountAddCurr,VATBaseAddCurr); <=====================
    
          InitGLEntryVAT(
            GenJnlLine,SalesVATUnrealAccount,SalesVATAccount,-VATAmount,-VATAmountAddCurr,FALSE);
          GLEntryNo :=
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnHandleAddCurrResidualGLEntryOnBeforeInsertGLEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<HandleAddCurrResidualGLEntry>
    Code lines:
    ...
      GLEntry."System-Created Entry" := TRUE;
      GLEntry."Additional-Currency Amount" := -TotalAddCurrAmount;
      GLAcc.GET(GLEntry."G/L Account No.");
      GLAcc.TESTFIELD(Blocked,FALSE);
      GLAcc.TESTFIELD("Account Type",GLAcc."Account Type"::Posting);
      OnHandleAddCurrResidualGLEntryOnBeforeInsertGLEntry(GenJnlLine,GLEntry); <=====================
      InsertGLEntry(GenJnlLine,GLEntry,FALSE);
    
      CheckGLAccDimError(GenJnlLine,GLEntry."G/L Account No.");
    
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnInsertPmtDiscVATForGLEntryOnAfterCopyFromGenJnlLine>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertPmtDiscVATForGLEntry>
    Code lines:
    ...
          DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Adjustment)";
    END;
    DtldCVLedgEntryBuf."Posting Date" := GenJnlLine."Posting Date";
    DtldCVLedgEntryBuf."Document Type" := GenJnlLine."Document Type";
    DtldCVLedgEntryBuf."Document No." := GenJnlLine."Document No.";
    OnInsertPmtDiscVATForGLEntryOnAfterCopyFromGenJnlLine(DtldCVLedgEntryBuf,GenJnlLine); <=====================
    DtldCVLedgEntryBuf.Amount := 0;
    DtldCVLedgEntryBuf."VAT Bus. Posting Group" := VATEntry2."VAT Bus. Posting Group";
    DtldCVLedgEntryBuf."VAT Prod. Posting Group" := VATEntry2."VAT Prod. Posting Group";
    DtldCVLedgEntryBuf."Tax Jurisdiction Code" := VATEntry2."Tax Jurisdiction Code";
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnInsertTempVATEntryOnBeforeInsert>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertTempVATEntry>
    Code lines:
    ...
      CopyAmountsFromVATEntry(VATEntry,TRUE);
      "Posting Date" := GenJnlLine."Posting Date";
      "Document No." := GenJnlLine."Document No.";
      "User ID" := USERID;
      "Transaction No." := NextTransactionNo;
      OnInsertTempVATEntryOnBeforeInsert(TempVATEntry,GenJnlLine); <=====================
      INSERT;
    END;
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnInsertVATEntriesFromTempOnBeforeVATEntryInsert>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertVATEntriesFromTemp>
    Code lines:
    ...
    TempVATEntry.SETRANGE("Entry No.",FirstEntryNo,LastEntryNo);
    IF TempVATEntry.FINDSET THEN
      REPEAT
        VATEntry := TempVATEntry;
        VATEntry."Entry No." := NextVATEntryNo;
        OnInsertVATEntriesFromTempOnBeforeVATEntryInsert(VATEntry,TempVATEntry); <=====================
        VATEntry.INSERT(TRUE);
        NextVATEntryNo := NextVATEntryNo + 1;
        IF VATEntry."Unrealized VAT Entry No." = 0 THEN
          GLEntryVATEntryLink.InsertLink(GLEntry."Entry No.",VATEntry."Entry No.");
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnInsertVATOnBeforeCreateGLEntryForReverseChargeVATToPurchAcc>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertVAT>
    Code lines:
    ...
              VATPostingSetup."VAT Calculation Type"::"Full VAT":
                CreateGLEntry(GenJnlLine,VATPostingSetup.GetPurchAccount(UnrealizedVAT),
                  GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE);
              VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT":
                BEGIN
                  OnInsertVATOnBeforeCreateGLEntryForReverseChargeVATToPurchAcc( <=====================
                    GenJnlLine,VATPostingSetup,UnrealizedVAT,GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE);
                  CreateGLEntry(
                    GenJnlLine,VATPostingSetup.GetPurchAccount(UnrealizedVAT),GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE);
                  OnInsertVATOnBeforeCreateGLEntryForReverseChargeVATToRevChargeAcc(
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnInsertVATOnBeforeCreateGLEntryForReverseChargeVATToRevChargeAcc>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InsertVAT>
    Code lines:
    ...
                BEGIN
                  OnInsertVATOnBeforeCreateGLEntryForReverseChargeVATToPurchAcc(
                    GenJnlLine,VATPostingSetup,UnrealizedVAT,GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE);
                  CreateGLEntry(
                    GenJnlLine,VATPostingSetup.GetPurchAccount(UnrealizedVAT),GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE);
                  OnInsertVATOnBeforeCreateGLEntryForReverseChargeVATToRevChargeAcc( <=====================
                    GenJnlLine,VATPostingSetup,UnrealizedVAT,GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE);
                  CreateGLEntry(
                    GenJnlLine,VATPostingSetup.GetRevChargeAccount(UnrealizedVAT),-GLEntryVATAmount,-SrcCurrGLEntryVATAmt,TRUE);
                END;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnNextTransactionNoNeeded>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<NextTransactionNoNeeded>
    Code lines:
    WITH GenJnlLine DO BEGIN
      NewTransaction :=
        (LastDocType <> "Document Type") OR (LastDocNo <> "Document No.") OR
        (LastDate <> "Posting Date") OR ((CurrentBalance = 0) AND (TotalAddCurrAmount = 0)) AND NOT "System-Created Entry";
      OnNextTransactionNoNeeded(GenJnlLine,LastDocType,LastDocNo,LastDate,CurrentBalance,TotalAddCurrAmount,NewTransaction); <=====================
      EXIT(NewTransaction);
    END;
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPostApplyOnAfterRecalculateAmounts>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostApply>
    Code lines:
    ...
    ApplnRoundingPrecision := GetApplnRoundPrecision(NewCVLedgEntryBuf,OldCVLedgEntryBuf);
    
    OldCVLedgEntryBuf2.RecalculateAmounts(
      OldCVLedgEntryBuf2."Currency Code",NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
    
    OnPostApplyOnAfterRecalculateAmounts(OldCVLedgEntryBuf2,OldCVLedgEntryBuf,NewCVLedgEntryBuf,GenJnlLine); <=====================
    
    IF NOT BlockPaymentTolerance THEN
      CalcPmtTolerance(
        NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPostBankAccOnAfterBankAccLedgEntryInsert>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostBankAcc>
    Code lines:
    ...
      BankAccLedgEntry."Remaining Amount" := BankAccLedgEntry.Amount;
      BankAccLedgEntry.Positive := Amount > 0;
      BankAccLedgEntry.UpdateDebitCredit(Correction);
      OnPostBankAccOnBeforeBankAccLedgEntryInsert(BankAccLedgEntry,GenJnlLine,BankAcc);
      BankAccLedgEntry.INSERT(TRUE);
      OnPostBankAccOnAfterBankAccLedgEntryInsert(BankAccLedgEntry,GenJnlLine,BankAcc); <=====================
    
      IF ((Amount <= 0) AND ("Bank Payment Type" = "Bank Payment Type"::"Computer Check") AND "Check Printed") OR
         ((Amount < 0) AND ("Bank Payment Type" = "Bank Payment Type"::"Manual Check"))
      THEN BEGIN
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPostBankAccOnAfterCheckLedgEntryInsert>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostBankAcc>
    Code lines:
    ...
                CheckLedgEntry.Amount := -Amount
              ELSE
                CheckLedgEntry.Amount := -"Amount (LCY)";
              OnPostBankAccOnBeforeCheckLedgEntryInsert(CheckLedgEntry,BankAccLedgEntry,GenJnlLine,BankAcc);
              CheckLedgEntry.INSERT(TRUE);
              OnPostBankAccOnAfterCheckLedgEntryInsert(CheckLedgEntry,BankAccLedgEntry,GenJnlLine,BankAcc); <=====================
              NextCheckEntryNo := NextCheckEntryNo + 1;
            END;
        END;
      END;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPostBankAccOnBeforeBankAccLedgEntryInsert>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostBankAcc>
    Code lines:
    ...
      BankAccLedgEntry."Amount (LCY)" := "Amount (LCY)";
      BankAccLedgEntry.Open := Amount <> 0;
      BankAccLedgEntry."Remaining Amount" := BankAccLedgEntry.Amount;
      BankAccLedgEntry.Positive := Amount > 0;
      BankAccLedgEntry.UpdateDebitCredit(Correction);
      OnPostBankAccOnBeforeBankAccLedgEntryInsert(BankAccLedgEntry,GenJnlLine,BankAcc); <=====================
      BankAccLedgEntry.INSERT(TRUE);
      OnPostBankAccOnAfterBankAccLedgEntryInsert(BankAccLedgEntry,GenJnlLine,BankAcc);
    
      IF ((Amount <= 0) AND ("Bank Payment Type" = "Bank Payment Type"::"Computer Check") AND "Check Printed") OR
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPostBankAccOnBeforeCheckLedgEntryInsert>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostBankAcc>
    Code lines:
    ...
              CheckLedgEntry."Bank Payment Type" := CheckLedgEntry."Bank Payment Type"::"Manual Check";
              IF BankAcc."Currency Code" <> '' THEN
                CheckLedgEntry.Amount := -Amount
              ELSE
                CheckLedgEntry.Amount := -"Amount (LCY)";
              OnPostBankAccOnBeforeCheckLedgEntryInsert(CheckLedgEntry,BankAccLedgEntry,GenJnlLine,BankAcc); <=====================
              CheckLedgEntry.INSERT(TRUE);
              OnPostBankAccOnAfterCheckLedgEntryInsert(CheckLedgEntry,BankAccLedgEntry,GenJnlLine,BankAcc);
              NextCheckEntryNo := NextCheckEntryNo + 1;
            END;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPostBankAccOnBeforeInitBankAccLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostBankAcc>
    Code lines:
    ...
      BankAcc.TESTFIELD("Bank Acc. Posting Group");
      BankAccPostingGr.GET(BankAcc."Bank Acc. Posting Group");
    
      BankAccLedgEntry.LOCKTABLE;
    
      OnPostBankAccOnBeforeInitBankAccLedgEntry(GenJnlLine,CurrencyFactor,NextEntryNo,NextTransactionNo); <=====================
    
      InitBankAccLedgEntry(GenJnlLine,BankAccLedgEntry);
    
      BankAccLedgEntry."Bank Acc. Posting Group" := BankAcc."Bank Acc. Posting Group";
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPostCustOnAfterCopyCVLedgEntryBuf>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostCust>
    Code lines:
    ...
      TempDtldCVLedgEntryBuf."CV Ledger Entry No." := CustLedgEntry."Entry No.";
      CVLedgEntryBuf.CopyFromCustLedgEntry(CustLedgEntry);
      TempDtldCVLedgEntryBuf.InsertDtldCVLedgEntry(TempDtldCVLedgEntryBuf,CVLedgEntryBuf,TRUE);
      CVLedgEntryBuf.Open := CVLedgEntryBuf."Remaining Amount" <> 0;
      CVLedgEntryBuf.Positive := CVLedgEntryBuf."Remaining Amount" > 0;
      OnPostCustOnAfterCopyCVLedgEntryBuf(CVLedgEntryBuf,GenJnlLine); <=====================
    
      CalcPmtDiscPossible(GenJnlLine,CVLedgEntryBuf);
    
      IF "Currency Code" <> '' THEN BEGIN
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPostDtldCVLedgEntryOnBeforeCreateGLEntryGainLoss>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostDtldCVLedgEntry>
    Code lines:
    ...
        "Entry Type"::"Unrealized Loss",
        "Entry Type"::"Unrealized Gain",
        "Entry Type"::"Realized Loss",
        "Entry Type"::"Realized Gain":
          BEGIN
            OnPostDtldCVLedgEntryOnBeforeCreateGLEntryGainLoss(GenJnlLine,DtldCVLedgEntryBuf,Unapply); <=====================
            CreateGLEntryGainLoss(GenJnlLine,AccNo,-"Amount (LCY)","Currency Code" = AddCurrencyCode);
            IF NOT Unapply THEN
              CollectAdjustment(AdjAmount,-"Amount (LCY)",0);
          END;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPostFixedAssetOnBeforeInsertGLEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostFixedAsset>
    Code lines:
    ...
            FAGLPostBuf := TempFAGLPostBuf;
            FAGLPostBuf."Entry No." := NextEntryNo;
            FAGLPostBuf.INSERT;
          END;
          IsHandled := FALSE;
          OnPostFixedAssetOnBeforeInsertGLEntry(GenJnlLine,GLEntry,IsHandled,TempFAGLPostBuf); <=====================
          IF NOT IsHandled THEN
            InsertGLEntry(GenJnlLine,GLEntry,TRUE);
          IF (VATEntryGLEntryNo = 0) AND (GLEntry."Gen. Posting Type" <> GLEntry."Gen. Posting Type"::" ") THEN
            VATEntryGLEntryNo := GLEntry."Entry No.";
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPostGLAccOnBeforeInsertGLEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostGLAcc>
    Code lines:
    ...
      END;
      // Store Entry No. to global variable for return:
      GLEntryNo := GLEntry."Entry No.";
      InitVAT(GenJnlLine,GLEntry,VATPostingSetup);
      IsHandled := FALSE;
      OnPostGLAccOnBeforeInsertGLEntry(GenJnlLine,GLEntry,IsHandled); <=====================
      IF NOT IsHandled THEN
        InsertGLEntry(GenJnlLine,GLEntry,TRUE);
      PostJob(GenJnlLine,GLEntry);
      PostVAT(GenJnlLine,GLEntry,VATPostingSetup);
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPostUnapplyOnAfterVATEntrySetFilters>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostUnapply>
    Code lines:
    TempVATEntryNo := 1;
    VATEntry.SETCURRENTKEY(Type,"Bill-to/Pay-to No.","Transaction No.");
    VATEntry.SETRANGE(Type,VATEntryType);
    VATEntry.SETRANGE("Bill-to/Pay-to No.",BilltoPaytoNo);
    VATEntry.SETRANGE("Transaction No.",TransactionNo);
    OnPostUnapplyOnAfterVATEntrySetFilters(VATEntry,GenJnlLine); <=====================
    IF VATEntry.FINDSET THEN
      REPEAT
        VATPostingSetup.GET(VATEntry."VAT Bus. Posting Group",VATEntry."VAT Prod. Posting Group");
        OnPostUnapplyOnBeforeUnapplyVATEntry(VATEntry,UnapplyVATEntries);
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPostUnapplyOnBeforeUnapplyVATEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostUnapply>
    Code lines:
    ...
    VATEntry.SETRANGE("Transaction No.",TransactionNo);
    OnPostUnapplyOnAfterVATEntrySetFilters(VATEntry,GenJnlLine);
    IF VATEntry.FINDSET THEN
      REPEAT
        VATPostingSetup.GET(VATEntry."VAT Bus. Posting Group",VATEntry."VAT Prod. Posting Group");
        OnPostUnapplyOnBeforeUnapplyVATEntry(VATEntry,UnapplyVATEntries); <=====================
        IF UnapplyVATEntries OR (VATEntry."Unrealized VAT Entry No." <> 0) THEN BEGIN
          InsertTempVATEntry(GenJnlLine,VATEntry,TempVATEntryNo,TempVATEntry);
          IF VATEntry."Unrealized VAT Entry No." <> 0 THEN BEGIN
            VATPostingSetup.GET(VATEntry."VAT Bus. Posting Group",VATEntry."VAT Prod. Posting Group");
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPostUnapplyOnBeforeVATEntryInsert>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostUnapply>
    Code lines:
    ...
                  VATEntry.Amount,CalcAddCurrForUnapplication(VATEntry."Posting Date",VATEntry.Amount),FALSE);
              END ELSE
                GLEntryNoFromVAT := PostUnrealVATByUnapply(GenJnlLine,VATPostingSetup,VATEntry,TempVATEntry);
            VATEntry2 := TempVATEntry;
            VATEntry2."Entry No." := NextVATEntryNo;
            OnPostUnapplyOnBeforeVATEntryInsert(VATEntry2,GenJnlLine,VATEntry); <=====================
            VATEntry2.INSERT;
            IF GLEntryNoFromVAT <> 0 THEN
              GLEntryVATEntryLink.InsertLink(GLEntryNoFromVAT,VATEntry2."Entry No.");
            GLEntryNoFromVAT := 0;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPostVendOnAfterCopyCVLedgEntryBuf>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostVend>
    Code lines:
    ...
      TempDtldCVLedgEntryBuf."CV Ledger Entry No." := VendLedgEntry."Entry No.";
      CVLedgEntryBuf.CopyFromVendLedgEntry(VendLedgEntry);
      TempDtldCVLedgEntryBuf.InsertDtldCVLedgEntry(TempDtldCVLedgEntryBuf,CVLedgEntryBuf,TRUE);
      CVLedgEntryBuf.Open := CVLedgEntryBuf."Remaining Amount" <> 0;
      CVLedgEntryBuf.Positive := CVLedgEntryBuf."Remaining Amount" > 0;
      OnPostVendOnAfterCopyCVLedgEntryBuf(CVLedgEntryBuf,GenJnlLine); <=====================
    
      CalcPmtDiscPossible(GenJnlLine,CVLedgEntryBuf);
    
      IF "Currency Code" <> '' THEN BEGIN
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPrepareTempCustLedgEntryOnAfterSetFilters>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PrepareTempCustLedgEntry>
    Code lines:
    ...
      OldCustLedgEntry.SETCURRENTKEY("Document No.");
      OldCustLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
      OldCustLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
      OldCustLedgEntry.SETRANGE("Customer No.",NewCVLedgEntryBuf."CV No.");
      OldCustLedgEntry.SETRANGE(Open,TRUE);
      OnPrepareTempCustLedgEntryOnAfterSetFilters(OldCustLedgEntry,GenJnlLine,NewCVLedgEntryBuf); <=====================
      OldCustLedgEntry.FINDFIRST;
      OnPrepareTempCustLedgEntryOnBeforeTestPositive(GenJnlLine,IsHandled);
      IF NOT IsHandled THEN
        OldCustLedgEntry.TESTFIELD(Positive,NOT NewCVLedgEntryBuf.Positive);
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPrepareTempCustLedgEntryOnBeforeExit>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PrepareTempCustLedgEntry>
    Code lines:
    ...
        UNTIL TempOldCustLedgEntry.NEXT = 0;
        TempOldCustLedgEntry.SETRANGE(Positive,RemainingAmount < 0);
      END ELSE
        TempOldCustLedgEntry.SETRANGE(Positive);
    
      OnPrepareTempCustLedgEntryOnBeforeExit(GenJnlLine,NewCVLedgEntryBuf,TempOldCustLedgEntry); <=====================
      EXIT(TempOldCustLedgEntry.FIND('-'));
    END;
    EXIT(TRUE);
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPrepareTempCustLedgEntryOnBeforeTempOldCustLedgEntryInsert>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PrepareTempCustLedgEntry>
    Code lines:
    ...
      IF OldCustLedgEntry."Posting Date" > ApplyingDate THEN
        ApplyingDate := OldCustLedgEntry."Posting Date";
      GenJnlApply.CheckAgainstApplnCurrency(
        NewCVLedgEntryBuf."Currency Code",OldCustLedgEntry."Currency Code",GenJnlLine."Account Type"::Customer,TRUE);
      TempOldCustLedgEntry := OldCustLedgEntry;
      OnPrepareTempCustLedgEntryOnBeforeTempOldCustLedgEntryInsert(TempOldCustLedgEntry,GenJnlLine); <=====================
      TempOldCustLedgEntry.INSERT;
    END ELSE BEGIN
      // Find the first old entry (Invoice) which the new entry (Payment) should apply to
      OldCustLedgEntry.RESET;
    ...
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PrepareTempCustLedgEntry>
    Code lines:
    ...
      IF OldCustLedgEntry."Posting Date" > ApplyingDate THEN
        ApplyingDate := OldCustLedgEntry."Posting Date";
      GenJnlApply.CheckAgainstApplnCurrency(
        NewCVLedgEntryBuf."Currency Code",OldCustLedgEntry."Currency Code",GenJnlLine."Account Type"::Customer,TRUE);
      TempOldCustLedgEntry := OldCustLedgEntry;
      OnPrepareTempCustLedgEntryOnBeforeTempOldCustLedgEntryInsert(TempOldCustLedgEntry,GenJnlLine); <=====================
      TempOldCustLedgEntry.INSERT;
    END ELSE BEGIN
      // Find the first old entry (Invoice) which the new entry (Payment) should apply to
      OldCustLedgEntry.RESET;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPrepareTempCustLedgEntryOnBeforeTestPositive>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PrepareTempCustLedgEntry>
    Code lines:
    ...
      OldCustLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
      OldCustLedgEntry.SETRANGE("Customer No.",NewCVLedgEntryBuf."CV No.");
      OldCustLedgEntry.SETRANGE(Open,TRUE);
      OnPrepareTempCustLedgEntryOnAfterSetFilters(OldCustLedgEntry,GenJnlLine,NewCVLedgEntryBuf);
      OldCustLedgEntry.FINDFIRST;
      OnPrepareTempCustLedgEntryOnBeforeTestPositive(GenJnlLine,IsHandled); <=====================
      IF NOT IsHandled THEN
        OldCustLedgEntry.TESTFIELD(Positive,NOT NewCVLedgEntryBuf.Positive);
      IF OldCustLedgEntry."Posting Date" > ApplyingDate THEN
        ApplyingDate := OldCustLedgEntry."Posting Date";
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPrepareTempVendLedgEntryOnAfterSetFilters>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PrepareTempVendLedgEntry>
    Code lines:
    ...
      OldVendLedgEntry.SETCURRENTKEY("Document No.");
      OldVendLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
      OldVendLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
      OldVendLedgEntry.SETRANGE("Vendor No.",NewCVLedgEntryBuf."CV No.");
      OldVendLedgEntry.SETRANGE(Open,TRUE);
      OnPrepareTempVendLedgEntryOnAfterSetFilters(OldVendLedgEntry,GenJnlLine,NewCVLedgEntryBuf); <=====================
      OldVendLedgEntry.FINDFIRST;
      OldVendLedgEntry.TESTFIELD(Positive,NOT NewCVLedgEntryBuf.Positive);
      IF OldVendLedgEntry."Posting Date" > ApplyingDate THEN
        ApplyingDate := OldVendLedgEntry."Posting Date";
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPrepareTempVendLedgEntryOnBeforeExit>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PrepareTempVendLedgEntry>
    Code lines:
    ...
        UNTIL TempOldVendLedgEntry.NEXT = 0;
        TempOldVendLedgEntry.SETRANGE(Positive,RemainingAmount < 0);
      END ELSE
        TempOldVendLedgEntry.SETRANGE(Positive);
    
      OnPrepareTempVendLedgEntryOnBeforeExit(GenJnlLine,NewCVLedgEntryBuf,TempOldVendLedgEntry); <=====================
      EXIT(TempOldVendLedgEntry.FIND('-'));
    END;
    EXIT(TRUE);
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnPrepareTempVendLedgEntryOnBeforeTempOldVendLedgEntryInsert>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PrepareTempVendLedgEntry>
    Code lines:
    ...
      IF OldVendLedgEntry."Posting Date" > ApplyingDate THEN
        ApplyingDate := OldVendLedgEntry."Posting Date";
      GenJnlApply.CheckAgainstApplnCurrency(
        NewCVLedgEntryBuf."Currency Code",OldVendLedgEntry."Currency Code",GenJnlLine."Account Type"::Vendor,TRUE);
      TempOldVendLedgEntry := OldVendLedgEntry;
      OnPrepareTempVendLedgEntryOnBeforeTempOldVendLedgEntryInsert(TempOldVendLedgEntry,GenJnlLine); <=====================
      TempOldVendLedgEntry.INSERT;
    END ELSE BEGIN
      // Find the first old entry (Invoice) which the new entry (Payment) should apply to
      OldVendLedgEntry.RESET;
    ...
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PrepareTempVendLedgEntry>
    Code lines:
    ...
      IF OldVendLedgEntry."Posting Date" > ApplyingDate THEN
        ApplyingDate := OldVendLedgEntry."Posting Date";
      GenJnlApply.CheckAgainstApplnCurrency(
        NewCVLedgEntryBuf."Currency Code",OldVendLedgEntry."Currency Code",GenJnlLine."Account Type"::Vendor,TRUE);
      TempOldVendLedgEntry := OldVendLedgEntry;
      OnPrepareTempVendLedgEntryOnBeforeTempOldVendLedgEntryInsert(TempOldVendLedgEntry,GenJnlLine); <=====================
      TempOldVendLedgEntry.INSERT;
    END ELSE BEGIN
      // Find the first old entry (Invoice) which the new entry (Payment) should apply to
      OldVendLedgEntry.RESET;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnUnapplyCustLedgEntryOnAfterCreateGLEntriesForTotalAmounts>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<UnapplyCustLedgEntry>
    Code lines:
    ...
    UNTIL DtldCustLedgEntry2.NEXT = 0;
    
    OnBeforeCreateGLEntriesForTotalAmountsUnapply(DtldCustLedgEntry,CustPostingGr,GenJnlLine,TempInvPostBuf);
    CreateGLEntriesForTotalAmountsUnapply(GenJnlLine,TempInvPostBuf,CustPostingGr.GetReceivablesAccount);
    
    OnUnapplyCustLedgEntryOnAfterCreateGLEntriesForTotalAmounts(GenJnlLine2,DtldCustLedgEntry); <=====================
    
    IF IsTempGLEntryBufEmpty THEN
      DtldCustLedgEntry.SetZeroTransNo(NextTransactionNo);
    CheckPostUnrealizedVAT(GenJnlLine,TRUE);
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnUnapplyCustLedgEntryOnAfterDtldCustLedgEntrySetFilters>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<UnapplyCustLedgEntry>
    Code lines:
    ...
      DtldCustLedgEntry2.SETCURRENTKEY("Transaction No.","Customer No.","Entry Type");
      DtldCustLedgEntry2.SETRANGE("Transaction No.",DtldCustLedgEntry."Transaction No.");
    END;
    DtldCustLedgEntry2.SETRANGE("Customer No.",DtldCustLedgEntry."Customer No.");
    DtldCustLedgEntry2.SETFILTER("Entry Type",'>%1',DtldCustLedgEntry."Entry Type"::"Initial Entry");
    OnUnapplyCustLedgEntryOnAfterDtldCustLedgEntrySetFilters(DtldCustLedgEntry2,DtldCustLedgEntry); <=====================
    IF DtldCustLedgEntry."Transaction No." <> 0 THEN BEGIN
      UnapplyVATEntries := FALSE;
      DtldCustLedgEntry2.FINDSET;
      REPEAT
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnUnapplyCustLedgEntryOnBeforeCheckPostingGroup>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<UnapplyCustLedgEntry>
    Code lines:
    ...
    ReadGLSetup(GLSetup);
    
    Cust.GET(DtldCustLedgEntry."Customer No.");
    Cust.CheckBlockedCustOnJnls(Cust,GenJnlLine2."Document Type"::Payment,TRUE);
    
    OnUnapplyCustLedgEntryOnBeforeCheckPostingGroup(GenJnlLine,Cust); <=====================
    CustPostingGr.GET(GenJnlLine."Posting Group");
    CustPostingGr.GetReceivablesAccount;
    
    VATEntry.LOCKTABLE;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnUnapplyCustLedgEntryOnBeforePostUnapply>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<UnapplyCustLedgEntry>
    Code lines:
    ...
            UnapplyVATEntries := TRUE;
        IF DtldCustLedgEntry2."Entry Type" = DtldCustLedgEntry2."Entry Type"::"Payment Discount Tolerance (VAT Excl.)" THEN
          PmtDiscTolExists := TRUE;
      UNTIL DtldCustLedgEntry2.NEXT = 0;
    
      OnUnapplyCustLedgEntryOnBeforePostUnapply(DtldCustLedgEntry,DtldCustLedgEntry2); <=====================
    
      PostUnapply(
        GenJnlLine,VATEntry,VATEntry.Type::Sale,
        DtldCustLedgEntry."Customer No.",DtldCustLedgEntry."Transaction No.",UnapplyVATEntries,TempVATEntry);
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnUnapplyVendLedgEntryOnAfterCreateGLEntriesForTotalAmounts>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<UnapplyVendLedgEntry>
    Code lines:
    ...
    UNTIL DtldVendLedgEntry2.NEXT = 0;
    
    OnBeforeCreateGLEntriesForTotalAmountsUnapplyVendor(DtldVendLedgEntry,VendPostingGr,GenJnlLine,TempInvPostBuf);
    CreateGLEntriesForTotalAmountsUnapply(GenJnlLine,TempInvPostBuf,VendPostingGr.GetPayablesAccount);
    
    OnUnapplyVendLedgEntryOnAfterCreateGLEntriesForTotalAmounts(GenJnlLine2,DtldVendLedgEntry); <=====================
    
    IF IsTempGLEntryBufEmpty THEN
      DtldVendLedgEntry.SetZeroTransNo(NextTransactionNo);
    CheckPostUnrealizedVAT(GenJnlLine,TRUE);
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnUnapplyVendLedgEntryOnAfterFilterSourceEntries>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<UnapplyVendLedgEntry>
    Code lines:
    ...
      DtldVendLedgEntry2.SETCURRENTKEY("Transaction No.","Vendor No.","Entry Type");
      DtldVendLedgEntry2.SETRANGE("Transaction No.",DtldVendLedgEntry."Transaction No.");
    END;
    DtldVendLedgEntry2.SETRANGE("Vendor No.",DtldVendLedgEntry."Vendor No.");
    DtldVendLedgEntry2.SETFILTER("Entry Type",'>%1',DtldVendLedgEntry."Entry Type"::"Initial Entry");
    OnUnapplyVendLedgEntryOnAfterFilterSourceEntries(DtldVendLedgEntry,DtldVendLedgEntry2); <=====================
    IF DtldVendLedgEntry."Transaction No." <> 0 THEN BEGIN
      UnapplyVATEntries := FALSE;
      DtldVendLedgEntry2.FINDSET;
      REPEAT
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnUnapplyVendLedgEntryOnBeforeCheckPostingGroup>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<UnapplyVendLedgEntry>
    Code lines:
    ...
    ReadGLSetup(GLSetup);
    
    Vend.GET(DtldVendLedgEntry."Vendor No.");
    Vend.CheckBlockedVendOnJnls(Vend,GenJnlLine2."Document Type"::Payment,TRUE);
    
    OnUnapplyVendLedgEntryOnBeforeCheckPostingGroup(GenJnlLine,Vend); <=====================
    VendPostingGr.GET(GenJnlLine."Posting Group");
    VendPostingGr.GetPayablesAccount;
    
    VATEntry.LOCKTABLE;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnUnapplyVendLedgEntryOnBeforePostUnapply>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<UnapplyVendLedgEntry>
    Code lines:
    ...
            UnapplyVATEntries := TRUE;
        IF DtldVendLedgEntry2."Entry Type" = DtldVendLedgEntry2."Entry Type"::"Payment Discount Tolerance (VAT Excl.)" THEN
          PmtDiscTolExists := TRUE;
      UNTIL DtldVendLedgEntry2.NEXT = 0;
    
      OnUnapplyVendLedgEntryOnBeforePostUnapply(DtldVendLedgEntry,DtldVendLedgEntry2); <=====================
    
      PostUnapply(
        GenJnlLine,VATEntry,VATEntry.Type::Purchase,
        DtldVendLedgEntry."Vendor No.",DtldVendLedgEntry."Transaction No.",UnapplyVATEntries,TempVATEntry);
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnVendPostApplyVendLedgEntryOnBeforeCheckPostingGroup>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<VendPostApplyVendLedgEntry>
    Code lines:
    ...
        ContinuePosting(GenJnlLine);
    
      Vend.GET(VendLedgEntry."Vendor No.");
      Vend.CheckBlockedVendOnJnls(Vend,"Document Type",TRUE);
    
      OnVendPostApplyVendLedgEntryOnBeforeCheckPostingGroup(GenJnlLine,Vend); <=====================
      IF "Posting Group" = '' THEN BEGIN
        Vend.TESTFIELD("Vendor Posting Group");
        "Posting Group" := Vend."Vendor Posting Group";
      END;
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnVendUnrealizedVATOnAfterVATPartCalculation>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<VendUnrealizedVAT>
    Code lines:
    ...
            PaidAmount,
            VendLedgEntry2."Amount (LCY)",
            TotalUnrealVATAmountFirst,
            TotalUnrealVATAmountLast);
    
        OnVendUnrealizedVATOnAfterVATPartCalculation( <=====================
          GenJnlLine,VendLedgEntry2,PaidAmount,TotalUnrealVATAmountFirst,TotalUnrealVATAmountLast,SettledAmount,VATEntry2);
    
        IF VATPart > 0 THEN BEGIN
          CASE VATEntry2."VAT Calculation Type" OF
    ...
Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<OnVendUnrealizedVATOnBeforeInitGLEntryVAT>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<VendUnrealizedVAT>
    Code lines:
    ...
              ROUND(
                VATEntry2."Add.-Curr. Rem. Unreal. Base" * VATPart,
                AddCurrency."Amount Rounding Precision");
          END;
    
          OnVendUnrealizedVATOnBeforeInitGLEntryVAT(GenJnlLine,VATEntry2,VATAmount,VATBase,VATAmountAddCurr,VATBaseAddCurr); <=====================
    
          InitGLEntryVAT(
            GenJnlLine,PurchVATUnrealAccount,PurchVATAccount,-VATAmount,-VATAmountAddCurr,FALSE);
          GLEntryNo :=
    ...
Codeunit<Process Data Exch.>.PROCEDURE<OnBeforeFormatFieldValue>
  Raised in: Codeunit<Process Data Exch.>.PROCEDURE<SetField>
    Code lines:
    ...
    TransformedValue := DELCHR(DataExchField.GetValue,'>'); // We shoud use the trim transformation rule instead of this
    IF TransformationRule.GET(DataExchFieldMapping."Transformation Rule") THEN
      TransformedValue := TransformationRule.TransformText(DataExchField.Value);
    
    IsHandled := FALSE;
    OnBeforeFormatFieldValue(TransformedValue,DataExchField,DataExchFieldMapping,FieldRef,DataExchColumnDef,IsHandled); <=====================
    IF NOT IsHandled THEN
      CASE FORMAT(FieldRef.TYPE) OF
        'Text',
        'Code':
    ...
Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<OnBeforeCreateGenJnlDataExchLine>
  Raised in: Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<ExportGenJnlLine>
    Code lines:
    ...
    Window.OPEN(ProgressMsg);
    REPEAT
      LineNo += 1;
      Window.UPDATE(1,LineNo);
    
      OnBeforeCreateGenJnlDataExchLine(DataExch,GenJnlLine2,LineNo,LineAmount,TotalAmount,TransferDate,HandledGenJnlDataExchLine); <=====================
      IF NOT HandledGenJnlDataExchLine THEN
        CreateGenJnlDataExchLine(DataExch."Entry No.",GenJnlLine2,LineNo);
    
      CreditTransferEntry.CreateNew(CreditTransferRegister."No.",LineNo,
    ...
Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<OnBeforeInsertPmtExportDataJnlFromGenJnlLine>
  Raised in: Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<PreparePaymentExportDataJnl>
    Code lines:
    ...
      "Line No." := LineNo;
      "Payment Reference" := GenJnlLine."Payment Reference";
      IF PaymentMethod.GET(GenJnlLine."Payment Method Code") THEN
        "Data Exch. Line Def Code" := PaymentMethod."Pmt. Export Line Definition";
      "Recipient Creditor No." := GenJnlLine."Creditor No.";
      OnBeforeInsertPmtExportDataJnlFromGenJnlLine(TempPaymentExportData,GenJnlLine,GeneralLedgerSetup); <=====================
      INSERT(TRUE);
    END;
Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<OnBeforePaymentExport>
  Raised in: Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<ExportGenJnlLine>
    Code lines:
    ...
        GenJnlLine2."Posting Date",GenJnlLine2."Currency Code",GenJnlLine2.Amount,'',
        GenJnlLine2."Recipient Bank Account",GenJnlLine2."Message to Recipient");
    UNTIL GenJnlLine2.NEXT = 0;
    Window.CLOSE;
    
    OnBeforePaymentExport(GenJnlLine."Bal. Account No.",DataExch."Entry No.",LineNo,TotalAmount,TransferDate,HandledPaymentExport); <=====================
    IF NOT HandledPaymentExport THEN
      PaymentExportMgt.ExportToFile(DataExch."Entry No.");
    
    CODEUNIT.RUN(CODEUNIT::"Exp. User Feedback Gen. Jnl.",DataExch);
Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<OnCheckGenJnlLine>
  Raised in: Codeunit<Pmt Export Mgt Gen. Jnl Line>.PROCEDURE<CheckGenJnlLine>
    Code lines:
    GenJnlLine.DeletePaymentFileBatchErrors;
    GenJnlLine2.COPYFILTERS(GenJnlLine);
    IF GenJnlLine2.FINDSET THEN
      REPEAT
        CODEUNIT.RUN(CODEUNIT::"Payment Export Gen. Jnl Check",GenJnlLine2);
        OnCheckGenJnlLine(GenJnlLine2); <=====================
      UNTIL GenJnlLine2.NEXT = 0;
    
    IF GenJnlLine2.HasPaymentFileErrorsInBatch THEN BEGIN
      COMMIT;
    ...
Codeunit<Pmt Export Mgt Vend Ledg Entry>.PROCEDURE<OnBeforeCreateVendLedgerDataExchLine>
  Raised in: Codeunit<Pmt Export Mgt Vend Ledg Entry>.PROCEDURE<ExportVendLedgerEntry>
    Code lines:
    ...
    PaymentExportMgt.CreateDataExch(DataExch,VendorLedgerEntry2."Bal. Account No.");
    Window.OPEN(ProgressMsg);
    REPEAT
      LineNo += 1;
      Window.UPDATE(1,LineNo);
      OnBeforeCreateVendLedgerDataExchLine(DataExch,VendorLedgerEntry2,LineNo,LineAmount, <=====================
        TotalAmount,TransferDate,HandledGenJnlDataExchLine);
      IF NOT HandledGenJnlDataExchLine THEN
        CreateVendLedgerDataExchLine(DataExch."Entry No.",VendorLedgerEntry2,LineNo);
    UNTIL VendorLedgerEntry2.NEXT = 0;
    ...
Codeunit<Pmt Export Mgt Vend Ledg Entry>.PROCEDURE<OnBeforeInsertPmtExportDataJnlFromVendorLedgerEntry>
  Raised in: Codeunit<Pmt Export Mgt Vend Ledg Entry>.PROCEDURE<PreparePaymentExportDataVLE>
    Code lines:
    ...
      "Line No." := LineNo;
      "Payment Reference" := VendorLedgerEntry."Payment Reference";
      IF PaymentMethod.GET(VendorLedgerEntry."Payment Method Code") THEN
        "Data Exch. Line Def Code" := PaymentMethod."Pmt. Export Line Definition";
      "Recipient Creditor No." := VendorLedgerEntry."Creditor No.";
      OnBeforeInsertPmtExportDataJnlFromVendorLedgerEntry(TempPaymentExportData,VendorLedgerEntry,GeneralLedgerSetup); <=====================
      INSERT(TRUE);
    END;
Codeunit<Pmt Export Mgt Vend Ledg Entry>.PROCEDURE<OnBeforePaymentExportVendorLedgerEntry>
  Raised in: Codeunit<Pmt Export Mgt Vend Ledg Entry>.PROCEDURE<ExportVendLedgerEntry>
    Code lines:
    ...
      IF NOT HandledGenJnlDataExchLine THEN
        CreateVendLedgerDataExchLine(DataExch."Entry No.",VendorLedgerEntry2,LineNo);
    UNTIL VendorLedgerEntry2.NEXT = 0;
    Window.CLOSE;
    
    OnBeforePaymentExportVendorLedgerEntry(VendorLedgerEntry."Bal. Account No.",DataExch."Entry No.", <=====================
      LineNo,TotalAmount,TransferDate,HandledPaymentExportVendLedgerEntry);
    IF NOT HandledPaymentExportVendLedgerEntry THEN
      PaymentExportMgt.ExportToFile(DataExch."Entry No.")
Codeunit<Pmt Export Mgt Cust Ledg Entry>.PROCEDURE<OnBeforeCreateCustLedgerDataExchLine>
  Raised in: Codeunit<Pmt Export Mgt Cust Ledg Entry>.PROCEDURE<ExportCustLedgerEntry>
    Code lines:
    ...
    PaymentExportMgt.CreateDataExch(DataExch,CustLedgerEntry2."Bal. Account No.");
    Window.OPEN(ProgressMsg);
    REPEAT
      LineNo += 1;
      Window.UPDATE(1,LineNo);
      OnBeforeCreateCustLedgerDataExchLine(DataExch,CustLedgerEntry2,LineNo,LineAmount, <=====================
        TotalAmount,TransferDate,HandledGenJnlDataExchLine);
      IF NOT HandledGenJnlDataExchLine THEN
        CreateCustLedgerDataExchLine(DataExch."Entry No.",CustLedgerEntry2,LineNo);
    UNTIL CustLedgerEntry2.NEXT = 0;
    ...
Codeunit<Pmt Export Mgt Cust Ledg Entry>.PROCEDURE<OnBeforePaymentExportCustLedgerEntry>
  Raised in: Codeunit<Pmt Export Mgt Cust Ledg Entry>.PROCEDURE<ExportCustLedgerEntry>
    Code lines:
    ...
        TotalAmount,TransferDate,HandledGenJnlDataExchLine);
      IF NOT HandledGenJnlDataExchLine THEN
        CreateCustLedgerDataExchLine(DataExch."Entry No.",CustLedgerEntry2,LineNo);
    UNTIL CustLedgerEntry2.NEXT = 0;
    Window.CLOSE;
    OnBeforePaymentExportCustLedgerEntry(CustLedgerEntry."Bal. Account No.",DataExch."Entry No.", <=====================
      LineNo,TotalAmount,TransferDate,HandledPaymentExportVendLedgerEntry);
    IF NOT HandledPaymentExportVendLedgerEntry THEN
      PaymentExportMgt.ExportToFile(DataExch."Entry No.")
Codeunit<Payment Export Gen. Jnl Check>.PROCEDURE<OnPaymentExportGenJnlCheck>
  Raised in: Codeunit<Payment Export Gen. Jnl Check>.PROCEDURE<CheckPaymentExportGenJnl>
    Code lines:
    ...
          ("Bank Payment Type" <> "Bank Payment Type"::"Electronic Payment-IAT"))
      THEN
        InsertPaymentFileError(STRSUBSTNO(WrongBankPaymentTypeErr,FIELDCAPTION("Bank Payment Type"),
            "Bank Payment Type"::"Electronic Payment","Bank Payment Type"::"Electronic Payment-IAT"));
    
      OnPaymentExportGenJnlCheck(GenJournalLine,Handled); <=====================
      IF NOT Handled THEN BEGIN
        IF NOT ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::Employee])
        THEN
          InsertPaymentFileError(MustBeVendorEmployeeOrCustomerErr);
    ...
Codeunit<Pmt. Export Vend. Ledger Check>.PROCEDURE<OnCheckEmptyPmtInfoVendorLedgerEntry>
  Raised in: Codeunit<Pmt. Export Vend. Ledger Check>.PROCEDURE<CheckEmptyPmtInfo>
    Code lines:
    VendLedgEntry2.COPY(VendLedgEntry);
    VendLedgEntry2.SETRANGE("Recipient Bank Account",'');
    VendLedgEntry2.SETRANGE("Creditor No.",'');
    
    OnCheckEmptyPmtInfoVendorLedgerEntry(VendLedgEntry2,Handled); <=====================
    
    IF NOT Handled THEN
      IF NOT VendLedgEntry2.ISEMPTY THEN
        ERROR(EmptyPaymentDetailsErr,
          VendLedgEntry2.FIELDCAPTION("Recipient Bank Account"),VendLedgEntry2.FIELDCAPTION("Creditor No."));
Codeunit<Pmt. Export Vend. Ledger Check>.PROCEDURE<OnPmtExportVendorLedgerCheck>
  Raised in: Codeunit<Pmt. Export Vend. Ledger Check>.<OnRun>
    Code lines:
    ...
    CheckEmptyPmtInfo(Rec);
    CheckBalAccountType(Rec);
    CheckBankAccount(Rec);
    CheckBalAccountNo(Rec);
    
    OnPmtExportVendorLedgerCheck(Rec); <=====================
Codeunit<Pmt. Export Cust. Ledger Check>.PROCEDURE<OnPmtExportCustLedgerCheck>
  Raised in: Codeunit<Pmt. Export Cust. Ledger Check>.<OnRun>
    Code lines:
    ...
    CheckPaymentMethod(Rec);
    CheckBalAccountType(Rec);
    CheckBankAccount(Rec);
    CheckBalAccountNo(Rec);
    
    OnPmtExportCustLedgerCheck(Rec); <=====================
Codeunit<Map DataExch To Intermediate>.PROCEDURE<OnBeforeIntermediateDataImportInsert>
  Raised in: Codeunit<Map DataExch To Intermediate>.PROCEDURE<InsertDataValues>
    Code lines:
    ...
      TempNameValueBuffer.FINDFIRST;
      EVALUATE(ParentLineNo,TempNameValueBuffer.Value);
      IntermediateDataImport.VALIDATE("Parent Record No.",ParentLineNo);
    END;
    
    OnBeforeIntermediateDataImportInsert(DataExchField,DataExchLineDef,TempNameValueBuffer,IntermediateDataImport); <=====================
    IntermediateDataImport.INSERT(TRUE);
Codeunit<SEPA CT-Fill Export Buffer>.PROCEDURE<OnFillExportBufferOnSetAsRecipient>
  Raised in: Codeunit<SEPA CT-Fill Export Buffer>.PROCEDURE<FillExportBuffer>
    Code lines:
    ...
            BEGIN
              Employee.GET(TempGenJnlLine."Account No.");
              SetEmployeeAsRecipient(Employee);
            END;
          ELSE
            OnFillExportBufferOnSetAsRecipient(GenJnlLine,PaymentExportData,TempGenJnlLine); <=====================
        END;
    
        VALIDATE("SEPA Instruction Priority","SEPA Instruction Priority"::NORMAL);
        VALIDATE("SEPA Payment Method","SEPA Payment Method"::TRF);
    ...
Codeunit<SEPA CT-Prepare Source>.PROCEDURE<OnAfterCreateTempJnlLines>
  Raised in: Codeunit<SEPA CT-Prepare Source>.PROCEDURE<CreateTempJnlLines>
    Code lines:
    // To fill TempGenJnlLine from the source identified by filters set on FromGenJnlLine
    TempGenJnlLine := FromGenJnlLine;
    
    OnAfterCreateTempJnlLines(FromGenJnlLine,TempGenJnlLine); <=====================
Codeunit<Map Incoming Doc to Gen. Line>.PROCEDURE<OnBeforeGenJnlLineInsertFromIncomingDocument>
  Raised in: Codeunit<Map Incoming Doc to Gen. Line>.PROCEDURE<CreateGeneralJournalLineFromIncomingDocument>
    Code lines:
    ...
          GenJournalLine.VALIDATE("Currency Code",IncomingDocument."Currency Code");
      GenJournalLine.VALIDATE(Amount,IncomingDocument."Amount Incl. VAT");
      GenJournalLine.VALIDATE("Incoming Document Entry No.",IncomingDocument."Entry No.");
      GenJournalLine.VALIDATE(Description,IncomingDocument."Vendor Name");
    
      OnBeforeGenJnlLineInsertFromIncomingDocument(GenJournalLine,IncomingDocument); <=====================
    
      IF NOT ErrorMessage.HasErrors(FALSE) THEN
        GenJournalLine.INSERT(TRUE);
    
    ...
Codeunit<SEPA DD-Prepare Source>.PROCEDURE<OnAfterCreateTempCollectionEntries>
  Raised in: Codeunit<SEPA DD-Prepare Source>.PROCEDURE<CreateTempCollectionEntries>
    Code lines:
    // To fill ToDirectDebitCollectionEntry from the source identified by filters set on FromDirectDebitCollectionEntry
    ToDirectDebitCollectionEntry := FromDirectDebitCollectionEntry;
    
    OnAfterCreateTempCollectionEntries(FromDirectDebitCollectionEntry,ToDirectDebitCollectionEntry); <=====================
Codeunit<Read Data Exch. from File>.PROCEDURE<OnBeforeFileImport>
  Raised in: Codeunit<Read Data Exch. from File>.<OnRun>
    Code lines:
    OnBeforeFileImport(TempBlob,"File Name"); <=====================
    
    IF NOT TempBlob.Blob.HASVALUE THEN
      "File Name" := COPYSTR(FileMgt.BLOBImportWithFilter(TempBlob,ImportBankStmtTxt,'',FileFilterTxt,FileFilterExtensionTxt),1,250);
    
    IF "File Name" <> '' THEN
      "File Content" := TempBlob.Blob;
Codeunit<Process Gen. Journal  Lines>.PROCEDURE<OnBeforeUpdateGenJnlLines>
  Raised in: Codeunit<Process Gen. Journal  Lines>.PROCEDURE<UpdateGenJournalLines>
    Code lines:
    OnBeforeUpdateGenJnlLines(GenJournalLineTemplate); <=====================
    
    GenJournalLine.SETRANGE("Journal Template Name",GenJournalLineTemplate."Journal Template Name");
    GenJournalLine.SETRANGE("Journal Batch Name",GenJournalLineTemplate."Journal Batch Name");
    GenJournalLine.SETFILTER("Line No.",'>%1',GenJournalLineTemplate."Line No.");
    IF GenJournalLine.FINDSET THEN BEGIN
      DocNo := GenJournalLineTemplate."Document No.";
      REPEAT
        GenJournalLine.VALIDATE("Document No.",DocNo);
        GenJournalLine.MODIFY(TRUE);
    ...
Codeunit<Match General Journal Lines>.PROCEDURE<OnGetAccountMappingOnBeforeCalculateStringNearness>
  Raised in: Codeunit<Match General Journal Lines>.PROCEDURE<GetAccountMapping>
    Code lines:
    ...
      REPEAT
        IF Description = RecordMatchMgt.Trim(TextToAccMapping."Mapping Text") THEN
          EXIT(TRUE);
    
        IsHandled := FALSE;
        OnGetAccountMappingOnBeforeCalculateStringNearness(TextToAccMapping,Description,IsHandled); <=====================
        IF IsHandled THEN
          EXIT(TRUE);
    
        Nearness := RecordMatchMgt.CalculateStringNearness(' ' + RecordMatchMgt.Trim(TextToAccMapping."Mapping Text") + ' ',
    ...
Codeunit<Match Bank Pmt. Appl.>.PROCEDURE<OnAfterMatchBankPayments>
  Raised in: Codeunit<Match Bank Pmt. Appl.>.<OnRun>
    Code lines:
    BankAccReconciliationLine.FilterBankRecLines(Rec);
    IF BankAccReconciliationLine.FINDFIRST THEN BEGIN
      MatchBankPayments.SetApplyEntries(TRUE);
      MatchBankPayments.RUN(BankAccReconciliationLine);
    END;
    OnAfterMatchBankPayments(Rec); <=====================
Codeunit<Match Bank Payments>.PROCEDURE<OnDocumentMatchingForBankLedgerEntryOnBeforeMatch>
  Raised in: Codeunit<Match Bank Payments>.PROCEDURE<DocumentMatchingForBankLedgerEntry>
    Code lines:
    ...
    IF DocNoMatching(SearchText,TempLedgerEntryMatchingBuffer."External Document No.") THEN BEGIN
      BankPmtApplRule."Doc. No./Ext. Doc. No. Matched" := BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes;
      EXIT;
    END;
    
    OnDocumentMatchingForBankLedgerEntryOnBeforeMatch(SearchText,TempLedgerEntryMatchingBuffer,BankPmtApplRule); <=====================
    IF BankPmtApplRule."Doc. No./Ext. Doc. No. Matched" = BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes THEN
      EXIT;
    
    CustLedgerEntry.SETRANGE("Document Type",TempLedgerEntryMatchingBuffer."Document Type");
    ...
Codeunit<Match Bank Payments>.PROCEDURE<OnFindTextMappingsOnBeforeCalculateStringNearness>
  Raised in: Codeunit<Match Bank Payments>.PROCEDURE<FindTextMappings>
    Code lines:
    TextMapperMatched := FALSE;
    IF TextToAccMapping.FINDSET THEN
      REPEAT
        Nearness := 0;
        OnFindTextMappingsOnBeforeCalculateStringNearness(BankAccReconciliationLine,TextToAccMapping,Nearness); <=====================
        IF Nearness = 0 THEN
          Nearness :=
            RecordMatchMgt.CalculateStringNearness(
              RecordMatchMgt.Trim(TextToAccMapping."Mapping Text"),
              BankAccReconciliationLine."Transaction Text",STRLEN(TextToAccMapping."Mapping Text"),GetNormalizingFactor);
    ...
Codeunit<Match Bank Payments>.PROCEDURE<OnInitBankAccLedgerEntriesMatchingBufferSetFilter>
  Raised in: Codeunit<Match Bank Payments>.PROCEDURE<InitializeBankAccLedgerEntriesMatchingBuffer>
    Code lines:
    ...
    PurchasesPayablesSetup.GET;
    
    BankAccLedgerEntry.SETRANGE(Open,TRUE);
    BankAccLedgerEntry.SETRANGE("Bank Account No.",BankAccReconciliationLine."Bank Account No.");
    
    OnInitBankAccLedgerEntriesMatchingBufferSetFilter(BankAccLedgerEntry,BankAccReconciliationLine); <=====================
    
    IF BankAccount.IsInLocalCurrency THEN
      IF PurchasesPayablesSetup."Appln. between Currencies" = PurchasesPayablesSetup."Appln. between Currencies"::None THEN BEGIN
        GeneralLedgerSetup.GET;
    ...
Codeunit<Match Bank Payments>.PROCEDURE<OnInitCustomerLedgerEntriesMatchingBufferSetFilter>
  Raised in: Codeunit<Match Bank Payments>.PROCEDURE<InitializeCustomerLedgerEntriesMatchingBuffer>
    Code lines:
    ...
      CustLedgerEntry."Document Type"::Invoice,
      CustLedgerEntry."Document Type"::"Credit Memo",
      CustLedgerEntry."Document Type"::"Finance Charge Memo",
      CustLedgerEntry."Document Type"::Reminder);
    
    OnInitCustomerLedgerEntriesMatchingBufferSetFilter(CustLedgerEntry,BankAccReconciliationLine); <=====================
    
    IF BankAccount.IsInLocalCurrency THEN BEGIN
      CustLedgerEntry.SETAUTOCALCFIELDS("Remaining Amt. (LCY)");
      IF SalesReceivablesSetup."Appln. between Currencies" = SalesReceivablesSetup."Appln. between Currencies"::None THEN BEGIN
    ...
Codeunit<Match Bank Payments>.PROCEDURE<OnInitVendorLedgerEntriesMatchingBufferSetFilter>
  Raised in: Codeunit<Match Bank Payments>.PROCEDURE<InitializeVendorLedgerEntriesMatchingBuffer>
    Code lines:
    ...
      VendorLedgerEntry."Document Type"::Invoice,
      VendorLedgerEntry."Document Type"::"Credit Memo",
      VendorLedgerEntry."Document Type"::"Finance Charge Memo",
      VendorLedgerEntry."Document Type"::Reminder);
    
    OnInitVendorLedgerEntriesMatchingBufferSetFilter(VendorLedgerEntry,BankAccReconciliationLine); <=====================
    
    IF BankAccount.IsInLocalCurrency THEN BEGIN
      VendorLedgerEntry.SETAUTOCALCFIELDS("Remaining Amt. (LCY)");
      IF PurchasesPayablesSetup."Appln. between Currencies" = PurchasesPayablesSetup."Appln. between Currencies"::None THEN BEGIN
    ...
Codeunit<Encryption Management>.PROCEDURE<OnBeforeDecryptDataInAllCompaniesOnPrem>
  Raised in: Codeunit<Encryption Management>.PROCEDURE<DecryptDataInAllCompanies>
    Code lines:
    IF NOT PermissionManager.SoftwareAsAService THEN
      OnBeforeDecryptDataInAllCompaniesOnPrem; <=====================
    
    Company.FINDSET;
    REPEAT
      DecryptServicePasswordData(Company.Name);
      DecryptKeyValueData(Company.Name);
    UNTIL Company.NEXT = 0;
Codeunit<Encryption Management>.PROCEDURE<OnBeforeEncryptDataInAllCompaniesOnPrem>
  Raised in: Codeunit<Encryption Management>.PROCEDURE<EncryptDataInAllCompanies>
    Code lines:
    IF NOT PermissionManager.SoftwareAsAService THEN
      OnBeforeEncryptDataInAllCompaniesOnPrem; <=====================
    
    Company.FINDSET;
    REPEAT
      EncryptServicePasswordData(Company.Name);
      EncryptKeyValueData(Company.Name);
    UNTIL Company.NEXT = 0;
Codeunit<Exp. Pre-Mapping Gen. Jnl.>.PROCEDURE<OnBeforeInsertPaymentExoprtData>
  Raised in: Codeunit<Exp. Pre-Mapping Gen. Jnl.>.PROCEDURE<PreparePaymentExportDataJnl>
    Code lines:
    ...
      "Payment Reference" := GenJnlLine."Payment Reference";
      IF PaymentMethod.GET(GenJnlLine."Payment Method Code") THEN
        "Data Exch. Line Def Code" := PaymentMethod."Pmt. Export Line Definition";
      "Recipient Creditor No." := GenJnlLine."Creditor No.";
    
      OnBeforeInsertPaymentExoprtData(PaymentExportData,GenJnlLine,GeneralLedgerSetup); <=====================
    
      INSERT(TRUE);
    END;
Codeunit<Update Currency Exchange Rates>.PROCEDURE<OnBeforeGetCurrencyExchangeData>
  Raised in: Codeunit<Update Currency Exchange Rates>.PROCEDURE<GetCurrencyExchangeData>
    Code lines:
    CLEAR(ResponseTempBlob);
    ResponseTempBlob.INIT;
    ResponseTempBlob.Blob.CREATEINSTREAM(ResponseInStream);
    
    OnBeforeGetCurrencyExchangeData(CurrExchRateUpdateSetup,ResponseInStream,SourceName,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    ExecuteWebServiceRequest(CurrExchRateUpdateSetup,ResponseInStream);
    CurrExchRateUpdateSetup.GetWebServiceURL(ServiceUrl);
Codeunit<Update Currency Exchange Rates>.PROCEDURE<OnBeforeSyncCurrencyExchangeRatesLoop>
  Raised in: Codeunit<Update Currency Exchange Rates>.PROCEDURE<SyncCurrencyExchangeRates>
    Code lines:
    CurrExchRateUpdateSetup.SETRANGE(Enabled,TRUE);
    
    IF CurrExchRateUpdateSetup.FINDSET THEN
      REPEAT
        OnBeforeSyncCurrencyExchangeRatesLoop(CurrExchRateUpdateSetup); <=====================
        GetCurrencyExchangeData(CurrExchRateUpdateSetup,ResponseInStream,SourceName);
        UpdateCurrencyExchangeRates(CurrExchRateUpdateSetup,ResponseInStream,SourceName);
        LogTelemetryWhenExchangeRateUpdated(CurrExchRateUpdateSetup);
      UNTIL CurrExchRateUpdateSetup.NEXT = 0
    ELSE
Codeunit<Get Bank Stmt. Line Candidates>.PROCEDURE<OnBeforeTransferCandidatestoAppliedPmtEntries>
  Raised in: Codeunit<Get Bank Stmt. Line Candidates>.PROCEDURE<TransferCandidatestoAppliedPmtEntries>
    Code lines:
    OnBeforeTransferCandidatestoAppliedPmtEntries(BankAccReconLine,TempBankStmtMatchingBuffer,Handled); <=====================
    IF NOT Handled THEN
      GetCandidateRanking(BankAccReconLine,TempBankStmtMatchingBuffer);
    BankAccount.GET(BankAccReconLine."Bank Account No.");
    
    PaymentApplicationProposal.RESET;
    TempBankStmtMatchingBuffer.RESET;
    TempBankStmtMatchingBuffer.SETRANGE("One to Many Match",FALSE);
    IF TempBankStmtMatchingBuffer.FINDSET THEN
      REPEAT
    ...
Codeunit<Http Web Request Mgt.>.PROCEDURE<OnBeforeInvokeTestJSONRequest>
  Raised in: Codeunit<Http Web Request Mgt.>.PROCEDURE<InvokeJSONRequest>
    Code lines:
    IF JSONMgt.InitializeFromString(RequestJson) THEN
      IF JSONMgt.SelectTokenFromRoot(OAuth20Mgt.GetTestToken) THEN BEGIN
        OnBeforeInvokeTestJSONRequest(Result,RequestJson,ResponseJson,HttpError); <=====================
        EXIT(Result);
      END;
    
    ResponseJson := '';
    HttpError := '';
    
    IF ProcessJsonRequestResponse(RequestJson,ResponseJson) THEN
    ...
Codeunit<Http Web Request Mgt.>.PROCEDURE<OnOverrideUrl>
  Raised in: Codeunit<Http Web Request Mgt.>.PROCEDURE<Initialize>
    Code lines:
    IF NOT PermissionManager.SoftwareAsAService THEN
      OnOverrideUrl(URL); <=====================
    
    HttpWebRequest := HttpWebRequest.Create(URL);
    SetDefaults;
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterCode>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<Code>
    Code lines:
    ...
        COPY(TempMarkedGenJnlLine);
      END ELSE
        ProcessLines(GenJnlLine);
    END;
    
    OnAfterCode(GenJnlLine,PreviewMode); <=====================
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterIncrementBatchName>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<UpdateAndDeleteLines>
    Code lines:
    ...
            IF GenJnlTemplate.Type = GenJnlTemplate.Type::Assets THEN
              FAJnlSetup.IncGenJnlBatchName(GenJnlBatch);
            GenJnlBatch.Name := INCSTR(GenJnlLine."Journal Batch Name");
            IF GenJnlBatch.INSERT THEN;
            GenJnlLine."Journal Batch Name" := GenJnlBatch.Name;
            OnAfterIncrementBatchName(GenJnlBatch,GenJnlLine2."Journal Batch Name"); <=====================
          END;
    
      GenJnlLine3.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
      IF (GenJnlBatch."No. Series" = '') AND NOT GenJnlLine3.FINDLAST THEN BEGIN
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterMakeRecurringTexts>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<MakeRecurringTexts>
    Code lines:
    ...
          DELCHR(
            PADSTR(
              STRSUBSTNO(Description,Day,Week,Month,MonthText,AccountingPeriod.Name),
              MAXSTRLEN(Description)),
            '>');
        OnAfterMakeRecurringTexts(GenJnlLine2,AccountingPeriod,Day,Week,Month,MonthText); <=====================
      END;
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterMultiplyAmounts>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<MultiplyAmounts>
    Code lines:
    ...
          "Job Line Discount Amount" := "Job Line Discount Amount" * Factor;
          "Job Line Disc. Amount (LCY)" := "Job Line Disc. Amount (LCY)" * Factor;
        END;
      END;
    
    OnAfterMultiplyAmounts(GenJnlLine2,Factor,SuppressCommit); <=====================
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterPostAllocations>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<PostAllocations>
    Code lines:
    ...
            END;
          UNTIL GenJnlAlloc.NEXT = 0;
        END;
      END;
    
    OnAfterPostAllocations(AllocateGenJnlLine,Reversing,SuppressCommit); <=====================
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterPostGenJnlLine>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<PostGenJournalLine>
    Code lines:
    ...
      PrepareGenJnlLineAddCurr(GenJnlLine5);
      UpdateIncomingDocument(GenJnlLine5);
      OnBeforePostGenJnlLine(GenJnlLine5,SuppressCommit,IsPosted,GenJnlPostLine);
      IF NOT IsPosted THEN
        GenJnlPostLine.RunWithoutCheck(GenJnlLine5);
      OnAfterPostGenJnlLine(GenJnlLine5,SuppressCommit,GenJnlPostLine); <=====================
      IF (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND (CurrentICPartner <> '') AND
         ("IC Direction" = "IC Direction"::Outgoing) AND (ICTransactionNo > 0)
      THEN
        ICOutboxMgt.CreateOutboxJnlLine(ICTransactionNo,1,GenJnlLine5);
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterPostReversingLines>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<PostReversingLines>
    Code lines:
    ...
          GenJnlPostLine.RunWithCheck(GenJournalLine2);
          PostAllocations(GenJournalLine1,TRUE);
        END;
      UNTIL TempGenJnlLine.NEXT = 0;
    
    OnAfterPostReversingLines(TempGenJnlLine,PreviewMode); <=====================
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterProcessBalanceOfLines>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<ProcessBalanceOfLines>
    Code lines:
    ...
      CopyFields(GenJnlLine);
      IF VATEntryCreated AND VATInfoSourceLineIsInserted THEN
        UpdateGenJnlLineWithVATInfo(GenJnlLine,GenJnlLineVATInfoSource,StartLineNo,LastLineNo);
    END;
    
    OnAfterProcessBalanceOfLines(GenJnlLine); <=====================
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterProcessLines>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<ProcessLines>
    Code lines:
    ...
      COMMIT;
    
    IF SkippedLine AND GUIALLOWED THEN
      MESSAGE(SkippedLineMsg);
    
    OnAfterProcessLines(TempGenJnlLine); <=====================
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnAfterUpdateLineBalance>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<ProcessBalanceOfLines>
    Code lines:
    ...
            StartLineNo := "Line No.";
          END;
          IF CurrentBalanceReverse = 0 THEN
            StartLineNoReverse := "Line No.";
          UpdateLineBalance;
          OnAfterUpdateLineBalance(GenJnlLine); <=====================
          CurrentBalance := CurrentBalance + "Balance (LCY)";
          IF "Recurring Method" >= "Recurring Method"::"RF Reversing Fixed" THEN
            CurrentBalanceReverse := CurrentBalanceReverse + "Balance (LCY)";
    
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeCheckBalance>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<CheckBalance>
    Code lines:
    OnBeforeCheckBalance( <=====================
      GenJnlTemplate,GenJnlLine,CurrentBalance,CurrentBalanceReverse,CurrencyBalance,
      StartLineNo,StartLineNoReverse,LastDocType,LastDocNo,LastDate,LastCurrencyCode,SuppressCommit);
    
    WITH GenJnlLine DO BEGIN
      IF CurrentBalance <> 0 THEN BEGIN
        GET("Journal Template Name","Journal Batch Name",StartLineNo);
        IF GenJnlTemplate."Force Doc. Balance" THEN
          ERROR(
            Text012 +
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeCheckGenPostingType>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<CheckGenPostingType>
    Code lines:
    OnBeforeCheckGenPostingType(GenJnlLine6,AccountType,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF (AccountType = AccountType::Customer) AND
       (GenJnlLine6."Gen. Posting Type" = GenJnlLine6."Gen. Posting Type"::Purchase) OR
       (AccountType = AccountType::Vendor) AND
       (GenJnlLine6."Gen. Posting Type" = GenJnlLine6."Gen. Posting Type"::Sale)
    THEN
      GenJnlLine6.FIELDERROR("Gen. Posting Type");
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeCode>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<Code>
    Code lines:
    OnBeforeCode(GenJnlLine,PreviewMode,SuppressCommit); <=====================
    
    // let's force Api Enabled check.
    // this will disable integration related subscribers in case of disabled Api setup
    BINDSUBSCRIPTION(IntegrationService);
    IntegrationManagement.ResetIntegrationActivated;
    
    WITH GenJnlLine DO BEGIN
      SETRANGE("Journal Template Name","Journal Template Name");
      SETRANGE("Journal Batch Name","Journal Batch Name");
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeCommit>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<ProcessLines>
    Code lines:
    ...
        REPEAT
          EVALUATE(PostingNoSeriesNo,NoSeries.Description);
          NoSeriesMgt2[PostingNoSeriesNo].SaveNoSeries;
        UNTIL NoSeries.NEXT = 0;
    
      OnBeforeCommit(GLRegNo,GenJnlLine,GenJnlPostLine); <=====================
    
      IF NOT SuppressCommit THEN
        COMMIT;
      CLEAR(GenJnlCheckLine);
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeIfCheckBalance>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<ProcessBalanceOfLines>
    Code lines:
    ...
            DocCorrection := Correction;
          END ELSE
            IF Correction <> DocCorrection THEN
              FIELDERROR(Correction,Text008);
        END;
        OnBeforeIfCheckBalance(GenJnlTemplate,GenJnlLine,LastDocType,LastDocNo,LastDate,ForceCheckBalance,SuppressCommit); <=====================
        IF ForceCheckBalance OR ("Posting Date" <> LastDate) OR GenJnlTemplate."Force Doc. Balance" AND
           (("Document Type" <> LastDocType) OR ("Document No." <> LastDocNo))
        THEN BEGIN
          CheckBalance(GenJnlLine);
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforePostAllocations>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<PostAllocations>
    Code lines:
    IsHandled := FALSE;
    OnBeforePostAllocations(AllocateGenJnlLine,Reversing,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH AllocateGenJnlLine DO
      IF "Account No." <> '' THEN BEGIN
        GenJnlAlloc.RESET;
        GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
        GenJnlAlloc.SETRANGE("Journal Batch Name","Journal Batch Name");
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforePostGenJnlLine>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<PostGenJournalLine>
    Code lines:
    ...
      MakeRecurringTexts(GenJournalLine);
      CheckDocumentNo(GenJournalLine);
      GenJnlLine5.COPY(GenJournalLine);
      PrepareGenJnlLineAddCurr(GenJnlLine5);
      UpdateIncomingDocument(GenJnlLine5);
      OnBeforePostGenJnlLine(GenJnlLine5,SuppressCommit,IsPosted,GenJnlPostLine); <=====================
      IF NOT IsPosted THEN
        GenJnlPostLine.RunWithoutCheck(GenJnlLine5);
      OnAfterPostGenJnlLine(GenJnlLine5,SuppressCommit,GenJnlPostLine);
      IF (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND (CurrentICPartner <> '') AND
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeProcessBalanceOfLines>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<ProcessBalanceOfLines>
    Code lines:
    IsProcessingKeySet := FALSE;
    OnBeforeProcessBalanceOfLines(GenJnlLine,GenJnlBatch,GenJnlTemplate,IsProcessingKeySet); <=====================
    IF NOT IsProcessingKeySet THEN
      IF (GenJnlBatch."No. Series" = '') AND (GenJnlBatch."Posting No. Series" = '') AND GenJnlTemplate."Force Doc. Balance" THEN
        GenJnlLine.SETCURRENTKEY("Document No.");
    
    LineCount := 0;
    LastDate := 0D;
    LastDocType := 0;
    LastDocNo := '';
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeProcessLines>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<ProcessLines>
    Code lines:
    OnBeforeProcessLines(GenJnlLine,PreviewMode,SuppressCommit); <=====================
    
    WITH GenJnlLine DO BEGIN
      IF NOT FIND('=><') THEN BEGIN
        "Line No." := 0;
        IF PreviewMode THEN
          GenJnlPostPreview.ThrowError;
        IF NOT SuppressCommit THEN
          COMMIT;
        EXIT;
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeRaiseExceedLengthError>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<Code>
    Code lines:
    ...
      GenJnlAlloc.LOCKTABLE;
    
      GenJnlTemplate.GET("Journal Template Name");
      GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
    
      OnBeforeRaiseExceedLengthError(GenJnlBatch,RaiseError); <=====================
    
      IF GenJnlTemplate.Recurring THEN BEGIN
        TempMarkedGenJnlLine.COPY(GenJnlLine);
        CheckGenJnlLineDates(TempMarkedGenJnlLine,GenJnlLine);
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeThrowPreviewError>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<ProcessLines>
    Code lines:
    ...
      "Line No." := GLRegNo;
    
      OnProcessLinesOnAfterAssignGLNegNo(GenJnlLine,GLReg,GLRegNo);
    
      IF PreviewMode THEN BEGIN
        OnBeforeThrowPreviewError(GenJnlLine,GLRegNo); <=====================
        GenJnlPostPreview.ThrowError;
      END;
    
      // Update/delete lines
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeUpdateAndDeleteLines>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<UpdateAndDeleteLines>
    Code lines:
    OnBeforeUpdateAndDeleteLines(GenJnlLine,SuppressCommit); <=====================
    
    ClearDataExchEntries(GenJnlLine);
    IF GenJnlTemplate.Recurring THEN BEGIN
      // Recurring journal
      LineCount := 0;
      GenJnlLine2.COPY(GenJnlLine);
      GenJnlLine2.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Line No.");
      GenJnlLine2.FINDSET(TRUE,FALSE);
      REPEAT
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnBeforeUpdateIncomingDocument>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<UpdateIncomingDocument>
    Code lines:
    OnBeforeUpdateIncomingDocument(GenJnlLine); <=====================
    IncomingDocument.UpdateIncomingDocumentFromPosting(
      GenJnlLine."Incoming Document Entry No.",GenJnlLine."Posting Date",GenJnlLine."Document No.");
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnPostAllocationsOnBeforeCopyFromGenJnlAlloc>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<PostAllocations>
    Code lines:
    ...
          GenJnlLine2."Recurring Method" := "Recurring Method";
          IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor] THEN BEGIN
            GenJnlLine2."Bill-to/Pay-to No." := "Bill-to/Pay-to No.";
            GenJnlLine2."Ship-to/Order Address Code" := "Ship-to/Order Address Code";
          END;
          OnPostAllocationsOnBeforeCopyFromGenJnlAlloc(GenJnlLine2,AllocateGenJnlLine,Reversing); <=====================
          REPEAT
            GenJnlLine2.CopyFromGenJnlAllocation(GenJnlAlloc);
            GenJnlLine2."Shortcut Dimension 1 Code" := GenJnlAlloc."Shortcut Dimension 1 Code";
            GenJnlLine2."Shortcut Dimension 2 Code" := GenJnlAlloc."Shortcut Dimension 2 Code";
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnPostAllocationsOnBeforePostNotReversingLine>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<PostAllocations>
    Code lines:
    ...
            GenJnlLine2."Shortcut Dimension 2 Code" := GenJnlAlloc."Shortcut Dimension 2 Code";
            GenJnlLine2."Dimension Set ID" := GenJnlAlloc."Dimension Set ID";
            GenJnlLine2."Allow Zero-Amount Posting" := TRUE;
            PrepareGenJnlLineAddCurr(GenJnlLine2);
            IF NOT Reversing THEN BEGIN
              OnPostAllocationsOnBeforePostNotReversingLine(GenJnlLine2,GenJnlPostLine); <=====================
              GenJnlPostLine.RunWithCheck(GenJnlLine2);
              IF "Recurring Method" IN
                 ["Recurring Method"::"V  Variable","Recurring Method"::"B  Balance"]
              THEN BEGIN
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnPostAllocationsOnBeforePostReversingLine>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<PostAllocations>
    Code lines:
    ...
                GenJnlAlloc.MODIFY;
              END;
            END ELSE BEGIN
              MultiplyAmounts(GenJnlLine2,-1);
              GenJnlLine2."Reversing Entry" := TRUE;
              OnPostAllocationsOnBeforePostReversingLine(GenJnlLine2,GenJnlPostLine); <=====================
              GenJnlPostLine.RunWithCheck(GenJnlLine2);
              IF "Recurring Method" IN
                 ["Recurring Method"::"RV Reversing Variable",
                  "Recurring Method"::"RB Reversing Balance"]
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnPostReversingLinesOnBeforeGenJnlPostLine>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<PostReversingLines>
    Code lines:
    ...
          LineCount := LineCount + 1;
          UpdateDialog(RefPostingState::"Posting revers. lines",LineCount,NoOfReversingRecords);
          CheckDocumentNo(GenJournalLine1);
          GenJournalLine2.COPY(GenJournalLine1);
          PrepareGenJnlLineAddCurr(GenJournalLine2);
          OnPostReversingLinesOnBeforeGenJnlPostLine(GenJournalLine2,GenJnlPostLine); <=====================
          GenJnlPostLine.RunWithCheck(GenJournalLine2);
          PostAllocations(GenJournalLine1,TRUE);
        END;
      UNTIL TempGenJnlLine.NEXT = 0;
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnProcessLinesOnAfterAssignGLNegNo>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<ProcessLines>
    Code lines:
    ...
        GLRegNo := 0;
    
      INIT;
      "Line No." := GLRegNo;
    
      OnProcessLinesOnAfterAssignGLNegNo(GenJnlLine,GLReg,GLRegNo); <=====================
    
      IF PreviewMode THEN BEGIN
        OnBeforeThrowPreviewError(GenJnlLine,GLRegNo);
        GenJnlPostPreview.ThrowError;
    ...
Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<OnProcessLinesOnAfterPostGenJnlLines>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<ProcessLines>
    Code lines:
    ...
        ICOutboxExport.ProcessAutoSendOutboxTransactionNo(ICTransactionNo);
    
      // Post reversing lines
      PostReversingLines(TempGenJnlLine4);
    
      OnProcessLinesOnAfterPostGenJnlLines(GenJnlLine,GLReg,GLRegNo); <=====================
    
      // Copy register no. and current journal batch name to general journal
      IF NOT GLReg.FINDLAST OR (GLReg."No." <> GLRegNo) THEN
        GLRegNo := 0;
    ...
Codeunit<Customer Mgt.>.PROCEDURE<OnAfterCalculateShipToBillToOptions>
  Raised in: Codeunit<Customer Mgt.>.PROCEDURE<CalculateShipToBillToOptions>
    Code lines:
    ...
        "Bill-to Customer No." <> "Sell-to Customer No.":
          BillToOptions := BillToOptions::"Another Customer";
      END;
    END;
    
    OnAfterCalculateShipToBillToOptions(ShipToOptions,BillToOptions,SalesHeader); <=====================
Codeunit<Customer Mgt.>.PROCEDURE<SkipSettingFilter>
  Raised in: Codeunit<Customer Mgt.>.PROCEDURE<GetCurrentYearFilter>
    Code lines:
    SkipSettingFilter(SkipSetFilter); <=====================
    IF SkipSetFilter THEN
      EXIT(CustDateFilter);
    
    IF FiscalYearTotals THEN
      DateFilterCalc.CreateAccountingPeriodFilter(CustDateFilter,CustDateName,WORKDATE,0)
    ELSE
      DateFilterCalc.CreateFiscalYearFilter(CustDateFilter,CustDateName,WORKDATE,0);
    
    EXIT(CustDateFilter);
Codeunit<Correct Posted Sales Invoice>.PROCEDURE<OnAfterCreateCorrectiveSalesCrMemo>
  Raised in: Codeunit<Correct Posted Sales Invoice>.<OnRun>
    Code lines:
    UnapplyCostApplication("No.");
    CreateCopyDocument(Rec,SalesHeader,SalesHeader."Document Type"::"Credit Memo",FALSE);
    OnAfterCreateCorrectiveSalesCrMemo(Rec,SalesHeader,CancellingOnly); <=====================
    
    IF SalesInvoiceLinesContainJob("No.") THEN
      CreateAndProcessJobPlanningLines(SalesHeader);
    
    CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);
    SetTrackInfoForCancellation(Rec);
    
Codeunit<Correct Posted Sales Invoice>.PROCEDURE<OnAfterCreateCorrSalesInvoice>
  Raised in: Codeunit<Correct Posted Sales Invoice>.PROCEDURE<CancelPostedInvoiceStartNewInvoice>
    Code lines:
    CancellingOnly := FALSE;
    
    IF CreateCreditMemo(SalesInvoiceHeader) THEN BEGIN
      CreateCopyDocument(SalesInvoiceHeader,SalesHeader,SalesHeader."Document Type"::Invoice,TRUE);
      OnAfterCreateCorrSalesInvoice(SalesHeader); <=====================
      COMMIT;
    END;
Codeunit<Correct Posted Sales Invoice>.PROCEDURE<OnAfterTestCorrectInvoiceIsAllowed>
  Raised in: Codeunit<Correct Posted Sales Invoice>.PROCEDURE<TestCorrectInvoiceIsAllowed>
    Code lines:
    ...
    TestIfAnyFreeNumberSeries(SalesInvoiceHeader);
    TestExternalDocument(SalesInvoiceHeader);
    TestInventoryPostingClosed(SalesInvoiceHeader);
    TestNotSalesPrepaymentlInvoice(SalesInvoiceHeader);
    
    OnAfterTestCorrectInvoiceIsAllowed(SalesInvoiceHeader,Cancelling); <=====================
Codeunit<Correct Posted Sales Invoice>.PROCEDURE<OnAfterTestSalesLineType>
  Raised in: Codeunit<Correct Posted Sales Invoice>.PROCEDURE<TestSalesLineType>
    Code lines:
    ...
    
    IF (SalesInvoiceLine."Job No." <> '') AND (SalesInvoiceLine.Type = SalesInvoiceLine.Type::Resource) THEN
      EXIT;
    
    IsHandled := FALSE;
    OnAfterTestSalesLineType(SalesInvoiceLine,IsHandled); <=====================
    IF NOT IsHandled THEN
      ErrorHelperLine(ErrorType::WrongItemType,SalesInvoiceLine);
Codeunit<Correct Posted Sales Invoice>.PROCEDURE<OnBeforeSalesHeaderInsert>
  Raised in: Codeunit<Correct Posted Sales Invoice>.PROCEDURE<CreateCopyDocument>
    Code lines:
    CLEAR(SalesHeader);
    SalesHeader."No." := '';
    SalesHeader."Document Type" := DocumentType;
    SalesHeader.SetAllowSelectNoSeries;
    OnBeforeSelesHeaderInsert(SalesHeader,SalesInvoiceHeader,CancellingOnly);
    OnBeforeSalesHeaderInsert(SalesHeader,SalesInvoiceHeader,CancellingOnly); <=====================
    SalesHeader.INSERT(TRUE);
    
    CASE DocumentType OF
      SalesHeader."Document Type"::"Credit Memo":
    ...
Codeunit<Correct Posted Sales Invoice>.PROCEDURE<OnBeforeSelesHeaderInsert>
  Raised in: Codeunit<Correct Posted Sales Invoice>.PROCEDURE<CreateCopyDocument>
    Code lines:
    CLEAR(SalesHeader);
    SalesHeader."No." := '';
    SalesHeader."Document Type" := DocumentType;
    SalesHeader.SetAllowSelectNoSeries;
    OnBeforeSelesHeaderInsert(SalesHeader,SalesInvoiceHeader,CancellingOnly); <=====================
    OnBeforeSalesHeaderInsert(SalesHeader,SalesInvoiceHeader,CancellingOnly);
    SalesHeader.INSERT(TRUE);
    
    CASE DocumentType OF
      SalesHeader."Document Type"::"Credit Memo":
    ...
Codeunit<CAL Test Runner Publisher>.PROCEDURE<OnSetSeed>
  Raised in: Codeunit<CAL Test Runner Publisher>.PROCEDURE<SetSeed>
    Code lines:
    OnSetSeed(NewSeed); <=====================
Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnAfterInsertAllSalesInvLines>
  Raised in: Codeunit<Sales-Quote to Invoice>.<OnRun>
    Code lines:
    ...
    
    SalesInvoiceLine.LOCKTABLE;
    
    CreateSalesInvoiceHeader(SalesInvoiceHeader,Rec);
    CreateSalesInvoiceLines(SalesInvoiceHeader,Rec);
    OnAfterInsertAllSalesInvLines(SalesInvoiceLine,Rec); <=====================
    
    SalesSetup.GET;
    IF SalesSetup."Default Posting Date" = SalesSetup."Default Posting Date"::"No Date" THEN BEGIN
      SalesInvoiceHeader."Posting Date" := 0D;
    ...
Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnAfterInsertSalesInvoiceLine>
  Raised in: Codeunit<Sales-Quote to Invoice>.PROCEDURE<CreateSalesInvoiceLines>
    Code lines:
    ...
          IF SalesInvoiceLine."No." <> '' THEN
            SalesInvoiceLine.DefaultDeferralCode;
          SalesInvoiceLine.InitQtyToShip;
          OnBeforeInsertSalesInvoiceLine(SalesQuoteLine,SalesQuoteHeader,SalesInvoiceLine,SalesInvoiceHeader);
          SalesInvoiceLine.INSERT;
          OnAfterInsertSalesInvoiceLine(SalesQuoteLine,SalesQuoteHeader,SalesInvoiceLine,SalesInvoiceHeader); <=====================
        UNTIL SalesQuoteLine.NEXT = 0;
    
      MoveLineCommentsToSalesInvoice(SalesInvoiceHeader,SalesQuoteHeader);
    
    ...
Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnAfterOnRun>
  Raised in: Codeunit<Sales-Quote to Invoice>.<OnRun>
    Code lines:
    ...
    DELETE;
    
    COMMIT;
    CLEAR(CustCheckCrLimit);
    
    OnAfterOnRun(Rec,SalesInvoiceHeader); <=====================
Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnAfterSetSalesQuoteLineFilter>
  Raised in: Codeunit<Sales-Quote to Invoice>.PROCEDURE<CreateSalesInvoiceLines>
    Code lines:
    WITH SalesQuoteHeader DO BEGIN
      SalesQuoteLine.RESET;
      SalesQuoteLine.SETRANGE("Document Type","Document Type");
      SalesQuoteLine.SETRANGE("Document No.","No.");
      OnAfterSetSalesQuoteLineFilter(SalesQuoteLine); <=====================
      IF SalesQuoteLine.FINDSET THEN
        REPEAT
          SalesInvoiceLine := SalesQuoteLine;
          SalesInvoiceLine."Document Type" := SalesInvoiceHeader."Document Type";
          SalesInvoiceLine."Document No." := SalesInvoiceHeader."No.";
    ...
Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnBeforeDeleteSalesQuoteLines>
  Raised in: Codeunit<Sales-Quote to Invoice>.PROCEDURE<CreateSalesInvoiceLines>
    Code lines:
    ...
          OnAfterInsertSalesInvoiceLine(SalesQuoteLine,SalesQuoteHeader,SalesInvoiceLine,SalesInvoiceHeader);
        UNTIL SalesQuoteLine.NEXT = 0;
    
      MoveLineCommentsToSalesInvoice(SalesInvoiceHeader,SalesQuoteHeader);
    
      OnBeforeDeleteSalesQuoteLines(SalesQuoteLine); <=====================
      SalesQuoteLine.DELETEALL;
    END;
Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnBeforeDeletionOfQuote>
  Raised in: Codeunit<Sales-Quote to Invoice>.<OnRun>
    Code lines:
    ...
      SalesInvoiceHeader.MODIFY;
    END;
    UpdateEmailParameters(SalesInvoiceHeader);
    UpdateCouponClaims(SalesInvoiceHeader);
    
    OnBeforeDeletionOfQuote(Rec,SalesInvoiceHeader); <=====================
    
    DELETELINKS;
    DELETE;
    
    ...
Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnBeforeInsertSalesInvoiceHeader>
  Raised in: Codeunit<Sales-Quote to Invoice>.PROCEDURE<CreateSalesInvoiceHeader>
    Code lines:
    ...
      IF "Posting Date" <> 0D THEN
        SalesInvoiceHeader."Posting Date" := "Posting Date"
      ELSE
        SalesInvoiceHeader."Posting Date" := WORKDATE;
      SalesInvoiceHeader.InitFromSalesHeader(SalesQuoteHeader);
      OnBeforeInsertSalesInvoiceHeader(SalesInvoiceHeader,SalesQuoteHeader); <=====================
      SalesInvoiceHeader.MODIFY;
    END;
Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnBeforeInsertSalesInvoiceLine>
  Raised in: Codeunit<Sales-Quote to Invoice>.PROCEDURE<CreateSalesInvoiceLines>
    Code lines:
    ...
          SalesInvoiceLine."Document Type" := SalesInvoiceHeader."Document Type";
          SalesInvoiceLine."Document No." := SalesInvoiceHeader."No.";
          IF SalesInvoiceLine."No." <> '' THEN
            SalesInvoiceLine.DefaultDeferralCode;
          SalesInvoiceLine.InitQtyToShip;
          OnBeforeInsertSalesInvoiceLine(SalesQuoteLine,SalesQuoteHeader,SalesInvoiceLine,SalesInvoiceHeader); <=====================
          SalesInvoiceLine.INSERT;
          OnAfterInsertSalesInvoiceLine(SalesQuoteLine,SalesQuoteHeader,SalesInvoiceLine,SalesInvoiceHeader);
        UNTIL SalesQuoteLine.NEXT = 0;
    
    ...
Codeunit<Sales-Quote to Invoice>.PROCEDURE<OnBeforeOnRun>
  Raised in: Codeunit<Sales-Quote to Invoice>.<OnRun>
    Code lines:
    OnBeforeOnRun(Rec); <=====================
    
    TESTFIELD("Document Type","Document Type"::Quote);
    
    IF "Sell-to Customer No." = '' THEN
      ERROR(SpecifyCustomerErr);
    
    IF "Bill-to Customer No." = '' THEN
      ERROR(SpecifyBillToCustomerNoErr,FIELDCAPTION("Bill-to Customer No."));
    
    ...
Codeunit<Activities Mgt.>.PROCEDURE<OnGetRefreshInterval>
  Raised in: Codeunit<Activities Mgt.>.PROCEDURE<GetActivitiesCueRefreshInterval>
    Code lines:
    MinInterval := 10 * 60 * 1000; // 10 minutes
    Interval := 60 * 60 * 1000; // 1 hr
    OnGetRefreshInterval(Interval); <=====================
    IF Interval < MinInterval THEN
      ERROR(RefreshFrequencyErr);
Codeunit<Vendor Mgt.>.PROCEDURE<OnAfterSetFilterForExternalDocNo>
  Raised in: Codeunit<Vendor Mgt.>.PROCEDURE<SetFilterForExternalDocNo>
    Code lines:
    VendorLedgerEntry.SETRANGE("Document Type",DocumentType);
    VendorLedgerEntry.SETRANGE("External Document No.",ExternalDocNo);
    VendorLedgerEntry.SETRANGE("Vendor No.",VendorNo);
    VendorLedgerEntry.SETRANGE(Reversed,FALSE);
    OnAfterSetFilterForExternalDocNo(VendorLedgerEntry,DocumentDate); <=====================
Codeunit<Correct Posted Purch. Invoice>.PROCEDURE<OnAfterCreateCorrectivePurchCrMemo>
  Raised in: Codeunit<Correct Posted Purch. Invoice>.<OnRun>
    Code lines:
    RedoApplications := UnapplyCostApplication(ItemJnlPostLine,"No.");
    CreateCopyDocument(Rec,PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",FALSE);
    PurchaseHeader."Vendor Cr. Memo No." := PurchaseHeader."No.";
    OnAfterCreateCorrectivePurchCrMemo(Rec,PurchaseHeader,CancellingOnly); <=====================
    
    CODEUNIT.RUN(CODEUNIT::"Purch.-Post",PurchaseHeader);
    SetTrackInfoForCancellation(Rec);
    IF RedoApplications THEN
      ItemJnlPostLine.RedoApplications;
    COMMIT;
Codeunit<Correct Posted Purch. Invoice>.PROCEDURE<OnAfterTestCorrectInvoiceIsAllowed>
  Raised in: Codeunit<Correct Posted Purch. Invoice>.PROCEDURE<TestCorrectInvoiceIsAllowed>
    Code lines:
    ...
    TestPurchaseLines(PurchInvHeader);
    TestIfAnyFreeNumberSeries(PurchInvHeader);
    TestExternalDocument(PurchInvHeader);
    TestInventoryPostingClosed(PurchInvHeader);
    
    OnAfterTestCorrectInvoiceIsAllowed(PurchInvHeader,Cancelling); <=====================
Codeunit<Correct Posted Purch. Invoice>.PROCEDURE<OnBeforePurchaseHeaderInsert>
  Raised in: Codeunit<Correct Posted Purch. Invoice>.PROCEDURE<CreateCopyDocument>
    Code lines:
    CLEAR(PurchaseHeader);
    PurchaseHeader."Document Type" := DocumentType;
    PurchaseHeader."No." := '';
    PurchaseHeader.SetAllowSelectNoSeries;
    OnBeforePurchaseHeaderInsert(PurchaseHeader,PurchInvHeader); <=====================
    PurchaseHeader.INSERT(TRUE);
    
    CASE DocumentType OF
      PurchaseHeader."Document Type"::"Credit Memo":
        CopyDocMgt.SetPropertiesForCreditMemoCorrection;
    ...
Codeunit<Purch. Doc. From Sales Doc.>.PROCEDURE<OnBeforeCreatePurchaseInvoice>
  Raised in: Codeunit<Purch. Doc. From Sales Doc.>.PROCEDURE<CreatePurchaseInvoice>
    Code lines:
    ...
      2:
        SalesLine.COPY(SelectedSalesLine);
    END;
    
    IF SelectVendor(Vendor,SalesLine) THEN BEGIN
      OnBeforeCreatePurchaseInvoice(SalesHeader,SalesLine); <=====================
      CreatePurchaseHeader(PurchaseHeader,SalesHeader,Vendor);
      CopySalesLinesToPurchaseLines(PurchaseHeader,SalesLine);
      PAGE.RUN(PAGE::"Purchase Invoice",PurchaseHeader);
    END;
Codeunit<Purch. Doc. From Sales Doc.>.PROCEDURE<OnCopySalesLinesToPurchaseLinesOnBeforeInsert>
  Raised in: Codeunit<Purch. Doc. From Sales Doc.>.PROCEDURE<CopySalesLinesToPurchaseLines>
    Code lines:
    ...
          PurchaseLine.VALIDATE("Pay-to Vendor No.",PurchaseHeader."Pay-to Vendor No.");
          PurchaseLine.VALIDATE(Quantity,SalesLine.Quantity);
          PurchaseLine.VALIDATE("Unit of Measure Code",SalesLine."Unit of Measure Code");
        END;
    
        OnCopySalesLinesToPurchaseLinesOnBeforeInsert(PurchaseLine,SalesLine); <=====================
        PurchaseLine.INSERT(TRUE);
      UNTIL SalesLine.NEXT = 0;
Codeunit<Purch. Doc. From Sales Doc.>.PROCEDURE<OnCopySalesLinesToPurchaseLinesOnLineTypeValidate>
  Raised in: Codeunit<Purch. Doc. From Sales Doc.>.PROCEDURE<CopySalesLinesToPurchaseLines>
    Code lines:
    ...
            PurchaseLine.Type := PurchaseLine.Type::" ";
          SalesLine.Type::Item:
            PurchaseLine.Type := PurchaseLine.Type::Item;
          ELSE BEGIN
            IsHandled := FALSE;
            OnCopySalesLinesToPurchaseLinesOnLineTypeValidate(PurchaseLine,SalesLine,IsHandled); <=====================
            IF NOT IsHandled THEN
              ERROR(TypeNotSupportedErr,FORMAT(SalesLine.Type));
          END
        END;
    ...
Codeunit<Purch. Doc. From Sales Doc.>.PROCEDURE<OnCreatePurchaseHeaderOnBeforeInsert>
  Raised in: Codeunit<Purch. Doc. From Sales Doc.>.PROCEDURE<CreatePurchaseHeader>
    Code lines:
    ...
    ELSE
      ERROR(TypeNotSupportedErr,FORMAT(SalesHeader."Document Type"));
    
    PurchaseHeader.InitRecord;
    PurchaseHeader.VALIDATE("Buy-from Vendor No.",Vendor."No.");
    OnCreatePurchaseHeaderOnBeforeInsert(PurchaseHeader,SalesHeader,Vendor); <=====================
    PurchaseHeader.INSERT(TRUE);
Codeunit<Release Incoming Document>.PROCEDURE<OnAfterCreateDocFromIncomingDocFail>
  Raised in: Codeunit<Release Incoming Document>.PROCEDURE<Fail>
    Code lines:
    ...
      Status := Status::Failed;
    
      MODIFY(TRUE);
      COMMIT;
    
      OnAfterCreateDocFromIncomingDocFail(IncomingDocument); <=====================
    END;
Codeunit<Release Incoming Document>.PROCEDURE<OnAfterCreateDocFromIncomingDocSuccess>
  Raised in: Codeunit<Release Incoming Document>.PROCEDURE<Create>
    Code lines:
    ...
    
      Status := Status::Created;
    
      MODIFY(TRUE);
      COMMIT;
      OnAfterCreateDocFromIncomingDocSuccess(IncomingDocument); <=====================
    END;
Codeunit<Release Incoming Document>.PROCEDURE<OnAfterReleaseIncomingDoc>
  Raised in: Codeunit<Release Incoming Document>.<OnRun>
    Code lines:
    ...
    "Released Date-Time" := CURRENTDATETIME;
    "Released By User ID" := USERSECURITYID;
    
    MODIFY(TRUE);
    
    OnAfterReleaseIncomingDoc(Rec); <=====================
Codeunit<Send Incoming Document to OCR>.PROCEDURE<OnAfterIncomingDocReadyForOCR>
  Raised in: Codeunit<Send Incoming Document to OCR>.PROCEDURE<SendToJobQueue>
    Code lines:
    ...
    IncomingDocument."OCR Status" := IncomingDocument."OCR Status"::Ready;
    IncomingDocument.MODIFY;
    
    CODEUNIT.RUN(CODEUNIT::"Release Incoming Document",IncomingDocument);
    ShowMessage(DocumentHasBeenScheduledTxt);
    OnAfterIncomingDocReadyForOCR(IncomingDocument); <=====================
Codeunit<Send Incoming Document to OCR>.PROCEDURE<OnAfterIncomingDocReceivedFromOCR>
  Raised in: Codeunit<Send Incoming Document to OCR>.PROCEDURE<SetStatusToReceived>
    Code lines:
    ...
      "OCR Status" := "OCR Status"::Success;
      "OCR Process Finished" := TRUE;
      MODIFY;
      COMMIT;
    
      OnAfterIncomingDocReceivedFromOCR(IncomingDocument); <=====================
    END;
  Raised in: Codeunit<Send Incoming Document to OCR>.PROCEDURE<SetStatusToFailed>
    Code lines:
    ...
      "OCR Status" := "OCR Status"::Error;
      "OCR Process Finished" := TRUE;
      MODIFY;
      COMMIT;
    
      OnAfterIncomingDocReceivedFromOCR(IncomingDocument); <=====================
    END;
Codeunit<Send Incoming Document to OCR>.PROCEDURE<OnAfterIncomingDocSentToOCR>
  Raised in: Codeunit<Send Incoming Document to OCR>.PROCEDURE<SendDocToOCR>
    Code lines:
    ...
      IncomingDocumentAttachment.SendToOCR;
      IncomingDocument."OCR Status" := IncomingDocument."OCR Status"::Sent;
      IncomingDocument.MODIFY;
    END;
    COMMIT;
    OnAfterIncomingDocSentToOCR(IncomingDocument); <=====================
Codeunit<Trial Balance Cache Mgt.>.PROCEDURE<OnGetCacheRefreshInterval>
  Raised in: Codeunit<Trial Balance Cache Mgt.>.PROCEDURE<GetCacheRefreshInterval>
    Code lines:
    MinInterval := 10 * 60 * 1000; // 10 minutes
    Interval := 60 * 60 * 1000; // 1 hr
    OnGetCacheRefreshInterval(Interval); <=====================
    IF Interval < MinInterval THEN
      ERROR(RefreshFrequencyErr);
Codeunit<Telemetry Management>.PROCEDURE<OnBeforeTelemetryScheduleTask>
  Raised in: Codeunit<Telemetry Management>.PROCEDURE<CanScheduleTask>
    Code lines:
    OnBeforeTelemetryScheduleTask(DoNotScheduleTask); <=====================
    EXIT(NOT DoNotScheduleTask AND TASKSCHEDULER.CANCREATETASK);
Codeunit<Generate Master Data Telemetry>.PROCEDURE<OnMasterDataTelemetry>
  Raised in: Codeunit<Generate Master Data Telemetry>.<OnRun>
    Code lines:
    OnMasterDataTelemetry; <=====================
Codeunit<Generate Activity Telemetry>.PROCEDURE<OnActivityTelemetry>
  Raised in: Codeunit<Generate Activity Telemetry>.<OnRun>
    Code lines:
    OnActivityTelemetry; <=====================
Codeunit<Sales Batch Post Mgt.>.PROCEDURE<OnAfterPrepareSalesHeader>
  Raised in: Codeunit<Sales Batch Post Mgt.>.PROCEDURE<PrepareSalesHeader>
    Code lines:
    ...
    BatchProcessingMgt.GetParameterBoolean(SalesHeader.RECORDID,BatchPostParameterTypes.Invoice,SalesHeader.Invoice);
    BatchProcessingMgt.GetParameterBoolean(SalesHeader.RECORDID,BatchPostParameterTypes.Receive,SalesHeader.Receive);
    
    SalesHeader."Print Posted Documents" := FALSE;
    
    OnAfterPrepareSalesHeader(SalesHeader); <=====================
Codeunit<Purchase Batch Post Mgt.>.PROCEDURE<OnAfterPreparePurchaseHeader>
  Raised in: Codeunit<Purchase Batch Post Mgt.>.PROCEDURE<PreparePurchaseHeader>
    Code lines:
    ...
    BatchProcessingMgt.GetParameterBoolean(PurchaseHeader.RECORDID,BatchPostParameterTypes.Invoice,PurchaseHeader.Invoice);
    BatchProcessingMgt.GetParameterBoolean(PurchaseHeader.RECORDID,BatchPostParameterTypes.Ship,PurchaseHeader.Ship);
    
    PurchaseHeader."Print Posted Documents" := FALSE;
    
    OnAfterPreparePurchaseHeader(PurchaseHeader); <=====================
Codeunit<Batch Posting Print Mgt.>.PROCEDURE<OnAfterPrintPurchaseDocument>
  Raised in: Codeunit<Batch Posting Print Mgt.>.PROCEDURE<PrintPurchaseDocument>
    Code lines:
    ...
            PurchCrMemoHdr.SETRECFILTER;
            PrintDocument(ReportSelections.Usage::"P.Cr.Memo",PurchCrMemoHdr);
          END;
      END;
    
    OnAfterPrintPurchaseDocument(RecRef); <=====================
Codeunit<Batch Posting Print Mgt.>.PROCEDURE<OnAfterPrintSalesDocument>
  Raised in: Codeunit<Batch Posting Print Mgt.>.PROCEDURE<PrintSalesDocument>
    Code lines:
    ...
            SalesCrMemoHeader.SETRECFILTER;
            PrintDocument(ReportSelections.Usage::"S.Cr.Memo",SalesCrMemoHeader);
          END;
      END;
    
    OnAfterPrintSalesDocument(RecRef); <=====================
Codeunit<Batch Posting Print Mgt.>.PROCEDURE<OnBeforePrintDocument>
  Raised in: Codeunit<Batch Posting Print Mgt.>.PROCEDURE<PrintDocument>
    Code lines:
    IsHandled := FALSE;
    OnBeforePrintDocument(ReportUsage,RecVar,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    ReportSelections.RESET;
    ReportSelections.SETRANGE(Usage,ReportUsage);
    ReportSelections.FINDSET;
    REPEAT
      ReportSelections.TESTFIELD("Report ID");
    ...
Codeunit<Batch Processing Mgt.>.PROCEDURE<OnAfterBatchProcess>
  Raised in: Codeunit<Batch Processing Mgt.>.PROCEDURE<BatchProcess>
    Code lines:
    ...
          ELSE
            MESSAGE(BatchCompletedMsg);
        END;
    END;
    
    OnAfterBatchProcess(RecRef,CounterPosted); <=====================
Codeunit<Batch Processing Mgt.>.PROCEDURE<OnAfterBatchProcessing>
  Raised in: Codeunit<Batch Processing Mgt.>.PROCEDURE<ProcessRecord>
    Code lines:
    OnBeforeBatchProcessing(RecRef,BatchConfirm);
    
    ProcessingResult := InvokeProcessing(RecRef);
    
    OnAfterBatchProcessing(RecRef,ProcessingResult); <=====================
    
    EXIT(ProcessingResult);
Codeunit<Batch Processing Mgt.>.PROCEDURE<OnBatchProcessOnBeforeShowMessage>
  Raised in: Codeunit<Batch Processing Mgt.>.PROCEDURE<BatchProcess>
    Code lines:
    ...
      UNTIL NEXT = 0;
    
      ResetBatchID;
    
      IsHandled := FALSE;
      OnBatchProcessOnBeforeShowMessage(CounterPosted,CounterTotal,IsHandled); <=====================
      IF NOT IsHandled THEN
        IF GUIALLOWED THEN BEGIN
          Window.CLOSE;
          IF CounterPosted <> CounterTotal THEN
    ...
Codeunit<Batch Processing Mgt.>.PROCEDURE<OnBeforeBatchProcess>
  Raised in: Codeunit<Batch Processing Mgt.>.PROCEDURE<BatchProcess>
    Code lines:
    IF ProcessingCodeunitID = 0 THEN
      ERROR(ProcessingCodeunitNotSetErr);
    
    OnBeforeBatchProcess(RecRef); <=====================
    
    WITH RecRef DO BEGIN
      IF ISEMPTY THEN
        EXIT;
    
      TempErrorMessage.DELETEALL;
    ...
Codeunit<Batch Processing Mgt.>.PROCEDURE<OnBeforeBatchProcessing>
  Raised in: Codeunit<Batch Processing Mgt.>.PROCEDURE<ProcessRecord>
    Code lines:
    OnBeforeBatchProcessing(RecRef,BatchConfirm); <=====================
    
    ProcessingResult := InvokeProcessing(RecRef);
    
    OnAfterBatchProcessing(RecRef,ProcessingResult);
    
    EXIT(ProcessingResult);
Codeunit<Batch Processing Mgt.>.PROCEDURE<OnCustomProcessing>
  Raised in: Codeunit<Batch Processing Mgt.>.PROCEDURE<RunCustomProcessing>
    Code lines:
    OnCustomProcessing(RecRefCustomerProcessing,Handled,KeepParametersLocal); <=====================
    IsCustomProcessingHandled := Handled;
    KeepParameters := KeepParametersLocal;
Codeunit<Batch Processing Mgt.>.PROCEDURE<OnVerifyRecord>
  Raised in: Codeunit<Batch Processing Mgt.>.PROCEDURE<CanProcessRecord>
    Code lines:
    Result := TRUE;
    OnVerifyRecord(RecRef,Result); <=====================
    
    EXIT(Result);
Codeunit<Gen. Jnl.-Show Entries>.PROCEDURE<OnAfterRun>
  Raised in: Codeunit<Gen. Jnl.-Show Entries>.<OnRun>
    Code lines:
    ...
        END;
      "Account Type"::"IC Partner":
        ERROR(Text001);
    END;
    
    OnAfterRun(Rec); <=====================
Codeunit<DocumentNoVisibility>.PROCEDURE<OnBeforeBankAccountNoIsVisible>
  Raised in: Codeunit<DocumentNoVisibility>.PROCEDURE<BankAccountNoIsVisible>
    Code lines:
    IsHandled := FALSE;
    IsVisible := FALSE;
    OnBeforeBankAccountNoIsVisible(IsVisible,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(IsVisible);
    
    NoSeriesCode := DetermineBankAccountSeriesNo;
    EXIT(ForceShowNoSeriesForDocNo(NoSeriesCode));
Codeunit<DocumentNoVisibility>.PROCEDURE<OnBeforeContactNoIsVisible>
  Raised in: Codeunit<DocumentNoVisibility>.PROCEDURE<ContactNoIsVisible>
    Code lines:
    IsHandled := FALSE;
    IsVisible := FALSE;
    OnBeforeContactNoIsVisible(IsVisible,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(IsVisible);
    
    NoSeriesCode := DetermineContactSeriesNo;
    EXIT(ForceShowNoSeriesForDocNo(NoSeriesCode));
Codeunit<DocumentNoVisibility>.PROCEDURE<OnBeforeCustomerNoIsVisible>
  Raised in: Codeunit<DocumentNoVisibility>.PROCEDURE<CustomerNoIsVisible>
    Code lines:
    IsHandled := FALSE;
    IsVisible := FALSE;
    OnBeforeCustomerNoIsVisible(IsVisible,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(IsVisible);
    
    NoSeriesCode := DetermineCustomerSeriesNo;
    EXIT(ForceShowNoSeriesForDocNo(NoSeriesCode));
Codeunit<DocumentNoVisibility>.PROCEDURE<OnBeforeEmployeeNoIsVisible>
  Raised in: Codeunit<DocumentNoVisibility>.PROCEDURE<EmployeeNoIsVisible>
    Code lines:
    IsHandled := FALSE;
    IsVisible := FALSE;
    OnBeforeEmployeeNoIsVisible(IsVisible,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(IsVisible);
    
    NoSeriesCode := DetermineEmployeeSeriesNo;
    EXIT(ForceShowNoSeriesForDocNo(NoSeriesCode));
Codeunit<DocumentNoVisibility>.PROCEDURE<OnBeforeFixedAssetNoIsVisible>
  Raised in: Codeunit<DocumentNoVisibility>.PROCEDURE<FixedAssetNoIsVisible>
    Code lines:
    IsHandled := FALSE;
    IsVisible := FALSE;
    OnBeforeFixedAssetNoIsVisible(IsVisible,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(IsVisible);
    
    NoSeriesCode := DetermineFixedAssetSeriesNo;
    EXIT(ForceShowNoSeriesForDocNo(NoSeriesCode));
Codeunit<DocumentNoVisibility>.PROCEDURE<OnBeforeItemNoIsVisible>
  Raised in: Codeunit<DocumentNoVisibility>.PROCEDURE<ItemNoIsVisible>
    Code lines:
    IsHandled := FALSE;
    IsVisible := FALSE;
    OnBeforeItemNoIsVisible(IsVisible,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(IsVisible);
    
    NoSeriesCode := DetermineItemSeriesNo;
    EXIT(ForceShowNoSeriesForDocNo(NoSeriesCode));
Codeunit<DocumentNoVisibility>.PROCEDURE<OnBeforeJobNoIsVisible>
  Raised in: Codeunit<DocumentNoVisibility>.PROCEDURE<JobNoIsVisible>
    Code lines:
    IsHandled := FALSE;
    IsVisible := FALSE;
    OnBeforeJobNoIsVisible(IsVisible,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(IsVisible);
    
    NoSeriesCode := DetermineJobSeriesNo;
    EXIT(ForceShowNoSeriesForDocNo(NoSeriesCode));
Codeunit<DocumentNoVisibility>.PROCEDURE<OnBeforePurchaseDocumentNoIsVisible>
  Raised in: Codeunit<DocumentNoVisibility>.PROCEDURE<PurchaseDocumentNoIsVisible>
    Code lines:
    IsHandled := FALSE;
    IsVisible := FALSE;
    OnBeforePurchaseDocumentNoIsVisible(DocType,DocNo,IsVisible,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(IsVisible);
    
    IF DocNo <> '' THEN
      EXIT(FALSE);
    
    DocNoSeries := DeterminePurchaseSeriesNo(DocType);
    ...
Codeunit<DocumentNoVisibility>.PROCEDURE<OnBeforeResourceNoIsVisible>
  Raised in: Codeunit<DocumentNoVisibility>.PROCEDURE<ResourceNoIsVisible>
    Code lines:
    IsHandled := FALSE;
    IsVisible := FALSE;
    OnBeforeResourceNoIsVisible(IsVisible,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(IsVisible);
    
    NoSeriesCode := DetermineResourceSeriesNo;
    EXIT(ForceShowNoSeriesForDocNo(NoSeriesCode));
Codeunit<DocumentNoVisibility>.PROCEDURE<OnBeforeSalesDocumentNoIsVisible>
  Raised in: Codeunit<DocumentNoVisibility>.PROCEDURE<SalesDocumentNoIsVisible>
    Code lines:
    IsHandled := FALSE;
    IsVisible := FALSE;
    OnBeforeSalesDocumentNoIsVisible(DocType,DocNo,IsVisible,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(IsVisible);
    
    IF DocNo <> '' THEN
      EXIT(FALSE);
    
    DocNoSeries := DetermineSalesSeriesNo(DocType);
    ...
Codeunit<DocumentNoVisibility>.PROCEDURE<OnBeforeTransferOrderNoIsVisible>
  Raised in: Codeunit<DocumentNoVisibility>.PROCEDURE<TransferOrderNoIsVisible>
    Code lines:
    IsHandled := FALSE;
    IsVisible := FALSE;
    OnBeforeTransferOrderNoIsVisible(IsVisible,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(IsVisible);
    
    NoSeriesCode := DetermineTransferOrderSeriesNo;
    EXIT(ForceShowNoSeriesForDocNo(NoSeriesCode));
Codeunit<DocumentNoVisibility>.PROCEDURE<OnBeforeVendorNoIsVisible>
  Raised in: Codeunit<DocumentNoVisibility>.PROCEDURE<VendorNoIsVisible>
    Code lines:
    IsHandled := FALSE;
    IsVisible := FALSE;
    OnBeforeVendorNoIsVisible(IsVisible,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(IsVisible);
    
    NoSeriesCode := DetermineVendorSeriesNo;
    EXIT(ForceShowNoSeriesForDocNo(NoSeriesCode));
Codeunit<Doc. Exch. Service Mgt.>.PROCEDURE<OnAfterIncomingDocReceivedFromDocExch>
  Raised in: Codeunit<Doc. Exch. Service Mgt.>.PROCEDURE<ProcessReceivedDocs>
    Code lines:
    ...
        LogActivitySucceeded(ContextRecordID,MarkBusinessProcessedTxt,STRSUBSTNO(DocIdImportedTxt,DocIdentifier));
      COMMIT;
    
      IncomingDocument.FIND;
      LogTelemetryDocumentReceived;
      OnAfterIncomingDocReceivedFromDocExch(IncomingDocument); <=====================
    END;
Codeunit<Read Data Exch. from Stream>.PROCEDURE<OnGetDataExchFileContentEvent>
  Raised in: Codeunit<Read Data Exch. from Stream>.<OnRun>
    Code lines:
    // Fire the get stream event
    OnGetDataExchFileContentEvent(Rec,TempBlob,EventHandled); <=====================
    
    IF EventHandled THEN BEGIN
      "File Name" := 'Data Stream';
      "File Content" := TempBlob.Blob;
    END;
Codeunit<Doc. Exch. Serv.- Doc. Status>.PROCEDURE<OnDocExchStatusDrillDown>
  Raised in: Codeunit<Doc. Exch. Serv.- Doc. Status>.PROCEDURE<DocExchStatusDrillDown>
    Code lines:
    IF NOT DataTypeManagement.GetRecordRef(DocRecVariant,DocRecRef) THEN
      EXIT;
    OnDocExchStatusDrillDown(DocRecRef,Handled); <=====================
    IF NOT Handled THEN
      DefaultDocExchStatusDrillDown(DocRecRef);
Codeunit<Role Center Notification Mgt.>.PROCEDURE<OnBeforeShowNotifications>
  Raised in: Codeunit<Role Center Notification Mgt.>.PROCEDURE<ShowNotifications>
    Code lines:
    OnBeforeShowNotifications; <=====================
    
    ResultEvaluation := ShowEvaluationNotification;
    ResultTrial := ShowTrialNotification;
    ResultTrialSuspended := ShowTrialSuspendedNotification;
    ResultTrialExtended := ShowTrialExtendedNotification;
    ResultTrialExtendedSuspended := ShowTrialExtendedSuspendedNotification;
    ResultPaidWarning := ShowPaidWarningNotification;
    ResultPaidSuspended := ShowPaidSuspendedNotification;
    ResultSandbox := ShowSandboxNotification;
    ...
Codeunit<Headline Management>.PROCEDURE<OnBeforeScheduleTask>
  Raised in: Codeunit<Headline Management>.PROCEDURE<ScheduleTask>
    Code lines:
    OnBeforeScheduleTask(CodeunitId); <=====================
    IF NOT TASKSCHEDULER.CANCREATETASK THEN
      EXIT;
    IF NOT JobQueueEntry.WRITEPERMISSION THEN
      EXIT;
    
    JobQueueEntry.SETRANGE("Object Type to Run",JobQueueEntry."Object Type to Run"::Codeunit);
    JobQueueEntry.SETRANGE("Object ID to Run",CodeunitId);
    JobQueueEntry.SETRANGE(Status,JobQueueEntry.Status::"In Process");
    IF NOT JobQueueEntry.ISEMPTY THEN
    ...
Codeunit<Headline Management>.PROCEDURE<OnInvalidateHeadlines>
  Raised in: Codeunit<Headline Management>.PROCEDURE<OnBeforeUpdateLanguage>
    Code lines:
    OnInvalidateHeadlines; <=====================
  Raised in: Codeunit<Headline Management>.PROCEDURE<OnBeforeUpdateWorkdate>
    Code lines:
    OnInvalidateHeadlines; <=====================
Codeunit<Headline RC Business Manager>.PROCEDURE<OnComputeHeadlines>
  Raised in: Codeunit<Headline RC Business Manager>.<OnRun>
    Code lines:
    HeadlineRCBusinessManager.GET;
    WORKDATE := HeadlineRCBusinessManager."Workdate for computations";
    OnComputeHeadlines; <=====================
Codeunit<Headline RC Order Processor>.PROCEDURE<OnComputeHeadlines>
  Raised in: Codeunit<Headline RC Order Processor>.<OnRun>
    Code lines:
    HeadlineRCOrderProcessor.GET;
    WORKDATE := HeadlineRCOrderProcessor."Workdate for computations";
    OnComputeHeadlines; <=====================
Codeunit<Headline RC Accountant>.PROCEDURE<OnComputeHeadlines>
  Raised in: Codeunit<Headline RC Accountant>.<OnRun>
    Code lines:
    HeadlineRCAccountant.GET;
    WORKDATE := HeadlineRCAccountant."Workdate for computations";
    OnComputeHeadlines; <=====================
Codeunit<Headline RC Project Manager>.PROCEDURE<OnComputeHeadlines>
  Raised in: Codeunit<Headline RC Project Manager>.<OnRun>
    Code lines:
    HeadlineRCProjectManager.GET;
    WORKDATE := HeadlineRCProjectManager."Workdate for computations";
    OnComputeHeadlines; <=====================
Codeunit<Headline RC Relationship Mgt.>.PROCEDURE<OnComputeHeadlines>
  Raised in: Codeunit<Headline RC Relationship Mgt.>.<OnRun>
    Code lines:
    HeadlineRCRelationshipMgt.GET;
    WORKDATE := HeadlineRCRelationshipMgt."Workdate for computations";
    OnComputeHeadlines; <=====================
Codeunit<Headline RC Administrator>.PROCEDURE<OnComputeHeadlines>
  Raised in: Codeunit<Headline RC Administrator>.<OnRun>
    Code lines:
    HeadlineRCAdministrator.GET;
    WORKDATE := HeadlineRCAdministrator."Workdate for computations";
    OnComputeHeadlines; <=====================
Codeunit<Headline RC Team Member>.PROCEDURE<OnComputeHeadlines>
  Raised in: Codeunit<Headline RC Team Member>.<OnRun>
    Code lines:
    HeadlineRCTeamMember.GET;
    WORKDATE := HeadlineRCTeamMember."Workdate for computations";
    OnComputeHeadlines; <=====================
Codeunit<Headline RC Prod. Planner>.PROCEDURE<OnComputeHeadlines>
  Raised in: Codeunit<Headline RC Prod. Planner>.<OnRun>
    Code lines:
    HeadlineRCProdPlanner.GET;
    WORKDATE := HeadlineRCProdPlanner."Workdate for computations";
    OnComputeHeadlines; <=====================
Codeunit<Headline RC Serv. Dispatcher>.PROCEDURE<OnComputeHeadlines>
  Raised in: Codeunit<Headline RC Serv. Dispatcher>.<OnRun>
    Code lines:
    HeadlineRCServDispatcher.GET;
    WORKDATE := HeadlineRCServDispatcher."Workdate for computations";
    OnComputeHeadlines; <=====================
Codeunit<Headline RC Security Admin>.PROCEDURE<OnComputeHeadlines>
  Raised in: Codeunit<Headline RC Security Admin>.<OnRun>
    Code lines:
    HeadlineRCSecurityAdmin.GET;
    WORKDATE := HeadlineRCSecurityAdmin."Workdate for computations";
    OnComputeHeadlines; <=====================
Codeunit<Headline RC Whse. Basic>.PROCEDURE<OnComputeHeadlines>
  Raised in: Codeunit<Headline RC Whse. Basic>.<OnRun>
    Code lines:
    HeadlineRCWhseBasic.GET;
    WORKDATE := HeadlineRCWhseBasic."Workdate for computations";
    OnComputeHeadlines; <=====================
Codeunit<Headline RC Whse. WMS>.PROCEDURE<OnComputeHeadlines>
  Raised in: Codeunit<Headline RC Whse. WMS>.<OnRun>
    Code lines:
    HeadlineRCWhseWMS.GET;
    WORKDATE := HeadlineRCWhseWMS."Workdate for computations";
    OnComputeHeadlines; <=====================
Codeunit<Headline RC Whse. Worker WMS>.PROCEDURE<OnComputeHeadlines>
  Raised in: Codeunit<Headline RC Whse. Worker WMS>.<OnRun>
    Code lines:
    HeadlineRCWhseWorkerWMS.GET;
    WORKDATE := HeadlineRCWhseWorkerWMS."Workdate for computations";
    OnComputeHeadlines; <=====================
Codeunit<Gen. Jnl.-Show Card>.PROCEDURE<OnAfterRun>
  Raised in: Codeunit<Gen. Jnl.-Show Card>.<OnRun>
    Code lines:
    ...
          ICPartner.Code := "Account No.";
          PAGE.RUN(PAGE::"IC Partner Card",ICPartner);
        END;
    END;
    
    OnAfterRun(Rec); <=====================
Codeunit<Workflow Management>.PROCEDURE<OnBeforeHandleEventWithxRec>
  Raised in: Codeunit<Workflow Management>.PROCEDURE<HandleEventWithxRec>
    Code lines:
    IsHandled := FALSE;
    OnBeforeHandleEventWithxRec(FunctionName,Variant,xVariant,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    RecRef.GETTABLE(Variant);
    IF RecRef.ISTEMPORARY THEN
      EXIT;
    IF FindEventWorkflowStepInstance(ActionableWorkflowStepInstance,FunctionName,Variant,xVariant) THEN
      ExecuteResponses(Variant,xVariant,ActionableWorkflowStepInstance);
Codeunit<Workflow Setup>.PROCEDURE<OnAddWorkflowCategoriesToLibrary>
  Raised in: Codeunit<Workflow Setup>.PROCEDURE<InsertWorkflowCategories>
    Code lines:
    ...
    InsertWorkflowCategory(PurchDocCategoryTxt,PurchDocCategoryDescTxt);
    InsertWorkflowCategory(SalesDocCategoryTxt,SalesDocCategoryDescTxt);
    InsertWorkflowCategory(AdminCategoryTxt,AdminCategoryDescTxt);
    InsertWorkflowCategory(FinCategoryTxt,FinCategoryDescTxt);
    
    OnAddWorkflowCategoriesToLibrary; <=====================
Codeunit<Workflow Setup>.PROCEDURE<OnAfterInitWorkflowTemplates>
  Raised in: Codeunit<Workflow Setup>.PROCEDURE<InitWorkflow>
    Code lines:
    ...
    
    Workflow.SETRANGE(Template,TRUE);
    IF Workflow.ISEMPTY THEN
      InsertWorkflowTemplates;
    
    OnAfterInitWorkflowTemplates; <=====================
Codeunit<Workflow Setup>.PROCEDURE<OnAfterInsertApprovalsTableRelations>
  Raised in: Codeunit<Workflow Setup>.PROCEDURE<InsertApprovalsTableRelations>
    Code lines:
    ...
    
    InsertTableRelation(
      DATABASE::"Incoming Document",IncomingDocument.FIELDNO("Entry No."),DATABASE::"Gen. Journal Line",
      DummyGenJournalLine.FIELDNO("Incoming Document Entry No."));
    
    OnAfterInsertApprovalsTableRelations; <=====================
Codeunit<Workflow Setup>.PROCEDURE<OnInsertWorkflowTemplates>
  Raised in: Codeunit<Workflow Setup>.PROCEDURE<InsertWorkflowTemplates>
    Code lines:
    ...
    InsertItemUnitPriceChangeApprovalWorkflowTemplate;
    
    InsertGeneralJournalBatchApprovalWorkflowTemplate;
    InsertGeneralJournalLineApprovalWorkflowTemplate;
    
    OnInsertWorkflowTemplates; <=====================
Codeunit<Notification Entry Dispatcher>.PROCEDURE<OnBeforeCreateMailAndDispatch>
  Raised in: Codeunit<Notification Entry Dispatcher>.PROCEDURE<CreateMailAndDispatch>
    Code lines:
    IF NOT GetHTMLBodyText(NotificationEntry,BodyText) THEN
      EXIT;
    
    MailSubject := NotificationMailSubjectTxt;
    OnBeforeCreateMailAndDispatch(NotificationEntry,MailSubject,Email); <=====================
    IF DocumentMailing.EmailFileWithSubjectAndSender(
         '','',HtmlBodyFilePath,MailSubject,Email,TRUE,NotificationEntry."Sender User ID")
    THEN
      NotificationManagement.MoveNotificationEntryToSentNotificationEntries(
        NotificationEntry,BodyText,TRUE,NotificationSetup."Notification Method"::Email)
    ...
Codeunit<Notification Management>.PROCEDURE<OnBeforeGetActionTextFor>
  Raised in: Codeunit<Notification Management>.PROCEDURE<GetActionTextFor>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetActionTextFor(NotificationEntry,CustomText,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(CustomText);
    
    CASE NotificationEntry.Type OF
      NotificationEntry.Type::"New Record":
        EXIT(ActionNewRecordTxt);
      NotificationEntry.Type::Approval:
        BEGIN
    ...
Codeunit<Notification Management>.PROCEDURE<OnGetDocumentTypeAndNumber>
  Raised in: Codeunit<Notification Management>.PROCEDURE<GetDocumentTypeAndNumber>
    Code lines:
    ...
          FieldRef := RecRef.FIELD(1);
          DocumentNo := FORMAT(FieldRef.VALUE);
        END;
      ELSE BEGIN
        IsHandled := FALSE;
        OnGetDocumentTypeAndNumber(RecRef,DocumentType,DocumentNo,IsHandled); <=====================
        IF NOT IsHandled THEN BEGIN
          DocumentType := RecRef.CAPTION;
          FieldRef := RecRef.FIELD(3);
          DocumentNo := FORMAT(FieldRef.VALUE);
    ...
Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<OnAfterDeleteNotificationContext>
  Raised in: Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<DeleteAlreadyRegisteredNotificationBeforeInsert>
    Code lines:
    TempNotificationContext.RESET;
    TempNotificationContext.SETRANGE("Notification ID",NotificationId);
    IF TempNotificationContext.FINDFIRST THEN BEGIN
      TempNotificationContext.DELETE(TRUE);
      OnAfterDeleteNotificationContext(TempNotificationContext); <=====================
    END;
  Raised in: Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<RecallNotifications>
    Code lines:
    REPEAT
      NotificationToRecall.ID := TempNotificationContextToRecall."Notification ID";
      NotificationToRecall.RECALL;
    
      TempNotificationContextToRecall.DELETE(TRUE);
      OnAfterDeleteNotificationContext(TempNotificationContextToRecall); <=====================
    UNTIL TempNotificationContextToRecall.NEXT = 0
Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<OnAfterInsertNotificationContext>
  Raised in: Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<CreateNotificationContext>
    Code lines:
    ...
    TempNotificationContext."Notification ID" := NotificationId;
    GetUsableRecordId(RecId,TRUE);
    TempNotificationContext."Record ID" := RecId;
    TempNotificationContext.INSERT(TRUE);
    
    OnAfterInsertNotificationContext(TempNotificationContext); <=====================
  Raised in: Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<CreateNotificationContextWithAdditionalContext>
    Code lines:
    ...
    GetUsableRecordId(RecId,TRUE);
    TempNotificationContext."Record ID" := RecId;
    TempNotificationContext."Additional Context ID" := AdditionalContextId;
    TempNotificationContext.INSERT(TRUE);
    
    OnAfterInsertNotificationContext(TempNotificationContext); <=====================
Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<OnAfterNotificationSent>
  Raised in: Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<SendNotification>
    Code lines:
    IF ISNULLGUID(NotificationToSend.ID) THEN
      NotificationToSend.ID := CREATEGUID;
    
    NotificationToSend.SEND;
    OnAfterNotificationSent(NotificationToSend,RecId.TABLENO); <=====================
    CreateNotificationContext(NotificationToSend.ID,RecId);
  Raised in: Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<SendNotificationWithAdditionalContext>
    Code lines:
    IF ISNULLGUID(NotificationToSend.ID) THEN
      NotificationToSend.ID := CREATEGUID;
    
    OnBeforeSendNotification(NotificationToSend,RecId,AdditionalContextId);
    NotificationToSend.SEND;
    OnAfterNotificationSent(NotificationToSend,RecId.TABLENO); <=====================
    CreateNotificationContextWithAdditionalContext(NotificationToSend.ID,RecId,AdditionalContextId);
Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<OnBeforeSendNotification>
  Raised in: Codeunit<Notification Lifecycle Mgt.>.PROCEDURE<SendNotificationWithAdditionalContext>
    Code lines:
    IF ISNULLGUID(NotificationToSend.ID) THEN
      NotificationToSend.ID := CREATEGUID;
    
    OnBeforeSendNotification(NotificationToSend,RecId,AdditionalContextId); <=====================
    NotificationToSend.SEND;
    OnAfterNotificationSent(NotificationToSend,RecId.TABLENO);
    CreateNotificationContextWithAdditionalContext(NotificationToSend.ID,RecId,AdditionalContextId);
Codeunit<Workflow Event Handling>.PROCEDURE<OnAddWorkflowEventPredecessorsToLibrary>
  Raised in: Codeunit<Workflow Event Handling>.PROCEDURE<AddEventPredecessors>
    Code lines:
    ...
        AddEventPredecessor(RunWorkflowOnGeneralJournalBatchBalancedCode,RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
      RunWorkflowOnGeneralJournalBatchNotBalancedCode:
        AddEventPredecessor(RunWorkflowOnGeneralJournalBatchNotBalancedCode,RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
    END;
    
    OnAddWorkflowEventPredecessorsToLibrary(EventFunctionName); <=====================
Codeunit<Workflow Event Handling>.PROCEDURE<OnAddWorkflowEventsToLibrary>
  Raised in: Codeunit<Workflow Event Handling>.PROCEDURE<CreateEventsLibrary>
    Code lines:
    ...
      CreateGenJnlLineFromIncDocSuccessfulEventDescTxt,0,FALSE);
    AddEventToLibrary(
      RunWorkflowOnAfterCreateGenJnlLineFromIncomingDocFailCode,DATABASE::"Incoming Document",
      CreateGenJnlLineFromIncDocFailsEventDescTxt,0,FALSE);
    
    OnAddWorkflowEventsToLibrary; <=====================
    OnAddWorkflowTableRelationsToLibrary;
Codeunit<Workflow Event Handling>.PROCEDURE<OnAddWorkflowTableRelationsToLibrary>
  Raised in: Codeunit<Workflow Event Handling>.PROCEDURE<CreateEventsLibrary>
    Code lines:
    ...
    AddEventToLibrary(
      RunWorkflowOnAfterCreateGenJnlLineFromIncomingDocFailCode,DATABASE::"Incoming Document",
      CreateGenJnlLineFromIncDocFailsEventDescTxt,0,FALSE);
    
    OnAddWorkflowEventsToLibrary;
    OnAddWorkflowTableRelationsToLibrary; <=====================
Codeunit<Workflow Response Handling>.PROCEDURE<OnAddWorkflowResponsePredecessorsToLibrary>
  Raised in: Codeunit<Workflow Response Handling>.PROCEDURE<AddResponsePredecessors>
    Code lines:
    ...
      GetSendToOCRCode:
        AddResponsePredecessor(GetSendToOCRCode,WorkflowEventHandling.RunWorkflowOnAfterReadyForOCRIncomingDocCode);
      GetSendToOCRAsyncCode:
        AddResponsePredecessor(GetSendToOCRAsyncCode,WorkflowEventHandling.RunWorkflowOnAfterReadyForOCRIncomingDocCode);
    END;
    OnAddWorkflowResponsePredecessorsToLibrary(ResponseFunctionName); <=====================
Codeunit<Workflow Response Handling>.PROCEDURE<OnAddWorkflowResponsesToLibrary>
  Raised in: Codeunit<Workflow Response Handling>.PROCEDURE<CreateResponsesLibrary>
    Code lines:
    ...
    
    AddResponseToLibrary(RevertValueForFieldCode,0,RevertRecordValueTxt,'GROUP 6');
    AddResponseToLibrary(ApplyNewValuesCode,0,ApplyNewValuesTxt,'GROUP 7');
    AddResponseToLibrary(DiscardNewValuesCode,0,DiscardNewValuesTxt,'GROUP 0');
    
    OnAddWorkflowResponsesToLibrary; <=====================
Codeunit<Workflow Response Handling>.PROCEDURE<OnCheckHasRequiredArguments>
  Raised in: Codeunit<Workflow Response Handling>.PROCEDURE<HasRequiredArguments>
    Code lines:
    ...
        IF WorkflowStepArgument."Notification User ID" = '' THEN
          EXIT(FALSE);
    END;
    
    HasRequiredArgument := TRUE;
    OnCheckHasRequiredArguments(WorkflowStep,WorkflowStepArgument,HasRequiredArgument); <=====================
    EXIT(HasRequiredArgument);
Codeunit<Workflow Response Handling>.PROCEDURE<OnCheckIsArgumentMandatory>
  Raised in: Codeunit<Workflow Response Handling>.PROCEDURE<IsArgumentMandatory>
    Code lines:
    ...
        CreatePmtLineForPostedPurchaseDocCode]
    THEN
      EXIT(TRUE);
    
    ArgumentMandatory := FALSE;
    OnCheckIsArgumentMandatory(ResponseFunctionName,ArgumentMandatory); <=====================
    EXIT(ArgumentMandatory);
Codeunit<Workflow Response Handling>.PROCEDURE<OnExecuteWorkflowResponse>
  Raised in: Codeunit<Workflow Response Handling>.PROCEDURE<ExecuteResponse>
    Code lines:
    ...
        ApplyNewValuesCode:
          WorkflowChangeRecMgt.ApplyNewValues(Variant,ResponseWorkflowStepInstance);
        DiscardNewValuesCode:
          WorkflowChangeRecMgt.DiscardNewValues(Variant,ResponseWorkflowStepInstance);
        ELSE BEGIN
          OnExecuteWorkflowResponse(ResponseExecuted,Variant,xVariant,ResponseWorkflowStepInstance); <=====================
          IF NOT ResponseExecuted THEN
            ERROR(NotSupportedResponseErr,WorkflowResponse."Function Name");
        END;
      END;
Codeunit<Workflow Response Handling>.PROCEDURE<OnOpenDocument>
  Raised in: Codeunit<Workflow Response Handling>.PROCEDURE<OpenDocument>
    Code lines:
    ...
      DATABASE::"Sales Header":
        ReleaseSalesDocument.Reopen(Variant);
      DATABASE::"Incoming Document":
        ReleaseIncomingDocument.Reopen(Variant);
      ELSE BEGIN
        OnOpenDocument(RecRef,Handled); <=====================
        IF NOT Handled THEN
          ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      END;
    END;
Codeunit<Workflow Response Handling>.PROCEDURE<OnReleaseDocument>
  Raised in: Codeunit<Workflow Response Handling>.PROCEDURE<ReleaseDocument>
    Code lines:
    ...
      DATABASE::"Sales Header":
        ReleaseSalesDocument.PerformManualCheckAndRelease(Variant);
      DATABASE::"Incoming Document":
        ReleaseIncomingDocument.PerformManualRelease(Variant);
      ELSE BEGIN
        OnReleaseDocument(RecRef,Handled); <=====================
        IF NOT Handled THEN
          ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      END;
    END;
Codeunit<Approvals Mgmt.>.PROCEDURE<OnAfterCheckPurchaseApprovalPossible>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<CheckPurchaseApprovalPossible>
    Code lines:
    ...
      ERROR(NoWorkflowEnabledErr);
    
    IF NOT PurchaseHeader.PurchLinesExist THEN
      ERROR(NothingToApproveErr);
    
    OnAfterCheckPurchaseApprovalPossible(PurchaseHeader); <=====================
    
    EXIT(TRUE);
Codeunit<Approvals Mgmt.>.PROCEDURE<OnAfterCheckSalesApprovalPossible>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<CheckSalesApprovalPossible>
    Code lines:
    ...
      ERROR(NoWorkflowEnabledErr);
    
    IF NOT SalesHeader.SalesLinesExist THEN
      ERROR(NothingToApproveErr);
    
    OnAfterCheckSalesApprovalPossible(SalesHeader); <=====================
    
    EXIT(TRUE);
Codeunit<Approvals Mgmt.>.PROCEDURE<OnAfterCreateApprReqForApprTypeApprover>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<CreateApprReqForApprTypeApprover>
    Code lines:
    ...
        END;
      WorkflowStepArgument."Approver Limit Type"::"Specific Approver":
        CreateApprovalRequestForSpecificUser(WorkflowStepArgument,ApprovalEntryArgument);
    END;
    
    OnAfterCreateApprReqForApprTypeApprover(WorkflowStepArgument,ApprovalEntryArgument); <=====================
Codeunit<Approvals Mgmt.>.PROCEDURE<OnAfterCreateApprReqForApprTypeSalespersPurchaser>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<CreateApprReqForApprTypeSalespersPurchaser>
    Code lines:
    ...
          CreateApprovalRequestForSalespersPurchaser(WorkflowStepArgument,ApprovalEntryArgument);
          CreateApprovalRequestForSpecificUser(WorkflowStepArgument,ApprovalEntryArgument);
        END;
    END;
    
    OnAfterCreateApprReqForApprTypeSalespersPurchaser(WorkflowStepArgument,ApprovalEntryArgument); <=====================
Codeunit<Approvals Mgmt.>.PROCEDURE<OnAfterCreateApprReqForApprTypeWorkflowUserGroup>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<CreateApprReqForApprTypeWorkflowUserGroup>
    Code lines:
    ...
          ERROR(WFUserGroupNotInSetupErr,ApproverId);
        MakeApprovalEntry(ApprovalEntryArgument,SequenceNo + "Sequence No.",ApproverId,WorkflowStepArgument);
      UNTIL NEXT = 0;
    END;
    
    OnAfterCreateApprReqForApprTypeWorkflowUserGroup(WorkflowStepArgument,ApprovalEntryArgument); <=====================
Codeunit<Approvals Mgmt.>.PROCEDURE<OnAfterIsSufficientApprover>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<IsSufficientApprover>
    Code lines:
    ...
      DATABASE::"Gen. Journal Line":
        EXIT(IsSufficientGenJournalLineApprover(UserSetup,ApprovalEntryArgument));
    END;
    
    IsSufficient := TRUE;
    OnAfterIsSufficientApprover(UserSetup,ApprovalEntryArgument,IsSufficient); <=====================
    EXIT(IsSufficient);
Codeunit<Approvals Mgmt.>.PROCEDURE<OnApproveApprovalRequest>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<ApproveSelectedApprovalRequest>
    Code lines:
    ...
    IF ApprovalEntry."Approver ID" <> USERID THEN
      CheckUserAsApprovalAdministrator(ApprovalEntry);
    
    ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Approved);
    ApprovalEntry.MODIFY(TRUE);
    OnApproveApprovalRequest(ApprovalEntry); <=====================
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<SendApprovalRequestFromRecord>
    Code lines:
    ...
          ApprovalEntry2.VALIDATE(Status,ApprovalEntry2.Status::Open);
          ApprovalEntry2.MODIFY(TRUE);
          CreateApprovalEntryNotification(ApprovalEntry2,WorkflowStepInstance);
        UNTIL ApprovalEntry2.NEXT = 0;
      IF FindApprovedApprovalEntryForWorkflowUserGroup(ApprovalEntry,WorkflowStepInstance) THEN
        OnApproveApprovalRequest(ApprovalEntry); <=====================
      EXIT;
    END;
    
    ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Approved);
    ...
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<SendApprovalRequestFromRecord>
    Code lines:
    ...
          ApprovalEntry2.VALIDATE(Status,ApprovalEntry2.Status::Open);
          ApprovalEntry2.MODIFY(TRUE);
          CreateApprovalEntryNotification(ApprovalEntry2,WorkflowStepInstance);
        UNTIL ApprovalEntry2.NEXT = 0;
      IF FindApprovedApprovalEntryForWorkflowUserGroup(ApprovalEntry,WorkflowStepInstance) THEN
        OnApproveApprovalRequest(ApprovalEntry); <=====================
      EXIT;
    END;
    
    ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Approved);
    ...
Codeunit<Approvals Mgmt.>.PROCEDURE<OnBeforeApprovalEntryInsert>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<MakeApprovalEntry>
    Code lines:
    ...
      "Available Credit Limit (LCY)" := ApprovalEntryArgument."Available Credit Limit (LCY)";
      SetApproverType(WorkflowStepArgument,ApprovalEntry);
      SetLimitType(WorkflowStepArgument,ApprovalEntry);
      "Record ID to Approve" := ApprovalEntryArgument."Record ID to Approve";
      "Approval Code" := ApprovalEntryArgument."Approval Code";
      OnBeforeApprovalEntryInsert(ApprovalEntry,ApprovalEntryArgument); <=====================
      INSERT(TRUE);
    END;
Codeunit<Approvals Mgmt.>.PROCEDURE<OnBeforeCheckUserAsApprovalAdministrator>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<CheckUserAsApprovalAdministrator>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckUserAsApprovalAdministrator(ApprovalEntry,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    UserSetup.GET(USERID);
    UserSetup.TESTFIELD("Approval Administrator");
Codeunit<Approvals Mgmt.>.PROCEDURE<OnBeforeFindWorkflowUserGroupMember>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<CreateApprReqForApprTypeWorkflowUserGroup>
    Code lines:
    ...
    SequenceNo := GetLastSequenceNo(ApprovalEntryArgument);
    
    WITH WorkflowUserGroupMember DO BEGIN
      SETCURRENTKEY("Workflow User Group Code","Sequence No.");
      SETRANGE("Workflow User Group Code",WorkflowStepArgument."Workflow User Group Code");
      OnBeforeFindWorkflowUserGroupMember(WorkflowUserGroupMember,WorkflowStepArgument); <=====================
      IF NOT FINDSET THEN
        ERROR(NoWFUserGroupMembersErr);
    
      REPEAT
    ...
Codeunit<Approvals Mgmt.>.PROCEDURE<OnBeforePostedApprovalEntryInsert>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<PostApprovalEntries>
    Code lines:
    ...
      PostedApprovalEntry."Number of Rejected Requests" := ApprovalEntry."Number of Rejected Requests";
      PostedApprovalEntry."Table ID" := PostedRecordID.TABLENO;
      PostedApprovalEntry."Document No." := PostedDocNo;
      PostedApprovalEntry."Posted Record ID" := PostedRecordID;
      PostedApprovalEntry."Entry No." := 0;
      OnBeforePostedApprovalEntryInsert(PostedApprovalEntry,ApprovalEntry); <=====================
      PostedApprovalEntry.INSERT(TRUE);
    UNTIL ApprovalEntry.NEXT = 0;
    
    PostApprovalCommentLines(ApprovedRecordID,PostedRecordID,PostedDocNo);
Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelCustomerApprovalRequest>
  Raised in: Table<Customer>.<OnDelete>
    Code lines:
    ApprovalsMgmt.OnCancelCustomerApprovalRequest(Rec); <=====================
    
    ServiceItem.SETRANGE("Customer No.","No.");
    IF ServiceItem.FINDFIRST THEN
      IF ConfirmManagement.ConfirmProcess(
           STRSUBSTNO(Text008,TABLECAPTION,"No.",ServiceItem.FIELDCAPTION("Customer No.")),TRUE)
      THEN
        ServiceItem.MODIFYALL("Customer No.",'')
      ELSE
        ERROR(Text009);
    ...
Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelGeneralJournalBatchApprovalRequest>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<TryCancelJournalBatchApprovalRequest>
    Code lines:
    GetGeneralJournalBatch(GenJournalBatch,GenJournalLine);
    OnCancelGeneralJournalBatchApprovalRequest(GenJournalBatch); <=====================
    WorkflowWebhookManagement.FindAndCancel(GenJournalBatch.RECORDID);
  Raised in: Table<Gen. Journal Batch>.<OnDelete>
    Code lines:
    ApprovalsMgmt.OnCancelGeneralJournalBatchApprovalRequest(Rec); <=====================
    
    GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
    GenJnlAlloc.SETRANGE("Journal Batch Name",Name);
    GenJnlAlloc.DELETEALL;
    GenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
    GenJnlLine.SETRANGE("Journal Batch Name",Name);
    GenJnlLine.DELETEALL(TRUE);
  Raised in: Table<Gen. Journal Line>.<OnDelete>
    Code lines:
    ...
    // Lines are deleted 1 by 1, this actually check if this is the last line in the General journal Bach
    GenJournalLine.SETRANGE("Journal Template Name","Journal Template Name");
    GenJournalLine.SETRANGE("Journal Batch Name","Journal Batch Name");
    IF GenJournalLine.COUNT = 1 THEN
      IF GenJournalBatch.GET("Journal Template Name","Journal Batch Name") THEN
        ApprovalsMgmt.OnCancelGeneralJournalBatchApprovalRequest(GenJournalBatch); <=====================
    
    TESTFIELD("Check Printed",FALSE);
    
    ClearCustVendApplnEntry;
    ...
Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelGeneralJournalLineApprovalRequest>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<TryCancelJournalLineApprovalRequests>
    Code lines:
    REPEAT
      IF HasOpenApprovalEntries(GenJournalLine.RECORDID) THEN
        OnCancelGeneralJournalLineApprovalRequest(GenJournalLine); <=====================
      WorkflowWebhookManagement.FindAndCancel(GenJournalLine.RECORDID);
    UNTIL GenJournalLine.NEXT = 0;
    MESSAGE(ApprovalReqCanceledForSelectedLinesMsg);
  Raised in: Table<Gen. Journal Line>.<OnDelete>
    Code lines:
    ApprovalsMgmt.OnCancelGeneralJournalLineApprovalRequest(Rec); <=====================
    
    // Lines are deleted 1 by 1, this actually check if this is the last line in the General journal Bach
    GenJournalLine.SETRANGE("Journal Template Name","Journal Template Name");
    GenJournalLine.SETRANGE("Journal Batch Name","Journal Batch Name");
    IF GenJournalLine.COUNT = 1 THEN
      IF GenJournalBatch.GET("Journal Template Name","Journal Batch Name") THEN
        ApprovalsMgmt.OnCancelGeneralJournalBatchApprovalRequest(GenJournalBatch);
    
    TESTFIELD("Check Printed",FALSE);
    ...
Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelIncomingDocApprovalRequest>
  Raised in: Page<Incoming Document>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelIncomingDocApprovalRequest(Rec); <=====================
Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelItemApprovalRequest>
  Raised in: Table<Item>.<OnDelete>
    Code lines:
    ApprovalsMgmt.OnCancelItemApprovalRequest(Rec); <=====================
    
    CheckJournalsAndWorksheets(0);
    CheckDocuments(0);
    
    MoveEntries.MoveItemEntries(Rec);
    
    ServiceItem.RESET;
    ServiceItem.SETRANGE("Item No.","No.");
    IF ServiceItem.FIND('-') THEN
    ...
Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelPurchaseApprovalRequest>
  Raised in: Page<Blanket Purchase Order>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
  Raised in: Page<Purchase Return Order>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
  Raised in: Page<Purchase Return Order List>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
  Raised in: Page<Purchase Credit Memo>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
    WorkflowWebhookMgt.FindAndCancel(RECORDID);
  Raised in: Page<Purchase Invoice>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
    WorkflowWebhookMgt.FindAndCancel(RECORDID);
  Raised in: Page<Purchase Order>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
    WorkflowWebhookMgt.FindAndCancel(RECORDID);
  Raised in: Page<Purchase Quote>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec); <=====================
Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelSalesApprovalRequest>
  Raised in: Page<Blanket Sales Order>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec); <=====================
  Raised in: Page<Sales Return Order>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec); <=====================
  Raised in: Page<Sales Credit Memo>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec); <=====================
    WorkflowWebhookMgt.FindAndCancel(RECORDID);
  Raised in: Page<Sales Invoice>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec); <=====================
    WorkflowWebhookMgt.FindAndCancel(RECORDID);
  Raised in: Page<Sales Order>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec); <=====================
    WorkflowWebhookMgt.FindAndCancel(RECORDID);
  Raised in: Page<Sales Quote>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelSalesApprovalRequest(Rec); <=====================
    WorkflowWebhookMgt.FindAndCancel(RECORDID);
Codeunit<Approvals Mgmt.>.PROCEDURE<OnCancelVendorApprovalRequest>
  Raised in: Page<Vendor Card>.Action<CancelApprovalRequest>.<OnAction>
    Code lines:
    ApprovalsMgmt.OnCancelVendorApprovalRequest(Rec); <=====================
    WorkflowWebhookManagement.FindAndCancel(RECORDID);
  Raised in: Table<Vendor>.<OnDelete>
    Code lines:
    ApprovalsMgmt.OnCancelVendorApprovalRequest(Rec); <=====================
    
    MoveEntries.MoveVendorEntries(Rec);
    
    CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::Vendor);
    CommentLine.SETRANGE("No.","No.");
    IF NOT CommentLine.ISEMPTY THEN
      CommentLine.DELETEALL;
    
    VendBankAcc.SETRANGE("Vendor No.","No.");
    ...
Codeunit<Approvals Mgmt.>.PROCEDURE<OnDelegateApprovalRequest>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<SubstituteUserIdForApprovalEntry>
    Code lines:
    ...
    Substitute := '';
    OnSubstituteUserIdForApprovalEntry(ApprovalEntry,Substitute);
    IF Substitute <> '' THEN BEGIN
      ApprovalEntry."Approver ID" := Substitute;
      ApprovalEntry.MODIFY(TRUE);
      OnDelegateApprovalRequest(ApprovalEntry); <=====================
      EXIT;
    END;
    
    IF UserSetup.Substitute = '' THEN
    ...
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<SubstituteUserIdForApprovalEntry>
    Code lines:
    ...
    Substitute := '';
    OnSubstituteUserIdForApprovalEntry(ApprovalEntry,Substitute);
    IF Substitute <> '' THEN BEGIN
      ApprovalEntry."Approver ID" := Substitute;
      ApprovalEntry.MODIFY(TRUE);
      OnDelegateApprovalRequest(ApprovalEntry); <=====================
      EXIT;
    END;
    
    IF UserSetup.Substitute = '' THEN
    ...
Codeunit<Approvals Mgmt.>.PROCEDURE<OnDeleteRecordInApprovalRequest>
  Raised in: Table<Purchase Header>.<OnDelete>
    Code lines:
    ...
      Rec,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,
      ReturnShptHeader,PurchInvHeaderPrepmt,PurchCrMemoHeaderPrepmt);
    VALIDATE("Applies-to ID",'');
    VALIDATE("Incoming Document Entry No.",0);
    
    ApprovalsMgmt.OnDeleteRecordInApprovalRequest(RECORDID); <=====================
    PurchLine.LOCKTABLE;
    
    WhseRequest.SETRANGE("Source Type",DATABASE::"Purchase Line");
    WhseRequest.SETRANGE("Source Subtype","Document Type");
    ...
  Raised in: Table<Sales Header>.<OnDelete>
    Code lines:
    ...
    UpdateOpportunity;
    
    VALIDATE("Applies-to ID",'');
    VALIDATE("Incoming Document Entry No.",0);
    
    ApprovalsMgmt.OnDeleteRecordInApprovalRequest(RECORDID); <=====================
    SalesLine.RESET;
    SalesLine.LOCKTABLE;
    
    WhseRequest.SETRANGE("Source Type",DATABASE::"Sales Line");
    ...
Codeunit<Approvals Mgmt.>.PROCEDURE<OnPopulateApprovalEntryArgument>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<PopulateApprovalEntryArgument>
    Code lines:
    ...
        BEGIN
          RecRef.SETTABLE(IncomingDocument);
          ApprovalEntryArgument."Document No." := FORMAT(IncomingDocument."Entry No.");
        END;
      ELSE
        OnPopulateApprovalEntryArgument(RecRef,ApprovalEntryArgument,WorkflowStepInstance); <=====================
    END;
Codeunit<Approvals Mgmt.>.PROCEDURE<OnRejectApprovalRequest>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<RejectSelectedApprovalRequest>
    Code lines:
    ...
      ERROR(RejectOnlyOpenRequestsErr);
    
    IF ApprovalEntry."Approver ID" <> USERID THEN
      CheckUserAsApprovalAdministrator(ApprovalEntry);
    
    OnRejectApprovalRequest(ApprovalEntry); <=====================
    ApprovalEntry.GET(ApprovalEntry."Entry No.");
    ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Rejected);
    ApprovalEntry.MODIFY(TRUE);
Codeunit<Approvals Mgmt.>.PROCEDURE<OnRenameRecordInApprovalRequest>
  Raised in: Table<Gen. Journal Batch>.<OnRename>
    Code lines:
    ApprovalsMgmt.OnRenameRecordInApprovalRequest(xRec.RECORDID,RECORDID); <=====================
    
    SetLastModifiedDateTime;
  Raised in: Table<Customer>.<OnRename>
    Code lines:
    ApprovalsMgmt.OnRenameRecordInApprovalRequest(xRec.RECORDID,RECORDID); <=====================
    DimMgt.RenameDefaultDim(DATABASE::Customer,xRec."No.","No.");
    
    SetLastModifiedDateTime;
    IF xRec."Invoice Disc. Code" = xRec."No." THEN
      "Invoice Disc. Code" := "No.";
    CustomerTemplate.SETRANGE("Invoice Disc. Code",xRec."No.");
    CustomerTemplate.MODIFYALL("Invoice Disc. Code","No.");
    
    CalendarManagement.RenameCustomizedBaseCalendarData(CustomizedCalendarChange."Source Type"::Customer,"No.",xRec."No.");
  Raised in: Table<Gen. Journal Line>.<OnRename>
    Code lines:
    ApprovalsMgmt.OnRenameRecordInApprovalRequest(xRec.RECORDID,RECORDID); <=====================
    
    TESTFIELD("Check Printed",FALSE);
  Raised in: Table<Item>.<OnRename>
    Code lines:
    SalesLine.RenameNo(SalesLine.Type::Item,xRec."No.","No.");
    PurchaseLine.RenameNo(PurchaseLine.Type::Item,xRec."No.","No.");
    TransferLine.RenameNo(xRec."No.","No.");
    DimMgt.RenameDefaultDim(DATABASE::Item,xRec."No.","No.");
    
    ApprovalsMgmt.OnRenameRecordInApprovalRequest(xRec.RECORDID,RECORDID); <=====================
    ItemAttributeValueMapping.RenameItemAttributeValueMapping(xRec."No.","No.");
    SetLastDateTimeModified;
  Raised in: Table<Vendor>.<OnRename>
    Code lines:
    ApprovalsMgmt.OnRenameRecordInApprovalRequest(xRec.RECORDID,RECORDID); <=====================
    DimMgt.RenameDefaultDim(DATABASE::Vendor,xRec."No.","No.");
    SetLastModifiedDateTime;
    IF xRec."Invoice Disc. Code" = xRec."No." THEN
      "Invoice Disc. Code" := "No.";
    
    CalendarManagement.RenameCustomizedBaseCalendarData(CustomizedCalendarChange."Source Type"::Vendor,"No.",xRec."No.");
Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendCustomerForApproval>
  Raised in: 
    Code lines:
    ...
        "App. Trigger"::"The user sends an approval requests manually":
          BEGIN
            EventConditions := WorkflowSetup.BuildCustomerTypeConditions;
            CreateCustomerOrItemApprovalWorkflow(Workflow,TempApprovalWorkflowWizard,DATABASE::Customer,
              WorkflowSetup.CustomerWorkflowCode,CustomerApprWorkflowDescTxt,EventConditions,
              WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode, <=====================
              WorkflowEventHandling.RunWorkflowOnCancelCustomerApprovalRequestCode);
          END;
        "App. Trigger"::"The user changes a specific field":
          CreateCustomerOrItemChangeApprovalWorkflow(Workflow,TempApprovalWorkflowWizard,DATABASE::Customer,
    ...
  Raised in: 
    Code lines:
    CASE ResponseFunctionName OF
      SendNotificationToWebhookCode:
        BEGIN
          WorkflowResponseHandling.AddResponsePredecessor(SendNotificationToWebhookCode,
            WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode); <=====================
          WorkflowResponseHandling.AddResponsePredecessor(SendNotificationToWebhookCode,
            WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
          WorkflowResponseHandling.AddResponsePredecessor(SendNotificationToWebhookCode,
            WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode);
          WorkflowResponseHandling.AddResponsePredecessor(SendNotificationToWebhookCode,
    ...
  Raised in: 
    Code lines:
    CASE EventFunctionName OF
      WorkflowWebhookResponseReceivedEventCode:
        BEGIN
          WorkflowEventHandling.AddEventPredecessor(WorkflowWebhookResponseReceivedEventCode,
            WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode); <=====================
          WorkflowEventHandling.AddEventPredecessor(WorkflowWebhookResponseReceivedEventCode,
            WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
          WorkflowEventHandling.AddEventPredecessor(WorkflowWebhookResponseReceivedEventCode,
            WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode);
          WorkflowEventHandling.AddEventPredecessor(WorkflowWebhookResponseReceivedEventCode,
    ...
  Raised in: 
    Code lines:
    ...
    
    IF Name = '' THEN
      Name := CustomerApprovalDescriptionTxt;
    
    CreateCustomerItemApprovalWorkflow(WorkflowCode,Name,SalesMktCategoryTxt,
      WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode,EventConditions,ResponseUserID); <=====================
    
    EXIT(WorkflowCode);
  Raised in: 
    Code lines:
    CASE EventCode OF
      WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode: <=====================
        EXIT(CreateCustomerApprovalWorkflow(Name,EventConditions,ResponseUserID));
      WorkflowEventHandling.RunWorkflowOnSendItemForApprovalCode:
        EXIT(CreateItemApprovalWorkflow(Name,EventConditions,ResponseUserID));
      WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode:
        EXIT(CreateGeneralJournalBatchApprovalWorkflow(Name,EventConditions,ResponseUserID));
      WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode:
        EXIT(CreateGeneralJournalLineApprovalWorkflow(Name,EventConditions,ResponseUserID));
      WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode:
    ...
  Raised in: 
    Code lines:
    IF NOT WorkflowManagement.CanExecuteWorkflow(Customer,WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode) THEN BEGIN <=====================
      IF WorkflowManagement.EnabledWorkflowExist(DATABASE::Customer,WorkflowEventHandling.RunWorkflowOnCustomerChangedCode) THEN
        EXIT(FALSE);
      ERROR(NoWorkflowEnabledErr);
    END;
    EXIT(TRUE);
  Raised in: 
    Code lines:
    ...
      CreateApprovalRequestsCode:
        BEGIN
          AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode);
          AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendSalesDocForApprovalCode);
          AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendIncomingDocForApprovalCode);
          AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode); <=====================
          AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnCustomerChangedCode);
          AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendVendorForApprovalCode);
          AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnVendorChangedCode);
          AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendItemForApprovalCode);
    ...
  Raised in: 
    Code lines:
    WorkflowManagement.HandleEvent(RunWorkflowOnSendCustomerForApprovalCode,Customer); <=====================
  Raised in: 
    Code lines:
    EXIT(UPPERCASE('RunWorkflowOnSendCustomerForApproval')); <=====================
  Raised in: 
    Code lines:
    ...
      RunWorkflowOnCancelPurchaseApprovalRequestCode:
        AddEventPredecessor(RunWorkflowOnCancelPurchaseApprovalRequestCode,RunWorkflowOnSendPurchaseDocForApprovalCode);
      RunWorkflowOnCancelSalesApprovalRequestCode:
        AddEventPredecessor(RunWorkflowOnCancelSalesApprovalRequestCode,RunWorkflowOnSendSalesDocForApprovalCode);
      RunWorkflowOnCancelCustomerApprovalRequestCode:
        AddEventPredecessor(RunWorkflowOnCancelCustomerApprovalRequestCode,RunWorkflowOnSendCustomerForApprovalCode); <=====================
      RunWorkflowOnCancelVendorApprovalRequestCode:
        AddEventPredecessor(RunWorkflowOnCancelVendorApprovalRequestCode,RunWorkflowOnSendVendorForApprovalCode);
      RunWorkflowOnCancelItemApprovalRequestCode:
        AddEventPredecessor(RunWorkflowOnCancelItemApprovalRequestCode,RunWorkflowOnSendItemForApprovalCode);
    ...
  Raised in: 
    Code lines:
    ...
    AddEventToLibrary(RunWorkflowOnCustomerCreditLimitExceededCode,DATABASE::"Sales Header",
      CustomerCreditLimitExceededTxt,0,FALSE);
    AddEventToLibrary(RunWorkflowOnCustomerCreditLimitNotExceededCode,DATABASE::"Sales Header",
      CustomerCreditLimitNotExceededTxt,0,FALSE);
    
    AddEventToLibrary(RunWorkflowOnSendCustomerForApprovalCode,DATABASE::Customer, <=====================
      CustomerSendForApprovalEventDescTxt,0,FALSE);
    AddEventToLibrary(RunWorkflowOnCancelCustomerApprovalRequestCode,DATABASE::Customer,
      CustomerApprovalRequestCancelEventDescTxt,0,FALSE);
    
    ...
  Raised in: 
    Code lines:
    PopulateWorkflowStepArgument(WorkflowStepArgument,
      WorkflowStepArgument."Approver Type"::Approver,WorkflowStepArgument."Approver Limit Type"::"Direct Approver",
      0,'',BlankDateFormula,TRUE);
    
    InsertRecApprovalWorkflowSteps(Workflow,BuildCustomerTypeConditions,
      WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode, <=====================
      WorkflowResponseHandling.CreateApprovalRequestsCode,
      WorkflowResponseHandling.SendApprovalRequestForApprovalCode,
      WorkflowEventHandling.RunWorkflowOnCancelCustomerApprovalRequestCode,
      WorkflowStepArgument,
  Raised in: 
    Code lines:
    ...
            'Conditions',ConditionsObject,PAGE::"Gen. Journal Line Entity",EventConditions,ConditionsCount);
          EXIT(
            RequestPageParametersHelper.GetViewFromDynamicRequestPage(
              EventConditions,WorkflowWebhookSetup.GetFinCategoryTxt,DATABASE::"Gen. Journal Line"));
        END;
      WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode: <=====================
        BEGIN
          AddEventConditionsWrapper(
            'Conditions',ConditionsObject,PAGE::"Workflow - Customer Entity",EventConditions,ConditionsCount);
          EXIT(
    ...
Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendGeneralJournalBatchForApproval>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<TrySendJournalBatchApprovalRequest>
    Code lines:
    ...
    CheckGeneralJournalBatchApprovalsWorkflowEnabled(GenJournalBatch);
    IF HasOpenApprovalEntries(GenJournalBatch.RECORDID) OR
       HasAnyOpenJournalLineApprovalEntries(GenJournalBatch."Journal Template Name",GenJournalBatch.Name)
    THEN
      ERROR(PendingJournalBatchApprovalExistsErr);
    OnSendGeneralJournalBatchForApproval(GenJournalBatch); <=====================
Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendGeneralJournalLineForApproval>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<TrySendJournalLineApprovalRequests>
    Code lines:
    IF GenJournalLine.COUNT = 1 THEN
      CheckGeneralJournalLineApprovalsWorkflowEnabled(GenJournalLine);
    
    REPEAT
      IF WorkflowManagement.CanExecuteWorkflow(GenJournalLine,
           WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode) AND <=====================
         NOT HasOpenApprovalEntries(GenJournalLine.RECORDID)
      THEN BEGIN
        OnSendGeneralJournalLineForApproval(GenJournalLine); <=====================
        LinesSent += 1;
    ...
Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendIncomingDocForApproval>
  Raised in: Codeunit<Office Management>.PROCEDURE<SendApprovalRequest>
    Code lines:
    IncomingDocument.TestReadyForApproval;
    IF ApprovalsMgmt.CheckIncomingDocApprovalsWorkflowEnabled(IncomingDocument) THEN
      ApprovalsMgmt.OnSendIncomingDocForApproval(IncomingDocument); <=====================
  Raised in: Page<Incoming Document>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    TestReadyForApproval;
    IF ApprovalsMgmt.CheckIncomingDocApprovalsWorkflowEnabled(Rec) THEN
      ApprovalsMgmt.OnSendIncomingDocForApproval(Rec); <=====================
Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendItemForApproval>
  Raised in: 
    Code lines:
    ...
        "App. Trigger"::"The user sends an approval requests manually":
          BEGIN
            EventConditions := WorkflowSetup.BuildItemTypeConditions;
            CreateCustomerOrItemApprovalWorkflow(Workflow,TempApprovalWorkflowWizard,DATABASE::Item,
              WorkflowSetup.ItemWorkflowCode,ItemApprWorkflowDescTxt,EventConditions,
              WorkflowEventHandling.RunWorkflowOnSendItemForApprovalCode, <=====================
              WorkflowEventHandling.RunWorkflowOnCancelItemApprovalRequestCode);
          END;
        "App. Trigger"::"The user changes a specific field":
          CreateCustomerOrItemChangeApprovalWorkflow(Workflow,TempApprovalWorkflowWizard,DATABASE::Item,
    ...
  Raised in: 
    Code lines:
    ...
          WorkflowResponseHandling.AddResponsePredecessor(SendNotificationToWebhookCode,
            WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
          WorkflowResponseHandling.AddResponsePredecessor(SendNotificationToWebhookCode,
            WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode);
          WorkflowResponseHandling.AddResponsePredecessor(SendNotificationToWebhookCode,
            WorkflowEventHandling.RunWorkflowOnSendItemForApprovalCode); <=====================
          WorkflowResponseHandling.AddResponsePredecessor(SendNotificationToWebhookCode,
            WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode);
          WorkflowResponseHandling.AddResponsePredecessor(SendNotificationToWebhookCode,
            WorkflowEventHandling.RunWorkflowOnSendSalesDocForApprovalCode);
    ...
  Raised in: 
    Code lines:
    ...
          WorkflowEventHandling.AddEventPredecessor(WorkflowWebhookResponseReceivedEventCode,
            WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
          WorkflowEventHandling.AddEventPredecessor(WorkflowWebhookResponseReceivedEventCode,
            WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode);
          WorkflowEventHandling.AddEventPredecessor(WorkflowWebhookResponseReceivedEventCode,
            WorkflowEventHandling.RunWorkflowOnSendItemForApprovalCode); <=====================
          WorkflowEventHandling.AddEventPredecessor(WorkflowWebhookResponseReceivedEventCode,
            WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode);
          WorkflowEventHandling.AddEventPredecessor(WorkflowWebhookResponseReceivedEventCode,
            WorkflowEventHandling.RunWorkflowOnSendSalesDocForApprovalCode);
    ...
  Raised in: 
    Code lines:
    ...
    
    IF Name = '' THEN
      Name := ItemApprovalDescriptionTxt;
    
    CreateCustomerItemApprovalWorkflow(WorkflowCode,Name,SalesMktCategoryTxt,
      WorkflowEventHandling.RunWorkflowOnSendItemForApprovalCode,EventConditions,ResponseUserID); <=====================
    
    EXIT(WorkflowCode);
  Raised in: 
    Code lines:
    CASE EventCode OF
      WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode:
        EXIT(CreateCustomerApprovalWorkflow(Name,EventConditions,ResponseUserID));
      WorkflowEventHandling.RunWorkflowOnSendItemForApprovalCode: <=====================
        EXIT(CreateItemApprovalWorkflow(Name,EventConditions,ResponseUserID));
      WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode:
        EXIT(CreateGeneralJournalBatchApprovalWorkflow(Name,EventConditions,ResponseUserID));
      WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode:
        EXIT(CreateGeneralJournalLineApprovalWorkflow(Name,EventConditions,ResponseUserID));
      WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode:
    ...
  Raised in: 
    Code lines:
    IF NOT WorkflowManagement.CanExecuteWorkflow(Item,WorkflowEventHandling.RunWorkflowOnSendItemForApprovalCode) THEN BEGIN <=====================
      IF WorkflowManagement.EnabledWorkflowExist(DATABASE::Item,WorkflowEventHandling.RunWorkflowOnItemChangedCode) THEN
        EXIT(FALSE);
      ERROR(NoWorkflowEnabledErr);
    END;
    EXIT(TRUE);
  Raised in: 
    Code lines:
    ...
          AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendIncomingDocForApprovalCode);
          AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode);
          AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnCustomerChangedCode);
          AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendVendorForApprovalCode);
          AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnVendorChangedCode);
          AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendItemForApprovalCode); <=====================
          AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnItemChangedCode);
          AddResponsePredecessor(
            CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode);
          AddResponsePredecessor(
    ...
  Raised in: 
    Code lines:
    WorkflowManagement.HandleEvent(RunWorkflowOnSendItemForApprovalCode,Item); <=====================
  Raised in: 
    Code lines:
    EXIT(UPPERCASE('RunWorkflowOnSendItemForApproval')); <=====================
  Raised in: 
    Code lines:
    ...
      RunWorkflowOnCancelCustomerApprovalRequestCode:
        AddEventPredecessor(RunWorkflowOnCancelCustomerApprovalRequestCode,RunWorkflowOnSendCustomerForApprovalCode);
      RunWorkflowOnCancelVendorApprovalRequestCode:
        AddEventPredecessor(RunWorkflowOnCancelVendorApprovalRequestCode,RunWorkflowOnSendVendorForApprovalCode);
      RunWorkflowOnCancelItemApprovalRequestCode:
        AddEventPredecessor(RunWorkflowOnCancelItemApprovalRequestCode,RunWorkflowOnSendItemForApprovalCode); <=====================
      RunWorkflowOnCancelGeneralJournalBatchApprovalRequestCode:
        AddEventPredecessor(RunWorkflowOnCancelGeneralJournalBatchApprovalRequestCode,
          RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
      RunWorkflowOnCancelGeneralJournalLineApprovalRequestCode:
    ...
  Raised in: 
    Code lines:
    ...
    AddEventToLibrary(RunWorkflowOnSendVendorForApprovalCode,DATABASE::Vendor,
      VendorSendForApprovalEventDescTxt,0,FALSE);
    AddEventToLibrary(RunWorkflowOnCancelVendorApprovalRequestCode,DATABASE::Vendor,
      VendorApprovalRequestCancelEventDescTxt,0,FALSE);
    
    AddEventToLibrary(RunWorkflowOnSendItemForApprovalCode,DATABASE::Item, <=====================
      ItemSendForApprovalEventDescTxt,0,FALSE);
    AddEventToLibrary(RunWorkflowOnCancelItemApprovalRequestCode,DATABASE::Item,
      ItemApprovalRequestCancelEventDescTxt,0,FALSE);
    
    ...
  Raised in: 
    Code lines:
    PopulateWorkflowStepArgument(WorkflowStepArgument,
      WorkflowStepArgument."Approver Type"::Approver,WorkflowStepArgument."Approver Limit Type"::"Direct Approver",
      0,'',BlankDateFormula,TRUE);
    
    InsertRecApprovalWorkflowSteps(Workflow,BuildItemTypeConditions,
      WorkflowEventHandling.RunWorkflowOnSendItemForApprovalCode, <=====================
      WorkflowResponseHandling.CreateApprovalRequestsCode,
      WorkflowResponseHandling.SendApprovalRequestForApprovalCode,
      WorkflowEventHandling.RunWorkflowOnCancelItemApprovalRequestCode,
      WorkflowStepArgument,
  Raised in: 
    Code lines:
    ...
            'Conditions',ConditionsObject,PAGE::"Workflow - Customer Entity",EventConditions,ConditionsCount);
          EXIT(
            RequestPageParametersHelper.GetViewFromDynamicRequestPage(
              EventConditions,WorkflowWebhookSetup.GetSalesMktCategoryTxt,DATABASE::Customer));
        END;
      WorkflowEventHandling.RunWorkflowOnSendItemForApprovalCode: <=====================
        BEGIN
          AddEventConditionsWrapper(
            'Conditions',ConditionsObject,PAGE::"Workflow - Item Entity",EventConditions,ConditionsCount);
          EXIT(
    ...
Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendPurchaseDocForApproval>
  Raised in: Page<Blanket Purchase Order>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
  Raised in: Page<Purchase Return Order>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
  Raised in: Page<Purchase Return Order List>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
  Raised in: Page<Purchase Credit Memo>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
  Raised in: Page<Purchase Invoice>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
  Raised in: Page<Purchase Order>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
  Raised in: Page<Purchase Quote>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF  ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec); <=====================
Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendSalesDocForApproval>
  Raised in: Page<Blanket Sales Order>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendSalesDocForApproval(Rec); <=====================
  Raised in: Page<Sales Return Order>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendSalesDocForApproval(Rec); <=====================
  Raised in: Page<Sales Credit Memo>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendSalesDocForApproval(Rec); <=====================
  Raised in: Page<Sales Invoice>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendSalesDocForApproval(Rec); <=====================
  Raised in: Page<Sales Order>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendSalesDocForApproval(Rec); <=====================
  Raised in: Page<Sales Quote>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckSalesApprovalPossible(Rec) THEN
      ApprovalsMgmt.OnSendSalesDocForApproval(Rec); <=====================
Codeunit<Approvals Mgmt.>.PROCEDURE<OnSendVendorForApproval>
  Raised in: Page<Vendor Card>.Action<SendApprovalRequest>.<OnAction>
    Code lines:
    IF ApprovalsMgmt.CheckVendorApprovalsWorkflowEnabled(Rec) THEN
      ApprovalsMgmt.OnSendVendorForApproval(Rec); <=====================
Codeunit<Approvals Mgmt.>.PROCEDURE<OnSetStatusToPendingApproval>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<SetStatusToPendingApproval>
    Code lines:
    ...
          IncomingDocument.MODIFY(TRUE);
          Variant := IncomingDocument;
        END;
      ELSE BEGIN
        IsHandled := FALSE;
        OnSetStatusToPendingApproval(RecRef,Variant,IsHandled); <=====================
        IF NOT IsHandled THEN
          ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      END;
    END;
Codeunit<Approvals Mgmt.>.PROCEDURE<OnSubstituteUserIdForApprovalEntry>
  Raised in: Codeunit<Approvals Mgmt.>.PROCEDURE<SubstituteUserIdForApprovalEntry>
    Code lines:
    IF NOT UserSetup.GET(ApprovalEntry."Approver ID") THEN
      ERROR(ApproverUserIdNotInSetupErr,ApprovalEntry."Sender ID");
    
    Substitute := '';
    OnSubstituteUserIdForApprovalEntry(ApprovalEntry,Substitute); <=====================
    IF Substitute <> '' THEN BEGIN
      ApprovalEntry."Approver ID" := Substitute;
      ApprovalEntry.MODIFY(TRUE);
      OnDelegateApprovalRequest(ApprovalEntry);
      EXIT;
    ...
Codeunit<Workflow Webhook Management>.PROCEDURE<OnCancelWorkflow>
  Raised in: Codeunit<Workflow Webhook Management>.PROCEDURE<Cancel>
    Code lines:
    ...
      ERROR(UserUnableToCancelErr,USERID);
    
    WorkflowWebhookEntry.VALIDATE(Response,WorkflowWebhookEntry.Response::Cancel);
    WorkflowWebhookEntry.MODIFY(TRUE);
    
    OnCancelWorkflow(WorkflowWebhookEntry); <=====================
Codeunit<Workflow Webhook Management>.PROCEDURE<OnContinueWorkflow>
  Raised in: Codeunit<Workflow Webhook Management>.PROCEDURE<Continue>
    Code lines:
    ...
      ERROR(UserUnableToContinueErr,USERID);
    
    WorkflowWebhookEntry.VALIDATE(Response,WorkflowWebhookEntry.Response::Continue);
    WorkflowWebhookEntry.MODIFY(TRUE);
    
    OnContinueWorkflow(WorkflowWebhookEntry); <=====================
Codeunit<Workflow Webhook Management>.PROCEDURE<OnFindTaskSchedulerAllowed>
  Raised in: Codeunit<Workflow Webhook Management>.PROCEDURE<SendWebhookNotificaton>
    Code lines:
    WorkflowWebhookNotification.StartNotification(WorkflowStepInstance.ID);
    
    IsTaskSchedulerAllowed := TRUE;
    OnFindTaskSchedulerAllowed(IsTaskSchedulerAllowed); <=====================
    
    IF IsTaskSchedulerAllowed THEN
      TASKSCHEDULER.CREATETASK(CODEUNIT::"Workflow Webhook Notify Task",0,TRUE,
        COMPANYNAME,0DT,WorkflowStepInstance.RECORDID)
    ELSE
      CODEUNIT.RUN(CODEUNIT::"Workflow Webhook Notify Task",WorkflowStepInstance);
Codeunit<Workflow Webhook Management>.PROCEDURE<OnRejectWorkflow>
  Raised in: Codeunit<Workflow Webhook Management>.PROCEDURE<Reject>
    Code lines:
    ...
      ERROR(UserUnableToRejectErr,USERID);
    
    WorkflowWebhookEntry.VALIDATE(Response,WorkflowWebhookEntry.Response::Reject);
    WorkflowWebhookEntry.MODIFY(TRUE);
    
    OnRejectWorkflow(WorkflowWebhookEntry); <=====================
Codeunit<Workflow Webhook Notification>.PROCEDURE<OnPostNotificationRequest>
  Raised in: Codeunit<Workflow Webhook Notification>.PROCEDURE<Notify>
    Code lines:
    RetryCounter := RetryCounter - 1;
    IF OnPostNotificationRequest(DataID,WorkflowStepInstanceID,NotificationUrl,RequestedByUserEmail) THEN BEGIN <=====================
      WorkflowWebhookNotification.Status := WorkflowWebhookNotification.Status::Sent;
      WorkflowWebhookNotification.SetErrorMessage('');
      WorkflowWebhookNotification.SetErrorDetails('');
      WorkflowWebhookNotification.MODIFY(TRUE);
      COMMIT;
    END ELSE BEGIN
      Exception := GETLASTERROROBJECT;
    
    ...
Codeunit<Workflow Webhook Notify Task>.PROCEDURE<OnFetchWorkflowWebhookNotificationInitParams>
  Raised in: Codeunit<Workflow Webhook Notify Task>.<OnRun>
    Code lines:
    ...
    UserTable.SETRANGE("User Name",WorkflowWebhookEntryTable."Initiated By User ID");
    IF UserTable.FINDFIRST THEN
      ContactEmail := UserTable."Contact Email";
    
    // Send notification
    OnFetchWorkflowWebhookNotificationInitParams(RetryCount,WaitTime,InitHandled); <=====================
    
    // If parameters not initialized by subscribers (mock subscriber for testing)
    IF NOT InitHandled THEN BEGIN
      // Set defaults
    ...
Codeunit<PEPPOL Management>.PROCEDURE<OnBeforeGetAccountingCustomerPartyTaxSchemeByFormat>
  Raised in: Codeunit<PEPPOL Management>.PROCEDURE<GetAccountingCustomerPartyTaxSchemeByFormat>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetAccountingCustomerPartyTaxSchemeByFormat( <=====================
      SalesHeader,CustPartyTaxSchemeCompanyID,CustPartyTaxSchemeCompIDSchID,CustTaxSchemeID,IsBISBilling,IsHandled);
    IF IsHandled THEN
      EXIT;
    
    IF SalesHeader."VAT Registration No." <> '' THEN BEGIN
      CustPartyTaxSchemeCompanyID := FormatVATRegitrationNo(SalesHeader."VAT Registration No.",IsBISBilling);
      CustPartyTaxSchemeCompIDSchID := GetVATSchemeByFormat(SalesHeader."Bill-to Country/Region Code",IsBISBilling);
      CustTaxSchemeID := VATTxt;
Codeunit<PEPPOL Management>.PROCEDURE<OnBeforeGetAccountingSupplierPartyTaxScheme>
  Raised in: Codeunit<PEPPOL Management>.PROCEDURE<GetAccountingSupplierPartyTaxScheme>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetAccountingSupplierPartyTaxScheme(CompanyID,CompanyIDSchemeID,TaxSchemeID,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    CompanyInfo.GET;
    IF CompanyInfo."VAT Registration No." <> '' THEN BEGIN
      CompanyID := CompanyInfo."VAT Registration No.";
      CompanyIDSchemeID := GetVATScheme(CompanyInfo."Country/Region Code");
      TaxSchemeID := VATTxt;
Codeunit<Office Management>.PROCEDURE<OnGetExternalHandlerCodeunit>
  Raised in: Codeunit<Office Management>.PROCEDURE<GetHandlerCodeunit>
    Code lines:
    ...
        EXIT(CODEUNIT::"Office Contact Handler");
      OfficeHostType.OutlookHyperlink:
        EXIT(CODEUNIT::"Office Document Handler");
    END;
    
    OnGetExternalHandlerCodeunit(OfficeAddinContext,HostType,ExternalHandler); <=====================
    IF ExternalHandler > 0 THEN
      EXIT(ExternalHandler);
    
    ERROR(CodeUnitNotFoundErr);
Codeunit<Office Host Management>.PROCEDURE<OnCloseCurrentPage>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<CloseCurrentPage>
    Code lines:
    OnCloseCurrentPage; <=====================
Codeunit<Office Host Management>.PROCEDURE<OnEmailHasAttachments>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<EmailHasAttachments>
    Code lines:
    OnEmailHasAttachments(Result); <=====================
    EXIT(Result);
Codeunit<Office Host Management>.PROCEDURE<OnGetEmailAndAttachments>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<GetEmailAndAttachments>
    Code lines:
    OnGetEmailAndAttachments(TempExchangeObject,Action,VendorNumber); <=====================
Codeunit<Office Host Management>.PROCEDURE<OnGetEmailBody>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<GetEmailBody>
    Code lines:
    OnGetEmailBody(OfficeAddinContext."Item ID",EmailBody); <=====================
Codeunit<Office Host Management>.PROCEDURE<OnGetFinancialsDocument>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<GetFinancialsDocument>
    Code lines:
    OnGetFinancialsDocument(OfficeAddinContext."Item ID",DocumentJSON); <=====================
Codeunit<Office Host Management>.PROCEDURE<OnGetHostType>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<GetHostType>
    Code lines:
    CheckHost;
    OnGetHostType(HostType); <=====================
    EXIT(HostType);
Codeunit<Office Host Management>.PROCEDURE<OnGetTempOfficeAddinContext>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<GetTempOfficeAddinContext>
    Code lines:
    OnGetTempOfficeAddinContext(TempOfficeAddinContext); <=====================
Codeunit<Office Host Management>.PROCEDURE<OnInitializeContext>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<InitializeContext>
    Code lines:
    CheckHost;
    OnInitializeContext(TempNewOfficeAddinContext); <=====================
Codeunit<Office Host Management>.PROCEDURE<OnInitializeExchangeObject>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<InitializeExchangeObject>
    Code lines:
    CheckHost;
    OnInitializeExchangeObject; <=====================
Codeunit<Office Host Management>.PROCEDURE<OnInitializeHost>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<InitializeHost>
    Code lines:
    OnInitializeHost(NewOfficeHost,NewHostType); <=====================
Codeunit<Office Host Management>.PROCEDURE<OnInvokeExtension>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<InvokeExtension>
    Code lines:
    CheckHost;
    OnInvokeExtension(FunctionName,Parameter1,Parameter2,Parameter3,Parameter4); <=====================
Codeunit<Office Host Management>.PROCEDURE<OnIsAvailable>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<IsAvailable>
    Code lines:
    OnIsAvailable(Result); <=====================
    EXIT(Result);
Codeunit<Office Host Management>.PROCEDURE<OnIsHostInitialized>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<CheckHost>
    Code lines:
    OnIsHostInitialized(Result); <=====================
    IF NOT Result THEN
      ERROR(OfficeHostNotInitializedErr);
Codeunit<Office Host Management>.PROCEDURE<OnSendToOCR>
  Raised in: Codeunit<Office Host Management>.PROCEDURE<SendToOCR>
    Code lines:
    OnSendToOCR(IncomingDocument); <=====================
Codeunit<Office Document Handler>.PROCEDURE<OnCloseSuggestedLineItemsPage>
  Raised in: Codeunit<Office Document Handler>.PROCEDURE<ConvertSuggestedLinesToDocumentLines>
    Code lines:
    IF TempOfficeSuggestedLineItem.ISEMPTY THEN
      EXIT;
    
    PageAction := PAGE.RUNMODAL(PAGE::"Office Suggested Line Items",TempOfficeSuggestedLineItem);
    OnCloseSuggestedLineItemsPage(TempOfficeSuggestedLineItem,HeaderRecRef,PageAction); <=====================
Codeunit<Office Document Handler>.PROCEDURE<OnGenerateLinesFromText>
  Raised in: Codeunit<Office Document Handler>.PROCEDURE<GenerateLinesForDocument>
    Code lines:
    IF InstructionMgt.IsEnabled(InstructionMgt.AutomaticLineItemsDialogCode) THEN BEGIN
      OfficeMgt.GetContext(TempOfficeAddinContext);
      EmailBody := OfficeMgt.GetEmailBody(TempOfficeAddinContext);
      OnGenerateLinesFromText(HeaderRecRef,TempOfficeSuggestedLineItem,EmailBody); <=====================
      COMMIT;
    
      ConvertSuggestedLinesToDocumentLines(TempOfficeSuggestedLineItem,HeaderRecRef);
    END;
Codeunit<Add-in Manifest Management>.PROCEDURE<CreateBasicAddins>
Codeunit<Add-in Manifest Management>.PROCEDURE<CreateDefaultAddins>
  Raised in: Page<Office Add-in Management>.<OnInit>
    Code lines:
    IF ISEMPTY THEN
      AddinManifestManagement.CreateDefaultAddins(Rec); <=====================
  Raised in: Page<Office Add-in Management>.Action<Reset Default Add-ins>.<OnAction>
    Code lines:
    IF CONFIRM(ResetWarningQst) THEN
      AddinManifestManagement.CreateDefaultAddins(Rec); <=====================
  Raised in: Table<Office Add-in>.PROCEDURE<GetAddins>
    Code lines:
    IF ISEMPTY THEN
      AddinManifestManagement.CreateDefaultAddins(Rec); <=====================
    
    EXIT(FINDSET);
  Raised in: Codeunit<Add-in Deployment Helper>.PROCEDURE<CheckVersion>
    Code lines:
    AddinManifestMgt.GetAddinByHostType(OfficeAddin,HostType);
    AddinManifestMgt.GetAddinVersion(LatestAddinVersion,OfficeAddin."Manifest Codeunit");
    
    // Make sure that the version of the add-in in the table is up to date
    IF OfficeAddin.Version <> LatestAddinVersion THEN BEGIN
      AddinManifestMgt.CreateDefaultAddins(OfficeAddin); <=====================
      COMMIT;
      AddinManifestMgt.GetAddinByHostType(OfficeAddin,HostType);
    END;
    
    ...
Codeunit<Add-in Manifest Management>.PROCEDURE<GetAddin>
  Raised in: Codeunit<Add-in Manifest Management>.PROCEDURE<GetAddinByHostType>
    Code lines:
    GetManifestCodeunit(ManifestCodeunit,HostType);
    GetAddin(OfficeAddin,ManifestCodeunit); <=====================
Codeunit<Add-in Manifest Management>.PROCEDURE<GetAddinID>
Codeunit<Add-in Manifest Management>.PROCEDURE<GetAddinVersion>
  Raised in: Codeunit<Add-in Deployment Helper>.PROCEDURE<CheckVersion>
    Code lines:
    AddinManifestMgt.GetAddinByHostType(OfficeAddin,HostType);
    AddinManifestMgt.GetAddinVersion(LatestAddinVersion,OfficeAddin."Manifest Codeunit"); <=====================
    
    // Make sure that the version of the add-in in the table is up to date
    IF OfficeAddin.Version <> LatestAddinVersion THEN BEGIN
      AddinManifestMgt.CreateDefaultAddins(OfficeAddin);
      COMMIT;
      AddinManifestMgt.GetAddinByHostType(OfficeAddin,HostType);
    END;
    
    ...
Codeunit<Add-in Manifest Management>.PROCEDURE<GetManifestCodeunit>
  Raised in: Codeunit<Add-in Manifest Management>.PROCEDURE<GetAddinByHostType>
    Code lines:
    GetManifestCodeunit(ManifestCodeunit,HostType); <=====================
    GetAddin(OfficeAddin,ManifestCodeunit);
Codeunit<Add-in Manifest Management>.PROCEDURE<OnGenerateManifest>
  Raised in: Codeunit<Add-in Manifest Management>.PROCEDURE<GenerateManifest>
    Code lines:
    // Uses the current value of Manifest and updates XML nodes to reflect the current values
    VerifyHttps;
    IF OfficeAddin."Manifest Codeunit" <> 0 THEN
      OnGenerateManifest(OfficeAddin,ManifestText,OfficeAddin."Manifest Codeunit") <=====================
    ELSE BEGIN
      ManifestText := OfficeAddin.GetDefaultManifestText;
      SetCommonManifestItems(ManifestText);
    END;
Codeunit<Payroll Management>.PROCEDURE<OnImportPayroll>
  Raised in: Codeunit<Payroll Management>.PROCEDURE<ImportPayroll>
    Code lines:
    ...
        EXIT;
    END;
    
    IF EnabledPayrollServiceExists(TempServiceConnection) THEN
      IF SelectPayrollService(TempServiceConnection,SelectPayrollServiceToUseTxt) THEN
        OnImportPayroll(TempServiceConnection,GenJournalLine); <=====================
Codeunit<Payroll Management>.PROCEDURE<OnRegisterPayrollService>
  Raised in: Page<General Journal>.PROCEDURE<SetPayrollAppearance>
    Code lines:
    PayrollManagement.OnRegisterPayrollService(TempPayrollServiceConnection); <=====================
    ImportPayrollTransactionsAvailable := NOT TempPayrollServiceConnection.ISEMPTY;
  Raised in: Codeunit<Payroll Management>.PROCEDURE<ImportPayroll>
    Code lines:
    TempServiceConnection.DELETEALL;
    OnRegisterPayrollService(TempServiceConnection); <=====================
    
    IF TempServiceConnection.ISEMPTY THEN
      ERROR(PayrollServiceNotFoundErr);
    
    IF NOT EnabledPayrollServiceExists(TempServiceConnection) THEN BEGIN
      IF CONFIRM(EnablePayrollServicesQst) THEN
        EnablePayrollService(TempServiceConnection)
      ELSE
    ...
  Raised in: Codeunit<Payroll Management>.PROCEDURE<EnablePayrollService>
    Code lines:
    ...
    IF SelectPayrollService(TempServiceConnection,SelectPayrollServiceToEnableTxt) THEN BEGIN
      SelectedServiceRecordId := TempServiceConnection."Record ID";
      SelectedServiceName := TempServiceConnection.Name;
      SetupPayrollService(TempServiceConnection);
      TempServiceConnection.DELETEALL;
      OnRegisterPayrollService(TempServiceConnection); <=====================
      IF NOT TempServiceConnection.ISEMPTY THEN BEGIN
        TempServiceConnection.SETRANGE("Record ID",SelectedServiceRecordId);
        IF NOT EnabledPayrollServiceExists(TempServiceConnection) THEN
          ERROR(PayrollServiceDisabledErr,SelectedServiceName);
    ...
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnAfterFilterReversalEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<FilterReversalEntry>
    Code lines:
    ...
          ReversalEntry.SETRANGE("Entry Type",ReversalEntry."Entry Type"::Maintenance);
          MaintenanceLedgerEntry := RecVar;
          ReversalEntry.SETRANGE("Entry No.",MaintenanceLedgerEntry."Entry No.");
        END;
      ELSE
        OnAfterFilterReversalEntry(ReversalEntry,RecVar); <=====================
    END;
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnAfterPostReverse>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<Reverse>
    Code lines:
    ...
    IF GenJnlPostLine.GetNextEntryNo = 0 THEN
      GenJnlPostLine.StartPosting(GenJnlLine)
    ELSE
      GenJnlPostLine.ContinuePosting(GenJnlLine);
    
    OnAfterPostReverse(GenJnlLine); <=====================
    
    GenJnlPostLine.SetGLRegReverse(GLReg);
    
    CopyCustLedgEntry(CustLedgEntry,TempCustLedgEntry);
    ...
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnAfterReverseGLEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ReverseGLEntry>
    Code lines:
    ...
          END;
    
          ReverseVAT(GLEntry,GenJnlLine."Source Code");
        UNTIL NEXT(-1) = 0;
    
    OnAfterReverseGLEntry(GLEntry); <=====================
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnApplyCustLedgEntryByReversalOnBeforeInsertDtldCustLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ApplyCustLedgEntryByReversal>
    Code lines:
    ...
    NewDtldCustLedgEntry."Applied Cust. Ledger Entry No." := AppliedEntryNo;
    NewDtldCustLedgEntry."User ID" := USERID;
    NewDtldCustLedgEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
    NewDtldCustLedgEntry."Entry No." := NextDtldCustLedgEntryEntryNo;
    NextDtldCustLedgEntryEntryNo := NextDtldCustLedgEntryEntryNo + 1;
    OnApplyCustLedgEntryByReversalOnBeforeInsertDtldCustLedgEntry(NewDtldCustLedgEntry,DtldCustLedgEntry2); <=====================
    NewDtldCustLedgEntry.INSERT(TRUE);
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnApplyEmplLedgEntryByReversalOnBeforeInsertDtldEmplLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ApplyEmplLedgEntryByReversal>
    Code lines:
    ...
    NewDetailedEmployeeLedgerEntry."Applied Empl. Ledger Entry No." := AppliedEntryNo;
    NewDetailedEmployeeLedgerEntry."User ID" := USERID;
    NewDetailedEmployeeLedgerEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
    NewDetailedEmployeeLedgerEntry."Entry No." := NextDtldEmplLedgEntryNo;
    NextDtldEmplLedgEntryNo += 1;
    OnApplyEmplLedgEntryByReversalOnBeforeInsertDtldEmplLedgEntry(NewDetailedEmployeeLedgerEntry,DetailedEmployeeLedgerEntry2); <=====================
    NewDetailedEmployeeLedgerEntry.INSERT(TRUE);
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnApplyVendLedgEntryByReversalOnBeforeInsertDtldVendLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ApplyVendLedgEntryByReversal>
    Code lines:
    ...
    NewDtldVendLedgEntry."Applied Vend. Ledger Entry No." := AppliedEntryNo;
    NewDtldVendLedgEntry."User ID" := USERID;
    NewDtldVendLedgEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
    NewDtldVendLedgEntry."Entry No." := NextDtldVendLedgEntryEntryNo;
    NextDtldVendLedgEntryEntryNo := NextDtldVendLedgEntryEntryNo + 1;
    OnApplyVendLedgEntryByReversalOnBeforeInsertDtldVendLedgEntry(NewDtldVendLedgEntry,DtldVendLedgEntry2); <=====================
    NewDtldVendLedgEntry.INSERT(TRUE);
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnBeforeReverse>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<Reverse>
    Code lines:
    IsHandled := FALSE;
    OnBeforeReverse(ReversalEntry,ReversalEntry2,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SourceCodeSetup.GET;
    IF ReversalEntry2."Reversal Type" = ReversalEntry2."Reversal Type"::Register THEN
      GLReg2."No." := ReversalEntry2."G/L Register No.";
    
    ReversalEntry.CopyReverseFilters(
    ...
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseBankAccLedgEntryOnBeforeInsert>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ReverseBankAccLedgEntry>
    Code lines:
    ...
        "Reversed by Entry No." := BankAccLedgEntry."Entry No.";
      END;
      BankAccLedgEntry."Reversed by Entry No." := "Entry No.";
      BankAccLedgEntry.Reversed := TRUE;
      BankAccLedgEntry.MODIFY;
      OnReverseBankAccLedgEntryOnBeforeInsert(NewBankAccLedgEntry,BankAccLedgEntry); <=====================
      INSERT;
    END;
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseCustLedgEntryOnBeforeInsertCustLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ReverseCustLedgEntry>
    Code lines:
    ...
      END;
      CustLedgEntry."Applies-to ID" := '';
      CustLedgEntry."Reversed by Entry No." := "Entry No.";
      CustLedgEntry.Reversed := TRUE;
      CustLedgEntry.MODIFY;
      OnReverseCustLedgEntryOnBeforeInsertCustLedgEntry(NewCustLedgEntry,CustLedgEntry); <=====================
      INSERT;
    
      IF NextDtldCustLedgEntryEntryNo = 0 THEN BEGIN
        DtldCustLedgEntry.FINDLAST;
    ...
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseCustLedgEntryOnBeforeInsertDtldCustLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ReverseCustLedgEntry>
    Code lines:
    ...
        NewDtldCustLedgEntry."Cust. Ledger Entry No." := NewEntryNo;
        NewDtldCustLedgEntry."User ID" := USERID;
        NewDtldCustLedgEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
        NewDtldCustLedgEntry."Entry No." := NextDtldCustLedgEntryEntryNo;
        NextDtldCustLedgEntryEntryNo := NextDtldCustLedgEntryEntryNo + 1;
        OnReverseCustLedgEntryOnBeforeInsertDtldCustLedgEntry(NewDtldCustLedgEntry,DtldCustLedgEntry); <=====================
        NewDtldCustLedgEntry.INSERT(TRUE);
      UNTIL DtldCustLedgEntry.NEXT = 0;
    
      ApplyCustLedgEntryByReversal(
    ...
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseEmplLedgEntryOnBeforeInsertDtldEmplLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ReverseEmplLedgEntry>
    Code lines:
    ...
        NewDetailedEmployeeLedgerEntry."Employee Ledger Entry No." := NewEntryNo;
        NewDetailedEmployeeLedgerEntry."User ID" := USERID;
        NewDetailedEmployeeLedgerEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
        NewDetailedEmployeeLedgerEntry."Entry No." := NextDtldEmplLedgEntryNo;
        NextDtldEmplLedgEntryNo += 1;
        OnReverseEmplLedgEntryOnBeforeInsertDtldEmplLedgEntry(NewDetailedEmployeeLedgerEntry,DetailedEmployeeLedgerEntry); <=====================
        NewDetailedEmployeeLedgerEntry.INSERT(TRUE);
      UNTIL DetailedEmployeeLedgerEntry.NEXT = 0;
    
      ApplyEmplLedgEntryByReversal(
    ...
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseEmplLedgEntryOnBeforeInsertEmplLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ReverseEmplLedgEntry>
    Code lines:
    ...
      END;
      EmployeeLedgerEntry."Applies-to ID" := '';
      EmployeeLedgerEntry."Reversed by Entry No." := "Entry No.";
      EmployeeLedgerEntry.Reversed := TRUE;
      EmployeeLedgerEntry.MODIFY;
      OnReverseEmplLedgEntryOnBeforeInsertEmplLedgEntry(NewEmployeeLedgerEntry,EmployeeLedgerEntry); <=====================
      INSERT;
    
      IF NextDtldEmplLedgEntryNo = 0 THEN BEGIN
        DetailedEmployeeLedgerEntry.FINDLAST;
    ...
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseGLEntryOnBeforeInsertGLEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ReverseGLEntry>
    Code lines:
    ...
            GLEntry."Reversed by Entry No." := "Entry No.";
          END;
          "Reversed by Entry No." := GLEntry."Entry No.";
          Reversed := TRUE;
          MODIFY;
          OnReverseGLEntryOnBeforeInsertGLEntry(GLEntry,GenJnlLine,GLEntry2); <=====================
          GenJnlPostLine.InsertGLEntry(GenJnlLine,GLEntry,FALSE);
    
          CASE TRUE OF
            TempCustLedgEntry.GET("Entry No."):
    ...
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseGLEntryOnBeforeLoop>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ReverseGLEntry>
    Code lines:
    WITH GLEntry2 DO
      IF FIND('+') THEN
        REPEAT
          OnReverseGLEntryOnBeforeLoop(GLEntry2,GenJnlLine); <=====================
          IF "Reversed by Entry No." <> 0 THEN
            ERROR(CannotReverseErr);
          CheckDimComb("Entry No.","Dimension Set ID",DATABASE::"G/L Account","G/L Account No.",0,'');
          GLEntry := GLEntry2;
          IF "FA Entry No." <> 0 THEN
            FAInsertLedgerEntry.InsertReverseEntry(
    ...
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseOnBeforeFinishPosting>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<Reverse>
    Code lines:
    ...
    IF NOT TempEmployeeLedgerEntry.ISEMPTY THEN
      ERROR(ReversalMismatchErr,EmployeeLedgerEntry.TABLECAPTION);
    IF NOT TempBankAccLedgEntry.ISEMPTY THEN
      ERROR(ReversalMismatchErr,BankAccLedgEntry.TABLECAPTION);
    
    OnReverseOnBeforeFinishPosting(ReversalEntry,ReversalEntry2,GenJnlPostLine); <=====================
    
    GenJnlPostLine.FinishPosting(GenJnlLine);
    
    IF GLReg2."No." <> 0 THEN
    ...
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseOnBeforeStartPosting>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<Reverse>
    Code lines:
    ...
    SaveReversalEntries(ReversalEntry2,TransactionKey);
    
    GenJnlLine.INIT;
    GenJnlLine."Source Code" := SourceCodeSetup.Reversal;
    
    OnReverseOnBeforeStartPosting(GenJnlLine,ReversalEntry2); <=====================
    
    IF GenJnlPostLine.GetNextEntryNo = 0 THEN
      GenJnlPostLine.StartPosting(GenJnlLine)
    ELSE
    ...
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseVATEntryOnBeforeInsert>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ReverseVAT>
    Code lines:
    ...
            "Reversed by Entry No." := VATEntry."Entry No.";
          END;
          VATEntry."Reversed by Entry No." := "Entry No.";
          VATEntry.Reversed := TRUE;
          VATEntry.MODIFY;
          OnReverseVATEntryOnBeforeInsert(NewVATEntry,VATEntry); <=====================
          INSERT;
          GLEntryVATEntryLink.InsertLink(GLEntry."Entry No.","Entry No.");
          GenJnlPostLine.IncrNextVATEntryNo;
        END;
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseVendLedgEntryOnBeforeInsertDtldVendLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ReverseVendLedgEntry>
    Code lines:
    ...
        NewDtldVendLedgEntry."Vendor Ledger Entry No." := NewEntryNo;
        NewDtldVendLedgEntry."User ID" := USERID;
        NewDtldVendLedgEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
        NewDtldVendLedgEntry."Entry No." := NextDtldVendLedgEntryEntryNo;
        NextDtldVendLedgEntryEntryNo := NextDtldVendLedgEntryEntryNo + 1;
        OnReverseVendLedgEntryOnBeforeInsertDtldVendLedgEntry(NewDtldVendLedgEntry,DtldVendLedgEntry); <=====================
        NewDtldVendLedgEntry.INSERT(TRUE);
      UNTIL DtldVendLedgEntry.NEXT = 0;
    
      ApplyVendLedgEntryByReversal(
    ...
Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<OnReverseVendLedgEntryOnBeforeInsertVendLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Post Reverse>.PROCEDURE<ReverseVendLedgEntry>
    Code lines:
    ...
      END;
      VendLedgEntry."Applies-to ID" := '';
      VendLedgEntry."Reversed by Entry No." := "Entry No.";
      VendLedgEntry.Reversed := TRUE;
      VendLedgEntry.MODIFY;
      OnReverseVendLedgEntryOnBeforeInsertVendLedgEntry(NewVendLedgEntry,VendLedgEntry); <=====================
      INSERT;
    
      IF NextDtldVendLedgEntryEntryNo = 0 THEN BEGIN
        DtldVendLedgEntry.FINDLAST;
    ...
Codeunit<Standard Codes Mgt.>.PROCEDURE<OnBeforeGetPurchRecurringLines>
  Raised in: Codeunit<Standard Codes Mgt.>.PROCEDURE<GetPurchRecurringLines>
    Code lines:
    OnBeforeGetPurchRecurringLines(PurchHeader); <=====================
    
    StandardVendorPurchaseCode.SetFilterByAutomaticAndAlwaysAskCodes(PurchHeader);
    StandardVendorPurchaseCode.SETRANGE("Vendor No.",PurchHeader."Buy-from Vendor No.");
    StandardVendorPurchaseCode.FINDFIRST;
    IF (StandardVendorPurchaseCode.COUNT = 1) AND
       StandardVendorPurchaseCode.IsInsertRecurringLinesOnDocumentAutomatic(PurchHeader)
    THEN
      StandardVendorPurchaseCode.ApplyStdCodesToPurchaseLines(PurchHeader,StandardVendorPurchaseCode)
    ELSE
Codeunit<Standard Codes Mgt.>.PROCEDURE<OnBeforeGetSalesRecurringLines>
  Raised in: Codeunit<Standard Codes Mgt.>.PROCEDURE<GetSalesRecurringLines>
    Code lines:
    OnBeforeGetSalesRecurringLines(SalesHeader); <=====================
    
    StandardCustomerSalesCode.SetFilterByAutomaticAndAlwaysAskCodes(SalesHeader);
    StandardCustomerSalesCode.SETRANGE("Customer No.",SalesHeader."Sell-to Customer No.");
    StandardCustomerSalesCode.FINDFIRST;
    IF (StandardCustomerSalesCode.COUNT = 1) AND
       StandardCustomerSalesCode.IsInsertRecurringLinesOnDocumentAutomatic(SalesHeader)
    THEN
      StandardCustomerSalesCode.ApplyStdCodesToSalesLines(SalesHeader,StandardCustomerSalesCode)
    ELSE
Codeunit<Deferral Utilities>.PROCEDURE<OnAfterCalculateDaysPerPeriod>
  Raised in: Codeunit<Deferral Utilities>.PROCEDURE<CalculateDaysPerPeriod>
    Code lines:
    ...
      DeferralLine.Amount := AmountToDefer;
    
      DeferralLine.INSERT;
    END;
    
    OnAfterCalculateDaysPerPeriod(DeferralHeader,DeferralLine,DeferralTemplate); <=====================
Codeunit<Deferral Utilities>.PROCEDURE<OnAfterCalculateEqualPerPeriod>
  Raised in: Codeunit<Deferral Utilities>.PROCEDURE<CalculateEqualPerPeriod>
    Code lines:
    ...
    
      DeferralLine.Amount := AmountToDefer;
      DeferralLine.INSERT;
    END;
    
    OnAfterCalculateEqualPerPeriod(DeferralHeader,DeferralLine,DeferralTemplate); <=====================
Codeunit<Deferral Utilities>.PROCEDURE<OnAfterCalculateStraightline>
  Raised in: Codeunit<Deferral Utilities>.PROCEDURE<CalculateStraightline>
    Code lines:
    ...
      DeferralLine.Amount := AmountToDefer;
    
      DeferralLine.INSERT;
    END;
    
    OnAfterCalculateStraightline(DeferralHeader,DeferralLine,DeferralTemplate); <=====================
Codeunit<Deferral Utilities>.PROCEDURE<OnAfterCalculateUserDefined>
  Raised in: Codeunit<Deferral Utilities>.PROCEDURE<CalculateUserDefined>
    Code lines:
    ...
    
      // For User-Defined, user must enter in deferral amounts
      DeferralLine.INSERT;
    END;
    
    OnAfterCalculateUserDefined(DeferralHeader,DeferralLine,DeferralTemplate); <=====================
Codeunit<Deferral Utilities>.PROCEDURE<OnAfterCreateDeferralSchedule>
  Raised in: Codeunit<Deferral Utilities>.PROCEDURE<CreateDeferralSchedule>
    Code lines:
    ...
        CalculateDaysPerPeriod(DeferralHeader,DeferralLine,DeferralTemplate);
      CalcMethod::"User-Defined":
        CalculateUserDefined(DeferralHeader,DeferralLine,DeferralTemplate);
    END;
    
    OnAfterCreateDeferralSchedule(DeferralHeader,DeferralLine,DeferralTemplate); <=====================
Codeunit<Deferral Utilities>.PROCEDURE<OnAfterCreateScheduleFromGL>
  Raised in: Codeunit<Deferral Utilities>.PROCEDURE<CreateScheduleFromGL>
    Code lines:
    ...
          PostedDeferralLine.INSERT(TRUE);
        UNTIL DeferralLine.NEXT = 0;
      END;
    END;
    
    OnAfterCreateScheduleFromGL(GenJournalLine,PostedDeferralHeader); <=====================
    
    GenJnlPostLine.RemoveDeferralSchedule(GenJournalLine);
Codeunit<Deferral Utilities>.PROCEDURE<OnBeforeCalculateDaysPerPeriod>
  Raised in: Codeunit<Deferral Utilities>.PROCEDURE<CalculateDaysPerPeriod>
    Code lines:
    OnBeforeCalculateDaysPerPeriod(DeferralHeader,DeferralLine,DeferralTemplate); <=====================
    
    IF IsAccountingPeriodExist(AccountingPeriod,DeferralHeader."Start Date") THEN BEGIN
      AccountingPeriod.SETFILTER("Starting Date",'>=%1',DeferralHeader."Start Date");
      IF NOT AccountingPeriod.FINDFIRST THEN
        ERROR(DeferSchedOutOfBoundsErr);
    END;
    IF AccountingPeriod."Starting Date" = DeferralHeader."Start Date" THEN
      NoExtraPeriod := TRUE
    ELSE
    ...
Codeunit<Deferral Utilities>.PROCEDURE<OnBeforeCalculateEqualPerPeriod>
  Raised in: Codeunit<Deferral Utilities>.PROCEDURE<CalculateEqualPerPeriod>
    Code lines:
    OnBeforeCalculateEqualPerPeriod(DeferralHeader,DeferralLine,DeferralTemplate); <=====================
    
    FOR PeriodicCount := 1 TO DeferralHeader."No. of Periods" DO BEGIN
      InitializeDeferralHeaderAndSetPostDate(DeferralLine,DeferralHeader,PeriodicCount,PostDate);
    
      DeferralLine.VALIDATE("Posting Date",PostDate);
      DeferralLine.Description := CreateRecurringDescription(PostDate,DeferralTemplate."Period Description");
    
      AmountToDefer := DeferralHeader."Amount to Defer";
      IF PeriodicCount = 1 THEN
    ...
Codeunit<Deferral Utilities>.PROCEDURE<OnBeforeCalculateStraightline>
  Raised in: Codeunit<Deferral Utilities>.PROCEDURE<CalculateStraightline>
    Code lines:
    // If the Start Date passed in matches the first date of a financial period, this is essentially the same
    // as the "Equal Per Period" deferral method, so call that function.
    OnBeforeCalculateStraightline(DeferralHeader,DeferralLine,DeferralTemplate); <=====================
    
    IF IsAccountingPeriodExist(AccountingPeriod,DeferralHeader."Start Date") THEN BEGIN
      AccountingPeriod.SETFILTER("Starting Date",'>=%1',DeferralHeader."Start Date");
      IF NOT AccountingPeriod.FINDFIRST THEN
        ERROR(DeferSchedOutOfBoundsErr);
    END;
    IF AccountingPeriod."Starting Date" = DeferralHeader."Start Date" THEN BEGIN
    ...
Codeunit<Deferral Utilities>.PROCEDURE<OnBeforeCalculateUserDefined>
  Raised in: Codeunit<Deferral Utilities>.PROCEDURE<CalculateUserDefined>
    Code lines:
    OnBeforeCalculateUserDefined(DeferralHeader,DeferralLine,DeferralTemplate); <=====================
    
    FOR PeriodicCount := 1 TO DeferralHeader."No. of Periods" DO BEGIN
      InitializeDeferralHeaderAndSetPostDate(DeferralLine,DeferralHeader,PeriodicCount,PostDate);
    
      DeferralLine."Posting Date" := PostDate;
      DeferralLine.Description := CreateRecurringDescription(PostDate,DeferralTemplate."Period Description");
    
      IF GenJnlCheckLine.DateNotAllowed(PostDate) THEN
        ERROR(InvalidPostingDateErr,PostDate);
    ...
Codeunit<Deferral Utilities>.PROCEDURE<OnBeforeCreateDeferralSchedule>
  Raised in: Codeunit<Deferral Utilities>.PROCEDURE<CreateDeferralSchedule>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCreateDeferralSchedule( <=====================
      DeferralCode,DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo,AmountToDefer,CalcMethod,
      StartDate,NoOfPeriods,ApplyDeferralPercentage,DeferralDescription,AdjustStartDate,CurrencyCode,IsHandled);
    IF IsHandled THEN
      EXIT;
    
    InitCurrency(CurrencyCode);
    DeferralTemplate.GET(DeferralCode);
    // "Start Date" passed in needs to be adjusted based on the Deferral Code's Start Date setting
    ...
Codeunit<Deferral Utilities>.PROCEDURE<OnBeforePostedDeferralHeaderInsert>
  Raised in: Codeunit<Deferral Utilities>.PROCEDURE<CreateScheduleFromGL>
    Code lines:
    ...
      PostedDeferralHeader."Line No." := GenJournalLine."Line No.";
      PostedDeferralHeader."Currency Code" := GenJournalLine."Currency Code";
      PostedDeferralHeader."Deferral Account" := DeferralAccount;
      PostedDeferralHeader."Posting Date" := GenJournalLine."Posting Date";
      PostedDeferralHeader."Entry No." := FirstEntryNo;
      OnBeforePostedDeferralHeaderInsert(PostedDeferralHeader,GenJournalLine); <=====================
      PostedDeferralHeader.INSERT(TRUE);
      FilterDeferralLines(
        DeferralLine,DeferralHeader."Deferral Doc. Type"::"G/L",
        GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name",
    ...
Codeunit<Deferral Utilities>.PROCEDURE<OnBeforePostedDeferralLineInsert>
  Raised in: Codeunit<Deferral Utilities>.PROCEDURE<CreateScheduleFromGL>
    Code lines:
    ...
          PostedDeferralLine."Document Type" := 0;
          PostedDeferralLine."Document No." := '';
          PostedDeferralLine."Line No." := GenJournalLine."Line No.";
          PostedDeferralLine."Currency Code" := GenJournalLine."Currency Code";
          PostedDeferralLine."Deferral Account" := DeferralAccount;
          OnBeforePostedDeferralLineInsert(PostedDeferralLine,GenJournalLine); <=====================
          PostedDeferralLine.INSERT(TRUE);
        UNTIL DeferralLine.NEXT = 0;
      END;
    END;
    ...
Codeunit<Data Classification Mgt.>.PROCEDURE<OnGetPrivacyMasterTables>
  Raised in: Codeunit<Data Classification Mgt.>.PROCEDURE<GetPrivacyMasterTables>
    Code lines:
    OnGetPrivacyMasterTables(DataPrivacyEntities); <=====================
Codeunit<Data Classification Mgt.>.PROCEDURE<OnOpenExcelSheet>
  Raised in: Codeunit<Data Classification Mgt.>.PROCEDURE<ExportToExcelSheet>
    Code lines:
    ...
    
    TempExcelBuffer.WriteSheet(DataClassificationWorksheet.CAPTION,COMPANYNAME,USERID);
    TempExcelBuffer.CloseBook;
    
    ShouldOpenFile := TRUE;
    OnOpenExcelSheet(TempExcelBuffer,ShouldOpenFile); <=====================
    IF ShouldOpenFile THEN
      TempExcelBuffer.OpenExcelWithName(ExcelFileNameTxt);
Codeunit<Data Classification Mgt.>.PROCEDURE<OnUploadExcelSheet>
  Raised in: Codeunit<Data Classification Mgt.>.PROCEDURE<ImportExcelSheet>
    Code lines:
    DataSensitivity.SETRANGE("Company Name",COMPANYNAME);
    IF DataSensitivity.ISEMPTY THEN
      FillDataSensitivityTable;
    
    ShouldUploadFile := TRUE;
    OnUploadExcelSheet(TempExcelBuffer,ShouldUploadFile); <=====================
    IF ShouldUploadFile THEN BEGIN
      FileName := '';
      UPLOADINTOSTREAM(
        ImportTitleTxt,
    ...
Codeunit<Reversal-Post>.PROCEDURE<OnBeforeGLRegPostingReportPrint>
  Raised in: Codeunit<Reversal-Post>.<OnRun>
    Code lines:
    ...
    IF PrintRegister THEN BEGIN
      GenJnlTemplate.VALIDATE(Type);
      IF GenJnlTemplate."Posting Report ID" <> 0 THEN
        IF GLReg.FINDLAST THEN BEGIN
          GLReg.SETRECFILTER;
          OnBeforeGLRegPostingReportPrint(GenJnlTemplate."Posting Report ID",FALSE,FALSE,GLReg,Handled); <=====================
          IF NOT Handled THEN
            REPORT.RUN(GenJnlTemplate."Posting Report ID",FALSE,FALSE,GLReg);
        END;
    END;
    ...
Codeunit<Data Migration Mgt.>.PROCEDURE<OnAfterMigrationFinished>
  Raised in: Codeunit<Data Migration Mgt.>.<OnRun>
    Code lines:
    ...
      EXIT;
    
    // migrate any other tables if any
    CheckAbortAndMigrateRemainingEntities(DataMigrationStatus,Retry);
    
    OnAfterMigrationFinished(DataMigrationStatus,FALSE,StartTime,Retry); <=====================
  Raised in: Codeunit<Data Migration Mgt.>.PROCEDURE<CheckAbortRequestedAndMigrateEntity>
    Code lines:
    IF AbortRequested THEN BEGIN
      DataMigrationStatus.RESET;
      DataMigrationStatus.SETRANGE("Migration Type",DataMigrationStatus."Migration Type");
      SetAbortStatus(DataMigrationStatus);
      OnAfterMigrationFinished(DataMigrationStatus,TRUE,StartTime,ReRun); <=====================
      EXIT(TRUE);
    END;
    
    DataMigrationStatus.SETRANGE("Destination Table ID",DestinationTableId);
    HandleEntityMigration(DataMigrationStatus,BaseAppCodeunitToRun,ReRun);
  Raised in: Codeunit<Data Migration Mgt.>.PROCEDURE<CheckAbortAndMigrateRemainingEntities>
    Code lines:
    IF AbortRequested THEN BEGIN
      DataMigrationStatus.RESET;
      DataMigrationStatus.SETRANGE("Migration Type",DataMigrationStatus."Migration Type");
      SetAbortStatus(DataMigrationStatus);
      OnAfterMigrationFinished(DataMigrationStatus,TRUE,StartTime,Retry); <=====================
      EXIT;
    END;
    
    DataMigrationStatus.SETFILTER("Destination Table ID",STRSUBSTNO('<>%1&<>%2&<>%3&<>%4',
        DATABASE::Item,
    ...
Codeunit<Data Migration Mgt.>.PROCEDURE<OnBeforeMigrationStarted>
  Raised in: Codeunit<Data Migration Mgt.>.<OnRun>
    Code lines:
    EnableDataMigrationNotificationForAllUsers;
    DataMigrationStatus.GET("Record ID to Process");
    DataMigrationStatus.SETRANGE("Migration Type",DataMigrationStatus."Migration Type");
    Retry := "Parameter String" = RetryTxt;
    
    OnBeforeMigrationStarted(DataMigrationStatus,Retry); <=====================
    
    IF NOT Retry THEN BEGIN
      DataMigrationStatus.SETRANGE(Status,DataMigrationStatus.Status::Pending);
      DataMigrationFacade.OnFillStagingTables;
    ...
Codeunit<Data Migration Mgt.>.PROCEDURE<OnBeforeStartMigration>
  Raised in: Codeunit<Data Migration Mgt.>.PROCEDURE<StartMigration>
    Code lines:
    CheckMigrationInProgress(Retry);
    
    StartNewSession := TRUE;
    CheckExistingData := TRUE;
    OnBeforeStartMigration(StartNewSession,CheckExistingData); <=====================
    
    IF CheckExistingData THEN
      CheckDataAlreadyExist(MigrationType,Retry);
    
    DataMigrationStatus.RESET;
    ...
Codeunit<Assisted Company Setup>.PROCEDURE<OnBeforeScheduleTask>
  Raised in: Codeunit<Assisted Company Setup>.PROCEDURE<ScheduleConfigPackageImport>
    Code lines:
    WITH AssistedCompanySetupStatus DO BEGIN
      LOCKTABLE;
      GET(Name);
      OnBeforeScheduleTask(DoNotScheduleTask,TaskID); <=====================
      IF DoNotScheduleTask THEN
        "Task ID" := TaskID
      ELSE
        IF TASKSCHEDULER.CANCREATETASK THEN
          "Task ID" :=
            TASKSCHEDULER.CREATETASK(
    ...
Codeunit<Data Migration Notifier>.PROCEDURE<SkipShowingCustomerContactCreationNotification>
  Raised in: Codeunit<Data Migration Notifier>.PROCEDURE<ShowCustomerContactCreationNotification>
    Code lines:
    SkipShowingCustomerContactCreationNotification(SkipNotification); <=====================
    IF SkipNotification THEN
      EXIT;
    
    NotificationID := CheckCustVendNotificationIdEnabled(SourceTableID);
    IF ISNULLGUID(NotificationID) THEN
      EXIT;
    CASE SourceTableID OF
      DATABASE::Customer:
        IF NOT ContactBusinessRelation.FindByRelation(ContactBusinessRelation."Link to Table"::Customer,SourceNo) THEN
    ...
Codeunit<Encrypted Key/Value Management>.PROCEDURE<OnCleanUpEvent>
  Raised in: Codeunit<Encrypted Key/Value Management>.PROCEDURE<Cleanup>
    Code lines:
    ...
    
    LogActivity(CleanupEventTxt,RequestInitTxt,TRUE);
    COMMIT;
    
    ErrorOccured := FALSE;
    OnCleanUpEvent(ErrorOccured); <=====================
    
    IF NOT ErrorOccured THEN
      EncryptedKeyValue.DELETEALL;
    
    ...
Codeunit<Excel Data Migrator>.PROCEDURE<OnDownloadTemplate>
  Raised in: Codeunit<Excel Data Migrator>.PROCEDURE<ExportExcelTemplate>
    Code lines:
    OnDownloadTemplate(HideDialog); <=====================
    EXIT(ExportExcelTemplateByFileName(FileName,HideDialog));
Codeunit<Excel Data Migrator>.PROCEDURE<OnUploadFile>
  Raised in: Codeunit<Excel Data Migrator>.PROCEDURE<ImportExcelData>
    Code lines:
    OnUploadFile(ServerFile); <=====================
    IF ServerFile = '' THEN
      ServerFile := COPYSTR(FileManagement.UploadFile(ImportFromExcelTxt,ExcelFileExtensionTok),
          1,MAXSTRLEN(ServerFile));
    
    IF ServerFile <> '' THEN BEGIN
      ImportExcelDataByFileName(ServerFile);
      EXIT(TRUE);
    END;
    
Codeunit<Sandbox Deploymt. Cleanup>.PROCEDURE<OnClearConfiguration>
  Raised in: Codeunit<Sandbox Deploymt. Cleanup>.PROCEDURE<RaiseEventForEveryCompany>
    Code lines:
    IF Company.FINDSET THEN
      REPEAT
        OnClearConfiguration(Company.Name); <=====================
      UNTIL Company.NEXT = 0;
    OnClearConfiguration(''); <=====================
  Raised in: Codeunit<Sandbox Deploymt. Cleanup>.PROCEDURE<RaiseEventForEveryCompany>
    Code lines:
    IF Company.FINDSET THEN
      REPEAT
        OnClearConfiguration(Company.Name); <=====================
      UNTIL Company.NEXT = 0;
    OnClearConfiguration(''); <=====================
Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<OnAfterBindSubscription>
  Raised in: Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<Preview>
    Code lines:
    ...
      ERROR(RecVarTypeErr);
    
    BINDSUBSCRIPTION(PostingPreviewEventHandler);
    ErrorMessageMgt.Activate(ErrorMessageHandler);
    ErrorMessageMgt.PushContext(RecVar,0,PreviewModeErr);
    OnAfterBindSubscription; <=====================
    
    RunResult := RunPreview(Subscriber,RecVar);
    
    UNBINDSUBSCRIPTION(PostingPreviewEventHandler);
    ...
Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<OnAfterIsActive>
  Raised in: Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<IsActive>
    Code lines:
    // The lookup to event subscription system virtual table is the performance killer.
    // We call subscriber CU 20 to get active state of posting preview context.
    OnSystemSetPostingPreviewActive(Result);
    
    OnAfterIsActive(Result); <=====================
    EXIT(Result);
Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<OnAfterUnbindSubscription>
  Raised in: Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<Preview>
    Code lines:
    ...
    OnAfterBindSubscription;
    
    RunResult := RunPreview(Subscriber,RecVar);
    
    UNBINDSUBSCRIPTION(PostingPreviewEventHandler);
    OnAfterUnbindSubscription; <=====================
    
    // The OnRunPreview event expects subscriber following template: Result := <Codeunit>.RUN
    // So we assume RunPreview returns FALSE with the error.
    // To prevent return FALSE without thrown error we check error call stack.
    ...
Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<OnBeforeThrowError>
  Raised in: Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<ThrowError>
    Code lines:
    OnBeforeThrowError; <=====================
    ERROR(PreviewModeErr);
Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<OnRunPreview>
  Raised in: Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<RunPreview>
    Code lines:
    OnRunPreview(Result,Subscriber,RecVar); <=====================
    EXIT(Result);
Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<OnSystemSetPostingPreviewActive>
  Raised in: Codeunit<Gen. Jnl.-Post Preview>.PROCEDURE<IsActive>
    Code lines:
    // The lookup to event subscription system virtual table is the performance killer.
    // We call subscriber CU 20 to get active state of posting preview context.
    OnSystemSetPostingPreviewActive(Result); <=====================
    
    OnAfterIsActive(Result);
    EXIT(Result);
Codeunit<Report Selection Mgt.>.PROCEDURE<OnAfterInitReportSelectionBank>
  Raised in: Codeunit<Report Selection Mgt.>.PROCEDURE<InitReportSelectionBank>
    Code lines:
    ...
      InitReportUsage(Usage::"B.Stmt");
      InitReportUsage(Usage::"B.Recon.Test");
      InitReportUsage(Usage::"B.Check");
    END;
    
    OnAfterInitReportSelectionBank; <=====================
Codeunit<Report Selection Mgt.>.PROCEDURE<OnAfterInitReportSelectionCust>
  Raised in: Codeunit<Report Selection Mgt.>.PROCEDURE<InitReportSelectionCust>
    Code lines:
    ...
      InitReportUsage(Usage::"Rem.Test");
      InitReportUsage(Usage::"F.C.Test");
      InitReportUsage(Usage::"C.Statement");
    END;
    
    OnAfterInitReportSelectionCust; <=====================
Codeunit<Report Selection Mgt.>.PROCEDURE<OnAfterInitReportSelectionInvt>
  Raised in: Codeunit<Report Selection Mgt.>.PROCEDURE<InitReportSelectionInvt>
    Code lines:
    ...
      InitReportUsage(Usage::"P.Phys.Invt.Rec.");
      InitReportUsage(Usage::"Asm.Order");
      InitReportUsage(Usage::"P.Asm.Order");
    END;
    
    OnAfterInitReportSelectionInvt; <=====================
Codeunit<Report Selection Mgt.>.PROCEDURE<OnAfterInitReportSelectionProd>
  Raised in: Codeunit<Report Selection Mgt.>.PROCEDURE<InitReportSelectionProd>
    Code lines:
    ...
      InitReportUsage(Usage::M1);
      InitReportUsage(Usage::M2);
      InitReportUsage(Usage::M3);
    END;
    
    OnAfterInitReportSelectionProd; <=====================
Codeunit<Report Selection Mgt.>.PROCEDURE<OnAfterInitReportSelectionPurch>
  Raised in: Codeunit<Report Selection Mgt.>.PROCEDURE<InitReportSelectionPurch>
    Code lines:
    ...
      InitReportUsage(Usage::"P.Arch.Order");
      InitReportUsage(Usage::"P.Arch.Return");
      InitReportUsage(Usage::"P.Arch.Blanket");
    END;
    
    OnAfterInitReportSelectionPurch; <=====================
Codeunit<Report Selection Mgt.>.PROCEDURE<OnAfterInitReportSelectionSales>
  Raised in: Codeunit<Report Selection Mgt.>.PROCEDURE<InitReportSelectionSales>
    Code lines:
    ...
      InitReportUsage(Usage::"S.Arch.Return");
      InitReportUsage(Usage::"S.Arch.Blanket");
      InitReportUsage(Usage::"S.Order Pick Instruction");
    END;
    
    OnAfterInitReportSelectionSales; <=====================
Codeunit<Report Selection Mgt.>.PROCEDURE<OnAfterInitReportSelectionServ>
  Raised in: Codeunit<Report Selection Mgt.>.PROCEDURE<InitReportSelectionServ>
    Code lines:
    ...
      InitReportUsage(Usage::"SM.Contract Quote");
      InitReportUsage(Usage::"SM.Contract");
      InitReportUsage(Usage::"SM.Test");
    END;
    
    OnAfterInitReportSelectionServ; <=====================
Codeunit<Report Selection Mgt.>.PROCEDURE<OnAfterInitReportSelectionWhse>
  Raised in: Codeunit<Report Selection Mgt.>.PROCEDURE<InitReportSelectionWhse>
    Code lines:
    ...
      InitReportUsageWhse(Usage::"Posted Receipt");
      InitReportUsageWhse(Usage::Shipment);
      InitReportUsageWhse(Usage::"Posted Shipment");
    END;
    
    OnAfterInitReportSelectionWhse; <=====================
Codeunit<Report Selection Mgt.>.PROCEDURE<OnInitReportUsage>
  Raised in: Codeunit<Report Selection Mgt.>.PROCEDURE<InitReportUsage>
    Code lines:
    ...
        Usage::"S.Order Pick Instruction":
          InsertRepSelection(Usage::"S.Order Pick Instruction",'1',REPORT::"Pick Instruction");
        Usage::"C.Statement":
          InsertRepSelection(Usage::"C.Statement",'1',REPORT::"Standard Statement");
        ELSE
          OnInitReportUsage(ReportUsage); <=====================
      END;
Codeunit<Report Selection Mgt.>.PROCEDURE<OnInitReportUsageWhse>
  Raised in: Codeunit<Report Selection Mgt.>.PROCEDURE<InitReportUsageWhse>
    Code lines:
    ...
        Usage::Shipment:
          InsertRepSelectionWhse(Usage::Shipment,'1',REPORT::"Whse. - Shipment");
        Usage::"Posted Shipment":
          InsertRepSelectionWhse(Usage::"Posted Shipment",'1',REPORT::"Whse. - Posted Shipment");
        ELSE
          OnInitReportUsageWhse(ReportUsage); <=====================
      END;
Codeunit<Update Acc. Sched. KPI Data>.PROCEDURE<OnCalcValuesOnAfterCalculateValue>
  Raised in: Codeunit<Update Acc. Sched. KPI Data>.PROCEDURE<CalcValues>
    Code lines:
    ...
    
    ColNo := 0;
    TempColumnLayout.FINDSET;
    REPEAT
      CalculatedValue := AccSchedManagement.CalcCell(TempAccScheduleLine,TempColumnLayout,FALSE);
      OnCalcValuesOnAfterCalculateValue(TempAccScheduleLine,TempColumnLayout,CalculatedValue); <=====================
    
      ColNo += 1;
      CASE ColNo OF
        1:
    ...
Codeunit<Update Acc. Sched. KPI Data>.PROCEDURE<OnInitSetupDataAnAfterTempAccScheduleLineInsert>
  Raised in: Codeunit<Update Acc. Sched. KPI Data>.PROCEDURE<InitSetupData>
    Code lines:
    ...
          TempAccScheduleLine."Line No." := NoOfActiveAccSchedLines;
          TempAccScheduleLine.INSERT;
        UNTIL AccScheduleLine.NEXT = 0;
    UNTIL AccSchedKPIWebSrvLine.NEXT = 0;
    
    OnInitSetupDataAnAfterTempAccScheduleLineInsert(TempAccScheduleLine,NoOfActiveAccSchedLines); <=====================
    
    WITH ColumnLayout DO BEGIN
      // Net Change Actual
      InsertTempColumn("Column Type"::"Net Change","Ledger Entry Type"::Entries,FALSE);
    ...
Codeunit<Company-Initialize>.PROCEDURE<OnBeforeOnRun>
  Raised in: Codeunit<Company-Initialize>.<OnRun>
    Code lines:
    Window.OPEN(Text000);
    
    OnBeforeOnRun; <=====================
    
    InitSetupTables;
    AddOnIntegrMgt.InitMfgSetup;
    InitSourceCodeSetup;
    InitStandardTexts;
    InitReportSelection;
    InitJobWIPMethods;
    ...
Codeunit<Company-Initialize>.PROCEDURE<OnCompanyInitialize>
  Raised in: Codeunit<Company-Initialize>.<OnRun>
    Code lines:
    ...
    WorkflowSetup.InitWorkflow;
    TransformationRule.CreateDefaultTransformations;
    InitElectronicFormats;
    InitApplicationAreasForSaaS;
    
    OnCompanyInitialize; <=====================
    
    Window.CLOSE;
    
    COMMIT;
Codeunit<Posting Preview Event Handler>.PROCEDURE<OnAfterFillDocumentEntry>
  Raised in: Codeunit<Posting Preview Event Handler>.PROCEDURE<FillDocumentEntry>
    Code lines:
    ...
    InsertDocumentEntry(TempServiceLedgerEntry,TempDocumentEntry);
    InsertDocumentEntry(TempWarrantyLedgerEntry,TempDocumentEntry);
    InsertDocumentEntry(TempMaintenanceLedgerEntry,TempDocumentEntry);
    InsertDocumentEntry(TempJobLedgerEntry,TempDocumentEntry);
    
    OnAfterFillDocumentEntry(TempDocumentEntry); <=====================
Codeunit<Posting Preview Event Handler>.PROCEDURE<OnAfterShowEntries>
  Raised in: Codeunit<Posting Preview Event Handler>.PROCEDURE<ShowEntries>
    Code lines:
    ...
      DATABASE::"Maintenance Ledger Entry":
        PAGE.RUN(PAGE::"Maint. Ledg. Entries Preview",TempMaintenanceLedgerEntry);
      DATABASE::"Job Ledger Entry":
        PAGE.RUN(PAGE::"Job Ledger Entries Preview",TempJobLedgerEntry);
      ELSE
        OnAfterShowEntries(TableNo); <=====================
    END;
Codeunit<ML Prediction Management>.PROCEDURE<OnBeforeEvaluate>
  Raised in: Codeunit<ML Prediction Management>.PROCEDURE<Evaluate>
    Code lines:
    CallAzureEndPoint := TRUE;
    OnBeforeEvaluate(Model,Quality,RecordVar,CallAzureEndPoint); <=====================
    IF NOT CallAzureEndPoint THEN
      EXIT;
    AzureMLConnector.Initialize(ApiKey,ApiUri,ApiTimeout);
    TestInitialized;
    AzureMLConnector.AddParameter('method','evaluate');
    AzureMLConnector.AddParameter('model',Model);
    IF CreateInput THEN BEGIN
      IF NOT AzureMLConnector.SendToAzureMLInternal(UsingKeyvaultCredentials) THEN
    ...
Codeunit<ML Prediction Management>.PROCEDURE<OnBeforePredict>
  Raised in: Codeunit<ML Prediction Management>.PROCEDURE<Predict>
    Code lines:
    CallAzureEndPoint := TRUE;
    OnBeforePredict(RecordVar,CallAzureEndPoint); <=====================
    IF NOT CallAzureEndPoint THEN
      EXIT;
    AzureMLConnector.Initialize(ApiKey,ApiUri,ApiTimeout);
    TestInitialized;
    AzureMLConnector.AddParameter('method','predict');
    AzureMLConnector.AddParameter('model',Model);
    CreateInput;
    IF NOT AzureMLConnector.SendToAzureMLInternal(UsingKeyvaultCredentials) THEN
    ...
Codeunit<ML Prediction Management>.PROCEDURE<OnBeforeTrain>
  Raised in: Codeunit<ML Prediction Management>.PROCEDURE<Train>
    Code lines:
    CallAzureEndPoint := TRUE;
    OnBeforeTrain(Model,Quality,CallAzureEndPoint); <=====================
    IF NOT CallAzureEndPoint THEN
      EXIT;
    AzureMLConnector.Initialize(ApiKey,ApiUri,ApiTimeout);
    TestInitialized;
    AzureMLConnector.AddParameter('method','train');
    AzureMLConnector.AddParameter('train_percent',FORMAT(TrainingPercent,0,9));
    CreateInput;
    IF NOT AzureMLConnector.SendToAzureMLInternal(UsingKeyvaultCredentials) THEN
    ...
Codeunit<Image Analysis Management>.PROCEDURE<OnAfterImageAnalysis>
  Raised in: Codeunit<Image Analysis Management>.PROCEDURE<Analyze>
    Code lines:
    ...
          ELSE
            IF LastError = '' THEN
              SetLastError(GenericErrorErr,FALSE);
    
    ImageAnalysisResult.SetJson(JSONManagement,AnalysisType);
    OnAfterImageAnalysis(ImageAnalysisResult); <=====================
    
    EXIT(NOT HasError);
Codeunit<Image Analysis Management>.PROCEDURE<OnBeforeImageAnalysis>
  Raised in: Codeunit<Image Analysis Management>.PROCEDURE<Analyze>
    Code lines:
    Initialize;
    SetLastError('',FALSE);
    OnBeforeImageAnalysis; <=====================
    
    IF (Key = '') OR (Uri = '') THEN
      SetLastError(NoApiKeyUriErr,FALSE)
    ELSE
      IF ImagePath = '' THEN
        SetLastError(NoImageErr,FALSE)
      ELSE
    ...
Codeunit<Item Jnl.-Check Line>.PROCEDURE<OnAfterAssignInvtPickRequired>
  Raised in: Codeunit<Item Jnl.-Check Line>.PROCEDURE<WhseOrderHandlingRequired>
    Code lines:
    ...
          IF ItemJnlLine.Quantity < 0 THEN
            EXIT(TRUE);
      END;
    
    InvtPickLocation := NOT Location."Require Shipment" AND Location."Require Pick" ;
    OnAfterAssignInvtPickRequired(ItemJnlLine,Location,InvtPickLocation); <=====================
    IF InvtPickLocation THEN
      CASE ItemJnlLine."Entry Type" OF
        ItemJnlLine."Entry Type"::Output:
          IF ItemJnlLine.Quantity < 0 THEN
    ...
Codeunit<Item Jnl.-Check Line>.PROCEDURE<OnAfterAssignInvtPutAwayRequired>
  Raised in: Codeunit<Item Jnl.-Check Line>.PROCEDURE<WhseOrderHandlingRequired>
    Code lines:
    InvtPutAwayLocation := NOT Location."Require Receive" AND Location."Require Put-away";
    OnAfterAssignInvtPutAwayRequired(ItemJnlLine,Location,InvtPutAwayLocation); <=====================
    IF InvtPutAwayLocation THEN
      CASE ItemJnlLine."Entry Type" OF
        ItemJnlLine."Entry Type"::Output:
          IF ItemJnlLine.Quantity >= 0 THEN
            EXIT(TRUE);
        ItemJnlLine."Entry Type"::Consumption,
        ItemJnlLine."Entry Type"::"Assembly Consumption":
          IF ItemJnlLine.Quantity < 0 THEN
    ...
Codeunit<Item Jnl.-Check Line>.PROCEDURE<OnAfterCheckItemJnlLine>
  Raised in: Codeunit<Item Jnl.-Check Line>.PROCEDURE<RunCheck>
    Code lines:
    ...
         (NOT GenJnlPostPreview.IsActive)
      THEN
        CheckItemJournalLineRestriction;
    END;
    
    OnAfterCheckItemJnlLine(ItemJnlLine); <=====================
Codeunit<Item Jnl.-Check Line>.PROCEDURE<OnBeforeCheckBins>
  Raised in: Codeunit<Item Jnl.-Check Line>.PROCEDURE<CheckBins>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckBins(ItemJnlLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH ItemJnlLine DO BEGIN
      IF ("Item Charge No." <> '') OR ("Value Entry Type" <> "Value Entry Type"::"Direct Cost") OR (Quantity = 0) THEN
        EXIT;
    
      IF "Entry Type" = "Entry Type"::Transfer THEN BEGIN
    ...
Codeunit<Item Jnl.-Check Line>.PROCEDURE<OnBeforeCheckDimensions>
  Raised in: Codeunit<Item Jnl.-Check Line>.PROCEDURE<CheckDimensions>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckDimensions(ItemJnlLine,CalledFromAdjustment,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH ItemJnlLine DO
      IF NOT IsValueEntryForDeletedItem AND NOT Correction AND NOT CalledFromAdjustment THEN BEGIN
        IF NOT DimMgt.CheckDimIDComb("Dimension Set ID") THEN
          ERROR(DimCombBlockedErr,"Journal Template Name","Journal Batch Name","Line No.",DimMgt.GetDimCombErr);
        IF "Item Charge No." = '' THEN BEGIN
    ...
Codeunit<Item Jnl.-Check Line>.PROCEDURE<OnBeforeCheckLocation>
  Raised in: Codeunit<Item Jnl.-Check Line>.PROCEDURE<RunCheck>
    Code lines:
    ...
          FIELDERROR("Document Date",Text000);
    
      TESTFIELD("Gen. Prod. Posting Group");
    
      IsHandled := FALSE;
      OnBeforeCheckLocation(ItemJnlLine,IsHandled); <=====================
      IF NOT IsHandled THEN
        IF InvtSetup."Location Mandatory" AND
           ("Value Entry Type" = "Value Entry Type"::"Direct Cost") AND
           (Quantity <> 0) AND
    ...
Codeunit<Item Jnl.-Check Line>.PROCEDURE<OnBeforeCheckWarehouse>
  Raised in: Codeunit<Item Jnl.-Check Line>.PROCEDURE<CheckWarehouse>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckWarehouse(ItemJnlLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF (ItemJnlLine.Quantity = 0) OR
       (ItemJnlLine."Item Charge No." <> '') OR
       (ItemJnlLine."Value Entry Type" IN
        [ItemJnlLine."Value Entry Type"::Revaluation,ItemJnlLine."Value Entry Type"::Rounding]) OR
       ItemJnlLine.Adjustment
    ...
Codeunit<Res. Jnl.-Check Line>.PROCEDURE<OnAfterRunCheck>
  Raised in: Codeunit<Res. Jnl.-Check Line>.PROCEDURE<RunCheck>
    Code lines:
    ...
            DimMgt.GetDimValuePostingErr)
        ELSE
          ERROR(DimMgt.GetDimValuePostingErr);
    END;
    
    OnAfterRunCheck(ResJnlLine); <=====================
Codeunit<Res. Jnl.-Check Line>.PROCEDURE<OnBeforeRunCheck>
  Raised in: Codeunit<Res. Jnl.-Check Line>.PROCEDURE<RunCheck>
    Code lines:
    IsHandled := FALSE;
    OnBeforeRunCheck(ResJnlLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    GLSetup.GET;
    WITH ResJnlLine DO BEGIN
      IF EmptyLine THEN
        EXIT;
    
    ...
Codeunit<O365 HTML Templ. Mgt.>.PROCEDURE<OnResizeCompanyLogo>
  Raised in: Codeunit<O365 HTML Templ. Mgt.>.PROCEDURE<FillCompanyLogo>
    Code lines:
    ...
    TempBlobResized.COPY(TempBlob);
    
    IF ImageHandlerManagement.ScaleDownFromBlob(TempBlobResized,MaxWidth,MaxHeight) THEN
      TempBlob.COPY(TempBlobResized);
    
    OnResizeCompanyLogo(TempBlob); <=====================
    
    GetCompanyLogoScaledDimensions(TempBlob,Width,Height,MaxWidth,MaxHeight);
    
    FillParameterValue(HTMLText,'CompanyLogo',TempBlob.GetHTMLImgSrc);
    ...
Codeunit<Res. Jnl.-Post Line>.PROCEDURE<OnAfterPostResJnlLine>
  Raised in: Codeunit<Res. Jnl.-Post Line>.PROCEDURE<Code>
    Code lines:
    ...
      ResLedgEntry.INSERT(TRUE);
    
      NextEntryNo := NextEntryNo + 1;
    END;
    
    OnAfterPostResJnlLine(ResJnlLine); <=====================
Codeunit<Res. Jnl.-Post Line>.PROCEDURE<OnBeforePostResJnlLine>
  Raised in: Codeunit<Res. Jnl.-Post Line>.PROCEDURE<Code>
    Code lines:
    OnBeforePostResJnlLine(ResJnlLine); <=====================
    
    WITH ResJnlLine DO BEGIN
      IF EmptyLine THEN
        EXIT;
    
      ResJnlCheckLine.RunCheck(ResJnlLine);
    
      IF NextEntryNo = 0 THEN BEGIN
        ResLedgEntry.LOCKTABLE;
    ...
Codeunit<Res. Jnl.-Post Line>.PROCEDURE<OnBeforeResLedgEntryInsert>
  Raised in: Codeunit<Res. Jnl.-Post Line>.PROCEDURE<Code>
    Code lines:
    ...
      IF ResLedgEntry."Entry Type" = ResLedgEntry."Entry Type"::Usage THEN BEGIN
        PostTimeSheetDetail(ResJnlLine,ResLedgEntry."Quantity (Base)");
        ResLedgEntry.Chargeable := IsChargable(ResJnlLine,ResLedgEntry.Chargeable);
      END;
    
      OnBeforeResLedgEntryInsert(ResLedgEntry,ResJnlLine); <=====================
    
      ResLedgEntry.INSERT(TRUE);
    
      NextEntryNo := NextEntryNo + 1;
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterApplyItemLedgEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<ApplyItemLedgEntry>
    Code lines:
    ...
            END;
          OldItemLedgEntry.COPY(ItemLedgEntry2)
        END;
    
        OldItemLedgEntry.CALCFIELDS("Reserved Quantity");
        OnAfterApplyItemLedgEntryOnBeforeCalcAppliedQty(OldItemLedgEntry,ItemLedgEntry); <=====================
    
        IF ABS(OldItemLedgEntry."Remaining Quantity" - OldItemLedgEntry."Reserved Quantity") >
           ABS(ItemLedgEntry."Remaining Quantity" - ItemLedgEntry."Reserved Quantity")
        THEN
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterApplyItemLedgEntryOnBeforeCalcAppliedQty>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<ApplyItemLedgEntry>
    Code lines:
    ...
            END;
          OldItemLedgEntry.COPY(ItemLedgEntry2)
        END;
    
        OldItemLedgEntry.CALCFIELDS("Reserved Quantity");
        OnAfterApplyItemLedgEntryOnBeforeCalcAppliedQty(OldItemLedgEntry,ItemLedgEntry); <=====================
    
        IF ABS(OldItemLedgEntry."Remaining Quantity" - OldItemLedgEntry."Reserved Quantity") >
           ABS(ItemLedgEntry."Remaining Quantity" - ItemLedgEntry."Reserved Quantity")
        THEN
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterApplyItemLedgEntrySetFilters>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<ApplyItemLedgEntrySetFilters>
    Code lines:
    ...
          SETRANGE("Order Type",FromItemLedgEntry."Order Type"::Transfer);
          SETRANGE("Order No.",FromItemLedgEntry."Order No.");
        END;
    END;
    
    OnAfterApplyItemLedgEntrySetFilters(ToItemLedgEntry,FromItemLedgEntry,ItemJnlLine); <=====================
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterCalcPosShares>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<CalcPosShares>
    Code lines:
    ...
        PurchVarACY := "Unit Cost (ACY)" * "Invoiced Quantity" - DirCostACY - OvhdCostACY;
      END;
      CalcUnitCost := (DirCost <> 0) AND ("Unit Cost" = 0);
    END;
    
    OnAfterCalcPosShares( <=====================
      ItemJnlLine,DirCost,OvhdCost,PurchVar,DirCostACY,OvhdCostACY,PurchVarACY,CalcUnitCost,CalcPurchVar,Expected);
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterCalcPurchCorrShares>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InitValueEntry>
    Code lines:
    ...
          IF ("Invoiced Quantity" < 0) AND ("Applies-to Entry" <> 0) AND
             ("Entry Type" = "Entry Type"::Purchase) AND ("Item Charge No." = '') AND
             (ValueEntry."Entry Type" = ValueEntry."Entry Type"::"Direct Cost")
          THEN BEGIN
            CalcPurchCorrShares(OverheadAmount,OverheadAmountACY,VarianceAmount,VarianceAmountACY);
            OnAfterCalcPurchCorrShares( <=====================
              ValueEntry,ItemJnlLine,OverheadAmount,OverheadAmountACY,VarianceAmount,VarianceAmountACY);
          END;
        END
      END ELSE BEGIN
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterCheckItemTracking>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<CheckItemTracking>
    Code lines:
    ...
        ItemJnlLine.TESTFIELD("New Serial No.");
      IF LotRequired THEN
        ItemJnlLine.TESTFIELD("New Lot No.");
    END;
    
    OnAfterCheckItemTracking(ItemJnlLine); <=====================
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterCheckItemTrackingInfo>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<CheckItemTrackingInfo>
    Code lines:
    ...
        THEN
          LotNoInfo.TESTFIELD(Blocked,FALSE);
      END;
    END;
    
    OnAfterCheckItemTrackingInfo(ItemJnlLine2,TrackingSpecification,SNInfoRequired,LotInfoRequired); <=====================
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterCreateItemJnlLineFromEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<CreateItemJnlLineFromEntry>
    Code lines:
    ...
      "Item No." := ItemLedgEntry."Item No.";
      "Serial No." := ItemLedgEntry."Serial No.";
      "Lot No." := ItemLedgEntry."Lot No.";
    END;
    
    OnAfterCreateItemJnlLineFromEntry(ItemJnlLine,ItemLedgEntry); <=====================
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInitItemLedgEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InitItemLedgEntry>
    Code lines:
    ...
      END;
      IF (ItemLedgEntry.Quantity < 0) AND ("Entry Type" <> "Entry Type"::Transfer) THEN
        ItemLedgEntry."Shipped Qty. Not Returned" := ItemLedgEntry.Quantity;
    END;
    
    OnAfterInitItemLedgEntry(ItemLedgEntry,ItemJnlLine,ItemLedgEntryNo); <=====================
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInitValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InitValueEntry>
    Code lines:
    ...
          END;
      END;
    
      RoundAmtValueEntry(ValueEntry);
    
      OnAfterInitValueEntry(ValueEntry,ItemJnlLine,ValueEntryNo); <=====================
    END;
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertCapLedgEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertCapLedgEntry>
    Code lines:
    ...
    
      OnBeforeInsertCapLedgEntry(CapLedgEntry,ItemJnlLine);
    
      CapLedgEntry.INSERT;
    
      OnAfterInsertCapLedgEntry(CapLedgEntry,ItemJnlLine); <=====================
    
      InsertItemReg(0,0,0,CapLedgEntry."Entry No.");
    END;
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertCapValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertCapValueEntry>
    Code lines:
    ...
      InvtPost.SetRunOnlyCheck(TRUE,NOT InvtSetup."Automatic Cost Posting",FALSE);
      IF InvtPost.BufferInvtPosting(ValueEntry) THEN
        InvtPost.PostInvtPostBufPerEntry(ValueEntry);
    
      ValueEntry.INSERT(TRUE);
      OnAfterInsertCapValueEntry(ValueEntry,ItemJnlLine); <=====================
    
      UpdateAdjmtProp(ValueEntry,CapLedgEntry."Posting Date");
    
      InsertItemReg(0,0,ValueEntry."Entry No.",0);
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertConsumpEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertConsumpEntry>
    Code lines:
    ...
    
    PostItem;
    IF PostWhseJnlLine THEN
      WhseJnlRegisterLine.RegisterWhseJnlLine(WhseJnlLine);
    
    OnAfterInsertConsumpEntry(WhseJnlLine,ProdOrderComp,QtyBase,PostWhseJnlLine); <=====================
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertCorrItemLedgEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InitCorrItemLedgEntry>
    Code lines:
    ...
    ELSE
      NewItemLedgEntry."Applies-to Entry" := 0;
    
    OnBeforeInsertCorrItemLedgEntry(NewItemLedgEntry,OldItemLedgEntry,ItemJnlLine);
    NewItemLedgEntry.INSERT;
    OnAfterInsertCorrItemLedgEntry(NewItemLedgEntry,ItemJnlLine,OldItemLedgEntry); <=====================
    
    IF NewItemLedgEntry."Item Tracking" <> NewItemLedgEntry."Item Tracking"::None THEN
      ItemTrackingMgt.ExistingExpirationDate(
        NewItemLedgEntry."Item No.",
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertCorrValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertCorrValueEntry>
    Code lines:
    ...
    IF NewValueEntry.Inventoriable AND NOT Item."Inventory Value Zero" THEN
      PostInventoryToGL(NewValueEntry);
    
    NewValueEntry.INSERT;
    
    OnAfterInsertCorrValueEntry(NewValueEntry,ItemJnlLine,ItemLedgEntry,ValueEntryNo); <=====================
    
    ItemApplnEntry.SetOutboundsNotUpdated(ItemLedgEntry);
    
    UpdateAdjmtProp(NewValueEntry,ItemLedgEntry."Posting Date");
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertItemLedgEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertItemLedgEntry>
    Code lines:
    ...
    
      ItemLedgEntry.UpdateItemTracking;
    
      OnBeforeInsertItemLedgEntry(ItemLedgEntry,ItemJnlLine,TransferItem);
      ItemLedgEntry.INSERT(TRUE);
      OnAfterInsertItemLedgEntry(ItemLedgEntry,ItemJnlLine,ItemLedgEntryNo,ValueEntryNo,ItemApplnEntryNo); <=====================
    
      InsertItemReg(ItemLedgEntry."Entry No.",0,0,0);
    END;
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertOHValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertOHValueEntry>
    Code lines:
    ...
      ValueEntry."Cost Amount (Actual) (ACY)" :=
        ROUND(OverheadAmountACY,Currency."Amount Rounding Precision");
    
    InsertValueEntry(ValueEntry,GlobalItemLedgEntry,FALSE);
    
    OnAfterInsertOHValueEntry(ValueEntry,Item,OverheadAmount,OverheadAmountACY); <=====================
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterInsertValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertValueEntry>
    Code lines:
    ...
      IF ValueEntry.Inventoriable AND NOT Item."Inventory Value Zero" THEN
        PostInventoryToGL(ValueEntry);
    
      ValueEntry.INSERT;
    
      OnAfterInsertValueEntry(ValueEntry,ItemJnlLine,ItemLedgEntry,ValueEntryNo); <=====================
    
      ItemApplnEntry.SetOutboundsNotUpdated(ItemLedgEntry);
    
      UpdateAdjmtProp(ValueEntry,ItemLedgEntry."Posting Date");
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterItemApplnEntryInsert>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertApplEntry>
    Code lines:
    ...
    
      ItemApplnEntry."Creation Date" := CURRENTDATETIME;
      ItemApplnEntry."Created By User" := USERID;
      OnBeforeItemApplnEntryInsert(ItemApplnEntry,GlobalItemLedgEntry,OldItemLedgEntry);
      ItemApplnEntry.INSERT(TRUE);
      OnAfterItemApplnEntryInsert(ItemApplnEntry,GlobalItemLedgEntry,OldItemLedgEntry); <=====================
    END;
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterItemValuePosting>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<ItemValuePosting>
    Code lines:
    ...
         (GlobalItemLedgEntry.Quantity = GlobalItemLedgEntry."Invoiced Quantity")
      THEN
        UpdateItemApplnEntry(GlobalValueEntry."Item Ledger Entry No.","Posting Date");
    END;
    
    OnAfterItemValuePosting(GlobalValueEntry,ItemJnlLine,Item); <=====================
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterPostItem>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<PostItem>
    Code lines:
    ...
        ItemValuePosting;
    
      UpdateUnitCost(GlobalValueEntry);
    END;
    
    OnAfterPostItem(ItemJnlLine); <=====================
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterPostItemJnlLine>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<Code>
    Code lines:
    ...
        "Item Shpt. Entry No." := CapLedgEntryNo
      ELSE
        "Item Shpt. Entry No." := GlobalItemLedgEntry."Entry No.";
    END;
    
    OnAfterPostItemJnlLine(ItemJnlLine,GlobalItemLedgEntry); <=====================
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterPostOutput>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<PostOutput>
    Code lines:
    ...
          IF Location."Bin Mandatory" AND (NOT CalledFromInvtPutawayPick) THEN
            WhseJnlRegisterLine.RegisterWhseJnlLine(WhseJnlLine);
      END;
    END;
    
    OnAfterPostOutput(GlobalItemLedgEntry,ProdOrderLine,ItemJnlLine); <=====================
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterPostSplitJnlLine>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<PostSplitJnlLine>
    Code lines:
    ...
    CLEAR(PrevAppliedItemLedgEntry);
    ItemJnlLineToPost := ItemJnlLine;
    CorrectOutputValuationDate(GlobalItemLedgEntry);
    RedoApplications;
    
    OnAfterPostSplitJnlLine(ItemJnlLineToPost,TempTrackingSpecification); <=====================
    
    EXIT(PostItemJnlLine);
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterPrepareItem>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<PrepareItem>
    Code lines:
    ...
    
    GetGLSetup;
    GetInvtSetup;
    CheckItem(ItemJnlLineToPost."Item No.");
    
    OnAfterPrepareItem(ItemJnlLineToPost); <=====================
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterSetupTempSplitItemJnlLineSetQty>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<SetupTempSplitItemJnlLine>
    Code lines:
    ...
      END;
    
      IF ItemJnlLine2."Phys. Inventory" THEN
        "Qty. (Phys. Inventory)" := "Qty. (Calculated)" + SignFactor * "Quantity (Base)";
    
      OnAfterSetupTempSplitItemJnlLineSetQty(TempSplitItemJnlLine,ItemJnlLine2,SignFactor); <=====================
    
      FloatingFactor := Quantity / NonDistrQuantity;
      IF FloatingFactor < 1 THEN BEGIN
        Amount := ROUND(NonDistrAmount * FloatingFactor,GLSetup."Amount Rounding Precision");
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterUpdateAdjmtProp>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<UpdateAdjmtProp>
    Code lines:
    WITH ValueEntry DO
      SetAdjmtProp("Item No.","Item Ledger Entry Type",Adjustment,
        "Order Type","Order No.","Order Line No.",OriginalPostingDate,"Valuation Date");
    
    OnAfterUpdateAdjmtProp(ValueEntry,OriginalPostingDate); <=====================
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnAfterUpdateProdOrderLine>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<UpdateProdOrderLine>
    Code lines:
    ...
        ReservMgt.ClearSurplus;
        ReservMgt.AutoTrack("Remaining Qty. (Base)");
      END;
    END;
    
    OnAfterUpdateProdOrderLine(ProdOrderLine,ReTrack); <=====================
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnApplyItemLedgEntryOnBeforeCloseReservEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<ApplyItemLedgEntry>
    Code lines:
    ...
              ERROR(Text003,ReservEntry2."Item No.");
    
          OldItemLedgEntry.TESTFIELD("Item No.",ItemJnlLine."Item No.");
          OldItemLedgEntry.TESTFIELD("Variant Code",ItemJnlLine."Variant Code");
          OldItemLedgEntry.TESTFIELD("Location Code",ItemJnlLine."Location Code");
          OnApplyItemLedgEntryOnBeforeCloseReservEntry(OldItemLedgEntry,ItemJnlLine,ItemLedgEntry); <=====================
          ReservEngineMgt.CloseReservEntry(ReservEntry,FALSE,FALSE);
          OldItemLedgEntry.CALCFIELDS("Reserved Quantity");
          AppliedQty := -ABS(ReservEntry."Quantity (Base)");
        END;
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnApplyItemLedgEntryOnBeforeOldItemLedgEntryModify>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<ApplyItemLedgEntry>
    Code lines:
    ...
    
          IF ItemApplnEntry."Cost Application" THEN
            OldItemLedgEntry."Applied Entry to Adjust" := TRUE;
        END;
    
        OnApplyItemLedgEntryOnBeforeOldItemLedgEntryModify(ItemLedgEntry,OldItemLedgEntry,ItemJnlLine); <=====================
        OldItemLedgEntry.MODIFY;
        AutoTrack(OldItemLedgEntry,TRUE);
    
        EnsureValueEntryLoaded(ValueEntry,ItemLedgEntry);
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeAllowProdApplication>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<AllowProdApplication>
    Code lines:
    ...
      (OldItemLedgEntry."Entry Type" = ItemLedgEntry."Entry Type") OR
      (OldItemLedgEntry."Order No." <> ItemLedgEntry."Order No.") OR
      ((OldItemLedgEntry."Order No." = ItemLedgEntry."Order No.") AND
       (OldItemLedgEntry."Order Line No." <> ItemLedgEntry."Order Line No."));
    
    OnBeforeAllowProdApplication(OldItemLedgEntry,ItemLedgEntry,AllowApplication); <=====================
    EXIT(AllowApplication);
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeApplyItemLedgEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<ApplyItemLedgEntry>
    Code lines:
    OnBeforeApplyItemLedgEntry(ItemLedgEntry,OldItemLedgEntry,ValueEntry,CausedByTransfer,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    IF (ItemLedgEntry."Remaining Quantity" = 0) OR
       (ItemLedgEntry."Drop Shipment" AND (ItemLedgEntry."Applies-to Entry" = 0)) OR
       ((Item."Costing Method" = Item."Costing Method"::Specific) AND ItemLedgEntry.Positive)
    THEN
      EXIT;
    
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeApplyItemLedgEntrySetFilters>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<ApplyItemLedgEntrySetFilters>
    Code lines:
    IsHandled := FALSE;
    OnBeforeApplyItemLedgEntrySetFilters(ToItemLedgEntry,FromItemLedgEntry,ItemTrackingCode,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH ToItemLedgEntry DO BEGIN
      SETCURRENTKEY("Item No.",Open,"Variant Code",Positive,"Location Code","Posting Date");
      SETRANGE("Item No.",FromItemLedgEntry."Item No.");
      SETRANGE(Open,TRUE);
      SETRANGE("Variant Code",FromItemLedgEntry."Variant Code");
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeCheckExpirationDate>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<CheckExpirationDate>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckExpirationDate( <=====================
      ItemJnlLine2,TempTrackingSpecification,SignFactor,CalcExpirationDate,ExpirationDateChecked,IsHandled);
    IF IsHandled THEN
      EXIT;
    
    ExistingExpirationDate :=
      ItemTrackingMgt.ExistingExpirationDate(
        TempTrackingSpecification."Item No.",
        TempTrackingSpecification."Variant Code",
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeCheckIsCyclicalLoop>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<CheckIsCyclicalLoop>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckIsCyclicalLoop(ItemLedgEntry,OldItemLedgEntry,PrevAppliedItemLedgEntry,AppliedQty,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    PrevProcessedProdOrder :=
      (ItemLedgEntry."Entry Type" = ItemLedgEntry."Entry Type"::Consumption) AND
      (OldItemLedgEntry."Entry Type" = OldItemLedgEntry."Entry Type"::Output) AND
      (ItemLedgEntry."Order Type" = ItemLedgEntry."Order Type"::Production) AND
      EntriesInTheSameOrder(OldItemLedgEntry,PrevAppliedItemLedgEntry);
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeCheckItemCorrection>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<CheckItemCorrection>
    Code lines:
    RaiseError := ItemLedgerEntry.Correction;
    OnBeforeCheckItemCorrection(ItemLedgerEntry,RaiseError); <=====================
    IF RaiseError THEN
      ERROR(CannotUnapplyCorrEntryErr);
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeCheckItemTrackingInfo>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<CheckItemTrackingInfo>
    Code lines:
    OnBeforeCheckItemTrackingInfo( <=====================
      ItemJnlLine2,TrackingSpecification,SNInfoRequired,LotInfoRequired,SignFactor,ItemTrackingCode);
    
    IF SNInfoRequired THEN BEGIN
      SerialNoInfo.GET(
        ItemJnlLine2."Item No.",ItemJnlLine2."Variant Code",TrackingSpecification."Serial No.");
      SerialNoInfo.TESTFIELD(Blocked,FALSE);
      IF TrackingSpecification."New Serial No." <> '' THEN BEGIN
        SerialNoInfo.GET(
          ItemJnlLine2."Item No.",ItemJnlLine2."Variant Code",TrackingSpecification."New Serial No.");
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeCheckItemTrackingIsEmpty>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<CheckItemTrackingIsEmpty>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckItemTrackingIsEmpty(ItemJnlLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    ItemJnlLine.TESTFIELD("Serial No.",'');
    ItemJnlLine.TESTFIELD("Lot No.",'');
    ItemJnlLine.TESTFIELD("New Serial No.",'');
    ItemJnlLine.TESTFIELD("New Lot No.",'');
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeCheckSerialNo>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<CheckItemSerialNo>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckSerialNo(ItemJnlLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH ItemJnlLine DO
      IF "Entry Type" = "Entry Type"::Transfer THEN BEGIN
        IF ItemTrackingMgt.FindInInventory("Item No.","Variant Code","New Serial No.") THEN
          ERROR(Text014,"New Serial No.")
      END ELSE
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInitValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InitValueEntry>
    Code lines:
    OnBeforeInitValueEntry(ValueEntry,ValueEntryNo,ItemJnlLine); <=====================
    
    ValueEntryNo := ValueEntryNo + 1;
    
    WITH ItemJnlLine DO BEGIN
      ValueEntry.INIT;
      ValueEntry."Entry No." := ValueEntryNo;
      IF "Value Entry Type" = "Value Entry Type"::Variance THEN
        ValueEntry."Variance Type" := "Variance Type";
      ValueEntry."Item Ledger Entry No." := ItemLedgEntry."Entry No.";
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertCapLedgEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertCapLedgEntry>
    Code lines:
    ...
    
      CapLedgEntry."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
      CapLedgEntry."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
      CapLedgEntry."Dimension Set ID" := "Dimension Set ID";
    
      OnBeforeInsertCapLedgEntry(CapLedgEntry,ItemJnlLine); <=====================
    
      CapLedgEntry.INSERT;
    
      OnAfterInsertCapLedgEntry(CapLedgEntry,ItemJnlLine);
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertCapValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertCapValueEntry>
    Code lines:
    ...
    
      ValueEntry."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
      ValueEntry."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
      ValueEntry."Dimension Set ID" := "Dimension Set ID";
    
      OnBeforeInsertCapValueEntry(ValueEntry,ItemJnlLine); <=====================
    
      InvtPost.SetRunOnlyCheck(TRUE,NOT InvtSetup."Automatic Cost Posting",FALSE);
      IF InvtPost.BufferInvtPosting(ValueEntry) THEN
        InvtPost.PostInvtPostBufPerEntry(ValueEntry);
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertConsumpEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertConsumpEntry>
    Code lines:
    OnBeforeInsertConsumpEntry(ProdOrderComp,QtyBase,ModifyProdOrderComp); <=====================
    
    WITH ItemJnlLine DO BEGIN
      Quantity := QtyBase;
      "Quantity (Base)" := QtyBase;
      "Invoiced Quantity" := QtyBase;
      "Invoiced Qty. (Base)" := QtyBase;
      "Prod. Order Comp. Line No." := ProdOrderCompLineNo;
      IF ModifyProdOrderComp THEN BEGIN
        IF NOT CalledFromInvtPutawayPick THEN
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertCorrItemLedgEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InitCorrItemLedgEntry>
    Code lines:
    ...
    IF OldItemLedgEntry.Positive THEN
      NewItemLedgEntry."Applies-to Entry" := OldItemLedgEntry."Entry No."
    ELSE
      NewItemLedgEntry."Applies-to Entry" := 0;
    
    OnBeforeInsertCorrItemLedgEntry(NewItemLedgEntry,OldItemLedgEntry,ItemJnlLine); <=====================
    NewItemLedgEntry.INSERT;
    OnAfterInsertCorrItemLedgEntry(NewItemLedgEntry,ItemJnlLine,OldItemLedgEntry);
    
    IF NewItemLedgEntry."Item Tracking" <> NewItemLedgEntry."Item Tracking"::None THEN
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertCorrValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertCorrValueEntry>
    Code lines:
    ...
    NewValueEntry."Cost Posted to G/L" := 0;
    NewValueEntry."Cost Posted to G/L (ACY)" := 0;
    NewValueEntry."Expected Cost Posted to G/L" := 0;
    NewValueEntry."Exp. Cost Posted to G/L (ACY)" := 0;
    
    OnBeforeInsertCorrValueEntry(NewValueEntry,OldValueEntry,ItemJnlLine,Sign,CalledFromAdjustment); <=====================
    
    IF NewValueEntry.Inventoriable AND NOT Item."Inventory Value Zero" THEN
      PostInventoryToGL(NewValueEntry);
    
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertItemLedgEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertItemLedgEntry>
    Code lines:
    ...
        ItemLedgEntry."Job Task No." := "Job Task No.";
      END;
    
      ItemLedgEntry.UpdateItemTracking;
    
      OnBeforeInsertItemLedgEntry(ItemLedgEntry,ItemJnlLine,TransferItem); <=====================
      ItemLedgEntry.INSERT(TRUE);
      OnAfterInsertItemLedgEntry(ItemLedgEntry,ItemJnlLine,ItemLedgEntryNo,ValueEntryNo,ItemApplnEntryNo);
    
      InsertItemReg(ItemLedgEntry."Entry No.",0,0,0);
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertOHValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertOHValueEntry>
    Code lines:
    OnBeforeInsertOHValueEntry(ValueEntry,Item,OverheadAmount,OverheadAmountACY); <=====================
    
    IF Item."Inventory Value Zero" OR NOT ValueEntry.Inventoriable THEN
      EXIT;
    
    ValueEntryNo := ValueEntryNo + 1;
    
    ValueEntry."Entry No." := ValueEntryNo;
    ValueEntry."Item Charge No." := '';
    ValueEntry."Entry Type" := ValueEntry."Entry Type"::"Indirect Cost";
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertPhysInvtLedgEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertPhysInventoryEntry>
    Code lines:
    ...
      PhysInvtLedgEntry."Phys Invt Counting Period Code" :=
        "Phys Invt Counting Period Code";
      PhysInvtLedgEntry."Phys Invt Counting Period Type" :=
        "Phys Invt Counting Period Type";
    
      OnBeforeInsertPhysInvtLedgEntry(PhysInvtLedgEntry,ItemJnlLineOrigin); <=====================
      PhysInvtLedgEntry.INSERT;
    
      InsertItemReg(0,PhysInvtLedgEntry."Entry No.",0,0);
    END;
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertSetupTempSplitItemJnlLine>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<SetupTempSplitItemJnlLine>
    Code lines:
    ...
        "Applies-to Entry" := TempTrackingSpecification."Item Ledger Entry No."
      ELSE
        "Applies-to Entry" := TempTrackingSpecification."Appl.-to Item Entry";
      "Applies-from Entry" := TempTrackingSpecification."Appl.-from Item Entry";
    
      OnBeforeInsertSetupTempSplitItemJnlLine(TempTrackingSpecification,TempSplitItemJnlLine,PostItemJnlLine,ItemJnlLine2); <=====================
    
      INSERT;
    END;
    
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertTransferEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertTransferEntry>
    Code lines:
    ...
            ItemJnlLine,NewItemLedgEntry,NewItemLedgEntry."Remaining Quantity",TRUE);
    
      ApplyItemLedgEntry(NewItemLedgEntry,ItemLedgEntry2,NewValueEntry,TRUE);
      AutoTrack(NewItemLedgEntry,IsReserved);
    
      OnBeforeInsertTransferEntry(NewItemLedgEntry,OldItemLedgEntry,ItemJnlLine); <=====================
    
      InsertItemLedgEntry(NewItemLedgEntry,TRUE);
      InsertValueEntry(NewValueEntry,NewItemLedgEntry,TRUE);
    
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertValueEntry>
    Code lines:
    ...
          ValueEntry."Sales Amount (Expected)",
          ValueEntry."Purchase Amount (Expected)",
          ItemLedgEntry.Quantity = ItemLedgEntry."Invoiced Quantity");
      END;
    
      OnBeforeInsertValueEntry(ValueEntry,ItemJnlLine,ItemLedgEntry,ValueEntryNo,InvtPost,CalledFromAdjustment); <=====================
    
      IF ValueEntry.Inventoriable AND NOT Item."Inventory Value Zero" THEN
        PostInventoryToGL(ValueEntry);
    
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeInsertVarValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertVarValueEntry>
    Code lines:
    IsHandled := FALSE;
    OnBeforeInsertVarValueEntry(ValueEntry,Item,VarianceAmount,VarianceAmountACY,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF (NOT ValueEntry.Inventoriable) OR Item."Inventory Value Zero" THEN
      EXIT;
    IF (VarianceAmount = 0) AND (VarianceAmountACY = 0) THEN
      EXIT;
    
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeItemApplnEntryInsert>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertApplEntry>
    Code lines:
    ...
              ItemApplnEntry."Cost Application" := TRUE;
        END;
    
      ItemApplnEntry."Creation Date" := CURRENTDATETIME;
      ItemApplnEntry."Created By User" := USERID;
      OnBeforeItemApplnEntryInsert(ItemApplnEntry,GlobalItemLedgEntry,OldItemLedgEntry); <=====================
      ItemApplnEntry.INSERT(TRUE);
      OnAfterItemApplnEntryInsert(ItemApplnEntry,GlobalItemLedgEntry,OldItemLedgEntry);
    END;
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeMoveApplication>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<MoveApplication>
    Code lines:
    OnBeforeMoveApplication(ItemLedgEntry,OldItemLedgEntry); <=====================
    
    WITH ItemLedgEntry DO BEGIN
      FixedApplication := FALSE;
      OldItemLedgEntry.TESTFIELD(Positive,TRUE);
    
      IF (OldItemLedgEntry."Remaining Quantity" < ABS(Quantity)) AND
         (OldItemLedgEntry."Remaining Quantity" < OldItemLedgEntry.Quantity)
      THEN BEGIN
        Enough := FALSE;
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeNextOperationExist>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<NextOperationExist>
    Code lines:
    OnBeforeNextOperationExist(ProdOrderRtngLine); <=====================
    EXIT(ProdOrderRtngLine."Next Operation No." <> '');
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeOldItemLedgEntryModify>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<UpdateOldItemLedgEntry>
    Code lines:
    OldItemLedgEntry."Completely Invoiced" := TRUE;
    OldItemLedgEntry."Last Invoice Date" := LastInvoiceDate;
    OldItemLedgEntry."Invoiced Quantity" := OldItemLedgEntry.Quantity;
    OldItemLedgEntry."Shipped Qty. Not Returned" := 0;
    OnBeforeOldItemLedgEntryModify(OldItemLedgEntry); <=====================
    OldItemLedgEntry.MODIFY;
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforePostFlushedConsumpItemJnlLine>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<PostFlushedConsump>
    Code lines:
    ...
          OldTempTrackingSpecification.INSERT;
        UNTIL TempTrackingSpecification.NEXT = 0;
      ReserveProdOrderComp.TransferPOCompToItemJnlLine(
        ProdOrderComp,ItemJnlLine,ROUND(QtyToPost * ProdOrderComp."Qty. per Unit of Measure",UOMMgt.QtyRndPrecision));
    
      OnBeforePostFlushedConsumpItemJnlLine(ItemJnlLine); <=====================
    
      PrepareItem(ItemJnlLine);
      TrackingSpecExists := ItemTrackingMgt.RetrieveItemTracking(ItemJnlLine,TempTrackingSpecification);
      PostItemJnlLine := SetupSplitJnlLine(ItemJnlLine,TrackingSpecExists);
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforePostItem>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<PostItem>
    Code lines:
    OnBeforePostItem(ItemJnlLine); <=====================
    
    WITH ItemJnlLine DO BEGIN
      SKUExists := SKU.GET("Location Code","Item No.","Variant Code");
      IF "Item Shpt. Entry No." <> 0 THEN BEGIN
        "Location Code" := '';
        "Variant Code" := '';
      END;
    
      IF Item.GET("Item No.") THEN BEGIN
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforePostItemJnlLine>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<Code>
    Code lines:
    OnBeforePostItemJnlLine(ItemJnlLine,CalledFromAdjustment,CalledFromInvtPutawayPick); <=====================
    
    WITH ItemJnlLine DO BEGIN
      IF EmptyLine AND NOT Correction AND NOT Adjustment THEN
        IF NOT IsValueEntryForDeletedItem THEN
          EXIT;
    
      ItemJnlCheckLine.SetCalledFromInvtPutawayPick(CalledFromInvtPutawayPick);
      ItemJnlCheckLine.SetCalledFromAdjustment(CalledFromAdjustment);
    
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeProdOrderCompModify>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertConsumpEntry>
    Code lines:
    ...
      "Invoiced Qty. (Base)" := QtyBase;
      "Prod. Order Comp. Line No." := ProdOrderCompLineNo;
      IF ModifyProdOrderComp THEN BEGIN
        IF NOT CalledFromInvtPutawayPick THEN
          ReserveProdOrderComp.TransferPOCompToItemJnlLine(ProdOrderComp,ItemJnlLine,QtyBase);
        OnBeforeProdOrderCompModify(ProdOrderComp,ItemJnlLine); <=====================
        ProdOrderComp.MODIFY;
      END;
    
      IF "Value Entry Type" <> "Value Entry Type"::Revaluation THEN BEGIN
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeProdOrderLineModify>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<UpdateProdOrderLine>
    Code lines:
    ...
        FIELDERROR("Finished Quantity",Text000);
      "Remaining Qty. (Base)" := "Quantity (Base)" - "Finished Qty. (Base)";
      IF "Remaining Qty. (Base)" < 0 THEN
        "Remaining Qty. (Base)" := 0;
      "Remaining Quantity" := "Remaining Qty. (Base)" / "Qty. per Unit of Measure";
      OnBeforeProdOrderLineModify(ProdOrderLine); <=====================
      MODIFY;
    
      IF ReTrack THEN BEGIN
        ReservMgt.SetProdOrderLine(ProdOrderLine);
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeRetrieveCostPerUnit>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<RetrieveCostPerUnit>
    Code lines:
    IsHandled := FALSE;
    OnBeforeRetrieveCostPerUnit(ItemJnlLine,SKU,SKUExists,UnitCost,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH ItemJnlLine DO BEGIN
      IF (Item."Costing Method" = Item."Costing Method"::Standard) AND
         ("Value Entry Type" = "Value Entry Type"::"Direct Cost") AND
         ("Item Charge No." = '') AND
         ("Applies-from Entry" = 0) AND
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeRunWithCheck>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<RunWithCheck>
    Code lines:
    IsHandled := FALSE;
    OnBeforeRunWithCheck( <=====================
      ItemJnlLine2,CalledFromAdjustment,CalledFromInvtPutawayPick,CalledFromApplicationWorksheet,
      PostponeReservationHandling,IsHandled);
    IF IsHandled THEN
      EXIT;
    
    PrepareItem(ItemJnlLine2);
    TrackingSpecExists := ItemTrackingMgt.RetrieveItemTracking(ItemJnlLine2,TempTrackingSpecification);
    EXIT(PostSplitJnlLine(ItemJnlLine2,TrackingSpecExists));
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeSetupSplitJnlLine>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<SetupSplitJnlLine>
    Code lines:
    ...
    IF Item."Costing Method" = Item."Costing Method"::Specific THEN BEGIN
      Item.TESTFIELD("Item Tracking Code");
      ItemTrackingCode.TESTFIELD("SN Specific Tracking",TRUE);
    END;
    
    OnBeforeSetupSplitJnlLine(ItemJnlLine2,TrackingSpecExists); <=====================
    
    IF NOT ItemJnlLine2.Correction AND (ItemJnlLine2."Quantity (Base)" <> 0) AND TrackingSpecExists THEN BEGIN
      IF DisableItemTracking THEN BEGIN
        IF NOT TempTrackingSpecification.ISEMPTY THEN
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeTempItemEntryRelationInsert>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertTransferEntry>
    Code lines:
    ...
    
      IF Item."Item Tracking Code" <> '' THEN BEGIN
        TempItemEntryRelation."Item Entry No." := NewItemLedgEntry."Entry No."; // Save Entry No. in a global variable
        TempItemEntryRelation."Serial No." := NewItemLedgEntry."Serial No.";
        TempItemEntryRelation."Lot No." := NewItemLedgEntry."Lot No.";
        OnBeforeTempItemEntryRelationInsert(TempItemEntryRelation,NewItemLedgEntry); <=====================
        TempItemEntryRelation.INSERT;
      END;
      InitTransValueEntry(NewValueEntry,NewItemLedgEntry);
    
    ...
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertAsmItemEntryRelation>
    Code lines:
    Item.GET(ItemLedgerEntry."Item No.");
    IF Item."Item Tracking Code" <> '' THEN BEGIN
      TempItemEntryRelation."Item Entry No." := ItemLedgerEntry."Entry No.";
      TempItemEntryRelation."Serial No." := ItemLedgerEntry."Serial No.";
      TempItemEntryRelation."Lot No." := ItemLedgerEntry."Lot No.";
      OnBeforeTempItemEntryRelationInsert(TempItemEntryRelation,ItemLedgerEntry); <=====================
      TempItemEntryRelation.INSERT;
    END;
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeTestFirstApplyItemLedgEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<TestFirstApplyItemLedgEntry>
    Code lines:
    OnBeforeTestFirstApplyItemLedgEntry(OldItemLedgEntry,ItemLedgEntry,ItemJnlLine); <=====================
    
    OldItemLedgEntry.TESTFIELD("Item No.",ItemLedgEntry."Item No.");
    OldItemLedgEntry.TESTFIELD("Variant Code",ItemLedgEntry."Variant Code");
    OldItemLedgEntry.TESTFIELD(Positive,NOT ItemLedgEntry.Positive);
    OldItemLedgEntry.TESTFIELD("Location Code",ItemLedgEntry."Location Code");
    IF Location.GET(ItemLedgEntry."Location Code") THEN
      IF Location."Use As In-Transit" THEN BEGIN
        OldItemLedgEntry.TESTFIELD("Order Type",OldItemLedgEntry."Order Type"::Transfer);
        OldItemLedgEntry.TESTFIELD("Order No.",ItemLedgEntry."Order No.");
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeUpdateProdOrderLine>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<UpdateProdOrderLine>
    Code lines:
    OnBeforeUpdateProdOrderLine(ProdOrderLine,ItemJnlLine,ReTrack); <=====================
    
    WITH ProdOrderLine DO BEGIN
      IF ItemJnlLine."Output Quantity (Base)" > "Remaining Qty. (Base)" THEN
        ReserveProdOrderLine.AssignForPlanning(ProdOrderLine);
      "Finished Qty. (Base)" := "Finished Qty. (Base)" + ItemJnlLine."Output Quantity (Base)";
      "Finished Quantity" := "Finished Qty. (Base)" / "Qty. per Unit of Measure";
      IF "Finished Qty. (Base)" < 0 THEN
        FIELDERROR("Finished Quantity",Text000);
      "Remaining Qty. (Base)" := "Quantity (Base)" - "Finished Qty. (Base)";
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnBeforeVerifyInvoicedQty>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<VerifyInvoicedQty>
    Code lines:
    IF NOT (ItemLedgerEntry."Drop Shipment" AND (ItemLedgerEntry."Entry Type" = ItemLedgerEntry."Entry Type"::Purchase)) THEN
      EXIT;
    
    IsHandled := FALSE;
    OnBeforeVerifyInvoicedQty(ItemLedgerEntry,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    ItemApplnEntry.SETCURRENTKEY("Inbound Item Entry No.","Item Ledger Entry No.","Outbound Item Entry No.");
    ItemApplnEntry.SETRANGE("Inbound Item Entry No.",ItemLedgerEntry."Entry No.");
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnCalcExpectedCostOnBeforeFindValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<CalcExpectedCost>
    Code lines:
    ...
    
    WITH ValueEntry DO BEGIN
      SETCURRENTKEY("Item Ledger Entry No.","Entry Type");
      SETRANGE("Item Ledger Entry No.",ItemLedgEntryNo);
      SETFILTER("Entry Type",'<>%1',"Entry Type"::Revaluation);
      OnCalcExpectedCostOnBeforeFindValueEntry( <=====================
        ValueEntry,ItemLedgEntryNo,InvoicedQty,Quantity,ExpectedCost,ExpectedCostACY,ExpectedSalesAmt,ExpectedPurchAmt,CalcReminder);
      IF FINDSET AND "Expected Cost" THEN
        IF CalcReminder THEN BEGIN
          CALCSUMS(
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnCalcILEExpectedAmountOnBeforeCalcCostAmounts>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<CalcILEExpectedAmount>
    Code lines:
    OldValueEntry.FindFirstValueEntryByItemLedgerEntryNo(ItemLedgerEntryNo);
    OldValueEntry2.COPY(OldValueEntry);
    OldValueEntry2.SETFILTER("Entry No.",'<>%1',OldValueEntry."Entry No.");
    OnCalcILEExpectedAmountOnBeforeCalcCostAmounts(OldValueEntry2,OldValueEntry,ItemLedgEntryNo); <=====================
    OldValueEntry2.CALCSUMS("Cost Amount (Expected)","Cost Amount (Expected) (ACY)");
    OldValueEntry."Cost Amount (Expected)" += OldValueEntry2."Cost Amount (Expected)";
    OldValueEntry."Cost Amount (Expected) (ACY)" += OldValueEntry2."Cost Amount (Expected) (ACY)";
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnCheckPostingCostToGL>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<Code>
    Code lines:
    ...
      InitValueEntryNo;
    
      GetInvtSetup;
      IF NOT CalledFromAdjustment THEN
        PostToGL := InvtSetup."Automatic Cost Posting";
      OnCheckPostingCostToGL(PostToGL); <=====================
    
      IF (SNRequired OR LotRequired) AND ("Quantity (Base)" <> 0) AND
         ("Value Entry Type" = "Value Entry Type"::"Direct Cost") AND
         NOT DisableItemTracking AND NOT Adjustment AND
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnGetValuationDateOnBeforeFindOldValueEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<GetValuationDate>
    Code lines:
    ...
      OldValueEntry.SETRANGE("Item Ledger Entry No.","Entry No.");
      OldValueEntry.SETRANGE("Entry Type",OldValueEntry."Entry Type"::Revaluation);
      IF NOT OldValueEntry.FINDLAST THEN BEGIN
        OldValueEntry.SETRANGE("Entry Type");
        IsHandled := FALSE;
        OnGetValuationDateOnBeforeFindOldValueEntry(OldValueEntry,IsHandled); <=====================
        IF IsHandled THEN
          EXIT;
        OldValueEntry.FINDLAST;
      END;
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnInsertCapValueEntryOnAfterUpdateCostAmounts>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertCapValueEntry>
    Code lines:
    ...
      ValueEntry."Invoiced Quantity" := InvdQty;
      ValueEntry."Valued Quantity" := ValuedQty;
    
      ValueEntry."Cost Amount (Actual)" := AdjdCost;
      ValueEntry."Cost Amount (Actual) (ACY)" := ACYMgt.CalcACYAmt(AdjdCost,"Posting Date",FALSE);
      OnInsertCapValueEntryOnAfterUpdateCostAmounts(ValueEntry,ItemJnlLine); <=====================
    
      ValueEntry."Cost per Unit" :=
        CalcCostPerUnit(ValueEntry."Cost Amount (Actual)",ValueEntry."Valued Quantity",FALSE);
      ValueEntry."Cost per Unit (ACY)" :=
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnInsertConsumpEntryOnBeforePostItem>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertConsumpEntry>
    Code lines:
    ...
          PostWhseJnlLine := TRUE;
        END;
      END;
    END;
    
    OnInsertConsumpEntryOnBeforePostItem(ItemJnlLine,ProdOrderComp); <=====================
    
    PostItem;
    IF PostWhseJnlLine THEN
      WhseJnlRegisterLine.RegisterWhseJnlLine(WhseJnlLine);
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnInsertItemLedgEntryOnBeforeReservationError>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertItemLedgEntry>
    Code lines:
    ...
        END;
    
        IF ("Document Type" <> "Document Type"::"Purchase Return Shipment") AND ("Job No." = '') THEN
          IF (Item.Reserve = Item.Reserve::Always) AND (ItemLedgEntry.Quantity < 0) THEN BEGIN
            IsHandled := FALSE;
            OnInsertItemLedgEntryOnBeforeReservationError(ItemJnlLine,ItemLedgEntry,IsHandled); <=====================
            IF NOT IsHandled THEN
              ERROR(Text012,ItemLedgEntry."Item No.");
          END;
      END;
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnInsertPostValueEntryToGLOnAfterTransferFields>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertPostValueEntryToGL>
    Code lines:
    IF IsPostToGL(ValueEntry) THEN BEGIN
      PostValueEntryToGL.INIT;
      PostValueEntryToGL."Value Entry No." := ValueEntry."Entry No.";
      PostValueEntryToGL."Item No." := ValueEntry."Item No.";
      PostValueEntryToGL."Posting Date" := ValueEntry."Posting Date";
      OnInsertPostValueEntryToGLOnAfterTransferFields(PostValueEntryToGL,ValueEntry); <=====================
      PostValueEntryToGL.INSERT;
    END;
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnInsertTransferEntryOnTransferValues>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<InsertTransferEntry>
    Code lines:
    ...
      NewItemLedgEntry."Country/Region Code" := "Country/Region Code";
      InsertCountryCode(NewItemLedgEntry,ItemLedgEntry);
      NewItemLedgEntry."Serial No." := "New Serial No.";
      NewItemLedgEntry."Lot No." := "New Lot No.";
      NewItemLedgEntry."Expiration Date" := "New Item Expiration Date";
      OnInsertTransferEntryOnTransferValues(NewItemLedgEntry,OldItemLedgEntry,ItemLedgEntry,ItemJnlLine); <=====================
    
      IF Item."Item Tracking Code" <> '' THEN BEGIN
        TempItemEntryRelation."Item Entry No." := NewItemLedgEntry."Entry No."; // Save Entry No. in a global variable
        TempItemEntryRelation."Serial No." := NewItemLedgEntry."Serial No.";
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnItemQtyPostingOnBeforeApplyItemLedgEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<ItemQtyPosting>
    Code lines:
    ...
        IF GlobalItemLedgEntry."Entry Type" <> GlobalItemLedgEntry."Entry Type"::Transfer THEN
          IsReserved :=
            ReserveItemJnlLine.TransferItemJnlToItemLedgEntry(
              ItemJnlLine,GlobalItemLedgEntry,"Quantity (Base)",TRUE);
    
      OnItemQtyPostingOnBeforeApplyItemLedgEntry(ItemJnlLine,GlobalItemLedgEntry); <=====================
      ApplyItemLedgEntry(GlobalItemLedgEntry,OldItemLedgEntry,GlobalValueEntry,FALSE);
      CheckApplFromInProduction(GlobalItemLedgEntry,"Applies-from Entry");
      AutoTrack(GlobalItemLedgEntry,IsReserved);
    
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnPostConsumptionOnAfterInsertEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<PostConsumption>
    Code lines:
    ...
            MODIFY;
            IF ProdOrderCompModified THEN
              InsertConsumpEntry(ProdOrderComp,"Line No.",QtyToPost,FALSE)
            ELSE
              InsertConsumpEntry(ProdOrderComp,"Line No.",QtyToPost,TRUE);
            OnPostConsumptionOnAfterInsertEntry(ProdOrderComp); <=====================
          END;
    
          IF UseItemTrackingApplication THEN BEGIN
            IF NEXT = 0 THEN BEGIN
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnPostFlushedConsumpOnAfterCalcQtyToPost>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<PostFlushedConsump>
    Code lines:
    ...
      THEN
        QtyToPost := ProdOrderComp."Remaining Quantity";
    END ELSE
      QtyToPost := ProdOrderComp.GetNeededQty(CalcBasedOn::"Expected Output",TRUE);
    QtyToPost := ROUND(QtyToPost,CompItem."Rounding Precision",'>');
    OnPostFlushedConsumpOnAfterCalcQtyToPost(ProdOrder,ProdOrderLine,ProdOrderComp,ActOutputQtyBase,QtyToPost); <=====================
    IF QtyToPost = 0 THEN
      EXIT;
    
    WITH ItemJnlLine DO BEGIN
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnPostOutputOnAfterInsertCapLedgEntry>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<PostOutput>
    Code lines:
    WITH ItemJnlLine DO BEGIN
      IF "Stop Time" <> 0 THEN BEGIN
        InsertCapLedgEntry(CapLedgEntry,"Stop Time","Stop Time");
        SkipPost := OnlyStopTime;
        OnPostOutputOnAfterInsertCapLedgEntry(ItemJnlLine,SkipPost); <=====================
        IF SkipPost THEN
          EXIT;
      END;
    
      IF OutputValuePosting THEN BEGIN
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnPostOutputOnAfterUpdateAmounts>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<PostOutput>
    Code lines:
    ...
          ELSE
            MfgUnitCost := MfgItem."Unit Cost";
    
        Amount := "Output Quantity" * MfgUnitCost;
        "Amount (ACY)" := ACYMgt.CalcACYAmt(Amount,"Posting Date",FALSE);
        OnPostOutputOnAfterUpdateAmounts(ItemJnlLine); <=====================
    
        "Gen. Bus. Posting Group" := ProdOrder."Gen. Bus. Posting Group";
        "Gen. Prod. Posting Group" := MfgItem."Gen. Prod. Posting Group";
        IF "Output Quantity (Base)" * ProdOrderLine."Remaining Qty. (Base)" <= 0 THEN
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnPostOutputOnBeforeCreateWhseJnlLine>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<PostOutput>
    Code lines:
    ...
          IF NOT CalledFromInvtPutawayPick THEN
            ReserveProdOrderLine.TransferPOLineToItemJnlLine(
              ProdOrderLine,ItemJnlLine,"Output Quantity (Base)");
    
        PostWhseJnlLine := TRUE;
        OnPostOutputOnBeforeCreateWhseJnlLine(ItemJnlLine,PostWhseJnlLine); <=====================
        IF PostWhseJnlLine THEN BEGIN
          GetLocation("Location Code");
          IF Location."Bin Mandatory" AND (NOT CalledFromInvtPutawayPick) THEN BEGIN
            WMSMgmt.CreateWhseJnlLineFromOutputJnl(ItemJnlLine,WhseJnlLine);
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnPostOutputOnBeforeProdOrderRtngLineModify>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<PostOutput>
    Code lines:
    ...
          IF Finished THEN
            ProdOrderRtngLine."Routing Status" := ProdOrderRtngLine."Routing Status"::Finished
          ELSE
            ProdOrderRtngLine."Routing Status" := ProdOrderRtngLine."Routing Status"::"In Progress";
          LastOperation := (NOT NextOperationExist(ProdOrderRtngLine));
          OnPostOutputOnBeforeProdOrderRtngLineModify(ProdOrderRtngLine,ProdOrderLine,ItemJnlLine); <=====================
          ProdOrderRtngLine.MODIFY;
        END ELSE
          LastOperation := TRUE;
    
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnPostSplitJnlLineOnBeforeSplitJnlLine>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<PostSplitJnlLine>
    Code lines:
    PostItemJnlLine := SetupSplitJnlLine(ItemJnlLineToPost,TrackingSpecExists);
    IF NOT PostItemJnlLine THEN
      PostItemJnlLine := IsNotInternalWhseMovement(ItemJnlLineToPost);
    
    OnPostSplitJnlLineOnBeforeSplitJnlLine(ItemJnlLine,ItemJnlLineToPost,PostItemJnlLine); <=====================
    
    WHILE SplitJnlLine(ItemJnlLine,PostItemJnlLine) DO
      IF PostItemJnlLine THEN
        Code;
    CLEAR(PrevAppliedItemLedgEntry);
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnReApplyOnBeforeStartApply>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<ReApply>
    Code lines:
    ...
        OldItemLedgEntry := ItemLedgEntry;
        ItemLedgEntry := ItemLedgEntry2;
        ItemLedgEntry2 := OldItemLedgEntry;
      END;
    
      OnReApplyOnBeforeStartApply(ItemLedgEntry,ItemLedgEntry2); <=====================
    
      IF NOT ((ItemLedgEntry.Quantity > 0) AND // not(Costprovider(ItemLedgEntry))
              ((ItemLedgEntry."Entry Type" = ItemLedgEntry2."Entry Type"::Purchase) OR
               (ItemLedgEntry."Entry Type" = ItemLedgEntry2."Entry Type"::"Positive Adjmt.") OR
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnSetupSplitJnlLineOnBeforeSplitTempLines>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<SetupSplitJnlLine>
    Code lines:
    ...
            ItemJnlLine2."Qty. per Unit of Measure");
        NonDistrAmount := ItemJnlLine2.Amount;
        NonDistrAmountACY := ItemJnlLine2."Amount (ACY)";
        NonDistrDiscountAmount := ItemJnlLine2."Discount Amount";
    
        OnSetupSplitJnlLineOnBeforeSplitTempLines(TempSplitItemJnlLine,TempTrackingSpecification); <=====================
    
        TempTrackingSpecification.FINDSET;
        REPEAT
          IF ItemTrackingCode."Man. Warranty Date Entry Reqd." THEN
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnTestFirstApplyItemLedgEntryOnAfterTestFields>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<TestFirstApplyItemLedgEntry>
    Code lines:
    ...
        IF NOT MoveApplication(ItemLedgEntry,OldItemLedgEntry) THEN
          OldItemLedgEntry.FIELDERROR("Remaining Quantity",Text004);
      END ELSE
        OldItemLedgEntry.TESTFIELD(Open,TRUE);
    
    OnTestFirstApplyItemLedgEntryOnAfterTestFields(ItemLedgEntry,OldItemLedgEntry,ItemJnlLine); <=====================
    
    OldItemLedgEntry.CALCFIELDS("Reserved Quantity");
    CheckApplication(ItemLedgEntry,OldItemLedgEntry);
    
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnTouchItemEntryCostOnAfterAfterSetAdjmtProp>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<TouchItemEntryCost>
    Code lines:
    ...
    WITH ItemLedgerEntry DO
      SetAdjmtProp("Item No.","Entry Type",IsAdjustment,
        "Order Type","Order No.","Order Line No.",
        "Posting Date","Posting Date");
    
    OnTouchItemEntryCostOnAfterAfterSetAdjmtProp(ItemLedgerEntry,IsAdjustment); <=====================
    
    IF NOT IsAdjustment THEN BEGIN
      EnsureValueEntryLoaded(ValueEntry,ItemLedgerEntry);
      AvgCostAdjmtEntryPoint.UpdateValuationDate(ValueEntry);
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnUnApplyOnBeforeItemApplnEntryDelete>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<UnApply>
    Code lines:
    ...
    IF ItemApplnEntry."Outbound Item Entry No." <> 0 THEN BEGIN
      TouchEntry(ItemApplnEntry."Outbound Item Entry No.");
      SaveTouchedEntry(ItemApplnEntry."Inbound Item Entry No.",FALSE);
    END;
    
    OnUnApplyOnBeforeItemApplnEntryDelete(ItemApplnEntry); <=====================
    ItemApplnEntry.DELETE;
    
    Valuationdate := GetMaxAppliedValuationdate(CostItemLedgEntry);
    IF Valuationdate = 0D THEN
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnUnApplyOnBeforeUpdateItemLedgerEntries>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<UnApply>
    Code lines:
    ...
    
    // We won't allow deletion of applications for deleted items
    Item.GET(ItemLedgEntry1."Item No.");
    CostItemLedgEntry.GET(ItemApplnEntry.CostReceiver); // costreceiver
    
    OnUnApplyOnBeforeUpdateItemLedgerEntries(ItemLedgEntry1,ItemLedgEntry2); <=====================
    
    IF ItemLedgEntry1."Applies-to Entry" = ItemLedgEntry2."Entry No." THEN
      ItemLedgEntry1."Applies-to Entry" := 0;
    
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnUpdateUnitCostOnBeforeCalculateLastDirectCost>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<UpdateUnitCost>
    Code lines:
    ...
           (("Cost Amount (Actual)" + "Discount Amount" > 0) OR Item.IsNonInventoriableType) AND
           (ItemJnlLine."Value Entry Type" = ItemJnlLine."Value Entry Type"::"Direct Cost") AND
           (ItemJnlLine."Item Charge No." = '') AND NOT Item."Inventory Value Zero"
        THEN BEGIN
          TotalAmount := ItemJnlLine.Amount + ItemJnlLine."Discount Amount";
          OnUpdateUnitCostOnBeforeCalculateLastDirectCost(TotalAmount,ItemJnlLine,ValueEntry,Item); <=====================
          LastDirectCost := ROUND(TotalAmount / "Valued Quantity",GLSetup."Unit-Amount Rounding Precision")
        END;
    
        IF "Drop Shipment" THEN BEGIN
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnValuateAppliedAvgEntryOnAfterSetCostPerUnit>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<ValuateAppliedAvgEntry>
    Code lines:
    ...
            ELSE
              "Cost per Unit" := Item."Unit Cost";
          END ELSE
            "Cost per Unit" := ItemJnlLine."Unit Cost";
    
          OnValuateAppliedAvgEntryOnAfterSetCostPerUnit(ValueEntry,ItemJnlLine,InvtSetup,SKU,SKUExists); <=====================
    
          IF GLSetup."Additional Reporting Currency" <> '' THEN BEGIN
            IF (ItemJnlLine."Source Currency Code" = GLSetup."Additional Reporting Currency") AND
               ("Item Ledger Entry Type" <> "Item Ledger Entry Type"::Transfer)
    ...
Codeunit<Item Jnl.-Post Line>.PROCEDURE<OnValuateAppliedAvgEntryOnAfterUpdateCostAmounts>
  Raised in: Codeunit<Item Jnl.-Post Line>.PROCEDURE<ValuateAppliedAvgEntry>
    Code lines:
    ...
                      "Posting Date",GLSetup."Additional Reporting Currency")),
                  Currency."Unit-Amount Rounding Precision");
          END;
        END;
    
        OnValuateAppliedAvgEntryOnAfterUpdateCostAmounts(ValueEntry,ItemJnlLine); <=====================
    
        IF "Expected Cost" THEN BEGIN
          "Cost Amount (Expected)" := "Valued Quantity" * "Cost per Unit";
          "Cost Amount (Expected) (ACY)" := "Valued Quantity" * "Cost per Unit (ACY)";
    ...
Codeunit<Resource-Find Cost>.PROCEDURE<OnAfterFindResUnitCost>
  Raised in: Codeunit<Resource-Find Cost>.PROCEDURE<FindResUnitCost>
    Code lines:
    ...
      Code := Res."No.";
      "Direct Unit Cost" := Res."Direct Unit Cost";
      "Unit Cost" := Res."Unit Cost";
    END;
    
    OnAfterFindResUnitCost(NearestResCost,Res); <=====================
Codeunit<Resource-Find Price>.PROCEDURE<OnAfterFindResPrice>
  Raised in: Codeunit<Resource-Find Price>.PROCEDURE<FindResPrice>
    Code lines:
    ...
    
      IF ResPrice2.GET(Type::All,'',"Work Type Code",'') THEN
        EXIT(TRUE);
    END;
    
    OnAfterFindResPrice(ResPrice,Res); <=====================
Codeunit<Resource-Find Price>.PROCEDURE<OnBeforeFindResPrice>
  Raised in: Codeunit<Resource-Find Price>.PROCEDURE<FindResPrice>
    Code lines:
    IsHandled := FALSE;
    OnBeforeFindResPrice(ResPrice,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH ResPrice DO BEGIN
      IF ResPrice2.GET(Type::Resource,Code,"Work Type Code","Currency Code") THEN
        EXIT(TRUE);
    
      IF ResPrice2.GET(Type::Resource,Code,"Work Type Code",'') THEN
    ...
Codeunit<EmplEntry-Apply Posted Entries>.PROCEDURE<OnEmplPostApplyEmplLedgEntryOnBeforeGenJnlPostLine>
  Raised in: Codeunit<EmplEntry-Apply Posted Entries>.PROCEDURE<EmplPostApplyEmplLedgEntry>
    Code lines:
    ...
      GenJnlLine."Source Code" := SourceCodeSetup."Employee Entry Application";
      GenJnlLine."System-Created Entry" := TRUE;
    
      EntryNoBeforeApplication := FindLastApplDtldEmplLedgEntry;
    
      OnEmplPostApplyEmplLedgEntryOnBeforeGenJnlPostLine(GenJnlLine,EmplLedgEntry); <=====================
      GenJnlPostLine.EmplPostApplyEmplLedgEntry(GenJnlLine,EmplLedgEntry);
    
      EntryNoAfterApplication := FindLastApplDtldEmplLedgEntry;
      IF EntryNoAfterApplication = EntryNoBeforeApplication THEN
    ...
Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnAfterApplyEmployeeLedgerEntry>
  Raised in: Codeunit<Gen. Jnl.-Apply>.PROCEDURE<ApplyEmployeeLedgerEntry>
    Code lines:
    ...
      END ELSE
        "Applies-to ID" := '';
      IF MODIFY THEN;
    END;
    
    OnAfterApplyEmployeeLedgerEntry(GenJnlLine,EmplLedgEntry); <=====================
Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnAfterCustLedgEntrySetFilters>
  Raised in: Codeunit<Gen. Jnl.-Apply>.PROCEDURE<ApplyCustomerLedgerEntry>
    Code lines:
    ...
      CustLedgEntry.RESET;
      CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive);
      CustLedgEntry.SETRANGE("Customer No.",AccNo);
      CustLedgEntry.SETRANGE(Open,TRUE);
      CustLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
      OnAfterCustLedgEntrySetFilters(CustLedgEntry,GenJnlLine,AccNo); <=====================
      IF CustLedgEntry.FIND('-') THEN BEGIN
        CurrencyCode2 := CustLedgEntry."Currency Code";
        IF Amount = 0 THEN BEGIN
          REPEAT
    ...
Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnAfterRun>
  Raised in: Codeunit<Gen. Jnl.-Apply>.<OnRun>
    Code lines:
    ...
          ERROR(
            Text005,
            FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));
      END;
    END;
    OnAfterRun(GenJnlLine); <=====================
    
    Rec := GenJnlLine;
Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnAfterSelectCustLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Apply>.PROCEDURE<SelectCustLedgEntry>
    Code lines:
    ...
      ApplyCustEntries.LOOKUPMODE(TRUE);
      Selected := ApplyCustEntries.RUNMODAL = ACTION::LookupOK;
      CLEAR(ApplyCustEntries);
    END;
    
    OnAfterSelectCustLedgEntry(GenJnlLine,AccNo,Selected); <=====================
Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnAfterSelectEmplLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Apply>.PROCEDURE<SelectEmplLedgEntry>
    Code lines:
    ...
      ApplyEmplEntries.LOOKUPMODE(TRUE);
      Selected := ApplyEmplEntries.RUNMODAL = ACTION::LookupOK;
      CLEAR(ApplyEmplEntries);
    END;
    
    OnAfterSelectEmplLedgEntry(GenJnlLine,AccNo,Selected); <=====================
Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnAfterSelectVendLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Apply>.PROCEDURE<SelectVendLedgEntry>
    Code lines:
    ...
      ApplyVendEntries.LOOKUPMODE(TRUE);
      Selected := ApplyVendEntries.RUNMODAL = ACTION::LookupOK;
      CLEAR(ApplyVendEntries);
    END;
    
    OnAfterSelectVendLedgEntry(GenJnlLine,AccNo,Selected); <=====================
Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnAfterVendLedgEntrySetFilters>
  Raised in: Codeunit<Gen. Jnl.-Apply>.PROCEDURE<ApplyVendorLedgerEntry>
    Code lines:
    ...
      VendLedgEntry.RESET;
      VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive);
      VendLedgEntry.SETRANGE("Vendor No.",AccNo);
      VendLedgEntry.SETRANGE(Open,TRUE);
      VendLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
      OnAfterVendLedgEntrySetFilters(VendLedgEntry,GenJnlLine,AccNo); <=====================
      IF VendLedgEntry.FIND('-') THEN BEGIN
        CurrencyCode2 := VendLedgEntry."Currency Code";
        IF Amount = 0 THEN BEGIN
          REPEAT
    ...
Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnApplyCustomerLedgerEntryOnBeforeCheckAgainstApplnCurrency>
  Raised in: Codeunit<Gen. Jnl.-Apply>.PROCEDURE<ApplyCustomerLedgerEntry>
    Code lines:
    ...
      IF CustLedgEntry.FIND('-') THEN BEGIN
        CurrencyCode2 := CustLedgEntry."Currency Code";
        IF Amount = 0 THEN BEGIN
          REPEAT
            PaymentToleranceMgt.DelPmtTolApllnDocNo(GenJnlLine,CustLedgEntry."Document No.");
            OnApplyCustomerLedgerEntryOnBeforeCheckAgainstApplnCurrency(GenJnlLine,CustLedgEntry); <=====================
            CheckAgainstApplnCurrency(CurrencyCode2,CustLedgEntry."Currency Code",AccType::Customer,TRUE);
            UpdateCustLedgEntry(CustLedgEntry);
            IsHandled := FALSE;
            OnBeforeFindCustApply(GenJnlLine,CustLedgEntry,Amount,IsHandled);
    ...
Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnApplyEmployeeLedgerEntryOnBeforeUpdateAmount>
  Raised in: Codeunit<Gen. Jnl.-Apply>.PROCEDURE<ApplyEmployeeLedgerEntry>
    Code lines:
    ...
      EmplLedgEntry.SETRANGE(Open,TRUE);
      EmplLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
      IF EmplLedgEntry.FIND('-') THEN BEGIN
        IF Amount = 0 THEN BEGIN
          REPEAT
            OnApplyEmployeeLedgerEntryOnBeforeUpdateAmount(GenJnlLine,EmplLedgEntry); <=====================
            Amount := Amount - EmplLedgEntry."Amount to Apply";
          UNTIL EmplLedgEntry.NEXT = 0;
          IF ("Bal. Account Type" = "Bal. Account Type"::Customer) OR
             ("Bal. Account Type" = "Bal. Account Type"::Vendor) OR
    ...
Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnApplyVendorLedgerEntryOnBeforeCheckAgainstApplnCurrency>
  Raised in: Codeunit<Gen. Jnl.-Apply>.PROCEDURE<ApplyVendorLedgerEntry>
    Code lines:
    ...
      IF VendLedgEntry.FIND('-') THEN BEGIN
        CurrencyCode2 := VendLedgEntry."Currency Code";
        IF Amount = 0 THEN BEGIN
          REPEAT
            PaymentToleranceMgt.DelPmtTolApllnDocNo(GenJnlLine,VendLedgEntry."Document No.");
            OnApplyVendorLedgerEntryOnBeforeCheckAgainstApplnCurrency(GenJnlLine,VendLedgEntry); <=====================
            CheckAgainstApplnCurrency(CurrencyCode2,VendLedgEntry."Currency Code",AccType::Vendor,TRUE);
            UpdateVendLedgEntry(VendLedgEntry);
            IsHandled := FALSE;
            OnBeforeFindVendApply(GenJnlLine,VendLedgEntry,Amount,IsHandled);
    ...
Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnBeforeFindCustApply>
  Raised in: Codeunit<Gen. Jnl.-Apply>.PROCEDURE<ApplyCustomerLedgerEntry>
    Code lines:
    ...
            PaymentToleranceMgt.DelPmtTolApllnDocNo(GenJnlLine,CustLedgEntry."Document No.");
            OnApplyCustomerLedgerEntryOnBeforeCheckAgainstApplnCurrency(GenJnlLine,CustLedgEntry);
            CheckAgainstApplnCurrency(CurrencyCode2,CustLedgEntry."Currency Code",AccType::Customer,TRUE);
            UpdateCustLedgEntry(CustLedgEntry);
            IsHandled := FALSE;
            OnBeforeFindCustApply(GenJnlLine,CustLedgEntry,Amount,IsHandled); <=====================
            IF NOT IsHandled THEN
              IF PaymentToleranceMgt.CheckCalcPmtDiscGenJnlCust(GenJnlLine,CustLedgEntry,0,FALSE) AND
                 (ABS(CustLedgEntry."Amount to Apply") >=
                  ABS(CustLedgEntry."Remaining Amount" - CustLedgEntry."Remaining Pmt. Disc. Possible"))
    ...
Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnBeforeFindVendApply>
  Raised in: Codeunit<Gen. Jnl.-Apply>.PROCEDURE<ApplyVendorLedgerEntry>
    Code lines:
    ...
            PaymentToleranceMgt.DelPmtTolApllnDocNo(GenJnlLine,VendLedgEntry."Document No.");
            OnApplyVendorLedgerEntryOnBeforeCheckAgainstApplnCurrency(GenJnlLine,VendLedgEntry);
            CheckAgainstApplnCurrency(CurrencyCode2,VendLedgEntry."Currency Code",AccType::Vendor,TRUE);
            UpdateVendLedgEntry(VendLedgEntry);
            IsHandled := FALSE;
            OnBeforeFindVendApply(GenJnlLine,VendLedgEntry,Amount,IsHandled); <=====================
            IF NOT IsHandled THEN
              IF PaymentToleranceMgt.CheckCalcPmtDiscGenJnlVend(GenJnlLine,VendLedgEntry,0,FALSE) AND
                 (ABS(VendLedgEntry."Amount to Apply") >=
                  ABS(VendLedgEntry."Remaining Amount" - VendLedgEntry."Remaining Pmt. Disc. Possible"))
    ...
Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnBeforeRun>
  Raised in: Codeunit<Gen. Jnl.-Apply>.<OnRun>
    Code lines:
    GenJnlLine.COPY(Rec);
    
    IsHandled := FALSE;
    OnBeforeRun(GenJnlLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH GenJnlLine DO BEGIN
      GetCurrency;
      IF "Bal. Account Type" IN
    ...
Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnBeforeSelectCustLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Apply>.PROCEDURE<SelectCustLedgEntry>
    Code lines:
    IsHandled := FALSE;
    OnBeforeSelectCustLedgEntry(GenJnlLine,AccNo,Selected,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(Selected);
    
    WITH GenJnlLine DO BEGIN
      CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive);
      CustLedgEntry.SETRANGE("Customer No.",AccNo);
      CustLedgEntry.SETRANGE(Open,TRUE);
      OnSelectCustLedgEntryOnAfterSetFilters(CustLedgEntry,GenJnlLine);
    ...
Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnBeforeSelectEmplLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Apply>.PROCEDURE<SelectEmplLedgEntry>
    Code lines:
    IsHandled := FALSE;
    OnBeforeSelectEmplLedgEntry(GenJnlLine,AccNo,Selected,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(Selected);
    
    WITH GenJnlLine DO BEGIN
      EmplLedgEntry.SETCURRENTKEY("Employee No.",Open,Positive);
      EmplLedgEntry.SETRANGE("Employee No.",AccNo);
      EmplLedgEntry.SETRANGE(Open,TRUE);
      OnSelectEmplLedgEntryOnAfterSetFilters(EmplLedgEntry,GenJnlLine);
    ...
Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnBeforeSelectVendLedgEntry>
  Raised in: Codeunit<Gen. Jnl.-Apply>.PROCEDURE<SelectVendLedgEntry>
    Code lines:
    IsHandled := FALSE;
    OnBeforeSelectVendLedgEntry(GenJnlLine,AccNo,Selected,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(Selected);
    
    WITH GenJnlLine DO BEGIN
      VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive);
      VendLedgEntry.SETRANGE("Vendor No.",AccNo);
      VendLedgEntry.SETRANGE(Open,TRUE);
      OnSelectVendLedgEntryOnAfterSetFilters(VendLedgEntry,GenJnlLine);
    ...
Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnSelectCustLedgEntryOnAfterSetFilters>
  Raised in: Codeunit<Gen. Jnl.-Apply>.PROCEDURE<SelectCustLedgEntry>
    Code lines:
    ...
    
    WITH GenJnlLine DO BEGIN
      CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive);
      CustLedgEntry.SETRANGE("Customer No.",AccNo);
      CustLedgEntry.SETRANGE(Open,TRUE);
      OnSelectCustLedgEntryOnAfterSetFilters(CustLedgEntry,GenJnlLine); <=====================
      IF "Applies-to ID" = '' THEN
        "Applies-to ID" := "Document No.";
      IF "Applies-to ID" = '' THEN
        ERROR(
    ...
Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnSelectEmplLedgEntryOnAfterSetFilters>
  Raised in: Codeunit<Gen. Jnl.-Apply>.PROCEDURE<SelectEmplLedgEntry>
    Code lines:
    ...
    
    WITH GenJnlLine DO BEGIN
      EmplLedgEntry.SETCURRENTKEY("Employee No.",Open,Positive);
      EmplLedgEntry.SETRANGE("Employee No.",AccNo);
      EmplLedgEntry.SETRANGE(Open,TRUE);
      OnSelectEmplLedgEntryOnAfterSetFilters(EmplLedgEntry,GenJnlLine); <=====================
      IF "Applies-to ID" = '' THEN
        "Applies-to ID" := "Document No.";
      IF "Applies-to ID" = '' THEN
        ERROR(
    ...
Codeunit<Gen. Jnl.-Apply>.PROCEDURE<OnSelectVendLedgEntryOnAfterSetFilters>
  Raised in: Codeunit<Gen. Jnl.-Apply>.PROCEDURE<SelectVendLedgEntry>
    Code lines:
    ...
    
    WITH GenJnlLine DO BEGIN
      VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive);
      VendLedgEntry.SETRANGE("Vendor No.",AccNo);
      VendLedgEntry.SETRANGE(Open,TRUE);
      OnSelectVendLedgEntryOnAfterSetFilters(VendLedgEntry,GenJnlLine); <=====================
      IF "Applies-to ID" = '' THEN
        "Applies-to ID" := "Document No.";
      IF "Applies-to ID" = '' THEN
        ERROR(
    ...
Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<OnAfterPostApplyCustLedgEntry>
  Raised in: Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<CustPostApplyCustLedgEntry>
    Code lines:
    ...
    
      EntryNoBeforeApplication := FindLastApplDtldCustLedgEntry;
    
      OnBeforePostApplyCustLedgEntry(GenJnlLine,CustLedgEntry);
      GenJnlPostLine.CustPostApplyCustLedgEntry(GenJnlLine,CustLedgEntry);
      OnAfterPostApplyCustLedgEntry(GenJnlLine,CustLedgEntry,GenJnlPostLine); <=====================
    
      EntryNoAfterApplication := FindLastApplDtldCustLedgEntry;
      IF EntryNoAfterApplication = EntryNoBeforeApplication THEN
        ERROR(NoEntriesAppliedErr,GenJnlLine.FIELDCAPTION("Applies-to ID"));
    ...
Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<OnAfterPostUnapplyCustLedgEntry>
  Raised in: Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<PostUnApplyCustomerCommit>
    Code lines:
    ...
    
      OnBeforePostUnapplyCustLedgEntry(GenJnlLine,CustLedgEntry,DtldCustLedgEntry2);
      CollectAffectedLedgerEntries(TempCustLedgerEntry,DtldCustLedgEntry2);
      GenJnlPostLine.UnapplyCustLedgEntry(GenJnlLine,DtldCustLedgEntry2);
      AdjustExchangeRates.AdjustExchRateCust(GenJnlLine,TempCustLedgerEntry);
      OnAfterPostUnapplyCustLedgEntry(GenJnlLine,CustLedgEntry,DtldCustLedgEntry2); <=====================
    
      IF PreviewMode THEN
        GenJnlPostPreview.ThrowError;
    
    ...
Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<OnBeforePostApplyCustLedgEntry>
  Raised in: Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<CustPostApplyCustLedgEntry>
    Code lines:
    ...
      GenJnlLine."Source Code" := SourceCodeSetup."Sales Entry Application";
      GenJnlLine."System-Created Entry" := TRUE;
    
      EntryNoBeforeApplication := FindLastApplDtldCustLedgEntry;
    
      OnBeforePostApplyCustLedgEntry(GenJnlLine,CustLedgEntry); <=====================
      GenJnlPostLine.CustPostApplyCustLedgEntry(GenJnlLine,CustLedgEntry);
      OnAfterPostApplyCustLedgEntry(GenJnlLine,CustLedgEntry,GenJnlPostLine);
    
      EntryNoAfterApplication := FindLastApplDtldCustLedgEntry;
    ...
Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<OnBeforePostUnapplyCustLedgEntry>
  Raised in: Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<PostUnApplyCustomerCommit>
    Code lines:
    ...
      GenJnlLine."Source Code" := SourceCodeSetup."Unapplied Sales Entry Appln.";
      GenJnlLine."Source Currency Code" := "Currency Code";
      GenJnlLine."System-Created Entry" := TRUE;
      Window.OPEN(UnapplyingMsg);
    
      OnBeforePostUnapplyCustLedgEntry(GenJnlLine,CustLedgEntry,DtldCustLedgEntry2); <=====================
      CollectAffectedLedgerEntries(TempCustLedgerEntry,DtldCustLedgEntry2);
      GenJnlPostLine.UnapplyCustLedgEntry(GenJnlLine,DtldCustLedgEntry2);
      AdjustExchangeRates.AdjustExchRateCust(GenJnlLine,TempCustLedgerEntry);
      OnAfterPostUnapplyCustLedgEntry(GenJnlLine,CustLedgEntry,DtldCustLedgEntry2);
    ...
Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<OnFindLastApplEntryOnAfterSetFilters>
  Raised in: Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<FindLastApplEntry>
    Code lines:
    WITH DtldCustLedgEntry DO BEGIN
      SETCURRENTKEY("Cust. Ledger Entry No.","Entry Type");
      SETRANGE("Cust. Ledger Entry No.",CustLedgEntryNo);
      SETRANGE("Entry Type","Entry Type"::Application);
      SETRANGE(Unapplied,FALSE);
      OnFindLastApplEntryOnAfterSetFilters(DtldCustLedgEntry); <=====================
      ApplicationEntryNo := 0;
      IF FIND('-') THEN
        REPEAT
          IF "Entry No." > ApplicationEntryNo THEN
    ...
Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<OnPostUnApplyCustomerCommitOnAfterSetFilters>
  Raised in: Codeunit<CustEntry-Apply Posted Entries>.PROCEDURE<PostUnApplyCustomerCommit>
    Code lines:
    ...
      DtldCustLedgEntry.SETRANGE("Transaction No.",DtldCustLedgEntry2."Transaction No.");
    END;
    DtldCustLedgEntry.SETRANGE("Customer No.",DtldCustLedgEntry2."Customer No.");
    DtldCustLedgEntry.SETFILTER("Entry Type",'<>%1',DtldCustLedgEntry."Entry Type"::"Initial Entry");
    DtldCustLedgEntry.SETRANGE(Unapplied,FALSE);
    OnPostUnApplyCustomerCommitOnAfterSetFilters(DtldCustLedgEntry,DtldCustLedgEntry2); <=====================
    IF DtldCustLedgEntry.FIND('-') THEN
      REPEAT
        IF NOT AddCurrChecked THEN BEGIN
          CheckAdditionalCurrency(PostingDate,DtldCustLedgEntry."Posting Date");
    ...
Codeunit<VendEntry-Apply Posted Entries>.PROCEDURE<OnAfterPostApplyVendLedgEntry>
  Raised in: Codeunit<VendEntry-Apply Posted Entries>.PROCEDURE<VendPostApplyVendLedgEntry>
    Code lines:
    ...
    
      EntryNoBeforeApplication := FindLastApplDtldVendLedgEntry;
    
      OnBeforePostApplyVendLedgEntry(GenJnlLine,VendLedgEntry);
      GenJnlPostLine.VendPostApplyVendLedgEntry(GenJnlLine,VendLedgEntry);
      OnAfterPostApplyVendLedgEntry(GenJnlLine,VendLedgEntry,GenJnlPostLine); <=====================
    
      EntryNoAfterApplication := FindLastApplDtldVendLedgEntry;
      IF EntryNoAfterApplication = EntryNoBeforeApplication THEN
        ERROR(NoEntriesAppliedErr,GenJnlLine.FIELDCAPTION("Applies-to ID"));
    ...
Codeunit<VendEntry-Apply Posted Entries>.PROCEDURE<OnAfterPostUnapplyVendLedgEntry>
  Raised in: Codeunit<VendEntry-Apply Posted Entries>.PROCEDURE<PostUnApplyVendor>
    Code lines:
    ...
      Window.OPEN(UnapplyingMsg);
      OnBeforePostUnapplyVendLedgEntry(GenJnlLine,VendLedgEntry,DtldVendLedgEntry2);
      CollectAffectedLedgerEntries(TempVendorLedgerEntry,DtldVendLedgEntry2);
      GenJnlPostLine.UnapplyVendLedgEntry(GenJnlLine,DtldVendLedgEntry2);
      AdjustExchangeRates.AdjustExchRateVend(GenJnlLine,TempVendorLedgerEntry);
      OnAfterPostUnapplyVendLedgEntry(GenJnlLine,VendLedgEntry,DtldVendLedgEntry2); <=====================
    
      IF PreviewMode THEN
        GenJnlPostPreview.ThrowError;
    
    ...
Codeunit<VendEntry-Apply Posted Entries>.PROCEDURE<OnBeforePostApplyVendLedgEntry>
  Raised in: Codeunit<VendEntry-Apply Posted Entries>.PROCEDURE<VendPostApplyVendLedgEntry>
    Code lines:
    ...
      GenJnlLine."Source Code" := SourceCodeSetup."Purchase Entry Application";
      GenJnlLine."System-Created Entry" := TRUE;
    
      EntryNoBeforeApplication := FindLastApplDtldVendLedgEntry;
    
      OnBeforePostApplyVendLedgEntry(GenJnlLine,VendLedgEntry); <=====================
      GenJnlPostLine.VendPostApplyVendLedgEntry(GenJnlLine,VendLedgEntry);
      OnAfterPostApplyVendLedgEntry(GenJnlLine,VendLedgEntry,GenJnlPostLine);
    
      EntryNoAfterApplication := FindLastApplDtldVendLedgEntry;
    ...
Codeunit<VendEntry-Apply Posted Entries>.PROCEDURE<OnBeforePostUnapplyVendLedgEntry>
  Raised in: Codeunit<VendEntry-Apply Posted Entries>.PROCEDURE<PostUnApplyVendor>
    Code lines:
    ...
      GenJnlLine."Source No." := "Vendor No.";
      GenJnlLine."Source Code" := SourceCodeSetup."Unapplied Purch. Entry Appln.";
      GenJnlLine."Source Currency Code" := "Currency Code";
      GenJnlLine."System-Created Entry" := TRUE;
      Window.OPEN(UnapplyingMsg);
      OnBeforePostUnapplyVendLedgEntry(GenJnlLine,VendLedgEntry,DtldVendLedgEntry2); <=====================
      CollectAffectedLedgerEntries(TempVendorLedgerEntry,DtldVendLedgEntry2);
      GenJnlPostLine.UnapplyVendLedgEntry(GenJnlLine,DtldVendLedgEntry2);
      AdjustExchangeRates.AdjustExchRateVend(GenJnlLine,TempVendorLedgerEntry);
      OnAfterPostUnapplyVendLedgEntry(GenJnlLine,VendLedgEntry,DtldVendLedgEntry2);
    ...
Codeunit<Document-Print>.PROCEDURE<OnBeforeCalcPurchDisc>
  Raised in: Codeunit<Document-Print>.PROCEDURE<CalcPurchDisc>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCalcPurchDisc(PurchHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    PurchSetup.GET;
    IF PurchSetup."Calc. Inv. Discount" THEN BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
    ...
Codeunit<Document-Print>.PROCEDURE<OnBeforeCalcSalesDisc>
  Raised in: Codeunit<Document-Print>.PROCEDURE<CalcSalesDisc>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCalcSalesDisc(SalesHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SalesSetup.GET;
    IF SalesSetup."Calc. Inv. Discount" THEN BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
    ...
Codeunit<Document-Print>.PROCEDURE<OnBeforeCalcServDisc>
  Raised in: Codeunit<Document-Print>.PROCEDURE<CalcServDisc>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCalcServDisc(ServHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SalesSetup.GET;
    IF SalesSetup."Calc. Inv. Discount" THEN BEGIN
      ServLine.RESET;
      ServLine.SETRANGE("Document Type",ServHeader."Document Type");
      ServLine.SETRANGE("Document No.",ServHeader."No.");
    ...
Codeunit<Document-Print>.PROCEDURE<OnBeforeDoPrintPurchHeader>
  Raised in: Codeunit<Document-Print>.PROCEDURE<PrintPurchHeader>
    Code lines:
    PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type");
    PurchHeader.SETRANGE("No.",PurchHeader."No.");
    CalcPurchDisc(PurchHeader);
    OnBeforeDoPrintPurchHeader(PurchHeader,GetPurchDocTypeUsage(PurchHeader),IsPrinted); <=====================
    IF IsPrinted THEN
      EXIT;
    
    ReportSelections.PrintWithGUIYesNoVendor(
      GetPurchDocTypeUsage(PurchHeader),PurchHeader,TRUE,PurchHeader.FIELDNO("Buy-from Vendor No."));
Codeunit<Document-Print>.PROCEDURE<OnBeforeDoPrintSalesHeader>
  Raised in: Codeunit<Document-Print>.PROCEDURE<DoPrintSalesHeader>
    Code lines:
    SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type");
    SalesHeader.SETRANGE("No.",SalesHeader."No.");
    CalcSalesDisc(SalesHeader);
    OnBeforeDoPrintSalesHeader(SalesHeader,GetSalesDocTypeUsage(SalesHeader),SendAsEmail,IsPrinted); <=====================
    IF IsPrinted THEN
      EXIT;
    
    IF SendAsEmail THEN
      ReportSelections.SendEmailToCust(
        GetSalesDocTypeUsage(SalesHeader),SalesHeader,SalesHeader."No.",SalesHeader.GetDocTypeTxt,TRUE,SalesHeader.GetBillToNo)
    ...
Codeunit<Document-Print>.PROCEDURE<OnBeforePrintAsmHeader>
  Raised in: Codeunit<Document-Print>.PROCEDURE<PrintAsmHeader>
    Code lines:
    AsmHeader.SETRANGE("Document Type",AsmHeader."Document Type");
    AsmHeader.SETRANGE("No.",AsmHeader."No.");
    OnBeforePrintAsmHeader(AsmHeader,GetAsmHeaderDocTypeUsage(AsmHeader),IsPrinted); <=====================
    IF IsPrinted THEN
      EXIT;
    
    ReportSelections.Print(GetAsmHeaderDocTypeUsage(AsmHeader),AsmHeader,0);
Codeunit<Document-Print>.PROCEDURE<OnBeforePrintBankAccStmt>
  Raised in: Codeunit<Document-Print>.PROCEDURE<PrintBankAccStmt>
    Code lines:
    BankAccStmt.SETRECFILTER;
    OnBeforePrintBankAccStmt(BankAccStmt,IsPrinted); <=====================
    IF IsPrinted THEN
      EXIT;
    
    ReportSelections.Print(ReportSelections.Usage::"B.Stmt",BankAccStmt,0);
Codeunit<Document-Print>.PROCEDURE<OnBeforePrintCheck>
  Raised in: Codeunit<Document-Print>.PROCEDURE<PrintCheck>
    Code lines:
    GenJnlLine.COPY(NewGenJnlLine);
    GenJnlLine.OnCheckGenJournalLinePrintCheckRestrictions;
    OnBeforePrintCheck(GenJnlLine,IsPrinted); <=====================
    IF IsPrinted THEN
      EXIT;
    
    ReportSelections.Print(ReportSelections.Usage::"B.Check",GenJnlLine,0);
Codeunit<Document-Print>.PROCEDURE<OnBeforePrintProformaSalesInvoice>
  Raised in: Codeunit<Document-Print>.PROCEDURE<PrintProformaSalesInvoice>
    Code lines:
    SalesHeader.SETRECFILTER;
    OnBeforePrintProformaSalesInvoice(SalesHeader,ReportSelections.Usage::"Pro Forma S. Invoice",IsPrinted); <=====================
    IF IsPrinted THEN
      EXIT;
    
    ReportSelections.Print(ReportSelections.Usage::"Pro Forma S. Invoice",SalesHeader,SalesHeader.FIELDNO("Bill-to Customer No."));
Codeunit<Document-Print>.PROCEDURE<OnBeforePrintPurchHeaderArch>
  Raised in: Codeunit<Document-Print>.PROCEDURE<PrintPurchHeaderArch>
    Code lines:
    PurchHeaderArch.SETRECFILTER;
    OnBeforePrintPurchHeaderArch(PurchHeaderArch,GetPurchArchDocTypeUsage(PurchHeaderArch),IsPrinted); <=====================
    IF IsPrinted THEN
      EXIT;
    
    ReportSelection.PrintWithGUIYesNoVendor(
      GetPurchArchDocTypeUsage(PurchHeaderArch),PurchHeaderArch,TRUE,PurchHeaderArch.FIELDNO("Buy-from Vendor No."));
Codeunit<Document-Print>.PROCEDURE<OnBeforePrintSalesHeaderArch>
  Raised in: Codeunit<Document-Print>.PROCEDURE<PrintSalesHeaderArch>
    Code lines:
    SalesHeaderArch.SETRECFILTER;
    OnBeforePrintSalesHeaderArch(SalesHeaderArch,GetSalesArchDocTypeUsage(SalesHeaderArch),IsPrinted); <=====================
    IF IsPrinted THEN
      EXIT;
    
    ReportSelection.Print(GetSalesArchDocTypeUsage(SalesHeaderArch),SalesHeaderArch,SalesHeaderArch.FIELDNO("Bill-to Customer No."));
Codeunit<Document-Print>.PROCEDURE<OnBeforePrintSalesOrder>
  Raised in: Codeunit<Document-Print>.PROCEDURE<PrintSalesOrder>
    Code lines:
    IF SalesHeader."Document Type" <> SalesHeader."Document Type"::Order THEN
      EXIT;
    
    SalesHeader.SETRANGE("No.",SalesHeader."No.");
    CalcSalesDisc(SalesHeader);
    OnBeforePrintSalesOrder(SalesHeader,GetSalesOrderUsage(Usage),IsPrinted); <=====================
    IF IsPrinted THEN
      EXIT;
    
    ReportSelection.PrintWithGUIYesNo(GetSalesOrderUsage(Usage),SalesHeader,GUIALLOWED,SalesHeader.FIELDNO("Bill-to Customer No."));
Codeunit<Document-Print>.PROCEDURE<OnBeforePrintServiceContract>
  Raised in: Codeunit<Document-Print>.PROCEDURE<PrintServiceContract>
    Code lines:
    ServiceContract.SETRANGE("Contract No.",ServiceContract."Contract No.");
    OnBeforePrintServiceContract(ServiceContract,GetServContractTypeUsage(ServiceContract),IsPrinted); <=====================
    IF IsPrinted THEN
      EXIT;
    
    ReportSelection.FilterPrintUsage(GetServContractTypeUsage(ServiceContract));
    IF ReportSelection.ISEMPTY THEN
      ERROR(Text001,ReportSelection.TABLECAPTION,FORMAT(ServiceContract."Contract Type"),ServiceContract."Contract No.");
    
    ReportSelection.Print(
Codeunit<Document-Print>.PROCEDURE<OnBeforePrintServiceHeader>
  Raised in: Codeunit<Document-Print>.PROCEDURE<PrintServiceHeader>
    Code lines:
    ServiceHeader.SETRANGE("Document Type",ServiceHeader."Document Type");
    ServiceHeader.SETRANGE("No.",ServiceHeader."No.");
    CalcServDisc(ServiceHeader);
    OnBeforePrintServiceHeader(ServiceHeader,GetServHeaderDocTypeUsage(ServiceHeader),IsPrinted); <=====================
    IF IsPrinted THEN
      EXIT;
    
    ReportSelection.FilterPrintUsage(GetServHeaderDocTypeUsage(ServiceHeader));
    IF ReportSelection.ISEMPTY THEN
      ERROR(Text002,ReportSelection.FIELDCAPTION("Report ID"),ServiceHeader.TABLECAPTION,ReportSelection.TABLECAPTION);
    ...
Codeunit<Document-Print>.PROCEDURE<OnBeforePrintTransferHeader>
  Raised in: Codeunit<Document-Print>.PROCEDURE<PrintTransferHeader>
    Code lines:
    TransHeader.SETRANGE("No.",TransHeader."No.");
    OnBeforePrintTransferHeader(TransHeader,IsPrinted); <=====================
    IF IsPrinted THEN
      EXIT;
    
    ReportSelections.Print(ReportSelections.Usage::Inv1,TransHeader,0);
Codeunit<Document-Print>.PROCEDURE<OnGetAsmHeaderTypeUsageElseCase>
  Raised in: Codeunit<Document-Print>.PROCEDURE<GetAsmHeaderDocTypeUsage>
    Code lines:
    ...
      AsmHeader."Document Type"::"Blanket Order",
      AsmHeader."Document Type"::Order:
        EXIT(ReportSelections.Usage::"Asm.Order");
      ELSE BEGIN
        IsHandled := FALSE;
        OnGetAsmHeaderTypeUsageElseCase(AsmHeader,TypeUsage,IsHandled); <=====================
        IF IsHandled THEN
          EXIT(TypeUsage);
        ERROR('');
      END;
Codeunit<Document-Print>.PROCEDURE<OnGetPurchArchDocTypeUsageElseCase>
  Raised in: Codeunit<Document-Print>.PROCEDURE<GetPurchArchDocTypeUsage>
    Code lines:
    ...
        EXIT(ReportSelections.Usage::"P.Arch.Return");
      PurchHeaderArchive."Document Type"::"Blanket Order":
        EXIT(ReportSelections.Usage::"P.Arch.Blanket");
      ELSE BEGIN
        IsHandled := FALSE;
        OnGetPurchArchDocTypeUsageElseCase(PurchHeaderArchive,TypeUsage,IsHandled); <=====================
        IF IsHandled THEN
          EXIT(TypeUsage);
        ERROR('');
      END;
Codeunit<Document-Print>.PROCEDURE<OnGetPurchDocTypeUsageElseCase>
  Raised in: Codeunit<Document-Print>.PROCEDURE<GetPurchDocTypeUsage>
    Code lines:
    ...
        EXIT(ReportSelections.Usage::"P.Order");
      PurchHeader."Document Type"::"Return Order":
        EXIT(ReportSelections.Usage::"P.Return");
      ELSE BEGIN
        IsHandled := FALSE;
        OnGetPurchDocTypeUsageElseCase(PurchHeader,TypeUsage,IsHandled); <=====================
        IF IsHandled THEN
          EXIT(TypeUsage);
        ERROR('');
      END;
Codeunit<Document-Print>.PROCEDURE<OnGetSalesArchDocTypeUsageElseCase>
  Raised in: Codeunit<Document-Print>.PROCEDURE<GetSalesArchDocTypeUsage>
    Code lines:
    ...
        EXIT(ReportSelections.Usage::"S.Arch.Return");
      SalesHeaderArchive."Document Type"::"Blanket Order":
        EXIT(ReportSelections.Usage::"S.Arch.Blanket");
      ELSE BEGIN
        IsHandled := FALSE;
        OnGetSalesArchDocTypeUsageElseCase(SalesHeaderArchive,TypeUsage,IsHandled); <=====================
        IF IsHandled THEN
          EXIT(TypeUsage);
        ERROR('');
      END;
Codeunit<Document-Print>.PROCEDURE<OnGetSalesDocTypeUsageElseCase>
  Raised in: Codeunit<Document-Print>.PROCEDURE<GetSalesDocTypeUsage>
    Code lines:
    ...
        EXIT(ReportSelections.Usage::"S.Invoice Draft");
      SalesHeader."Document Type"::"Credit Memo":
        EXIT(ReportSelections.Usage::"S.Cr.Memo");
      ELSE BEGIN
        IsHandled := FALSE;
        OnGetSalesDocTypeUsageElseCase(SalesHeader,TypeUsage,IsHandled); <=====================
        IF IsHandled THEN
          EXIT(TypeUsage);
        ERROR('');
      END;
Codeunit<Document-Print>.PROCEDURE<OnGetServContractTypeUsageElseCase>
  Raised in: Codeunit<Document-Print>.PROCEDURE<GetServContractTypeUsage>
    Code lines:
    ...
        EXIT(ReportSelections.Usage::"SM.Contract Quote");
      ServiceContractHeader."Contract Type"::Contract:
        EXIT(ReportSelections.Usage::"SM.Contract");
      ELSE BEGIN
        IsHandled := FALSE;
        OnGetServContractTypeUsageElseCase(ServiceContractHeader,TypeUsage,IsHandled); <=====================
        IF IsHandled THEN
          EXIT(TypeUsage);
        ERROR('');
      END;
Codeunit<Document-Print>.PROCEDURE<OnGetServHeaderDocTypeUsageElseCase>
  Raised in: Codeunit<Document-Print>.PROCEDURE<GetServHeaderDocTypeUsage>
    Code lines:
    ...
        EXIT(ReportSelections.Usage::"SM.Invoice");
      ServiceHeader."Document Type"::"Credit Memo":
        EXIT(ReportSelections.Usage::"SM.Credit Memo");
      ELSE BEGIN
        IsHandled := FALSE;
        OnGetServHeaderDocTypeUsageElseCase(ServiceHeader,TypeUsage,IsHandled); <=====================
        IF IsHandled THEN
          EXIT(TypeUsage);
        ERROR('');
      END;
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnAfterCheckJnlLine>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<CheckLines>
    Code lines:
    ...
             ("Inventory Value Per" = "Inventory Value Per"::" ") AND
             "Partial Revaluation"
          THEN
            CheckRemainingQty;
    
          OnAfterCheckJnlLine(ItemJnlLine,SuppressCommit); <=====================
        END;
    
        IF NEXT = 0 THEN
          FINDFIRST;
    ...
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnAfterCheckLines>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<CheckLines>
    Code lines:
    ...
          FINDFIRST;
      UNTIL "Line No." = StartLineNo;
      NoOfRecords := LineCount;
    END;
    
    OnAfterCheckLines(ItemJnlLine); <=====================
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnAfterConstructPostingNumber>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<ConstructPostingNumber>
    Code lines:
    ...
            EVALUATE(PostingNoSeriesNo,NoSeries.Description);
            "Document No." := NoSeriesMgt2[PostingNoSeriesNo].GetNextNo("Posting No. Series","Posting Date",FALSE);
            LastPostedDocNo := "Document No.";
          END;
    
    OnAfterConstructPostingNumber(ItemJnlLine); <=====================
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnAfterItemJnlPostSumLine>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<ItemJnlPostSumLine>
    Code lines:
    ...
    
      IF ItemJnlLine."Update Standard Cost" THEN
        UpdateStdCost;
    END;
    
    OnAfterItemJnlPostSumLine(ItemJnlLine); <=====================
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnAfterPostJnlLines>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<Code>
    Code lines:
    ...
      END;
    
      IF PhysInvtCount THEN
        PhysInvtCountMgt.UpdateItemSKUListPhysInvtCount;
    
      OnAfterPostJnlLines(ItemJnlBatch,ItemJnlLine,ItemRegNo,WhseRegNo); <=====================
    
      Window.CLOSE;
      IF NOT SuppressCommit THEN
        COMMIT;
    ...
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnAfterPostLines>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<PostLines>
    Code lines:
    ...
          PhysInvtCountMgt.AddToTempItemSKUList("Item No.","Location Code","Variant Code","Phys Invt Counting Period Type");
        END;
      UNTIL NEXT = 0;
    END;
    
    OnAfterPostLines(ItemJnlLine,ItemRegNo); <=====================
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnAfterPostWhseJnlLine>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<PostWhseJnlLine>
    Code lines:
    ...
            IF TempWhseJnlLine2.FINDSET THEN
              REPEAT
                WMSMgmt.CheckWhseJnlLine(TempWhseJnlLine2,1,0,FALSE);
                WhseJnlPostLine.RUN(TempWhseJnlLine2);
              UNTIL TempWhseJnlLine2.NEXT = 0;
            OnAfterPostWhseJnlLine(ItemJnlLine,SuppressCommit); <=====================
          END;
    
      IF "Entry Type" = "Entry Type"::Transfer THEN BEGIN
        GetLocation("New Location Code");
    ...
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<PostWhseJnlLine>
    Code lines:
    ...
            IF TempWhseJnlLine2.FINDSET THEN
              REPEAT
                WMSMgmt.CheckWhseJnlLine(TempWhseJnlLine2,1,0,FALSE);
                WhseJnlPostLine.RUN(TempWhseJnlLine2);
              UNTIL TempWhseJnlLine2.NEXT = 0;
            OnAfterPostWhseJnlLine(ItemJnlLine,SuppressCommit); <=====================
          END;
    
      IF "Entry Type" = "Entry Type"::Transfer THEN BEGIN
        GetLocation("New Location Code");
    ...
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnBeforeCheckItemAvailability>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<CheckItemAvailability>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckItemAvailabilityHandled(ItemJnlLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    ItemJnlLine2.COPYFILTERS(ItemJnlLine);
    IF ItemJnlLine2.FINDSET THEN
      REPEAT
        IF NOT TempSKU.GET(ItemJnlLine2."Location Code",ItemJnlLine2."Item No.",ItemJnlLine2."Variant Code") THEN
          InsertTempSKU(TempSKU,ItemJnlLine2);
    ...
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnBeforeCheckItemAvailabilityHandled>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<CheckItemAvailability>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckItemAvailabilityHandled(ItemJnlLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    ItemJnlLine2.COPYFILTERS(ItemJnlLine);
    IF ItemJnlLine2.FINDSET THEN
      REPEAT
        IF NOT TempSKU.GET(ItemJnlLine2."Location Code",ItemJnlLine2."Item No.",ItemJnlLine2."Variant Code") THEN
          InsertTempSKU(TempSKU,ItemJnlLine2);
    ...
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnBeforeCheckLines>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<CheckLines>
    Code lines:
    OnBeforeCheckLines(ItemJnlLine); <=====================
    
    WITH ItemJnlLine DO BEGIN
      LineCount := 0;
      StartLineNo := "Line No.";
      REPEAT
        LineCount := LineCount + 1;
        Window.UPDATE(2,LineCount);
        CheckRecurringLine(ItemJnlLine);
    
    ...
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnBeforeCode>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<Code>
    Code lines:
    OnBeforeCode(ItemJnlLine); <=====================
    
    WITH ItemJnlLine DO BEGIN
      LOCKTABLE;
      SETRANGE("Journal Template Name","Journal Template Name");
      SETRANGE("Journal Batch Name","Journal Batch Name");
    
      ItemJnlTemplate.GET("Journal Template Name");
      ItemJnlBatch.GET("Journal Template Name","Journal Batch Name");
    
    ...
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnBeforeIncrBatchName>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<HandleNonRecurringLine>
    Code lines:
    ...
      ItemJnlLine3.SETRANGE("Journal Template Name","Journal Template Name");
      ItemJnlLine3.SETRANGE("Journal Batch Name","Journal Batch Name");
      IF ItemJnlTemplate."Increment Batch Name" THEN
        IF NOT ItemJnlLine3.FINDLAST THEN BEGIN
          IncrBatchName := INCSTR("Journal Batch Name") <> '';
          OnBeforeIncrBatchName(ItemJnlLine,IncrBatchName); <=====================
          IF IncrBatchName THEN BEGIN
            ItemJnlBatch.DELETE;
            ItemJnlBatch.Name := INCSTR("Journal Batch Name");
            IF ItemJnlBatch.INSERT THEN;
    ...
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnBeforeItemJnlPostSumLine>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<ItemJnlPostSumLine>
    Code lines:
    ...
                        ItemJnlLine4.Amount * (ItemLedgEntry5.Quantity - ItemLedgEntry5."Invoiced Quantity") /
                        ItemLedgEntry5.Quantity,
                        GLSetup."Amount Rounding Precision");
                  END ELSE
                    ItemJnlLine4."Applied Amount" := 0;
                  OnBeforeItemJnlPostSumLine(ItemJnlLine4,ItemLedgEntry4); <=====================
                  ItemJnlPostLine.RunWithCheck(ItemJnlLine4);
                END;
              END ELSE BEGIN
                REPEAT
    ...
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnBeforeRaiseExceedLengthError>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<Code>
    Code lines:
    ...
      SETRANGE("Journal Batch Name","Journal Batch Name");
    
      ItemJnlTemplate.GET("Journal Template Name");
      ItemJnlBatch.GET("Journal Template Name","Journal Batch Name");
    
      OnBeforeRaiseExceedLengthError(ItemJnlBatch,RaiseError); <=====================
    
      IF ItemJnlTemplate.Recurring THEN BEGIN
        SETRANGE("Posting Date",0D,WORKDATE);
        SETFILTER("Expiration Date",'%1 | %2..',0D,WORKDATE);
    ...
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnBeforeUpdateDeleteLines>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<Code>
    Code lines:
    ...
        InvtAdjmt.SetProperties(TRUE,InvtSetup."Automatic Cost Posting");
        InvtAdjmt.MakeMultiLevelAdjmt;
      END;
    
      // Update/delete lines
      OnBeforeUpdateDeleteLines(ItemJnlLine,ItemRegNo); <=====================
      IF "Line No." <> 0 THEN BEGIN
        IF ItemJnlTemplate.Recurring THEN BEGIN
          HandleRecurringLine(ItemJnlLine);
        END ELSE
    ...
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnHandleNonRecurringLineOnInsertNewLine>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<HandleNonRecurringLine>
    Code lines:
    ...
            IF ItemJnlBatch.INSERT THEN;
            "Journal Batch Name" := ItemJnlBatch.Name;
          END;
        END;
    
      OnHandleNonRecurringLineOnInsertNewLine(ItemJnlLine3); <=====================
    
      ItemJnlLine3.SETRANGE("Journal Batch Name","Journal Batch Name");
      IF (ItemJnlBatch."No. Series" = '') AND NOT ItemJnlLine3.FINDLAST AND
         NOT (ItemJnlLine2."Entry Type" IN [ItemJnlLine2."Entry Type"::Consumption,ItemJnlLine2."Entry Type"::Output])
    ...
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnHandleRecurringLineOnBeforeModify>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<HandleRecurringLine>
    Code lines:
    ...
         (ItemJnlLine2."Item No." <> '')
      THEN BEGIN
        ItemJnlLine2.Quantity := 0;
        ItemJnlLine2."Invoiced Quantity" := 0;
        ItemJnlLine2.Amount := 0;
        OnHandleRecurringLineOnBeforeModify(ItemJnlLine2); <=====================
      END;
      ItemJnlLine2.MODIFY;
    UNTIL ItemJnlLine2.NEXT = 0;
Codeunit<Item Jnl.-Post Batch>.PROCEDURE<OnPostLinesBeforePostWhseJnlLine>
  Raised in: Codeunit<Item Jnl.-Post Batch>.PROCEDURE<PostLines>
    Code lines:
    ...
            OriginalQuantityBase := "Quantity (Base)";
            IF NOT ItemJnlPostLine.RunWithCheck(ItemJnlLine) THEN
              ItemJnlPostLine.CheckItemTracking;
            IF "Value Entry Type" <> "Value Entry Type"::Revaluation THEN BEGIN
              ItemJnlPostLine.CollectTrackingSpecification(TempTrackingSpecification);
              OnPostLinesBeforePostWhseJnlLine(ItemJnlLine,SuppressCommit); <=====================
              PostWhseJnlLine(ItemJnlLine,OriginalQuantity,OriginalQuantityBase,TempTrackingSpecification);
            END;
          END;
    
    ...
Codeunit<GenJnlManagement>.PROCEDURE<OnAfterSetName>
  Raised in: Codeunit<GenJnlManagement>.PROCEDURE<SetName>
    Code lines:
    GenJnlLine.FILTERGROUP := 2;
    GenJnlLine.SETRANGE("Journal Batch Name",CurrentJnlBatchName);
    GenJnlLine.FILTERGROUP := 0;
    OnAfterSetName(GenJnlLine,CurrentJnlBatchName); <=====================
    IF GenJnlLine.FIND('-') THEN;
Codeunit<GenJnlManagement>.PROCEDURE<OnBeforeLookupName>
  Raised in: Codeunit<GenJnlManagement>.PROCEDURE<LookupName>
    Code lines:
    ...
    GenJnlBatch."Journal Template Name" := GenJnlLine.GETRANGEMAX("Journal Template Name");
    GenJnlBatch.Name := GenJnlLine.GETRANGEMAX("Journal Batch Name");
    GenJnlBatch.FILTERGROUP(2);
    GenJnlBatch.SETRANGE("Journal Template Name",GenJnlBatch."Journal Template Name");
    GenJnlBatch.FILTERGROUP(0);
    OnBeforeLookupName(GenJnlBatch); <=====================
    IF PAGE.RUNMODAL(0,GenJnlBatch) = ACTION::LookupOK THEN BEGIN
      CurrentJnlBatchName := GenJnlBatch.Name;
      SetName(CurrentJnlBatchName,GenJnlLine);
    END;
Codeunit<GenJnlManagement>.PROCEDURE<OnTemplateSelectionSetFilter>
  Raised in: Codeunit<GenJnlManagement>.PROCEDURE<TemplateSelection>
    Code lines:
    ...
    GenJnlTemplate.RESET;
    GenJnlTemplate.SETRANGE("Page ID",PageID);
    GenJnlTemplate.SETRANGE(Recurring,RecurringJnl);
    IF NOT RecurringJnl THEN
      GenJnlTemplate.SETRANGE(Type,PageTemplate);
    OnTemplateSelectionSetFilter(GenJnlTemplate,PageTemplate); <=====================
    
    CASE GenJnlTemplate.COUNT OF
      0:
        BEGIN
    ...
Codeunit<Gen. Jnl.-Post>.PROCEDURE<OnBeforeCode>
  Raised in: Codeunit<Gen. Jnl.-Post>.PROCEDURE<Code>
    Code lines:
    HideDialog := FALSE;
    OnBeforeCode(GenJnlLine,HideDialog); <=====================
    
    WITH GenJnlLine DO BEGIN
      GenJnlTemplate.GET("Journal Template Name");
      IF GenJnlTemplate.Type = GenJnlTemplate.Type::Jobs THEN BEGIN
        SourceCodeSetup.GET;
        IF GenJnlTemplate."Source Code" = SourceCodeSetup."Job G/L WIP" THEN
          ERROR(Text006,GenJnlTemplate.FIELDCAPTION("Source Code"),GenJnlTemplate.TABLECAPTION,
            SourceCodeSetup.FIELDCAPTION("Job G/L WIP"),SourceCodeSetup.TABLECAPTION);
    ...
Codeunit<Gen. Jnl.-Post>.PROCEDURE<OnGenJnlLineSetFilter>
  Raised in: Codeunit<Gen. Jnl.-Post>.PROCEDURE<Code>
    Code lines:
    ...
      IF NOT FIND('=><') OR (TempJnlBatchName <> "Journal Batch Name") THEN BEGIN
        RESET;
        FILTERGROUP(2);
        SETRANGE("Journal Template Name","Journal Template Name");
        SETRANGE("Journal Batch Name","Journal Batch Name");
        OnGenJnlLineSetFilter(GenJnlLine); <=====================
        FILTERGROUP(0);
        "Line No." := 1;
      END;
    END;
Codeunit<Gen. Jnl.-Post+Print>.PROCEDURE<OnBeforeGLRegPostingReportPrint>
  Raised in: Codeunit<Gen. Jnl.-Post+Print>.PROCEDURE<Code>
    Code lines:
    ...
          VendLedgEntry.SETRANGE("Entry No.",GLReg."From Entry No.",GLReg."To Entry No.");
          REPORT.RUN(GenJnlTemplate."Vendor Receipt Report ID",FALSE,FALSE,VendLedgEntry);
        END;
        IF GenJnlTemplate."Posting Report ID" <> 0 THEN BEGIN
          GLReg.SETRECFILTER;
          OnBeforeGLRegPostingReportPrint(GenJnlTemplate."Posting Report ID",FALSE,FALSE,GLReg,IsHandled); <=====================
          IF NOT IsHandled THEN
            REPORT.RUN(GenJnlTemplate."Posting Report ID",FALSE,FALSE,GLReg);
        END;
      END;
    ...
Codeunit<Gen. Jnl.-Post+Print>.PROCEDURE<OnBeforePostJournalBatch>
  Raised in: Codeunit<Gen. Jnl.-Post+Print>.PROCEDURE<Code>
    Code lines:
    ...
      THEN
        GenJnlTemplate.TESTFIELD("Posting Report ID");
      IF GenJnlTemplate.Recurring AND (GETFILTER("Posting Date") <> '') THEN
        FIELDERROR("Posting Date",Text000);
    
      OnBeforePostJournalBatch(GenJnlLine,HideDialog); <=====================
    
      IF NOT HideDialog THEN
        IF NOT ConfirmManagement.ConfirmProcess(Text001,TRUE) THEN
          EXIT;
    ...
Codeunit<Gen. Jnl.-Post+Print>.PROCEDURE<OnGenJnlLineSetFilter>
  Raised in: Codeunit<Gen. Jnl.-Post+Print>.PROCEDURE<Code>
    Code lines:
    ...
      IF NOT FIND('=><') OR (TempJnlBatchName <> "Journal Batch Name") THEN BEGIN
        RESET;
        FILTERGROUP(2);
        SETRANGE("Journal Template Name","Journal Template Name");
        SETRANGE("Journal Batch Name","Journal Batch Name");
        OnGenJnlLineSetFilter(GenJnlLine); <=====================
        FILTERGROUP(0);
        "Line No." := 1;
      END;
    END;
Codeunit<Gen. Jnl.-B.Post+Print>.PROCEDURE<OnBeforeGLRegPostingReportPrint>
  Raised in: Codeunit<Gen. Jnl.-B.Post+Print>.PROCEDURE<Code>
    Code lines:
    ...
              VendLedgEntry.SETRANGE("Entry No.",GLReg."From Entry No.",GLReg."To Entry No.");
              REPORT.RUN(GenJnlTemplate."Vendor Receipt Report ID",FALSE,FALSE,VendLedgEntry);
            END;
            IF GenJnlTemplate."Posting Report ID" <> 0 THEN BEGIN
              GLReg.SETRECFILTER;
              OnBeforeGLRegPostingReportPrint(GenJnlTemplate."Posting Report ID",FALSE,FALSE,GLReg,IsHandled); <=====================
              IF NOT IsHandled THEN
                REPORT.RUN(GenJnlTemplate."Posting Report ID",FALSE,FALSE,GLReg);
            END;
          END;
    ...
Codeunit<Gen. Jnl.-B.Post+Print>.PROCEDURE<OnBeforePostJournalBatch>
  Raised in: Codeunit<Gen. Jnl.-B.Post+Print>.PROCEDURE<Code>
    Code lines:
    ...
      IF GenJnlTemplate."Force Posting Report" OR
         (GenJnlTemplate."Cust. Receipt Report ID" = 0) AND (GenJnlTemplate."Vendor Receipt Report ID" = 0)
      THEN
        GenJnlTemplate.TESTFIELD("Posting Report ID");
    
      OnBeforePostJournalBatch(GenJnlBatch,HideDialog); <=====================
    
      IF NOT HideDialog THEN
        IF NOT ConfirmManagement.ConfirmProcess(Text000,TRUE) THEN
          EXIT;
    ...
Codeunit<ItemJnlManagement>.PROCEDURE<OnBeforeLookupName>
  Raised in: Codeunit<ItemJnlManagement>.PROCEDURE<LookupName>
    Code lines:
    ...
    ItemJnlBatch."Journal Template Name" := ItemJnlLine.GETRANGEMAX("Journal Template Name");
    ItemJnlBatch.Name := ItemJnlLine.GETRANGEMAX("Journal Batch Name");
    ItemJnlBatch.FILTERGROUP(2);
    ItemJnlBatch.SETRANGE("Journal Template Name",ItemJnlBatch."Journal Template Name");
    ItemJnlBatch.FILTERGROUP(0);
    OnBeforeLookupName(ItemJnlBatch); <=====================
    IF PAGE.RUNMODAL(0,ItemJnlBatch) = ACTION::LookupOK THEN BEGIN
      CurrentJnlBatchName := ItemJnlBatch.Name;
      SetName(CurrentJnlBatchName,ItemJnlLine);
    END;
Codeunit<ItemJnlManagement>.PROCEDURE<OnTemplateSelectionSetFilter>
  Raised in: Codeunit<ItemJnlManagement>.PROCEDURE<TemplateSelection>
    Code lines:
    ...
    
    ItemJnlTemplate.RESET;
    ItemJnlTemplate.SETRANGE("Page ID",PageID);
    ItemJnlTemplate.SETRANGE(Recurring,RecurringJnl);
    ItemJnlTemplate.SETRANGE(Type,PageTemplate);
    OnTemplateSelectionSetFilter(ItemJnlTemplate,PageTemplate); <=====================
    
    CASE ItemJnlTemplate.COUNT OF
      0:
        BEGIN
    ...
Codeunit<Item Jnl.-Post>.PROCEDURE<OnBeforeCode>
  Raised in: Codeunit<Item Jnl.-Post>.PROCEDURE<Code>
    Code lines:
    HideDialog := FALSE;
    OnBeforeCode(ItemJnlLine,HideDialog); <=====================
    
    WITH ItemJnlLine DO BEGIN
      ItemJnlTemplate.GET("Journal Template Name");
      ItemJnlTemplate.TESTFIELD("Force Posting Report",FALSE);
      IF ItemJnlTemplate.Recurring AND (GETFILTER("Posting Date") <> '') THEN
        FIELDERROR("Posting Date",Text000);
    
      IF NOT HideDialog THEN
    ...
Codeunit<Item Jnl.-Post+Print>.PROCEDURE<OnBeforePostJournalBatch>
  Raised in: Codeunit<Item Jnl.-Post+Print>.PROCEDURE<Code>
    Code lines:
    ...
      ItemJnlTemplate.TESTFIELD("Posting Report ID");
      IF ItemJnlTemplate.Recurring AND (GETFILTER("Posting Date") <> '') THEN
        FIELDERROR("Posting Date",Text000);
    
      HideDialog := FALSE;
      OnBeforePostJournalBatch(ItemJnlLine,HideDialog); <=====================
      IF NOT HideDialog THEN
        IF NOT CONFIRM(Text001,FALSE) THEN
          EXIT;
    
    ...
Codeunit<Item Jnl.-B.Post+Print>.PROCEDURE<OnBeforePostJournalBatch>
  Raised in: Codeunit<Item Jnl.-B.Post+Print>.PROCEDURE<Code>
    Code lines:
    WITH ItemJnlBatch DO BEGIN
      ItemJnlTemplate.GET("Journal Template Name");
      ItemJnlTemplate.TESTFIELD("Posting Report ID");
    
      HideDialog := FALSE;
      OnBeforePostJournalBatch(ItemJnlBatch,HideDialog); <=====================
      IF NOT HideDialog THEN
        IF NOT CONFIRM(Text000,FALSE) THEN
          EXIT;
    
    ...
Codeunit<Item Jnl.-Explode BOM>.PROCEDURE<OnBeforeToItemJnlLineInsert>
  Raised in: Codeunit<Item Jnl.-Explode BOM>.<OnRun>
    Code lines:
    ...
      ToItemJnlLine.VALIDATE("Unit of Measure Code",FromBOMComp."Unit of Measure Code");
      ToItemJnlLine.VALIDATE(
        Quantity,
        ROUND("Quantity (Base)" * FromBOMComp."Quantity per",0.00001));
      ToItemJnlLine.Description := FromBOMComp.Description;
      OnBeforeToItemJnlLineInsert(ToItemJnlLine,Rec); <=====================
      ToItemJnlLine.INSERT;
    
      IF Selection = 1 THEN BEGIN
        ToItemJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
    ...
Codeunit<Document-Mailing>.PROCEDURE<OnAfterEmailSentSuccesfully>
  Raised in: Codeunit<Document-Mailing>.PROCEDURE<EmailFileInternal>
    Code lines:
    ...
      IF OfficeMgt.AttachAvailable THEN
        OfficeMgt.AttachDocument(AttachmentFilePath,AttachmentFileName,GetBodyText,Subject)
      ELSE BEGIN
        EmailSentSuccesfully := Send(HideDialog);
        IF EmailSentSuccesfully THEN
          OnAfterEmailSentSuccesfully(TempEmailItem,PostedDocNo,ReportUsage); <=====================
        EXIT(EmailSentSuccesfully);
      END;
    END;
Codeunit<Document-Mailing>.PROCEDURE<OnBeforeSendEmail>
  Raised in: Codeunit<Document-Mailing>.PROCEDURE<EmailFileInternal>
    Code lines:
    ...
      IF HtmlBodyFilePath <> '' THEN BEGIN
        VALIDATE("Plaintext Formatted",FALSE);
        VALIDATE("Body File Path",HtmlBodyFilePath);
      END;
    
      OnBeforeSendEmail(TempEmailItem,IsFromPostedDoc,PostedDocNo,HideDialog,ReportUsage); <=====================
    
      IF OfficeMgt.AttachAvailable THEN
        OfficeMgt.AttachDocument(AttachmentFilePath,AttachmentFileName,GetBodyText,Subject)
      ELSE BEGIN
    ...
Codeunit<Res. Jnl.-Post+Print>.PROCEDURE<OnBeforePostJournalBatch>
  Raised in: Codeunit<Res. Jnl.-Post+Print>.PROCEDURE<Code>
    Code lines:
    ...
      ResJnlTemplate.TESTFIELD("Posting Report ID");
      IF ResJnlTemplate.Recurring AND (GETFILTER("Posting Date") <> '') THEN
        FIELDERROR("Posting Date",Text000);
    
      HideDialog := FALSE;
      OnBeforePostJournalBatch(ResJnlLine,HideDialog); <=====================
      IF NOT HideDialog THEN
        IF NOT CONFIRM(Text001) THEN
          EXIT;
    
    ...
Codeunit<Res. Jnl.-B.Post+Print>.PROCEDURE<OnBeforePostJournalBatch>
  Raised in: Codeunit<Res. Jnl.-B.Post+Print>.PROCEDURE<Code>
    Code lines:
    WITH ResJnlBatch DO BEGIN
      ResJnlTemplate.GET("Journal Template Name");
      ResJnlTemplate.TESTFIELD("Posting Report ID");
    
      HideDialog := FALSE;
      OnBeforePostJournalBatch(ResJnlBatch,HideDialog); <=====================
      IF NOT HideDialog THEN
        IF NOT CONFIRM(Text000) THEN
          EXIT;
    
    ...
Codeunit<Error Message Management>.PROCEDURE<OnFindActiveSubscriber>
  Raised in: Codeunit<Error Message Management>.PROCEDURE<IsActive>
    Code lines:
    OnFindActiveSubscriber(IsFound); <=====================
Codeunit<Error Message Management>.PROCEDURE<OnFindFirstErrorMessage>
  Raised in: Codeunit<Error Message Management>.PROCEDURE<FindFirstErrorMessage>
    Code lines:
    OnFindFirstErrorMessage(ErrorMessage,IsFound); <=====================
Codeunit<Error Message Management>.PROCEDURE<OnGetLastErrorID>
  Raised in: Codeunit<Error Message Management>.PROCEDURE<GetLastError>
    Code lines:
    OnGetLastErrorID(ID,ErrorMessage); <=====================
  Raised in: Codeunit<Error Message Management>.PROCEDURE<GetLastErrorID>
    Code lines:
    OnGetLastErrorID(ID,ErrorMessage); <=====================
Codeunit<Error Message Management>.PROCEDURE<OnLogError>
  Raised in: Codeunit<Error Message Management>.PROCEDURE<LogErrorMessage>
    Code lines:
    OnLogError(ContextFieldNo,ErrorMessage,SourceVariant,SourceFieldNo,HelpArticleCode,IsLogged); <=====================
    IF NOT IsLogged THEN
      ERROR(ErrorMessage);
Codeunit<Error Message Management>.PROCEDURE<OnPopContext>
  Raised in: Codeunit<Error Message Management>.PROCEDURE<PopContext>
    Code lines:
    OnPopContext(ID); <=====================
Codeunit<Error Message Management>.PROCEDURE<OnPushContext>
  Raised in: Codeunit<Error Message Management>.PROCEDURE<PushContext>
    Code lines:
    OnPushContext(ContextRecIDVariant,ContextFieldNo,AdditionalInfo,ID); <=====================
Codeunit<G/L Account-Indent>.PROCEDURE<OnAfterIndent>
  Raised in: Codeunit<G/L Account-Indent>.PROCEDURE<Indent>
    Code lines:
    ...
          END;
        UNTIL NEXT = 0;
    
    Window.CLOSE;
    
    OnAfterIndent; <=====================
Codeunit<Item-Check Avail.>.PROCEDURE<OnAfterCalculate>
  Raised in: Codeunit<Item-Check Avail.>.PROCEDURE<Calculate>
    Code lines:
    ...
    InitialQtyAvailable :=
      InventoryQty +
      (SchedRcpt - ReservedRcpt) - (GrossReq - ReservedReq) -
      NewItemNetResChange;
    
    OnAfterCalculate(Item,InitialQtyAvailable); <=====================
Codeunit<Item-Check Avail.>.PROCEDURE<OnAfterItemJnlLineShowWarning>
  Raised in: Codeunit<Item-Check Avail.>.PROCEDURE<ItemJnlLineShowWarning>
    Code lines:
    ...
      ItemJnlLine."Entry Type"::Sale,ItemJnlLine."Entry Type"::"Negative Adjmt.",ItemJnlLine."Entry Type"::Transfer:
        ItemNetChange := -ItemJnlLine.Quantity;
    END;
    
    IsHandled := FALSE;
    OnAfterItemJnlLineShowWarning(ItemJnlLine,ItemNetChange,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(FALSE);
    
    EXIT(
    ...
Codeunit<Cust-Check Cr. Limit>.PROCEDURE<OnNewCheckRemoveCustomerNotifications>
  Raised in: Codeunit<ServContractManagement>.PROCEDURE<ChangeCustNoOnServContract>
    Code lines:
    ...
      IF "Customer No." <> NewCustomertNo THEN BEGIN
        IF ServMgtSetup."Register Contract Changes" THEN
          ContractChangeLog.LogContractChange(
            "Contract No.",0,FIELDCAPTION("Customer No."),0,"Customer No.",NewCustomertNo,'',0);
        "Customer No." := NewCustomertNo;
        CustCheckCrLimit.OnNewCheckRemoveCustomerNotifications(RECORDID,TRUE); <=====================
    
        Cust.GET(NewCustomertNo);
        SetHideValidationDialog(TRUE);
        IF Cust."Bill-to Customer No." <> '' THEN
    ...
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<GenJnlLineCheck>
    Code lines:
    IF NOT GUIALLOWED THEN
      EXIT;
    
    IF NOT SalesHeader.GET(GenJnlLine."Document Type",GenJnlLine."Document No.") THEN
      SalesHeader.INIT;
    OnNewCheckRemoveCustomerNotifications(SalesHeader.RECORDID,TRUE); <=====================
    
    IF CustCheckCreditLimit.GenJnlLineShowWarningAndGetCause(GenJnlLine,AdditionalContextId) THEN
      CreateAndSendNotification(SalesHeader.RECORDID,AdditionalContextId,'');
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<SalesHeaderCheck>
    Code lines:
    IF NOT GUIALLOWED THEN
      EXIT;
    
    OnNewCheckRemoveCustomerNotifications(SalesHeader.RECORDID,TRUE); <=====================
    
    IF NOT CustCheckCreditLimit.SalesHeaderShowWarningAndGetCause(SalesHeader,AdditionalContextId) THEN
      SalesHeader.OnCustomerCreditLimitNotExceeded
    ELSE
      IF InstructionMgt.IsEnabled(GetInstructionType(FORMAT(SalesHeader."Document Type"),SalesHeader."No.")) THEN BEGIN
        CreditLimitExceeded := TRUE;
    ...
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<SalesLineCheck>
    Code lines:
    IF NOT GUIALLOWED THEN
      EXIT;
    
    IF NOT SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.") THEN
      SalesHeader.INIT;
    OnNewCheckRemoveCustomerNotifications(SalesHeader.RECORDID,FALSE); <=====================
    
    IF NOT CustCheckCreditLimit.SalesLineShowWarningAndGetCause(SalesLine,AdditionalContextId) THEN
      SalesHeader.OnCustomerCreditLimitNotExceeded
    ELSE
    ...
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<ServiceHeaderCheck>
    Code lines:
    IF NOT GUIALLOWED THEN
      EXIT;
    
    OnNewCheckRemoveCustomerNotifications(ServiceHeader.RECORDID,TRUE); <=====================
    
    IF CustCheckCreditLimit.ServiceHeaderShowWarningAndGetCause(ServiceHeader,AdditionalContextId) THEN
      CreateAndSendNotification(ServiceHeader.RECORDID,AdditionalContextId,'');
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<ServiceLineCheck>
    Code lines:
    IF NOT GUIALLOWED THEN
      EXIT;
    
    IF NOT ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.") THEN
      ServiceHeader.INIT;
    OnNewCheckRemoveCustomerNotifications(ServiceHeader.RECORDID,FALSE); <=====================
    
    IF CustCheckCreditLimit.ServiceLineShowWarningAndGetCause(ServiceLine,AdditionalContextId) THEN
      CreateAndSendNotification(ServiceHeader.RECORDID,AdditionalContextId,'');
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<ServiceContractHeaderCheck>
    Code lines:
    IF NOT GUIALLOWED THEN
      EXIT;
    
    OnNewCheckRemoveCustomerNotifications(ServiceContractHeader.RECORDID,TRUE); <=====================
    
    IF CustCheckCreditLimit.ServiceContractHeaderShowWarningAndGetCause(ServiceContractHeader,AdditionalContextId) THEN
      CreateAndSendNotification(ServiceContractHeader.RECORDID,AdditionalContextId,'');
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<BlanketSalesOrderToOrderCheck>
    Code lines:
    IF NOT GUIALLOWED THEN
      EXIT;
    
    OnNewCheckRemoveCustomerNotifications(SalesOrderHeader.RECORDID,TRUE); <=====================
    
    IF CustCheckCreditLimit.SalesHeaderShowWarningAndGetCause(SalesOrderHeader,AdditionalContextId) THEN
      CreateAndSendNotification(SalesOrderHeader.RECORDID,AdditionalContextId,'');
Codeunit<Sales-Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<Sales-Printed>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<Sales Shpt.-Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<Sales Shpt.-Printed>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<Sales Inv.-Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<Sales Inv.-Printed>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<Sales Cr. Memo-Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<Sales Cr. Memo-Printed>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<Purch.Header-Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<Purch.Header-Printed>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<Purch.Rcpt.-Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<Purch.Rcpt.-Printed>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<Purch. Inv.-Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<Purch. Inv.-Printed>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<PurchCrMemo-Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<PurchCrMemo-Printed>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<Purch.HeaderArch-Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<Purch.HeaderArch-Printed>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<SalesCount-PrintedArch>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<SalesCount-PrintedArch>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<ReqJnlManagement>.PROCEDURE<OnAfterSetUpNewLine>
  Raised in: Codeunit<ReqJnlManagement>.PROCEDURE<SetUpNewLine>
    Code lines:
    ReqLine.Type := LastReqLine.Type;
    ReqLine."Recurring Method" := LastReqLine."Recurring Method";
    ReqLine."Order Date" := LastReqLine."Order Date";
    
    OnAfterSetUpNewLine(ReqLine,LastReqLine); <=====================
Codeunit<ReqJnlManagement>.PROCEDURE<OnBeforeLookupName>
  Raised in: Codeunit<ReqJnlManagement>.PROCEDURE<LookupName>
    Code lines:
    ...
    ReqWkshName."Worksheet Template Name" := ReqLine.GETRANGEMAX("Worksheet Template Name");
    ReqWkshName.Name := ReqLine.GETRANGEMAX("Journal Batch Name");
    ReqWkshName.FILTERGROUP(2);
    ReqWkshName.SETRANGE("Worksheet Template Name",ReqWkshName."Worksheet Template Name");
    ReqWkshName.FILTERGROUP(0);
    OnBeforeLookupName(ReqWkshName); <=====================
    IF PAGE.RUNMODAL(0,ReqWkshName) = ACTION::LookupOK THEN BEGIN
      CurrentJnlBatchName := ReqWkshName.Name;
      SetName(CurrentJnlBatchName,ReqLine);
    END;
Codeunit<ReqJnlManagement>.PROCEDURE<OnBeforeOpenJnl>
  Raised in: Codeunit<ReqJnlManagement>.PROCEDURE<OpenJnl>
    Code lines:
    OnBeforeOpenJnl(CurrentJnlBatchName,ReqLine); <=====================
    
    CheckTemplateName(ReqLine.GETRANGEMAX("Worksheet Template Name"),CurrentJnlBatchName);
    ReqLine.FILTERGROUP := 2;
    ReqLine.SETRANGE("Journal Batch Name",CurrentJnlBatchName);
    ReqLine.FILTERGROUP := 0;
Codeunit<ReqJnlManagement>.PROCEDURE<OnTemplateSelectionSetFilter>
  Raised in: Codeunit<ReqJnlManagement>.PROCEDURE<TemplateSelection>
    Code lines:
    ...
    
    ReqWkshTmpl.RESET;
    ReqWkshTmpl.SETRANGE("Page ID",PageID);
    ReqWkshTmpl.SETRANGE(Recurring,RecurringJnl);
    ReqWkshTmpl.SETRANGE(Type,Type);
    OnTemplateSelectionSetFilter(ReqWkshTmpl,Type); <=====================
    
    CASE ReqWkshTmpl.COUNT OF
      0:
        BEGIN
    ...
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterCarryOutReqLineAction>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<CarryOutReqLineAction>
    Code lines:
    ...
                InsertPurchOrderLine(ReqLine,PurchOrderHeader);
              END;
          END;
      END;
    
    OnAfterCarryOutReqLineAction(ReqLine,PurchOrderHeader,SuppressCommit,OrderCounter); <=====================
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterCheckReqWkshLine>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<CheckReqWkshLine>
    Code lines:
    ...
                SalesLine."Document No.",
                SalesLine."Line No."));
        END;
    END;
    
    OnAfterCheckReqWkshLine(ReqLine2,SuppressCommit); <=====================
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterCode>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<Code>
    Code lines:
    ...
              END;
            END;
        END;
    END;
    
    OnAfterCode(ReqLine,OrderLineCounter,OrderCounter); <=====================
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterFinalizeOrderHeader>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<FinalizeOrderHeader>
    Code lines:
    ...
            END;
          END;
        UNTIL ReqLine2.NEXT = 0;
      END;
    END;
    OnAfterFinalizeOrderHeader(PurchOrderHeader,ReqLine); <=====================
    IF NOT SuppressCommit THEN
      COMMIT;
    
    CarryOutAction.SetPrintOrder(PrintPurchOrders);
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterInsertPurchOrderHeader>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<InsertHeader>
    Code lines:
    ...
          PurchOrderHeader."Ship-to Country/Region Code" := SalesHeader."Ship-to Country/Region Code";
        END;
      IF SpecialOrder THEN
        IF Vendor.GET(PurchOrderHeader."Buy-from Vendor No.") THEN
          PurchOrderHeader."Shipment Method Code" := Vendor."Shipment Method Code";
      OnAfterInsertPurchOrderHeader(ReqLine2,PurchOrderHeader,SuppressCommit); <=====================
      PurchOrderHeader.MODIFY;
      PurchOrderHeader.MARK(TRUE);
      TempDocumentEntry.INIT;
      TempDocumentEntry."Table ID" := DATABASE::"Purchase Header";
    ...
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterInsertPurchOrderLine>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<InsertPurchOrderLine>
    Code lines:
    ...
        IF PurchOrderLine2.FINDLAST THEN
          NextLineNo := PurchOrderLine2."Line No.";
      END;
    END;
    
    OnAfterInsertPurchOrderLine(PurchOrderLine,NextLineNo,ReqLine2); <=====================
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterPurchOrderLineInsert>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<InsertPurchOrderLine>
    Code lines:
    ...
        DimMgt.GetCombinedDimensionSetID(
          DimensionSetIDArr,PurchOrderLine."Shortcut Dimension 1 Code",PurchOrderLine."Shortcut Dimension 2 Code");
    
      OnBeforePurchOrderLineInsert(PurchOrderHeader,PurchOrderLine,ReqLine2,SuppressCommit);
      PurchOrderLine.INSERT;
      OnAfterPurchOrderLineInsert(PurchOrderLine,ReqLine2,NextLineNo); <=====================
    
      IF Reserve THEN
        ReserveBindingOrderToPurch(PurchOrderLine,ReqLine2);
    
    ...
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterReserveBindingOrderToPurch>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<ReserveBindingOrderToPurch>
    Code lines:
    ...
          END;
        END;
    END;
    PurchLine.MODIFY;
    
    OnAfterReserveBindingOrderToPurch(PurchLine,ReqLine,ReservQty,ReservQtyBase,SuppressCommit); <=====================
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnAfterSet>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<Set>
    Code lines:
    ...
    PrintPurchOrders := NewPrintPurchOrder;
    OrderDateReq := PurchOrderHeader."Order Date";
    PostingDateReq := PurchOrderHeader."Posting Date";
    ReceiveDateReq := PurchOrderHeader."Expected Receipt Date";
    ReferenceReq := PurchOrderHeader."Your Reference";
    OnAfterSet(NewPurchOrderHeader,SuppressCommit); <=====================
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnBeforeCarryOutBatchActionCode>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<CarryOutBatchAction>
    Code lines:
    ReqLine.COPY(ReqLine2);
    ReqLine.SETRANGE("Accept Action Message",TRUE);
    OnBeforeCarryOutBatchActionCode(ReqLine); <=====================
    Code(ReqLine);
    ReqLine2 := ReqLine;
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnBeforeCarryOutReqLineAction>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<CarryOutReqLineAction>
    Code lines:
    OnBeforeCarryOutReqLineAction(ReqLine,Failed); <=====================
    IF Failed THEN BEGIN
      SetFailedReqLine(ReqLine);
      EXIT;
    END;
    
    WITH ReqLine DO
      CASE "Replenishment System" OF
        "Replenishment System"::Transfer:
          CASE "Action Message" OF
    ...
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnBeforeCheckInsertFinalizePurchaseOrderHeader>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<CheckInsertFinalizePurchaseOrderHeader>
    Code lines:
    ...
        (PurchOrderHeader."Order Address Code" <> "Order Address Code") OR
        (PurchOrderHeader."Currency Code" <> "Currency Code") OR
        (PrevPurchCode <> "Purchasing Code") OR
        CheckAddressDetails("Sales Order No.","Sales Order Line No.",UpdateAddressDetails);
    
    OnBeforeCheckInsertFinalizePurchaseOrderHeader(RequisitionLine,PurchOrderHeader,CheckInsert); <=====================
    EXIT(CheckInsert);
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnBeforeCode>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<Code>
    Code lines:
    OnBeforeCode(ReqLine); <=====================
    
    InitShipReceiveDetails;
    WITH ReqLine DO BEGIN
      CLEAR(PurchOrderHeader);
    
      SETRANGE("Worksheet Template Name","Worksheet Template Name");
      SETRANGE("Journal Batch Name","Journal Batch Name");
      IF NOT PlanningResiliency THEN
        LOCKTABLE;
    ...
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnBeforePurchOrderHeaderInsert>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<InsertHeader>
    Code lines:
    ...
      CLEAR(PurchOrderHeader);
      PurchOrderHeader.INIT;
      PurchOrderHeader."Document Type" := PurchOrderHeader."Document Type"::Order;
      PurchOrderHeader."No." := '';
      PurchOrderHeader."Posting Date" := PostingDateReq;
      OnBeforePurchOrderHeaderInsert(PurchOrderHeader,ReqLine2); <=====================
      PurchOrderHeader.INSERT(TRUE);
      PurchOrderHeader."Your Reference" := ReferenceReq;
      PurchOrderHeader."Order Date" := OrderDateReq;
      PurchOrderHeader."Expected Receipt Date" := ReceiveDateReq;
    ...
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnBeforePurchOrderLineInsert>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<InsertPurchOrderLine>
    Code lines:
    ...
      DimensionSetIDArr[2] := "Dimension Set ID";
      PurchOrderLine."Dimension Set ID" :=
        DimMgt.GetCombinedDimensionSetID(
          DimensionSetIDArr,PurchOrderLine."Shortcut Dimension 1 Code",PurchOrderLine."Shortcut Dimension 2 Code");
    
      OnBeforePurchOrderLineInsert(PurchOrderHeader,PurchOrderLine,ReqLine2,SuppressCommit); <=====================
      PurchOrderLine.INSERT;
      OnAfterPurchOrderLineInsert(PurchOrderLine,ReqLine2,NextLineNo);
    
      IF Reserve THEN
    ...
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnBeforePurchOrderLineValidateNo>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<InitPurchOrderLine>
    Code lines:
    ...
      PurchOrderLine."Buy-from Vendor No." := "Vendor No.";
      PurchOrderLine."Document No." := PurchOrderHeader."No.";
      NextLineNo := NextLineNo + 10000;
      PurchOrderLine."Line No." := NextLineNo;
      PurchOrderLine.VALIDATE(Type,Type);
      OnBeforePurchOrderLineValidateNo(PurchOrderLine,RequisitionLine); <=====================
      PurchOrderLine.VALIDATE("No.","No.");
      PurchOrderLine."Variant Code" := "Variant Code";
      PurchOrderLine.VALIDATE("Location Code","Location Code");
      PurchOrderLine.VALIDATE("Unit of Measure Code","Unit of Measure Code");
    ...
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnCheckFurtherReplenishmentSystems>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<CheckReqWkshLine>
    Code lines:
    ...
              TESTFIELD("Location Code");
              IF "Planning Line Origin" = "Planning Line Origin"::"Order Planning" THEN
                TESTFIELD("Supply From");
              TESTFIELD("Transfer-from Code");
            END ELSE
              OnCheckFurtherReplenishmentSystems(ReqLine2); <=====================
      END;
    
      IF NOT DimMgt.CheckDimIDComb("Dimension Set ID") THEN
        ERROR(
    ...
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnCheckNewNameNeccessary>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<Code>
    Code lines:
    ...
          ReqLine3.SETRANGE("Journal Batch Name","Journal Batch Name");
          IF NOT ReqLine3.FINDLAST THEN
            IF INCSTR("Journal Batch Name") <> '' THEN BEGIN
              ReqWkshName.GET("Worksheet Template Name","Journal Batch Name");
              NewReqWkshName := TRUE;
              OnCheckNewNameNeccessary(ReqWkshName,NewReqWkshName); <=====================
              IF NewReqWkshName THEN BEGIN
                ReqWkshName.DELETE;
                ReqWkshName.Name := INCSTR("Journal Batch Name");
                IF ReqWkshName.INSERT THEN;
    ...
Codeunit<Req. Wksh.-Make Order>.PROCEDURE<OnFinalizeOrderHeaderOnAfterSetFiltersForRecurringReqLine>
  Raised in: Codeunit<Req. Wksh.-Make Order>.PROCEDURE<FinalizeOrderHeader>
    Code lines:
    ...
      ReqLine2.SETRANGE("Vendor No.",PurchOrderHeader."Buy-from Vendor No.");
      ReqLine2.SETRANGE("Sell-to Customer No.",PurchOrderHeader."Sell-to Customer No.");
      ReqLine2.SETRANGE("Ship-to Code",PurchOrderHeader."Ship-to Code");
      ReqLine2.SETRANGE("Order Address Code",PurchOrderHeader."Order Address Code");
      ReqLine2.SETRANGE("Currency Code",PurchOrderHeader."Currency Code");
      OnFinalizeOrderHeaderOnAfterSetFiltersForRecurringReqLine(ReqLine2,PurchOrderHeader); <=====================
      ReqLine2.FIND('-');
      REPEAT
        OrderLineCounter := OrderLineCounter + 1;
        IF NOT PlanningResiliency THEN
    ...
Codeunit<VAT Entry - Edit>.PROCEDURE<OnBeforeVATEntryModify>
  Raised in: Codeunit<VAT Entry - Edit>.<OnRun>
    Code lines:
    ...
    VATEntry."Bill-to/Pay-to No." := "Bill-to/Pay-to No.";
    VATEntry."Ship-to/Order Address Code" := "Ship-to/Order Address Code";
    VATEntry."EU 3-Party Trade" := "EU 3-Party Trade";
    VATEntry."Country/Region Code" := "Country/Region Code";
    VATEntry."VAT Registration No." := "VAT Registration No.";
    OnBeforeVATEntryModify(VATEntry,Rec); <=====================
    VATEntry.TESTFIELD("Entry No.","Entry No.");
    VATEntry.MODIFY;
    Rec := VATEntry;
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnAfterCalcItemPlanningFields>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<CalcItemPlanningFields>
    Code lines:
    ...
        CALCFIELDS(
          "Trans. Ord. Shipment (Qty.)",
          "Qty. in Transit",
          "Trans. Ord. Receipt (Qty.)");
    
      OnAfterCalcItemPlanningFields(Item); <=====================
    END;
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnAfterCalculateNeed>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<CalculateNeed>
    Code lines:
    ...
        "Qty. on Sales Return";
      PlannedOrderReleases :=
        "Planned Order Release (Qty.)" +
        "Purch. Req. Release (Qty.)";
    END;
    OnAfterCalculateNeed(Item,GrossRequirement,PlannedOrderReceipt,ScheduledReceipt,PlannedOrderReleases); <=====================
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnAfterCalculateProjAvailableBalance>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<CalcAvailQuantities>
    Code lines:
    ...
      ProjAvailableBalance :=
        CalcProjAvailableBalance2(Item.Inventory,GrossRequirement,PlannedOrderRcpt,ScheduledRcpt)
    ELSE
      ProjAvailableBalance := CalcProjAvailableBalance(Item);
    
    OnAfterCalculateProjAvailableBalance(Item,ProjAvailableBalance); <=====================
    
    ExpectedInventory := AvailableMgt.ExpectedQtyOnHand(Item,TRUE,0,QtyAvailable,DMY2DATE(31,12,9999));
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailByBOMLevel>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailByBOMLevel>
    Code lines:
    // Do not make global
    // Request to make function global has been rejected as it is a skeleton function of the codeunit
    IsHandled := FALSE;
    OnBeforeShowItemAvailByBOMLevel(Item,FieldCaption,OldDate,NewDate,Result,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(Result);
    
    CLEAR(ItemAvailByBOMLevel);
    Item.SETRANGE("Date Filter");
    ItemAvailByBOMLevel.InitItem(Item);
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailByDate>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailByDate>
    Code lines:
    // Do not make global
    // Request to make function global has been rejected as it is a skeleton function of the codeunit
    IsHandled := FALSE;
    OnBeforeShowItemAvailByDate(Item,FieldCaption,OldDate,NewDate,Result,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(Result);
    
    Item.SETRANGE("Date Filter");
    IF FieldCaption <> '' THEN
      ItemAvailByPeriods.LOOKUPMODE(TRUE);
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailByEvent>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailByEvent>
    Code lines:
    // Do not make global
    // Request to make function global has been rejected as it is a skeleton function of the codeunit
    IsHandled := FALSE;
    OnBeforeShowItemAvailByEvent(Item,FieldCaption,OldDate,NewDate,IncludeForecast,Result,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(Result);
    
    IF FieldCaption <> '' THEN
      ItemAvailByEvent.LOOKUPMODE(TRUE);
    ItemAvailByEvent.SetItem(Item);
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailByLoc>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailByLoc>
    Code lines:
    // Do not make global
    // Request to make function global has been rejected as it is a skeleton function of the codeunit
    IsHandled := FALSE;
    OnBeforeShowItemAvailByLoc(Item,FieldCaption,OldLocationCode,NewLocationCode,Result,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(Result);
    
    Item.SETRANGE("Location Filter");
    IF FieldCaption <> '' THEN
      ItemAvailByLoc.LOOKUPMODE(TRUE);
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromAsmHeader>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailFromAsmHeader>
    Code lines:
    ...
      TESTFIELD("Item No.");
      Item.RESET;
      Item.GET("Item No.");
      FilterItem(Item,"Location Code","Variant Code","Due Date");
    
      OnBeforeShowItemAvailFromAsmHeader(Item,AsmHeader); <=====================
      CASE AvailabilityType OF
        AvailabilityType::Date:
          IF ShowItemAvailByDate(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate) THEN
            VALIDATE("Due Date",NewDate);
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromAsmLine>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailFromAsmLine>
    Code lines:
    ...
      TESTFIELD("No.");
      Item.RESET;
      Item.GET("No.");
      FilterItem(Item,"Location Code","Variant Code","Due Date");
    
      OnBeforeShowItemAvailFromAsmLine(Item,AsmLine); <=====================
      CASE AvailabilityType OF
        AvailabilityType::Date:
          IF ShowItemAvailByDate(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate) THEN
            VALIDATE("Due Date",NewDate);
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromItem>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailFromItem>
    Code lines:
    WITH Item DO BEGIN
      TESTFIELD("No.");
    
      OnBeforeShowItemAvailFromItem(Item); <=====================
      CASE AvailabilityType OF
        AvailabilityType::Date:
          ShowItemAvailByDate(Item,'',NewDate,NewDate);
        AvailabilityType::Variant:
          ShowItemAvailVariant(Item,'',NewVariantCode,NewVariantCode);
        AvailabilityType::Location:
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromItemJnlLine>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailFromItemJnlLine>
    Code lines:
    ...
      TESTFIELD("Item No.");
      Item.RESET;
      Item.GET("Item No.");
      FilterItem(Item,"Location Code","Variant Code","Posting Date");
    
      OnBeforeShowItemAvailFromItemJnlLine(Item,ItemJnlLine); <=====================
      CASE AvailabilityType OF
        AvailabilityType::Date:
          IF ShowItemAvailByDate(Item,FIELDCAPTION("Posting Date"),"Posting Date",NewDate) THEN
            VALIDATE("Posting Date",NewDate);
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromPlanningComp>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailFromPlanningComp>
    Code lines:
    ...
      TESTFIELD("Item No.");
      Item.RESET;
      Item.GET("Item No.");
      FilterItem(Item,"Location Code","Variant Code","Due Date");
    
      OnBeforeShowItemAvailFromPlanningComp(Item,PlanningComp); <=====================
      CASE AvailabilityType OF
        AvailabilityType::Date:
          IF ShowItemAvailByDate(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate) THEN
            VALIDATE("Due Date",NewDate);
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromProdOrderComp>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailFromProdOrderComp>
    Code lines:
    ...
      TESTFIELD("Item No.");
      Item.RESET;
      Item.GET("Item No.");
      FilterItem(Item,"Location Code","Variant Code","Due Date");
    
      OnBeforeShowItemAvailFromProdOrderComp(Item,ProdOrderComp); <=====================
      CASE AvailabilityType OF
        AvailabilityType::Date:
          IF ShowItemAvailByDate(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate) THEN
            VALIDATE("Due Date",NewDate);
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromProdOrderLine>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailFromProdOrderLine>
    Code lines:
    ...
      TESTFIELD("Item No.");
      Item.RESET;
      Item.GET("Item No.");
      FilterItem(Item,"Location Code","Variant Code","Due Date");
    
      OnBeforeShowItemAvailFromProdOrderLine(Item,ProdOrderLine); <=====================
      CASE AvailabilityType OF
        AvailabilityType::Date:
          IF ShowItemAvailByDate(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate) THEN
            VALIDATE("Due Date",NewDate);
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromPurchLine>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailFromPurchLine>
    Code lines:
    ...
      TESTFIELD("No.");
      Item.RESET;
      Item.GET("No.");
      FilterItem(Item,"Location Code","Variant Code","Expected Receipt Date");
    
      OnBeforeShowItemAvailFromPurchLine(Item,PurchLine); <=====================
      CASE AvailabilityType OF
        AvailabilityType::Date:
          IF ShowItemAvailByDate(Item,FIELDCAPTION("Expected Receipt Date"),"Expected Receipt Date",NewDate) THEN
            VALIDATE("Expected Receipt Date",NewDate);
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromReqLine>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailFromReqLine>
    Code lines:
    ...
      TESTFIELD("No.");
      Item.RESET;
      Item.GET("No.");
      FilterItem(Item,"Location Code","Variant Code","Due Date");
    
      OnBeforeShowItemAvailFromReqLine(Item,ReqLine); <=====================
      CASE AvailabilityType OF
        AvailabilityType::Date:
          IF ShowItemAvailByDate(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate) THEN
            VALIDATE("Due Date",NewDate);
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromSalesLine>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailFromSalesLine>
    Code lines:
    ...
      TESTFIELD("No.");
      Item.RESET;
      Item.GET("No.");
      FilterItem(Item,"Location Code","Variant Code","Shipment Date");
    
      OnBeforeShowItemAvailFromSalesLine(Item,SalesLine); <=====================
      CASE AvailabilityType OF
        AvailabilityType::Date:
          IF ShowItemAvailByDate(Item,FIELDCAPTION("Shipment Date"),"Shipment Date",NewDate) THEN
            VALIDATE("Shipment Date",NewDate);
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromServLine>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailFromServLine>
    Code lines:
    ...
      TESTFIELD("No.");
      Item.RESET;
      Item.GET("No.");
      FilterItem(Item,"Location Code","Variant Code",ServHeader."Response Date");
    
      OnBeforeShowItemAvailFromServLine(Item,ServLine); <=====================
      CASE AvailabilityType OF
        AvailabilityType::Date:
          ShowItemAvailByDate(Item,ServHeader.FIELDCAPTION("Response Date"),ServHeader."Response Date",NewDate);
        AvailabilityType::Variant:
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromTransLine>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailFromTransLine>
    Code lines:
    ...
      TESTFIELD("Item No.");
      Item.RESET;
      Item.GET("Item No.");
      FilterItem(Item,"Transfer-from Code","Variant Code","Shipment Date");
    
      OnBeforeShowItemAvailFromTransLine(Item,TransLine); <=====================
      CASE AvailabilityType OF
        AvailabilityType::Date:
          IF ShowItemAvailByDate(Item,FIELDCAPTION("Shipment Date"),"Shipment Date",NewDate) THEN
            VALIDATE("Shipment Date",NewDate);
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromWhseActivLine>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailFromWhseActivLine>
    Code lines:
    ...
      TESTFIELD("Item No.");
      Item.RESET;
      Item.GET("Item No.");
      FilterItem(Item,"Location Code","Variant Code","Due Date");
    
      OnBeforeShowItemAvailFromWhseActivLine(Item,WhseActivLine); <=====================
      CASE AvailabilityType OF
        AvailabilityType::Date:
          ShowItemAvailByDate(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate);
        AvailabilityType::Variant:
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailFromWhseRcptLine>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailFromWhseRcptLine>
    Code lines:
    ...
      TESTFIELD("Item No.");
      Item.RESET;
      Item.GET("Item No.");
      FilterItem(Item,"Location Code","Variant Code","Due Date");
    
      OnBeforeShowItemAvailFromWhseRcptLine(Item,WhseRcptLine); <=====================
      CASE AvailabilityType OF
        AvailabilityType::Date:
          ShowItemAvailByDate(Item,FIELDCAPTION("Due Date"),"Due Date",NewDate);
        AvailabilityType::Variant:
    ...
Codeunit<Item Availability Forms Mgt>.PROCEDURE<OnBeforeShowItemAvailVariant>
  Raised in: Codeunit<Item Availability Forms Mgt>.PROCEDURE<ShowItemAvailVariant>
    Code lines:
    // Do not make global
    // Request to make function global has been rejected as it is a skeleton function of the codeunit
    IsHandled := FALSE;
    OnBeforeShowItemAvailVariant(Item,FieldCaption,OldVariant,NewVariant,Result,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(Result);
    
    Item.SETRANGE("Variant Filter");
    IF FieldCaption <> '' THEN
      ItemAvailByVariant.LOOKUPMODE(TRUE);
    ...
Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveBankAccEntries>
  Raised in: Codeunit<MoveEntries>.PROCEDURE<MoveBankAccEntries>
    Code lines:
    ...
    BankAccLedgEntry.MODIFYALL("Bank Account No.",'');
    CheckLedgEntry.SETCURRENTKEY("Bank Account No.");
    CheckLedgEntry.SETRANGE("Bank Account No.",BankAcc."No.");
    CheckLedgEntry.MODIFYALL("Bank Account No.",'');
    
    OnAfterMoveBankAccEntries(BankAcc,BankAccLedgEntry,CheckLedgEntry); <=====================
Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveCashFlowEntries>
  Raised in: Codeunit<MoveEntries>.PROCEDURE<MoveCashFlowEntries>
    Code lines:
    ...
    CFForecastEntry.RESET;
    CFForecastEntry.SETCURRENTKEY("Cash Flow Forecast No.");
    CFForecastEntry.SETRANGE("Cash Flow Account No.",CashFlowAccount."No.");
    CFForecastEntry.MODIFYALL("Cash Flow Account No.",'');
    
    OnAfterMoveCashFlowEntries(CashFlowAccount); <=====================
Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveCustEntries>
  Raised in: Codeunit<MoveEntries>.PROCEDURE<MoveCustEntries>
    Code lines:
    ...
    
    WarrantyLedgEntry.SETRANGE("Customer No.");
    WarrantyLedgEntry.SETRANGE("Bill-to Customer No.",Cust."No.");
    WarrantyLedgEntry.MODIFYALL("Bill-to Customer No.",'');
    
    OnAfterMoveCustEntries(Cust,CustLedgEntry,ReminderEntry,ServLedgEntry,WarrantyLedgEntry); <=====================
Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveDocRelatedEntries>
  Raised in: Codeunit<MoveEntries>.PROCEDURE<MoveDocRelatedEntries>
    Code lines:
    ...
    ValueEntry2.SETRANGE("Document No.",DocNo);
    ValueEntry2.SETRANGE("Document Type",CostCalcMgt.GetDocType(TableNo));
    ValueEntry2.SETFILTER("Document Line No.",'<>0');
    ValueEntry2.MODIFYALL("Document Line No.",0);
    
    OnAfterMoveDocRelatedEntries(TableNo,DocNo); <=====================
Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveGLEntries>
  Raised in: Codeunit<MoveEntries>.PROCEDURE<MoveGLEntries>
    Code lines:
    ...
    GLEntry.RESET;
    GLEntry.SETCURRENTKEY("G/L Account No.");
    GLEntry.SETRANGE("G/L Account No.",GLAcc."No.");
    GLEntry.MODIFYALL("G/L Account No.",'');
    
    OnAfterMoveGLEntries(GLAcc,GLEntry); <=====================
Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveItemEntries>
  Raised in: Codeunit<MoveEntries>.PROCEDURE<MoveItemEntries>
    Code lines:
    ...
    WarrantyLedgEntry.SETRANGE("Item No. (Serviced)");
    WarrantyLedgEntry.SETRANGE(Type,WarrantyLedgEntry.Type::Item);
    WarrantyLedgEntry.SETRANGE("No.",Item."No.");
    WarrantyLedgEntry.MODIFYALL("No.",'');
    
    OnAfterMoveItemEntries(Item,ItemLedgEntry,ValueEntry,ServLedgEntry,WarrantyLedgEntry,InvtAdjmtEntryOrder); <=====================
Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveJobEntries>
  Raised in: Codeunit<MoveEntries>.PROCEDURE<MoveJobEntries>
    Code lines:
    ...
        Job.TABLECAPTION,Job."No.");
    
    ServLedgEntry.SETRANGE(Open);
    ServLedgEntry.MODIFYALL("Job No.",'');
    
    OnAfterMoveJobEntries(Job,JobLedgEntry,TimeSheetLine,ServLedgEntry); <=====================
Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveResEntries>
  Raised in: Codeunit<MoveEntries>.PROCEDURE<MoveResEntries>
    Code lines:
    ...
    WarrantyLedgEntry.LOCKTABLE;
    WarrantyLedgEntry.SETRANGE(Type,WarrantyLedgEntry.Type::Resource);
    WarrantyLedgEntry.SETRANGE("No.",Res."No.");
    WarrantyLedgEntry.MODIFYALL("No.",'');
    
    OnAfterMoveResEntries(Res,ResLedgEntry,ServLedgEntry,WarrantyLedgEntry); <=====================
Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveServContractLedgerEntries>
  Raised in: Codeunit<MoveEntries>.PROCEDURE<MoveServContractLedgerEntries>
    Code lines:
    ...
    
    WarrantyLedgEntry.LOCKTABLE;
    WarrantyLedgEntry.SETRANGE("Service Contract No.",ServiceContractHeader."Contract No.");
    WarrantyLedgEntry.MODIFYALL("Service Contract No.",'');
    
    OnAfterMoveServContractLedgerEntries(ServiceContractHeader); <=====================
Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveServiceCostLedgerEntries>
  Raised in: Codeunit<MoveEntries>.PROCEDURE<MoveServiceCostLedgerEntries>
    Code lines:
    ...
    WarrantyLedgEntry.LOCKTABLE;
    WarrantyLedgEntry.SETRANGE(Type,WarrantyLedgEntry.Type::"Service Cost");
    WarrantyLedgEntry.SETRANGE("No.",ServiceCost.Code);
    WarrantyLedgEntry.MODIFYALL("No.",'');
    
    OnAfterMoveServiceCostLedgerEntries(ServiceCost); <=====================
Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveServiceItemLedgerEntries>
  Raised in: Codeunit<MoveEntries>.PROCEDURE<MoveServiceItemLedgerEntries>
    Code lines:
    ...
    
    WarrantyLedgEntry.LOCKTABLE;
    WarrantyLedgEntry.SETRANGE("Service Item No. (Serviced)",ServiceItem."No.");
    WarrantyLedgEntry.MODIFYALL("Service Item No. (Serviced)",'');
    
    OnAfterMoveServiceItemLedgerEntries(ServiceItem); <=====================
Codeunit<MoveEntries>.PROCEDURE<OnAfterMoveVendorEntries>
  Raised in: Codeunit<MoveEntries>.PROCEDURE<MoveVendorEntries>
    Code lines:
    ...
    
    WarrantyLedgEntry.LOCKTABLE;
    WarrantyLedgEntry.SETRANGE("Vendor No.",Vend."No.");
    WarrantyLedgEntry.MODIFYALL("Vendor No.",'');
    
    OnAfterMoveVendorEntries(Vend,VendLedgEntry,WarrantyLedgEntry); <=====================
Codeunit<PostSales-Delete>.PROCEDURE<OnAfterDeleteHeader>
  Raised in: Codeunit<PostSales-Delete>.PROCEDURE<DeleteHeader>
    Code lines:
    ...
        SalesCrMemoLine.Description := SourceCode.Description;
        SalesCrMemoLine.INSERT;
      END;
    END;
    
    OnAfterDeleteHeader( <=====================
      SalesHeader,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,SalesInvHeaderPrePmt,SalesCrMemoHeaderPrePmt);
Codeunit<PostSales-Delete>.PROCEDURE<OnAfterInitDeleteHeader>
  Raised in: Codeunit<PostSales-Delete>.PROCEDURE<InitDeleteHeader>
    Code lines:
    ...
        SalesCrMemoHeaderPrePmt."Source Code" := SourceCode;
        SalesCrMemoHeaderPrePmt."Prepayment Credit Memo" := TRUE;
      END;
    END;
    
    OnAfterInitDeleteHeader( <=====================
      SalesHeader,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,SalesInvHeaderPrePmt,SalesCrMemoHeaderPrePmt);
Codeunit<PostSales-Delete>.PROCEDURE<OnBeforeInitDeleteHeader>
  Raised in: Codeunit<PostSales-Delete>.PROCEDURE<InitDeleteHeader>
    Code lines:
    OnBeforeInitDeleteHeader( <=====================
      SalesHeader,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,SalesInvHeaderPrePmt,SalesCrMemoHeaderPrePmt,
      SourceCode);
    
    WITH SalesHeader DO BEGIN
      CLEAR(SalesShptHeader);
      CLEAR(SalesInvHeader);
      CLEAR(SalesCrMemoHeader);
      CLEAR(ReturnRcptHeader);
      SalesSetup.GET;
    ...
Codeunit<PostPurch-Delete>.PROCEDURE<OnAfterDeleteHeader>
  Raised in: Codeunit<PostPurch-Delete>.PROCEDURE<DeleteHeader>
    Code lines:
    ...
        PurchCrMemoLine.Description := SourceCode.Description;
        PurchCrMemoLine.INSERT;
      END;
    END;
    
    OnAfterDeleteHeader( <=====================
      PurchHeader,PurchRcptHeader,PurchInvHeader,PurchCrMemoHdr,ReturnShptHeader,PurchInvHeaderPrepmt,PurchCrMemoHdrPrepmt);
Codeunit<PostPurch-Delete>.PROCEDURE<OnAfterInitDeleteHeader>
  Raised in: Codeunit<PostPurch-Delete>.PROCEDURE<InitDeleteHeader>
    Code lines:
    ...
        PurchCrMemoHdrPrepmt."Source Code" := SourceCode;
        PurchCrMemoHdrPrepmt."Prepayment Credit Memo" := TRUE;
      END;
    END;
    
    OnAfterInitDeleteHeader( <=====================
      PurchHeader,PurchRcptHeader,PurchInvHeader,PurchCrMemoHdr,ReturnShptHeader,PurchInvHeaderPrepmt,PurchCrMemoHdrPrepmt);
Codeunit<PostPurch-Delete>.PROCEDURE<OnBeforeDeletePurchCrMemoLines>
  Raised in: Codeunit<PostPurch-Delete>.PROCEDURE<DeletePurchCrMemoLines>
    Code lines:
    PurchCrMemoLine.SETRANGE("Document No.",PurchCrMemoHeader."No.");
    IF PurchCrMemoLine.FIND('-') THEN
      REPEAT
        OnBeforeDeletePurchCrMemoLines(PurchCrMemoLine); <=====================
        PurchCrMemoLine.DELETE;
      UNTIL PurchCrMemoLine.NEXT = 0;
    ItemTrackingMgt.DeleteItemEntryRelation(
      DATABASE::"Purch. Cr. Memo Line",0,PurchCrMemoHeader."No.",'',0,0,TRUE);
    
    MoveEntries.MoveDocRelatedEntries(DATABASE::"Purch. Cr. Memo Hdr.",PurchCrMemoHeader."No.");
Codeunit<PostPurch-Delete>.PROCEDURE<OnBeforeDeletePurchInvLines>
  Raised in: Codeunit<PostPurch-Delete>.PROCEDURE<DeletePurchInvLines>
    Code lines:
    PurchInvLine.SETRANGE("Document No.",PurchInvHeader."No.");
    IF PurchInvLine.FIND('-') THEN
      REPEAT
        OnBeforeDeletePurchInvLines(PurchInvLine); <=====================
        PurchInvLine.DELETE;
        ItemTrackingMgt.DeleteValueEntryRelation(PurchInvLine.RowID1);
      UNTIL PurchInvLine.NEXT = 0;
    
    MoveEntries.MoveDocRelatedEntries(DATABASE::"Purch. Inv. Header",PurchInvHeader."No.");
Codeunit<PostPurch-Delete>.PROCEDURE<OnBeforeDeletePurchRcptLines>
  Raised in: Codeunit<PostPurch-Delete>.PROCEDURE<DeletePurchRcptLines>
    Code lines:
    PurchRcptLine.SETRANGE("Document No.",PurchRcptHeader."No.");
    IF PurchRcptLine.FIND('-') THEN
      REPEAT
        OnBeforeDeletePurchRcptLines(PurchRcptLine); <=====================
        PurchRcptLine.TESTFIELD("Quantity Invoiced",PurchRcptLine.Quantity);
        PurchRcptLine.DELETE;
      UNTIL PurchRcptLine.NEXT = 0;
    ItemTrackingMgt.DeleteItemEntryRelation(
      DATABASE::"Purch. Rcpt. Line",0,PurchRcptHeader."No.",'',0,0,TRUE);
    
Codeunit<PostPurch-Delete>.PROCEDURE<OnBeforeDeletePurchShptLines>
  Raised in: Codeunit<PostPurch-Delete>.PROCEDURE<DeletePurchShptLines>
    Code lines:
    ReturnShipmentLine.SETRANGE("Document No.",ReturnShptHeader."No.");
    IF ReturnShipmentLine.FIND('-') THEN
      REPEAT
        OnBeforeDeletePurchShptLines(ReturnShipmentLine); <=====================
        ReturnShipmentLine.TESTFIELD("Quantity Invoiced",ReturnShipmentLine.Quantity);
        ReturnShipmentLine.DELETE;
      UNTIL ReturnShipmentLine.NEXT = 0;
    ItemTrackingMgt.DeleteItemEntryRelation(
      DATABASE::"Return Shipment Line",0,ReturnShptHeader."No.",'',0,0,TRUE);
    
Codeunit<PostPurch-Delete>.PROCEDURE<OnBeforeInitDeleteHeader>
  Raised in: Codeunit<PostPurch-Delete>.PROCEDURE<InitDeleteHeader>
    Code lines:
    OnBeforeInitDeleteHeader( <=====================
      PurchHeader,PurchRcptHeader,PurchInvHeader,PurchCrMemoHdr,ReturnShptHeader,PurchInvHeaderPrepmt,PurchCrMemoHdrPrepmt,
      SourceCode);
    
    WITH PurchHeader DO BEGIN
      CLEAR(PurchRcptHeader);
      CLEAR(PurchInvHeader);
      CLEAR(PurchCrMemoHdr);
      CLEAR(ReturnShptHeader);
      PurchSetup.GET;
    ...
Codeunit<Format Address>.PROCEDURE<OnAfterFormatAddress>
  Raised in: Codeunit<Format Address>.PROCEDURE<FormatAddr>
    Code lines:
    ...
              Index := Index + 1;
            UNTIL Index = 9;
          END;
      END;
    END;
    OnAfterFormatAddress(AddrArray,Name,Name2,Contact,Addr,Addr2,City,PostCode,County,CountryCode); <=====================
Codeunit<Format Address>.PROCEDURE<OnBeforeContactAddrAlt>
  Raised in: Codeunit<Format Address>.PROCEDURE<ContactAddrAlt>
    Code lines:
    OnBeforeContactAddrAlt(AddrArray,Cont,AltAddressCode,ActiveDate,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    RMSetup.GET;
    
    IF (Cont.Type = Cont.Type::Person) AND (Cont."Company No." <> '') THEN BEGIN
      ContCompany.GET(Cont."Company No.");
      CompanyAltAddressCode := ContCompany.ActiveAltAddress(ActiveDate);
      ContIdenticalAddress := Cont.IdenticalAddress(ContCompany);
    ...
Codeunit<Format Address>.PROCEDURE<OnBeforeCustomer>
  Raised in: Codeunit<Format Address>.PROCEDURE<Customer>
    Code lines:
    OnBeforeCustomer(AddrArray,Cust,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    WITH Cust DO
      FormatAddr(
        AddrArray,Name,"Name 2",Contact,Address,"Address 2",
        City,"Post Code",County,"Country/Region Code");
Codeunit<Format Address>.PROCEDURE<OnBeforeFormatAddress>
  Raised in: Codeunit<Format Address>.PROCEDURE<FormatAddr>
    Code lines:
    ...
    
      COMPRESSARRAY(AddrArray);
    END ELSE BEGIN
      SetLineNos(Country,NameLineNo,Name2LineNo,AddrLineNo,Addr2LineNo,ContLineNo,PostCodeCityLineNo,CountyLineNo,CountryLineNo);
    
      OnBeforeFormatAddress( <=====================
        Country,AddrArray,Name,Name2,Contact,Addr,Addr2,City,PostCode,County,CountryCode,NameLineNo,Name2LineNo,
        AddrLineNo,Addr2LineNo,ContLineNo,PostCodeCityLineNo,CountyLineNo,CountryLineNo,Handled);
      IF Handled THEN
        EXIT;
    ...
Codeunit<Format Address>.PROCEDURE<OnBeforeSalesCrMemoBillTo>
  Raised in: Codeunit<Format Address>.PROCEDURE<SalesCrMemoBillTo>
    Code lines:
    OnBeforeSalesCrMemoBillTo(AddrArray,SalesCrMemoHeader,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    WITH SalesCrMemoHeader DO
      FormatAddr(
        AddrArray,"Bill-to Name","Bill-to Name 2","Bill-to Contact","Bill-to Address","Bill-to Address 2",
        "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code");
Codeunit<Format Address>.PROCEDURE<OnBeforeSalesHeaderBillTo>
  Raised in: Codeunit<Format Address>.PROCEDURE<SalesHeaderBillTo>
    Code lines:
    OnBeforeSalesHeaderBillTo(AddrArray,SalesHeader,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    WITH SalesHeader DO
      FormatAddr(
        AddrArray,"Bill-to Name","Bill-to Name 2","Bill-to Contact","Bill-to Address","Bill-to Address 2",
        "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code");
Codeunit<Format Address>.PROCEDURE<OnBeforeSalesHeaderSellTo>
  Raised in: Codeunit<Format Address>.PROCEDURE<SalesHeaderSellTo>
    Code lines:
    OnBeforeSalesHeaderSellTo(AddrArray,SalesHeader,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    WITH SalesHeader DO
      FormatAddr(
        AddrArray,"Sell-to Customer Name","Sell-to Customer Name 2","Sell-to Contact","Sell-to Address","Sell-to Address 2",
        "Sell-to City","Sell-to Post Code","Sell-to County","Sell-to Country/Region Code");
Codeunit<Format Address>.PROCEDURE<OnBeforeSalesHeaderShipTo>
  Raised in: Codeunit<Format Address>.PROCEDURE<SalesHeaderShipTo>
    Code lines:
    OnBeforeSalesHeaderShipTo(AddrArray,CustAddr,SalesHeader,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    WITH SalesHeader DO BEGIN
      FormatAddr(
        AddrArray,"Ship-to Name","Ship-to Name 2","Ship-to Contact","Ship-to Address","Ship-to Address 2",
        "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code");
      IF CountryRegion.GET("Sell-to Country/Region Code") THEN
        SellToCountry := CountryRegion.Name;
    ...
Codeunit<Format Address>.PROCEDURE<OnBeforeSalesInvBillTo>
  Raised in: Codeunit<Format Address>.PROCEDURE<SalesInvBillTo>
    Code lines:
    OnBeforeSalesInvBillTo(AddrArray,SalesInvHeader,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    WITH SalesInvHeader DO
      FormatAddr(
        AddrArray,"Bill-to Name","Bill-to Name 2","Bill-to Contact","Bill-to Address","Bill-to Address 2",
        "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code");
Codeunit<Format Address>.PROCEDURE<OnBeforeServContractShipTo>
  Raised in: Codeunit<Format Address>.PROCEDURE<ServContractShipto>
    Code lines:
    WITH ServiceContractHeader DO BEGIN
      CALCFIELDS(
        "Ship-to Name","Ship-to Name 2","Ship-to Address","Ship-to Address 2",
        "Ship-to Post Code","Ship-to City","Ship-to County","Ship-to Country/Region Code");
    
      OnBeforeServContractShipTo(AddrArray,ServiceContractHeader); <=====================
      FormatAddr(
        AddrArray,"Ship-to Name","Ship-to Name 2","Contact Name","Ship-to Address","Ship-to Address 2",
        "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code");
    END;
Codeunit<Format Address>.PROCEDURE<OnBeforeVendor>
  Raised in: Codeunit<Format Address>.PROCEDURE<Vendor>
    Code lines:
    OnBeforeVendor(AddrArray,Vend,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    WITH Vend DO
      FormatAddr(
        AddrArray,Name,"Name 2",Contact,Address,"Address 2",
        City,"Post Code",County,"Country/Region Code");
Codeunit<Exchange Acc. G/L Journal Line>.PROCEDURE<OnAfterOnRun>
  Raised in: Codeunit<Exchange Acc. G/L Journal Line>.<OnRun>
    Code lines:
    ...
      "Source Currency Amount" := Amount;
      "Source Curr. VAT Base Amount" := "VAT Base Amount";
      "Source Curr. VAT Amount" := "VAT Amount";
    END;
    
    OnAfterOnRun(Rec,GenJnlLine2); <=====================
Codeunit<Exchange Acc. G/L Journal Line>.PROCEDURE<OnBeforeOnRun>
  Raised in: Codeunit<Exchange Acc. G/L Journal Line>.<OnRun>
    Code lines:
    OnBeforeOnRun(Rec); <=====================
    
    GenJnlLine2 := Rec;
    "Account Type" := GenJnlLine2."Bal. Account Type";
    "Account No." := GenJnlLine2."Bal. Account No.";
    "VAT %" := GenJnlLine2."Bal. VAT %";
    "VAT Amount" := GenJnlLine2."Bal. VAT Amount";
    "VAT Amount (LCY)" := GenJnlLine2."Bal. VAT Amount (LCY)";
    "VAT Difference" := GenJnlLine2."Bal. VAT Difference";
    "Gen. Posting Type" := GenJnlLine2."Bal. Gen. Posting Type";
    ...
Codeunit<CheckManagement>.PROCEDURE<OnAfterCalcAmountToVoid>
  Raised in: Codeunit<CheckManagement>.PROCEDURE<CalcAmountToVoid>
    Code lines:
    ...
      SETRANGE("Check Date",CheckLedgEntry."Check Date");
      CALCSUMS(Amount);
      AmountToVoid := Amount;
    END;
    
    OnAfterCalcAmountToVoid(CheckLedgEntry,AmountToVoid); <=====================
Codeunit<CheckManagement>.PROCEDURE<OnAfterFinancialVoidCheck>
  Raised in: Codeunit<CheckManagement>.PROCEDURE<FinancialVoidCheck>
    Code lines:
    ...
    
    MarkCheckEntriesVoid(CheckLedgEntry,ConfirmFinancialVoid.GetVoidDate);
    COMMIT;
    UpdateAnalysisView.UpdateAll(0,TRUE);
    
    OnAfterFinancialVoidCheck(CheckLedgEntry); <=====================
Codeunit<CheckManagement>.PROCEDURE<OnAfterVoidCheck>
  Raised in: Codeunit<CheckManagement>.PROCEDURE<VoidCheck>
    Code lines:
    ...
    CheckLedgEntry2."Entry Status" := CheckLedgEntry2."Entry Status"::Voided;
    CheckLedgEntry2."Positive Pay Exported" := FALSE;
    CheckLedgEntry2.Open := FALSE;
    CheckLedgEntry2.MODIFY;
    
    OnAfterVoidCheck(GenJnlLine,CheckLedgEntry2); <=====================
Codeunit<CheckManagement>.PROCEDURE<OnBeforeFinancialVoidCheck>
  Raised in: Codeunit<CheckManagement>.PROCEDURE<FinancialVoidCheck>
    Code lines:
    OnBeforeFinancialVoidCheck(CheckLedgEntry); <=====================
    
    FinancialVoidCheckPreValidation(CheckLedgEntry);
    
    CLEAR(ConfirmFinancialVoid);
    ConfirmFinancialVoid.SetCheckLedgerEntry(CheckLedgEntry);
    IF ConfirmFinancialVoid.RUNMODAL <> ACTION::Yes THEN
      EXIT;
    
    AmountToVoid := CalcAmountToVoid(CheckLedgEntry);
    ...
Codeunit<CheckManagement>.PROCEDURE<OnBeforeVoidCheck>
  Raised in: Codeunit<CheckManagement>.PROCEDURE<VoidCheck>
    Code lines:
    OnBeforeVoidCheck(GenJnlLine); <=====================
    
    GenJnlLine.TESTFIELD("Bank Payment Type",GenJnlLine2."Bank Payment Type"::"Computer Check");
    GenJnlLine.TESTFIELD("Check Printed",TRUE);
    GenJnlLine.TESTFIELD("Document No.");
    
    IF GenJnlLine."Bal. Account No." = '' THEN BEGIN
      GenJnlLine."Check Printed" := FALSE;
      GenJnlLine.DELETE(TRUE);
    END;
    ...
Codeunit<CheckManagement>.PROCEDURE<OnBeforeVoidCheckGenJnlLine2Modify>
  Raised in: Codeunit<CheckManagement>.PROCEDURE<VoidCheck>
    Code lines:
    ...
          END;
          GenJnlLine2."Document No." := '';
          GenJnlLine2."Document Date" := 0D;
          GenJnlLine2."Check Printed" := FALSE;
          GenJnlLine2.UpdateSource;
          OnBeforeVoidCheckGenJnlLine2Modify(GenJnlLine2,GenJnlLine); <=====================
          GenJnlLine2.MODIFY;
        END;
      UNTIL GenJnlLine2.NEXT = 0;
    
    ...
Codeunit<CheckManagement>.PROCEDURE<OnFinancialVoidCheckOnAfterPostBalAccLine>
  Raised in: Codeunit<CheckManagement>.PROCEDURE<FinancialVoidCheck>
    Code lines:
    ...
                  GenJnlLine2,-"Original Amount","Currency Code",CheckLedgEntry."Document No.",
                  "Global Dimension 1 Code","Global Dimension 2 Code","Dimension Set ID");
                BalanceAmountLCY := BalanceAmountLCY + GenJnlLine2."Amount (LCY)";
                OnFinancialVoidCheckOnBeforePostBalAccLine(GenJnlLine2,CheckLedgEntry);
                GenJnlPostLine.RunWithCheck(GenJnlLine2);
                OnFinancialVoidCheckOnAfterPostBalAccLine(GenJnlLine2,CheckLedgEntry,GenJnlPostLine); <=====================
              UNTIL NEXT = 0;
          END;
        END;
      CheckLedgEntry."Bal. Account Type"::Vendor:
    ...
  Raised in: Codeunit<CheckManagement>.PROCEDURE<FinancialVoidCheck>
    Code lines:
    ...
                  GenJnlLine2,-"Original Amount","Currency Code",CheckLedgEntry."Document No.",
                  "Global Dimension 1 Code","Global Dimension 2 Code","Dimension Set ID");
                BalanceAmountLCY := BalanceAmountLCY + GenJnlLine2."Amount (LCY)";
                OnFinancialVoidCheckOnBeforePostBalAccLine(GenJnlLine2,CheckLedgEntry);
                GenJnlPostLine.RunWithCheck(GenJnlLine2);
                OnFinancialVoidCheckOnAfterPostBalAccLine(GenJnlLine2,CheckLedgEntry,GenJnlPostLine); <=====================
              UNTIL NEXT = 0;
          END;
        END;
      CheckLedgEntry."Bal. Account Type"::Vendor:
    ...
  Raised in: Codeunit<CheckManagement>.PROCEDURE<FinancialVoidCheck>
    Code lines:
    ...
                  GenJnlLine2,-"Original Amount","Currency Code",CheckLedgEntry."Document No.",
                  "Global Dimension 1 Code","Global Dimension 2 Code","Dimension Set ID");
                BalanceAmountLCY := BalanceAmountLCY + GenJnlLine2."Amount (LCY)";
                OnFinancialVoidCheckOnBeforePostBalAccLine(GenJnlLine2,CheckLedgEntry);
                GenJnlPostLine.RunWithCheck(GenJnlLine2);
                OnFinancialVoidCheckOnAfterPostBalAccLine(GenJnlLine2,CheckLedgEntry,GenJnlPostLine); <=====================
              UNTIL NEXT = 0;
          END;
        END;
      CheckLedgEntry."Bal. Account Type"::Vendor:
    ...
  Raised in: Codeunit<CheckManagement>.PROCEDURE<FinancialVoidCheck>
    Code lines:
    ...
                  GenJnlLine2,-"Original Amount","Currency Code",CheckLedgEntry."Document No.",
                  "Global Dimension 1 Code","Global Dimension 2 Code","Dimension Set ID");
                BalanceAmountLCY := BalanceAmountLCY + GenJnlLine2."Amount (LCY)";
                OnFinancialVoidCheckOnBeforePostBalAccLine(GenJnlLine2,CheckLedgEntry);
                GenJnlPostLine.RunWithCheck(GenJnlLine2);
                OnFinancialVoidCheckOnAfterPostBalAccLine(GenJnlLine2,CheckLedgEntry,GenJnlPostLine); <=====================
              UNTIL NEXT = 0;
          END;
        END;
      CheckLedgEntry."Bal. Account Type"::Vendor:
    ...
  Raised in: Codeunit<CheckManagement>.PROCEDURE<FinancialVoidCheck>
    Code lines:
    ...
                  GenJnlLine2,-"Original Amount","Currency Code",CheckLedgEntry."Document No.",
                  "Global Dimension 1 Code","Global Dimension 2 Code","Dimension Set ID");
                BalanceAmountLCY := BalanceAmountLCY + GenJnlLine2."Amount (LCY)";
                OnFinancialVoidCheckOnBeforePostBalAccLine(GenJnlLine2,CheckLedgEntry);
                GenJnlPostLine.RunWithCheck(GenJnlLine2);
                OnFinancialVoidCheckOnAfterPostBalAccLine(GenJnlLine2,CheckLedgEntry,GenJnlPostLine); <=====================
              UNTIL NEXT = 0;
          END;
        END;
      CheckLedgEntry."Bal. Account Type"::Vendor:
    ...
  Raised in: Codeunit<CheckManagement>.PROCEDURE<FinancialVoidCheck>
    Code lines:
    ...
                  GenJnlLine2,-"Original Amount","Currency Code",CheckLedgEntry."Document No.",
                  "Global Dimension 1 Code","Global Dimension 2 Code","Dimension Set ID");
                BalanceAmountLCY := BalanceAmountLCY + GenJnlLine2."Amount (LCY)";
                OnFinancialVoidCheckOnBeforePostBalAccLine(GenJnlLine2,CheckLedgEntry);
                GenJnlPostLine.RunWithCheck(GenJnlLine2);
                OnFinancialVoidCheckOnAfterPostBalAccLine(GenJnlLine2,CheckLedgEntry,GenJnlPostLine); <=====================
              UNTIL NEXT = 0;
          END;
        END;
      CheckLedgEntry."Bal. Account Type"::Vendor:
    ...
  Raised in: Codeunit<CheckManagement>.PROCEDURE<FinancialVoidPostGLAccount>
    Code lines:
    ...
          GenJnlLine."VAT Prod. Posting Group" := "VAT Prod. Posting Group";
          IF VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group") THEN
            GenJnlLine."VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
          OnFinancialVoidCheckOnBeforePostBalAccLine(GenJnlLine,CheckLedgEntry);
          GenJnlPostLine.RunWithCheck(GenJnlLine);
          OnFinancialVoidCheckOnAfterPostBalAccLine(GenJnlLine,CheckLedgEntry,GenJnlPostLine); <=====================
        UNTIL NEXT = 0;
    END;
Codeunit<CheckManagement>.PROCEDURE<OnFinancialVoidCheckOnAfterPostVoidCheckLine>
  Raised in: Codeunit<CheckManagement>.PROCEDURE<FinancialVoidCheck>
    Code lines:
    ...
    GenJnlLine2."Shortcut Dimension 2 Code" := BankAccLedgEntry2."Global Dimension 2 Code";
    GenJnlLine2."Dimension Set ID" := BankAccLedgEntry2."Dimension Set ID";
    GenJnlLine2."Allow Zero-Amount Posting" := TRUE;
    OnFinancialVoidCheckOnBeforePostVoidCheckLine(GenJnlLine2);
    GenJnlPostLine.RunWithCheck(GenJnlLine2);
    OnFinancialVoidCheckOnAfterPostVoidCheckLine(GenJnlLine2,GenJnlPostLine); <=====================
    
    // Mark newly posted entry as cleared for bank reconciliation purposes.
    IF ConfirmFinancialVoid.GetVoidDate = CheckLedgEntry."Check Date" THEN
      ClearBankLedgerEntry(BankAccLedgEntry3);
    ...
Codeunit<CheckManagement>.PROCEDURE<OnFinancialVoidCheckOnBeforePostBalAccLine>
  Raised in: Codeunit<CheckManagement>.PROCEDURE<FinancialVoidCheck>
    Code lines:
    ...
                CALCFIELDS("Original Amount");
                SetGenJnlLine(
                  GenJnlLine2,-"Original Amount","Currency Code",CheckLedgEntry."Document No.",
                  "Global Dimension 1 Code","Global Dimension 2 Code","Dimension Set ID");
                BalanceAmountLCY := BalanceAmountLCY + GenJnlLine2."Amount (LCY)";
                OnFinancialVoidCheckOnBeforePostBalAccLine(GenJnlLine2,CheckLedgEntry); <=====================
                GenJnlPostLine.RunWithCheck(GenJnlLine2);
                OnFinancialVoidCheckOnAfterPostBalAccLine(GenJnlLine2,CheckLedgEntry,GenJnlPostLine);
              UNTIL NEXT = 0;
          END;
    ...
  Raised in: Codeunit<CheckManagement>.PROCEDURE<FinancialVoidCheck>
    Code lines:
    ...
                CALCFIELDS("Original Amount");
                SetGenJnlLine(
                  GenJnlLine2,-"Original Amount","Currency Code",CheckLedgEntry."Document No.",
                  "Global Dimension 1 Code","Global Dimension 2 Code","Dimension Set ID");
                BalanceAmountLCY := BalanceAmountLCY + GenJnlLine2."Amount (LCY)";
                OnFinancialVoidCheckOnBeforePostBalAccLine(GenJnlLine2,CheckLedgEntry); <=====================
                GenJnlPostLine.RunWithCheck(GenJnlLine2);
                OnFinancialVoidCheckOnAfterPostBalAccLine(GenJnlLine2,CheckLedgEntry,GenJnlPostLine);
              UNTIL NEXT = 0;
          END;
    ...
  Raised in: Codeunit<CheckManagement>.PROCEDURE<FinancialVoidCheck>
    Code lines:
    ...
                CALCFIELDS("Original Amount");
                SetGenJnlLine(
                  GenJnlLine2,-"Original Amount","Currency Code",CheckLedgEntry."Document No.",
                  "Global Dimension 1 Code","Global Dimension 2 Code","Dimension Set ID");
                BalanceAmountLCY := BalanceAmountLCY + GenJnlLine2."Amount (LCY)";
                OnFinancialVoidCheckOnBeforePostBalAccLine(GenJnlLine2,CheckLedgEntry); <=====================
                GenJnlPostLine.RunWithCheck(GenJnlLine2);
                OnFinancialVoidCheckOnAfterPostBalAccLine(GenJnlLine2,CheckLedgEntry,GenJnlPostLine);
              UNTIL NEXT = 0;
          END;
    ...
  Raised in: Codeunit<CheckManagement>.PROCEDURE<FinancialVoidCheck>
    Code lines:
    ...
                CALCFIELDS("Original Amount");
                SetGenJnlLine(
                  GenJnlLine2,-"Original Amount","Currency Code",CheckLedgEntry."Document No.",
                  "Global Dimension 1 Code","Global Dimension 2 Code","Dimension Set ID");
                BalanceAmountLCY := BalanceAmountLCY + GenJnlLine2."Amount (LCY)";
                OnFinancialVoidCheckOnBeforePostBalAccLine(GenJnlLine2,CheckLedgEntry); <=====================
                GenJnlPostLine.RunWithCheck(GenJnlLine2);
                OnFinancialVoidCheckOnAfterPostBalAccLine(GenJnlLine2,CheckLedgEntry,GenJnlPostLine);
              UNTIL NEXT = 0;
          END;
    ...
  Raised in: Codeunit<CheckManagement>.PROCEDURE<FinancialVoidCheck>
    Code lines:
    ...
                CALCFIELDS("Original Amount");
                SetGenJnlLine(
                  GenJnlLine2,-"Original Amount","Currency Code",CheckLedgEntry."Document No.",
                  "Global Dimension 1 Code","Global Dimension 2 Code","Dimension Set ID");
                BalanceAmountLCY := BalanceAmountLCY + GenJnlLine2."Amount (LCY)";
                OnFinancialVoidCheckOnBeforePostBalAccLine(GenJnlLine2,CheckLedgEntry); <=====================
                GenJnlPostLine.RunWithCheck(GenJnlLine2);
                OnFinancialVoidCheckOnAfterPostBalAccLine(GenJnlLine2,CheckLedgEntry,GenJnlPostLine);
              UNTIL NEXT = 0;
          END;
    ...
  Raised in: Codeunit<CheckManagement>.PROCEDURE<FinancialVoidCheck>
    Code lines:
    ...
                CALCFIELDS("Original Amount");
                SetGenJnlLine(
                  GenJnlLine2,-"Original Amount","Currency Code",CheckLedgEntry."Document No.",
                  "Global Dimension 1 Code","Global Dimension 2 Code","Dimension Set ID");
                BalanceAmountLCY := BalanceAmountLCY + GenJnlLine2."Amount (LCY)";
                OnFinancialVoidCheckOnBeforePostBalAccLine(GenJnlLine2,CheckLedgEntry); <=====================
                GenJnlPostLine.RunWithCheck(GenJnlLine2);
                OnFinancialVoidCheckOnAfterPostBalAccLine(GenJnlLine2,CheckLedgEntry,GenJnlPostLine);
              UNTIL NEXT = 0;
          END;
    ...
  Raised in: Codeunit<CheckManagement>.PROCEDURE<FinancialVoidPostGLAccount>
    Code lines:
    ...
          GenJnlLine."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
          GenJnlLine."VAT Bus. Posting Group" := "VAT Bus. Posting Group";
          GenJnlLine."VAT Prod. Posting Group" := "VAT Prod. Posting Group";
          IF VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group") THEN
            GenJnlLine."VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
          OnFinancialVoidCheckOnBeforePostBalAccLine(GenJnlLine,CheckLedgEntry); <=====================
          GenJnlPostLine.RunWithCheck(GenJnlLine);
          OnFinancialVoidCheckOnAfterPostBalAccLine(GenJnlLine,CheckLedgEntry,GenJnlPostLine);
        UNTIL NEXT = 0;
    END;
Codeunit<CheckManagement>.PROCEDURE<OnFinancialVoidCheckOnBeforePostCust>
  Raised in: Codeunit<CheckManagement>.PROCEDURE<FinancialVoidCheck>
    Code lines:
    ...
            SETRANGE("Transaction No.",BankAccLedgEntry2."Transaction No.");
            SETRANGE("Document No.",BankAccLedgEntry2."Document No.");
            SETRANGE("Posting Date",BankAccLedgEntry2."Posting Date");
            IF FINDSET THEN
              REPEAT
                OnFinancialVoidCheckOnBeforePostCust(GenJnlLine2,CustLedgEntry,BalanceAmountLCY); <=====================
                CALCFIELDS("Original Amount");
                SetGenJnlLine(
                  GenJnlLine2,-"Original Amount","Currency Code",CheckLedgEntry."Document No.",
                  "Global Dimension 1 Code","Global Dimension 2 Code","Dimension Set ID");
    ...
Codeunit<CheckManagement>.PROCEDURE<OnFinancialVoidCheckOnBeforePostEmp>
  Raised in: Codeunit<CheckManagement>.PROCEDURE<FinancialVoidCheck>
    Code lines:
    ...
            SETRANGE("Transaction No.",BankAccLedgEntry2."Transaction No.");
            SETRANGE("Document No.",BankAccLedgEntry2."Document No.");
            SETRANGE("Posting Date",BankAccLedgEntry2."Posting Date");
            IF FINDSET THEN
              REPEAT
                OnFinancialVoidCheckOnBeforePostEmp(GenJnlLine2,EmployeeLedgerEntry); <=====================
                CALCFIELDS("Original Amount");
                SetGenJnlLine(
                  GenJnlLine2,-"Original Amount","Currency Code",CheckLedgEntry."Document No.",
                  "Global Dimension 1 Code","Global Dimension 2 Code","Dimension Set ID");
    ...
Codeunit<CheckManagement>.PROCEDURE<OnFinancialVoidCheckOnBeforePostVend>
  Raised in: Codeunit<CheckManagement>.PROCEDURE<FinancialVoidCheck>
    Code lines:
    ...
            SETRANGE("Transaction No.",BankAccLedgEntry2."Transaction No.");
            SETRANGE("Document No.",BankAccLedgEntry2."Document No.");
            SETRANGE("Posting Date",BankAccLedgEntry2."Posting Date");
            IF FINDSET THEN
              REPEAT
                OnFinancialVoidCheckOnBeforePostVend(GenJnlLine2,VendorLedgEntry,BalanceAmountLCY); <=====================
                CALCFIELDS("Original Amount");
                SetGenJnlLine(
                  GenJnlLine2,-"Original Amount","Currency Code",CheckLedgEntry."Document No.",
                  "Global Dimension 1 Code","Global Dimension 2 Code","Dimension Set ID");
    ...
Codeunit<CheckManagement>.PROCEDURE<OnFinancialVoidCheckOnBeforePostVoidCheckLine>
  Raised in: Codeunit<CheckManagement>.PROCEDURE<FinancialVoidCheck>
    Code lines:
    ...
    BalanceAmountLCY := 0;
    GenJnlLine2."Shortcut Dimension 1 Code" := BankAccLedgEntry2."Global Dimension 1 Code";
    GenJnlLine2."Shortcut Dimension 2 Code" := BankAccLedgEntry2."Global Dimension 2 Code";
    GenJnlLine2."Dimension Set ID" := BankAccLedgEntry2."Dimension Set ID";
    GenJnlLine2."Allow Zero-Amount Posting" := TRUE;
    OnFinancialVoidCheckOnBeforePostVoidCheckLine(GenJnlLine2); <=====================
    GenJnlPostLine.RunWithCheck(GenJnlLine2);
    OnFinancialVoidCheckOnAfterPostVoidCheckLine(GenJnlLine2,GenJnlPostLine);
    
    // Mark newly posted entry as cleared for bank reconciliation purposes.
    ...
Codeunit<CheckManagement>.PROCEDURE<OnPostRoundingAmountOnAfterGenJnlPostLine>
  Raised in: Codeunit<CheckManagement>.PROCEDURE<PostRoundingAmount>
    Code lines:
    ...
    GenJnlLine2."Shortcut Dimension 1 Code" := BankAccLedgEntry2."Global Dimension 1 Code";
    GenJnlLine2."Shortcut Dimension 2 Code" := BankAccLedgEntry2."Global Dimension 2 Code";
    GenJnlLine2."Dimension Set ID" := BankAccLedgEntry2."Dimension Set ID";
    OnPostRoundingAmountOnBeforeGenJnlPostLine(GenJnlLine2,CheckLedgEntry);
    GenJnlPostLine.RunWithCheck(GenJnlLine2);
    OnPostRoundingAmountOnAfterGenJnlPostLine(GenJnlLine2,CheckLedgEntry,GenJnlPostLine); <=====================
Codeunit<CheckManagement>.PROCEDURE<OnPostRoundingAmountOnBeforeGenJnlPostLine>
  Raised in: Codeunit<CheckManagement>.PROCEDURE<PostRoundingAmount>
    Code lines:
    ...
    GenJnlLine2.VALIDATE(Amount,0);
    GenJnlLine2."Amount (LCY)" := RoundingAmount;
    GenJnlLine2."Shortcut Dimension 1 Code" := BankAccLedgEntry2."Global Dimension 1 Code";
    GenJnlLine2."Shortcut Dimension 2 Code" := BankAccLedgEntry2."Global Dimension 2 Code";
    GenJnlLine2."Dimension Set ID" := BankAccLedgEntry2."Dimension Set ID";
    OnPostRoundingAmountOnBeforeGenJnlPostLine(GenJnlLine2,CheckLedgEntry); <=====================
    GenJnlPostLine.RunWithCheck(GenJnlLine2);
    OnPostRoundingAmountOnAfterGenJnlPostLine(GenJnlLine2,CheckLedgEntry,GenJnlPostLine);
Codeunit<CheckManagement>.PROCEDURE<OnUnApplyCustInvoicesOnBeforePost>
  Raised in: Codeunit<CheckManagement>.PROCEDURE<UnApplyCustInvoices>
    Code lines:
    ...
    REPEAT
      GenJournalLine3.CopyFromPaymentCustLedgEntry(OrigPaymentCustLedgerEntry);
      GenJournalLine3."Posting Date" := VoidDate;
      GenJournalLine3.Description := STRSUBSTNO(VoidingCheckMsg,CheckLedgEntry."Check No.");
      GenJournalLine3."Source Code" := SourceCodeSetup."Financially Voided Check";
      OnUnApplyCustInvoicesOnBeforePost(GenJournalLine3,CustLedgEntry,PayDetailedCustLedgEntry); <=====================
      GenJnlPostLine.UnapplyCustLedgEntry(GenJournalLine3,PayDetailedCustLedgEntry);
    UNTIL PayDetailedCustLedgEntry.NEXT = 0;
    
    WITH OrigPaymentCustLedgerEntry DO BEGIN
    ...
Codeunit<CheckManagement>.PROCEDURE<OnUnApplyVendInvoicesOnBeforePost>
  Raised in: Codeunit<CheckManagement>.PROCEDURE<UnApplyVendInvoices>
    Code lines:
    ...
    REPEAT
      GenJournalLine3.CopyFromPaymentVendLedgEntry(OrigPaymentVendorLedgerEntry);
      GenJournalLine3."Posting Date" := VoidDate;
      GenJournalLine3.Description := STRSUBSTNO(VoidingCheckMsg,CheckLedgEntry."Check No.");
      GenJournalLine3."Source Code" := SourceCodeSetup."Financially Voided Check";
      OnUnApplyVendInvoicesOnBeforePost(GenJournalLine3,VendorLedgEntry,PayDetailedVendorLedgEntry); <=====================
      GenJnlPostLine.UnapplyVendLedgEntry(GenJournalLine3,PayDetailedVendorLedgEntry);
    UNTIL PayDetailedVendorLedgEntry.NEXT = 0;
    
    WITH OrigPaymentVendorLedgerEntry DO BEGIN
    ...
Codeunit<Format Document>.PROCEDURE<OnAfterSetSalesPurchaseLine>
  Raised in: Codeunit<Format Document>.PROCEDURE<SetSalesPurchaseLine>
    Code lines:
    ...
      FormattedQuantity := FORMAT(Quantity);
      FormattedUnitPrice := FORMAT(UnitPrice,0,AutoFormatManagement.AutoFormatTranslate(2,CurrencyCode));
      FormattedVATPercentage := FORMAT(VATPercentage);
      FormattedLineAmount := FORMAT(LineAmount,0,AutoFormatManagement.AutoFormatTranslate(1,CurrencyCode));
    END;
    OnAfterSetSalesPurchaseLine( <=====================
      Quantity,UnitPrice,VATPercentage,LineAmount,CurrencyCode,
      FormattedQuantity,FormattedUnitPrice,FormattedVATPercentage,FormattedLineAmount);
Codeunit<Bank Acc. Reconciliation Post>.PROCEDURE<OnBeforeBankAccStmtInsert>
  Raised in: Codeunit<Bank Acc. Reconciliation Post>.PROCEDURE<TransferToBankStmt>
    Code lines:
    ...
        BankAccStmtLine."Statement No." := BankAccStmt."Statement No.";
        BankAccStmtLine.INSERT;
        BankAccReconLine.ClearDataExchEntries;
      UNTIL BankAccReconLine.NEXT = 0;
    
    OnBeforeBankAccStmtInsert(BankAccStmt,BankAccRecon); <=====================
    BankAccStmt.INSERT;
Codeunit<Bank Acc. Reconciliation Post>.PROCEDURE<OnBeforePostedPmtReconInsert>
  Raised in: Codeunit<Bank Acc. Reconciliation Post>.PROCEDURE<TransferToPostPmtAppln>
    Code lines:
    ...
        PostedPmtReconLine.INSERT;
        BankAccReconLine.ClearDataExchEntries;
      UNTIL BankAccReconLine.NEXT = 0;
    
    PostedPmtReconHdr.TRANSFERFIELDS(BankAccRecon);
    OnBeforePostedPmtReconInsert(PostedPmtReconHdr,BankAccRecon); <=====================
    PostedPmtReconHdr.INSERT;
Codeunit<Bank Acc. Reconciliation Post>.PROCEDURE<OnPostPaymentApplicationsOnAfterInitGenJnlLine>
  Raised in: Codeunit<Bank Acc. Reconciliation Post>.PROCEDURE<PostPaymentApplications>
    Code lines:
    ...
      "Allow Zero-Amount Posting" := TRUE;
    
      "Applies-to ID" := BankAccReconLine.GetAppliesToID;
    END;
    
    OnPostPaymentApplicationsOnAfterInitGenJnlLine(GenJnlLine,BankAccReconLine); <=====================
    
    IsApplied := FALSE;
    WITH AppliedPmtEntry DO
      IF AppliedPmtEntryLinesExist(BankAccReconLine) THEN
    ...
Codeunit<Bank Acc. Reconciliation Post>.PROCEDURE<OnPostPaymentApplicationsOnBeforeValidateApplyRequirements>
  Raised in: Codeunit<Bank Acc. Reconciliation Post>.PROCEDURE<PostPaymentApplications>
    Code lines:
    ...
      END ELSE BEGIN
        GLSetup.GET;
        ERROR(ExcessiveAmtErr,PaymentLineAmount,GLSetup.GetCurrencyCode(BankAcc."Currency Code"));
      END;
    
      OnPostPaymentApplicationsOnBeforeValidateApplyRequirements(BankAccReconLine,GenJnlLine,AppliedAmount); <=====================
    
      GenJnlLine.ValidateApplyRequirements(GenJnlLine);
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      IF NOT PostPaymentsOnly THEN BEGIN
    ...
Codeunit<Transfer Extended Text>.PROCEDURE<OnBeforeReadLines>
  Raised in: Codeunit<Transfer Extended Text>.PROCEDURE<ReadLines>
    Code lines:
    IsHandled := FALSE;
    OnBeforeReadLines(ExtTextHeader,DocDate,LanguageCode,IsHandled,Result); <=====================
    IF IsHandled THEN
      EXIT(Result);
    
    ExtTextHeader.SETCURRENTKEY(
      "Table Name","No.","Language Code","All Language Codes","Starting Date","Ending Date");
    ExtTextHeader.SETRANGE("Starting Date",0D,DocDate);
    ExtTextHeader.SETFILTER("Ending Date",'%1..|%2',DocDate,0D);
    IF LanguageCode = '' THEN BEGIN
    ...
Codeunit<Transfer Extended Text>.PROCEDURE<OnBeforeToPurchLineInsert>
  Raised in: Codeunit<Transfer Extended Text>.PROCEDURE<InsertPurchExtTextRetLast>
    Code lines:
    ...
        ToPurchLine."Document No." := PurchLine."Document No.";
        ToPurchLine."Line No." := NextLineNo;
        NextLineNo := NextLineNo + LineSpacing;
        ToPurchLine.Description := TempExtTextLine.Text;
        ToPurchLine."Attached to Line No." := PurchLine."Line No.";
        OnBeforeToPurchLineInsert(ToPurchLine,PurchLine,TempExtTextLine,NextLineNo,LineSpacing); <=====================
        ToPurchLine.INSERT;
      UNTIL TempExtTextLine.NEXT = 0;
      MakeUpdateRequired := TRUE;
    END;
    ...
Codeunit<Transfer Extended Text>.PROCEDURE<OnBeforeToReminderLineInsert>
  Raised in: Codeunit<Transfer Extended Text>.PROCEDURE<InsertReminderExtText>
    Code lines:
    ...
        ToReminderLine."Line No." := NextLineNo;
        NextLineNo := NextLineNo + LineSpacing;
        ToReminderLine.Description := TempExtTextLine.Text;
        ToReminderLine."Attached to Line No." := ReminderLine."Line No.";
        ToReminderLine."Line Type" := ReminderLine."Line Type";
        OnBeforeToReminderLineInsert(ToReminderLine,ReminderLine,TempExtTextLine); <=====================
        ToReminderLine.INSERT;
      UNTIL TempExtTextLine.NEXT = 0;
      MakeUpdateRequired := TRUE;
    END;
Codeunit<Transfer Extended Text>.PROCEDURE<OnBeforeToSalesLineInsert>
  Raised in: Codeunit<Transfer Extended Text>.PROCEDURE<InsertSalesExtTextRetLast>
    Code lines:
    ...
        ToSalesLine."Document No." := SalesLine."Document No.";
        ToSalesLine."Line No." := NextLineNo;
        NextLineNo := NextLineNo + LineSpacing;
        ToSalesLine.Description := TempExtTextLine.Text;
        ToSalesLine."Attached to Line No." := SalesLine."Line No.";
        OnBeforeToSalesLineInsert(ToSalesLine,SalesLine,TempExtTextLine,NextLineNo,LineSpacing); <=====================
        ToSalesLine.INSERT;
      UNTIL TempExtTextLine.NEXT = 0;
      MakeUpdateRequired := TRUE;
    END;
    ...
Codeunit<Transfer Extended Text>.PROCEDURE<OnBeforeToServiceLineInsert>
  Raised in: Codeunit<Transfer Extended Text>.PROCEDURE<InsertServExtText>
    Code lines:
    ...
        ToServiceLine."Line No." := NextLineNo;
        NextLineNo := NextLineNo + LineSpacing;
        ToServiceLine.Description := TempExtTextLine.Text;
        ToServiceLine."Attached to Line No." := ServiceLine."Line No.";
        ToServiceLine."Service Item No." := ServiceLine."Service Item No.";
        OnBeforeToServiceLineInsert(ServiceLine,ToServiceLine,TempExtTextLine,NextLineNo,LineSpacing); <=====================
        ToServiceLine.INSERT(TRUE);
      UNTIL TempExtTextLine.NEXT = 0;
      MakeUpdateRequired := TRUE;
    END;
Codeunit<Transfer Extended Text>.PROCEDURE<OnDeletePurchLinesOnAfterSetFilters>
  Raised in: Codeunit<Transfer Extended Text>.PROCEDURE<DeletePurchLines>
    Code lines:
    PurchLine2.SETRANGE("Document Type",PurchLine."Document Type");
    PurchLine2.SETRANGE("Document No.",PurchLine."Document No.");
    PurchLine2.SETRANGE("Attached to Line No.",PurchLine."Line No.");
    OnDeletePurchLinesOnAfterSetFilters(PurchLine2,PurchLine); <=====================
    PurchLine2 := PurchLine;
    IF PurchLine2.FIND('>') THEN BEGIN
      REPEAT
        PurchLine2.DELETE(TRUE);
      UNTIL PurchLine2.NEXT = 0;
      EXIT(TRUE);
Codeunit<Transfer Extended Text>.PROCEDURE<OnDeleteSalesLinesOnAfterSetFilters>
  Raised in: Codeunit<Transfer Extended Text>.PROCEDURE<DeleteSalesLines>
    Code lines:
    SalesLine2.SETRANGE("Document Type",SalesLine."Document Type");
    SalesLine2.SETRANGE("Document No.",SalesLine."Document No.");
    SalesLine2.SETRANGE("Attached to Line No.",SalesLine."Line No.");
    OnDeleteSalesLinesOnAfterSetFilters(SalesLine2,SalesLine); <=====================
    SalesLine2 := SalesLine;
    IF SalesLine2.FIND('>') THEN BEGIN
      REPEAT
        SalesLine2.DELETE(TRUE);
      UNTIL SalesLine2.NEXT = 0;
      EXIT(TRUE);
Codeunit<Transfer Extended Text>.PROCEDURE<OnFinChrgMemoCheckIfAnyExtTextAutoText>
  Raised in: Codeunit<Transfer Extended Text>.PROCEDURE<FinChrgMemoCheckIfAnyExtText>
    Code lines:
    ...
      FinChrgMemoLine.TESTFIELD("Finance Charge Memo No.");
      FinChrgMemoHeader.GET(FinChrgMemoLine."Finance Charge Memo No.");
      ExtTextHeader.SETRANGE("Table Name",FinChrgMemoLine.Type);
      ExtTextHeader.SETRANGE("No.",FinChrgMemoLine."No.");
      ExtTextHeader.SETRANGE("Finance Charge Memo",TRUE);
      OnFinChrgMemoCheckIfAnyExtTextAutoText(ExtTextHeader,FinChrgMemoHeader,FinChrgMemoLine); <=====================
      EXIT(ReadLines(ExtTextHeader,FinChrgMemoHeader."Document Date",FinChrgMemoHeader."Language Code"));
    END;
Codeunit<Transfer Extended Text>.PROCEDURE<OnPrepmtGetAnyExtTextAfterReadLines>
  Raised in: Codeunit<Transfer Extended Text>.PROCEDURE<PrepmtGetAnyExtText>
    Code lines:
    ...
      DATABASE::"Purch. Cr. Memo Line":
        ExtTextHeader.SETRANGE("Prepmt. Purchase Credit Memo",TRUE);
    END;
    OnPrepmtGetAnyExtTextBeforeReadLines(ExtTextHeader,DocumentDate,LanguageCode);
    IF ReadLines(ExtTextHeader,DocumentDate,LanguageCode) THEN BEGIN
      OnPrepmtGetAnyExtTextAfterReadLines(ExtTextHeader,TempExtTextLine); <=====================
      TempExtTextLine.FIND('-');
      REPEAT
        ExtTextLine := TempExtTextLine;
        ExtTextLine.INSERT;
    ...
Codeunit<Transfer Extended Text>.PROCEDURE<OnPrepmtGetAnyExtTextBeforeReadLines>
  Raised in: Codeunit<Transfer Extended Text>.PROCEDURE<PrepmtGetAnyExtText>
    Code lines:
    ...
      DATABASE::"Purch. Inv. Line":
        ExtTextHeader.SETRANGE("Prepmt. Purchase Invoice",TRUE);
      DATABASE::"Purch. Cr. Memo Line":
        ExtTextHeader.SETRANGE("Prepmt. Purchase Credit Memo",TRUE);
    END;
    OnPrepmtGetAnyExtTextBeforeReadLines(ExtTextHeader,DocumentDate,LanguageCode); <=====================
    IF ReadLines(ExtTextHeader,DocumentDate,LanguageCode) THEN BEGIN
      OnPrepmtGetAnyExtTextAfterReadLines(ExtTextHeader,TempExtTextLine);
      TempExtTextLine.FIND('-');
      REPEAT
    ...
Codeunit<Transfer Extended Text>.PROCEDURE<OnPurchCheckIfAnyExtTextAutoText>
  Raised in: Codeunit<Transfer Extended Text>.PROCEDURE<PurchCheckIfAnyExtText>
    Code lines:
    ...
        PurchLine."Document Type"::"Return Order":
          ExtTextHeader.SETRANGE("Purchase Return Order",TRUE);
        PurchLine."Document Type"::"Credit Memo":
          ExtTextHeader.SETRANGE("Purchase Credit Memo",TRUE);
      END;
      OnPurchCheckIfAnyExtTextAutoText(ExtTextHeader,PurchHeader,PurchLine); <=====================
      EXIT(ReadLines(ExtTextHeader,PurchHeader."Document Date",PurchHeader."Language Code"));
    END;
Codeunit<Transfer Extended Text>.PROCEDURE<OnReminderCheckIfAnyExtTextAutoText>
  Raised in: Codeunit<Transfer Extended Text>.PROCEDURE<ReminderCheckIfAnyExtText>
    Code lines:
    ...
      ReminderLine.TESTFIELD("Reminder No.");
      ReminderHeader.GET(ReminderLine."Reminder No.");
      ExtTextHeader.SETRANGE("Table Name",ReminderLine.Type);
      ExtTextHeader.SETRANGE("No.",ReminderLine."No.");
      ExtTextHeader.SETRANGE(Reminder,TRUE);
      OnReminderCheckIfAnyExtTextAutoText(ExtTextHeader,ReminderHeader,ReminderLine); <=====================
      EXIT(ReadLines(ExtTextHeader,ReminderHeader."Document Date",ReminderHeader."Language Code"));
    END;
Codeunit<Transfer Extended Text>.PROCEDURE<OnSalesCheckIfAnyExtTextAutoText>
  Raised in: Codeunit<Transfer Extended Text>.PROCEDURE<SalesCheckIfAnyExtText>
    Code lines:
    ...
        SalesLine."Document Type"::"Return Order":
          ExtTextHeader.SETRANGE("Sales Return Order",TRUE);
        SalesLine."Document Type"::"Credit Memo":
          ExtTextHeader.SETRANGE("Sales Credit Memo",TRUE);
      END;
      OnSalesCheckIfAnyExtTextAutoText(ExtTextHeader,SalesHeader,SalesLine); <=====================
      EXIT(ReadLines(ExtTextHeader,SalesHeader."Document Date",SalesHeader."Language Code"));
    END;
Codeunit<Transfer Extended Text>.PROCEDURE<OnServCheckIfAnyExtTextAutoText>
  Raised in: Codeunit<Transfer Extended Text>.PROCEDURE<ServCheckIfAnyExtText>
    Code lines:
    ...
          ExtTextHeader.SETRANGE("Service Invoice",TRUE);
        ServiceLine."Document Type"::"Credit Memo":
          ExtTextHeader.SETRANGE("Service Credit Memo",TRUE);
      END;
      ServHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      OnServCheckIfAnyExtTextAutoText(ExtTextHeader,ServHeader,ServiceLine); <=====================
      EXIT(ReadLines(ExtTextHeader,ServHeader."Order Date",ServHeader."Language Code"));
    END;
Codeunit<Shipment Header - Edit>.PROCEDURE<OnBeforeSalesShptHeaderModify>
  Raised in: Codeunit<Shipment Header - Edit>.<OnRun>
    Code lines:
    ...
    SalesShptHeader.LOCKTABLE;
    SalesShptHeader.FIND;
    SalesShptHeader."Shipping Agent Code" := "Shipping Agent Code";
    SalesShptHeader."Shipping Agent Service Code" := "Shipping Agent Service Code";
    SalesShptHeader."Package Tracking No." := "Package Tracking No.";
    OnBeforeSalesShptHeaderModify(SalesShptHeader,Rec); <=====================
    SalesShptHeader.TESTFIELD("No.","No.");
    SalesShptHeader.MODIFY;
    Rec := SalesShptHeader;
Codeunit<Reminder-Make>.PROCEDURE<OnAfterFilterCustLedgEntryReminderLevel>
  Raised in: Codeunit<Reminder-Make>.PROCEDURE<FilterCustLedgEntryReminderLevel>
    Code lines:
    ...
      CustLedgEntry.SETRANGE("Due Date");
      CustLedgEntry.SETRANGE("Currency Code",CurrencyCode);
      ReminderLevel.SETRANGE("Reminder Terms Code",ReminderTerms.Code);
    END;
    
    OnAfterFilterCustLedgEntryReminderLevel(CustLedgEntry,ReminderLevel,ReminderTerms,Cust); <=====================
Codeunit<Reminder-Make>.PROCEDURE<OnAfterMakeReminder>
  Raised in: Codeunit<Reminder-Make>.PROCEDURE<MakeReminder>
    Code lines:
    ...
    RemoveLinesOfNegativeReminder(ReminderHeader);
    
    ReminderLevel.RESET;
    CustLedgEntry.RESET;
    
    OnAfterMakeReminder(ReminderHeader,ReminderLine); <=====================
    
    EXIT(TRUE);
Codeunit<Reminder-Make>.PROCEDURE<OnBeforeCustLedgerEntryFind>
  Raised in: Codeunit<Reminder-Make>.PROCEDURE<Code>
    Code lines:
    ...
      CustLedgEntry2.COPYFILTERS(CustLedgEntry);
      CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive);
      CustLedgEntry.SETRANGE("Customer No.",Cust."No.");
      CustLedgEntry.SETRANGE(Open,TRUE);
      CustLedgEntry.SETRANGE(Positive,TRUE);
      OnBeforeCustLedgerEntryFind(CustLedgEntry,ReminderHeader,Cust); <=====================
      IF CustLedgEntry.FINDSET THEN
        REPEAT
          IF CustLedgEntry."On Hold" = '' THEN BEGIN
            Currency.Code := CustLedgEntry."Currency Code";
    ...
Codeunit<Reminder-Make>.PROCEDURE<OnBeforeReminderHeaderFind>
  Raised in: Codeunit<Reminder-Make>.PROCEDURE<MakeReminder>
    Code lines:
    ...
        ReminderHeader.LOCKTABLE;
        IF NOT HeaderExists THEN BEGIN
          ReminderHeader.SETCURRENTKEY("Customer No.","Currency Code");
          ReminderHeader.SETRANGE("Customer No.","No.");
          ReminderHeader.SETRANGE("Currency Code",CurrencyCode);
          OnBeforeReminderHeaderFind(ReminderHeader,ReminderHeaderReq,ReminderTerms,Cust); <=====================
          IF ReminderHeader.FINDFIRST THEN
            EXIT(FALSE);
          ReminderHeader.INIT;
          ReminderHeader."No." := '';
    ...
Codeunit<Reminder-Make>.PROCEDURE<OnBeforeReminderHeaderModify>
  Raised in: Codeunit<Reminder-Make>.PROCEDURE<MakeReminder>
    Code lines:
    ...
          ReminderHeader.VALIDATE("Currency Code",CurrencyCode);
          ReminderHeader."Document Date" := ReminderHeaderReq."Document Date";
          ReminderHeader."Use Header Level" := ReminderHeaderReq."Use Header Level";
        END;
        ReminderHeader."Reminder Level" := ReminderLevel."No.";
        OnBeforeReminderHeaderModify(ReminderHeader,ReminderHeaderReq,HeaderExists,ReminderTerms,Cust); <=====================
        ReminderHeader.MODIFY;
        NextLineNo := 0;
        ReminderLevel.MARKEDONLY(TRUE);
        CustLedgEntry.MARKEDONLY(TRUE);
    ...
Codeunit<Reminder-Make>.PROCEDURE<OnBeforeReminderLineInsert>
  Raised in: Codeunit<Reminder-Make>.PROCEDURE<MakeReminder>
    Code lines:
    ...
                InitReminderLine(
                  ReminderLine,ReminderHeader."No.",ReminderLine."Line Type"::"Reminder Line",'',NextLineNo);
                ReminderLine.Type := ReminderLine.Type::"Customer Ledger Entry";
                ReminderLine.VALIDATE("Entry No.",CustLedgEntry."Entry No.");
                SetReminderLevel(ReminderHeader,ReminderLine,ReminderLevel."No.");
                OnBeforeReminderLineInsert(ReminderLine,ReminderHeader,ReminderLevel,CustLedgEntry); <=====================
                ReminderLine.INSERT;
                StartLineInserted := TRUE;
    
                AddLineFeeForCustLedgEntry(CustLedgEntry,ReminderLevel,NextLineNo);
    ...
Codeunit<Reminder-Issue>.PROCEDURE<OnAfterInitGenJnlLine>
  Raised in: Codeunit<Reminder-Issue>.PROCEDURE<InitGenJnlLine>
    Code lines:
    ...
      GenJnlLine."Salespers./Purch. Code" := '';
      GenJnlLine."Country/Region Code" := "Country/Region Code";
      GenJnlLine."VAT Registration No." := "VAT Registration No.";
    END;
    
    OnAfterInitGenJnlLine(GenJnlLine,ReminderHeader); <=====================
Codeunit<Reminder-Issue>.PROCEDURE<OnAfterIssueReminder>
  Raised in: Codeunit<Reminder-Issue>.<OnRun>
    Code lines:
    ...
        UNTIL ReminderLine.NEXT = 0;
      ReminderLine.DELETEALL;
      DELETE;
    END;
    
    OnAfterIssueReminder(ReminderHeader,IssuedReminderHeader."No."); <=====================
Codeunit<Reminder-Issue>.PROCEDURE<OnAfterProcessReminderLines>
  Raised in: Codeunit<Reminder-Issue>.PROCEDURE<ProcessReminderLines>
    Code lines:
    ...
              END;
          END;
        UNTIL ReminderLine.NEXT = 0;
    END;
    
    OnAfterProcessReminderLines(ReminderHeader,ReminderLine,ReminderInterestAmount,ReminderInterestVATAmount); <=====================
Codeunit<Reminder-Issue>.PROCEDURE<OnAfterTestDeleteHeader>
  Raised in: Codeunit<Reminder-Issue>.PROCEDURE<TestDeleteHeader>
    Code lines:
    ...
        IssuedReminderHeader."Pre-Assigned No. Series" := "No. Series";
        IssuedReminderHeader."Pre-Assigned No." := "No.";
        IssuedReminderHeader."Posting Date" := TODAY;
        IssuedReminderHeader."User ID" := USERID;
        IssuedReminderHeader."Source Code" := SourceCode.Code;
        OnAfterTestDeleteHeader(IssuedReminderHeader,ReminderHeader); <=====================
      END;
    END;
Codeunit<Reminder-Issue>.PROCEDURE<OnBeforeIssuedReminderHeaderInsert>
  Raised in: Codeunit<Reminder-Issue>.PROCEDURE<InsertIssuedReminderHeader>
    Code lines:
    ...
    IssuedReminderHeader.TRANSFERFIELDS(ReminderHeader);
    IssuedReminderHeader."No." := DocNo;
    IssuedReminderHeader."Pre-Assigned No." := ReminderHeader."No.";
    IssuedReminderHeader."Source Code" := SrcCode;
    IssuedReminderHeader."User ID" := USERID;
    OnBeforeIssuedReminderHeaderInsert(IssuedReminderHeader,ReminderHeader); <=====================
    IssuedReminderHeader.INSERT;
Codeunit<Reminder-Issue>.PROCEDURE<OnBeforeIssuedReminderLineInsert>
  Raised in: Codeunit<Reminder-Issue>.PROCEDURE<InsertIssuedReminderLine>
    Code lines:
    IssuedReminderLine.INIT;
    IssuedReminderLine.TRANSFERFIELDS(ReminderLine);
    IssuedReminderLine."Reminder No." := IssuedReminderNo;
    OnBeforeIssuedReminderLineInsert(IssuedReminderLine,ReminderLine); <=====================
    IssuedReminderLine.INSERT;
Codeunit<Reminder-Issue>.PROCEDURE<OnBeforeIssueReminder>
  Raised in: Codeunit<Reminder-Issue>.<OnRun>
    Code lines:
    IsHandled := FALSE;
    OnBeforeIssueReminder(ReminderHeader,ReplacePostingDate,PostingDate,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH ReminderHeader DO BEGIN
      UpdateReminderRounding(ReminderHeader);
      IF (PostingDate <> 0D) AND (ReplacePostingDate OR ("Posting Date" = 0D)) THEN
        VALIDATE("Posting Date",PostingDate);
      TESTFIELD("Customer No.");
    ...
Codeunit<Reminder-Issue>.PROCEDURE<OnBeforeReminderEntryInsert>
  Raised in: Codeunit<Reminder-Issue>.PROCEDURE<InsertReminderEntry>
    Code lines:
    ...
      "Remaining Amount" := ReminderLine."Remaining Amount";
      "Interest Amount" := ReminderLine.Amount;
      "Interest Posted" :=
        ("Interest Amount" <> 0) AND ReminderHeader."Post Interest";
      "User ID" := USERID;
      OnBeforeReminderEntryInsert(ReminderFinChargeEntry,ReminderHeader); <=====================
      INSERT;
    END;
    IF ReminderLine."Line Type" <> ReminderLine."Line Type"::"Not Due" THEN
      UpdateCustLedgEntryLastIssuedReminderLevel(ReminderFinChargeEntry);
Codeunit<FinChrgMemo-Make>.PROCEDURE<OnAfterFinChrgMemoLineCreated>
  Raised in: Codeunit<FinChrgMemo-Make>.PROCEDURE<MakeLines2>
    Code lines:
    ...
              FinChrgMemoLine.INSERT
            ELSE BEGIN
              TempCurrency.Code := CurrencyCode;
              IF TempCurrency.INSERT THEN;
            END;
          OnAfterFinChrgMemoLineCreated(FinChrgMemoLine,Checking); <=====================
        UNTIL CustLedgEntry.NEXT = 0;
Codeunit<FinChrgMemo-Issue>.PROCEDURE<OnAfterInitGenJnlLine>
  Raised in: Codeunit<FinChrgMemo-Issue>.PROCEDURE<InitGenJnlLine>
    Code lines:
    ...
      GenJnlLine."Source Code" := SrcCode;
      GenJnlLine."Reason Code" := "Reason Code";
      GenJnlLine."System-Created Entry" := SystemCreatedEntry;
      GenJnlLine."Posting No. Series" := "Issuing No. Series";
      GenJnlLine."Salespers./Purch. Code" := '';
      OnAfterInitGenJnlLine(GenJnlLine,FinChrgMemoHeader); <=====================
    END;
Codeunit<FinChrgMemo-Issue>.PROCEDURE<OnAfterIssueFinChargeMemo>
  Raised in: Codeunit<FinChrgMemo-Issue>.<OnRun>
    Code lines:
    ...
    
      FinChrgMemoLine.DELETEALL;
      DELETE;
    END;
    
    OnAfterIssueFinChargeMemo(FinChrgMemoHeader,IssuedFinChrgMemoHeader."No."); <=====================
Codeunit<FinChrgMemo-Issue>.PROCEDURE<OnBeforeIssueFinChargeMemo>
  Raised in: Codeunit<FinChrgMemo-Issue>.<OnRun>
    Code lines:
    OnBeforeIssueFinChargeMemo(FinChrgMemoHeader); <=====================
    
    WITH FinChrgMemoHeader DO BEGIN
      UpdateFinanceChargeRounding(FinChrgMemoHeader);
      IF (PostingDate <> 0D) AND (ReplacePostingDate OR ("Posting Date" = 0D)) THEN
        VALIDATE("Posting Date",PostingDate);
      TESTFIELD("Customer No.");
      TESTFIELD("Posting Date");
      TESTFIELD("Document Date");
      TESTFIELD("Due Date");
    ...
Codeunit<NoSeriesManagement>.PROCEDURE<OnAfterGetNextNo3>
  Raised in: Codeunit<NoSeriesManagement>.PROCEDURE<DoGetNextNo>
    Code lines:
    ...
    IF ModifySeries THEN
      NoSeriesLine.MODIFY
    ELSE
      LastNoSeriesLine := NoSeriesLine;
    
    OnAfterGetNextNo3(NoSeriesLine,ModifySeries); <=====================
    
    EXIT(NoSeriesLine."Last No. Used");
Codeunit<NoSeriesManagement>.PROCEDURE<OnAfterSaveNoSeries>
  Raised in: Codeunit<NoSeriesManagement>.PROCEDURE<SaveNoSeries>
    Code lines:
    IF LastNoSeriesLine."Series Code" <> '' THEN
      LastNoSeriesLine.MODIFY;
    
    OnAfterSaveNoSeries(LastNoSeriesLine); <=====================
Codeunit<NoSeriesManagement>.PROCEDURE<OnBeforeDoGetNextNo>
  Raised in: Codeunit<NoSeriesManagement>.PROCEDURE<DoGetNextNo>
    Code lines:
    OnBeforeDoGetNextNo(NoSeriesCode,SeriesDate,ModifySeries,NoErrorsOrWarnings); <=====================
    
    IF SeriesDate = 0D THEN
      SeriesDate := WORKDATE;
    
    IF ModifySeries OR (LastNoSeriesLine."Series Code" = '') THEN BEGIN
      IF ModifySeries THEN
        NoSeriesLine.LOCKTABLE;
      NoSeries.GET(NoSeriesCode);
      SetNoSeriesLineFilter(NoSeriesLine,NoSeriesCode,SeriesDate);
    ...
Codeunit<Mail>.PROCEDURE<OnBeforeCreateMessage>
  Raised in: Codeunit<Mail>.PROCEDURE<CreateMessage>
    Code lines:
    Initialize;
    
    OnBeforeCreateMessage(ToAddresses,CcAddresses,BccAddresses,Subject,Body); <=====================
    
    OutlookMessageHelper.Recipients := ToAddresses;
    OutlookMessageHelper.CarbonCopyRecipients := CcAddresses;
    OutlookMessageHelper.BlindCarbonCopyRecipients := BccAddresses;
    OutlookMessageHelper.Subject := Subject;
    OutlookMessageHelper.BodyFormat := 2;
    OutlookMessageHelper.ShowNewMailDialogOnSend := ShowNewMailDialogOnSend;
    ...
Codeunit<Mail>.PROCEDURE<OnGetEmailAddressFromActiveDirectory>
  Raised in: Codeunit<Mail>.PROCEDURE<GetActiveDirectoryMailFromUser>
    Code lines:
    OnGetEmailAddressFromActiveDirectory(Email,Handled); <=====================
    IF Handled THEN
      EXIT(Email);
    EXIT(GetEmailAddressFromActiveDirectory);
Codeunit<ClientTypeManagement>.PROCEDURE<OnAfterGetCurrentClientType>
  Raised in: Codeunit<ClientTypeManagement>.PROCEDURE<GetCurrentClientType>
    Code lines:
    CurrClientType := CURRENTCLIENTTYPE;
    OnAfterGetCurrentClientType(CurrClientType); <=====================
Codeunit<LogInManagement>.PROCEDURE<OnAfterCompanyClose>
  Raised in: Codeunit<LogInManagement>.PROCEDURE<CompanyClose>
    Code lines:
    OnBeforeCompanyClose;
    IF GUIALLOWED OR (ClientTypeManagement.GetCurrentClientType = CLIENTTYPE::Web) THEN
      LogInEnd;
    OnAfterCompanyClose; <=====================
Codeunit<LogInManagement>.PROCEDURE<OnAfterCompanyOpen>
  Raised in: Codeunit<LogInManagement>.PROCEDURE<CompanyOpen>
    Code lines:
    ...
    OnBeforeCompanyOpen;
    
    IF GUIALLOWED AND (ClientTypeManagement.GetCurrentClientType <> CLIENTTYPE::Background) THEN
      LogInStart;
    
    OnAfterCompanyOpen; <=====================
    
    LogonManagement.SetLogonInProgress(FALSE);
Codeunit<LogInManagement>.PROCEDURE<OnAfterLogInEnd>
  Raised in: Codeunit<LogInManagement>.PROCEDURE<LogInEnd>
    Code lines:
    ...
          UserTimeRegister.INSERT;
        END;
      END;
    END;
    
    OnAfterLogInEnd; <=====================
Codeunit<LogInManagement>.PROCEDURE<OnAfterLogInStart>
  Raised in: Codeunit<LogInManagement>.PROCEDURE<LogInStart>
    Code lines:
    ...
    
    SetupMyRecords;
    
    ApplicationAreaMgmtFacade.SetupApplicationArea;
    
    OnAfterLogInStart; <=====================
Codeunit<LogInManagement>.PROCEDURE<OnBeforeCompanyClose>
  Raised in: Codeunit<LogInManagement>.PROCEDURE<CompanyClose>
    Code lines:
    OnBeforeCompanyClose; <=====================
    IF GUIALLOWED OR (ClientTypeManagement.GetCurrentClientType = CLIENTTYPE::Web) THEN
      LogInEnd;
    OnAfterCompanyClose;
Codeunit<LogInManagement>.PROCEDURE<OnBeforeCompanyOpen>
  Raised in: Codeunit<LogInManagement>.PROCEDURE<CompanyOpen>
    Code lines:
    ...
    
    // This needs to be the very first thing to run before company open
    CODEUNIT.RUN(CODEUNIT::"Azure AD User Management");
    CODEUNIT.RUN(CODEUNIT::"SaaS Log In Management");
    
    OnBeforeCompanyOpen; <=====================
    
    IF GUIALLOWED AND (ClientTypeManagement.GetCurrentClientType <> CLIENTTYPE::Background) THEN
      LogInStart;
    
    ...
Codeunit<LogInManagement>.PROCEDURE<OnBeforeLogInStart>
  Raised in: Codeunit<LogInManagement>.PROCEDURE<LogInStart>
    Code lines:
    ...
      END;
    
      User.SETRANGE("User Security ID");
    END;
    
    OnBeforeLogInStart; <=====================
    
    InitializeCompany;
    UpdateUserPersonalization;
    CreateProfiles;
    ...
Codeunit<SMTP Mail>.PROCEDURE<OnAfterTrySend>
  Raised in: Codeunit<SMTP Mail>.PROCEDURE<TrySend>
    Code lines:
    ...
          "User ID",
          Password,
          "Secure Connection");
    Mail.Dispose;
    CLEAR(Mail);
    OnAfterTrySend(SendResult); <=====================
    EXIT(SendResult = '');
Codeunit<SMTP Mail>.PROCEDURE<OnBeforeAddBCC>
  Raised in: Codeunit<SMTP Mail>.PROCEDURE<AddBCC>
    Code lines:
    OnBeforeAddBCC(Recipients); <=====================
    
    CheckValidEmailAddresses(Recipients);
    Result := Mail.AddBCC(Recipients);
    IF Result <> '' THEN
      ShowErrorNotification(STRSUBSTNO(RecipientErr,Recipients),Result);
Codeunit<SMTP Mail>.PROCEDURE<OnBeforeAddCC>
  Raised in: Codeunit<SMTP Mail>.PROCEDURE<AddCC>
    Code lines:
    OnBeforeAddCC(Recipients); <=====================
    
    CheckValidEmailAddresses(Recipients);
    Result := Mail.AddCC(Recipients);
    IF Result <> '' THEN
      ShowErrorNotification(STRSUBSTNO(RecipientErr,Recipients),Result);
Codeunit<SMTP Mail>.PROCEDURE<OnBeforeAddRecipients>
  Raised in: Codeunit<SMTP Mail>.PROCEDURE<AddRecipients>
    Code lines:
    OnBeforeAddRecipients(Recipients); <=====================
    
    CheckValidEmailAddresses(Recipients);
    Result := Mail.AddRecipients(Recipients);
    IF Result <> '' THEN
      ShowErrorNotification(STRSUBSTNO(RecipientErr,Recipients),Result);
Codeunit<SMTP Mail>.PROCEDURE<OnBeforeCreateMessage>
  Raised in: Codeunit<SMTP Mail>.PROCEDURE<CreateMessage>
    Code lines:
    OnBeforeCreateMessage(SenderName,SenderAddress,Recipients,Subject,Body,HtmlFormatted); <=====================
    
    IF Recipients <> '' THEN
      CheckValidEmailAddresses(Recipients);
    CheckValidEmailAddresses(SenderAddress);
    SMTPMailSetup.GetSetup;
    SMTPMailSetup.TESTFIELD("SMTP Server");
    IF NOT ISNULL(Mail) THEN BEGIN
      Mail.Dispose;
      CLEAR(Mail);
    ...
Codeunit<SMTP Mail>.PROCEDURE<OnBeforeTrySend>
  Raised in: Codeunit<SMTP Mail>.PROCEDURE<TrySend>
    Code lines:
    OnBeforeTrySend; <=====================
    SendResult := '';
    Password := SMTPMailSetup.GetPassword;
    WITH SMTPMailSetup DO
      SendResult :=
        Mail.Send(
          "SMTP Server",
          "SMTP Server Port",
          Authentication <> Authentication::Anonymous,
          "User ID",
    ...
Codeunit<Client Type Management>.PROCEDURE<OnAfterGetCurrentClientType>
  Raised in: Codeunit<Client Type Management>.PROCEDURE<GetCurrentClientType>
    Code lines:
    // Use the GetCurrentClientType wrapper method when you want to test a flow on a different type of client.
    // Example:
    // IF ClientTypeManagement.GetCurrentClientType IN [CLIENTTYPE::xxx, CLIENTTYPE::yyy] THEN
    CurrClientType := CURRENTCLIENTTYPE;
    OnAfterGetCurrentClientType(CurrClientType); <=====================
Codeunit<Graph Mail>.PROCEDURE<OnGetGraphDomain>
  Raised in: Codeunit<Graph Mail>.PROCEDURE<GetGraphDomain>
    Code lines:
    ...
      EXIT('https://graph.microsoft-ppe.com/');
    
    IF EnvironmentMgt.IsPROD THEN
      EXIT('https://graph.microsoft.com/');
    
    OnGetGraphDomain(Domain); <=====================
    IF Domain = '' THEN
      Domain := 'https://graph.microsoft.com/';
    
    EXIT(Domain);
Codeunit<DimensionManagement>.PROCEDURE<OnAfterConvertDimtoICDim>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<ConvertDimtoICDim>
    Code lines:
    IF Dim.GET(FromDim) THEN
      ICDimCode := Dim."Map-to IC Dimension Code";
    
    OnAfterConvertDimtoICDim(FromDim,ICDimCode); <=====================
Codeunit<DimensionManagement>.PROCEDURE<OnAfterConvertDimValuetoICDimVal>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<ConvertDimValuetoICDimVal>
    Code lines:
    IF DimValue.GET(FromDim,FromDimValue) THEN
      ICDimValueCode := DimValue."Map-to IC Dimension Value Code";
    
    OnAfterConvertDimValuetoICDimVal(FromDim,FromDimValue,ICDimValueCode); <=====================
Codeunit<DimensionManagement>.PROCEDURE<OnAfterConvertICDimtoDim>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<ConvertICDimtoDim>
    Code lines:
    IF ICDim.GET(FromICDimCode) THEN
      DimCode := ICDim."Map-to Dimension Code";
    
    OnAfterConvertICDimtoDim(FromICDimCode,DimCode); <=====================
Codeunit<DimensionManagement>.PROCEDURE<OnAfterConvertICDimValuetoDimValue>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<ConvertICDimValuetoDimValue>
    Code lines:
    IF ICDimValue.GET(FromICDimCode,FromICDimValue) THEN
      DimValueCode := ICDimValue."Map-to Dimension Value Code";
    
    OnAfterConvertICDimValuetoDimValue(FromICDimCode,FromICDimValue,DimValueCode); <=====================
Codeunit<DimensionManagement>.PROCEDURE<OnAfterGetRecDefaultDimID>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<GetRecDefaultDimID>
    Code lines:
    OnGetRecDefaultDimID(RecVariant,CurrFieldNo,TableID,No,SourceCode,InheritFromDimSetID,InheritFromTableNo);
    DefaultDimID := GetDefaultDimID(TableID,No,SourceCode,GlobalDim1Code,GlobalDim2Code,InheritFromDimSetID,InheritFromTableNo);
    OnAfterGetRecDefaultDimID( <=====================
      RecVariant,CurrFieldNo,TableID,No,SourceCode,InheritFromDimSetID,InheritFromTableNo,
      GlobalDim1Code,GlobalDim2Code,DefaultDimID);
    EXIT(DefaultDimID);
Codeunit<DimensionManagement>.PROCEDURE<OnAfterSetupObjectNoList>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<DefaultDimObjectNoWithGlobalDimsList>
    Code lines:
    ...
      REPEAT
        TempDimSetIDField.SETRANGE(TableNo,TempDimField.TableNo);
        IF TempDimSetIDField.ISEMPTY THEN
          DefaultDimInsertTempObject(TempAllObjWithCaption,TempDimField.TableNo);
      UNTIL TempDimField.NEXT = 0;
    OnAfterSetupObjectNoList(TempAllObjWithCaption); <=====================
Codeunit<DimensionManagement>.PROCEDURE<OnAfterValidateShortcutDimValues>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<ValidateShortcutDimValues>
    Code lines:
    ...
      TempDimSetEntry."Dimension Value ID" := DimVal."Dimension Value ID";
      IF TempDimSetEntry.INSERT THEN;
    END;
    DimSetID := GetDimensionSetID(TempDimSetEntry);
    
    OnAfterValidateShortcutDimValues(FieldNumber,ShortcutDimCode,DimSetID); <=====================
Codeunit<DimensionManagement>.PROCEDURE<OnBeforeCheckDimValuePosting>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<CheckDimValuePosting>
    Code lines:
    IsChecked := FALSE;
    IsHandled := FALSE;
    OnBeforeCheckDimValuePosting(TableID,No,DimSetID,IsChecked,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(IsChecked);
    
    IF NOT CheckBlockedDimAndValues(DimSetID) THEN
      IF NOT IsCollectErrorsMode THEN
        EXIT(FALSE);
    
    ...
Codeunit<DimensionManagement>.PROCEDURE<OnBeforeCheckICDim>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<CheckICDim>
    Code lines:
    Result := FALSE;
    IsHandled := FALSE;
    OnBeforeCheckICDim(ICDimCode,Result,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(Result);
    
    IF ICDim.GET(ICDimCode) THEN BEGIN
      IF ICDim.Blocked THEN BEGIN
        LogError(
          ICDim.RECORDID,ICDim.FIELDNO(Blocked),STRSUBSTNO(Text014,ICDim.TABLECAPTION,ICDimCode),'');
    ...
Codeunit<DimensionManagement>.PROCEDURE<OnBeforeCheckICDimValue>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<CheckICDimValue>
    Code lines:
    Result := FALSE;
    IsHandled := FALSE;
    OnBeforeCheckICDimValue(ICDimCode,ICDimValCode,Result,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(Result);
    
    IF (ICDimCode <> '') AND (ICDimValCode <> '') THEN
      IF ICDimVal.GET(ICDimCode,ICDimValCode) THEN BEGIN
        IF ICDimVal.Blocked THEN BEGIN
          LogError(
    ...
Codeunit<DimensionManagement>.PROCEDURE<OnBeforeCheckValuePosting>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<CheckValuePosting>
    Code lines:
    IsChecked := FALSE;
    IsHandled := FALSE;
    OnBeforeCheckValuePosting(TableID,No,TempDimBuf,IsChecked,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(IsChecked);
    
    DefaultDim.SETFILTER("Value Posting",'<>%1',DefaultDim."Value Posting"::" ");
    NoFilter[2] := '';
    FOR i := 1 TO ARRAYLEN(TableID) DO
      IF (TableID[i] <> 0) AND (No[i] <> '') THEN BEGIN
    ...
Codeunit<DimensionManagement>.PROCEDURE<OnBeforeGetDefaultDimID>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<GetDefaultDimID>
    Code lines:
    OnBeforeGetDefaultDimID(TableID,No,SourceCode,GlobalDim1Code,GlobalDim2Code,InheritFromDimSetID,InheritFromTableNo); <=====================
    
    GetGLSetup;
    IF InheritFromDimSetID > 0 THEN
      GetDimensionSet(TempDimSetEntry0,InheritFromDimSetID);
    IF TempDimSetEntry0.FINDSET THEN
      REPEAT
        TempDimBuf.INIT;
        TempDimBuf."Table ID" := InheritFromTableNo;
        TempDimBuf."Entry No." := 0;
    ...
Codeunit<DimensionManagement>.PROCEDURE<OnBeforeLookupDimValueCode>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<LookupDimValueCode>
    Code lines:
    OnBeforeLookupDimValueCode(FieldNumber,ShortcutDimCode); <=====================
    
    GetGLSetup;
    IF GLSetupShortcutDimCode[FieldNumber] = '' THEN
      ERROR(Text002,GLSetup.TABLECAPTION);
    DimVal.SETRANGE("Dimension Code",GLSetupShortcutDimCode[FieldNumber]);
    DimVal."Dimension Code" := GLSetupShortcutDimCode[FieldNumber];
    DimVal.Code := ShortcutDimCode;
    IF PAGE.RUNMODAL(0,DimVal) = ACTION::LookupOK THEN BEGIN
      CheckDim(DimVal."Dimension Code");
    ...
Codeunit<DimensionManagement>.PROCEDURE<OnBeforeLookupDimValueCodeNoUpdate>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<LookupDimValueCodeNoUpdate>
    Code lines:
    OnBeforeLookupDimValueCodeNoUpdate(FieldNumber); <=====================
    
    GetGLSetup;
    IF GLSetupShortcutDimCode[FieldNumber] = '' THEN
      ERROR(Text002,GLSetup.TABLECAPTION);
    DimVal.SETRANGE("Dimension Code",GLSetupShortcutDimCode[FieldNumber]);
    IF PAGE.RUNMODAL(0,DimVal) = ACTION::LookupOK THEN;
Codeunit<DimensionManagement>.PROCEDURE<OnBeforeValidateDimValueCode>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<ValidateDimValueCode>
    Code lines:
    OnBeforeValidateDimValueCode(FieldNumber,ShortcutDimCode); <=====================
    
    GetGLSetup;
    IF (GLSetupShortcutDimCode[FieldNumber] = '') AND (ShortcutDimCode <> '') THEN
      ERROR(Text002,GLSetup.TABLECAPTION);
    DimVal.SETRANGE("Dimension Code",GLSetupShortcutDimCode[FieldNumber]);
    IF ShortcutDimCode <> '' THEN BEGIN
      DimVal.SETRANGE(Code,ShortcutDimCode);
      IF NOT DimVal.FINDFIRST THEN BEGIN
        DimVal.SETFILTER(Code,STRSUBSTNO('%1*',ShortcutDimCode));
    ...
Codeunit<DimensionManagement>.PROCEDURE<OnCheckDimValueAllowed>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<CheckDimValueAllowed>
    Code lines:
    ...
    IF NOT DimValueAllowed THEN
      DimErr :=
        STRSUBSTNO(
          DimValueMustNotBeErr,DimVal.TABLECAPTION,DimVal."Dimension Code",DimVal.Code,FORMAT(DimVal."Dimension Value Type"))
    ELSE
      OnCheckDimValueAllowed(DimVal,DimValueAllowed,DimErr); <=====================
    
    IF NOT DimValueAllowed THEN
      LogError(DimVal.RECORDID,DimVal.FIELDNO("Dimension Value Type"),DimErr,'');
    EXIT(DimValueAllowed);
Codeunit<DimensionManagement>.PROCEDURE<OnCheckICDimValueAllowed>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<CheckICDimValueAllowed>
    Code lines:
    DimValueAllowed :=
      ICDimVal."Dimension Value Type" IN [ICDimVal."Dimension Value Type"::Standard,ICDimVal."Dimension Value Type"::"Begin-Total"];
    
    OnCheckICDimValueAllowed(ICDimVal,DimValueAllowed); <=====================
    
    EXIT(DimValueAllowed);
Codeunit<DimensionManagement>.PROCEDURE<OnGetDefaultDimOnBeforeCreate>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<GetDefaultDimID>
    Code lines:
    ...
    
    NoFilter[2] := '';
    FOR i := 1 TO ARRAYLEN(TableID) DO
      IF (TableID[i] <> 0) AND (No[i] <> '') THEN BEGIN
        IsHandled := FALSE;
        OnGetDefaultDimOnBeforeCreate( <=====================
          TempDimBuf,TableID[i],No[i],GLSetupShortcutDimCode,GlobalDim1Code,GlobalDim2Code,IsHandled);
        IF NOT IsHandled THEN BEGIN
          DefaultDim.SETRANGE("Table ID",TableID[i]);
          NoFilter[1] := No[i];
    ...
Codeunit<DimensionManagement>.PROCEDURE<OnGetRecDefaultDimID>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<GetRecDefaultDimID>
    Code lines:
    OnGetRecDefaultDimID(RecVariant,CurrFieldNo,TableID,No,SourceCode,InheritFromDimSetID,InheritFromTableNo); <=====================
    DefaultDimID := GetDefaultDimID(TableID,No,SourceCode,GlobalDim1Code,GlobalDim2Code,InheritFromDimSetID,InheritFromTableNo);
    OnAfterGetRecDefaultDimID(
      RecVariant,CurrFieldNo,TableID,No,SourceCode,InheritFromDimSetID,InheritFromTableNo,
      GlobalDim1Code,GlobalDim2Code,DefaultDimID);
    EXIT(DefaultDimID);
Codeunit<DimensionManagement>.PROCEDURE<OnTypeToTableID2>
  Raised in: Codeunit<DimensionManagement>.PROCEDURE<TypeToTableID2>
    Code lines:
    ...
      Type::Item:
        EXIT(DATABASE::Item);
      Type::"G/L Account":
        EXIT(DATABASE::"G/L Account");
      ELSE BEGIN
        OnTypeToTableID2(TableID,Type); <=====================
        EXIT(TableID);
      END;
    END;
Codeunit<TextManagement>.PROCEDURE<OnAfterMakeDateFilter>
  Raised in: Codeunit<TextManagement>.PROCEDURE<MakeDateFilter>
    Code lines:
    IF NOT (DateFilterText = '''''') THEN
      MakeFilterExpression(FilterType::Date,DateFilterText);
    OnAfterMakeDateFilter(DateFilterText); <=====================
    EXIT(0);
Codeunit<TextManagement>.PROCEDURE<OnAfterMakeDateTimeFilter>
  Raised in: Codeunit<TextManagement>.PROCEDURE<MakeDateTimeFilter>
    Code lines:
    FilterText := DateTimeFilterText;
    MakeFilterExpression(FilterType::DateTime,FilterText);
    DateTimeFilterText := COPYSTR(FilterText,1,MAXSTRLEN(DateTimeFilterText));
    OnAfterMakeDateTimeFilter(DateTimeFilterText); <=====================
    EXIT(0);
Codeunit<TextManagement>.PROCEDURE<OnAfterMakeTextFilter>
  Raised in: Codeunit<TextManagement>.PROCEDURE<MakeTextFilter>
    Code lines:
    ...
          BEGIN
            Position := Position + STRLEN(PartOfText);
            GetMyFilterText(TextFilterText,DATABASE::"My Vendor");
          END;
      END;
    OnAfterMakeTextFilter(TextFilterText,Position); <=====================
    EXIT(Position);
Codeunit<TextManagement>.PROCEDURE<OnAfterMakeTimeFilter>
  Raised in: Codeunit<TextManagement>.PROCEDURE<MakeTimeFilter>
    Code lines:
    FilterText := TimeFilterText;
    MakeFilterExpression(FilterType::Time,FilterText);
    TimeFilterText := COPYSTR(FilterText,1,MAXSTRLEN(TimeFilterText));
    OnAfterMakeTimeFilter(TimeFilterText); <=====================
    EXIT(0);
Codeunit<TextManagement>.PROCEDURE<OnBeforeMakeTextFilter>
  Raised in: Codeunit<TextManagement>.PROCEDURE<MakeTextFilter>
    Code lines:
    OnBeforeMakeTextFilter(TextFilterText,Position,HandledByEvent); <=====================
    IF HandledByEvent THEN
      EXIT(Position);
    
    Position := 1;
    Length := STRLEN(TextFilterText);
    ReadCharacter(' ',TextFilterText,Position,Length);
    IF FindText(PartOfText,TextFilterText,Position,Length) THEN
      CASE PartOfText OF
        COPYSTR('ME',1,STRLEN(PartOfText)),COPYSTR(MeText,1,STRLEN(PartOfText)):
    ...
Codeunit<Update Analysis View>.PROCEDURE<OnAfterInitLastEntryNo>
  Raised in: Codeunit<Update Analysis View>.PROCEDURE<UpdateAll>
    Code lines:
    ...
    
    IF AnalysisView2.ISEMPTY THEN
      EXIT;
    
    InitLastEntryNo;
    OnAfterInitLastEntryNo(LastGLEntryNo); <=====================
    
    IF DirectlyFromPosting THEN
      AnalysisView2.SETFILTER("Last Entry No.",'<%1',LastGLEntryNo);
    
    ...
Codeunit<Update Analysis View>.PROCEDURE<OnAfterUpdateAll>
  Raised in: Codeunit<Update Analysis View>.PROCEDURE<UpdateAll>
    Code lines:
    ...
    IF AnalysisView2.FINDSET THEN
      REPEAT
        UpdateOne(AnalysisView2,Which,NOT DirectlyFromPosting AND (AnalysisView2."Last Entry No." < LastGLEntryNo - 1000));
      UNTIL AnalysisView2.NEXT = 0;
    
    OnAfterUpdateAll(Which,DirectlyFromPosting); <=====================
Codeunit<Update Analysis View>.PROCEDURE<OnBeforeUpdateAll>
  Raised in: Codeunit<Update Analysis View>.PROCEDURE<UpdateAll>
    Code lines:
    OnBeforeUpdateAll(Which,DirectlyFromPosting,AnalysisView2); <=====================
    
    AnalysisView2.SETRANGE(Blocked,FALSE);
    IF DirectlyFromPosting THEN
      AnalysisView2.SETRANGE("Update on Posting",TRUE);
    
    IF AnalysisView2.ISEMPTY THEN
      EXIT;
    
    InitLastEntryNo;
    ...
Codeunit<Update Analysis View>.PROCEDURE<OnBeforeUpdateOne>
  Raised in: Codeunit<Update Analysis View>.PROCEDURE<UpdateOne>
    Code lines:
    IsHandled := FALSE;
    OnBeforeUpdateOne(NewAnalysisView,Which,ShowWindow,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    AnalysisView := NewAnalysisView;
    AnalysisView.TESTFIELD(Blocked,FALSE);
    ShowProgressWindow := ShowWindow;
    IF ShowProgressWindow THEN
      InitWindow;
    ...
Codeunit<Update Analysis View>.PROCEDURE<OnUpdateOneOnBeforeUpdateAnalysisView>
  Raised in: Codeunit<Update Analysis View>.PROCEDURE<UpdateOne>
    Code lines:
    ...
        AnalysisView."Last Budget Entry No." := LastBudgetEntryNo;
        Updated := TRUE;
      END;
    END;
    
    OnUpdateOneOnBeforeUpdateAnalysisView(AnalysisView,TempAnalysisViewEntry,Updated); <=====================
    IF Updated THEN BEGIN
      AnalysisView."Last Date Updated" := TODAY;
      AnalysisView.MODIFY;
    END;
    ...
Codeunit<Release Sales Document>.PROCEDURE<OnAfterManualReleaseSalesDoc>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<PerformManualRelease>
    Code lines:
    IF PrepaymentMgt.TestSalesPrepayment(SalesHeader) THEN
      ERROR(UnpostedPrepaymentAmountsErr,SalesHeader."Document Type",SalesHeader."No.");
    
    OnBeforeManualReleaseSalesDoc(SalesHeader,PreviewMode);
    PerformManualCheckAndRelease(SalesHeader);
    OnAfterManualReleaseSalesDoc(SalesHeader,PreviewMode); <=====================
Codeunit<Release Sales Document>.PROCEDURE<OnAfterManualReOpenSalesDoc>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<PerformManualReopen>
    Code lines:
    IF SalesHeader.Status = SalesHeader.Status::"Pending Approval" THEN
      ERROR(Text003);
    
    OnBeforeManualReOpenSalesDoc(SalesHeader,PreviewMode);
    Reopen(SalesHeader);
    OnAfterManualReOpenSalesDoc(SalesHeader,PreviewMode); <=====================
Codeunit<Release Sales Document>.PROCEDURE<OnAfterReleaseATOs>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<Code>
    Code lines:
    ...
      LinesWereModified := LinesWereModified OR CalcAndUpdateVATOnLines(SalesHeader,SalesLine);
    
      OnAfterUpdateSalesDocLines(SalesHeader,LinesWereModified,PreviewMode);
    
      ReleaseATOs(SalesHeader);
      OnAfterReleaseATOs(SalesHeader,SalesLine,PreviewMode); <=====================
    
      MODIFY(TRUE);
    
      IF NotOnlyDropShipment THEN
    ...
Codeunit<Release Sales Document>.PROCEDURE<OnAfterReleaseSalesDoc>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<Code>
    Code lines:
    ...
        EXIT;
    
      IF PrepaymentMgt.TestSalesPrepayment(SalesHeader) AND ("Document Type" = "Document Type"::Order) THEN BEGIN
        Status := Status::"Pending Prepayment";
        MODIFY(TRUE);
        OnAfterReleaseSalesDoc(SalesHeader,PreviewMode,LinesWereModified); <=====================
        EXIT;
      END;
      Status := Status::Released;
    
    ...
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<Code>
    Code lines:
    ...
        EXIT;
    
      IF PrepaymentMgt.TestSalesPrepayment(SalesHeader) AND ("Document Type" = "Document Type"::Order) THEN BEGIN
        Status := Status::"Pending Prepayment";
        MODIFY(TRUE);
        OnAfterReleaseSalesDoc(SalesHeader,PreviewMode,LinesWereModified); <=====================
        EXIT;
      END;
      Status := Status::Released;
    
    ...
Codeunit<Release Sales Document>.PROCEDURE<OnAfterReopenSalesDoc>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<Reopen>
    Code lines:
    ...
      MODIFY(TRUE);
      IF "Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"] THEN
        WhseSalesRelease.Reopen(SalesHeader);
    END;
    
    OnAfterReopenSalesDoc(SalesHeader,PreviewMode); <=====================
Codeunit<Release Sales Document>.PROCEDURE<OnAfterUpdateSalesDocLines>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<Code>
    Code lines:
    ...
      END;
      Status := Status::Released;
    
      LinesWereModified := LinesWereModified OR CalcAndUpdateVATOnLines(SalesHeader,SalesLine);
    
      OnAfterUpdateSalesDocLines(SalesHeader,LinesWereModified,PreviewMode); <=====================
    
      ReleaseATOs(SalesHeader);
      OnAfterReleaseATOs(SalesHeader,SalesLine,PreviewMode);
    
    ...
Codeunit<Release Sales Document>.PROCEDURE<OnBeforeCalcInvDiscount>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<Code>
    Code lines:
    ...
    
      SalesLine.SETRANGE("Drop Shipment",FALSE);
      NotOnlyDropShipment := SalesLine.FINDFIRST;
      SalesLine.RESET;
    
      OnBeforeCalcInvDiscount(SalesHeader,PreviewMode); <=====================
    
      SalesSetup.GET;
      IF SalesSetup."Calc. Inv. Discount" THEN BEGIN
        PostingDate := "Posting Date";
    ...
Codeunit<Release Sales Document>.PROCEDURE<OnBeforeCheckCustomerCreated>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<Code>
    Code lines:
    ...
      OnBeforeReleaseSalesDoc(SalesHeader,PreviewMode);
      IF NOT (PreviewMode OR SkipCheckReleaseRestrictions) THEN
        CheckSalesReleaseRestrictions;
    
      IsHandled := FALSE;
      OnBeforeCheckCustomerCreated(SalesHeader,IsHandled); <=====================
      IF NOT IsHandled THEN
        IF "Document Type" = "Document Type"::Quote THEN
          IF CheckCustomerCreated(TRUE) THEN
            GET("Document Type"::Quote,"No.")
    ...
Codeunit<Release Sales Document>.PROCEDURE<OnBeforeManualReleaseSalesDoc>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<PerformManualRelease>
    Code lines:
    IF PrepaymentMgt.TestSalesPrepayment(SalesHeader) THEN
      ERROR(UnpostedPrepaymentAmountsErr,SalesHeader."Document Type",SalesHeader."No.");
    
    OnBeforeManualReleaseSalesDoc(SalesHeader,PreviewMode); <=====================
    PerformManualCheckAndRelease(SalesHeader);
    OnAfterManualReleaseSalesDoc(SalesHeader,PreviewMode);
Codeunit<Release Sales Document>.PROCEDURE<OnBeforeManualReOpenSalesDoc>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<PerformManualReopen>
    Code lines:
    IF SalesHeader.Status = SalesHeader.Status::"Pending Approval" THEN
      ERROR(Text003);
    
    OnBeforeManualReOpenSalesDoc(SalesHeader,PreviewMode); <=====================
    Reopen(SalesHeader);
    OnAfterManualReOpenSalesDoc(SalesHeader,PreviewMode);
Codeunit<Release Sales Document>.PROCEDURE<OnBeforeModifySalesDoc>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<Code>
    Code lines:
    ...
        IF PostingDate <> "Posting Date" THEN
          VALIDATE("Posting Date",PostingDate);
      END;
    
      IsHandled := FALSE;
      OnBeforeModifySalesDoc(SalesHeader,PreviewMode,IsHandled); <=====================
      IF IsHandled THEN
        EXIT;
    
      IF PrepaymentMgt.TestSalesPrepayment(SalesHeader) AND ("Document Type" = "Document Type"::Order) THEN BEGIN
    ...
Codeunit<Release Sales Document>.PROCEDURE<OnBeforePerformManualRelease>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<PerformManualCheckAndRelease>
    Code lines:
    ...
    
    IF ApprovalsMgmt.IsSalesHeaderPendingApproval(SalesHeader) THEN
      ERROR(Text002);
    
    IsHandled := FALSE;
    OnBeforePerformManualRelease(SalesHeader,PreviewMode,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    CODEUNIT.RUN(CODEUNIT::"Release Sales Document",SalesHeader);
Codeunit<Release Sales Document>.PROCEDURE<OnBeforeReleaseSalesDoc>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<Code>
    Code lines:
    WITH SalesHeader DO BEGIN
      IF Status = Status::Released THEN
        EXIT;
    
      OnBeforeReleaseSalesDoc(SalesHeader,PreviewMode); <=====================
      IF NOT (PreviewMode OR SkipCheckReleaseRestrictions) THEN
        CheckSalesReleaseRestrictions;
    
      IsHandled := FALSE;
      OnBeforeCheckCustomerCreated(SalesHeader,IsHandled);
    ...
Codeunit<Release Sales Document>.PROCEDURE<OnBeforeReopenSalesDoc>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<Reopen>
    Code lines:
    OnBeforeReopenSalesDoc(SalesHeader,PreviewMode); <=====================
    
    WITH SalesHeader DO BEGIN
      IF Status = Status::Open THEN
        EXIT;
      Status := Status::Open;
    
      IF "Document Type" <> "Document Type"::Order THEN
        ReopenATOs(SalesHeader);
    
    ...
Codeunit<Release Sales Document>.PROCEDURE<OnBeforeSalesLineFind>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<Code>
    Code lines:
    ...
    
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER(Type,'>0');
      SalesLine.SETFILTER(Quantity,'<>0');
      OnBeforeSalesLineFind(SalesLine,SalesHeader); <=====================
      IF NOT SalesLine.FIND('-') THEN
        ERROR(Text001,"Document Type","No.");
      InvtSetup.GET;
      IF InvtSetup."Location Mandatory" THEN BEGIN
    ...
Codeunit<Release Sales Document>.PROCEDURE<OnCodeOnAfterCheck>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<Code>
    Code lines:
    ...
              SalesLine.TESTFIELD("Location Code");
          UNTIL SalesLine.NEXT = 0;
        SalesLine.SETFILTER(Type,'>0');
      END;
    
      OnCodeOnAfterCheck(SalesHeader,SalesLine,LinesWereModified); <=====================
    
      SalesLine.SETRANGE("Drop Shipment",FALSE);
      NotOnlyDropShipment := SalesLine.FINDFIRST;
      SalesLine.RESET;
    ...
Codeunit<Release Sales Document>.PROCEDURE<OnReopenOnBeforeSalesHeaderModify>
  Raised in: Codeunit<Release Sales Document>.PROCEDURE<Reopen>
    Code lines:
    ...
      Status := Status::Open;
    
      IF "Document Type" <> "Document Type"::Order THEN
        ReopenATOs(SalesHeader);
    
      OnReopenOnBeforeSalesHeaderModify(SalesHeader); <=====================
      MODIFY(TRUE);
      IF "Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"] THEN
        WhseSalesRelease.Reopen(SalesHeader);
    END;
    ...
Codeunit<Release Purchase Document>.PROCEDURE<OnAfterManualReleasePurchaseDoc>
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<PerformManualRelease>
    Code lines:
    IF PrepaymentMgt.TestPurchasePrepayment(PurchHeader) THEN
      ERROR(UnpostedPrepaymentAmountsErr,PurchHeader."Document Type",PurchHeader."No.");
    
    OnBeforeManualReleasePurchaseDoc(PurchHeader,PreviewMode);
    PerformManualCheckAndRelease(PurchHeader);
    OnAfterManualReleasePurchaseDoc(PurchHeader,PreviewMode); <=====================
Codeunit<Release Purchase Document>.PROCEDURE<OnAfterManualReopenPurchaseDoc>
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<PerformManualReopen>
    Code lines:
    IF PurchHeader.Status = PurchHeader.Status::"Pending Approval" THEN
      ERROR(Text003);
    
    OnBeforeManualReopenPurchaseDoc(PurchHeader,PreviewMode);
    Reopen(PurchHeader);
    OnAfterManualReopenPurchaseDoc(PurchHeader,PreviewMode); <=====================
Codeunit<Release Purchase Document>.PROCEDURE<OnAfterReleasePurchaseDoc>
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<Code>
    Code lines:
    ...
        EXIT;
    
      IF PrepaymentMgt.TestPurchasePrepayment(PurchaseHeader) AND ("Document Type" = "Document Type"::Order) THEN BEGIN
        Status := Status::"Pending Prepayment";
        MODIFY(TRUE);
        OnAfterReleasePurchaseDoc(PurchaseHeader,PreviewMode,LinesWereModified); <=====================
        EXIT;
      END;
      Status := Status::Released;
    
    ...
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<Code>
    Code lines:
    ...
        EXIT;
    
      IF PrepaymentMgt.TestPurchasePrepayment(PurchaseHeader) AND ("Document Type" = "Document Type"::Order) THEN BEGIN
        Status := Status::"Pending Prepayment";
        MODIFY(TRUE);
        OnAfterReleasePurchaseDoc(PurchaseHeader,PreviewMode,LinesWereModified); <=====================
        EXIT;
      END;
      Status := Status::Released;
    
    ...
Codeunit<Release Purchase Document>.PROCEDURE<OnAfterReopenPurchaseDoc>
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<Reopen>
    Code lines:
    ...
      Status := Status::Open;
    
      MODIFY(TRUE);
    END;
    
    OnAfterReopenPurchaseDoc(PurchHeader,PreviewMode); <=====================
Codeunit<Release Purchase Document>.PROCEDURE<OnBeforeCalcInvDiscount>
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<Code>
    Code lines:
    ...
    
      PurchLine.SETRANGE("Drop Shipment",FALSE);
      NotOnlyDropShipment := PurchLine.FIND('-');
      PurchLine.RESET;
    
      OnBeforeCalcInvDiscount(PurchaseHeader,PreviewMode); <=====================
    
      PurchSetup.GET;
      IF PurchSetup."Calc. Inv. Discount" THEN BEGIN
        PostingDate := "Posting Date";
    ...
Codeunit<Release Purchase Document>.PROCEDURE<OnBeforeManualReleasePurchaseDoc>
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<PerformManualRelease>
    Code lines:
    IF PrepaymentMgt.TestPurchasePrepayment(PurchHeader) THEN
      ERROR(UnpostedPrepaymentAmountsErr,PurchHeader."Document Type",PurchHeader."No.");
    
    OnBeforeManualReleasePurchaseDoc(PurchHeader,PreviewMode); <=====================
    PerformManualCheckAndRelease(PurchHeader);
    OnAfterManualReleasePurchaseDoc(PurchHeader,PreviewMode);
Codeunit<Release Purchase Document>.PROCEDURE<OnBeforeManualReopenPurchaseDoc>
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<PerformManualReopen>
    Code lines:
    IF PurchHeader.Status = PurchHeader.Status::"Pending Approval" THEN
      ERROR(Text003);
    
    OnBeforeManualReopenPurchaseDoc(PurchHeader,PreviewMode); <=====================
    Reopen(PurchHeader);
    OnAfterManualReopenPurchaseDoc(PurchHeader,PreviewMode);
Codeunit<Release Purchase Document>.PROCEDURE<OnBeforeModifyPurchDoc>
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<Code>
    Code lines:
    ...
        IF PostingDate <> "Posting Date" THEN
          VALIDATE("Posting Date",PostingDate);
      END;
    
      IsHandled := FALSE;
      OnBeforeModifyPurchDoc(PurchaseHeader,PreviewMode,IsHandled); <=====================
      IF IsHandled THEN
        EXIT;
    
      IF PrepaymentMgt.TestPurchasePrepayment(PurchaseHeader) AND ("Document Type" = "Document Type"::Order) THEN BEGIN
    ...
Codeunit<Release Purchase Document>.PROCEDURE<OnBeforePerformManualRelease>
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<PerformManualCheckAndRelease>
    Code lines:
    ...
    
    IF ApprovalsMgmt.IsPurchaseHeaderPendingApproval(PurchHeader) THEN
      ERROR(Text002);
    
    IsHandled := FALSE;
    OnBeforePerformManualRelease(PurchHeader,PreviewMode,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    CODEUNIT.RUN(CODEUNIT::"Release Purchase Document",PurchHeader);
Codeunit<Release Purchase Document>.PROCEDURE<OnBeforeReleasePurchaseDoc>
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<Code>
    Code lines:
    WITH PurchaseHeader DO BEGIN
      IF Status = Status::Released THEN
        EXIT;
    
      OnBeforeReleasePurchaseDoc(PurchaseHeader,PreviewMode); <=====================
      IF NOT (PreviewMode OR SkipCheckReleaseRestrictions) THEN
        CheckPurchaseReleaseRestrictions;
    
      TESTFIELD("Buy-from Vendor No.");
    
    ...
Codeunit<Release Purchase Document>.PROCEDURE<OnBeforeReopenPurchaseDoc>
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<Reopen>
    Code lines:
    OnBeforeReopenPurchaseDoc(PurchHeader,PreviewMode); <=====================
    
    WITH PurchHeader DO BEGIN
      IF Status = Status::Open THEN
        EXIT;
      IF "Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"] THEN
        WhsePurchRelease.Reopen(PurchHeader);
      Status := Status::Open;
    
      MODIFY(TRUE);
    ...
Codeunit<Release Purchase Document>.PROCEDURE<OnCodeOnAfterCheck>
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<Code>
    Code lines:
    ...
              PurchLine.TESTFIELD("Location Code");
          UNTIL PurchLine.NEXT = 0;
        PurchLine.SETFILTER(Type,'>0');
      END;
    
      OnCodeOnAfterCheck(PurchaseHeader,PurchLine,LinesWereModified); <=====================
    
      PurchLine.SETRANGE("Drop Shipment",FALSE);
      NotOnlyDropShipment := PurchLine.FIND('-');
      PurchLine.RESET;
    ...
Codeunit<Release Purchase Document>.PROCEDURE<OnCodeOnBeforeModifyHeader>
  Raised in: Codeunit<Release Purchase Document>.PROCEDURE<Code>
    Code lines:
    ...
      END;
      Status := Status::Released;
    
      LinesWereModified := LinesWereModified OR CalcAndUpdateVATOnLines(PurchaseHeader,PurchLine);
    
      OnCodeOnBeforeModifyHeader(PurchaseHeader,PurchLine,PreviewMode,LinesWereModified); <=====================
    
      MODIFY(TRUE);
    
      IF NotOnlyDropShipment THEN
    ...
Codeunit<Release Service Document>.PROCEDURE<OnAfterPerformManualRelease>
  Raised in: Codeunit<Release Service Document>.PROCEDURE<PerformManualRelease>
    Code lines:
    OnBeforePerformManualRelease(ServHeader);
    
    CODEUNIT.RUN(CODEUNIT::"Release Service Document",ServHeader);
    
    OnAfterPerformManualRelease(ServHeader); <=====================
Codeunit<Release Service Document>.PROCEDURE<OnAfterReleaseServiceDoc>
  Raised in: Codeunit<Release Service Document>.PROCEDURE<Code>
    Code lines:
    ...
      MODIFY(TRUE);
    
      IF "Document Type" = "Document Type"::Order THEN
        WhseServiceRelease.Release(ServiceHeader);
    
      OnAfterReleaseServiceDoc(ServiceHeader); <=====================
    END;
Codeunit<Release Service Document>.PROCEDURE<OnAfterReopenServiceDoc>
  Raised in: Codeunit<Release Service Document>.PROCEDURE<Reopen>
    Code lines:
    ...
      OnBeforeReopenServiceDoc(ServHeader);
      VALIDATE("Release Status","Release Status"::Open);
      MODIFY(TRUE);
      IF "Document Type" IN ["Document Type"::Order] THEN
        WhseServiceRelease.Reopen(ServHeader);
      OnAfterReopenServiceDoc(ServHeader); <=====================
    END;
Codeunit<Release Service Document>.PROCEDURE<OnBeforePerformManualRelease>
  Raised in: Codeunit<Release Service Document>.PROCEDURE<PerformManualRelease>
    Code lines:
    OnBeforePerformManualRelease(ServHeader); <=====================
    
    CODEUNIT.RUN(CODEUNIT::"Release Service Document",ServHeader);
    
    OnAfterPerformManualRelease(ServHeader);
Codeunit<Release Service Document>.PROCEDURE<OnBeforeReleaseServiceDoc>
  Raised in: Codeunit<Release Service Document>.PROCEDURE<Code>
    Code lines:
    WITH ServiceHeader DO BEGIN
      IF "Release Status" = "Release Status"::"Released to Ship" THEN
        EXIT;
    
      OnBeforeReleaseServiceDoc(ServiceHeader); <=====================
    
      IF "Document Type" = "Document Type"::Quote THEN
        TESTFIELD("Bill-to Customer No.");
      ServLine.SETRANGE("Document Type","Document Type");
      ServLine.SETRANGE("Document No.","No.");
    ...
Codeunit<Release Service Document>.PROCEDURE<OnBeforeReopenServiceDoc>
  Raised in: Codeunit<Release Service Document>.PROCEDURE<Reopen>
    Code lines:
    WITH ServHeader DO BEGIN
      IF "Release Status" = "Release Status"::Open THEN
        EXIT;
    
      OnBeforeReopenServiceDoc(ServHeader); <=====================
      VALIDATE("Release Status","Release Status"::Open);
      MODIFY(TRUE);
      IF "Document Type" IN ["Document Type"::Order] THEN
        WhseServiceRelease.Reopen(ServHeader);
      OnAfterReopenServiceDoc(ServHeader);
Codeunit<Release Service Document>.PROCEDURE<OnCodeOnAfterCheck>
  Raised in: Codeunit<Release Service Document>.PROCEDURE<Code>
    Code lines:
    ...
            ServLine.TESTFIELD("Location Code");
          UNTIL ServLine.NEXT = 0;
        ServLine.SETFILTER(Type,'<>%1',ServLine.Type::" ");
      END;
    
      OnCodeOnAfterCheck(ServiceHeader,ServLine); <=====================
    
      ServLine.RESET;
      VALIDATE("Release Status","Release Status"::"Released to Ship");
      ServLine.SetServHeader(ServiceHeader);
    ...
Codeunit<User Management>.PROCEDURE<OnAfterRenameRecord>
  Raised in: Codeunit<User Management>.PROCEDURE<RenameRecord>
    Code lines:
    ...
            MyTimeSheets.CHANGECOMPANY(Company);
            RecRef.SETTABLE(MyTimeSheets);
            MyTimeSheets.RENAME(UserName,MyTimeSheets."Time Sheet No.");
          END;
      END;
    OnAfterRenameRecord(RecRef,TableNo,NumberOfPrimaryKeyFields,UserName,Company); <=====================
Codeunit<User Management>.PROCEDURE<OnAfterRenameUser>
  Raised in: Codeunit<User Management>.PROCEDURE<RenameUser>
    Code lines:
    ...
            RecRef.CLOSE;
          END;
        UNTIL Company.NEXT = 0;
      UNTIL Field.NEXT = 0;
    
    OnAfterRenameUser(OldUserName,NewUserName); <=====================
Codeunit<User Management>.PROCEDURE<OnBeforeRenameUser>
  Raised in: Codeunit<User Management>.PROCEDURE<RenameUser>
    Code lines:
    OnBeforeRenameUser(OldUserName,NewUserName); <=====================
    
    Field.SETFILTER(ObsoleteState,'<>%1',Field.ObsoleteState::Removed);
    Field.SETRANGE(RelationTableNo,DATABASE::User);
    Field.SETRANGE(RelationFieldNo,User.FIELDNO("User Name"));
    Field.SETFILTER(Type,'%1|%2',Field.Type::Code,Field.Type::Text);
    IF Field.FINDSET THEN
      REPEAT
        Company.FINDSET;
        REPEAT
    ...
Codeunit<User Management>.PROCEDURE<OnRenameUserOnBeforeProcessField>
  Raised in: Codeunit<User Management>.PROCEDURE<RenameUser>
    Code lines:
    ...
    IF Field.FINDSET THEN
      REPEAT
        Company.FINDSET;
        REPEAT
          IsHandled := FALSE;
          OnRenameUserOnBeforeProcessField(Field.TableNo,Field."No.",OldUserName,NewUserName,IsHandled); <=====================
          IF NOT IsHandled THEN BEGIN
            RecRef.OPEN(Field.TableNo,FALSE,Company.Name);
            IF RecRef.READPERMISSION THEN BEGIN
              FieldRef := RecRef.FIELD(Field."No.");
    ...
Codeunit<File Management>.PROCEDURE<OnAfterGetToFilterTextSetOutExt>
  Raised in: Codeunit<File Management>.PROCEDURE<GetToFilterText>
    Code lines:
    ...
        OutExt := RDLFileTypeTok;
      'RDLC':
        OutExt := RDLFileTypeTok;
    END;
    
    OnAfterGetToFilterTextSetOutExt(FileName,OutExt); <=====================
    
    IF OutExt = '' THEN
      EXIT(AllFilesDescriptionTxt);
    EXIT(OutExt + '|' + AllFilesDescriptionTxt);  // Also give the option of the general selection
Codeunit<File Management>.PROCEDURE<OnBeforeDownloadHandler>
  Raised in: Codeunit<File Management>.PROCEDURE<DownloadHandler>
    Code lines:
    OnBeforeDownloadHandler(ToFolder,ToFile,FromFile); <=====================
    
    CLEARLASTERROR;
    Downloaded := DOWNLOAD(FromFile,DialogTitle,ToFolder,ToFilter,ToFile);
    IF NOT Downloaded THEN
      IF GETLASTERRORTEXT <> '' THEN
        ERROR('%1',GETLASTERRORTEXT);
    EXIT(Downloaded);
Codeunit<CaptionManagement>.PROCEDURE<OnAfterCaptionClassTranslate>
  Raised in: Codeunit<CaptionManagement>.PROCEDURE<DoResolveCaptionClass>
    Code lines:
    Translation := COPYSTR(ResolveCaptionClass(Language,CaptionExpr),1,MAXSTRLEN(Translation));
    OnAfterCaptionClassTranslate(Language,CaptionExpr,Translation); <=====================
Codeunit<CaptionManagement>.PROCEDURE<OnResolveCaptionClass>
  Raised in: Codeunit<CaptionManagement>.PROCEDURE<ResolveCaptionClass>
    Code lines:
    // <summary>
    // Resolves a given CaptionClass expression and a language id into a caption.
    // The function either resolves the CaptionClass expression or emits OnResolveCaptionClass event. <=====================
    // </summary>
    // <param name="Language">The current language id </param>
    // <param name="CaptionClassExpr">The CaptionClass expression to be resolved.
    // Usually in the following format: <Caption Area>,<Caption Expression></param>
    // <returns>The resolved caption or the original CaptionClass expression if the resolution was unsuccessful.</returns>
    
    IF SplitCaptionClassExpr(CaptionClassExpr,CaptionArea,CaptionExpr) THEN
    ...
Codeunit<Change Log Management>.PROCEDURE<OnAfterIsAlwaysLoggedTable>
  Raised in: Codeunit<Change Log Management>.PROCEDURE<IsAlwaysLoggedTable>
    Code lines:
    ...
       DATABASE::Plan,
       DATABASE::"User Plan",
       DATABASE::"Plan Permission Set",
       DATABASE::"User Group Plan"];
    
    OnAfterIsAlwaysLoggedTable(TableID,AlwaysLogTable); <=====================
Codeunit<Payment Tolerance Management>.PROCEDURE<OnAfterCalcMaxPmtTolerance>
  Raised in: Codeunit<Payment Tolerance Management>.PROCEDURE<CalcMaxPmtTolerance>
    Code lines:
    ...
        ROUND(PaymentTolerancePct * PaymentAmount / 100,AmountRoundingPrecision);
    
    IF ABS(MaxPaymentTolerance) > ABS(Amount) THEN
      MaxPaymentTolerance := Amount;
    
    OnAfterCalcMaxPmtTolerance(DocumentType,CurrencyCode,Amount,AmountLCY,Sign,MaxPaymentTolerance); <=====================
Codeunit<Payment Tolerance Management>.PROCEDURE<OnBeforeCalcMaxPmtTolerance>
  Raised in: Codeunit<Payment Tolerance Management>.PROCEDURE<CalcMaxPmtTolerance>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCalcMaxPmtTolerance(DocumentType,CurrencyCode,Amount,AmountLCY,Sign,MaxPaymentTolerance,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF CurrencyCode = '' THEN BEGIN
      GLSetup.GET;
      MaxPaymentToleranceAmount := GLSetup."Max. Payment Tolerance Amount";
      PaymentTolerancePct := GLSetup."Payment Tolerance %";
      AmountRoundingPrecision := GLSetup."Amount Rounding Precision";
    ...
Codeunit<Payment Tolerance Management>.PROCEDURE<OnBeforeCalcRemainingPmtDisc>
  Raised in: Codeunit<Payment Tolerance Management>.PROCEDURE<CalcRemainingPmtDisc>
    Code lines:
    OnBeforeCalcRemainingPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,GLSetup,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    IF ABS(NewCVLedgEntryBuf."Max. Payment Tolerance") > ABS(NewCVLedgEntryBuf."Remaining Amount") THEN
      NewCVLedgEntryBuf."Max. Payment Tolerance" := NewCVLedgEntryBuf."Remaining Amount";
    IF (((NewCVLedgEntryBuf."Document Type" IN [NewCVLedgEntryBuf."Document Type"::"Credit Memo",
                                                NewCVLedgEntryBuf."Document Type"::Invoice]) AND
         (OldCVLedgEntryBuf."Document Type" IN [OldCVLedgEntryBuf."Document Type"::Invoice,
                                                OldCVLedgEntryBuf."Document Type"::"Credit Memo"])) AND
    ...
Codeunit<Payment Tolerance Management>.PROCEDURE<OnBeforeCheckCalcPmtDisc>
  Raised in: Codeunit<Payment Tolerance Management>.PROCEDURE<CheckCalcPmtDisc>
    Code lines:
    OnBeforeCheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,CheckFilter,CheckAmount,Handled,Result); <=====================
    IF Handled THEN
      EXIT(Result);
    
    IF ((NewCVLedgEntryBuf."Document Type" IN [NewCVLedgEntryBuf."Document Type"::Refund,
                                               NewCVLedgEntryBuf."Document Type"::Payment]) AND
        (((OldCVLedgEntryBuf2."Document Type" = OldCVLedgEntryBuf2."Document Type"::"Credit Memo") AND
          (OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible" <> 0) AND
          (NewCVLedgEntryBuf."Posting Date" <= OldCVLedgEntryBuf2."Pmt. Discount Date")) OR
         ((OldCVLedgEntryBuf2."Document Type" = OldCVLedgEntryBuf2."Document Type"::Invoice) AND
    ...
Codeunit<Payment Tolerance Management>.PROCEDURE<OnCalcTolCustLedgEntryOnBeforeModify>
  Raised in: Codeunit<Payment Tolerance Management>.PROCEDURE<CalcTolCustLedgEntry>
    Code lines:
    ...
              ROUND(Currency."Payment Tolerance %" * CustLedgEntry.Amount / 100,Currency."Amount Rounding Precision");
        END;
      END;
      IF ABS(CustLedgEntry.Amount) < ABS(CustLedgEntry."Max. Payment Tolerance") THEN
        CustLedgEntry."Max. Payment Tolerance" := CustLedgEntry.Amount;
      OnCalcTolCustLedgEntryOnBeforeModify(CustLedgEntry); <=====================
      CustLedgEntry.MODIFY;
    UNTIL CustLedgEntry.NEXT = 0;
Codeunit<Payment Tolerance Management>.PROCEDURE<OnCalcTolVendLedgEntryOnBeforeModify>
  Raised in: Codeunit<Payment Tolerance Management>.PROCEDURE<CalcTolVendLedgEntry>
    Code lines:
    ...
              ROUND(Currency."Payment Tolerance %" * VendLedgEntry.Amount / 100,Currency."Amount Rounding Precision");
        END;
      END;
      IF ABS(VendLedgEntry.Amount) < ABS(VendLedgEntry."Max. Payment Tolerance") THEN
        VendLedgEntry."Max. Payment Tolerance" := VendLedgEntry.Amount;
      OnCalcTolVendLedgEntryOnBeforeModify(VendLedgEntry); <=====================
      VendLedgEntry.MODIFY;
    UNTIL VendLedgEntry.NEXT = 0;
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterCreatePurchDocument>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreatePurchDocument>
    Code lines:
    ...
            ICDocDim,DATABASE::"IC Inbox Purchase Line","IC Transaction No.","IC Partner Code","Transaction Source","Line No.");
          IF ICDocDim.FIND('-') THEN
            DimMgt.MoveICDocDimtoICDocDim(ICDocDim,ICDocDim2,DATABASE::"Handled IC Inbox Purch. Line","Transaction Source");
        UNTIL NEXT = 0;
    END;
    OnAfterCreatePurchDocument(PurchHeader,ICInboxPurchHeader,HandledICInboxPurchHeader); <=====================
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterCreatePurchLines>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreatePurchLines>
    Code lines:
    ...
        DimMgt.GetCombinedDimensionSetID(DimensionSetIDArr,
          PurchLine."Shortcut Dimension 1 Code",PurchLine."Shortcut Dimension 2 Code");
      DimMgt.UpdateGlobalDimFromDimSetID(PurchLine."Dimension Set ID",PurchLine."Shortcut Dimension 1 Code",
        PurchLine."Shortcut Dimension 2 Code");
    
      OnAfterCreatePurchLines(ICInboxPurchLine,PurchLine); <=====================
      PurchLine.MODIFY;
    END;
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterCreateSalesDocument>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateSalesDocument>
    Code lines:
    ...
          IF ICDocDim.FIND('-') THEN
            DimMgt.MoveICDocDimtoICDocDim(ICDocDim,ICDocDim2,DATABASE::"Handled IC Inbox Sales Line","Transaction Source");
        UNTIL NEXT = 0;
    END;
    
    OnAfterCreateSalesDocument(SalesHeader,ICInboxSalesHeader,HandledICInboxSalesHeader); <=====================
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterCreateSalesLines>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateSalesLines>
    Code lines:
    ...
      SalesLine."Dimension Set ID" :=
        DimMgt.GetCombinedDimensionSetID(DimensionSetIDArr,
          SalesLine."Shortcut Dimension 1 Code",SalesLine."Shortcut Dimension 2 Code");
      DimMgt.UpdateGlobalDimFromDimSetID(SalesLine."Dimension Set ID",SalesLine."Shortcut Dimension 1 Code",
        SalesLine."Shortcut Dimension 2 Code");
      OnAfterCreateSalesLines(ICInboxSalesLine,SalesLine); <=====================
      SalesLine.MODIFY;
    END;
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterForwardToOutBoxPurchDoc>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<ForwardToOutBox>
    Code lines:
    ...
                  IF ICDocDim.FIND('-') THEN
                    DimMgt.MoveICDocDimtoICDocDim(
                      ICDocDim,ICDocDim2,DATABASE::"Handled IC Inbox Purch. Line",InboxPurchLine."Transaction Source");
                UNTIL InboxPurchLine.NEXT = 0;
            END;
            OnAfterForwardToOutBoxPurchDoc(InboxTransaction,OutboxTransaction); <=====================
          END;
      END;
      InsertICCommentLinesAsRejectedOutboxTransaction(InboxTransaction);
    END;
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterForwardToOutBoxSalesDoc>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<ForwardToOutBox>
    Code lines:
    ...
                  IF ICDocDim.FIND('-') THEN
                    DimMgt.MoveICDocDimtoICDocDim(
                      ICDocDim,ICDocDim2,DATABASE::"Handled IC Inbox Sales Line",InboxSalesLine."Transaction Source");
                UNTIL InboxSalesLine.NEXT = 0;
            END;
            OnAfterForwardToOutBoxSalesDoc(InboxTransaction,OutboxTransaction); <=====================
          END;
        "Source Type"::"Purchase Document":
          BEGIN
            IF InboxPurchHdr.GET("Transaction No.","IC Partner Code","Transaction Source") THEN BEGIN
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterHandledICOutboxPurchHdrInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<MoveOutboxTransToHandledOutbox>
    Code lines:
    ...
    IF ICOutboxPurchHdr.FIND('-') THEN
      REPEAT
        HandledICOutboxPurchHdr.INIT;
        HandledICOutboxPurchHdr.TRANSFERFIELDS(ICOutboxPurchHdr,TRUE);
        HandledICOutboxPurchHdr.INSERT;
        OnAfterHandledICOutboxPurchHdrInsert(HandledICOutboxPurchHdr,ICOutboxPurchHdr); <=====================
    
        MoveICDocDimToHandled(
          DATABASE::"IC Outbox Purchase Header",DATABASE::"Handled IC Outbox Purch. Hdr",ICOutboxPurchHdr."IC Transaction No.",
          ICOutboxPurchHdr."IC Partner Code",ICOutboxPurchHdr."Transaction Source",0);
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterHandledICOutboxSalesHdrInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<MoveOutboxTransToHandledOutbox>
    Code lines:
    ...
    IF ICOutboxSalesHdr.FIND('-') THEN
      REPEAT
        HandledICOutboxSalesHdr.INIT;
        HandledICOutboxSalesHdr.TRANSFERFIELDS(ICOutboxSalesHdr,TRUE);
        HandledICOutboxSalesHdr.INSERT;
        OnAfterHandledICOutboxSalesHdrInsert(HandledICOutboxSalesHdr,ICOutboxSalesHdr); <=====================
        MoveICDocDimToHandled(
          DATABASE::"IC Outbox Sales Header",DATABASE::"Handled IC Outbox Sales Header",ICOutboxSalesHdr."IC Transaction No.",
          ICOutboxSalesHdr."IC Partner Code",ICOutboxSalesHdr."Transaction Source",0);
    
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterICInboxPurchHeaderInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<OutboxSalesHdrToInbox>
    Code lines:
    ...
      "Requested Receipt Date" := ICOutboxSalesHeader."Requested Delivery Date";
      "Promised Receipt Date" := ICOutboxSalesHeader."Promised Delivery Date";
      "Prices Including VAT" := ICOutboxSalesHeader."Prices Including VAT";
      OnBeforeICInboxPurchHeaderInsert(ICInboxPurchHeader,ICOutboxSalesHeader);
      INSERT;
      OnAfterICInboxPurchHeaderInsert(ICInboxPurchHeader,ICOutboxSalesHeader); <=====================
    END;
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterICInboxPurchLineInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<OutboxSalesLineToInbox>
    Code lines:
    ...
      "Receipt Line No." := ICOutboxSalesLine."Shipment Line No.";
      "Return Shipment No." := ICOutboxSalesLine."Return Receipt No.";
      "Return Shipment Line No." := ICOutboxSalesLine."Return Receipt Line No.";
      OnBeforeICInboxPurchLineInsert(ICInboxPurchLine,ICOutboxSalesLine);
      INSERT;
      OnAfterICInboxPurchLineInsert(ICInboxPurchLine,ICOutboxSalesLine); <=====================
    END;
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterICInboxSalesHeaderInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<OutboxPurchHdrToInbox>
    Code lines:
    ...
      "Prices Including VAT" := ICOutboxPurchHeader."Prices Including VAT";
      "Requested Delivery Date" := ICOutboxPurchHeader."Requested Receipt Date";
      "Promised Delivery Date" := ICOutboxPurchHeader."Promised Receipt Date";
      OnBeforeICInboxSalesHeaderInsert(ICInboxSalesHeader,ICOutboxPurchHeader);
      INSERT;
      OnAfterICInboxSalesHeaderInsert(ICInboxSalesHeader,ICOutboxPurchHeader); <=====================
    END;
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterICInboxSalesLineInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<OutboxPurchLineToInbox>
    Code lines:
    ...
      "Unit of Measure Code" := ICOutboxPurchLine."Unit of Measure Code";
      "Requested Delivery Date" := ICOutboxPurchLine."Requested Receipt Date";
      "Promised Delivery Date" := ICOutboxPurchLine."Promised Receipt Date";
      OnBeforeICInboxSalesLineInsert(ICInboxSalesLine,ICOutboxPurchLine);
      INSERT;
      OnAfterICInboxSalesLineInsert(ICInboxSalesLine,ICOutboxPurchLine); <=====================
    END;
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterICInboxTransInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<OutboxTransToInbox>
    Code lines:
    ...
        Text004,ICInboxTrans."Transaction No.",ICInboxTrans.FIELDCAPTION("IC Partner Code"),
        ICInboxTrans."IC Partner Code",PartnerHandledICInboxTrans.TABLECAPTION);
    
    OnBeforeICInboxTransInsert(ICInboxTrans,ICOutboxTrans);
    ICInboxTrans.INSERT;
    OnAfterICInboxTransInsert(ICInboxTrans,ICOutboxTrans); <=====================
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterICOutBoxSalesHeaderTransferFields>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxSalesDocTrans>
    Code lines:
    ...
        OutboxTransaction."Transaction Source" := OutboxTransaction."Transaction Source"::"Created by Current Company";
      OnBeforeOutBoxTransactionInsert(OutboxTransaction,SalesHeader);
      OutboxTransaction.INSERT;
    END;
    ICOutBoxSalesHeader.TRANSFERFIELDS(SalesHeader);
    OnAfterICOutBoxSalesHeaderTransferFields(ICOutBoxSalesHeader,SalesHeader); <=====================
    IF OutboxTransaction."Document Type" = OutboxTransaction."Document Type"::Order THEN
      ICOutBoxSalesHeader."Order No." := SalesHeader."No.";
    ICOutBoxSalesHeader."IC Partner Code" := OutboxTransaction."IC Partner Code";
    ICOutBoxSalesHeader."IC Transaction No." := OutboxTransaction."Transaction No.";
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnAfterICOutBoxSalesLineInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxSalesDocTrans>
    Code lines:
    ...
            "IC Partner Reference" := '';
          DimMgt.CopyDocDimtoICDocDim(DATABASE::"IC Outbox Sales Line","IC Transaction No.","IC Partner Code","Transaction Source",
            "Line No.",SalesLine."Dimension Set ID");
          UpdateICOutboxSalesLineReceiptShipment(ICOutBoxSalesLine,ICOutBoxSalesHeader);
          IF INSERT(TRUE) THEN BEGIN
            OnCreateOutboxSalesDocTransOnAfterICOutBoxSalesLineInsert(ICOutBoxSalesLine,SalesLine); <=====================
            LinesCreated := TRUE;
          END;
          OnAfterICOutBoxSalesLineInsert(SalesLine,ICOutBoxSalesLine); <=====================
        UNTIL SalesLine.NEXT = 0;
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeCreateOutboxPurchDocTrans>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxPurchDocTrans>
    Code lines:
    OnBeforeCreateOutboxPurchDocTrans(PurchHeader,Rejection,Post); <=====================
    
    GLSetup.LOCKTABLE;
    GetGLSetup;
    TransactionNo := GLSetup."Last IC Transaction No." + 1;
    GLSetup."Last IC Transaction No." := TransactionNo;
    GLSetup.MODIFY;
    Vendor.GET(PurchHeader."Buy-from Vendor No.");
    Vendor.CheckBlockedVendOnDocs(Vendor,FALSE);
    WITH PurchHeader DO BEGIN
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeCreateOutboxSalesCrMemoTrans>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxSalesCrMemoTrans>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCreateOutboxSalesCrMemoTrans(SalesCrMemoHdr,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    Customer.GET(SalesCrMemoHdr."Bill-to Customer No.");
    ICPartner.GET(Customer."IC Partner Code");
    IF ICPartner."Inbox Type" = ICPartner."Inbox Type"::"No IC Transfer" THEN
      EXIT;
    
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeCreateOutboxSalesInvTrans>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxSalesInvTrans>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCreateOutboxSalesInvTrans(SalesInvHdr,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    Customer.GET(SalesInvHdr."Bill-to Customer No.");
    ICPartner.GET(Customer."IC Partner Code");
    IF ICPartner."Inbox Type" = ICPartner."Inbox Type"::"No IC Transfer" THEN
      EXIT;
    
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeCreateSalesDocument>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateSalesDocument>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCreateSalesDocument(ICInboxSalesHeader,ReplacePostingDate,PostingDate,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH ICInboxSalesHeader DO BEGIN
      SalesHeader.INIT;
      SalesHeader."No." := '';
      SalesHeader."Document Type" := "Document Type";
      SalesHeader.INSERT(TRUE);
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeHandledICInboxSalesLineInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateSalesDocument>
    Code lines:
    ...
      SETRANGE("Transaction Source",ICInboxSalesHeader."Transaction Source");
      IF FIND('-') THEN
        REPEAT
          CreateSalesLines(SalesHeader,ICInboxSalesLine);
          HandledICInboxSalesLine.TRANSFERFIELDS(ICInboxSalesLine);
          OnBeforeHandledICInboxSalesLineInsert(HandledICInboxSalesLine,ICInboxSalesLine); <=====================
          HandledICInboxSalesLine.INSERT;
          DimMgt.SetICDocDimFilters(
            ICDocDim,DATABASE::"IC Inbox Sales Line","IC Transaction No.","IC Partner Code","Transaction Source","Line No.");
          IF ICDocDim.FIND('-') THEN
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeHandledICOutboxPurchLineInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<MoveOutboxTransToHandledOutbox>
    Code lines:
    ...
        ICOutboxPurchLine.SETRANGE("IC Partner Code",ICOutboxPurchHdr."IC Partner Code");
        ICOutboxPurchLine.SETRANGE("Transaction Source",ICOutboxPurchHdr."Transaction Source");
        IF ICOutboxPurchLine.FIND('-') THEN
          REPEAT
            HandledICOutboxPurchLine.TRANSFERFIELDS(ICOutboxPurchLine,TRUE);
            OnBeforeHandledICOutboxPurchLineInsert(HandledICOutboxPurchLine,ICOutboxPurchLine); <=====================
            HandledICOutboxPurchLine.INSERT;
    
            MoveICDocDimToHandled(
              DATABASE::"IC Outbox Purchase Line",DATABASE::"Handled IC Outbox Purch. Line",ICOutboxPurchHdr."IC Transaction No.",
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeHandledICOutboxSalesLineInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<MoveOutboxTransToHandledOutbox>
    Code lines:
    ...
        ICOutboxSalesLine.SETRANGE("IC Partner Code",ICOutboxSalesHdr."IC Partner Code");
        ICOutboxSalesLine.SETRANGE("Transaction Source",ICOutboxSalesHdr."Transaction Source");
        IF ICOutboxSalesLine.FIND('-') THEN
          REPEAT
            HandledICOutboxSalesLine.TRANSFERFIELDS(ICOutboxSalesLine,TRUE);
            OnBeforeHandledICOutboxSalesLineInsert(HandledICOutboxSalesLine,ICOutboxSalesLine); <=====================
            HandledICOutboxSalesLine.INSERT;
    
            MoveICDocDimToHandled(
              DATABASE::"IC Outbox Sales Line",DATABASE::"Handled IC Outbox Sales Line",ICOutboxSalesHdr."IC Transaction No.",
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeHandledInboxTransactionInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateHandledInbox>
    Code lines:
    ...
        IF InboxTransaction."Transaction Source" = InboxTransaction."Transaction Source"::"Created by Partner" THEN
          HandledInboxTransaction."Transaction Source" := HandledInboxTransaction."Transaction Source"::"Created by Partner"
        ELSE
          HandledInboxTransaction."Transaction Source" := HandledInboxTransaction."Transaction Source"::"Returned by Partner";
    END;
    OnBeforeHandledInboxTransactionInsert(HandledInboxTransaction,InboxTransaction); <=====================
    HandledInboxTransaction.INSERT;
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeICInboxPurchHeaderInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<OutboxSalesHdrToInbox>
    Code lines:
    ...
      "Sell-to Customer No." := ICOutboxSalesHeader."Sell-to Customer No.";
      "Expected Receipt Date" := ICOutboxSalesHeader."Requested Delivery Date";
      "Requested Receipt Date" := ICOutboxSalesHeader."Requested Delivery Date";
      "Promised Receipt Date" := ICOutboxSalesHeader."Promised Delivery Date";
      "Prices Including VAT" := ICOutboxSalesHeader."Prices Including VAT";
      OnBeforeICInboxPurchHeaderInsert(ICInboxPurchHeader,ICOutboxSalesHeader); <=====================
      INSERT;
      OnAfterICInboxPurchHeaderInsert(ICInboxPurchHeader,ICOutboxSalesHeader);
    END;
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeICInboxPurchLineInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<OutboxSalesLineToInbox>
    Code lines:
    ...
      "Promised Receipt Date" := ICOutboxSalesLine."Promised Delivery Date";
      "Receipt No." := ICOutboxSalesLine."Shipment No.";
      "Receipt Line No." := ICOutboxSalesLine."Shipment Line No.";
      "Return Shipment No." := ICOutboxSalesLine."Return Receipt No.";
      "Return Shipment Line No." := ICOutboxSalesLine."Return Receipt Line No.";
      OnBeforeICInboxPurchLineInsert(ICInboxPurchLine,ICOutboxSalesLine); <=====================
      INSERT;
      OnAfterICInboxPurchLineInsert(ICInboxPurchLine,ICOutboxSalesLine);
    END;
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeICInboxSalesHeaderInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<OutboxPurchHdrToInbox>
    Code lines:
    ...
      "Sell-to Customer No." := ICPartner."Customer No.";
      "Bill-to Customer No." := ICPartner."Customer No.";
      "Prices Including VAT" := ICOutboxPurchHeader."Prices Including VAT";
      "Requested Delivery Date" := ICOutboxPurchHeader."Requested Receipt Date";
      "Promised Delivery Date" := ICOutboxPurchHeader."Promised Receipt Date";
      OnBeforeICInboxSalesHeaderInsert(ICInboxSalesHeader,ICOutboxPurchHeader); <=====================
      INSERT;
      OnAfterICInboxSalesHeaderInsert(ICInboxSalesHeader,ICOutboxPurchHeader);
    END;
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeICInboxSalesLineInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<OutboxPurchLineToInbox>
    Code lines:
    ...
      "Line Amount" := ICOutboxPurchLine."Line Amount";
      "Line Discount %" := ICOutboxPurchLine."Line Discount %";
      "Unit of Measure Code" := ICOutboxPurchLine."Unit of Measure Code";
      "Requested Delivery Date" := ICOutboxPurchLine."Requested Receipt Date";
      "Promised Delivery Date" := ICOutboxPurchLine."Promised Receipt Date";
      OnBeforeICInboxSalesLineInsert(ICInboxSalesLine,ICOutboxPurchLine); <=====================
      INSERT;
      OnAfterICInboxSalesLineInsert(ICInboxSalesLine,ICOutboxPurchLine);
    END;
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeICInboxTransInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<OutboxTransToInbox>
    Code lines:
    ...
    THEN
      ERROR(
        Text004,ICInboxTrans."Transaction No.",ICInboxTrans.FIELDCAPTION("IC Partner Code"),
        ICInboxTrans."IC Partner Code",PartnerHandledICInboxTrans.TABLECAPTION);
    
    OnBeforeICInboxTransInsert(ICInboxTrans,ICOutboxTrans); <=====================
    ICInboxTrans.INSERT;
    OnAfterICInboxTransInsert(ICInboxTrans,ICOutboxTrans);
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeICOutboxTransactionCreatedPurchDocTrans>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxPurchDocTrans>
    Code lines:
    ...
      IF NOT Post THEN BEGIN
        PurchHeader."IC Status" := PurchHeader."IC Status"::Pending;
        PurchHeader.MODIFY;
      END;
    END;
    OnBeforeICOutboxTransactionCreatedPurchDocTrans(PurchHeader,PurchLine,ICOutBoxPurchHeader,OutboxTransaction,LinesCreated); <=====================
    OnInsertICOutboxPurchDocTransaction(OutboxTransaction);
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeICOutboxTransactionCreatedSalesCrMemoTrans>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxSalesCrMemoTrans>
    Code lines:
    ...
            ICDocDim."Line No." := SalesCrMemoLine."Line No.";
            CreateICDocDimFromPostedDocDim(ICDocDim,SalesCrMemoLine."Dimension Set ID",DATABASE::"IC Outbox Sales Line");
          END;
        UNTIL SalesCrMemoLine.NEXT = 0;
    END;
    OnBeforeICOutboxTransactionCreatedSalesCrMemoTrans(SalesCrMemoHdr,SalesCrMemoLine,ICOutBoxSalesHeader,OutboxTransaction); <=====================
    OnInsertICOutboxSalesCrMemoTransaction(OutboxTransaction);
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeICOutboxTransactionCreatedSalesDocTrans>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxSalesDocTrans>
    Code lines:
    ...
      IF NOT Post THEN BEGIN
        SalesHeader."IC Status" := SalesHeader."IC Status"::Pending;
        SalesHeader.MODIFY;
      END;
    END;
    OnBeforeICOutboxTransactionCreatedSalesDocTrans(SalesHeader,SalesLine,ICOutBoxSalesHeader,OutboxTransaction,LinesCreated); <=====================
    OnInsertICOutboxSalesDocTransaction(OutboxTransaction);
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeICOutboxTransactionCreatedSalesInvTrans>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxSalesInvTrans>
    Code lines:
    ...
            CreateICDocDimFromPostedDocDim(ICDocDim,SalesInvLine."Dimension Set ID",DATABASE::"IC Outbox Sales Line");
          END;
        UNTIL SalesInvLine.NEXT = 0;
    END;
    
    OnBeforeICOutboxTransactionCreatedSalesInvTrans(SalesInvHdr,SalesInvLine,ICOutBoxSalesHeader,OutboxTransaction); <=====================
    OnInsertICOutboxSalesInvTransaction(OutboxTransaction);
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeInboxSalesLineInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<RecreateInboxTransaction>
    Code lines:
    ...
              HandledInboxSalesLine.SETRANGE("IC Partner Code",HandledInboxTransaction2."IC Partner Code");
              HandledInboxSalesLine.SETRANGE("Transaction Source",HandledInboxTransaction2."Transaction Source");
              IF HandledInboxSalesLine.FIND('-') THEN
                REPEAT
                  InboxSalesLine.TRANSFERFIELDS(HandledInboxSalesLine);
                  OnBeforeInboxSalesLineInsert(InboxSalesLine,HandledInboxSalesLine); <=====================
                  InboxSalesLine.INSERT;
    
                  ICDocDim.RESET;
                  DimMgt.SetICDocDimFilters(
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeInsertGenJnlLine>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateJournalLines>
    Code lines:
    ...
        VALIDATE("Pmt. Discount Date",InboxJnlLine."Payment Discount Date");
        Quantity := InboxJnlLine.Quantity;
        "IC Direction" := TempGenJnlLine."IC Direction"::Incoming;
        "IC Partner Transaction No." := InboxJnlLine."Transaction No.";
        "External Document No." := InboxJnlLine."Document No.";
        OnBeforeInsertGenJnlLine(GenJnlLine2,InboxJnlLine); <=====================
        INSERT;
        InOutBoxJnlLineDim.SETRANGE("Table ID",DATABASE::"IC Inbox Jnl. Line");
        InOutBoxJnlLineDim.SETRANGE("Transaction No.",InboxTransaction."Transaction No.");
        InOutBoxJnlLineDim.SETRANGE("Line No.",InboxJnlLine."Line No.");
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnBeforeOutBoxTransactionInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxSalesDocTrans>
    Code lines:
    ...
      OutboxTransaction."Document Date" := "Document Date";
      IF Rejection THEN
        OutboxTransaction."Transaction Source" := OutboxTransaction."Transaction Source"::"Rejected by Current Company"
      ELSE
        OutboxTransaction."Transaction Source" := OutboxTransaction."Transaction Source"::"Created by Current Company";
      OnBeforeOutBoxTransactionInsert(OutboxTransaction,SalesHeader); <=====================
      OutboxTransaction.INSERT;
    END;
    ICOutBoxSalesHeader.TRANSFERFIELDS(SalesHeader);
    OnAfterICOutBoxSalesHeaderTransferFields(ICOutBoxSalesHeader,SalesHeader);
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnCreateOutboxPurchDocTransOnAfterICOutBoxPurchLineInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxPurchDocTrans>
    Code lines:
    ...
            DATABASE::"IC Outbox Purchase Line","IC Transaction No.","IC Partner Code","Transaction Source",
            "Line No.",PurchLine."Dimension Set ID");
          IF PurchLine.Type = PurchLine.Type::" " THEN
            "IC Partner Reference" := '';
          IF INSERT(TRUE) THEN BEGIN
            OnCreateOutboxPurchDocTransOnAfterICOutBoxPurchLineInsert(ICOutBoxPurchLine,PurchLine); <=====================
            LinesCreated := TRUE;
          END;
        UNTIL PurchLine.NEXT = 0;
    END;
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnCreateOutboxSalesCrMemoTransOnBeforeICOutBoxSalesLineInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxSalesCrMemoTrans>
    Code lines:
    ...
            "Transaction Source" := OutboxTransaction."Transaction Source";
            "Currency Code" := ICOutBoxSalesHeader."Currency Code";
            IF SalesCrMemoLine.Type = SalesCrMemoLine.Type::" " THEN
              "IC Partner Reference" := '';
            UpdateICOutboxSalesLineReceiptShipment(ICOutBoxSalesLine,ICOutBoxSalesHeader);
            OnCreateOutboxSalesCrMemoTransOnBeforeICOutBoxSalesLineInsert(ICOutBoxSalesLine,SalesCrMemoLine); <=====================
            INSERT(TRUE);
    
            ICDocDim."Line No." := SalesCrMemoLine."Line No.";
            CreateICDocDimFromPostedDocDim(ICDocDim,SalesCrMemoLine."Dimension Set ID",DATABASE::"IC Outbox Sales Line");
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnCreateOutboxSalesDocTransOnAfterICOutBoxSalesLineInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxSalesDocTrans>
    Code lines:
    ...
            "IC Partner Reference" := '';
          DimMgt.CopyDocDimtoICDocDim(DATABASE::"IC Outbox Sales Line","IC Transaction No.","IC Partner Code","Transaction Source",
            "Line No.",SalesLine."Dimension Set ID");
          UpdateICOutboxSalesLineReceiptShipment(ICOutBoxSalesLine,ICOutBoxSalesHeader);
          IF INSERT(TRUE) THEN BEGIN
            OnCreateOutboxSalesDocTransOnAfterICOutBoxSalesLineInsert(ICOutBoxSalesLine,SalesLine); <=====================
            LinesCreated := TRUE;
          END;
          OnAfterICOutBoxSalesLineInsert(SalesLine,ICOutBoxSalesLine);
        UNTIL SalesLine.NEXT = 0;
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnCreateOutboxSalesInvTransOnBeforeICOutBoxSalesLineInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxSalesInvTrans>
    Code lines:
    ...
                    Item.GET(SalesInvLine."No.");
                    "IC Partner Reference" := Item."Common Item No.";
                  END;
              END;
            UpdateICOutboxSalesLineReceiptShipment(ICOutBoxSalesLine,ICOutBoxSalesHeader);
            OnCreateOutboxSalesInvTransOnBeforeICOutBoxSalesLineInsert(ICOutBoxSalesLine,SalesInvLine); <=====================
            INSERT(TRUE);
    
            ICDocDim."Line No." := SalesInvLine."Line No.";
            CreateICDocDimFromPostedDocDim(ICDocDim,SalesInvLine."Dimension Set ID",DATABASE::"IC Outbox Sales Line");
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnCreatePurchDocumentOnBeforeHandledICInboxPurchLineInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreatePurchDocument>
    Code lines:
    ...
      SETRANGE("Transaction Source",ICInboxPurchHeader."Transaction Source");
      IF FIND('-') THEN
        REPEAT
          CreatePurchLines(PurchHeader,ICInboxPurchLine);
          HandledICInboxPurchLine.TRANSFERFIELDS(ICInboxPurchLine);
          OnCreatePurchDocumentOnBeforeHandledICInboxPurchLineInsert(ICInboxPurchLine,HandledICInboxPurchLine); <=====================
          HandledICInboxPurchLine.INSERT;
    
          DimMgt.SetICDocDimFilters(
            ICDocDim,DATABASE::"IC Inbox Purchase Line","IC Transaction No.","IC Partner Code","Transaction Source","Line No.");
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnForwardToOutBoxOnBeforeHndlInboxSalesLineInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<ForwardToOutBox>
    Code lines:
    ...
                    OutboxSalesLine."Line No.");
                  IF ICDocDim.FIND('-') THEN
                    DimMgt.CopyICDocDimtoICDocDim(
                      ICDocDim,ICDocDim2,DATABASE::"IC Outbox Sales Line",OutboxSalesLine."Transaction Source");
                  HndlInboxSalesLine.TRANSFERFIELDS(InboxSalesLine);
                  OnForwardToOutBoxOnBeforeHndlInboxSalesLineInsert(HndlInboxSalesLine,InboxSalesLine); <=====================
                  HndlInboxSalesLine.INSERT;
    
                  IF ICDocDim.FIND('-') THEN
                    DimMgt.MoveICDocDimtoICDocDim(
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnForwardToOutBoxOnBeforeOutboxTransactionInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<ForwardToOutBox>
    Code lines:
    ...
      OutboxTransaction."Document Type" := "Document Type";
      OutboxTransaction."Document No." := "Document No.";
      OutboxTransaction."Posting Date" := "Posting Date";
      OutboxTransaction."Transaction Source" := OutboxTransaction."Transaction Source"::"Rejected by Current Company";
      OutboxTransaction."Document Date" := "Document Date";
      OnForwardToOutBoxOnBeforeOutboxTransactionInsert(OutboxTransaction,InboxTransaction); <=====================
      OutboxTransaction.INSERT;
      CASE "Source Type" OF
        "Source Type"::Journal:
          BEGIN
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnInsertICOutboxJnlLine>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<InsertOutboxJnlLine>
    Code lines:
    ...
      END;
      DimMgt.CopyJnlLineDimToICJnlDim(
        DATABASE::"IC Outbox Jnl. Line",TransactionNo,"IC Partner Code",
        ICOutboxJnlLine."Transaction Source",ICOutboxJnlLine."Line No.","Dimension Set ID");
      ICOutboxJnlLine.INSERT;
      OnInsertICOutboxJnlLine(ICOutboxJnlLine); <=====================
    END;
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnInsertICOutboxPurchDocTransaction>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxPurchDocTrans>
    Code lines:
    ...
        PurchHeader."IC Status" := PurchHeader."IC Status"::Pending;
        PurchHeader.MODIFY;
      END;
    END;
    OnBeforeICOutboxTransactionCreatedPurchDocTrans(PurchHeader,PurchLine,ICOutBoxPurchHeader,OutboxTransaction,LinesCreated);
    OnInsertICOutboxPurchDocTransaction(OutboxTransaction); <=====================
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnInsertICOutboxSalesCrMemoTransaction>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxSalesCrMemoTrans>
    Code lines:
    ...
            CreateICDocDimFromPostedDocDim(ICDocDim,SalesCrMemoLine."Dimension Set ID",DATABASE::"IC Outbox Sales Line");
          END;
        UNTIL SalesCrMemoLine.NEXT = 0;
    END;
    OnBeforeICOutboxTransactionCreatedSalesCrMemoTrans(SalesCrMemoHdr,SalesCrMemoLine,ICOutBoxSalesHeader,OutboxTransaction);
    OnInsertICOutboxSalesCrMemoTransaction(OutboxTransaction); <=====================
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnInsertICOutboxSalesDocTransaction>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxSalesDocTrans>
    Code lines:
    ...
        SalesHeader."IC Status" := SalesHeader."IC Status"::Pending;
        SalesHeader.MODIFY;
      END;
    END;
    OnBeforeICOutboxTransactionCreatedSalesDocTrans(SalesHeader,SalesLine,ICOutBoxSalesHeader,OutboxTransaction,LinesCreated);
    OnInsertICOutboxSalesDocTransaction(OutboxTransaction); <=====================
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnInsertICOutboxSalesInvTransaction>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxSalesInvTrans>
    Code lines:
    ...
          END;
        UNTIL SalesInvLine.NEXT = 0;
    END;
    
    OnBeforeICOutboxTransactionCreatedSalesInvTrans(SalesInvHdr,SalesInvLine,ICOutBoxSalesHeader,OutboxTransaction);
    OnInsertICOutboxSalesInvTransaction(OutboxTransaction); <=====================
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnInsertICOutboxTransaction>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<CreateOutboxJnlTransaction>
    Code lines:
    ...
        OutboxJnlTransaction."Transaction Source" := OutboxJnlTransaction."Transaction Source"::"Rejected by Current Company"
      ELSE
        OutboxJnlTransaction."Transaction Source" := OutboxJnlTransaction."Transaction Source"::"Created by Current Company";
      OutboxJnlTransaction.INSERT;
    END;
    OnInsertICOutboxTransaction(OutboxJnlTransaction); <=====================
    EXIT(ICTransactionNo);
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnRecreateInboxTransactionOnBeforeDeletePurchHeader>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<RecreateInboxTransaction>
    Code lines:
    ...
                UNTIL HandledInboxPurchLine.NEXT = 0;
            END;
            HandleICComments(ICCommentLine."Table Name"::"Handled IC Inbox Transaction",
              ICCommentLine."Table Name"::"IC Inbox Transaction",HandledInboxTransaction2."Transaction No.",
              HandledInboxTransaction2."IC Partner Code",HandledInboxTransaction2."Transaction Source");
            OnRecreateInboxTransactionOnBeforeDeletePurchHeader(HandledInboxPurchHdr,HandledInboxTransaction2); <=====================
            HandledInboxPurchHdr.DELETE(TRUE);
            HandledInboxTransaction.DELETE(TRUE);
          END;
      END;
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnRecreateInboxTransactionOnBeforeDeleteSalesHeader>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<RecreateInboxTransaction>
    Code lines:
    ...
                UNTIL HandledInboxSalesLine.NEXT = 0;
            END;
            HandleICComments(ICCommentLine."Table Name"::"Handled IC Inbox Transaction",
              ICCommentLine."Table Name"::"IC Inbox Transaction",HandledInboxTransaction2."Transaction No.",
              HandledInboxTransaction2."IC Partner Code",HandledInboxTransaction2."Transaction Source");
            OnRecreateInboxTransactionOnBeforeDeleteSalesHeader(HandledInboxSalesHdr,HandledInboxTransaction2); <=====================
            HandledInboxSalesHdr.DELETE(TRUE);
            HandledInboxTransaction.DELETE(TRUE);
            COMMIT;
          END;
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnRecreateInboxTransactionOnBeforeInboxPurchHdrInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<RecreateInboxTransaction>
    Code lines:
    ...
          BEGIN
            IF HandledInboxPurchHdr.GET(HandledInboxTransaction2."Transaction No.",
                 HandledInboxTransaction2."IC Partner Code",HandledInboxTransaction2."Transaction Source")
            THEN BEGIN
              InboxPurchHdr.TRANSFERFIELDS(HandledInboxPurchHdr);
              OnRecreateInboxTransactionOnBeforeInboxPurchHdrInsert(InboxPurchHdr,HandledInboxPurchHdr); <=====================
              InboxPurchHdr.INSERT;
    
              ICDocDim.RESET;
              DimMgt.SetICDocDimFilters(
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnRecreateInboxTransactionOnBeforeInboxPurchLineInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<RecreateInboxTransaction>
    Code lines:
    ...
              HandledInboxPurchLine.SETRANGE("IC Partner Code",HandledInboxTransaction2."IC Partner Code");
              HandledInboxPurchLine.SETRANGE("Transaction Source",HandledInboxTransaction2."Transaction Source");
              IF HandledInboxPurchLine.FIND('-') THEN
                REPEAT
                  InboxPurchLine.TRANSFERFIELDS(HandledInboxPurchLine);
                  OnRecreateInboxTransactionOnBeforeInboxPurchLineInsert(InboxPurchLine,HandledInboxPurchLine); <=====================
                  InboxPurchLine.INSERT;
    
                  ICDocDim.RESET;
                  DimMgt.SetICDocDimFilters(
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnRecreateInboxTransactionOnBeforeInboxSalesHdrInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<RecreateInboxTransaction>
    Code lines:
    ...
          BEGIN
            IF HandledInboxSalesHdr.GET(HandledInboxTransaction2."Transaction No.",
                 HandledInboxTransaction2."IC Partner Code",HandledInboxTransaction2."Transaction Source")
            THEN BEGIN
              InboxSalesHdr.TRANSFERFIELDS(HandledInboxSalesHdr);
              OnRecreateInboxTransactionOnBeforeInboxSalesHdrInsert(InboxSalesHdr,HandledInboxSalesHdr); <=====================
              InboxSalesHdr.INSERT;
    
              ICDocDim.RESET;
              DimMgt.SetICDocDimFilters(
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnRecreateInboxTransactionOnBeforeInboxTransactionInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<RecreateInboxTransaction>
    Code lines:
    ...
      InboxTransaction."Transaction Source" := InboxTransaction."Transaction Source"::"Created by Partner";
      InboxTransaction."Transaction Source" := HandledInboxTransaction2."Transaction Source";
      InboxTransaction."Document Date" := HandledInboxTransaction2."Document Date";
      InboxTransaction."IC Partner G/L Acc. No." := HandledInboxTransaction2."IC Partner G/L Acc. No.";
      InboxTransaction."Source Line No." := HandledInboxTransaction2."Source Line No.";
      OnRecreateInboxTransactionOnBeforeInboxTransactionInsert(InboxTransaction,HandledInboxTransaction2); <=====================
      InboxTransaction.INSERT;
      CASE InboxTransaction."Source Type" OF
        InboxTransaction."Source Type"::Journal:
          BEGIN
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnRecreateOutboxTransactionOnBeforeDeletePurchHeader>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<RecreateOutboxTransaction>
    Code lines:
    ...
                UNTIL HandledOutboxPurchLine.NEXT = 0;
            END;
            HandleICComments(ICCommentLine."Table Name"::"Handled IC Outbox Transaction",
              ICCommentLine."Table Name"::"IC Outbox Transaction",HandledOutboxTransaction2."Transaction No.",
              HandledOutboxTransaction2."IC Partner Code",HandledOutboxTransaction2."Transaction Source");
            OnRecreateOutboxTransactionOnBeforeDeletePurchHeader(HandledOutboxPurchHdr,HandledOutboxTransaction2); <=====================
            HandledOutboxPurchHdr.DELETE(TRUE);
            HandledOutboxTransaction.DELETE(TRUE);
          END;
      END;
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnRecreateOutboxTransactionOnBeforeDeleteSalesHeader>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<RecreateOutboxTransaction>
    Code lines:
    ...
                UNTIL HandledOutboxSalesLine.NEXT = 0;
            END;
            HandleICComments(ICCommentLine."Table Name"::"Handled IC Outbox Transaction",
              ICCommentLine."Table Name"::"IC Outbox Transaction",HandledOutboxTransaction2."Transaction No.",
              HandledOutboxTransaction2."IC Partner Code",HandledOutboxTransaction2."Transaction Source");
            OnRecreateOutboxTransactionOnBeforeDeleteSalesHeader(HandledOutboxSalesHdr,HandledOutboxTransaction2); <=====================
            HandledOutboxSalesHdr.DELETE(TRUE);
            HandledOutboxTransaction.DELETE(TRUE);
          END;
        OutboxTransaction."Source Type"::"Purchase Document":
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnRecreateOutboxTransactionOnBeforeOutboxPurchHdrInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<RecreateOutboxTransaction>
    Code lines:
    ...
          BEGIN
            IF HandledOutboxPurchHdr.GET(HandledOutboxTransaction2."Transaction No.",
                 HandledOutboxTransaction2."IC Partner Code",HandledOutboxTransaction2."Transaction Source")
            THEN BEGIN
              OutboxPurchHdr.TRANSFERFIELDS(HandledOutboxPurchHdr);
              OnRecreateOutboxTransactionOnBeforeOutboxPurchHdrInsert(OutboxPurchHdr,HandledOutboxPurchHdr); <=====================
              OutboxPurchHdr.INSERT;
    
              ICDocDim.RESET;
              DimMgt.SetICDocDimFilters(
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnRecreateOutboxTransactionOnBeforeOutboxPurchLineInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<RecreateOutboxTransaction>
    Code lines:
    ...
              HandledOutboxPurchLine.SETRANGE("IC Partner Code",HandledOutboxTransaction2."IC Partner Code");
              HandledOutboxPurchLine.SETRANGE("Transaction Source",HandledOutboxTransaction2."Transaction Source");
              IF HandledOutboxPurchLine.FIND('-') THEN
                REPEAT
                  OutboxPurchLine.TRANSFERFIELDS(HandledOutboxPurchLine);
                  OnRecreateOutboxTransactionOnBeforeOutboxPurchLineInsert(OutboxPurchLine,HandledOutboxPurchLine); <=====================
                  OutboxPurchLine.INSERT;
    
                  ICDocDim.RESET;
                  DimMgt.SetICDocDimFilters(
    ...
Codeunit<ICInboxOutboxMgt>.PROCEDURE<OnRecreateOutboxTransactionOnBeforeOutboxTransactionInsert>
  Raised in: Codeunit<ICInboxOutboxMgt>.PROCEDURE<RecreateOutboxTransaction>
    Code lines:
    ...
      OutboxTransaction."Transaction Source" := OutboxTransaction."Transaction Source"::"Created by Current Company";
      OutboxTransaction."Transaction Source" := HandledOutboxTransaction2."Transaction Source";
      OutboxTransaction."Document Date" := HandledOutboxTransaction2."Document Date";
      OutboxTransaction."IC Partner G/L Acc. No." := HandledOutboxTransaction2."IC Partner G/L Acc. No.";
      OutboxTransaction."Source Line No." := HandledOutboxTransaction2."Source Line No.";
      OnRecreateOutboxTransactionOnBeforeOutboxTransactionInsert(OutboxTransaction,HandledOutboxTransaction2); <=====================
      OutboxTransaction.INSERT;
      CASE OutboxTransaction."Source Type" OF
        OutboxTransaction."Source Type"::"Journal Line":
          BEGIN
    ...
Codeunit<IC Outbox Export>.PROCEDURE<OnRunOutboxTransactionsOnBeforeSend>
  Raised in: Codeunit<IC Outbox Export>.PROCEDURE<RunOutboxTransactions>
    Code lines:
    CompanyInfo.GET;
    CopyICOutboxTransaction.COPY(ICOutboxTransaction);
    CopyICOutboxTransaction.SETRANGE("Line Action",
      CopyICOutboxTransaction."Line Action"::"Send to IC Partner");
    UpdateICStatus(CopyICOutboxTransaction);
    OnRunOutboxTransactionsOnBeforeSend(CopyICOutboxTransaction); <=====================
    SendToExternalPartner(CopyICOutboxTransaction);
    SendToInternalPartner(CopyICOutboxTransaction);
    CopyICOutboxTransaction.SETRANGE("Line Action",
      CopyICOutboxTransaction."Line Action"::"Return to Inbox");
    ...
Codeunit<Consolidate>.PROCEDURE<OnBeforeGenJnlPostLine>
  Raised in: Codeunit<Consolidate>.PROCEDURE<GenJnlPostLineFinally>
    Code lines:
    TempGenJnlLine.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date");
    IF TempGenJnlLine.FINDSET THEN
      REPEAT
        Window.UPDATE(3,TempGenJnlLine."Account No.");
        OnBeforeGenJnlPostLine(TempGenJnlLine); <=====================
        GenJnlPostLine.RunWithCheck(TempGenJnlLine);
      UNTIL TempGenJnlLine.NEXT = 0;
Codeunit<Consolidate>.PROCEDURE<OnBeforeInsertGLEntry>
  Raised in: Codeunit<Consolidate>.PROCEDURE<InsertGLEntry>
    Code lines:
    ...
    TempSubsidGLEntry."Posting Date" := NewGLEntry."Posting Date";
    TempSubsidGLEntry."Debit Amount" := NewGLEntry."Debit Amount";
    TempSubsidGLEntry."Credit Amount" := NewGLEntry."Credit Amount";
    TempSubsidGLEntry."Add.-Currency Debit Amount" := NewGLEntry."Add.-Currency Debit Amount";
    TempSubsidGLEntry."Add.-Currency Credit Amount" := NewGLEntry."Add.-Currency Credit Amount";
    OnBeforeInsertGLEntry(TempSubsidGLEntry,NewGLEntry); <=====================
    TempSubsidGLEntry.INSERT;
    EXIT(NextEntryNo);
Codeunit<Acc. Sched. BarChart DrillDown>.PROCEDURE<OnAfterAccSchedManagementSetGLAccColumnFilters>
  Raised in: Codeunit<Acc. Sched. BarChart DrillDown>.<OnRun>
    Code lines:
    ...
            COPYFILTER("Business Unit Filter",GLAcc."Business Unit Filter");
            COPYFILTER("G/L Budget Filter",GLAcc."Budget Filter");
            AccSchedManagement.SetGLAccRowFilters(GLAcc,AccSchedLine);
            OnAfterAccSchedManagementSetGLAccRowFilters(GLAcc,AccSchedLine,ColumnLayout);
            AccSchedManagement.SetGLAccColumnFilters(GLAcc,AccSchedLine,ColumnLayout);
            OnAfterAccSchedManagementSetGLAccColumnFilters(GLAcc,AccSchedLine,ColumnLayout); <=====================
            AccSchedName.GET("Schedule Name");
            IF AccSchedName."Analysis View Name" = '' THEN BEGIN
              COPYFILTER("Dimension 1 Filter",GLAcc."Global Dimension 1 Filter");
              COPYFILTER("Dimension 2 Filter",GLAcc."Global Dimension 2 Filter");
    ...
Codeunit<Acc. Sched. BarChart DrillDown>.PROCEDURE<OnAfterAccSchedManagementSetGLAccRowFilters>
  Raised in: Codeunit<Acc. Sched. BarChart DrillDown>.<OnRun>
    Code lines:
    ...
        ELSE
          IF Totaling <> '' THEN BEGIN
            COPYFILTER("Business Unit Filter",GLAcc."Business Unit Filter");
            COPYFILTER("G/L Budget Filter",GLAcc."Budget Filter");
            AccSchedManagement.SetGLAccRowFilters(GLAcc,AccSchedLine);
            OnAfterAccSchedManagementSetGLAccRowFilters(GLAcc,AccSchedLine,ColumnLayout); <=====================
            AccSchedManagement.SetGLAccColumnFilters(GLAcc,AccSchedLine,ColumnLayout);
            OnAfterAccSchedManagementSetGLAccColumnFilters(GLAcc,AccSchedLine,ColumnLayout);
            AccSchedName.GET("Schedule Name");
            IF AccSchedName."Analysis View Name" = '' THEN BEGIN
    ...
Codeunit<ReportManagement>.PROCEDURE<OnAfterGetPaperTrayForReport>
  Raised in: Codeunit<ReportManagement>.PROCEDURE<GetPaperTrayForReport>
    Code lines:
    OnAfterGetPaperTrayForReport(ReportID,FirstPage,DefaultPage,LastPage) <=====================
Codeunit<ReportManagement>.PROCEDURE<OnAfterGetPrinterName>
  Raised in: Codeunit<ReportManagement>.PROCEDURE<GetPrinterName>
    Code lines:
    ...
        IF NOT PrinterSelection.GET('',ReportID) THEN
          IF NOT PrinterSelection.GET(USERID,0) THEN
            IF PrinterSelection.GET('',0) THEN;
    PrinterName := PrinterSelection."Printer Name";
    
    OnAfterGetPrinterName(ReportID,PrinterName,PrinterSelection); <=====================
Codeunit<ReportManagement>.PROCEDURE<OnAfterHasCustomLayout>
  Raised in: Codeunit<ReportManagement>.PROCEDURE<HasCustomLayout>
    Code lines:
    IF ObjectType <> ObjectType::Report THEN
      ERROR(NotSupportedErr);
    
    LayoutType := ReportLayoutSelection.HasCustomLayout(ObjectID);
    OnAfterHasCustomLayout(ObjectType,ObjectID,LayoutType); <=====================
Codeunit<ReportManagement>.PROCEDURE<OnAfterSubstituteReport>
  Raised in: Codeunit<ReportManagement>.PROCEDURE<SubstituteReport>
    Code lines:
    OnAfterSubstituteReport(ReportId,RunMode,RequestPageXml,RecordRef,NewReportId); <=====================
Codeunit<Prepayment Mgt.>.PROCEDURE<OnBeforeTestPurchPrepayment>
  Raised in: Codeunit<Prepayment Mgt.>.PROCEDURE<TestPurchasePrepayment>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTestPurchPrepayment(PurchaseHeader,TestResult,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(TestResult);
    
    PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
    PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
    PurchaseLine.SETFILTER("Prepmt. Line Amount",'<>%1',0);
    IF PurchaseLine.FINDSET THEN
      REPEAT
    ...
Codeunit<Prepayment Mgt.>.PROCEDURE<OnBeforeTestSalesPrepayment>
  Raised in: Codeunit<Prepayment Mgt.>.PROCEDURE<TestSalesPrepayment>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTestSalesPrepayment(SalesHeader,TestResult,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(TestResult);
    
    SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
    SalesLine.SETRANGE("Document No.",SalesHeader."No.");
    SalesLine.SETFILTER("Prepmt. Line Amount",'<>%1',0);
    IF SalesLine.FINDSET THEN
      REPEAT
    ...
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterCalcVATAmountLines>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<CalcVATAmountLines>
    Code lines:
    ...
    
    VATAmountLine.UpdateLines(
      NewAmount,Currency,SalesHeader."Currency Factor",SalesHeader."Prices Including VAT",
      SalesHeader."VAT Base Discount %",SalesHeader."Tax Area Code",SalesHeader."Tax Liable",SalesHeader."Posting Date");
    
    OnAfterCalcVATAmountLines(SalesHeader,SalesLine,VATAmountLine,DocumentType); <=====================
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterCheckPrepmtDoc>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<CheckPrepmtDoc>
    Code lines:
    ...
      Cust.CheckBlockedCustOnDocs(Cust,PrepmtDocTypeToDocType(DocumentType),FALSE,TRUE);
      IF "Bill-to Customer No." <> "Sell-to Customer No." THEN BEGIN
        Cust.GET("Bill-to Customer No.");
        Cust.CheckBlockedCustOnDocs(Cust,PrepmtDocTypeToDocType(DocumentType),FALSE,TRUE);
      END;
      OnAfterCheckPrepmtDoc(SalesHeader,DocumentType,SuppressCommit); <=====================
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterFillInvLineBuffer>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<FillInvLineBuffer>
    Code lines:
    ...
      "VAT Amount" := SalesLine."Prepmt. Amt. Incl. VAT" - SalesLine."Prepayment Amount";
      "VAT Amount (ACY)" := SalesLine."Prepmt. Amt. Incl. VAT" - SalesLine."Prepayment Amount";
      "VAT Base Before Pmt. Disc." := -SalesLine."Prepayment Amount";
    END;
    
    OnAfterFillInvLineBuffer(PrepmtInvLineBuf,SalesLine); <=====================
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterInsertInvoiceRounding>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<InsertInvoiceRounding>
    Code lines:
    ...
          SalesLine."Prepayment Amount",SalesLine."Line Amount",0);
    
        "VAT Amount" := SalesLine."Amount Including VAT" - SalesLine."Line Amount";
        "VAT Amount (ACY)" := SalesLine."Amount Including VAT" - SalesLine."Line Amount";
      END;
      OnAfterInsertInvoiceRounding(SalesHeader,PrepmtInvLineBuf,TotalPrepmtInvLineBuf,PrevLineNo); <=====================
      EXIT(TRUE);
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterPostBalancingEntry>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<PostBalancingEntry>
    Code lines:
    ...
      "Applies-to Doc. Type" := DocType;
      "Applies-to Doc. No." := DocNo;
    
      OnBeforePostBalancingEntry(GenJnlLine,CustLedgEntry,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit);
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostBalancingEntry(GenJnlLine,CustLedgEntry,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit); <=====================
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterPostCustomerEntry>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<PostCustomerEntry>
    Code lines:
    ...
    
      Correction := (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
    
      OnBeforePostCustomerEntry(GenJnlLine,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit);
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostCustomerEntry(GenJnlLine,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit); <=====================
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterPostPrepayments>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<Code>
    Code lines:
    ...
      GenJnlPostPreview.ThrowError;
    END;
    
    SalesHeader2 := SalesHeader;
    
    OnAfterPostPrepayments(SalesHeader2,DocumentType,SuppressCommit,SalesInvHeader,SalesCrMemoHeader); <=====================
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterPostPrepmtInvLineBuffer>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<PostPrepmtInvLineBuffer>
    Code lines:
    ...
      Correction :=
        (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
    
      OnBeforePostPrepmtInvLineBuffer(GenJnlLine,PrepmtInvLineBuffer,SuppressCommit);
      RunGenJnlPostLine(GenJnlLine);
      OnAfterPostPrepmtInvLineBuffer(GenJnlLine,PrepmtInvLineBuffer,SuppressCommit,GenJnlPostLine); <=====================
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterRoundAmounts>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<RoundAmounts>
    Code lines:
    ...
          "VAT Base Amount" := Amount;
      END;
    
    TotalPrepmtInvLineBufLCY.IncrAmounts(PrepmtInvLineBuf);
    
    OnAfterRoundAmounts(SalesHeader,PrepmtInvLineBuf,TotalPrepmtInvLineBuf,TotalPrepmtInvLineBufLCY); <=====================
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterSalesCrMemoHeaderInsert>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<InsertSalesCrMemoHeader>
    Code lines:
    ...
      SalesCrMemoHeader."Prepayment Order No." := "No.";
      SalesCrMemoHeader.Correction := GLSetup."Mark Cr. Memos as Corrections";
      SalesCrMemoHeader."No. Series" := PostingNoSeriesCode;
      OnBeforeSalesCrMemoHeaderInsert(SalesCrMemoHeader,SalesHeader,SuppressCommit);
      SalesCrMemoHeader.INSERT;
      OnAfterSalesCrMemoHeaderInsert(SalesCrMemoHeader,SalesHeader,SuppressCommit); <=====================
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterSalesCrMemoLineInsert>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<InsertSalesCrMemoLine>
    Code lines:
    ...
      SalesCrMemoLine."VAT Calculation Type" := "VAT Calculation Type";
      SalesCrMemoLine."VAT Base Amount" := "VAT Base Amount";
      SalesCrMemoLine."VAT Identifier" := "VAT Identifier";
      OnBeforeSalesCrMemoLineInsert(SalesCrMemoLine,SalesCrMemoHeader,PrepmtInvLineBuffer,SuppressCommit);
      SalesCrMemoLine.INSERT;
      OnAfterSalesCrMemoLineInsert(SalesCrMemoLine,SalesCrMemoHeader,PrepmtInvLineBuffer,SuppressCommit); <=====================
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterSalesInvHeaderInsert>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<InsertSalesInvHeader>
    Code lines:
    ...
      SalesInvHeader."Prepayment Invoice" := TRUE;
      SalesInvHeader."Prepayment Order No." := "No.";
      SalesInvHeader."No. Series" := PostingNoSeriesCode;
      OnBeforeSalesInvHeaderInsert(SalesInvHeader,SalesHeader,SuppressCommit);
      SalesInvHeader.INSERT;
      OnAfterSalesInvHeaderInsert(SalesInvHeader,SalesHeader,SuppressCommit); <=====================
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterSalesInvLineInsert>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<InsertSalesInvLine>
    Code lines:
    ...
      SalesInvLine."VAT Calculation Type" := "VAT Calculation Type";
      SalesInvLine."VAT Base Amount" := "VAT Base Amount";
      SalesInvLine."VAT Identifier" := "VAT Identifier";
      OnBeforeSalesInvLineInsert(SalesInvLine,SalesInvHeader,PrepmtInvLineBuffer,SuppressCommit);
      SalesInvLine.INSERT;
      OnAfterSalesInvLineInsert(SalesInvLine,SalesInvHeader,PrepmtInvLineBuffer,SuppressCommit); <=====================
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterUpdatePostedSalesDocument>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<UpdatePostedSalesDocument>
    Code lines:
    ...
          SalesCrMemoHeader."Cust. Ledger Entry No." := CustLedgerEntry."Entry No.";
          SalesCrMemoHeader.MODIFY;
        END;
    END;
    
    OnAfterUpdatePostedSalesDocument(DocumentType,DocumentNo,SuppressCommit); <=====================
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnAfterUpdateVATOnLines>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<UpdateVATOnLines>
    Code lines:
    ...
            END;
          END;
        UNTIL NEXT = 0;
    END;
    
    OnAfterUpdateVATOnLines(SalesHeader,SalesLine,VATAmountLine,DocumentType); <=====================
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeCreditMemo>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<CreditMemo>
    Code lines:
    OnBeforeCreditMemo(SalesHeader,Handled); <=====================
    IF NOT Handled THEN
      Code(SalesHeader,1);
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeFillInvLineBuffer>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<FillInvLineBuffer>
    Code lines:
    WITH PrepmtInvLineBuf DO BEGIN
      INIT;
      OnBeforeFillInvLineBuffer(PrepmtInvLineBuf,SalesHeader,SalesLine); <=====================
      "G/L Account No." := GetPrepmtAccNo(SalesLine."Gen. Bus. Posting Group",SalesLine."Gen. Prod. Posting Group");
    
      IF NOT SalesHeader."Compress Prepayment" THEN BEGIN
        "Line No." := SalesLine."Line No.";
        Description := SalesLine.Description;
      END;
    
    ...
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeInvoice>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<Invoice>
    Code lines:
    OnBeforeInvoice(SalesHeader,Handled); <=====================
    IF NOT Handled THEN
      Code(SalesHeader,0);
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforePostBalancingEntry>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<PostBalancingEntry>
    Code lines:
    ...
      Correction := (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
    
      "Applies-to Doc. Type" := DocType;
      "Applies-to Doc. No." := DocNo;
    
      OnBeforePostBalancingEntry(GenJnlLine,CustLedgEntry,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit); <=====================
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostBalancingEntry(GenJnlLine,CustLedgEntry,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit);
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforePostCustomerEntry>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<PostCustomerEntry>
    Code lines:
    ...
      "Sales/Purch. (LCY)" := -TotalPrepmtInvLineBufferLCY.Amount;
      "Profit (LCY)" := -TotalPrepmtInvLineBufferLCY.Amount;
    
      Correction := (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
    
      OnBeforePostCustomerEntry(GenJnlLine,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit); <=====================
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostCustomerEntry(GenJnlLine,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit);
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforePostPrepayments>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<Code>
    Code lines:
    OnBeforePostPrepayments(SalesHeader2,DocumentType,SuppressCommit); <=====================
    
    SalesHeader := SalesHeader2;
    GLSetup.GET;
    SalesSetup.GET;
    WITH SalesHeader DO BEGIN
      CheckPrepmtDoc(SalesHeader,DocumentType);
    
      UpdateDocNos(SalesHeader,DocumentType,GenJnlLineDocNo,PostingNoSeriesCode,ModifyHeader);
    
    ...
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforePostPrepmtInvLineBuffer>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<PostPrepmtInvLineBuffer>
    Code lines:
    ...
      IF NOT PrepmtInvLineBuffer.Adjustment THEN
        "Gen. Posting Type" := "Gen. Posting Type"::Sale;
      Correction :=
        (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
    
      OnBeforePostPrepmtInvLineBuffer(GenJnlLine,PrepmtInvLineBuffer,SuppressCommit); <=====================
      RunGenJnlPostLine(GenJnlLine);
      OnAfterPostPrepmtInvLineBuffer(GenJnlLine,PrepmtInvLineBuffer,SuppressCommit,GenJnlPostLine);
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeSalesCrMemoHeaderInsert>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<InsertSalesCrMemoHeader>
    Code lines:
    ...
      SalesCrMemoHeader."No. Printed" := 0;
      SalesCrMemoHeader."Prepayment Credit Memo" := TRUE;
      SalesCrMemoHeader."Prepayment Order No." := "No.";
      SalesCrMemoHeader.Correction := GLSetup."Mark Cr. Memos as Corrections";
      SalesCrMemoHeader."No. Series" := PostingNoSeriesCode;
      OnBeforeSalesCrMemoHeaderInsert(SalesCrMemoHeader,SalesHeader,SuppressCommit); <=====================
      SalesCrMemoHeader.INSERT;
      OnAfterSalesCrMemoHeaderInsert(SalesCrMemoHeader,SalesHeader,SuppressCommit);
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeSalesCrMemoLineInsert>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<InsertSalesCrMemoLine>
    Code lines:
    ...
      SalesCrMemoLine."VAT Difference" := "VAT Difference";
      SalesCrMemoLine."Amount Including VAT" := "Amount Incl. VAT";
      SalesCrMemoLine."VAT Calculation Type" := "VAT Calculation Type";
      SalesCrMemoLine."VAT Base Amount" := "VAT Base Amount";
      SalesCrMemoLine."VAT Identifier" := "VAT Identifier";
      OnBeforeSalesCrMemoLineInsert(SalesCrMemoLine,SalesCrMemoHeader,PrepmtInvLineBuffer,SuppressCommit); <=====================
      SalesCrMemoLine.INSERT;
      OnAfterSalesCrMemoLineInsert(SalesCrMemoLine,SalesCrMemoHeader,PrepmtInvLineBuffer,SuppressCommit);
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeSalesInvHeaderInsert>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<InsertSalesInvHeader>
    Code lines:
    ...
      SalesInvHeader."User ID" := USERID;
      SalesInvHeader."No. Printed" := 0;
      SalesInvHeader."Prepayment Invoice" := TRUE;
      SalesInvHeader."Prepayment Order No." := "No.";
      SalesInvHeader."No. Series" := PostingNoSeriesCode;
      OnBeforeSalesInvHeaderInsert(SalesInvHeader,SalesHeader,SuppressCommit); <=====================
      SalesInvHeader.INSERT;
      OnAfterSalesInvHeaderInsert(SalesInvHeader,SalesHeader,SuppressCommit);
    END;
Codeunit<Sales-Post Prepayments>.PROCEDURE<OnBeforeSalesInvLineInsert>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<InsertSalesInvLine>
    Code lines:
    ...
      SalesInvLine."VAT Difference" := "VAT Difference";
      SalesInvLine."Amount Including VAT" := "Amount Incl. VAT";
      SalesInvLine."VAT Calculation Type" := "VAT Calculation Type";
      SalesInvLine."VAT Base Amount" := "VAT Base Amount";
      SalesInvLine."VAT Identifier" := "VAT Identifier";
      OnBeforeSalesInvLineInsert(SalesInvLine,SalesInvHeader,PrepmtInvLineBuffer,SuppressCommit); <=====================
      SalesInvLine.INSERT;
      OnAfterSalesInvLineInsert(SalesInvLine,SalesInvHeader,PrepmtInvLineBuffer,SuppressCommit);
    END;
Codeunit<Sales-Post Prepayment (Yes/No)>.PROCEDURE<OnAfterPostPrepmtCrMemoYN>
  Raised in: Codeunit<Sales-Post Prepayment (Yes/No)>.PROCEDURE<PostPrepmtCrMemoYN>
    Code lines:
    ...
    
      IF Print THEN
        GetReport(SalesHeader,1);
    
      COMMIT;
      OnAfterPostPrepmtCrMemoYN(SalesHeader); <=====================
    
      SalesHeader2 := SalesHeader;
    END;
Codeunit<Sales-Post Prepayment (Yes/No)>.PROCEDURE<OnAfterPostPrepmtInvoiceYN>
  Raised in: Codeunit<Sales-Post Prepayment (Yes/No)>.PROCEDURE<PostPrepmtInvoiceYN>
    Code lines:
    ...
    
      IF Print THEN
        GetReport(SalesHeader,0);
    
      COMMIT;
      OnAfterPostPrepmtInvoiceYN(SalesHeader); <=====================
    
      SalesHeader2 := SalesHeader;
    END;
Codeunit<Sales-Post Prepayment (Yes/No)>.PROCEDURE<OnBeforeGetReport>
  Raised in: Codeunit<Sales-Post Prepayment (Yes/No)>.PROCEDURE<GetReport>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetReport(SalesHeader,DocumentType,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH SalesHeader DO
      CASE DocumentType OF
        DocumentType::Invoice:
          BEGIN
            SalesInvHeader."No." := "Last Prepayment No.";
    ...
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterCalcVATAmountLines>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<CalcVATAmountLines>
    Code lines:
    ...
    
    VATAmountLine.UpdateLines(
      NewAmount,Currency,PurchHeader."Currency Factor",PurchHeader."Prices Including VAT",
      PurchHeader."VAT Base Discount %",PurchHeader."Tax Area Code",PurchHeader."Tax Liable",PurchHeader."Posting Date");
    
    OnAfterCalcVATAmountLines(PurchHeader,PurchLine,VATAmountLine,DocumentType); <=====================
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterCheckPrepmtDoc>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<CheckPrepmtDoc>
    Code lines:
    ...
      Vend.CheckBlockedVendOnDocs(Vend,TRUE);
      IF "Pay-to Vendor No." <> "Buy-from Vendor No." THEN BEGIN
        Vend.GET("Pay-to Vendor No.");
        Vend.CheckBlockedVendOnDocs(Vend,TRUE);
      END;
      OnAfterCheckPrepmtDoc(PurchHeader,DocumentType); <=====================
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterFillInvLineBuffer>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<FillInvLineBuffer>
    Code lines:
    ...
      "VAT Amount" := PurchLine."Prepmt. Amt. Incl. VAT" - PurchLine."Prepayment Amount";
      "VAT Amount (ACY)" := PurchLine."Prepmt. Amt. Incl. VAT" - PurchLine."Prepayment Amount";
      "VAT Base Before Pmt. Disc." := PurchLine."Prepayment Amount";
    END;
    
    OnAfterFillInvLineBuffer(PrepmtInvLineBuf,PurchLine,SuppressCommit); <=====================
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterInsertInvoiceRounding>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<InsertInvoiceRounding>
    Code lines:
    ...
        "VAT Amount (ACY)" := PurchLine."Amount Including VAT" - PurchLine."Line Amount";
      END;
      EXIT(TRUE);
    END;
    
    OnAfterInsertInvoiceRounding(PurchHeader,PrepmtInvLineBuf,TotalPrepmtInvLineBuf,PrevLineNo); <=====================
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPostBalancingEntry>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<PostBalancingEntry>
    Code lines:
    ...
      "Applies-to Doc. Type" := DocType;
      "Applies-to Doc. No." := DocNo;
    
      OnBeforePostBalancingEntry(GenJnlLine,VendLedgEntry,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit);
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostBalancingEntry(GenJnlLine,VendLedgEntry,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit); <=====================
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPostPrepayments>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<Code>
    Code lines:
    ...
    IF PreviewMode THEN BEGIN
      Window.CLOSE;
      GenJnlPostPreview.ThrowError;
    END;
    
    OnAfterPostPrepayments(PurchHeader2,DocumentType,SuppressCommit,PurchInvHeader,PurchCrMemoHeader); <=====================
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPostPrepmtInvLineBuffer>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<PostPrepmtInvLineBuffer>
    Code lines:
    ...
      IF NOT PrepmtInvLineBuffer.Adjustment THEN
        "Gen. Posting Type" := "Gen. Posting Type"::Purchase;
    
      OnBeforePostPrepmtInvLineBuffer(GenJnlLine,PrepmtInvLineBuffer,SuppressCommit);
      RunGenJnlPostLine(GenJnlLine);
      OnAfterPostPrepmtInvLineBuffer(GenJnlLine,PrepmtInvLineBuffer,SuppressCommit,GenJnlPostLine); <=====================
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPostVendorEntry>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<PostVendorEntry>
    Code lines:
    ...
    
      Correction := (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
    
      OnBeforePostVendorEntry(GenJnlLine,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit);
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostVendorEntry(GenJnlLine,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit); <=====================
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPurchCrMemoHeaderInsert>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<InsertPurchCrMemoHeader>
    Code lines:
    ...
      PurchCrMemoHdr."Prepayment Order No." := "No.";
      PurchCrMemoHdr.Correction := GLSetup."Mark Cr. Memos as Corrections";
      PurchCrMemoHdr."No. Series" := PostingNoSeriesCode;
      OnBeforePurchCrMemoHeaderInsert(PurchCrMemoHdr,PurchHeader,SuppressCommit);
      PurchCrMemoHdr.INSERT;
      OnAfterPurchCrMemoHeaderInsert(PurchCrMemoHdr,PurchHeader,SuppressCommit); <=====================
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPurchCrMemoLineInsert>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<InsertPurchCrMemoLine>
    Code lines:
    ...
      PurchCrMemoLine."VAT Identifier" := "VAT Identifier";
      PurchCrMemoLine."Job No." := "Job No.";
      PurchCrMemoLine."Job Task No." := "Job Task No.";
      OnBeforePurchCrMemoLineInsert(PurchCrMemoLine,PurchCrMemoHdr,PrepmtInvLineBuffer,SuppressCommit);
      PurchCrMemoLine.INSERT;
      OnAfterPurchCrMemoLineInsert(PurchCrMemoLine,PurchCrMemoHdr,PrepmtInvLineBuffer,SuppressCommit); <=====================
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPurchInvHeaderInsert>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<InsertPurchInvHeader>
    Code lines:
    ...
      PurchInvHeader."Prepayment Invoice" := TRUE;
      PurchInvHeader."Prepayment Order No." := "No.";
      PurchInvHeader."No. Series" := PostingNoSeriesCode;
      OnBeforePurchInvHeaderInsert(PurchInvHeader,PurchHeader,SuppressCommit);
      PurchInvHeader.INSERT;
      OnAfterPurchInvHeaderInsert(PurchInvHeader,PurchHeader,SuppressCommit); <=====================
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterPurchInvLineInsert>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<InsertPurchInvLine>
    Code lines:
    ...
      PurchInvLine."VAT Identifier" := "VAT Identifier";
      PurchInvLine."Job No." := "Job No.";
      PurchInvLine."Job Task No." := "Job Task No.";
      OnBeforePurchInvLineInsert(PurchInvLine,PurchInvHeader,PrepmtInvLineBuffer,SuppressCommit);
      PurchInvLine.INSERT;
      OnAfterPurchInvLineInsert(PurchInvLine,PurchInvHeader,PrepmtInvLineBuffer,SuppressCommit); <=====================
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterRoundAmounts>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<RoundAmounts>
    Code lines:
    ...
          "VAT Base Amount" := Amount;
      END;
    
    TotalPrepmtInvLineBufLCY.IncrAmounts(PrepmtInvLineBuf);
    
    OnAfterRoundAmounts(PurchHeader,PrepmtInvLineBuf,TotalPrepmtInvLineBuf,TotalPrepmtInvLineBufLCY); <=====================
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterUpdatePostedPurchDocument>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<UpdatePostedPurchaseDocument>
    Code lines:
    ...
          PurchCrMemoHdr."Vendor Ledger Entry No." := VendorLedgerEntry."Entry No.";
          PurchCrMemoHdr.MODIFY;
        END;
    END;
    
    OnAfterUpdatePostedPurchDocument(DocumentType,DocumentNo,SuppressCommit); <=====================
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnAfterUpdateVATOnLines>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<UpdateVATOnLines>
    Code lines:
    ...
            END;
          END;
        UNTIL NEXT = 0;
    END;
    
    OnAfterUpdateVATOnLines(PurchHeader,PurchLine,VATAmountLine,DocumentType); <=====================
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforeCreditMemo>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<CreditMemo>
    Code lines:
    OnBeforeCreditMemo(PurchHeader,Handled); <=====================
    IF NOT Handled THEN
      Code(PurchHeader,1);
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforeInvoice>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<Invoice>
    Code lines:
    OnBeforeInvoice(PurchHeader,Handled); <=====================
    IF NOT Handled THEN
      Code(PurchHeader,0);
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePostBalancingEntry>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<PostBalancingEntry>
    Code lines:
    ...
      Correction := (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
    
      "Applies-to Doc. Type" := DocType;
      "Applies-to Doc. No." := DocNo;
    
      OnBeforePostBalancingEntry(GenJnlLine,VendLedgEntry,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit); <=====================
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostBalancingEntry(GenJnlLine,VendLedgEntry,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit);
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePostPrepayments>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<Code>
    Code lines:
    OnBeforePostPrepayments(PurchHeader2,DocumentType,SuppressCommit); <=====================
    
    PurchHeader := PurchHeader2;
    GLSetup.GET;
    PurchSetup.GET;
    WITH PurchHeader DO BEGIN
      CheckPrepmtDoc(PurchHeader,DocumentType);
    
      UpdateDocNos(PurchHeader,DocumentType,GenJnlLineDocNo,PostingNoSeriesCode,ModifyHeader);
    
    ...
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePostPrepmtInvLineBuffer>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<PostPrepmtInvLineBuffer>
    Code lines:
    ...
    
      Correction := (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
      IF NOT PrepmtInvLineBuffer.Adjustment THEN
        "Gen. Posting Type" := "Gen. Posting Type"::Purchase;
    
      OnBeforePostPrepmtInvLineBuffer(GenJnlLine,PrepmtInvLineBuffer,SuppressCommit); <=====================
      RunGenJnlPostLine(GenJnlLine);
      OnAfterPostPrepmtInvLineBuffer(GenJnlLine,PrepmtInvLineBuffer,SuppressCommit,GenJnlPostLine);
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePostVendorEntry>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<PostVendorEntry>
    Code lines:
    ...
      "Sales/Purch. (LCY)" := -TotalPrepmtInvLineBufferLCY.Amount;
      "Profit (LCY)" := -TotalPrepmtInvLineBufferLCY.Amount;
    
      Correction := (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
    
      OnBeforePostVendorEntry(GenJnlLine,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit); <=====================
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostVendorEntry(GenJnlLine,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,SuppressCommit);
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePurchCrMemoHeaderInsert>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<InsertPurchCrMemoHeader>
    Code lines:
    ...
      PurchCrMemoHdr."No. Printed" := 0;
      PurchCrMemoHdr."Prepayment Credit Memo" := TRUE;
      PurchCrMemoHdr."Prepayment Order No." := "No.";
      PurchCrMemoHdr.Correction := GLSetup."Mark Cr. Memos as Corrections";
      PurchCrMemoHdr."No. Series" := PostingNoSeriesCode;
      OnBeforePurchCrMemoHeaderInsert(PurchCrMemoHdr,PurchHeader,SuppressCommit); <=====================
      PurchCrMemoHdr.INSERT;
      OnAfterPurchCrMemoHeaderInsert(PurchCrMemoHdr,PurchHeader,SuppressCommit);
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePurchCrMemoLineInsert>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<InsertPurchCrMemoLine>
    Code lines:
    ...
      PurchCrMemoLine."VAT Calculation Type" := "VAT Calculation Type";
      PurchCrMemoLine."VAT Base Amount" := "VAT Base Amount";
      PurchCrMemoLine."VAT Identifier" := "VAT Identifier";
      PurchCrMemoLine."Job No." := "Job No.";
      PurchCrMemoLine."Job Task No." := "Job Task No.";
      OnBeforePurchCrMemoLineInsert(PurchCrMemoLine,PurchCrMemoHdr,PrepmtInvLineBuffer,SuppressCommit); <=====================
      PurchCrMemoLine.INSERT;
      OnAfterPurchCrMemoLineInsert(PurchCrMemoLine,PurchCrMemoHdr,PrepmtInvLineBuffer,SuppressCommit);
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePurchInvHeaderInsert>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<InsertPurchInvHeader>
    Code lines:
    ...
      PurchInvHeader."User ID" := USERID;
      PurchInvHeader."No. Printed" := 0;
      PurchInvHeader."Prepayment Invoice" := TRUE;
      PurchInvHeader."Prepayment Order No." := "No.";
      PurchInvHeader."No. Series" := PostingNoSeriesCode;
      OnBeforePurchInvHeaderInsert(PurchInvHeader,PurchHeader,SuppressCommit); <=====================
      PurchInvHeader.INSERT;
      OnAfterPurchInvHeaderInsert(PurchInvHeader,PurchHeader,SuppressCommit);
    END;
Codeunit<Purchase-Post Prepayments>.PROCEDURE<OnBeforePurchInvLineInsert>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<InsertPurchInvLine>
    Code lines:
    ...
      PurchInvLine."VAT Calculation Type" := "VAT Calculation Type";
      PurchInvLine."VAT Base Amount" := "VAT Base Amount";
      PurchInvLine."VAT Identifier" := "VAT Identifier";
      PurchInvLine."Job No." := "Job No.";
      PurchInvLine."Job Task No." := "Job Task No.";
      OnBeforePurchInvLineInsert(PurchInvLine,PurchInvHeader,PrepmtInvLineBuffer,SuppressCommit); <=====================
      PurchInvLine.INSERT;
      OnAfterPurchInvLineInsert(PurchInvLine,PurchInvHeader,PrepmtInvLineBuffer,SuppressCommit);
    END;
Codeunit<Purch.-Post Prepmt. (Yes/No)>.PROCEDURE<OnAfterPostPrepmtCrMemoYN>
  Raised in: Codeunit<Purch.-Post Prepmt. (Yes/No)>.PROCEDURE<PostPrepmtCrMemoYN>
    Code lines:
    ...
    
      IF Print THEN
        GetReport(PurchHeader,1);
    
      COMMIT;
      OnAfterPostPrepmtCrMemoYN(PurchHeader); <=====================
    
      PurchHeader2 := PurchHeader;
    END;
Codeunit<Purch.-Post Prepmt. (Yes/No)>.PROCEDURE<OnAfterPostPrepmtInvoiceYN>
  Raised in: Codeunit<Purch.-Post Prepmt. (Yes/No)>.PROCEDURE<PostPrepmtInvoiceYN>
    Code lines:
    ...
    
      IF Print THEN
        GetReport(PurchHeader,0);
    
      COMMIT;
      OnAfterPostPrepmtInvoiceYN(PurchHeader); <=====================
    
      PurchHeader2 := PurchHeader;
    END;
Codeunit<Purch.-Post Prepmt. (Yes/No)>.PROCEDURE<OnBeforeGetReport>
  Raised in: Codeunit<Purch.-Post Prepmt. (Yes/No)>.PROCEDURE<GetReport>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetReport(PurchHeader,DocumentType,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH PurchHeader DO
      CASE DocumentType OF
        DocumentType::Invoice:
          BEGIN
            PurchInvHeader."No." := "Last Prepayment No.";
    ...
Codeunit<Record Link Management>.PROCEDURE<OnAfterCopyLinks>
  Raised in: Codeunit<Record Link Management>.PROCEDURE<CopyLinks>
    Code lines:
    RecRefTo.GETTABLE(ToRecord);
    RecRefTo.COPYLINKS(FromRecord);
    ResetNotifyOnLinks(RecRefTo);
    OnAfterCopyLinks(FromRecord,ToRecord); <=====================
Codeunit<Job Queue Dispatcher>.PROCEDURE<OnAfterExecuteJob>
  Raised in: Codeunit<Job Queue Dispatcher>.PROCEDURE<HandleRequest>
    Code lines:
    ...
      // Codeunit.Run is limited during write transactions because one or more tables will be locked.
      // To avoid NavCSideException we have either to add the COMMIT before the call or do not use a returned value.
      COMMIT;
      OnBeforeExecuteJob(JobQueueEntry);
      WasSuccess := CODEUNIT.RUN(CODEUNIT::"Job Queue Start Codeunit",JobQueueEntry);
      OnAfterExecuteJob(JobQueueEntry,WasSuccess); <=====================
      PrevStatus := Status;
    
      // user may have deleted it in the meantime
      IF DoesExistLocked THEN
    ...
Codeunit<Job Queue Dispatcher>.PROCEDURE<OnAfterHandleRequest>
  Raised in: Codeunit<Job Queue Dispatcher>.PROCEDURE<HandleRequest>
    Code lines:
    ...
    
      IF DoesExistLocked THEN
        FinalizeRun;
    END;
    
    OnAfterHandleRequest(JobQueueEntry,WasSuccess); <=====================
Codeunit<Job Queue Dispatcher>.PROCEDURE<OnBeforeCalcNextRunTimeForRecurringJob>
  Raised in: Codeunit<Job Queue Dispatcher>.PROCEDURE<IsNextRecurringRunTimeCalculated>
    Code lines:
    OnBeforeCalcNextRunTimeForRecurringJob(JobQueueEntry,StartingDateTime,NewRunDateTime,IsHandled); <=====================
Codeunit<Job Queue Dispatcher>.PROCEDURE<OnBeforeExecuteJob>
  Raised in: Codeunit<Job Queue Dispatcher>.PROCEDURE<HandleRequest>
    Code lines:
    ...
      InsertLogEntry(JobQueueLogEntry);
    
      // Codeunit.Run is limited during write transactions because one or more tables will be locked.
      // To avoid NavCSideException we have either to add the COMMIT before the call or do not use a returned value.
      COMMIT;
      OnBeforeExecuteJob(JobQueueEntry); <=====================
      WasSuccess := CODEUNIT.RUN(CODEUNIT::"Job Queue Start Codeunit",JobQueueEntry);
      OnAfterExecuteJob(JobQueueEntry,WasSuccess);
      PrevStatus := Status;
    
    ...
Codeunit<Job Queue Dispatcher>.PROCEDURE<OnBeforeHandleRequest>
  Raised in: Codeunit<Job Queue Dispatcher>.PROCEDURE<HandleRequest>
    Code lines:
    JobQueueEntry.RefreshLocked;
    IF NOT JobQueueEntry.IsReadyToStart THEN
      EXIT;
    
    OnBeforeHandleRequest(JobQueueEntry); <=====================
    
    WITH JobQueueEntry DO BEGIN
      IF Status IN [Status::Ready,Status::"On Hold with Inactivity Timeout"] THEN BEGIN
        Status := Status::"In Process";
        "User Session Started" := CURRENTDATETIME;
    ...
Codeunit<Job Queue Dispatcher>.PROCEDURE<OnBeforeWaitForOthersWithSameCategory>
  Raised in: Codeunit<Job Queue Dispatcher>.PROCEDURE<WaitForOthersWithSameCategory>
    Code lines:
    OnBeforeWaitForOthersWithSameCategory(CurrJobQueueEntry,JobQueueEntry); <=====================
    
    IF CurrJobQueueEntry."Job Queue Category Code" = '' THEN
      EXIT(FALSE);
    
    // Use the Job Queue Category as a semaphore so only one checks at the time.
    JobQueueCategory.LOCKTABLE;
    IF NOT JobQueueCategory.GET(CurrJobQueueEntry."Job Queue Category Code") THEN
      EXIT(FALSE);
    
    ...
Codeunit<Job Queue Start Codeunit>.PROCEDURE<OnAfterRun>
  Raised in: Codeunit<Job Queue Start Codeunit>.<OnRun>
    Code lines:
    ...
    END;
    
    // Commit any remaining transactions from the target codeunit\report. This is necessary due
    // to buffered record insertion which may not have surfaced errors in CODEUNIT.RUN above.
    COMMIT;
    OnAfterRun(Rec); <=====================
Codeunit<Job Queue Start Codeunit>.PROCEDURE<OnBeforeRunReport>
  Raised in: Codeunit<Job Queue Start Codeunit>.PROCEDURE<RunReport>
    Code lines:
    IsHandled := FALSE;
    OnBeforeRunReport(ReportID,JobQueueEntry,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    ReportInbox.INIT;
    ReportInbox."User ID" := JobQueueEntry."User ID";
    ReportInbox."Job Queue Log Entry ID" := JobQueueEntry.ID;
    ReportInbox."Report ID" := ReportID;
    ReportInbox.Description := JobQueueEntry.Description;
    ...
Codeunit<AutoFormatManagement>.PROCEDURE<OnAfterAutoFormatTranslate>
  Raised in: Codeunit<AutoFormatManagement>.PROCEDURE<DoAutoFormatTranslate>
    Code lines:
    Translation := AutoFormatTranslate(AutoFormatType,AutoFormatExpr);
    OnAfterAutoFormatTranslate(AutoFormatType,AutoFormatExpr,Translation); <=====================
Codeunit<Job Queue Error Handler>.PROCEDURE<OnAfterLogError>
  Raised in: Codeunit<Job Queue Error Handler>.PROCEDURE<LogError>
    Code lines:
    ...
      END ELSE BEGIN
        JobQueueEntry.InsertLogEntry(JobQueueLogEntry);
        JobQueueEntry.FinalizeLogEntry(JobQueueLogEntry);
      END;
    END;
    OnAfterLogError(JobQueueEntry); <=====================
Codeunit<Job Queue Error Handler>.PROCEDURE<OnBeforeLogError>
  Raised in: Codeunit<Job Queue Error Handler>.PROCEDURE<LogError>
    Code lines:
    OnBeforeLogError(JobQueueLogEntry,JobQueueEntry); <=====================
    
    WITH JobQueueLogEntry DO BEGIN
      SETRANGE(ID,JobQueueEntry.ID);
      SETRANGE(Status,Status::"In Process");
      IF FINDFIRST THEN BEGIN
        SetErrorMessage(JobQueueEntry.GetErrorMessage);
        SetErrorCallStack(GETLASTERRORCALLSTACK);
        Status := Status::Error;
        MODIFY;
    ...
Codeunit<Job Queue - Enqueue>.PROCEDURE<OnAfterEnqueueJobQueueEntry>
  Raised in: Codeunit<Job Queue - Enqueue>.PROCEDURE<EnqueueJobQueueEntry>
    Code lines:
    ...
          Status := Status::Ready;
        MODIFY;
      END;
    END;
    
    OnAfterEnqueueJobQueueEntry(JobQueueEntry); <=====================
Codeunit<Job Queue - Enqueue>.PROCEDURE<OnBeforeJobQueueScheduleTask>
  Raised in: Codeunit<Job Queue - Enqueue>.PROCEDURE<CanScheduleTask>
    Code lines:
    OnBeforeJobQueueScheduleTask(JobQueueEntry,DoNotScheduleTask); <=====================
    EXIT(NOT DoNotScheduleTask);
Codeunit<Job Queue - Send Notification>.PROCEDURE<OnAfterRun>
  Raised in: Codeunit<Job Queue - Send Notification>.<OnRun>
    Code lines:
    ...
    RecordLink.Notify := TRUE;
    RecordLink."To User ID" := "User ID";
    SetText(Rec,RecordLink);
    RecordLink.INSERT;
    
    OnAfterRun(Rec,RecordLink); <=====================
Codeunit<Job Queue - Send Notification>.PROCEDURE<OnBeforeRun>
  Raised in: Codeunit<Job Queue - Send Notification>.<OnRun>
    Code lines:
    IsHandled := FALSE;
    OnBeforeRun(Rec,RecordLink,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF PermissionManager.SoftwareAsAService THEN
      EXIT;
    
    RecordLink."Link ID" := 0;
    RecordLink."Record ID" := RECORDID;
    ...
Codeunit<Check Dimensions>.PROCEDURE<OnBeforeCheckPurchDim>
  Raised in: Codeunit<Check Dimensions>.PROCEDURE<CheckPurchDim>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckPurchDim(PurchHeader,TempPurchLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    DimMgt.SetCollectErrorsMode;
    CheckPurchDimCombHeader(PurchHeader);
    CheckPurchDimValuePostingHeader(PurchHeader);
    
    TempPurchLineLocal.COPY(TempPurchLine,TRUE);
Codeunit<Check Dimensions>.PROCEDURE<OnBeforeCheckSalesDim>
  Raised in: Codeunit<Check Dimensions>.PROCEDURE<CheckSalesDim>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckSalesDim(SalesHeader,TempSalesLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    DimMgt.SetCollectErrorsMode;
    CheckSalesDimCombHeader(SalesHeader);
    CheckSalesDimValuePostingHeader(SalesHeader);
    
    TempSalesLineLocal.COPY(TempSalesLine,TRUE);
Codeunit<Check Dimensions>.PROCEDURE<OnCheckDimValuePostingOnAfterCreateDimTableIDs>
  Raised in: Codeunit<Check Dimensions>.PROCEDURE<CheckPurchDimValuePostingHeader>
    Code lines:
    ...
      NumberArr[2] := "Purchaser Code";
      TableIDArr[3] := DATABASE::Campaign;
      NumberArr[3] := "Campaign No.";
      TableIDArr[4] := DATABASE::"Responsibility Center";
      NumberArr[4] := "Responsibility Center";
      OnCheckDimValuePostingOnAfterCreateDimTableIDs(PurchHeader,TableIDArr,NumberArr); <=====================
    
      DimMgt.SetSourceCode(DATABASE::"Purchase Header");
      ContextErrorMessage := STRSUBSTNO(InvalidDimensionsErr,"Document Type","No.");
      ErrorMessageMgt.PushContext(RECORDID,0,ContextErrorMessage);
    ...
  Raised in: Codeunit<Check Dimensions>.PROCEDURE<CheckPurchDimValuePostingLine>
    Code lines:
    ...
      NumberArr[1] := "No.";
      TableIDArr[2] := DATABASE::Job;
      NumberArr[2] := "Job No.";
      TableIDArr[3] := DATABASE::"Work Center";
      NumberArr[3] := "Work Center No.";
      OnCheckDimValuePostingOnAfterCreateDimTableIDs(PurchLine,TableIDArr,NumberArr); <=====================
    
      DimMgt.SetSourceCode(DATABASE::"Purchase Line");
      ContextErrorMessage := STRSUBSTNO(LineInvalidDimensionsErr,"Document Type","Document No.","Line No.");
      ErrorMessageMgt.PushContext(RECORDID,0,ContextErrorMessage);
    ...
  Raised in: Codeunit<Check Dimensions>.PROCEDURE<CheckSalesDimValuePostingHeader>
    Code lines:
    ...
      NumberArr[2] := "Salesperson Code";
      TableIDArr[3] := DATABASE::Campaign;
      NumberArr[3] := "Campaign No.";
      TableIDArr[4] := DATABASE::"Responsibility Center";
      NumberArr[4] := "Responsibility Center";
      OnCheckDimValuePostingOnAfterCreateDimTableIDs(SalesHeader,TableIDArr,NumberArr); <=====================
    
      DimMgt.SetSourceCode(DATABASE::"Sales Header");
      ContextErrorMessage := STRSUBSTNO(InvalidDimensionsErr,"Document Type","No.");
      ErrorMessageMgt.PushContext(RECORDID,0,ContextErrorMessage);
    ...
  Raised in: Codeunit<Check Dimensions>.PROCEDURE<CheckSalesDimValuePostingLine>
    Code lines:
    ...
      TableIDArr[1] := DimMgt.TypeToTableID3(Type);
      NumberArr[1] := "No.";
      TableIDArr[2] := DATABASE::Job;
      NumberArr[2] := "Job No.";
      DimMgt.SetSourceCode(DATABASE::"Sales Line");
      OnCheckDimValuePostingOnAfterCreateDimTableIDs(SalesLine,TableIDArr,NumberArr); <=====================
    
      ContextErrorMessage := STRSUBSTNO(LineInvalidDimensionsErr,"Document Type","Document No.","Line No.");
      ErrorMessageMgt.PushContext(RECORDID,0,ContextErrorMessage);
      IF NOT DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,"Dimension Set ID") THEN
    ...
Codeunit<Change Global Dimensions>.PROCEDURE<OnAfterGetObjectNoList>
  Raised in: Codeunit<Change Global Dimensions>.PROCEDURE<FindTablesWithDims>
    Code lines:
    DimensionManagement.DefaultDimObjectNoWithGlobalDimsList(TempAllObjWithCaption);
    DimensionManagement.GlobalDimObjectNoList(TempAllObjWithCaption);
    DimensionManagement.JobTaskDimObjectNoList(TempAllObjWithCaption);
    OnAfterGetObjectNoList(TempAllObjWithCaption); <=====================
    EXIT(TempAllObjWithCaption.FINDSET);
Codeunit<Change Global Dimensions>.PROCEDURE<OnBeforeScheduleTask>
  Raised in: Codeunit<Change Global Dimensions>.PROCEDURE<ScheduleJobForTable>
    Code lines:
    WITH ChangeGlobalDimLogEntry DO BEGIN
      OnBeforeScheduleTask("Table ID",DoNotScheduleTask,TaskID); <=====================
      IF DoNotScheduleTask THEN
        "Task ID" := TaskID
      ELSE BEGIN
        CancelTask;
        "Task ID" :=
          TASKSCHEDULER.CREATETASK(
            CODEUNIT::"Change Global Dimensions",CODEUNIT::"Change Global Dim Err. Handler",
            TRUE,COMPANYNAME,StartNotBefore,RECORDID);
    ...
Codeunit<Change Global Dimensions>.PROCEDURE<OnCountingActiveSessions>
  Raised in: Codeunit<Change Global Dimensions>.PROCEDURE<IsCurrentSessionActiveOnly>
    Code lines:
    OnCountingActiveSessions(Result); <=====================
    IF Result THEN
      EXIT(TRUE);
    // Ignore session types: Web Service,Client Service,NAS,Management Client
    ActiveSession.SETFILTER(
      "Client Type",'<>%1&<>%2&<>%3&<>%4',
      ActiveSession."Client Type"::"Web Service",ActiveSession."Client Type"::"Client Service",
      ActiveSession."Client Type"::NAS,ActiveSession."Client Type"::"Management Client");
    ActiveSession.SETFILTER("Session ID",'<>%1',SESSIONID);
    ActiveSession.SETRANGE("Server Instance ID",SERVICEINSTANCEID);
Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterGetDatabaseTableTriggerSetup>
  Raised in: Codeunit<GlobalTriggerManagement>.PROCEDURE<GetDatabaseTableTriggerSetup>
    Code lines:
    ChangeLogMgt.GetDatabaseTableTriggerSetup(TableId,OnDatabaseInsert,OnDatabaseModify,OnDatabaseDelete,OnDatabaseRename);
    IntegrationManagement.GetDatabaseTableTriggerSetup(TableId,OnDatabaseInsert,OnDatabaseModify,OnDatabaseDelete,OnDatabaseRename);
    OnAfterGetDatabaseTableTriggerSetup(TableId,OnDatabaseInsert,OnDatabaseModify,OnDatabaseDelete,OnDatabaseRename); <=====================
Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterGetGlobalTableTriggerMask>
  Raised in: Codeunit<GlobalTriggerManagement>.PROCEDURE<GetGlobalTableTriggerMask>
    Code lines:
    OnAfterGetGlobalTableTriggerMask(TableID,TableTriggerMask); <=====================
Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnDatabaseDelete>
  Raised in: Codeunit<GlobalTriggerManagement>.PROCEDURE<OnDatabaseDelete>
    Code lines:
    OnBeforeOnDatabaseDelete(RecRef);
    ChangeLogMgt.LogDeletion(RecRef);
    IntegrationManagement.OnDatabaseDelete(RecRef);
    APIWebhookNotificationMgt.OnDatabaseDelete(RecRef);
    OnAfterOnDatabaseDelete(RecRef); <=====================
Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnDatabaseInsert>
  Raised in: Codeunit<GlobalTriggerManagement>.PROCEDURE<OnDatabaseInsert>
    Code lines:
    OnBeforeOnDatabaseInsert(RecRef);
    ChangeLogMgt.LogInsertion(RecRef);
    IntegrationManagement.OnDatabaseInsert(RecRef);
    APIWebhookNotificationMgt.OnDatabaseInsert(RecRef);
    OnAfterOnDatabaseInsert(RecRef); <=====================
Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnDatabaseModify>
  Raised in: Codeunit<GlobalTriggerManagement>.PROCEDURE<OnDatabaseModify>
    Code lines:
    OnBeforeOnDatabaseModify(RecRef);
    ChangeLogMgt.LogModification(RecRef);
    IntegrationManagement.OnDatabaseModify(RecRef);
    APIWebhookNotificationMgt.OnDatabaseModify(RecRef);
    OnAfterOnDatabaseModify(RecRef); <=====================
Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnDatabaseRename>
  Raised in: Codeunit<GlobalTriggerManagement>.PROCEDURE<OnDatabaseRename>
    Code lines:
    OnBeforeOnDatabaseRename(RecRef,xRecRef);
    ChangeLogMgt.LogRename(RecRef,xRecRef);
    IntegrationManagement.OnDatabaseRename(RecRef,xRecRef);
    APIWebhookNotificationMgt.OnDatabaseRename(RecRef,xRecRef);
    OnAfterOnDatabaseRename(RecRef,xRecRef); <=====================
Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnGlobalDelete>
  Raised in: Codeunit<GlobalTriggerManagement>.PROCEDURE<OnGlobalDelete>
    Code lines:
    OnAfterOnGlobalDelete(RecRef); <=====================
Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnGlobalInsert>
  Raised in: Codeunit<GlobalTriggerManagement>.PROCEDURE<OnGlobalInsert>
    Code lines:
    OnAfterOnGlobalInsert(RecRef); <=====================
Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnGlobalModify>
  Raised in: Codeunit<GlobalTriggerManagement>.PROCEDURE<OnGlobalModify>
    Code lines:
    OnAfterOnGlobalModify(RecRef,xRecRef); <=====================
Codeunit<GlobalTriggerManagement>.PROCEDURE<OnAfterOnGlobalRename>
  Raised in: Codeunit<GlobalTriggerManagement>.PROCEDURE<OnGlobalRename>
    Code lines:
    OnAfterOnGlobalRename(RecRef,xRecRef); <=====================
Codeunit<GlobalTriggerManagement>.PROCEDURE<OnBeforeOnDatabaseDelete>
  Raised in: Codeunit<GlobalTriggerManagement>.PROCEDURE<OnDatabaseDelete>
    Code lines:
    OnBeforeOnDatabaseDelete(RecRef); <=====================
    ChangeLogMgt.LogDeletion(RecRef);
    IntegrationManagement.OnDatabaseDelete(RecRef);
    APIWebhookNotificationMgt.OnDatabaseDelete(RecRef);
    OnAfterOnDatabaseDelete(RecRef);
Codeunit<GlobalTriggerManagement>.PROCEDURE<OnBeforeOnDatabaseInsert>
  Raised in: Codeunit<GlobalTriggerManagement>.PROCEDURE<OnDatabaseInsert>
    Code lines:
    OnBeforeOnDatabaseInsert(RecRef); <=====================
    ChangeLogMgt.LogInsertion(RecRef);
    IntegrationManagement.OnDatabaseInsert(RecRef);
    APIWebhookNotificationMgt.OnDatabaseInsert(RecRef);
    OnAfterOnDatabaseInsert(RecRef);
Codeunit<GlobalTriggerManagement>.PROCEDURE<OnBeforeOnDatabaseModify>
  Raised in: Codeunit<GlobalTriggerManagement>.PROCEDURE<OnDatabaseModify>
    Code lines:
    OnBeforeOnDatabaseModify(RecRef); <=====================
    ChangeLogMgt.LogModification(RecRef);
    IntegrationManagement.OnDatabaseModify(RecRef);
    APIWebhookNotificationMgt.OnDatabaseModify(RecRef);
    OnAfterOnDatabaseModify(RecRef);
Codeunit<GlobalTriggerManagement>.PROCEDURE<OnBeforeOnDatabaseRename>
  Raised in: Codeunit<GlobalTriggerManagement>.PROCEDURE<OnDatabaseRename>
    Code lines:
    OnBeforeOnDatabaseRename(RecRef,xRecRef); <=====================
    ChangeLogMgt.LogRename(RecRef,xRecRef);
    IntegrationManagement.OnDatabaseRename(RecRef,xRecRef);
    APIWebhookNotificationMgt.OnDatabaseRename(RecRef,xRecRef);
    OnAfterOnDatabaseRename(RecRef,xRecRef);
Codeunit<SaaS Log In Management>.PROCEDURE<OnSuppressApprovalForTrial>
  Raised in: Codeunit<SaaS Log In Management>.PROCEDURE<ShowTermsAndConditionsOnOpenCompany>
    Code lines:
    ...
        EXIT;
    
    IF NOT GUIALLOWED THEN BEGIN
      IF ClientTypeManagement.GetCurrentClientType IN [CLIENTTYPE::OData,CLIENTTYPE::ODataV4] THEN BEGIN
        SuppressApprovalForTrial := FALSE;
        OnSuppressApprovalForTrial(SuppressApprovalForTrial); <=====================
        IF NOT SuppressApprovalForTrial THEN
          ERROR(RequireUserApprovalForTrialErr,Company.Name);
      END;
      EXIT;
    ...
Codeunit<SegManagement>.PROCEDURE<OnAfterFindInteractTmplCode>
  Raised in: Codeunit<SegManagement>.PROCEDURE<FindInteractTmplCode>
    Code lines:
    ...
          InteractTmplCode := InteractionTmplSetup."Service Contract Quote";
        25:
          InteractTmplCode := InteractionTmplSetup."Service Quote";
      END;
    
    OnAfterFindInteractTmplCode(DocumentType,InteractionTmplSetup,InteractTmplCode); <=====================
    
    EXIT(InteractTmplCode);
Codeunit<SegManagement>.PROCEDURE<OnAfterFindInteractTmplSetupCaption>
  Raised in: Codeunit<SegManagement>.PROCEDURE<FindInteractTmplSetupCaption>
    Code lines:
    ...
        InteractTmplSetupCaption := InteractionTmplSetup.FIELDCAPTION("Service Contract Quote");
      25:
        InteractTmplSetupCaption := InteractionTmplSetup.FIELDCAPTION("Service Quote");
    END;
    
    OnAfterFindInteractTmplSetupCaption(DocumentType,InteractionTmplSetup,InteractTmplSetupCaption); <=====================
    EXIT(InteractTmplSetupCaption);
Codeunit<SegManagement>.PROCEDURE<OnBeforeDeliverySorterInsert>
  Raised in: Codeunit<SegManagement>.PROCEDURE<LogSegment>
    Code lines:
    ...
          TempDeliverySorter."Attachment No." := InteractLogEntry."Attachment No.";
          TempDeliverySorter."Correspondence Type" := InteractLogEntry."Correspondence Type";
          TempDeliverySorter.Subject := InteractLogEntry.Subject;
          TempDeliverySorter."Send Word Docs. as Attmt." := InteractLogEntry."Send Word Docs. as Attmt.";
          TempDeliverySorter."Language Code" := SegmentLine."Language Code";
          OnBeforeDeliverySorterInsert(TempDeliverySorter,SegmentLine); <=====================
          TempDeliverySorter.INSERT;
        END;
        InteractLogEntry.INSERT;
        Attachment.LOCKTABLE;
    ...
Codeunit<SegManagement>.PROCEDURE<OnLogSegmentOnAfterCreateInteractionLogEntries>
  Raised in: Codeunit<SegManagement>.PROCEDURE<LogSegment>
    Code lines:
    ...
        NextInteractLogEntryNo += 1;
      UNTIL SegmentLine.NEXT = 0;
    END ELSE
      ERROR(Text001,SegmentHeader."No.");
    
    OnLogSegmentOnAfterCreateInteractionLogEntries(SegmentHeader,LoggedSegment); <=====================
    
    SegmentNo := SegmentHeader."No.";
    CampaignNo := SegmentHeader."Campaign No.";
    SegmentHeader.DELETE(TRUE);
    ...
Codeunit<TAPIManagement>.PROCEDURE<OnAfterCreateCommMethod>
  Raised in: Codeunit<TAPIManagement>.PROCEDURE<CreateCommMethod>
    Code lines:
    ...
          INSERT;
        END;
      END;
    END;
    
    OnAfterCreateCommMethod(Contact,TempCommunicationMethod,ContactNo,ContAltAddr); <=====================
Codeunit<TAPIManagement>.PROCEDURE<OnBeforeDial>
  Raised in: Codeunit<TAPIManagement>.PROCEDURE<Dial>
    Code lines:
    OnBeforeDial(PhoneNumber); <=====================
    
    HYPERLINK(STRSUBSTNO('tel:%1',PhoneNumber));
    EXIT(TRUE);
Codeunit<TAPIManagement>.PROCEDURE<OnDialContCustVendBankOnBeforemakePhoneCall>
  Raised in: Codeunit<TAPIManagement>.PROCEDURE<DialContCustVendBank>
    Code lines:
    ...
        ELSE
          ERROR(Text001);
      END;
    END;
    
    OnDialContCustVendBankOnBeforemakePhoneCall(Contact); <=====================
    
    // Call Make Phone Call Wizard
    TempSegmentLine.MakePhoneCallFromContact(Contact,Task,TableNo,PhoneNo,ContAltAddrCode);
Codeunit<WordManagement>.PROCEDURE<OnAddFieldsToMergeSource>
  Raised in: Codeunit<WordManagement>.PROCEDURE<AddFieldsToMergeSource>
    Code lines:
    ...
      AddNewEntry(CompanyInfo."Fax No.",'');
      AddNewEntry(CompanyInfo."Bank Branch No.",'');
      AddNewEntry(CompanyInfo."Bank Name",'');
      AddNewEntry(CompanyInfo."Bank Account No.",'');
      AddNewEntry(CompanyInfo."Giro No.",'');
      OnAddFieldsToMergeSource(TempNameValueBuffer,Salesperson,Country,Contact,CompanyInfo,SegLine,InteractLogEntry); <=====================
      AddNewEntry(COPYSTR(FaxMailToValue,1,MAXSTRLEN(Name)),'');
      DataFieldsCount += COUNT;
      IF HeaderFieldsCount <> DataFieldsCount THEN
        ERROR(FieldCountMismatchErr,HeaderFieldsCount,DataFieldsCount);
    ...
Codeunit<WordManagement>.PROCEDURE<OnBeforeCheckCanRunWord>
  Raised in: Codeunit<WordManagement>.PROCEDURE<CanRunWordApp>
    Code lines:
    OnBeforeCheckCanRunWord(CanRunWord,CanRunWordModified); <=====================
    IF CanRunWordModified THEN
      EXIT(CanRunWord);
    CanRunWord := IsActive;
Codeunit<WordManagement>.PROCEDURE<OnCreateHeaderAddFields>
  Raised in: Codeunit<WordManagement>.PROCEDURE<CreateHeader>
    Code lines:
    ...
      AddNewEntry(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Fax No."),'');
      AddNewEntry(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Bank Branch No."),'');
      AddNewEntry(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Bank Name"),'');
      AddNewEntry(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Bank Account No."),'');
      AddNewEntry(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Giro No."),'');
      OnCreateHeaderAddFields(TempNameValueBuffer,Salesperson,Country,Contact,CompanyInfo,SegLine,InteractionLogEntry); <=====================
      GLOBALLANGUAGE := MainLanguage;
      AddNewEntry(Text015,'');
    
      RESET;
    ...
Codeunit<WordManagement>.PROCEDURE<OnDeactivate>
  Raised in: Codeunit<WordManagement>.PROCEDURE<Deactivate>
    Code lines:
    OnDeactivate(HandlerID); <=====================
Codeunit<WordManagement>.PROCEDURE<OnFindActiveSubscriber>
  Raised in: Codeunit<WordManagement>.PROCEDURE<IsActive>
    Code lines:
    OnFindActiveSubscriber(IsFound); <=====================
Codeunit<WordManagement>.PROCEDURE<OnGetWord>
  Raised in: Codeunit<WordManagement>.PROCEDURE<GetWord>
    Code lines:
    OnGetWord(WordApplication,IsFound); <=====================
    IF NOT IsFound THEN
      CLEAR(WordApplication);
  Raised in: Codeunit<WordManagement>.PROCEDURE<TryGetWord>
    Code lines:
    OnGetWord(WordApplication,IsFound); <=====================
    IF NOT IsFound THEN BEGIN
      CLEAR(WordApplication);
      ERROR('');
    END;
Codeunit<CustVendBank-Update>.PROCEDURE<OnAfterUpdateBankAccount>
  Raised in: Codeunit<CustVendBank-Update>.PROCEDURE<UpdateBankAccount>
    Code lines:
    ...
      VALIDATE("Currency Code",Cont."Currency Code");
      TRANSFERFIELDS(Cont);
      "No." := ContBusRel."No.";
      "No. Series" := NoSeries;
      "Our Contact Code" := OurContactCode;
      OnAfterUpdateBankAccount(BankAcc,Cont); <=====================
      MODIFY;
    END;
Codeunit<CustVendBank-Update>.PROCEDURE<OnAfterUpdateCustomer>
  Raised in: Codeunit<CustVendBank-Update>.PROCEDURE<UpdateCustomer>
    Code lines:
    ...
      NoSeries := "No. Series";
      VATRegNo := "VAT Registration No.";
      TRANSFERFIELDS(Cont);
      "No." := ContBusRel."No.";
      "No. Series" := NoSeries;
      OnAfterUpdateCustomer(Cust,Cont); <=====================
      MODIFY;
      IF ("VAT Registration No." <> '') AND ("VAT Registration No." <> VATRegNo) THEN
        VATRegistrationLogMgt.LogCustomer(Cust);
    END;
Codeunit<CustVendBank-Update>.PROCEDURE<OnAfterUpdateVendor>
  Raised in: Codeunit<CustVendBank-Update>.PROCEDURE<UpdateVendor>
    Code lines:
    ...
      VATRegNo := "VAT Registration No.";
      TRANSFERFIELDS(Cont);
      "No." := ContBusRel."No.";
      "No. Series" := NoSeries;
      "Purchaser Code" := PurchaserCode;
      OnAfterUpdateVendor(Vend,Cont); <=====================
      MODIFY;
      IF ("VAT Registration No." <> '') AND ("VAT Registration No." <> VATRegNo) THEN
        VATRegistrationLogMgt.LogVendor(Vend);
    END;
Codeunit<CustCont-Update>.PROCEDURE<OnAfterTransferFieldsFromCustToCont>
  Raised in: Codeunit<CustCont-Update>.PROCEDURE<OnModify>
    Code lines:
    ...
    
    ContNo := Cont."No.";
    NoSeries := Cont."No. Series";
    Cont.VALIDATE("E-Mail",Cust."E-Mail");
    Cont.TRANSFERFIELDS(Cust);
    OnAfterTransferFieldsFromCustToCont(Cont,Cust); <=====================
    Cont."No." := ContNo ;
    Cont."No. Series" := NoSeries;
    IF NOT IdentityManagement.IsInvAppId THEN
      Cont.Type := OldCont.Type;
    ...
  Raised in: Codeunit<CustCont-Update>.PROCEDURE<InsertNewContact>
    Code lines:
    ...
    END;
    
    WITH Cont DO BEGIN
      INIT;
      TRANSFERFIELDS(Cust);
      OnAfterTransferFieldsFromCustToCont(Cont,Cust); <=====================
      VALIDATE(Name);
      VALIDATE("E-Mail");
      "No." := '';
      "No. Series" := '';
    ...
Codeunit<CustCont-Update>.PROCEDURE<OnBeforeContactInsert>
  Raised in: Codeunit<CustCont-Update>.PROCEDURE<InsertNewContact>
    Code lines:
    ...
      RMSetup.TESTFIELD("Contact Nos.");
      NoSeriesMgt.InitSeries(RMSetup."Contact Nos.",'',0D,"No.","No. Series");
      Type := Type::Company;
      TypeChange;
      SetSkipDefault;
      OnBeforeContactInsert(Cont,Cust); <=====================
      INSERT(TRUE);
    END;
    
    WITH ContBusRel DO BEGIN
    ...
Codeunit<VendCont-Update>.PROCEDURE<OnAfterTransferFieldsFromVendToCont>
  Raised in: Codeunit<VendCont-Update>.PROCEDURE<OnModify>
    Code lines:
    ...
    ContNo := Cont."No.";
    NoSeries := Cont."No. Series";
    SalespersonCode := Cont."Salesperson Code";
    Cont.VALIDATE("E-Mail",Vend."E-Mail");
    Cont.TRANSFERFIELDS(Vend);
    OnAfterTransferFieldsFromVendToCont(Cont,Vend); <=====================
    Cont."No." := ContNo ;
    Cont."No. Series" := NoSeries;
    Cont."Salesperson Code" := SalespersonCode;
    Cont.VALIDATE(Name);
    ...
Codeunit<VendCont-Update>.PROCEDURE<OnBeforeContactInsert>
  Raised in: Codeunit<VendCont-Update>.PROCEDURE<InsertNewContact>
    Code lines:
    ...
      RMSetup.TESTFIELD("Contact Nos.");
      NoSeriesMgt.InitSeries(RMSetup."Contact Nos.",'',0D,"No.","No. Series");
      Type := Type::Company;
      TypeChange;
      SetSkipDefault;
      OnBeforeContactInsert(Cont,Vend); <=====================
      INSERT(TRUE);
    END;
    
    WITH ContBusRel DO BEGIN
    ...
Codeunit<BankCont-Update>.PROCEDURE<OnAfterTransferFieldsFromBankAccToCont>
  Raised in: Codeunit<BankCont-Update>.PROCEDURE<OnModify>
    Code lines:
    ...
    ContNo := Cont."No.";
    NoSeries := Cont."No. Series";
    SalespersonCode := Cont."Salesperson Code";
    Cont.VALIDATE("E-Mail",BankAcc."E-Mail");
    Cont.TRANSFERFIELDS(BankAcc);
    OnAfterTransferFieldsFromBankAccToCont(Cont,BankAcc); <=====================
    Cont."No." := ContNo ;
    Cont."No. Series" := NoSeries;
    Cont."Salesperson Code" := SalespersonCode;
    Cont.VALIDATE(Name);
    ...
Codeunit<SegCriteriaManagement>.PROCEDURE<OnAfterSegCriteriaFilter>
  Raised in: Codeunit<SegCriteriaManagement>.PROCEDURE<SegCriteriaFilter>
    Code lines:
    ...
          ValueEntry.SETVIEW(View);
          EXIT(ValueEntry.GETFILTERS);
        END;
    END;
    
    OnAfterSegCriteriaFilter(TableNo,View,Filters); <=====================
    EXIT(Filters);
Codeunit<SegCriteriaManagement>.PROCEDURE<OnBeforeInsertCriteriaAction>
  Raised in: Codeunit<SegCriteriaManagement>.PROCEDURE<InsertCriteriaAction>
    Code lines:
    IsHandled := FALSE;
    OnBeforeInsertCriteriaAction( <=====================
      SegmentNo,CalledFromReportNo,AllowExistingContacts,ExpandContact,AllowCompanyWithPersons,IgnoreExclusion,EntireCompanies,
      IsHandled);
    IF IsHandled THEN
      EXIT;
    
    SegCriteriaLine.LOCKTABLE;
    SegCriteriaLine.SETRANGE("Segment No.",SegmentNo);
    IF SegCriteriaLine.FINDLAST THEN
    ...
Codeunit<ArchiveManagement>.PROCEDURE<OnAfterAutoArchivePurchDocument>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<AutoArchivePurchDocument>
    Code lines:
    ...
        "Document Type"::"Return Order":
          IF PurchasesPayablesSetup."Archive Return Orders" THEN
            ArchPurchDocumentNoConfirm(PurchaseHeader);
      END;
    
    OnAfterAutoArchivePurchDocument(PurchaseHeader); <=====================
Codeunit<ArchiveManagement>.PROCEDURE<OnAfterAutoArchiveSalesDocument>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<AutoArchiveSalesDocument>
    Code lines:
    ...
        "Document Type"::"Return Order":
          IF SalesReceivablesSetup."Archive Return Orders" THEN
            ArchSalesDocumentNoConfirm(SalesHeader);
      END;
    
    OnAfterAutoArchiveSalesDocument(SalesHeader); <=====================
Codeunit<ArchiveManagement>.PROCEDURE<OnAfterPurchHeaderArchiveInsert>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<StorePurchDocument>
    Code lines:
    ...
        DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."No.",PurchHeader."Doc. No. Occurrence");
    PurchHeaderArchive."Interaction Exist" := InteractionExist;
    RecordLinkManagement.CopyLinks(PurchHeader,PurchHeaderArchive);
    OnBeforePurchHeaderArchiveInsert(PurchHeaderArchive,PurchHeader);
    PurchHeaderArchive.INSERT;
    OnAfterPurchHeaderArchiveInsert(PurchHeaderArchive,PurchHeader); <=====================
    
    StorePurchDocumentComments(
      PurchHeader."Document Type",PurchHeader."No.",
      PurchHeader."Doc. No. Occurrence",PurchHeaderArchive."Version No.");
    ...
Codeunit<ArchiveManagement>.PROCEDURE<OnAfterRestoreSalesDocument>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<RestoreSalesDocument>
    Code lines:
    ...
      OnAfterTransferFromArchToSalesHeader(SalesHeader,SalesHeaderArchive);
      SalesHeader.MODIFY(TRUE);
      RestoreSalesLines(SalesHeaderArchive,SalesHeader);
      SalesHeader.Status := SalesHeader.Status::Released;
      ReleaseSalesDoc.Reopen(SalesHeader);
      OnAfterRestoreSalesDocument(SalesHeader,SalesHeaderArchive); <=====================
    
      MESSAGE(Text003,SalesHeader."Document Type",SalesHeader."No.");
    END;
Codeunit<ArchiveManagement>.PROCEDURE<OnAfterRestoreSalesLine>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<RestoreSalesLines>
    Code lines:
    ...
            SalesHeaderArchive."Version No.");
          RecordLinkManagement.CopyLinks(SalesLineArchive,SalesLine);
          OnAfterTransferFromArchToSalesLine(SalesLine,SalesLineArchive);
          MODIFY(TRUE);
        END;
        OnAfterRestoreSalesLine(SalesHeader,SalesLine,SalesHeaderArchive,SalesLineArchive); <=====================
      UNTIL SalesLineArchive.NEXT = 0;
Codeunit<ArchiveManagement>.PROCEDURE<OnAfterSalesHeaderArchiveInsert>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<StoreSalesDocument>
    Code lines:
    ...
        DATABASE::"Sales Header",SalesHeader."Document Type",SalesHeader."No.",SalesHeader."Doc. No. Occurrence");
    SalesHeaderArchive."Interaction Exist" := InteractionExist;
    RecordLinkManagement.CopyLinks(SalesHeader,SalesHeaderArchive);
    OnBeforeSalesHeaderArchiveInsert(SalesHeaderArchive,SalesHeader);
    SalesHeaderArchive.INSERT;
    OnAfterSalesHeaderArchiveInsert(SalesHeaderArchive,SalesHeader); <=====================
    
    StoreSalesDocumentComments(
      SalesHeader."Document Type",SalesHeader."No.",
      SalesHeader."Doc. No. Occurrence",SalesHeaderArchive."Version No.");
    ...
Codeunit<ArchiveManagement>.PROCEDURE<OnAfterStorePurchDocument>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<StorePurchDocument>
    Code lines:
    ...
            PurchLine."Document No.",PurchLine."Line No.",PurchHeader."Doc. No. Occurrence",PurchHeaderArchive."Version No.");
    
        OnAfterStorePurchLineArchive(PurchHeader,PurchLine,PurchHeaderArchive,PurchLineArchive);
      UNTIL PurchLine.NEXT = 0;
    
    OnAfterStorePurchDocument(PurchHeader,PurchHeaderArchive); <=====================
Codeunit<ArchiveManagement>.PROCEDURE<OnAfterStorePurchLineArchive>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<StorePurchDocument>
    Code lines:
    ...
        END;
        IF PurchLine."Deferral Code" <> '' THEN
          StoreDeferrals(DeferralUtilities.GetPurchDeferralDocType,PurchLine."Document Type",
            PurchLine."Document No.",PurchLine."Line No.",PurchHeader."Doc. No. Occurrence",PurchHeaderArchive."Version No.");
    
        OnAfterStorePurchLineArchive(PurchHeader,PurchLine,PurchHeaderArchive,PurchLineArchive); <=====================
      UNTIL PurchLine.NEXT = 0;
    
    OnAfterStorePurchDocument(PurchHeader,PurchHeaderArchive);
Codeunit<ArchiveManagement>.PROCEDURE<OnAfterStoreSalesDocument>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<StoreSalesDocument>
    Code lines:
    ...
            SalesLine."Document No.",SalesLine."Line No.",SalesHeader."Doc. No. Occurrence",SalesHeaderArchive."Version No.");
    
        OnAfterStoreSalesLineArchive(SalesHeader,SalesLine,SalesHeaderArchive,SalesLineArchive);
      UNTIL SalesLine.NEXT = 0;
    
    OnAfterStoreSalesDocument(SalesHeader,SalesHeaderArchive); <=====================
Codeunit<ArchiveManagement>.PROCEDURE<OnAfterStoreSalesLineArchive>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<StoreSalesDocument>
    Code lines:
    ...
        END;
        IF SalesLine."Deferral Code" <> '' THEN
          StoreDeferrals(DeferralUtilities.GetSalesDeferralDocType,SalesLine."Document Type",
            SalesLine."Document No.",SalesLine."Line No.",SalesHeader."Doc. No. Occurrence",SalesHeaderArchive."Version No.");
    
        OnAfterStoreSalesLineArchive(SalesHeader,SalesLine,SalesHeaderArchive,SalesLineArchive); <=====================
      UNTIL SalesLine.NEXT = 0;
    
    OnAfterStoreSalesDocument(SalesHeader,SalesHeaderArchive);
Codeunit<ArchiveManagement>.PROCEDURE<OnAfterTransferFromArchToSalesHeader>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<RestoreSalesDocument>
    Code lines:
    ...
      SalesHeader."Shortcut Dimension 1 Code" := SalesHeaderArchive."Shortcut Dimension 1 Code";
      SalesHeader."Shortcut Dimension 2 Code" := SalesHeaderArchive."Shortcut Dimension 2 Code";
      SalesHeader."Dimension Set ID" := SalesHeaderArchive."Dimension Set ID";
      RecordLinkManagement.CopyLinks(SalesHeaderArchive,SalesHeader);
      SalesHeader.LinkSalesDocWithOpportunity(OldOpportunityNo);
      OnAfterTransferFromArchToSalesHeader(SalesHeader,SalesHeaderArchive); <=====================
      SalesHeader.MODIFY(TRUE);
      RestoreSalesLines(SalesHeaderArchive,SalesHeader);
      SalesHeader.Status := SalesHeader.Status::Released;
      ReleaseSalesDoc.Reopen(SalesHeader);
    ...
Codeunit<ArchiveManagement>.PROCEDURE<OnAfterTransferFromArchToSalesLine>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<RestoreSalesLines>
    Code lines:
    ...
            SalesLineArchive."Document No.",
            SalesLineArchive."Line No.",
            SalesHeaderArchive."Doc. No. Occurrence",
            SalesHeaderArchive."Version No.");
          RecordLinkManagement.CopyLinks(SalesLineArchive,SalesLine);
          OnAfterTransferFromArchToSalesLine(SalesLine,SalesLineArchive); <=====================
          MODIFY(TRUE);
        END;
        OnAfterRestoreSalesLine(SalesHeader,SalesLine,SalesHeaderArchive,SalesLineArchive);
      UNTIL SalesLineArchive.NEXT = 0;
Codeunit<ArchiveManagement>.PROCEDURE<OnBeforeAutoArchivePurchDocument>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<AutoArchivePurchDocument>
    Code lines:
    IsHandled := FALSE;
    OnBeforeAutoArchivePurchDocument(PurchaseHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    PurchasesPayablesSetup.GET;
    
    WITH PurchaseHeader DO
      CASE "Document Type" OF
        "Document Type"::Quote:
    ...
Codeunit<ArchiveManagement>.PROCEDURE<OnBeforeAutoArchiveSalesDocument>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<AutoArchiveSalesDocument>
    Code lines:
    IsHandled := FALSE;
    OnBeforeAutoArchiveSalesDocument(SalesHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SalesReceivablesSetup.GET;
    
    WITH SalesHeader DO
      CASE "Document Type" OF
        "Document Type"::Quote:
    ...
Codeunit<ArchiveManagement>.PROCEDURE<OnBeforeCheckIfDocumentIsPartiallyPosted>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<RestoreSalesDocument>
    Code lines:
    ...
      ERROR(Text009,SalesHeaderArchive."Document Type",SalesHeaderArchive."No.");
    
    SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);
    
    DoCheck := TRUE;
    OnBeforeCheckIfDocumentIsPartiallyPosted(SalesHeaderArchive,DoCheck); <=====================
    
    IF (SalesHeader."Document Type" = SalesHeader."Document Type"::Order) AND DoCheck THEN BEGIN
      SalesShptHeader.RESET;
      SalesShptHeader.SETCURRENTKEY("Order No.");
    ...
Codeunit<ArchiveManagement>.PROCEDURE<OnBeforePurchHeaderArchiveInsert>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<StorePurchDocument>
    Code lines:
    ...
    PurchHeaderArchive."Time Archived" := TIME;
    PurchHeaderArchive."Version No." := GetNextVersionNo(
        DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."No.",PurchHeader."Doc. No. Occurrence");
    PurchHeaderArchive."Interaction Exist" := InteractionExist;
    RecordLinkManagement.CopyLinks(PurchHeader,PurchHeaderArchive);
    OnBeforePurchHeaderArchiveInsert(PurchHeaderArchive,PurchHeader); <=====================
    PurchHeaderArchive.INSERT;
    OnAfterPurchHeaderArchiveInsert(PurchHeaderArchive,PurchHeader);
    
    StorePurchDocumentComments(
    ...
Codeunit<ArchiveManagement>.PROCEDURE<OnBeforePurchLineArchiveInsert>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<StorePurchDocument>
    Code lines:
    ...
          INIT;
          TRANSFERFIELDS(PurchLine);
          "Doc. No. Occurrence" := PurchHeader."Doc. No. Occurrence";
          "Version No." := PurchHeaderArchive."Version No.";
          RecordLinkManagement.CopyLinks(PurchLine,PurchLineArchive);
          OnBeforePurchLineArchiveInsert(PurchLineArchive,PurchLine); <=====================
          INSERT;
        END;
        IF PurchLine."Deferral Code" <> '' THEN
          StoreDeferrals(DeferralUtilities.GetPurchDeferralDocType,PurchLine."Document Type",
    ...
Codeunit<ArchiveManagement>.PROCEDURE<OnBeforeRestoreSalesDocument>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<RestoreSalesDocument>
    Code lines:
    OnBeforeRestoreSalesDocument(SalesHeaderArchive,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT SalesHeader.GET(SalesHeaderArchive."Document Type",SalesHeaderArchive."No.") THEN
      ERROR(Text009,SalesHeaderArchive."Document Type",SalesHeaderArchive."No.");
    
    SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);
    
    DoCheck := TRUE;
    ...
Codeunit<ArchiveManagement>.PROCEDURE<OnBeforeSalesHeaderArchiveInsert>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<StoreSalesDocument>
    Code lines:
    ...
    SalesHeaderArchive."Time Archived" := TIME;
    SalesHeaderArchive."Version No." := GetNextVersionNo(
        DATABASE::"Sales Header",SalesHeader."Document Type",SalesHeader."No.",SalesHeader."Doc. No. Occurrence");
    SalesHeaderArchive."Interaction Exist" := InteractionExist;
    RecordLinkManagement.CopyLinks(SalesHeader,SalesHeaderArchive);
    OnBeforeSalesHeaderArchiveInsert(SalesHeaderArchive,SalesHeader); <=====================
    SalesHeaderArchive.INSERT;
    OnAfterSalesHeaderArchiveInsert(SalesHeaderArchive,SalesHeader);
    
    StoreSalesDocumentComments(
    ...
Codeunit<ArchiveManagement>.PROCEDURE<OnBeforeSalesHeaderInsert>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<RestoreSalesDocument>
    Code lines:
    ...
    
      SalesHeader.INIT;
      SalesHeader.SetHideValidationDialog(TRUE);
      SalesHeader."Document Type" := SalesHeaderArchive."Document Type";
      SalesHeader."No." := SalesHeaderArchive."No.";
      OnBeforeSalesHeaderInsert(SalesHeader,SalesHeaderArchive); <=====================
      SalesHeader.INSERT(TRUE);
      SalesHeader.TRANSFERFIELDS(SalesHeaderArchive);
      SalesHeader.Status := SalesHeader.Status::Open;
      IF SalesHeaderArchive."Sell-to Contact No." <> '' THEN
    ...
Codeunit<ArchiveManagement>.PROCEDURE<OnBeforeSalesLineArchiveInsert>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<StoreSalesDocument>
    Code lines:
    ...
          INIT;
          TRANSFERFIELDS(SalesLine);
          "Doc. No. Occurrence" := SalesHeader."Doc. No. Occurrence";
          "Version No." := SalesHeaderArchive."Version No.";
          RecordLinkManagement.CopyLinks(SalesLine,SalesLineArchive);
          OnBeforeSalesLineArchiveInsert(SalesLineArchive,SalesLine); <=====================
          INSERT;
        END;
        IF SalesLine."Deferral Code" <> '' THEN
          StoreDeferrals(DeferralUtilities.GetSalesDeferralDocType,SalesLine."Document Type",
    ...
Codeunit<ArchiveManagement>.PROCEDURE<OnRestoreDocumentOnAfterDeleteSalesHeader>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<RestoreSalesDocument>
    Code lines:
    ...
        SalesHeader."Opportunity No." := '';
      END;
      OnRestoreDocumentOnBeforeDeleteSalesHeader(SalesHeader);
      SalesHeader.DELETELINKS;
      SalesHeader.DELETE(TRUE);
      OnRestoreDocumentOnAfterDeleteSalesHeader(SalesHeader); <=====================
    
      SalesHeader.INIT;
      SalesHeader.SetHideValidationDialog(TRUE);
      SalesHeader."Document Type" := SalesHeaderArchive."Document Type";
    ...
Codeunit<ArchiveManagement>.PROCEDURE<OnRestoreDocumentOnBeforeDeleteSalesHeader>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<RestoreSalesDocument>
    Code lines:
    ...
      SalesHeaderArchive.CALCFIELDS("Work Description");
      IF SalesHeader."Opportunity No." <> '' THEN BEGIN
        OldOpportunityNo := SalesHeader."Opportunity No.";
        SalesHeader."Opportunity No." := '';
      END;
      OnRestoreDocumentOnBeforeDeleteSalesHeader(SalesHeader); <=====================
      SalesHeader.DELETELINKS;
      SalesHeader.DELETE(TRUE);
      OnRestoreDocumentOnAfterDeleteSalesHeader(SalesHeader);
    
    ...
Codeunit<ArchiveManagement>.PROCEDURE<OnRestoreSalesLinesOnAfterSalesLineInsert>
  Raised in: Codeunit<ArchiveManagement>.PROCEDURE<RestoreSalesLines>
    Code lines:
    ...
      REPEAT
        WITH SalesLine DO BEGIN
          INIT;
          TRANSFERFIELDS(SalesLineArchive);
          INSERT(TRUE);
          OnRestoreSalesLinesOnAfterSalesLineInsert(SalesLine,SalesLineArchive); <=====================
          IF Type <> Type::" " THEN BEGIN
            VALIDATE("No.");
            IF SalesLineArchive."Variant Code" <> '' THEN
              VALIDATE("Variant Code",SalesLineArchive."Variant Code");
    ...
Codeunit<Email Logging Dispatcher>.PROCEDURE<OnAfterInsertInteractionLogEntry>
  Raised in: Codeunit<Email Logging Dispatcher>.PROCEDURE<InsertInteractionLogEntry>
    Code lines:
    ...
    InteractLogEntry."Entry No." := EntryNo;
    InteractLogEntry."Correspondence Type" := InteractLogEntry."Correspondence Type"::Email;
    InteractLogEntry.CopyFromSegment(SegLine);
    InteractLogEntry."E-Mail Logged" := TRUE;
    InteractLogEntry.INSERT;
    OnAfterInsertInteractionLogEntry; <=====================
Codeunit<Integration Management>.PROCEDURE<OnDeleteIntegrationRecord>
  Raised in: Codeunit<Integration Management>.PROCEDURE<OnDatabaseDelete>
    Code lines:
    ...
        // Archive
        IntegrationRecordArchive.TRANSFERFIELDS(IntegrationRecord);
        IF IntegrationRecordArchive.INSERT THEN;
    
        IF NOT SkipDeletion THEN BEGIN
          OnDeleteIntegrationRecord(RecRef); <=====================
          IntegrationRecord."Deleted On" := TimeStamp;
        END;
    
        CLEAR(IntegrationRecord."Record ID");
    ...
Codeunit<Integration Management>.PROCEDURE<OnEnabledDatabaseTriggersSetup>
  Raised in: Codeunit<Integration Management>.PROCEDURE<GetDatabaseTableTriggerSetup>
    Code lines:
    ...
      EXIT;
    
    IF NOT GetIntegrationActivated THEN
      EXIT;
    
    OnEnabledDatabaseTriggersSetup(TableID,Enabled); <=====================
    IF NOT Enabled THEN
      Enabled := IsIntegrationRecord(TableID) OR IsIntegrationRecordChild(TableID);
    
    IF Enabled THEN BEGIN
    ...
Codeunit<Integration Management>.PROCEDURE<OnGetIntegrationActivated>
  Raised in: Codeunit<Integration Management>.PROCEDURE<GetIntegrationActivated>
    Code lines:
    OnGetIntegrationDisabled(IsSyncDisabled);
    IF IsSyncDisabled THEN
      EXIT(FALSE);
    IF NOT IntegrationIsActivated THEN BEGIN
      OnGetIntegrationActivated(IsSyncEnabled); <=====================
      IF IsSyncEnabled THEN
        IntegrationIsActivated := TRUE
      ELSE
        IntegrationIsActivated := IsCRMConnectionEnabled OR GraphSyncRunner.IsGraphSyncEnabled;
    END;
    ...
Codeunit<Integration Management>.PROCEDURE<OnGetIntegrationDisabled>
  Raised in: Codeunit<Integration Management>.PROCEDURE<GetIntegrationActivated>
    Code lines:
    OnGetIntegrationDisabled(IsSyncDisabled); <=====================
    IF IsSyncDisabled THEN
      EXIT(FALSE);
    IF NOT IntegrationIsActivated THEN BEGIN
      OnGetIntegrationActivated(IsSyncEnabled);
      IF IsSyncEnabled THEN
        IntegrationIsActivated := TRUE
      ELSE
        IntegrationIsActivated := IsCRMConnectionEnabled OR GraphSyncRunner.IsGraphSyncEnabled;
    END;
    ...
Codeunit<Integration Management>.PROCEDURE<OnGetPredefinedIdValue>
  Raised in: Codeunit<Integration Management>.PROCEDURE<GetPredefinedIdValue>
    Code lines:
    ...
        Handled := TRUE;
      DATABASE::Job:
        GraphMgtGeneralTools.HandleGetPredefinedIdValue(Id,RecRef,Handled,
          DATABASE::Job,DummyJob.FIELDNO(Id));
      ELSE
        OnGetPredefinedIdValue(Id,RecRef,Handled) <=====================
    END;
Codeunit<Integration Management>.PROCEDURE<OnIsIntegrationRecord>
  Raised in: Codeunit<Integration Management>.PROCEDURE<IsIntegrationRecord>
    Code lines:
    OnIsIntegrationRecord(TableID,isIntegrationRecord); <=====================
    IF isIntegrationRecord THEN
      EXIT(TRUE);
    EXIT(TableID IN
      [DATABASE::Resource,
       DATABASE::"Shipping Agent",
       DATABASE::"Salesperson/Purchaser",
       DATABASE::Customer,
       DATABASE::Vendor,
       DATABASE::Dimension,
    ...
Codeunit<Integration Management>.PROCEDURE<OnIsIntegrationRecordChild>
  Raised in: Codeunit<Integration Management>.PROCEDURE<IsIntegrationRecordChild>
    Code lines:
    OnIsIntegrationRecordChild(TableID,isIntegrationRecordChild); <=====================
    IF isIntegrationRecordChild THEN
      EXIT(TRUE);
    
    EXIT(TableID IN
      [DATABASE::"Sales Line",
       DATABASE::"Currency Exchange Rate",
       DATABASE::"Sales Invoice Line",
       DATABASE::"Sales Cr.Memo Line",
       DATABASE::"Contact Alt. Address",
    ...
Codeunit<Integration Management>.PROCEDURE<OnUpdateReferencedIdField>
  Raised in: Codeunit<Integration Management>.PROCEDURE<UpdateReferencedIdField>
    Code lines:
    ...
        Handled := TRUE;
      DATABASE::Job:
        GraphMgtGeneralTools.HandleUpdateReferencedIdFieldOnItem(RecRef,Id,Handled,
          DATABASE::Job,DummyJob.FIELDNO(Id));
      ELSE
        OnUpdateReferencedIdField(RecRef,Id,Handled); <=====================
    END;
Codeunit<Integration Management>.PROCEDURE<OnUpdateRelatedRecordIdFields>
  Raised in: Codeunit<Integration Management>.PROCEDURE<InsertUpdateIntegrationRecord>
    Code lines:
    IF IsIntegrationRecord(RecRef.NUMBER) THEN
      WITH IntegrationRecord DO BEGIN
        IF FindByRecordId(RecRef.RECORDID) THEN BEGIN
          "Modified On" := IntegrationLastModified;
          UpdateReferencedIdField("Integration ID",RecRef,Handled);
          OnUpdateRelatedRecordIdFields(RecRef); <=====================
          MODIFY;
        END ELSE BEGIN
          RESET;
          INIT;
    ...
  Raised in: Codeunit<Integration Management>.PROCEDURE<InsertUpdateIntegrationRecord>
    Code lines:
    IF IsIntegrationRecord(RecRef.NUMBER) THEN
      WITH IntegrationRecord DO BEGIN
        IF FindByRecordId(RecRef.RECORDID) THEN BEGIN
          "Modified On" := IntegrationLastModified;
          UpdateReferencedIdField("Integration ID",RecRef,Handled);
          OnUpdateRelatedRecordIdFields(RecRef); <=====================
          MODIFY;
        END ELSE BEGIN
          RESET;
          INIT;
    ...
Codeunit<Employee/Resource Update>.PROCEDURE<OnAfterCalculateResourceUpdateNeeded>
  Raised in: Codeunit<Employee/Resource Update>.PROCEDURE<IsResourceUpdateNeeded>
    Code lines:
    ...
      (OldEmployee.City <> Employee.City) OR
      (OldEmployee."Country/Region Code" <> Employee."Country/Region Code") OR
      (OldEmployee."Social Security No." <> Employee."Social Security No.") OR
      (OldEmployee."Employment Date" <> Employee."Employment Date");
    
    OnAfterCalculateResourceUpdateNeeded(Employee,OldEmployee,UpdateNeeded); <=====================
    
    EXIT(UpdateNeeded);
Codeunit<Employee/Resource Update>.PROCEDURE<OnAfterUpdateResource>
  Raised in: Codeunit<Employee/Resource Update>.PROCEDURE<ResUpdate>
    Code lines:
    ...
    Res.County := Employee.County;
    Res.City := Employee.City;
    Res."Country/Region Code" := Employee."Country/Region Code";
    Res."Social Security No." := Employee."Social Security No.";
    Res."Employment Date" := Employee."Employment Date";
    OnAfterUpdateResource(Res); <=====================
    Res.MODIFY(TRUE)
Codeunit<Exchange Web Services Server>.PROCEDURE<OnBeforeSaveHTMLEmailToInbox>
  Raised in: Codeunit<Exchange Web Services Server>.PROCEDURE<SaveHTMLEmailToInbox>
    Code lines:
    OnBeforeSaveHTMLEmailToInbox(EmailSubject,EmailBodyHTML,SenderAddress,SenderName,RecipientAddress); <=====================
    Service.SaveHtmlMessageToInbox(EmailSubject,EmailBodyHTML,SenderAddress,SenderName,RecipientAddress);
Codeunit<Exchange Web Services Server>.PROCEDURE<OnBeforeSendEmailMessageWithAttachment>
  Raised in: Codeunit<Exchange Web Services Server>.PROCEDURE<SendEmailMessageWithAttachment>
    Code lines:
    OnBeforeSendEmailMessageWithAttachment(Subject,RecipientAddress,BodyHTML,SenderAddress); <=====================
    Service.SendMessageAndSaveToSentItems(Subject,RecipientAddress,BodyHTML,AttachmentPath,SenderAddress,'');
Codeunit<CRM Integration Management>.PROCEDURE<OnAfterCRMIntegrationEnabled>
  Raised in: Codeunit<CRM Integration Management>.PROCEDURE<IsCRMIntegrationEnabled>
    Code lines:
    ...
            ELSE BEGIN
              CRMIntegrationEnabledState := CRMIntegrationEnabledState::"Enabled But Not For Current User";
              CRMIntegrationEnabledLastError := GetLastErrorMessage;
            END;
          IF CRMIntegrationEnabledState = CRMIntegrationEnabledState::Enabled THEN
            OnAfterCRMIntegrationEnabled; <=====================
        END;
      END;
    END;
    
Codeunit<CRM Setup Defaults>.PROCEDURE<OnAfterResetCustomerAccountMapping>
  Raised in: Codeunit<CRM Setup Defaults>.PROCEDURE<ResetCustomerAccountMapping>
    Code lines:
    ...
      CRMAccount.FIELDNO(PrimaryContactId),
      IntegrationFieldMapping.Direction::Bidirectional,
      '',TRUE,FALSE);
    SetIntegrationFieldMappingClearValueOnFailedSync;
    
    OnAfterResetCustomerAccountMapping(IntegrationTableMappingName); <=====================
    
    RecreateJobQueueEntryFromIntTableMapping(IntegrationTableMapping,30,ShouldRecreateJobQueueEntry,720);
Codeunit<Integration Record Synch.>.PROCEDURE<OnTransferFieldData>
  Raised in: Codeunit<Integration Record Synch.>.PROCEDURE<TransferFieldData>
    Code lines:
    // OnTransferFieldData is an event for handling an exceptional mapping that is not implemented by integration records <=====================
    OnTransferFieldData(SourceFieldRef,DestinationFieldRef,NewValue,IsValueFound,NeedsConversion); <=====================
    IF NOT IsValueFound THEN
      NewValue := SourceFieldRef.VALUE
    ELSE
      IF NOT NeedsConversion THEN BEGIN
        IF SkipNullGUID AND NewValue.ISGUID THEN
          IF ISNULLGUID(NewValue) THEN
            EXIT(FALSE);
        EXIT(SetDestinationValue(DestinationFieldRef,NewValue,ValidateDestinationField));
    ...
Codeunit<CRM Integration Table Synch.>.PROCEDURE<OnQueryPostFilterIgnoreRecord>
  Raised in: Codeunit<CRM Integration Table Synch.>.PROCEDURE<SynchNAVTableToCRM>
    Code lines:
    ...
      CacheFilteredNAVTable(SourceRecordRef,IntegrationTableMapping);
      ForceModify := IntegrationTableMapping."Delete After Synchronization";
      REPEAT
        IgnoreRecord := FALSE;
        IF SourceRecordRef.GET(IntegrationRecord."Record ID") THEN BEGIN
          OnQueryPostFilterIgnoreRecord(SourceRecordRef,IgnoreRecord); <=====================
          IF NOT IgnoreRecord THEN BEGIN
            IF NOT TempCRMIntegrationRecord.IsIntegrationIdCoupled(IntegrationRecord."Integration ID") THEN
              IgnoreRecord := IntegrationTableMapping."Synch. Only Coupled Records";
            IF NOT IgnoreRecord THEN
    ...
  Raised in: Codeunit<CRM Integration Table Synch.>.PROCEDURE<SynchCRMTableToNAV>
    Code lines:
    ...
    CreateCRMIntegrationRecordClone(IntegrationTableMapping."Table ID",TempCRMIntegrationRecord);
    ForceModify := IntegrationTableMapping."Delete After Synchronization";
    IF SourceRecordRef.FINDSET THEN
      REPEAT
        IgnoreRecord := FALSE;
        OnQueryPostFilterIgnoreRecord(SourceRecordRef,IgnoreRecord); <=====================
        IF NOT IgnoreRecord THEN BEGIN
          IF TempCRMIntegrationRecord.IsCRMRecordRefCoupled(SourceRecordRef) THEN
            TempCRMIntegrationRecord.DELETE
          ELSE
    ...
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnAfterApplyRecordTemplate>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<ApplyConfigTemplate>
    Code lines:
    ...
      OnBeforeApplyRecordTemplate(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,ConfigTemplateCode);
    
      IF ConfigTemplateHeader.GET(ConfigTemplateCode) THEN BEGIN
        ConfigTemplateManagement.UpdateRecord(ConfigTemplateHeader,DestinationRecordRef);
    
        OnAfterApplyRecordTemplate(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef); <=====================
      END ELSE BEGIN
        SynchAction := SynchActionType::Fail;
        LogSynchError(
          SourceRecordRef,DestinationRecordRef,
    ...
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnAfterInsertRecord>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<InsertRecord>
    Code lines:
    ...
    DestinationRecordRef.INSERT(TRUE);
    ApplyConfigTemplate(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,JobId,SynchAction);
    IF SynchAction <> SynchActionType::Fail THEN BEGIN
      UpdateIntegrationRecordCoupling(
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType);
      OnAfterInsertRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef); <=====================
      UpdateIntegrationRecordTimestamp(
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType,JobId);
    END;
    COMMIT;
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnAfterModifyRecord>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<ModifyRecord>
    Code lines:
    OnBeforeModifyRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef);
    
    IF DestinationRecordRef.MODIFY(TRUE) THEN BEGIN
      UpdateIntegrationRecordCoupling(
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType);
      OnAfterModifyRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef); <=====================
      UpdateIntegrationRecordTimestamp(
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType,JobId);
    END ELSE BEGIN
      OnErrorWhenModifyingRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef);
    ...
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnAfterTransferRecordFields>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<TransferFields>
    Code lines:
    ...
    
    IntegrationRecordSynch.SetParameters(SourceRecordRef,DestinationRecordRef,SynchAction <> SynchActionType::Insert);
    IF IntegrationRecordSynch.RUN THEN BEGIN
      IF ConflictFound AND IntegrationRecordSynch.GetWasModified THEN
        EXIT;
      OnAfterTransferRecordFields(SourceRecordRef,DestinationRecordRef, <=====================
        AdditionalFieldsModified,SynchAction <> SynchActionType::Insert);
      AdditionalFieldsModified := AdditionalFieldsModified OR IntegrationRecordSynch.GetWasModified;
    END ELSE BEGIN
      SynchAction := SynchActionType::Fail;
    ...
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnAfterUnchangedRecordHandled>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<SynchRecord>
    Code lines:
    ...
          IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,SynchAction,JobId,IntegrationTableConnectionType);
      SynchActionType::IgnoreUnchanged:
        BEGIN
          UpdateIntegrationRecordCoupling(
            IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType);
          OnAfterUnchangedRecordHandled(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef); <=====================
          UpdateIntegrationRecordTimestamp(
            IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType,JobId);
        END;
    END;
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnBeforeApplyRecordTemplate>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<ApplyConfigTemplate>
    Code lines:
    IF DestinationRecordRef.NUMBER = IntegrationTableMapping."Integration Table ID" THEN
      ConfigTemplateCode := IntegrationTableMapping."Int. Tbl. Config Template Code"
    ELSE
      ConfigTemplateCode := IntegrationTableMapping."Table Config Template Code";
    IF ConfigTemplateCode <> '' THEN BEGIN
      OnBeforeApplyRecordTemplate(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,ConfigTemplateCode); <=====================
    
      IF ConfigTemplateHeader.GET(ConfigTemplateCode) THEN BEGIN
        ConfigTemplateManagement.UpdateRecord(ConfigTemplateHeader,DestinationRecordRef);
    
    ...
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnBeforeInsertRecord>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<InsertRecord>
    Code lines:
    OnBeforeInsertRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef); <=====================
    DestinationRecordRef.INSERT(TRUE);
    ApplyConfigTemplate(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,JobId,SynchAction);
    IF SynchAction <> SynchActionType::Fail THEN BEGIN
      UpdateIntegrationRecordCoupling(
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType);
      OnAfterInsertRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef);
      UpdateIntegrationRecordTimestamp(
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType,JobId);
    END;
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnBeforeModifyRecord>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<ModifyRecord>
    Code lines:
    OnBeforeModifyRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef); <=====================
    
    IF DestinationRecordRef.MODIFY(TRUE) THEN BEGIN
      UpdateIntegrationRecordCoupling(
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType);
      OnAfterModifyRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef);
      UpdateIntegrationRecordTimestamp(
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType,JobId);
    END ELSE BEGIN
      OnErrorWhenModifyingRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef);
    ...
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnBeforeTransferRecordFields>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<TransferFields>
    Code lines:
    OnBeforeTransferRecordFields(SourceRecordRef,DestinationRecordRef); <=====================
    
    IntegrationRecordSynch.SetParameters(SourceRecordRef,DestinationRecordRef,SynchAction <> SynchActionType::Insert);
    IF IntegrationRecordSynch.RUN THEN BEGIN
      IF ConflictFound AND IntegrationRecordSynch.GetWasModified THEN
        EXIT;
      OnAfterTransferRecordFields(SourceRecordRef,DestinationRecordRef,
        AdditionalFieldsModified,SynchAction <> SynchActionType::Insert);
      AdditionalFieldsModified := AdditionalFieldsModified OR IntegrationRecordSynch.GetWasModified;
    END ELSE BEGIN
    ...
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnErrorWhenModifyingRecord>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<ModifyRecord>
    Code lines:
    ...
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType);
      OnAfterModifyRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef);
      UpdateIntegrationRecordTimestamp(
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType,JobId);
    END ELSE BEGIN
      OnErrorWhenModifyingRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef); <=====================
      SynchAction := SynchActionType::Fail;
      LogSynchError(
        SourceRecordRef,DestinationRecordRef,
        STRSUBSTNO(ModifyFailedErr,DestinationRecordRef.CAPTION,TextManagement.RemoveMessageTrailingDots(GETLASTERRORTEXT)),JobId);
    ...
Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<OnFindUncoupledDestinationRecord>
  Raised in: Codeunit<Integration Rec. Synch. Invoke>.PROCEDURE<FindAndCoupleDestinationRecord>
    Code lines:
    OnFindUncoupledDestinationRecord( <=====================
      IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,DestinationIsDeleted,DestinationFound);
    IF DestinationFound THEN BEGIN
      UpdateIntegrationRecordCoupling(
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType);
      UpdateIntegrationRecordTimestamp(
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType,JobIdContext);
    END;
Codeunit<Integration Rec. Delete Invoke>.PROCEDURE<OnAfterDeleteRecord>
  Raised in: Codeunit<Integration Rec. Delete Invoke>.PROCEDURE<DeleteRecord>
    Code lines:
    ...
    OnBeforeDeleteRecord(IntegrationTableMapping,DestinationRecordRef);
    
    IF NOT DestinationRecordRef.DELETE THEN
      LogSynchError(DestinationRecordRef,GETLASTERRORTEXT,JobId);
    
    OnAfterDeleteRecord(IntegrationTableMapping,DestinationRecordRef); <=====================
    COMMIT;
Codeunit<Integration Rec. Delete Invoke>.PROCEDURE<OnBeforeDeleteRecord>
  Raised in: Codeunit<Integration Rec. Delete Invoke>.PROCEDURE<DeleteRecord>
    Code lines:
    ...
      EXIT;
    
    IF SynchAction <> SynchActionType::Delete THEN
      EXIT;
    
    OnBeforeDeleteRecord(IntegrationTableMapping,DestinationRecordRef); <=====================
    
    IF NOT DestinationRecordRef.DELETE THEN
      LogSynchError(DestinationRecordRef,GETLASTERRORTEXT,JobId);
    
    ...
Codeunit<Available Management>.PROCEDURE<OnAfterCalcAvailableQty>
  Raised in: Codeunit<Available Management>.PROCEDURE<CalcAvailableQty>
    Code lines:
    ...
        "Qty. on Job Order" -
        "Qty. on Purch. Return" +
        "Qty. on Assembly Order" +
        "Qty. on Sales Return";
    
      OnAfterCalcAvailableQty(Item,CalcAvailable,PlannedOrderReceiptDate,AvailableQty); <=====================
    
      EXIT(AvailableQty);
    END;
Codeunit<Available Management>.PROCEDURE<OnAfterCalcExpectedQty>
  Raised in: Codeunit<Available Management>.PROCEDURE<ExpectedQtyOnHand>
    Code lines:
    ...
      Available := CalcAvailableQty(Item,TRUE,PlannedOrderReceiptDate) - ExtraNetNeed;
    Item.COPY(CopyOfItem);
    
    ExpectedQty := CalcAvailableQty(Item,FALSE,0D) - ExtraNetNeed;
    
    OnAfterCalcExpectedQty(Item,CalcAvailable,ExtraNetNeed,Available,PlannedOrderReceiptDate,ExpectedQty); <=====================
    
    EXIT(ExpectedQty);
Codeunit<Unit of Measure Management>.PROCEDURE<OnBeforeCubageRndPrecision>
  Raised in: Codeunit<Unit of Measure Management>.PROCEDURE<CubageRndPrecision>
    Code lines:
    OnBeforeCubageRndPrecision(RoundingPrecision); <=====================
    IF RoundingPrecision = 0 THEN
      RoundingPrecision := 0.00001;
    EXIT(RoundingPrecision);
Codeunit<Unit of Measure Management>.PROCEDURE<OnBeforeGetQtyPerUnitOfMeasure>
  Raised in: Codeunit<Unit of Measure Management>.PROCEDURE<GetQtyPerUnitOfMeasure>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetQtyPerUnitOfMeasure(Item,UnitOfMeasureCode,QtyPerUnitOfMeasure,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(QtyPerUnitOfMeasure);
    
    Item.TESTFIELD("No.");
    IF UnitOfMeasureCode IN [Item."Base Unit of Measure",''] THEN
      EXIT(1);
    IF (Item."No." <> ItemUnitOfMeasure."Item No.") OR
       (UnitOfMeasureCode <> ItemUnitOfMeasure.Code)
    ...
Codeunit<Unit of Measure Management>.PROCEDURE<OnBeforeGetResQtyPerUnitOfMeasure>
  Raised in: Codeunit<Unit of Measure Management>.PROCEDURE<GetResQtyPerUnitOfMeasure>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetResQtyPerUnitOfMeasure(Resource,UnitOfMeasureCode,QtyPerUnitOfMeasure,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(QtyPerUnitOfMeasure);
    
    Resource.TESTFIELD("No.");
    IF UnitOfMeasureCode IN [Resource."Base Unit of Measure",''] THEN
      EXIT(1);
    IF (Resource."No." <> ResourceUnitOfMeasure."Resource No.") OR
       (UnitOfMeasureCode <> ResourceUnitOfMeasure.Code)
    ...
Codeunit<Unit of Measure Management>.PROCEDURE<OnBeforeQtyRndPrecision>
  Raised in: Codeunit<Unit of Measure Management>.PROCEDURE<QtyRndPrecision>
    Code lines:
    OnBeforeQtyRndPrecision(RoundingPrecision); <=====================
    IF RoundingPrecision = 0 THEN
      RoundingPrecision := 0.00001;
    EXIT(RoundingPrecision);
Codeunit<Unit of Measure Management>.PROCEDURE<OnBeforeTimeRndPrecision>
  Raised in: Codeunit<Unit of Measure Management>.PROCEDURE<TimeRndPrecision>
    Code lines:
    OnBeforeTimeRndPrecision(RoundingPrecision); <=====================
    IF RoundingPrecision = 0 THEN
      RoundingPrecision := 0.00001;
    EXIT(RoundingPrecision);
Codeunit<Unit of Measure Management>.PROCEDURE<OnBeforeWeightRndPrecision>
  Raised in: Codeunit<Unit of Measure Management>.PROCEDURE<WeightRndPrecision>
    Code lines:
    OnBeforeWeightRndPrecision(RoundingPrecision); <=====================
    IF RoundingPrecision = 0 THEN
      RoundingPrecision := 0.00001;
    EXIT(RoundingPrecision);
Codeunit<AddOnIntegrManagement>.PROCEDURE<OnBeforeCheckReceiptOrderStatus>
  Raised in: Codeunit<AddOnIntegrManagement>.PROCEDURE<CheckReceiptOrderStatus>
    Code lines:
    OnBeforeCheckReceiptOrderStatus(SalesLine,Checked); <=====================
    IF Checked THEN
      EXIT;
    
    IF SalesLine."Document Type" <> SalesLine."Document Type"::Order THEN
      EXIT;
    
    IF SalesLine.Type <> SalesLine.Type::Item THEN
      EXIT;
    
Codeunit<Output Jnl.-Expl. Route>.PROCEDURE<OnAfterCalcBaseQtyToPost>
  Raised in: Codeunit<Output Jnl.-Expl. Route>.<OnRun>
    Code lines:
    ...
            CostCalcMgt.CalcQtyAdjdForRoutingScrap(
              ProdOrderLine."Quantity (Base)",
              ProdOrderRtngLine."Scrap Factor % (Accumulated)",
              ProdOrderRtngLine."Fixed Scrap Qty. (Accum.)") -
            CostCalcMgt.CalcActOutputQtyBase(ProdOrderLine,ProdOrderRtngLine);
          OnAfterCalcBaseQtyToPost(ProdOrderRtngLine,BaseQtyToPost); <=====================
          IF BaseQtyToPost > 0 THEN BEGIN
            SkipRecord := FALSE;
            IsLastOperation := ProdOrderRtngLine."Next Operation No." = '';
            OnBeforeInsertOutputJnlLineWithRtngLine(Rec,ProdOrderLine,SkipRecord,IsLastOperation,ProdOrderRtngLine);
    ...
Codeunit<Output Jnl.-Expl. Route>.PROCEDURE<OnAfterInsertItemJnlLine>
  Raised in: Codeunit<Output Jnl.-Expl. Route>.PROCEDURE<InsertOutputJnlLine>
    Code lines:
    ...
    OnBeforeOutputItemJnlLineInsert(ItemJnlLine,LastOperation);
    DimMgt.UpdateGlobalDimFromDimSetID(
      ItemJnlLine."Dimension Set ID",ItemJnlLine."Shortcut Dimension 1 Code",ItemJnlLine."Shortcut Dimension 2 Code");
    ItemJnlLine.INSERT;
    
    OnAfterInsertItemJnlLine(ItemJnlLine); <=====================
    
    LastItemJnlLine := ItemJnlLine;
Codeunit<Output Jnl.-Expl. Route>.PROCEDURE<OnBeforeDeleteItemJnlLine>
  Raised in: Codeunit<Output Jnl.-Expl. Route>.<OnRun>
    Code lines:
    ...
        END;
    UNTIL ProdOrderLine.NEXT = 0;
    
    ItemJnlLineReserve.DeleteLine(Rec);
    
    OnBeforeDeleteItemJnlLine(Rec); <=====================
    DELETE;
Codeunit<Output Jnl.-Expl. Route>.PROCEDURE<OnBeforeInsertOutputJnlLineWithoutRtngLine>
  Raised in: Codeunit<Output Jnl.-Expl. Route>.<OnRun>
    Code lines:
    ...
              ItemTrackingMgt.CopyItemTracking(ProdOrderLine.RowID1,LastItemJnlLine.RowID1,FALSE);
          END;
        UNTIL ProdOrderRtngLine.NEXT = 0;
      END ELSE
        IF ProdOrderLine."Remaining Quantity" > 0 THEN BEGIN
          OnBeforeInsertOutputJnlLineWithoutRtngLine(Rec,ProdOrderLine); <=====================
          InsertOutputJnlLine(
            Rec,NextLineNo,LineSpacing,
            ProdOrderLine."Line No.",
            ProdOrderLine."Item No.",
    ...
Codeunit<Output Jnl.-Expl. Route>.PROCEDURE<OnBeforeInsertOutputJnlLineWithRtngLine>
  Raised in: Codeunit<Output Jnl.-Expl. Route>.<OnRun>
    Code lines:
    ...
            CostCalcMgt.CalcActOutputQtyBase(ProdOrderLine,ProdOrderRtngLine);
          OnAfterCalcBaseQtyToPost(ProdOrderRtngLine,BaseQtyToPost);
          IF BaseQtyToPost > 0 THEN BEGIN
            SkipRecord := FALSE;
            IsLastOperation := ProdOrderRtngLine."Next Operation No." = '';
            OnBeforeInsertOutputJnlLineWithRtngLine(Rec,ProdOrderLine,SkipRecord,IsLastOperation,ProdOrderRtngLine); <=====================
            InsertOutputJnlLine(
              Rec,NextLineNo,LineSpacing,
              ProdOrderLine."Line No.",
              ProdOrderLine."Item No.",
    ...
Codeunit<Output Jnl.-Expl. Route>.PROCEDURE<OnBeforeOutputItemJnlLineInsert>
  Raised in: Codeunit<Output Jnl.-Expl. Route>.PROCEDURE<InsertOutputJnlLine>
    Code lines:
    ...
    IF ItemJnlLine.SubcontractingWorkCenterUsed THEN
      ItemJnlLine.VALIDATE("Output Quantity",0)
    ELSE
      ItemJnlLine.VALIDATE("Output Quantity",QtyToPost);
    
    OnBeforeOutputItemJnlLineInsert(ItemJnlLine,LastOperation); <=====================
    DimMgt.UpdateGlobalDimFromDimSetID(
      ItemJnlLine."Dimension Set ID",ItemJnlLine."Shortcut Dimension 1 Code",ItemJnlLine."Shortcut Dimension 2 Code");
    ItemJnlLine.INSERT;
    
    ...
Codeunit<Prod. Order Status Management>.PROCEDURE<OnAfterChangeStatusOnProdOrder>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<ChangeStatusOnProdOrder>
    Code lines:
    ...
    END ELSE BEGIN
      TransProdOrder(ProdOrder);
      FlushProdOrder(ProdOrder,NewStatus,NewPostingDate);
      WhseProdRelease.Release(ProdOrder);
    END;
    OnAfterChangeStatusOnProdOrder(ProdOrder,ToProdOrder); <=====================
    
    COMMIT;
    
    CLEAR(InvtAdjmt);
Codeunit<Prod. Order Status Management>.PROCEDURE<OnAfterToProdOrderLineModify>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<TransProdOrderLine>
    Code lines:
    ...
            ReserveProdOrderLine.TransferPOLineToPOLine(FromProdOrderLine,ToProdOrderLine,0,TRUE);
          END;
          ToProdOrderLine.VALIDATE("Unit Cost","Unit Cost");
          OnCopyFromProdOrderLine(ToProdOrderLine,FromProdOrderLine);
          ToProdOrderLine.MODIFY;
          OnAfterToProdOrderLineModify(ToProdOrderLine,FromProdOrderLine,NewStatus); <=====================
        UNTIL NEXT = 0;
        OnAfterTransProdOrderLines(FromProdOrder,ToProdOrder);
        DELETEALL;
      END;
Codeunit<Prod. Order Status Management>.PROCEDURE<OnAfterTransProdOrder>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<TransProdOrder>
    Code lines:
    ...
      TransProdOrdRtngQltyMeas(FromProdOrder);
      TransProdOrderCmtLine(FromProdOrder);
      TransProdOrderRtngCmtLn(FromProdOrder);
      TransProdOrderBOMCmtLine(FromProdOrder);
      TransProdOrderCapNeed(FromProdOrder);
      OnAfterTransProdOrder(FromProdOrder,ToProdOrder); <=====================
      DELETE;
      FromProdOrder := ToProdOrder;
    END;
Codeunit<Prod. Order Status Management>.PROCEDURE<OnAfterTransProdOrderComp>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<TransProdOrderComp>
    Code lines:
    ...
              ToProdOrderComp.AutoReserve;
          END;
          OnCopyFromProdOrderComp(ToProdOrderComp,FromProdOrderComp);
          ToProdOrderComp.MODIFY;
        UNTIL NEXT = 0;
        OnAfterTransProdOrderComp(FromProdOrder,ToProdOrder); <=====================
        DELETEALL;
      END;
    END;
Codeunit<Prod. Order Status Management>.PROCEDURE<OnAfterTransProdOrderLines>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<TransProdOrderLine>
    Code lines:
    ...
          ToProdOrderLine.VALIDATE("Unit Cost","Unit Cost");
          OnCopyFromProdOrderLine(ToProdOrderLine,FromProdOrderLine);
          ToProdOrderLine.MODIFY;
          OnAfterToProdOrderLineModify(ToProdOrderLine,FromProdOrderLine,NewStatus);
        UNTIL NEXT = 0;
        OnAfterTransProdOrderLines(FromProdOrder,ToProdOrder); <=====================
        DELETEALL;
      END;
    END;
Codeunit<Prod. Order Status Management>.PROCEDURE<OnAfterUpdateGlobalDim>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<FlushProdOrder>
    Code lines:
    ...
            SetTimeAndQuantityOmItemJnlLine(ItemJnlLine,ProdOrderRtngLine,OutputQtyBase,OutputQty,PutawayQtyBaseToCalc);
            ItemJnlLine."Source Code" := SourceCodeSetup.Flushing;
            IF NOT (ItemJnlLine.TimeIsEmpty AND (ItemJnlLine."Output Quantity" = 0)) THEN BEGIN
              DimMgt.UpdateGlobalDimFromDimSetID(
                ItemJnlLine."Dimension Set ID",ItemJnlLine."Shortcut Dimension 1 Code",ItemJnlLine."Shortcut Dimension 2 Code");
              OnAfterUpdateGlobalDim(ItemJnlLine,ProdOrderRtngLine,ProdOrderLine); <=====================
              IF IsLastOperation THEN
                ReserveProdOrderLine.TransferPOLineToItemJnlLine(ProdOrderLine,ItemJnlLine,ItemJnlLine."Output Quantity (Base)");
              OnBeforePostFlushItemJnlLine(ItemJnlLine);
              ItemJnlPostLine.RunWithCheck(ItemJnlLine);
    ...
Codeunit<Prod. Order Status Management>.PROCEDURE<OnBeforeChangeStatusOnProdOrder>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<ChangeStatusOnProdOrder>
    Code lines:
    SetPostingInfo(NewStatus,NewPostingDate,NewUpdateUnitCost);
    OnBeforeChangeStatusOnProdOrder(ProdOrder,NewStatus); <=====================
    IF NewStatus = NewStatus::Finished THEN BEGIN
      CheckBeforeFinishProdOrder(ProdOrder);
      FlushProdOrder(ProdOrder,NewStatus,NewPostingDate);
      ReservMgt.DeleteDocumentReservation(DATABASE::"Prod. Order Line",ProdOrder.Status,ProdOrder."No.",FALSE);
      ErrorIfUnableToClearWIP(ProdOrder);
      TransProdOrder(ProdOrder);
    
      InvtSetup.GET;
    ...
Codeunit<Prod. Order Status Management>.PROCEDURE<OnBeforePostFlushItemJnlLine>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<FlushProdOrder>
    Code lines:
    ...
              DimMgt.UpdateGlobalDimFromDimSetID(
                ItemJnlLine."Dimension Set ID",ItemJnlLine."Shortcut Dimension 1 Code",ItemJnlLine."Shortcut Dimension 2 Code");
              OnAfterUpdateGlobalDim(ItemJnlLine,ProdOrderRtngLine,ProdOrderLine);
              IF IsLastOperation THEN
                ReserveProdOrderLine.TransferPOLineToItemJnlLine(ProdOrderLine,ItemJnlLine,ItemJnlLine."Output Quantity (Base)");
              OnBeforePostFlushItemJnlLine(ItemJnlLine); <=====================
              ItemJnlPostLine.RunWithCheck(ItemJnlLine);
            END;
    
            IF (ProdOrderRtngLine."Flushing Method" = ProdOrderRtngLine."Flushing Method"::Backward) AND IsLastOperation THEN BEGIN
    ...
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<FlushProdOrder>
    Code lines:
    ...
              DimMgt.UpdateGlobalDimFromDimSetID(
                ItemJnlLine."Dimension Set ID",ItemJnlLine."Shortcut Dimension 1 Code",ItemJnlLine."Shortcut Dimension 2 Code");
              OnAfterUpdateGlobalDim(ItemJnlLine,ProdOrderRtngLine,ProdOrderLine);
              IF IsLastOperation THEN
                ReserveProdOrderLine.TransferPOLineToItemJnlLine(ProdOrderLine,ItemJnlLine,ItemJnlLine."Output Quantity (Base)");
              OnBeforePostFlushItemJnlLine(ItemJnlLine); <=====================
              ItemJnlPostLine.RunWithCheck(ItemJnlLine);
            END;
    
            IF (ProdOrderRtngLine."Flushing Method" = ProdOrderRtngLine."Flushing Method"::Backward) AND IsLastOperation THEN BEGIN
    ...
Codeunit<Prod. Order Status Management>.PROCEDURE<OnCheckMissingOutput>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<CheckBeforeFinishProdOrder>
    Code lines:
    ...
            ShowWarning := NOT ProdOrderRtngLine.ISEMPTY;
          END ELSE
            ShowWarning := TRUE;
        UNTIL (NEXT = 0) OR ShowWarning;
    
      OnCheckMissingOutput(ProdOrder,ProdOrderLine,ProdOrderRtngLine,ShowWarning); <=====================
      IF ShowWarning THEN
        IF NOT CONFIRM(STRSUBSTNO(Text004,ProdOrder.TABLECAPTION,ProdOrder."No.")) THEN
          ERROR(Text005);
    END;
    ...
Codeunit<Prod. Order Status Management>.PROCEDURE<OnCopyFromProdOrder>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<TransProdOrder>
    Code lines:
    ...
      ToProdOrder."Ending Date" := "Ending Date";
      ToProdOrder."Due Date" := "Due Date";
      ToProdOrder."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
      ToProdOrder."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
      ToProdOrder."Dimension Set ID" := "Dimension Set ID";
      OnCopyFromProdOrder(ToProdOrder,FromProdOrder); <=====================
      ToProdOrder.MODIFY;
    
      TransProdOrderLine(FromProdOrder);
      TransProdOrderRtngLine(FromProdOrder);
    ...
Codeunit<Prod. Order Status Management>.PROCEDURE<OnCopyFromProdOrderCapacityNeed>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<TransProdOrderCapNeed>
    Code lines:
    ...
          REPEAT
            ToProdOrderCapNeed := FromProdOrderCapNeed;
            ToProdOrderCapNeed.Status := ToProdOrder.Status;
            ToProdOrderCapNeed."Prod. Order No." := ToProdOrder."No.";
            ToProdOrderCapNeed."Allocated Time" := ToProdOrderCapNeed."Needed Time";
            OnCopyFromProdOrderCapacityNeed(ToProdOrderCapNeed,FromProdOrderCapNeed); <=====================
            ToProdOrderCapNeed.INSERT;
          UNTIL NEXT = 0;
          DELETEALL;
        END;
    ...
Codeunit<Prod. Order Status Management>.PROCEDURE<OnCopyFromProdOrderComp>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<TransProdOrderComp>
    Code lines:
    ...
            ToProdOrderComp.VALIDATE("Expected Quantity");
            ReserveProdOrderComp.TransferPOCompToPOComp(FromProdOrderComp,ToProdOrderComp,0,TRUE);
            IF ToProdOrderComp.Status IN [ToProdOrderComp.Status::"Firm Planned",ToProdOrderComp.Status::Released] THEN
              ToProdOrderComp.AutoReserve;
          END;
          OnCopyFromProdOrderComp(ToProdOrderComp,FromProdOrderComp); <=====================
          ToProdOrderComp.MODIFY;
        UNTIL NEXT = 0;
        OnAfterTransProdOrderComp(FromProdOrder,ToProdOrder);
        DELETEALL;
    ...
Codeunit<Prod. Order Status Management>.PROCEDURE<OnCopyFromProdOrderLine>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<TransProdOrderLine>
    Code lines:
    ...
            ToProdOrderLine.BlockDynamicTracking(TRUE);
            ToProdOrderLine.VALIDATE(Quantity);
            ReserveProdOrderLine.TransferPOLineToPOLine(FromProdOrderLine,ToProdOrderLine,0,TRUE);
          END;
          ToProdOrderLine.VALIDATE("Unit Cost","Unit Cost");
          OnCopyFromProdOrderLine(ToProdOrderLine,FromProdOrderLine); <=====================
          ToProdOrderLine.MODIFY;
          OnAfterToProdOrderLineModify(ToProdOrderLine,FromProdOrderLine,NewStatus);
        UNTIL NEXT = 0;
        OnAfterTransProdOrderLines(FromProdOrder,ToProdOrder);
    ...
Codeunit<Prod. Order Status Management>.PROCEDURE<OnCopyFromProdOrderRoutingLine>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<TransProdOrderRtngLine>
    Code lines:
    ...
            ProdOrderCapNeed.SETRANGE("Operation No.","Operation No.");
            ProdOrderCapNeed.SETRANGE("Requested Only",FALSE);
            ProdOrderCapNeed.CALCSUMS("Needed Time (ms)");
            ToProdOrderRtngLine."Expected Capacity Need" := ProdOrderCapNeed."Needed Time (ms)";
          END;
          OnCopyFromProdOrderRoutingLine(ToProdOrderRtngLine,FromProdOrderRtngLine); <=====================
          ToProdOrderRtngLine.INSERT;
        UNTIL NEXT = 0;
        DELETEALL;
      END;
Codeunit<Prod. Order Status Management>.PROCEDURE<OnFlushProdOrderOnAfterFindProdOrderRtngLine>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<FlushProdOrder>
    Code lines:
    ...
        ProdOrderRtngLine.SETRANGE("Routing Reference No.",ProdOrderLine."Routing Reference No.");
        ProdOrderRtngLine.LOCKTABLE;
        IF ProdOrderRtngLine.FIND('-') THEN BEGIN
          // First found operation
          IsLastOperation := ProdOrderRtngLine."Next Operation No." = '';
          OnFlushProdOrderOnAfterFindProdOrderRtngLine(ProdOrderRtngLine,IsLastOperation); <=====================
          IF ProdOrderRtngLine."Flushing Method" = ProdOrderRtngLine."Flushing Method"::Backward THEN BEGIN
            ActualOutputAndScrapQtyBase :=
              CostCalcMgt.CalcActOperOutputAndScrap(ProdOrderLine,ProdOrderRtngLine);
            ActualOutputAndScrapQty := ActualOutputAndScrapQtyBase / ProdOrderLine."Qty. per Unit of Measure";
    ...
Codeunit<Prod. Order Status Management>.PROCEDURE<OnTransProdOrderCapNeedOnBeforeDeleteAll>
  Raised in: Codeunit<Prod. Order Status Management>.PROCEDURE<TransProdOrderCapNeed>
    Code lines:
    ...
      SETRANGE(Status,FromProdOrder.Status);
      SETRANGE("Prod. Order No.",FromProdOrder."No.");
      SETRANGE("Requested Only",FALSE);
      IF NewStatus = NewStatus::Finished THEN BEGIN
        IsHandled := FALSE;
        OnTransProdOrderCapNeedOnBeforeDeleteAll(ToProdOrder,FromProdOrderCapNeed,IsHandled); <=====================
        IF NOT IsHandled THEN
          DELETEALL;
      END ELSE BEGIN
        LOCKTABLE;
    ...
Codeunit<Calc. Item Plan - Plan Wksh.>.PROCEDURE<OnAfterPlanThisItemMPS>
  Raised in: Codeunit<Calc. Item Plan - Plan Wksh.>.PROCEDURE<PlanThisItem>
    Code lines:
    ...
    PurchaseLine.SETRANGE("No.",Item."No.");
    IF NOT PurchaseLine.ISEMPTY THEN
      EXIT(MPS);
    
    IsHandled := FALSE;
    OnAfterPlanThisItemMPS(Item,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(MPS);
    
    EXIT(MRP);
Codeunit<Calc. Item Plan - Plan Wksh.>.PROCEDURE<OnBeforePlanThisItem>
  Raised in: Codeunit<Calc. Item Plan - Plan Wksh.>.PROCEDURE<PlanThisItem>
    Code lines:
    IsHandled := FALSE;
    OnBeforePlanThisItem(Item,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SKU.SETCURRENTKEY("Item No.");
    Item.COPYFILTER("Variant Filter",SKU."Variant Code");
    Item.COPYFILTER("Location Filter",SKU."Location Code");
    SKU.SETRANGE("Item No.",Item."No.");
    IF SKU.ISEMPTY AND (Item."Reordering Policy" = Item."Reordering Policy"::" ") THEN
    ...
Codeunit<Graph Webhook Sync To NAV>.PROCEDURE<OnFindWebhookSubscription>
  Raised in: Codeunit<Graph Webhook Sync To NAV>.<OnRun>
    Code lines:
    OnFindWebhookSubscription(WebhookSubscription,"Subscription ID",IntegrationMappingCode); <=====================
    IF IntegrationMappingCode = '' THEN
      EXIT;
    
    SENDTRACETAG('000016Z',GraphSubscriptionManagement.TraceCategory,VERBOSITY::Verbose,
      STRSUBSTNO(ReceivedNotificationTxt,"Change Type",IntegrationMappingCode,"Resource ID"),
      DATACLASSIFICATION::SystemMetadata);
    
    GraphConnectionSetup.RegisterConnections;
    GraphDataSetup.GetIntegrationTableMapping(IntegrationTableMapping,IntegrationMappingCode);
    ...
Codeunit<Graph Subscription Management>.PROCEDURE<OnBeforeAddOrUpdateGraphSubscriptions>
  Raised in: Codeunit<Graph Subscription Management>.PROCEDURE<CheckGraphSubscriptions>
    Code lines:
    GraphConnectionSetup.RegisterConnections;
    OnBeforeAddOrUpdateGraphSubscriptions(FirstTimeSync); <=====================
    IF FirstTimeSync THEN
      SyncMode := SyncModeOption::Full
    ELSE
      SyncMode := SyncModeOption::Delta;
Codeunit<Graph Subscription Management>.PROCEDURE<OnBeforeRunGraphSyncBackgroundSession>
  Raised in: Codeunit<Graph Subscription Management>.PROCEDURE<CanScheduleSyncTasks>
    Code lines:
    IF TASKSCHEDULER.CANCREATETASK THEN BEGIN
      AllowBackgroundSessions := TRUE;
      OnBeforeRunGraphSyncBackgroundSession(AllowBackgroundSessions); <=====================
    END;
Codeunit<Graph Subscription Management>.PROCEDURE<OnCanSyncOnInsert>
  Raised in: Codeunit<Graph Subscription Management>.PROCEDURE<CanSyncOnInsert>
    Code lines:
    CanSync := NOT GUIALLOWED;
    OnCanSyncOnInsert(CanSync); <=====================
Codeunit<Graph Subscription Management>.PROCEDURE<OnGetSourceRecordRef>
  Raised in: Codeunit<Graph Subscription Management>.PROCEDURE<GetSourceRecordRef>
    Code lines:
    OnGetSourceRecordRef(GraphRecordRef,WebhookNotification,IntegrationTableID,Retrieved); <=====================
Codeunit<Graph Subscription Management>.PROCEDURE<OnScheduleSyncTask>
  Raised in: Codeunit<Graph Subscription Management>.PROCEDURE<RescheduleTask>
    Code lines:
    ...
      ScheduledTask.SETRANGE(Record,RecordID);
    
    IF ScheduledTask.FINDFIRST THEN
      TASKSCHEDULER.CANCELTASK(ScheduledTask.ID);
    
    OnScheduleSyncTask(CodeunitID,FailureCodeunitID,NextTask,RecordID); <=====================
  Raised in: Codeunit<Graph Subscription Management>.PROCEDURE<ScheduleFutureSubscriptionRefreshes>
    Code lines:
    ...
    ScheduledTask.SETRANGE(Company,COMPANYNAME);
    ScheduledTask.SETRANGE("Run Codeunit",CODEUNIT::"Graph Subscription Management");
    TasksToCreate := MaximumNumberOfTasks - ScheduledTask.COUNT;
    FOR i := MaximumNumberOfTasks DOWNTO MaximumNumberOfTasks - TasksToCreate + 1 DO BEGIN
      DistanceIntoFuture := i * RefreshFrequency + BufferTime;
      OnScheduleSyncTask( <=====================
        CODEUNIT::"Graph Subscription Management",CODEUNIT::"Graph Delta Sync",CURRENTDATETIME + DistanceIntoFuture,0);
      TasksCreated += 1;
    END;
    
    ...
  Raised in: Codeunit<Graph Subscription Management>.PROCEDURE<ScheduleFutureSubscriptionRefreshes>
    Code lines:
    ...
    ScheduledTask.SETRANGE(Company,COMPANYNAME);
    ScheduledTask.SETRANGE("Run Codeunit",CODEUNIT::"Graph Subscription Management");
    TasksToCreate := MaximumNumberOfTasks - ScheduledTask.COUNT;
    FOR i := MaximumNumberOfTasks DOWNTO MaximumNumberOfTasks - TasksToCreate + 1 DO BEGIN
      DistanceIntoFuture := i * RefreshFrequency + BufferTime;
      OnScheduleSyncTask( <=====================
        CODEUNIT::"Graph Subscription Management",CODEUNIT::"Graph Delta Sync",CURRENTDATETIME + DistanceIntoFuture,0);
      TasksCreated += 1;
    END;
    
    ...
  Raised in: Codeunit<Graph Subscription Management>.PROCEDURE<ScheduleFutureSubscriptionRefreshes>
    Code lines:
    ...
    ScheduledTask.SETRANGE(Company,COMPANYNAME);
    ScheduledTask.SETRANGE("Run Codeunit",CODEUNIT::"Graph Subscription Management");
    TasksToCreate := MaximumNumberOfTasks - ScheduledTask.COUNT;
    FOR i := MaximumNumberOfTasks DOWNTO MaximumNumberOfTasks - TasksToCreate + 1 DO BEGIN
      DistanceIntoFuture := i * RefreshFrequency + BufferTime;
      OnScheduleSyncTask( <=====================
        CODEUNIT::"Graph Subscription Management",CODEUNIT::"Graph Delta Sync",CURRENTDATETIME + DistanceIntoFuture,0);
      TasksCreated += 1;
    END;
    
    ...
Codeunit<Graph Integration Table Sync>.PROCEDURE<OnBeforeSynchronizationStart>
  Raised in: Codeunit<Graph Integration Table Sync>.PROCEDURE<PerformScheduledSynchToIntegrationTable>
    Code lines:
    ...
        IF GraphIntegrationRecord.IsRecordCoupled(IntegrationRecord."Record ID") THEN BEGIN
          SourceRecordRef.GET(IntegrationRecord."Record ID");
          Found := TRUE;
        END;
    
      OnBeforeSynchronizationStart(IntegrationTableMapping,SourceRecordRef,SkipSyncOnRecord); <=====================
    
      IF Found AND (NOT SkipSyncOnRecord) THEN
        IF IntegrationTableSynch.Synchronize(SourceRecordRef,DestinationRecordRef,FALSE,FALSE) THEN BEGIN
          SaveChangeKeyFromDestinationRefToGraphIntegrationTable(IntegrationTableMapping,DestinationRecordRef);
    ...
  Raised in: Codeunit<Graph Integration Table Sync>.PROCEDURE<PerformScheduledSynchFromIntegrationTable>
    Code lines:
    ...
    IF SourceRecordRef.FINDSET THEN BEGIN
      SaveDeltaTokenFromSourceRecRefToIntegrationTable(SourceRecordRef,IntegrationTableMapping);
      REPEAT
        SourceRecordRef2 := SourceRecordRef.DUPLICATE;
        SkipSyncOnRecord := FALSE;
        OnBeforeSynchronizationStart(IntegrationTableMapping,SourceRecordRef2,SkipSyncOnRecord); <=====================
        IF NOT SkipSyncOnRecord THEN
          IF IntegrationTableSynch.Synchronize(SourceRecordRef2,DestinationRecordRef,TRUE,FALSE) THEN BEGIN
            SaveChangeKeyFromDestinationRefToGraphIntegrationTable(IntegrationTableMapping,SourceRecordRef2);
            ModifiedOn := IntegrationTableSynch.GetRowLastModifiedOn(IntegrationTableMapping,SourceRecordRef2);
    ...
  Raised in: Codeunit<Graph Integration Table Sync>.PROCEDURE<PerformRecordSynchToIntegrationTable>
    Code lines:
    ...
    IntegrationTableSynch.BeginIntegrationSynchJob(
      TABLECONNECTIONTYPE::MicrosoftGraph,IntegrationTableMapping,SourceRecordRef.NUMBER);
    
    LatestModifiedOn := 0DT;
    
    OnBeforeSynchronizationStart(IntegrationTableMapping,SourceRecordRef,SkipSyncOnRecord); <=====================
    IF NOT SkipSyncOnRecord THEN
      IF IntegrationTableSynch.Synchronize(SourceRecordRef,DestinationRecordRef,FALSE,FALSE) THEN BEGIN
        SaveChangeKeyFromDestinationRefToGraphIntegrationTable(IntegrationTableMapping,DestinationRecordRef);
        ModifiedOnIntegrationRecord.FindByRecordId(SourceRecordRef.RECORDID);
    ...
  Raised in: Codeunit<Graph Integration Table Sync>.PROCEDURE<PerformRecordSynchFromIntegrationTable>
    Code lines:
    ...
    // Peform synch.
    IntegrationTableSynch.BeginIntegrationSynchJob(
      TABLECONNECTIONTYPE::MicrosoftGraph,IntegrationTableMapping,SourceRecordRef.NUMBER);
    
    LatestModifiedOn := 0DT;
    OnBeforeSynchronizationStart(IntegrationTableMapping,SourceRecordRef,SkipSyncOnRecord); <=====================
    IF NOT SkipSyncOnRecord THEN
      IF IntegrationTableSynch.Synchronize(SourceRecordRef,DestinationRecordRef,TRUE,FALSE) THEN BEGIN
        SaveChangeKeyFromDestinationRefToGraphIntegrationTable(IntegrationTableMapping,SourceRecordRef);
        ModifiedOn := IntegrationTableSynch.GetRowLastModifiedOn(IntegrationTableMapping,SourceRecordRef);
    ...
  Raised in: Codeunit<Graph Integration Table Sync>.PROCEDURE<PerformRecordDeleteFromIntegrationTable>
    Code lines:
    IF GETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph) = '' THEN
      EXIT;
    
    IntegrationTableSynch.BeginIntegrationSynchJob(
      TABLECONNECTIONTYPE::MicrosoftGraph,IntegrationTableMapping,DestinationRecordRef.NUMBER);
    OnBeforeSynchronizationStart(IntegrationTableMapping,DestinationRecordRef,SkipSyncOnRecord); <=====================
    IntegrationTableSynch.Delete(DestinationRecordRef);
    IntegrationTableSynch.EndIntegrationSynchJob;
  Raised in: Codeunit<Graph Integration Table Sync>.PROCEDURE<PerformRecordDeleteToIntegrationTable>
    Code lines:
    IF GETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph) = '' THEN
      EXIT;
    
    IntegrationTableSynch.BeginIntegrationSynchJob(
      TABLECONNECTIONTYPE::MicrosoftGraph,IntegrationTableMapping,DestinationRecordRef.NUMBER);
    OnBeforeSynchronizationStart(IntegrationTableMapping,DestinationRecordRef,SkipSyncOnRecord); <=====================
    IF IntegrationTableSynch.Delete(DestinationRecordRef) THEN
      ArchiveIntegrationRecords(DestinationRecordRef,IntegrationTableMapping);
    
    IntegrationTableSynch.EndIntegrationSynchJob;
Codeunit<Graph Sync. Runner>.PROCEDURE<OnAfterRunDeltaSyncForEntity>
  Raised in: Codeunit<Graph Sync. Runner>.PROCEDURE<RunDeltaSyncForEntity>
    Code lines:
    ...
    RunIntegrationTableSynch(IntegrationTableMapping);
    
    IntegrationTableMapping.GET(IntegrationTableMapping.Name);
    IntegrationTableMapping.SetFullSyncEndAndCommit;
    
    OnAfterRunDeltaSyncForEntity(TableID); <=====================
Codeunit<Graph Sync. Runner>.PROCEDURE<OnAfterRunFullSyncForEntity>
  Raised in: Codeunit<Graph Sync. Runner>.PROCEDURE<RunFullSyncForEntity>
    Code lines:
    ...
    RunIntegrationTableSynch(IntegrationTableMapping);
    
    IntegrationTableMapping.GET(IntegrationTableMapping.Name);
    IntegrationTableMapping.SetFullSyncEndAndCommit;
    
    OnAfterRunFullSyncForEntity(TableID); <=====================
Codeunit<Graph Sync. Runner>.PROCEDURE<OnCheckAuxiliarySyncEnabled>
  Raised in: Codeunit<Graph Sync. Runner>.PROCEDURE<IsGraphSyncEnabled>
    Code lines:
    ...
      EXIT(FALSE);
    
    IF MarketingSetup."Sync with Microsoft Graph" THEN
      EXIT(TRUE);
    
    OnCheckAuxiliarySyncEnabled(AuxSyncEnabled); <=====================
    EXIT(AuxSyncEnabled);
Codeunit<Graph Sync. Runner>.PROCEDURE<OnRunGraphDeltaSync>
  Raised in: Codeunit<Graph Sync. Runner>.PROCEDURE<RunDeltaSync>
    Code lines:
    OnRunGraphDeltaSync; <=====================
Codeunit<Graph Sync. Runner>.PROCEDURE<OnRunGraphFullSync>
  Raised in: Codeunit<Graph Sync. Runner>.PROCEDURE<RunFullSync>
    Code lines:
    OnRunGraphFullSync; <=====================
Codeunit<Graph Sync. Runner>.PROCEDURE<OnSyncSynchronouslyCannotStartSession>
  Raised in: Codeunit<Graph Sync. Runner>.PROCEDURE<SyncFromGraphSynchronously>
    Code lines:
    // Start session will use CPU time of main thread while main thread is SLEEPing
    // Taskscheduler cannot be used since it requires a COMMIT to start
    SessionId := 0;
    
    IF NOT STARTSESSION(SessionId,CodeunitId,COMPANYNAME) THEN BEGIN
      OnSyncSynchronouslyCannotStartSession('Codeunit: ' + FORMAT(CodeunitId)); <=====================
      EXIT;
    END;
    
    StartDateTime := CURRENTDATETIME;
    ...
Codeunit<Graph Sync. Runner>.PROCEDURE<OnSyncSynchronouslyTimeout>
  Raised in: Codeunit<Graph Sync. Runner>.PROCEDURE<SyncFromGraphSynchronously>
    Code lines:
    ...
    
      TimePassed := CURRENTDATETIME - StartDateTime;
      TimeoutReached := TimePassed > TimeoutInSeconds * 1000;
    UNTIL TimeoutReached;
    
    OnSyncSynchronouslyTimeout('Codeunit: ' + FORMAT(CodeunitId)); <=====================
Codeunit<Graph Data Setup>.PROCEDURE<OnAddIntegrationMapping>
  Raised in: Codeunit<Graph Data Setup>.PROCEDURE<AddIntegrationMapping>
    Code lines:
    OnGetInboundTableID(MappingCode,TableID);
    OnAddIntegrationMapping(MappingCode); <=====================
Codeunit<Graph Data Setup>.PROCEDURE<OnCheckCanSyncRecord>
  Raised in: Codeunit<Graph Data Setup>.PROCEDURE<CanSyncRecord>
    Code lines:
    // Determines whether the record is empty based on the fields
    // within the integration field mapping table
    
    OnCheckCanSyncRecord(EntityRecRef,CanSync,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    EmptyRecordRef.OPEN(EntityRecRef.NUMBER);
    EmptyRecordRef.INIT;
    
    ...
Codeunit<Graph Data Setup>.PROCEDURE<OnCreateIntegrationMappings>
  Raised in: Codeunit<Graph Data Setup>.<OnRun>
    Code lines:
    OnCreateIntegrationMappings; <=====================
Codeunit<Graph Data Setup>.PROCEDURE<OnGetGraphRecord>
  Raised in: Codeunit<Graph Data Setup>.PROCEDURE<GetGraphRecord>
    Code lines:
    OnGetGraphRecord(GraphRecordRef,DestinationGraphID,TableID,Found); <=====================
Codeunit<Graph Data Setup>.PROCEDURE<OnGetInboundTableID>
  Raised in: Codeunit<Graph Data Setup>.PROCEDURE<GetInboundTableID>
    Code lines:
    OnGetInboundTableID(MappingCode,TableID); <=====================
  Raised in: Codeunit<Graph Data Setup>.PROCEDURE<AddIntegrationMapping>
    Code lines:
    OnGetInboundTableID(MappingCode,TableID); <=====================
    OnAddIntegrationMapping(MappingCode);
Codeunit<Graph Data Setup>.PROCEDURE<OnGetMappingCodeForTable>
  Raised in: Codeunit<Graph Data Setup>.PROCEDURE<GetMappingCodeForTable>
    Code lines:
    OnGetMappingCodeForTable(TableID,MappingCode); <=====================
Codeunit<Graph Connection Setup>.PROCEDURE<OnCheckForceSync>
  Raised in: Codeunit<Graph Connection Setup>.PROCEDURE<CanRunSync>
    Code lines:
    OnCheckForceSync(ForceSync); <=====================
    IF ForceSync THEN
      EXIT(TRUE);
    
    IF GETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph) <> '' THEN
      EXIT(FALSE);
    
    EXIT(TRUE);
Codeunit<Graph Connection Setup>.PROCEDURE<OnGetInboundConnectionName>
  Raised in: Codeunit<Graph Connection Setup>.PROCEDURE<GetInboundConnectionName>
    Code lines:
    OnGetInboundConnectionName(TableID,ConnectionName); <=====================
Codeunit<Graph Connection Setup>.PROCEDURE<OnGetInboundConnectionString>
  Raised in: Codeunit<Graph Connection Setup>.PROCEDURE<GetInboundConnectionString>
    Code lines:
    OnGetInboundConnectionString(TableID,ConnectionString); <=====================
Codeunit<Graph Connection Setup>.PROCEDURE<OnGetSubscriptionConnectionName>
  Raised in: Codeunit<Graph Connection Setup>.PROCEDURE<GetSubscriptionConnectionName>
    Code lines:
    OnGetSubscriptionConnectionName(TableID,ConnectionName); <=====================
Codeunit<Graph Connection Setup>.PROCEDURE<OnGetSubscriptionConnectionString>
  Raised in: Codeunit<Graph Connection Setup>.PROCEDURE<GetSubscriptionConnectionString>
    Code lines:
    OnGetSubscriptionConnectionString(TableID,ConnectionString); <=====================
Codeunit<Graph Connection Setup>.PROCEDURE<OnGetSynchronizeConnectionName>
  Raised in: Codeunit<Graph Connection Setup>.PROCEDURE<GetSynchronizeConnectionName>
    Code lines:
    OnGetSynchronizeConnectionName(TableID,ConnectionName); <=====================
Codeunit<Graph Connection Setup>.PROCEDURE<OnGetSynchronizeConnectionString>
  Raised in: Codeunit<Graph Connection Setup>.PROCEDURE<GetSynchronizeConnectionString>
    Code lines:
    OnGetSynchronizeConnectionString(TableID,ConnectionString); <=====================
Codeunit<Graph Connection Setup>.PROCEDURE<OnRegisterConnections>
  Raised in: Codeunit<Graph Connection Setup>.PROCEDURE<RegisterConnections>
    Code lines:
    OnRegisterConnections; <=====================
Codeunit<Graph Mgt - General Tools>.PROCEDURE<ApiSetup>
  Raised in: Page<Native - General Setting>.PROCEDURE<FixIntegrationRecordIDs>
    Code lines:
    GraphMgtGeneralTools.ApiSetup; <=====================
    SetActionResponse(ActionContext);
  Raised in: Page<Native - Customer Entity>.<OnOpenPage>
    Code lines:
    EmptyIDPaymentTerms.SETRANGE(Id,EmptyGuid);
    EmptyIDPaymentMethod.SETRANGE(Id,EmptyGuid);
    IF EmptyIDPaymentTerms.FINDFIRST OR EmptyIDPaymentMethod.FINDFIRST THEN
      GraphMgtGeneralTools.ApiSetup; <=====================
    BINDSUBSCRIPTION(NativeAPILanguageHandler);
    TranslateContactIdFilterToCustomerNoFilter;
    SELECTLATESTVERSION;
  Raised in: Codeunit<Graph Mgt - General Tools>.<OnRun>
    Code lines:
    ApiSetup; <=====================
  Raised in: Codeunit<Graph Mgt - General Tools>.PROCEDURE<APISetupIfEnabled>
    Code lines:
    IF IsApiEnabled THEN
      ApiSetup; <=====================
  Raised in: Codeunit<Graph Mgt - General Tools>.PROCEDURE<InitDemoCompanyApisForSaaS>
    Code lines:
    ...
    APIEntitiesSetup.SafeGet;
    
    IF APIEntitiesSetup."Demo Company API Initialized" THEN
      EXIT;
    
    GraphMgtGeneralTools.ApiSetup; <=====================
    
    APIEntitiesSetup.SafeGet;
    APIEntitiesSetup.VALIDATE("Demo Company API Initialized",TRUE);
    APIEntitiesSetup.MODIFY(TRUE);
Codeunit<Graph Mgt - General Tools>.PROCEDURE<OnForceIsApiEnabledVerification>
  Raised in: Codeunit<Graph Mgt - General Tools>.PROCEDURE<OnGetIntegrationActivated>
    Code lines:
    OnForceIsApiEnabledVerification(ForceIsApiEnabledVerification); <=====================
    
    IF NOT ForceIsApiEnabledVerification AND IsSyncEnabled THEN
      EXIT;
    
    IF ForceIsApiEnabledVerification THEN
      IF NOT IsApiEnabled THEN
        EXIT;
    
    IF NOT ApiWebService.READPERMISSION THEN
    ...
Codeunit<Graph Mgt - General Tools>.PROCEDURE<OnGetAPISubscriptionsEnabled>
  Raised in: Codeunit<Graph Mgt - General Tools>.PROCEDURE<IsApiSubscriptionEnabled>
    Code lines:
    IF NOT IsApiEnabled THEN
      EXIT(FALSE);
    
    OnGetAPISubscriptionsEnabled(Handled,APISubscriptionsEnabled); <=====================
    IF Handled THEN
      EXIT(APISubscriptionsEnabled);
    
    EXIT(ServerConfigSettingHandler.GetApiSubscriptionsEnabled);
Codeunit<Graph Mgt - General Tools>.PROCEDURE<OnGetIsAPIEnabled>
  Raised in: Codeunit<Graph Mgt - General Tools>.PROCEDURE<IsApiEnabled>
    Code lines:
    OnGetIsAPIEnabled(Handled,IsAPIEnabled); <=====================
    IF Handled THEN
      EXIT(IsAPIEnabled);
    
    EXIT(ServerConfigSettingHandler.GetApiServicesEnabled);
Codeunit<Production Journal Mgt>.PROCEDURE<OnAfterConsumptionJnlLineInsert>
  Raised in: Codeunit<Production Journal Mgt>.PROCEDURE<InsertConsumptionJnlLine>
    Code lines:
    ...
      ItemJnlLine."Reason Code" := ItemJnlBatch."Reason Code";
      ItemJnlLine."Posting No. Series" := ItemJnlBatch."Posting No. Series";
    
      OnBeforeInsertConsumptionJnlLine(ItemJnlLine,ProdOrderComp,ProdOrderLine,Level);
      ItemJnlLine.INSERT;
      OnAfterConsumptionJnlLineInsert(ItemJnlLine); <=====================
    
      IF Item."Item Tracking Code" <> '' THEN
        ItemTrackingMgt.CopyItemTracking(RowID1,ItemJnlLine.RowID1,FALSE);
    END;
    ...
Codeunit<Production Journal Mgt>.PROCEDURE<OnAfterDataHasChanged>
  Raised in: Codeunit<Production Journal Mgt>.PROCEDURE<DataHasChanged>
    Code lines:
    ...
        IF ReservEntryExist(ItemJnlLine2,ReservEntry) THEN
          EXIT(TRUE);
      UNTIL ItemJnlLine2.NEXT = 0;
    
    HasChanged := FALSE;
    OnAfterDataHasChanged(ItemJnlLine2,ProdOrderLineNo,HasChanged); <=====================
    EXIT(HasChanged);
Codeunit<Production Journal Mgt>.PROCEDURE<OnAfterInsertConsumptionJnlLine>
  Raised in: Codeunit<Production Journal Mgt>.PROCEDURE<InsertConsumptionJnlLine>
    Code lines:
    ...
        ItemTrackingMgt.CopyItemTracking(RowID1,ItemJnlLine.RowID1,FALSE);
    END;
    
    NextLineNo += 10000;
    
    OnAfterInsertConsumptionJnlLine(ItemJnlLine); <=====================
Codeunit<Production Journal Mgt>.PROCEDURE<OnAfterInsertOutputJnlLine>
  Raised in: Codeunit<Production Journal Mgt>.PROCEDURE<InsertOutputJnlLine>
    Code lines:
    ...
      ItemJnlLine."Reason Code" := ItemJnlBatch."Reason Code";
      ItemJnlLine."Posting No. Series" := ItemJnlBatch."Posting No. Series";
    
      OnBeforeInsertOutputJnlLine(ItemJnlLine,ProdOrderRtngLine,ProdOrderLine);
      ItemJnlLine.INSERT;
      OnAfterInsertOutputJnlLine(ItemJnlLine); <=====================
    
      IF ProdOrderRtngLine."Next Operation No." = '' THEN // Last or no Routing Line
        ItemTrackingMgt.CopyItemTracking(RowID1,ItemJnlLine.RowID1,FALSE);
    END;
    ...
Codeunit<Production Journal Mgt>.PROCEDURE<OnAfterSetTemplateAndBatchName>
  Raised in: Codeunit<Production Journal Mgt>.PROCEDURE<SetTemplateAndBatchName>
    Code lines:
    ...
    ToTemplateName := ItemJnlTemplate.Name;
    
    ToBatchName := '';
    User := UPPERCASE(USERID); // Uppercase in case of Windows Login
    
    OnAfterSetTemplateAndBatchName(ItemJnlTemplate,User); <=====================
    
    IF User <> '' THEN
      IF (STRLEN(User) < MAXSTRLEN(ItemJnlLine."Journal Batch Name")) AND (ItemJnlLine."Journal Batch Name" <> '') THEN
        ToBatchName := COPYSTR(ItemJnlLine."Journal Batch Name",1,MAXSTRLEN(ItemJnlLine."Journal Batch Name") - 1) + 'A'
    ...
Codeunit<Production Journal Mgt>.PROCEDURE<OnBeforeDeleteAllItemJnlLine>
  Raised in: Codeunit<Production Journal Mgt>.PROCEDURE<DeleteJnlLines>
    Code lines:
    ...
      REPEAT
        IF ReservEntryExist(ItemJnlLine2,ReservEntry) THEN
          ReservEntry.DELETEALL(TRUE);
      UNTIL ItemJnlLine2.NEXT = 0;
    
      OnBeforeDeleteAllItemJnlLine(ItemJnlLine2); <=====================
      ItemJnlLine2.DELETEALL(TRUE);
    END;
Codeunit<Production Journal Mgt>.PROCEDURE<OnBeforeInsertConsumptionJnlLine>
  Raised in: Codeunit<Production Journal Mgt>.PROCEDURE<InsertConsumptionJnlLine>
    Code lines:
    ...
      ItemJnlLine."Flushing Method" := "Flushing Method";
      ItemJnlLine."Source Code" := ItemJnlTemplate."Source Code";
      ItemJnlLine."Reason Code" := ItemJnlBatch."Reason Code";
      ItemJnlLine."Posting No. Series" := ItemJnlBatch."Posting No. Series";
    
      OnBeforeInsertConsumptionJnlLine(ItemJnlLine,ProdOrderComp,ProdOrderLine,Level); <=====================
      ItemJnlLine.INSERT;
      OnAfterConsumptionJnlLineInsert(ItemJnlLine);
    
      IF Item."Item Tracking Code" <> '' THEN
    ...
Codeunit<Production Journal Mgt>.PROCEDURE<OnBeforeInsertOutputJnlLine>
  Raised in: Codeunit<Production Journal Mgt>.PROCEDURE<InsertOutputJnlLine>
    Code lines:
    ...
      ItemJnlLine."Flushing Method" := ProdOrderRtngLine."Flushing Method";
      ItemJnlLine."Source Code" := ItemJnlTemplate."Source Code";
      ItemJnlLine."Reason Code" := ItemJnlBatch."Reason Code";
      ItemJnlLine."Posting No. Series" := ItemJnlBatch."Posting No. Series";
    
      OnBeforeInsertOutputJnlLine(ItemJnlLine,ProdOrderRtngLine,ProdOrderLine); <=====================
      ItemJnlLine.INSERT;
      OnAfterInsertOutputJnlLine(ItemJnlLine);
    
      IF ProdOrderRtngLine."Next Operation No." = '' THEN // Last or no Routing Line
    ...
Codeunit<Production Journal Mgt>.PROCEDURE<OnBeforeRunProductionJnl>
  Raised in: Codeunit<Production Journal Mgt>.PROCEDURE<Handling>
    Code lines:
    ...
    DeleteJnlLines(ToTemplateName,ToBatchName,ProdOrder."No.",ActualLineNo);
    
    CreateJnlLines(ProdOrder,ActualLineNo);
    
    IsHandled := FALSE;
    OnBeforeRunProductionJnl(ToTemplateName,ToBatchName,ProdOrder,ActualLineNo,PostingDate,IsHandled); <=====================
    IF NOT IsHandled THEN
      REPEAT
        LeaveForm := TRUE;
        CLEAR(ProductionJnl);
    ...
Codeunit<Production Journal Mgt>.PROCEDURE<OnCreateJnlLinesOnAfterFindProdOrderRtngLine>
  Raised in: Codeunit<Production Journal Mgt>.PROCEDURE<CreateJnlLines>
    Code lines:
    ...
        ProdOrderRtngLine.SETRANGE("Routing Reference No.",ProdOrderLine."Routing Reference No.");
        IF ProdOrderRtngLine.FIND('-') THEN BEGIN
          InsertComponents(ProdOrderLine,TRUE,0); // With no Routing Link or illegal Routing Link
          REPEAT
            IsHandled := FALSE;
            OnCreateJnlLinesOnAfterFindProdOrderRtngLine(ProdOrderRtngLine,IsHandled); <=====================
            IF NOT IsHandled THEN BEGIN
              InsertOutputJnlLine(ProdOrderRtngLine,ProdOrderLine);
              IF ProdOrderRtngLine."Routing Link Code" <> '' THEN BEGIN
                ProdOrderComp.RESET;
    ...
Codeunit<Production Journal Mgt>.PROCEDURE<OnCreateJnlLinesOnBeforeCheckProdOrderLine>
  Raised in: Codeunit<Production Journal Mgt>.PROCEDURE<CreateJnlLines>
    Code lines:
    ...
    ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrder."No.");
    IF ProdOrderLineNo <> 0 THEN
      ProdOrderLine.SETRANGE("Line No.",ProdOrderLineNo);
    IF ProdOrderLine.FIND('-') THEN
      REPEAT
        OnCreateJnlLinesOnBeforeCheckProdOrderLine(ProdOrderLine); <=====================
    
        ProdOrderRtngLine.RESET;
        ProdOrderRtngLine.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
        ProdOrderRtngLine.SETRANGE("Routing No.",ProdOrderLine."Routing No.");
    ...
Codeunit<Production Journal Mgt>.PROCEDURE<OnInsertConsumptionJnlLineOnBeforeCheck>
  Raised in: Codeunit<Production Journal Mgt>.PROCEDURE<InsertConsumptionJnlLine>
    Code lines:
    ...
        MESSAGE(Text002,"Item No.");
        EXIT;
      END;
    
      IsHandled := FALSE;
      OnInsertConsumptionJnlLineOnBeforeCheck(ProdOrderComp,ProdOrderLine,Item,IsHandled); <=====================
      IF IsHandled THEN
        EXIT;
    
      IF "Flushing Method" <> "Flushing Method"::Manual THEN
    ...
Codeunit<Order Planning Mgt.>.PROCEDURE<OnBeforeReqLineModify>
  Raised in: Codeunit<Order Planning Mgt.>.PROCEDURE<InsertAltSupplySubstitution>
    Code lines:
    ...
        ReqLine."Qty. per UOM (Demand)" := ProdOrderComp."Qty. per Unit of Measure";
        ReqLine.SetSupplyQty(ReqLine2."Demand Quantity (Base)",UnAvailableQtyBase);
        ReqLine.SetSupplyDates(ReqLine2."Demand Date");
        ReqLine."Original Item No." := ReqLine2."No.";
        ReqLine."Original Variant Code" := ReqLine2."Variant Code";
        OnBeforeReqLineModify(ReqLine,ReqLine2,ProdOrderComp); <=====================
        ReqLine.MODIFY;
        PlanningLineMgt.Calculate(ReqLine,1,TRUE,TRUE,0);
      END;
    END;
Codeunit<Order Planning Mgt.>.PROCEDURE<OnInsertDemandLinesOnBeforeReqLineInsert>
  Raised in: Codeunit<Order Planning Mgt.>.PROCEDURE<InsertDemandLines>
    Code lines:
    ...
          HeaderExists := TRUE;
    
          ReqLine.TransferFromUnplannedDemand(TempUnplannedDemand);
          ReqLine.SetSupplyQty("Quantity (Base)","Needed Qty. (Base)");
          ReqLine.SetSupplyDates("Demand Date");
          OnInsertDemandLinesOnBeforeReqLineInsert(ReqLine); <=====================
          ReqLine.INSERT;
    
          IF Item."No." <> "Item No." THEN
            Item.GET("Item No.");
    ...
Codeunit<Calc. Item Availability>.PROCEDURE<OnAfterGetDocumentEntries>
  Raised in: Codeunit<Calc. Item Availability>.PROCEDURE<GetDocumentEntries>
    Code lines:
    ...
    TryGetProdOrderSupplyEntries(InvtEventBuf,Item);
    TryGetTransferOrderSupplyEntries(InvtEventBuf,Item);
    TryGetAsmOrderDemandEntries(InvtEventBuf,Item);
    TryGetAsmOrderSupllyEntries(InvtEventBuf,Item);
    
    OnAfterGetDocumentEntries(InvtEventBuf,Item,EntryNo); <=====================
Codeunit<Calc. Item Availability>.PROCEDURE<OnAfterGetSourceReferences>
  Raised in: Codeunit<Calc. Item Availability>.PROCEDURE<GetSourceReferences>
    Code lines:
    ...
          SourceID := AssemblyLine."Document No.";
          SourceRefNo := AssemblyLine."Line No.";
        END
      ELSE BEGIN
        IsHandled := FALSE;
        OnAfterGetSourceReferences( <=====================
          FromRecordID,TransferDirection,SourceType,SourceSubtype,SourceID,SourceBatchName,SourceProdOrderLine,SourceRefNo,
          IsHandled);
        IF NOT IsHandled THEN
          EXIT(FALSE);
    ...
Codeunit<Calc. Item Availability>.PROCEDURE<OnAfterShowDocument>
  Raised in: Codeunit<Calc. Item Availability>.PROCEDURE<ShowDocument>
    Code lines:
    ...
          AssemblyHeader.GET(AssemblyLine."Document Type",AssemblyLine."Document No.");
          PAGE.RUNMODAL(PAGE::"Assembly Order",AssemblyHeader);
        END
      ELSE BEGIN
        IsHandled := FALSE;
        OnAfterShowDocument(RecordID,IsHandled); <=====================
        IF NOT IsHandled THEN
          ERROR(TableNotSupportedErr,RecordID.TABLENO);
      END;
    END;
Codeunit<Calc. Inventory Page Data>.PROCEDURE<OnAfterUpdatePeriodTotals>
  Raised in: Codeunit<Calc. Inventory Page Data>.PROCEDURE<UpdatePeriodTotals>
    Code lines:
    ...
      PeriodInvtPageData.Forecast += Forecast;
      PeriodInvtPageData."Remaining Forecast" += "Remaining Forecast";
      PeriodInvtPageData."Action Message Qty." += "Action Message Qty.";
    END;
    
    OnAfterUpdatePeriodTotals(PeriodInvtPageData,DetailInvtPageData); <=====================
Codeunit<Calc. Inventory Page Data>.PROCEDURE<OnDetailsForPeriodEntryOnBeforeInvtPageDataInsert>
  Raised in: Codeunit<Calc. Inventory Page Data>.PROCEDURE<DetailsForPeriodEntry>
    Code lines:
    ...
      REPEAT
        TransferToPeriodDetails(InvtPageData,TempInvtEventBuf);
        UpdateInventory(InvtPageData,TempInvtEventBuf);
        InvtPageData."Line No." := NextPageLineNo;
        IsHandled := FALSE;
        OnDetailsForPeriodEntryOnBeforeInvtPageDataInsert(InvtPageData,IsHandled); <=====================
        IF NOT IsHandled THEN
          InvtPageData.INSERT;
        UpdatePeriodTotals(PeriodInvtPageData,InvtPageData);
        UpdateInventory(PeriodInvtPageData,TempInvtEventBuf);
    ...
Codeunit<Calc. Inventory Page Data>.PROCEDURE<OnTransferToPeriodDetailsElseCase>
  Raised in: Codeunit<Calc. Inventory Page Data>.PROCEDURE<TransferToPeriodDetails>
    Code lines:
    ...
        DATABASE::"Assembly Header":
          TransferAssemblyHeader(FromInvtEventBuf,InventoryPageData,SourceSubtype,SourceID);
        DATABASE::"Assembly Line":
          TransferAssemblyLine(FromInvtEventBuf,InventoryPageData,SourceSubtype,SourceID,SourceRefNo);
        ELSE BEGIN
          OnTransferToPeriodDetailsElseCase(InventoryPageData,FromInvtEventBuf,IsHandled); <=====================
          IF NOT IsHandled THEN
            ERROR(UnsupportedEntitySourceErr,SourceType,SourceSubtype);
        END;
      END;
Codeunit<Calc. Item Avail. Timeline>.PROCEDURE<OnAfterUpdateTimelineEventDetails>
  Raised in: Codeunit<Calc. Item Avail. Timeline>.PROCEDURE<UpdateTimelineEventDetails>
    Code lines:
    ...
              STRSUBSTNO('%1 %2 %3 %4',TXT017,AsmHeader."Document Type",AsmHeader."No.",AsmHeader.Description);
          END;
      END;
    END;
    
    OnAfterUpdateTimelineEventDetails(TempToTimelineEvent,TempFromInventoryEventBuffer); <=====================
Codeunit<Calc. Item Avail. Timeline>.PROCEDURE<OnCreateTimelineEventsBeforePlanning>
  Raised in: Codeunit<Calc. Item Avail. Timeline>.PROCEDURE<CreateTimelineEvents>
    Code lines:
    ...
      IF FINDSET THEN
        REPEAT
          InsertTimelineEvent(TempTimelineEvent,TempInventoryEventBuffer);
        UNTIL NEXT = 0;
    
      OnCreateTimelineEventsBeforePlanning(TempTimelineEvent,TempInventoryEventBuffer); <=====================
    
      // Planning Events - New supplies already planned
      SETFILTER("Availability Date",'<> %1',0D);
      SETRANGE(Type,Type::Plan);
    ...
Codeunit<Sales - Calc Discount By Type>.PROCEDURE<OnAfterResetRecalculateInvoiceDisc>
  Raised in: Codeunit<Sales - Calc Discount By Type>.PROCEDURE<ResetRecalculateInvoiceDisc>
    Code lines:
    SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
    SalesLine.SETRANGE("Document No.",SalesHeader."No.");
    SalesLine.SETRANGE("Recalculate Invoice Disc.",TRUE);
    SalesLine.MODIFYALL("Recalculate Invoice Disc.",FALSE);
    
    OnAfterResetRecalculateInvoiceDisc(SalesHeader); <=====================
Codeunit<Sales - Calc Discount By Type>.PROCEDURE<OnBeforeApplyDefaultInvoiceDiscount>
  Raised in: Codeunit<Sales - Calc Discount By Type>.PROCEDURE<ApplyDefaultInvoiceDiscount>
    Code lines:
    IF NOT ShouldRedistributeInvoiceDiscountAmount(SalesHeader) THEN
      EXIT;
    
    IsHandled := FALSE;
    OnBeforeApplyDefaultInvoiceDiscount(SalesHeader,IsHandled); <=====================
    IF NOT IsHandled THEN
      IF SalesHeader."Invoice Discount Calculation" = SalesHeader."Invoice Discount Calculation"::Amount THEN
        ApplyInvDiscBasedOnAmt(InvoiceDiscountAmount,SalesHeader)
      ELSE
        ApplyInvDiscBasedOnPct(SalesHeader);
    ...
Codeunit<Sales - Calc Discount By Type>.PROCEDURE<OnBeforeShouldRedistributeInvoiceDiscountAmount>
  Raised in: Codeunit<Sales - Calc Discount By Type>.PROCEDURE<ShouldRedistributeInvoiceDiscountAmount>
    Code lines:
    IsHandled := FALSE;
    OnBeforeShouldRedistributeInvoiceDiscountAmount(SalesHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(TRUE);
    
    SalesHeader.CALCFIELDS("Recalculate Invoice Disc.");
    IF NOT SalesHeader."Recalculate Invoice Disc." THEN
      EXIT(FALSE);
    
    CASE SalesHeader."Invoice Discount Calculation" OF
    ...
Codeunit<FA Insert Ledger Entry>.PROCEDURE<OnBeforeInsertFA>
  Raised in: Codeunit<FA Insert Ledger Entry>.PROCEDURE<InsertFA>
    Code lines:
    ...
        FALedgEntry3."Journal Batch Name");
    END;
    NextEntryNo := NextEntryNo + 1;
    
    FALedgEntry := FALedgEntry3;
    OnBeforeInsertFA(FALedgEntry); <=====================
    
    DeprBook.GET(FALedgEntry."Depreciation Book Code");
    FA.GET(FALedgEntry."FA No.");
    DeprBookCode := FALedgEntry."Depreciation Book Code";
    ...
Codeunit<FA Insert Ledger Entry>.PROCEDURE<OnBeforeInsertRegister>
  Raised in: Codeunit<FA Insert Ledger Entry>.PROCEDURE<InsertFA>
    Code lines:
    ...
    
    IF FALedgEntry3."FA Posting Category" = FALedgEntry3."FA Posting Category"::" " THEN
      IF FALedgEntry3."FA Posting Type" <= FALedgEntry3."FA Posting Type"::"Salvage Value" THEN
        CODEUNIT.RUN(CODEUNIT::"FA Check Consistency",FALedgEntry);
    
    OnBeforeInsertRegister(FALedgEntry,FALedgEntry2); <=====================
    
    InsertRegister(0,NextEntryNo);
Codeunit<FA Insert Ledger Entry>.PROCEDURE<OnInsertReverseEntryOnBeforeInsertRegister>
  Raised in: Codeunit<FA Insert Ledger Entry>.PROCEDURE<InsertReverseEntry>
    Code lines:
    ...
        FALedgEntry3."No. Series" := '';
        FALedgEntry3."Journal Batch Name" := '';
        FALedgEntry3."FA No./Budgeted FA No." := '';
        FALedgEntry3.INSERT(TRUE);
        CODEUNIT.RUN(CODEUNIT::"FA Check Consistency",FALedgEntry3);
        OnInsertReverseEntryOnBeforeInsertRegister(FALedgEntry3); <=====================
        InsertRegister(0,NextEntryNo);
      END;
    END;
    IF FAEntryType = FAEntryType::Maintenance THEN BEGIN
    ...
Codeunit<FA Insert G/L Account>.PROCEDURE<OnAfterCopyFAGLPostBufFromFALederEntry>
  Raised in: Codeunit<FA Insert G/L Account>.<OnRun>
    Code lines:
    ...
    FAGLPostBuf.Correction := Correction;
    FAGLPostBuf."Global Dimension 1 Code" := "Global Dimension 1 Code";
    FAGLPostBuf."Global Dimension 2 Code" := "Global Dimension 2 Code";
    FAGLPostBuf."Dimension Set ID" := "Dimension Set ID";
    FAGLPostBuf."FA Entry No." := "Entry No.";
    OnAfterCopyFAGLPostBufFromFALederEntry(FAGLPostBuf,Rec); <=====================
    
    IF "Entry No." > 0 THEN
      FAGLPostBuf."FA Entry Type" := FAGLPostBuf."FA Entry Type"::"Fixed Asset";
    FAGLPostBuf."Automatic Entry" := "Automatic Entry";
    ...
Codeunit<FA Insert G/L Account>.PROCEDURE<OnGetBalAccAfterRestoreGenJnlLineFields>
  Raised in: Codeunit<FA Insert G/L Account>.PROCEDURE<GetBalAccLocal>
    Code lines:
    ...
          "Shortcut Dimension 1 Code" := TempFAGLPostBuf."Global Dimension 1 Code";
          "Shortcut Dimension 2 Code" := TempFAGLPostBuf."Global Dimension 2 Code";
          "Dimension Set ID" := TempFAGLPostBuf."Dimension Set ID";
          Description := TempGenJnlLine.Description;
          "FA Add.-Currency Factor" := TempGenJnlLine."FA Add.-Currency Factor";
          OnGetBalAccAfterRestoreGenJnlLineFields(GenJnlLine,TempGenJnlLine); <=====================
          InsertGenJnlLine(GenJnlLine);
        UNTIL TempFAGLPostBuf.NEXT = 0;
    END;
    TempFAGLPostBuf.DELETEALL;
Codeunit<FA Insert G/L Account>.PROCEDURE<OnGetBalAccAfterSaveGenJnlLineFields>
  Raised in: Codeunit<FA Insert G/L Account>.PROCEDURE<GetBalAccLocal>
    Code lines:
    ...
      TESTFIELD("Posting Group");
      TESTFIELD("FA Posting Type");
      TempGenJnlLine.Description := Description;
      TempGenJnlLine."FA Add.-Currency Factor" := "FA Add.-Currency Factor";
      SkipInsert := FALSE;
      OnGetBalAccAfterSaveGenJnlLineFields(TempGenJnlLine,GenJnlLine,SkipInsert); <=====================
      IF NOT SkipInsert THEN BEGIN
        NonBlankFAPostingType := "FA Posting Type" - 1;
        InsertBufferBalAcc(
          NonBlankFAPostingType,-Amount,"Depreciation Book Code",
    ...
Codeunit<FA Get G/L Account No.>.PROCEDURE<OnAfterGetAccNo>
  Raised in: Codeunit<FA Get G/L Account No.>.PROCEDURE<GetAccNo>
    Code lines:
    ...
          "FA Posting Type"::"Custom 2":
            GLAccNo := FAPostingGr.GetCustom2BalAccountOnDisposal;
        END;
    END;
    
    OnAfterGetAccNo(FALedgEntry,GLAccNo); <=====================
    EXIT(GLAccNo);
Codeunit<Make FA Ledger Entry>.PROCEDURE<OnAfterCopyFromFACard>
  Raised in: Codeunit<Make FA Ledger Entry>.PROCEDURE<CopyFromFACard>
    Code lines:
    ...
      "Accum. Depr. % (Custom 1)" := FADeprBook."Accum. Depr. % (Custom 1)";
      "Depr. % this year (Custom 1)" := FADeprBook."Depr. This Year % (Custom 1)";
      "Property Class (Custom 1)" := FADeprBook."Property Class (Custom 1)";
    END;
    
    OnAfterCopyFromFACard(FALedgEntry,FA,FADeprBook,xFALedgerEntry); <=====================
Codeunit<Make FA Ledger Entry>.PROCEDURE<OnAfterCopyFromFAJnlLine>
  Raised in: Codeunit<Make FA Ledger Entry>.PROCEDURE<CopyFromFAJnlLine>
    Code lines:
    ...
      "Journal Batch Name" := FAJnlLine."Journal Batch Name";
      "FA Posting Type" := FAJnlLine.ConvertToLedgEntry(FAJnlLine);
      "No. Series" := FAJnlLine."Posting No. Series";
    END;
    
    OnAfterCopyFromFAJnlLine(FALedgEntry,FAJnlLine); <=====================
Codeunit<Make FA Ledger Entry>.PROCEDURE<OnAfterCopyFromGenJnlLine>
  Raised in: Codeunit<Make FA Ledger Entry>.PROCEDURE<CopyFromGenJnlLine>
    Code lines:
    ...
      "No. Series" := GenJnlLine."Posting No. Series";
      FAJnlLine."FA Posting Type" := GenJnlLine."FA Posting Type" - 1;
      "FA Posting Type" := FAJnlLine.ConvertToLedgEntry(FAJnlLine);
    END;
    
    OnAfterCopyFromGenJnlLine(FALedgEntry,GenJnlLine); <=====================
Codeunit<Make FA Ledger Entry>.PROCEDURE<OnBeforeCopyFromFACard>
  Raised in: Codeunit<Make FA Ledger Entry>.PROCEDURE<CopyFromFACard>
    Code lines:
    OnBeforeCopyFromFACard(FALedgEntry,FA,FADeprBook,xFALedgerEntry); <=====================
    
    WITH FALedgEntry DO BEGIN
      "FA Class Code" := FA."FA Class Code";
      "FA Subclass Code" := FA."FA Subclass Code";
      "FA Location Code" := FA."FA Location Code";
      "Location Code" := FA."Location Code";
      "FA Exchange Rate" := FADeprBook.GetExchangeRate;
      "Depreciation Method" := FADeprBook."Depreciation Method";
      "Depreciation Starting Date" := FADeprBook."Depreciation Starting Date";
    ...
Codeunit<Calculate Disposal>.PROCEDURE<OnCalcGainLossOnAfterSetEntryAmounts>
  Raised in: Codeunit<Calculate Disposal>.PROCEDURE<CalcGainLoss>
    Code lines:
    ...
      CALCFIELDS(
        "Book Value","Proceeds on Disposal","Acquisition Cost","Salvage Value",Depreciation);
      EntryAmounts[3] := -"Acquisition Cost";
      EntryAmounts[4] := -Depreciation;
      EntryAmounts[9] := -"Salvage Value";
      OnCalcGainLossOnAfterSetEntryAmounts(FANo,DeprBookCode,EntryAmounts); <=====================
      IF DeprBook."Disposal Calculation Method" = DeprBook."Disposal Calculation Method"::Gross THEN
        EntryAmounts[10] := "Book Value";
      GainLoss := "Book Value" + "Proceeds on Disposal";
    END;
    ...
Codeunit<FA Check Consistency>.PROCEDURE<OnSetFAPostingDateOnBeforeFADeprBookModify>
  Raised in: Codeunit<FA Check Consistency>.PROCEDURE<SetFAPostingDate>
    Code lines:
    ...
          FADeprBook."Last Custom 2 Date" := MaxDate;
        "FA Posting Type"::"Proceeds on Disposal":
          FADeprBook."Disposal Date" := MinDate;
      END;
    
    OnSetFAPostingDateOnBeforeFADeprBookModify(FADeprBook,FALedgEntry2,MaxDate,MinDate,GLDate); <=====================
    FADeprBook.MODIFY;
Codeunit<Calculate Normal Depreciation>.PROCEDURE<OnAfterCalcSL>
  Raised in: Codeunit<Calculate Normal Depreciation>.PROCEDURE<CalcSLAmount>
    Code lines:
    ...
          DeprStartingDate,DepreciationCalc.Yesterday(FirstDeprDate,Year365Days),Year365Days);
      IF RemainingLife < 1 THEN
        EXIT(-BookValue);
    
      IsHandled := FALSE;
      OnAfterCalcSL(FA,FADeprBook,UntilDate,BookValue,DeprBasis,DeprYears,NumberOfDays,DaysInFiscalYear,Result,IsHandled); <=====================
      IF IsHandled THEN
        EXIT(Result);
    
      EXIT(-(BookValue + SalvageValue - MinusBookValue) * NumberOfDays / RemainingLife);
    ...
Codeunit<Calculate Normal Depreciation>.PROCEDURE<OnAfterCalculateDeprAmount>
  Raised in: Codeunit<Calculate Normal Depreciation>.PROCEDURE<CalculateDeprAmount>
    Code lines:
    ...
    IF NOT SkipOnZero THEN
      DepreciationCalc.AdjustDepr(
        DeprBookCode,Amount,ABS(BookValue2),-ABS(SalvageValue2),
        EndingBookValue,FinalRoundingAmount);
    
    OnAfterCalculateDeprAmount( <=====================
      FA,SkipOnZero,DeprBookCode,Amount,ABS(BookValue2),-ABS(SalvageValue2),EndingBookValue,FinalRoundingAmount);
    
    EXIT(ROUND(Amount));
Codeunit<Calculate Normal Depreciation>.PROCEDURE<OnAfterTransferValues>
  Raised in: Codeunit<Calculate Normal Depreciation>.PROCEDURE<TransferValues>
    Code lines:
    ...
          DepreciationCalc.DeprDays(
            "Depreciation Starting Date","Depreciation Ending Date",TRUE) / DaysInFiscalYear;
      END;
    END;
    
    OnAfterTransferValues(FA,FADeprBook,Year365Days,DeprYears); <=====================
Codeunit<Budget Depreciation>.PROCEDURE<OnBeforeGLBudgetEntryInsert>
  Raised in: Codeunit<Budget Depreciation>.PROCEDURE<CopyFAToBudget>
    Code lines:
    ...
        IF FAGLPostBuf."FA Posting Group" <> '' THEN
          GLBudgetEntry."Dimension Set ID" := FAGLPostBuf."Dimension Set ID"
        ELSE
          GLBudgetEntry."Dimension Set ID" := GetFADefaultDimSetID(FALedgEntry);
        UpdateDimCodesFromDimSetID(GLBudgetEntry,BudgetName);
        OnBeforeGLBudgetEntryInsert(GLBudgetEntry,FALedgEntry,FAGLPostBuf,BudgetName); <=====================
        GLBudgetEntry.INSERT;
      UNTIL FAInsertGLAcc.GetNextGLAcc(FAGLPostBuf) = 0;
Codeunit<Depreciation Calculation>.PROCEDURE<OnAfterAdjustDepr>
  Raised in: Codeunit<Depreciation Calculation>.PROCEDURE<AdjustDepr>
    Code lines:
    ...
        Depreciation := -MaxDepr;
      IF Depreciation > 0 THEN
        Depreciation := 0;
    END;
    
    OnAfterAdjustDepr(DeprBookCode,BookValue,MaxDepr,Depreciation); <=====================
Codeunit<Depreciation Calculation>.PROCEDURE<OnAfterCalcDepreciation>
  Raised in: Codeunit<Depreciation Calculation>.PROCEDURE<AdjustDepr>
    Code lines:
    IF FinalRoundingAmount = 0 THEN BEGIN
      DeprBook.GET(DeprBookCode);
      FinalRoundingAmount := DeprBook."Default Final Rounding Amount";
    END;
    Depreciation := CalcRounding(DeprBookCode,Depreciation);
    OnAfterCalcDepreciation(DeprBookCode,Depreciation,BookValue); <=====================
    IF Depreciation >= 0 THEN
      Depreciation := 0
    ELSE BEGIN
      IF SalvageValue <> 0 THEN
    ...
Codeunit<Cancel FA Ledger Entries>.PROCEDURE<OnAfterInsertFAJnlLine>
  Raised in: Codeunit<Cancel FA Ledger Entries>.PROCEDURE<InsertFAJnlLine>
    Code lines:
    ...
      "Line No." := "Line No." + 10000;
      OnBeforeFAJnlLineInsert(FAJnlLine,FALedgEntry);
      INSERT(TRUE);
    END;
    
    OnAfterInsertFAJnlLine(FAJnlLine,FALedgEntry); <=====================
Codeunit<Cancel FA Ledger Entries>.PROCEDURE<OnAfterInsertGenJnlLine>
  Raised in: Codeunit<Cancel FA Ledger Entries>.PROCEDURE<InsertGenJnlLine>
    Code lines:
    ...
      INSERT(TRUE);
      IF BalAccount THEN
        FAInsertGLAcc.GetBalAcc(GenJnlLine);
    END;
    
    OnAfterInsertGenJnlLine(GenJnlLine,FALedgEntry,BalAccount); <=====================
Codeunit<Cancel FA Ledger Entries>.PROCEDURE<OnBeforeCheckType>
  Raised in: Codeunit<Cancel FA Ledger Entries>.PROCEDURE<CheckType>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckType(FALedgEntry,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH FALedgEntry DO
      IF ("FA Posting Type" > "FA Posting Type"::"Salvage Value") OR
         ("FA Posting Category" <> "FA Posting Category"::" ")
      THEN BEGIN
        "FA Posting Type" := "FA Posting Type"::"Proceeds on Disposal";
    ...
Codeunit<Cancel FA Ledger Entries>.PROCEDURE<OnBeforeFAJnlLineInsert>
  Raised in: Codeunit<Cancel FA Ledger Entries>.PROCEDURE<InsertFAJnlLine>
    Code lines:
    ...
      "FA Error Entry No." := FALedgEntry."Entry No.";
      "Posting No. Series" := FAJnlSetup.GetFANoSeries(FAJnlLine);
      VALIDATE(Amount,-Amount);
      VALIDATE(Correction,DeprBook."Mark Errors as Corrections");
      "Line No." := "Line No." + 10000;
      OnBeforeFAJnlLineInsert(FAJnlLine,FALedgEntry); <=====================
      INSERT(TRUE);
    END;
    
    OnAfterInsertFAJnlLine(FAJnlLine,FALedgEntry);
Codeunit<Cancel FA Ledger Entries>.PROCEDURE<OnBeforeGenJnlLineInsert>
  Raised in: Codeunit<Cancel FA Ledger Entries>.PROCEDURE<InsertGenJnlLine>
    Code lines:
    ...
      "FA Error Entry No." := FALedgEntry."Entry No.";
      VALIDATE(Amount,-Amount);
      VALIDATE(Correction,DeprBook."Mark Errors as Corrections");
      "Posting No. Series" := FAJnlSetup.GetGenNoSeries(GenJnlLine);
      "Line No." := "Line No." + 10000;
      OnBeforeGenJnlLineInsert(GenJnlLine,FALedgEntry); <=====================
      INSERT(TRUE);
      IF BalAccount THEN
        FAInsertGLAcc.GetBalAcc(GenJnlLine);
    END;
    ...
Codeunit<FA General Report>.PROCEDURE<OnBeforeCalcFAPostedAmount>
  Raised in: Codeunit<FA General Report>.PROCEDURE<CalcFAPostedAmount>
    Code lines:
    ...
        FADeprBook.FIELDNO("Book Value"):
          SETRANGE("Part of Book Value",TRUE);
        FADeprBook.FIELDNO("Depreciable Basis"):
          SETRANGE("Part of Depreciable Basis",TRUE);
      END;
      OnBeforeCalcFAPostedAmount(FALedgEntry,PostingType); <=====================
      CASE Period OF
        Period::"Before Starting Date":
          SETRANGE("FA Posting Date",0D,StartingDate - 1);
        Period::"Net Change":
    ...
Codeunit<FA Jnl.-Check Line>.PROCEDURE<OnAfterCheckFAJnlLine>
  Raised in: Codeunit<FA Jnl.-Check Line>.PROCEDURE<CheckFAJnlLine>
    Code lines:
    ...
    END;
    GenJnlPosting := FALSE;
    FAJnlLine := FAJnlLine2;
    CheckJnlLine;
    
    OnAfterCheckFAJnlLine(FAJnlLine2); <=====================
Codeunit<FA Jnl.-Check Line>.PROCEDURE<OnAfterCheckGenJnlLine>
  Raised in: Codeunit<FA Jnl.-Check Line>.<OnRun>
    Code lines:
    ...
    GenJnlPosting := TRUE;
    GenJnlLine := Rec;
    CheckJnlLine;
    CheckFADepAcrossFiscalYear;
    
    OnAfterCheckGenJnlLine(Rec); <=====================
Codeunit<FA Jnl.-Check Line>.PROCEDURE<OnBeforeCheckFAPostingDate>
  Raised in: Codeunit<FA Jnl.-Check Line>.PROCEDURE<CheckFAPostingDate>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckFAPostingDate(GenJnlLine,FAJnlLine,DeprBook,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF FAPostingDate <> NORMALDATE(FAPostingDate) THEN
      IF GenJnlPosting THEN
        GenJnlLine.FIELDERROR("FA Posting Date",Text003)
      ELSE
        FAJnlLine.FIELDERROR("FA Posting Date",Text003);
    ...
Codeunit<FA Jnl.-Post Line>.PROCEDURE<OnAfterFAJnlPostLine>
  Raised in: Codeunit<FA Jnl.-Post Line>.PROCEDURE<FAJnlPostLine>
    Code lines:
    ...
        MakeFALedgEntry.CopyFromFAJnlLine(FALedgEntry,FAJnlLine);
        PostFixedAsset;
      END;
    END;
    
    OnAfterFAJnlPostLine(FAJnlLine); <=====================
Codeunit<FA Jnl.-Post Line>.PROCEDURE<OnAfterGenJnlPostLine>
  Raised in: Codeunit<FA Jnl.-Post Line>.PROCEDURE<GenJnlPostLine>
    Code lines:
    ...
        OnBeforePostFixedAssetFromGenJnlLine(GenJnlLine,FALedgEntry,FAAmount,VATAmount);
        PostFixedAsset;
      END;
    END;
    
    OnAfterGenJnlPostLine(GenJnlLine); <=====================
Codeunit<FA Jnl.-Post Line>.PROCEDURE<OnBeforeFAJnlPostLine>
  Raised in: Codeunit<FA Jnl.-Post Line>.PROCEDURE<FAJnlPostLine>
    Code lines:
    OnBeforeFAJnlPostLine(FAJnlLine); <=====================
    
    FAInsertLedgEntry.SetGLRegisterNo(0);
    WITH FAJnlLine DO BEGIN
      IF "FA No." = '' THEN
        EXIT;
      IF "Posting Date" = 0D THEN
        "Posting Date" := "FA Posting Date";
      IF CheckLine THEN
        FAJnlCheckLine.CheckFAJnlLine(FAJnlLine);
    ...
Codeunit<FA Jnl.-Post Line>.PROCEDURE<OnBeforeGenJnlPostLine>
  Raised in: Codeunit<FA Jnl.-Post Line>.PROCEDURE<GenJnlPostLine>
    Code lines:
    OnBeforeGenJnlPostLine(GenJnlLine); <=====================
    
    FAInsertLedgEntry.SetGLRegisterNo(GLRegisterNo);
    FAInsertLedgEntry.DeleteAllGLAcc;
    WITH GenJnlLine DO BEGIN
      IF "Account No." = '' THEN
        EXIT;
      IF "FA Posting Date" = 0D THEN
        "FA Posting Date" := "Posting Date";
      IF "Journal Template Name" = '' THEN
    ...
Codeunit<FA Jnl.-Post Line>.PROCEDURE<OnBeforePostFixedAssetFromGenJnlLine>
  Raised in: Codeunit<FA Jnl.-Post Line>.PROCEDURE<GenJnlPostLine>
    Code lines:
    ...
        MakeFALedgEntry.CopyFromGenJnlLine(FALedgEntry,GenJnlLine);
        FALedgEntry.Amount := FAAmount;
        FALedgEntry."VAT Amount" := VATAmount;
        FALedgEntry."Transaction No." := NextTransactionNo;
        FALedgEntry."G/L Entry No." := NextGLEntryNo;
        OnBeforePostFixedAssetFromGenJnlLine(GenJnlLine,FALedgEntry,FAAmount,VATAmount); <=====================
        PostFixedAsset;
      END;
    END;
    
Codeunit<FA Jnl.-Post Batch>.PROCEDURE<OnBeforeCommit>
  Raised in: Codeunit<FA Jnl.-Post Batch>.PROCEDURE<Code>
    Code lines:
    ...
        REPEAT
          EVALUATE(PostingNoSeriesNo,NoSeries.Description);
          NoSeriesMgt2[PostingNoSeriesNo].SaveNoSeries;
        UNTIL NoSeries.NEXT = 0;
    
      OnBeforeCommit(FARegNo); <=====================
    
      IF PreviewMode THEN
        GenJnlPostPreview.ThrowError;
    
    ...
Codeunit<FA Reclass. Check Line>.PROCEDURE<OnAfterOnRun>
  Raised in: Codeunit<FA Reclass. Check Line>.<OnRun>
    Code lines:
    ...
      DeprBookCode := "Depreciation Book Code";
    
    IF "Depreciation Book Code" <> DeprBookCode THEN
      FIELDERROR("Depreciation Book Code",Text000);
    
    OnAfterOnRun(Rec); <=====================
Codeunit<FA Reclass. Transfer Line>.PROCEDURE<OnBeforeGenJnlLineInsert>
  Raised in: Codeunit<FA Reclass. Transfer Line>.PROCEDURE<InsertGenJnlLine>
    Code lines:
    ...
      VALIDATE(Amount,EntryAmount);
      Description := FAReclassJnlLine.Description;
      "FA Reclassification Entry" := TRUE;
      GenJnlNextLineNo := GenJnlNextLineNo + 10000;
      "Line No." := GenJnlNextLineNo;
      OnBeforeGenJnlLineInsert(GenJnlLine,FAReclassJnlLine); <=====================
      INSERT(TRUE);
      IF BalAccount THEN BEGIN
        FAInsertGLAcc.GetBalAcc(GenJnlLine);
        IF FIND('+') THEN ;
    ...
Codeunit<FA Reclass. Transfer Batch>.PROCEDURE<OnBeforeFAReclassJnlLineInsert>
  Raised in: Codeunit<FA Reclass. Transfer Batch>.PROCEDURE<Code>
    Code lines:
    ...
          FAReclassJnlLine3."Journal Template Name" := "Journal Template Name";
          FAReclassJnlLine3."Journal Batch Name" := "Journal Batch Name";
          FAReclassJnlLine3."Line No." := 10000;
          FAReclassJnlBatch.GET("Journal Template Name","Journal Batch Name");
          FAReclassJnlLine3."Posting Date" := FAReclassJnlLine2."Posting Date";
          OnBeforeFAReclassJnlLineInsert(FAReclassJnlLine,FAReclassJnlLine2,FAReclassJnlLine3); <=====================
          FAReclassJnlLine3.INSERT;
        END;
      END;
    
    ...
Codeunit<Make Maintenance Ledger Entry>.PROCEDURE<OnAfterCopyFromFACard>
  Raised in: Codeunit<Make Maintenance Ledger Entry>.PROCEDURE<CopyFromFACard>
    Code lines:
    ...
      "FA Location Code" := FA."FA Location Code";
      "Location Code" := FA."Location Code";
      "FA Exchange Rate" := FADeprBook.GetExchangeRate;
    END;
    
    OnAfterCopyFromFACard(MaintenanceLedgEntry,FA,FADeprBook); <=====================
Codeunit<Make Maintenance Ledger Entry>.PROCEDURE<OnAfterCopyFromFAJnlLine>
  Raised in: Codeunit<Make Maintenance Ledger Entry>.PROCEDURE<CopyFromFAJnlLine>
    Code lines:
    ...
      "Maintenance Code" := FAJnlLine."Maintenance Code";
      Correction := FAJnlLine.Correction;
      "No. Series" := FAJnlLine."Posting No. Series";
    END;
    
    OnAfterCopyFromFAJnlLine(MaintenanceLedgEntry,FAJnlLine); <=====================
Codeunit<Make Maintenance Ledger Entry>.PROCEDURE<OnAfterCopyFromGenJnlLine>
  Raised in: Codeunit<Make Maintenance Ledger Entry>.PROCEDURE<CopyFromGenJnlLine>
    Code lines:
    ...
      "Use Tax" := GenJnlLine."Use Tax";
      Correction := GenJnlLine.Correction;
      "No. Series" := GenJnlLine."Posting No. Series";
    END;
    
    OnAfterCopyFromGenJnlLine(MaintenanceLedgEntry,GenJnlLine); <=====================
Codeunit<Make Ins. Coverage Ledg. Entry>.PROCEDURE<OnAfterCopyFromJnlLine>
  Raised in: Codeunit<Make Ins. Coverage Ledg. Entry>.PROCEDURE<CopyFromJnlLine>
    Code lines:
    ...
      "Reason Code" := InsuranceJnlLine."Reason Code";
      "Disposed FA" := SetDisposedFA("FA No.");
      "No. Series" := InsuranceJnlLine."Posting No. Series";
    END;
    
    OnAfterCopyFromJnlLine(InsCoverageLedgEntry,InsuranceJnlLine); <=====================
Codeunit<FA. Jnl.-Post+Print>.PROCEDURE<OnBeforePostJournalBatch>
  Raised in: Codeunit<FA. Jnl.-Post+Print>.PROCEDURE<Code>
    Code lines:
    ...
      FAJnlTemplate.TESTFIELD("Maint. Posting Report ID");
      IF FAJnlTemplate.Recurring AND (GETFILTER("FA Posting Date") <> '') THEN
        FIELDERROR("FA Posting Date",Text000);
    
      HideDialog := FALSE;
      OnBeforePostJournalBatch(FAJnlLine,HideDialog); <=====================
      IF NOT HideDialog THEN
        IF NOT CONFIRM(Text001,FALSE) THEN
          EXIT;
    
    ...
Codeunit<FA. Jnl.-B.Post+Print>.PROCEDURE<OnBeforePostJournalBatch>
  Raised in: Codeunit<FA. Jnl.-B.Post+Print>.PROCEDURE<Code>
    Code lines:
    ...
      FAJnlTemplate.GET("Journal Template Name");
      FAJnlTemplate.TESTFIELD("Posting Report ID");
      FAJnlTemplate.TESTFIELD("Maint. Posting Report ID");
    
      HideDialog := FALSE;
      OnBeforePostJournalBatch(FAJnlBatch,HideDialog); <=====================
      IF NOT HideDialog THEN
        IF NOT CONFIRM(Text000,FALSE) THEN
          EXIT;
    
    ...
Codeunit<Insurance Jnl.-Post+Print>.PROCEDURE<OnBeforePostJournalBatch>
  Raised in: Codeunit<Insurance Jnl.-Post+Print>.PROCEDURE<Code>
    Code lines:
    WITH InsuranceJnlLine DO BEGIN
      InsuranceJnlTempl.GET("Journal Template Name");
      InsuranceJnlTempl.TESTFIELD("Posting Report ID");
    
      HideDialog := FALSE;
      OnBeforePostJournalBatch(InsuranceJnlLine,HideDialog); <=====================
      IF NOT HideDialog THEN
        IF NOT CONFIRM(Text000,FALSE) THEN
          EXIT;
    
    ...
Codeunit<Insurance Jnl.-B.Post+Print>.PROCEDURE<OnBeforePostJournalBatch>
  Raised in: Codeunit<Insurance Jnl.-B.Post+Print>.PROCEDURE<Code>
    Code lines:
    WITH InsuranceJnlBatch DO BEGIN
      InsuranceJnlTempl.GET("Journal Template Name");
      InsuranceJnlTempl.TESTFIELD("Posting Report ID");
    
      HideDialog := FALSE;
      OnBeforePostJournalBatch(InsuranceJnlBatch,HideDialog); <=====================
      IF NOT HideDialog THEN
        IF NOT CONFIRM(Text000,FALSE) THEN
          EXIT;
    
    ...
Codeunit<Document Totals>.PROCEDURE<OnAfterCalculatePurchaseSubPageTotals>
  Raised in: Codeunit<Document Totals>.PROCEDURE<CalculatePurchaseSubPageTotals>
    Code lines:
    ...
              PurchaseLine2.CALCSUMS("Line Amount");
              InvoiceDiscountPct := ROUND(InvoiceDiscountAmount / PurchaseLine2."Line Amount" * 100,0.00001);
            END;
        END;
    
    OnAfterCalculatePurchaseSubPageTotals( <=====================
      TotalPurchaseHeader,TotalPurchaseLine,VATAmount,InvoiceDiscountAmount,InvoiceDiscountPct,TotalPurchaseLine2);
    
    TotalPurchaseLine := TotalPurchaseLine2;
Codeunit<Document Totals>.PROCEDURE<OnAfterCalculateSalesSubPageTotals>
  Raised in: Codeunit<Document Totals>.PROCEDURE<CalculateSalesSubPageTotals>
    Code lines:
    ...
              SalesLine2.CALCSUMS("Line Amount");
              InvoiceDiscountPct := ROUND(InvoiceDiscountAmount / SalesLine2."Line Amount" * 100,0.00001);
            END;
        END;
    
    OnAfterCalculateSalesSubPageTotals( <=====================
      TotalSalesHeader,TotalSalesLine,VATAmount,InvoiceDiscountAmount,InvoiceDiscountPct,TotalSalesLine2);
    
    TotalSalesLine := TotalSalesLine2;
Codeunit<Document Totals>.PROCEDURE<OnAfterPurchaseLineSetFilters>
  Raised in: Codeunit<Document Totals>.PROCEDURE<CalculatePurchasePageTotals>
    Code lines:
    TotalPurchaseLine2 := TotalPurchaseLine;
    TotalPurchaseLine2.SETRANGE("Document Type",PurchaseLine."Document Type");
    TotalPurchaseLine2.SETRANGE("Document No.",PurchaseLine."Document No.");
    OnAfterPurchaseLineSetFilters(TotalPurchaseLine2,PurchaseLine); <=====================
    TotalPurchaseLine2.CALCSUMS("Line Amount",Amount,"Amount Including VAT","Inv. Discount Amount");
    VATAmount := TotalPurchaseLine2."Amount Including VAT" - TotalPurchaseLine2.Amount;
    TotalPurchaseLine := TotalPurchaseLine2;
Codeunit<Document Totals>.PROCEDURE<OnAfterPurchaseRedistributeInvoiceDiscountAmounts>
  Raised in: Codeunit<Document Totals>.PROCEDURE<PurchaseRedistributeInvoiceDiscountAmounts>
    Code lines:
    ...
          CODEUNIT.RUN(CODEUNIT::"Purch - Calc Disc. By Type",TempPurchaseLine);
    
        PurchaseCalculateTotalsWithInvoiceRounding(TempPurchaseLine,VATAmount,TempTotalPurchaseLine);
      END;
    
    OnAfterPurchaseRedistributeInvoiceDiscountAmounts(TempPurchaseLine,TempTotalPurchaseLine,VATAmount); <=====================
Codeunit<Document Totals>.PROCEDURE<OnAfterSalesLineSetFilters>
  Raised in: Codeunit<Document Totals>.PROCEDURE<CalculateSalesPageTotals>
    Code lines:
    TotalSalesLine2 := TotalSalesLine;
    TotalSalesLine2.SETRANGE("Document Type",SalesLine."Document Type");
    TotalSalesLine2.SETRANGE("Document No.",SalesLine."Document No.");
    OnAfterSalesLineSetFilters(TotalSalesLine2,SalesLine); <=====================
    TotalSalesLine2.CALCSUMS("Line Amount",Amount,"Amount Including VAT","Inv. Discount Amount");
    VATAmount := TotalSalesLine2."Amount Including VAT" - TotalSalesLine2.Amount;
    TotalSalesLine := TotalSalesLine2;
Codeunit<Document Totals>.PROCEDURE<OnAfterSalesRedistributeInvoiceDiscountAmounts>
  Raised in: Codeunit<Document Totals>.PROCEDURE<SalesRedistributeInvoiceDiscountAmounts>
    Code lines:
    ...
          CODEUNIT.RUN(CODEUNIT::"Sales - Calc Discount By Type",TempSalesLine);
    
        SalesCalculateTotalsWithInvoiceRounding(TempSalesLine,VATAmount,TempTotalSalesLine);
      END;
    
    OnAfterSalesRedistributeInvoiceDiscountAmounts(TempSalesLine,TempTotalSalesLine,VATAmount); <=====================
Codeunit<Document Totals>.PROCEDURE<OnBeforePurchUpdateTotalsControls>
  Raised in: Codeunit<Document Totals>.PROCEDURE<PurchaseUpdateTotalsControlsForceable>
    Code lines:
    ...
    IF CurrentPurchaseLine."Document No." = '' THEN
      EXIT;
    
    TotalPurchaseHeader.GET(CurrentPurchaseLine."Document Type",CurrentPurchaseLine."Document No.");
    IsHandled := FALSE;
    OnBeforePurchUpdateTotalsControls(TotalPurchaseHeader,InvDiscAmountEditable,IsHandled); <=====================
    RefreshMessageEnabled := PurchCalcDiscByType.ShouldRedistributeInvoiceDiscountAmount(TotalPurchaseHeader);
    
    IF NOT RefreshMessageEnabled THEN
      RefreshMessageEnabled := NOT PurchaseUpdateTotals(TotalPurchaseHeader,CurrentPurchaseLine,TotalsPurchaseLine,VATAmount,Force);
    ...
Codeunit<Document Totals>.PROCEDURE<OnBeforeSalesUpdateTotalsControls>
  Raised in: Codeunit<Document Totals>.PROCEDURE<SalesUpdateTotalsControls>
    Code lines:
    IF CurrentSalesLine."Document No." = '' THEN
      EXIT;
    
    TotalSalesHeader.GET(CurrentSalesLine."Document Type",CurrentSalesLine."Document No.");
    IsHandled := FALSE;
    OnBeforeSalesUpdateTotalsControls(TotalSalesHeader,InvDiscAmountEditable,IsHandled); <=====================
    RefreshMessageEnabled := SalesCalcDiscountByType.ShouldRedistributeInvoiceDiscountAmount(TotalSalesHeader);
    
    IF NOT RefreshMessageEnabled THEN
      RefreshMessageEnabled := NOT SalesUpdateTotals(TotalSalesHeader,CurrentSalesLine,TotalsSalesLine,VATAmount);
    ...
Codeunit<Document Totals>.PROCEDURE<OnCalculateSalesSubPageTotalsOnAfterSetFilters>
  Raised in: Codeunit<Document Totals>.PROCEDURE<CalculateSalesSubPageTotals>
    Code lines:
    ...
    SalesSetup.GetRecordOnce;
    TotalSalesLine2.COPY(TotalSalesLine);
    TotalSalesLine2.RESET;
    TotalSalesLine2.SETRANGE("Document Type",TotalSalesHeader."Document Type");
    TotalSalesLine2.SETRANGE("Document No.",TotalSalesHeader."No.");
    OnCalculateSalesSubPageTotalsOnAfterSetFilters(TotalSalesLine2,TotalSalesHeader); <=====================
    
    IF SalesSetup."Calc. Inv. Discount" AND (TotalSalesHeader."No." <> '') AND
       (TotalSalesHeader."Customer Posting Group" <> '')
    THEN BEGIN
    ...
Codeunit<G/L Account Category Mgt.>.PROCEDURE<OnBeforeOnRunAccountScheduleReport>
  Raised in: Codeunit<G/L Account Category Mgt.>.PROCEDURE<RunAccountScheduleReport>
    Code lines:
    IsHandled := FALSE;
    OnBeforeOnRunAccountScheduleReport(AccSchedName,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    AccountSchedule.InitAccSched;
    AccountSchedule.SetAccSchedNameNonEditable(AccSchedName);
    AccountSchedule.RUN;
Codeunit<User Setup Management>.PROCEDURE<OnAfterGetPurchFilter2>
  Raised in: Codeunit<User Setup Management>.PROCEDURE<GetPurchasesFilter2>
    Code lines:
    ...
      PurchUserRespCenter := CompanyInfo."Responsibility Center";
      UserLocation := CompanyInfo."Location Code";
      IF UserSetup.GET(UserCode) AND (UserCode <> '') THEN
        IF UserSetup."Purchase Resp. Ctr. Filter" <> '' THEN
          PurchUserRespCenter := UserSetup."Purchase Resp. Ctr. Filter";
      OnAfterGetPurchFilter2(UserSetup,PurchUserRespCenter); <=====================
      HasGotPurchUserSetup := TRUE;
    END;
    EXIT(PurchUserRespCenter);
Codeunit<User Setup Management>.PROCEDURE<OnAfterGetSalesFilter2>
  Raised in: Codeunit<User Setup Management>.PROCEDURE<GetSalesFilter2>
    Code lines:
    ...
      SalesUserRespCenter := CompanyInfo."Responsibility Center";
      UserLocation := CompanyInfo."Location Code";
      IF UserSetup.GET(UserCode) AND (UserCode <> '') THEN
        IF UserSetup."Sales Resp. Ctr. Filter" <> '' THEN
          SalesUserRespCenter := UserSetup."Sales Resp. Ctr. Filter";
      OnAfterGetSalesFilter2(UserSetup,SalesUserRespCenter); <=====================
      HasGotSalesUserSetup := TRUE;
    END;
    EXIT(SalesUserRespCenter);
Codeunit<User Setup Management>.PROCEDURE<OnAfterGetServiceFilter2>
  Raised in: Codeunit<User Setup Management>.PROCEDURE<GetServiceFilter2>
    Code lines:
    ...
      ServUserRespCenter := CompanyInfo."Responsibility Center";
      UserLocation := CompanyInfo."Location Code";
      IF UserSetup.GET(UserCode) AND (UserCode <> '') THEN
        IF UserSetup."Service Resp. Ctr. Filter" <> '' THEN
          ServUserRespCenter := UserSetup."Service Resp. Ctr. Filter";
      OnAfterGetServiceFilter2(UserSetup,ServUserRespCenter); <=====================
      HasGotServUserSetup := TRUE;
    END;
    EXIT(ServUserRespCenter);
Codeunit<User Setup Management>.PROCEDURE<OnBeforeGetSalesFilter2>
  Raised in: Codeunit<User Setup Management>.PROCEDURE<GetSalesFilter2>
    Code lines:
    IF NOT HasGotSalesUserSetup THEN BEGIN
      IsHandled := FALSE;
      OnBeforeGetSalesFilter2(UserCode,UserLocation,SalesUserRespCenter,IsHandled); <=====================
      IF IsHandled THEN
        EXIT(SalesUserRespCenter);
    
      CompanyInfo.GET;
      SalesUserRespCenter := CompanyInfo."Responsibility Center";
      UserLocation := CompanyInfo."Location Code";
      IF UserSetup.GET(UserCode) AND (UserCode <> '') THEN
    ...
Codeunit<Item Subst.>.PROCEDURE<OnAfterUpdateComponentBeforeAssign>
  Raised in: Codeunit<Item Subst.>.PROCEDURE<UpdateComponent>
    Code lines:
    ...
            ROUND(ProdOrderComp."Quantity per" * ProdOrderComp."Qty. per Unit of Measure",UOMMgt.QtyRndPrecision);
      END;
      VALIDATE("Quantity per",SaveQty);
    END;
    
    OnAfterUpdateComponentBeforeAssign(ProdOrderComp,TempProdOrderComp); <=====================
    
    ProdOrderComp := TempProdOrderComp;
Codeunit<Item Subst.>.PROCEDURE<OnAssemblyCalcCustPriceOnAfterCalcQtyAvail>
  Raised in: Codeunit<Item Subst.>.PROCEDURE<AssemblyCalcCustPrice>
    Code lines:
    ...
            AvailToPromise.QtyAvailabletoPromise(
              Item,GrossReq,SchedRcpt,
              Item.GETRANGEMAX("Date Filter"),CompanyInfo."Check-Avail. Time Bucket",
              CompanyInfo."Check-Avail. Period Calc.");
          Item.CALCFIELDS(Inventory);
          OnAssemblyCalcCustPriceOnAfterCalcQtyAvail(Item,AssemblyLine,TempItemSubstitution); <=====================
          TempItemSubstitution.Inventory := Item.Inventory;
        END ELSE BEGIN
          TempItemSubstitution."Substitute Type" := TempItemSubstitution."Substitute Type"::"Nonstock Item";
          TempItemSubstitution."Quantity Avail. on Shpt. Date" := 0;
    ...
Codeunit<Item Subst.>.PROCEDURE<OnAssemblyCalcCustPriceOnBeforeCalcQtyAvail>
  Raised in: Codeunit<Item Subst.>.PROCEDURE<AssemblyCalcCustPrice>
    Code lines:
    ...
        TempItemSubstitution."Shipment Date" := TempSalesLine."Shipment Date";
        IF ItemSubstitution."Substitute Type" = ItemSubstitution."Substitute Type"::Item THEN BEGIN
          Item.GET(ItemSubstitution."Substitute No.");
          IF NOT SetupDataIsPresent THEN
            GetSetupData;
          OnAssemblyCalcCustPriceOnBeforeCalcQtyAvail(Item,AssemblyLine,TempItemSubstitution); <=====================
          TempItemSubstitution."Quantity Avail. on Shpt. Date" :=
            AvailToPromise.QtyAvailabletoPromise(
              Item,GrossReq,SchedRcpt,
              Item.GETRANGEMAX("Date Filter"),CompanyInfo."Check-Avail. Time Bucket",
    ...
Codeunit<Item Subst.>.PROCEDURE<OnCalcCustPriceOnAfterCalcQtyAvail>
  Raised in: Codeunit<Item Subst.>.PROCEDURE<CalcCustPrice>
    Code lines:
    ...
            AvailToPromise.QtyAvailabletoPromise(
              Item,GrossReq,SchedRcpt,
              Item.GETRANGEMAX("Date Filter"),CompanyInfo."Check-Avail. Time Bucket",
              CompanyInfo."Check-Avail. Period Calc.");
          Item.CALCFIELDS(Inventory);
          OnCalcCustPriceOnAfterCalcQtyAvail(Item,TempSalesLine,TempItemSubstitution); <=====================
          TempItemSubstitution.Inventory := Item.Inventory;
        END ELSE BEGIN
          TempItemSubstitution."Substitute Type" := TempItemSubstitution."Substitute Type"::"Nonstock Item";
          TempItemSubstitution."Quantity Avail. on Shpt. Date" := 0;
    ...
Codeunit<Item Subst.>.PROCEDURE<OnCalcCustPriceOnBeforeCalcQtyAvail>
  Raised in: Codeunit<Item Subst.>.PROCEDURE<CalcCustPrice>
    Code lines:
    ...
        TempItemSubstitution."Shipment Date" := TempSalesLine."Shipment Date";
        IF ItemSubstitution."Substitute Type" = ItemSubstitution."Substitute Type"::Item THEN BEGIN
          Item.GET(ItemSubstitution."Substitute No.");
          IF NOT SetupDataIsPresent THEN
            GetSetupData;
          OnCalcCustPriceOnBeforeCalcQtyAvail(Item,TempSalesLine,TempItemSubstitution); <=====================
          TempItemSubstitution."Quantity Avail. on Shpt. Date" :=
            AvailToPromise.QtyAvailabletoPromise(
              Item,GrossReq,SchedRcpt,
              Item.GETRANGEMAX("Date Filter"),CompanyInfo."Check-Avail. Time Bucket",
    ...
Codeunit<Item Subst.>.PROCEDURE<OnCalcCustPriceOnBeforeTempItemSubstitutionInsert>
  Raised in: Codeunit<Item Subst.>.PROCEDURE<CalcCustPrice>
    Code lines:
    ...
        END ELSE BEGIN
          TempItemSubstitution."Substitute Type" := TempItemSubstitution."Substitute Type"::"Nonstock Item";
          TempItemSubstitution."Quantity Avail. on Shpt. Date" := 0;
          TempItemSubstitution.Inventory := 0;
        END;
        OnCalcCustPriceOnBeforeTempItemSubstitutionInsert(TempItemSubstitution,ItemSubstitution); <=====================
        TempItemSubstitution.INSERT;
      UNTIL ItemSubstitution.NEXT = 0;
Codeunit<Item Subst.>.PROCEDURE<OnCreateSubstListOnAfterCalcQtyAvail>
  Raised in: Codeunit<Item Subst.>.PROCEDURE<CreateSubstList>
    Code lines:
    ...
          TempItemSubstitution."Quantity Avail. on Shpt. Date" :=
            AvailToPromise.QtyAvailabletoPromise(
              Item,GrossReq,SchedRcpt,
              Item.GETRANGEMAX("Date Filter"),2,ODF);
          Item.CALCFIELDS(Inventory);
          OnCreateSubstListOnAfterCalcQtyAvail(Item,ProdOrderCompSubst,TempItemSubstitution); <=====================
          TempItemSubstitution.Inventory := Item.Inventory;
        END;
    
        IF IsSubstitutionInserted(TempItemSubstitution,ItemSubstitution) THEN BEGIN
    ...
Codeunit<Item Subst.>.PROCEDURE<OnCreateSubstListOnBeforeCalcQtyAvail>
  Raised in: Codeunit<Item Subst.>.PROCEDURE<CreateSubstList>
    Code lines:
    ...
        TempItemSubstitution."Relations Level" := RelationsLevel2;
        TempItemSubstitution."Shipment Date" := DemandDate;
    
        IF CalcATP THEN BEGIN
          Item.GET(ItemSubstitution."Substitute No.");
          OnCreateSubstListOnBeforeCalcQtyAvail(Item,ProdOrderCompSubst,TempItemSubstitution); <=====================
          TempItemSubstitution."Quantity Avail. on Shpt. Date" :=
            AvailToPromise.QtyAvailabletoPromise(
              Item,GrossReq,SchedRcpt,
              Item.GETRANGEMAX("Date Filter"),2,ODF);
    ...
Codeunit<Item Subst.>.PROCEDURE<OnInsertInSubstServiceListOnAfterCalcQtyAvail>
  Raised in: Codeunit<Item Subst.>.PROCEDURE<InsertInSubstServiceList>
    Code lines:
    ...
            AvailToPromise.QtyAvailabletoPromise(
              Item,GrossReq,SchedRcpt,
              Item.GETRANGEMAX("Date Filter"),2,
              CompanyInfo."Check-Avail. Period Calc.");
          Item.CALCFIELDS(Inventory);
          OnInsertInSubstServiceListOnAfterCalcQtyAvail(Item,ServInvLine,TempItemSubstitution); <=====================
          TempItemSubstitution.Inventory := Item.Inventory;
        END;
    
        IF TempItemSubstitution.INSERT AND
    ...
Codeunit<Item Subst.>.PROCEDURE<OnInsertInSubstServiceListOnBeforeCalcQtyAvail>
  Raised in: Codeunit<Item Subst.>.PROCEDURE<InsertInSubstServiceList>
    Code lines:
    ...
    
        IF TempItemSubstitution."Substitute Type" = TempItemSubstitution.Type::Item THEN BEGIN
          Item.GET(ItemSubstitution."Substitute No.");
          IF NOT SetupDataIsPresent THEN
            GetSetupData;
          OnInsertInSubstServiceListOnBeforeCalcQtyAvail(Item,ServInvLine,TempItemSubstitution); <=====================
          TempItemSubstitution."Quantity Avail. on Shpt. Date" :=
            AvailToPromise.QtyAvailabletoPromise(
              Item,GrossReq,SchedRcpt,
              Item.GETRANGEMAX("Date Filter"),2,
    ...
Codeunit<Item Subst.>.PROCEDURE<OnItemSubstGetOnAfterSubstSalesLineItem>
  Raised in: Codeunit<Item Subst.>.PROCEDURE<ItemSubstGet>
    Code lines:
    ...
        TempSalesLine.CreateDim(
          DimMgt.TypeToTableID3(TempSalesLine.Type),TempSalesLine."No.",
          DATABASE::Job,TempSalesLine."Job No.",
          DATABASE::"Responsibility Center",TempSalesLine."Responsibility Center");
    
        OnItemSubstGetOnAfterSubstSalesLineItem(TempSalesLine); <=====================
    
        COMMIT;
        IF ItemCheckAvail.SalesLineCheck(TempSalesLine) THEN
          TempSalesLine := SalesLine;
    ...
Codeunit<Dist. Integration>.PROCEDURE<OnAfterInsertPurchLine>
  Raised in: Codeunit<Dist. Integration>.PROCEDURE<GetSpecialOrders>
    Code lines:
    ...
          PurchLine."Purchasing Code" := SalesLine."Purchasing Code";
          PurchLine."Special Order Sales No." := SalesLine."Document No.";
          PurchLine."Special Order Sales Line No." := SalesLine."Line No.";
          OnBeforeInsertPurchLine(PurchLine,SalesLine);
          PurchLine.INSERT;
          OnAfterInsertPurchLine(PurchLine,SalesLine); <=====================
    
          NextLineNo := NextLineNo + 10000;
    
          SalesLine."Unit Cost (LCY)" := PurchLine."Unit Cost (LCY)";
    ...
Codeunit<Dist. Integration>.PROCEDURE<OnAfterPurchItemCrossRefFound>
  Raised in: Codeunit<Dist. Integration>.PROCEDURE<EnterPurchaseItemCrossRef>
    Code lines:
    ...
          "Cross-Reference Type No." := ItemCrossReference."Cross-Reference Type No.";
          IF ItemCrossReference.Description <> '' THEN BEGIN
            Description := ItemCrossReference.Description;
            "Description 2" := ItemCrossReference."Description 2";
          END;
          OnAfterPurchItemCrossRefFound(PurchLine2,ItemCrossReference); <=====================
        END ELSE BEGIN
          "Cross-Reference No." := '';
          "Cross-Reference Type" := "Cross-Reference Type"::" ";
          "Cross-Reference Type No." := '';
    ...
Codeunit<Dist. Integration>.PROCEDURE<OnAfterPurchItemCrossRefNotFound>
  Raised in: Codeunit<Dist. Integration>.PROCEDURE<EnterPurchaseItemCrossRef>
    Code lines:
    ...
            Item.GET("No.");
            Description := Item.Description;
            "Description 2" := Item."Description 2";
          END;
          GetItemTranslation;
          OnAfterPurchItemCrossRefNotFound(PurchLine2,ItemVariant); <=====================
        END;
      END;
Codeunit<Dist. Integration>.PROCEDURE<OnAfterSalesItemCrossRefFound>
  Raised in: Codeunit<Dist. Integration>.PROCEDURE<EnterSalesItemCrossRef>
    Code lines:
    ...
          IF ItemCrossReference.Description <> '' THEN BEGIN
            Description := ItemCrossReference.Description;
            "Description 2" := ItemCrossReference."Description 2";
          END;
          "Cross-Reference Type No." := ItemCrossReference."Cross-Reference Type No.";
          OnAfterSalesItemCrossRefFound(SalesLine2,ItemCrossReference); <=====================
        END ELSE BEGIN
          "Cross-Reference No." := '';
          "Cross-Reference Type" := "Cross-Reference Type"::" ";
          "Cross-Reference Type No." := '';
    ...
Codeunit<Dist. Integration>.PROCEDURE<OnAfterSalesItemCrossRefNotFound>
  Raised in: Codeunit<Dist. Integration>.PROCEDURE<EnterSalesItemCrossRef>
    Code lines:
    ...
            Item.GET("No.");
            Description := Item.Description;
            "Description 2" := Item."Description 2";
          END;
          GetItemTranslation;
          OnAfterSalesItemCrossRefNotFound(SalesLine2,ItemVariant); <=====================
        END;
      END;
Codeunit<Dist. Integration>.PROCEDURE<OnAfterSalesLineModify>
  Raised in: Codeunit<Dist. Integration>.PROCEDURE<GetSpecialOrders>
    Code lines:
    ...
          SalesLine.VALIDATE("Unit Cost (LCY)");
          SalesLine."Special Order Purchase No." := PurchLine."Document No.";
          SalesLine."Special Order Purch. Line No." := PurchLine."Line No.";
          OnBeforeSalesLineModify(SalesLine,PurchLine);
          SalesLine.MODIFY;
          OnAfterSalesLineModify(SalesLine,PurchLine); <=====================
          IF TransferExtendedText.PurchCheckIfAnyExtText(PurchLine,TRUE) THEN BEGIN
            TransferExtendedText.InsertPurchExtText(PurchLine);
            PurchLine2.SETRANGE("Document Type","Document Type");
            PurchLine2.SETRANGE("Document No.","No.");
    ...
Codeunit<Dist. Integration>.PROCEDURE<OnBeforeICRLookupPurchaseItem>
  Raised in: Codeunit<Dist. Integration>.PROCEDURE<ICRLookupPurchaseItem>
    Code lines:
    IsHandled := FALSE;
    OnBeforeICRLookupPurchaseItem(PurchLine2,ReturnedCrossRef,ShowDialog,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    PurchLine.COPY(PurchLine2);
    IF PurchLine.Type = PurchLine.Type::Item THEN
      FindOrSelectICROnCrossReferenceList(
        ReturnedCrossRef,ShowDialog,PurchLine."No.",PurchLine."Cross-Reference No.",PurchLine."Buy-from Vendor No.",
        ReturnedCrossRef."Cross-Reference Type"::Vendor);
Codeunit<Dist. Integration>.PROCEDURE<OnBeforeICRLookupSalesItem>
  Raised in: Codeunit<Dist. Integration>.PROCEDURE<ICRLookupSalesItem>
    Code lines:
    IsHandled := FALSE;
    OnBeforeICRLookupSalesItem(SalesLine2,ReturnedCrossRef,ShowDialog,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SalesLine.COPY(SalesLine2);
    IF SalesLine.Type = SalesLine.Type::Item THEN
      FindOrSelectICROnCrossReferenceList(
        ReturnedCrossRef,ShowDialog,SalesLine."No.",SalesLine."Cross-Reference No.",SalesLine."Sell-to Customer No.",
        ReturnedCrossRef."Cross-Reference Type"::Customer);
Codeunit<Dist. Integration>.PROCEDURE<OnBeforeInsertPurchLine>
  Raised in: Codeunit<Dist. Integration>.PROCEDURE<GetSpecialOrders>
    Code lines:
    ...
          PurchLine.GetItemTranslation;
          PurchLine."Special Order" := TRUE;
          PurchLine."Purchasing Code" := SalesLine."Purchasing Code";
          PurchLine."Special Order Sales No." := SalesLine."Document No.";
          PurchLine."Special Order Sales Line No." := SalesLine."Line No.";
          OnBeforeInsertPurchLine(PurchLine,SalesLine); <=====================
          PurchLine.INSERT;
          OnAfterInsertPurchLine(PurchLine,SalesLine);
    
          NextLineNo := NextLineNo + 10000;
    ...
Codeunit<Dist. Integration>.PROCEDURE<OnBeforeSalesLineModify>
  Raised in: Codeunit<Dist. Integration>.PROCEDURE<GetSpecialOrders>
    Code lines:
    ...
    
          SalesLine."Unit Cost (LCY)" := PurchLine."Unit Cost (LCY)";
          SalesLine.VALIDATE("Unit Cost (LCY)");
          SalesLine."Special Order Purchase No." := PurchLine."Document No.";
          SalesLine."Special Order Purch. Line No." := PurchLine."Line No.";
          OnBeforeSalesLineModify(SalesLine,PurchLine); <=====================
          SalesLine.MODIFY;
          OnAfterSalesLineModify(SalesLine,PurchLine);
          IF TransferExtendedText.PurchCheckIfAnyExtText(PurchLine,TRUE) THEN BEGIN
            TransferExtendedText.InsertPurchExtText(PurchLine);
    ...
Codeunit<Dist. Integration>.PROCEDURE<OnGetSpecialOrdersOnAfterSalesLineSetFilters>
  Raised in: Codeunit<Dist. Integration>.PROCEDURE<GetSpecialOrders>
    Code lines:
    ...
      SalesLine.SETRANGE("Special Order",TRUE);
      SalesLine.SETFILTER("Outstanding Quantity",'<>0');
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.SETFILTER("No.",'<>%1','');
      SalesLine.SETRANGE("Special Order Purch. Line No.",0);
      OnGetSpecialOrdersOnAfterSalesLineSetFilters(SalesLine,SalesHeader); <=====================
      IF SalesLine.FINDSET THEN
        REPEAT
          IsHandled := FALSE;
          OnGetSpecialOrdersOnBeforeTestSalesLine(SalesLine,PurchHeader,IsHandled);
    ...
Codeunit<Dist. Integration>.PROCEDURE<OnGetSpecialOrdersOnAfterTransferExtendedText>
  Raised in: Codeunit<Dist. Integration>.PROCEDURE<GetSpecialOrders>
    Code lines:
    ...
            PurchLine2.SETRANGE("Document No.","No.");
            IF PurchLine2.FINDLAST THEN
              NextLineNo := PurchLine2."Line No.";
            NextLineNo := NextLineNo + 10000;
          END;
          OnGetSpecialOrdersOnAfterTransferExtendedText(SalesLine,PurchHeader,NextLineNo); <=====================
        UNTIL SalesLine.NEXT = 0
      ELSE
        ERROR(
          Text000,
    ...
Codeunit<Dist. Integration>.PROCEDURE<OnGetSpecialOrdersOnBeforeSelectSalesHeader>
  Raised in: Codeunit<Dist. Integration>.PROCEDURE<GetSpecialOrders>
    Code lines:
    WITH PurchHeader DO BEGIN
      TESTFIELD("Document Type","Document Type"::Order);
    
      IsHandled := FALSE;
      OnGetSpecialOrdersOnBeforeSelectSalesHeader(PurchHeader,SalesHeader,IsHandled); <=====================
      IF NOT IsHandled THEN BEGIN
        SalesHeader.SETCURRENTKEY("Document Type","Sell-to Customer No.");
        SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
        SalesHeader.SETRANGE("Sell-to Customer No.","Sell-to Customer No.");
        IF (PAGE.RUNMODAL(PAGE::"Sales List",SalesHeader) <> ACTION::LookupOK) OR
    ...
Codeunit<Dist. Integration>.PROCEDURE<OnGetSpecialOrdersOnBeforeTestSalesHeader>
  Raised in: Codeunit<Dist. Integration>.PROCEDURE<GetSpecialOrders>
    Code lines:
    ...
          EXIT;
      END;
    
      LOCKTABLE;
    
      OnGetSpecialOrdersOnBeforeTestSalesHeader(SalesHeader); <=====================
    
      SalesHeader.TESTFIELD("Document Type",SalesHeader."Document Type"::Order);
      TESTFIELD("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
      IF "Ship-to Code" <> '' THEN
    ...
Codeunit<Dist. Integration>.PROCEDURE<OnGetSpecialOrdersOnBeforeTestSalesLine>
  Raised in: Codeunit<Dist. Integration>.PROCEDURE<GetSpecialOrders>
    Code lines:
    ...
      SalesLine.SETRANGE("Special Order Purch. Line No.",0);
      OnGetSpecialOrdersOnAfterSalesLineSetFilters(SalesLine,SalesHeader);
      IF SalesLine.FINDSET THEN
        REPEAT
          IsHandled := FALSE;
          OnGetSpecialOrdersOnBeforeTestSalesLine(SalesLine,PurchHeader,IsHandled); <=====================
          IF NOT IsHandled THEN
            IF (SalesLine.Type = SalesLine.Type::Item) AND
               ItemUnitOfMeasure.GET(SalesLine."No.",SalesLine."Unit of Measure Code")
            THEN
    ...
Codeunit<Catalog Item Management>.PROCEDURE<OnAfterCreateNewItem>
  Raised in: Codeunit<Catalog Item Management>.PROCEDURE<CreateNewItem>
    Code lines:
    ...
    Item."Manufacturer Code" := NonstockItem."Manufacturer Code";
    Item."Item Category Code" := DummyItemTemplate."Item Category Code";
    Item."Created From Nonstock Item" := TRUE;
    Item.INSERT;
    
    OnAfterCreateNewItem(Item); <=====================
Codeunit<Catalog Item Management>.PROCEDURE<OnAfterItemCrossReferenceFilter>
  Raised in: Codeunit<Catalog Item Management>.PROCEDURE<NonstockItemCrossRef>
    Code lines:
    ItemCrossReference.SETRANGE("Item No.",NonStock2."Item No.");
    ItemCrossReference.SETRANGE("Unit of Measure",NonStock2."Unit of Measure");
    ItemCrossReference.SETRANGE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::Vendor);
    ItemCrossReference.SETRANGE("Cross-Reference Type No.",NonStock2."Vendor No.");
    ItemCrossReference.SETRANGE("Cross-Reference No.",NonStock2."Vendor Item No.");
    OnAfterItemCrossReferenceFilter(ItemCrossReference,NonStock2); <=====================
    IF NOT ItemCrossReference.FINDFIRST THEN BEGIN
      ItemCrossReference.INIT;
      ItemCrossReference.VALIDATE("Item No.",NonStock2."Item No.");
      ItemCrossReference.VALIDATE("Unit of Measure",NonStock2."Unit of Measure");
    ...
  Raised in: Codeunit<Catalog Item Management>.PROCEDURE<NonstockItemCrossRef>
    Code lines:
    ItemCrossReference.SETRANGE("Item No.",NonStock2."Item No.");
    ItemCrossReference.SETRANGE("Unit of Measure",NonStock2."Unit of Measure");
    ItemCrossReference.SETRANGE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::Vendor);
    ItemCrossReference.SETRANGE("Cross-Reference Type No.",NonStock2."Vendor No.");
    ItemCrossReference.SETRANGE("Cross-Reference No.",NonStock2."Vendor Item No.");
    OnAfterItemCrossReferenceFilter(ItemCrossReference,NonStock2); <=====================
    IF NOT ItemCrossReference.FINDFIRST THEN BEGIN
      ItemCrossReference.INIT;
      ItemCrossReference.VALIDATE("Item No.",NonStock2."Item No.");
      ItemCrossReference.VALIDATE("Unit of Measure",NonStock2."Unit of Measure");
    ...
Codeunit<Catalog Item Management>.PROCEDURE<OnAfterItemCrossReferenceInsert>
  Raised in: Codeunit<Catalog Item Management>.PROCEDURE<NonstockItemCrossRef>
    Code lines:
    ...
      ItemCrossReference.VALIDATE("Unit of Measure",NonStock2."Unit of Measure");
      ItemCrossReference.VALIDATE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::Vendor);
      ItemCrossReference.VALIDATE("Cross-Reference Type No.",NonStock2."Vendor No.");
      ItemCrossReference.VALIDATE("Cross-Reference No.",NonStock2."Vendor Item No.");
      ItemCrossReference.INSERT;
      OnAfterItemCrossReferenceInsert(ItemCrossReference,NonStock2); <=====================
    END;
    IF NonStock2."Bar Code" <> '' THEN BEGIN
      ItemCrossReference.RESET;
      ItemCrossReference.SETRANGE("Item No.",NonStock2."Item No.");
    ...
  Raised in: Codeunit<Catalog Item Management>.PROCEDURE<NonstockItemCrossRef>
    Code lines:
    ...
      ItemCrossReference.VALIDATE("Unit of Measure",NonStock2."Unit of Measure");
      ItemCrossReference.VALIDATE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::Vendor);
      ItemCrossReference.VALIDATE("Cross-Reference Type No.",NonStock2."Vendor No.");
      ItemCrossReference.VALIDATE("Cross-Reference No.",NonStock2."Vendor Item No.");
      ItemCrossReference.INSERT;
      OnAfterItemCrossReferenceInsert(ItemCrossReference,NonStock2); <=====================
    END;
    IF NonStock2."Bar Code" <> '' THEN BEGIN
      ItemCrossReference.RESET;
      ItemCrossReference.SETRANGE("Item No.",NonStock2."Item No.");
    ...
Codeunit<Catalog Item Management>.PROCEDURE<OnBeforeCreateNewItem>
  Raised in: Codeunit<Catalog Item Management>.PROCEDURE<CreateNewItem>
    Code lines:
    ...
    Item."Gen. Prod. Posting Group" := DummyItemTemplate."Gen. Prod. Posting Group";
    Item."Tax Group Code" := DummyItemTemplate."Tax Group Code";
    Item."VAT Prod. Posting Group" := DummyItemTemplate."VAT Prod. Posting Group";
    Item."Item Disc. Group" := DummyItemTemplate."Item Disc. Group";
    
    OnBeforeCreateNewItem(Item,DummyItemTemplate,NonstockItem); <=====================
    
    Item."No." := ItemNo;
    Item.Description := NonstockItem.Description;
    Item.VALIDATE(Description,Item.Description);
    ...
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterCheckInvtPostingSetup>
  Raised in: Codeunit<TransferOrder-Post Shipment>.<OnRun>
    Code lines:
    ...
      SourceCode := SourceCodeSetup.Transfer;
      InvtSetup.GET;
      InvtSetup.TESTFIELD("Posted Transfer Shpt. Nos.");
    
      CheckInvtPostingSetup;
      OnAfterCheckInvtPostingSetup(TransHeader,TempWhseShptHeader,SourceCode); <=====================
    
      LockTables(InvtSetup."Automatic Cost Posting");
    
      // Insert shipment header
    ...
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterCreateItemJnlLine>
  Raised in: Codeunit<TransferOrder-Post Shipment>.PROCEDURE<CreateItemJnlLine>
    Code lines:
    ...
      "Applies-to Entry" := TransferLine."Appl.-to Item Entry";
      "Shpt. Method Code" := TransShptHeader2."Shipment Method Code";
      "Direct Transfer" := TransferLine."Direct Transfer";
    END;
    
    OnAfterCreateItemJnlLine(ItemJnlLine,TransferLine,TransShptHeader2,TransShptLine2); <=====================
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterInsertShptEntryRelation>
  Raised in: Codeunit<TransferOrder-Post Shipment>.PROCEDURE<InsertShptEntryRelation>
    Code lines:
    ...
          TempHandlingSpecification := TempHandlingSpecification2;
          TempHandlingSpecification."Source Prod. Order Line" := TransShptLine."Line No.";
          TempHandlingSpecification."Buffer Status" := TempHandlingSpecification."Buffer Status"::MODIFY;
          TempHandlingSpecification.INSERT;
        UNTIL TempHandlingSpecification2.NEXT = 0;
        OnAfterInsertShptEntryRelation(TransLine,WhseShip,0,SuppressCommit); <=====================
        EXIT(0);
      END;
    END ELSE BEGIN
      OnAfterInsertShptEntryRelation(TransLine,WhseShip,ItemJnlLine."Item Shpt. Entry No.",SuppressCommit); <=====================
    ...
  Raised in: Codeunit<TransferOrder-Post Shipment>.PROCEDURE<InsertShptEntryRelation>
    Code lines:
    ...
          TempHandlingSpecification := TempHandlingSpecification2;
          TempHandlingSpecification."Source Prod. Order Line" := TransShptLine."Line No.";
          TempHandlingSpecification."Buffer Status" := TempHandlingSpecification."Buffer Status"::MODIFY;
          TempHandlingSpecification.INSERT;
        UNTIL TempHandlingSpecification2.NEXT = 0;
        OnAfterInsertShptEntryRelation(TransLine,WhseShip,0,SuppressCommit); <=====================
        EXIT(0);
      END;
    END ELSE BEGIN
      OnAfterInsertShptEntryRelation(TransLine,WhseShip,ItemJnlLine."Item Shpt. Entry No.",SuppressCommit); <=====================
    ...
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterInsertTransShptHeader>
  Raised in: Codeunit<TransferOrder-Post Shipment>.PROCEDURE<InsertTransShptHeader>
    Code lines:
    ...
    OnBeforeGenNextNo(TransShptHeader,TransHeader);
    IF TransShptHeader."No." = '' THEN
      TransShptHeader."No." := NoSeriesMgt.GetNextNo(NoSeries,TransHeader."Posting Date",TRUE);
    OnBeforeInsertTransShptHeader(TransShptHeader,TransHeader,SuppressCommit);
    TransShptHeader.INSERT;
    OnAfterInsertTransShptHeader(TransHeader,TransShptHeader); <=====================
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterInsertTransShptLine>
  Raised in: Codeunit<TransferOrder-Post Shipment>.PROCEDURE<InsertTransShptLine>
    Code lines:
    ...
      IF WhsePosting THEN
        PostWhseJnlLine(ItemJnlLine,OriginalQuantity,OriginalQuantityBase);
    END;
    OnBeforeInsertTransShptLine(TransShptLine,TransLine,SuppressCommit);
    TransShptLine.INSERT;
    OnAfterInsertTransShptLine(TransShptLine,TransLine,SuppressCommit); <=====================
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterInvtAdjmt>
  Raised in: Codeunit<TransferOrder-Post Shipment>.<OnRun>
    Code lines:
    ...
    
      InvtSetup.GET;
      IF InvtSetup."Automatic Cost Adjustment" <> InvtSetup."Automatic Cost Adjustment"::Never THEN BEGIN
        InvtAdjmt.SetProperties(TRUE,InvtSetup."Automatic Cost Posting");
        InvtAdjmt.MakeMultiLevelAdjmt;
        OnAfterInvtAdjmt(TransHeader,TransShptHeader); <=====================
      END;
    
      IF WhseShip THEN
        WhseShptLine.LOCKTABLE;
    ...
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterTransferOrderPostShipment>
  Raised in: Codeunit<TransferOrder-Post Shipment>.<OnRun>
    Code lines:
    ...
    END;
    
    UpdateAnalysisView.UpdateAll(0,TRUE);
    UpdateItemAnalysisView.UpdateAll(0,TRUE);
    Rec := TransHeader;
    OnAfterTransferOrderPostShipment(Rec,SuppressCommit,TransShptHeader); <=====================
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnAfterTransLineModify>
  Raised in: Codeunit<TransferOrder-Post Shipment>.<OnRun>
    Code lines:
    ...
          CopyTransLine(TransLine2,TransLine,NextLineNo,TransHeader);
          TransferTracking(TransLine,TransLine2,TransLine."Qty. to Ship (Base)");
          TransLine.VALIDATE("Quantity Shipped",TransLine."Quantity Shipped" + TransLine."Qty. to Ship");
          TransLine.UpdateWithWarehouseShipReceive;
          TransLine.MODIFY;
          OnAfterTransLineModify(TransLine); <=====================
        UNTIL TransLine.NEXT = 0;
      END;
    
      IF WhseShip THEN
    ...
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforeCheckItemInInventory>
  Raised in: Codeunit<TransferOrder-Post Shipment>.PROCEDURE<CheckItemInInventory>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckItemInInventory(TransLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH Item DO BEGIN
      GET(TransLine."Item No.");
      SETRANGE("Variant Filter",TransLine."Variant Code");
      SETRANGE("Location Filter",TransLine."Transfer-from Code");
      CALCFIELDS(Inventory);
    ...
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforeCopyTransLines>
  Raised in: Codeunit<TransferOrder-Post Shipment>.<OnRun>
    Code lines:
    ...
    
      IF WhseShip THEN
        WhseShptLine.LOCKTABLE;
      TransLine.LOCKTABLE;
    
      OnBeforeCopyTransLines(TransHeader); <=====================
    
      TransLine.SETFILTER(Quantity,'<>0');
      TransLine.SETFILTER("Qty. to Ship",'<>0');
      IF TransLine.FIND('-') THEN BEGIN
    ...
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforeDeleteOneTransferOrder>
  Raised in: Codeunit<TransferOrder-Post Shipment>.PROCEDURE<FinalizePosting>
    Code lines:
    TransLine.SETRANGE(Quantity);
    TransLine.SETRANGE("Qty. to Ship");
    DeleteOne := TransHeader.ShouldDeleteOneTransferOrder(TransLine);
    OnBeforeDeleteOneTransferOrder(TransHeader,DeleteOne); <=====================
    IF DeleteOne THEN
      TransHeader.DeleteOneTransferOrder(TransHeader,TransLine)
    ELSE BEGIN
      WhseTransferRelease.Release(TransHeader);
      ReserveTransLine.UpdateItemTrackingAfterPosting(TransHeader,0);
    END;
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforeGenNextNo>
  Raised in: Codeunit<TransferOrder-Post Shipment>.PROCEDURE<InsertTransShptHeader>
    Code lines:
    TransShptHeader.INIT;
    TransShptHeader.CopyFromTransferHeader(TransHeader);
    TransShptHeader."No. Series" := NoSeries;
    OnBeforeGenNextNo(TransShptHeader,TransHeader); <=====================
    IF TransShptHeader."No." = '' THEN
      TransShptHeader."No." := NoSeriesMgt.GetNextNo(NoSeries,TransHeader."Posting Date",TRUE);
    OnBeforeInsertTransShptHeader(TransShptHeader,TransHeader,SuppressCommit);
    TransShptHeader.INSERT;
    OnAfterInsertTransShptHeader(TransHeader,TransShptHeader);
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforeInsertTransShptHeader>
  Raised in: Codeunit<TransferOrder-Post Shipment>.PROCEDURE<InsertTransShptHeader>
    Code lines:
    ...
    TransShptHeader.CopyFromTransferHeader(TransHeader);
    TransShptHeader."No. Series" := NoSeries;
    OnBeforeGenNextNo(TransShptHeader,TransHeader);
    IF TransShptHeader."No." = '' THEN
      TransShptHeader."No." := NoSeriesMgt.GetNextNo(NoSeries,TransHeader."Posting Date",TRUE);
    OnBeforeInsertTransShptHeader(TransShptHeader,TransHeader,SuppressCommit); <=====================
    TransShptHeader.INSERT;
    OnAfterInsertTransShptHeader(TransHeader,TransShptHeader);
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforeInsertTransShptLine>
  Raised in: Codeunit<TransferOrder-Post Shipment>.PROCEDURE<InsertTransShptLine>
    Code lines:
    ...
        END;
      END;
      IF WhsePosting THEN
        PostWhseJnlLine(ItemJnlLine,OriginalQuantity,OriginalQuantityBase);
    END;
    OnBeforeInsertTransShptLine(TransShptLine,TransLine,SuppressCommit); <=====================
    TransShptLine.INSERT;
    OnAfterInsertTransShptLine(TransShptLine,TransLine,SuppressCommit);
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforePostItemJournalLine>
  Raised in: Codeunit<TransferOrder-Post Shipment>.PROCEDURE<PostItem>
    Code lines:
    CreateItemJnlLine(ItemJnlLine,TransferLine,TransShptHeader2,TransShptLine2);
    ReserveItemJnlLine(ItemJnlLine,TransferLine,WhseShip,WhseShptHeader2);
    
    OnBeforePostItemJournalLine(ItemJnlLine,TransferLine,TransShptHeader2,TransShptLine2,SuppressCommit); <=====================
    ItemJnlPostLine.RunWithCheck(ItemJnlLine);
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnBeforeTransferOrderPostShipment>
  Raised in: Codeunit<TransferOrder-Post Shipment>.<OnRun>
    Code lines:
    ReleaseDocument(Rec);
    TransHeader := Rec;
    TransHeader.SetHideValidationDialog(HideValidationDialog);
    
    OnBeforeTransferOrderPostShipment(TransHeader,SuppressCommit); <=====================
    
    WITH TransHeader DO BEGIN
      CheckBeforePost;
    
      WhseReference := "Posting from Whse. Ref.";
    ...
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnCheckTransLine>
  Raised in: Codeunit<TransferOrder-Post Shipment>.<OnRun>
    Code lines:
    ...
          IF TransLine."Item No." <> '' THEN BEGIN
            Item.GET(TransLine."Item No.");
            Item.TESTFIELD(Blocked,FALSE);
          END;
    
          OnCheckTransLine(TransLine); <=====================
    
          InsertTransShptLine(TransShptHeader);
        UNTIL TransLine.NEXT = 0;
    
    ...
Codeunit<TransferOrder-Post Shipment>.PROCEDURE<OnInsertTransShptLineOnAfterCreatePostedShptLine>
  Raised in: Codeunit<TransferOrder-Post Shipment>.PROCEDURE<InsertTransShptLine>
    Code lines:
    ...
        WhseShptLine.SETRANGE("Source Line No.",TransLine."Line No.");
        IF WhseShptLine.FINDFIRST THEN BEGIN
          WhseShptLine.TESTFIELD("Qty. to Ship",TransShptLine.Quantity);
          WhsePostShpt.CreatePostedShptLine(
            WhseShptLine,PostedWhseShptHeader,PostedWhseShptLine,TempWhseSplitSpecification);
          OnInsertTransShptLineOnAfterCreatePostedShptLine(WhseShptLine,PostedWhseShptLine); <=====================
        END;
      END;
      IF WhsePosting THEN
        PostWhseJnlLine(ItemJnlLine,OriginalQuantity,OriginalQuantityBase);
    ...
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterCheckInvtPostingSetup>
  Raised in: Codeunit<TransferOrder-Post Receipt>.<OnRun>
    Code lines:
    ...
      SourceCode := SourceCodeSetup.Transfer;
      InvtSetup.GET;
      InvtSetup.TESTFIELD("Posted Transfer Rcpt. Nos.");
    
      CheckInvtPostingSetup;
      OnAfterCheckInvtPostingSetup(TransHeader,TempWhseRcptHeader,SourceCode); <=====================
    
      LockTables(InvtSetup."Automatic Cost Posting");
    
      // Insert receipt header
    ...
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterInsertTransRcptLine>
  Raised in: Codeunit<TransferOrder-Post Receipt>.PROCEDURE<InsertTransRcptLine>
    Code lines:
    TransRcptLine.INIT;
    TransRcptLine."Document No." := ReceiptNo;
    TransRcptLine.CopyFromTransferLine(TransLine);
    OnBeforeInsertTransRcptLine(TransRcptLine,TransLine,SuppressCommit);
    TransRcptLine.INSERT;
    OnAfterInsertTransRcptLine(TransRcptLine,TransLine,SuppressCommit); <=====================
    
    IF TransLine."Qty. to Receive" > 0 THEN BEGIN
      OriginalQuantity := TransLine."Qty. to Receive";
      OriginalQuantityBase := TransLine."Qty. to Receive (Base)";
    ...
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterTransferOderPostReceipt>
  Raised in: Codeunit<TransferOrder-Post Receipt>.<OnRun>
    Code lines:
    ...
    UpdateAnalysisView.UpdateAll(0,TRUE);
    UpdateItemAnalysisView.UpdateAll(0,TRUE);
    Rec := TransHeader;
    
    OnAfterTransferOrderPostReceipt(Rec,SuppressCommit,TransRcptHeader);
    OnAfterTransferOderPostReceipt(Rec); <=====================
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterTransferOrderPostReceipt>
  Raised in: Codeunit<TransferOrder-Post Receipt>.<OnRun>
    Code lines:
    ...
    END;
    UpdateAnalysisView.UpdateAll(0,TRUE);
    UpdateItemAnalysisView.UpdateAll(0,TRUE);
    Rec := TransHeader;
    
    OnAfterTransferOrderPostReceipt(Rec,SuppressCommit,TransRcptHeader); <=====================
    OnAfterTransferOderPostReceipt(Rec);
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterTransLineUpdateQtyReceived>
  Raised in: Codeunit<TransferOrder-Post Receipt>.<OnRun>
    Code lines:
    ...
          TransLine.UpdateWithWarehouseShipReceive;
          ReservMgt.SetItemJnlLine(ItemJnlLine);
          ReservMgt.SetItemTrackingHandling(1); // Allow deletion
          ReservMgt.DeleteReservEntries(TRUE,0);
          TransLine.MODIFY;
          OnAfterTransLineUpdateQtyReceived(TransLine,SuppressCommit); <=====================
        UNTIL TransLine.NEXT = 0;
    
      IF WhseReceive THEN
        WhseRcptLine.LOCKTABLE;
    ...
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnAfterTransRcptLineModify>
  Raised in: Codeunit<TransferOrder-Post Receipt>.PROCEDURE<InsertTransRcptLine>
    Code lines:
    ...
            WhseRcptLine,PostedWhseRcptHeader,PostedWhseRcptLine,TempWhseSplitSpecification);
        END;
      END;
      IF WhsePosting THEN
        PostWhseJnlLine(ItemJnlLine,OriginalQuantity,OriginalQuantityBase,TempWhseSplitSpecification);
      OnAfterTransRcptLineModify(TransRcptLine,TransLine,SuppressCommit); <=====================
    END;
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforeDeleteOneTransferHeader>
  Raised in: Codeunit<TransferOrder-Post Receipt>.<OnRun>
    Code lines:
    ...
      MODIFY;
    
      TransLine.SETRANGE(Quantity);
      TransLine.SETRANGE("Qty. to Receive");
      DeleteOne := ShouldDeleteOneTransferOrder(TransLine);
      OnBeforeDeleteOneTransferHeader(TransHeader,DeleteOne); <=====================
      IF DeleteOne THEN
        DeleteOneTransferOrder(TransHeader,TransLine)
      ELSE BEGIN
        WhseTransferRelease.Release(TransHeader);
    ...
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforeInsertTransRcptHeader>
  Raised in: Codeunit<TransferOrder-Post Receipt>.PROCEDURE<InsertTransRcptHeader>
    Code lines:
    OnBeforeInsertTransRcptHeader(TransRcptHeader,TransHeader,SuppressCommit,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    TransRcptHeader.INIT;
    TransRcptHeader.CopyFromTransferHeader(TransHeader);
    TransRcptHeader."No. Series" := NoSeries;
    TransRcptHeader."No." := NoSeriesMgt.GetNextNo(NoSeries,TransHeader."Posting Date",TRUE);
    OnBeforeTransRcptHeaderInsert(TransRcptHeader,TransHeader);
    TransRcptHeader.INSERT;
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforeInsertTransRcptLine>
  Raised in: Codeunit<TransferOrder-Post Receipt>.PROCEDURE<InsertTransRcptLine>
    Code lines:
    TransRcptLine.INIT;
    TransRcptLine."Document No." := ReceiptNo;
    TransRcptLine.CopyFromTransferLine(TransLine);
    OnBeforeInsertTransRcptLine(TransRcptLine,TransLine,SuppressCommit); <=====================
    TransRcptLine.INSERT;
    OnAfterInsertTransRcptLine(TransRcptLine,TransLine,SuppressCommit);
    
    IF TransLine."Qty. to Receive" > 0 THEN BEGIN
      OriginalQuantity := TransLine."Qty. to Receive";
      OriginalQuantityBase := TransLine."Qty. to Receive (Base)";
    ...
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforePostItemJournalLine>
  Raised in: Codeunit<TransferOrder-Post Receipt>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
    ItemJnlLine."Shpt. Method Code" := TransRcptHeader2."Shipment Method Code";
    ItemJnlLine."Direct Transfer" := TransLine."Direct Transfer";
    WriteDownDerivedLines(TransLine3);
    ItemJnlPostLine.SetPostponeReservationHandling(TRUE);
    
    OnBeforePostItemJournalLine(ItemJnlLine,TransLine3,TransRcptHeader2,TransRcptLine2,SuppressCommit); <=====================
    ItemJnlPostLine.RunWithCheck(ItemJnlLine);
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforeTransferOderPostReceipt>
  Raised in: Codeunit<TransferOrder-Post Receipt>.<OnRun>
    Code lines:
    ReleaseDocument(Rec);
    TransHeader := Rec;
    TransHeader.SetHideValidationDialog(HideValidationDialog);
    
    OnBeforeTransferOderPostReceipt(TransHeader); <=====================
    OnBeforeTransferOrderPostReceipt(TransHeader,SuppressCommit);
    
    WITH TransHeader DO BEGIN
      CheckBeforePost;
    
    ...
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforeTransferOrderPostReceipt>
  Raised in: Codeunit<TransferOrder-Post Receipt>.<OnRun>
    Code lines:
    ReleaseDocument(Rec);
    TransHeader := Rec;
    TransHeader.SetHideValidationDialog(HideValidationDialog);
    
    OnBeforeTransferOderPostReceipt(TransHeader);
    OnBeforeTransferOrderPostReceipt(TransHeader,SuppressCommit); <=====================
    
    WITH TransHeader DO BEGIN
      CheckBeforePost;
    
    ...
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnBeforeTransRcptHeaderInsert>
  Raised in: Codeunit<TransferOrder-Post Receipt>.PROCEDURE<InsertTransRcptHeader>
    Code lines:
    ...
    
    TransRcptHeader.INIT;
    TransRcptHeader.CopyFromTransferHeader(TransHeader);
    TransRcptHeader."No. Series" := NoSeries;
    TransRcptHeader."No." := NoSeriesMgt.GetNextNo(NoSeries,TransHeader."Posting Date",TRUE);
    OnBeforeTransRcptHeaderInsert(TransRcptHeader,TransHeader); <=====================
    TransRcptHeader.INSERT;
Codeunit<TransferOrder-Post Receipt>.PROCEDURE<OnCheckTransLine>
  Raised in: Codeunit<TransferOrder-Post Receipt>.<OnRun>
    Code lines:
    ...
          IF TransLine."Item No." <> '' THEN BEGIN
            Item.GET(TransLine."Item No.");
            Item.TESTFIELD(Blocked,FALSE);
          END;
    
          OnCheckTransLine(TransLine); <=====================
    
          InsertTransRcptLine(TransRcptHeader."No.",TransRcptLine,TransLine);
        UNTIL TransLine.NEXT = 0;
    
    ...
Codeunit<TransferOrder-Post (Yes/No)>.PROCEDURE<OnAfterPost>
  Raised in: Codeunit<TransferOrder-Post (Yes/No)>.PROCEDURE<Code>
    Code lines:
    ...
            TransferPostReceipt.RUN(TransHeader);
        END;
      END;
    END;
    
    OnAfterPost(TransHeader); <=====================
Codeunit<TransferOrder-Post (Yes/No)>.PROCEDURE<OnBeforePost>
  Raised in: Codeunit<TransferOrder-Post (Yes/No)>.PROCEDURE<Code>
    Code lines:
    OnBeforePost(TransHeader); <=====================
    
    WITH TransHeader DO BEGIN
      TransLine.SETRANGE("Document No.","No.");
      IF TransLine.FIND('-') THEN
        REPEAT
          IF (TransLine."Quantity Shipped" < TransLine.Quantity) AND
             (DefaultNumber = 0)
          THEN
            DefaultNumber := 1;
    ...
Codeunit<TransferOrder-Post + Print>.PROCEDURE<OnAfterPost>
  Raised in: Codeunit<TransferOrder-Post + Print>.PROCEDURE<Code>
    Code lines:
    ...
        END;
        PrintReport(TransHeader,Selection);
      END;
    END;
    
    OnAfterPost(TransHeader); <=====================
Codeunit<Release Transfer Document>.PROCEDURE<OnAfterReleaseTransferDoc>
  Raised in: Codeunit<Release Transfer Document>.<OnRun>
    Code lines:
    ...
    MODIFY;
    
    WhseTransferRelease.SetCallFromTransferOrder(TRUE);
    WhseTransferRelease.Release(Rec);
    
    OnAfterReleaseTransferDoc(Rec); <=====================
Codeunit<Release Transfer Document>.PROCEDURE<OnAfterReopenTransferDoc>
  Raised in: Codeunit<Release Transfer Document>.PROCEDURE<Reopen>
    Code lines:
    ...
      WhseTransferRelease.Reopen(TransHeader);
      VALIDATE(Status,Status::Open);
      MODIFY;
    END;
    
    OnAfterReopenTransferDoc(TransHeader); <=====================
Codeunit<Release Transfer Document>.PROCEDURE<OnBeforeCheckTransLines>
  Raised in: Codeunit<Release Transfer Document>.PROCEDURE<CheckTransLines>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckTransLines(TransLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    TransLine.SETRANGE("Document No.",TransHeader."No.");
    TransLine.SETFILTER(Quantity,'<>0');
    IF TransLine.ISEMPTY THEN
      ERROR(Text002,TransHeader."No.");
Codeunit<Release Transfer Document>.PROCEDURE<OnBeforeReleaseTransferDoc>
  Raised in: Codeunit<Release Transfer Document>.<OnRun>
    Code lines:
    IF Status = Status::Released THEN
      EXIT;
    
    OnBeforeReleaseTransferDoc(Rec); <=====================
    TESTFIELD("Transfer-from Code");
    TESTFIELD("Transfer-to Code");
    IF "Transfer-from Code" = "Transfer-to Code" THEN
      ERROR(Text001,"No.",FIELDCAPTION("Transfer-from Code"),FIELDCAPTION("Transfer-to Code"));
    IF NOT "Direct Transfer" THEN
      TESTFIELD("In-Transit Code")
    ...
Codeunit<Release Transfer Document>.PROCEDURE<OnBeforeReopenTransferDoc>
  Raised in: Codeunit<Release Transfer Document>.PROCEDURE<Reopen>
    Code lines:
    WITH TransHeader DO BEGIN
      IF Status = Status::Open THEN
        EXIT;
    
      OnBeforeReopenTransferDoc(TransHeader); <=====================
      WhseTransferRelease.Reopen(TransHeader);
      VALIDATE(Status,Status::Open);
      MODIFY;
    END;
    
Codeunit<Categ. Generate Acc. Schedules>.PROCEDURE<OnAfterAddAccSchedLine>
  Raised in: Codeunit<Categ. Generate Acc. Schedules>.PROCEDURE<AddAccSchedLinesDetail>
    Code lines:
    ...
    
      AddAccShedLine(
        AccScheduleLine,RowNo,AccScheduleLine."Totaling Type"::"Posting Accounts",
        ParentGLAccountCategory.Description,COPYSTR(TotalingFilter,1,250),
        Indentation = 0,FALSE,NOT ParentGLAccountCategory.PositiveNormalBalance,Indentation);
      OnAfterAddAccSchedLine(AccScheduleLine,ParentGLAccountCategory); <=====================
      AccScheduleLine.Show := AccScheduleLine.Show::"If Any Column Not Zero";
      AccScheduleLine.MODIFY;
    END;
Codeunit<Categ. Generate Acc. Schedules>.PROCEDURE<OnAfterAddParentAccSchedLine>
  Raised in: Codeunit<Categ. Generate Acc. Schedules>.PROCEDURE<AddAccSchedLinesDetail>
    Code lines:
    ...
      AddAccShedLine(
        AccScheduleLine,RowNo,AccScheduleLine."Totaling Type"::Formula,
        STRSUBSTNO(TotalingTxt,ParentGLAccountCategory.Description),
        STRSUBSTNO('%1..%2',FormatRowNo(FromRowNo,FALSE),FormatRowNo(RowNo,FALSE)),TRUE,FALSE,
        NOT ParentGLAccountCategory.PositiveNormalBalance,Indentation);
      OnAfterAddParentAccSchedLine(AccScheduleLine,ParentGLAccountCategory); <=====================
    END ELSE BEGIN
      // Retained Earnings element of Equity must include non-closed income statement.
      TotalingFilter := ParentGLAccountCategory.GetTotaling;
      IF ParentGLAccountCategory."Additional Report Definition" =
    ...
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateRcptLineFromPurchLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<PurchLine2ReceiptLine>
    Code lines:
    ...
        "Bin Code" := WhseReceiptHeader."Bin Code";
      IF "Bin Code" = '' THEN
        "Bin Code" := PurchLine."Bin Code";
      UpdateReceiptLine(WhseReceiptLine,WhseReceiptHeader);
      CreateReceiptLine(WhseReceiptLine);
      OnAfterCreateRcptLineFromPurchLine(WhseReceiptLine,WhseReceiptHeader,PurchLine); <=====================
      EXIT(NOT HasErrorOccured);
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateRcptLineFromSalesLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<SalesLine2ReceiptLine>
    Code lines:
    ...
        "Bin Code" := WhseReceiptHeader."Bin Code";
      IF "Bin Code" = '' THEN
        "Bin Code" := SalesLine."Bin Code";
      UpdateReceiptLine(WhseReceiptLine,WhseReceiptHeader);
      CreateReceiptLine(WhseReceiptLine);
      OnAfterCreateRcptLineFromSalesLine(WhseReceiptLine,WhseReceiptHeader,SalesLine); <=====================
      EXIT(NOT HasErrorOccured);
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateRcptLineFromTransLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<TransLine2ReceiptLine>
    Code lines:
    ...
      IF "Bin Code" = '' THEN
        "Bin Code" := TransLine."Transfer-To Bin Code";
      OnBeforeUpdateRcptLineFromTransLine(WhseReceiptLine,TransLine);
      UpdateReceiptLine(WhseReceiptLine,WhseReceiptHeader);
      CreateReceiptLine(WhseReceiptLine);
      OnAfterCreateRcptLineFromTransLine(WhseReceiptLine,WhseReceiptHeader,TransLine); <=====================
      EXIT(NOT HasErrorOccured);
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateShptLineFromPurchLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<FromPurchLine2ShptLine>
    Code lines:
    ...
        "Bin Code" := PurchLine."Bin Code";
      UpdateShptLine(WhseShptLine,WhseShptHeader);
      OnFromPurchLine2ShptLineOnBeforeCreateShptLine(WhseShptLine,WhseShptHeader,PurchLine);
      OnBeforeCreateShptLineFromPurchLine(WhseShptLine,WhseShptHeader,PurchLine);
      CreateShptLine(WhseShptLine);
      OnAfterCreateShptLineFromPurchLine(WhseShptLine,WhseShptHeader,PurchLine); <=====================
      EXIT(NOT HasErrorOccured);
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateShptLineFromSalesLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<CreateShptLineFromSalesLine>
    Code lines:
    ...
      IF "Bin Code" = '' THEN
        "Bin Code" := SalesLine."Bin Code";
      UpdateShptLine(WhseShptLine,WhseShptHeader);
      OnBeforeCreateShptLineFromSalesLine(WhseShptLine,WhseShptHeader,SalesLine,SalesHeader);
      CreateShptLine(WhseShptLine);
      OnAfterCreateShptLineFromSalesLine(WhseShptLine,WhseShptHeader,SalesLine,SalesHeader); <=====================
      EXIT(NOT HasErrorOccured);
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateShptLineFromServiceLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<FromServiceLine2ShptLine>
    Code lines:
    ...
        "Bin Code" := WhseShptHeader."Bin Code";
      IF "Bin Code" = '' THEN
        "Bin Code" := ServiceLine."Bin Code";
      UpdateShptLine(WhseShptLine,WhseShptHeader);
      CreateShptLine(WhseShptLine);
      OnAfterCreateShptLineFromServiceLine(WhseShptLine,WhseShptHeader,ServiceLine); <=====================
      EXIT(NOT HasErrorOccured);
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterCreateShptLineFromTransLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<FromTransLine2ShptLine>
    Code lines:
    ...
      IF "Bin Code" = '' THEN
        "Bin Code" := TransLine."Transfer-from Bin Code";
      UpdateShptLine(WhseShptLine,WhseShptHeader);
      OnBeforeCreateShptLineFromTransLine(WhseShptLine,WhseShptHeader,TransLine,TransHeader);
      CreateShptLine(WhseShptLine);
      OnAfterCreateShptLineFromTransLine(WhseShptLine,WhseShptHeader,TransLine,TransHeader); <=====================
      EXIT(NOT HasErrorOccured);
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterInitNewWhseShptLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<CreateShptLineFromSalesLine>
    Code lines:
    ...
      SetSource(DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      SalesLine.TESTFIELD("Unit of Measure Code");
      SetItemData(
        SalesLine."No.",SalesLine.Description,SalesLine."Description 2",SalesLine."Location Code",
        SalesLine."Variant Code",SalesLine."Unit of Measure Code",SalesLine."Qty. per Unit of Measure");
      OnAfterInitNewWhseShptLine(WhseShptLine,WhseShptHeader,SalesLine); <=====================
      SetQtysOnShptLine(WhseShptLine,WhseShptLineQty,WhseShptLineQtyBase);
      "Assemble to Order" := AssembleToOrder;
      IF SalesLine."Document Type" = SalesLine."Document Type"::Order THEN
        "Due Date" := SalesLine."Planned Shipment Date";
    ...
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterWhseReceiptLineInsert>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<CreateReceiptLine>
    Code lines:
    ...
      Item.ItemSKUGet(Item,"Location Code","Variant Code");
      "Shelf No." := Item."Shelf No.";
      Status := GetLineStatus;
      OnBeforeWhseReceiptLineInsert(WhseReceiptLine);
      INSERT;
      OnAfterWhseReceiptLineInsert(WhseReceiptLine); <=====================
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnAfterWhseShptLineInsert>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<CreateShptLine>
    Code lines:
    ...
      Item."No." := "Item No.";
      Item.ItemSKUGet(Item,"Location Code","Variant Code");
      "Shelf No." := Item."Shelf No.";
      OnBeforeWhseShptLineInsert(WhseShptLine);
      INSERT;
      OnAfterWhseShptLineInsert(WhseShptLine); <=====================
      CreateWhseItemTrackingLines;
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeCheckIfPurchLine2ReceiptLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<CheckIfPurchLine2ReceiptLine>
    Code lines:
    IsHandled := FALSE;
    ReturnValue := FALSE;
    OnBeforeCheckIfPurchLine2ReceiptLine(PurchLine,ReturnValue,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(ReturnValue);
    
    IF PurchLine.IsNonInventoriableItem THEN
      EXIT(FALSE);
    
    PurchLine.CALCFIELDS("Whse. Outstanding Qty. (Base)");
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeCheckIfPurchLine2ShptLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<CheckIfFromPurchLine2ShptLine>
    Code lines:
    IsHandled := FALSE;
    ReturnValue := FALSE;
    OnBeforeCheckIfPurchLine2ShptLine(PurchLine,ReturnValue,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(ReturnValue);
    
    IF PurchLine.IsNonInventoriableItem THEN
      EXIT(FALSE);
    
    WITH WhseShptLine DO BEGIN
    ...
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeCheckIfSalesLine2ReceiptLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<CheckIfSalesLine2ReceiptLine>
    Code lines:
    IsHandled := FALSE;
    ReturnValue := FALSE;
    OnBeforeCheckIfSalesLine2ReceiptLine(SalesLine,ReturnValue,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(ReturnValue);
    
    IF SalesLine.IsNonInventoriableItem THEN
      EXIT(FALSE);
    
    WITH WhseReceiptLine DO BEGIN
    ...
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeCheckIfSalesLine2ShptLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<CheckIfFromSalesLine2ShptLine>
    Code lines:
    IsHandled := FALSE;
    ReturnValue := FALSE;
    OnBeforeCheckIfSalesLine2ShptLine(SalesLine,ReturnValue,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(ReturnValue);
    
    IF SalesLine.IsNonInventoriableItem THEN
      EXIT(FALSE);
    
    SalesLine.CALCFIELDS("Whse. Outstanding Qty. (Base)");
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeCheckIfTransLine2ReceiptLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<CheckIfTransLine2ReceiptLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckIfTransLine2ReceiptLine(TransLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(FALSE);
    
    TransLine.CALCFIELDS("Whse. Inbnd. Otsdg. Qty (Base)");
    IF Location.GetLocationSetup(TransLine."Transfer-to Code",Location) THEN
      IF Location."Use As In-Transit" THEN
        EXIT(FALSE);
    EXIT(TransLine."Qty. in Transit (Base)" > TransLine."Whse. Inbnd. Otsdg. Qty (Base)");
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeCheckIfTransLine2ShipmentLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<CheckIfFromTransLine2ShptLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckIfTransLine2ShipmentLine(TransLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(FALSE);
    
    IF Location.GetLocationSetup(TransLine."Transfer-from Code",Location) THEN
      IF Location."Use As In-Transit" THEN
        EXIT(FALSE);
    
    TransLine.CALCFIELDS("Whse Outbnd. Otsdg. Qty (Base)");
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeCreateShptLineFromPurchLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<FromPurchLine2ShptLine>
    Code lines:
    ...
        "Bin Code" := WhseShptHeader."Bin Code";
      IF "Bin Code" = '' THEN
        "Bin Code" := PurchLine."Bin Code";
      UpdateShptLine(WhseShptLine,WhseShptHeader);
      OnFromPurchLine2ShptLineOnBeforeCreateShptLine(WhseShptLine,WhseShptHeader,PurchLine);
      OnBeforeCreateShptLineFromPurchLine(WhseShptLine,WhseShptHeader,PurchLine); <=====================
      CreateShptLine(WhseShptLine);
      OnAfterCreateShptLineFromPurchLine(WhseShptLine,WhseShptHeader,PurchLine);
      EXIT(NOT HasErrorOccured);
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeCreateShptLineFromSalesLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<CreateShptLineFromSalesLine>
    Code lines:
    ...
      IF "Location Code" = WhseShptHeader."Location Code" THEN
        "Bin Code" := WhseShptHeader."Bin Code";
      IF "Bin Code" = '' THEN
        "Bin Code" := SalesLine."Bin Code";
      UpdateShptLine(WhseShptLine,WhseShptHeader);
      OnBeforeCreateShptLineFromSalesLine(WhseShptLine,WhseShptHeader,SalesLine,SalesHeader); <=====================
      CreateShptLine(WhseShptLine);
      OnAfterCreateShptLineFromSalesLine(WhseShptLine,WhseShptHeader,SalesLine,SalesHeader);
      EXIT(NOT HasErrorOccured);
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeCreateShptLineFromTransLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<FromTransLine2ShptLine>
    Code lines:
    ...
      IF "Location Code" = WhseShptHeader."Location Code" THEN
        "Bin Code" := WhseShptHeader."Bin Code";
      IF "Bin Code" = '' THEN
        "Bin Code" := TransLine."Transfer-from Bin Code";
      UpdateShptLine(WhseShptLine,WhseShptHeader);
      OnBeforeCreateShptLineFromTransLine(WhseShptLine,WhseShptHeader,TransLine,TransHeader); <=====================
      CreateShptLine(WhseShptLine);
      OnAfterCreateShptLineFromTransLine(WhseShptLine,WhseShptHeader,TransLine,TransHeader);
      EXIT(NOT HasErrorOccured);
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeUpdateRcptLineFromTransLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<TransLine2ReceiptLine>
    Code lines:
    ...
      "Starting Date" := WORKDATE;
      IF "Location Code" = WhseReceiptHeader."Location Code" THEN
        "Bin Code" := WhseReceiptHeader."Bin Code";
      IF "Bin Code" = '' THEN
        "Bin Code" := TransLine."Transfer-To Bin Code";
      OnBeforeUpdateRcptLineFromTransLine(WhseReceiptLine,TransLine); <=====================
      UpdateReceiptLine(WhseReceiptLine,WhseReceiptHeader);
      CreateReceiptLine(WhseReceiptLine);
      OnAfterCreateRcptLineFromTransLine(WhseReceiptLine,WhseReceiptHeader,TransLine);
      EXIT(NOT HasErrorOccured);
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeWhseReceiptLineInsert>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<CreateReceiptLine>
    Code lines:
    WITH WhseReceiptLine DO BEGIN
      Item."No." := "Item No.";
      Item.ItemSKUGet(Item,"Location Code","Variant Code");
      "Shelf No." := Item."Shelf No.";
      Status := GetLineStatus;
      OnBeforeWhseReceiptLineInsert(WhseReceiptLine); <=====================
      INSERT;
      OnAfterWhseReceiptLineInsert(WhseReceiptLine);
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnBeforeWhseShptLineInsert>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<CreateShptLine>
    Code lines:
    WITH WhseShptLine DO BEGIN
      Item."No." := "Item No.";
      Item.ItemSKUGet(Item,"Location Code","Variant Code");
      "Shelf No." := Item."Shelf No.";
      OnBeforeWhseShptLineInsert(WhseShptLine); <=====================
      INSERT;
      OnAfterWhseShptLineInsert(WhseShptLine);
      CreateWhseItemTrackingLines;
    END;
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnFromPurchLine2ShptLineOnAfterInitNewLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<FromPurchLine2ShptLine>
    Code lines:
    ...
      SetSource(DATABASE::"Purchase Line",PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.");
      PurchLine.TESTFIELD("Unit of Measure Code");
      SetItemData(
        PurchLine."No.",PurchLine.Description,PurchLine."Description 2",PurchLine."Location Code",
        PurchLine."Variant Code",PurchLine."Unit of Measure Code",PurchLine."Qty. per Unit of Measure");
      OnFromPurchLine2ShptLineOnAfterInitNewLine(WhseShptLine,WhseShptHeader,PurchLine); <=====================
      SetQtysOnShptLine(WhseShptLine,ABS(PurchLine."Outstanding Quantity"),ABS(PurchLine."Outstanding Qty. (Base)"));
      IF PurchLine."Document Type" = PurchLine."Document Type"::Order THEN
        "Due Date" := PurchLine."Expected Receipt Date";
      IF PurchLine."Document Type" = PurchLine."Document Type"::"Return Order" THEN
    ...
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnFromPurchLine2ShptLineOnBeforeCreateShptLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<FromPurchLine2ShptLine>
    Code lines:
    ...
      IF "Location Code" = WhseShptHeader."Location Code" THEN
        "Bin Code" := WhseShptHeader."Bin Code";
      IF "Bin Code" = '' THEN
        "Bin Code" := PurchLine."Bin Code";
      UpdateShptLine(WhseShptLine,WhseShptHeader);
      OnFromPurchLine2ShptLineOnBeforeCreateShptLine(WhseShptLine,WhseShptHeader,PurchLine); <=====================
      OnBeforeCreateShptLineFromPurchLine(WhseShptLine,WhseShptHeader,PurchLine);
      CreateShptLine(WhseShptLine);
      OnAfterCreateShptLineFromPurchLine(WhseShptLine,WhseShptHeader,PurchLine);
      EXIT(NOT HasErrorOccured);
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnFromServiceLine2ShptLineOnAfterInitNewLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<FromServiceLine2ShptLine>
    Code lines:
    ...
      SetSource(DATABASE::"Service Line",ServiceLine."Document Type",ServiceLine."Document No.",ServiceLine."Line No.");
      ServiceLine.TESTFIELD("Unit of Measure Code");
      SetItemData(
        ServiceLine."No.",ServiceLine.Description,ServiceLine."Description 2",ServiceLine."Location Code",
        ServiceLine."Variant Code",ServiceLine."Unit of Measure Code",ServiceLine."Qty. per Unit of Measure");
      OnFromServiceLine2ShptLineOnAfterInitNewLine(WhseShptLine,WhseShptHeader,ServiceLine); <=====================
      SetQtysOnShptLine(WhseShptLine,ABS(ServiceLine."Outstanding Quantity"),ABS(ServiceLine."Outstanding Qty. (Base)"));
      IF ServiceLine."Document Type" = ServiceLine."Document Type"::Order THEN
        "Due Date" := ServiceLine.GetDueDate;
      IF WhseShptHeader."Shipment Date" = 0D THEN
    ...
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnFromTransLine2ShptLineOnAfterInitNewLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<FromTransLine2ShptLine>
    Code lines:
    ...
      SetSource(DATABASE::"Transfer Line",0,TransLine."Document No.",TransLine."Line No.");
      TransLine.TESTFIELD("Unit of Measure Code");
      SetItemData(
        TransLine."Item No.",TransLine.Description,TransLine."Description 2",TransLine."Transfer-from Code",
        TransLine."Variant Code",TransLine."Unit of Measure Code",TransLine."Qty. per Unit of Measure");
      OnFromTransLine2ShptLineOnAfterInitNewLine(WhseShptLine,WhseShptHeader,TransLine); <=====================
      SetQtysOnShptLine(WhseShptLine,TransLine."Outstanding Quantity",TransLine."Outstanding Qty. (Base)");
      "Due Date" := TransLine."Shipment Date";
      IF WhseShptHeader."Shipment Date" = 0D THEN
        "Shipment Date" := WORKDATE
    ...
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnPurchLine2ReceiptLineOnAfterInitNewLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<PurchLine2ReceiptLine>
    Code lines:
    ...
      SetSource(DATABASE::"Purchase Line",PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.");
      PurchLine.TESTFIELD("Unit of Measure Code");
      SetItemData(
        PurchLine."No.",PurchLine.Description,PurchLine."Description 2",PurchLine."Location Code",
        PurchLine."Variant Code",PurchLine."Unit of Measure Code",PurchLine."Qty. per Unit of Measure");
      OnPurchLine2ReceiptLineOnAfterInitNewLine(WhseReceiptLine,WhseReceiptHeader,PurchLine); <=====================
      CASE PurchLine."Document Type" OF
        PurchLine."Document Type"::Order:
          BEGIN
            VALIDATE("Qty. Received",ABS(PurchLine."Quantity Received"));
    ...
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnPurchLine2ReceiptLineOnAfterSetQtysOnRcptLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<PurchLine2ReceiptLine>
    Code lines:
    ...
            VALIDATE("Qty. Received",ABS(PurchLine."Return Qty. Shipped"));
            "Due Date" := WORKDATE;
          END;
      END;
      SetQtysOnRcptLine(WhseReceiptLine,ABS(PurchLine.Quantity),ABS(PurchLine."Quantity (Base)"));
      OnPurchLine2ReceiptLineOnAfterSetQtysOnRcptLine(WhseReceiptLine,PurchLine); <=====================
      "Starting Date" := PurchLine."Planned Receipt Date";
      IF "Location Code" = WhseReceiptHeader."Location Code" THEN
        "Bin Code" := WhseReceiptHeader."Bin Code";
      IF "Bin Code" = '' THEN
    ...
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnSalesLine2ReceiptLineOnAfterInitNewLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<SalesLine2ReceiptLine>
    Code lines:
    ...
      SetSource(DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      SalesLine.TESTFIELD("Unit of Measure Code");
      SetItemData(
        SalesLine."No.",SalesLine.Description,SalesLine."Description 2",SalesLine."Location Code",
        SalesLine."Variant Code",SalesLine."Unit of Measure Code",SalesLine."Qty. per Unit of Measure");
      OnSalesLine2ReceiptLineOnAfterInitNewLine(WhseReceiptLine,WhseReceiptHeader,SalesLine); <=====================
      CASE SalesLine."Document Type" OF
        SalesLine."Document Type"::Order:
          BEGIN
            VALIDATE("Qty. Received",ABS(SalesLine."Quantity Shipped"));
    ...
Codeunit<Whse.-Create Source Document>.PROCEDURE<OnTransLine2ReceiptLineOnAfterInitNewLine>
  Raised in: Codeunit<Whse.-Create Source Document>.PROCEDURE<TransLine2ReceiptLine>
    Code lines:
    ...
      SetSource(DATABASE::"Transfer Line",1,TransLine."Document No.",TransLine."Line No.");
      TransLine.TESTFIELD("Unit of Measure Code");
      SetItemData(
        TransLine."Item No.",TransLine.Description,TransLine."Description 2",TransLine."Transfer-to Code",
        TransLine."Variant Code",TransLine."Unit of Measure Code",TransLine."Qty. per Unit of Measure");
      OnTransLine2ReceiptLineOnAfterInitNewLine(WhseReceiptLine,WhseReceiptHeader,TransLine); <=====================
      VALIDATE("Qty. Received",TransLine."Quantity Received");
      TransLine.CALCFIELDS("Whse. Inbnd. Otsdg. Qty (Base)");
      WhseInbndOtsdgQty :=
        UnitOfMeasureMgt.CalcQtyFromBase(TransLine."Whse. Inbnd. Otsdg. Qty (Base)",TransLine."Qty. per Unit of Measure");
    ...
Codeunit<Get Source Doc. Inbound>.PROCEDURE<OnAfterFindWarehouseRequestForInbndTransferOrder>
  Raised in: Codeunit<Get Source Doc. Inbound>.PROCEDURE<FindWarehouseRequestForInbndTransferOrder>
    Code lines:
    ...
      WhseRqst.SETRANGE("Source No.","No.");
      WhseRqst.SETRANGE("Document Status",WhseRqst."Document Status"::Released);
      GetRequireReceiveRqst(WhseRqst);
    END;
    
    OnAfterFindWarehouseRequestForInbndTransferOrder(WhseRqst,TransHeader); <=====================
Codeunit<Get Source Doc. Inbound>.PROCEDURE<OnAfterFindWarehouseRequestForPurchaseOrder>
  Raised in: Codeunit<Get Source Doc. Inbound>.PROCEDURE<FindWarehouseRequestForPurchaseOrder>
    Code lines:
    ...
      WhseRqst.SETRANGE("Source No.","No.");
      WhseRqst.SETRANGE("Document Status",WhseRqst."Document Status"::Released);
      GetRequireReceiveRqst(WhseRqst);
    END;
    
    OnAfterFindWarehouseRequestForPurchaseOrder(WhseRqst,PurchHeader); <=====================
Codeunit<Get Source Doc. Inbound>.PROCEDURE<OnAfterFindWarehouseRequestForSalesReturnOrder>
  Raised in: Codeunit<Get Source Doc. Inbound>.PROCEDURE<FindWarehouseRequestForSalesReturnOrder>
    Code lines:
    ...
      WhseRqst.SETRANGE("Source No.","No.");
      WhseRqst.SETRANGE("Document Status",WhseRqst."Document Status"::Released);
      GetRequireReceiveRqst(WhseRqst);
    END;
    
    OnAfterFindWarehouseRequestForSalesReturnOrder(WhseRqst,SalesHeader); <=====================
Codeunit<Get Source Doc. Inbound>.PROCEDURE<OnAfterGetInboundDocs>
  Raised in: Codeunit<Get Source Doc. Inbound>.PROCEDURE<GetInboundDocs>
    Code lines:
    ...
    WhseSourceFilterSelection.RUNMODAL;
    
    WhseReceiptHeader."Document Status" := WhseReceiptHeader.GetHeaderStatus(0);
    WhseReceiptHeader.MODIFY;
    
    OnAfterGetInboundDocs(WhseReceiptHeader); <=====================
Codeunit<Get Source Doc. Inbound>.PROCEDURE<OnAfterGetSingleInboundDoc>
  Raised in: Codeunit<Get Source Doc. Inbound>.PROCEDURE<GetSingleInboundDoc>
    Code lines:
    ...
    GetSourceDocuments.RUNMODAL;
    
    WhseReceiptHeader."Document Status" := WhseReceiptHeader.GetHeaderStatus(0);
    WhseReceiptHeader.MODIFY;
    
    OnAfterGetSingleInboundDoc(WhseReceiptHeader); <=====================
Codeunit<Get Source Doc. Inbound>.PROCEDURE<OnBeforeCreateFromInbndTransferOrder>
  Raised in: Codeunit<Get Source Doc. Inbound>.PROCEDURE<CreateFromInbndTransferOrder>
    Code lines:
    OnBeforeCreateFromInbndTransferOrder(TransHeader); <=====================
    ShowDialog(CreateFromInbndTransferOrderHideDialog(TransHeader));
Codeunit<Get Source Doc. Inbound>.PROCEDURE<OnBeforeCreateFromPurchOrder>
  Raised in: Codeunit<Get Source Doc. Inbound>.PROCEDURE<CreateFromPurchOrder>
    Code lines:
    OnBeforeCreateFromPurchOrder(PurchHeader); <=====================
    ShowDialog(CreateFromPurchOrderHideDialog(PurchHeader));
Codeunit<Get Source Doc. Inbound>.PROCEDURE<OnBeforeCreateFromSalesReturnOrder>
  Raised in: Codeunit<Get Source Doc. Inbound>.PROCEDURE<CreateFromSalesReturnOrder>
    Code lines:
    OnBeforeCreateFromSalesReturnOrder(SalesHeader); <=====================
    ShowDialog(CreateFromSalesReturnOrderHideDialog(SalesHeader));
Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnAfterCreateWhseShipmentHeaderFromWhseRequest>
  Raised in: Codeunit<Get Source Doc. Outbound>.PROCEDURE<CreateWhseShipmentHeaderFromWhseRequest>
    Code lines:
    ...
    GetSourceDocuments.USEREQUESTPAGE(FALSE);
    GetSourceDocuments.SETTABLEVIEW(WarehouseRequest);
    GetSourceDocuments.SetHideDialog(TRUE);
    GetSourceDocuments.RUNMODAL;
    
    OnAfterCreateWhseShipmentHeaderFromWhseRequest(WarehouseRequest); <=====================
    
    EXIT(TRUE);
Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnAfterFindWarehouseRequestForOutbndTransferOrder>
  Raised in: Codeunit<Get Source Doc. Outbound>.PROCEDURE<FindWarehouseRequestForOutbndTransferOrder>
    Code lines:
    ...
      WhseRqst.SetSourceFilter(DATABASE::"Transfer Line",0,"No.");
      WhseRqst.SETRANGE("Document Status",WhseRqst."Document Status"::Released);
      GetRequireShipRqst(WhseRqst);
    END;
    
    OnAfterFindWarehouseRequestForOutbndTransferOrder(WhseRqst,TransHeader); <=====================
Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnAfterFindWarehouseRequestForPurchReturnOrder>
  Raised in: Codeunit<Get Source Doc. Outbound>.PROCEDURE<FindWarehouseRequestForPurchReturnOrder>
    Code lines:
    ...
      WhseRqst.SetSourceFilter(DATABASE::"Purchase Line","Document Type","No.");
      WhseRqst.SETRANGE("Document Status",WhseRqst."Document Status"::Released);
      GetRequireShipRqst(WhseRqst);
    END;
    
    OnAfterFindWarehouseRequestForPurchReturnOrder(WhseRqst,PurchHeader); <=====================
Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnAfterFindWarehouseRequestForSalesOrder>
  Raised in: Codeunit<Get Source Doc. Outbound>.PROCEDURE<FindWarehouseRequestForSalesOrder>
    Code lines:
    ...
      WhseRqst.SetSourceFilter(DATABASE::"Sales Line","Document Type","No.");
      WhseRqst.SETRANGE("Document Status",WhseRqst."Document Status"::Released);
      GetRequireShipRqst(WhseRqst);
    END;
    
    OnAfterFindWarehouseRequestForSalesOrder(WhseRqst,SalesHeader); <=====================
Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnAfterFindWarehouseRequestForServiceOrder>
  Raised in: Codeunit<Get Source Doc. Outbound>.PROCEDURE<FindWarehouseRequestForServiceOrder>
    Code lines:
    ...
      WhseRqst.SetSourceFilter(DATABASE::"Service Line","Document Type","No.");
      WhseRqst.SETRANGE("Document Status",WhseRqst."Document Status"::Released);
      GetRequireShipRqst(WhseRqst);
    END;
    
    OnAfterFindWarehouseRequestForServiceOrder(WhseRqst,ServiceHeader); <=====================
Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnAfterGetOutboundDocs>
  Raised in: Codeunit<Get Source Doc. Outbound>.PROCEDURE<GetOutboundDocs>
    Code lines:
    ...
    WhseSourceFilterSelection.RUNMODAL;
    
    WhseShptHeader."Document Status" := WhseShptHeader.GetDocumentStatus(0);
    WhseShptHeader.MODIFY;
    
    OnAfterGetOutboundDocs(WhseShptHeader); <=====================
Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnAfterGetSingleOutboundDoc>
  Raised in: Codeunit<Get Source Doc. Outbound>.PROCEDURE<GetSingleOutboundDoc>
    Code lines:
    ...
    
    WhseShptHeader."Document Status" :=
      WhseShptHeader.GetDocumentStatus(0);
    WhseShptHeader.MODIFY;
    
    OnAfterGetSingleOutboundDoc(WhseShptHeader); <=====================
Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnBeforeCheckAvailability>
  Raised in: Codeunit<Get Source Doc. Outbound>.PROCEDURE<CheckAvailability>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckAvailability( <=====================
      CurrItemVariant,QtyBaseNeeded,LocationCode,FormCaption,SourceType,SourceSubType,SourceID,ShowError,Result,IsHandled);
    IF IsHandled THEN
      EXIT(Result);
    
    WITH Item DO BEGIN
      GET(CurrItemVariant."Item No.");
      SETRANGE("Location Filter",LocationCode);
      SETRANGE("Variant Filter",CurrItemVariant.Code);
    ...
Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnBeforeCheckSalesHeader>
  Raised in: Codeunit<Get Source Doc. Outbound>.PROCEDURE<CheckSalesHeader>
    Code lines:
    OnBeforeCheckSalesHeader(SalesHeader,ShowError); <=====================
    
    WITH SalesHeader DO BEGIN
      IF NOT ("Shipping Advice" = "Shipping Advice"::Complete) THEN
        EXIT(FALSE);
    
      SalesLine.SETCURRENTKEY("Document Type",Type,"No.","Variant Code");
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
    ...
Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnBeforeCreateFromOutbndTransferOrder>
  Raised in: Codeunit<Get Source Doc. Outbound>.PROCEDURE<CreateFromOutbndTransferOrder>
    Code lines:
    OnBeforeCreateFromOutbndTransferOrder(TransHeader); <=====================
    ShowResult(CreateFromOutbndTransferOrderHideDialog(TransHeader));
Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnBeforeCreateFromPurchaseReturnOrder>
  Raised in: Codeunit<Get Source Doc. Outbound>.PROCEDURE<CreateFromPurchaseReturnOrder>
    Code lines:
    OnBeforeCreateFromPurchaseReturnOrder(PurchHeader); <=====================
    ShowResult(CreateFromPurchReturnOrderHideDialog(PurchHeader));
Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnBeforeCreateFromServiceOrder>
  Raised in: Codeunit<Get Source Doc. Outbound>.PROCEDURE<CreateFromServiceOrder>
    Code lines:
    OnBeforeCreateFromServiceOrder(ServiceHeader); <=====================
    ShowResult(CreateFromServiceOrderHideDialog(ServiceHeader));
Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnCheckSalesHeaderOnAfterSetLineFilters>
  Raised in: Codeunit<Get Source Doc. Outbound>.PROCEDURE<CheckSalesHeader>
    Code lines:
    ...
    
      SalesLine.SETCURRENTKEY("Document Type",Type,"No.","Variant Code");
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      OnCheckSalesHeaderOnAfterSetLineFilters(SalesLine,SalesHeader); <=====================
      IF SalesLine.FINDSET THEN
        REPEAT
          IF SalesLine.IsInventoriableItem THEN
            SalesLine.MARK(TRUE);
    ...
Codeunit<Get Source Doc. Outbound>.PROCEDURE<OnGetSingleWhsePickDocOnWhsePickRqstSetFilters>
  Raised in: Codeunit<Get Source Doc. Outbound>.PROCEDURE<GetSingleWhsePickDoc>
    Code lines:
    ...
    
    WhsePickRqst.FILTERGROUP(2);
    WhsePickRqst.SETRANGE(Status,WhsePickRqst.Status::Released);
    WhsePickRqst.SETRANGE("Completely Picked",FALSE);
    WhsePickRqst.SETRANGE("Location Code",LocationCode);
    OnGetSingleWhsePickDocOnWhsePickRqstSetFilters(WhsePickRqst,CurrentWhseWkshTemplate,CurrentWhseWkshName,LocationCode); <=====================
    WhsePickRqst.FILTERGROUP(0);
    
    WhsePickDocSelection.LOOKUPMODE(TRUE);
    WhsePickDocSelection.SETTABLEVIEW(WhsePickRqst);
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterCheckWhseRcptLine>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<Code>
    Code lines:
    ...
          TESTFIELD("Unit of Measure Code");
          WhseRqst.GET(
            WhseRqst.Type::Inbound,"Location Code","Source Type","Source Subtype","Source No.");
          IF WhseRqst."Document Status" <> WhseRqst."Document Status"::Released THEN
            ERROR(Text000,"Source Document","Source No.");
          OnAfterCheckWhseRcptLine(WhseRcptLine); <=====================
        UNTIL NEXT = 0
      ELSE
        ERROR(Text001);
    
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterCheckWhseRcptLines>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<Code>
    Code lines:
    ...
      CounterPutAways := 0;
      CLEAR(CreatePutAway);
    
      WhseRcptHeader.GET("No.");
      WhseRcptHeader.TESTFIELD("Posting Date");
      OnAfterCheckWhseRcptLines(WhseRcptHeader,WhseRcptLine); <=====================
      IF WhseRcptHeader."Receiving No." = '' THEN BEGIN
        WhseRcptHeader.TESTFIELD("Receiving No. Series");
        WhseRcptHeader."Receiving No." :=
          NoSeriesMgt.GetNextNo(
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterCode>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<Code>
    Code lines:
    ...
    
      CLEAR(WMSMgt);
      CLEAR(WhseJnlRegisterLine);
    END;
    
    OnAfterCode(WhseRcptHeader); <=====================
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterCreatePutAwayDeleteBlankBinContent>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<CreatePutAwayDoc>
    Code lines:
    ...
    UNTIL PostedWhseRcptLine.NEXT = 0;
    
    IF GetFirstPutAwayDocument(WhseActivHeader) THEN
      REPEAT
        CreatePutAway.DeleteBlankBinContent(WhseActivHeader);
        OnAfterCreatePutAwayDeleteBlankBinContent(WhseActivHeader); <=====================
        CounterPutAways := CounterPutAways + 1;
      UNTIL NOT GetNextPutAwayDocument(WhseActivHeader);
    
    OnAfterCreatePutAwayDoc(WhseRcptHeader);
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterCreatePutAwayDoc>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<CreatePutAwayDoc>
    Code lines:
    ...
        CreatePutAway.DeleteBlankBinContent(WhseActivHeader);
        OnAfterCreatePutAwayDeleteBlankBinContent(WhseActivHeader);
        CounterPutAways := CounterPutAways + 1;
      UNTIL NOT GetNextPutAwayDocument(WhseActivHeader);
    
    OnAfterCreatePutAwayDoc(WhseRcptHeader); <=====================
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterFindWhseRcptLineForPurchLine>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<InitSourceDocumentLines>
    Code lines:
    ...
            PurchLine.SETRANGE("Document No.","Source No.");
            IF PurchLine.FIND('-') THEN
              REPEAT
                SETRANGE("Source Line No.",PurchLine."Line No.");
                IF FINDFIRST THEN BEGIN
                  OnAfterFindWhseRcptLineForPurchLine(WhseRcptLine2,PurchLine); <=====================
                  IF "Source Document" = "Source Document"::"Purchase Order" THEN BEGIN
                    ModifyLine := PurchLine."Qty. to Receive" <> "Qty. to Receive";
                    IF ModifyLine THEN
                      PurchLine.VALIDATE("Qty. to Receive","Qty. to Receive")
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterFindWhseRcptLineForSalesLine>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<InitSourceDocumentLines>
    Code lines:
    ...
            SalesLine.SETRANGE("Document No.","Source No.");
            IF SalesLine.FIND('-') THEN
              REPEAT
                SETRANGE("Source Line No.",SalesLine."Line No.");
                IF FINDFIRST THEN BEGIN
                  OnAfterFindWhseRcptLineForSalesLine(WhseRcptLine2,SalesLine); <=====================
                  IF "Source Document" = "Source Document"::"Sales Order" THEN BEGIN
                    ModifyLine := SalesLine."Qty. to Ship" <> -"Qty. to Receive";
                    IF ModifyLine THEN
                      SalesLine.VALIDATE("Qty. to Ship",-"Qty. to Receive");
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterFindWhseRcptLineForTransLine>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<InitSourceDocumentLines>
    Code lines:
    ...
            TransLine.SETRANGE("Derived From Line No.",0);
            IF TransLine.FIND('-') THEN
              REPEAT
                SETRANGE("Source Line No.",TransLine."Line No.");
                IF FINDFIRST THEN BEGIN
                  OnAfterFindWhseRcptLineForTransLine(WhseRcptLine2,TransLine); <=====================
                  ModifyLine := TransLine."Qty. to Receive" <> "Qty. to Receive";
                  IF ModifyLine THEN
                    TransLine.VALIDATE("Qty. to Receive","Qty. to Receive");
                  IF TransLine."Transfer-To Bin Code" <> "Bin Code" THEN BEGIN
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterInitPostedRcptLine>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<CreatePostedRcptLine>
    Code lines:
    UpdateWhseRcptLineBuf(WhseRcptLine);
    WITH PostedWhseRcptLine DO BEGIN
      INIT;
      TRANSFERFIELDS(WhseRcptLine);
      "No." := PostedWhseRcptHeader."No.";
      OnAfterInitPostedRcptLine(WhseRcptLine,PostedWhseRcptLine); <=====================
      Quantity := WhseRcptLine."Qty. to Receive";
      "Qty. (Base)" := WhseRcptLine."Qty. to Receive (Base)";
      CASE WhseRcptLine."Source Document" OF
        WhseRcptLine."Source Document"::"Purchase Order":
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterInitSourceDocumentLines>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<InitSourceDocumentLines>
    Code lines:
    ...
          OnInitSourceDocumentLines(WhseRcptLine2);
      END;
      SETRANGE("Source Line No.");
    END;
    
    OnAfterInitSourceDocumentLines(WhseRcptLine2); <=====================
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterPostUpdateWhseDocuments>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<PostUpdateWhseDocuments>
    Code lines:
    ...
      WhsePutAwayRequest."Zone Code" := WhseRcptHeader."Zone Code";
      WhsePutAwayRequest."Bin Code" := WhseRcptHeader."Bin Code";
      IF WhsePutAwayRequest.INSERT THEN;
    END;
    
    OnAfterPostUpdateWhseDocuments(WhseRcptHeader,WhsePutAwayRequest); <=====================
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterPostUpdateWhseRcptLine>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<PostUpdateWhseDocuments>
    Code lines:
    ...
            WhseRcptLine2.VALIDATE("Qty. Outstanding","Qty. Outstanding" - "Qty. to Receive");
            WhseRcptLine2."Qty. to Cross-Dock" := 0;
            WhseRcptLine2."Qty. to Cross-Dock (Base)" := 0;
            WhseRcptLine2.Status := WhseRcptLine2.GetLineStatus;
            WhseRcptLine2.MODIFY;
            OnAfterPostUpdateWhseRcptLine(WhseRcptLine2); <=====================
          END;
        UNTIL NEXT = 0;
        DELETEALL;
      END;
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterPostWhseJnlLine>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<PostWhseJnlLine>
    Code lines:
    ...
            WhseJnlRegisterLine.RUN(TempWhseJnlLine2);
          UNTIL TempWhseJnlLine2.NEXT = 0;
      END;
    END;
    
    OnAfterPostWhseJnlLine(WhseRcptLine); <=====================
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnAfterRun>
  Raised in: Codeunit<Whse.-Post Receipt>.<OnRun>
    Code lines:
    ...
    
    WhseRcptLine.COPY(Rec);
    Code;
    Rec := WhseRcptLine;
    
    OnAfterRun(Rec); <=====================
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforeCreatePutAwayDoc>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<CreatePutAwayDoc>
    Code lines:
    ...
      EXIT;
    
    REPEAT
      RemQtyToHandleBase := PostedWhseRcptLine."Qty. (Base)";
      IsHandled := FALSE;
      OnBeforeCreatePutAwayDoc(WhseRcptHeader,PostedWhseRcptLine,IsHandled); <=====================
      IF NOT IsHandled THEN BEGIN
        CreatePutAway.SetCrossDockValues(TRUE);
    
        ItemTrackingMgt.CheckWhseItemTrkgSetup(PostedWhseRcptLine."Item No.",WhseSNRequired,WhseLNRequired,FALSE);
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforeInsertTempWhseJnlLine>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<InsertTempWhseJnlLine>
    Code lines:
    ...
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted T. Receipt";
          END;
      END;
    
      OnBeforeInsertTempWhseJnlLine(TempWhseJnlLine,PostedWhseRcptLine); <=====================
    
      ItemTrackingMgt.CheckWhseItemTrkgSetup("Item No.",SNRequired,LNRequired,FALSE);
      IF SNRequired THEN
        TESTFIELD("Qty. per Unit of Measure",1);
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforePostedWhseRcptHeaderInsert>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<CreatePostedRcptHeader>
    Code lines:
    ...
    PostedWhseRcptHeader."No. Series" := WhseRcptHeader."Receiving No. Series";
    
    GetLocation(PostedWhseRcptHeader."Location Code");
    IF NOT Location."Require Put-away" THEN
      PostedWhseRcptHeader."Document Status" := PostedWhseRcptHeader."Document Status"::"Completely Put Away";
    OnBeforePostedWhseRcptHeaderInsert(PostedWhseRcptHeader,WhseRcptHeader); <=====================
    PostedWhseRcptHeader.INSERT;
    
    WhseComment.SETRANGE("Table Name",WhseComment."Table Name"::"Whse. Receipt");
    WhseComment.SETRANGE(Type,WhseComment.Type::" ");
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforePostedWhseRcptLineInsert>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<CreatePostedRcptLine>
    Code lines:
    ...
      END;
      "Posted Source No." := ReceivingNo;
      "Posting Date" := PostingDate;
      "Whse. Receipt No." := WhseRcptLine."No.";
      "Whse Receipt Line No." := WhseRcptLine."Line No.";
      OnBeforePostedWhseRcptLineInsert(PostedWhseRcptLine,WhseRcptLine); <=====================
      INSERT;
    END;
    
    PostWhseJnlLine(PostedWhseRcptHeader,PostedWhseRcptLine,TempHandlingSpecification);
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforePostSourceDocument>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<Code>
    Code lines:
    ...
        InitSourceDocumentHeader;
        COMMIT;
    
        CounterSourceDocTotal := CounterSourceDocTotal + 1;
    
        OnBeforePostSourceDocument(WhseRcptLine,PurchHeader,SalesHeader,TransHeader); <=====================
        PostSourceDocument(WhseRcptLine);
    
        IF FINDLAST THEN;
        SETRANGE("Source Type");
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforePostUpdateWhseDocuments>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<PostUpdateWhseDocuments>
    Code lines:
    OnBeforePostUpdateWhseDocuments(WhseRcptHeader); <=====================
    WITH WhseRcptLineBuf DO
      IF FIND('-') THEN BEGIN
        REPEAT
          WhseRcptLine2.GET("No.","Line No.");
          DeleteWhseRcptLine := "Qty. Outstanding" = "Qty. to Receive";
          OnBeforePostUpdateWhseRcptLine(WhseRcptLine2,WhseRcptLineBuf,DeleteWhseRcptLine);
          IF DeleteWhseRcptLine THEN
            WhseRcptLine2.DELETE
          ELSE BEGIN
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforePostUpdateWhseRcptLine>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<PostUpdateWhseDocuments>
    Code lines:
    ...
    WITH WhseRcptLineBuf DO
      IF FIND('-') THEN BEGIN
        REPEAT
          WhseRcptLine2.GET("No.","Line No.");
          DeleteWhseRcptLine := "Qty. Outstanding" = "Qty. to Receive";
          OnBeforePostUpdateWhseRcptLine(WhseRcptLine2,WhseRcptLineBuf,DeleteWhseRcptLine); <=====================
          IF DeleteWhseRcptLine THEN
            WhseRcptLine2.DELETE
          ELSE BEGIN
            WhseRcptLine2.VALIDATE("Qty. Received","Qty. Received" + "Qty. to Receive");
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforePostWhseJnlLine>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<PostWhseJnlLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforePostWhseJnlLine(PostedWhseRcptHeader,PostedWhseRcptLine,WhseRcptLine,TempWhseSplitSpecification,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH PostedWhseRcptLine DO BEGIN
      GetLocation("Location Code");
      InsertWhseItemEntryRelation(PostedWhseRcptHeader,PostedWhseRcptLine,TempWhseSplitSpecification);
    
      IF Location."Bin Mandatory" THEN BEGIN
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforePurchLineModify>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<InitSourceDocumentLines>
    Code lines:
    ...
                  END ELSE BEGIN
                    ModifyLine := PurchLine."Return Qty. to Ship" <> 0;
                    IF ModifyLine THEN
                      PurchLine.VALIDATE("Return Qty. to Ship",0);
                  END;
                OnBeforePurchLineModify(PurchLine,WhseRcptLine2,ModifyLine); <=====================
                IF ModifyLine THEN
                  PurchLine.MODIFY;
              UNTIL PurchLine.NEXT = 0;
          END;
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforeRegisterWhseJnlLines>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<PostWhseJnlLine>
    Code lines:
    ...
        TempWhseJnlLine."Registering Date" := PostingDate;
        TempWhseJnlLine."Whse. Document Type" := TempWhseJnlLine."Whse. Document Type"::Receipt;
        TempWhseJnlLine."Whse. Document No." := "No.";
        TempWhseJnlLine."Whse. Document Line No." := "Line No.";
        TempWhseJnlLine."Registering No. Series" := PostedWhseRcptHeader."No. Series";
        OnBeforeRegisterWhseJnlLines(TempWhseJnlLine,PostedWhseRcptHeader,PostedWhseRcptLine); <=====================
    
        ItemTrackingMgt.SplitWhseJnlLine(TempWhseJnlLine,TempWhseJnlLine2,TempWhseSplitSpecification,FALSE);
        IF TempWhseJnlLine2.FIND('-') THEN
          REPEAT
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforeRun>
  Raised in: Codeunit<Whse.-Post Receipt>.<OnRun>
    Code lines:
    OnBeforeRun(Rec); <=====================
    
    WhseRcptLine.COPY(Rec);
    Code;
    Rec := WhseRcptLine;
    
    OnAfterRun(Rec);
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforeSalesLineModify>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<InitSourceDocumentLines>
    Code lines:
    ...
                  END ELSE BEGIN
                    ModifyLine := SalesLine."Return Qty. to Receive" <> 0;
                    IF ModifyLine THEN
                      SalesLine.VALIDATE("Return Qty. to Receive",0);
                  END;
                OnBeforeSalesLineModify(SalesLine,WhseRcptLine2,ModifyLine); <=====================
                IF ModifyLine THEN
                  SalesLine.MODIFY;
              UNTIL SalesLine.NEXT = 0;
          END;
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnBeforeTransLineModify>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<InitSourceDocumentLines>
    Code lines:
    ...
                END ELSE BEGIN
                  ModifyLine := TransLine."Qty. to Receive" <> 0;
                  IF ModifyLine THEN
                    TransLine.VALIDATE("Qty. to Receive",0);
                END;
                OnBeforeTransLineModify(TransLine,WhseRcptLine2,ModifyLine); <=====================
                IF ModifyLine THEN
                  TransLine.MODIFY;
              UNTIL TransLine.NEXT = 0;
          END;
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnCodeOnBeforeWhseRcptHeaderModify>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<Code>
    Code lines:
    ...
        WhseRcptHeader."Receiving No." :=
          NoSeriesMgt.GetNextNo(
            WhseRcptHeader."Receiving No. Series",WhseRcptHeader."Posting Date",TRUE);
      END;
      WhseRcptHeader."Create Posted Header" := TRUE;
      OnCodeOnBeforeWhseRcptHeaderModify(WhseRcptHeader,WhseRcptLine); <=====================
      WhseRcptHeader.MODIFY;
      COMMIT;
    
      SETCURRENTKEY("No.","Source Type","Source Subtype","Source No.","Source Line No.");
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnCreatePutAwayDocOnBeforeCreatePutAwayRun>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<CreatePutAwayDoc>
    Code lines:
    ...
        IF TempPostedWhseRcptLine.FIND('-') THEN
          REPEAT
            TempPostedWhseRcptLine2 := TempPostedWhseRcptLine;
            TempPostedWhseRcptLine2."Line No." := PostedWhseRcptLine."Line No.";
            WhseSourceCreateDocument.SetQuantity(TempPostedWhseRcptLine2,DATABASE::"Posted Whse. Receipt Line",RemQtyToHandleBase);
            OnCreatePutAwayDocOnBeforeCreatePutAwayRun(TempPostedWhseRcptLine2,CreatePutAway); <=====================
            CreatePutAway.RUN(TempPostedWhseRcptLine2);
          UNTIL TempPostedWhseRcptLine.NEXT = 0;
      END;
    UNTIL PostedWhseRcptLine.NEXT = 0;
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnInitSourceDocumentHeader>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<InitSourceDocumentHeader>
    Code lines:
    ...
            END;
            IF WhseRcptHeader."Vendor Shipment No." <> '' THEN BEGIN
              PurchHeader."Vendor Shipment No." := WhseRcptHeader."Vendor Shipment No.";
              ModifyHeader := TRUE;
            END;
            OnInitSourceDocumentHeaderOnBeforePurchHeaderModify(PurchHeader,WhseRcptHeader,ModifyHeader); <=====================
            IF ModifyHeader THEN
              PurchHeader.MODIFY;
          END;
        DATABASE::"Sales Line": // Return Order
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnInitSourceDocumentHeaderOnBeforePurchHeaderModify>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<InitSourceDocumentHeader>
    Code lines:
    ...
            END;
            IF WhseRcptHeader."Vendor Shipment No." <> '' THEN BEGIN
              PurchHeader."Vendor Shipment No." := WhseRcptHeader."Vendor Shipment No.";
              ModifyHeader := TRUE;
            END;
            OnInitSourceDocumentHeaderOnBeforePurchHeaderModify(PurchHeader,WhseRcptHeader,ModifyHeader); <=====================
            IF ModifyHeader THEN
              PurchHeader.MODIFY;
          END;
        DATABASE::"Sales Line": // Return Order
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnInitSourceDocumentHeaderOnBeforeSalesHeaderModify>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<InitSourceDocumentHeader>
    Code lines:
    ...
              SalesHeader.SetHideValidationDialog(TRUE);
              SalesHeader.VALIDATE("Posting Date",WhseRcptHeader."Posting Date");
              SalesRelease.RUN(SalesHeader);
              ModifyHeader := TRUE;
            END;
            OnInitSourceDocumentHeaderOnBeforeSalesHeaderModify(SalesHeader,WhseRcptHeader,ModifyHeader); <=====================
            IF ModifyHeader THEN
              SalesHeader.MODIFY;
          END;
        DATABASE::"Transfer Line":
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnInitSourceDocumentHeaderOnBeforeTransHeaderModify>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<InitSourceDocumentHeader>
    Code lines:
    ...
            END;
            IF WhseRcptHeader."Vendor Shipment No." <> '' THEN BEGIN
              TransHeader."External Document No." := WhseRcptHeader."Vendor Shipment No.";
              ModifyHeader := TRUE;
            END;
            OnInitSourceDocumentHeaderOnBeforeTransHeaderModify(TransHeader,WhseRcptHeader,ModifyHeader); <=====================
            IF ModifyHeader THEN
              TransHeader.MODIFY;
          END;
        ELSE
    ...
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnInitSourceDocumentLines>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<InitSourceDocumentLines>
    Code lines:
    ...
                IF ModifyLine THEN
                  TransLine.MODIFY;
              UNTIL TransLine.NEXT = 0;
          END;
        ELSE
          OnInitSourceDocumentLines(WhseRcptLine2); <=====================
      END;
      SETRANGE("Source Line No.");
    END;
    
Codeunit<Whse.-Post Receipt>.PROCEDURE<OnPostSourceDocument>
  Raised in: Codeunit<Whse.-Post Receipt>.PROCEDURE<PostSourceDocument>
    Code lines:
    ...
                END;
            END;
            CLEAR(TransferPostReceipt);
          END;
        ELSE
          OnPostSourceDocument(WhseRcptHeader,WhseRcptLine); <=====================
      END;
    END;
Codeunit<Whse.-Post Receipt (Yes/No)>.PROCEDURE<OnAfterConfirmPost>
  Raised in: Codeunit<Whse.-Post Receipt (Yes/No)>.PROCEDURE<Code>
    Code lines:
    ...
      IF FIND THEN
        IF NOT HideDialog THEN
          IF NOT CONFIRM(Text000,FALSE) THEN
            EXIT;
    
      OnAfterConfirmPost(WhseReceiptLine); <=====================
    
      WhsePostReceipt.RUN(WhseReceiptLine);
      WhsePostReceipt.GetResultMessage;
      CLEAR(WhsePostReceipt);
Codeunit<Whse.-Post Receipt (Yes/No)>.PROCEDURE<OnBeforeConfirmWhseReceiptPost>
  Raised in: Codeunit<Whse.-Post Receipt (Yes/No)>.PROCEDURE<Code>
    Code lines:
    HideDialog := FALSE;
    IsPosted := FALSE;
    OnBeforeConfirmWhseReceiptPost(WhseReceiptLine,HideDialog,IsPosted); <=====================
    IF IsPosted THEN
      EXIT;
    
    WITH WhseReceiptLine DO BEGIN
      IF FIND THEN
        IF NOT HideDialog THEN
          IF NOT CONFIRM(Text000,FALSE) THEN
    ...
Codeunit<Whse.-Post Receipt + Print>.PROCEDURE<OnBeforeCode>
  Raised in: Codeunit<Whse.-Post Receipt + Print>.PROCEDURE<Code>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCode(WhseReceiptLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH WhseReceiptLine DO BEGIN
      WhsePostReceipt.RUN(WhseReceiptLine);
      WhsePostReceipt.GetResultMessage;
    
      PrintedDocuments := 0;
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterCheckWhseShptLine>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<Code>
    Code lines:
    ...
            TESTFIELD("Bin Code");
          IF NOT "Assemble to Order" THEN
            IF NOT FullATOPosted THEN
              ERROR(FullATONotPostedErr,"No.","Line No.");
    
          OnAfterCheckWhseShptLine(WhseShptLine); <=====================
        UNTIL NEXT = 0
      ELSE
        ERROR(Text001);
    
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterCheckWhseShptLines>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<Code>
    Code lines:
    ...
      CounterSourceDocTotal := 0;
    
      GetLocation("Location Code");
      WhseShptHeader.GET("No.");
      WhseShptHeader.TESTFIELD("Posting Date");
      OnAfterCheckWhseShptLines(WhseShptHeader,WhseShptLine,Invoice); <=====================
      IF WhseShptHeader."Shipping No." = '' THEN BEGIN
        WhseShptHeader.TESTFIELD("Shipping No. Series");
        WhseShptHeader."Shipping No." :=
          NoSeriesMgt.GetNextNo(
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterCreateWhseJnlLine>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<CreateWhseJnlLine>
    Code lines:
    ...
            WhseJnlLine."Reference Document" := WhseJnlLine."Reference Document"::"Posted T. Shipment";
          END;
      END;
    END;
    
    OnAfterCreateWhseJnlLine(WhseJnlLine,PostedWhseShptLine); <=====================
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterFindWhseShptLineForPurchLine>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<HandlePurchaseLine>
    Code lines:
    ...
      PurchLine.SETRANGE("Document No.","Source No.");
      IF PurchLine.FIND('-') THEN
        REPEAT
          SETRANGE("Source Line No.",PurchLine."Line No.");
          IF FIND('-') THEN BEGIN
            OnAfterFindWhseShptLineForPurchLine(WhseShptLine,PurchLine); <=====================
            IF "Source Document" = "Source Document"::"Purchase Order" THEN BEGIN
              ModifyLine := PurchLine."Qty. to Receive" <> -"Qty. to Ship";
              IF ModifyLine THEN BEGIN
                PurchLine.VALIDATE("Qty. to Receive",-"Qty. to Ship");
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterFindWhseShptLineForSalesLine>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<HandleSalesLine>
    Code lines:
    ...
      SalesLine.SETRANGE("Document No.","Source No.");
      IF SalesLine.FIND('-') THEN
        REPEAT
          SETRANGE("Source Line No.",SalesLine."Line No.");
          IF FIND('-') THEN BEGIN
            OnAfterFindWhseShptLineForSalesLine(WhseShptLine,SalesLine); <=====================
            IF "Source Document" = "Source Document"::"Sales Order" THEN BEGIN
              SumOfQtyToShip := 0;
              SumOfQtyToShipBase := 0;
              GetATOAndNonATOLines(ATOWhseShptLine,NonATOWhseShptLine,ATOLineFound,NonATOLineFound);
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterFindWhseShptLineForTransLine>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<HandleTransferLine>
    Code lines:
    ...
      TransLine.SETRANGE("Derived From Line No.",0);
      IF TransLine.FIND('-') THEN
        REPEAT
          SETRANGE("Source Line No.",TransLine."Line No.");
          IF FIND('-') THEN BEGIN
            OnAfterFindWhseShptLineForTransLine(WhseShptLine,TransLine); <=====================
            ModifyLine := TransLine."Qty. to Ship" <> "Qty. to Ship";
            IF ModifyLine THEN
              TransLine.VALIDATE("Qty. to Ship","Qty. to Ship");
            IF (WhseShptHeader."Shipment Date" <> 0D) AND
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterInitSourceDocumentHeader>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<InitSourceDocumentHeader>
    Code lines:
    ...
          END;
        ELSE
          OnInitSourceDocumentHeader(WhseShptHeader,WhseShptLine);
      END;
    
    OnAfterInitSourceDocumentHeader(WhseShptLine); <=====================
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterPostedWhseShptHeaderInsert>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<CreatePostedShptHeader>
    Code lines:
    ...
    PostedWhseShptHeader.Comment := WhseShptHeader.Comment;
    PostedWhseShptHeader."Whse. Shipment No." := WhseShptHeader."No.";
    PostedWhseShptHeader."External Document No." := WhseShptHeader."External Document No.";
    OnBeforePostedWhseShptHeaderInsert(PostedWhseShptHeader,WhseShptHeader);
    PostedWhseShptHeader.INSERT;
    OnAfterPostedWhseShptHeaderInsert(PostedWhseShptHeader,LastShptNo); <=====================
    
    WhseComment.SETRANGE("Table Name",WhseComment."Table Name"::"Whse. Shipment");
    WhseComment.SETRANGE(Type,WhseComment.Type::" ");
    WhseComment.SETRANGE("No.",WhseShptHeader."No.");
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterPostUpdateWhseShptLine>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<PostUpdateWhseDocuments>
    Code lines:
    ...
            WhseShptLine2."Qty. Shipped (Base)" := "Qty. Shipped (Base)" + "Qty. to Ship (Base)";
            WhseShptLine2."Qty. Outstanding (Base)" := "Qty. Outstanding (Base)" - "Qty. to Ship (Base)";
            WhseShptLine2.Status := WhseShptLine2.CalcStatusShptLine;
            OnBeforePostUpdateWhseShptLineModify(WhseShptLine2);
            WhseShptLine2.MODIFY;
            OnAfterPostUpdateWhseShptLine(WhseShptLine2); <=====================
          END;
        UNTIL NEXT = 0;
        DELETEALL;
      END;
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterPostWhseJnlLine>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<CreatePostedShptLine>
    Code lines:
    ...
      INSERT;
    END;
    
    OnCreatePostedShptLineOnBeforePostWhseJnlLine(PostedWhseShptLine,TempHandlingSpecification,WhseShptLine);
    PostWhseJnlLine(PostedWhseShptLine,TempHandlingSpecification);
    OnAfterPostWhseJnlLine(WhseShptLine); <=====================
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterPostWhseShipment>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<Code>
    Code lines:
    ...
        SETRANGE("Source Subtype");
        SETRANGE("Source No.");
      UNTIL NEXT = 0;
    END;
    
    OnAfterPostWhseShipment(WhseShptHeader); <=====================
    
    CLEAR(WMSMgt);
    CLEAR(WhseJnlRegisterLine);
    
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnAfterRun>
  Raised in: Codeunit<Whse.-Post Shipment>.<OnRun>
    Code lines:
    ...
    
    WhseShptLine.COPY(Rec);
    Code;
    Rec := WhseShptLine;
    
    OnAfterRun(Rec); <=====================
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforeCheckWhseShptLines>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<Code>
    Code lines:
    WITH WhseShptLine DO BEGIN
      SETCURRENTKEY("No.");
      SETRANGE("No.","No.");
      OnBeforeCheckWhseShptLines(WhseShptLine); <=====================
      SETFILTER("Qty. to Ship",'>0');
      IF FIND('-') THEN
        REPEAT
          TESTFIELD("Unit of Measure Code");
          IF ("Shipping Advice" = "Shipping Advice"::Complete) AND
             ("Qty. (Base)" <> "Qty. to Ship (Base)" + "Qty. Shipped (Base)")
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforeDeleteUpdateWhseShptLine>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<PostUpdateWhseDocuments>
    Code lines:
    ...
    WITH WhseShptLineBuf DO
      IF FIND('-') THEN BEGIN
        REPEAT
          WhseShptLine2.GET("No.","Line No.");
          DeleteWhseShptLine := "Qty. Outstanding" = "Qty. to Ship";
          OnBeforeDeleteUpdateWhseShptLine(WhseShptLine2,DeleteWhseShptLine); <=====================
          IF DeleteWhseShptLine THEN BEGIN
            ItemTrackingMgt.SetDeleteReservationEntries(TRUE);
            ItemTrackingMgt.DeleteWhseItemTrkgLines(
              DATABASE::"Warehouse Shipment Line",0,"No.",'',0,"Line No.","Location Code",TRUE);
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforeInitSourceDocumentHeader>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<InitSourceDocumentHeader>
    Code lines:
    OnBeforeInitSourceDocumentHeader(WhseShptLine); <=====================
    
    WITH WhseShptLine DO
      CASE "Source Type" OF
        DATABASE::"Sales Line":
          BEGIN
            IF (SalesHeader."Posting Date" = 0D) OR
               (SalesHeader."Posting Date" <> WhseShptHeader."Posting Date")
            THEN BEGIN
              OnInitSourceDocumentHeaderOnBeforeReopenSalesHeader(SalesHeader,Invoice);
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforePostedWhseShptHeaderInsert>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<CreatePostedShptHeader>
    Code lines:
    ...
    PostedWhseShptHeader."Shipping Agent Service Code" := WhseShptHeader."Shipping Agent Service Code";
    PostedWhseShptHeader."Shipment Method Code" := WhseShptHeader."Shipment Method Code";
    PostedWhseShptHeader.Comment := WhseShptHeader.Comment;
    PostedWhseShptHeader."Whse. Shipment No." := WhseShptHeader."No.";
    PostedWhseShptHeader."External Document No." := WhseShptHeader."External Document No.";
    OnBeforePostedWhseShptHeaderInsert(PostedWhseShptHeader,WhseShptHeader); <=====================
    PostedWhseShptHeader.INSERT;
    OnAfterPostedWhseShptHeaderInsert(PostedWhseShptHeader,LastShptNo);
    
    WhseComment.SETRANGE("Table Name",WhseComment."Table Name"::"Whse. Shipment");
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforePostSourceDocument>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<Code>
    Code lines:
    ...
        InitSourceDocumentHeader;
        COMMIT;
    
        CounterSourceDocTotal := CounterSourceDocTotal + 1;
    
        OnBeforePostSourceDocument(WhseShptLine,PurchHeader,SalesHeader,TransHeader,ServiceHeader); <=====================
        PostSourceDocument(WhseShptLine);
    
        IF FINDLAST THEN;
        SETRANGE("Source Type");
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforePostUpdateWhseDocuments>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<PostUpdateWhseDocuments>
    Code lines:
    OnBeforePostUpdateWhseDocuments(WhseShptHeaderParam); <=====================
    WITH WhseShptLineBuf DO
      IF FIND('-') THEN BEGIN
        REPEAT
          WhseShptLine2.GET("No.","Line No.");
          DeleteWhseShptLine := "Qty. Outstanding" = "Qty. to Ship";
          OnBeforeDeleteUpdateWhseShptLine(WhseShptLine2,DeleteWhseShptLine);
          IF DeleteWhseShptLine THEN BEGIN
            ItemTrackingMgt.SetDeleteReservationEntries(TRUE);
            ItemTrackingMgt.DeleteWhseItemTrkgLines(
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforePostUpdateWhseShptLine>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<PostUpdateWhseDocuments>
    Code lines:
    ...
            ItemTrackingMgt.SetDeleteReservationEntries(TRUE);
            ItemTrackingMgt.DeleteWhseItemTrkgLines(
              DATABASE::"Warehouse Shipment Line",0,"No.",'',0,"Line No.","Location Code",TRUE);
            WhseShptLine2.DELETE;
          END ELSE BEGIN
            OnBeforePostUpdateWhseShptLine(WhseShptLine2); <=====================
            WhseShptLine2."Qty. Shipped" := "Qty. Shipped" + "Qty. to Ship";
            WhseShptLine2.VALIDATE("Qty. Outstanding","Qty. Outstanding" - "Qty. to Ship");
            WhseShptLine2."Qty. Shipped (Base)" := "Qty. Shipped (Base)" + "Qty. to Ship (Base)";
            WhseShptLine2."Qty. Outstanding (Base)" := "Qty. Outstanding (Base)" - "Qty. to Ship (Base)";
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforePostUpdateWhseShptLineModify>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<PostUpdateWhseDocuments>
    Code lines:
    ...
            WhseShptLine2."Qty. Shipped" := "Qty. Shipped" + "Qty. to Ship";
            WhseShptLine2.VALIDATE("Qty. Outstanding","Qty. Outstanding" - "Qty. to Ship");
            WhseShptLine2."Qty. Shipped (Base)" := "Qty. Shipped (Base)" + "Qty. to Ship (Base)";
            WhseShptLine2."Qty. Outstanding (Base)" := "Qty. Outstanding (Base)" - "Qty. to Ship (Base)";
            WhseShptLine2.Status := WhseShptLine2.CalcStatusShptLine;
            OnBeforePostUpdateWhseShptLineModify(WhseShptLine2); <=====================
            WhseShptLine2.MODIFY;
            OnAfterPostUpdateWhseShptLine(WhseShptLine2);
          END;
        UNTIL NEXT = 0;
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforePostWhseJnlLine>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<PostWhseJnlLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforePostWhseJnlLine(PostedWhseShptLine,TempHandlingSpecification,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    GetLocation(PostedWhseShptLine."Location Code");
    IF Location."Bin Mandatory" THEN BEGIN
      CreateWhseJnlLine(TempWhseJnlLine,PostedWhseShptLine);
      WMSMgt.CheckWhseJnlLine(TempWhseJnlLine,0,0,FALSE);
    
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforePurchLineModify>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<HandlePurchaseLine>
    Code lines:
    ...
              ELSE
                PurchLine.VALIDATE("Return Qty. to Ship",0);
              PurchLine.VALIDATE("Qty. to Invoice",0);
            END;
          END;
          OnBeforePurchLineModify(PurchLine,WhseShptLine,ModifyLine); <=====================
          IF ModifyLine THEN
            PurchLine.MODIFY;
        UNTIL PurchLine.NEXT = 0;
    END;
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforeRun>
  Raised in: Codeunit<Whse.-Post Shipment>.<OnRun>
    Code lines:
    OnBeforeRun(Rec); <=====================
    
    WhseShptLine.COPY(Rec);
    Code;
    Rec := WhseShptLine;
    
    OnAfterRun(Rec);
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforeSalesLineModify>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<HandleSalesLine>
    Code lines:
    ...
              ELSE
                SalesLine.VALIDATE("Return Qty. to Receive",0);
              SalesLine.VALIDATE("Qty. to Invoice",0);
            END;
          END;
          OnBeforeSalesLineModify(SalesLine,WhseShptLine,ModifyLine,Invoice); <=====================
          IF ModifyLine THEN
            SalesLine.MODIFY;
        UNTIL SalesLine.NEXT = 0;
    END;
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnBeforeTransLineModify>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<HandleTransferLine>
    Code lines:
    ...
            IF ModifyLine THEN BEGIN
              TransLine.VALIDATE("Qty. to Ship",0);
              TransLine.VALIDATE("Qty. to Receive",0);
            END;
          END;
          OnBeforeTransLineModify(TransLine,WhseShptLine,ModifyLine); <=====================
          IF ModifyLine THEN
            TransLine.MODIFY;
        UNTIL TransLine.NEXT = 0;
    END;
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnCreatePostedShptLineOnBeforePostWhseJnlLine>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<CreatePostedShptLine>
    Code lines:
    ...
      "Whse. Shipment No." := WhseShptLine."No.";
      "Whse Shipment Line No." := WhseShptLine."Line No.";
      INSERT;
    END;
    
    OnCreatePostedShptLineOnBeforePostWhseJnlLine(PostedWhseShptLine,TempHandlingSpecification,WhseShptLine); <=====================
    PostWhseJnlLine(PostedWhseShptLine,TempHandlingSpecification);
    OnAfterPostWhseJnlLine(WhseShptLine);
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnInitSourceDocumentHeader>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<InitSourceDocumentHeader>
    Code lines:
    ...
        DATABASE::"Sales Line":
          BEGIN
            IF (SalesHeader."Posting Date" = 0D) OR
               (SalesHeader."Posting Date" <> WhseShptHeader."Posting Date")
            THEN BEGIN
              OnInitSourceDocumentHeaderOnBeforeReopenSalesHeader(SalesHeader,Invoice); <=====================
              SalesRelease.Reopen(SalesHeader);
              SalesRelease.SetSkipCheckReleaseRestrictions;
              SalesHeader.SetHideValidationDialog(TRUE);
              SalesHeader.VALIDATE("Posting Date",WhseShptHeader."Posting Date");
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnInitSourceDocumentHeaderOnBeforePurchHeaderModify>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<InitSourceDocumentHeader>
    Code lines:
    ...
               (WhseShptHeader."Shipment Method Code" <> PurchHeader."Shipment Method Code")
            THEN BEGIN
              PurchHeader."Shipment Method Code" := WhseShptHeader."Shipment Method Code";
              ModifyHeader := TRUE;
            END;
            OnInitSourceDocumentHeaderOnBeforePurchHeaderModify(PurchHeader,WhseShptHeader,ModifyHeader); <=====================
            IF ModifyHeader THEN
              PurchHeader.MODIFY;
          END;
        DATABASE::"Transfer Line":
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnInitSourceDocumentHeaderOnBeforeReopenSalesHeader>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<InitSourceDocumentHeader>
    Code lines:
    ...
        DATABASE::"Sales Line":
          BEGIN
            IF (SalesHeader."Posting Date" = 0D) OR
               (SalesHeader."Posting Date" <> WhseShptHeader."Posting Date")
            THEN BEGIN
              OnInitSourceDocumentHeaderOnBeforeReopenSalesHeader(SalesHeader,Invoice); <=====================
              SalesRelease.Reopen(SalesHeader);
              SalesRelease.SetSkipCheckReleaseRestrictions;
              SalesHeader.SetHideValidationDialog(TRUE);
              SalesHeader.VALIDATE("Posting Date",WhseShptHeader."Posting Date");
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnInitSourceDocumentHeaderOnBeforeSalesHeaderModify>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<InitSourceDocumentHeader>
    Code lines:
    ...
               (WhseShptHeader."Shipment Method Code" <> SalesHeader."Shipment Method Code")
            THEN BEGIN
              SalesHeader."Shipment Method Code" := WhseShptHeader."Shipment Method Code";
              ModifyHeader := TRUE;
            END;
            OnInitSourceDocumentHeaderOnBeforeSalesHeaderModify(SalesHeader,WhseShptHeader,ModifyHeader,Invoice); <=====================
            IF ModifyHeader THEN
              SalesHeader.MODIFY;
          END;
        DATABASE::"Purchase Line": // Return Order
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnInitSourceDocumentHeaderOnBeforeServiceHeaderModify>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<InitSourceDocumentHeader>
    Code lines:
    ...
               (WhseShptHeader."Shipment Method Code" <> ServiceHeader."Shipment Method Code")
            THEN BEGIN
              ServiceHeader."Shipment Method Code" := WhseShptHeader."Shipment Method Code";
              ModifyHeader := TRUE;
            END;
            OnInitSourceDocumentHeaderOnBeforeServiceHeaderModify(ServiceHeader,WhseShptHeader,ModifyHeader); <=====================
            IF ModifyHeader THEN
              ServiceHeader.MODIFY;
          END;
        ELSE
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnInitSourceDocumentHeaderOnBeforeTransHeaderModify>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<InitSourceDocumentHeader>
    Code lines:
    ...
               (WhseShptHeader."Shipment Method Code" <> TransHeader."Shipment Method Code")
            THEN BEGIN
              TransHeader."Shipment Method Code" := WhseShptHeader."Shipment Method Code";
              ModifyHeader := TRUE;
            END;
            OnInitSourceDocumentHeaderOnBeforeTransHeaderModify(TransHeader,WhseShptHeader,ModifyHeader); <=====================
            IF ModifyHeader THEN
              TransHeader.MODIFY;
          END;
        DATABASE::"Service Line":
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnPostSourceDocument>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<PostSourceDocument>
    Code lines:
    ...
            END;
    
            IF Print THEN
              IF "Source Document" = "Source Document"::"Sales Order" THEN BEGIN
                IsHandled := FALSE;
                OnPostSourceDocumentOnBeforePrintSalesShipment(SalesHeader,IsHandled); <=====================
                IF NOT IsHandled THEN BEGIN
                  SalesShptHeader."No." := SalesHeader."Last Shipping No.";
                  SalesShptHeader.SETRECFILTER;
                  SalesShptHeader.PrintRecords(FALSE);
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnPostSourceDocumentOnBeforePrintPurchReturnShipment>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<PostSourceDocument>
    Code lines:
    ...
            END;
    
            IF Print THEN
              IF "Source Document" = "Source Document"::"Purchase Return Order" THEN BEGIN
                IsHandled := FALSE;
                OnPostSourceDocumentOnBeforePrintPurchReturnShipment(PurchHeader,IsHandled); <=====================
                IF NOT IsHandled THEN BEGIN
                  ReturnShptHeader."No." := PurchHeader."Last Return Shipment No.";
                  ReturnShptHeader.SETRECFILTER;
                  ReturnShptHeader.PrintRecords(FALSE);
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnPostSourceDocumentOnBeforePrintSalesInvoice>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<PostSourceDocument>
    Code lines:
    ...
                  SalesShptHeader.SETRECFILTER;
                  SalesShptHeader.PrintRecords(FALSE);
                END;
                IF Invoice THEN BEGIN
                  IsHandled := FALSE;
                  OnPostSourceDocumentOnBeforePrintSalesInvoice(SalesHeader,IsHandled); <=====================
                  IF NOT IsHandled THEN BEGIN
                    SalesInvHeader."No." := SalesHeader."Last Posting No.";
                    SalesInvHeader.SETRECFILTER;
                    SalesInvHeader.PrintRecords(FALSE);
    ...
Codeunit<Whse.-Post Shipment>.PROCEDURE<OnPostSourceDocumentOnBeforePrintSalesShipment>
  Raised in: Codeunit<Whse.-Post Shipment>.PROCEDURE<PostSourceDocument>
    Code lines:
    ...
            END;
    
            IF Print THEN
              IF "Source Document" = "Source Document"::"Sales Order" THEN BEGIN
                IsHandled := FALSE;
                OnPostSourceDocumentOnBeforePrintSalesShipment(SalesHeader,IsHandled); <=====================
                IF NOT IsHandled THEN BEGIN
                  SalesShptHeader."No." := SalesHeader."Last Shipping No.";
                  SalesShptHeader.SETRECFILTER;
                  SalesShptHeader.PrintRecords(FALSE);
    ...
Codeunit<Whse.-Post Shipment (Yes/No)>.PROCEDURE<OnAfterConfirmPost>
  Raised in: Codeunit<Whse.-Post Shipment (Yes/No)>.PROCEDURE<Code>
    Code lines:
    ...
          IF Selection = 0 THEN
            EXIT;
          Invoice := (Selection = 2);
        END;
    
      OnAfterConfirmPost(WhseShptLine,Invoice); <=====================
    
      WhsePostShipment.SetPostingSettings(Invoice);
      WhsePostShipment.SetPrint(FALSE);
      WhsePostShipment.RUN(WhseShptLine);
    ...
Codeunit<Whse.-Post Shipment (Yes/No)>.PROCEDURE<OnBeforeConfirmWhseShipmentPost>
  Raised in: Codeunit<Whse.-Post Shipment (Yes/No)>.PROCEDURE<Code>
    Code lines:
    HideDialog := FALSE;
    IsPosted := FALSE;
    OnBeforeConfirmWhseShipmentPost(WhseShptLine,HideDialog,Invoice,IsPosted); <=====================
    IF IsPosted THEN
      EXIT;
    
    WITH WhseShptLine DO BEGIN
      IF FIND THEN
        IF NOT HideDialog THEN BEGIN
          Selection := STRMENU(ShipInvoiceQst,1);
    ...
Codeunit<Whse.-Post Shipment + Print>.PROCEDURE<OnAfterConfirmPost>
  Raised in: Codeunit<Whse.-Post Shipment + Print>.PROCEDURE<Code>
    Code lines:
    ...
          IF Selection = 0 THEN
            EXIT;
          Invoice := (Selection = 2);
        END;
    
      OnAfterConfirmPost(WhseShptLine,Invoice); <=====================
    
      WhsePostShipment.SetPostingSettings(Invoice);
      WhsePostShipment.SetPrint(TRUE);
      WhsePostShipment.RUN(WhseShptLine);
    ...
Codeunit<Whse.-Post Shipment + Print>.PROCEDURE<OnBeforeCode>
  Raised in: Codeunit<Whse.-Post Shipment + Print>.PROCEDURE<Code>
    Code lines:
    HideDialog := FALSE;
    IsPosted := FALSE;
    OnBeforeCode(WhseShptLine,HideDialog,Invoice,IsPosted); <=====================
    IF IsPosted THEN
      EXIT;
    
    WITH WhseShptLine DO BEGIN
      IF FIND THEN
        IF NOT HideDialog THEN BEGIN
          Selection := STRMENU(ShipInvoiceQst,1);
    ...
Codeunit<Whse.-Post Receipt + Pr. Pos.>.PROCEDURE<OnBeforeCode>
  Raised in: Codeunit<Whse.-Post Receipt + Pr. Pos.>.PROCEDURE<Code>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCode(WhseReceiptLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH WhseReceiptLine DO BEGIN
      WhsePostReceipt.RUN(WhseReceiptLine);
      WhsePostReceipt.GetResultMessage;
    
      PostedWhseRcptHeader.SETRANGE("Whse. Receipt No.","No.");
    ...
Codeunit<Whse.-Service Release>.PROCEDURE<OnAfterCreateWhseRqst>
  Raised in: Codeunit<Whse.-Service Release>.PROCEDURE<Release>
    Code lines:
    ...
            WhseType := WhseType::Inbound;
    
          IF First OR (ServiceLine."Location Code" <> OldLocationCode) OR (WhseType <> OldWhseType) THEN
            CreateWhseRqst(ServiceHeader,ServiceLine,WhseType);
    
          OnAfterCreateWhseRqst(ServiceHeader,ServiceLine,WhseType); <=====================
    
          First := FALSE;
          OldLocationCode := ServiceLine."Location Code";
          OldWhseType := WhseType;
    ...
Codeunit<Whse.-Service Release>.PROCEDURE<OnAfterRelease>
  Raised in: Codeunit<Whse.-Service Release>.PROCEDURE<Release>
    Code lines:
    ...
      ServiceLine.SETCURRENTKEY("Document Type","Document No.","Location Code");
      ServiceLine.SETRANGE("Document Type","Document Type");
      ServiceLine.SETRANGE("Document No.","No.");
      ServiceLine.SETRANGE(Type,ServiceLine.Type::Item);
      ServiceLine.SETRANGE("Job No.",'');
      OnAfterReleaseSetFilters(ServiceLine,ServiceHeader); <=====================
      IF ServiceLine.FINDSET THEN BEGIN
        First := TRUE;
        REPEAT
          IF ("Document Type" = "Document Type"::Order) AND (ServiceLine.Quantity >= 0) THEN
    ...
Codeunit<Whse.-Service Release>.PROCEDURE<OnAfterReleaseSetFilters>
  Raised in: Codeunit<Whse.-Service Release>.PROCEDURE<Release>
    Code lines:
    ...
      ServiceLine.SETCURRENTKEY("Document Type","Document No.","Location Code");
      ServiceLine.SETRANGE("Document Type","Document Type");
      ServiceLine.SETRANGE("Document No.","No.");
      ServiceLine.SETRANGE(Type,ServiceLine.Type::Item);
      ServiceLine.SETRANGE("Job No.",'');
      OnAfterReleaseSetFilters(ServiceLine,ServiceHeader); <=====================
      IF ServiceLine.FINDSET THEN BEGIN
        First := TRUE;
        REPEAT
          IF ("Document Type" = "Document Type"::Order) AND (ServiceLine.Quantity >= 0) THEN
    ...
Codeunit<Whse.-Service Release>.PROCEDURE<OnAfterReopen>
  Raised in: Codeunit<Whse.-Service Release>.PROCEDURE<Reopen>
    Code lines:
    ...
          WhseRqst."Document Status" := "Release Status"::Open;
          WhseRqst.MODIFY;
        UNTIL WhseRqst.NEXT = 0;
    END;
    
    OnAfterReopen(ServiceHeader); <=====================
Codeunit<Whse.-Service Release>.PROCEDURE<OnBeforeCreateWhseRequest>
  Raised in: Codeunit<Whse.-Service Release>.PROCEDURE<CreateWhseRqst>
    Code lines:
    ...
        "External Document No." := '';
        "Shipment Date" := ServiceLine.GetShipmentDate;
        "Shipment Method Code" := ServiceHeader."Shipment Method Code";
        "Shipping Agent Code" := ServiceHeader."Shipping Agent Code";
        "Completely Handled" := CalcCompletelyShipped(ServiceLine);
        OnBeforeCreateWhseRequest(WhseRqst,ServiceHeader,ServiceLine); <=====================
        IF NOT INSERT THEN
          MODIFY;
      END;
    END;
Codeunit<Whse.-Service Release>.PROCEDURE<OnBeforeRelease>
  Raised in: Codeunit<Whse.-Service Release>.PROCEDURE<Release>
    Code lines:
    OnBeforeRelease(ServiceHeader); <=====================
    
    WITH ServiceHeader DO BEGIN
      IF "Document Type" <> "Document Type"::Order THEN
        EXIT;
    
      WhseRqst."Source Document" := WhseRqst."Source Document"::"Service Order";
    
      ServiceLine.SETCURRENTKEY("Document Type","Document No.","Location Code");
      ServiceLine.SETRANGE("Document Type","Document Type");
    ...
Codeunit<Whse.-Service Release>.PROCEDURE<OnBeforeReopen>
  Raised in: Codeunit<Whse.-Service Release>.PROCEDURE<Reopen>
    Code lines:
    OnBeforeReopen(ServiceHeader); <=====================
    
    WITH ServiceHeader DO BEGIN
      WhseRqst.Type := WhseRqst.Type::Outbound;
      SetWhseRqstFiltersByStatus(ServiceHeader,WhseRqst,"Release Status"::"Released to Ship");
      WhseRqst.LOCKTABLE;
      IF WhseRqst.FINDSET THEN
        REPEAT
          WhseRqst."Document Status" := "Release Status"::Open;
          WhseRqst.MODIFY;
    ...
Codeunit<Whse.-Sales Release>.PROCEDURE<OnAfterCreateWhseRequest>
  Raised in: Codeunit<Whse.-Sales Release>.PROCEDURE<CreateWhseRqst>
    Code lines:
    ...
      SalesHeader.CALCFIELDS("Completely Shipped");
      WhseRqst."Completely Handled" := SalesHeader."Completely Shipped";
      OnBeforeCreateWhseRequest(WhseRqst,SalesHeader,SalesLine,WhseType);
      IF NOT WhseRqst.INSERT THEN
        WhseRqst.MODIFY;
      OnAfterCreateWhseRequest(WhseRqst,SalesHeader,SalesLine,WhseType); <=====================
    END;
Codeunit<Whse.-Sales Release>.PROCEDURE<OnAfterRelease>
  Raised in: Codeunit<Whse.-Sales Release>.PROCEDURE<Release>
    Code lines:
    ...
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.SETRANGE("Drop Shipment",FALSE);
      SalesLine.SETRANGE("Job No.",'');
      OnAfterReleaseSetFilters(SalesLine,SalesHeader); <=====================
      IF SalesLine.FINDSET THEN BEGIN
        First := TRUE;
        REPEAT
          IF (("Document Type" = "Document Type"::Order) AND (SalesLine.Quantity >= 0)) OR
    ...
Codeunit<Whse.-Sales Release>.PROCEDURE<OnAfterReleaseSetFilters>
  Raised in: Codeunit<Whse.-Sales Release>.PROCEDURE<Release>
    Code lines:
    ...
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.SETRANGE("Drop Shipment",FALSE);
      SalesLine.SETRANGE("Job No.",'');
      OnAfterReleaseSetFilters(SalesLine,SalesHeader); <=====================
      IF SalesLine.FINDSET THEN BEGIN
        First := TRUE;
        REPEAT
          IF (("Document Type" = "Document Type"::Order) AND (SalesLine.Quantity >= 0)) OR
    ...
Codeunit<Whse.-Sales Release>.PROCEDURE<OnAfterReopen>
  Raised in: Codeunit<Whse.-Sales Release>.PROCEDURE<Reopen>
    Code lines:
    ...
      WhseRqst.LOCKTABLE;
      IF NOT WhseRqst.ISEMPTY THEN
        WhseRqst.MODIFYALL("Document Status",WhseRqst."Document Status"::Open);
    END;
    
    OnAfterReopen(SalesHeader); <=====================
Codeunit<Whse.-Sales Release>.PROCEDURE<OnBeforeCreateWhseRequest>
  Raised in: Codeunit<Whse.-Sales Release>.PROCEDURE<CreateWhseRqst>
    Code lines:
    ...
      ELSE
        WhseRqst."Shipment Date" := SalesHeader."Shipment Date";
      SalesHeader.SETRANGE("Location Filter",SalesLine."Location Code");
      SalesHeader.CALCFIELDS("Completely Shipped");
      WhseRqst."Completely Handled" := SalesHeader."Completely Shipped";
      OnBeforeCreateWhseRequest(WhseRqst,SalesHeader,SalesLine,WhseType); <=====================
      IF NOT WhseRqst.INSERT THEN
        WhseRqst.MODIFY;
      OnAfterCreateWhseRequest(WhseRqst,SalesHeader,SalesLine,WhseType);
    END;
Codeunit<Whse.-Sales Release>.PROCEDURE<OnBeforeRelease>
  Raised in: Codeunit<Whse.-Sales Release>.PROCEDURE<Release>
    Code lines:
    OnBeforeRelease(SalesHeader); <=====================
    
    WITH SalesHeader DO BEGIN
      IsHandled := FALSE;
      OnBeforeReleaseSetWhseRequestSourceDocument(SalesHeader,WhseRqst,IsHandled); <=====================
      IF NOT IsHandled THEN
        CASE "Document Type" OF
          "Document Type"::Order:
            WhseRqst."Source Document" := WhseRqst."Source Document"::"Sales Order";
          "Document Type"::"Return Order":
    ...
Codeunit<Whse.-Sales Release>.PROCEDURE<OnBeforeReleaseSetWhseRequestSourceDocument>
  Raised in: Codeunit<Whse.-Sales Release>.PROCEDURE<Release>
    Code lines:
    OnBeforeRelease(SalesHeader);
    
    WITH SalesHeader DO BEGIN
      IsHandled := FALSE;
      OnBeforeReleaseSetWhseRequestSourceDocument(SalesHeader,WhseRqst,IsHandled); <=====================
      IF NOT IsHandled THEN
        CASE "Document Type" OF
          "Document Type"::Order:
            WhseRqst."Source Document" := WhseRqst."Source Document"::"Sales Order";
          "Document Type"::"Return Order":
    ...
Codeunit<Whse.-Sales Release>.PROCEDURE<OnBeforeReopen>
  Raised in: Codeunit<Whse.-Sales Release>.PROCEDURE<Reopen>
    Code lines:
    OnBeforeReopen(SalesHeader); <=====================
    
    WITH SalesHeader DO BEGIN
      IsHandled := FALSE;
      OnBeforeReopenSetWhseRequestSourceDocument(SalesHeader,WhseRqst,IsHandled); <=====================
      IF NOT IsHandled THEN
        CASE "Document Type" OF
          "Document Type"::Order:
            WhseRqst.Type := WhseRqst.Type::Outbound;
          "Document Type"::"Return Order":
    ...
Codeunit<Whse.-Sales Release>.PROCEDURE<OnBeforeReopenSetWhseRequestSourceDocument>
  Raised in: Codeunit<Whse.-Sales Release>.PROCEDURE<Reopen>
    Code lines:
    OnBeforeReopen(SalesHeader);
    
    WITH SalesHeader DO BEGIN
      IsHandled := FALSE;
      OnBeforeReopenSetWhseRequestSourceDocument(SalesHeader,WhseRqst,IsHandled); <=====================
      IF NOT IsHandled THEN
        CASE "Document Type" OF
          "Document Type"::Order:
            WhseRqst.Type := WhseRqst.Type::Outbound;
          "Document Type"::"Return Order":
    ...
Codeunit<Whse.-Purch. Release>.PROCEDURE<OnAfterCreateWhseRqst>
  Raised in: Codeunit<Whse.-Purch. Release>.PROCEDURE<CreateWhseRqst>
    Code lines:
    ...
      PurchHeader.CALCFIELDS("Completely Received");
      WhseRqst."Completely Handled" := PurchHeader."Completely Received";
      OnBeforeCreateWhseRequest(WhseRqst,PurchHeader,PurchLine,WhseType);
      IF NOT WhseRqst.INSERT THEN
        WhseRqst.MODIFY;
      OnAfterCreateWhseRqst(WhseRqst,PurchHeader,PurchLine,WhseType); <=====================
    END;
Codeunit<Whse.-Purch. Release>.PROCEDURE<OnAfterRelease>
  Raised in: Codeunit<Whse.-Purch. Release>.PROCEDURE<Release>
    Code lines:
    ...
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETRANGE(Type,PurchLine.Type::Item);
      PurchLine.SETRANGE("Drop Shipment",FALSE);
      PurchLine.SETRANGE("Job No.",'');
      PurchLine.SETRANGE("Work Center No.",'');
      OnAfterReleaseSetFilters(PurchLine,PurchHeader); <=====================
      IF PurchLine.FIND('-') THEN BEGIN
        First := TRUE;
        REPEAT
          IF (("Document Type" = "Document Type"::Order) AND (PurchLine.Quantity >= 0)) OR
    ...
Codeunit<Whse.-Purch. Release>.PROCEDURE<OnAfterReleaseSetFilters>
  Raised in: Codeunit<Whse.-Purch. Release>.PROCEDURE<Release>
    Code lines:
    ...
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETRANGE(Type,PurchLine.Type::Item);
      PurchLine.SETRANGE("Drop Shipment",FALSE);
      PurchLine.SETRANGE("Job No.",'');
      PurchLine.SETRANGE("Work Center No.",'');
      OnAfterReleaseSetFilters(PurchLine,PurchHeader); <=====================
      IF PurchLine.FIND('-') THEN BEGIN
        First := TRUE;
        REPEAT
          IF (("Document Type" = "Document Type"::Order) AND (PurchLine.Quantity >= 0)) OR
    ...
Codeunit<Whse.-Purch. Release>.PROCEDURE<OnAfterReopen>
  Raised in: Codeunit<Whse.-Purch. Release>.PROCEDURE<Reopen>
    Code lines:
    ...
      FilterWarehouseRequest(WhseRqst,PurchHeader,WhseRqst."Document Status"::Released);
      IF NOT WhseRqst.ISEMPTY THEN
        WhseRqst.MODIFYALL("Document Status",WhseRqst."Document Status"::Open);
    END;
    
    OnAfterReopen(PurchHeader); <=====================
Codeunit<Whse.-Purch. Release>.PROCEDURE<OnBeforeCreateWhseRequest>
  Raised in: Codeunit<Whse.-Purch. Release>.PROCEDURE<CreateWhseRqst>
    Code lines:
    ...
      ELSE
        WhseRqst."Shipment Date" := PurchHeader."Expected Receipt Date";
      PurchHeader.SETRANGE("Location Filter",PurchLine."Location Code");
      PurchHeader.CALCFIELDS("Completely Received");
      WhseRqst."Completely Handled" := PurchHeader."Completely Received";
      OnBeforeCreateWhseRequest(WhseRqst,PurchHeader,PurchLine,WhseType); <=====================
      IF NOT WhseRqst.INSERT THEN
        WhseRqst.MODIFY;
      OnAfterCreateWhseRqst(WhseRqst,PurchHeader,PurchLine,WhseType);
    END;
Codeunit<Whse.-Purch. Release>.PROCEDURE<OnBeforeRelease>
  Raised in: Codeunit<Whse.-Purch. Release>.PROCEDURE<Release>
    Code lines:
    OnBeforeRelease(PurchHeader); <=====================
    
    WITH PurchHeader DO BEGIN
      CASE "Document Type" OF
        "Document Type"::Order:
          WhseRqst."Source Document" := WhseRqst."Source Document"::"Purchase Order";
        "Document Type"::"Return Order":
          WhseRqst."Source Document" := WhseRqst."Source Document"::"Purchase Return Order";
        ELSE
          EXIT;
    ...
Codeunit<Whse.-Purch. Release>.PROCEDURE<OnBeforeReopen>
  Raised in: Codeunit<Whse.-Purch. Release>.PROCEDURE<Reopen>
    Code lines:
    OnBeforeReopen(PurchHeader); <=====================
    
    WITH PurchHeader DO BEGIN
      CASE "Document Type" OF
        "Document Type"::Order:
          WhseRqst.Type := WhseRqst.Type::Inbound;
        "Document Type"::"Return Order":
          WhseRqst.Type := WhseRqst.Type::Outbound;
      END;
    
    ...
Codeunit<Whse.-Purch. Release>.PROCEDURE<OnReleaseOnAfterCreateWhseRequest>
  Raised in: Codeunit<Whse.-Purch. Release>.PROCEDURE<Release>
    Code lines:
    ...
          ELSE
            WhseType := WhseType::Outbound;
          IF First OR (PurchLine."Location Code" <> OldLocationCode) OR (WhseType <> OldWhseType) THEN
            CreateWhseRqst(PurchHeader,PurchLine,WhseType);
    
          OnReleaseOnAfterCreateWhseRequest(PurchHeader,PurchLine,WhseType); <=====================
    
          First := FALSE;
          OldLocationCode := PurchLine."Location Code";
          OldWhseType := WhseType;
    ...
Codeunit<Whse.-Transfer Release>.PROCEDURE<OnAfterCreateInboundWhseRequest>
  Raised in: Codeunit<Whse.-Transfer Release>.PROCEDURE<CreateInboundWhseRequest>
    Code lines:
    ...
      END ELSE
        IF NOT INSERT THEN
          MODIFY;
    END;
    
    OnAfterCreateInboundWhseRequest(WarehouseRequest,TransferHeader); <=====================
Codeunit<Whse.-Transfer Release>.PROCEDURE<OnAfterCreateOutboundWhseRequest>
  Raised in: Codeunit<Whse.-Transfer Release>.PROCEDURE<CreateOutboundWhseRequest>
    Code lines:
    ...
      OnBeforeCreateWhseRequest(WarehouseRequest,TransferHeader);
      IF NOT INSERT THEN
        MODIFY;
    END;
    
    OnAfterCreateOutboundWhseRequest(WarehouseRequest,TransferHeader); <=====================
Codeunit<Whse.-Transfer Release>.PROCEDURE<OnAfterRelease>
  Raised in: Codeunit<Whse.-Transfer Release>.PROCEDURE<Release>
    Code lines:
    ...
        CreateOutboundWhseRequest(WhseRqst,TransHeader);
    
      DeleteOpenWhseRequest("No.");
    END;
    
    OnAfterRelease(TransHeader); <=====================
Codeunit<Whse.-Transfer Release>.PROCEDURE<OnAfterReopen>
  Raised in: Codeunit<Whse.-Transfer Release>.PROCEDURE<Reopen>
    Code lines:
    ...
        WhseRqst."Document Status" := Status::Open;
        WhseRqst.MODIFY;
      END;
    END;
    
    OnAfterReopen(TransHeader); <=====================
Codeunit<Whse.-Transfer Release>.PROCEDURE<OnBeforeCreateWhseRequest>
  Raised in: Codeunit<Whse.-Transfer Release>.PROCEDURE<CreateInboundWhseRequest>
    Code lines:
    ...
      "Location Code" := TransferHeader."Transfer-to Code";
      "Completely Handled" := TransferHeader."Completely Received";
      "Shipment Method Code" := TransferHeader."Shipment Method Code";
      "Shipping Agent Code" := TransferHeader."Shipping Agent Code";
      "Destination No." := TransferHeader."Transfer-to Code";
      OnBeforeCreateWhseRequest(WarehouseRequest,TransferHeader); <=====================
      IF CalledFromTransferOrder THEN BEGIN
        IF MODIFY THEN;
      END ELSE
        IF NOT INSERT THEN
    ...
  Raised in: Codeunit<Whse.-Transfer Release>.PROCEDURE<CreateOutboundWhseRequest>
    Code lines:
    ...
      "Shipment Method Code" := TransferHeader."Shipment Method Code";
      "Shipping Agent Code" := TransferHeader."Shipping Agent Code";
      "Shipping Advice" := TransferHeader."Shipping Advice";
      "Shipment Date" := TransferHeader."Shipment Date";
      "Destination No." := TransferHeader."Transfer-from Code";
      OnBeforeCreateWhseRequest(WarehouseRequest,TransferHeader); <=====================
      IF NOT INSERT THEN
        MODIFY;
    END;
    
Codeunit<Whse.-Transfer Release>.PROCEDURE<OnBeforeRelease>
  Raised in: Codeunit<Whse.-Transfer Release>.PROCEDURE<Release>
    Code lines:
    OnBeforeRelease(TransHeader); <=====================
    
    WITH TransHeader DO BEGIN
      InitializeWhseRequest(WhseRqst,TransHeader,Status::Released);
    
      IF Location.RequireReceive("Transfer-to Code") OR Location.RequirePutaway("Transfer-to Code") THEN
        CreateInboundWhseRequest(WhseRqst,TransHeader);
      IF Location.RequireShipment("Transfer-from Code") OR Location.RequirePicking("Transfer-from Code") THEN
        CreateOutboundWhseRequest(WhseRqst,TransHeader);
    
    ...
Codeunit<Whse.-Transfer Release>.PROCEDURE<OnBeforeReopen>
  Raised in: Codeunit<Whse.-Transfer Release>.PROCEDURE<Reopen>
    Code lines:
    OnBeforeReopen(TransHeader); <=====================
    
    WITH TransHeader DO BEGIN
      IF WhseRqst.GET(WhseRqst.Type::Inbound,"Transfer-to Code",DATABASE::"Transfer Line",1,"No.") THEN BEGIN
        WhseRqst."Document Status" := Status::Open;
        WhseRqst.MODIFY;
      END;
      IF WhseRqst.GET(WhseRqst.Type::Outbound,"Transfer-from Code",DATABASE::"Transfer Line",0,"No.") THEN BEGIN
        WhseRqst."Document Status" := Status::Open;
        WhseRqst.MODIFY;
    ...
Codeunit<Whse.-Production Release>.PROCEDURE<OnAfterDeleteLine>
  Raised in: Codeunit<Whse.-Production Release>.PROCEDURE<DeleteLine>
    Code lines:
    ...
        ELSE
          DeleteWhseRqst(ProdOrderComp,FALSE);
      END;
    END;
    
    OnAfterDeleteLine(ProdOrderComp); <=====================
Codeunit<Whse.-Production Release>.PROCEDURE<OnAfterRelease>
  Raised in: Codeunit<Whse.-Production Release>.PROCEDURE<Release>
    Code lines:
    ...
        LocationCode2 := ProdOrderComp."Location Code";
        OldSignFactor := CurrentSignFactor;
      UNTIL ProdOrderComp.NEXT = 0;
    END;
    
    OnAfterRelease(ProdOrder); <=====================
Codeunit<Whse.-Production Release>.PROCEDURE<OnBeforeCreateWhsePickRequest>
  Raised in: Codeunit<Whse.-Production Release>.PROCEDURE<CreateWhseRqst>
    Code lines:
    ...
        WhsePickRqst."Completely Picked" :=
          ProdOrderCompletelyPicked(
            ProdOrderComp."Location Code",ProdOrder."No.",ProdOrder.Status,ProdOrderComp."Line No.");
        IF WhsePickRqst."Completely Picked" AND (NOT ProdOrderComp."Completely Picked") THEN
          WhsePickRqst."Completely Picked" := FALSE;
        OnBeforeCreateWhsePickRequest(WhsePickRqst,ProdOrderComp,ProdOrder); <=====================
        IF NOT WhsePickRqst.INSERT THEN
          WhsePickRqst.MODIFY;
      END
    END ELSE BEGIN
    ...
  Raised in: Codeunit<Whse.-Production Release>.PROCEDURE<ReleaseLine>
    Code lines:
    ...
            WhsePickRequest."Completely Picked" :=
              ProdOrderCompletelyPicked("Location Code","Prod. Order No.",Status,"Line No.");
            IF WhsePickRequest."Completely Picked" AND (NOT "Completely Picked") THEN
              WhsePickRequest."Completely Picked" := FALSE;
            WhsePickRequest."Location Code" := "Location Code";
            OnBeforeCreateWhsePickRequest(WhsePickRqst,ProdOrderComp,ProdOrder); <=====================
            IF NOT WhsePickRequest.INSERT THEN
              WhsePickRequest.MODIFY;
          END;
        END ELSE
    ...
Codeunit<Whse.-Production Release>.PROCEDURE<OnBeforeCreateWhseRequest>
  Raised in: Codeunit<Whse.-Production Release>.PROCEDURE<CreateWhseRqst>
    Code lines:
    ...
          WhseRqst."Destination Type" := WhseRqst."Destination Type"::"Sales Order";
      END;
      WhseRqst."Destination No." := ProdOrder."Source No.";
      WhseRqst."Completely Handled" :=
        ProdOrderCompletelyHandled(ProdOrder,ProdOrderComp."Location Code");
      OnBeforeCreateWhseRequest(WhseRqst,ProdOrderComp,ProdOrder); <=====================
      IF NOT WhseRqst.INSERT THEN
        WhseRqst.MODIFY;
    END;
Codeunit<Whse.-Production Release>.PROCEDURE<OnBeforeReleaseWhseProdOrder>
  Raised in: Codeunit<Whse.-Production Release>.PROCEDURE<Release>
    Code lines:
    IF ProdOrder.Status <> ProdOrder.Status::Released THEN
      EXIT;
    
    OnBeforeReleaseWhseProdOrder(ProdOrder); <=====================
    
    WITH ProdOrder DO BEGIN
      ProdOrderComp.SETCURRENTKEY(Status,"Prod. Order No.","Location Code");
      ProdOrderComp.SETRANGE(Status,Status);
      ProdOrderComp.SETRANGE("Prod. Order No.","No.");
      ProdOrderComp.SETFILTER(
    ...
Codeunit<Whse.-Production Release>.PROCEDURE<OnBeforeWarehouseRequestUpdate>
  Raised in: Codeunit<Whse.-Production Release>.PROCEDURE<ReleaseLine>
    Code lines:
    ...
                WarehouseRequest."Destination Type" := WarehouseRequest."Destination Type"::Family;
              ProdOrder."Source Type"::"Sales Header":
                WarehouseRequest."Destination Type" := WarehouseRequest."Destination Type"::"Sales Order";
            END;
            WarehouseRequest."Destination No." := ProdOrder."Source No.";
            OnBeforeWarehouseRequestUpdate(WarehouseRequest,ProdOrderComp); <=====================
            IF NOT WarehouseRequest.INSERT THEN
              WarehouseRequest.MODIFY;
          END;
    
    ...
Codeunit<Whse. Management>.PROCEDURE<OnAfterGetSrcDocLineQtyOutstanding>
  Raised in: Codeunit<Whse. Management>.PROCEDURE<GetSrcDocLineQtyOutstanding>
    Code lines:
    ...
        QtyOutstanding := 0;
        QtyBaseOutstanding := 0;
      END;
    END;
    
    OnAfterGetSrcDocLineQtyOutstanding( <=====================
      SourceType,SourceSubType,SourceNo,SourceLineNo,SourceSubLineNo,QtyOutstanding,QtyBaseOutstanding);
Codeunit<Warehouse Document-Print>.PROCEDURE<OnBeforePrintInvtMovementHeader>
  Raised in: Codeunit<Warehouse Document-Print>.PROCEDURE<PrintInvtMovementHeader>
    Code lines:
    IsHandled := FALSE;
    OnBeforePrintInvtMovementHeader(WhseActivHeader,IsHandled,HideDialog); <=====================
    IF IsHandled THEN
      EXIT;
    
    WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::"Invt. Movement");
    WhseActivHeader.SETRANGE("No.",WhseActivHeader."No.");
    ReportSelectionWhse.PrintWhseActivHeader(WhseActivHeader,ReportSelectionWhse.Usage::"Invt. Movement",NOT HideDialog);
Codeunit<Warehouse Document-Print>.PROCEDURE<OnBeforePrintInvtPickHeader>
  Raised in: Codeunit<Warehouse Document-Print>.PROCEDURE<PrintInvtPickHeader>
    Code lines:
    IsHandled := FALSE;
    
    OnBeforePrintInvtPickHeader(WhseActivHeader,IsHandled,HideDialog); <=====================
    IF IsHandled THEN
      EXIT;
    
    WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::"Invt. Pick");
    WhseActivHeader.SETRANGE("No.",WhseActivHeader."No.");
    ReportSelectionWhse.PrintWhseActivHeader(WhseActivHeader,ReportSelectionWhse.Usage::"Invt. Pick",NOT HideDialog);
Codeunit<Warehouse Document-Print>.PROCEDURE<OnBeforePrintInvtPutAwayHeader>
  Raised in: Codeunit<Warehouse Document-Print>.PROCEDURE<PrintInvtPutAwayHeader>
    Code lines:
    IsHandled := FALSE;
    OnBeforePrintInvtPutAwayHeader(WhseActivHeader,IsHandled,HideDialog); <=====================
    IF IsHandled THEN
      EXIT;
    
    WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::"Invt. Put-away");
    WhseActivHeader.SETRANGE("No.",WhseActivHeader."No.");
    ReportSelectionWhse.PrintWhseActivHeader(WhseActivHeader,ReportSelectionWhse.Usage::"Invt. Put-away",NOT HideDialog);
Codeunit<Warehouse Document-Print>.PROCEDURE<OnBeforePrintMovementHeader>
  Raised in: Codeunit<Warehouse Document-Print>.PROCEDURE<PrintMovementHeader>
    Code lines:
    IsHandled := FALSE;
    OnBeforePrintMovementHeader(WhseActivHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::Movement);
    WhseActivHeader.SETRANGE("No.",WhseActivHeader."No.");
    ReportSelectionWhse.PrintWhseActivHeader(WhseActivHeader,ReportSelectionWhse.Usage::Movement,TRUE);
Codeunit<Warehouse Document-Print>.PROCEDURE<OnBeforePrintPickHeader>
  Raised in: Codeunit<Warehouse Document-Print>.PROCEDURE<PrintPickHeader>
    Code lines:
    IsHandled := FALSE;
    OnBeforePrintPickHeader(WhseActivHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::Pick);
    WhseActivHeader.SETRANGE("No.",WhseActivHeader."No.");
    ReportSelectionWhse.PrintWhseActivHeader(WhseActivHeader,ReportSelectionWhse.Usage::Pick,TRUE);
Codeunit<Warehouse Document-Print>.PROCEDURE<OnBeforePrintPostedRcptHeader>
  Raised in: Codeunit<Warehouse Document-Print>.PROCEDURE<PrintPostedRcptHeader>
    Code lines:
    IsHandled := FALSE;
    OnBeforePrintPostedRcptHeader(PostedWhseReceiptHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    PostedWhseReceiptHeader.SETRANGE("No.",PostedWhseReceiptHeader."No.");
    ReportSelectionWhse.PrintPostedWhseReceiptHeader(PostedWhseReceiptHeader,FALSE);
Codeunit<Warehouse Document-Print>.PROCEDURE<OnBeforePrintPostedShptHeader>
  Raised in: Codeunit<Warehouse Document-Print>.PROCEDURE<PrintPostedShptHeader>
    Code lines:
    IsHandled := FALSE;
    OnBeforePrintPostedShptHeader(PostedWhseShipmentHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    PostedWhseShipmentHeader.SETRANGE("No.",PostedWhseShipmentHeader."No.");
    ReportSelectionWhse.PrintPostedWhseShipmentHeader(PostedWhseShipmentHeader,FALSE);
Codeunit<Warehouse Document-Print>.PROCEDURE<OnBeforePrintPutAwayHeader>
  Raised in: Codeunit<Warehouse Document-Print>.PROCEDURE<PrintPutAwayHeader>
    Code lines:
    IsHandled := FALSE;
    OnBeforePrintPutAwayHeader(WhseActivHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::"Put-away");
    WhseActivHeader.SETRANGE("No.",WhseActivHeader."No.");
    ReportSelectionWhse.PrintWhseActivHeader(WhseActivHeader,ReportSelectionWhse.Usage::"Put-away",TRUE);
Codeunit<Warehouse Document-Print>.PROCEDURE<OnBeforePrintRcptHeader>
  Raised in: Codeunit<Warehouse Document-Print>.PROCEDURE<PrintRcptHeader>
    Code lines:
    IsHandled := FALSE;
    
    OnBeforePrintRcptHeader(WarehouseReceiptHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WarehouseReceiptHeader.SETRANGE("No.",WarehouseReceiptHeader."No.");
    ReportSelectionWhse.PrintWhseReceiptHeader(WarehouseReceiptHeader,FALSE);
Codeunit<Warehouse Document-Print>.PROCEDURE<OnBeforePrintShptHeader>
  Raised in: Codeunit<Warehouse Document-Print>.PROCEDURE<PrintShptHeader>
    Code lines:
    IsHandled := FALSE;
    OnBeforePrintShptHeader(WarehouseShipmentHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WarehouseShipmentHeader.SETRANGE("No.",WarehouseShipmentHeader."No.");
    ReportSelectionWhse.PrintWhseShipmentHeader(WarehouseShipmentHeader,FALSE);
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterAssemblyLineDelete>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<AssemblyLineDelete>
    Code lines:
    ...
         DATABASE::"Assembly Line",AssemblyLine."Document Type",AssemblyLine."Document No.",AssemblyLine."Line No.",0,
         AssemblyLine.Quantity)
    THEN
      ERROR(Text001,AssemblyLine.TABLECAPTION,TableCaptionValue);
    
    OnAfterAssemblyLineDelete(AssemblyLine); <=====================
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterAssemblyLineVerifyChange>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<AssemblyLineVerifyChange>
    Code lines:
    ...
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Quantity per"));
      IF Location.GET("Location Code") AND NOT Location."Require Shipment" THEN
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Quantity to Consume"));
    END;
    
    OnAfterAssemblyLineVerifyChange(NewRecRef,OldRecRef); <=====================
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterItemLineVerifyChange>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<ItemLineVerifyChange>
    Code lines:
    ...
        THEN
          FIELDERROR(Quantity,STRSUBSTNO(Text000,TableCaptionValue,TABLECAPTION));
      END;
    END;
    
    OnAfterItemLineVerifyChange(NewItemJnlLine,OldItemJnlLine); <=====================
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterProdComponentDelete>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<ProdComponentDelete>
    Code lines:
    ...
         ProdOrderComp.Status,ProdOrderComp."Prod. Order No.",ProdOrderComp."Prod. Order Line No.",
         ProdOrderComp."Line No.",ProdOrderComp.Quantity)
    THEN
      ERROR(Text001,ProdOrderComp.TABLECAPTION,TableCaptionValue);
    
    OnAfterProdComponentDelete(ProdOrderComp); <=====================
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterProdComponentVerifyChange>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<ProdComponentVerifyChange>
    Code lines:
    ...
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Quantity));
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Quantity per"));
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Expected Quantity"));
    END;
    
    OnAfterProdComponentVerifyChange(NewRecRef,OldRecRef); <=====================
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterProdOrderLineDelete>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<ProdOrderLineDelete>
    Code lines:
    ...
      IF WhseLinesExist(
           DATABASE::"Prod. Order Line",Status,"Prod. Order No.","Line No.",0,Quantity)
      THEN
        ERROR(Text001,TABLECAPTION,TableCaptionValue);
    
    OnAfterProdOrderLineDelete(ProdOrderLine); <=====================
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterProdOrderLineVerifyChange>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<ProdOrderLineVerifyChange>
    Code lines:
    ...
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Unit of Measure Code"));
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Due Date"));
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Quantity));
    END;
    
    OnAfterProdOrderLineVerifyChange(NewProdOrderLine,OldProdOrderLine,NewRecRef,OldRecRef); <=====================
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterPurchaseLineDelete>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<PurchaseLineDelete>
    Code lines:
    IF WhseLinesExist(
         DATABASE::"Purchase Line",PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.",0,PurchLine.Quantity)
    THEN
      ERROR(Text001,PurchLine.TABLECAPTION,TableCaptionValue);
    
    OnAfterPurchaseLineDelete(PurchLine); <=====================
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterPurchaseLineVerifyChange>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<PurchaseLineVerifyChange>
    Code lines:
    ...
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Job No."));
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Quantity));
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Qty. to Receive"));
    END;
    
    OnAfterPurchaseLineVerifyChange(NewPurchLine,OldPurchLine,NewRecRef,OldRecRef); <=====================
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterSalesLineDelete>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<SalesLineDelete>
    Code lines:
    ...
         DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",
         SalesLine."Line No.",0,SalesLine.Quantity)
    THEN
      ERROR(Text001,SalesLine.TABLECAPTION,TableCaptionValue);
    
    OnAfterSalesLineDelete(SalesLine); <=====================
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterSalesLineVerifyChange>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<SalesLineVerifyChange>
    Code lines:
    ...
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Qty. to Ship"));
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Qty. to Assemble to Order"));
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Shipment Date"));
    END;
    
    OnAfterSalesLineVerifyChange(NewRecRef,OldRecRef); <=====================
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterServiceLineDelete>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<ServiceLineDelete>
    Code lines:
    ...
         DATABASE::"Service Line",ServiceLine."Document Type",ServiceLine."Document No.",
         ServiceLine."Line No.",0,ServiceLine.Quantity)
    THEN
      ERROR(Text001,ServiceLine.TABLECAPTION,TableCaptionValue);
    
    OnAfterServiceLineDelete(ServiceLine); <=====================
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterServiceLineVerifyChange>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<ServiceLineVerifyChange>
    Code lines:
    ...
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Quantity));
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Variant Code"));
      VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Unit of Measure Code"));
    END;
    
    OnAfterServiceLineVerifyChange(NewRecRef,OldRecRef); <=====================
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterTransLineDelete>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<TransLineDelete>
    Code lines:
    ...
        ERROR(Text001,TABLECAPTION,TableCaptionValue);
      IF WhseLinesExist(DATABASE::"Transfer Line",1,"Document No.","Line No.",0,Quantity) THEN
        ERROR(Text001,TABLECAPTION,TableCaptionValue);
    END;
    
    OnAfterTransLineDelete(TransLine); <=====================
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnAfterTransLineVerifyChange>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<TransLineVerifyChange>
    Code lines:
    ...
        IF "Qty. to Receive" <> OldTransLine."Qty. to Receive" THEN
          FIELDERROR("Qty. to Receive",STRSUBSTNO(Text000,TableCaptionValue,TABLECAPTION));
      END;
    END;
    
    OnAfterTransLineVerifyChange(NewTransLine,OldTransLine); <=====================
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnBeforeVerifyFieldNotChanged>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<VerifyFieldNotChanged>
    Code lines:
    IsHandled := FALSE;
    OnBeforeVerifyFieldNotChanged(NewRecRef,OldRecRef,FieldNumber,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    VerifyFieldHasSameValue(NewRecRef,OldRecRef,FieldNumber,STRSUBSTNO(Text000,TableCaptionValue,NewRecRef.CAPTION));
Codeunit<Whse. Validate Source Line>.PROCEDURE<OnTransLineCommonVerificationOnBeforeQuantityCheck>
  Raised in: Codeunit<Whse. Validate Source Line>.PROCEDURE<TransLineCommonVerification>
    Code lines:
    ...
    
      IF "Unit of Measure Code" <> OldTransLine."Unit of Measure Code" THEN
        FIELDERROR("Unit of Measure Code",STRSUBSTNO(Text000,TableCaptionValue,TABLECAPTION));
    
      IsHandled := FALSE;
      OnTransLineCommonVerificationOnBeforeQuantityCheck(NewTransLine,OldTransLine,IsHandled); <=====================
      IF NOT IsHandled THEN
        IF Quantity <> OldTransLine.Quantity THEN
          FIELDERROR(Quantity,STRSUBSTNO(Text000,TableCaptionValue,TABLECAPTION));
    END;
Codeunit<Whse.-Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<Whse.-Printed>.<OnRun>
    Code lines:
    LOCKTABLE;
    FIND;
    "No. Printed" := "No. Printed" + 1;
    "Date of Last Printing" := TODAY;
    "Time of Last Printing" := TIME;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<Whse. Cross-Dock Management>.PROCEDURE<OnAfterUpdateQtyToCrossDock>
  Raised in: Codeunit<Whse. Cross-Dock Management>.PROCEDURE<UpdateQtyToCrossDock>
    Code lines:
    ...
      VALIDATE("Qty. to Cross-Dock",ROUND(QtyToCrossDockBase / "Qty. per Unit of Measure",UOMMgt.QtyRndPrecision));
      "Qty. to Cross-Dock (Base)" := QtyToCrossDockBase;
      MODIFY;
    END;
    
    OnAfterUpdateQtyToCrossDock(WhseRcptLine); <=====================
Codeunit<Whse. Cross-Dock Management>.PROCEDURE<OnShowCrossDockOnAfterReceiptLineModify>
  Raised in: Codeunit<Whse. Cross-Dock Management>.PROCEDURE<ShowCrossDock>
    Code lines:
    ...
      QtyToCrossDock := QtyToCrossDock / ReceiptLine."Qty. per Unit of Measure";
      IF ReceiptLine."Qty. to Receive" < QtyToCrossDock THEN
        QtyToCrossDock := ReceiptLine."Qty. to Receive";
      ReceiptLine.VALIDATE("Qty. to Cross-Dock",QtyToCrossDock);
      ReceiptLine.MODIFY;
      OnShowCrossDockOnAfterReceiptLineModify(ReceiptLine); <=====================
    END;
Codeunit<Available to Promise>.PROCEDURE<OnAfterCalcAvailableInventory>
  Raised in: Codeunit<Available to Promise>.PROCEDURE<CalcAvailableInventory>
    Code lines:
    CalcAllItemFields(Item);
    AvailableInventory := Item.Inventory - Item."Reserved Qty. on Inventory";
    OnAfterCalcAvailableInventory(Item,AvailableInventory); <=====================
    EXIT(AvailableInventory);
Codeunit<Available to Promise>.PROCEDURE<OnAfterCalcGrossRequirement>
  Raised in: Codeunit<Available to Promise>.PROCEDURE<CalcGrossRequirement>
    Code lines:
    ...
        "Qty. on Job Order" +
        "Trans. Ord. Shipment (Qty.)" +
        "Qty. on Asm. Component" +
        "Qty. on Purch. Return";
    
      OnAfterCalcGrossRequirement(Item,GrossRequirement); <=====================
    
      EXIT(GrossRequirement);
    END;
Codeunit<Available to Promise>.PROCEDURE<OnAfterCalcReservedReceipt>
  Raised in: Codeunit<Available to Promise>.PROCEDURE<CalcReservedReceipt>
    Code lines:
    ...
        "Reserved Qty. on Purch. Orders" +
        "Res. Qty. on Inbound Transfer" +
        "Res. Qty. on Assembly Order" +
        "Res. Qty. on Sales Returns";
    
      OnAfterCalcReservedReceipt(Item,ReservedReceipt); <=====================
    
      EXIT(ReservedReceipt);
    END;
Codeunit<Available to Promise>.PROCEDURE<OnAfterCalcReservedRequirement>
  Raised in: Codeunit<Available to Promise>.PROCEDURE<CalcReservedRequirement>
    Code lines:
    ...
        "Res. Qty. on Job Order" +
        "Res. Qty. on Outbound Transfer" +
        "Res. Qty. on  Asm. Comp." +
        "Res. Qty. on Purch. Returns";
    
      OnAfterCalcReservedRequirement(Item,ReservedRequirement); <=====================
    
      EXIT(ReservedRequirement);
    END;
Codeunit<Available to Promise>.PROCEDURE<OnAfterCalcScheduledReceipt>
  Raised in: Codeunit<Available to Promise>.PROCEDURE<CalcScheduledReceipt>
    Code lines:
    ...
        "Trans. Ord. Receipt (Qty.)" +
        "Qty. in Transit" +
        "Qty. on Assembly Order" +
        "Qty. on Sales Return";
    
      OnAfterCalcScheduledReceipt(Item,ScheduledReceipt); <=====================
    
      EXIT(ScheduledReceipt);
    END;
Codeunit<Available to Promise>.PROCEDURE<OnAfterCalculateAvailability>
  Raised in: Codeunit<Available to Promise>.PROCEDURE<CalculateAvailability>
    Code lines:
    ...
    UpdateJobOrderAvail(AvailabilityAtDate,Item);
    UpdateTransOrderShptAvail(AvailabilityAtDate,Item);
    UpdateAsmOrderAvail(AvailabilityAtDate,Item);
    UpdateAsmCompAvail(AvailabilityAtDate,Item);
    
    OnAfterCalculateAvailability(AvailabilityAtDate,Item); <=====================
    
    Item.COPYFILTERS(Item2);
Codeunit<Available to Promise>.PROCEDURE<OnAfterQtyAvailableToPromise>
  Raised in: Codeunit<Available to Promise>.PROCEDURE<QtyAvailabletoPromise>
    Code lines:
    ...
    AvailableToPromise :=
      CalcAvailableInventory(Item) +
      (ScheduledReceipt - CalcReservedReceipt(Item)) -
      (GrossRequirement - CalcReservedRequirement(Item));
    
    OnAfterQtyAvailableToPromise(Item,ScheduledReceipt,GrossRequirement,AvailableToPromise); <=====================
    
    EXIT(AvailableToPromise);
Codeunit<Available to Promise>.PROCEDURE<OnBeforeCalcGrossRequirement>
  Raised in: Codeunit<Available to Promise>.PROCEDURE<CalcGrossRequirement>
    Code lines:
    CalcAllItemFields(Item);
    OnBeforeCalcGrossRequirement(Item); <=====================
    
    WITH Item DO BEGIN
      GrossRequirement :=
        "Scheduled Need (Qty.)" +
        "Planning Issues (Qty.)" +
        "Planning Transfer Ship. (Qty)." +
        "Qty. on Sales Order" +
        "Qty. on Service Order" +
    ...
Codeunit<Available to Promise>.PROCEDURE<OnBeforeCalcScheduledReceipt>
  Raised in: Codeunit<Available to Promise>.PROCEDURE<CalcScheduledReceipt>
    Code lines:
    CalcAllItemFields(Item);
    OnBeforeCalcScheduledReceipt(Item); <=====================
    
    WITH Item DO BEGIN
      ScheduledReceipt :=
        "Scheduled Receipt (Qty.)" +
        "Planned Order Receipt (Qty.)" +
        "Qty. on Purch. Order" +
        "Trans. Ord. Receipt (Qty.)" +
        "Qty. in Transit" +
    ...
Codeunit<Available to Promise>.PROCEDURE<OnBeforeQtyAvailableToPromise>
  Raised in: Codeunit<Available to Promise>.PROCEDURE<QtyAvailabletoPromise>
    Code lines:
    OnBeforeQtyAvailableToPromise(Item,AvailabilityDate); <=====================
    
    ScheduledReceipt := CalcScheduledReceipt(Item);
    GrossRequirement := CalcGrossRequirement(Item);
    
    IF AvailabilityDate <> 0D THEN
      GrossRequirement :=
        GrossRequirement +
        CalculateLookahead(
          Item,PeriodType,
    ...
Codeunit<Show Applied Entries>.PROCEDURE<OnBeforeInsertTempEntry>
  Raised in: Codeunit<Show Applied Entries>.PROCEDURE<InsertTempEntry>
    Code lines:
    ItemLedgEntry.GET(EntryNo);
    
    IsHandled := FALSE;
    OnBeforeInsertTempEntry(ItemLedgEntry,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF AppliedQty * ItemLedgEntry.Quantity < 0 THEN
      EXIT;
    
    ...
Codeunit<Show Applied Entries>.PROCEDURE<OnFindAppliedEntryOnAfterSetFilters>
  Raised in: Codeunit<Show Applied Entries>.PROCEDURE<FindAppliedEntry>
    Code lines:
    ...
        ItemApplnEntry.RESET;
        ItemApplnEntry.SETCURRENTKEY("Inbound Item Entry No.","Outbound Item Entry No.","Cost Application");
        ItemApplnEntry.SETRANGE("Inbound Item Entry No.","Entry No.");
        ItemApplnEntry.SETFILTER("Outbound Item Entry No.",'<>%1',0);
        ItemApplnEntry.SETRANGE("Cost Application",TRUE);
        OnFindAppliedEntryOnAfterSetFilters(ItemApplnEntry,ItemLedgEntry); <=====================
        IF ItemApplnEntry.FIND('-') THEN
          REPEAT
            InsertTempEntry(ItemApplnEntry."Outbound Item Entry No.",ItemApplnEntry.Quantity);
          UNTIL ItemApplnEntry.NEXT = 0;
    ...
  Raised in: Codeunit<Show Applied Entries>.PROCEDURE<FindAppliedEntry>
    Code lines:
    ...
        ItemApplnEntry.RESET;
        ItemApplnEntry.SETCURRENTKEY("Inbound Item Entry No.","Outbound Item Entry No.","Cost Application");
        ItemApplnEntry.SETRANGE("Inbound Item Entry No.","Entry No.");
        ItemApplnEntry.SETFILTER("Outbound Item Entry No.",'<>%1',0);
        ItemApplnEntry.SETRANGE("Cost Application",TRUE);
        OnFindAppliedEntryOnAfterSetFilters(ItemApplnEntry,ItemLedgEntry); <=====================
        IF ItemApplnEntry.FIND('-') THEN
          REPEAT
            InsertTempEntry(ItemApplnEntry."Outbound Item Entry No.",ItemApplnEntry.Quantity);
          UNTIL ItemApplnEntry.NEXT = 0;
    ...
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnAfterBufferPosting>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<BufferInvtPosting>
    Code lines:
    ...
          BufferCapPosting(ValueEntry,CostToPost,CostToPostACY);
        ELSE
          ErrorNonValidCombination(ValueEntry);
      END;
    
      OnAfterBufferPosting(ValueEntry,CostToPost,CostToPostACY,ExpCostToPost,ExpCostToPostACY); <=====================
    END;
    
    IF UpdateGlobalInvtPostBuf(ValueEntry."Entry No.") THEN
      EXIT(TRUE);
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnAfterBufferSalesPosting>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<BufferSalesPosting>
    Code lines:
    ...
            CostToPost,CostToPostACY,FALSE);
        ELSE
          ErrorNonValidCombination(ValueEntry);
      END;
    
    OnAfterBufferSalesPosting(TempInvtPostBuf,ValueEntry,PostBufDimNo); <=====================
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnAfterCalcCostToPostFromBuffer>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<BufferInvtPosting>
    Code lines:
    ...
        CalcCostToPost(ExpCostToPost,"Cost Amount (Expected)","Expected Cost Posted to G/L",PostToGL);
        CalcCostToPost(ExpCostToPostACY,"Cost Amount (Expected) (ACY)","Exp. Cost Posted to G/L (ACY)",PostToGL);
      END;
      CalcCostToPost(CostToPost,"Cost Amount (Actual)","Cost Posted to G/L",PostToGL);
      CalcCostToPost(CostToPostACY,"Cost Amount (Actual) (ACY)","Cost Posted to G/L (ACY)",PostToGL);
      OnAfterCalcCostToPostFromBuffer(ValueEntry,CostToPost,CostToPostACY,ExpCostToPost,ExpCostToPostACY); <=====================
      PostBufDimNo := 0;
    
      RunOnlyCheckSaved := RunOnlyCheck;
      IF NOT PostToGL THEN
    ...
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnAfterInitInvtPostBuf>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<InitInvtPostBuf>
    Code lines:
    ...
    SetAccNo(TempInvtPostBuf[PostBufDimNo],ValueEntry,BalAccType,AccType);
    SetPostBufAmounts(TempInvtPostBuf[PostBufDimNo],-CostToPost,-CostToPostACY,InterimAccount);
    TempInvtPostBuf[PostBufDimNo]."Dimension Set ID" := ValueEntry."Dimension Set ID";
    OnAfterInitTempInvtPostBuf(TempInvtPostBuf,ValueEntry);
    
    OnAfterInitInvtPostBuf(ValueEntry); <=====================
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnAfterInitTempInvtPostBuf>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<InitInvtPostBuf>
    Code lines:
    ...
    
    PostBufDimNo := PostBufDimNo + 1;
    SetAccNo(TempInvtPostBuf[PostBufDimNo],ValueEntry,AccType,BalAccType);
    SetPostBufAmounts(TempInvtPostBuf[PostBufDimNo],CostToPost,CostToPostACY,InterimAccount);
    TempInvtPostBuf[PostBufDimNo]."Dimension Set ID" := ValueEntry."Dimension Set ID";
    OnAfterInitTempInvtPostBuf(TempInvtPostBuf,ValueEntry); <=====================
    
    PostBufDimNo := PostBufDimNo + 1;
    SetAccNo(TempInvtPostBuf[PostBufDimNo],ValueEntry,BalAccType,AccType);
    SetPostBufAmounts(TempInvtPostBuf[PostBufDimNo],-CostToPost,-CostToPostACY,InterimAccount);
    ...
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<InitInvtPostBuf>
    Code lines:
    ...
    
    PostBufDimNo := PostBufDimNo + 1;
    SetAccNo(TempInvtPostBuf[PostBufDimNo],ValueEntry,AccType,BalAccType);
    SetPostBufAmounts(TempInvtPostBuf[PostBufDimNo],CostToPost,CostToPostACY,InterimAccount);
    TempInvtPostBuf[PostBufDimNo]."Dimension Set ID" := ValueEntry."Dimension Set ID";
    OnAfterInitTempInvtPostBuf(TempInvtPostBuf,ValueEntry); <=====================
    
    PostBufDimNo := PostBufDimNo + 1;
    SetAccNo(TempInvtPostBuf[PostBufDimNo],ValueEntry,BalAccType,AccType);
    SetPostBufAmounts(TempInvtPostBuf[PostBufDimNo],-CostToPost,-CostToPostACY,InterimAccount);
    ...
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnAfterSetAccNo>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<SetAccNo>
    Code lines:
    ...
              "Account No." := GenPostingSetup."Invt. Accrual Acc. (Interim)";
        END;
    
      CheckAccNo("Account No.");
    
      OnAfterSetAccNo(InvtPostBuf,ValueEntry,CalledFromItemPosting); <=====================
    END;
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnAfterSetAmt>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<SetAmt>
    Code lines:
    ...
        END;
      END;
    END;
    
    HasAmountToPost := (Amt <> 0) OR (AmtACY <> 0);
    OnAfterSetAmt(GenJnlLine,Amt,AmtACY,HasAmountToPost); <=====================
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforeBufferAdjmtPosting>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<BufferAdjmtPosting>
    Code lines:
    OnBeforeBufferAdjmtPosting(ValueEntry,GlobalInvtPostBuf,CostToPost,CostToPostACY,ExpCostToPost,ExpCostToPostACY,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH ValueEntry DO
      CASE "Entry Type" OF
        "Entry Type"::"Direct Cost":
          BEGIN
            // Posting adjustments to Interim accounts (Service)
            IF (ExpCostToPost <> 0) OR (ExpCostToPostACY <> 0) THEN
    ...
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforeBufferInvtPosting>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<BufferInvtPosting>
    Code lines:
    IsHandled := FALSE;
    OnBeforeBufferInvtPosting(ValueEntry,Result,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH ValueEntry DO BEGIN
      GetGLSetup;
      GetInvtSetup;
      IF (NOT InvtSetup."Expected Cost Posting to G/L") AND
         ("Expected Cost Posted to G/L" = 0) AND
    ...
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforeBufferOutputPosting>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<BufferOutputPosting>
    Code lines:
    OnBeforeBufferOutputPosting(ValueEntry,GlobalInvtPostBuf,CostToPost,CostToPostACY,ExpCostToPost,ExpCostToPostACY,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH ValueEntry DO
      CASE "Entry Type" OF
        "Entry Type"::"Direct Cost":
          BEGIN
            IF (ExpCostToPost <> 0) OR (ExpCostToPostACY <> 0) THEN
              InitInvtPostBuf(
    ...
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforeBufferPosting>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<BufferInvtPosting>
    Code lines:
    ...
    
      RunOnlyCheckSaved := RunOnlyCheck;
      IF NOT PostToGL THEN
        EXIT(FALSE);
    
      OnBeforeBufferPosting(ValueEntry,CostToPost,CostToPostACY,ExpCostToPost,ExpCostToPostACY); <=====================
    
      CASE "Item Ledger Entry Type" OF
        "Item Ledger Entry Type"::Purchase:
          BufferPurchPosting(ValueEntry,CostToPost,CostToPostACY,ExpCostToPost,ExpCostToPostACY);
    ...
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforeBufferPurchPosting>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<BufferPurchPosting>
    Code lines:
    OnBeforeBufferPurchPosting(ValueEntry,GlobalInvtPostBuf,CostToPost,CostToPostACY,ExpCostToPost,ExpCostToPostACY,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH ValueEntry DO
      CASE "Entry Type" OF
        "Entry Type"::"Direct Cost":
          BEGIN
            IF (ExpCostToPost <> 0) OR (ExpCostToPostACY <> 0) THEN
              InitInvtPostBuf(
    ...
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforeBufferSalesPosting>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<BufferSalesPosting>
    Code lines:
    OnBeforeBufferSalesPosting(ValueEntry,GlobalInvtPostBuf,CostToPost,CostToPostACY,ExpCostToPost,ExpCostToPostACY,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH ValueEntry DO
      CASE "Entry Type" OF
        "Entry Type"::"Direct Cost":
          BEGIN
            IF (ExpCostToPost <> 0) OR (ExpCostToPostACY <> 0) THEN
              InitInvtPostBuf(
    ...
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforeCheckGLAcc>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<CheckAccNo>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckGLAcc(AccountNo,CalledFromItemPosting,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF AccountNo = '' THEN
      EXIT;
    
    GLAccount.GET(AccountNo);
    IF GLAccount.Blocked THEN BEGIN
    ...
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforeCheckInvtPostBuf>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<PostInvtPostBuf>
    Code lines:
    ...
              IF NOT CalledFromItemPosting THEN
                GenJnlPostLine.SetOverDimErr;
              OnBeforePostInvtPostBuf(GenJnlLine,GlobalInvtPostBuf,ValueEntry,GenJnlPostLine);
              GenJnlPostLine.RunWithCheck(GenJnlLine)
            END ELSE BEGIN
              OnBeforeCheckInvtPostBuf(GenJnlLine,GlobalInvtPostBuf,ValueEntry,GenJnlPostLine); <=====================
              GenJnlCheckLine.RunCheck(GenJnlLine)
            END
          ELSE
            InsertTempInvtPostToGLTestBuf(GenJnlLine,ValueEntry);
    ...
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforeGetInvtPostSetup>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<SetAccNo>
    Code lines:
    ...
        GetInvPostingGroupCode(ValueEntry,AccType = "Account Type"::"WIP Inventory",ValueEntry."Inventory Posting Group");
      "Gen. Bus. Posting Group" := ValueEntry."Gen. Bus. Posting Group";
      "Gen. Prod. Posting Group" := ValueEntry."Gen. Prod. Posting Group";
      "Posting Date" := ValueEntry."Posting Date";
    
      OnBeforeGetInvtPostSetup(InvtPostSetup,"Location Code","Inventory Posting Group"); <=====================
    
      IF UseInvtPostSetup THEN BEGIN
        IF CalledFromItemPosting THEN
          InvtPostSetup.GET("Location Code","Inventory Posting Group")
    ...
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforeGLItemLedgRelationInsert>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<CreateGLItemLedgRelationEntry>
    Code lines:
    GLItemLedgRelation.INIT;
    GLItemLedgRelation."G/L Entry No." := GLReg."To Entry No.";
    GLItemLedgRelation."Value Entry No." := TempGLItemLedgRelation."Value Entry No.";
    GLItemLedgRelation."G/L Register No." := GLReg."No.";
    OnBeforeGLItemLedgRelationInsert(GLItemLedgRelation,GlobalInvtPostBuf); <=====================
    GLItemLedgRelation.INSERT;
    TempGLItemLedgRelation."G/L Entry No." := GlobalInvtPostBuf."Entry No.";
    TempGLItemLedgRelation.DELETE;
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforeInitInvtPostBuf>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<InitInvtPostBuf>
    Code lines:
    OnBeforeInitInvtPostBuf(ValueEntry); <=====================
    
    PostBufDimNo := PostBufDimNo + 1;
    SetAccNo(TempInvtPostBuf[PostBufDimNo],ValueEntry,AccType,BalAccType);
    SetPostBufAmounts(TempInvtPostBuf[PostBufDimNo],CostToPost,CostToPostACY,InterimAccount);
    TempInvtPostBuf[PostBufDimNo]."Dimension Set ID" := ValueEntry."Dimension Set ID";
    OnAfterInitTempInvtPostBuf(TempInvtPostBuf,ValueEntry);
    
    PostBufDimNo := PostBufDimNo + 1;
    SetAccNo(TempInvtPostBuf[PostBufDimNo],ValueEntry,BalAccType,AccType);
    ...
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforeOnRun>
  Raised in: Codeunit<Inventory Posting To G/L>.<OnRun>
    Code lines:
    IsHandled := FALSE;
    OnBeforeOnRun(Rec,GlobalPostPerPostGroup,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF GlobalPostPerPostGroup THEN
      PostInvtPostBuf(Rec,"Document No.",'','',TRUE)
    ELSE
      PostInvtPostBuf(
        Rec,
    ...
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforePostInvtPostBuf>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<PostInvtPostBuf>
    Code lines:
    ...
            GenJnlLine."Shortcut Dimension 2 Code");
          IF NOT CalledFromTestReport THEN
            IF NOT RunOnlyCheck THEN BEGIN
              IF NOT CalledFromItemPosting THEN
                GenJnlPostLine.SetOverDimErr;
              OnBeforePostInvtPostBuf(GenJnlLine,GlobalInvtPostBuf,ValueEntry,GenJnlPostLine); <=====================
              GenJnlPostLine.RunWithCheck(GenJnlLine)
            END ELSE BEGIN
              OnBeforeCheckInvtPostBuf(GenJnlLine,GlobalInvtPostBuf,ValueEntry,GenJnlPostLine);
              GenJnlCheckLine.RunCheck(GenJnlLine)
    ...
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnBeforeSetAccNo>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<SetAccNo>
    Code lines:
    ...
          IF NOT GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group") THEN
            EXIT;
      END;
    
      IsHandled := FALSE;
      OnBeforeSetAccNo(InvtPostBuf,ValueEntry,AccType,BalAccType,CalledFromItemPosting,IsHandled); <=====================
      IF NOT IsHandled THEN
        CASE "Account Type" OF
          "Account Type"::Inventory:
            IF CalledFromItemPosting THEN
    ...
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnPostInvtPostBufferOnBeforeFind>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<PostInvtPostBuf>
    Code lines:
    WITH GlobalInvtPostBuf DO BEGIN
      RESET;
      OnPostInvtPostBufferOnBeforeFind(GlobalInvtPostBuf); <=====================
      IF NOT FINDSET THEN
        EXIT;
    
      GenJnlLine.INIT;
      GenJnlLine."Document No." := DocNo;
      GenJnlLine."External Document No." := ExternalDocNo;
      GenJnlLine.Description := Desc;
    ...
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnPostInvtPostBufOnAfterInitGenJnlLine>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<PostInvtPostBuf>
    Code lines:
    ...
      GetSourceCodeSetup;
      GenJnlLine."Source Code" := SourceCodeSetup."Inventory Post Cost";
      GenJnlLine."System-Created Entry" := TRUE;
      GenJnlLine."Job No." := ValueEntry."Job No.";
      GenJnlLine."Reason Code" := ValueEntry."Reason Code";
      OnPostInvtPostBufOnAfterInitGenJnlLine(GenJnlLine,ValueEntry); <=====================
      REPEAT
        GenJnlLine.VALIDATE("Posting Date","Posting Date");
        IF SetAmt(GenJnlLine,Amount,"Amount (ACY)") THEN BEGIN
          IF PostPerPostGrp THEN
    ...
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnUpdateGlobalInvtPostBufOnBeforeModify>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<UpdateGlobalInvtPostBuf>
    Code lines:
    ...
    
        UpdateReportAmounts;
        IF FIND THEN BEGIN
          Amount := Amount + TempInvtPostBuf[i].Amount;
          "Amount (ACY)" := "Amount (ACY)" + TempInvtPostBuf[i]."Amount (ACY)";
          OnUpdateGlobalInvtPostBufOnBeforeModify(GlobalInvtPostBuf,TempInvtPostBuf[i]); <=====================
          MODIFY;
        END ELSE BEGIN
          GlobalInvtPostBufEntryNo := GlobalInvtPostBufEntryNo + 1;
          "Entry No." := GlobalInvtPostBufEntryNo;
    ...
Codeunit<Inventory Posting To G/L>.PROCEDURE<OnUpdateValueEntryOnBeforeModify>
  Raised in: Codeunit<Inventory Posting To G/L>.PROCEDURE<UpdateValueEntry>
    Code lines:
    ...
        "Exp. Cost Posted to G/L (ACY)" := "Cost Amount (Expected) (ACY)";
      END ELSE BEGIN
        "Cost Posted to G/L" := "Cost Amount (Actual)";
        "Cost Posted to G/L (ACY)" := "Cost Amount (Actual) (ACY)";
      END;
      OnUpdateValueEntryOnBeforeModify(ValueEntry,GlobalInvtPostBuf); <=====================
      IF NOT CalledFromItemPosting THEN
        MODIFY;
    END;
Codeunit<Show Avg. Calc. - Item>.PROCEDURE<OnBeforeDrillDownAvgCostAdjmtPoint>
  Raised in: Codeunit<Show Avg. Calc. - Item>.PROCEDURE<DrillDownAvgCostAdjmtPoint>
    Code lines:
    OnBeforeDrillDownAvgCostAdjmtPoint(Item); <=====================
    
    AvgCostCalcOverview.SetItem(Item);
    AvgCostCalcOverview.RUNMODAL;
Codeunit<ItemCostManagement>.PROCEDURE<OnBeforeCalcLastAdjEntryAvgCost>
  Raised in: Codeunit<ItemCostManagement>.PROCEDURE<CalcLastAdjEntryAvgCost>
    Code lines:
    OnBeforeCalcLastAdjEntryAvgCost(Item,AverageCost,AverageCostACY,AvgCostCalculated); <=====================
    IF AvgCostCalculated THEN
      EXIT;
    
    AverageCost := 0;
    AverageCostACY := 0;
    
    IF CalculateQuantity(Item) <> 0 THEN
      EXIT;
    IF NOT HasOpenEntries(Item) THEN
    ...
Codeunit<ItemCostManagement>.PROCEDURE<OnBeforeCalculateAverageCost>
  Raised in: Codeunit<ItemCostManagement>.PROCEDURE<CalculateAverageCost>
    Code lines:
    OnBeforeCalculateAverageCost(Item,AverageCost,AverageCostACY,AvgCostCalculated); <=====================
    IF AvgCostCalculated THEN
      EXIT;
    
    AverageCost := 0;
    AverageCostACY := 0;
    
    IF CalledFromAdjustment THEN
      ExcludeOpenOutbndCosts(Item,AverageCost,AverageCostACY,AverageQty);
    AverageQty := AverageQty + CalculateQuantity(Item);
    ...
Codeunit<ItemCostManagement>.PROCEDURE<OnBeforeUpdateUnitCost>
  Raised in: Codeunit<ItemCostManagement>.PROCEDURE<UpdateUnitCost>
    Code lines:
    OnBeforeUpdateUnitCost( <=====================
      Item,LocationCode,VariantCode,LastDirectCost,NewStdCost,UpdateSKU,FilterSKU,RecalcStdCost,CalledByFieldNo,UnitCostUpdated);
    IF UnitCostUpdated THEN
      EXIT;
    
    WITH Item DO BEGIN
      IF NewStdCost <> 0 THEN
        "Standard Cost" := NewStdCost;
    
      IF "Costing Method" = "Costing Method"::Standard THEN
    ...
Codeunit<ItemCostManagement>.PROCEDURE<OnBeforeUpdateUnitCostSKU>
  Raised in: Codeunit<ItemCostManagement>.PROCEDURE<UpdateUnitCostSKU>
    Code lines:
    OnBeforeUpdateUnitCostSKU(Item,SKU,LastDirectCost,NewStdCost,MatchSKU,CalledByFieldNo,UnitCostUpdated); <=====================
    IF UnitCostUpdated THEN
      EXIT;
    
    WITH SKU DO BEGIN
      IF NewStdCost <> 0 THEN
        "Standard Cost" := NewStdCost;
      IF Item."Costing Method" <> Item."Costing Method"::Standard THEN BEGIN
        GetInvtSetup;
        IF InvtSetup."Average Cost Calc. Type" <> InvtSetup."Average Cost Calc. Type"::Item THEN BEGIN
    ...
Codeunit<ItemCostManagement>.PROCEDURE<OnUpdateStdCostSharesOnAfterCopyCosts>
  Raised in: Codeunit<ItemCostManagement>.PROCEDURE<UpdateStdCostShares>
    Code lines:
    ...
      Item."Rolled-up Capacity Cost" := "Rolled-up Capacity Cost";
      Item."Rolled-up Subcontracted Cost" := "Rolled-up Subcontracted Cost";
      Item."Rolled-up Mfg. Ovhd Cost" := "Rolled-up Mfg. Ovhd Cost";
      Item."Rolled-up Cap. Overhead Cost" := "Rolled-up Cap. Overhead Cost";
      Item."Last Unit Cost Calc. Date" := "Last Unit Cost Calc. Date";
      OnUpdateStdCostSharesOnAfterCopyCosts(Item,FromItem); <=====================
      Item.MODIFY;
    END;
Codeunit<ItemCostManagement>.PROCEDURE<OnUpdateUnitCostOnBeforeNetInvoiceQtyCheck>
  Raised in: Codeunit<ItemCostManagement>.PROCEDURE<UpdateUnitCost>
    Code lines:
    ...
          END;
        END ELSE
          IF ("Unit Cost" = 0) OR ((InvoicedQty > 0) AND (LastDirectCost <> 0)) THEN BEGIN
            CALCFIELDS("Net Invoiced Qty.");
            IsHandled := FALSE;
            OnUpdateUnitCostOnBeforeNetInvoiceQtyCheck(Item,IsHandled); <=====================
            IF ("Net Invoiced Qty." > 0) AND ("Net Invoiced Qty." <= InvoicedQty) AND NOT IsHandled THEN
              "Unit Cost" := LastDirectCost;
          END;
    
    ...
Codeunit<ItemCostManagement>.PROCEDURE<OnUpdateUnitCostOnBeforeUpdateSKU>
  Raised in: Codeunit<ItemCostManagement>.PROCEDURE<UpdateUnitCost>
    Code lines:
    ...
        IF CalledByFieldNo <> 0 THEN
          MODIFY(TRUE)
        ELSE
          MODIFY;
    
      OnUpdateUnitCostOnBeforeUpdateSKU(Item,UpdateSKU); <=====================
      IF UpdateSKU THEN
        FindUpdateUnitCostSKU(Item,LocationCode,VariantCode,FilterSKU,LastDirectCost);
    END;
Codeunit<ItemCostManagement>.PROCEDURE<OnUpdateUnitCostOnBeforeValidatePriceProfitCalculation>
  Raised in: Codeunit<ItemCostManagement>.PROCEDURE<UpdateUnitCost>
    Code lines:
    ...
    
      IF LastDirectCost <> 0 THEN
        "Last Direct Cost" := LastDirectCost;
    
      IsHandled := FALSE;
      OnUpdateUnitCostOnBeforeValidatePriceProfitCalculation(Item,IsHandled); <=====================
      IF NOT IsHandled THEN
        VALIDATE("Price/Profit Calculation");
    
      IF CheckItem.GET("No.") THEN
    ...
Codeunit<ItemCostManagement>.PROCEDURE<OnUpdateUnitCostSKUOnBeforeMatchSKU>
  Raised in: Codeunit<ItemCostManagement>.PROCEDURE<UpdateUnitCostSKU>
    Code lines:
    ...
        END ELSE
          "Unit Cost" := Item."Unit Cost";
      END ELSE
        "Unit Cost" := "Standard Cost";
    
      OnUpdateUnitCostSKUOnBeforeMatchSKU(SKU,Item); <=====================
      IF MatchSKU AND (LastDirectCost <> 0) THEN
        "Last Direct Cost" := LastDirectCost;
    
      IF CalledByFieldNo <> 0 THEN
    ...
Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnAfterCreateDocChargeAssgnt>
  Raised in: Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<CreateDocChargeAssgnt>
    Code lines:
    ...
          END;
        UNTIL FromPurchLine.NEXT = 0;
      END;
    END;
    
    OnAfterCreateDocChargeAssgnt(LastItemChargeAssgntPurch,ReceiptNo); <=====================
Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnAssignByAmountOnBeforeItemChargeAssignmentPurchModify>
  Raised in: Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<AssignByAmount>
    Code lines:
    ...
              ItemChargeAssgntPurch."Qty. to Assign" / TotalQtyToAssign * TotalAmtToAssign,
              Currency."Amount Rounding Precision");
          TotalQtyToAssign -= ItemChargeAssgntPurch."Qty. to Assign";
          TotalAmtToAssign -= ItemChargeAssgntPurch."Amount to Assign";
          TotalAppliesToDocLineAmount -= TempItemChargeAssgntPurch."Applies-to Doc. Line Amount";
          OnAssignByAmountOnBeforeItemChargeAssignmentPurchModify(ItemChargeAssgntPurch); <=====================
          ItemChargeAssgntPurch.MODIFY;
        END;
      UNTIL TempItemChargeAssgntPurch.NEXT = 0;
    TempItemChargeAssgntPurch.DELETEALL;
Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnAssignEquallyOnBeforeItemChargeAssignmentPurchModify>
  Raised in: Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<AssignEqually>
    Code lines:
    ...
            ItemChargeAssgntPurch."Qty. to Assign" / TotalQtyToAssign * TotalAmtToAssign,
            Currency."Amount Rounding Precision");
        TotalQtyToAssign -= ItemChargeAssgntPurch."Qty. to Assign";
        TotalAmtToAssign -= ItemChargeAssgntPurch."Amount to Assign";
        RemainingNumOfLines := RemainingNumOfLines - 1;
        OnAssignEquallyOnBeforeItemChargeAssignmentPurchModify(ItemChargeAssgntPurch); <=====================
        ItemChargeAssgntPurch.MODIFY;
      UNTIL TempItemChargeAssgntPurch.NEXT = 0;
    END;
    TempItemChargeAssgntPurch.DELETEALL;
Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnAssignItemCharges>
  Raised in: Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<AssignItemCharges>
    Code lines:
    ...
        AssignByWeightMenuText:
          AssignByWeight(ItemChargeAssgntPurch,Currency,TotalQtyToAssign);
        AssignByVolumeMenuText:
          AssignByVolume(ItemChargeAssgntPurch,Currency,TotalQtyToAssign);
        ELSE BEGIN
          OnAssignItemCharges( <=====================
            SelectionTxt,ItemChargeAssgntPurch,Currency,PurchHeader,TotalQtyToAssign,TotalAmtToAssign,ItemChargesAssigned);
          IF NOT ItemChargesAssigned THEN
            ERROR(ItemChargesNotAssignedErr);
        END;
Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnBeforeAssignItemCharges>
  Raised in: Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<AssignItemCharges>
    Code lines:
    IsHandled := FALSE;
    OnBeforeAssignItemCharges(PurchLine,TotalQtyToAssign,TotalAmtToAssign,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    PurchLine.TESTFIELD("Qty. to Invoice");
    PurchHeader.GET(PurchLine."Document Type",PurchLine."Document No.");
    
    IF NOT Currency.GET(PurchHeader."Currency Code") THEN
      Currency.InitRoundingPrecision;
    ...
Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnBeforeCreateDocChargeAssgn>
  Raised in: Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<CreateDocChargeAssgnt>
    Code lines:
    OnBeforeCreateDocChargeAssgn(LastItemChargeAssgntPurch,FromPurchLine); <=====================
    
    WITH LastItemChargeAssgntPurch DO BEGIN
      FromPurchLine.SETRANGE("Document Type","Document Type");
      FromPurchLine.SETRANGE("Document No.","Document No.");
      FromPurchLine.SETRANGE(Type,FromPurchLine.Type::Item);
      IF FromPurchLine.FIND('-') THEN BEGIN
        NextLineNo := "Line No.";
        ItemChargeAssgntPurch.RESET;
        ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
    ...
Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnBeforeCreateReturnRcptChargeAssgnt>
  Raised in: Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<CreateReturnRcptChargeAssgnt>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCreateReturnRcptChargeAssgnt(FromReturnRcptLine,ItemChargeAssgntPurch,IsHandled); <=====================
    IF NOT IsHandled THEN
      FromReturnRcptLine.TESTFIELD("Job No.",'');
    NextLine := ItemChargeAssgntPurch."Line No.";
    ItemChargeAssgntPurch2.SETRANGE("Document Type",ItemChargeAssgntPurch."Document Type");
    ItemChargeAssgntPurch2.SETRANGE("Document No.",ItemChargeAssgntPurch."Document No.");
    ItemChargeAssgntPurch2.SETRANGE("Document Line No.",ItemChargeAssgntPurch."Document Line No.");
    ItemChargeAssgntPurch2.SETRANGE(
      "Applies-to Doc. Type",ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Return Receipt");
    ...
Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnBeforeCreateSalesShptChargeAssgnt>
  Raised in: Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<CreateSalesShptChargeAssgnt>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCreateSalesShptChargeAssgnt(FromSalesShptLine,ItemChargeAssgntPurch,IsHandled); <=====================
    IF NOT IsHandled THEN
      FromSalesShptLine.TESTFIELD("Job No.",'');
    NextLine := ItemChargeAssgntPurch."Line No.";
    ItemChargeAssgntPurch2.SETRANGE("Document Type",ItemChargeAssgntPurch."Document Type");
    ItemChargeAssgntPurch2.SETRANGE("Document No.",ItemChargeAssgntPurch."Document No.");
    ItemChargeAssgntPurch2.SETRANGE("Document Line No.",ItemChargeAssgntPurch."Document Line No.");
    ItemChargeAssgntPurch2.SETRANGE(
      "Applies-to Doc. Type",ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Sales Shipment");
    ...
Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnBeforeCreateShptChargeAssgnt>
  Raised in: Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<CreateShptChargeAssgnt>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCreateShptChargeAssgnt(FromReturnShptLine,ItemChargeAssgntPurch,IsHandled); <=====================
    IF NOT IsHandled THEN
      FromReturnShptLine.TESTFIELD("Job No.",'');
    NextLine := ItemChargeAssgntPurch."Line No.";
    ItemChargeAssgntPurch2.SETRANGE("Document Type",ItemChargeAssgntPurch."Document Type");
    ItemChargeAssgntPurch2.SETRANGE("Document No.",ItemChargeAssgntPurch."Document No.");
    ItemChargeAssgntPurch2.SETRANGE("Document Line No.",ItemChargeAssgntPurch."Document Line No.");
    ItemChargeAssgntPurch2.SETRANGE(
      "Applies-to Doc. Type",ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Return Shipment");
    ...
Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnBeforeInsertItemChargeAssgntWithAssignValues>
  Raised in: Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<InsertItemChargeAssgntWithAssignValuesTo>
    Code lines:
    ...
    ItemChargeAssgntPurch."Unit Cost" := FromItemChargeAssgntPurch."Unit Cost";
    IF QtyToAssign <> 0 THEN BEGIN
      ItemChargeAssgntPurch."Amount to Assign" := AmountToAssign;
      ItemChargeAssgntPurch.VALIDATE("Qty. to Assign",QtyToAssign);
    END;
    OnBeforeInsertItemChargeAssgntWithAssignValues(ItemChargeAssgntPurch,FromItemChargeAssgntPurch); <=====================
    ItemChargeAssgntPurch.INSERT;
Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<OnBeforeShowSuggestItemChargeAssignStrMenu>
  Raised in: Codeunit<Item Charge Assgnt. (Purch.)>.PROCEDURE<SuggestAssgnt>
    Code lines:
    ...
    SuggestItemChargeMenuTxt :=
      STRSUBSTNO('%1,%2,%3,%4',AssignEquallyMenuText,AssignByAmountMenuText,AssignByWeightMenuText,AssignByVolumeMenuText);
    IF ItemChargeAssgntPurch.COUNT > 1 THEN BEGIN
      Selection := 2;
      SuggestItemChargeMessageTxt := SuggestItemChargeMsg;
      OnBeforeShowSuggestItemChargeAssignStrMenu(PurchLine,SuggestItemChargeMenuTxt,SuggestItemChargeMessageTxt,Selection); <=====================
      IF SuggestItemChargeMenuTxt = '' THEN
        EXIT;
      IF STRLEN(DELCHR(SuggestItemChargeMenuTxt,'=',DELCHR(SuggestItemChargeMenuTxt,'=',','))) > 1 THEN
        Selection := STRMENU(SuggestItemChargeMenuTxt,Selection,SuggestItemChargeMessageTxt)
    ...
Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<OnAfterCreateDocChargeAssgnt>
  Raised in: Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<CreateDocChargeAssgn>
    Code lines:
    ...
          END;
        UNTIL FromSalesLine.NEXT = 0;
      END;
    END;
    
    OnAfterCreateDocChargeAssgnt(LastItemChargeAssgntSales,ShipmentNo); <=====================
Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<OnAssignByAmountOnBeforeItemChargeAssignmentSalesModify>
  Raised in: Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<AssignByAmount>
    Code lines:
    ...
              ItemChargeAssignmentSales."Qty. to Assign" / TotalQtyToAssign * TotalAmtToAssign,
              Currency."Amount Rounding Precision");
          TotalQtyToAssign -= ItemChargeAssignmentSales."Qty. to Assign";
          TotalAmtToAssign -= ItemChargeAssignmentSales."Amount to Assign";
          TotalAppliesToDocLineAmount -= TempItemChargeAssgntSales."Applies-to Doc. Line Amount";
          OnAssignByAmountOnBeforeItemChargeAssignmentSalesModify(ItemChargeAssignmentSales); <=====================
          ItemChargeAssignmentSales.MODIFY;
        END;
      UNTIL TempItemChargeAssgntSales.NEXT = 0;
    
Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<OnAssignEquallyOnBeforeItemChargeAssignmentSalesModify>
  Raised in: Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<AssignEqually>
    Code lines:
    ...
            ItemChargeAssignmentSales."Qty. to Assign" / TotalQtyToAssign * TotalAmtToAssign,
            Currency."Amount Rounding Precision");
        TotalQtyToAssign -= ItemChargeAssignmentSales."Qty. to Assign";
        TotalAmtToAssign -= ItemChargeAssignmentSales."Amount to Assign";
        RemainingNumOfLines := RemainingNumOfLines - 1;
        OnAssignEquallyOnBeforeItemChargeAssignmentSalesModify(ItemChargeAssignmentSales); <=====================
        ItemChargeAssignmentSales.MODIFY;
      UNTIL TempItemChargeAssgntSales.NEXT = 0;
    END;
    TempItemChargeAssgntSales.DELETEALL;
Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<OnAssignItemCharges>
  Raised in: Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<AssignItemCharges>
    Code lines:
    ...
        AssignByWeightMenuText:
          AssignByWeight(ItemChargeAssgntSales,Currency,TotalQtyToAssign);
        AssignByVolumeMenuText:
          AssignByVolume(ItemChargeAssgntSales,Currency,TotalQtyToAssign);
        ELSE BEGIN
          OnAssignItemCharges( <=====================
            SelectionTxt,ItemChargeAssgntSales,Currency,SalesHeader,TotalQtyToAssign,TotalAmtToAssign,ItemChargesAssigned);
          IF NOT ItemChargesAssigned THEN
            ERROR(ItemChargesNotAssignedErr);
        END;
Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<OnBeforeAssignItemCharges>
  Raised in: Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<AssignItemCharges>
    Code lines:
    IsHandled := FALSE;
    OnBeforeAssignItemCharges(SalesLine,TotalQtyToAssign,TotalAmtToAssign,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
    IF NOT Currency.GET(SalesHeader."Currency Code") THEN
      Currency.InitRoundingPrecision;
    
    ItemChargeAssgntSales.SETRANGE("Document Type",SalesLine."Document Type");
    ...
Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<OnBeforeCreateDocChargeAssgn>
  Raised in: Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<CreateDocChargeAssgn>
    Code lines:
    OnBeforeCreateDocChargeAssgn(LastItemChargeAssgntSales,FromSalesLine); <=====================
    
    WITH LastItemChargeAssgntSales DO BEGIN
      FromSalesLine.SETRANGE("Document Type","Document Type");
      FromSalesLine.SETRANGE("Document No.","Document No.");
      FromSalesLine.SETRANGE(Type,FromSalesLine.Type::Item);
      IF FromSalesLine.FIND('-') THEN BEGIN
        NextLineNo := "Line No.";
        ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
        ItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
    ...
Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<OnBeforeInsertItemChargeAssgntWithAssignValues>
  Raised in: Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<InsertItemChargeAssgntWithAssignValuesTo>
    Code lines:
    ...
    ItemChargeAssgntSales."Unit Cost" := FromItemChargeAssgntSales."Unit Cost";
    IF QtyToAssign <> 0 THEN BEGIN
      ItemChargeAssgntSales."Amount to Assign" := AmountToAssign;
      ItemChargeAssgntSales.VALIDATE("Qty. to Assign",QtyToAssign);
    END;
    OnBeforeInsertItemChargeAssgntWithAssignValues(ItemChargeAssgntSales,FromItemChargeAssgntSales); <=====================
    ItemChargeAssgntSales.INSERT;
Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<OnBeforeShowSuggestItemChargeAssignStrMenu>
  Raised in: Codeunit<Item Charge Assgnt. (Sales)>.PROCEDURE<SuggestAssignment>
    Code lines:
    ...
    SuggestItemChargeMenuTxt :=
      STRSUBSTNO('%1,%2,%3,%4',AssignEquallyMenuText,AssignByAmountMenuText,AssignByWeightMenuText,AssignByVolumeMenuText);
    IF ItemChargeAssgntSales.COUNT > 1 THEN BEGIN
      Selection := 2;
      SuggestItemChargeMessageTxt := SuggestItemChargeMsg;
      OnBeforeShowSuggestItemChargeAssignStrMenu(SalesLine,SuggestItemChargeMenuTxt,SuggestItemChargeMessageTxt,Selection); <=====================
      IF SuggestItemChargeMenuTxt = '' THEN
        EXIT;
      IF STRLEN(DELCHR(SuggestItemChargeMenuTxt,'=',DELCHR(SuggestItemChargeMenuTxt,'=',','))) > 1 THEN
        Selection := STRMENU(SuggestItemChargeMenuTxt,Selection,SuggestItemChargeMessageTxt)
    ...
Codeunit<Change Exp. Cost Post. to G/L>.PROCEDURE<OnBeforePostValueEntryToGLInsert>
  Raised in: Codeunit<Change Exp. Cost Post. to G/L>.PROCEDURE<UpdatePostValueEntryToGL>
    Code lines:
    ...
              ("Cost Amount (Expected) (ACY)" <> "Exp. Cost Posted to G/L (ACY)"))
          THEN BEGIN
            PostValueEntryToGL."Value Entry No." := "Entry No.";
            PostValueEntryToGL."Item No." := "Item No.";
            PostValueEntryToGL."Posting Date" := "Posting Date";
            OnBeforePostValueEntryToGLInsert(PostValueEntryToGL,ValueEntry); <=====================
            PostValueEntryToGL.INSERT;
          END;
        UNTIL NEXT = 0;
    END;
Codeunit<Calculate Standard Cost>.PROCEDURE<OnAfterCalcRtngLineCost>
  Raised in: Codeunit<Calculate Standard Cost>.PROCEDURE<CalcRtngLineCost>
    Code lines:
    ...
      ELSE
        IncrCost(SLCap,DirUnitCost,CostTime);
      IncrCost(SLCapOvhd,CostCalcMgt.CalcOvhdCost(DirUnitCost,IndirCostPct,OvhdRate,1),CostTime);
    END;
    
    OnAfterCalcRtngLineCost(RoutingLine,MfgItemQtyBase,SLCap,SLSub,SLCapOvhd); <=====================
Codeunit<Calculate Standard Cost>.PROCEDURE<OnBeforeCalcItem>
  Raised in: Codeunit<Calculate Standard Cost>.PROCEDURE<CalcItem>
    Code lines:
    Item.GET(ItemNo);
    IsHandled := FALSE;
    OnBeforeCalcItem(Item,NewUseAssemblyList,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NewUseAssemblyList THEN
      Instruction := PrepareAssemblyCalculation(Item,Depth,1,AssemblyContainsProdBOM) // 1=StandardCost
    ELSE
      IF NOT Item.IsMfgItem THEN
    ...
Codeunit<Calculate Standard Cost>.PROCEDURE<OnBeforeCalcItems>
  Raised in: Codeunit<Calculate Standard Cost>.PROCEDURE<CalcItems>
    Code lines:
    NewTempItem.DELETEALL;
    
    Item2.COPY(Item);
    OnBeforeCalcItems(Item2); <=====================
    
    NoOfRecords := Item.COUNT;
    IF ShowDialog THEN
      Window.OPEN(Text002);
    
    IF Item2.FIND('-') THEN
    ...
Codeunit<Calculate Standard Cost>.PROCEDURE<OnCalcItemOnBeforeShowStrMenu>
  Raised in: Codeunit<Calculate Standard Cost>.PROCEDURE<CalcItem>
    Code lines:
    ...
    ELSE
      IF NOT Item.IsMfgItem THEN
        EXIT;
    
    ShowStrMenu := NOT NewUseAssemblyList OR (Depth > 1);
    OnCalcItemOnBeforeShowStrMenu(Item,ShowStrMenu,NewCalcMultiLevel); <=====================
    IF ShowStrMenu THEN
      CASE STRMENU(Text001,1,Instruction) OF
        0:
          EXIT;
    ...
Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnAfterCode>
  Raised in: Codeunit<Undo Purchase Receipt Line>.PROCEDURE<Code>
    Code lines:
    ...
      END;
    
      WhseUndoQty.PostTempWhseJnlLine(TempWhseJnlLine);
    END;
    
    OnAfterCode(PurchRcptLine); <=====================
Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnAfterCopyItemJnlLineFromPurchRcpt>
  Raised in: Codeunit<Undo Purchase Receipt Line>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
        ItemJnlLine."Unit Cost" := "Unit Cost (LCY)";
      END;
      ItemJnlLine.Quantity := -Quantity;
      ItemJnlLine."Quantity (Base)" := -"Quantity (Base)";
    
      OnAfterCopyItemJnlLineFromPurchRcpt(ItemJnlLine,PurchRcptHeader,PurchRcptLine); <=====================
    
      WhseUndoQty.InsertTempWhseJnlLine(ItemJnlLine,
        DATABASE::"Purchase Line",
        PurchLine."Document Type"::Order,
    ...
Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnAfterInsertNewReceiptLine>
  Raised in: Codeunit<Undo Purchase Receipt Line>.PROCEDURE<Code>
    Code lines:
    ...
            "Order Line No.");
    
        ItemRcptEntryNo := PostItemJnlLine(PurchRcptLine,DocLineNo);
    
        InsertNewReceiptLine(PurchRcptLine,ItemRcptEntryNo,DocLineNo);
        OnAfterInsertNewReceiptLine(PurchRcptLine,PostedWhseRcptLine,PostedWhseRcptLineFound,DocLineNo); <=====================
    
        IF PostedWhseRcptLineFound THEN
          WhseUndoQty.UndoPostedWhseRcptLine(PostedWhseRcptLine);
    
    ...
Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnAfterNewPurchRcptLineInsert>
  Raised in: Codeunit<Undo Purchase Receipt Line>.PROCEDURE<InsertNewReceiptLine>
    Code lines:
    ...
      NewPurchRcptLine."Qty. Rcd. Not Invoiced" := 0;
      NewPurchRcptLine.Correction := TRUE;
      NewPurchRcptLine."Dimension Set ID" := "Dimension Set ID";
      OnBeforeNewPurchRcptLineInsert(NewPurchRcptLine,OldPurchRcptLine);
      NewPurchRcptLine.INSERT;
      OnAfterNewPurchRcptLineInsert(NewPurchRcptLine,OldPurchRcptLine); <=====================
    
      InsertItemEntryRelation(TempGlobalItemEntryRelation,NewPurchRcptLine);
    END;
Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnAfterPurchRcptLineModify>
  Raised in: Codeunit<Undo Purchase Receipt Line>.PROCEDURE<Code>
    Code lines:
    ...
        "Qty. Rcd. Not Invoiced" := 0;
        Correction := TRUE;
    
        OnBeforePurchRcptLineModify(PurchRcptLine,TempWhseJnlLine);
        MODIFY;
        OnAfterPurchRcptLineModify(PurchRcptLine,TempWhseJnlLine); <=====================
    
        IF NOT JobItem THEN
          JobItem := (Type = Type::Item) AND ("Job No." <> '');
      UNTIL NEXT = 0;
    ...
Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnAfterUpdateOrderLine>
  Raised in: Codeunit<Undo Purchase Receipt Line>.PROCEDURE<UpdateOrderLine>
    Code lines:
    WITH PurchRcptLine DO BEGIN
      PurchLine.GET(PurchLine."Document Type"::Order,"Order No.","Order Line No.");
      UndoPostingMgt.UpdatePurchLine(PurchLine,Quantity,"Quantity (Base)",TempGlobalItemLedgEntry);
      OnAfterUpdateOrderLine(PurchRcptLine,PurchLine); <=====================
    END;
Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnBeforeBlanketOrderInitOutstanding>
  Raised in: Codeunit<Undo Purchase Receipt Line>.PROCEDURE<UpdateBlanketOrder>
    Code lines:
    ...
            BlanketOrderPurchaseLine."Quantity Received" -
            ROUND(
              "Qty. per Unit of Measure" / BlanketOrderPurchaseLine."Qty. per Unit of Measure" * Quantity,UOMMgt.QtyRndPrecision);
    
        BlanketOrderPurchaseLine."Qty. Received (Base)" := BlanketOrderPurchaseLine."Qty. Received (Base)" - "Quantity (Base)";
        OnBeforeBlanketOrderInitOutstanding(BlanketOrderPurchaseLine,PurchRcptLine); <=====================
        BlanketOrderPurchaseLine.InitOutstanding;
        BlanketOrderPurchaseLine.MODIFY;
      END;
Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnBeforeCheckPurchRcptLine>
  Raised in: Codeunit<Undo Purchase Receipt Line>.PROCEDURE<CheckPurchRcptLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckPurchRcptLine(PurchRcptLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH PurchRcptLine DO BEGIN
      TESTFIELD(Type,Type::Item);
      IF Correction THEN
        ERROR(AlreadyReversedErr);
      IF "Qty. Rcd. Not Invoiced" <> Quantity THEN
    ...
Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnBeforeNewPurchRcptLineInsert>
  Raised in: Codeunit<Undo Purchase Receipt Line>.PROCEDURE<InsertNewReceiptLine>
    Code lines:
    ...
      NewPurchRcptLine."Quantity Invoiced" := NewPurchRcptLine.Quantity;
      NewPurchRcptLine."Qty. Invoiced (Base)" := NewPurchRcptLine."Quantity (Base)";
      NewPurchRcptLine."Qty. Rcd. Not Invoiced" := 0;
      NewPurchRcptLine.Correction := TRUE;
      NewPurchRcptLine."Dimension Set ID" := "Dimension Set ID";
      OnBeforeNewPurchRcptLineInsert(NewPurchRcptLine,OldPurchRcptLine); <=====================
      NewPurchRcptLine.INSERT;
      OnAfterNewPurchRcptLineInsert(NewPurchRcptLine,OldPurchRcptLine);
    
      InsertItemEntryRelation(TempGlobalItemEntryRelation,NewPurchRcptLine);
Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnBeforeOnRun>
  Raised in: Codeunit<Undo Purchase Receipt Line>.<OnRun>
    Code lines:
    IsHandled := FALSE;
    OnBeforeOnRun(Rec,IsHandled,SkipTypeCheck); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT SkipTypeCheck THEN BEGIN
      SETRANGE(Type,Type::Item);
      IF NOT FIND('-') THEN
        ERROR(Text005);
    END;
    ...
Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnBeforePostItemJnlLine>
  Raised in: Codeunit<Undo Purchase Receipt Line>.PROCEDURE<PostItemJnlLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforePostItemJnlLine(PurchRcptLine,DocLineNo,ItemLedgEntryNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(ItemLedgEntryNo);
    
    WITH PurchRcptLine DO BEGIN
      PurchRcptLine2.SETRANGE("Document No.","Document No.");
      PurchRcptLine2."Document No." := "Document No.";
      PurchRcptLine2."Line No." := "Line No.";
      PurchRcptLine2.FIND('=');
    ...
Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnBeforePurchRcptLineModify>
  Raised in: Codeunit<Undo Purchase Receipt Line>.PROCEDURE<Code>
    Code lines:
    ...
        "Quantity Invoiced" := Quantity;
        "Qty. Invoiced (Base)" := "Quantity (Base)";
        "Qty. Rcd. Not Invoiced" := 0;
        Correction := TRUE;
    
        OnBeforePurchRcptLineModify(PurchRcptLine,TempWhseJnlLine); <=====================
        MODIFY;
        OnAfterPurchRcptLineModify(PurchRcptLine,TempWhseJnlLine);
    
        IF NOT JobItem THEN
    ...
Codeunit<Undo Purchase Receipt Line>.PROCEDURE<OnPostItemJournalInboundItemEntryPostingWithJob>
  Raised in: Codeunit<Undo Purchase Receipt Line>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
          IF Item.Type = Item.Type::Inventory THEN BEGIN
            UndoPostingMgt.FindItemReceiptApplication(ItemApplicationEntry,"Item Rcpt. Entry No.");
            ItemJnlPostLine.UndoValuePostingWithJob(
              "Item Rcpt. Entry No.",ItemApplicationEntry."Outbound Item Entry No.");
            IsHandled := FALSE;
            OnPostItemJournalInboundItemEntryPostingWithJob(ItemJnlLine,ItemApplicationEntry,IsHandled); <=====================
            IF NOT IsHandled THEN BEGIN
              UndoPostingMgt.FindItemShipmentApplication(ItemApplicationEntry,ItemJnlLine."Item Shpt. Entry No.");
              ItemJnlPostLine.UndoValuePostingWithJob(
                ItemApplicationEntry."Inbound Item Entry No.",ItemJnlLine."Item Shpt. Entry No.");
    ...
Codeunit<Undo Return Shipment Line>.PROCEDURE<OnAfterCode>
  Raised in: Codeunit<Undo Return Shipment Line>.PROCEDURE<Code>
    Code lines:
    ...
      END;
    
      WhseUndoQty.PostTempWhseJnlLine(TempWhseJnlLine);
    END;
    
    OnAfterCode(ReturnShptLine); <=====================
Codeunit<Undo Return Shipment Line>.PROCEDURE<OnAfterCopyItemJnlLineFromReturnShpt>
  Raised in: Codeunit<Undo Return Shipment Line>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
      ItemJnlLine."Bin Code" := "Bin Code";
      ItemJnlLine.Quantity := "Quantity (Base)";
      ItemJnlLine."Quantity (Base)" := "Quantity (Base)";
      ItemJnlLine."Document Date" := ReturnShptHeader."Document Date";
    
      OnAfterCopyItemJnlLineFromReturnShpt(ItemJnlLine,ReturnShptHeader,ReturnShptLine); <=====================
    
      WhseUndoQty.InsertTempWhseJnlLine(ItemJnlLine,
        DATABASE::"Purchase Line",
        PurchLine."Document Type"::"Return Order",
    ...
Codeunit<Undo Return Shipment Line>.PROCEDURE<OnAfterInsertNewReturnShptLine>
  Raised in: Codeunit<Undo Return Shipment Line>.PROCEDURE<Code>
    Code lines:
    ...
            "Return Order Line No.");
    
        ItemShptEntryNo := PostItemJnlLine(ReturnShptLine,DocLineNo);
    
        InsertNewReturnShptLine(ReturnShptLine,ItemShptEntryNo,DocLineNo);
        OnAfterInsertNewReturnShptLine(ReturnShptLine,PostedWhseShptLine,PostedWhseShptLineFound,DocLineNo); <=====================
    
        IF PostedWhseShptLineFound THEN
          WhseUndoQty.UndoPostedWhseShptLine(PostedWhseShptLine);
    
    ...
Codeunit<Undo Return Shipment Line>.PROCEDURE<OnAfterNewReturnShptLineInsert>
  Raised in: Codeunit<Undo Return Shipment Line>.PROCEDURE<InsertNewReturnShptLine>
    Code lines:
    ...
      NewReturnShptLine."Return Qty. Shipped Not Invd." := 0;
      NewReturnShptLine.Correction := TRUE;
      NewReturnShptLine."Dimension Set ID" := "Dimension Set ID";
      OnBeforeNewReturnShptLineInsert(NewReturnShptLine,OldReturnShptLine);
      NewReturnShptLine.INSERT;
      OnAfterNewReturnShptLineInsert(NewReturnShptLine,OldReturnShptLine); <=====================
    
      InsertItemEntryRelation(TempGlobalItemEntryRelation,NewReturnShptLine);
    END;
Codeunit<Undo Return Shipment Line>.PROCEDURE<OnAfterReturnShptLineModify>
  Raised in: Codeunit<Undo Return Shipment Line>.PROCEDURE<Code>
    Code lines:
    ...
        "Return Qty. Shipped Not Invd." := 0;
        Correction := TRUE;
    
        OnBeforeReturnShptLineModify(ReturnShptLine);
        MODIFY;
        OnAfterReturnShptLineModify(ReturnShptLine); <=====================
    
        IF NOT JobItem THEN
          JobItem := (Type = Type::Item) AND ("Job No." <> '');
      UNTIL NEXT = 0;
    ...
Codeunit<Undo Return Shipment Line>.PROCEDURE<OnAfterUpdatePurchLine>
  Raised in: Codeunit<Undo Return Shipment Line>.PROCEDURE<UpdateOrderLine>
    Code lines:
    WITH ReturnShptLine DO BEGIN
      PurchLine.GET(PurchLine."Document Type"::"Return Order","Return Order No.","Return Order Line No.");
      UndoPostingMgt.UpdatePurchLine(PurchLine,Quantity,"Quantity (Base)",TempGlobalItemLedgEntry);
      OnAfterUpdatePurchLine(PurchLine,ReturnShptLine); <=====================
    END;
Codeunit<Undo Return Shipment Line>.PROCEDURE<OnBeforeCheckReturnShptLine>
  Raised in: Codeunit<Undo Return Shipment Line>.PROCEDURE<CheckReturnShptLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckReturnShptLine(ReturnShptLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH ReturnShptLine DO BEGIN
      TESTFIELD(Type,Type::Item);
      IF Correction THEN
        ERROR(AlreadyReversedErr);
      IF "Return Qty. Shipped Not Invd." <> Quantity THEN
    ...
Codeunit<Undo Return Shipment Line>.PROCEDURE<OnBeforeNewReturnShptLineInsert>
  Raised in: Codeunit<Undo Return Shipment Line>.PROCEDURE<InsertNewReturnShptLine>
    Code lines:
    ...
      NewReturnShptLine."Quantity Invoiced" := NewReturnShptLine.Quantity;
      NewReturnShptLine."Qty. Invoiced (Base)" := NewReturnShptLine."Quantity (Base)";
      NewReturnShptLine."Return Qty. Shipped Not Invd." := 0;
      NewReturnShptLine.Correction := TRUE;
      NewReturnShptLine."Dimension Set ID" := "Dimension Set ID";
      OnBeforeNewReturnShptLineInsert(NewReturnShptLine,OldReturnShptLine); <=====================
      NewReturnShptLine.INSERT;
      OnAfterNewReturnShptLineInsert(NewReturnShptLine,OldReturnShptLine);
    
      InsertItemEntryRelation(TempGlobalItemEntryRelation,NewReturnShptLine);
Codeunit<Undo Return Shipment Line>.PROCEDURE<OnBeforeOnRun>
  Raised in: Codeunit<Undo Return Shipment Line>.<OnRun>
    Code lines:
    IsHandled := FALSE;
    SkipTypeCheck := FALSE;
    OnBeforeOnRun(Rec,IsHandled,SkipTypeCheck); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT SkipTypeCheck THEN BEGIN
      SETRANGE(Type,Type::Item);
      IF NOT FIND('-') THEN
        ERROR(Text005);
    ...
Codeunit<Undo Return Shipment Line>.PROCEDURE<OnBeforePostItemJnlLine>
  Raised in: Codeunit<Undo Return Shipment Line>.PROCEDURE<PostItemJnlLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforePostItemJnlLine(ReturnShptLine,DocLineNo,ItemLedgEntryNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(ItemLedgEntryNo);
    
    WITH ReturnShptLine DO BEGIN
      ReturnShptLine2.SETRANGE("Document No.","Document No.");
      ReturnShptLine2."Document No." := "Document No.";
      ReturnShptLine2."Line No." := "Line No.";
      ReturnShptLine2.FIND('=');
    ...
Codeunit<Undo Return Shipment Line>.PROCEDURE<OnBeforeReturnShptLineModify>
  Raised in: Codeunit<Undo Return Shipment Line>.PROCEDURE<Code>
    Code lines:
    ...
        "Quantity Invoiced" := Quantity;
        "Qty. Invoiced (Base)" := "Quantity (Base)";
        "Return Qty. Shipped Not Invd." := 0;
        Correction := TRUE;
    
        OnBeforeReturnShptLineModify(ReturnShptLine); <=====================
        MODIFY;
        OnAfterReturnShptLineModify(ReturnShptLine);
    
        IF NOT JobItem THEN
    ...
Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnAfterCode>
  Raised in: Codeunit<Undo Sales Shipment Line>.PROCEDURE<Code>
    Code lines:
    ...
        InvtAdjmt.SetJobUpdateProperties(TRUE);
        InvtAdjmt.MakeMultiLevelAdjmt;
      END;
    END;
    
    OnAfterCode(SalesShptLine); <=====================
Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnAfterCopyItemJnlLineFromSalesShpt>
  Raised in: Codeunit<Undo Sales Shipment Line>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
      ItemJnlLine.Correction := TRUE;
      ItemJnlLine."Variant Code" := "Variant Code";
      ItemJnlLine."Bin Code" := "Bin Code";
      ItemJnlLine."Document Date" := SalesShptHeader."Document Date";
    
      OnAfterCopyItemJnlLineFromSalesShpt(ItemJnlLine,SalesShptHeader,SalesShptLine,TempWhseJnlLine); <=====================
    
      WhseUndoQty.InsertTempWhseJnlLine(ItemJnlLine,
        DATABASE::"Sales Line",
        SalesLine."Document Type"::Order,
    ...
Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnAfterInsertNewShipmentLine>
  Raised in: Codeunit<Undo Sales Shipment Line>.PROCEDURE<Code>
    Code lines:
    ...
    
        CLEAR(ItemJnlPostLine);
        ItemShptEntryNo := PostItemJnlLine(SalesShptLine,DocLineNo);
    
        InsertNewShipmentLine(SalesShptLine,ItemShptEntryNo,DocLineNo);
        OnAfterInsertNewShipmentLine(SalesShptLine,PostedWhseShptLine,PostedWhseShptLineFound,DocLineNo); <=====================
    
        IF PostedWhseShptLineFound THEN
          WhseUndoQty.UndoPostedWhseShptLine(PostedWhseShptLine);
    
    ...
Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnAfterNewSalesShptLineInsert>
  Raised in: Codeunit<Undo Sales Shipment Line>.PROCEDURE<InsertNewShipmentLine>
    Code lines:
    ...
      NewSalesShptLine."Qty. Invoiced (Base)" := NewSalesShptLine."Quantity (Base)";
      NewSalesShptLine.Correction := TRUE;
      NewSalesShptLine."Dimension Set ID" := "Dimension Set ID";
      OnBeforeNewSalesShptLineInsert(NewSalesShptLine,OldSalesShptLine);
      NewSalesShptLine.INSERT;
      OnAfterNewSalesShptLineInsert(NewSalesShptLine,OldSalesShptLine); <=====================
    
      InsertItemEntryRelation(TempGlobalItemEntryRelation,NewSalesShptLine);
    END;
Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnAfterSalesShptLineModify>
  Raised in: Codeunit<Undo Sales Shipment Line>.PROCEDURE<Code>
    Code lines:
    ...
        "Qty. Shipped Not Invoiced" := 0;
        Correction := TRUE;
    
        OnBeforeSalesShptLineModify(SalesShptLine);
        MODIFY;
        OnAfterSalesShptLineModify(SalesShptLine); <=====================
    
        UndoFinalizePostATO(SalesShptLine);
      UNTIL NEXT = 0;
    
    ...
Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnAfterUpdateSalesLine>
  Raised in: Codeunit<Undo Sales Shipment Line>.PROCEDURE<UpdateOrderLine>
    Code lines:
    WITH SalesShptLine DO BEGIN
      SalesLine.GET(SalesLine."Document Type"::Order,"Order No.","Order Line No.");
      UndoPostingMgt.UpdateSalesLine(SalesLine,Quantity,"Quantity (Base)",TempGlobalItemLedgEntry);
      OnAfterUpdateSalesLine(SalesLine,SalesShptLine); <=====================
    END;
Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnBeforeBlanketOrderInitOutstanding>
  Raised in: Codeunit<Undo Sales Shipment Line>.PROCEDURE<UpdateBlanketOrder>
    Code lines:
    ...
            BlanketOrderSalesLine."Quantity Shipped" -
            ROUND(
              "Qty. per Unit of Measure" / BlanketOrderSalesLine."Qty. per Unit of Measure" * Quantity,UOMMgt.QtyRndPrecision);
    
        BlanketOrderSalesLine."Qty. Shipped (Base)" := BlanketOrderSalesLine."Qty. Shipped (Base)" - "Quantity (Base)";
        OnBeforeBlanketOrderInitOutstanding(BlanketOrderSalesLine,SalesShptLine); <=====================
        BlanketOrderSalesLine.InitOutstanding;
        BlanketOrderSalesLine.MODIFY;
    
        AsmPost.UpdateBlanketATO(xBlanketOrderSalesLine,BlanketOrderSalesLine);
Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnBeforeCheckSalesShptLine>
  Raised in: Codeunit<Undo Sales Shipment Line>.PROCEDURE<CheckSalesShptLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckSalesShptLine(SalesShptLine,IsHandled,SkipTestFields,SkipUndoPosting,SkipUndoInitPostATO); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH SalesShptLine DO BEGIN
      IF NOT SkipTestFields THEN BEGIN
        TESTFIELD(Type,Type::Item);
        IF Correction THEN
          ERROR(AlreadyReversedErr);
    ...
Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnBeforeNewSalesShptLineInsert>
  Raised in: Codeunit<Undo Sales Shipment Line>.PROCEDURE<InsertNewShipmentLine>
    Code lines:
    ...
      NewSalesShptLine."Quantity (Base)" := -"Quantity (Base)";
      NewSalesShptLine."Quantity Invoiced" := NewSalesShptLine.Quantity;
      NewSalesShptLine."Qty. Invoiced (Base)" := NewSalesShptLine."Quantity (Base)";
      NewSalesShptLine.Correction := TRUE;
      NewSalesShptLine."Dimension Set ID" := "Dimension Set ID";
      OnBeforeNewSalesShptLineInsert(NewSalesShptLine,OldSalesShptLine); <=====================
      NewSalesShptLine.INSERT;
      OnAfterNewSalesShptLineInsert(NewSalesShptLine,OldSalesShptLine);
    
      InsertItemEntryRelation(TempGlobalItemEntryRelation,NewSalesShptLine);
Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnBeforeOnRun>
  Raised in: Codeunit<Undo Sales Shipment Line>.<OnRun>
    Code lines:
    IsHandled := FALSE;
    SkipTypeCheck := FALSE;
    OnBeforeOnRun(Rec,IsHandled,SkipTypeCheck); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT SkipTypeCheck THEN BEGIN
      SETRANGE(Type,Type::Item);
      SETFILTER(Quantity,'<>0');
      IF NOT FIND('-') THEN
    ...
Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnBeforePostItemJnlLine>
  Raised in: Codeunit<Undo Sales Shipment Line>.PROCEDURE<PostItemJnlLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforePostItemJnlLine(SalesShptLine,DocLineNo,ItemLedgEntryNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(ItemLedgEntryNo);
    
    WITH SalesShptLine DO BEGIN
      SalesShptLine2.SETRANGE("Document No.","Document No.");
      SalesShptLine2."Document No." := "Document No.";
      SalesShptLine2."Line No." := "Line No.";
      SalesShptLine2.FIND('=');
    ...
Codeunit<Undo Sales Shipment Line>.PROCEDURE<OnBeforeSalesShptLineModify>
  Raised in: Codeunit<Undo Sales Shipment Line>.PROCEDURE<Code>
    Code lines:
    ...
        "Quantity Invoiced" := Quantity;
        "Qty. Invoiced (Base)" := "Quantity (Base)";
        "Qty. Shipped Not Invoiced" := 0;
        Correction := TRUE;
    
        OnBeforeSalesShptLineModify(SalesShptLine); <=====================
        MODIFY;
        OnAfterSalesShptLineModify(SalesShptLine);
    
        UndoFinalizePostATO(SalesShptLine);
    ...
Codeunit<Undo Return Receipt Line>.PROCEDURE<OnAfterCode>
  Raised in: Codeunit<Undo Return Receipt Line>.PROCEDURE<Code>
    Code lines:
    ...
      END;
    
      WhseUndoQty.PostTempWhseJnlLine(TempWhseJnlLine);
    END;
    
    OnAfterCode(ReturnRcptLine); <=====================
Codeunit<Undo Return Receipt Line>.PROCEDURE<OnAfterCopyItemJnlLineFromReturnRcpt>
  Raised in: Codeunit<Undo Return Receipt Line>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
      ItemJnlLine."Quantity (Base)" := "Quantity (Base)";
      ItemJnlLine."Unit of Measure Code" := "Unit of Measure Code";
      ItemJnlLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
      ItemJnlLine."Document Date" := ReturnRcptHeader."Document Date";
    
      OnAfterCopyItemJnlLineFromReturnRcpt(ItemJnlLine,ReturnRcptHeader,ReturnRcptLine); <=====================
    
      WhseUndoQty.InsertTempWhseJnlLine(ItemJnlLine,
        DATABASE::"Sales Line",
        SalesLine."Document Type"::"Return Order",
    ...
Codeunit<Undo Return Receipt Line>.PROCEDURE<OnAfterInsertNewReceiptLine>
  Raised in: Codeunit<Undo Return Receipt Line>.PROCEDURE<Code>
    Code lines:
    ...
            "Return Order Line No.");
    
        ItemShptEntryNo := PostItemJnlLine(ReturnRcptLine,DocLineNo);
    
        InsertNewReceiptLine(ReturnRcptLine,ItemShptEntryNo,DocLineNo);
        OnAfterInsertNewReceiptLine(ReturnRcptLine,PostedWhseRcptLine,PostedWhseRcptLineFound,DocLineNo); <=====================
    
        SalesLine.GET(SalesLine."Document Type"::"Return Order","Return Order No.",
          "Return Order Line No.");
        IF "Item Rcpt. Entry No." > 0 THEN
    ...
Codeunit<Undo Return Receipt Line>.PROCEDURE<OnAfterNewReturnRcptLineInsert>
  Raised in: Codeunit<Undo Return Receipt Line>.PROCEDURE<InsertNewReceiptLine>
    Code lines:
    ...
      NewReturnRcptLine."Qty. Invoiced (Base)" := NewReturnRcptLine."Quantity (Base)";
      NewReturnRcptLine.Correction := TRUE;
      NewReturnRcptLine."Dimension Set ID" := "Dimension Set ID";
      OnBeforeNewReturnRcptLineInsert(NewReturnRcptLine,OldReturnRcptLine);
      NewReturnRcptLine.INSERT;
      OnAfterNewReturnRcptLineInsert(NewReturnRcptLine,OldReturnRcptLine); <=====================
    
      InsertItemEntryRelation(TempGlobalItemEntryRelation,NewReturnRcptLine);
    END;
Codeunit<Undo Return Receipt Line>.PROCEDURE<OnAfterReturnRcptLineModify>
  Raised in: Codeunit<Undo Return Receipt Line>.PROCEDURE<Code>
    Code lines:
    ...
        "Return Qty. Rcd. Not Invd." := 0;
        Correction := TRUE;
    
        OnBeforeReturnRcptLineModify(ReturnRcptLine);
        MODIFY;
        OnAfterReturnRcptLineModify(ReturnRcptLine); <=====================
      UNTIL NEXT = 0;
    
      InvtSetup.GET;
      IF InvtSetup."Automatic Cost Adjustment" <>
    ...
Codeunit<Undo Return Receipt Line>.PROCEDURE<OnAfterUpdateSalesLine>
  Raised in: Codeunit<Undo Return Receipt Line>.PROCEDURE<UpdateOrderLine>
    Code lines:
    WITH ReturnRcptLine DO BEGIN
      SalesLine.GET(SalesLine."Document Type"::"Return Order","Return Order No.","Return Order Line No.");
      UndoPostingMgt.UpdateSalesLine(SalesLine,Quantity,"Quantity (Base)",TempGlobalItemLedgEntry);
      OnAfterUpdateSalesLine(ReturnRcptLine,SalesLine); <=====================
    END;
Codeunit<Undo Return Receipt Line>.PROCEDURE<OnBeforeCheckReturnRcptLine>
  Raised in: Codeunit<Undo Return Receipt Line>.PROCEDURE<CheckReturnRcptLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckReturnRcptLine(ReturnRcptLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH ReturnRcptLine DO BEGIN
      TESTFIELD(Type,Type::Item);
      IF Correction THEN
        ERROR(AlreadyReversedErr);
      IF "Return Qty. Rcd. Not Invd." <> Quantity THEN
    ...
Codeunit<Undo Return Receipt Line>.PROCEDURE<OnBeforeNewReturnRcptLineInsert>
  Raised in: Codeunit<Undo Return Receipt Line>.PROCEDURE<InsertNewReceiptLine>
    Code lines:
    ...
      NewReturnRcptLine."Quantity (Base)" := -"Quantity (Base)";
      NewReturnRcptLine."Quantity Invoiced" := NewReturnRcptLine.Quantity;
      NewReturnRcptLine."Qty. Invoiced (Base)" := NewReturnRcptLine."Quantity (Base)";
      NewReturnRcptLine.Correction := TRUE;
      NewReturnRcptLine."Dimension Set ID" := "Dimension Set ID";
      OnBeforeNewReturnRcptLineInsert(NewReturnRcptLine,OldReturnRcptLine); <=====================
      NewReturnRcptLine.INSERT;
      OnAfterNewReturnRcptLineInsert(NewReturnRcptLine,OldReturnRcptLine);
    
      InsertItemEntryRelation(TempGlobalItemEntryRelation,NewReturnRcptLine);
Codeunit<Undo Return Receipt Line>.PROCEDURE<OnBeforeOnRun>
  Raised in: Codeunit<Undo Return Receipt Line>.<OnRun>
    Code lines:
    IsHandled := FALSE;
    SkipTypeCheck := FALSE;
    OnBeforeOnRun(Rec,IsHandled,SkipTypeCheck); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT SkipTypeCheck THEN BEGIN
      SETRANGE(Type,Type::Item);
      IF NOT FIND('-') THEN
        ERROR(Text005);
    ...
Codeunit<Undo Return Receipt Line>.PROCEDURE<OnBeforePostItemJnlLine>
  Raised in: Codeunit<Undo Return Receipt Line>.PROCEDURE<PostItemJnlLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforePostItemJnlLine(ReturnRcptLine,DocLineNo,ItemLedgEntryNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(ItemLedgEntryNo);
    
    WITH ReturnRcptLine DO BEGIN
      ReturnRcptLine2.SETRANGE("Document No.","Document No.");
      ReturnRcptLine2."Document No." := "Document No.";
      ReturnRcptLine2."Line No." := "Line No.";
      ReturnRcptLine2.FIND('=');
    ...
Codeunit<Undo Return Receipt Line>.PROCEDURE<OnBeforeReturnRcptLineModify>
  Raised in: Codeunit<Undo Return Receipt Line>.PROCEDURE<Code>
    Code lines:
    ...
        "Quantity Invoiced" := Quantity;
        "Qty. Invoiced (Base)" := "Quantity (Base)";
        "Return Qty. Rcd. Not Invd." := 0;
        Correction := TRUE;
    
        OnBeforeReturnRcptLineModify(ReturnRcptLine); <=====================
        MODIFY;
        OnAfterReturnRcptLineModify(ReturnRcptLine);
      UNTIL NEXT = 0;
    
    ...
Codeunit<Undo Posting Management>.PROCEDURE<OnAfterUpdatePurchline>
  Raised in: Codeunit<Undo Posting Management>.PROCEDURE<UpdatePurchLine>
    Code lines:
    ...
      MODIFY;
      RevertPostedItemTracking(TempUndoneItemLedgEntry,"Expected Receipt Date");
      xPurchLine."Quantity (Base)" := 0;
      ReservePurchLine.VerifyQuantity(PurchLine,xPurchLine);
    
      OnAfterUpdatePurchline(PurchLine); <=====================
    END;
Codeunit<Undo Posting Management>.PROCEDURE<OnAfterUpdateSalesLine>
  Raised in: Codeunit<Undo Posting Management>.PROCEDURE<UpdateSalesLine>
    Code lines:
    ...
      MODIFY;
      RevertPostedItemTracking(TempUndoneItemLedgEntry,"Shipment Date");
      xSalesLine."Quantity (Base)" := 0;
      ReserveSalesLine.VerifyQuantity(SalesLine,xSalesLine);
    
      OnAfterUpdateSalesLine(SalesLine); <=====================
    END;
Codeunit<Undo Posting Management>.PROCEDURE<OnAfterUpdateServLine>
  Raised in: Codeunit<Undo Posting Management>.PROCEDURE<UpdateServLine>
    Code lines:
    ...
      MODIFY;
      RevertPostedItemTracking(TempUndoneItemLedgEntry,"Posting Date");
      xServLine."Quantity (Base)" := 0;
      ReserveServLine.VerifyQuantity(ServLine,xServLine);
    
      OnAfterUpdateServLine(ServLine); <=====================
    END;
Codeunit<Undo Posting Management>.PROCEDURE<OnBeforePostItemJnlLine>
  Raised in: Codeunit<Undo Posting Management>.PROCEDURE<PostItemJnlLineAppliedToList>
    Code lines:
    ...
        NonDistrQuantityBase,ItemJnlLine."Quantity (Base)");
    
      NonDistrQuantity := NonDistrQuantity - ItemJnlLine.Quantity;
      NonDistrQuantityBase := NonDistrQuantityBase - ItemJnlLine."Quantity (Base)";
    
      OnBeforePostItemJnlLine(ItemJnlLine,TempApplyToItemLedgEntry); <=====================
      PostItemJnlLine(ItemJnlLine);
    
      UndoValuePostingFromJob(ItemJnlLine,ItemApplicationEntry,TempApplyToItemLedgEntry);
    
    ...
Codeunit<Undo Posting Management>.PROCEDURE<OnBeforePostItemJnlLineForJob>
  Raised in: Codeunit<Undo Posting Management>.PROCEDURE<PostItemJnlLineForJob>
    Code lines:
    IsHandled := FALSE;
    OnBeforePostItemJnlLineForJob(ItemJnlLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    ItemJnlLine2."Entry Type" := ItemJnlLine2."Entry Type"::"Negative Adjmt.";
    Job.GET(ItemJnlLine2."Job No.");
    ItemJnlLine2."Source No." := Job."Bill-to Customer No.";
    ItemJnlLine2."Source Type" := ItemJnlLine2."Source Type"::Customer;
    ItemJnlLine2."Discount Amount" := 0;
    ...
Codeunit<Undo Posting Management>.PROCEDURE<OnBeforeReapplyJobConsumption>
  Raised in: Codeunit<Undo Posting Management>.PROCEDURE<ReapplyJobConsumption>
    Code lines:
    IsHandled := FALSE;
    OnBeforeReapplyJobConsumption(ItemRcptEntryNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    // Purchase receipt and job consumption are reapplied with with fixed cost application
    FindItemReceiptApplication(ItemApplnEntry,ItemRcptEntryNo);
    ItemJnlPostLine.UnApply(ItemApplnEntry);
    ItemLedgEntry.GET(ItemApplnEntry."Inbound Item Entry No.");
    ItemJnlPostLine.ReApply(ItemLedgEntry,ItemApplnEntry."Outbound Item Entry No.");
Codeunit<Undo Posting Management>.PROCEDURE<OnBeforeTestAllTransactions>
  Raised in: Codeunit<Undo Posting Management>.PROCEDURE<TestAllTransactions>
    Code lines:
    OnBeforeTestAllTransactions(UndoType,UndoID,UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo); <=====================
    IF NOT TestPostedWhseReceiptLine(
         UndoType,UndoID,UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo)
    THEN BEGIN
      TestWarehouseActivityLine(UndoType,UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo);
      TestRgstrdWhseActivityLine(UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo);
      TestWhseWorksheetLine(UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo);
    END;
    
    IF NOT (UndoType IN [DATABASE::"Purch. Rcpt. Line",DATABASE::"Return Receipt Line"]) THEN
    ...
Codeunit<Undo Posting Management>.PROCEDURE<OnBeforeTestPostedInvtPickLine>
  Raised in: Codeunit<Undo Posting Management>.PROCEDURE<TestPostedInvtPickLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTestPostedInvtPickLine(UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH PostedInvtPickLine DO BEGIN
      SetSourceFilter(SourceType,SourceSubtype,SourceID,SourceRefNo,TRUE);
      IF NOT ISEMPTY THEN
        ERROR(Text010,UndoLineNo);
    END;
Codeunit<Undo Posting Management>.PROCEDURE<OnBeforeTestPostedInvtPutAwayLine>
  Raised in: Codeunit<Undo Posting Management>.PROCEDURE<TestPostedInvtPutAwayLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTestPostedInvtPutAwayLine(UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH PostedInvtPutAwayLine DO BEGIN
      SetSourceFilter(SourceType,SourceSubtype,SourceID,SourceRefNo,TRUE);
      IF NOT ISEMPTY THEN
        ERROR(Text009,UndoLineNo);
    END;
Codeunit<Undo Posting Management>.PROCEDURE<OnBeforeTestPostedWhseShipmentLine>
  Raised in: Codeunit<Undo Posting Management>.PROCEDURE<TestPostedWhseShipmentLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTestPostedWhseShipmentLine(UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH PostedWhseShipmentLine DO BEGIN
      SetSourceFilter(SourceType,SourceSubtype,SourceID,SourceRefNo,TRUE);
      IF NOT ISEMPTY THEN
        IF NOT CONFIRM(Text007,TRUE,UndoLineNo) THEN
          ERROR('');
Codeunit<Undo Posting Management>.PROCEDURE<OnBeforeTestRgstrdWhseActivityLine>
  Raised in: Codeunit<Undo Posting Management>.PROCEDURE<TestRgstrdWhseActivityLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTestRgstrdWhseActivityLine(UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH RegisteredWhseActivityLine DO BEGIN
      SetSourceFilter(SourceType,SourceSubtype,SourceID,SourceRefNo,-1,TRUE);
      SETRANGE("Activity Type","Activity Type"::"Put-away");
      IF NOT ISEMPTY THEN
        ERROR(Text002,UndoLineNo);
Codeunit<Undo Posting Management>.PROCEDURE<OnBeforeTestWarehouseActivityLine>
  Raised in: Codeunit<Undo Posting Management>.PROCEDURE<TestWarehouseActivityLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTestWarehouseActivityLine(UndoType,UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH WarehouseActivityLine DO BEGIN
      SetSourceFilter(SourceType,SourceSubtype,SourceID,SourceRefNo,-1,TRUE);
      IF NOT ISEMPTY THEN BEGIN
        IF UndoType = DATABASE::"Assembly Line" THEN
          ERROR(Text002,UndoLineNo);
    ...
Codeunit<Undo Posting Management>.PROCEDURE<OnBeforeTestWarehouseEntry>
  Raised in: Codeunit<Undo Posting Management>.PROCEDURE<TestWarehouseEntry>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTestWarehouseEntry(UndoLineNo,PostedWhseReceiptLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH WarehouseEntry DO BEGIN
      IF PostedWhseReceiptLine."Location Code" = '' THEN
        EXIT;
      Location.GET(PostedWhseReceiptLine."Location Code");
      IF Location."Bin Mandatory" THEN BEGIN
    ...
Codeunit<Undo Posting Management>.PROCEDURE<OnBeforeTestWarehouseReceiptLine>
  Raised in: Codeunit<Undo Posting Management>.PROCEDURE<TestWarehouseReceiptLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTestWarehouseReceiptLine(UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH WarehouseReceiptLine DO BEGIN
      WhseManagement.SetSourceFilterForWhseRcptLine(WarehouseReceiptLine,SourceType,SourceSubtype,SourceID,SourceRefNo,TRUE);
      IF NOT ISEMPTY THEN
        ERROR(Text005,UndoLineNo);
    END;
Codeunit<Undo Posting Management>.PROCEDURE<OnBeforeTestWarehouseShipmentLine>
  Raised in: Codeunit<Undo Posting Management>.PROCEDURE<TestWarehouseShipmentLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTestWarehouseShipmentLine(UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH WarehouseShipmentLine DO BEGIN
      SetSourceFilter(SourceType,SourceSubtype,SourceID,SourceRefNo,TRUE);
      IF NOT ISEMPTY THEN
        ERROR(Text006,UndoLineNo);
    END;
Codeunit<Undo Posting Management>.PROCEDURE<OnBeforeTestWhseWorksheetLine>
  Raised in: Codeunit<Undo Posting Management>.PROCEDURE<TestWhseWorksheetLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTestWhseWorksheetLine(UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH WhseWorksheetLine DO BEGIN
      SetSourceFilter(SourceType,SourceSubtype,SourceID,SourceRefNo,TRUE);
      IF NOT ISEMPTY THEN
        ERROR(Text008,UndoLineNo);
    END;
Codeunit<Undo Posting Management>.PROCEDURE<OnBeforeUndoValuePostingFromJob>
  Raised in: Codeunit<Undo Posting Management>.PROCEDURE<UndoValuePostingFromJob>
    Code lines:
    IsHandled := FALSE;
    OnBeforeUndoValuePostingFromJob(ItemJnlLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF ItemJnlLine."Job No." <> '' THEN BEGIN
      CLEAR(ItemJnlPostLine);
      FindItemReceiptApplication(ItemApplicationEntry,TempApplyToItemLedgEntry."Entry No.");
      ItemJnlPostLine.UndoValuePostingWithJob(TempApplyToItemLedgEntry."Entry No.",ItemApplicationEntry."Outbound Item Entry No.");
      FindItemShipmentApplication(ItemApplicationEntry,ItemJnlLine."Item Shpt. Entry No.");
    ...
Codeunit<Undo Posting Management>.PROCEDURE<OnPostItemJnlLineAppliedToListOnBeforeTempItemEntryRelationInsert>
  Raised in: Codeunit<Undo Posting Management>.PROCEDURE<PostItemJnlLineAppliedToList>
    Code lines:
    ...
      UndoValuePostingFromJob(ItemJnlLine,ItemApplicationEntry,TempApplyToItemLedgEntry);
    
      TempItemEntryRelation."Item Entry No." := ItemJnlLine."Item Shpt. Entry No.";
      TempItemEntryRelation."Serial No." := ItemJnlLine."Serial No.";
      TempItemEntryRelation."Lot No." := ItemJnlLine."Lot No.";
      OnPostItemJnlLineAppliedToListOnBeforeTempItemEntryRelationInsert(TempItemEntryRelation,ItemJnlLine); <=====================
      TempItemEntryRelation.INSERT;
      TempItemLedgEntry := TempApplyToItemLedgEntry;
      TempItemLedgEntry.INSERT;
    UNTIL TempApplyToItemLedgEntry.NEXT = 0;
Codeunit<Undo Posting Management>.PROCEDURE<OnUpdateSalesLineOnBeforeInitOustanding>
  Raised in: Codeunit<Undo Posting Management>.PROCEDURE<UpdateSalesLine>
    Code lines:
    ...
      CASE "Document Type" OF
        "Document Type"::"Return Order":
          BEGIN
            "Return Qty. Received" := "Return Qty. Received" - UndoQty;
            "Return Qty. Received (Base)" := "Return Qty. Received (Base)" - UndoQtyBase;
            OnUpdateSalesLineOnBeforeInitOustanding(SalesLine,UndoQty,UndoQtyBase); <=====================
            InitOutstanding;
            IF SalesSetup."Default Quantity to Ship" = SalesSetup."Default Quantity to Ship"::Blank THEN
              "Qty. to Ship" := 0
            ELSE
    ...
  Raised in: Codeunit<Undo Posting Management>.PROCEDURE<UpdateSalesLine>
    Code lines:
    ...
      CASE "Document Type" OF
        "Document Type"::"Return Order":
          BEGIN
            "Return Qty. Received" := "Return Qty. Received" - UndoQty;
            "Return Qty. Received (Base)" := "Return Qty. Received (Base)" - UndoQtyBase;
            OnUpdateSalesLineOnBeforeInitOustanding(SalesLine,UndoQty,UndoQtyBase); <=====================
            InitOutstanding;
            IF SalesSetup."Default Quantity to Ship" = SalesSetup."Default Quantity to Ship"::Blank THEN
              "Qty. to Ship" := 0
            ELSE
    ...
Codeunit<Undo Service Shipment Line>.PROCEDURE<OnAfterCode>
  Raised in: Codeunit<Undo Service Shipment Line>.PROCEDURE<Code>
    Code lines:
    ...
        InvtAdjmt.MakeMultiLevelAdjmt;
      END;
      WhseUndoQty.PostTempWhseJnlLine(TempWhseJnlLine);
    END;
    
    OnAfterCode(ServShptLine); <=====================
Codeunit<Undo Service Shipment Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServShpt>
  Raised in: Codeunit<Undo Service Shipment Line>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
      ItemJnlLine."Bin Code" := "Bin Code";
      ItemJnlLine.Quantity := -"Quantity (Base)";
      ItemJnlLine."Quantity (Base)" := -"Quantity (Base)";
      ItemJnlLine."Document Date" := ServShptHeader."Document Date";
    
      OnAfterCopyItemJnlLineFromServShpt(ItemJnlLine,ServShptHeader,ServShptLine); <=====================
    
      WhseUndoQty.InsertTempWhseJnlLine(ItemJnlLine,
        DATABASE::"Service Line",
        ServLine."Document Type"::Order,
    ...
Codeunit<Undo Service Shipment Line>.PROCEDURE<OnAfterInsertNewShipmentLine>
  Raised in: Codeunit<Undo Service Shipment Line>.PROCEDURE<Code>
    Code lines:
    ...
    
        IF Type = Type::Resource THEN
          PostResJnlLine(ServShptLine);
    
        InsertNewShipmentLine(ServShptLine,ItemShptEntryNo);
        OnAfterInsertNewShipmentLine(ServShptLine,PostedWhseShptLine,PostedWhseShptLineFound); <=====================
    
        IF PostedWhseShptLineFound THEN
          WhseUndoQty.UndoPostedWhseShptLine(PostedWhseShptLine);
    
    ...
Codeunit<Undo Service Shipment Line>.PROCEDURE<OnAfterUpdateOrderLine>
  Raised in: Codeunit<Undo Service Shipment Line>.PROCEDURE<UpdateOrderLine>
    Code lines:
    WITH ServShptLine DO BEGIN
      ServLine.GET(ServLine."Document Type"::Order,"Order No.","Order Line No.");
      UndoPostingMgt.UpdateServLine(ServLine,Quantity,"Quantity (Base)",TempGlobalItemLedgEntry);
      OnAfterUpdateOrderLine(ServLine,ServShptLine); <=====================
    END;
Codeunit<Undo Service Shipment Line>.PROCEDURE<OnBeforeCheckServShptLine>
  Raised in: Codeunit<Undo Service Shipment Line>.PROCEDURE<CheckServShptLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckServShptLine(ServShptLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH ServShptLine DO BEGIN
      TESTFIELD(Quantity);
      TESTFIELD("Qty. Shipped Not Invoiced",Quantity);
      IF Correction THEN
        ERROR(AlreadyReversedErr);
    ...
Codeunit<Undo Service Shipment Line>.PROCEDURE<OnBeforeNewServiceShptLineInsert>
  Raised in: Codeunit<Undo Service Shipment Line>.PROCEDURE<InsertNewShipmentLine>
    Code lines:
    ...
      NewServShptLine."Quantity (Base)" := -"Quantity (Base)";
      NewServShptLine."Quantity Invoiced" := NewServShptLine.Quantity;
      NewServShptLine."Qty. Invoiced (Base)" := NewServShptLine."Quantity (Base)";
      NewServShptLine.Correction := TRUE;
      NewServShptLine."Dimension Set ID" := "Dimension Set ID";
      OnBeforeNewServiceShptLineInsert(NewServShptLine,OldServShptLine); <=====================
      NewServShptLine.INSERT;
    
      InsertItemEntryRelation(TempGlobalItemEntryRelation,NewServShptLine);
    END;
Codeunit<Undo Service Shipment Line>.PROCEDURE<OnBeforeOnRun>
  Raised in: Codeunit<Undo Service Shipment Line>.<OnRun>
    Code lines:
    IsHandled := FALSE;
    OnBeforeOnRun(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT FIND('-') THEN
      EXIT;
    
    ConfMessage := Text000;
    
    ...
Codeunit<Undo Service Shipment Line>.PROCEDURE<OnBeforePostResJnlLine>
  Raised in: Codeunit<Undo Service Shipment Line>.PROCEDURE<PostResJnlLine>
    Code lines:
    ...
      "Posting No. Series" := ServiceShptHeader."No. Series";
      "Reason Code" := ServiceShptHeader."Reason Code";
      "Source Type" := "Source Type"::Customer;
      "Source No." := ServiceShptLine."Bill-to Customer No.";
      "Qty. per Unit of Measure" := ServiceShptLine."Qty. per Unit of Measure";
      OnBeforePostResJnlLine(ResJnlLine,ServiceShptLine); <=====================
      ResJnlPostLine.RunWithCheck(ResJnlLine);
    END;
    
    TimeSheetMgt.CreateTSLineFromServiceShptLine(ServiceShptLine);
Codeunit<Undo Service Consumption Line>.PROCEDURE<OnAfterCode>
  Raised in: Codeunit<Undo Service Consumption Line>.PROCEDURE<Code>
    Code lines:
    ...
        InvtAdjmt.MakeMultiLevelAdjmt;
      END;
      WhseUndoQty.PostTempWhseJnlLine(TempWhseJnlLine);
    END;
    
    OnAfterCode(ServShptLine); <=====================
Codeunit<Undo Service Consumption Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServShpt>
  Raised in: Codeunit<Undo Service Consumption Line>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
      "Invoiced Quantity" := QtyToConsume;
      "Invoiced Qty. (Base)" := QtyToConsumeBase;
    
      VALIDATE("Applies-from Entry",ItemEntryNo);
    
      OnAfterCopyItemJnlLineFromServShpt(ItemJnlLine,ServShptHeader,ServShptLine); <=====================
    
      WhseUndoQty.InsertTempWhseJnlLine(ItemJnlLine,
        DATABASE::"Service Line",ServiceLine."Document Type"::Order,ServShptHeader."Order No.",ServShptLine."Order Line No.",
        TempWhseJnlLine."Reference Document"::"Posted Shipment",TempWhseJnlLine,NextLineNo);
    ...
Codeunit<Undo Service Consumption Line>.PROCEDURE<OnAfterUpdateOrderLine>
  Raised in: Codeunit<Undo Service Consumption Line>.PROCEDURE<UpdateOrderLine>
    Code lines:
    WITH ServShptLine DO BEGIN
      ServLine.GET(ServLine."Document Type"::Order,"Order No.","Order Line No.");
      UndoPostingMgt.UpdateServLineCnsm(ServLine,"Quantity Consumed","Qty. Consumed (Base)",TempGlobalItemLedgEntry);
      OnAfterUpdateOrderLine(ServLine,ServShptLine); <=====================
    END;
Codeunit<Undo Service Consumption Line>.PROCEDURE<OnBeforeCheckServShptLine>
  Raised in: Codeunit<Undo Service Consumption Line>.PROCEDURE<CheckServShptLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckServShptLine(ServShptLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH ServShptLine DO BEGIN
      TESTFIELD("Quantity Invoiced",0);
      TESTFIELD("Quantity Consumed");
      TESTFIELD("Qty. Shipped Not Invoiced",Quantity - "Quantity Consumed");
    
    ...
Codeunit<Undo Service Consumption Line>.PROCEDURE<OnBeforeOnRun>
  Raised in: Codeunit<Undo Service Consumption Line>.<OnRun>
    Code lines:
    IsHandled := FALSE;
    OnBeforeOnRun(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT FIND('-') THEN
      EXIT;
    
    IF NOT HideDialog THEN
      IF NOT ConfirmManagement.ConfirmProcess(Text000,TRUE) THEN
    ...
Codeunit<Undo Service Consumption Line>.PROCEDURE<OnBeforePostItemJnlLineWithIT>
  Raised in: Codeunit<Undo Service Consumption Line>.PROCEDURE<PostItemJnlLineWithIT>
    Code lines:
    ...
      IF QtyToConsume <> 0 THEN BEGIN
        QtyToConsume -= Quantity;
        QtyToConsumeBase -= "Quantity (Base)";
      END;
    
      OnBeforePostItemJnlLineWithIT(ItemJnlLine); <=====================
    
      UndoPostingMgt.CollectItemLedgEntries(TempItemLedgerEntry,DATABASE::"Service Shipment Line",
        ServShptLine."Document No.",ServShptLine."Line No.",ServShptLine."Quantity (Base)",
        ServShptLine."Item Shpt. Entry No.");
    ...
Codeunit<Undo Service Consumption Line>.PROCEDURE<OnBeforeReservEntryInsert>
  Raised in: Codeunit<Undo Service Consumption Line>.PROCEDURE<InsertNewReservationEntries>
    Code lines:
    ...
          ReservEntry.Description := ServShptLine.Description;
          ReservEntry."Creation Date" := WORKDATE;
          ReservEntry."Created By" := USERID;
          ReservEntry.UpdateItemTracking;
          ReservEntry."Appl.-to Item Entry" := "Entry No.";
          OnBeforeReservEntryInsert(ReservEntry,TempTrkgItemLedgEntry2); <=====================
          ReservEntry.INSERT;
          TempReservEntry := ReservEntry;
          TempReservEntry.INSERT;
        UNTIL NEXT = 0;
    ...
Codeunit<Undo Service Consumption Line>.PROCEDURE<OnBeforeTempGlobalItemEntryRelationInsert>
  Raised in: Codeunit<Undo Service Consumption Line>.PROCEDURE<InsertNewTrackSpecifications>
    Code lines:
    ...
    
          // collect/add another value entry relation, for the future new line
          TempGlobalItemEntryRelation."Item Entry No." := TempSSLItemLedgEntry."Entry No.";
          TempGlobalItemEntryRelation."Serial No." := TempSSLItemLedgEntry."Serial No.";
          TempGlobalItemEntryRelation."Lot No." := TempSSLItemLedgEntry."Lot No.";
          OnBeforeTempGlobalItemEntryRelationInsert(TempGlobalItemEntryRelation,TempSSLItemLedgEntry); <=====================
          IF TempGlobalItemEntryRelation.INSERT THEN;
    
          TempSSLItemLedgEntry.NEXT;
        UNTIL TempTrkgItemLedgEntry.NEXT = 0;
Codeunit<Close Inventory Period>.PROCEDURE<OnRunOnBeforeCheck>
  Raised in: Codeunit<Close Inventory Period>.<OnRun>
    Code lines:
    ...
        IF NOT CONFIRM(Text006,FALSE,TABLECAPTION,"Ending Date") THEN
          EXIT;
    
    TESTFIELD(Closed,ReOpen);
    
    OnRunOnBeforeCheck(Rec,ReOpen); <=====================
    
    IF NOT ReOpen THEN BEGIN
      TESTFIELD("Ending Date");
      CheckCostIsAdjusted("Ending Date");
    ...
Codeunit<Cost Calculation Management>.PROCEDURE<OnBeforeCalcActNeededQtyBase>
  Raised in: Codeunit<Cost Calculation Management>.PROCEDURE<CalcActNeededQtyBase>
    Code lines:
    OnBeforeCalcActNeededQtyBase(OutputQtyBase,ProdOrderComp); <=====================
    
    CompQtyBasePerMfgQtyBase := ProdOrderComp."Quantity (Base)" / ProdOrderLine."Qty. per Unit of Measure";
    EXIT(CalcQtyAdjdForBOMScrap(OutputQtyBase * CompQtyBasePerMfgQtyBase,ProdOrderComp."Scrap %"));
Codeunit<Cost Calculation Management>.PROCEDURE<OnBeforeCalcProdOrderActTimeUsed>
  Raised in: Codeunit<Cost Calculation Management>.PROCEDURE<CalcProdOrderActTimeUsed>
    Code lines:
    OnBeforeCalcProdOrderActTimeUsed(ProdOrder,CapLedgEntry); <=====================
    
    WITH CapLedgEntry DO BEGIN
      IF ProdOrder.Status < ProdOrder.Status::Released THEN
        EXIT(0);
    
      SETCURRENTKEY("Order Type","Order No.");
      SETRANGE("Order Type","Order Type"::Production);
      SETRANGE("Order No.",ProdOrder."No.");
      IF FINDSET THEN BEGIN
    ...
Codeunit<Cost Calculation Management>.PROCEDURE<OnBeforeCalcProdOrderExpCapNeed>
  Raised in: Codeunit<Cost Calculation Management>.PROCEDURE<CalcProdOrderExpCapNeed>
    Code lines:
    OnBeforeCalcProdOrderExpCapNeed(ProdOrder,ProdOrderCapNeed,ProdOrderRtngLine); <=====================
    
    WITH ProdOrder DO
      IF Status <> Status::Finished THEN BEGIN
        ProdOrderCapNeed.SETRANGE(Status,Status);
        ProdOrderCapNeed.SETRANGE("Prod. Order No.","No.");
        ProdOrderCapNeed.SETFILTER(Type,GETFILTER("Capacity Type Filter"));
        ProdOrderCapNeed.SETFILTER("No.","Capacity No. Filter");
        ProdOrderCapNeed.SETFILTER("Work Center No.","Work Center Filter");
        ProdOrderCapNeed.SETFILTER(Date,GETFILTER("Date Filter"));
    ...
Codeunit<Cost Calculation Management>.PROCEDURE<OnBeforeCalcProdOrderLineStdCost>
  Raised in: Codeunit<Cost Calculation Management>.PROCEDURE<CalcProdOrderLineStdCost>
    Code lines:
    ...
        Item.GET("Item No.");
        QtyBase := "Quantity (Base)";
      END;
    
      IsHandled := FALSE;
      OnBeforeCalcProdOrderLineStdCost( <=====================
        ProdOrderLine,QtyBase,CurrencyFactor,RndgPrec,
        StdMatCost,StdCapDirCost,StdSubDirCost,StdCapOvhdCost,StdMfgOvhdCost,IsHandled);
      IF IsHandled THEN
        EXIT;
    ...
Codeunit<Cost Calculation Management>.PROCEDURE<OnCalcActOutputQtyBaseOnAfterSetFilters>
  Raised in: Codeunit<Cost Calculation Management>.PROCEDURE<CalcActOutputQtyBase>
    Code lines:
    ...
        "Order Type","Order No.","Order Line No.","Routing No.","Routing Reference No.","Operation No.");
      SetFilterByProdOrderRoutingLine(
        ProdOrderLine."Prod. Order No.",ProdOrderLine."Line No.",
        ProdOrderRtngLine."Routing No.",ProdOrderRtngLine."Routing Reference No.");
      SETRANGE("Operation No.",ProdOrderRtngLine."Operation No.");
      OnCalcActOutputQtyBaseOnAfterSetFilters(CapLedgEntry,ProdOrderLine,ProdOrderRtngLine); <=====================
      CALCSUMS("Output Quantity");
      EXIT("Output Quantity");
    END;
Codeunit<Cost Calculation Management>.PROCEDURE<OnCalcProdOrderLineExpCostOnExpOperCostCalculated>
  Raised in: Codeunit<Cost Calculation Management>.PROCEDURE<CalcProdOrderLineExpCost>
    Code lines:
    ...
      IF ProdOrderRtngLine.FIND('-') THEN
        REPEAT
          ExpOperCost :=
            ProdOrderRtngLine."Expected Operation Cost Amt." -
            ProdOrderRtngLine."Expected Capacity Ovhd. Cost";
          OnCalcProdOrderLineExpCostOnExpOperCostCalculated(ExpOperCost,ProdOrderRtngLine); <=====================
          IF ProdOrderRtngLine.Type = ProdOrderRtngLine.Type::"Work Center" THEN BEGIN
            IF NOT WorkCenter.GET(ProdOrderRtngLine."No.") THEN
              CLEAR(WorkCenter);
          END ELSE
    ...
Codeunit<Get Average Cost Calc Overview>.PROCEDURE<OnBeforeModifyAvgCostCalcOverview>
  Raised in: Codeunit<Get Average Cost Calc Overview>.PROCEDURE<InsertAvgCostCalcOvervwFromILE>
    Code lines:
    ...
    
      Quantity := Quantity + ValueEntry."Item Ledger Entry Quantity";
      "Cost Amount (Actual)" := "Cost Amount (Actual)" + ValueEntry."Cost Amount (Actual)";
      "Cost Amount (Expected)" := "Cost Amount (Expected)" + ValueEntry."Cost Amount (Expected)";
    
      OnBeforeModifyAvgCostCalcOverview(AvgCostCalcOverview,ValueEntry,ModifyLine); <=====================
      IF ModifyLine THEN
        MODIFY
      ELSE BEGIN
        INSERT;
    ...
Codeunit<Calculate BOM Tree>.PROCEDURE<OnAfterFilterBOMBuffer>
  Raised in: Codeunit<Calculate BOM Tree>.PROCEDURE<GenerateTreeForItemLocal>
    Code lines:
    ...
        IF NOT IsHandled THEN BEGIN
          BOMBuffer.SetLocationVariantFiltersFrom(ItemFilter);
          BOMBuffer.TransferFromItem(EntryNo,ParentItem,DemandDate);
          GenerateItemSubTree("No.",BOMBuffer);
          CalculateTreeType(BOMBuffer,ShowTotalAvailability,TreeType);
          OnAfterFilterBOMBuffer(ParentItem,BOMBuffer,DemandDate,TreeType); <=====================
        END;
      END;
    END;
Codeunit<Calculate BOM Tree>.PROCEDURE<OnAfterTransferFromProdBOM>
  Raised in: Codeunit<Calculate BOM Tree>.PROCEDURE<GenerateProdCompSubTree>
    Code lines:
    ...
                  BOMBuffer."Scrap %" := CombineScrapFactors(BOMBuffer."Scrap %","Scrap %");
                  IF CostCalculationMgt.FindRountingLine(RoutingLine,ProdBOMLine,WORKDATE,ParentItem."Routing No.") THEN
                    BOMBuffer."Scrap %" := CombineScrapFactors(BOMBuffer."Scrap %",RoutingLine."Scrap Factor % (Accumulated)" * 100);
                  BOMBuffer."Scrap %" := ROUND(BOMBuffer."Scrap %",0.00001);
    
                  OnAfterTransferFromProdBOM(BOMBuffer,ProdBOMLine); <=====================
    
                  CopyOfParentItem := ParentItem;
                  ParentItem."Routing No." := '';
                  ParentItem."Production BOM No." := "No.";
    ...
Codeunit<Calculate BOM Tree>.PROCEDURE<OnAfterTransferFromProdItem>
  Raised in: Codeunit<Calculate BOM Tree>.PROCEDURE<GenerateProdCompSubTree>
    Code lines:
    ...
                  IF ParentItem."Production BOM No." <> ParentBOMBuffer."Production BOM No." THEN BEGIN
                    BOMBuffer."Qty. per Parent" := BOMBuffer."Qty. per Parent" * ParentBOMBuffer."Qty. per Parent";
                    BOMBuffer."Scrap Qty. per Parent" := BOMBuffer."Scrap Qty. per Parent" * ParentBOMBuffer."Qty. per Parent";
                    BOMBuffer."Qty. per BOM Line" := BOMBuffer."Qty. per BOM Line" * ParentBOMBuffer."Qty. per Parent";
                  END;
                  OnAfterTransferFromProdItem(BOMBuffer,ProdBOMLine); <=====================
                  GenerateItemSubTree("No.",BOMBuffer);
                END;
              Type::"Production BOM":
                BEGIN
    ...
Codeunit<Calculate BOM Tree>.PROCEDURE<OnAfterTransferFromProdRouting>
  Raised in: Codeunit<Calculate BOM Tree>.PROCEDURE<GenerateProdCompSubTree>
    Code lines:
    ...
                EntryNo,RoutingLine,ParentBOMBuffer.Indentation + 1,
                ParentBOMBuffer."Qty. per Top Item" *
                UOMMgt.GetQtyPerUnitOfMeasure(ParentItem,ParentBOMBuffer."Unit of Measure Code"),
                ParentBOMBuffer."Needed by Date",
                ParentBOMBuffer."Location Code");
              OnAfterTransferFromProdRouting(BOMBuffer,RoutingLine); <=====================
              IF TreeType = TreeType::Cost THEN BEGIN
                LotSize := ParentBOMBuffer."Lot Size";
                IF LotSize = 0 THEN
                  LotSize := 1;
    ...
Codeunit<Calculate BOM Tree>.PROCEDURE<OnBeforeCalcRoutingLineCosts>
  Raised in: Codeunit<Calculate BOM Tree>.PROCEDURE<CalcRoutingLineCosts>
    Code lines:
    OnBeforeCalcRoutingLineCosts(RoutingLine,LotSize,ScrapPct); <=====================
    
    CalcStdCost.SetProperties(WORKDATE,FALSE,FALSE,FALSE,'',FALSE);
    CalcStdCost.CalcRtngLineCost(
      RoutingLine,CostCalculationMgt.CalcQtyAdjdForBOMScrap(LotSize,ScrapPct),CapCost,SubcontractedCapCost,CapOverhead);
    
    BOMBuffer.AddCapacityCost(CapCost,CapCost);
    BOMBuffer.AddSubcontrdCost(SubcontractedCapCost,SubcontractedCapCost);
    BOMBuffer.AddCapOvhdCost(CapOverhead,CapOverhead);
Codeunit<Calculate BOM Tree>.PROCEDURE<OnBeforeFilterBOMBuffer>
  Raised in: Codeunit<Calculate BOM Tree>.PROCEDURE<GenerateTreeForItemLocal>
    Code lines:
    ...
      ProdBOMLine.SETRANGE(Type,ProdBOMLine.Type::Item);
      ProdBOMLine.SETRANGE("No.","No.");
    
      IF HasBOM OR ("Routing No." <> '') THEN BEGIN
        IsHandled := FALSE;
        OnBeforeFilterBOMBuffer(ParentItem,BOMBuffer,DemandDate,TreeType,IsHandled); <=====================
        IF NOT IsHandled THEN BEGIN
          BOMBuffer.SetLocationVariantFiltersFrom(ItemFilter);
          BOMBuffer.TransferFromItem(EntryNo,ParentItem,DemandDate);
          GenerateItemSubTree("No.",BOMBuffer);
    ...
Codeunit<Calculate BOM Tree>.PROCEDURE<OnBeforeTransferFromProdBOM>
  Raised in: Codeunit<Calculate BOM Tree>.PROCEDURE<GenerateProdCompSubTree>
    Code lines:
    ...
                  OnAfterTransferFromProdItem(BOMBuffer,ProdBOMLine);
                  GenerateItemSubTree("No.",BOMBuffer);
                END;
              Type::"Production BOM":
                BEGIN
                  OnBeforeTransferFromProdBOM(BOMBuffer,ProdBOMLine,ParentItem,ParentBOMBuffer,EntryNo,TreeType); <=====================
    
                  BOMBuffer := ParentBOMBuffer;
                  BOMBuffer."Qty. per Top Item" := ROUND(BOMBuffer."Qty. per Top Item" * "Quantity per",UOMMgt.QtyRndPrecision);
                  IF ParentItem."Production BOM No." <> ParentBOMBuffer."Production BOM No." THEN
    ...
Codeunit<Calculate BOM Tree>.PROCEDURE<OnTraverseCostTreeOnAfterAddCost>
  Raised in: Codeunit<Calculate BOM Tree>.PROCEDURE<TraverseCostTree>
    Code lines:
    ...
            ParentBOMBuffer.AddCapacityCost("Single-Level Capacity Cost","Rolled-up Capacity Cost");
            ParentBOMBuffer.AddSubcontrdCost("Single-Level Subcontrd. Cost","Rolled-up Subcontracted Cost");
            ParentBOMBuffer.AddCapOvhdCost("Single-Level Cap. Ovhd Cost","Rolled-up Capacity Ovhd. Cost");
            ParentBOMBuffer.AddMfgOvhdCost("Single-Level Mfg. Ovhd Cost","Rolled-up Mfg. Ovhd Cost");
            ParentBOMBuffer.AddScrapCost("Single-Level Scrap Cost","Rolled-up Scrap Cost");
            OnTraverseCostTreeOnAfterAddCost(ParentBOMBuffer,BOMBuffer); <=====================
          END ELSE BEGIN
            ParentBOMBuffer.AddMaterialCost(
              "Single-Level Material Cost" +
              "Single-Level Capacity Cost" +
    ...
Codeunit<Phys. Invt. Order-Finish>.PROCEDURE<OnCodeOnAfterUpdateFromPhysInvtRecordLine>
  Raised in: Codeunit<Phys. Invt. Order-Finish>.PROCEDURE<Code>
    Code lines:
    ...
                  IF PhysInvtRecordLine.FIND('-') THEN
                    REPEAT
                      IF PhysInvtRecordLine."Quantity (Base)" <> 0 THEN
                        UpdateBufferRecordedQty(
                          PhysInvtRecordLine."Serial No.",PhysInvtRecordLine."Lot No.",PhysInvtRecordLine."Quantity (Base)");
                      OnCodeOnAfterUpdateFromPhysInvtRecordLine(TempPhysInvtTrackingBuffer,PhysInvtRecordLine); <=====================
                    UNTIL PhysInvtRecordLine.NEXT = 0;
                UNTIL PhysInvtOrderLine2.NEXT = 0;
    
              TempPhysInvtTrackingBuffer.RESET;
    ...
Codeunit<Phys. Invt. Order-Finish>.PROCEDURE<OnCreateReservEntriesOnBeforeInsert>
  Raised in: Codeunit<Phys. Invt. Order-Finish>.PROCEDURE<CreateReservEntries>
    Code lines:
    ...
            PhysInvtOrderLine."Pos. Qty. (Base)" += ReservEntry.Quantity;
          END ELSE BEGIN
            ReservEntry."Shipment Date" := PhysInvtOrderHeader."Posting Date";
            PhysInvtOrderLine."Neg. Qty. (Base)" -= ReservEntry.Quantity;
          END;
          OnCreateReservEntriesOnBeforeInsert(ReservEntry,TempPhysInvtTrackingBuffer,PhysInvtOrderHeader,PhysInvtOrderLine); <=====================
          ReservEntry.INSERT;
          NextEntryNo := NextEntryNo + 1;
        END;
        TempPhysInvtTrackingBuffer."Outstanding Quantity" -= QtyToTransfer;
    ...
Codeunit<Phys. Invt. Order-Finish>.PROCEDURE<OnCreateTrackingBufferLinesFromExpPhysInvtTracking>
  Raised in: Codeunit<Phys. Invt. Order-Finish>.PROCEDURE<CreateTrackingBufferLines>
    Code lines:
    ...
    ExpPhysInvtTracking.SETRANGE("Order Line No.",LineNo);
    IF ExpPhysInvtTracking.FIND('-') THEN
      REPEAT
        UpdateBufferExpectedQty(
          ExpPhysInvtTracking."Serial No.",ExpPhysInvtTracking."Lot No.",ExpPhysInvtTracking."Quantity (Base)");
        OnCreateTrackingBufferLinesFromExpPhysInvtTracking(TempPhysInvtTrackingBuffer,ExpPhysInvtTracking); <=====================
      UNTIL ExpPhysInvtTracking.NEXT = 0;
    
    TempPhysInvtTrackingBuffer.RESET;
    IF TempPhysInvtTrackingBuffer.FIND('-') THEN
    ...
Codeunit<Phys. Invt. Order-Finish>.PROCEDURE<OnCreateTrackingBufferLinesFromPhysInvtRecordLine>
  Raised in: Codeunit<Phys. Invt. Order-Finish>.PROCEDURE<CreateTrackingBufferLines>
    Code lines:
    ...
    IF PhysInvtRecordLine.FIND('-') THEN
      REPEAT
        IF PhysInvtRecordLine."Quantity (Base)" <> 0 THEN
          UpdateBufferRecordedQty(
            PhysInvtRecordLine."Serial No.",PhysInvtRecordLine."Lot No.",PhysInvtRecordLine."Quantity (Base)");
        OnCreateTrackingBufferLinesFromPhysInvtRecordLine(TempPhysInvtTrackingBuffer,PhysInvtRecordLine); <=====================
      UNTIL PhysInvtRecordLine.NEXT = 0;
    
    ExpPhysInvtTracking.RESET;
    ExpPhysInvtTracking.SETRANGE("Order No",DocNo);
    ...
Codeunit<Phys. Invt. Order-Finish>.PROCEDURE<OnUpdateBufferFromItemLedgerEntriesOnAfterUpdateExpectedQty>
  Raised in: Codeunit<Phys. Invt. Order-Finish>.PROCEDURE<UpdateBufferFromItemLedgerEntries>
    Code lines:
    ...
      SETRANGE("Location Code",PhysInvtOrderLine."Location Code");
      SETRANGE("Posting Date",0D,"Posting Date");
      IF FIND('-') THEN
        REPEAT
          UpdateBufferExpectedQty("Serial No.","Lot No.",Quantity);
          OnUpdateBufferFromItemLedgerEntriesOnAfterUpdateExpectedQty(TempPhysInvtTrackingBuffer,ItemLedgEntry); <=====================
        UNTIL NEXT = 0;
    END;
Codeunit<Phys. Invt. Order-Post>.PROCEDURE<OnInsertEntryRelationOnBeforeInsert>
  Raised in: Codeunit<Phys. Invt. Order-Post>.PROCEDURE<InsertEntryRelation>
    Code lines:
    ...
          ItemEntryRelation."Source Batch Name" := '';
          ItemEntryRelation."Source Prod. Order Line" := 0;
          ItemEntryRelation."Source Ref. No." := PstdPhysInvtOrderLine."Line No.";
          ItemEntryRelation."Order No." := PstdPhysInvtOrderLine."Document No.";
          ItemEntryRelation."Order Line No." := PstdPhysInvtOrderLine."Line No.";
          OnInsertEntryRelationOnBeforeInsert(ItemEntryRelation,TempTrackingSpecification,PstdPhysInvtOrderLine); <=====================
          ItemEntryRelation.INSERT;
        UNTIL TempTrackingSpecification.NEXT = 0;
    END;
    TempTrackingSpecification.DELETEALL;
Codeunit<Phys. Invt. Tracking Mgt.>.PROCEDURE<OnTransferResEntryToItemJnlLineOnBeforeTransfer>
  Raised in: Codeunit<Phys. Invt. Tracking Mgt.>.PROCEDURE<TransferResEntryToItemJnlLine>
    Code lines:
    ...
        ReservEntry.TESTFIELD("Item No.",PhysInvtOrderLine."Item No.");
        ReservEntry.TESTFIELD("Variant Code",PhysInvtOrderLine."Variant Code");
        ReservEntry.TESTFIELD("Location Code",PhysInvtOrderLine."Location Code");
        ReservEntry."New Serial No." := ReservEntry."Serial No.";
        ReservEntry."New Lot No." := ReservEntry."Lot No.";
        OnTransferResEntryToItemJnlLineOnBeforeTransfer(ReservEntry,PhysInvtOrderLine); <=====================
    
        Qty :=
          CreateReservEntry.TransferReservEntry(
            DATABASE::"Item Journal Line",
    ...
Codeunit<Inventory Adjustment>.PROCEDURE<OnAfterMakeMultiLevelAdjmt>
  Raised in: Codeunit<Inventory Adjustment>.PROCEDURE<MakeMultiLevelAdjmt>
    Code lines:
    ...
    
    SetAppliedEntryToAdjustFromBuf;
    FinalizeAdjmt;
    UpdateJobItemCost;
    
    OnAfterMakeMultiLevelAdjmt(TempItem,IsOnlineAdjmt,PostToGL); <=====================
Codeunit<Inventory Adjustment>.PROCEDURE<OnBeforeMakeMultiLevelAdjmt>
  Raised in: Codeunit<Inventory Adjustment>.PROCEDURE<MakeMultiLevelAdjmt>
    Code lines:
    IsHandled := FALSE;
    OnBeforeMakeMultiLevelAdjmt(FilterItem,IsOnlineAdjmt,PostToGL,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    InitializeAdjmt;
    
    IsFirstTime := TRUE;
    WHILE (InvtToAdjustExist(TempItem) OR IsFirstTime) AND NOT LevelExceeded DO BEGIN
      MakeSingleLevelAdjmt(TempItem,TempAvgCostAdjmtEntryPoint);
    ...
Codeunit<Inventory Adjustment>.PROCEDURE<OnMakeMultiLevelAdjmtOnAfterMakeAdjmt>
  Raised in: Codeunit<Inventory Adjustment>.PROCEDURE<MakeMultiLevelAdjmt>
    Code lines:
    ...
      MakeSingleLevelAdjmt(TempItem,TempAvgCostAdjmtEntryPoint);
      IF AssemblyToAdjustExists(TempInventoryAdjmtEntryOrder) THEN
        MakeAssemblyAdjmt(TempInventoryAdjmtEntryOrder,TempAvgCostAdjmtEntryPoint);
      IF WIPToAdjustExist(TempInventoryAdjmtEntryOrder) THEN
        MakeWIPAdjmt(TempInventoryAdjmtEntryOrder,TempAvgCostAdjmtEntryPoint);
      OnMakeMultiLevelAdjmtOnAfterMakeAdjmt(TempAvgCostAdjmtEntryPoint,FilterItem,RndgResidualBuf,IsOnlineAdjmt,PostToGL); <=====================
      IsFirstTime := FALSE;
    END;
    
    SetAppliedEntryToAdjustFromBuf;
    ...
Codeunit<Inventory Adjustment>.PROCEDURE<OnPostItemJnlLineCopyFromValueEntry>
  Raised in: Codeunit<Inventory Adjustment>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
      ItemJnlLine."Dimension Set ID" := "Dimension Set ID";
    
      IF NOT SkipUpdateJobItemCost AND ("Job No." <> '') THEN
        CopyJobToAdjustmentBuf("Job No.");
    
      OnPostItemJnlLineCopyFromValueEntry(ItemJnlLine,OrigValueEntry); <=====================
      ItemJnlPostLine.RunWithCheck(ItemJnlLine);
    END;
Codeunit<ServOrderManagement>.PROCEDURE<OnBeforeCalcContractDates>
  Raised in: Codeunit<ServOrderManagement>.PROCEDURE<CalcContractDates>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCalcContractDates(ServHeader,ServItemLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF ServContractLine.GET(
         ServContractLine."Contract Type"::Contract,
         ServItemLine."Contract No.",
         ServItemLine."Contract Line No.")
    THEN BEGIN
    ...
Codeunit<ServOrderManagement>.PROCEDURE<OnBeforeToCustInvDiscInsert>
  Raised in: Codeunit<ServOrderManagement>.PROCEDURE<CreateNewCustomer>
    Code lines:
    ...
              ToCustInvDisc.Code := Cust."No.";
              ToCustInvDisc."Currency Code" := FromCustInvDisc."Currency Code";
              ToCustInvDisc."Minimum Amount" := FromCustInvDisc."Minimum Amount";
              ToCustInvDisc."Discount %" := FromCustInvDisc."Discount %";
              ToCustInvDisc."Service Charge" := FromCustInvDisc."Service Charge";
              OnBeforeToCustInvDiscInsert(ToCustInvDisc,FromCustInvDisc); <=====================
              ToCustInvDisc.INSERT;
            UNTIL FromCustInvDisc.NEXT = 0;
        END;
        VALIDATE("Customer No.",Cust."No.");
    ...
Codeunit<Service Inv.-Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<Service Inv.-Printed>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<Service Shpt.-Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<Service Shpt.-Printed>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<Service Cr. Memo-Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<Service Cr. Memo-Printed>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<Service-Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<Service-Printed>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<ServLogManagement>.PROCEDURE<OnBeforeServItemEventDescription>
  Raised in: Codeunit<ServLogManagement>.PROCEDURE<ServItemEventDescription>
    Code lines:
    OnBeforeServItemEventDescription(EventNo); <=====================
    
    CASE EventNo OF
      1:
        EXIT(Text015);
      2:
        EXIT(Text016);
      3:
        EXIT(Text017);
      4:
    ...
Codeunit<ServLogManagement>.PROCEDURE<OnServItemEventDescription>
  Raised in: Codeunit<ServLogManagement>.PROCEDURE<ServItemEventDescription>
    Code lines:
    ...
      17:
        EXIT(Text031);
      18:
        EXIT(Text032);
      ELSE BEGIN
        OnServItemEventDescription(EventNo,Description,Handled); <=====================
        IF Handled THEN
          EXIT(Description);
        EXIT(UnknownEventTxt);
      END;
Codeunit<ServLogManagement>.PROCEDURE<OnServOrderEventDescription>
  Raised in: Codeunit<ServLogManagement>.PROCEDURE<ServOrderEventDescription>
    Code lines:
    ...
      23:
        EXIT(Text039);
      24:
        EXIT(Text040);
      ELSE BEGIN
        OnServOrderEventDescription(EventNo,Description,Handled); <=====================
        IF Handled THEN
          EXIT(Description);
        EXIT(UnknownEventTxt);
      END;
Codeunit<ServLedgEntries-Post>.PROCEDURE<OnBeforeServLedgerEntryInsert>
  Raised in: Codeunit<ServLedgEntries-Post>.PROCEDURE<InsertServLedgerEntry>
    Code lines:
    ...
    
        CalcAmounts(ServLedgEntry,ServHeader,TempServLine,1);
      END;
      IF "Qty. to Consume" <> 0 THEN
        ServLedgEntry."Discount Amount" := 0;
      OnBeforeServLedgerEntryInsert(ServLedgEntry,TempServLine,ServItemLine,ServHeader); <=====================
      ServLedgEntry.INSERT;
      NextEntryNo := NextEntryNo + 1;
      NextServLedgerEntryNo := NextEntryNo;
    
    ...
Codeunit<ServLedgEntries-Post>.PROCEDURE<OnBeforeServLedgerEntrySaleInsert>
  Raised in: Codeunit<ServLedgEntries-Post>.PROCEDURE<InsertServLedgerEntrySale>
    Code lines:
    ...
      END;
    
      IF ApplyToServLedgEntry.GET(ServLine."Appl.-to Service Entry") THEN
        "Contract Disc. Amount" := ApplyToServLedgEntry."Contract Disc. Amount";
    
      OnBeforeServLedgerEntrySaleInsert(ServLedgEntry,ServLine,ServItemLine,ServHeader); <=====================
      INSERT;
      NextServLedgerEntryNo += 1;
      PassedNextEntryNo := NextServLedgerEntryNo;
    END;
Codeunit<ServLedgEntries-Post>.PROCEDURE<OnBeforeWarrantyLedgerEntryInsert>
  Raised in: Codeunit<ServLedgEntries-Post>.PROCEDURE<InsertWarrantyLedgerEntry>
    Code lines:
    ...
            WarrantyLedgEntry.Amount := "Line Discount Amount"
          ELSE
            WarrantyLedgEntry.Amount := AmountToLCY(ServHeader,"Line Discount Amount");
          WarrantyLedgEntry.Amount := ABS(WarrantyLedgEntry.Amount);
        END;
        OnBeforeWarrantyLedgerEntryInsert(WarrantyLedgEntry,ServLine); <=====================
        WarrantyLedgEntry.INSERT;
    
        NextWarrantyLedgerEntryNo += 1;
        PassedWarrantyEntryNo := NextWarrantyLedgerEntryNo;
    ...
Codeunit<ServLedgEntries-Post>.PROCEDURE<OnCreateCreditEntryOnBeforeServLedgEntryInsert>
  Raised in: Codeunit<ServLedgEntries-Post>.PROCEDURE<CreateCreditEntry>
    Code lines:
    ...
            IF ServLine."Appl.-to Service Entry" <> 0 THEN
              IF ApplyToServLedgEntry.GET(ServLine."Appl.-to Service Entry") THEN
                "Posting Date" := ApplyToServLedgEntry."Posting Date";
            "Applies-to Entry No." := ServLine."Appl.-to Service Entry";
    
            OnCreateCreditEntryOnBeforeServLedgEntryInsert(ServLedgEntry,ServHeader,ServLine); <=====================
            INSERT;
    
            NextServLedgerEntryNo += 1;
          END;
    ...
Codeunit<ServLedgEntries-Post>.PROCEDURE<OnInsertServLedgEntryCrMemoOnBeforeServLedgEntryInsert>
  Raised in: Codeunit<ServLedgEntries-Post>.PROCEDURE<InsertServLedgEntryCrMemo>
    Code lines:
    ...
          ROUND(
            CurrExchRate.ExchangeAmtLCYToFCY(
              ServHeader."Posting Date",ServHeader."Currency Code",
              "Amount (LCY)",ServHeader."Currency Factor"));
      END;
      OnInsertServLedgEntryCrMemoOnBeforeServLedgEntryInsert(ServLedgEntry,ServHeader,ServLine); <=====================
      INSERT;
      NextServLedgerEntryNo += 1;
      PassedNextEntryNo := NextServLedgerEntryNo;
    END;
Codeunit<ServLedgEntries-Post>.PROCEDURE<OnInsertServLedgerEntryCrMUsageOnBeforeServLedgEntryInsert>
  Raised in: Codeunit<ServLedgEntries-Post>.PROCEDURE<InsertServLedgerEntryCrMUsage>
    Code lines:
    ...
        ServLedgEntry."Discount Amount" := 0;
    
      ServLedgEntry."Cost Amount" := -ServLedgEntry."Cost Amount";
      ServLedgEntry."Unit Cost" := -ServLedgEntry."Unit Cost";
      ServLedgEntry."Unit Price" := -ServLedgEntry."Unit Price";
      OnInsertServLedgerEntryCrMUsageOnBeforeServLedgEntryInsert(ServLedgEntry,ServHeader,ServLine); <=====================
      ServLedgEntry.INSERT;
      NextEntryNo := NextEntryNo + 1;
      NextServLedgerEntryNo := NextEntryNo;
    END;
Codeunit<ServItemManagement>.PROCEDURE<OnBeforeCreateServItemOnSalesLineShpt>
  Raised in: Codeunit<ServItemManagement>.PROCEDURE<CreateServItemOnSalesLineShpt>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCreateServItemOnSalesLineShpt(SalesHeader,SalesLine,SalesShipmentLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT (SalesHeader."Document Type" IN [SalesHeader."Document Type"::Order,SalesHeader."Document Type"::Invoice]) THEN
      EXIT;
    
    IF (SalesLine.Type = SalesLine.Type::Item) AND (SalesLine."Qty. to Ship (Base)" > 0) THEN BEGIN
      Item.GET(SalesLine."No.");
    ...
Codeunit<ServItemManagement>.PROCEDURE<OnBeforeInsertNewServItemComponent>
  Raised in: Codeunit<ServItemManagement>.PROCEDURE<AddOrReplaceSIComponent>
    Code lines:
    ...
            IF TrackingLinesExist THEN BEGIN
              NewServItemComponent."Serial No." := TempTrackingSpecification."Serial No.";
              IF TempTrackingSpecification.NEXT = 0 THEN
                TrackingLinesExist := FALSE;
            END;
            OnBeforeInsertNewServItemComponent(NewServItemComponent,ServLine); <=====================
            NewServItemComponent.INSERT;
            CLEAR(ServLogMgt);
            ServLogMgt.ServItemComponentAdded(NewServItemComponent);
    
    ...
  Raised in: Codeunit<ServItemManagement>.PROCEDURE<AddOrReplaceSIComponent>
    Code lines:
    ...
            IF TrackingLinesExist THEN BEGIN
              NewServItemComponent."Serial No." := TempTrackingSpecification."Serial No.";
              IF TempTrackingSpecification.NEXT = 0 THEN
                TrackingLinesExist := FALSE;
            END;
            OnBeforeInsertNewServItemComponent(NewServItemComponent,ServLine); <=====================
            NewServItemComponent.INSERT;
            CLEAR(ServLogMgt);
            ServLogMgt.ServItemComponentAdded(NewServItemComponent);
    
    ...
  Raised in: Codeunit<ServItemManagement>.PROCEDURE<AddOrReplaceSIComponent>
    Code lines:
    ...
            IF TrackingLinesExist THEN BEGIN
              NewServItemComponent."Serial No." := TempTrackingSpecification."Serial No.";
              IF TempTrackingSpecification.NEXT = 0 THEN
                TrackingLinesExist := FALSE;
            END;
            OnBeforeInsertNewServItemComponent(NewServItemComponent,ServLine); <=====================
            NewServItemComponent.INSERT;
            CLEAR(ServLogMgt);
            ServLogMgt.ServItemComponentAdded(NewServItemComponent);
    
    ...
Codeunit<ServItemManagement>.PROCEDURE<OnBeforeInsertServItemComponent>
  Raised in: Codeunit<ServItemManagement>.PROCEDURE<InsertServItemComponent>
    Code lines:
    ...
      "No." := BOMComponent2."No.";
      "Date Installed" := SalesHeader."Posting Date";
      Description := BOMComponent2.Description;
      "Serial No." := '';
      "Variant Code" := BOMComponent2."Variant Code";
      OnBeforeInsertServItemComponent(ServiceItemComponent,ServItem,SalesHeader,SalesShipmentLine,BOMComponent,BOMComponent2); <=====================
      INSERT;
    END;
Codeunit<ServItemManagement>.PROCEDURE<OnBeforeReplaceSIComponent>
  Raised in: Codeunit<ServItemManagement>.PROCEDURE<AddOrReplaceSIComponent>
    Code lines:
    IF (ServLine.Type <> ServLine.Type::Item) OR (ServLine."Qty. to Ship" = 0) THEN
      EXIT;
    
    OnBeforeReplaceSIComponent(ServLine,ServHeader,ServShptDocNo,ServShptLineNo,TempTrackingSpecification); <=====================
    
    WITH ServLine DO
      CASE "Spare Part Action" OF
        "Spare Part Action"::"Component Replaced":
          BEGIN
            CheckWholeNumber(ServLine);
    ...
Codeunit<ServItemManagement>.PROCEDURE<OnCreateServItemOnSalesLineShpt>
  Raised in: Codeunit<ServItemManagement>.PROCEDURE<CreateServItemOnSalesLineShpt>
    Code lines:
    ...
                WarrantyStartDate := PurchaseHeader."Posting Date";
          END;
          CalcServiceItemWarrantyDates(
            ServItem,WarrantyStartDate,ItemTrackingCode."Warranty Date Formula",ServMgtSetup."Default Warranty Duration");
    
          OnCreateServItemOnSalesLineShpt(ServItem,SalesHeader,SalesLine); <=====================
    
          ServItem.MODIFY;
          CLEAR(ServiceItemTEMP);
          ServiceItemTEMP := ServItem;
    ...
Codeunit<ServItemManagement>.PROCEDURE<OnCreateServItemOnServItemLine>
  Raised in: Codeunit<ServItemManagement>.PROCEDURE<CreateServItemOnServItemLine>
    Code lines:
    ...
               Text002,FIELDCAPTION("Service Price Group Code"),
               TABLECAPTION,ServItem.TABLECAPTION),TRUE)
        THEN
          ServItem."Service Price Group Code" := "Service Price Group Code";
    
      OnCreateServItemOnServItemLineOnBeforeServItemModify(ServItem,ServHeader,ServItemLine); <=====================
      ServItem.MODIFY;
      ResSkillMgt.AssignServItemResSkills(ServItem);
      CLEAR(ServLogMgt);
      ServLogMgt.ServItemAutoCreated(ServItem);
    ...
Codeunit<ServItemManagement>.PROCEDURE<OnCreateServItemOnServItemLineOnBeforeServItemModify>
  Raised in: Codeunit<ServItemManagement>.PROCEDURE<CreateServItemOnServItemLine>
    Code lines:
    ...
               Text002,FIELDCAPTION("Service Price Group Code"),
               TABLECAPTION,ServItem.TABLECAPTION),TRUE)
        THEN
          ServItem."Service Price Group Code" := "Service Price Group Code";
    
      OnCreateServItemOnServItemLineOnBeforeServItemModify(ServItem,ServHeader,ServItemLine); <=====================
      ServItem.MODIFY;
      ResSkillMgt.AssignServItemResSkills(ServItem);
      CLEAR(ServLogMgt);
      ServLogMgt.ServItemAutoCreated(ServItem);
    ...
Codeunit<Service-Quote to Order>.PROCEDURE<OnAfterInsertServHeader>
  Raised in: Codeunit<Service-Quote to Order>.PROCEDURE<InsertServHeader>
    Code lines:
    ...
    ServiceHeaderOrder."Document Date" := ServiceHeaderQuote."Document Date";
    ServiceHeaderOrder."Location Code" := ServiceHeaderQuote."Location Code";
    OnBeforeServiceHeaderOrderModify(ServiceHeaderOrder,ServiceHeaderQuote);
    ServiceHeaderOrder.MODIFY;
    
    OnAfterInsertServHeader(ServiceHeaderOrder,ServiceHeaderQuote); <=====================
Codeunit<Service-Quote to Order>.PROCEDURE<OnAfterInsertServiceLine>
  Raised in: Codeunit<Service-Quote to Order>.PROCEDURE<MakeOrder>
    Code lines:
    ...
          RepairStatus.SETRANGE(Initial,TRUE);
          IF RepairStatus.FINDFIRST THEN
            ServItemLine2."Repair Status Code" := RepairStatus.Code;
          OnBeforeServiceItemLineInsert(ServItemLine2,ServItemLine);
          ServItemLine2.INSERT(TRUE);
          OnAfterInsertServiceLine(ServItemLine2,ServItemLine); <=====================
        UNTIL ServItemLine.NEXT = 0;
    
      UpdateResponseDateTime;
    
    ...
Codeunit<Service-Quote to Order>.PROCEDURE<OnBeforeRun>
  Raised in: Codeunit<Service-Quote to Order>.<OnRun>
    Code lines:
    OnBeforeRun(Rec); <=====================
    
    ServOrderHeader := Rec;
    
    ServMgtSetup.GET;
    
    ServOrderHeader."Document Type" := "Document Type"::Order;
    Customer.GET("Customer No.");
    Customer.CheckBlockedCustOnDocs(Customer,DocType::Quote,FALSE,FALSE);
    IF "Customer No." <> "Bill-to Customer No." THEN BEGIN
    ...
Codeunit<Service-Quote to Order>.PROCEDURE<OnBeforeServCommentLineInsert>
  Raised in: Codeunit<Service-Quote to Order>.PROCEDURE<MakeOrder>
    Code lines:
    ...
      IF ServCommentLine.FIND('-') THEN
        REPEAT
          ServCommentLine2 := ServCommentLine;
          ServCommentLine2."Table Subtype" := "Document Type";
          ServCommentLine2."No." := "No.";
          OnBeforeServCommentLineInsert(ServCommentLine2,ServiceHeader,ServOrderHeader); <=====================
          ServCommentLine2.INSERT;
        UNTIL ServCommentLine.NEXT = 0;
    
      ServOrderAlloc.RESET;
    ...
Codeunit<Service-Quote to Order>.PROCEDURE<OnBeforeServHeaderDelete>
  Raised in: Codeunit<Service-Quote to Order>.<OnRun>
    Code lines:
    ...
    TransferQuoteToOrderLines(ServQuoteLine,Rec,ServOrderLine,ServOrderHeader);
    
    MakeOrder(Rec);
    
    SkipDelete := FALSE;
    OnBeforeServHeaderDelete(Rec,SkipDelete); <=====================
    IF NOT SkipDelete THEN
      DELETE(TRUE);
Codeunit<Service-Quote to Order>.PROCEDURE<OnBeforeServiceHeaderOrderModify>
  Raised in: Codeunit<Service-Quote to Order>.PROCEDURE<InsertServHeader>
    Code lines:
    ServiceHeaderOrder.INSERT(TRUE);
    ServiceHeaderOrder."Document Date" := ServiceHeaderQuote."Document Date";
    ServiceHeaderOrder."Location Code" := ServiceHeaderQuote."Location Code";
    OnBeforeServiceHeaderOrderModify(ServiceHeaderOrder,ServiceHeaderQuote); <=====================
    ServiceHeaderOrder.MODIFY;
    
    OnAfterInsertServHeader(ServiceHeaderOrder,ServiceHeaderQuote);
Codeunit<Service-Quote to Order>.PROCEDURE<OnBeforeServiceItemLineInsert>
  Raised in: Codeunit<Service-Quote to Order>.PROCEDURE<MakeOrder>
    Code lines:
    ...
          ServItemLine2."Finishing Time" := 0T;
          RepairStatus.RESET;
          RepairStatus.SETRANGE(Initial,TRUE);
          IF RepairStatus.FINDFIRST THEN
            ServItemLine2."Repair Status Code" := RepairStatus.Code;
          OnBeforeServiceItemLineInsert(ServItemLine2,ServItemLine); <=====================
          ServItemLine2.INSERT(TRUE);
          OnAfterInsertServiceLine(ServItemLine2,ServItemLine);
        UNTIL ServItemLine.NEXT = 0;
    
    ...
Codeunit<Service-Quote to Order>.PROCEDURE<OnBeforeServLineDeleteAll>
  Raised in: Codeunit<Service-Quote to Order>.PROCEDURE<MakeOrder>
    Code lines:
    ...
    
      ServLogMgt.ServOrderQuoteChanged(ServOrderHeader,ServiceHeader);
      ApprovalsMgmt.CopyApprovalEntryQuoteToOrder(ServiceHeader.RECORDID,"No.",RECORDID);
    
      SkipDelete := FALSE;
      OnBeforeServLineDeleteAll(ServiceHeader,ServOrderHeader,SkipDelete); <=====================
      IF NOT SkipDelete THEN BEGIN
        ApprovalsMgmt.DeleteApprovalEntries(ServiceHeader.RECORDID);
        ServOrderLine.DELETEALL(TRUE);
      END;
Codeunit<Service-Quote to Order>.PROCEDURE<OnBeforeServOrderLineInsert>
  Raised in: Codeunit<Service-Quote to Order>.PROCEDURE<MakeOrder>
    Code lines:
    ...
        REPEAT
          ServOrderLine2 := ServOrderLine;
          ServOrderLine2."Document Type" := "Document Type";
          ServOrderLine2."Document No." := "No.";
          ServOrderLine2."Posting Date" := "Posting Date";
          OnBeforeServOrderLineInsert(ServOrderLine2,ServOrderLine); <=====================
          ServOrderLine2.INSERT;
          ReserveServiceLine.TransServLineToServLine(ServOrderLine,ServOrderLine2,ServOrderLine.Quantity);
        UNTIL ServOrderLine.NEXT = 0;
    
    ...
Codeunit<Service-Quote to Order>.PROCEDURE<OnBeforeTransferQuoteLineToOrderLineLoop>
  Raised in: Codeunit<Service-Quote to Order>.PROCEDURE<TransferQuoteToOrderLines>
    Code lines:
    ...
    ServiceQuoteLine.SETRANGE(Type,ServiceQuoteLine.Type::Item);
    ServiceQuoteLine.SETFILTER("No.",'<>%1','');
    IF ServiceQuoteLine.FINDSET THEN
      REPEAT
        IsHandled := FALSE;
        OnBeforeTransferQuoteLineToOrderLineLoop(ServiceQuoteLine,ServiceQuoteHeader,ServiceOrderHeader,IsHandled); <=====================
        IF NOT IsHandled THEN BEGIN
          ServiceOrderLine := ServiceQuoteLine;
          ServiceOrderLine.VALIDATE("Reserved Qty. (Base)",0);
          ServiceOrderLine."Line No." := 0;
    ...
Codeunit<Service-Get Shipment>.PROCEDURE<OnAfterCreateInvLines>
  Raised in: Codeunit<Service-Get Shipment>.PROCEDURE<CreateInvLines>
    Code lines:
    ...
          IF TransferLine THEN BEGIN
            ServiceShptLine := ServiceShptLine2;
            ServiceShptLine.InsertInvLineFromShptLine(ServiceLine);
          END;
        UNTIL NEXT = 0;
        OnAfterCreateInvLines(ServiceHeader); <=====================
      END;
    END;
Codeunit<ServContractManagement>.PROCEDURE<OnAfterCreateContractLineCreditMemo>
  Raised in: Codeunit<ServContractManagement>.PROCEDURE<CreateContractLineCreditMemo>
    Code lines:
    ...
        Credited := TRUE;
        MODIFY;
      END;
    END;
    
    OnAfterCreateContractLineCreditMemo(FromContractLine,CreditMemoNo); <=====================
Codeunit<ServContractManagement>.PROCEDURE<OnAfterCreateInvoice>
  Raised in: Codeunit<ServContractManagement>.PROCEDURE<CreateInvoice>
    Code lines:
    ...
        ServiceContractHeader."Contract No.",
        ServiceContractHeader.FIELDCAPTION("Invoice after Service"));
    
    CreateAllServLines(InvNo,ServiceContractHeader);
    
    OnAfterCreateInvoice(ServiceContractHeader,PostingDate); <=====================
Codeunit<ServContractManagement>.PROCEDURE<OnAfterCreateInvoiceSetPostingDate>
  Raised in: Codeunit<ServContractManagement>.PROCEDURE<CreateInvoiceSetPostingDate>
    Code lines:
    IF ServiceContractHeader.Prepaid THEN
      PostingDate := InvoiceFromDate
    ELSE
      PostingDate := InvoiceToDate;
    
    OnAfterCreateInvoiceSetPostingDate(ServiceContractHeader,InvoiceFromDate,InvoiceToDate,PostingDate); <=====================
Codeunit<ServContractManagement>.PROCEDURE<OnAfterCreateOrGetCreditHeader>
  Raised in: Codeunit<ServContractManagement>.PROCEDURE<CreateOrGetCreditHeader>
    Code lines:
    ...
      ServDocReg."Source Document Type"::Contract,
      ServContract."Contract No.",
      ServDocReg."Destination Document Type"::"Credit Memo",
      ServHeader2."No.");
    
    OnAfterCreateOrGetCreditHeader(ServHeader2,ServContract); <=====================
Codeunit<ServContractManagement>.PROCEDURE<OnAfterCreateServHeader>
  Raised in: Codeunit<ServContractManagement>.PROCEDURE<CreateServHeader>
    Code lines:
    ...
      ServDocReg."Source Document Type"::Contract,
      ServContract2."Contract No.",
      ServDocReg."Destination Document Type"::Invoice,
      ServHeader2."No.");
    
    OnAfterCreateServHeader(ServHeader2,ServContract2); <=====================
Codeunit<ServContractManagement>.PROCEDURE<OnAfterFinishCodeunit>
  Raised in: Codeunit<ServContractManagement>.PROCEDURE<FinishCodeunit>
    Code lines:
    ServiceRegister."To Entry No." := NextEntry - 1;
    ServiceRegister.INSERT;
    
    OnAfterFinishCodeunit(ServiceRegister); <=====================
Codeunit<ServContractManagement>.PROCEDURE<OnBeforeCalcContractAmount>
  Raised in: Codeunit<ServContractManagement>.PROCEDURE<CalcContractAmount>
    Code lines:
    OnBeforeCalcContractAmount(ServContractHeader,PeriodStarts,PeriodEnds); <=====================
    Currency.InitRoundingPrecision;
    AmountCalculated := 0;
    
    IF ServContractHeader."Expiration Date" <> 0D THEN BEGIN
      IF ServContractHeader."Expiration Date" < PeriodStarts THEN
        EXIT;
      IF (ServContractHeader."Expiration Date" >= PeriodStarts) AND
         (ServContractHeader."Expiration Date" <= PeriodEnds)
      THEN
    ...
Codeunit<ServContractManagement>.PROCEDURE<OnBeforeCreateContractLineCreditMemo>
  Raised in: Codeunit<ServContractManagement>.PROCEDURE<CreateContractLineCreditMemo>
    Code lines:
    OnBeforeCreateContractLineCreditMemo(FromContractLine,Deleting); <=====================
    CreditMemoNo := '';
    WITH FromContractLine DO BEGIN
      ServContractHeader.GET("Contract Type","Contract No.");
      TESTFIELD("Contract Expiration Date");
      TESTFIELD("Credit Memo Date");
      IF "Credit Memo Date" > WORKDATE THEN
        ERROR(
          Text004,
          FIELDCAPTION("Credit Memo Date"),"Credit Memo Date");
    ...
Codeunit<ServContractManagement>.PROCEDURE<OnBeforeCreateInvoice>
  Raised in: Codeunit<ServContractManagement>.PROCEDURE<CreateInvoice>
    Code lines:
    OnBeforeCreateInvoice(ServiceContractHeader); <=====================
    ServiceContractHeader.TESTFIELD("Change Status",ServiceContractHeader."Change Status"::Locked);
    GetNextInvoicePeriod(ServiceContractHeader,InvoiceFromDate,InvoiceToDate);
    CreateInvoiceSetPostingDate(ServiceContractHeader,InvoiceFromDate,InvoiceToDate,PostingDate);
    
    InvoicedAmount := CalcContractAmount(ServiceContractHeader,InvoiceFromDate,InvoiceToDate);
    IF InvoicedAmount = 0 THEN
      ERROR(Text007);
    
    InvNo := CreateRemainingPeriodInvoice(ServiceContractHeader);
    ...
Codeunit<ServContractManagement>.PROCEDURE<OnBeforeCreateServLineForNewContract>
  Raised in: Codeunit<ServContractManagement>.PROCEDURE<CreateDetailedServLine>
    Code lines:
    ...
      OnCreateDetailedServLineOnBeforeServLineInsertFirstLine(ServLine,ServContractHeader);
      ServLine.INSERT;
    END;
    
    IF NewContract THEN BEGIN
      OnBeforeCreateServLineForNewContract(ServHeader,ServContractHeader,ServLineNo); <=====================
      ServLine.INIT;
      ServLineNo := ServLineNo + 10000;
      ServLine."Document Type" := ServHeader."Document Type";
      ServLine."Document No." := ServHeader."No.";
    ...
Codeunit<ServContractManagement>.PROCEDURE<OnBeforeLastServLineModify>
  Raised in: Codeunit<ServContractManagement>.PROCEDURE<CreateLastServLines>
    Code lines:
    ...
            ServLine.INSERT;
            IF TransferExtendedText.ServCheckIfAnyExtText(ServLine,TRUE) THEN
              TransferExtendedText.InsertServExtText(ServLine);
            IF TransferExtendedText.MakeUpdate THEN;
            ServLine."No." := '';
            OnBeforeLastServLineModify(ServLine); <=====================
            ServLine.MODIFY;
          END;
        END;
Codeunit<ServContractManagement>.PROCEDURE<OnBeforeServHeaderModify>
  Raised in: Codeunit<ServContractManagement>.PROCEDURE<CreateServHeader>
    Code lines:
    ...
    ServHeader2."Shortcut Dimension 1 Code" := ServContract2."Shortcut Dimension 1 Code";
    ServHeader2."Shortcut Dimension 2 Code" := ServContract2."Shortcut Dimension 2 Code";
    ServHeader2."Dimension Set ID" := ServContract2."Dimension Set ID";
    ServHeader2.VALIDATE("Location Code",
      UserMgt.GetLocation(2,Cust."Location Code",ServContract2."Responsibility Center"));
    OnBeforeServHeaderModify(ServHeader2,ServContract2); <=====================
    ServHeader2.MODIFY;
    RecordLinkManagement.CopyLinks(ServContract2,ServHeader2);
    
    CLEAR(ServDocReg);
    ...
  Raised in: Codeunit<ServContractManagement>.PROCEDURE<CreateOrGetCreditHeader>
    Code lines:
    ...
    ServHeader2."Shortcut Dimension 1 Code" := ServContract."Shortcut Dimension 1 Code";
    ServHeader2."Shortcut Dimension 2 Code" := ServContract."Shortcut Dimension 2 Code";
    ServHeader2."Dimension Set ID" := ServContract."Dimension Set ID";
    ServHeader2.VALIDATE("Location Code",
      UserMgt.GetLocation(2,Cust."Location Code",ServContract."Responsibility Center"));
    OnBeforeServHeaderModify(ServHeader2,ServContract); <=====================
    ServHeader2.MODIFY;
    
    CLEAR(ServDocReg);
    ServDocReg.InsertServSalesDocument(
    ...
Codeunit<ServContractManagement>.PROCEDURE<OnBeforeServLedgEntryToServiceLine>
  Raised in: Codeunit<ServContractManagement>.PROCEDURE<ServLedgEntryToServiceLine>
    Code lines:
    OnBeforeServLedgEntryToServiceLine(TotalServLine,TotalServLineLCY,ServHeader,ServLedgEntry,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    ServLineNo := ServLineNo + 10000;
    WITH ServLine DO BEGIN
      RESET;
      INIT;
      "Document Type" := ServHeader."Document Type";
      "Document No." := ServHeader."No.";
    ...
Codeunit<ServContractManagement>.PROCEDURE<OnBeforeServLineInsert>
  Raised in: Codeunit<ServContractManagement>.PROCEDURE<CreateCreditLine>
    Code lines:
    ...
      ServLine2.VALIDATE("Line Discount Amount",DiscAmount);
    ServLine2.CreateDim(
      DimMgt.TypeToTableID5(ServLine2.Type),ServLine2."No.",
      DATABASE::Job,ServLine2."Job No.",
      DATABASE::"Responsibility Center",ServLine2."Responsibility Center");
    OnBeforeServLineInsert(ServLine2,ServHeader2,ServContract); <=====================
    ServLine2.INSERT;
Codeunit<ServContractManagement>.PROCEDURE<OnCreateContractLineCreditMemoOnBeforeCalcCreditAmount>
  Raised in: Codeunit<ServContractManagement>.PROCEDURE<CreateContractLineCreditMemo>
    Code lines:
    ...
    
          LastIncomePostingDate := "Invoiced to Date";
          IF FirstPrepaidPostingDate <> 0D THEN
            LastIncomePostingDate := FirstPrepaidPostingDate - 1;
          WDate := "Contract Expiration Date";
          OnCreateContractLineCreditMemoOnBeforeCalcCreditAmount(WDate,ServContractHeader,FromContractLine); <=====================
          CreditAmount :=
            ROUND(
              CalcContractLineAmount("Line Amount",
                WDate,"Invoiced to Date"),
    ...
Codeunit<ServContractManagement>.PROCEDURE<OnCreateDetailedServLineOnBeforeServLineInsertFirstLine>
  Raised in: Codeunit<ServContractManagement>.PROCEDURE<CreateDetailedServLine>
    Code lines:
    ...
      IF ServMgtSetup."Contract Line Inv. Text Code" <> '' THEN BEGIN
        StdText.GET(ServMgtSetup."Contract Line Inv. Text Code");
        ServLine.Description := StdText.Description;
      END ELSE
        ServLine.Description := Text003;
      OnCreateDetailedServLineOnBeforeServLineInsertFirstLine(ServLine,ServContractHeader); <=====================
      ServLine.INSERT;
    END;
    
    IF NewContract THEN BEGIN
    ...
Codeunit<ServContractManagement>.PROCEDURE<OnCreateDetailedServLineOnBeforeServLineInsertNewContract>
  Raised in: Codeunit<ServContractManagement>.PROCEDURE<CreateDetailedServLine>
    Code lines:
    ...
            StdText.TABLECAPTION,StdText.Code,StdText.FIELDCAPTION(Description),
            FORMAT(STRLEN(TempServLineDescription) - MAXSTRLEN(ServLine.Description)));
        ServLine.Description := COPYSTR(TempServLineDescription,1,MAXSTRLEN(ServLine.Description));
      END ELSE
        ServLine.Description := STRSUBSTNO(Text002,ServContractHeader."Contract No.");
      OnCreateDetailedServLineOnBeforeServLineInsertNewContract(ServLine,ServContractHeader); <=====================
      ServLine.INSERT;
    END;
    
    CreateDescriptionServiceLines(ServContractLine."Service Item No.",ServContractLine.Description);
Codeunit<ServContractManagement>.PROCEDURE<OnCreateHeadingServLineOnBeforeServLineInsert>
  Raised in: Codeunit<ServContractManagement>.PROCEDURE<CreateHeadingServLine>
    Code lines:
    ...
          StdText.TABLECAPTION,StdText.Code,StdText.FIELDCAPTION(Description),
          FORMAT(STRLEN(TempServLineDescription) - MAXSTRLEN(ServLine.Description)));
      ServLine.Description := COPYSTR(TempServLineDescription,1,MAXSTRLEN(ServLine.Description));
    END ELSE
      ServLine.Description := STRSUBSTNO(Text002,ServContractHeader."Contract No.");
    OnCreateHeadingServLineOnBeforeServLineInsert(ServLine,ServContractHeader,ServHeader); <=====================
    ServLine.INSERT;
Codeunit<ServContractManagement>.PROCEDURE<OnCreateServiceLedgerEntryOnBeforeServLedgEntryInsert>
  Raised in: Codeunit<ServContractManagement>.PROCEDURE<CreateServiceLedgerEntry>
    Code lines:
    ...
                Currency."Amount Rounding Precision");
              ServLedgEntry."Cost Amount" := ServLedgEntry."Unit Cost" * ServLedgEntry."Charged Qty.";
              UpdateServLedgEntryAmount(ServLedgEntry,ServHeader2);
              ServLedgEntry."Entry No." := NextEntry;
              CalcInvAmounts(InvAmount,ServContractLine,LineInvFrom,InvTo);
              OnCreateServiceLedgerEntryOnBeforeServLedgEntryInsert(ServLedgEntry,ServContractHeader,ServContractLine); <=====================
              ServLedgEntry.INSERT;
    
              LastEntry := ServLedgEntry."Entry No.";
              NextEntry := NextEntry + 1;
    ...
Codeunit<ServContractManagement>.PROCEDURE<OnInsertMultipleServLedgEntriesOnBeforeServLedgEntryInsert>
  Raised in: Codeunit<ServContractManagement>.PROCEDURE<InsertMultipleServLedgEntries>
    Code lines:
    ...
    
      ServLedgEntry."Entry No." := NextEntry;
      UpdateServLedgEntryAmount(ServLedgEntry,ServHeader);
      ServLedgEntry."Posting Date" := DueDate;
      ServLedgEntry.Prepaid := TRUE;
      OnInsertMultipleServLedgEntriesOnBeforeServLedgEntryInsert(ServLedgEntry,ServContractHeader,ServContractLine); <=====================
      ServLedgEntry.INSERT;
      NextEntry += 1;
      DueDate := CALCDATE('<1M>',DueDate);
    END;
Codeunit<ServContractManagement>.PROCEDURE<OnServLedgEntryToServiceLineOnBeforeServLineInsert>
  Raised in: Codeunit<ServContractManagement>.PROCEDURE<ServLedgEntryToServiceLine>
    Code lines:
    ...
    
      "Shortcut Dimension 1 Code" := ServiceLedgerEntry."Global Dimension 1 Code";
      "Shortcut Dimension 2 Code" := ServiceLedgerEntry."Global Dimension 2 Code";
      "Dimension Set ID" := ServiceLedgerEntry."Dimension Set ID";
    
      OnServLedgEntryToServiceLineOnBeforeServLineInsert(ServLine,TotalServLine,TotalServLineLCY,ServHeader,ServLedgEntry); <=====================
      INSERT;
      CreateDim(
        DimMgt.TypeToTableID5(Type),"No.",
        DATABASE::Job,"Job No.",
    ...
Codeunit<Lock-OpenServContract>.PROCEDURE<OnAfterLockServContract>
  Raised in: Codeunit<Lock-OpenServContract>.PROCEDURE<LockServContract>
    Code lines:
    ...
      GET(FromServContractHeader."Contract Type",FromServContractHeader."Contract No.");
      "Change Status" := "Change Status"::Locked;
      MODIFY;
    END;
    
    OnAfterLockServContract(ServContractHeader); <=====================
Codeunit<Lock-OpenServContract>.PROCEDURE<OnAfterOpenServContract>
  Raised in: Codeunit<Lock-OpenServContract>.PROCEDURE<OpenServContract>
    Code lines:
    ...
        ERROR(Text001,Status);
      "Change Status" := "Change Status"::Open;
      MODIFY;
    END;
    
    OnAfterOpenServContract(ServContractHeader); <=====================
Codeunit<Lock-OpenServContract>.PROCEDURE<OnBeforeLockServContract>
  Raised in: Codeunit<Lock-OpenServContract>.PROCEDURE<LockServContract>
    Code lines:
    OnBeforeLockServContract(FromServContractHeader); <=====================
    
    ServContractHeader := FromServContractHeader;
    WITH ServContractHeader DO BEGIN
      IF "Change Status" = "Change Status"::Locked THEN
        EXIT;
      CALCFIELDS("Calcd. Annual Amount");
      TESTFIELD("Annual Amount","Calcd. Annual Amount");
      IF "Annual Amount" < 0 THEN
        ERROR(Text003);
    ...
Codeunit<Lock-OpenServContract>.PROCEDURE<OnErrorIfServContractLinesHaveZeroAmount>
  Raised in: Codeunit<Lock-OpenServContract>.PROCEDURE<LockServContract>
    Code lines:
    ...
        ServContractLine.RESET;
        ServContractLine.SETRANGE("Contract Type","Contract Type");
        ServContractLine.SETRANGE("Contract No.","Contract No.");
        ServContractLine.SETRANGE("Line Amount",0);
        RaiseError := NOT ServContractLine.ISEMPTY;
        OnErrorIfServContractLinesHaveZeroAmount(ServContractHeader,ServContractLine,RaiseError); <=====================
        IF RaiseError THEN
          ERROR(Text000,Status,"Contract Type",ServContractLine.FIELDCAPTION("Line Amount"));
        ServContractLine.RESET;
        ServContractLine.SETRANGE("Contract Type","Contract Type");
    ...
Codeunit<SignServContractDoc>.PROCEDURE<OnAddendumToContractOnBeforeCreateServiceLinesLedgerEntries>
  Raised in: Codeunit<SignServContractDoc>.PROCEDURE<AddendumToContract>
    Code lines:
    ...
              ServContractLine."Line Amount" / 12 * NoOfMonthsAndMParts,Currency."Amount Rounding Precision");
        UNTIL ServContractLine.NEXT = 0;
    END;
    
    IF InvoiceNow THEN BEGIN
      OnAddendumToContractOnBeforeCreateServiceLinesLedgerEntries(FromServContractHeader); <=====================
      CreateServiceLinesLedgerEntries(FromServContractHeader,TRUE);
    END;
    
    IF InvoicePrepaid AND FromServContractHeader.Prepaid THEN BEGIN
    ...
Codeunit<SignServContractDoc>.PROCEDURE<OnAfterCheckServContractQuote>
  Raised in: Codeunit<SignServContractDoc>.PROCEDURE<CheckServContractQuote>
    Code lines:
    ...
          FromServContractLine.TESTFIELD("Response Time (Hours)");
      UNTIL FromServContractLine.NEXT = 0;
    
    ServContractMgt.CopyCheckSCDimToTempSCDim(FromServContractHeader);
    
    OnAfterCheckServContractQuote(FromServContractHeader); <=====================
Codeunit<SignServContractDoc>.PROCEDURE<OnAfterSignContractQuote>
  Raised in: Codeunit<SignServContractDoc>.PROCEDURE<SignContractQuote>
    Code lines:
    ...
    
    IF NOT HideDialog THEN
      IF ServHeaderNo <> '' THEN
        MESSAGE(Text016,ServHeaderNo);
    
    OnAfterSignContractQuote(FromServContractHeader,ToServContractHeader); <=====================
Codeunit<SignServContractDoc>.PROCEDURE<OnAfterToServContractHeaderInsert>
  Raised in: Codeunit<SignServContractDoc>.PROCEDURE<SignContractQuote>
    Code lines:
    ...
      ToServContractHeader."Last Invoice Date" := ToServContractHeader."Starting Date";
      ToServContractHeader.VALIDATE("Last Invoice Period End",InvoiceTo);
    END;
    OnBeforeToServContractHeaderInsert(ToServContractHeader,FromServContractHeader);
    ToServContractHeader.INSERT;
    OnAfterToServContractHeaderInsert(ToServContractHeader,FromServContractHeader); <=====================
    
    IF ServMgtSetup."Register Contract Changes" THEN
      ContractChangeLog.LogContractChange(
        ToServContractHeader."Contract No.",0,ToServContractHeader.FIELDCAPTION(Status),0,
    ...
Codeunit<SignServContractDoc>.PROCEDURE<OnAfterToServContractLineInsert>
  Raised in: Codeunit<SignServContractDoc>.PROCEDURE<SignContractQuote>
    Code lines:
    ...
        ToServContractLine."Contract No." := FromServContractLine."Contract No.";
        ToServContractLine."Contract Status" := FromServContractLine."Contract Status"::Signed;
        ToServContractLine.SuspendStatusCheck(TRUE);
        OnBeforeToServContractLineInsert(ToServContractLine,FromServContractLine);
        ToServContractLine.INSERT(TRUE);
        OnAfterToServContractLineInsert(ToServContractLine,FromServContractLine); <=====================
        CLEAR(ServLogMgt);
        WPostLine := WPostLine + 1;
        Window.UPDATE(2,WPostLine);
      UNTIL FromServContractLine.NEXT = 0;
    ...
Codeunit<SignServContractDoc>.PROCEDURE<OnBeforeAddendumToContract>
  Raised in: Codeunit<SignServContractDoc>.PROCEDURE<AddendumToContract>
    Code lines:
    OnBeforeAddendumToContract(ServContractHeader); <=====================
    
    IF NOT HideDialog THEN
      CLEARALL;
    
    FromServContractHeader := ServContractHeader;
    IF (FromServContractHeader."Invoice Period" = FromServContractHeader."Invoice Period"::None) OR
       (FromServContractHeader."Next Invoice Date" = 0D)
    THEN
      EXIT;
    ...
Codeunit<SignServContractDoc>.PROCEDURE<OnBeforeCheckServContractHasZeroAmounts>
  Raised in: Codeunit<SignServContractDoc>.PROCEDURE<CheckServContractHasZeroAmounts>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckServContractHasZeroAmounts(ServContractHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    ServContractLine.RESET;
    ServContractLine.SETRANGE("Contract Type",ServContractHeader."Contract Type");
    ServContractLine.SETRANGE("Contract No.",ServContractHeader."Contract No.");
    ServContractLine.SETRANGE("Line Amount",0);
    ServContractLine.SETFILTER("Line Discount %",'<%1',100);
    ...
Codeunit<SignServContractDoc>.PROCEDURE<OnBeforeCheckServContractQuote>
  Raised in: Codeunit<SignServContractDoc>.PROCEDURE<CheckServContractQuote>
    Code lines:
    OnBeforeCheckServContractQuote(FromServContractHeader); <=====================
    
    FromServContractHeader.TESTFIELD("Serv. Contract Acc. Gr. Code");
    FromServContractHeader.TESTFIELD("Service Period");
    FromServContractHeader.CALCFIELDS("Calcd. Annual Amount");
    IF FromServContractHeader."Calcd. Annual Amount" < 0 THEN
      ERROR(Text019);
    FromServContractHeader.TESTFIELD("Annual Amount",FromServContractHeader."Calcd. Annual Amount");
    ServContractAccGr.GET(FromServContractHeader."Serv. Contract Acc. Gr. Code");
    ServContractAccGr.TESTFIELD("Non-Prepaid Contract Acc.");
    ...
Codeunit<SignServContractDoc>.PROCEDURE<OnBeforeServContractHeaderModify>
  Raised in: Codeunit<SignServContractDoc>.PROCEDURE<SignContract>
    Code lines:
    ...
      ServContractHeader."Annual Amount",'');
    
    ServContractHeader.Status := ServContractHeader.Status::Signed;
    ServContractHeader."Change Status" := ServContractHeader."Change Status"::Locked;
    
    OnBeforeServContractHeaderModify(ServContractHeader,FromServContractHeader); <=====================
    ServContractHeader.MODIFY;
    
    ServContractLine.RESET;
    ServContractLine.SETRANGE("Contract Type",ServContractHeader."Contract Type");
    ...
Codeunit<SignServContractDoc>.PROCEDURE<OnBeforeSignContract>
  Raised in: Codeunit<SignServContractDoc>.PROCEDURE<SignContract>
    Code lines:
    OnBeforeSignContract(FromServContractHeader); <=====================
    
    IF NOT HideDialog THEN
      CLEARALL;
    
    IF NOT HideDialog THEN
      IF NOT ConfirmManagement.ConfirmProcess(
           STRSUBSTNO(Text010,FromServContractHeader."Contract No."),TRUE)
      THEN
        EXIT;
    ...
Codeunit<SignServContractDoc>.PROCEDURE<OnBeforeSignContractQuote>
  Raised in: Codeunit<SignServContractDoc>.PROCEDURE<SignContractQuote>
    Code lines:
    OnBeforeSignContractQuote(FromServContractHeader); <=====================
    
    IF NOT HideDialog THEN
      CLEARALL;
    CheckServContractQuote(FromServContractHeader);
    IF NOT HideDialog THEN
      IF NOT ConfirmManagement.ConfirmProcess(Text011,TRUE) THEN
        EXIT;
    IF NOT HideDialog THEN
      IF NOT CheckServContractNextPlannedServiceDate(FromServContractHeader) THEN
    ...
Codeunit<SignServContractDoc>.PROCEDURE<OnBeforeToServContractHeaderInsert>
  Raised in: Codeunit<SignServContractDoc>.PROCEDURE<SignContractQuote>
    Code lines:
    ...
    ToServContractHeader."Contract Type" := ToServContractHeader."Contract Type"::Contract;
    IF InvoiceNow THEN BEGIN
      ToServContractHeader."Last Invoice Date" := ToServContractHeader."Starting Date";
      ToServContractHeader.VALIDATE("Last Invoice Period End",InvoiceTo);
    END;
    OnBeforeToServContractHeaderInsert(ToServContractHeader,FromServContractHeader); <=====================
    ToServContractHeader.INSERT;
    OnAfterToServContractHeaderInsert(ToServContractHeader,FromServContractHeader);
    
    IF ServMgtSetup."Register Contract Changes" THEN
    ...
Codeunit<SignServContractDoc>.PROCEDURE<OnBeforeToServContractLineInsert>
  Raised in: Codeunit<SignServContractDoc>.PROCEDURE<SignContractQuote>
    Code lines:
    ...
        ToServContractLine := FromServContractLine;
        ToServContractLine."Contract Type" := ToServContractLine."Contract Type"::Contract;
        ToServContractLine."Contract No." := FromServContractLine."Contract No.";
        ToServContractLine."Contract Status" := FromServContractLine."Contract Status"::Signed;
        ToServContractLine.SuspendStatusCheck(TRUE);
        OnBeforeToServContractLineInsert(ToServContractLine,FromServContractLine); <=====================
        ToServContractLine.INSERT(TRUE);
        OnAfterToServContractLineInsert(ToServContractLine,FromServContractLine);
        CLEAR(ServLogMgt);
        WPostLine := WPostLine + 1;
    ...
Codeunit<SignServContractDoc>.PROCEDURE<OnSignContractQuoteOnBeforeToServContractHeaderModify>
  Raised in: Codeunit<SignServContractDoc>.PROCEDURE<SignContractQuote>
    Code lines:
    ...
    IF InvoicingStartingPeriod AND
       NOT ToServContractHeader.Prepaid AND
       InvoiceNow
    THEN BEGIN
      ToServContractHeader.VALIDATE("Last Invoice Date",InvoiceTo);
      OnSignContractQuoteOnBeforeToServContractHeaderModify(ToServContractHeader); <=====================
      ToServContractHeader.MODIFY;
    END;
    
    ToServContractHeader.Status := ToServContractHeader.Status::Signed;
    ...
Codeunit<Service-Calc. Discount>.PROCEDURE<OnAfterCalcServDiscount>
  Raised in: Codeunit<Service-Calc. Discount>.PROCEDURE<CalculateInvoiceDiscount>
    Code lines:
    ...
        ServiceLine2.SetServHeader(ServHeader);
        ServiceLine2.UpdateVATOnLines(0,ServHeader,ServiceLine2,TempVATAmountLine);
      END;
    END;
    
    OnAfterCalcServDiscount(ServHeader); <=====================
Codeunit<Service-Calc. Discount>.PROCEDURE<OnBeforeCalcServDiscount>
  Raised in: Codeunit<Service-Calc. Discount>.PROCEDURE<CalculateInvoiceDiscount>
    Code lines:
    OnBeforeCalcServDiscount(ServHeader); <=====================
    
    SalesSetup.GET;
    WITH ServiceLine DO BEGIN
      LOCKTABLE;
      ServHeader.TESTFIELD("Customer Posting Group");
      CustPostingGr.GET(ServHeader."Customer Posting Group");
    
      IF NOT IsServiceChargeUpdated(ServiceLine) THEN BEGIN
        ServiceLine2.RESET;
    ...
Codeunit<Service-Post and Send>.PROCEDURE<OnAfterPostAndBeforeSend>
  Raised in: Codeunit<Service-Post and Send>.PROCEDURE<Code>
    Code lines:
    ...
    TempDocumentSendingProfile.CheckElectronicSendingEnabled;
    ValidateElectronicFormats(TempDocumentSendingProfile);
    
    CODEUNIT.RUN(CODEUNIT::"Service-Post",ServiceHeader);
    
    OnAfterPostAndBeforeSend(ServiceHeader); <=====================
    COMMIT;
    
    ServicePost.SendPostedDocumentRecord(ServiceHeader,TempDocumentSendingProfile);
Codeunit<Service-Post and Send>.PROCEDURE<OnBeforeCode>
  Raised in: Codeunit<Service-Post and Send>.PROCEDURE<Code>
    Code lines:
    OnBeforeCode(ServiceHeader); <=====================
    
    WITH ServiceHeader DO
      CASE "Document Type" OF
        "Document Type"::Invoice,
        "Document Type"::"Credit Memo":
          IF NOT ConfirmPostAndSend(ServiceHeader,TempDocumentSendingProfile) THEN
            EXIT;
        ELSE
          ERROR(NotSupportedDocumentTypeErr,"Document Type");
    ...
Codeunit<Service-Post>.PROCEDURE<OnAfterFinalizePostingOnBeforeCommit>
  Raised in: Codeunit<Service-Post>.PROCEDURE<PostWithLines>
    Code lines:
    ...
        GenJnlPostPreview.ThrowError;
      END;
    
      Finalize(ServiceHeader);
    
      OnAfterFinalizePostingOnBeforeCommit( <=====================
        PassedServHeader,PassedServLine,ServDocumentsMgt,PassedShip,PassedConsume,PassedInvoice);
    END;
    
    IF WhseShip THEN
    ...
Codeunit<Service-Post>.PROCEDURE<OnAfterInitialize>
  Raised in: Codeunit<Service-Post>.PROCEDURE<Initialize>
    Code lines:
    ...
    IF (NOT HideValidationDialog OR NOT GUIALLOWED) AND
       Invoice AND (PassedServiceHeader."Document Type" = PassedServiceHeader."Document Type"::Order)
    THEN
      ServDocumentsMgt.CheckAdjustedLines;
    
    OnAfterInitialize(PassedServiceHeader,PassedServiceLine); <=====================
Codeunit<Service-Post>.PROCEDURE<OnAfterPostServiceDoc>
  Raised in: Codeunit<Service-Post>.PROCEDURE<PostWithLines>
    Code lines:
    ...
    
    IF WhseShip THEN
      WhseServiceRelease.Release(ServiceHeader);
    COMMIT;
    
    OnAfterPostServiceDoc(ServiceHeader,ServShipmentNo,ServInvoiceNo,ServCrMemoNo); <=====================
    
    Window.CLOSE;
    UpdateAnalysisView.UpdateAll(0,TRUE);
    UpdateItemAnalysisView.UpdateAll(0,TRUE);
    ...
Codeunit<Service-Post>.PROCEDURE<OnAfterPostWithLines>
  Raised in: Codeunit<Service-Post>.PROCEDURE<PostWithLines>
    Code lines:
    ...
    UpdateAnalysisView.UpdateAll(0,TRUE);
    UpdateItemAnalysisView.UpdateAll(0,TRUE);
    
    PassedServHeader := ServiceHeader;
    
    OnAfterPostWithLines(PassedServHeader); <=====================
Codeunit<Service-Post>.PROCEDURE<OnBeforeInitialize>
  Raised in: Codeunit<Service-Post>.PROCEDURE<Initialize>
    Code lines:
    OnBeforeInitialize(PassedServiceHeader,PassedServiceLine,PassedShip,PassedConsume,PassedInvoice,PreviewMode); <=====================
    
    SetPostingOptions(PassedShip,PassedConsume,PassedInvoice);
    TestMandatoryFields(PassedServiceHeader,PassedServiceLine);
    ServDocumentsMgt.Initialize(PassedServiceHeader,PassedServiceLine);
    
    // Also calls procedure of the same name from ServDocMgt.
    // Might change the value of global Ship,Consume,Invoice vars.
    CheckAndSetPostingConstants(PassedServiceHeader,PassedShip,PassedConsume,PassedInvoice);
    
    ...
Codeunit<Service-Post>.PROCEDURE<OnBeforePostWithLines>
  Raised in: Codeunit<Service-Post>.PROCEDURE<PostWithLines>
    Code lines:
    OnBeforePostWithLines(PassedServHeader,PassedServLine,PassedShip,PassedConsume,PassedInvoice); <=====================
    
    ServiceHeader := PassedServHeader;
    
    CLEAR(ServDocumentsMgt);
    IF PostingDateExists AND (ReplacePostingDate OR (ServiceHeader."Posting Date" = 0D)) THEN BEGIN
      ServiceHeader.VALIDATE("Posting Date",PostingDate);
      ServiceHeader.VALIDATE("Currency Code");
    END;
    IF PostingDateExists AND (ReplaceDocumentDate OR (ServiceHeader."Document Date" = 0D)) THEN
    ...
Codeunit<Service-Post>.PROCEDURE<OnBeforeRun>
  Raised in: Codeunit<Service-Post>.<OnRun>
    Code lines:
    OnBeforeRun(Rec); <=====================
    
    PostWithLines(Rec,DummyServLine,Ship,Consume,Invoice);
Codeunit<Service-Post>.PROCEDURE<OnBeforeServiceCrMemoHeaderInsert>
  Raised in: Codeunit<Service-Post>.PROCEDURE<DeleteHeader>
    Code lines:
    ...
        ServiceInvLine.Description := SourceCode.Description;
        ServiceInvLine.INSERT;
      END;
    
      IF ServiceCrMemoHeader."No." <> '' THEN BEGIN
        OnBeforeServiceCrMemoHeaderInsert(ServiceCrMemoHeader,ServiceHeader); <=====================
        ServiceCrMemoHeader.INSERT;
        ServiceCrMemoLine.INIT;
        ServiceCrMemoLine."Document No." := ServiceCrMemoHeader."No.";
        ServiceCrMemoLine."Line No." := 10000;
    ...
Codeunit<Service-Post>.PROCEDURE<OnBeforeServiceInvHeaderInsert>
  Raised in: Codeunit<Service-Post>.PROCEDURE<DeleteHeader>
    Code lines:
    ...
        ServiceShptLine.Description := SourceCode.Description;
        ServiceShptLine.INSERT;
      END;
    
      IF ServiceInvHeader."No." <> '' THEN BEGIN
        OnBeforeServiceInvHeaderInsert(ServiceInvHeader,ServiceHeader); <=====================
        ServiceInvHeader.INSERT;
        ServiceInvLine.INIT;
        ServiceInvLine."Document No." := ServiceInvHeader."No.";
        ServiceInvLine."Line No." := 10000;
    ...
Codeunit<Service-Post>.PROCEDURE<OnBeforeServiceShptHeaderInsert>
  Raised in: Codeunit<Service-Post>.PROCEDURE<DeleteHeader>
    Code lines:
    WITH ServiceHeader DO BEGIN
      TestDeleteHeader(ServiceHeader,ServiceShptHeader,ServiceInvHeader,ServiceCrMemoHeader);
      IF ServiceShptHeader."No." <> '' THEN BEGIN
        OnBeforeServiceShptHeaderInsert(ServiceShptHeader,ServiceHeader); <=====================
        ServiceShptHeader.INSERT;
        ServiceShptLine.INIT;
        ServiceShptLine."Document No." := ServiceShptHeader."No.";
        ServiceShptLine."Line No." := 10000;
        ServiceShptLine.Description := SourceCode.Description;
        ServiceShptLine.INSERT;
    ...
Codeunit<Service-Post (Yes/No)>.PROCEDURE<OnAfterConfirmPost>
  Raised in: Codeunit<Service-Post (Yes/No)>.PROCEDURE<Code>
    Code lines:
    ...
                   STRSUBSTNO(PostConfirmQst,"Document Type"),TRUE)
              THEN
                EXIT;
        END;
    
      OnAfterConfirmPost(PassedServiceHeader,Ship,Consume,Invoice); <=====================
    
      ServicePost.SetPreviewMode(PreviewMode);
      ServicePost.PostWithLines(PassedServiceHeader,PassedServLine,Ship,Consume,Invoice);
    
    ...
Codeunit<Service-Post (Yes/No)>.PROCEDURE<OnAfterPost>
  Raised in: Codeunit<Service-Post (Yes/No)>.PROCEDURE<Code>
    Code lines:
    ...
    
      IF NOT PreviewMode THEN
        COMMIT;
    END;
    
    OnAfterPost(PassedServiceHeader); <=====================
Codeunit<Service-Post (Yes/No)>.PROCEDURE<OnBeforeConfirmServPost>
  Raised in: Codeunit<Service-Post (Yes/No)>.PROCEDURE<Code>
    Code lines:
    IF NOT PassedServiceHeader.FIND THEN
      ERROR(NothingToPostErr);
    
    HideDialog := FALSE;
    IsHandled := FALSE;
    OnBeforeConfirmServPost(PassedServiceHeader,HideDialog,Ship,Consume,Invoice,IsHandled,PreviewMode,PassedServLine); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH PassedServiceHeader DO BEGIN
    ...
Codeunit<Service-Post+Print>.PROCEDURE<OnAfterConfirmPost>
  Raised in: Codeunit<Service-Post+Print>.PROCEDURE<Code>
    Code lines:
    ...
        ELSE
          IF NOT ConfirmManagement.ConfirmProcess(STRSUBSTNO(Text001,"Document Type"),TRUE) THEN
            EXIT;
      END;
    
      OnAfterConfirmPost(ServiceHeader,Ship,Consume,Invoice); <=====================
    
      ServicePost.PostWithLines(ServiceHeader,PassedServLine,Ship,Consume,Invoice);
      OnAfterPost(ServiceHeader);
    
    ...
Codeunit<Service-Post+Print>.PROCEDURE<OnAfterPost>
  Raised in: Codeunit<Service-Post+Print>.PROCEDURE<Code>
    Code lines:
    ...
      END;
    
      OnAfterConfirmPost(ServiceHeader,Ship,Consume,Invoice);
    
      ServicePost.PostWithLines(ServiceHeader,PassedServLine,Ship,Consume,Invoice);
      OnAfterPost(ServiceHeader); <=====================
    
      GetReport(ServiceHeader);
      COMMIT;
    END;
Codeunit<Service-Post+Print>.PROCEDURE<OnBeforeConfirmPost>
  Raised in: Codeunit<Service-Post+Print>.PROCEDURE<Code>
    Code lines:
    HideDialog := FALSE;
    IsHandled := FALSE;
    OnBeforeConfirmPost(ServiceHeader,HideDialog,Ship,Consume,Invoice,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH ServiceHeader DO BEGIN
      CASE "Document Type" OF
        "Document Type"::Order:
          BEGIN
    ...
Codeunit<Serv-Amounts Mgt.>.PROCEDURE<OnAfterDivideAmount>
  Raised in: Codeunit<Serv-Amounts Mgt.>.PROCEDURE<DivideAmount>
    Code lines:
    ...
          END;
    
        TempVATAmountLineRemainder.MODIFY;
      END;
    
    OnAfterDivideAmount(ServiceHeader,ServiceLine,QtyType,ServLineQty,TempVATAmountLine,TempVATAmountLineRemainder); <=====================
Codeunit<Serv-Amounts Mgt.>.PROCEDURE<OnAfterFillInvoicePostBuffer>
  Raised in: Codeunit<Serv-Amounts Mgt.>.PROCEDURE<FillInvPostingBuffer>
    Code lines:
    ...
          InvPostingBuffer[1].SetAccount(
            GenPostingSetup.GetSalesAccount,TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY);
    END;
    InvPostingBuffer[1].UpdateVATBase(TotalVATBase,TotalVATBaseACY);
    
    OnAfterFillInvoicePostBuffer(InvPostingBuffer[1],ServiceLine,InvPostingBuffer[2],SuppressCommit); <=====================
    
    UpdInvPostingBuffer(InvPostingBuffer,ServiceLine);
Codeunit<Serv-Amounts Mgt.>.PROCEDURE<OnAfterIncrAmount>
  Raised in: Codeunit<Serv-Amounts Mgt.>.PROCEDURE<IncrAmount>
    Code lines:
    ...
      Increment(TotalServiceLine."Line Discount Amount","Line Discount Amount");
      Increment(TotalServiceLine."Inv. Discount Amount","Inv. Discount Amount");
      Increment(TotalServiceLine."Inv. Disc. Amount to Invoice","Inv. Disc. Amount to Invoice");
    END;
    
    OnAfterIncrAmount(TotalServiceLine,ServiceLine); <=====================
Codeunit<Serv-Amounts Mgt.>.PROCEDURE<OnAfterReverseAmount>
  Raised in: Codeunit<Serv-Amounts Mgt.>.PROCEDURE<ReverseAmount>
    Code lines:
    ...
      "Amount Including VAT" := -"Amount Including VAT";
      "Line Discount Amount" := -"Line Discount Amount";
      "Inv. Discount Amount" := -"Inv. Discount Amount";
    END;
    
    OnAfterReverseAmount(ServiceLine); <=====================
Codeunit<Serv-Amounts Mgt.>.PROCEDURE<OnBeforeDivideAmount>
  Raised in: Codeunit<Serv-Amounts Mgt.>.PROCEDURE<DivideAmount>
    Code lines:
    IF RoundingLineInserted AND (RoundingLineNo = ServiceLine."Line No.") THEN
      EXIT;
    
    OnBeforeDivideAmount(ServiceHeader,ServiceLine,QtyType,ServLineQty,TempVATAmountLine,TempVATAmountLineRemainder); <=====================
    
    WITH ServiceLine DO
      IF ServLineQty = 0 THEN BEGIN
        "Line Amount" := 0;
        "Line Discount Amount" := 0;
        "Inv. Discount Amount" := 0;
    ...
Codeunit<Serv-Amounts Mgt.>.PROCEDURE<OnBeforeInvoiceRoundingAmount>
  Raised in: Codeunit<Serv-Amounts Mgt.>.PROCEDURE<InvoiceRounding>
    Code lines:
    ...
          TotalServiceLine."Amount Including VAT",
          Currency."Invoice Rounding Precision",
          Currency.InvoiceRoundingDirection),
        Currency."Amount Rounding Precision");
    
    OnBeforeInvoiceRoundingAmount( <=====================
      ServiceHeader,TotalServiceLine."Amount Including VAT",UseTempData,InvoiceRoundingAmount,SuppressCommit);
    IF InvoiceRoundingAmount <> 0 THEN BEGIN
      CustPostingGr.GET(ServiceHeader."Customer Posting Group");
      WITH ServiceLine DO BEGIN
    ...
Codeunit<Serv-Amounts Mgt.>.PROCEDURE<OnBeforeRoundAmount>
  Raised in: Codeunit<Serv-Amounts Mgt.>.PROCEDURE<RoundAmount>
    Code lines:
    OnBeforeRoundAmount(ServiceHeader,ServiceLine,ServLineQty); <=====================
    
    WITH ServiceLine DO BEGIN
      IncrAmount(ServiceLine,TotalServiceLine,ServiceHeader."Prices Including VAT");
      Increment(TotalServiceLine."Net Weight",ROUND(ServLineQty * "Net Weight",UOMMgt.WeightRndPrecision));
      Increment(TotalServiceLine."Gross Weight",ROUND(ServLineQty * "Gross Weight",UOMMgt.WeightRndPrecision));
      Increment(TotalServiceLine."Unit Volume",ROUND(ServLineQty * "Unit Volume",UOMMgt.CubageRndPrecision));
      Increment(TotalServiceLine.Quantity,ServLineQty);
      IF "Units per Parcel" > 0 THEN
        Increment(
    ...
Codeunit<Serv-Amounts Mgt.>.PROCEDURE<OnBeforeUpdateInvPostBuffer>
  Raised in: Codeunit<Serv-Amounts Mgt.>.PROCEDURE<UpdInvPostingBuffer>
    Code lines:
    ...
    IF InvPostingBuffer[1].Type = InvPostingBuffer[1].Type::"Fixed Asset" THEN BEGIN
      FALineNo := FALineNo + 1;
      InvPostingBuffer[1]."Fixed Asset Line No." := FALineNo;
    END;
    
    OnBeforeUpdateInvPostBuffer(InvPostingBuffer[1]); <=====================
    
    InvPostingBuffer[2] := InvPostingBuffer[1];
    IF InvPostingBuffer[2].FIND THEN BEGIN
      InvPostingBuffer[2].Amount := InvPostingBuffer[2].Amount + InvPostingBuffer[1].Amount;
    ...
Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<OnAfterPostBalancingEntry>
  Raised in: Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<PostBalancingEntry>
    Code lines:
    ...
          TotalServiceLineLCY."Amount Including VAT" +
          ROUND(CustLedgEntry."Remaining Pmt. Disc. Possible" / CustLedgEntry."Adjusted Currency Factor");
    
      OnBeforePostBalancingEntry(GenJnlLine,ServiceHeader);
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostBalancingEntry(GenJnlLine,ServiceHeader,GenJnlPostLine); <=====================
    END;
Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<OnAfterPostCustomerEntry>
  Raised in: Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<PostCustomerEntry>
    Code lines:
    ...
      "Inv. Discount (LCY)" := -TotalServiceLineLCY."Inv. Discount Amount";
      "System-Created Entry" := TRUE;
    
      OnBeforePostCustomerEntry(GenJnlLine,ServiceHeader);
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostCustomerEntry(GenJnlLine,ServiceHeader,GenJnlPostLine); <=====================
    END;
Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<OnAfterPostInvoicePostBuffer>
  Raised in: Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<PostInvoicePostBufferLine>
    Code lines:
    ...
      CopyFromInvoicePostBuffer(InvoicePostBuffer);
      "Gen. Posting Type" := "Gen. Posting Type"::Sale;
    
      OnBeforePostInvoicePostBuffer(GenJnlLine,InvoicePostBuffer,ServiceHeader,GenJnlPostLine);
      GLEntryNo := GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostInvoicePostBuffer(GenJnlLine,InvoicePostBuffer,ServiceHeader,GLEntryNo,GenJnlPostLine); <=====================
    END;
Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<OnAfterTransferValuesToJobJnlLine>
  Raised in: Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<PostJobJnlLine>
    Code lines:
    ...
      JobJnlLine."Source Code" := SourceCodeSetup."Service Management";
      JobJnlLine."Work Type Code" := "Work Type Code";
      JobJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
      JobJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
      JobJnlLine."Dimension Set ID" := "Dimension Set ID";
      OnAfterTransferValuesToJobJnlLine(JobJnlLine,ServLine); <=====================
    END;
    
    JobJnlPostLine.RunWithCheck(JobJnlLine);
    EXIT(TRUE);
Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<OnBeforePostBalancingEntry>
  Raised in: Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<PostBalancingEntry>
    Code lines:
    ...
      ELSE
        "Amount (LCY)" :=
          TotalServiceLineLCY."Amount Including VAT" +
          ROUND(CustLedgEntry."Remaining Pmt. Disc. Possible" / CustLedgEntry."Adjusted Currency Factor");
    
      OnBeforePostBalancingEntry(GenJnlLine,ServiceHeader); <=====================
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostBalancingEntry(GenJnlLine,ServiceHeader,GenJnlPostLine);
    END;
Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<OnBeforePostCustomerEntry>
  Raised in: Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<PostCustomerEntry>
    Code lines:
    ...
      "Sales/Purch. (LCY)" := -TotalServiceLineLCY.Amount;
      "Profit (LCY)" := -(TotalServiceLineLCY.Amount - TotalServiceLineLCY."Unit Cost (LCY)");
      "Inv. Discount (LCY)" := -TotalServiceLineLCY."Inv. Discount Amount";
      "System-Created Entry" := TRUE;
    
      OnBeforePostCustomerEntry(GenJnlLine,ServiceHeader); <=====================
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostCustomerEntry(GenJnlLine,ServiceHeader,GenJnlPostLine);
    END;
Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<OnBeforePostInvoicePostBuffer>
  Raised in: Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<PostInvoicePostBufferLine>
    Code lines:
    ...
    
      CopyFromServiceHeader(ServiceHeader);
      CopyFromInvoicePostBuffer(InvoicePostBuffer);
      "Gen. Posting Type" := "Gen. Posting Type"::Sale;
    
      OnBeforePostInvoicePostBuffer(GenJnlLine,InvoicePostBuffer,ServiceHeader,GenJnlPostLine); <=====================
      GLEntryNo := GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostInvoicePostBuffer(GenJnlLine,InvoicePostBuffer,ServiceHeader,GLEntryNo,GenJnlPostLine);
    END;
Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<OnBeforePostItemJnlLine>
  Raised in: Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
            ServiceLine,ItemJnlLine,-QtyToBeShippedBase,CheckApplFromItemEntry);
    
      IF CheckApplFromItemEntry THEN
        ServiceLine.TESTFIELD("Appl.-from Item Entry");
    
      OnBeforePostItemJnlLine( <=====================
        ItemJnlLine,ServShptHeader,ServiceLine,GenJnlLineDocNo,
        QtyToBeShipped,QtyToBeShippedBase,QtyToBeInvoiced,QtyToBeInvoicedBase);
    
      ItemJnlPostLine.RunWithCheck(ItemJnlLine);
    ...
Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<OnBeforePostJobJnlLine>
  Raised in: Codeunit<Serv-Posting Journals Mgt.>.PROCEDURE<PostJobJnlLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforePostJobJnlLine(ServHeader,ServLine,QtyToBeConsumed,Result,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(Result);
    
    WITH ServLine DO BEGIN
      IF ("Job No." = '') OR (QtyToBeConsumed = 0) THEN
        EXIT(FALSE);
    
      TESTFIELD("Job Task No.");
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterCheckCertificateOfSupplyStatus>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<CheckCertificateOfSupplyStatus>
    Code lines:
    ...
      IF VATPostingSetup.GET(ServShptHeader."VAT Bus. Posting Group",ServShptLine."VAT Prod. Posting Group") AND
         VATPostingSetup."Certificate of Supply Required"
      THEN BEGIN
        CertificateOfSupply.InitFromService(ServShptHeader);
        CertificateOfSupply.SetRequired(ServShptHeader."No.");
        OnAfterCheckCertificateOfSupplyStatus(ServShptHeader,ServShptLine); <=====================
      END;
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterFinalize>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<Finalize>
    Code lines:
    ...
      FinalizeLines;
      FinalizeItemLines;
      FinalizeHeader(PassedServHeader);
    END;
    
    OnAfterFinalize(PassedServHeader); <=====================
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterFinalizeCrMemoDocument>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<FinalizeCrMemoDocument>
    Code lines:
    ...
        PServCrMemoLine.COPY(ServCrMemoLine);
        PServCrMemoLine.INSERT;
      UNTIL ServCrMemoLine.NEXT = 0;
    ServCrMemoLine.DELETEALL;
    
    OnAfterFinalizeCrMemoDocument(ServCrMemoHeader); <=====================
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterFinalizeHeader>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<FinalizeHeader>
    Code lines:
    PassedServHeader.COPY(ServHeader);
    ServHeader.DELETEALL;
    
    OnAfterFinalizeHeader(PassedServHeader); <=====================
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterFinalizeInvoiceDocument>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<FinalizeInvoiceDocument>
    Code lines:
    ...
        PServInvLine.COPY(ServInvLine);
        PServInvLine.INSERT;
      UNTIL ServInvLine.NEXT = 0;
    ServInvLine.DELETEALL;
    
    OnAfterFinalizeInvoiceDocument(ServInvHeader); <=====================
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterFinalizeShipmentDocument>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<FinalizeShipmentDocument>
    Code lines:
    ...
        PServShptLine.COPY(ServShptLine);
        PServShptLine.INSERT;
      UNTIL ServShptLine.NEXT = 0;
    ServShptLine.DELETEALL;
    
    OnAfterFinalizeShipmentDocument(ServShptHeader); <=====================
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterInitialize>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<Initialize>
    Code lines:
    ...
    SrcCode := SrcCodeSetup."Service Management";
    ServPostingJnlsMgt.Initialize(ServHeader,Consume,Invoice);
    ServAmountsMgt.Initialize(ServHeader."Currency Code"); // roundingLineInserted is set to FALSE;
    TrackingSpecificationExists := FALSE;
    
    OnAfterInitialize(PassedServiceHeader,PassedServiceLine,CloseCondition); <=====================
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterPrepareCrMemoHeader>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareCrMemoHeader>
    Code lines:
    ...
      ServOrderMgt.CopyCommentLines(
        DummyServCommentLine."Table Name"::"Service Header",
        DummyServCommentLine."Table Name"::"Service Cr.Memo Header",
        "No.",ServCrMemoHeader."No.");
    
      OnAfterPrepareCrMemoHeader(ServCrMemoHeader,ServHeader); <=====================
      EXIT(ServCrMemoHeader."No.");
    END;
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterPrepareDocument>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareDocument>
    Code lines:
    ...
          ServItemLine.COPY(PServItemLine);
          ServItemLine.INSERT; // temptable
        UNTIL PServItemLine.NEXT = 0;
    END;
    
    OnAfterPrepareDocument(PassedServHeader,PassedServLine); <=====================
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterPrepareInvoiceHeader>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareInvoiceHeader>
    Code lines:
    ...
        ServOrderMgt.CopyCommentLinesWithSubType(
          DummyServCommentLine."Table Name"::"Service Header",
          DummyServCommentLine."Table Name"::"Service Invoice Header",
          "No.",ServInvHeader."No.","Document Type");
    
      OnAfterPrepareInvoiceHeader(ServInvHeader,ServHeader); <=====================
      EXIT(ServInvHeader."No.");
    END;
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterPrepareShipmentHeader>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareShipmentHeader>
    Code lines:
    ...
        END;
      END;
    
      ServItemMgt.CopyReservationEntryService(ServHeader);
    
      OnAfterPrepareShipmentHeader(ServShptHeader,ServHeader); <=====================
      EXIT(ServShptHeader."No.");
    END;
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterServCrMemoHeaderInsert>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareCrMemoHeader>
    Code lines:
    ...
      ServCrMemoHeader."Source Code" := SrcCode;
      ServCrMemoHeader."User ID" := USERID;
      ServCrMemoHeader."No. Printed" := 0;
      OnBeforeServCrMemoHeaderInsert(ServCrMemoHeader,ServHeader);
      ServCrMemoHeader.INSERT;
      OnAfterServCrMemoHeaderInsert(ServCrMemoHeader,ServHeader); <=====================
    
      CLEAR(ServLogMgt);
      ServLogMgt.ServCrMemoPost("No.",ServCrMemoHeader."No.");
    
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterServCrMemoLineInsert>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareCrMemoLine>
    Code lines:
    ...
      ServCrMemoLine."Quantity (Base)" := "Qty. to Invoice (Base)";
      CALCFIELDS("Service Item Line Description");
      ServCrMemoLine."Service Item Line Description" := "Service Item Line Description";
      OnBeforeServCrMemoLineInsert(ServCrMemoLine,passedServLine);
      ServCrMemoLine.INSERT;
      OnAfterServCrMemoLineInsert(ServCrMemoLine,passedServLine); <=====================
    END;
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterServInvHeaderInsert>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareInvoiceHeader>
    Code lines:
    ...
      ServInvHeader."Source Code" := SrcCode;
      ServInvHeader."User ID" := USERID;
      ServInvHeader."No. Printed" := 0;
      OnBeforeServInvHeaderInsert(ServInvHeader,ServHeader);
      ServInvHeader.INSERT;
      OnAfterServInvHeaderInsert(ServInvHeader,ServHeader); <=====================
    
      CLEAR(ServLogMgt);
      CASE "Document Type" OF
        "Document Type"::Invoice:
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterServInvLineInsert>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareInvoiceLine>
    Code lines:
    ...
      ServInvLine."Quantity (Base)" := "Qty. to Invoice (Base)";
      CALCFIELDS("Service Item Line Description");
      ServInvLine."Service Item Line Description" := "Service Item Line Description";
      OnBeforeServInvLineInsert(ServInvLine,passedServLine);
      ServInvLine.INSERT;
      OnAfterServInvLineInsert(ServInvLine,passedServLine); <=====================
    END;
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterServShptHeaderInsert>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareShipmentHeader>
    Code lines:
    ...
        ServShptHeader."Source Code" := SrcCode;
        ServShptHeader."User ID" := USERID;
        ServShptHeader."No. Printed" := 0;
        OnBeforeServShptHeaderInsert(ServShptHeader,ServHeader);
        ServShptHeader.INSERT;
        OnAfterServShptHeaderInsert(ServShptHeader,ServHeader); <=====================
    
        CLEAR(ServLogMgt);
        ServLogMgt.ServOrderShipmentPost("No.",ServShptHeader."No.");
    
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterServShptItemLineInsert>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareShipmentHeader>
    Code lines:
    ...
            // create SSIL
            ServShptItemLine.TRANSFERFIELDS(ServItemLine);
            ServShptItemLine."No." := ServShptHeader."No.";
            OnBeforeServShptItemLineInsert(ServShptItemLine,ServItemLine);
            ServShptItemLine.INSERT;
            OnAfterServShptItemLineInsert(ServShptItemLine,ServItemLine); <=====================
    
            // set mgt. date and service dates
            IF (ServItemLine."Contract No." <> '') AND (ServItemLine."Contract Line No." <> 0) AND
               ("Contract No." <> '')
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnAfterServShptLineInsert>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareShipmentLine>
    Code lines:
    ...
    
        CALCFIELDS("Service Item Line Description");
        ServShptLine."Service Item Line Description" := "Service Item Line Description";
        OnBeforeServShptLineInsert(ServShptLine,ServLine,ServShptHeader);
        ServShptLine.INSERT;
        OnAfterServShptLineInsert(ServShptLine,ServLine,ServShptHeader,ServInvHeader); <=====================
        CheckCertificateOfSupplyStatus(ServShptHeader,ServShptLine);
      END;
      // end inserting Service Shipment Line
    
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeFinalize>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<Finalize>
    Code lines:
    OnBeforeFinalize(PassedServHeader,CloseCondition); <=====================
    
    // finalize codeunits calls
    ServPostingJnlsMgt.Finalize;
    
    // finalize posted documents
    FinalizeShipmentDocument;
    FinalizeInvoiceDocument;
    FinalizeCrMemoDocument;
    FinalizeWarrantyLedgerEntries(PassedServHeader,CloseCondition);
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeFinalizeCrMemoDocument>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<FinalizeCrMemoDocument>
    Code lines:
    OnBeforeFinalizeCrMemoDocument(ServCrMemoHeader); <=====================
    
    ServCrMemoHeader.RESET;
    IF ServCrMemoHeader.FINDFIRST THEN BEGIN
      PServCrMemoHeader.INIT;
      PServCrMemoHeader.COPY(ServCrMemoHeader);
      PServCrMemoHeader.INSERT;
    END;
    ServCrMemoHeader.DELETEALL;
    
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeFinalizeInvoiceDocument>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<FinalizeInvoiceDocument>
    Code lines:
    OnBeforeFinalizeInvoiceDocument(ServInvHeader); <=====================
    
    ServInvHeader.RESET;
    IF ServInvHeader.FINDFIRST THEN BEGIN
      PServInvHeader.INIT;
      PServInvHeader.COPY(ServInvHeader);
      PServInvHeader.INSERT;
    END;
    ServInvHeader.DELETEALL;
    
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeFinalizeShipmentDocument>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<FinalizeShipmentDocument>
    Code lines:
    OnBeforeFinalizeShipmentDocument(ServShptHeader); <=====================
    
    ServShptHeader.RESET;
    IF ServShptHeader.FINDFIRST THEN BEGIN
      PServShptHeader.INIT;
      PServShptHeader.COPY(ServShptHeader);
      PServShptHeader.INSERT;
    END;
    ServShptHeader.DELETEALL;
    
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeInitialize>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<Initialize>
    Code lines:
    CloseCondition := TRUE;
    OnBeforeInitialize(PassedServiceHeader,PassedServiceLine,CloseCondition); <=====================
    
    CLEAR(ServPostingJnlsMgt);
    CLEAR(ServAmountsMgt);
    PassedServiceHeader.ValidateSalesPersonOnServiceHeader(PassedServiceHeader,TRUE,TRUE);
    PrepareDocument(PassedServiceHeader,PassedServiceLine);
    CheckSysCreatedEntry;
    CheckShippingAdvice;
    CheckDim;
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeModifyServiceDocNoSeries>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<SetNoSeries>
    Code lines:
    ...
          "Posting No." := NoSeriesMgt.GetNextNo("Posting No. Series","Posting Date",TRUE);
          ModifyHeader := TRUE;
        END;
      END;
    
      OnBeforeModifyServiceDocNoSeries(ServHeader,PServHeader,ModifyHeader); <=====================
      MODIFY;
    
      IF ModifyHeader THEN BEGIN
        PServHeader."Shipping No." := "Shipping No.";
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeServCrMemoHeaderInsert>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareCrMemoHeader>
    Code lines:
    ...
      END;
      RecordLinkManagement.CopyLinks(ServHeader,ServCrMemoHeader);
      ServCrMemoHeader."Source Code" := SrcCode;
      ServCrMemoHeader."User ID" := USERID;
      ServCrMemoHeader."No. Printed" := 0;
      OnBeforeServCrMemoHeaderInsert(ServCrMemoHeader,ServHeader); <=====================
      ServCrMemoHeader.INSERT;
      OnAfterServCrMemoHeaderInsert(ServCrMemoHeader,ServHeader);
    
      CLEAR(ServLogMgt);
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeServCrMemoLineInsert>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareCrMemoLine>
    Code lines:
    ...
      ServCrMemoLine."Document No." := ServCrMemoHeader."No.";
      ServCrMemoLine.Quantity := "Qty. to Invoice";
      ServCrMemoLine."Quantity (Base)" := "Qty. to Invoice (Base)";
      CALCFIELDS("Service Item Line Description");
      ServCrMemoLine."Service Item Line Description" := "Service Item Line Description";
      OnBeforeServCrMemoLineInsert(ServCrMemoLine,passedServLine); <=====================
      ServCrMemoLine.INSERT;
      OnAfterServCrMemoLineInsert(ServCrMemoLine,passedServLine);
    END;
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeServInvHeaderInsert>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareInvoiceHeader>
    Code lines:
    ...
      IF ServMgtSetup."Copy Comments Order to Invoice" THEN
        RecordLinkManagement.CopyLinks(ServHeader,ServInvHeader);
      ServInvHeader."Source Code" := SrcCode;
      ServInvHeader."User ID" := USERID;
      ServInvHeader."No. Printed" := 0;
      OnBeforeServInvHeaderInsert(ServInvHeader,ServHeader); <=====================
      ServInvHeader.INSERT;
      OnAfterServInvHeaderInsert(ServInvHeader,ServHeader);
    
      CLEAR(ServLogMgt);
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeServInvLineInsert>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareInvoiceLine>
    Code lines:
    ...
      ServInvLine."Document No." := ServInvHeader."No.";
      ServInvLine.Quantity := "Qty. to Invoice";
      ServInvLine."Quantity (Base)" := "Qty. to Invoice (Base)";
      CALCFIELDS("Service Item Line Description");
      ServInvLine."Service Item Line Description" := "Service Item Line Description";
      OnBeforeServInvLineInsert(ServInvLine,passedServLine); <=====================
      ServInvLine.INSERT;
      OnAfterServInvLineInsert(ServInvLine,passedServLine);
    END;
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeServShptHeaderInsert>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareShipmentHeader>
    Code lines:
    ...
        IF ServMgtSetup."Copy Comments Order to Shpt." THEN
          RecordLinkManagement.CopyLinks(ServHeader,ServShptHeader);
        ServShptHeader."Source Code" := SrcCode;
        ServShptHeader."User ID" := USERID;
        ServShptHeader."No. Printed" := 0;
        OnBeforeServShptHeaderInsert(ServShptHeader,ServHeader); <=====================
        ServShptHeader.INSERT;
        OnAfterServShptHeaderInsert(ServShptHeader,ServHeader);
    
        CLEAR(ServLogMgt);
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeServShptItemLineInsert>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareShipmentHeader>
    Code lines:
    ...
        IF ServItemLine.FIND('-') THEN
          REPEAT
            // create SSIL
            ServShptItemLine.TRANSFERFIELDS(ServItemLine);
            ServShptItemLine."No." := ServShptHeader."No.";
            OnBeforeServShptItemLineInsert(ServShptItemLine,ServItemLine); <=====================
            ServShptItemLine.INSERT;
            OnAfterServShptItemLineInsert(ServShptItemLine,ServItemLine);
    
            // set mgt. date and service dates
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeServShptLineInsert>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PrepareShipmentLine>
    Code lines:
    ...
            ServITRMgt.InsertShptEntryRelation(ServShptLine,
              TempHandlingSpecification,TempTrackingSpecificationInv,ItemLedgShptEntryNo);
    
        CALCFIELDS("Service Item Line Description");
        ServShptLine."Service Item Line Description" := "Service Item Line Description";
        OnBeforeServShptLineInsert(ServShptLine,ServLine,ServShptHeader); <=====================
        ServShptLine.INSERT;
        OnAfterServShptLineInsert(ServShptLine,ServLine,ServShptHeader,ServInvHeader);
        CheckCertificateOfSupplyStatus(ServShptHeader,ServShptLine);
      END;
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnBeforeSetGenJnlLineDocNos>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<SetGenJnlLineDocNos>
    Code lines:
    OnBeforeSetGenJnlLineDocNos(ServHeader,DocType,DocNo,ExtDocNo); <=====================
    
    GenJnlLineDocType := DocType;
    GenJnlLineDocNo := DocNo;
    GenJnlLineExtDocNo := ExtDocNo;
    ServPostingJnlsMgt.SetGenJnlLineDocNos(GenJnlLineDocNo,GenJnlLineExtDocNo);
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnPostDocumentLinesOnBeforeCheckServLine>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PostDocumentLines>
    Code lines:
    ...
            ServLine."Qty. to Ship (Base)",ServLine."Qty. to Invoice (Base)",Ship,Invoice);
        LineCount += 1;
        Window.UPDATE(2,LineCount);
    
        WITH ServLine DO BEGIN
          OnPostDocumentLinesOnBeforeCheckServLine(ServHeader,ServLine,Ship,Invoice); <=====================
    
          IF Ship AND ("Qty. to Ship" <> 0) OR Invoice AND ("Qty. to Invoice" <> 0) THEN
            ServOrderMgt.CheckServItemRepairStatus(ServHeader,ServItemLine,ServLine);
    
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnPostDocumentLinesOnBeforePostInvoicePostBuffer>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<PostDocumentLines>
    Code lines:
    ...
          ServCrMemoHeader."No.");
      END;
    
      // Post sales and VAT to G/L entries from posting buffer
      IF Invoice THEN BEGIN
        OnPostDocumentLinesOnBeforePostInvoicePostBuffer( <=====================
          ServHeader,InvPostingBuffer[1],TotalServiceLine,TotalServiceLineLCY);
        LineCount := 0;
        IF InvPostingBuffer[1].FIND('+') THEN
          REPEAT
    ...
Codeunit<Serv-Documents Mgt.>.PROCEDURE<OnUpdateShptLinesOnInvOnAfterServiceShptLineModify>
  Raised in: Codeunit<Serv-Documents Mgt.>.PROCEDURE<UpdateShptLinesOnInv>
    Code lines:
    ...
            ServiceShptLine.Quantity - ServiceShptLine."Quantity Invoiced" - ServiceShptLine."Quantity Consumed";
          ServiceShptLine."Qty. Shipped Not Invd. (Base)" :=
            ServiceShptLine."Quantity (Base)" - ServiceShptLine."Qty. Invoiced (Base)" - ServiceShptLine."Qty. Consumed (Base)";
          ServiceShptLine.MODIFY;
    
          OnUpdateShptLinesOnInvOnAfterServiceShptLineModify( <=====================
            ServLine,ServInvHeader,ServShptHeader,ServiceShptLine,TempInvoicingSpecification,TrackingSpecificationExists,
            QtyToBeInvoiced,QtyToBeInvoicedBase,QtyToBeConsumed,QtyToBeConsumedBase);
    
          IF ServiceLine.Type = ServiceLine.Type::Item THEN BEGIN
    ...
Codeunit<Sales-Calc. Discount>.PROCEDURE<OnAfterCalcSalesDiscount>
  Raised in: Codeunit<Sales-Calc. Discount>.PROCEDURE<CalculateInvoiceDiscount>
    Code lines:
    ...
        UpdatePrepmtLineAmount(SalesHeader);
      END;
    END;
    
    SalesCalcDiscountByType.ResetRecalculateInvoiceDisc(SalesHeader);
    OnAfterCalcSalesDiscount(SalesHeader); <=====================
Codeunit<Sales-Calc. Discount>.PROCEDURE<OnAfterCustInvDiscRecExists>
  Raised in: Codeunit<Sales-Calc. Discount>.PROCEDURE<CalculateInvoiceDiscount>
    Code lines:
    ...
              SalesLine2.DELETE(TRUE);
            END;
          UNTIL TempServiceChargeLine.NEXT = 0;
    
      IF CustInvDiscRecExists(SalesHeader."Invoice Disc. Code") THEN BEGIN
        OnAfterCustInvDiscRecExists(SalesHeader); <=====================
        IF InvDiscBase <> ChargeBase THEN
          CustInvDisc.GetRec(
            SalesHeader."Invoice Disc. Code",SalesHeader."Currency Code",CurrencyDate,InvDiscBase);
    
    ...
Codeunit<Sales-Calc. Discount>.PROCEDURE<OnAfterValidateSalesLine2Quantity>
  Raised in: Codeunit<Sales-Calc. Discount>.PROCEDURE<CalculateInvoiceDiscount>
    Code lines:
    ...
          SalesLine2.Type := SalesLine2.Type::"G/L Account";
          SalesLine2.VALIDATE("No.",CustPostingGr.GetServiceChargeAccount);
          SalesLine2.Description := Text000;
          SalesLine2.VALIDATE(Quantity,1);
    
          OnAfterValidateSalesLine2Quantity(SalesHeader,SalesLine2,CustInvDisc); <=====================
    
          IF SalesLine2."Document Type" IN
             [SalesLine2."Document Type"::"Return Order",SalesLine2."Document Type"::"Credit Memo"]
          THEN
    ...
Codeunit<Sales-Calc. Discount>.PROCEDURE<OnBeforeCalcSalesDiscount>
  Raised in: Codeunit<Sales-Calc. Discount>.PROCEDURE<CalculateInvoiceDiscount>
    Code lines:
    SalesSetup.GET;
    IF UpdateHeader THEN
      SalesHeader.FIND; // To ensure we have the latest - otherwise update fails.
    
    IsHandled := FALSE;
    OnBeforeCalcSalesDiscount(SalesHeader,IsHandled,SalesLine2,UpdateHeader); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH SalesLine DO BEGIN
    ...
Codeunit<Sales-Calc. Discount>.PROCEDURE<OnBeforeServiceChargeSalesLineInsert>
  Raised in: Codeunit<Sales-Calc. Discount>.PROCEDURE<CalculateInvoiceDiscount>
    Code lines:
    ...
              ROUND(
                (1 + SalesLine2."VAT %" / 100) * CustInvDisc."Service Charge",
                Currency."Unit-Amount Rounding Precision"))
          ELSE
            SalesLine2.VALIDATE("Unit Price",CustInvDisc."Service Charge");
          OnBeforeServiceChargeSalesLineInsert(SalesLine2,SalesHeader); <=====================
          SalesLine2.INSERT;
        END;
        SalesLine2.CalcVATAmountLines(0,SalesHeader,SalesLine2,TempVATAmountLine);
      END ELSE
    ...
Codeunit<Hybrid Deployment>.PROCEDURE<OnBeforeEnableReplication>
  Raised in: Codeunit<Hybrid Deployment>.PROCEDURE<EnableReplication>
    Code lines:
    OnBeforeEnableReplication( <=====================
      SourceProduct,NotificationUrl,SubscriptionId,ClientState,
      ServiceNotificationUrl,ServiceSubscriptionId,ServiceClientState);
    
    IF NOT TryEnableReplication(
         InstanceId,OnPremConnectionString,DatabaseConfiguration,IntegrationRuntimeName,NotificationUrl,ClientState,
         SubscriptionId,ServiceNotificationUrl,ServiceClientState,ServiceSubscriptionId)
    THEN
      ERROR(FailedEnableReplicationErr);
    
    ...
Codeunit<Hybrid Deployment>.PROCEDURE<OnCreateIntegrationRuntime>
  Raised in: Codeunit<Hybrid Deployment>.PROCEDURE<TryCreateIntegrationRuntime>
    Code lines:
    OnCreateIntegrationRuntime(InstanceId); <=====================
Codeunit<Hybrid Deployment>.PROCEDURE<OnDisableReplication>
  Raised in: Codeunit<Hybrid Deployment>.PROCEDURE<TryDisableReplication>
    Code lines:
    OnDisableReplication(InstanceId); <=====================
Codeunit<Hybrid Deployment>.PROCEDURE<OnEnableReplication>
  Raised in: Codeunit<Hybrid Deployment>.PROCEDURE<TryEnableReplication>
    Code lines:
    OnEnableReplication( <=====================
      OnPremConnectionString,DatabaseConfiguration,IntegrationRuntimeName,NotificationUrl,ClientState,SubscriptionId,
      ServiceNotificationUrl,ServiceClientState,ServiceSubscriptionId,InstanceId);
    ValidateInstanceId(InstanceId);
Codeunit<Hybrid Deployment>.PROCEDURE<OnGetErrorMessage>
  Raised in: Codeunit<Hybrid Deployment>.PROCEDURE<GetErrorMessage>
    Code lines:
    IF NOT TryGetErrorCode(JsonOutput,ErrorCode) OR (ErrorCode = '') THEN
      EXIT;
    
    SENDTRACETAG('00006NE','IntelligentCloud',VERBOSITY::Warning,
      STRSUBSTNO('Error occurred in replication service: %1',ErrorCode),DATACLASSIFICATION::SystemMetadata);
    OnGetErrorMessage(ErrorCode,Message); <=====================
    
    IF Message <> '' THEN
      EXIT;
    
    ...
Codeunit<Hybrid Deployment>.PROCEDURE<OnGetIntegrationRuntimeKeys>
  Raised in: Codeunit<Hybrid Deployment>.PROCEDURE<TryGetIntegrationRuntimeKeys>
    Code lines:
    OnGetIntegrationRuntimeKeys(InstanceId); <=====================
    ValidateInstanceId(InstanceId);
Codeunit<Hybrid Deployment>.PROCEDURE<OnGetReplicationRunStatus>
  Raised in: Codeunit<Hybrid Deployment>.PROCEDURE<TryGetReplicationRunStatus>
    Code lines:
    OnGetReplicationRunStatus(InstanceId,RunId); <=====================
    ValidateInstanceId(InstanceId);
Codeunit<Hybrid Deployment>.PROCEDURE<OnGetRequestStatus>
  Raised in: Codeunit<Hybrid Deployment>.PROCEDURE<GetRequestStatus>
    Code lines:
    OnGetRequestStatus(RequestTrackingId,JsonOutput,Status); <=====================
Codeunit<Hybrid Deployment>.PROCEDURE<OnGetVersionInformation>
  Raised in: Codeunit<Hybrid Deployment>.PROCEDURE<TryGetVersionInformation>
    Code lines:
    OnGetVersionInformation(InstanceId); <=====================
    ValidateInstanceId(InstanceId);
Codeunit<Hybrid Deployment>.PROCEDURE<OnInitialize>
  Raised in: Codeunit<Hybrid Deployment>.PROCEDURE<Initialize>
    Code lines:
    SourceProduct := SourceProductId;
    OnInitialize(SourceProductId); <=====================
Codeunit<Hybrid Deployment>.PROCEDURE<OnPrepareTablesForReplication>
  Raised in: Codeunit<Hybrid Deployment>.PROCEDURE<TryPrepareTablesForReplication>
    Code lines:
    OnPrepareTablesForReplication; <=====================
Codeunit<Hybrid Deployment>.PROCEDURE<OnRegenerateIntegrationRuntimeKeys>
  Raised in: Codeunit<Hybrid Deployment>.PROCEDURE<TryRegenerateIntegrationRuntimeKeys>
    Code lines:
    OnRegenerateIntegrationRuntimeKeys(InstanceId); <=====================
    ValidateInstanceId(InstanceId);
Codeunit<Hybrid Deployment>.PROCEDURE<OnRunReplication>
  Raised in: Codeunit<Hybrid Deployment>.PROCEDURE<TryRunReplication>
    Code lines:
    OnRunReplication(InstanceId); <=====================
    ValidateInstanceId(InstanceId);
Codeunit<Hybrid Deployment>.PROCEDURE<OnRunUpgrade>
  Raised in: Codeunit<Hybrid Deployment>.PROCEDURE<TryRunUpgrade>
    Code lines:
    OnRunUpgrade(InstanceId); <=====================
    ValidateInstanceId(InstanceId);
Codeunit<Hybrid Deployment>.PROCEDURE<OnSetReplicationSchedule>
  Raised in: Codeunit<Hybrid Deployment>.PROCEDURE<TrySetReplicationSchedule>
    Code lines:
    OnSetReplicationSchedule(ReplicationFrequency,DaysToRun,TimeToRun,Activate,InstanceId); <=====================
    ValidateInstanceId(InstanceId);
Codeunit<Data Migration Facade>.PROCEDURE<OnApplySelectedData>
  Raised in: Codeunit<Data Migration Facade>.PROCEDURE<OnApplySelectedDataWizardSubscriber>
    Code lines:
    OnApplySelectedData(Sender,DataMigrationEntity,Handled); <=====================
Codeunit<Data Migration Facade>.PROCEDURE<OnBatchEditFromErrorView>
  Raised in: Page<Data Migration Error>.Action<BulkFixErrors>.<OnAction>
    Code lines:
    DataMigrationFacade.OnBatchEditFromErrorView("Migration Type","Destination Table ID"); <=====================
    
    IF NOT CONFIRM(STRSUBSTNO(MigrateEntitiesAgainQst,DataMigrationOverview.CAPTION),TRUE) THEN
      EXIT;
    
    StartMigration(Rec);
Codeunit<Data Migration Facade>.PROCEDURE<OnDataImport>
  Raised in: Codeunit<Data Migration Facade>.PROCEDURE<OnDataImportWizardSubscriber>
    Code lines:
    OnDataImport(Sender,Handled); <=====================
Codeunit<Data Migration Facade>.PROCEDURE<OnEnableTogglingDataMigrationOverviewPage>
  Raised in: Codeunit<Data Migration Facade>.PROCEDURE<OnEnableTogglingDataMigrationOverviewPageWizardSubscriber>
    Code lines:
    OnEnableTogglingDataMigrationOverviewPage(Sender,EnableTogglingOverviewPage); <=====================
Codeunit<Data Migration Facade>.PROCEDURE<OnFillStagingTables>
  Raised in: Codeunit<Data Migration Mgt.>.<OnRun>
    Code lines:
    ...
    
    OnBeforeMigrationStarted(DataMigrationStatus,Retry);
    
    IF NOT Retry THEN BEGIN
      DataMigrationStatus.SETRANGE(Status,DataMigrationStatus.Status::Pending);
      DataMigrationFacade.OnFillStagingTables; <=====================
      // Close the transaction here otherwise the CODEUNIT.RUN cannot be invoked
      COMMIT;
    END ELSE
      DataMigrationStatus.SETRANGE(Status,DataMigrationStatus.Status::"Completed with Errors");
    ...
Codeunit<Data Migration Facade>.PROCEDURE<OnFindBatchForAccountTransactions>
  Raised in: Page<Data Migration Overview>.PROCEDURE<GoToGeneralJournalForAccounts>
    Code lines:
    DataMigrationFacade.OnFindBatchForAccountTransactions(Rec,GenJournalBatchName); <=====================
    IF GenJournalBatchName <> '' THEN BEGIN
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatchName);
      IF GenJournalLine.FINDFIRST THEN BEGIN
        GenJournalLine.SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
        GenJournalLine.SETRANGE("Account Type",GenJournalLine."Account Type"::"G/L Account");
        PAGE.RUN(PAGE::"General Journal",GenJournalLine);
        EXIT;
      END;
    END;
  Raised in: Codeunit<Data Migration Mgt.>.PROCEDURE<DestTableHasAnyTransactions>
    Code lines:
    ...
          ItemJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
          ItemJournalLine.SETFILTER("Item No.",'<>%1','');
          EXIT(ItemJournalLine.FINDFIRST);
        END;
      ELSE BEGIN
        DataMigrationFacade.OnFindBatchForAccountTransactions(DataMigrationStatus,JournalBatchName); <=====================
        IF JournalBatchName = '' THEN
          EXIT(FALSE);
        GenJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
        GenJournalLine.SETRANGE("Account Type",GenJournalLine."Account Type"::"G/L Account");
    ...
Codeunit<Data Migration Facade>.PROCEDURE<OnFindBatchForCustomerTransactions>
  Raised in: Page<Data Migration Overview>.PROCEDURE<GoToGeneralJournalForCustomers>
    Code lines:
    DataMigrationFacade.OnFindBatchForCustomerTransactions("Migration Type",GenJournalBatchName); <=====================
    IF GenJournalBatchName <> '' THEN BEGIN
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatchName);
      IF GenJournalLine.FINDFIRST THEN BEGIN
        GenJournalLine.SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
        GenJournalLine.SETRANGE("Account Type",GenJournalLine."Account Type"::Customer);
        PAGE.RUN(PAGE::"General Journal",GenJournalLine);
        EXIT;
      END;
    END;
  Raised in: Codeunit<Data Migration Mgt.>.PROCEDURE<DestTableHasAnyTransactions>
    Code lines:
    ...
          GenJournalLine.SETFILTER("Account No.",'<>%1','');
          EXIT(GenJournalLine.FINDFIRST);
        END;
      DATABASE::Customer:
        BEGIN
          DataMigrationFacade.OnFindBatchForCustomerTransactions(DataMigrationStatus."Migration Type",JournalBatchName); <=====================
          IF JournalBatchName = '' THEN
            EXIT(FALSE);
          GenJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
          GenJournalLine.SETRANGE("Account Type",GenJournalLine."Account Type"::Customer);
    ...
Codeunit<Data Migration Facade>.PROCEDURE<OnFindBatchForItemTransactions>
  Raised in: Page<Data Migration Overview>.PROCEDURE<GoToItemJournal>
    Code lines:
    DataMigrationFacade.OnFindBatchForItemTransactions("Migration Type",ItemJournalBatchName); <=====================
    IF ItemJournalBatchName <> '' THEN BEGIN
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalBatchName);
      IF ItemJournalLine.FINDFIRST THEN BEGIN
        ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalLine."Journal Template Name");
        PAGE.RUN(PAGE::"Item Journal",ItemJournalLine);
        EXIT;
      END;
    END;
    PAGE.RUN(PAGE::"Item Journal");
  Raised in: Codeunit<Data Migration Mgt.>.PROCEDURE<DestTableHasAnyTransactions>
    Code lines:
    ...
          GenJournalLine.SETFILTER("Account No.",'<>%1','');
          EXIT(GenJournalLine.FINDFIRST);
        END;
      DATABASE::Item:
        BEGIN
          DataMigrationFacade.OnFindBatchForItemTransactions(DataMigrationStatus."Migration Type",JournalBatchName); <=====================
          IF JournalBatchName = '' THEN
            EXIT(FALSE);
          ItemJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
          ItemJournalLine.SETFILTER("Item No.",'<>%1','');
    ...
Codeunit<Data Migration Facade>.PROCEDURE<OnFindBatchForVendorTransactions>
  Raised in: Page<Data Migration Overview>.PROCEDURE<GoToGeneralJournalForVendors>
    Code lines:
    DataMigrationFacade.OnFindBatchForVendorTransactions("Migration Type",GenJournalBatchName); <=====================
    IF GenJournalBatchName <> '' THEN BEGIN
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatchName);
      IF GenJournalLine.FINDFIRST THEN BEGIN
        GenJournalLine.SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
        GenJournalLine.SETRANGE("Account Type",GenJournalLine."Account Type"::Vendor);
        PAGE.RUN(PAGE::"General Journal",GenJournalLine);
        EXIT;
      END;
    END;
  Raised in: Codeunit<Data Migration Mgt.>.PROCEDURE<DestTableHasAnyTransactions>
    Code lines:
    CASE DataMigrationStatus."Destination Table ID" OF
      DATABASE::Vendor:
        BEGIN
          DataMigrationFacade.OnFindBatchForVendorTransactions(DataMigrationStatus."Migration Type",JournalBatchName); <=====================
          IF JournalBatchName = '' THEN
            EXIT(FALSE);
          GenJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
          GenJournalLine.SETRANGE("Account Type",GenJournalLine."Account Type"::Vendor);
          GenJournalLine.SETFILTER("Account No.",'<>%1','');
          EXIT(GenJournalLine.FINDFIRST);
    ...
Codeunit<Data Migration Facade>.PROCEDURE<OnGetInstructions>
  Raised in: Codeunit<Data Migration Facade>.PROCEDURE<OnRegisterGetInstructionsWizardSubscriber>
    Code lines:
    OnGetInstructions(Sender,Instructions,Handled); <=====================
Codeunit<Data Migration Facade>.PROCEDURE<OnGetMigrationHelpTopicUrl>
  Raised in: Page<Data Migration About>.Control<LearnMore>.<OnDrillDown>
    Code lines:
    DataMigrationStatus.SETFILTER(Status,'%1|%2',
      DataMigrationStatus.Status::"In Progress",
      DataMigrationStatus.Status::Pending);
    IF DataMigrationStatus.FINDFIRST THEN
      DataMigrationFacade.OnGetMigrationHelpTopicUrl(DataMigrationStatus."Migration Type",Url); <=====================
    IF Url = '' THEN
      HYPERLINK(GeneralHelpTopicUrlTxt)
    ELSE
      HYPERLINK(Url);
Codeunit<Data Migration Facade>.PROCEDURE<OnInitDataMigrationError>
  Raised in: Page<Data Migration Error>.<OnAfterGetCurrRecord>
    Code lines:
    StagingTableRecId := "Source Staging Table Record ID";
    StagingTableRecIdSpecified := StagingTableRecId <> DummyRecordId;
    
    DataMigrationFacade.OnInitDataMigrationError("Migration Type",BulkFixErrorsButtonEnabled); <=====================
Codeunit<Data Migration Facade>.PROCEDURE<OnMigrationCompleted>
  Raised in: Codeunit<Data Migration Mgt.>.PROCEDURE<CheckIfMigrationIsCompleted>
    Code lines:
    ...
      '%1|%2|%3',
      DataMigrationStatus.Status::"In Progress",
      DataMigrationStatus.Status::Pending,
      DataMigrationStatus.Status::"Completed with Errors");
    IF DataMigrationStatus.ISEMPTY THEN
      DataMigrationFacade.OnMigrationCompleted(CurrentDataMigrationStatus); <=====================
Codeunit<Data Migration Facade>.PROCEDURE<OnRegisterDataMigrator>
  Raised in: Codeunit<Data Migration Facade>.PROCEDURE<OnRegisterDataMigratorWizardSubscriber>
    Code lines:
    OnRegisterDataMigrator(Sender); <=====================
Codeunit<Data Migration Facade>.PROCEDURE<OnSelectDataToApply>
  Raised in: Codeunit<Data Migration Facade>.PROCEDURE<OnSelectDataToApplyWizardSubscriber>
    Code lines:
    OnSelectDataToApply(Sender,DataMigrationEntity,Handled); <=====================
Codeunit<Data Migration Facade>.PROCEDURE<OnSelectRowFromDashboard>
  Raised in: Page<Data Migration Overview>.<Control>.<OnDrillDown>
    Code lines:
    DataMigrationFacade.OnSelectRowFromDashboard(Rec); <=====================
Codeunit<Data Migration Facade>.PROCEDURE<OnShowThatsItMessage>
  Raised in: Codeunit<Data Migration Facade>.PROCEDURE<OnShowThatsItMessageWizardSubscriber>
    Code lines:
    OnShowThatsItMessage(Sender,Message); <=====================
Codeunit<GL Acc. Data Migration Facade>.PROCEDURE<OnCreateOpeningBalanceTrx>
  Raised in: Codeunit<GL Acc. Data Migration Facade>.<OnRun>
    Code lines:
    FINDSET;
    REPEAT
      OnMigrateGlAccount("Staging Table RecId To Process");
      OnMigrateGlAccountDimensions("Staging Table RecId To Process");
      OnCreateOpeningBalanceTrx("Staging Table RecId To Process"); <=====================
      OnMigratePostingGroups("Staging Table RecId To Process");
      OnMigrateAccountTransactions("Staging Table RecId To Process");
      GLAccountIsSet := FALSE;
    UNTIL NEXT = 0;
Codeunit<GL Acc. Data Migration Facade>.PROCEDURE<OnMigrateAccountTransactions>
  Raised in: Codeunit<GL Acc. Data Migration Facade>.<OnRun>
    Code lines:
    ...
    REPEAT
      OnMigrateGlAccount("Staging Table RecId To Process");
      OnMigrateGlAccountDimensions("Staging Table RecId To Process");
      OnCreateOpeningBalanceTrx("Staging Table RecId To Process");
      OnMigratePostingGroups("Staging Table RecId To Process");
      OnMigrateAccountTransactions("Staging Table RecId To Process"); <=====================
      GLAccountIsSet := FALSE;
    UNTIL NEXT = 0;
Codeunit<GL Acc. Data Migration Facade>.PROCEDURE<OnMigrateGlAccount>
  Raised in: Codeunit<GL Acc. Data Migration Facade>.<OnRun>
    Code lines:
    FINDSET;
    REPEAT
      OnMigrateGlAccount("Staging Table RecId To Process"); <=====================
      OnMigrateGlAccountDimensions("Staging Table RecId To Process"); <=====================
      OnCreateOpeningBalanceTrx("Staging Table RecId To Process");
      OnMigratePostingGroups("Staging Table RecId To Process");
      OnMigrateAccountTransactions("Staging Table RecId To Process");
      GLAccountIsSet := FALSE;
    UNTIL NEXT = 0;
Codeunit<GL Acc. Data Migration Facade>.PROCEDURE<OnMigrateGlAccountDimensions>
  Raised in: Codeunit<GL Acc. Data Migration Facade>.<OnRun>
    Code lines:
    FINDSET;
    REPEAT
      OnMigrateGlAccount("Staging Table RecId To Process");
      OnMigrateGlAccountDimensions("Staging Table RecId To Process"); <=====================
      OnCreateOpeningBalanceTrx("Staging Table RecId To Process");
      OnMigratePostingGroups("Staging Table RecId To Process");
      OnMigrateAccountTransactions("Staging Table RecId To Process");
      GLAccountIsSet := FALSE;
    UNTIL NEXT = 0;
Codeunit<GL Acc. Data Migration Facade>.PROCEDURE<OnMigratePostingGroups>
  Raised in: Codeunit<GL Acc. Data Migration Facade>.<OnRun>
    Code lines:
    FINDSET;
    REPEAT
      OnMigrateGlAccount("Staging Table RecId To Process");
      OnMigrateGlAccountDimensions("Staging Table RecId To Process");
      OnCreateOpeningBalanceTrx("Staging Table RecId To Process");
      OnMigratePostingGroups("Staging Table RecId To Process"); <=====================
      OnMigrateAccountTransactions("Staging Table RecId To Process");
      GLAccountIsSet := FALSE;
    UNTIL NEXT = 0;
Codeunit<Vendor Data Migration Facade>.PROCEDURE<OnMigrateVendor>
  Raised in: Codeunit<Vendor Data Migration Facade>.<OnRun>
    Code lines:
    FINDSET;
    ChartOfAccountsMigrated := DataMigrationStatusFacade.HasMigratedChartOfAccounts(Rec);
    REPEAT
      OnMigrateVendor("Staging Table RecId To Process"); <=====================
      OnMigrateVendorDimensions("Staging Table RecId To Process"); <=====================
    
      // migrate transactions for this vendor
      OnMigrateVendorPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated); <=====================
      OnMigrateVendorTransactions("Staging Table RecId To Process",ChartOfAccountsMigrated); <=====================
      GenJournalLineIsSet := FALSE;
    ...
Codeunit<Vendor Data Migration Facade>.PROCEDURE<OnMigrateVendorDimensions>
  Raised in: Codeunit<Vendor Data Migration Facade>.<OnRun>
    Code lines:
    FINDSET;
    ChartOfAccountsMigrated := DataMigrationStatusFacade.HasMigratedChartOfAccounts(Rec);
    REPEAT
      OnMigrateVendor("Staging Table RecId To Process");
      OnMigrateVendorDimensions("Staging Table RecId To Process"); <=====================
    
      // migrate transactions for this vendor
      OnMigrateVendorPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated);
      OnMigrateVendorTransactions("Staging Table RecId To Process",ChartOfAccountsMigrated);
      GenJournalLineIsSet := FALSE;
    ...
Codeunit<Vendor Data Migration Facade>.PROCEDURE<OnMigrateVendorPostingGroups>
  Raised in: Codeunit<Vendor Data Migration Facade>.<OnRun>
    Code lines:
    ...
    REPEAT
      OnMigrateVendor("Staging Table RecId To Process");
      OnMigrateVendorDimensions("Staging Table RecId To Process");
    
      // migrate transactions for this vendor
      OnMigrateVendorPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated); <=====================
      OnMigrateVendorTransactions("Staging Table RecId To Process",ChartOfAccountsMigrated);
      GenJournalLineIsSet := FALSE;
      VendorIsSet := FALSE;
    UNTIL NEXT = 0;
Codeunit<Vendor Data Migration Facade>.PROCEDURE<OnMigrateVendorTransactions>
  Raised in: Codeunit<Vendor Data Migration Facade>.<OnRun>
    Code lines:
    ...
      OnMigrateVendor("Staging Table RecId To Process");
      OnMigrateVendorDimensions("Staging Table RecId To Process");
    
      // migrate transactions for this vendor
      OnMigrateVendorPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated);
      OnMigrateVendorTransactions("Staging Table RecId To Process",ChartOfAccountsMigrated); <=====================
      GenJournalLineIsSet := FALSE;
      VendorIsSet := FALSE;
    UNTIL NEXT = 0;
Codeunit<Customer Data Migration Facade>.PROCEDURE<OnMigrateCustomer>
  Raised in: Codeunit<Customer Data Migration Facade>.<OnRun>
    Code lines:
    FINDSET;
    ChartOfAccountsMigrated := DataMigrationStatusFacade.HasMigratedChartOfAccounts(Rec);
    REPEAT
      OnMigrateCustomer("Staging Table RecId To Process"); <=====================
      OnMigrateCustomerDimensions("Staging Table RecId To Process"); <=====================
    
      // migrate transactions for this customer
      OnMigrateCustomerPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated); <=====================
      OnMigrateCustomerTransactions("Staging Table RecId To Process",ChartOfAccountsMigrated); <=====================
      GenJournalLineIsSet := FALSE;
    ...
Codeunit<Customer Data Migration Facade>.PROCEDURE<OnMigrateCustomerDimensions>
  Raised in: Codeunit<Customer Data Migration Facade>.<OnRun>
    Code lines:
    FINDSET;
    ChartOfAccountsMigrated := DataMigrationStatusFacade.HasMigratedChartOfAccounts(Rec);
    REPEAT
      OnMigrateCustomer("Staging Table RecId To Process");
      OnMigrateCustomerDimensions("Staging Table RecId To Process"); <=====================
    
      // migrate transactions for this customer
      OnMigrateCustomerPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated);
      OnMigrateCustomerTransactions("Staging Table RecId To Process",ChartOfAccountsMigrated);
      GenJournalLineIsSet := FALSE;
    ...
Codeunit<Customer Data Migration Facade>.PROCEDURE<OnMigrateCustomerPostingGroups>
  Raised in: Codeunit<Customer Data Migration Facade>.<OnRun>
    Code lines:
    ...
    REPEAT
      OnMigrateCustomer("Staging Table RecId To Process");
      OnMigrateCustomerDimensions("Staging Table RecId To Process");
    
      // migrate transactions for this customer
      OnMigrateCustomerPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated); <=====================
      OnMigrateCustomerTransactions("Staging Table RecId To Process",ChartOfAccountsMigrated);
      GenJournalLineIsSet := FALSE;
      CustomerIsSet := FALSE;
    UNTIL NEXT = 0;
Codeunit<Customer Data Migration Facade>.PROCEDURE<OnMigrateCustomerTransactions>
  Raised in: Codeunit<Customer Data Migration Facade>.<OnRun>
    Code lines:
    ...
      OnMigrateCustomer("Staging Table RecId To Process");
      OnMigrateCustomerDimensions("Staging Table RecId To Process");
    
      // migrate transactions for this customer
      OnMigrateCustomerPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated);
      OnMigrateCustomerTransactions("Staging Table RecId To Process",ChartOfAccountsMigrated); <=====================
      GenJournalLineIsSet := FALSE;
      CustomerIsSet := FALSE;
    UNTIL NEXT = 0;
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateCostingMethod>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    FINDSET;
    ChartOfAccountsMigrated := DataMigrationStatusFacade.HasMigratedChartOfAccounts(Rec);
    REPEAT
      OnMigrateItem("Staging Table RecId To Process");
      OnMigrateItemTrackingCode("Staging Table RecId To Process");
      OnMigrateCostingMethod("Staging Table RecId To Process"); // needs to be set after item tracking code because of onvalidate trigger check <=====================
      OnMigrateItemUnitOfMeasure("Staging Table RecId To Process");
      OnMigrateItemDiscountGroup("Staging Table RecId To Process");
      OnMigrateItemSalesLineDiscount("Staging Table RecId To Process");
      OnMigrateItemPrice("Staging Table RecId To Process");
    ...
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateInventoryTransactions>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    ...
      OnMigrateItemDimensions("Staging Table RecId To Process");
    
      // migrate transactions for this item as long as it is an inventory item
      IF GlobalItem.Type = GlobalItem.Type::Inventory THEN BEGIN
        OnMigrateItemPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated);
        OnMigrateInventoryTransactions("Staging Table RecId To Process",ChartOfAccountsMigrated); <=====================
        ItemJournalLineIsSet := FALSE;
      END;
      ItemIsSet := FALSE;
    UNTIL NEXT = 0;
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItem>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    FINDSET;
    ChartOfAccountsMigrated := DataMigrationStatusFacade.HasMigratedChartOfAccounts(Rec);
    REPEAT
      OnMigrateItem("Staging Table RecId To Process"); <=====================
      OnMigrateItemTrackingCode("Staging Table RecId To Process"); <=====================
      OnMigrateCostingMethod("Staging Table RecId To Process"); // needs to be set after item tracking code because of onvalidate trigger check
      OnMigrateItemUnitOfMeasure("Staging Table RecId To Process"); <=====================
      OnMigrateItemDiscountGroup("Staging Table RecId To Process"); <=====================
      OnMigrateItemSalesLineDiscount("Staging Table RecId To Process"); <=====================
      OnMigrateItemPrice("Staging Table RecId To Process"); <=====================
    ...
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemDimensions>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    ...
      OnMigrateItemUnitOfMeasure("Staging Table RecId To Process");
      OnMigrateItemDiscountGroup("Staging Table RecId To Process");
      OnMigrateItemSalesLineDiscount("Staging Table RecId To Process");
      OnMigrateItemPrice("Staging Table RecId To Process");
      OnMigrateItemTariffNo("Staging Table RecId To Process");
      OnMigrateItemDimensions("Staging Table RecId To Process"); <=====================
    
      // migrate transactions for this item as long as it is an inventory item
      IF GlobalItem.Type = GlobalItem.Type::Inventory THEN BEGIN
        OnMigrateItemPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated);
    ...
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemDiscountGroup>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    ...
    REPEAT
      OnMigrateItem("Staging Table RecId To Process");
      OnMigrateItemTrackingCode("Staging Table RecId To Process");
      OnMigrateCostingMethod("Staging Table RecId To Process"); // needs to be set after item tracking code because of onvalidate trigger check
      OnMigrateItemUnitOfMeasure("Staging Table RecId To Process");
      OnMigrateItemDiscountGroup("Staging Table RecId To Process"); <=====================
      OnMigrateItemSalesLineDiscount("Staging Table RecId To Process");
      OnMigrateItemPrice("Staging Table RecId To Process");
      OnMigrateItemTariffNo("Staging Table RecId To Process");
      OnMigrateItemDimensions("Staging Table RecId To Process");
    ...
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemPostingGroups>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    ...
      OnMigrateItemTariffNo("Staging Table RecId To Process");
      OnMigrateItemDimensions("Staging Table RecId To Process");
    
      // migrate transactions for this item as long as it is an inventory item
      IF GlobalItem.Type = GlobalItem.Type::Inventory THEN BEGIN
        OnMigrateItemPostingGroups("Staging Table RecId To Process",ChartOfAccountsMigrated); <=====================
        OnMigrateInventoryTransactions("Staging Table RecId To Process",ChartOfAccountsMigrated);
        ItemJournalLineIsSet := FALSE;
      END;
      ItemIsSet := FALSE;
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemPrice>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    ...
      OnMigrateItemTrackingCode("Staging Table RecId To Process");
      OnMigrateCostingMethod("Staging Table RecId To Process"); // needs to be set after item tracking code because of onvalidate trigger check
      OnMigrateItemUnitOfMeasure("Staging Table RecId To Process");
      OnMigrateItemDiscountGroup("Staging Table RecId To Process");
      OnMigrateItemSalesLineDiscount("Staging Table RecId To Process");
      OnMigrateItemPrice("Staging Table RecId To Process"); <=====================
      OnMigrateItemTariffNo("Staging Table RecId To Process");
      OnMigrateItemDimensions("Staging Table RecId To Process");
    
      // migrate transactions for this item as long as it is an inventory item
    ...
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemSalesLineDiscount>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    ...
      OnMigrateItem("Staging Table RecId To Process");
      OnMigrateItemTrackingCode("Staging Table RecId To Process");
      OnMigrateCostingMethod("Staging Table RecId To Process"); // needs to be set after item tracking code because of onvalidate trigger check
      OnMigrateItemUnitOfMeasure("Staging Table RecId To Process");
      OnMigrateItemDiscountGroup("Staging Table RecId To Process");
      OnMigrateItemSalesLineDiscount("Staging Table RecId To Process"); <=====================
      OnMigrateItemPrice("Staging Table RecId To Process");
      OnMigrateItemTariffNo("Staging Table RecId To Process");
      OnMigrateItemDimensions("Staging Table RecId To Process");
    
    ...
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemTariffNo>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    ...
      OnMigrateCostingMethod("Staging Table RecId To Process"); // needs to be set after item tracking code because of onvalidate trigger check
      OnMigrateItemUnitOfMeasure("Staging Table RecId To Process");
      OnMigrateItemDiscountGroup("Staging Table RecId To Process");
      OnMigrateItemSalesLineDiscount("Staging Table RecId To Process");
      OnMigrateItemPrice("Staging Table RecId To Process");
      OnMigrateItemTariffNo("Staging Table RecId To Process"); <=====================
      OnMigrateItemDimensions("Staging Table RecId To Process");
    
      // migrate transactions for this item as long as it is an inventory item
      IF GlobalItem.Type = GlobalItem.Type::Inventory THEN BEGIN
    ...
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemTrackingCode>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    FINDSET;
    ChartOfAccountsMigrated := DataMigrationStatusFacade.HasMigratedChartOfAccounts(Rec);
    REPEAT
      OnMigrateItem("Staging Table RecId To Process");
      OnMigrateItemTrackingCode("Staging Table RecId To Process"); <=====================
      OnMigrateCostingMethod("Staging Table RecId To Process"); // needs to be set after item tracking code because of onvalidate trigger check
      OnMigrateItemUnitOfMeasure("Staging Table RecId To Process");
      OnMigrateItemDiscountGroup("Staging Table RecId To Process");
      OnMigrateItemSalesLineDiscount("Staging Table RecId To Process");
      OnMigrateItemPrice("Staging Table RecId To Process");
    ...
Codeunit<Item Data Migration Facade>.PROCEDURE<OnMigrateItemUnitOfMeasure>
  Raised in: Codeunit<Item Data Migration Facade>.<OnRun>
    Code lines:
    ...
    ChartOfAccountsMigrated := DataMigrationStatusFacade.HasMigratedChartOfAccounts(Rec);
    REPEAT
      OnMigrateItem("Staging Table RecId To Process");
      OnMigrateItemTrackingCode("Staging Table RecId To Process");
      OnMigrateCostingMethod("Staging Table RecId To Process"); // needs to be set after item tracking code because of onvalidate trigger check
      OnMigrateItemUnitOfMeasure("Staging Table RecId To Process"); <=====================
      OnMigrateItemDiscountGroup("Staging Table RecId To Process");
      OnMigrateItemSalesLineDiscount("Staging Table RecId To Process");
      OnMigrateItemPrice("Staging Table RecId To Process");
      OnMigrateItemTariffNo("Staging Table RecId To Process");
    ...
Codeunit<API Webhook Notification Mgt.>.PROCEDURE<OnGetDelayTime>
  Raised in: Codeunit<API Webhook Notification Mgt.>.PROCEDURE<GetDelayTime>
    Code lines:
    OnGetDelayTime(Handled,DelayTime); <=====================
    IF Handled THEN
      EXIT(DelayTime);
    
    DelayTime := ServerConfigSettingHandler.GetApiSubscriptionDelayTime;
    EXIT(DelayTime);
Codeunit<API Webhook Notification Send>.PROCEDURE<OnAfterProcessNotifications>
  Raised in: Codeunit<API Webhook Notification Send>.PROCEDURE<ProcessNotifications>
    Code lines:
    ...
          SENDTRACETAG('00006ZU',APIWebhookCategoryLbl,VERBOSITY::Normal,
            STRSUBSTNO(RescheduleBeforeOrEqualToProcessingMsg,
              DateTimeToString(RescheduleDateTime),DateTimeToString(ProcessingDateTime)),
            DATACLASSIFICATION::SystemMetadata);
    END;
    OnAfterProcessNotifications; <=====================
Codeunit<API Webhook Notification Send>.PROCEDURE<OnAfterSendNotification>
  Raised in: Codeunit<API Webhook Notification Send>.PROCEDURE<SendNotification>
    Code lines:
    ...
    Success := SendRequest(
        NotificationUrlNumber,NotificationUrl,NotificationPayload,ResponseBody,ErrorMessage,ErrorDetails,HttpStatusCode);
    IF NOT Success THEN
      ErrorMessage += GETLASTERRORTEXT + ErrorMessage;
    
    OnAfterSendNotification(ErrorMessage,ErrorDetails,HttpStatusCode); <=====================
    
    IF NOT Success THEN BEGIN
      Reschedule := ShouldReschedule(HttpStatusCode);
      SENDTRACETAG('000076N',APIWebhookCategoryLbl,VERBOSITY::Warning,
    ...
Codeunit<API Webhook Notification Send>.PROCEDURE<OnBeforeDeleteInactiveJobs>
  Raised in: Codeunit<API Webhook Notification Send>.PROCEDURE<DeleteInactiveJobs>
    Code lines:
    OnBeforeDeleteInactiveJobs; <=====================
    JobQueueEntry.SETRANGE("Object Type to Run",JobQueueEntry."Object Type to Run"::Codeunit);
    JobQueueEntry.SETRANGE("Object ID to Run",CODEUNIT::"API Webhook Notification Send");
    JobQueueEntry.SETFILTER(Status,'<>%1&<>%2',JobQueueEntry.Status::"In Process",JobQueueEntry.Status::Ready);
    IF JobQueueEntry.FINDSET THEN
      REPEAT
        SENDTRACETAG('000070N',APIWebhookCategoryLbl,VERBOSITY::Normal,
          STRSUBSTNO(DeleteInactiveJobMsg,JobQueueEntry.Status,DateTimeToString(JobQueueEntry."Earliest Start Date/Time")),
          DATACLASSIFICATION::SystemMetadata);
        IF JobQueueEntry.DELETE(TRUE) THEN ;
    ...
Codeunit<API Webhook Notification Send>.PROCEDURE<OnBeforeProcessNotifications>
  Raised in: Codeunit<API Webhook Notification Send>.PROCEDURE<ProcessNotifications>
    Code lines:
    SENDTRACETAG('00006ZT',APIWebhookCategoryLbl,VERBOSITY::Normal,
      STRSUBSTNO(ProcessNotificationsMsg,DateTimeToString(ProcessingDateTime)),DATACLASSIFICATION::SystemMetadata);
    OnBeforeProcessNotifications; <=====================
    TransferAggregateNotificationsToBuffer;
    AggregateNotificationsExist := GenerateAggregateNotifications;
    IF AggregateNotificationsExist THEN BEGIN
      SendNotifications;
      UpdateTablesFromBuffer(RescheduleDateTime);
      IF RescheduleDateTime > ProcessingDateTime THEN
        APIWebhookNotificationMgt.ScheduleJob(RescheduleDateTime)
    ...
Codeunit<API Webhook Notification Send>.PROCEDURE<OnBeforeSendNotification>
  Raised in: Codeunit<API Webhook Notification Send>.PROCEDURE<SendNotification>
    Code lines:
    ...
        STRSUBSTNO(EmptyPayloadPerNotificationUrlErr,NotificationUrlNumber),
        DATACLASSIFICATION::SystemMetadata);
      EXIT(TRUE);
    END;
    
    OnBeforeSendNotification(NotificationUrl,NotificationPayload); <=====================
    
    SENDTRACETAG('000029B',APIWebhookCategoryLbl,VERBOSITY::Normal,
      STRSUBSTNO(SendNotificationMsg,NotificationUrlNumber),DATACLASSIFICATION::SystemMetadata);
    Success := SendRequest(
    ...
Codeunit<API Webhook Notification Send>.PROCEDURE<OnGetMaxNumberOfAttempts>
  Raised in: Codeunit<API Webhook Notification Send>.PROCEDURE<GetMaxNumberOfAttempts>
    Code lines:
    OnGetMaxNumberOfAttempts(Handled,Value); <=====================
    IF Handled THEN
      EXIT(Value);
    
    EXIT(5);
Codeunit<API Webhook Notification Send>.PROCEDURE<OnGetMaxNumberOfNotifications>
  Raised in: Codeunit<API Webhook Notification Send>.PROCEDURE<GetMaxNumberOfNotifications>
    Code lines:
    OnGetMaxNumberOfNotifications(Handled,MaxNumberOfNotifications); <=====================
    IF Handled THEN
      EXIT(MaxNumberOfNotifications);
    
    MaxNumberOfNotifications := ServerConfigSettingHandler.GetApiSubscriptionMaxNumberOfNotifications;
    EXIT(MaxNumberOfNotifications);
Codeunit<API Webhook Notification Send>.PROCEDURE<OnGetSendingNotificationTimeout>
  Raised in: Codeunit<API Webhook Notification Send>.PROCEDURE<GetSendingNotificationTimeout>
    Code lines:
    OnGetSendingNotificationTimeout(Handled,Timeout); <=====================
    IF Handled THEN
      EXIT(Timeout);
    
    Timeout := ServerConfigSettingHandler.GetApiSubscriptionSendingNotificationTimeout;
    EXIT(Timeout);
Codeunit<Sales-Explode BOM>.PROCEDURE<OnAfterConfirmExplosion>
  Raised in: Codeunit<Sales-Explode BOM>.<OnRun>
    Code lines:
    ...
      IF Selection = 0 THEN
        EXIT;
    END ELSE
      Selection := 2;
    
    OnAfterConfirmExplosion(Rec,Selection,HideDialog); <=====================
    
    IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN BEGIN
      ToSalesLine := Rec;
      FromBOMComp.SETRANGE(Type,FromBOMComp.Type::Item);
    ...
Codeunit<Sales-Explode BOM>.PROCEDURE<OnAfterExplodeBOMCompLines>
  Raised in: Codeunit<Sales-Explode BOM>.PROCEDURE<ExplodeBOMCompLines>
    Code lines:
    ...
    
      IF TransferExtendedText.SalesCheckIfAnyExtText(ToSalesLine,FALSE) THEN
        TransferExtendedText.InsertSalesExtText(ToSalesLine);
    END;
    
    OnAfterExplodeBOMCompLines(SalesLine,Selection); <=====================
Codeunit<Sales-Explode BOM>.PROCEDURE<OnBeforeConfirmExplosion>
  Raised in: Codeunit<Sales-Explode BOM>.<OnRun>
    Code lines:
    ...
    SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);
    
    FromBOMComp.SETRANGE("Parent Item No.","No.");
    NoOfBOMComp := FromBOMComp.COUNT;
    
    OnBeforeConfirmExplosion(Rec,Selection,HideDialog); <=====================
    
    IF NOT HideDialog THEN BEGIN
      IF NoOfBOMComp = 0 THEN
        ERROR(Text001,"No.");
    ...
Codeunit<Sales-Explode BOM>.PROCEDURE<OnBeforeOnRun>
  Raised in: Codeunit<Sales-Explode BOM>.<OnRun>
    Code lines:
    OnBeforeOnRun(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    TESTFIELD(Type,Type::Item);
    TESTFIELD("Quantity Shipped",0);
    TESTFIELD("Return Qty. Received",0);
    
    CALCFIELDS("Reserved Qty. (Base)");
    TESTFIELD("Reserved Qty. (Base)",0);
    ...
Codeunit<Sales-Explode BOM>.PROCEDURE<OnBeforeToSalesLineModify>
  Raised in: Codeunit<Sales-Explode BOM>.<OnRun>
    Code lines:
    ...
    ToSalesLine := Rec;
    ToSalesLine.INIT;
    ToSalesLine.Description := Description;
    ToSalesLine."Description 2" := "Description 2";
    ToSalesLine."BOM Item No." := BOMItemNo;
    OnBeforeToSalesLineModify(ToSalesLine,Rec); <=====================
    ToSalesLine.MODIFY;
    
    IF TransferExtendedText.SalesCheckIfAnyExtText(ToSalesLine,FALSE) THEN
      TransferExtendedText.InsertSalesExtText(ToSalesLine);
    ...
Codeunit<Sales-Explode BOM>.PROCEDURE<OnInsertOfExplodedBOMLineToSalesLine>
  Raised in: Codeunit<Sales-Explode BOM>.PROCEDURE<ExplodeBOMCompLines>
    Code lines:
    ...
          IF NOT ItemTranslation.GET(FromBOMComp."No.",FromBOMComp."Variant Code",SalesHeader."Language Code") THEN
            ToSalesLine.Description := FromBOMComp.Description;
    
        ToSalesLine."BOM Item No." := BOMItemNo;
    
        OnInsertOfExplodedBOMLineToSalesLine(ToSalesLine,SalesLine,FromBOMComp); <=====================
    
        ToSalesLine.INSERT;
    
        ToSalesLine.VALIDATE("Qty. to Assemble to Order");
    ...
Codeunit<Power BI Service Mgt.>.PROCEDURE<OnGetReports>
  Raised in: Codeunit<Power BI Service Mgt.>.PROCEDURE<GetReports>
    Code lines:
    ...
    // Reports are marked as Enabled if they've previously been selected for the given context (page ID).
    IF NOT TempPowerBIReportBuffer.ISEMPTY THEN
      EXIT;
    
    IF NOT CanHandleServiceCalls THEN BEGIN
      OnGetReports(TempPowerBIReportBuffer,ExceptionMessage,ExceptionDetails,EnglishContext); <=====================
      EXIT;
    END;
    
    Url := GetReportsUrl;
    ...
Codeunit<Power BI Service Mgt.>.PROCEDURE<OnRetryUploads>
  Raised in: Codeunit<Power BI Service Mgt.>.PROCEDURE<RetryPartialUploadBatch>
    Code lines:
    ...
              COMPANYNAME,FinancialsAccessToken,GetServiceRetries)
        ELSE
          EXIT;
      END ELSE BEGIN
        ApiResponseList := ApiResponseList.ImportedReportResponseList();
        OnRetryUploads(ImportIdList,ApiResponseList); <=====================
      END;
      FOREACH ApiResponse IN ApiResponseList DO
        HandleUploadResponse(ApiResponse.ImportId,NullGuidTxt,ApiResponse.ImportedReport,
          ApiResponse.ShouldRetry,ApiResponse.RetryAfter);
    ...
Codeunit<Power BI Service Mgt.>.PROCEDURE<OnUploadReports>
  Raised in: Codeunit<Power BI Service Mgt.>.PROCEDURE<UploadDefaultReportForContext>
    Code lines:
    ...
              COMPANYNAME,FinancialsAccessToken,GetServiceRetries)
        ELSE
          EXIT;
      END ELSE BEGIN
        ApiResponseList := ApiResponseList.ImportReportResponseList();
        OnUploadReports(ApiRequestList,ApiResponseList); <=====================
      END;
      FOREACH ApiResponse IN ApiResponseList DO
        HandleUploadResponse(ApiResponse.ImportId,ApiResponse.RequestReportId,
          ApiResponse.ImportedReport,ApiResponse.ShouldRetry,ApiResponse.RetryAfter);
    ...
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireAcquireOnBehalfOfToken>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<AcquireOnBehalfOfToken>
    Code lines:
    CheckProvider;
    IF CanHandle THEN
      AccessToken := AuthFlow.ALAcquireOnBehalfOfToken(ResourceName)
    ELSE
      OnAcquireAcquireOnBehalfOfToken(ResourceName,AccessToken); <=====================
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireGuestToken>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<AcquireGuestToken>
    Code lines:
    CheckProvider;
    IF CanHandle THEN
      AccessToken := AuthFlow.ALAcquireGuestToken(ResourceName,GuestTenantId)
    ELSE
      OnAcquireGuestToken(ResourceName,GuestTenantId,AccessToken); <=====================
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireOnBehalfOfTokenAndTokenCacheState>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<AcquireOnBehalfOfTokenAndTokenCacheState>
    Code lines:
    CheckProvider;
    IF CanHandle THEN
      AccessToken := AuthFlow.ALAcquireOnBehalfOfToken(ResourceName,TokenCacheState)
    ELSE
      OnAcquireOnBehalfOfTokenAndTokenCacheState(ResourceName,AccessToken,TokenCacheState); <=====================
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireTokenByAuthorizationCode>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<AcquireTokenByAuthorizationCode>
    Code lines:
    CheckProvider;
    IF CanHandle THEN
      AccessToken := AuthFlow.ALAcquireTokenByAuthorizationCode(AuthorizationCode,ResourceName)
    ELSE
      OnAcquireTokenByAuthorizationCode(AuthorizationCode,ResourceName,AccessToken); <=====================
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireTokenByAuthorizationCodeWithCredentials>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<AcquireTokenByAuthorizationCodeWithCredentials>
    Code lines:
    CheckProvider;
    IF CanHandle THEN
      AccessToken := AuthFlow.ALAcquireTokenByAuthorizationCodeWithCredentials(AuthorizationCode,ClientID,ApplicationKey,ResourceName)
    ELSE
      OnAcquireTokenByAuthorizationCodeWithCredentials(AuthorizationCode,ClientID,ApplicationKey,ResourceName,AccessToken); <=====================
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireTokenFromCache>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<AcquireTokenFromCache>
    Code lines:
    CheckProvider;
    IF CanHandle THEN
      AccessToken := AuthFlow.ALAcquireTokenFromCache(ResourceName)
    ELSE
      OnAcquireTokenFromCache(ResourceName,AccessToken); <=====================
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireTokenFromCacheState>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<AcquireTokenFromCacheState>
    Code lines:
    CheckProvider;
    IF CanHandle THEN
      AccessToken := AuthFlow.ALAcquireTokenFromTokenCacheState(ResourceName,AadUserId,TokenCacheState,NewTokenCacheState)
    ELSE
      OnAcquireTokenFromCacheState(ResourceName,AadUserId,TokenCacheState,NewTokenCacheState,AccessToken); <=====================
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnAcquireTokenFromCacheWithCredentials>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<AcquireTokenFromCacheWithCredentials>
    Code lines:
    CheckProvider;
    IF CanHandle THEN
      AccessToken := AuthFlow.ALAcquireTokenFromCacheWithCredentials(ClientID,AppKey,ResourceName)
    ELSE
      OnAcquireTokenFromCacheWithCredentials(ClientID,AppKey,ResourceName,AccessToken); <=====================
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnCheckProvider>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<CheckProvider>
    Code lines:
    IF CanHandle THEN
      Initialized := NOT ISNULL(AuthFlow)
    ELSE
      OnCheckProvider(Initialized); <=====================
    
    IF NOT Initialized THEN
      ERROR(ProviderNotInitializedErr);
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnCreateExchangeServiceWrapperWithToken>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<CreateExchangeServiceWrapperWithToken>
    Code lines:
    IF CanHandle THEN
      Service := ServiceFactory.CreateServiceWrapperWithToken(Token)
    ELSE
      OnCreateExchangeServiceWrapperWithToken(Token,Service); <=====================
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnGetSaasClientId>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<GetSaasClientId>
    Code lines:
    CheckProvider;
    IF CanHandle THEN
      ClientID := AuthFlow.ALGetSaasClientId
    ELSE
      OnGetSaasClientId(ClientID); <=====================
Codeunit<Azure AD Auth Flow>.PROCEDURE<OnInitialize>
  Raised in: Codeunit<Azure AD Auth Flow>.PROCEDURE<Initialize>
    Code lines:
    IF CanHandle THEN
      AuthFlow := AuthFlow.ALAzureAdCodeGrantFlow(Uri.Uri(RedirectUri))
    ELSE
      OnInitialize(RedirectUri,AuthFlow); <=====================
Codeunit<Set Power BI User Config>.PROCEDURE<OnBeforeSetUserConfig>
  Raised in: Codeunit<Set Power BI User Config>.PROCEDURE<SetUserConfig>
    Code lines:
    IsHandled := FALSE;
    OnBeforeSetUserConfig(PowerBIUserConfiguration,PageID,PowerBIVisible,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(PowerBIVisible);
    
    // load existing UserConfig entry to get PowerBI FactBox visibility
    // entry by itself is created on the FactBox page
    PowerBIUserConfiguration.RESET;
    PowerBIUserConfiguration.SETFILTER("Page ID",PageID);
    PowerBIUserConfiguration.SETFILTER("User Security ID",USERSECURITYID);
    ...
Codeunit<Sales-Get Shipment>.PROCEDURE<OnAfterCalcInvoiceDiscount>
  Raised in: Codeunit<Sales-Get Shipment>.PROCEDURE<CalcInvoiceDiscount>
    Code lines:
    SalesReceivablesSetup.GET;
    IF SalesReceivablesSetup."Calc. Inv. Discount" THEN BEGIN
      SalesCalcDiscount.CalculateInvoiceDiscountOnLine(SalesLine);
      OnAfterCalcInvoiceDiscount(SalesLine); <=====================
    END;
Codeunit<Sales-Get Shipment>.PROCEDURE<OnAfterInsertLine>
  Raised in: Codeunit<Sales-Get Shipment>.PROCEDURE<CreateInvLines>
    Code lines:
    ...
            SalesShptLine.InsertInvLineFromShptLine(SalesLine);
            CalcUpdatePrepmtAmtToDeductRounding(SalesShptLine,SalesLine,PrepmtAmtToDeductRounding);
            IF Type = Type::"Charge (Item)" THEN
              GetItemChargeAssgnt(SalesShptLine2,SalesLine."Qty. to Invoice");
          END;
          OnAfterInsertLine(SalesShptLine,SalesLine); <=====================
        UNTIL NEXT = 0;
    
        OnAfterInsertLines(SalesHeader); <=====================
        CalcInvoiceDiscount(SalesLine);
    ...
Codeunit<Sales-Get Shipment>.PROCEDURE<OnAfterInsertLines>
  Raised in: Codeunit<Sales-Get Shipment>.PROCEDURE<CreateInvLines>
    Code lines:
    ...
              GetItemChargeAssgnt(SalesShptLine2,SalesLine."Qty. to Invoice");
          END;
          OnAfterInsertLine(SalesShptLine,SalesLine);
        UNTIL NEXT = 0;
    
        OnAfterInsertLines(SalesHeader); <=====================
        CalcInvoiceDiscount(SalesLine);
    
        IF TransferLine THEN
          AdjustPrepmtAmtToDeductRounding(SalesLine,PrepmtAmtToDeductRounding);
    ...
Codeunit<Sales-Get Shipment>.PROCEDURE<OnBeforeCalcUpdatePrepmtAmtToDeductRounding>
  Raised in: Codeunit<Sales-Get Shipment>.PROCEDURE<CalcUpdatePrepmtAmtToDeductRounding>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCalcUpdatePrepmtAmtToDeductRounding(SalesShptLine,SalesLine,RoundingAmount,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF (SalesLine."Prepayment %" > 0) AND (SalesLine."Prepayment %" < 100) AND
       (SalesLine."Document Type" = SalesLine."Document Type"::Invoice)
    THEN BEGIN
      SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,SalesShptLine."Order No.",SalesShptLine."Order Line No.");
      Fraction := SalesShptLine.Quantity / SalesOrderLine.Quantity;
    ...
Codeunit<Sales-Get Shipment>.PROCEDURE<OnBeforeGetItemChargeAssgnt>
  Raised in: Codeunit<Sales-Get Shipment>.PROCEDURE<GetItemChargeAssgnt>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetItemChargeAssgnt(SalesShptLine,QtyToInvoice,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,SalesShptLine."Order No.",SalesShptLine."Order Line No.") THEN
      EXIT;
    
    ItemChargeAssgntSales.LOCKTABLE;
    ItemChargeAssgntSales.RESET;
    ...
Codeunit<Sales-Get Shipment>.PROCEDURE<OnBeforeInsertLines>
  Raised in: Codeunit<Sales-Get Shipment>.PROCEDURE<CreateInvLines>
    Code lines:
    ...
        SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
        SalesLine.SETRANGE("Document No.",SalesHeader."No.");
        SalesLine."Document Type" := SalesHeader."Document Type";
        SalesLine."Document No." := SalesHeader."No.";
        Window.OPEN(Text002 + Text003);
        OnBeforeInsertLines(SalesHeader); <=====================
    
        REPEAT
          LineCount := LineCount + 1;
          Window.UPDATE(1,LineCount);
    ...
Codeunit<Sales-Get Shipment>.PROCEDURE<OnBeforeTransferLineToSalesDoc>
  Raised in: Codeunit<Sales-Get Shipment>.PROCEDURE<CreateInvLines>
    Code lines:
    ...
                SalesHeader.FIELDCAPTION("Bill-to Customer No."),
                SalesHeader.TABLECAPTION,SalesHeader."No.",
                SalesShptHeader.TABLECAPTION,SalesShptHeader."No.");
              TransferLine := FALSE;
            END;
            OnBeforeTransferLineToSalesDoc(SalesShptHeader,SalesShptLine2,SalesHeader,TransferLine); <=====================
          END;
          IF TransferLine THEN BEGIN
            SalesShptLine := SalesShptLine2;
            SalesShptLine.TESTFIELD("VAT Bus. Posting Group",SalesHeader."VAT Bus. Posting Group");
    ...
Codeunit<Sales-Get Shipment>.PROCEDURE<OnRunAfterFilterSalesShpLine>
  Raised in: Codeunit<Sales-Get Shipment>.<OnRun>
    Code lines:
    ...
    SalesShptLine.SETRANGE("Bill-to Customer No.",SalesHeader."Bill-to Customer No.");
    SalesShptLine.SETRANGE("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
    SalesShptLine.SETFILTER("Qty. Shipped Not Invoiced",'<>0');
    SalesShptLine.SETRANGE("Currency Code",SalesHeader."Currency Code");
    SalesShptLine.SETRANGE("Authorized for Credit Card",FALSE);
    OnRunAfterFilterSalesShpLine(SalesShptLine,SalesHeader); <=====================
    
    GetShipments.SETTABLEVIEW(SalesShptLine);
    GetShipments.SetSalesHeader(SalesHeader);
    GetShipments.LOOKUPMODE := TRUE;
Codeunit<Item Tracking Management>.PROCEDURE<OnAfterCreateTrackingSpecification>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<CreateTrackingSpecification>
    Code lines:
    ...
    ToTrackingSpecification."Qty. to Handle (Base)" := 0;
    ToTrackingSpecification."Qty. to Invoice (Base)" := 0;
    ToTrackingSpecification."Quantity Handled (Base)" := FromReservEntry."Qty. to Handle (Base)";
    ToTrackingSpecification."Quantity Invoiced (Base)" := FromReservEntry."Qty. to Invoice (Base)";
    
    OnAfterCreateTrackingSpecification(ToTrackingSpecification,FromReservEntry); <=====================
Codeunit<Item Tracking Management>.PROCEDURE<OnAfterInitReservEntry>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<InitReservEntry>
    Code lines:
    ...
        "Shipment Date" := Date;
      "Creation Date" := WORKDATE;
      "Created By" := USERID;
    END;
    
    OnAfterInitReservEntry(ReservEntry,ItemLedgEntryBuf); <=====================
Codeunit<Item Tracking Management>.PROCEDURE<OnAfterInsertWhseItemTrkgLinesLoop>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<InsertWhseItemTrkgLines>
    Code lines:
    ...
            WhseItemTrkgLine."Qty. Registered (Base)" += QtyHandledBase;
            WhseItemTrkgLine.VALIDATE("Quantity (Base)",WhseItemTrkgLine."Quantity (Base)" + ItemLedgEntry.Quantity);
            OnBeforeModifyWhseItemTrkgLines(WhseItemTrkgLine,PostedWhseReceiptLine,WhseItemEntryRelation,ItemLedgEntry);
            WhseItemTrkgLine.MODIFY;
          END;
          OnAfterInsertWhseItemTrkgLinesLoop(PostedWhseReceiptLine,WhseItemEntryRelation,WhseItemTrkgLine); <=====================
        UNTIL WhseItemEntryRelation.NEXT = 0;
      END;
    END;
Codeunit<Item Tracking Management>.PROCEDURE<OnAfterReserveEntryFilter>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<RetrieveItemTrackingFromReservEntry>
    Code lines:
    ...
      EXIT(RetrieveSubcontrItemTracking(ItemJnlLine,TempTrackingSpec));
    
    ReservEntry.SetSourceFilter(
      DATABASE::"Item Journal Line",ItemJnlLine."Entry Type",ItemJnlLine."Journal Template Name",ItemJnlLine."Line No.",TRUE);
    ReservEntry.SetSourceFilter2(ItemJnlLine."Journal Batch Name",0);
    OnAfterReserveEntryFilter(ItemJnlLine,ReservEntry); <=====================
    ReservEntry.SETFILTER("Qty. to Handle (Base)",'<>0');
    OnRetrieveItemTrackingFromReservEntryFilter(ReservEntry,ItemJnlLine);
    IF SumUpItemTracking(ReservEntry,TempTrackingSpec,FALSE,TRUE) THEN BEGIN
      ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Prospect);
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnAfterRetrieveAppliedExpirationDate>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<RetrieveAppliedExpirationDate>
    Code lines:
    ...
        ItemLedgEntry.GET(ItemApplnEntry."Inbound Item Entry No.");
        "Expiration Date" := ItemLedgEntry."Expiration Date";
      END;
    END;
    
    OnAfterRetrieveAppliedExpirationDate(TempItemLedgEntry,ItemApplnEntry); <=====================
Codeunit<Item Tracking Management>.PROCEDURE<OnAfterSplitPostedWhseReceiptLine>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<SplitPostedWhseRcptLine>
    Code lines:
    ...
    
    CheckWhseItemTrkgSetup(PostedWhseRcptLine."Item No.",WhseSNRequired,WhseLNRequired,FALSE);
    IF NOT (WhseSNRequired OR WhseLNRequired) THEN BEGIN
      TempPostedWhseRcptLine := PostedWhseRcptLine;
      TempPostedWhseRcptLine.INSERT;
      OnAfterSplitPostedWhseReceiptLine(PostedWhseRcptLine,TempPostedWhseRcptLine); <=====================
      EXIT;
    END;
    
    WhseItemEntryRelation.RESET;
    ...
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<SplitPostedWhseRcptLine>
    Code lines:
    ...
    
    CheckWhseItemTrkgSetup(PostedWhseRcptLine."Item No.",WhseSNRequired,WhseLNRequired,FALSE);
    IF NOT (WhseSNRequired OR WhseLNRequired) THEN BEGIN
      TempPostedWhseRcptLine := PostedWhseRcptLine;
      TempPostedWhseRcptLine.INSERT;
      OnAfterSplitPostedWhseReceiptLine(PostedWhseRcptLine,TempPostedWhseRcptLine); <=====================
      EXIT;
    END;
    
    WhseItemEntryRelation.RESET;
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnAfterSplitWhseJnlLine>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<SplitWhseJnlLine>
    Code lines:
    ...
    
    CheckWhseItemTrkgSetup(TempWhseJnlLine."Item No.",WhseSNRequired,WhseLNRequired,FALSE);
    IF NOT (WhseSNRequired OR WhseLNRequired) THEN BEGIN
      TempWhseJnlLine2 := TempWhseJnlLine;
      TempWhseJnlLine2.INSERT;
      OnAfterSplitWhseJnlLine(TempWhseJnlLine,TempWhseJnlLine2); <=====================
      EXIT;
    END;
    
    LineNo := TempWhseJnlLine."Line No.";
    ...
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<SplitWhseJnlLine>
    Code lines:
    ...
    
    CheckWhseItemTrkgSetup(TempWhseJnlLine."Item No.",WhseSNRequired,WhseLNRequired,FALSE);
    IF NOT (WhseSNRequired OR WhseLNRequired) THEN BEGIN
      TempWhseJnlLine2 := TempWhseJnlLine;
      TempWhseJnlLine2.INSERT;
      OnAfterSplitWhseJnlLine(TempWhseJnlLine,TempWhseJnlLine2); <=====================
      EXIT;
    END;
    
    LineNo := TempWhseJnlLine."Line No.";
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnAfterSynchronizeItemTracking>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<SynchronizeItemTracking>
    Code lines:
    // Used for syncronizing between orders linked via Drop Shipment
    ReservEntry1.SetPointer(FromRowID);
    ReservEntry1.SetPointerFilter;
    SynchronizeItemTracking2(ReservEntry1,ToRowID,DialogText);
    
    OnAfterSynchronizeItemTracking(ReservEntry1,ToRowID); <=====================
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeCheckWhseItemTrkg>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<CheckWhseItemTrkg>
    Code lines:
    OnBeforeCheckWhseItemTrkg(TempWhseItemTrkgLine,WhseWkshLine,Checked); <=====================
    IF Checked THEN
      EXIT;
    
    WITH WhseWkshLine DO BEGIN
      IF WhseItemTrackingLine.FINDLAST THEN
        EntryNo := WhseItemTrackingLine."Entry No.";
    
      IF "Source Type" = DATABASE::"Prod. Order Component" THEN BEGIN
        SourceReservEntry.SetSourceFilter("Source Type","Source Subtype","Source No.","Source Subline No.",TRUE);
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeCreateWhseItemTrkgForReceipt>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<CreateWhseItemTrkgForReceipt>
    Code lines:
    ...
            WhseItemTrackingLine."Qty. to Handle (Base)" := WhseItemTrackingLine."Quantity (Base)";
          WhseItemTrackingLine."Qty. to Handle" :=
            ROUND(
              WhseItemTrackingLine."Qty. to Handle (Base)" / WhseItemTrackingLine."Qty. per Unit of Measure",
              UOMMgt.QtyRndPrecision);
          OnBeforeCreateWhseItemTrkgForReceipt(WhseItemTrackingLine,WhseWkshLine,ItemLedgEntry); <=====================
          WhseItemTrackingLine.INSERT;
        UNTIL WhseItemEntryRelation.NEXT = 0;
    END;
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeCreateWhseItemTrkgForResEntry>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<CreateWhseItemTrkgForResEntry>
    Code lines:
    ...
    END ELSE
      IF WhseWkshLine."Qty. (Base)" = WhseWkshLine."Qty. to Handle (Base)" THEN BEGIN
        WhseItemTrackingLine."Qty. to Handle (Base)" := WhseItemTrackingLine."Quantity (Base)";
        WhseItemTrackingLine."Qty. to Handle" := -SourceReservEntry.Quantity;
      END;
    OnBeforeCreateWhseItemTrkgForResEntry(WhseItemTrackingLine,SourceReservEntry,WhseWkshLine); <=====================
    WhseItemTrackingLine.INSERT;
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeExistingExpirationDate>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<ExistingExpirationDate>
    Code lines:
    IsHandled := FALSE;
    OnBeforeExistingExpirationDate(ItemNo,Variant,LotNo,SerialNo,TestMultiple,EntriesExist,ExpDate,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT GetLotSNDataSet(ItemNo,Variant,LotNo,SerialNo,ItemLedgEntry) THEN BEGIN
      EntriesExist := FALSE;
      EXIT;
    END;
    
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeExistingExpirationDateAndQty>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<ExistingExpirationDateAndQty>
    Code lines:
    IsHandled := FALSE;
    OnBeforeExistingExpirationDateAndQty(ItemNo,Variant,LotNo,SerialNo,SumOfEntries,ExpDate,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SumOfEntries := 0;
    IF NOT GetLotSNDataSet(ItemNo,Variant,LotNo,SerialNo,ItemLedgEntry) THEN
      EXIT;
    
    ExpDate := ItemLedgEntry."Expiration Date";
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeFindTempHandlingSpecification>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<SumUpItemTracking>
    Code lines:
    ...
            IF ReservEntry."New Serial No." <> '' THEN
              TempHandlingSpecification.SETRANGE("New Serial No.",ReservEntry."New Serial No." );
            IF ReservEntry."New Lot No." <> '' THEN
              TempHandlingSpecification.SETRANGE("New Lot No.",ReservEntry."New Lot No.");
          END;
          OnBeforeFindTempHandlingSpecification(TempHandlingSpecification,ReservEntry); <=====================
          IF TempHandlingSpecification.FINDFIRST THEN BEGIN
            TempHandlingSpecification."Quantity (Base)" += ReservEntry."Quantity (Base)";
            TempHandlingSpecification."Qty. to Handle (Base)" += ReservEntry."Qty. to Handle (Base)";
            TempHandlingSpecification."Qty. to Invoice (Base)" += ReservEntry."Qty. to Invoice (Base)";
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeInsertReservEntryForPurchLine>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<InsertReservEntryForPurchLine>
    Code lines:
    ...
      IF AppliedToItemEntry THEN
        "Appl.-to Item Entry" := ItemLedgEntryBuf."Entry No.";
      Description := PurchaseLine.Description;
      OnCopyItemLedgEntryTrkgToDocLine(ItemLedgEntryBuf,ReservEntry);
      UpdateItemTracking;
      OnBeforeInsertReservEntryForPurchLine(ReservEntry,PurchaseLine); <=====================
      INSERT;
    END;
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeInsertReservEntryForSalesLine>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<InsertReservEntryForSalesLine>
    Code lines:
    ...
      IF AppliedFromItemEntry THEN
        "Appl.-from Item Entry" := ItemLedgEntryBuf."Entry No.";
      Description := SalesLine.Description;
      OnCopyItemLedgEntryTrkgToDocLine(ItemLedgEntryBuf,ReservEntry);
      UpdateItemTracking;
      OnBeforeInsertReservEntryForSalesLine(ReservEntry,SalesLine); <=====================
      INSERT;
    END;
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeInsertSplitInternalPutAwayLine>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<SplitInternalPutAwayLine>
    Code lines:
    ...
        TempPostedWhseRcptLine."Qty. (Base)" := WhseItemTrackingLine."Qty. to Handle (Base)";
        TempPostedWhseRcptLine.Quantity :=
          ROUND(
            TempPostedWhseRcptLine."Qty. (Base)" / TempPostedWhseRcptLine."Qty. per Unit of Measure",
            UOMMgt.QtyRndPrecision);
        OnBeforeInsertSplitInternalPutAwayLine(TempPostedWhseRcptLine,PostedWhseRcptLine,WhseItemTrackingLine); <=====================
        TempPostedWhseRcptLine.INSERT;
      UNTIL WhseItemTrackingLine.NEXT = 0
    ELSE BEGIN
      TempPostedWhseRcptLine := PostedWhseRcptLine;
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeInsertSplitPostedWhseRcptLine>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<SplitPostedWhseRcptLine>
    Code lines:
    ...
          TempPostedWhseRcptLine."Qty. (Base)" := ItemLedgEntry.Quantity;
          TempPostedWhseRcptLine.Quantity :=
            ROUND(
              TempPostedWhseRcptLine."Qty. (Base)" / TempPostedWhseRcptLine."Qty. per Unit of Measure",
              UOMMgt.QtyRndPrecision);
          OnBeforeInsertSplitPostedWhseRcptLine( <=====================
            TempPostedWhseRcptLine,PostedWhseRcptLine,WhseItemEntryRelation,ItemLedgEntry);
          TempPostedWhseRcptLine.INSERT;
        END;
    
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeInsertWhseItemTrkgLines>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<InsertWhseItemTrkgLines>
    Code lines:
    ...
        WhseItemTrkgLine.SetSourceFilter(SourceType,0,"No.","Line No.",FALSE);
        WhseItemTrkgLine.DELETEALL;
        WhseItemTrkgLine.INIT;
        WhseItemTrkgLine.SETCURRENTKEY("Serial No.","Lot No.");
        REPEAT
          OnBeforeInsertWhseItemTrkgLinesLoop(PostedWhseReceiptLine,WhseItemEntryRelation,WhseItemTrkgLine); <=====================
          WhseItemTrkgLine.SetTrackingFilterFromRelation(WhseItemEntryRelation);
          ItemLedgEntry.GET(WhseItemEntryRelation."Item Entry No.");
          IF (WhseItemEntryRelation."Lot No." <> WhseItemTrkgLine."Lot No.") OR
             (WhseItemEntryRelation."Serial No." <> WhseItemTrkgLine."Serial No.")
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeInsertWhseItemTrkgLinesLoop>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<InsertWhseItemTrkgLines>
    Code lines:
    ...
        WhseItemTrkgLine.SetSourceFilter(SourceType,0,"No.","Line No.",FALSE);
        WhseItemTrkgLine.DELETEALL;
        WhseItemTrkgLine.INIT;
        WhseItemTrkgLine.SETCURRENTKEY("Serial No.","Lot No.");
        REPEAT
          OnBeforeInsertWhseItemTrkgLinesLoop(PostedWhseReceiptLine,WhseItemEntryRelation,WhseItemTrkgLine); <=====================
          WhseItemTrkgLine.SetTrackingFilterFromRelation(WhseItemEntryRelation);
          ItemLedgEntry.GET(WhseItemEntryRelation."Item Entry No.");
          IF (WhseItemEntryRelation."Lot No." <> WhseItemTrkgLine."Lot No.") OR
             (WhseItemEntryRelation."Serial No." <> WhseItemTrkgLine."Serial No.")
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeModifySplitPostedWhseRcptLine>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<SplitPostedWhseRcptLine>
    Code lines:
    ...
          TempPostedWhseRcptLine."Qty. (Base)" += ItemLedgEntry.Quantity;
          TempPostedWhseRcptLine.Quantity :=
            ROUND(
              TempPostedWhseRcptLine."Qty. (Base)" / TempPostedWhseRcptLine."Qty. per Unit of Measure",
              UOMMgt.QtyRndPrecision);
          OnBeforeModifySplitPostedWhseRcptLine( <=====================
            TempPostedWhseRcptLine,PostedWhseRcptLine,WhseItemEntryRelation,ItemLedgEntry);
          TempPostedWhseRcptLine.MODIFY;
    
          CrossDockQty := CrossDockQty - TempPostedWhseRcptLine."Qty. Cross-Docked";
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeModifyWhseItemTrkgLines>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<InsertWhseItemTrkgLines>
    Code lines:
    ...
            WhseItemTrkgLine.INSERT;
          END ELSE BEGIN
            WhseItemTrkgLine."Quantity Handled (Base)" += QtyHandledBase;
            WhseItemTrkgLine."Qty. Registered (Base)" += QtyHandledBase;
            WhseItemTrkgLine.VALIDATE("Quantity (Base)",WhseItemTrkgLine."Quantity (Base)" + ItemLedgEntry.Quantity);
            OnBeforeModifyWhseItemTrkgLines(WhseItemTrkgLine,PostedWhseReceiptLine,WhseItemEntryRelation,ItemLedgEntry); <=====================
            WhseItemTrkgLine.MODIFY;
          END;
          OnAfterInsertWhseItemTrkgLinesLoop(PostedWhseReceiptLine,WhseItemEntryRelation,WhseItemTrkgLine);
        UNTIL WhseItemEntryRelation.NEXT = 0;
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeRegisterItemTrackingLinesLoop>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<RegisterNewItemTrackingLines>
    Code lines:
    ...
          ERROR(CannotMatchItemTrackingErr);
    
        TrackingSpec."Quantity (Base)" :=
          TempTrackingSpec."Qty. to Handle (Base)" + ABS(ItemTrkgQtyPostedOnSource(TrackingSpec));
    
        OnBeforeRegisterItemTrackingLinesLoop(TrackingSpec,TempTrackingSpec); <=====================
    
        CLEAR(ItemTrackingLines);
        ItemTrackingLines.SetCalledFromSynchWhseItemTrkg(TRUE);
        ItemTrackingLines.RegisterItemTrackingLines(TrackingSpec,TrackingSpec."Creation Date",TempTrackingSpec);
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeRegisterNewItemTrackingLines>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<RegisterNewItemTrackingLines>
    Code lines:
    OnBeforeRegisterNewItemTrackingLines(TempTrackingSpec); <=====================
    
    IF TempTrackingSpec.FINDSET THEN
      REPEAT
        TempTrackingSpec.SetSourceFilter(
          TempTrackingSpec."Source Type",TempTrackingSpec."Source Subtype",
          TempTrackingSpec."Source ID",TempTrackingSpec."Source Ref. No.",FALSE);
        TempTrackingSpec.SETRANGE("Source Prod. Order Line",TempTrackingSpec."Source Prod. Order Line");
    
        TrackingSpec := TempTrackingSpec;
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeRetrieveAppliedExpirationDate>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<RetrieveAppliedExpirationDate>
    Code lines:
    OnBeforeRetrieveAppliedExpirationDate(TempItemLedgEntry); <=====================
    
    WITH TempItemLedgEntry DO BEGIN
      IF Positive THEN
        EXIT;
    
      ItemApplnEntry.RESET;
      ItemApplnEntry.SETCURRENTKEY("Outbound Item Entry No.","Item Ledger Entry No.","Cost Application");
      ItemApplnEntry.SETRANGE("Outbound Item Entry No.","Entry No.");
      ItemApplnEntry.SETRANGE("Item Ledger Entry No.","Entry No.");
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeTempTrackingSpecSummedUpModify>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<RetrieveInvoiceSpecification>
    Code lines:
    ...
    
          TempTrackingSpecSummedUp.SetTrackingFilter(
            TempInvoicingSpecification."Serial No.",TempInvoicingSpecification."Lot No.");
          IF TempTrackingSpecSummedUp.FINDFIRST THEN BEGIN
            TempTrackingSpecSummedUp."Qty. to Invoice (Base)" += TempInvoicingSpecification."Qty. to Invoice (Base)";
            OnBeforeTempTrackingSpecSummedUpModify(TempTrackingSpecSummedUp,TempInvoicingSpecification); <=====================
            TempTrackingSpecSummedUp.MODIFY;
          END ELSE BEGIN
            TempTrackingSpecSummedUp := TempInvoicingSpecification;
            TempTrackingSpecSummedUp.INSERT;
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeTempWhseJnlLine2Insert>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<SplitWhseJnlLine>
    Code lines:
    ...
            NonDistrWeight -= TempWhseJnlLine2.Weight;
          END ELSE BEGIN // the last record
            TempWhseJnlLine2.Cubage := NonDistrCubage;
            TempWhseJnlLine2.Weight := NonDistrWeight;
          END;
          OnBeforeTempWhseJnlLine2Insert( <=====================
            TempWhseJnlLine2,TempWhseJnlLine,TempWhseSplitSpecification,ToTransfer,WhseSNRequired,WhseLNRequired);
          TempWhseJnlLine2.INSERT;
        UNTIL NEXT = 0
      ELSE BEGIN
    ...
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<SplitWhseJnlLine>
    Code lines:
    ...
            NonDistrWeight -= TempWhseJnlLine2.Weight;
          END ELSE BEGIN // the last record
            TempWhseJnlLine2.Cubage := NonDistrCubage;
            TempWhseJnlLine2.Weight := NonDistrWeight;
          END;
          OnBeforeTempWhseJnlLine2Insert( <=====================
            TempWhseJnlLine2,TempWhseJnlLine,TempWhseSplitSpecification,ToTransfer,WhseSNRequired,WhseLNRequired);
          TempWhseJnlLine2.INSERT;
        UNTIL NEXT = 0
      ELSE BEGIN
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeWhseExistingExpirationDate>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<WhseExistingExpirationDate>
    Code lines:
    IsHandled := FALSE;
    OnBeforeWhseExistingExpirationDate(ItemNo,VariantCode,Location,LotNo,SerialNo,EntriesExist,ExpDate,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    ExpDate := 0D;
    SumOfEntries := 0;
    
    IF Location."Adjustment Bin Code" = '' THEN
      EXIT;
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnBeforeWhseItemTrackingLineInsert>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<CheckWhseItemTrkg>
    Code lines:
    ...
                WhseItemTrackingLine."Qty. to Handle (Base)" := WhseItemTrackingLine."Quantity (Base)";
              WhseItemTrackingLine."Qty. to Handle" :=
                ROUND(
                  WhseItemTrackingLine."Qty. to Handle (Base)" / WhseItemTrackingLine."Qty. per Unit of Measure",
                  UOMMgt.QtyRndPrecision);
              OnBeforeWhseItemTrackingLineInsert(WhseItemTrackingLine,SourceReservEntry); <=====================
              WhseItemTrackingLine.INSERT;
            END;
          END;
        UNTIL SourceReservEntry.NEXT = 0;
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnCheckItemTrkgInfBeforePostOnBeforeTempItemLotInfoInsert>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<CheckItemTrkgInfBeforePost>
    Code lines:
    ...
        IF TempGlobalWhseItemTrkgLine."New Lot No." <> '' THEN BEGIN
          CLEAR(TempLotNoInfo);
          TempLotNoInfo."Item No." := TempGlobalWhseItemTrkgLine."Item No.";
          TempLotNoInfo."Variant Code" := TempGlobalWhseItemTrkgLine."Variant Code";
          TempLotNoInfo."Lot No." := TempGlobalWhseItemTrkgLine."New Lot No.";
          OnCheckItemTrkgInfBeforePostOnBeforeTempItemLotInfoInsert(TempLotNoInfo,TempGlobalWhseItemTrkgLine); <=====================
          IF TempLotNoInfo.INSERT THEN;
        END;
      UNTIL TempGlobalWhseItemTrkgLine.NEXT = 0;
    
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnCopyItemLedgEntryTrkgToDocLine>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<InsertReservEntryForSalesLine>
    Code lines:
    ...
      ELSE
        "Reservation Status" := "Reservation Status"::Prospect;
      IF AppliedFromItemEntry THEN
        "Appl.-from Item Entry" := ItemLedgEntryBuf."Entry No.";
      Description := SalesLine.Description;
      OnCopyItemLedgEntryTrkgToDocLine(ItemLedgEntryBuf,ReservEntry); <=====================
      UpdateItemTracking;
      OnBeforeInsertReservEntryForSalesLine(ReservEntry,SalesLine);
      INSERT;
    END;
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<InsertReservEntryForPurchLine>
    Code lines:
    ...
      ELSE
        "Reservation Status" := "Reservation Status"::Prospect;
      IF AppliedToItemEntry THEN
        "Appl.-to Item Entry" := ItemLedgEntryBuf."Entry No.";
      Description := PurchaseLine.Description;
      OnCopyItemLedgEntryTrkgToDocLine(ItemLedgEntryBuf,ReservEntry); <=====================
      UpdateItemTracking;
      OnBeforeInsertReservEntryForPurchLine(ReservEntry,PurchaseLine);
      INSERT;
    END;
Codeunit<Item Tracking Management>.PROCEDURE<OnCopyItemTracking3OnBeforeSwapSign>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<CopyItemTracking3>
    Code lines:
    ...
            TempReservEntry."Qty. to Handle (Base)" := -TempReservEntry."Qty. to Handle (Base)";
            TempReservEntry."Qty. to Invoice (Base)" := -TempReservEntry."Qty. to Invoice (Base)";
            TempReservEntry."Quantity Invoiced (Base)" := -TempReservEntry."Quantity Invoiced (Base)";
            TempReservEntry.Positive := TempReservEntry."Quantity (Base)" > 0;
            TempReservEntry.ClearApplFromToItemEntry;
            OnCopyItemTracking3OnBeforeSwapSign(TempReservEntry); <=====================
          END;
          TempReservEntry.INSERT;
        END;
      UNTIL ReservEntry.NEXT = 0;
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnIsOrderNetworkEntity>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<IsOrderNetworkEntity>
    Code lines:
    ...
      DATABASE::"Transfer Line":
        EXIT(TRUE);
      DATABASE::"Service Line":
        EXIT(Subtype IN [1]);
      ELSE BEGIN
        OnIsOrderNetworkEntity(Type,Subtype,IsNetworkEntity); <=====================
        EXIT(IsNetworkEntity);
      END;
    END;
Codeunit<Item Tracking Management>.PROCEDURE<OnRetrieveItemTrackingFromReservEntryFilter>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<RetrieveItemTrackingFromReservEntry>
    Code lines:
    ...
    ReservEntry.SetSourceFilter(
      DATABASE::"Item Journal Line",ItemJnlLine."Entry Type",ItemJnlLine."Journal Template Name",ItemJnlLine."Line No.",TRUE);
    ReservEntry.SetSourceFilter2(ItemJnlLine."Journal Batch Name",0);
    OnAfterReserveEntryFilter(ItemJnlLine,ReservEntry);
    ReservEntry.SETFILTER("Qty. to Handle (Base)",'<>0');
    OnRetrieveItemTrackingFromReservEntryFilter(ReservEntry,ItemJnlLine); <=====================
    IF SumUpItemTracking(ReservEntry,TempTrackingSpec,FALSE,TRUE) THEN BEGIN
      ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Prospect);
      IF NOT ReservEntry.ISEMPTY THEN
        ReservEntry.DELETEALL;
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnRetrieveSubcontrItemTrackingOnBeforeCheckLastOperation>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<RetrieveSubcontrItemTracking>
    Code lines:
    ...
         ItemJnlLine."Routing Reference No.",ItemJnlLine."Routing No.",ItemJnlLine."Operation No.")
    THEN
      EXIT(FALSE);
    
    IsLastOperation := ProdOrderRoutingLine."Next Operation No." = '';
    OnRetrieveSubcontrItemTrackingOnBeforeCheckLastOperation(ProdOrderRoutingLine,IsLastOperation); <=====================
    IF NOT IsLastOperation THEN
      EXIT(FALSE);
    
    ReservEntry.SetSourceFilter(DATABASE::"Prod. Order Line",3,ItemJnlLine."Order No.",0,TRUE);
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnSyncActivItemTrkgOnBeforeInsertTempReservEntry>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<SynchronizeWhseActivItemTrkg>
    Code lines:
    ...
            TempReservEntry.Quantity := "Qty. Outstanding" * SignFactor;
            TempReservEntry."Qty. to Handle (Base)" := "Qty. to Handle (Base)" * SignFactor;
            TempReservEntry."Qty. to Invoice (Base)" := "Qty. to Handle (Base)" * SignFactor;
            TempReservEntry."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
            TempReservEntry.CopyTrackingFromWhseActivLine(WhseActivLine);
            OnSyncActivItemTrkgOnBeforeInsertTempReservEntry(TempReservEntry,WhseActivLine); <=====================
            TempReservEntry.INSERT;
    
            IF NOT IsBindingOrderToOrder THEN BEGIN
              ReservEntryBindingCheck.SetTrackingFilter("Serial No.","Lot No.");
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnSyncActivItemTrkgOnBeforeTempTrackingSpecModify>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<SynchronizeWhseActivItemTrkg>
    Code lines:
    ...
            ELSE
              ReservEntry.VALIDATE("Qty. to Invoice (Base)",TempTrackingSpec."Qty. to Invoice (Base)");
    
            TempTrackingSpec."Qty. to Handle (Base)" -= ReservEntry."Qty. to Handle (Base)";
            TempTrackingSpec."Qty. to Invoice (Base)" -= ReservEntry."Qty. to Invoice (Base)";
            OnSyncActivItemTrkgOnBeforeTempTrackingSpecModify(TempTrackingSpec,ReservEntry); <=====================
            TempTrackingSpec.MODIFY;
    
            WITH WhseActivLine DO BEGIN
              RESET;
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnSynchronizeWhseActivItemTrkgOnAfterSetExpirationDate>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<SynchronizeWhseActivItemTrkg>
    Code lines:
    ...
              RESET;
              SetSourceFilter("Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.",TRUE);
              SetTrackingFilter(ReservEntry."Serial No.",ReservEntry."Lot No.");
              IF FINDFIRST THEN
                ReservEntry."Expiration Date" := "Expiration Date";
              OnSynchronizeWhseActivItemTrkgOnAfterSetExpirationDate(WhseActivLine,ReservEntry); <=====================
            END;
    
            ReservEntry.MODIFY;
    
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnSynchronizeWhseActivItemTrkgOnAfterSetToRowID>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<SynchronizeWhseActivItemTrkg>
    Code lines:
    ...
          END ELSE
            ToRowID :=
              ItemTrackingMgt.ComposeRowID(
                "Source Type","Source Subtype","Source No.",'',"Source Subline No.","Source Line No.");
        END;
        OnSynchronizeWhseActivItemTrkgOnAfterSetToRowID(WhseActivLine,ToRowID); <=====================
        TempReservEntry.SetPointer(ToRowID);
        SignFactor := WhseActivitySignFactor(WhseActivLine);
        ReservEntryBindingCheck.SetPointer(ToRowID);
        ReservEntryBindingCheck.SetPointerFilter;
    ...
Codeunit<Item Tracking Management>.PROCEDURE<OnTempPostedWhseRcptLineSetFilters>
  Raised in: Codeunit<Item Tracking Management>.PROCEDURE<SplitPostedWhseRcptLine>
    Code lines:
    ...
        ItemLedgEntry.GET(WhseItemEntryRelation."Item Entry No.");
        TempPostedWhseRcptLine.SETRANGE("Serial No.",ItemLedgEntry."Serial No.");
        TempPostedWhseRcptLine.SETRANGE("Lot No.",ItemLedgEntry."Lot No.");
        TempPostedWhseRcptLine.SETRANGE("Warranty Date",ItemLedgEntry."Warranty Date");
        TempPostedWhseRcptLine.SETRANGE("Expiration Date",ItemLedgEntry."Expiration Date");
        OnTempPostedWhseRcptLineSetFilters(TempPostedWhseRcptLine,ItemLedgEntry,WhseItemEntryRelation); <=====================
        IF TempPostedWhseRcptLine.FINDFIRST THEN BEGIN
          TempPostedWhseRcptLine."Qty. (Base)" += ItemLedgEntry.Quantity;
          TempPostedWhseRcptLine.Quantity :=
            ROUND(
    ...
Codeunit<Item Tracking Data Collection>.PROCEDURE<OnAddSelectedTrackingToDataSetOnAfterInitTrackingSpecification2>
  Raised in: Codeunit<Item Tracking Data Collection>.PROCEDURE<AddSelectedTrackingToDataSet>
    Code lines:
    ...
    TrackingSpecification2."Source Ref. No." := TempTrackingSpecification."Source Ref. No.";
    TrackingSpecification2.Positive := TempTrackingSpecification.Positive;
    TrackingSpecification2."Qty. per Unit of Measure" := TempTrackingSpecification."Qty. per Unit of Measure";
    TrackingSpecification2."Variant Code" := TempTrackingSpecification."Variant Code";
    
    OnAddSelectedTrackingToDataSetOnAfterInitTrackingSpecification2(TrackingSpecification2,TempTrackingSpecification); <=====================
    
    TempTrackingSpecification.RESET;
    IF TempTrackingSpecification.FINDLAST THEN
      LastEntryNo := TempTrackingSpecification."Entry No.";
    ...
Codeunit<Item Tracking Data Collection>.PROCEDURE<OnAfterAssistEditTrackingNo>
  Raised in: Codeunit<Item Tracking Data Collection>.PROCEDURE<AssistEditTrackingNo>
    Code lines:
    ...
        IF ABS(NewQtyOnLine) > 1 THEN
          NewQtyOnLine := NewQtyOnLine / ABS(NewQtyOnLine); // Set to a signed value of 1.
    
      TempTrackingSpecification.VALIDATE("Quantity (Base)",NewQtyOnLine);
    
      OnAfterAssistEditTrackingNo(TempTrackingSpecification,TempGlobalEntrySummary); <=====================
    END;
Codeunit<Item Tracking Data Collection>.PROCEDURE<OnAfterCreateEntrySummary>
  Raised in: Codeunit<Item Tracking Data Collection>.PROCEDURE<CreateEntrySummary>
    Code lines:
    CreateEntrySummary2(TrackingSpecification,LookupMode::"Serial No.",TempReservEntry);
    CreateEntrySummary2(TrackingSpecification,LookupMode::"Lot No.",TempReservEntry);
    
    OnAfterCreateEntrySummary(TrackingSpecification,TempGlobalEntrySummary); <=====================
Codeunit<Item Tracking Data Collection>.PROCEDURE<OnAfterCreateEntrySummary2>
  Raised in: Codeunit<Item Tracking Data Collection>.PROCEDURE<CreateEntrySummary2>
    Code lines:
    ...
    IF DoInsert THEN
      TempGlobalEntrySummary.INSERT
    ELSE
      TempGlobalEntrySummary.MODIFY;
    
    OnAfterCreateEntrySummary2(TempGlobalEntrySummary,TempReservEntry); <=====================
Codeunit<Item Tracking Data Collection>.PROCEDURE<OnAfterRetrieveLookupData>
  Raised in: Codeunit<Item Tracking Data Collection>.PROCEDURE<RetrieveLookupData>
    Code lines:
    ...
    
    PartialGlobalDataSetExists := TRUE;
    FullGlobalDataSetExists := FullDataSet;
    AdjustForDoubleEntries;
    
    OnAfterRetrieveLookupData(TrackingSpecification,FullDataSet,TempGlobalReservEntry,TempGlobalEntrySummary); <=====================
Codeunit<Item Tracking Data Collection>.PROCEDURE<OnAfterTransferExpDateFromSummary>
  Raised in: Codeunit<Item Tracking Data Collection>.PROCEDURE<TransferExpDateFromSummary>
    Code lines:
    ...
      TrackingSpecification."Buffer Status2" := 0;
      TrackingSpecification."Expiration Date" := 0D;
      TrackingSpecification."New Expiration Date" := 0D;
    END;
    
    OnAfterTransferExpDateFromSummary(TrackingSpecification,TempEntrySummary); <=====================
Codeunit<Item Tracking Data Collection>.PROCEDURE<OnAfterTransferReservEntryToTempRec>
  Raised in: Codeunit<Item Tracking Data Collection>.PROCEDURE<TransferReservEntryToTempRec>
    Code lines:
    ...
      REPEAT
        IF NOT TempGlobalReservEntry.GET(TempReservEntry."Entry No.",TempReservEntry.Positive) THEN BEGIN
          TempGlobalReservEntry := TempReservEntry;
          TempGlobalReservEntry."Transferred from Entry No." := 0;
          IsHandled := FALSE;
          OnAfterTransferReservEntryToTempRec(TempGlobalReservEntry,TempReservEntry,TrackingSpecification,IsHandled); <=====================
          IF NOT IsHandled THEN BEGIN
            TempGlobalReservEntry.INSERT;
            CreateEntrySummary(TrackingSpecification,TempGlobalReservEntry);
          END;
    ...
Codeunit<Item Tracking Data Collection>.PROCEDURE<OnBeforeAssistEditTrackingNo>
  Raised in: Codeunit<Item Tracking Data Collection>.PROCEDURE<AssistEditTrackingNo>
    Code lines:
    OnBeforeAssistEditTrackingNo(TempTrackingSpecification,SearchForSupply,CurrentSignFactor,LookupMode,MaxQuantity); <=====================
    
    Window.OPEN(Text004);
    
    IF NOT FullGlobalDataSetExists THEN
      RetrieveLookupData(TempTrackingSpecification,TRUE);
    
    TempGlobalReservEntry.RESET;
    TempGlobalEntrySummary.RESET;
    
    ...
Codeunit<Item Tracking Data Collection>.PROCEDURE<OnBeforeCreateEntrySummary2>
  Raised in: Codeunit<Item Tracking Data Collection>.PROCEDURE<CreateEntrySummary2>
    Code lines:
    OnBeforeCreateEntrySummary2(TempGlobalEntrySummary,TempReservEntry,TrackingSpecification); <=====================
    
    TempGlobalEntrySummary.RESET;
    TempGlobalEntrySummary.SETCURRENTKEY("Lot No.","Serial No.");
    
    // Set filters
    CASE LookupMode OF
      LookupMode::"Serial No.":
        BEGIN
          IF TempReservEntry."Serial No." = '' THEN
    ...
Codeunit<Item Tracking Data Collection>.PROCEDURE<OnBeforeTempGlobalChangedEntrySummaryInsert>
  Raised in: Codeunit<Item Tracking Data Collection>.PROCEDURE<UpdateTrackingGlobalChangeRec>
    Code lines:
    ...
      TempGlobalChangedEntrySummary."Lot No." := TempTrackingSpecificationChanged."Lot No.";
      TempGlobalChangedEntrySummary."Serial No." := TempTrackingSpecificationChanged."Serial No.";
      TempGlobalChangedEntrySummary."Current Pending Quantity" := NewQuantity;
      IF TempTrackingSpecificationChanged."Serial No." <> '' THEN
        TempGlobalChangedEntrySummary."Table ID" := DATABASE::"Tracking Specification"; // Not a summary line
      OnBeforeTempGlobalChangedEntrySummaryInsert(TempGlobalChangedEntrySummary,TempTrackingSpecificationChanged); <=====================
      TempGlobalChangedEntrySummary.INSERT;
      PartialGlobalDataSetExists := FALSE; // The partial data set does not cover the new line
    END ELSE
      IF LineIsDemand THEN BEGIN
    ...
Codeunit<Item Tracking Data Collection>.PROCEDURE<OnBeforeTempTrackingSpecificationInsert>
  Raised in: Codeunit<Item Tracking Data Collection>.PROCEDURE<AddSelectedTrackingToDataSet>
    Code lines:
    ...
        IF TempTrackingSpecification.IsReclass THEN BEGIN
          TempTrackingSpecification."New Serial No." := TempTrackingSpecification."Serial No.";
          TempTrackingSpecification."New Lot No." := TempTrackingSpecification."Lot No.";
        END;
        TempTrackingSpecification.VALIDATE("Quantity (Base)",TempEntrySummary."Selected Quantity");
        OnBeforeTempTrackingSpecificationInsert(TempTrackingSpecification,TempEntrySummary); <=====================
        TempTrackingSpecification.INSERT;
        UpdateTrackingDataSetWithChange(TempTrackingSpecification,TRUE,CurrentSignFactor,ChangeType::Insert);
      END;
    UNTIL TempEntrySummary.NEXT = 0;
    ...
Codeunit<Item Tracking Data Collection>.PROCEDURE<OnBeforeTempTrackingSpecificationModify>
  Raised in: Codeunit<Item Tracking Data Collection>.PROCEDURE<SumUpTempTrkgSpec>
    Code lines:
    ...
      ReservEntry."Source Type",ReservEntry."Source Subtype",ReservEntry."Source ID",ReservEntry."Source Ref. No.",FALSE);
    TempTrackingSpecification.SetSourceFilter2(ReservEntry."Source Batch Name",ReservEntry."Source Prod. Order Line");
    TempTrackingSpecification.SetTrackingFilterFromReservEntry(ReservEntry);
    IF TempTrackingSpecification.FINDFIRST THEN BEGIN
      TempTrackingSpecification."Quantity (Base)" += ReservEntry."Quantity (Base)";
      OnBeforeTempTrackingSpecificationModify(TempTrackingSpecification,ReservEntry); <=====================
      TempTrackingSpecification.MODIFY;
    END ELSE BEGIN
      ItemTrackingMgt.CreateTrackingSpecification(ReservEntry,TempTrackingSpecification);
      IF NOT ReservEntry.Positive THEN               // To avoid inserting existing entry when both sides of the reservation
    ...
Codeunit<Item Tracking Data Collection>.PROCEDURE<OnBeforeUpdateBinContent>
  Raised in: Codeunit<Item Tracking Data Collection>.PROCEDURE<CreateEntrySummary2>
    Code lines:
    ...
        TempGlobalEntrySummary."Serial No." := TempReservEntry."Serial No."
      ELSE
        TempGlobalEntrySummary."Serial No." := '';
      TempGlobalEntrySummary."Lot No." := TempReservEntry."Lot No.";
      TempGlobalEntrySummary."Bin Active" := CurrBinCode <> '';
      OnBeforeUpdateBinContent(TempGlobalEntrySummary,TempReservEntry); <=====================
      UpdateBinContent(TempGlobalEntrySummary);
    
      // If consumption/output fill in double entry value here:
      TempGlobalEntrySummary."Double-entry Adjustment" :=
    ...
Codeunit<Item Tracking Data Collection>.PROCEDURE<OnSelectMultipleTrackingNoOnBeforeSetSources>
  Raised in: Codeunit<Item Tracking Data Collection>.PROCEDURE<SelectMultipleTrackingNo>
    Code lines:
    ...
    
    // Initialize form
    ItemTrackingSummaryForm.CAPTION := Text011;
    ItemTrackingSummaryForm.SETTABLEVIEW(TempGlobalEntrySummary);
    TempGlobalEntrySummary.SETFILTER("Table ID",'<>%1',0); // Filter out summations
    OnSelectMultipleTrackingNoOnBeforeSetSources(TempTrackingSpecification,TempGlobalEntrySummary,MaxQuantity); <=====================
    ItemTrackingSummaryForm.SetSources(TempGlobalReservEntry,TempGlobalEntrySummary);
    ItemTrackingSummaryForm.SetSelectionMode(MaxQuantity <> 0);
    ItemTrackingSummaryForm.LOOKUPMODE(TRUE);
    ItemTrackingSummaryForm.SetMaxQuantity(MaxQuantity);
    ...
Codeunit<Item Tracking Data Collection>.PROCEDURE<OnTransferItemLedgToTempRecOnBeforeInsert>
  Raised in: Codeunit<Item Tracking Data Collection>.PROCEDURE<TransferItemLedgToTempRec>
    Code lines:
    ...
            TempGlobalReservEntry."Expected Receipt Date" := 0D
          END ELSE
            TempGlobalReservEntry."Shipment Date" := DMY2DATE(31,12,9999);
    
          IsHandled := FALSE;
          OnTransferItemLedgToTempRecOnBeforeInsert(TempGlobalReservEntry,ItemLedgEntry,TrackingSpecification,IsHandled); <=====================
          IF NOT IsHandled THEN BEGIN
            TempGlobalReservEntry.INSERT;
            CreateEntrySummary(TrackingSpecification,TempGlobalReservEntry);
          END;
    ...
Codeunit<Late Binding Management>.PROCEDURE<OnBeforeTempSupplyReservEntryInsert>
  Raised in: Codeunit<Late Binding Management>.PROCEDURE<InsertTempSupplyReservEntry>
    Code lines:
    ...
    TempSupplyReservEntry."Lot No." := ItemLedgEntry."Lot No.";
    TempSupplyReservEntry."Quantity (Base)" := ItemLedgEntry."Remaining Quantity";
    TempSupplyReservEntry."Reservation Status" := TempSupplyReservEntry."Reservation Status"::Surplus;
    TempSupplyReservEntry."Expected Receipt Date" := 0D;
    TempSupplyReservEntry."Shipment Date" := 0D;
    OnBeforeTempSupplyReservEntryInsert(TempSupplyReservEntry,ItemLedgEntry); <=====================
    TempSupplyReservEntry.INSERT;
Codeunit<Item Tracking Doc. Management>.PROCEDURE<OnAfterAddTempRecordToSet>
  Raised in: Codeunit<Item Tracking Doc. Management>.PROCEDURE<AddTempRecordToSet>
    Code lines:
    ...
      TempItemLedgEntry."Invoiced Quantity" += TempItemLedgEntry2."Invoiced Quantity";
      TempItemLedgEntry.MODIFY;
    END ELSE
      TempItemLedgEntry.INSERT;
    
    OnAfterAddTempRecordToSet(TempItemLedgEntry,TempItemLedgEntry2,SignFactor); <=====================
    TempItemLedgEntry.RESET;
Codeunit<Item Tracking Doc. Management>.PROCEDURE<OnAfterFillTrackingSpecBufferFromItemLedgEntry>
  Raised in: Codeunit<Item Tracking Doc. Management>.PROCEDURE<FillTrackingSpecBufferFromILE>
    Code lines:
    ...
      REPEAT
        IF TempItemLedgEntry.TrackingExists THEN BEGIN
          FillTrackingSpecBuffer(TempTrackingSpecBuffer,Type,Subtype,ID,BatchName,
            ProdOrderLine,RefNo,Description,TempItemLedgEntry."Item No.",TempItemLedgEntry."Lot No.",
            TempItemLedgEntry."Serial No.",TempItemLedgEntry.Quantity,TempItemLedgEntry.Correction);
          OnAfterFillTrackingSpecBufferFromItemLedgEntry(TempTrackingSpecBuffer,TempItemLedgEntry); <=====================
        END;
      UNTIL TempItemLedgEntry.NEXT = 0;
Codeunit<Item Tracking Doc. Management>.PROCEDURE<OnAfterFillTrackingSpecBufferFromReservEntry>
  Raised in: Codeunit<Item Tracking Doc. Management>.PROCEDURE<FindReservEntries>
    Code lines:
    ...
      REPEAT
        IF ReservEntry.TrackingExists THEN BEGIN
          FillTrackingSpecBuffer(TempTrackingSpecBuffer,Type,Subtype,ID,BatchName,
            ProdOrderLine,RefNo,Description,ReservEntry."Item No.",ReservEntry."Lot No.",
            ReservEntry."Serial No.",ReservEntry."Quantity (Base)",ReservEntry.Correction);
          OnAfterFillTrackingSpecBufferFromReservEntry(TempTrackingSpecBuffer,ReservEntry); <=====================
        END;
      UNTIL ReservEntry.NEXT = 0;
Codeunit<Item Tracking Doc. Management>.PROCEDURE<OnAfterFillTrackingSpecBufferFromTrackingEntries>
  Raised in: Codeunit<Item Tracking Doc. Management>.PROCEDURE<FindTrackingEntries>
    Code lines:
    ...
      REPEAT
        IF TrackingSpec.TrackingExists THEN BEGIN
          FillTrackingSpecBuffer(TempTrackingSpecBuffer,Type,Subtype,ID,BatchName,
            ProdOrderLine,RefNo,Description,TrackingSpec."Item No.",TrackingSpec."Lot No.",
            TrackingSpec."Serial No.",TrackingSpec."Quantity (Base)",TrackingSpec.Correction);
          OnAfterFillTrackingSpecBufferFromTrackingEntries(TempTrackingSpecBuffer,TrackingSpec); <=====================
        END;
      UNTIL TrackingSpec.NEXT = 0;
Codeunit<Item Tracking Doc. Management>.PROCEDURE<OnRetrieveDocumentItemTracking>
  Raised in: Codeunit<Item Tracking Doc. Management>.PROCEDURE<RetrieveDocumentItemTracking>
    Code lines:
    ...
      DATABASE::"Service Shipment Header":
        RetrieveTrackingServiceShipment(TempTrackingSpecBuffer,SourceID);
      DATABASE::"Service Invoice Header":
        RetrieveTrackingServiceInvoice(TempTrackingSpecBuffer,SourceID);
      ELSE BEGIN
        OnRetrieveDocumentItemTracking(TempTrackingSpecBuffer,SourceID,Found); <=====================
        IF NOT Found THEN
          ERROR(TableNotSupportedErr,SourceType);
      END;
    END;
    ...
Codeunit<Item Tracking Doc. Management>.PROCEDURE<OnRetrieveEntriesFromPostedInvOnBeforeAddTempRecordToSet>
  Raised in: Codeunit<Item Tracking Doc. Management>.PROCEDURE<RetrieveEntriesFromPostedInv>
    Code lines:
    ...
           [ValueEntry."Item Ledger Entry Type"::Purchase,ValueEntry."Item Ledger Entry Type"::Sale]
        THEN BEGIN
          ItemLedgEntry.GET(ValueEntry."Item Ledger Entry No.");
          TempItemLedgEntry := ItemLedgEntry;
          TempItemLedgEntry.Quantity := ValueEntry."Invoiced Quantity";
          OnRetrieveEntriesFromPostedInvOnBeforeAddTempRecordToSet(TempItemLedgEntry,ValueEntry); <=====================
          IF TempItemLedgEntry.Quantity <> 0 THEN
            AddTempRecordToSet(TempItemLedgEntry,SignFactor);
        END;
      UNTIL ValueEntryRelation.NEXT = 0;
Codeunit<Item Tracing Mgt.>.PROCEDURE<OnAfterTransferData>
  Raised in: Codeunit<Item Tracing Mgt.>.PROCEDURE<TransferData>
    Code lines:
    ...
    IF NOT ValueEntry.FINDFIRST THEN
      CLEAR(ValueEntry);
    TempTrackEntry."Created by" := ValueEntry."User ID";
    TempTrackEntry."Created on" := ValueEntry."Posting Date";
    
    OnAfterTransferData(ItemLedgEntry,TempTrackEntry); <=====================
Codeunit<Item Tracing Mgt.>.PROCEDURE<OnBeforeFindComponents>
  Raised in: Codeunit<Item Tracing Mgt.>.PROCEDURE<FindComponents>
    Code lines:
    IsHandled := FALSE;
    OnBeforeFindComponents(ItemLedgEntry2,TempItemTracingBuffer,Direction,ShowComponents,ParentID,CurrentLevel,TempLineNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH ItemLedgEntry2 DO BEGIN
      IF (("Order Type" <> "Order Type"::Production) AND ("Order Type" <> "Order Type"::Assembly)) OR ("Order No." = '') THEN
        EXIT;
    
      IF ((("Entry Type" = "Entry Type"::Consumption) OR ("Entry Type" = "Entry Type"::"Assembly Consumption")) AND
    ...
Codeunit<Item Tracing Mgt.>.PROCEDURE<OnBeforeShowDocument>
  Raised in: Codeunit<Item Tracing Mgt.>.PROCEDURE<ShowDocument>
    Code lines:
    ...
      EXIT;
    
    RecRef := RecID.GETRECORD;
    
    IsHandled := FALSE;
    OnBeforeShowDocument(RecRef,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    CASE RecID.TABLENO OF
    ...
Codeunit<Item Tracing Mgt.>.PROCEDURE<OnFindComponentsOnAfterSetFilters>
  Raised in: Codeunit<Item Tracing Mgt.>.PROCEDURE<FindComponents>
    Code lines:
    ...
            EXIT;
          ItemLedgEntry.SETFILTER("Entry Type",'%1|%2',ItemLedgEntry."Entry Type"::Consumption,
            ItemLedgEntry."Entry Type"::"Assembly Consumption");
          ItemLedgEntry.SETRANGE(Positive,FALSE);
        END;
        OnFindComponentsOnAfterSetFilters(ItemLedgEntry,ItemLedgEntry2); <=====================
        CurrentLevel += 1;
        IF ItemLedgEntry.FIND('-') THEN
          REPEAT
            IF (ShowComponents = ShowComponents::All) OR ItemLedgEntry.TrackingExists THEN BEGIN
    ...
Codeunit<Item Tracing Mgt.>.PROCEDURE<OnFindComponentsOnAfterTransferData>
  Raised in: Codeunit<Item Tracing Mgt.>.PROCEDURE<FindComponents>
    Code lines:
    ...
            IF ItemLedgEntry.FIND('-') THEN
              REPEAT
                IF (ShowComponents = ShowComponents::All) OR ItemLedgEntry.TrackingExists THEN BEGIN
                  CurrentLevel += 1;
                  TransferData(ItemLedgEntry,TempItemTracingBuffer);
                  OnFindComponentsOnAfterTransferData(TempItemTracingBuffer,ItemLedgEntry2,ItemLedgEntry); <=====================
                  IF InsertRecord(TempItemTracingBuffer,ParentID) THEN
                    NextLevel(TempItemTracingBuffer,TempItemTracingBuffer,Direction,ShowComponents,ItemLedgEntry."Entry No.");
                  CurrentLevel -= 1;
                END;
    ...
  Raised in: Codeunit<Item Tracing Mgt.>.PROCEDURE<FindComponents>
    Code lines:
    ...
            IF ItemLedgEntry.FIND('-') THEN
              REPEAT
                IF (ShowComponents = ShowComponents::All) OR ItemLedgEntry.TrackingExists THEN BEGIN
                  CurrentLevel += 1;
                  TransferData(ItemLedgEntry,TempItemTracingBuffer);
                  OnFindComponentsOnAfterTransferData(TempItemTracingBuffer,ItemLedgEntry2,ItemLedgEntry); <=====================
                  IF InsertRecord(TempItemTracingBuffer,ParentID) THEN
                    NextLevel(TempItemTracingBuffer,TempItemTracingBuffer,Direction,ShowComponents,ItemLedgEntry."Entry No.");
                  CurrentLevel -= 1;
                END;
    ...
Codeunit<Item Tracing Mgt.>.PROCEDURE<OnFirstLevelOnAfterTransferData>
  Raised in: Codeunit<Item Tracing Mgt.>.PROCEDURE<FirstLevel>
    Code lines:
    ...
    
          IF SearchCriteria = SearchCriteria::Item THEN
            ItemLedgEntry2.SETRANGE("Item No.",ItemLedgEntry."Item No.");
    
          TransferData(ItemLedgEntry2,TempTrackEntry);
          OnFirstLevelOnAfterTransferData(TempTrackEntry); <=====================
    
          IF InsertRecord(TempTrackEntry,0) THEN BEGIN
            FindComponents(ItemLedgEntry2,TempTrackEntry,Direction,ShowComponents,ItemLedgEntry2."Entry No.");
            NextLevel(TempTrackEntry,TempTrackEntry,Direction,ShowComponents,ItemLedgEntry2."Entry No.");
    ...
Codeunit<Item Tracing Mgt.>.PROCEDURE<OnFirstLevelOnBeforeInsertFirstLevelEntry>
  Raised in: Codeunit<Item Tracing Mgt.>.PROCEDURE<FirstLevel>
    Code lines:
    ...
        FirstLevelEntries."Line No." := NextLineNo;
        FirstLevelEntries."Item No." := ItemLedgEntry."Item No.";
        FirstLevelEntries."Serial No." := ItemLedgEntry."Serial No.";
        FirstLevelEntries."Lot No." := ItemLedgEntry."Lot No.";
        FirstLevelEntries."Item Ledger Entry No." := ItemLedgEntry."Entry No.";
        OnFirstLevelOnBeforeInsertFirstLevelEntry(FirstLevelEntries,ItemLedgEntry); <=====================
        FirstLevelEntries.INSERT;
      UNTIL ItemLedgEntry.NEXT = 0;
    
    CASE SearchCriteria OF
    ...
Codeunit<Item Tracing Mgt.>.PROCEDURE<OnNextLevelOnAfterTransferData>
  Raised in: Codeunit<Item Tracing Mgt.>.PROCEDURE<NextLevel>
    Code lines:
    ...
            TrackNo := ItemApplnEntry."Inbound Item Entry No.";
    
          IF TrackNo <> 0 THEN
            IF ItemLedgEntry.GET(TrackNo) THEN BEGIN
              TransferData(ItemLedgEntry,TempTrackEntry);
              OnNextLevelOnAfterTransferData(TempTrackEntry,TempTrackEntry2); <=====================
              IF InsertRecord(TempTrackEntry,ParentID) THEN BEGIN
                FindComponents(ItemLedgEntry,TempTrackEntry,Direction,ShowComponents,ItemLedgEntry."Entry No.");
                NextLevel(TempTrackEntry,TempTrackEntry,Direction,ShowComponents,ItemLedgEntry."Entry No.");
              END;
    ...
Codeunit<Item Tracking Navigate Mgt.>.PROCEDURE<OnAfterShow>
  Raised in: Codeunit<Item Tracking Navigate Mgt.>.PROCEDURE<Show>
    Code lines:
    ...
        PAGE.RUN(0,TempPostedAssemblyLine);
      DATABASE::"Posted Assembly Header":
        PAGE.RUN(0,TempPostedAssemblyHeader);
    END;
    
    OnAfterShow(TableNo,TempRecordBuffer); <=====================
Codeunit<Item Tracking Navigate Mgt.>.PROCEDURE<OnFindItemLedgerEntryOnBeforeCaseDocumentType>
  Raised in: Codeunit<Item Tracking Navigate Mgt.>.PROCEDURE<FindItemLedgerEntry>
    Code lines:
    ...
      IF FINDSET THEN
        REPEAT
          RecRef.GETTABLE(ItemLedgEntry);
          InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");
          IsHandled := FALSE;
          OnFindItemLedgerEntryOnBeforeCaseDocumentType(ItemLedgEntry,RecRef,IsHandled); <=====================
          IF NOT IsHandled THEN
            CASE "Document Type" OF
              "Document Type"::"Sales Shipment":
                FindSalesShptHeader("Document No.");
    ...
Codeunit<Item Tracking Navigate Mgt.>.PROCEDURE<OnFindReservEntryOnBeforeCaseDocumentType>
  Raised in: Codeunit<Item Tracking Navigate Mgt.>.PROCEDURE<FindReservEntry>
    Code lines:
    ...
      IF FINDSET THEN
        REPEAT
          RecRef.GETTABLE(ReservEntry);
          InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");
          IsHandled := FALSE;
          OnFindReservEntryOnBeforeCaseDocumentType(ReservEntry,RecRef,IsHandled); <=====================
          IF NOT IsHandled THEN
            CASE "Source Type" OF
              DATABASE::"Sales Line":
                FindSalesLines;
    ...
Codeunit<Item Tracking Navigate Mgt.>.PROCEDURE<OnFindTrackingRecordsForItemLedgerEntry>
  Raised in: Codeunit<Item Tracking Navigate Mgt.>.PROCEDURE<FindItemLedgerEntry>
    Code lines:
    ...
                FindPostedAssembly("Document No.");
              ELSE
                IF "Entry Type" IN ["Entry Type"::Consumption,"Entry Type"::Output] THEN
                  FindProductionOrder("Document No.");
            END;
          OnFindTrackingRecordsForItemLedgerEntry(ItemLedgEntry); <=====================
        UNTIL NEXT = 0;
    END;
Codeunit<Purch - Calc Disc. By Type>.PROCEDURE<OnAfterResetRecalculateInvoiceDisc>
  Raised in: Codeunit<Purch - Calc Disc. By Type>.PROCEDURE<ResetRecalculateInvoiceDisc>
    Code lines:
    PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
    PurchLine.SETRANGE("Document No.",PurchHeader."No.");
    PurchLine.SETRANGE("Recalculate Invoice Disc.",TRUE);
    PurchLine.MODIFYALL("Recalculate Invoice Disc.",FALSE);
    
    OnAfterResetRecalculateInvoiceDisc(PurchHeader); <=====================
Codeunit<Purch - Calc Disc. By Type>.PROCEDURE<OnBeforeApplyDefaultInvoiceDiscount>
  Raised in: Codeunit<Purch - Calc Disc. By Type>.PROCEDURE<ApplyDefaultInvoiceDiscount>
    Code lines:
    IF NOT ShouldRedistributeInvoiceDiscountAmount(PurchHeader) THEN
      EXIT;
    
    IsHandled := FALSE;
    OnBeforeApplyDefaultInvoiceDiscount(PurchHeader,IsHandled); <=====================
    IF NOT IsHandled THEN
      IF PurchHeader."Invoice Discount Calculation" = PurchHeader."Invoice Discount Calculation"::Amount THEN
        ApplyInvDiscBasedOnAmt(InvoiceDiscountAmount,PurchHeader)
      ELSE
        ApplyInvDiscBasedOnPct(PurchHeader);
    ...
Codeunit<Purch - Calc Disc. By Type>.PROCEDURE<OnBeforeShouldRedistributeInvoiceDiscountAmount>
  Raised in: Codeunit<Purch - Calc Disc. By Type>.PROCEDURE<ShouldRedistributeInvoiceDiscountAmount>
    Code lines:
    IsHandled := FALSE;
    OnBeforeShouldRedistributeInvoiceDiscountAmount(PurchHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(TRUE);
    
    PurchHeader.CALCFIELDS("Recalculate Invoice Disc.");
    IF NOT PurchHeader."Recalculate Invoice Disc." THEN
      EXIT(FALSE);
    
    IF (PurchHeader."Invoice Discount Calculation" = PurchHeader."Invoice Discount Calculation"::Amount) AND
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCheckFromPurchaseCrMemoHeader>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CheckFromPurchaseCrMemoHeader>
    Code lines:
    ...
      PurchCrMemoHdrFrom.TESTFIELD("Vendor Posting Group","Vendor Posting Group");
      PurchCrMemoHdrFrom.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
      PurchCrMemoHdrFrom.TESTFIELD("Currency Code","Currency Code");
    END;
    
    OnAfterCheckFromPurchaseCrMemoHeader(PurchCrMemoHdrFrom,PurchaseHeaderTo); <=====================
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCheckFromPurchaseHeader>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CheckFromPurchaseHeader>
    Code lines:
    ...
      PurchaseHeaderFrom.TESTFIELD("Vendor Posting Group","Vendor Posting Group");
      PurchaseHeaderFrom.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
      PurchaseHeaderFrom.TESTFIELD("Currency Code","Currency Code");
    END;
    
    OnAfterCheckFromPurchaseHeader(PurchaseHeaderFrom,PurchaseHeaderTo); <=====================
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCheckFromPurchaseInvHeader>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CheckFromPurchaseInvHeader>
    Code lines:
    ...
      PurchInvHeaderFrom.TESTFIELD("Vendor Posting Group","Vendor Posting Group");
      PurchInvHeaderFrom.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
      PurchInvHeaderFrom.TESTFIELD("Currency Code","Currency Code");
    END;
    
    OnAfterCheckFromPurchaseInvHeader(PurchInvHeaderFrom,PurchaseHeaderTo); <=====================
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCheckFromPurchaseRcptHeader>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CheckFromPurchaseRcptHeader>
    Code lines:
    ...
      PurchRcptHeaderFrom.TESTFIELD("Vendor Posting Group","Vendor Posting Group");
      PurchRcptHeaderFrom.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
      PurchRcptHeaderFrom.TESTFIELD("Currency Code","Currency Code");
    END;
    
    OnAfterCheckFromPurchaseRcptHeader(PurchRcptHeaderFrom,PurchaseHeaderTo); <=====================
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCheckFromPurchaseReturnShptHeader>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CheckFromPurchaseReturnShptHeader>
    Code lines:
    ...
      ReturnShipmentHeaderFrom.TESTFIELD("Vendor Posting Group","Vendor Posting Group");
      ReturnShipmentHeaderFrom.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
      ReturnShipmentHeaderFrom.TESTFIELD("Currency Code","Currency Code");
    END;
    
    OnAfterCheckFromPurchaseReturnShptHeader(ReturnShipmentHeaderFrom,PurchaseHeaderTo); <=====================
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCheckFromSalesCrMemoHeader>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CheckFromSalesCrMemoHeader>
    Code lines:
    ...
      SalesCrMemoHeaderFrom.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
      SalesCrMemoHeaderFrom.TESTFIELD("Currency Code","Currency Code");
      SalesCrMemoHeaderFrom.TESTFIELD("Prices Including VAT","Prices Including VAT");
    END;
    
    OnAfterCheckFromSalesCrMemoHeader(SalesCrMemoHeaderFrom,SalesHeaderTo); <=====================
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCheckFromSalesHeader>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CheckFromSalesHeader>
    Code lines:
    ...
      SalesHeaderFrom.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
      SalesHeaderFrom.TESTFIELD("Currency Code","Currency Code");
      SalesHeaderFrom.TESTFIELD("Prices Including VAT","Prices Including VAT");
    END;
    
    OnAfterCheckFromSalesHeader(SalesHeaderFrom,SalesHeaderTo); <=====================
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCheckFromSalesInvHeader>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CheckFromSalesInvHeader>
    Code lines:
    ...
      SalesInvoiceHeaderFrom.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
      SalesInvoiceHeaderFrom.TESTFIELD("Currency Code","Currency Code");
      SalesInvoiceHeaderFrom.TESTFIELD("Prices Including VAT","Prices Including VAT");
    END;
    
    OnAfterCheckFromSalesInvHeader(SalesInvoiceHeaderFrom,SalesHeaderTo); <=====================
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCheckFromSalesReturnRcptHeader>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CheckFromSalesReturnRcptHeader>
    Code lines:
    ...
      ReturnReceiptHeaderFrom.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
      ReturnReceiptHeaderFrom.TESTFIELD("Currency Code","Currency Code");
      ReturnReceiptHeaderFrom.TESTFIELD("Prices Including VAT","Prices Including VAT");
    END;
    
    OnAfterCheckFromSalesReturnRcptHeader(ReturnReceiptHeaderFrom,SalesHeaderTo); <=====================
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCheckFromSalesShptHeader>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CheckFromSalesShptHeader>
    Code lines:
    ...
      SalesShipmentHeaderFrom.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
      SalesShipmentHeaderFrom.TESTFIELD("Currency Code","Currency Code");
      SalesShipmentHeaderFrom.TESTFIELD("Prices Including VAT","Prices Including VAT");
    END;
    
    OnAfterCheckFromSalesShptHeader(SalesShipmentHeaderFrom,SalesHeaderTo); <=====================
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyArchPurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchDocPurchLineArchive>
    Code lines:
    ...
            CopyFromArchPurchDocDimToLine(ToPurchLine,FromPurchLineArchive);
            IF FromPurchLineArchive.Type = FromPurchLineArchive.Type::"Charge (Item)" THEN
              CopyFromPurchDocAssgntToLine(
                ToPurchLine,FromPurchLineArchive."Document Type",FromPurchLineArchive."Document No.",FromPurchLineArchive."Line No.",
                ItemChargeAssgntNextLineNo);
            OnAfterCopyArchPurchLine(ToPurchHeader,ToPurchLine,FromPurchLineArchive,IncludeHeader,RecalculateLines); <=====================
          END;
        UNTIL FromPurchLineArchive.NEXT = 0;
    END;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyArchSalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDocSalesLineArchive>
    Code lines:
    ...
            CopyFromArchSalesDocDimToLine(ToSalesLine,FromSalesLineArchive);
            IF FromSalesLineArchive.Type = FromSalesLineArchive.Type::"Charge (Item)" THEN
              CopyFromSalesDocAssgntToLine(
                ToSalesLine,FromSalesLineArchive."Document Type",FromSalesLineArchive."Document No.",FromSalesLineArchive."Line No.",
                ItemChargeAssgntNextLineNo);
            OnAfterCopyArchSalesLine(ToSalesHeader,ToSalesLine,FromSalesLineArchive,IncludeHeader,RecalculateLines); <=====================
          END;
        UNTIL FromSalesLineArchive.NEXT = 0;
    END;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyFieldsFromOldPurchHeader>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchDocUpdateHeader>
    Code lines:
    ...
      END;
      IF MoveNegLines THEN
        VALIDATE("Order Address Code");
    
      CopyFieldsFromOldPurchHeader(ToPurchHeader,OldPurchHeader);
      OnAfterCopyFieldsFromOldPurchHeader(ToPurchHeader,OldPurchHeader,MoveNegLines,IncludeHeader); <=====================
      IF RecalculateLines THEN
        CreateDim(
          DATABASE::Vendor,"Pay-to Vendor No.",
          DATABASE::"Salesperson/Purchaser","Purchaser Code",
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyFieldsFromOldSalesHeader>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDocUpdateHeader>
    Code lines:
    ...
      END;
      IF MoveNegLines OR IncludeHeader THEN
        VALIDATE("Location Code");
      CopyShiptoCodeFromInvToCrMemo(ToSalesHeader,FromSalesInvHeader,FromDocType);
      CopyFieldsFromOldSalesHeader(ToSalesHeader,OldSalesHeader);
      OnAfterCopyFieldsFromOldSalesHeader(ToSalesHeader,OldSalesHeader,MoveNegLines,IncludeHeader); <=====================
      IF RecalculateLines THEN
        CreateDim(
          DATABASE::"Responsibility Center","Responsibility Center",
          DATABASE::Customer,"Bill-to Customer No.",
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyFromPurchDocAssgntToLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyFromPurchDocAssgntToLine>
    Code lines:
    ...
            ToItemChargeAssgntPurch,ToItemChargeAssgntPurch."Applies-to Doc. Type",
            ToItemChargeAssgntPurch."Applies-to Doc. No.",ToItemChargeAssgntPurch."Applies-to Doc. Line No.",
            ToItemChargeAssgntPurch."Item No.",ToItemChargeAssgntPurch.Description,ItemChargeAssgntNextLineNo);
      UNTIL FromItemChargeAssgntPurch.NEXT = 0;
    
    OnAfterCopyFromPurchDocAssgntToLine(ToPurchLine,RecalculateLines); <=====================
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyFromSalesDocAssgntToLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyFromSalesDocAssgntToLine>
    Code lines:
    ...
            ToItemChargeAssgntSales,ToItemChargeAssgntSales."Applies-to Doc. Type",
            ToItemChargeAssgntSales."Applies-to Doc. No.",ToItemChargeAssgntSales."Applies-to Doc. Line No.",
            ToItemChargeAssgntSales."Item No.",ToItemChargeAssgntSales.Description,ItemChargeAssgntNextLineNo);
      UNTIL FromItemChargeAssgntSales.NEXT = 0;
    
    OnAfterCopyFromSalesDocAssgntToLine(ToSalesLine,RecalculateLines); <=====================
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyFromSalesToPurchDoc>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyFromSalesToPurchDoc>
    Code lines:
    ...
            ToPurchHeader."Prices Including VAT");
        OnAfterCopySalesToPurchDoc(ToPurchLine,FromSalesLine);
      UNTIL FromSalesLine.NEXT = 0;
    END;
    
    OnAfterCopyFromSalesToPurchDoc(FromSalesHeader,ToPurchHeader); <=====================
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPostedPurchInvoice>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchDocUpdateHeader>
    Code lines:
    ...
          END;
        PurchDocType::"Posted Invoice":
          BEGIN
            VALIDATE("Buy-from Vendor No.",FromPurchInvHeader."Buy-from Vendor No.");
            TRANSFERFIELDS(FromPurchInvHeader,FALSE);
            OnAfterCopyPostedPurchInvoice(ToPurchHeader,OldPurchHeader,FromPurchInvHeader); <=====================
          END;
        PurchDocType::"Posted Return Shipment":
          BEGIN
            VALIDATE("Buy-from Vendor No.",FromReturnShptHeader."Buy-from Vendor No.");
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPostedReceipt>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchDocUpdateHeader>
    Code lines:
    ...
          END;
        PurchDocType::"Posted Receipt":
          BEGIN
            VALIDATE("Buy-from Vendor No.",FromPurchRcptHeader."Buy-from Vendor No.");
            TRANSFERFIELDS(FromPurchRcptHeader,FALSE);
            OnAfterCopyPostedReceipt(ToPurchHeader,OldPurchHeader,FromPurchRcptHeader); <=====================
          END;
        PurchDocType::"Posted Invoice":
          BEGIN
            VALIDATE("Buy-from Vendor No.",FromPurchInvHeader."Buy-from Vendor No.");
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPostedReturnReceipt>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDocUpdateHeader>
    Code lines:
    ...
        SalesDocType::"Posted Return Receipt":
          BEGIN
            VALIDATE("Sell-to Customer No.",FromReturnRcptHeader."Sell-to Customer No.");
            OnCopySalesDocOnBeforeTransferPostedReturnReceiptFields(ToSalesHeader,FromReturnRcptHeader);
            TRANSFERFIELDS(FromReturnRcptHeader,FALSE);
            OnAfterCopyPostedReturnReceipt(ToSalesHeader,OldSalesHeader,FromReturnRcptHeader); <=====================
          END;
        SalesDocType::"Posted Credit Memo":
          TransferFieldsFromCrMemoToInv(ToSalesHeader,FromSalesCrMemoHeader);
        SalesDocType::"Arch. Quote",
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPostedReturnShipment>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchDocUpdateHeader>
    Code lines:
    ...
          END;
        PurchDocType::"Posted Return Shipment":
          BEGIN
            VALIDATE("Buy-from Vendor No.",FromReturnShptHeader."Buy-from Vendor No.");
            TRANSFERFIELDS(FromReturnShptHeader,FALSE);
            OnAfterCopyPostedReturnShipment(ToPurchHeader,OldPurchHeader,FromReturnShptHeader); <=====================
          END;
        PurchDocType::"Posted Credit Memo":
          BEGIN
            VALIDATE("Buy-from Vendor No.",FromPurchCrMemoHeader."Buy-from Vendor No.");
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPostedShipment>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDocUpdateHeader>
    Code lines:
    ...
        SalesDocType::"Posted Shipment":
          BEGIN
            VALIDATE("Sell-to Customer No.",FromSalesShptHeader."Sell-to Customer No.");
            OnCopySalesDocOnBeforeTransferPostedShipmentFields(ToSalesHeader,FromSalesShptHeader);
            TRANSFERFIELDS(FromSalesShptHeader,FALSE);
            OnAfterCopyPostedShipment(ToSalesHeader,OldSalesHeader,FromSalesShptHeader); <=====================
          END;
        SalesDocType::"Posted Invoice":
          BEGIN
            FromSalesInvHeader.CALCFIELDS("Work Description");
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchaseDocument>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchDoc>
    Code lines:
    ...
        MESSAGE(Text019);
      LinesNotCopied <> 0:
        MESSAGE(Text004);
    END;
    
    OnAfterCopyPurchaseDocument( <=====================
      FromDocType,FromDocNo,ToPurchHeader,FromDocOccurrenceNo,FromDocVersionNo,IncludeHeader,RecalculateLines,MoveNegLines);
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchaseHeader>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchDocUpdateHeader>
    Code lines:
    ...
        PurchDocType::"Return Order",
        PurchDocType::"Credit Memo":
          BEGIN
            TRANSFERFIELDS(FromPurchHeader,FALSE);
            UpdatePurchHeaderWhenCopyFromPurchHeader(ToPurchHeader,OldPurchHeader,FromDocType);
            OnAfterCopyPurchaseHeader(ToPurchHeader,OldPurchHeader); <=====================
          END;
        PurchDocType::"Posted Receipt":
          BEGIN
            VALIDATE("Buy-from Vendor No.",FromPurchRcptHeader."Buy-from Vendor No.");
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchaseLinesToDoc>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchaseLinesToDoc>
    Code lines:
    ...
        CopyPurchReturnShptLinesToDoc(ToPurchaseHeader,FromReturnShipmentLine,LinesNotCopied,MissingExCostRevLink);
      PurchDocType::"Posted Credit Memo":
        CopyPurchCrMemoLinesToDoc(ToPurchaseHeader,FromPurchCrMemoLine,LinesNotCopied,MissingExCostRevLink);
    END;
    CopyExtText := FALSE;
    OnAfterCopyPurchaseLinesToDoc( <=====================
      FromDocType,ToPurchaseHeader,FromPurchRcptLine,FromPurchInvLine,FromReturnShipmentLine,FromPurchCrMemoLine,
      LinesNotCopied,MissingExCostRevLink);
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchCrMemoLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchCrMemoLinesToDoc>
    Code lines:
    ...
              END;
            END;
            OnAfterCopyPurchLineFromPurchCrMemoLineBuffer(
              ToPurchLine,FromPurchCrMemoLine,IncludeHeader,RecalculateLines,TempDocPurchaseLine,ToPurchHeader,FromPurchLineBuf);
          END;
          OnAfterCopyPurchCrMemoLine(FromPurchCrMemoLine,ToPurchLine); <=====================
        UNTIL NEXT = 0;
      END;
    END;
    
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchHeaderArchive>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchDocUpdateHeader>
    Code lines:
    ...
          BEGIN
            VALIDATE("Buy-from Vendor No.",FromPurchHeaderArchive."Buy-from Vendor No.");
            TRANSFERFIELDS(FromPurchHeaderArchive,FALSE);
            UpdatePurchHeaderWhenCopyFromPurchHeaderArchive(ToPurchHeader);
            CopyFromArchPurchDocDimToHdr(ToPurchHeader,FromPurchHeaderArchive);
            OnAfterCopyPurchHeaderArchive(ToPurchHeader,OldPurchHeader,FromPurchHeaderArchive) <=====================
          END;
      END;
      OnAfterCopyPurchHeaderDone(
        ToPurchHeader,OldPurchHeader,FromPurchHeader,FromPurchRcptHeader,FromPurchInvHeader,
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchHeaderDone>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchDocUpdateHeader>
    Code lines:
    ...
            UpdatePurchHeaderWhenCopyFromPurchHeaderArchive(ToPurchHeader);
            CopyFromArchPurchDocDimToHdr(ToPurchHeader,FromPurchHeaderArchive);
            OnAfterCopyPurchHeaderArchive(ToPurchHeader,OldPurchHeader,FromPurchHeaderArchive)
          END;
      END;
      OnAfterCopyPurchHeaderDone( <=====================
        ToPurchHeader,OldPurchHeader,FromPurchHeader,FromPurchRcptHeader,FromPurchInvHeader,
        FromReturnShptHeader,FromPurchCrMemoHeader,FromPurchHeaderArchive);
    
      Invoice := FALSE;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchInvLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchInvLinesToDoc>
    Code lines:
    ...
          IF NOT SplitLine THEN
            CopyPurchLinesToBuffer(
              FromPurchHeader,FromPurchLine,FromPurchLine2,FromPurchLineBuf,ToPurchHeader,TempDocPurchaseLine,
              "Document No.",NextLineNo);
    
          OnAfterCopyPurchInvLines(TempDocPurchaseLine,ToPurchHeader,FromPurchLineBuf,FromPurchInvLine); <=====================
        UNTIL NEXT = 0;
    
    // Create purchase line from buffer
    Window.UPDATE(1,FromLineCounter);
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchInvLines>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchInvLinesToDoc>
    Code lines:
    ...
          IF NOT SplitLine THEN
            CopyPurchLinesToBuffer(
              FromPurchHeader,FromPurchLine,FromPurchLine2,FromPurchLineBuf,ToPurchHeader,TempDocPurchaseLine,
              "Document No.",NextLineNo);
    
          OnAfterCopyPurchInvLines(TempDocPurchaseLine,ToPurchHeader,FromPurchLineBuf,FromPurchInvLine); <=====================
        UNTIL NEXT = 0;
    
    // Create purchase line from buffer
    Window.UPDATE(1,FromLineCounter);
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchLineFromPurchCrMemoLineBuffer>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchCrMemoLinesToDoc>
    Code lines:
    ...
                  TempTrkgItemLedgEntry,ToPurchLine,
                  FillExactCostRevLink AND ExactCostRevMandatory,MissingExCostRevLink,
                  FromPurchHeader."Prices Including VAT",ToPurchHeader."Prices Including VAT",FALSE);
              END;
            END;
            OnAfterCopyPurchLineFromPurchCrMemoLineBuffer( <=====================
              ToPurchLine,FromPurchCrMemoLine,IncludeHeader,RecalculateLines,TempDocPurchaseLine,ToPurchHeader,FromPurchLineBuf);
          END;
          OnAfterCopyPurchCrMemoLine(FromPurchCrMemoLine,ToPurchLine);
        UNTIL NEXT = 0;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchLineFromPurchLineBuffer>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchInvLinesToDoc>
    Code lines:
    ...
                ItemTrackingMgt.CopyItemLedgEntryTrkgToPurchLn(TempTrkgItemLedgEntry,ToPurchLine,
                  FillExactCostRevLink AND ExactCostRevMandatory,MissingExCostRevLink,
                  FromPurchHeader."Prices Including VAT",ToPurchHeader."Prices Including VAT",FALSE);
              END;
            END;
            OnAfterCopyPurchLineFromPurchLineBuffer( <=====================
              ToPurchLine,FromPurchInvLine,IncludeHeader,RecalculateLines,TempDocPurchaseLine,ToPurchHeader,FromPurchLineBuf);
          END;
          OnAfterCopyPurchInvLine(FromPurchInvLine,ToPurchLine);
        UNTIL NEXT = 0;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchLineFromPurchRcptLineBuffer>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchRcptLinesToDoc>
    Code lines:
    ...
                  ItemTrackingMgt.CopyItemLedgEntryTrkgToPurchLn(
                    TempTrkgItemLedgEntry,ToPurchLine,
                    FillExactCostRevLink AND ExactCostRevMandatory,MissingExCostRevLink,
                    FromPurchHeader."Prices Including VAT",ToPurchHeader."Prices Including VAT",TRUE);
                END;
                OnAfterCopyPurchLineFromPurchRcptLineBuffer( <=====================
                  ToPurchLine,FromPurchRcptLine,IncludeHeader,RecalculateLines,TempDocPurchaseLine,ToPurchHeader,FromPurchLineBuf);
              END;
            UNTIL FromPurchLineBuf.NEXT = 0;
            OnAfterCopyPurchRcptLine(FromPurchRcptLine,ToPurchLine);
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchLineFromReturnShptLineBuffer>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchReturnShptLinesToDoc>
    Code lines:
    ...
                  ItemTrackingMgt.CopyItemLedgEntryTrkgToPurchLn(
                    TempTrkgItemLedgEntry,ToPurchLine,
                    FillExactCostRevLink AND ExactCostRevMandatory,MissingExCostRevLink,
                    FromPurchHeader."Prices Including VAT",ToPurchHeader."Prices Including VAT",TRUE);
                END;
                OnAfterCopyPurchLineFromReturnShptLineBuffer( <=====================
                  ToPurchLine,FromReturnShptLine,IncludeHeader,RecalculateLines,TempDocPurchaseLine,ToPurchHeader,FromPurchLineBuf);
              END;
            UNTIL FromPurchLineBuf.NEXT = 0;
          END;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchLinesToBufferFields>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchLinesToBuffer>
    Code lines:
    FromPurchLine2 := TempPurchLineBuf;
    TempPurchLineBuf := FromPurchLine;
    TempPurchLineBuf."Document No." := FromPurchLine2."Document No.";
    TempPurchLineBuf."Receipt Line No." := FromPurchLine2."Receipt Line No.";
    TempPurchLineBuf."Line No." := NextLineNo;
    OnAfterCopyPurchLinesToBufferFields(TempPurchLineBuf,FromPurchLine2); <=====================
    
    NextLineNo := NextLineNo + 10000;
    IF NOT IsRecalculateAmount(
         FromPurchHeader."Currency Code",ToPurchHeader."Currency Code",
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyPurchRcptLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchRcptLinesToDoc>
    Code lines:
    ...
                END;
                OnAfterCopyPurchLineFromPurchRcptLineBuffer(
                  ToPurchLine,FromPurchRcptLine,IncludeHeader,RecalculateLines,TempDocPurchaseLine,ToPurchHeader,FromPurchLineBuf);
              END;
            UNTIL FromPurchLineBuf.NEXT = 0;
            OnAfterCopyPurchRcptLine(FromPurchRcptLine,ToPurchLine); <=====================
          END;
        UNTIL NEXT = 0;
    
    Window.CLOSE;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopyReturnShptLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchReturnShptLinesToDoc>
    Code lines:
    ...
                OnAfterCopyPurchLineFromReturnShptLineBuffer(
                  ToPurchLine,FromReturnShptLine,IncludeHeader,RecalculateLines,TempDocPurchaseLine,ToPurchHeader,FromPurchLineBuf);
              END;
            UNTIL FromPurchLineBuf.NEXT = 0;
          END;
          OnAfterCopyReturnShptLine(FromReturnShptLine,ToPurchLine); <=====================
        UNTIL NEXT = 0;
    
    Window.CLOSE;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesDocument>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDoc>
    Code lines:
    ...
        MESSAGE(Text019);
      LinesNotCopied <> 0:
        MESSAGE(Text004);
    END;
    
    OnAfterCopySalesDocument( <=====================
      FromDocType,FromDocNo,ToSalesHeader,FromDocOccurrenceNo,FromDocVersionNo,IncludeHeader,RecalculateLines,MoveNegLines);
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesHeader>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDocUpdateHeader>
    Code lines:
    ...
        SalesDocType::"Credit Memo":
          BEGIN
            FromSalesHeader.CALCFIELDS("Work Description");
            TRANSFERFIELDS(FromSalesHeader,FALSE);
            UpdateSalesHeaderWhenCopyFromSalesHeader(ToSalesHeader,OldSalesHeader,FromDocType);
            OnAfterCopySalesHeader(ToSalesHeader,OldSalesHeader,FromSalesHeader); <=====================
          END;
        SalesDocType::"Posted Shipment":
          BEGIN
            VALIDATE("Sell-to Customer No.",FromSalesShptHeader."Sell-to Customer No.");
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesHeaderArchive>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDocUpdateHeader>
    Code lines:
    ...
            VALIDATE("Sell-to Customer No.",FromSalesHeaderArchive."Sell-to Customer No.");
            TRANSFERFIELDS(FromSalesHeaderArchive,FALSE);
            OnCopySalesDocOnAfterTransferArchSalesHeaderFields(ToSalesHeader,FromSalesHeaderArchive);
            UpdateSalesHeaderWhenCopyFromSalesHeaderArchive(ToSalesHeader);
            CopyFromArchSalesDocDimToHdr(ToSalesHeader,FromSalesHeaderArchive);
            OnAfterCopySalesHeaderArchive(ToSalesHeader,OldSalesHeader,FromSalesHeaderArchive) <=====================
          END;
      END;
      OnAfterCopySalesHeaderDone(
        ToSalesHeader,OldSalesHeader,FromSalesHeader,FromSalesShptHeader,FromSalesInvHeader,
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesHeaderDone>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDocUpdateHeader>
    Code lines:
    ...
            UpdateSalesHeaderWhenCopyFromSalesHeaderArchive(ToSalesHeader);
            CopyFromArchSalesDocDimToHdr(ToSalesHeader,FromSalesHeaderArchive);
            OnAfterCopySalesHeaderArchive(ToSalesHeader,OldSalesHeader,FromSalesHeaderArchive)
          END;
      END;
      OnAfterCopySalesHeaderDone( <=====================
        ToSalesHeader,OldSalesHeader,FromSalesHeader,FromSalesShptHeader,FromSalesInvHeader,
        FromReturnRcptHeader,FromSalesCrMemoHeader,FromSalesHeaderArchive);
    
      Invoice := FALSE;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesInvLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesInvLinesToDoc>
    Code lines:
    ...
          IF NOT SplitLine THEN
            CopySalesLinesToBuffer(
              FromSalesHeader,FromSalesLine,FromSalesLine2,TempSalesLineBuf,
              ToSalesHeader,TempDocSalesLine,"Document No.",NextLineNo);
    
          OnAfterCopySalesInvLine(TempDocSalesLine,ToSalesHeader,TempSalesLineBuf,FromSalesInvLine); <=====================
        UNTIL NEXT = 0;
    
    // Create sales line from buffer
    Window.UPDATE(1,FromLineCounter);
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesLineFromReturnRcptLineBuffer>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesReturnRcptLinesToDoc>
    Code lines:
    ...
                  ItemTrackingMgt.CopyItemLedgEntryTrkgToSalesLn(
                    TempTrkgItemLedgEntry,ToSalesLine,
                    FillExactCostRevLink AND ExactCostRevMandatory,MissingExCostRevLink,
                    FromSalesHeader."Prices Including VAT",ToSalesHeader."Prices Including VAT",TRUE);
                END;
                OnAfterCopySalesLineFromReturnRcptLineBuffer( <=====================
                  ToSalesLine,FromReturnRcptLine,IncludeHeader,RecalculateLines,TempDocSalesLine,ToSalesHeader,FromSalesLineBuf);
              END;
            UNTIL FromSalesLineBuf.NEXT = 0
          END;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesLineFromSalesCrMemoLineBuffer>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesCrMemoLinesToDoc>
    Code lines:
    ...
                  TempTrkgItemLedgEntry,ToSalesLine,
                  FillExactCostRevLink AND ExactCostRevMandatory,MissingExCostRevLink,
                  FromSalesHeader."Prices Including VAT",ToSalesHeader."Prices Including VAT",FALSE);
              END;
            END;
            OnAfterCopySalesLineFromSalesCrMemoLineBuffer( <=====================
              ToSalesLine,FromSalesCrMemoLine,IncludeHeader,RecalculateLines,TempDocSalesLine,ToSalesHeader,FromSalesLineBuf);
          END;
        UNTIL NEXT = 0;
      END;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesLineFromSalesDocSalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDocSalesLine>
    Code lines:
    ...
            THEN BEGIN
              IF FromSalesLine.Type = FromSalesLine.Type::"Charge (Item)" THEN
                CopyFromSalesDocAssgntToLine(
                  ToSalesLine,FromSalesLine."Document Type",FromSalesLine."Document No.",FromSalesLine."Line No.",
                  ItemChargeAssgntNextLineNo);
              OnAfterCopySalesLineFromSalesDocSalesLine( <=====================
                ToSalesHeader,ToSalesLine,FromSalesLine,IncludeHeader,RecalculateLines);
            END;
          END;
        UNTIL FromSalesLine.NEXT = 0;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesLineFromSalesLineBuffer>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesInvLinesToDoc>
    Code lines:
    ...
                CopyItemLedgEntryTrackingToSalesLine(
                  ItemLedgEntryBuf,TempItemTrkgEntry,TempSalesLineBuf,ToSalesLine,ToSalesHeader."Prices Including VAT",
                  FromSalesHeader."Prices Including VAT",FillExactCostRevLink,MissingExCostRevLink);
            END;
    
            OnAfterCopySalesLineFromSalesLineBuffer( <=====================
              ToSalesLine,FromSalesInvLine,IncludeHeader,RecalculateLines,TempDocSalesLine,ToSalesHeader,TempSalesLineBuf);
          END;
        UNTIL NEXT = 0;
      END;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesLineFromSalesShptLineBuffer>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesShptLinesToDoc>
    Code lines:
    ...
                  ItemTrackingMgt.CopyItemLedgEntryTrkgToSalesLn(
                    TempTrkgItemLedgEntry,ToSalesLine,
                    FillExactCostRevLink AND ExactCostRevMandatory,MissingExCostRevLink,
                    FromSalesHeader."Prices Including VAT",ToSalesHeader."Prices Including VAT",TRUE);
                END;
                OnAfterCopySalesLineFromSalesShptLineBuffer( <=====================
                  ToSalesLine,FromSalesShptLine,IncludeHeader,RecalculateLines,TempDocSalesLine,ToSalesHeader,FromSalesLineBuf);
              END;
            UNTIL FromSalesLineBuf.NEXT = 0;
          END;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesLinesToBufferFields>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesLinesToBuffer>
    Code lines:
    FromSalesLine2 := TempSalesLineBuf;
    TempSalesLineBuf := FromSalesLine;
    TempSalesLineBuf."Document No." := FromSalesLine2."Document No.";
    TempSalesLineBuf."Shipment Line No." := FromSalesLine2."Shipment Line No.";
    TempSalesLineBuf."Line No." := NextLineNo;
    OnAfterCopySalesLinesToBufferFields(TempSalesLineBuf,FromSalesLine2); <=====================
    
    NextLineNo := NextLineNo + 10000;
    IF NOT IsRecalculateAmount(
         FromSalesHeader."Currency Code",ToSalesHeader."Currency Code",
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesLinesToDoc>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesLinesToDoc>
    Code lines:
    ...
        CopySalesReturnRcptLinesToDoc(ToSalesHeader,FromReturnReceiptLine,LinesNotCopied,MissingExCostRevLink);
      SalesDocType::"Posted Credit Memo":
        CopySalesCrMemoLinesToDoc(ToSalesHeader,FromSalesCrMemoLine,LinesNotCopied,MissingExCostRevLink);
    END;
    CopyExtText := FALSE;
    OnAfterCopySalesLinesToDoc( <=====================
      FromDocType,ToSalesHeader,FromSalesShipmentLine,FromSalesInvoiceLine,FromReturnReceiptLine,FromSalesCrMemoLine,
      LinesNotCopied,MissingExCostRevLink);
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterCopySalesToPurchDoc>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyFromSalesToPurchDoc>
    Code lines:
    ...
        INSERT(TRUE);
        IF (FromSalesLine.Type <> FromSalesLine.Type::" ") AND (Type = Type::Item) AND (Quantity <> 0) THEN
          CopyItemTrackingEntries(
            FromSalesLine,ToPurchLine,FromSalesHeader."Prices Including VAT",
            ToPurchHeader."Prices Including VAT");
        OnAfterCopySalesToPurchDoc(ToPurchLine,FromSalesLine); <=====================
      UNTIL FromSalesLine.NEXT = 0;
    END;
    
    OnAfterCopyFromSalesToPurchDoc(FromSalesHeader,ToPurchHeader);
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInitAndCheckPurchaseDocuments>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<InitAndCheckPurchaseDocuments>
    Code lines:
    ...
              FromPurchaseHeaderArchive.TESTFIELD("Currency Code","Currency Code");
            END;
          END;
      END;
    
    OnAfterInitAndCheckPurchaseDocuments( <=====================
      FromDocType,FromDocNo,FromDocOccurrenceNo,FromDocVersionNo,
      FromPurchaseHeader,ToPurchaseHeader,
      FromPurchRcptHeader,FromPurchInvHeader,FromReturnShipmentHeader,FromPurchCrMemoHdr,FromPurchaseHeaderArchive,
      IncludeHeader,RecalculateLines);
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInitAndCheckSalesDocuments>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<InitAndCheckSalesDocuments>
    Code lines:
    ...
              FromSalesHeaderArchive.TESTFIELD("Prices Including VAT","Prices Including VAT");
            END;
          END;
      END;
    
    OnAfterInitAndCheckSalesDocuments( <=====================
      FromDocType,FromDocNo,FromDocOccurrenceNo,FromDocVersionNo,
      FromSalesHeader,ToSalesHeader,ToSalesLine,
      FromSalesShipmentHeader,FromSalesInvoiceHeader,FromReturnReceiptHeader,FromSalesCrMemoHeader,FromSalesHeaderArchive,
      IncludeHeader,RecalculateLines);
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInitPurchLineFields>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<InitPurchLineFields>
    Code lines:
    ...
    ToPurchLine."Amt. Rcd. Not Invoiced" := 0;
    ToPurchLine."Amt. Rcd. Not Invoiced (LCY)" := 0;
    ToPurchLine."Return Shpd. Not Invd." := 0;
    ToPurchLine."Return Shpd. Not Invd. (LCY)" := 0;
    
    OnAfterInitPurchLineFields(ToPurchLine); <=====================
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInitSalesLineFields>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<InitSalesLineFields>
    Code lines:
    ...
    ToSalesLine."Return Rcd. Not Invd. (LCY)" := 0;
    ToSalesLine."Job No." := '';
    ToSalesLine."Job Task No." := '';
    ToSalesLine."Job Contract Entry No." := 0;
    
    OnAfterInitSalesLineFields(ToSalesLine); <=====================
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInitToPurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchLine>
    Code lines:
    ...
    THEN
      EXIT(FALSE);
    
    IF RecalculateLines AND NOT FromPurchLine."System-Created Entry" THEN BEGIN
      ToPurchLine.INIT;
      OnAfterInitToPurchLine(ToPurchLine); <=====================
    END ELSE BEGIN
      CheckPurchaseLineIsBlocked(FromPurchLine);
      ToPurchLine := FromPurchLine;
      ToPurchLine."Returns Deferral Start Date" := 0D;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInitToSalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesLine>
    Code lines:
    ...
    THEN
      EXIT(FALSE);
    ToSalesLine.SetSalesHeader(ToSalesHeader);
    IF RecalculateLines AND NOT FromSalesLine."System-Created Entry" THEN BEGIN
      ToSalesLine.INIT;
      OnAfterInitToSalesLine(ToSalesLine); <=====================
    END ELSE BEGIN
      CheckSalesLineIsBlocked(FromSalesLine);
      ToSalesLine := FromSalesLine;
      ToSalesLine."Returns Deferral Start Date" := 0D;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInsertToPurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchLine>
    Code lines:
    ...
    END;
    
    IF CopyThisLine THEN BEGIN
      OnBeforeInsertToPurchLine(ToPurchLine,FromPurchLine,FromPurchDocType,RecalculateLines,ToPurchHeader);
      ToPurchLine.INSERT;
      OnAfterInsertToPurchLine(ToPurchLine,FromPurchLine,RecalculateLines); <=====================
    END ELSE
      LinesNotCopied := LinesNotCopied + 1;
    
    EXIT(CopyThisLine);
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterInsertToSalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesLine>
    Code lines:
    ...
        ToSalesLine,FromSalesLine,FromSalesDocType,RecalculateLines,ToSalesHeader,DocLineNo,NextLineNo);
      ToSalesLine.INSERT;
      HandleAsmAttachedToSalesLine(ToSalesLine);
      IF ToSalesLine.Reserve = ToSalesLine.Reserve::Always THEN
        ToSalesLine.AutoReserve;
      OnAfterInsertToSalesLine(ToSalesLine,FromSalesLine,RecalculateLines); <=====================
    END ELSE
      LinesNotCopied := LinesNotCopied + 1;
    
    EXIT(CopyThisLine);
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterProcessServContractLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<ProcessServContractLine>
    Code lines:
    ...
    ToServContractLine."New Line" := TRUE;
    ToServContractLine.Credited := FALSE;
    ToServContractLine.SetupNewLine;
    ToServContractLine.INSERT(TRUE);
    
    OnAfterProcessServContractLine(ToServContractLine,FromServContractLine); <=====================
    EXIT(TRUE);
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterRecalculateSalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<RecalculateSalesLine>
    Code lines:
    ...
        ToSalesLine.VALIDATE("Purchasing Code",FromSalesLine."Purchasing Code");
    END;
    IF (FromSalesLine.Type = FromSalesLine.Type::" ") AND (FromSalesLine."No." <> '') THEN
      ToSalesLine.VALIDATE("No.",FromSalesLine."No.");
    
    OnAfterRecalculateSalesLine(ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLine,CopyThisLine); <=====================
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterSetDefaultValuesToPurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<SetDefaultValuesToPurchLine>
    Code lines:
    ...
    ToPurchLine."Sales Order No." := '';
    ToPurchLine."Sales Order Line No." := 0;
    ToPurchLine."Special Order Sales No." := '';
    ToPurchLine."Special Order Sales Line No." := 0;
    
    OnAfterSetDefaultValuesToPurchLine(ToPurchLine); <=====================
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterSetDefaultValuesToSalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<SetDefaultValuesToSalesLine>
    Code lines:
    ...
    ToSalesLine."Purchase Order No." := '';
    ToSalesLine."Purch. Order Line No." := 0;
    ToSalesLine."Special Order Purchase No." := '';
    ToSalesLine."Special Order Purch. Line No." := 0;
    
    OnAfterSetDefaultValuesToSalesLine(ToSalesLine,ToSalesHeader); <=====================
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterTransferFieldsFromCrMemoToInv>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<TransferFieldsFromCrMemoToInv>
    Code lines:
    ...
    IF (ToSalesHeader."Document Type" = ToSalesHeader."Document Type"::Invoice) AND IncludeHeader THEN BEGIN
      ToSalesHeader.CopySellToAddressToShipToAddress;
      ToSalesHeader.VALIDATE("Ship-to Code",FromSalesCrMemoHeader."Ship-to Code");
    END;
    
    OnAfterTransferFieldsFromCrMemoToInv(ToSalesHeader,FromSalesCrMemoHeader); <=====================
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterTransferTempAsmHeader>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<GenerateAsmDataFromPosted>
    Code lines:
    InitAsmCopyHandling(FALSE);
    TempAsmHeader.TRANSFERFIELDS(PostedAsmHeader);
    OnAfterTransferTempAsmHeader(TempAsmHeader,PostedAsmHeader); <=====================
    CASE DocType OF
      DocType::Quote:
        TempAsmHeader."Document Type" := TempAsmHeader."Document Type"::Quote;
      DocType::Order:
        TempAsmHeader."Document Type" := TempAsmHeader."Document Type"::Order;
      DocType::"Blanket Order":
        TempAsmHeader."Document Type" := TempAsmHeader."Document Type"::"Blanket Order";
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterTransfldsFromSalesToPurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<TransfldsFromSalesToPurchLine>
    Code lines:
    ...
      VALIDATE("Direct Unit Cost");
      Description := FromSalesLine.Description;
      "Description 2" := FromSalesLine."Description 2";
    END;
    
    OnAfterTransfldsFromSalesToPurchLine(FromSalesLine,ToPurchLine); <=====================
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterUpdatePurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<UpdatePurchLine>
    Code lines:
    ...
      ToPurchLine."Pay-to Vendor No." := ToPurchHeader."Pay-to Vendor No.";
    END;
    ToPurchLine.VALIDATE("Order No.",FromPurchLine."Order No.");
    ToPurchLine.VALIDATE("Order Line No.",FromPurchLine."Order Line No.");
    
    OnAfterUpdatePurchLine( <=====================
      ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLine,
      CopyThisLine,RecalculateAmount,FromPurchDocType,CopyPostedDeferral);
Codeunit<Copy Document Mgt.>.PROCEDURE<OnAfterUpdateSalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<UpdateSalesLine>
    Code lines:
    ...
          ELSE
            ToSalesLine."Shipment Date" := WORKDATE;
      END;
    END;
    
    OnAfterUpdateSalesLine( <=====================
      ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLine,
      CopyThisLine,RecalculateAmount,FromSalesDocType,CopyPostedDeferral);
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeAddPurchDocLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<AddPurchDocLine>
    Code lines:
    OnBeforeAddPurchDocLine(TempDocPurchaseLine,BufferLineNo,DocumentNo,DocumentLineNo); <=====================
    
    TempDocPurchaseLine."Document No." := DocumentNo;
    TempDocPurchaseLine."Line No." := DocumentLineNo;
    TempDocPurchaseLine."Receipt Line No." := BufferLineNo;
    TempDocPurchaseLine.INSERT;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeAddSalesDocLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<AddSalesDocLine>
    Code lines:
    OnBeforeAddSalesDocLine(TempDocSalesLine,BufferLineNo,DocumentNo,DocumentLineNo); <=====================
    
    TempDocSalesLine."Document No." := DocumentNo;
    TempDocSalesLine."Line No." := DocumentLineNo;
    TempDocSalesLine."Shipment Line No." := BufferLineNo;
    TempDocSalesLine.INSERT;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyArchPurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyArchPurchLine>
    Code lines:
    CopyThisLine := TRUE;
    OnBeforeCopyArchPurchLine(ToPurchHeader,FromPurchHeaderArchive,FromPurchLineArchive,RecalculateLines,CopyThisLine); <=====================
    IF NOT CopyThisLine THEN BEGIN
      LinesNotCopied := LinesNotCopied + 1;
      EXIT(FALSE);
    END;
    
    IF ((ToPurchHeader."Language Code" <> FromPurchHeaderArchive."Language Code") OR RecalculateLines) AND
       (FromPurchLineArchive."Attached to Line No." <> 0)
    THEN
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyArchSalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyArchSalesLine>
    Code lines:
    CopyThisLine := TRUE;
    OnBeforeCopyArchSalesLine(ToSalesHeader,FromSalesHeaderArchive,FromSalesLineArchive,RecalculateLines,CopyThisLine); <=====================
    IF NOT CopyThisLine THEN BEGIN
      LinesNotCopied := LinesNotCopied + 1;
      EXIT(FALSE);
    END;
    
    IF ((ToSalesHeader."Language Code" <> FromSalesHeaderArchive."Language Code") OR RecalculateLines) AND
       (FromSalesLineArchive."Attached to Line No." <> 0)
    THEN
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchaseDocForCrMemoCancelling>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchDocForCrMemoCancelling>
    Code lines:
    InsertCancellationLine := TRUE;
    OnBeforeCopyPurchaseDocForCrMemoCancelling(ToPurchaseHeader,FromDocNo); <=====================
    
    CopyPurchDoc(SalesDocType::"Posted Credit Memo",FromDocNo,ToPurchaseHeader);
    InsertCancellationLine := FALSE;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchaseDocForInvoiceCancelling>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchaseDocForInvoiceCancelling>
    Code lines:
    OnBeforeCopyPurchaseDocForInvoiceCancelling(ToPurchaseHeader,FromDocNo); <=====================
    
    CopyPurchDoc(PurchDocType::"Posted Invoice",FromDocNo,ToPurchaseHeader);
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchaseDocument>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchDoc>
    Code lines:
    ...
        IF FromDocNo = '' THEN
          ERROR(Text000);
        FIND;
      END;
    
      OnBeforeCopyPurchaseDocument(FromDocType,FromDocNo,ToPurchHeader); <=====================
    
      TransferOldExtLines.ClearLineNumbers;
    
      IF NOT InitAndCheckPurchaseDocuments(
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchaseJobFields>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchaseJobFields>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCopyPurchaseJobFields(ToPurchLine,FromPurchLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    ToPurchLine.VALIDATE("Job No.",FromPurchLine."Job No.");
    ToPurchLine.VALIDATE("Job Task No.",FromPurchLine."Job Task No.");
    ToPurchLine.VALIDATE("Job Line Type",FromPurchLine."Job Line Type");
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchaseLinesToDoc>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchaseLinesToDoc>
    Code lines:
    OnBeforeCopyPurchaseLinesToDoc( <=====================
      FromDocType,ToPurchaseHeader,FromPurchRcptLine,FromPurchInvLine,FromReturnShipmentLine,FromPurchCrMemoLine,
      LinesNotCopied,MissingExCostRevLink);
    CopyExtText := TRUE;
    CASE FromDocType OF
      PurchDocType::"Posted Receipt":
        CopyPurchRcptLinesToDoc(ToPurchaseHeader,FromPurchRcptLine,LinesNotCopied,MissingExCostRevLink);
      PurchDocType::"Posted Invoice":
        CopyPurchInvLinesToDoc(ToPurchaseHeader,FromPurchInvLine,LinesNotCopied,MissingExCostRevLink);
      PurchDocType::"Posted Return Shipment":
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchCrMemoLinesToDoc>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchCrMemoLinesToDoc>
    Code lines:
    ...
    FromPurchLineBuf.DELETEALL;
    TempItemTrkgEntry.RESET;
    TempItemTrkgEntry.DELETEALL;
    OpenWindow;
    
    OnBeforeCopyPurchCrMemoLinesToDoc(TempDocPurchaseLine,ToPurchHeader,FromPurchCrMemoLine); <=====================
    
    // Fill purchase line buffer
    WITH FromPurchCrMemoLine DO
      IF FINDSET THEN
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchInvLines>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchInvLinesToDoc>
    Code lines:
    ...
    FromPurchLineBuf.DELETEALL;
    TempItemTrkgEntry.RESET;
    TempItemTrkgEntry.DELETEALL;
    OpenWindow;
    
    OnBeforeCopyPurchInvLines(TempDocPurchaseLine,ToPurchHeader,FromPurchInvLine); <=====================
    
    // Fill purchase line buffer
    WITH FromPurchInvLine DO
      IF FINDSET THEN
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchLine>
    Code lines:
    CopyThisLine := TRUE;
    OnBeforeCopyPurchLine( <=====================
      ToPurchHeader,FromPurchHeader,FromPurchLine,RecalculateLines,CopyThisLine,ToPurchLine,MoveNegLines,
      RoundingLineInserted);
    IF NOT CopyThisLine THEN BEGIN
      LinesNotCopied := LinesNotCopied + 1;
      EXIT(FALSE);
    END;
    
    CheckPurchRounding(FromPurchLine,RoundingLineInserted);
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchLineExtText>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchLineExtText>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCopyPurchLineExtText(ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLine,DocLineNo,NextLineNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF (ToPurchHeader."Language Code" <> FromPurchHeader."Language Code") OR RecalculateLines OR CopyExtText THEN
      IF TransferExtendedText.PurchCheckIfAnyExtText(ToPurchLine,FALSE) THEN BEGIN
        TransferExtendedText.InsertPurchExtText(ToPurchLine);
        ToPurchLine2.SETRANGE("Document Type",ToPurchLine."Document Type");
        ToPurchLine2.SETRANGE("Document No.",ToPurchLine."Document No.");
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchLines>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<UpdatePurchLine>
    Code lines:
    ...
      ToPurchLine."Drop Shipment" := FALSE;
      ToPurchLine."Special Order" := FALSE;
      IF VATPostingSetup.GET(ToPurchLine."VAT Bus. Posting Group",ToPurchLine."VAT Prod. Posting Group") THEN
        ToPurchLine."VAT Identifier" := VATPostingSetup."VAT Identifier";
    
      OnBeforeCopyPurchLines(ToPurchLine); <=====================
    
      CopyDocLines(RecalculateAmount,ToPurchLine,FromPurchLine);
    
      ToPurchLine.UpdateWithWarehouseReceive;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopyPurchReturnShptLinesToDoc>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchReturnShptLinesToDoc>
    Code lines:
    MissingExCostRevLink := FALSE;
    InitCurrency(ToPurchHeader."Currency Code");
    OpenWindow;
    
    OnBeforeCopyPurchReturnShptLinesToDoc(TempDocPurchaseLine,ToPurchHeader,FromReturnShptLine); <=====================
    
    WITH FromReturnShptLine DO
      IF FINDSET THEN
        REPEAT
          FromLineCounter := FromLineCounter + 1;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesCrMemoLinesToBuffer>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesCrMemoLinesToDoc>
    Code lines:
    ...
          FromSalesLine."Shipment Line No." := 0;
          FromSalesLine."Return Receipt No." := '';
          FromSalesLine."Return Receipt Line No." := "Line No.";
          FromSalesLine."Copied From Posted Doc." := TRUE;
    
          OnBeforeCopySalesCrMemoLinesToBuffer(FromSalesLine,FromSalesCrMemoLine,ToSalesHeader); <=====================
    
          SplitLine := TRUE;
          GetItemLedgEntries(ItemLedgEntryBuf,TRUE);
          IF NOT SplitPstdSalesLinesPerILE(
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesCrMemoLinesToDoc>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesCrMemoLinesToDoc>
    Code lines:
    ...
    FromSalesLineBuf.DELETEALL;
    TempItemTrkgEntry.RESET;
    TempItemTrkgEntry.DELETEALL;
    OpenWindow;
    
    OnBeforeCopySalesCrMemoLinesToDoc(TempDocSalesLine,ToSalesHeader,FromSalesCrMemoLine); <=====================
    
    // Fill sales line buffer
    WITH FromSalesCrMemoLine DO
      IF FINDSET THEN
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesDocForCrMemoCancelling>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDocForCrMemoCancelling>
    Code lines:
    InsertCancellationLine := TRUE;
    OnBeforeCopySalesDocForCrMemoCancelling(ToSalesHeader,FromDocNo); <=====================
    
    CopySalesDoc(SalesDocType::"Posted Credit Memo",FromDocNo,ToSalesHeader);
    InsertCancellationLine := FALSE;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesDocForInvoiceCancelling>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDocForInvoiceCancelling>
    Code lines:
    CopyJobData := TRUE;
    OnBeforeCopySalesDocForInvoiceCancelling(ToSalesHeader,FromDocNo); <=====================
    
    CopySalesDoc(SalesDocType::"Posted Invoice",FromDocNo,ToSalesHeader);
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesDocument>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDoc>
    Code lines:
    ...
        IF FromDocNo = '' THEN
          ERROR(Text000);
        FIND;
      END;
    
      OnBeforeCopySalesDocument(FromDocType,FromDocNo,ToSalesHeader); <=====================
    
      TransferOldExtLines.ClearLineNumbers;
    
      IF NOT InitAndCheckSalesDocuments(
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesInvLines>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesInvLinesToDoc>
    Code lines:
    ...
    TempItemTrkgEntry.DELETEALL;
    OpenWindow;
    InitAsmCopyHandling(TRUE);
    TempSalesInvLine.DELETEALL;
    
    OnBeforeCopySalesInvLines(TempDocSalesLine,ToSalesHeader,FromSalesInvLine); <=====================
    
    // Fill sales line buffer
    SalesInvLineCount := 0;
    FirstLineText := FALSE;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesInvLinesToBuffer>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesInvLinesToDoc>
    Code lines:
    ...
          FromSalesLine."Shipment Line No." := 0;
          FromSalesLine."Return Receipt No." := '';
          FromSalesLine."Return Receipt Line No." := "Line No.";
          FromSalesLine."Copied From Posted Doc." := TRUE;
    
          OnBeforeCopySalesInvLinesToBuffer(FromSalesLine,FromSalesInvLine,ToSalesHeader); <=====================
    
          SplitLine := TRUE;
          GetItemLedgEntries(ItemLedgEntryBuf,TRUE);
          IF NOT SplitPstdSalesLinesPerILE(
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesJobFields>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesJobFields>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCopySalesJobFields(ToSalesLine,FromSalesLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    ToSalesLine."Job No." := FromSalesLine."Job No.";
    ToSalesLine."Job Task No." := FromSalesLine."Job Task No.";
    IF ToSalesHeader."Document Type" = ToSalesHeader."Document Type"::Invoice THEN
      ToSalesLine."Job Contract Entry No." :=
        CreateJobPlanningLine(ToSalesHeader,ToSalesLine,FromSalesLine."Job Contract Entry No.")
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesLine>
    Code lines:
    CopyThisLine := TRUE;
    OnBeforeCopySalesLine(ToSalesHeader,FromSalesHeader,FromSalesLine,RecalculateLines,CopyThisLine,MoveNegLines); <=====================
    IF NOT CopyThisLine THEN BEGIN
      LinesNotCopied := LinesNotCopied + 1;
      EXIT(FALSE);
    END;
    
    CheckSalesRounding(FromSalesLine,RoundingLineInserted);
    
    IF ((ToSalesHeader."Language Code" <> FromSalesHeader."Language Code") OR RecalculateLines) AND
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesLineExtText>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesLineExtText>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCopySalesLineExtText(ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLine,DocLineNo,NextLineNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF (ToSalesHeader."Language Code" <> FromSalesHeader."Language Code") OR RecalculateLines OR CopyExtText THEN
      IF TransferExtendedText.SalesCheckIfAnyExtText(ToSalesLine,FALSE) THEN BEGIN
        TransferExtendedText.InsertSalesExtText(ToSalesLine);
        ToSalesLine2.SETRANGE("Document Type",ToSalesLine."Document Type");
        ToSalesLine2.SETRANGE("Document No.",ToSalesLine."Document No.");
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesLinesToDoc>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesLinesToDoc>
    Code lines:
    OnBeforeCopySalesLinesToDoc( <=====================
      FromDocType,ToSalesHeader,FromSalesShipmentLine,FromSalesInvoiceLine,FromReturnReceiptLine,FromSalesCrMemoLine,
      LinesNotCopied,MissingExCostRevLink);
    CopyExtText := TRUE;
    CASE FromDocType OF
      SalesDocType::"Posted Shipment":
        CopySalesShptLinesToDoc(ToSalesHeader,FromSalesShipmentLine,LinesNotCopied,MissingExCostRevLink);
      SalesDocType::"Posted Invoice":
        CopySalesInvLinesToDoc(ToSalesHeader,FromSalesInvoiceLine,LinesNotCopied,MissingExCostRevLink);
      SalesDocType::"Posted Return Receipt":
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesReturnRcptLinesToBuffer>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesReturnRcptLinesToDoc>
    Code lines:
    ...
          IF "Document No." <> OldDocNo THEN BEGIN
            OldDocNo := "Document No.";
            InsertDocNoLine := TRUE;
          END;
    
          OnBeforeCopySalesReturnRcptLinesToBuffer(FromSalesLine,FromReturnRcptLine,ToSalesHeader); <=====================
    
          SplitLine := TRUE;
          FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
          IF NOT SplitPstdSalesLinesPerILE(
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesReturnRcptLinesToDoc>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesReturnRcptLinesToDoc>
    Code lines:
    MissingExCostRevLink := FALSE;
    InitCurrency(ToSalesHeader."Currency Code");
    OpenWindow;
    
    OnBeforeCopySalesReturnRcptLinesToDoc(TempDocSalesLine,ToSalesHeader,FromReturnRcptLine); <=====================
    
    WITH FromReturnRcptLine DO
      IF FINDSET THEN
        REPEAT
          FromLineCounter := FromLineCounter + 1;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesShptLinesToBuffer>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesShptLinesToDoc>
    Code lines:
    ...
          IF "Document No." <> OldDocNo THEN BEGIN
            OldDocNo := "Document No.";
            InsertDocNoLine := TRUE;
          END;
    
          OnBeforeCopySalesShptLinesToBuffer(FromSalesLine,FromSalesShptLine,ToSalesHeader); <=====================
    
          SplitLine := TRUE;
          FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
          IF NOT SplitPstdSalesLinesPerILE(
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesShptLinesToDoc>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesShptLinesToDoc>
    Code lines:
    MissingExCostRevLink := FALSE;
    InitCurrency(ToSalesHeader."Currency Code");
    OpenWindow;
    
    OnBeforeCopySalesShptLinesToDoc(TempDocSalesLine,ToSalesHeader,FromSalesShptLine); <=====================
    
    WITH FromSalesShptLine DO
      IF FINDSET THEN
        REPEAT
          FromLineCounter := FromLineCounter + 1;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeCopySalesToPurchDoc>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyFromSalesToPurchDoc>
    Code lines:
    ...
        "Line No." := NextLineNo;
        IF FromSalesLine.Type = FromSalesLine.Type::" " THEN
          Description := FromSalesLine.Description
        ELSE
          TransfldsFromSalesToPurchLine(FromSalesLine,ToPurchLine);
        OnBeforeCopySalesToPurchDoc(ToPurchLine,FromSalesLine); <=====================
        INSERT(TRUE);
        IF (FromSalesLine.Type <> FromSalesLine.Type::" ") AND (Type = Type::Item) AND (Quantity <> 0) THEN
          CopyItemTrackingEntries(
            FromSalesLine,ToPurchLine,FromSalesHeader."Prices Including VAT",
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeDeleteNegSalesLines>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDoc>
    Code lines:
    ...
      ToSalesHeader,FromDocType,FromDocNo,FromDocOccurrenceNo,FromDocVersionNo,RecalculateLines);
    
    UpdateSalesInvoiceDiscountValue(ToSalesHeader);
    
    IF MoveNegLines THEN BEGIN
      OnBeforeDeleteNegSalesLines(FromDocType,FromDocNo,ToSalesHeader); <=====================
      DeleteSalesLinesWithNegQty(FromSalesHeader,FALSE);
      LinkJobPlanningLine(ToSalesHeader);
    END;
    
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInitPurchLineFields>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<InitPurchLineFields>
    Code lines:
    OnBeforeInitPurchLineFields(ToPurchLine); <=====================
    
    IF ToPurchLine."Document Type" <> ToPurchLine."Document Type"::Order THEN BEGIN
      ToPurchLine."Prepayment %" := 0;
      ToPurchLine."Prepayment VAT %" := 0;
      ToPurchLine."Prepmt. VAT Calc. Type" := 0;
      ToPurchLine."Prepayment VAT Identifier" := '';
      ToPurchLine."Prepayment VAT %" := 0;
      ToPurchLine."Prepayment Tax Group Code" := '';
      ToPurchLine."Prepmt. Line Amount" := 0;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInitSalesLineFields>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<InitSalesLineFields>
    Code lines:
    OnBeforeInitSalesLineFields(ToSalesLine); <=====================
    
    IF ToSalesLine."Document Type" <> ToSalesLine."Document Type"::Order THEN BEGIN
      ToSalesLine."Prepayment %" := 0;
      ToSalesLine."Prepayment VAT %" := 0;
      ToSalesLine."Prepmt. VAT Calc. Type" := 0;
      ToSalesLine."Prepayment VAT Identifier" := '';
      ToSalesLine."Prepayment VAT %" := 0;
      ToSalesLine."Prepayment Tax Group Code" := '';
      ToSalesLine."Prepmt. Line Amount" := 0;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertOldPurchCombDocNoLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<InsertOldPurchCombDocNoLine>
    Code lines:
    ...
          Text018,
          COPYSTR(SELECTSTR(3,Text017) + OldDocNo,1,23),
          COPYSTR(SELECTSTR(4,Text017) + OldDocNo2,1,23));
    LanguageManagement.RestoreGlobalLanguage;
    
    OnBeforeInsertOldPurchCombDocNoLine(ToPurchHeader,ToPurchLine2,CopyFromInvoice,OldDocNo,OldDocNo2); <=====================
    ToPurchLine2.INSERT;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertOldPurchDocNoLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<InsertOldPurchDocNoLine>
    Code lines:
    ...
      ToPurchLine2.Description := STRSUBSTNO(CrMemoCancellationMsg,OldDocNo)
    ELSE
      ToPurchLine2.Description := STRSUBSTNO(Text015,SELECTSTR(OldDocType,Text014),OldDocNo);
    LanguageManagement.RestoreGlobalLanguage;
    
    OnBeforeInsertOldPurchDocNoLine(ToPurchHeader,ToPurchLine2,OldDocType,OldDocNo); <=====================
    ToPurchLine2.INSERT;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertOldSalesCombDocNoLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<InsertOldSalesCombDocNoLine>
    Code lines:
    ...
          Text018,
          COPYSTR(SELECTSTR(3,Text016) + OldDocNo,1,23),
          COPYSTR(SELECTSTR(4,Text016) + OldDocNo2,1,23));
    LanguageManagement.RestoreGlobalLanguage;
    
    OnBeforeInsertOldSalesCombDocNoLine(ToSalesHeader,ToSalesLine2,CopyFromInvoice,OldDocNo,OldDocNo2); <=====================
    ToSalesLine2.INSERT;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertOldSalesDocNoLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<InsertOldSalesDocNoLine>
    Code lines:
    ...
      ToSalesLine2.Description := STRSUBSTNO(CrMemoCancellationMsg,OldDocNo)
    ELSE
      ToSalesLine2.Description := STRSUBSTNO(Text015,SELECTSTR(OldDocType,Text013),OldDocNo);
    LanguageManagement.RestoreGlobalLanguage;
    
    OnBeforeInsertOldSalesDocNoLine(ToSalesHeader,ToSalesLine2,OldDocType,OldDocNo); <=====================
    ToSalesLine2.INSERT;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertToPurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchLine>
    Code lines:
    ...
      ToPurchLine."Shortcut Dimension 2 Code" := FromPurchLine."Shortcut Dimension 2 Code";
      OnCopyPurchLineOnAfterSetDimensions(ToPurchLine,FromPurchLine);
    END;
    
    IF CopyThisLine THEN BEGIN
      OnBeforeInsertToPurchLine(ToPurchLine,FromPurchLine,FromPurchDocType,RecalculateLines,ToPurchHeader); <=====================
      ToPurchLine.INSERT;
      OnAfterInsertToPurchLine(ToPurchLine,FromPurchLine,RecalculateLines);
    END ELSE
      LinesNotCopied := LinesNotCopied + 1;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeInsertToSalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesLine>
    Code lines:
    ...
      ToSalesLine."Shortcut Dimension 2 Code" := FromSalesLine."Shortcut Dimension 2 Code";
      OnCopySalesLineOnAfterSetDimensions(ToSalesLine,FromSalesLine);
    END;
    
    IF CopyThisLine THEN BEGIN
      OnBeforeInsertToSalesLine( <=====================
        ToSalesLine,FromSalesLine,FromSalesDocType,RecalculateLines,ToSalesHeader,DocLineNo,NextLineNo);
      ToSalesLine.INSERT;
      HandleAsmAttachedToSalesLine(ToSalesLine);
      IF ToSalesLine.Reserve = ToSalesLine.Reserve::Always THEN
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeModifyPurchHeader>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchDocUpdateHeader>
    Code lines:
    ...
    
      Correction := FALSE;
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        UpdatePurchCreditMemoHeader(ToPurchHeader);
    
      OnBeforeModifyPurchHeader(ToPurchHeader,FromDocType,FromDocNo,IncludeHeader,FromDocOccurrenceNo,FromDocVersionNo); <=====================
    
      IF CreateToHeader THEN BEGIN
        VALIDATE("Payment Terms Code");
        MODIFY(TRUE);
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeModifySalesHeader>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDocUpdateHeader>
    Code lines:
    ...
    
      Correction := FALSE;
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        UpdateSalesCreditMemoHeader(ToSalesHeader);
    
      OnBeforeModifySalesHeader(ToSalesHeader,FromDocType,FromDocNo,IncludeHeader,FromDocOccurrenceNo,FromDocVersionNo); <=====================
    
      IF CreateToHeader THEN BEGIN
        VALIDATE("Payment Terms Code");
        MODIFY(TRUE);
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeRecalculateSalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<RecalculateSalesLine>
    Code lines:
    OnBeforeRecalculateSalesLine(ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLine,CopyThisLine); <=====================
    
    ToSalesLine.VALIDATE(Type,FromSalesLine.Type);
    ToSalesLine.Description := FromSalesLine.Description;
    ToSalesLine.VALIDATE("Description 2",FromSalesLine."Description 2");
    OnUpdateSalesLine(ToSalesLine,FromSalesLine);
    
    IF (FromSalesLine.Type <> 0) AND (FromSalesLine."No." <> '') THEN BEGIN
      IF ToSalesLine.Type = ToSalesLine.Type::"G/L Account" THEN BEGIN
        ToSalesLine."No." := FromSalesLine."No.";
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeTransfldsFromSalesToPurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<TransfldsFromSalesToPurchLine>
    Code lines:
    OnBeforeTransfldsFromSalesToPurchLine(FromSalesLine,ToPurchLine); <=====================
    
    WITH ToPurchLine DO BEGIN
      VALIDATE(Type,FromSalesLine.Type);
      VALIDATE("No.",FromSalesLine."No.");
      VALIDATE("Variant Code",FromSalesLine."Variant Code");
      VALIDATE("Location Code",FromSalesLine."Location Code");
      VALIDATE("Unit of Measure Code",FromSalesLine."Unit of Measure Code");
      IF (Type = Type::Item) AND ("No." <> '') THEN
        UpdateUOMQtyPerStockQty;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeUpdateCustLedgEntry>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<UpdateCustLedgEntry>
    Code lines:
    OnBeforeUpdateCustLedgEntry(ToSalesHeader,CustLedgEntry); <=====================
    
    CustLedgEntry.SETCURRENTKEY("Document No.");
    IF FromDocType = SalesDocType::"Posted Invoice" THEN
      CustLedgEntry.SETRANGE("Document Type",CustLedgEntry."Document Type"::Invoice)
    ELSE
      CustLedgEntry.SETRANGE("Document Type",CustLedgEntry."Document Type"::"Credit Memo");
    CustLedgEntry.SETRANGE("Document No.",FromDocNo);
    CustLedgEntry.SETRANGE("Customer No.",ToSalesHeader."Bill-to Customer No.");
    CustLedgEntry.SETRANGE(Open,TRUE);
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeUpdatePurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<UpdatePurchLine>
    Code lines:
    OnBeforeUpdatePurchLine( <=====================
      ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLine,
      CopyThisLine,RecalculateAmount,FromPurchDocType,CopyPostedDeferral);
    
    CopyPostedDeferral := FALSE;
    DeferralDocType := DeferralUtilities.GetPurchDeferralDocType;
    IF RecalculateLines AND NOT FromPurchLine."System-Created Entry" THEN BEGIN
      RecalculatePurchLine(ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLine,CopyThisLine);
      IF IsDeferralToBeCopied(DeferralDocType,ToPurchLine."Document Type",FromPurchDocType) THEN
        ToPurchLine.VALIDATE("Deferral Code",FromPurchLine."Deferral Code");
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeUpdateSalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<UpdateSalesLine>
    Code lines:
    OnBeforeUpdateSalesLine( <=====================
      ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLine,
      CopyThisLine,RecalculateAmount,FromSalesDocType,CopyPostedDeferral);
    
    CopyPostedDeferral := FALSE;
    DeferralDocType := DeferralUtilities.GetSalesDeferralDocType;
    IF RecalculateLines AND NOT FromSalesLine."System-Created Entry" THEN BEGIN
      RecalculateSalesLine(ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLine,CopyThisLine);
      IF IsDeferralToBeCopied(DeferralDocType,ToSalesLine."Document Type",FromSalesDocType) THEN
        ToSalesLine.VALIDATE("Deferral Code",FromSalesLine."Deferral Code");
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnBeforeUpdateVendLedgEntry>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<UpdateVendLedgEntry>
    Code lines:
    OnBeforeUpdateVendLedgEntry(ToPurchHeader,VendLedgEntry); <=====================
    
    VendLedgEntry.SETCURRENTKEY("Document No.");
    IF FromDocType = PurchDocType::"Posted Invoice" THEN
      VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Invoice)
    ELSE
      VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::"Credit Memo");
    VendLedgEntry.SETRANGE("Document No.",FromDocNo);
    VendLedgEntry.SETRANGE("Vendor No.",ToPurchHeader."Pay-to Vendor No.");
    VendLedgEntry.SETRANGE(Open,TRUE);
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCheckCopyFromSalesCrMemoAvailOnAfterCheckItemAvailability>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CheckCopyFromSalesCrMemoAvail>
    Code lines:
    ...
            "Unit of Measure Code" := FromSalesCrMemoLine."Unit of Measure Code";
            "Qty. per Unit of Measure" := FromSalesCrMemoLine."Qty. per Unit of Measure";
            "Outstanding Quantity" := FromSalesCrMemoLine.Quantity;
            "Drop Shipment" := FALSE;
            CheckItemAvailability(ToSalesHeader,ToSalesLine);
            OnCheckCopyFromSalesCrMemoAvailOnAfterCheckItemAvailability( <=====================
              ToSalesHeader,ToSalesLine,FromSalesCrMemoHeader,IncludeHeader);
          END;
        UNTIL FromSalesCrMemoLine.NEXT = 0;
    END;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCheckCopyFromSalesHeaderAvailOnAfterCheckItemAvailability>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CheckCopyFromSalesHeaderAvail>
    Code lines:
    ...
              IF "Document Type" = "Document Type"::Order THEN
                ToSalesLine."Outstanding Quantity" := FromSalesLine.Quantity - FromSalesLine."Qty. to Assemble to Order";
              ToSalesLine."Qty. to Assemble to Order" := 0;
              ToSalesLine."Drop Shipment" := FromSalesLine."Drop Shipment";
              CheckItemAvailability(ToSalesHeader,ToSalesLine);
              OnCheckCopyFromSalesHeaderAvailOnAfterCheckItemAvailability( <=====================
                ToSalesHeader,ToSalesLine,FromSalesHeader,IncludeHeader);
    
              IF "Document Type" = "Document Type"::Order THEN BEGIN
                ToSalesLine."Outstanding Quantity" := FromSalesLine.Quantity;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCheckCopyFromSalesInvoiceAvailOnAfterCheckItemAvailability>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CheckCopyFromSalesInvoiceAvail>
    Code lines:
    ...
            "Unit of Measure Code" := FromSalesInvLine."Unit of Measure Code";
            "Qty. per Unit of Measure" := FromSalesInvLine."Qty. per Unit of Measure";
            "Outstanding Quantity" := FromSalesInvLine.Quantity;
            "Drop Shipment" := FromSalesInvLine."Drop Shipment";
            CheckItemAvailability(ToSalesHeader,ToSalesLine);
            OnCheckCopyFromSalesInvoiceAvailOnAfterCheckItemAvailability( <=====================
              ToSalesHeader,ToSalesLine,FromSalesInvHeader,IncludeHeader);
          END;
        UNTIL FromSalesInvLine.NEXT = 0;
    END;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCheckCopyFromSalesRetRcptAvailOnAfterCheckItemAvailability>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CheckCopyFromSalesRetRcptAvail>
    Code lines:
    ...
            "Unit of Measure Code" := FromReturnRcptLine."Unit of Measure Code";
            "Qty. per Unit of Measure" := FromReturnRcptLine."Qty. per Unit of Measure";
            "Outstanding Quantity" := FromReturnRcptLine.Quantity;
            "Drop Shipment" := FALSE;
            CheckItemAvailability(ToSalesHeader,ToSalesLine);
            OnCheckCopyFromSalesRetRcptAvailOnAfterCheckItemAvailability( <=====================
              ToSalesHeader,ToSalesLine,FromReturnRcptHeader,IncludeHeader);
          END;
        UNTIL FromReturnRcptLine.NEXT = 0;
    END;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCheckCopyFromSalesShptAvailOnAfterCheckItemAvailability>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CheckCopyFromSalesShptAvail>
    Code lines:
    ...
              IF FromSalesShptLine.AsmToShipmentExists(FromPostedAsmHeader) THEN
                "Outstanding Quantity" := FromSalesShptLine.Quantity - FromPostedAsmHeader.Quantity;
            "Qty. to Assemble to Order" := 0;
            "Drop Shipment" := FromSalesShptLine."Drop Shipment";
            CheckItemAvailability(ToSalesHeader,ToSalesLine);
            OnCheckCopyFromSalesShptAvailOnAfterCheckItemAvailability( <=====================
              ToSalesHeader,ToSalesLine,FromSalesShptHeader,IncludeHeader);
    
            IF "Document Type" = "Document Type"::Order THEN
              IF FromSalesShptLine.AsmToShipmentExists(FromPostedAsmHeader) THEN BEGIN
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyArchPurchLineOnAfterToPurchLineInsert>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyArchPurchLine>
    Code lines:
    ...
      END;
    
    IF CopyThisLine THEN BEGIN
      OnCopyArchPurchLineOnBeforeToPurchLineInsert(ToPurchLine,FromPurchLineArchive,RecalculateLines);
      ToPurchLine.INSERT;
      OnCopyArchPurchLineOnAfterToPurchLineInsert(ToPurchLine,FromPurchLineArchive,RecalculateLines); <=====================
    END ELSE
      LinesNotCopied := LinesNotCopied + 1;
    
    EXIT(CopyThisLine);
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyArchPurchLineOnBeforeToPurchLineInsert>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyArchPurchLine>
    Code lines:
    ...
        ToPurchLine2.FINDLAST;
        NextLineNo := ToPurchLine2."Line No.";
      END;
    
    IF CopyThisLine THEN BEGIN
      OnCopyArchPurchLineOnBeforeToPurchLineInsert(ToPurchLine,FromPurchLineArchive,RecalculateLines); <=====================
      ToPurchLine.INSERT;
      OnCopyArchPurchLineOnAfterToPurchLineInsert(ToPurchLine,FromPurchLineArchive,RecalculateLines);
    END ELSE
      LinesNotCopied := LinesNotCopied + 1;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyArchSalesLineOnAfterToSalesLineInsert>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyArchSalesLine>
    Code lines:
    ...
      END;
    
    IF CopyThisLine THEN BEGIN
      OnCopyArchSalesLineOnBeforeToSalesLineInsert(ToSalesLine,FromSalesLineArchive,RecalculateLines);
      ToSalesLine.INSERT;
      OnCopyArchSalesLineOnAfterToSalesLineInsert(ToSalesLine,FromSalesLineArchive,RecalculateLines); <=====================
    END ELSE
      LinesNotCopied := LinesNotCopied + 1;
    
    EXIT(CopyThisLine);
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyArchSalesLineOnBeforeToSalesLineInsert>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyArchSalesLine>
    Code lines:
    ...
        ToSalesLine2.FINDLAST;
        NextLineNo := ToSalesLine2."Line No.";
      END;
    
    IF CopyThisLine THEN BEGIN
      OnCopyArchSalesLineOnBeforeToSalesLineInsert(ToSalesLine,FromSalesLineArchive,RecalculateLines); <=====================
      ToSalesLine.INSERT;
      OnCopyArchSalesLineOnAfterToSalesLineInsert(ToSalesLine,FromSalesLineArchive,RecalculateLines);
    END ELSE
      LinesNotCopied := LinesNotCopied + 1;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyFromPurchDocAssgntToLineOnAfterSetFilters>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyFromPurchDocAssgntToLine>
    Code lines:
    FromItemChargeAssgntPurch.RESET;
    FromItemChargeAssgntPurch.SETRANGE("Document Type",FromDocType);
    FromItemChargeAssgntPurch.SETRANGE("Document No.",FromDocNo);
    FromItemChargeAssgntPurch.SETRANGE("Document Line No.",FromLineNo);
    FromItemChargeAssgntPurch.SETFILTER("Applies-to Doc. Type",'<>%1',FromDocType);
    OnCopyFromPurchDocAssgntToLineOnAfterSetFilters(FromItemChargeAssgntPurch,RecalculateLines); <=====================
    IF FromItemChargeAssgntPurch.FIND('-') THEN
      REPEAT
        ToItemChargeAssgntPurch.COPY(FromItemChargeAssgntPurch);
        ToItemChargeAssgntPurch."Document Type" := ToPurchLine."Document Type";
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyFromPurchDocAssgntToLineOnBeforeInsert>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyFromPurchDocAssgntToLine>
    Code lines:
    ...
        ToItemChargeAssgntPurch.COPY(FromItemChargeAssgntPurch);
        ToItemChargeAssgntPurch."Document Type" := ToPurchLine."Document Type";
        ToItemChargeAssgntPurch."Document No." := ToPurchLine."Document No.";
        ToItemChargeAssgntPurch."Document Line No." := ToPurchLine."Line No.";
        IsHandled := FALSE;
        OnCopyFromPurchDocAssgntToLineOnBeforeInsert(FromItemChargeAssgntPurch,RecalculateLines,IsHandled); <=====================
        IF NOT IsHandled THEN
          ItemChargeAssgntPurch.InsertItemChargeAssgnt(
            ToItemChargeAssgntPurch,ToItemChargeAssgntPurch."Applies-to Doc. Type",
            ToItemChargeAssgntPurch."Applies-to Doc. No.",ToItemChargeAssgntPurch."Applies-to Doc. Line No.",
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyFromSalesDocAssgntToLineOnAfterSetFilters>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyFromSalesDocAssgntToLine>
    Code lines:
    FromItemChargeAssgntSales.RESET;
    FromItemChargeAssgntSales.SETRANGE("Document Type",FromDocType);
    FromItemChargeAssgntSales.SETRANGE("Document No.",FromDocNo);
    FromItemChargeAssgntSales.SETRANGE("Document Line No.",FromLineNo);
    FromItemChargeAssgntSales.SETFILTER("Applies-to Doc. Type",'<>%1',FromDocType);
    OnCopyFromSalesDocAssgntToLineOnAfterSetFilters(FromItemChargeAssgntSales,RecalculateLines); <=====================
    IF FromItemChargeAssgntSales.FIND('-') THEN
      REPEAT
        ToItemChargeAssgntSales.COPY(FromItemChargeAssgntSales);
        ToItemChargeAssgntSales."Document Type" := ToSalesLine."Document Type";
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyFromSalesDocAssgntToLineOnBeforeInsert>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyFromSalesDocAssgntToLine>
    Code lines:
    ...
        ToItemChargeAssgntSales.COPY(FromItemChargeAssgntSales);
        ToItemChargeAssgntSales."Document Type" := ToSalesLine."Document Type";
        ToItemChargeAssgntSales."Document No." := ToSalesLine."Document No.";
        ToItemChargeAssgntSales."Document Line No." := ToSalesLine."Line No.";
        IsHandled := FALSE;
        OnCopyFromSalesDocAssgntToLineOnBeforeInsert(FromItemChargeAssgntSales,RecalculateLines,IsHandled); <=====================
        IF NOT IsHandled THEN
          ItemChargeAssgntSales.InsertItemChargeAssgnt(
            ToItemChargeAssgntSales,ToItemChargeAssgntSales."Applies-to Doc. Type",
            ToItemChargeAssgntSales."Applies-to Doc. No.",ToItemChargeAssgntSales."Applies-to Doc. Line No.",
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyFromSalesToPurchDocOnAfterSetFilters>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyFromSalesToPurchDoc>
    Code lines:
    ...
      ToPurchHeader.INSERT(TRUE);
      ToPurchHeader.VALIDATE("Buy-from Vendor No.",VendorNo);
      ToPurchHeader.MODIFY(TRUE);
      FromSalesLine.SETRANGE("Document Type",FromSalesHeader."Document Type");
      FromSalesLine.SETRANGE("Document No.",FromSalesHeader."No.");
      OnCopyFromSalesToPurchDocOnAfterSetFilters(FromSalesLine,FromSalesHeader); <=====================
      IF NOT FromSalesLine.FIND('-') THEN
        ERROR(Text012);
      REPEAT
        NextLineNo := NextLineNo + 10000;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyFromSalesToPurchDocOnBeforePurchaseHeaderInsert>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyFromSalesToPurchDoc>
    Code lines:
    IF VendorNo = '' THEN
      ERROR(Text011);
    
    WITH ToPurchLine DO BEGIN
      LOCKTABLE;
      OnCopyFromSalesToPurchDocOnBeforePurchaseHeaderInsert(ToPurchHeader,FromSalesHeader); <=====================
      ToPurchHeader.INSERT(TRUE);
      ToPurchHeader.VALIDATE("Buy-from Vendor No.",VendorNo);
      ToPurchHeader.MODIFY(TRUE);
      FromSalesLine.SETRANGE("Document Type",FromSalesHeader."Document Type");
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchCrMemoLinesToDocOnAfterTransferFields>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchCrMemoLinesToDoc>
    Code lines:
    ...
          FromPurchLine."Receipt Line No." := 0;
          FromPurchLine."Return Shipment No." := '';
          FromPurchLine."Return Shipment Line No." := "Line No.";
          FromPurchLine."Copied From Posted Doc." := TRUE;
    
          OnCopyPurchCrMemoLinesToDocOnAfterTransferFields(FromPurchLine,FromPurchHeader,ToPurchHeader,FromPurchCrMemoHeader); <=====================
    
          SplitLine := TRUE;
          GetItemLedgEntries(ItemLedgEntryBuf,TRUE);
          IF NOT SplitPstdPurchLinesPerILE(
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchCrMemoLinesToDocOnBeforeCopyPurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchCrMemoLinesToDoc>
    Code lines:
    ...
          IF GetPurchDocNo(TempDocPurchaseLine,"Line No.") <> OldBufDocNo THEN BEGIN
            OldBufDocNo := GetPurchDocNo(TempDocPurchaseLine,"Line No.");
            TransferOldExtLines.ClearLineNumbers;
          END;
    
          OnCopyPurchCrMemoLinesToDocOnBeforeCopyPurchLine(ToPurchHeader,FromPurchLine2); <=====================
    
          IF CopyPurchLine(ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLine2,NextLineNo,LinesNotCopied,
               "Return Shipment No." = '',DeferralTypeForPurchDoc(PurchDocType::"Posted Credit Memo"),CopyPostedDeferral,
               GetPurchLineNo(TempDocPurchaseLine,FromPurchLine2."Line No."))
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchDocOnAfterCopyPurchDocLines>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchDoc>
    Code lines:
    ...
    UpdatePurchaseInvoiceDiscountValue(ToPurchHeader);
    
    IF MoveNegLines THEN
      DeletePurchLinesWithNegQty(FromPurchHeader,FALSE);
    
    OnCopyPurchDocOnAfterCopyPurchDocLines(FromDocType,FromDocNo,FromPurchHeader,IncludeHeader,ToPurchHeader); <=====================
    
    IF ReleaseDocument THEN BEGIN
      ToPurchHeader.Status := ToPurchHeader.Status::Released;
      ReleasePurchaseDocument.Reopen(ToPurchHeader);
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchDocOnBeforeCopyPurchDocCrMemoLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchDoc>
    Code lines:
    ...
            CopyPurchDocReturnShptLine(FromReturnShptHeader,ToPurchHeader,LinesNotCopied,MissingExCostRevLink);
          END;
        PurchDocType::"Posted Credit Memo":
          BEGIN
            FromPurchHeader.TRANSFERFIELDS(FromPurchCrMemoHeader);
            OnCopyPurchDocOnBeforeCopyPurchDocCrMemoLine(FromPurchCrMemoHeader,ToPurchHeader); <=====================
            CopyPurchDocCrMemoLine(FromPurchCrMemoHeader,ToPurchHeader,LinesNotCopied,MissingExCostRevLink);
          END;
        PurchDocType::"Arch. Order",
        PurchDocType::"Arch. Quote",
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchDocOnBeforeCopyPurchDocInvLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchDoc>
    Code lines:
    ...
            CopyPurchDocRcptLine(FromPurchRcptHeader,ToPurchHeader,LinesNotCopied,MissingExCostRevLink);
          END;
        PurchDocType::"Posted Invoice":
          BEGIN
            FromPurchHeader.TRANSFERFIELDS(FromPurchInvHeader);
            OnCopyPurchDocOnBeforeCopyPurchDocInvLine(FromPurchInvHeader,ToPurchHeader); <=====================
            CopyPurchDocInvLine(FromPurchInvHeader,ToPurchHeader,LinesNotCopied,MissingExCostRevLink);
          END;
        PurchDocType::"Posted Return Shipment":
          BEGIN
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchDocOnBeforeCopyPurchDocRcptLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchDoc>
    Code lines:
    ...
        PurchDocType::"Credit Memo":
          CopyPurchDocPurchLine(FromPurchHeader,ToPurchHeader,LinesNotCopied,NextLineNo);
        PurchDocType::"Posted Receipt":
          BEGIN
            FromPurchHeader.TRANSFERFIELDS(FromPurchRcptHeader);
            OnCopyPurchDocOnBeforeCopyPurchDocRcptLine(FromPurchRcptHeader,ToPurchHeader); <=====================
            CopyPurchDocRcptLine(FromPurchRcptHeader,ToPurchHeader,LinesNotCopied,MissingExCostRevLink);
          END;
        PurchDocType::"Posted Invoice":
          BEGIN
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchDocOnBeforeCopyPurchDocReturnShptLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchDoc>
    Code lines:
    ...
            CopyPurchDocInvLine(FromPurchInvHeader,ToPurchHeader,LinesNotCopied,MissingExCostRevLink);
          END;
        PurchDocType::"Posted Return Shipment":
          BEGIN
            FromPurchHeader.TRANSFERFIELDS(FromReturnShptHeader);
            OnCopyPurchDocOnBeforeCopyPurchDocReturnShptLine(FromReturnShptHeader,ToPurchHeader); <=====================
            CopyPurchDocReturnShptLine(FromReturnShptHeader,ToPurchHeader,LinesNotCopied,MissingExCostRevLink);
          END;
        PurchDocType::"Posted Credit Memo":
          BEGIN
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchDocOnBeforeUpdatePurchInvoiceDiscountValue>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchDoc>
    Code lines:
    ...
        PurchDocType::"Arch. Return Order":
          CopyPurchDocPurchLineArchive(FromPurchHeaderArchive,ToPurchHeader,LinesNotCopied,NextLineNo);
      END;
    END;
    
    OnCopyPurchDocOnBeforeUpdatePurchInvoiceDiscountValue( <=====================
      ToPurchHeader,FromDocType,FromDocNo,FromDocOccurrenceNo,FromDocVersionNo,RecalculateLines);
    
    UpdatePurchaseInvoiceDiscountValue(ToPurchHeader);
    
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchDocWithHeader>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchDocUpdateHeader>
    Code lines:
    ...
        VALIDATE("Payment Terms Code");
        MODIFY(TRUE);
      END ELSE
        MODIFY;
    
      OnCopyPurchDocWithHeader(FromDocType,FromDocNo,ToPurchHeader,FromDocOccurrenceNo,FromDocVersionNo); <=====================
    END;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchDocWithoutHeader>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchDoc>
    Code lines:
    ...
      IF IncludeHeader THEN
        CopyPurchDocUpdateHeader(
          FromDocType,FromDocNo,ToPurchHeader,FromPurchHeader,
          FromPurchRcptHeader,FromPurchInvHeader,FromReturnShptHeader,FromPurchCrMemoHeader,FromPurchHeaderArchive,ReleaseDocument)
      ELSE
        OnCopyPurchDocWithoutHeader(ToPurchHeader,FromDocType,FromDocNo,FromDocOccurrenceNo,FromDocVersionNo); <=====================
    
      LinesNotCopied := 0;
      CASE FromDocType OF
        PurchDocType::Quote,
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchInvLinesToDocOnAfterTransferFields>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchInvLinesToDoc>
    Code lines:
    ...
          FromPurchLine."Receipt Line No." := 0;
          FromPurchLine."Return Shipment No." := '';
          FromPurchLine."Return Shipment Line No." := "Line No.";
          FromPurchLine."Copied From Posted Doc." := TRUE;
    
          OnCopyPurchInvLinesToDocOnAfterTransferFields(FromPurchLine,FromPurchHeader,ToPurchHeader); <=====================
    
          SplitLine := TRUE;
          GetItemLedgEntries(ItemLedgEntryBuf,TRUE);
          IF NOT SplitPstdPurchLinesPerILE(
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchInvLinesToDocOnBeforeCopyPurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchInvLinesToDoc>
    Code lines:
    ...
          IF GetPurchDocNo(TempDocPurchaseLine,"Line No.") <> OldBufDocNo THEN BEGIN
            OldBufDocNo := GetPurchDocNo(TempDocPurchaseLine,"Line No.");
            TransferOldExtLines.ClearLineNumbers;
          END;
    
          OnCopyPurchInvLinesToDocOnBeforeCopyPurchLine(ToPurchHeader,FromPurchLine2); <=====================
    
          IF CopyPurchLine(ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLine2,NextLineNo,LinesNotCopied,
               "Return Shipment No." = '',DeferralTypeForPurchDoc(PurchDocType::"Posted Invoice"),CopyPostedDeferral,
               GetPurchLineNo(TempDocPurchaseLine,FromPurchLine2."Line No."))
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchLineOnAfterSetDimensions>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchLine>
    Code lines:
    ...
    
    IF NOT RecalculateLines THEN BEGIN
      ToPurchLine."Dimension Set ID" := FromPurchLine."Dimension Set ID";
      ToPurchLine."Shortcut Dimension 1 Code" := FromPurchLine."Shortcut Dimension 1 Code";
      ToPurchLine."Shortcut Dimension 2 Code" := FromPurchLine."Shortcut Dimension 2 Code";
      OnCopyPurchLineOnAfterSetDimensions(ToPurchLine,FromPurchLine); <=====================
    END;
    
    IF CopyThisLine THEN BEGIN
      OnBeforeInsertToPurchLine(ToPurchLine,FromPurchLine,FromPurchDocType,RecalculateLines,ToPurchHeader);
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchLineOnBeforeCheckVATBusGroup>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchLine>
    Code lines:
    ...
        ToPurchLine."Amount Including VAT" := -ToPurchLine."Amount Including VAT";
      END
    END;
    
    CheckVATBusGroup := (NOT RecalculateLines) AND (ToPurchLine."No." <> '');
    OnCopyPurchLineOnBeforeCheckVATBusGroup(ToPurchLine,CheckVATBusGroup); <=====================
    IF CheckVATBusGroup THEN
      ToPurchLine.TESTFIELD("VAT Bus. Posting Group",ToPurchHeader."VAT Bus. Posting Group");
    
    NextLineNo := NextLineNo + 10000;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchRcptLinesToDocOnAfterTransferFields>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchRcptLinesToDoc>
    Code lines:
    ...
            IsPurchFillExactCostRevLink(ToPurchHeader,0,FromPurchHeader."Currency Code");
          FromPurchLine.TRANSFERFIELDS(FromPurchRcptLine);
          FromPurchLine."Appl.-to Item Entry" := 0;
          FromPurchLine."Copied From Posted Doc." := TRUE;
    
          OnCopyPurchRcptLinesToDocOnAfterTransferFields(FromPurchLine,FromPurchHeader,ToPurchHeader,FromPurchRcptHeader); <=====================
    
          IF "Document No." <> OldDocNo THEN BEGIN
            OldDocNo := "Document No.";
            InsertDocNoLine := TRUE;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchRcptLinesToDocOnBeforeCopyPurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchRcptLinesToDoc>
    Code lines:
    ...
              IF IsTimeForUpdate THEN
                Window.UPDATE(2,ToLineCounter);
              IF FromPurchLine."Prod. Order No." <> '' THEN
                FromPurchLine."Quantity (Base)" := 0;
    
              OnCopyPurchRcptLinesToDocOnBeforeCopyPurchLine(ToPurchHeader,FromPurchLineBuf); <=====================
    
              IF CopyPurchLine(ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLineBuf,NextLineNo,LinesNotCopied,
                   FALSE,DeferralTypeForPurchDoc(PurchDocType::"Posted Receipt"),CopyPostedDeferral,FromPurchLineBuf."Line No.")
              THEN BEGIN
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchReturnShptLinesToDocOnAfterTransferFields>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchReturnShptLinesToDoc>
    Code lines:
    ...
          FromPurchLine.VALIDATE("Order No.","Return Order No.");
          FromPurchLine.VALIDATE("Order Line No.","Return Order Line No.");
          FromPurchLine."Appl.-to Item Entry" := 0;
          FromPurchLine."Copied From Posted Doc." := TRUE;
    
          OnCopyPurchReturnShptLinesToDocOnAfterTransferFields( <=====================
            FromPurchLine,FromPurchHeader,ToPurchHeader,FromReturnShptHeader);
    
          IF "Document No." <> OldDocNo THEN BEGIN
            OldDocNo := "Document No.";
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopyPurchReturnShptLinesToDocOnBeforeCopyPurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopyPurchReturnShptLinesToDoc>
    Code lines:
    ...
            REPEAT
              ToLineCounter := ToLineCounter + 1;
              IF IsTimeForUpdate THEN
                Window.UPDATE(2,ToLineCounter);
    
              OnCopyPurchReturnShptLinesToDocOnBeforeCopyPurchLine(ToPurchHeader,FromPurchLineBuf); <=====================
    
              IF CopyPurchLine(ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLineBuf,NextLineNo,LinesNotCopied,
                   FALSE,DeferralTypeForPurchDoc(PurchDocType::"Posted Return Shipment"),CopyPostedDeferral,
                   FromPurchLineBuf."Line No.")
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesCrMemoLinesToDocOnBeforeCopySalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesCrMemoLinesToDoc>
    Code lines:
    ...
          IF GetSalesDocNo(TempDocSalesLine,"Line No.") <> OldBufDocNo THEN BEGIN
            OldBufDocNo := GetSalesDocNo(TempDocSalesLine,"Line No.");
            TransferOldExtLines.ClearLineNumbers;
          END;
    
          OnCopySalesCrMemoLinesToDocOnBeforeCopySalesLine(ToSalesHeader,FromSalesLine2); <=====================
    
          IF CopySalesLine(
               ToSalesHeader,ToSalesLine,FromSalesHeader,
               FromSalesLine2,NextLineNo,LinesNotCopied,"Return Receipt No." = '',
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocCrMemoLineOnAfterSetFilters>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDocCrMemoLine>
    Code lines:
    WITH ToSalesHeader DO BEGIN
      FromSalesCrMemoLine.RESET;
      FromSalesCrMemoLine.SETRANGE("Document No.",FromSalesCrMemoHeader."No.");
      IF MoveNegLines THEN
        FromSalesCrMemoLine.SETFILTER(Quantity,'<=0');
      OnCopySalesDocCrMemoLineOnAfterSetFilters(ToSalesHeader,FromSalesCrMemoHeader,FromSalesCrMemoLine); <=====================
      CopySalesCrMemoLinesToDoc(ToSalesHeader,FromSalesCrMemoLine,LinesNotCopied,MissingExCostRevLink);
    END;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocInvLineOnAfterSetFilters>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDocInvLine>
    Code lines:
    WITH ToSalesHeader DO BEGIN
      FromSalesInvLine.RESET;
      FromSalesInvLine.SETRANGE("Document No.",FromSalesInvHeader."No.");
      IF MoveNegLines THEN
        FromSalesInvLine.SETFILTER(Quantity,'<=0');
      OnCopySalesDocInvLineOnAfterSetFilters(ToSalesHeader,FromSalesInvHeader,FromSalesInvLine); <=====================
      CopySalesInvLinesToDoc(ToSalesHeader,FromSalesInvLine,LinesNotCopied,MissingExCostRevLink);
    END;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocOnAfterCopySalesDocLines>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDoc>
    Code lines:
    ...
      OnBeforeDeleteNegSalesLines(FromDocType,FromDocNo,ToSalesHeader);
      DeleteSalesLinesWithNegQty(FromSalesHeader,FALSE);
      LinkJobPlanningLine(ToSalesHeader);
    END;
    
    OnCopySalesDocOnAfterCopySalesDocLines( <=====================
      FromDocType,FromDocNo,FromDocOccurrenceNo,FromDocVersionNo,FromSalesHeader,IncludeHeader,ToSalesHeader);
    
    IF ReleaseDocument THEN BEGIN
      ToSalesHeader.Status := ToSalesHeader.Status::Released;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocOnAfterTransferArchSalesHeaderFields>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDocUpdateHeader>
    Code lines:
    ...
        SalesDocType::"Arch. Blanket Order",
        SalesDocType::"Arch. Return Order":
          BEGIN
            VALIDATE("Sell-to Customer No.",FromSalesHeaderArchive."Sell-to Customer No.");
            TRANSFERFIELDS(FromSalesHeaderArchive,FALSE);
            OnCopySalesDocOnAfterTransferArchSalesHeaderFields(ToSalesHeader,FromSalesHeaderArchive); <=====================
            UpdateSalesHeaderWhenCopyFromSalesHeaderArchive(ToSalesHeader);
            CopyFromArchSalesDocDimToHdr(ToSalesHeader,FromSalesHeaderArchive);
            OnAfterCopySalesHeaderArchive(ToSalesHeader,OldSalesHeader,FromSalesHeaderArchive)
          END;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocOnAfterTransferPostedInvoiceFields>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDocUpdateHeader>
    Code lines:
    ...
          BEGIN
            FromSalesInvHeader.CALCFIELDS("Work Description");
            VALIDATE("Sell-to Customer No.",FromSalesInvHeader."Sell-to Customer No.");
            OnCopySalesDocOnBeforeTransferPostedInvoiceFields(ToSalesHeader,FromSalesInvHeader);
            TRANSFERFIELDS(FromSalesInvHeader,FALSE);
            OnCopySalesDocOnAfterTransferPostedInvoiceFields(ToSalesHeader,FromSalesInvHeader,OldSalesHeader); <=====================
          END;
        SalesDocType::"Posted Return Receipt":
          BEGIN
            VALIDATE("Sell-to Customer No.",FromReturnRcptHeader."Sell-to Customer No.");
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocOnBeforeCopySalesDocCrMemoLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDoc>
    Code lines:
    ...
            CopySalesDocReturnRcptLine(FromReturnRcptHeader,ToSalesHeader,LinesNotCopied,MissingExCostRevLink);
          END;
        SalesDocType::"Posted Credit Memo":
          BEGIN
            FromSalesHeader.TRANSFERFIELDS(FromSalesCrMemoHeader);
            OnCopySalesDocOnBeforeCopySalesDocCrMemoLine(FromSalesCrMemoHeader,ToSalesHeader); <=====================
            CopySalesDocCrMemoLine(FromSalesCrMemoHeader,ToSalesHeader,LinesNotCopied,MissingExCostRevLink);
          END;
        SalesDocType::"Arch. Quote",
        SalesDocType::"Arch. Order",
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocOnBeforeCopySalesDocInvLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDoc>
    Code lines:
    ...
            CopySalesDocShptLine(FromSalesShptHeader,ToSalesHeader,LinesNotCopied,MissingExCostRevLink);
          END;
        SalesDocType::"Posted Invoice":
          BEGIN
            FromSalesHeader.TRANSFERFIELDS(FromSalesInvHeader);
            OnCopySalesDocOnBeforeCopySalesDocInvLine(FromSalesInvHeader,ToSalesHeader); <=====================
            CopySalesDocInvLine(FromSalesInvHeader,ToSalesHeader,LinesNotCopied,MissingExCostRevLink);
          END;
        SalesDocType::"Posted Return Receipt":
          BEGIN
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocOnBeforeCopySalesDocReturnRcptLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDoc>
    Code lines:
    ...
            CopySalesDocInvLine(FromSalesInvHeader,ToSalesHeader,LinesNotCopied,MissingExCostRevLink);
          END;
        SalesDocType::"Posted Return Receipt":
          BEGIN
            FromSalesHeader.TRANSFERFIELDS(FromReturnRcptHeader);
            OnCopySalesDocOnBeforeCopySalesDocReturnRcptLine(FromReturnRcptHeader,ToSalesHeader); <=====================
            CopySalesDocReturnRcptLine(FromReturnRcptHeader,ToSalesHeader,LinesNotCopied,MissingExCostRevLink);
          END;
        SalesDocType::"Posted Credit Memo":
          BEGIN
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocOnBeforeCopySalesDocShptLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDoc>
    Code lines:
    ...
        SalesDocType::"Credit Memo":
          CopySalesDocSalesLine(FromSalesHeader,ToSalesHeader,LinesNotCopied,NextLineNo);
        SalesDocType::"Posted Shipment":
          BEGIN
            FromSalesHeader.TRANSFERFIELDS(FromSalesShptHeader);
            OnCopySalesDocOnBeforeCopySalesDocShptLine(FromSalesShptHeader,ToSalesHeader); <=====================
            CopySalesDocShptLine(FromSalesShptHeader,ToSalesHeader,LinesNotCopied,MissingExCostRevLink);
          END;
        SalesDocType::"Posted Invoice":
          BEGIN
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocOnBeforeTransferPostedInvoiceFields>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDocUpdateHeader>
    Code lines:
    ...
          END;
        SalesDocType::"Posted Invoice":
          BEGIN
            FromSalesInvHeader.CALCFIELDS("Work Description");
            VALIDATE("Sell-to Customer No.",FromSalesInvHeader."Sell-to Customer No.");
            OnCopySalesDocOnBeforeTransferPostedInvoiceFields(ToSalesHeader,FromSalesInvHeader); <=====================
            TRANSFERFIELDS(FromSalesInvHeader,FALSE);
            OnCopySalesDocOnAfterTransferPostedInvoiceFields(ToSalesHeader,FromSalesInvHeader,OldSalesHeader);
          END;
        SalesDocType::"Posted Return Receipt":
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocOnBeforeTransferPostedReturnReceiptFields>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDocUpdateHeader>
    Code lines:
    ...
            OnCopySalesDocOnAfterTransferPostedInvoiceFields(ToSalesHeader,FromSalesInvHeader,OldSalesHeader);
          END;
        SalesDocType::"Posted Return Receipt":
          BEGIN
            VALIDATE("Sell-to Customer No.",FromReturnRcptHeader."Sell-to Customer No.");
            OnCopySalesDocOnBeforeTransferPostedReturnReceiptFields(ToSalesHeader,FromReturnRcptHeader); <=====================
            TRANSFERFIELDS(FromReturnRcptHeader,FALSE);
            OnAfterCopyPostedReturnReceipt(ToSalesHeader,OldSalesHeader,FromReturnRcptHeader);
          END;
        SalesDocType::"Posted Credit Memo":
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocOnBeforeTransferPostedShipmentFields>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDocUpdateHeader>
    Code lines:
    ...
            OnAfterCopySalesHeader(ToSalesHeader,OldSalesHeader,FromSalesHeader);
          END;
        SalesDocType::"Posted Shipment":
          BEGIN
            VALIDATE("Sell-to Customer No.",FromSalesShptHeader."Sell-to Customer No.");
            OnCopySalesDocOnBeforeTransferPostedShipmentFields(ToSalesHeader,FromSalesShptHeader); <=====================
            TRANSFERFIELDS(FromSalesShptHeader,FALSE);
            OnAfterCopyPostedShipment(ToSalesHeader,OldSalesHeader,FromSalesShptHeader);
          END;
        SalesDocType::"Posted Invoice":
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocOnBeforeUpdateSalesInvoiceDiscountValue>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDoc>
    Code lines:
    ...
        SalesDocType::"Arch. Return Order":
          CopySalesDocSalesLineArchive(FromSalesHeaderArchive,ToSalesHeader,LinesNotCopied,NextLineNo);
      END;
    END;
    
    OnCopySalesDocOnBeforeUpdateSalesInvoiceDiscountValue( <=====================
      ToSalesHeader,FromDocType,FromDocNo,FromDocOccurrenceNo,FromDocVersionNo,RecalculateLines);
    
    UpdateSalesInvoiceDiscountValue(ToSalesHeader);
    
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocReturnRcptLineOnAfterSetFilters>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDocReturnRcptLine>
    Code lines:
    WITH ToSalesHeader DO BEGIN
      FromReturnRcptLine.RESET;
      FromReturnRcptLine.SETRANGE("Document No.",FromReturnRcptHeader."No.");
      IF MoveNegLines THEN
        FromReturnRcptLine.SETFILTER(Quantity,'<=0');
      OnCopySalesDocReturnRcptLineOnAfterSetFilters(ToSalesHeader,FromReturnRcptHeader,FromReturnRcptLine); <=====================
      CopySalesReturnRcptLinesToDoc(ToSalesHeader,FromReturnRcptLine,LinesNotCopied,MissingExCostRevLink);
    END;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocSalesLineArchiveOnAfterSetFilters>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDocSalesLineArchive>
    Code lines:
    ...
      FromSalesLineArchive.SETRANGE("Document No.",FromSalesHeaderArchive."No.");
      FromSalesLineArchive.SETRANGE("Doc. No. Occurrence",FromSalesHeaderArchive."Doc. No. Occurrence");
      FromSalesLineArchive.SETRANGE("Version No.",FromSalesHeaderArchive."Version No.");
      IF MoveNegLines THEN
        FromSalesLineArchive.SETFILTER(Quantity,'<=0');
      OnCopySalesDocSalesLineArchiveOnAfterSetFilters(FromSalesHeaderArchive,FromSalesLineArchive,ToSalesHeader); <=====================
      IF FromSalesLineArchive.FIND('-') THEN
        REPEAT
          IF CopyArchSalesLine(
               ToSalesHeader,ToSalesLine,FromSalesHeaderArchive,FromSalesLineArchive,NextLineNo,LinesNotCopied,FALSE)
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocSalesLineOnAfterSetFilters>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDocSalesLine>
    Code lines:
    ...
      FromSalesLine.RESET;
      FromSalesLine.SETRANGE("Document Type",FromSalesHeader."Document Type");
      FromSalesLine.SETRANGE("Document No.",FromSalesHeader."No.");
      IF MoveNegLines THEN
        FromSalesLine.SETFILTER(Quantity,'<=0');
      OnCopySalesDocSalesLineOnAfterSetFilters(FromSalesHeader,FromSalesLine,ToSalesHeader); <=====================
      IF FromSalesLine.FIND('-') THEN
        REPEAT
          IF NOT ExtTxtAttachedToPosSalesLine(FromSalesHeader,MoveNegLines,FromSalesLine."Attached to Line No.") THEN BEGIN
            InitAsmCopyHandling(TRUE);
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocShptLineOnAfterSetFilters>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDocShptLine>
    Code lines:
    WITH ToSalesHeader DO BEGIN
      FromSalesShptLine.RESET;
      FromSalesShptLine.SETRANGE("Document No.",FromSalesShptHeader."No.");
      IF MoveNegLines THEN
        FromSalesShptLine.SETFILTER(Quantity,'<=0');
      OnCopySalesDocShptLineOnAfterSetFilters(ToSalesHeader,FromSalesShptHeader,FromSalesShptLine); <=====================
      CopySalesShptLinesToDoc(ToSalesHeader,FromSalesShptLine,LinesNotCopied,MissingExCostRevLink);
    END;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocWithHeader>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDocUpdateHeader>
    Code lines:
    ...
      IF CreateToHeader THEN BEGIN
        VALIDATE("Payment Terms Code");
        MODIFY(TRUE);
      END ELSE
        MODIFY;
      OnCopySalesDocWithHeader(FromDocType,FromDocNo,ToSalesHeader,FromDocOccurrenceNo,FromDocVersionNo); <=====================
    END;
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesDocWithoutHeader>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesDoc>
    Code lines:
    ...
      IF IncludeHeader THEN
        CopySalesDocUpdateHeader(
          FromDocType,FromDocNo,ToSalesHeader,FromSalesHeader,
          FromSalesShptHeader,FromSalesInvHeader,FromReturnRcptHeader,FromSalesCrMemoHeader,FromSalesHeaderArchive,ReleaseDocument)
      ELSE
        OnCopySalesDocWithoutHeader(ToSalesHeader,FromDocType,FromDocNo,FromDocOccurrenceNo,FromDocVersionNo); <=====================
    
      LinesNotCopied := 0;
      CASE FromDocType OF
        SalesDocType::Quote,
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesInvLinesToDocOnBeforeCopySalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesInvLinesToDoc>
    Code lines:
    ...
          IF GetSalesDocNo(TempDocSalesLine,"Line No.") <> OldBufDocNo THEN BEGIN
            OldBufDocNo := GetSalesDocNo(TempDocSalesLine,"Line No.");
            TransferOldExtLines.ClearLineNumbers;
          END;
    
          OnCopySalesInvLinesToDocOnBeforeCopySalesLine(ToSalesHeader,FromSalesLine2); <=====================
    
          AsmHdrExistsForFromDocLine := FALSE;
          IF Type = Type::Item THEN
            CheckAsmHdrExistsForFromDocLine(ToSalesHeader,FromSalesLine2,BufferCount,SalesLineCount = SalesInvLineCount);
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesLineOnAfterSetDimensions>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesLine>
    Code lines:
    ...
    
    IF NOT RecalculateLines THEN BEGIN
      ToSalesLine."Dimension Set ID" := FromSalesLine."Dimension Set ID";
      ToSalesLine."Shortcut Dimension 1 Code" := FromSalesLine."Shortcut Dimension 1 Code";
      ToSalesLine."Shortcut Dimension 2 Code" := FromSalesLine."Shortcut Dimension 2 Code";
      OnCopySalesLineOnAfterSetDimensions(ToSalesLine,FromSalesLine); <=====================
    END;
    
    IF CopyThisLine THEN BEGIN
      OnBeforeInsertToSalesLine(
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesLineOnAfterTransferFieldsToSalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesLine>
    Code lines:
    ...
      OnAfterInitToSalesLine(ToSalesLine);
    END ELSE BEGIN
      CheckSalesLineIsBlocked(FromSalesLine);
      ToSalesLine := FromSalesLine;
      ToSalesLine."Returns Deferral Start Date" := 0D;
      OnCopySalesLineOnAfterTransferFieldsToSalesLine(ToSalesLine,FromSalesLine); <=====================
      IF ToSalesHeader."Document Type" IN [ToSalesHeader."Document Type"::Quote,ToSalesHeader."Document Type"::"Blanket Order"] THEN
        ToSalesLine."Deferral Code" := '';
      IF MoveNegLines AND (ToSalesLine.Type <> ToSalesLine.Type::" ") THEN BEGIN
        ToSalesLine.Amount := -ToSalesLine.Amount;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesLineOnBeforeCheckVATBusGroup>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesLine>
    Code lines:
    ...
        ToSalesLine."Amount Including VAT" := -ToSalesLine."Amount Including VAT";
      END
    END;
    
    CheckVATBusGroup := (NOT RecalculateLines) AND (ToSalesLine."No." <> '');
    OnCopySalesLineOnBeforeCheckVATBusGroup(ToSalesLine,CheckVATBusGroup); <=====================
    IF CheckVATBusGroup THEN
      ToSalesLine.TESTFIELD("VAT Bus. Posting Group",ToSalesHeader."VAT Bus. Posting Group");
    
    NextLineNo := NextLineNo + 10000;
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesLinesToBufferTransferFields>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesLinesToBuffer>
    Code lines:
    ...
         FromSalesHeader."Currency Code",ToSalesHeader."Currency Code",
         FromSalesHeader."Prices Including VAT",ToSalesHeader."Prices Including VAT")
    THEN
      TempSalesLineBuf."Return Receipt No." := DocNo;
    ReCalcSalesLine(FromSalesHeader,ToSalesHeader,TempSalesLineBuf);
    OnCopySalesLinesToBufferTransferFields(FromSalesHeader,FromSalesLine,TempSalesLineBuf); <=====================
    TempSalesLineBuf.INSERT;
    AddSalesDocLine(TempDocSalesLine,TempSalesLineBuf."Line No.",DocNo,FromSalesLine."Line No.");
Codeunit<Copy Document Mgt.>.PROCEDURE<OnCopySalesShptLinesToDocOnBeforeCopySalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<CopySalesShptLinesToDoc>
    Code lines:
    ...
            REPEAT
              ToLineCounter := ToLineCounter + 1;
              IF IsTimeForUpdate THEN
                Window.UPDATE(2,ToLineCounter);
    
              OnCopySalesShptLinesToDocOnBeforeCopySalesLine(ToSalesHeader,FromSalesLineBuf); <=====================
    
              IF CopySalesLine(
                   ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLineBuf,NextLineNo,LinesNotCopied,
                   FALSE,DeferralTypeForSalesDoc(SalesDocType::"Posted Shipment"),CopyPostedDeferral,
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnSplitPstdSalesLinesPerILETransferFields>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<SplitPstdSalesLinesPerILE>
    Code lines:
    ...
          IF NOT FromShptOrRcpt THEN
            UpdateRevSalesLineAmount(
              TempSalesLineBuf,OrgQtyBase,
              FromSalesHeader."Prices Including VAT",ToSalesHeader."Prices Including VAT");
    
          OnSplitPstdSalesLinesPerILETransferFields(FromSalesHeader,FromSalesLine,TempSalesLineBuf,ToSalesHeader); <=====================
          TempSalesLineBuf.INSERT;
          AddSalesDocLine(TempDocSalesLine,TempSalesLineBuf."Line No.","Document No.",TempSalesLineBuf."Line No.");
        END;
      UNTIL (NEXT = 0) OR (FromSalesLine."Quantity (Base)" = 0);
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnUpdatePurchLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<RecalculatePurchLine>
    Code lines:
    ToPurchLine.VALIDATE(Type,FromPurchLine.Type);
    ToPurchLine.Description := FromPurchLine.Description;
    ToPurchLine.VALIDATE("Description 2",FromPurchLine."Description 2");
    OnUpdatePurchLine(ToPurchLine,FromPurchLine); <=====================
    
    IF (FromPurchLine.Type <> 0) AND (FromPurchLine."No." <> '') THEN BEGIN
      IF ToPurchLine.Type = ToPurchLine.Type::"G/L Account" THEN BEGIN
        ToPurchLine."No." := FromPurchLine."No.";
        GLAcc.GET(FromPurchLine."No.");
        CopyThisLine := GLAcc."Direct Posting";
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnUpdateSalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<RecalculateSalesLine>
    Code lines:
    OnBeforeRecalculateSalesLine(ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLine,CopyThisLine);
    
    ToSalesLine.VALIDATE(Type,FromSalesLine.Type);
    ToSalesLine.Description := FromSalesLine.Description;
    ToSalesLine.VALIDATE("Description 2",FromSalesLine."Description 2");
    OnUpdateSalesLine(ToSalesLine,FromSalesLine); <=====================
    
    IF (FromSalesLine.Type <> 0) AND (FromSalesLine."No." <> '') THEN BEGIN
      IF ToSalesLine.Type = ToSalesLine.Type::"G/L Account" THEN BEGIN
        ToSalesLine."No." := FromSalesLine."No.";
    ...
Codeunit<Copy Document Mgt.>.PROCEDURE<OnUpdateSalesLineOnAfterRecalculateSalesLine>
  Raised in: Codeunit<Copy Document Mgt.>.PROCEDURE<UpdateSalesLine>
    Code lines:
    ...
    DeferralDocType := DeferralUtilities.GetSalesDeferralDocType;
    IF RecalculateLines AND NOT FromSalesLine."System-Created Entry" THEN BEGIN
      RecalculateSalesLine(ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLine,CopyThisLine);
      IF IsDeferralToBeCopied(DeferralDocType,ToSalesLine."Document Type",FromSalesDocType) THEN
        ToSalesLine.VALIDATE("Deferral Code",FromSalesLine."Deferral Code");
      OnUpdateSalesLineOnAfterRecalculateSalesLine(ToSalesLine,FromSalesLine); <=====================
    END ELSE BEGIN
      SetDefaultValuesToSalesLine(ToSalesLine,ToSalesHeader,FromSalesLine."VAT Difference");
      IF IsDeferralToBeCopied(DeferralDocType,ToSalesLine."Document Type",FromSalesDocType) THEN
        IF IsDeferralPosted(DeferralDocType,FromSalesDocType) THEN
    ...
Codeunit<Sales-Get Return Receipts>.PROCEDURE<OnAfterCreateInvLines>
  Raised in: Codeunit<Sales-Get Return Receipts>.PROCEDURE<CreateInvLines>
    Code lines:
    ...
          END;
        UNTIL NEXT = 0;
      END;
    END;
    
    OnAfterCreateInvLines(SalesHeader); <=====================
Codeunit<Sales-Get Return Receipts>.PROCEDURE<OnBeforeTransferLineToSalesDoc>
  Raised in: Codeunit<Sales-Get Return Receipts>.PROCEDURE<CreateInvLines>
    Code lines:
    ...
                SalesHeader.FIELDCAPTION("Currency Code"),
                SalesHeader.TABLECAPTION,SalesHeader."No.",
                ReturnRcptHeader.TABLECAPTION,ReturnRcptHeader."No.");
              DifferentCurrencies := TRUE;
            END;
            OnBeforeTransferLineToSalesDoc(ReturnRcptHeader,ReturnRcptLine2,SalesHeader,DifferentCurrencies); <=====================
          END;
          IF NOT DifferentCurrencies THEN BEGIN
            ReturnRcptLine := ReturnRcptLine2;
            ReturnRcptLine.InsertInvLineFromRetRcptLine(SalesLine);
    ...
Codeunit<Purch.-Get Return Shipments>.PROCEDURE<OnAfterCreateInvLines>
  Raised in: Codeunit<Purch.-Get Return Shipments>.PROCEDURE<CreateInvLines>
    Code lines:
    ...
          END;
        UNTIL NEXT = 0;
      END;
    END;
    
    OnAfterCreateInvLines(PurchHeader); <=====================
Codeunit<Purch.-Get Return Shipments>.PROCEDURE<OnBeforeTransferLineToPurchaseDoc>
  Raised in: Codeunit<Purch.-Get Return Shipments>.PROCEDURE<CreateInvLines>
    Code lines:
    ...
                PurchHeader.FIELDCAPTION("Currency Code"),
                PurchHeader.TABLECAPTION,PurchHeader."No.",
                ReturnShptHeader.TABLECAPTION,ReturnShptHeader."No.");
              DifferentCurrencies := TRUE;
            END;
            OnBeforeTransferLineToPurchaseDoc(ReturnShptHeader,ReturnShptLine2,PurchHeader,DifferentCurrencies); <=====================
          END;
          IF NOT DifferentCurrencies THEN BEGIN
            ReturnShptLine := ReturnShptLine2;
            ReturnShptLine.InsertInvLineFromRetShptLine(PurchLine);
    ...
Codeunit<Return Shipment - Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<Return Shipment - Printed>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<Return Receipt - Printed>.PROCEDURE<OnBeforeModify>
  Raised in: Codeunit<Return Receipt - Printed>.<OnRun>
    Code lines:
    FIND;
    "No. Printed" := "No. Printed" + 1;
    OnBeforeModify(Rec); <=====================
    MODIFY;
    COMMIT;
Codeunit<ODataUtility>.PROCEDURE<OnEditInExcel>
  Raised in: Codeunit<ODataUtility>.PROCEDURE<EditJournalWorksheetInExcel>
    Code lines:
    CreateWorksheetWebService(PageCaption,PageId);
    
    Filter := STRSUBSTNO('Journal_Batch_Name eq ''%1'' and Journal_Template_Name eq ''%2''',JournalBatchName,JournalTemplateName);
    OnEditInExcel(PageCaption,Filter); <=====================
  Raised in: Codeunit<ODataUtility>.PROCEDURE<EditWorksheetInExcel>
    Code lines:
    CreateWorksheetWebService(PageCaption,PageId);
    OnEditInExcel(PageCaption,Filter); <=====================
  Raised in: Codeunit<ODataUtility>.PROCEDURE<ReRaiseOnEditInExcel>
    Code lines:
    OnEditInExcel(ServiceName,ODataFilter) <=====================
Codeunit<Booking Manager>.PROCEDURE<OnGetBookingMailboxes>
  Raised in: Codeunit<Booking Manager>.PROCEDURE<GetBookingMailboxes>
    Code lines:
    OnGetBookingMailboxes(TempBookingMailbox); <=====================
Codeunit<Booking Manager>.PROCEDURE<OnGetBookingServiceForBooking>
  Raised in: Codeunit<Booking Manager>.PROCEDURE<GetBookingServiceForBooking>
    Code lines:
    OnGetBookingServiceForBooking(TempBookingItem,TempBookingService); <=====================
Codeunit<Booking Manager>.PROCEDURE<OnRegisterAppointmentConnection>
  Raised in: Codeunit<Booking Manager>.PROCEDURE<RegisterAppointmentConnection>
    Code lines:
    OnRegisterAppointmentConnection; <=====================
Codeunit<Booking Manager>.PROCEDURE<OnSetBookingItemInvoiced>
  Raised in: Codeunit<Booking Manager>.PROCEDURE<SetBookingItemInvoiced>
    Code lines:
    OnSetBookingItemInvoiced(InvoicedBookingItem); <=====================
Codeunit<Booking Manager>.PROCEDURE<OnSynchronize>
  Raised in: Codeunit<Booking Manager>.PROCEDURE<Synchronize>
    Code lines:
    OnSynchronize(BookingItem); <=====================
Codeunit<Purch.-Calc.Discount>.PROCEDURE<OnAfterCalcPurchaseDiscount>
  Raised in: Codeunit<Purch.-Calc.Discount>.PROCEDURE<CalculateInvoiceDiscount>
    Code lines:
    ...
        UpdatePrepmtLineAmount(PurchHeader);
      END;
    END;
    
    PurchCalcDiscByType.ResetRecalculateInvoiceDisc(PurchHeader);
    OnAfterCalcPurchaseDiscount(PurchHeader); <=====================
Codeunit<Purch.-Calc.Discount>.PROCEDURE<OnBeforeCalcPurchaseDiscount>
  Raised in: Codeunit<Purch.-Calc.Discount>.PROCEDURE<CalculateInvoiceDiscount>
    Code lines:
    PurchSetup.GET;
    
    IsHandled := FALSE;
    OnBeforeCalcPurchaseDiscount(PurchHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH PurchLine DO BEGIN
      LOCKTABLE;
      PurchHeader.TESTFIELD("Vendor Posting Group");
    ...
Codeunit<Page Management>.PROCEDURE<OnAfterGetPageID>
  Raised in: Codeunit<Page Management>.PROCEDURE<GetPageID>
    Code lines:
    ...
        PageID := GetDefaultCardPageID(RecordRef.NUMBER);
    
    IF PageID = 0 THEN
      PageID := GetDefaultLookupPageID(RecordRef.NUMBER);
    
    OnAfterGetPageID(RecordRef,PageID); <=====================
    
    EXIT(PageID);
Codeunit<Page Management>.PROCEDURE<OnBeforeGetDefaultLookupPageID>
  Raised in: Codeunit<Page Management>.PROCEDURE<GetDefaultLookupPageID>
    Code lines:
    IF TableID = 0 THEN
      EXIT(0);
    
    PageID := 0;
    OnBeforeGetDefaultLookupPageID(TableID,PageID); <=====================
    IF PageID <> 0 THEN
      EXIT(PageID);
    
    TableMetadata.GET(TableID);
    EXIT(TableMetadata.LookupPageID);
  Raised in: Codeunit<Page Management>.PROCEDURE<GetDefaultLookupPageIDByVar>
    Code lines:
    IF NOT DataTypeManagement.GetRecordRef(RecRelatedVariant,RecordRef) THEN
      EXIT;
    
    TableID := RecordRef.NUMBER;
    PageID := 0;
    OnBeforeGetDefaultLookupPageID(TableID,PageID); <=====================
    IF PageID <> 0 THEN
      EXIT(PageID);
    
    TableMetadata.GET(TableID);
Codeunit<Page Management>.PROCEDURE<OnConditionalCardPageIDNotFound>
  Raised in: Codeunit<Page Management>.PROCEDURE<GetConditionalCardPageID>
    Code lines:
    ...
      DATABASE::"Cash Flow Setup":
        EXIT(PAGE::"Cash Flow Setup");
      DATABASE::"Production Order":
        EXIT(GetProductionOrderPageID(RecordRef));
      ELSE BEGIN
        OnConditionalCardPageIDNotFound(RecordRef,CardPageID); <=====================
        EXIT(CardPageID);
      END;
    END;
    EXIT(0);
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterCalcBestUnitPriceAsItemUnitPrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<CalcBestUnitPrice>
    Code lines:
    ...
    
      CLEAR(BestSalesPrice);
      BestSalesPrice."Unit Price" := Item."Unit Price";
      BestSalesPrice."Allow Line Disc." := AllowLineDisc;
      BestSalesPrice."Allow Invoice Disc." := AllowInvDisc;
      OnAfterCalcBestUnitPriceAsItemUnitPrice(BestSalesPrice,Item); <=====================
    END;
    
    SalesPrice := BestSalesPrice;
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindItemJnlLinePrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindItemJnlLinePrice>
    Code lines:
    ...
      IF FoundSalesPrice OR
         NOT ((CalledByFieldNo = FIELDNO(Quantity)) OR
              (CalledByFieldNo = FIELDNO("Variant Code")))
      THEN
        VALIDATE("Unit Amount",TempSalesPrice."Unit Price");
      OnAfterFindItemJnlLinePrice(ItemJnlLine,TempSalesPrice,CalledByFieldNo); <=====================
    END;
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindJobJnlLineLineDisc>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindJobJnlLineLineDisc>
    Code lines:
    ...
        CalcBestLineDisc(TempSalesLineDisc);
        "Line Discount %" := TempSalesLineDisc."Line Discount %";
      END;
    END;
    
    OnAfterFindJobJnlLineLineDisc(JobJnlLine,TempSalesLineDisc); <=====================
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindJobJnlLineResPrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindJobJnlLinePrice>
    Code lines:
    ...
        Type::Resource:
          BEGIN
            Job.GET("Job No.");
            SetResPrice("No.","Work Type Code","Currency Code");
            CODEUNIT.RUN(CODEUNIT::"Resource-Find Price",ResPrice);
            OnAfterFindJobJnlLineResPrice(JobJnlLine,ResPrice); <=====================
            ConvertPriceLCYToFCY(ResPrice."Currency Code",ResPrice."Unit Price");
            "Unit Price" := ResPrice."Unit Price" * "Qty. per Unit of Measure";
          END;
      END;
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindJobPlanningLineLineDisc>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindJobPlanningLineLineDisc>
    Code lines:
    ...
        ELSE
          "Line Discount %" := 0;
      END;
    END;
    
    OnAfterFindJobPlanningLineLineDisc(JobPlanningLine,TempSalesLineDisc); <=====================
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindJobPlanningLineResPrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindJobPlanningLinePrice>
    Code lines:
    ...
        Type::Resource:
          BEGIN
            Job.GET("Job No.");
            SetResPrice("No.","Work Type Code","Currency Code");
            CODEUNIT.RUN(CODEUNIT::"Resource-Find Price",ResPrice);
            OnAfterFindJobPlanningLineResPrice(JobPlanningLine,ResPrice); <=====================
            ConvertPriceLCYToFCY(ResPrice."Currency Code",ResPrice."Unit Price");
            "Unit Price" := ResPrice."Unit Price" * "Qty. per Unit of Measure";
          END;
      END;
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindSalesLineDisc>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindSalesLineDisc>
    Code lines:
    ...
            END;
          UNTIL NOT InclCampaigns;
        END;
    END;
    
    OnAfterFindSalesLineDisc( <=====================
      ToSalesLineDisc,CustNo,ContNo,CustDiscGrCode,CampaignNo,ItemNo,ItemDiscGrCode,VariantCode,UOM,
      CurrencyCode,StartingDate,ShowAll);
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindSalesLineItemPrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindSalesLinePrice>
    Code lines:
    ...
        Type::Item:
          BEGIN
            Item.GET("No.");
            SalesLinePriceExists(SalesHeader,SalesLine,FALSE);
            CalcBestUnitPrice(TempSalesPrice);
            OnAfterFindSalesLineItemPrice(SalesLine,TempSalesPrice,FoundSalesPrice); <=====================
            IF FoundSalesPrice OR
               NOT ((CalledByFieldNo = FIELDNO(Quantity)) OR
                    (CalledByFieldNo = FIELDNO("Variant Code")))
            THEN BEGIN
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindSalesLineLineDisc>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindSalesLineLineDisc>
    Code lines:
    ...
          SalesLineLineDiscExists(SalesHeader,SalesLine,FALSE);
          CalcBestLineDisc(TempSalesLineDisc);
          "Line Discount %" := TempSalesLineDisc."Line Discount %";
        END;
    
      OnAfterFindSalesLineLineDisc(SalesLine,SalesHeader,TempSalesLineDisc); <=====================
    END;
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindSalesLinePrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindSalesLinePrice>
    Code lines:
    ...
            ConvertPriceToVAT(FALSE,'','',ResPrice."Unit Price");
            ConvertPriceLCYToFCY(ResPrice."Currency Code",ResPrice."Unit Price");
            "Unit Price" := ResPrice."Unit Price" * "Qty. per Unit of Measure";
          END;
      END;
      OnAfterFindSalesLinePrice(SalesLine,SalesHeader,TempSalesPrice,ResPrice,CalledByFieldNo); <=====================
    END;
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindSalesLineResPrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindSalesLinePrice>
    Code lines:
    ...
          END;
        Type::Resource:
          BEGIN
            SetResPrice("No.","Work Type Code","Currency Code");
            CODEUNIT.RUN(CODEUNIT::"Resource-Find Price",ResPrice);
            OnAfterFindSalesLineResPrice(SalesLine,ResPrice); <=====================
            ConvertPriceToVAT(FALSE,'','',ResPrice."Unit Price");
            ConvertPriceLCYToFCY(ResPrice."Currency Code",ResPrice."Unit Price");
            "Unit Price" := ResPrice."Unit Price" * "Qty. per Unit of Measure";
          END;
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindSalesPrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindSalesPrice>
    Code lines:
    ...
            CopySalesPriceToSalesPrice(FromSalesPrice,ToSalesPrice);
          UNTIL TempTargetCampaignGr.NEXT = 0;
      END;
    END;
    
    OnAfterFindSalesPrice( <=====================
      ToSalesPrice,FromSalesPrice,QtyPerUOM,Qty,CustNo,ContNo,CustPriceGrCode,CampaignNo,
      ItemNo,VariantCode,UOM,CurrencyCode,StartingDate,ShowAll);
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindServLineDisc>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindServLineDisc>
    Code lines:
    ...
            ROUND(CalcChargeableQty * "Unit Price",Currency."Amount Rounding Precision") *
            "Line Discount %" / 100,Currency."Amount Rounding Precision");
        "Inv. Discount Amount" := 0;
        "Inv. Disc. Amount to Invoice" := 0;
      END;
      OnAfterFindServLineDisc(ServLine,ServHeader,TempSalesLineDisc); <=====================
    END;
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindServLinePrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindServLinePrice>
    Code lines:
    ...
            ConvertPriceToVAT(FALSE,'','',ServCost."Default Unit Price");
            ConvertPriceLCYToFCY('',ServCost."Default Unit Price");
            "Unit Price" := ServCost."Default Unit Price";
          END;
      END;
      OnAfterFindServLinePrice(ServLine,ServHeader,TempSalesPrice,ResPrice,ServCost,CalledByFieldNo); <=====================
    END;
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindServLineResPrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindServLinePrice>
    Code lines:
    ...
          END;
        Type::Resource:
          BEGIN
            SetResPrice("No.","Work Type Code","Currency Code");
            CODEUNIT.RUN(CODEUNIT::"Resource-Find Price",ResPrice);
            OnAfterFindServLineResPrice(ServLine,ResPrice); <=====================
            ConvertPriceToVAT(FALSE,'','',ResPrice."Unit Price");
            ResPrice."Unit Price" := ResPrice."Unit Price" * "Qty. per Unit of Measure";
            ConvertPriceLCYToFCY(ResPrice."Currency Code",ResPrice."Unit Price");
            IF (ResPrice."Unit Price" > ServHeader."Max. Labor Unit Price") AND
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterFindStdItemJnlLinePrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindStdItemJnlLinePrice>
    Code lines:
    ...
      IF FoundSalesPrice OR
         NOT ((CalledByFieldNo = FIELDNO(Quantity)) OR
              (CalledByFieldNo = FIELDNO("Variant Code")))
      THEN
        VALIDATE("Unit Amount",TempSalesPrice."Unit Price");
      OnAfterFindStdItemJnlLinePrice(StdItemJnlLine,TempSalesPrice,CalledByFieldNo); <=====================
    END;
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterGetSalesLineLineDisc>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<GetSalesLineLineDisc>
    Code lines:
    ...
    
        TESTFIELD("Allow Line Disc.");
        VALIDATE("Line Discount %",TempSalesLineDisc."Line Discount %");
      END;
    
    OnAfterGetSalesLineLineDisc(SalesLine,TempSalesLineDisc); <=====================
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterGetSalesLinePrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<GetSalesLinePrice>
    Code lines:
    ...
          "Line Discount %" := 0;
    
        VALIDATE("Unit Price",TempSalesPrice."Unit Price");
      END;
    
    OnAfterGetSalesLinePrice(SalesHeader,SalesLine,TempSalesPrice); <=====================
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterJobJnlLineFindJTPriceGLAccount>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<JobJnlLineFindJTPrice>
    Code lines:
    ...
            ELSE BEGIN
              JobGLAccPrice.SETRANGE("Job Task No.",'');
              IF JobGLAccPrice.FINDFIRST THEN;
              CopyJobGLAccPriceToJobJnlLine(JobJnlLine,JobGLAccPrice);
            END;
            OnAfterJobJnlLineFindJTPriceGLAccount(JobJnlLine); <=====================
          END;
      END;
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterJobJnlLineFindJTPriceItem>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<JobJnlLineFindJTPrice>
    Code lines:
    ...
              IF JobItemPrice.FINDFIRST THEN
                CopyJobItemPriceToJobJnlLine(JobJnlLine,JobItemPrice);
            END;
            IF JobItemPrice.ISEMPTY OR (NOT JobItemPrice."Apply Job Discount") THEN
              FindJobJnlLineLineDisc(JobJnlLine);
            OnAfterJobJnlLineFindJTPriceItem(JobJnlLine); <=====================
          END;
        Type::Resource:
          BEGIN
            Res.GET("No.");
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterJobJnlLineFindJTPriceResource>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<JobJnlLineFindJTPrice>
    Code lines:
    ...
                  JobJnlLineFindJobResPrice(JobJnlLine,JobResPrice,JobResPrice.Type::All):
                    CopyJobResPriceToJobJnlLine(JobJnlLine,JobResPrice);
                END;
              END;
            END;
            OnAfterJobJnlLineFindJTPriceResource(JobJnlLine); <=====================
          END;
        Type::"G/L Account":
          BEGIN
            JobGLAccPrice.SETRANGE("Job No.","Job No.");
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterJobJnlLineLineDiscExists>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<JobJnlLineLineDiscExists>
    Code lines:
    ...
        OnBeforeJobJnlLineLineDiscExists(JobJnlLine);
        FindSalesLineDisc(
          TempSalesLineDisc,Job."Bill-to Customer No.",Job."Bill-to Contact No.",
          Job."Customer Disc. Group",'',"No.",Item."Item Disc. Group","Variant Code","Unit of Measure Code",
          "Currency Code",JobJnlLineStartDate(JobJnlLine,DateCaption),ShowAll);
        OnAfterJobJnlLineLineDiscExists(JobJnlLine); <=====================
        EXIT(TempSalesLineDisc.FIND('-'));
      END;
    EXIT(FALSE);
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterJobPlanningLineLineDiscExists>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<JobPlanningLineLineDiscExists>
    Code lines:
    ...
        OnBeforeJobPlanningLineLineDiscExists(JobPlanningLine);
        FindSalesLineDisc(
          TempSalesLineDisc,Job."Bill-to Customer No.",Job."Bill-to Contact No.",
          Job."Customer Disc. Group",'',"No.",Item."Item Disc. Group","Variant Code","Unit of Measure Code",
          "Currency Code",JobPlanningLineStartDate(JobPlanningLine,DateCaption),ShowAll);
        OnAfterJobPlanningLineLineDiscExists(JobPlanningLine); <=====================
        EXIT(TempSalesLineDisc.FIND('-'));
      END;
    EXIT(FALSE);
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterSalesLineLineDiscExists>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<SalesLineLineDiscExists>
    Code lines:
    ...
        IF NOT IsHandled THEN BEGIN
          FindSalesLineDisc(
            TempSalesLineDisc,GetCustNoForSalesHeader(SalesHeader),SalesHeader."Bill-to Contact No.",
            "Customer Disc. Group",'',"No.",Item."Item Disc. Group","Variant Code","Unit of Measure Code",
            SalesHeader."Currency Code",SalesHeaderStartDate(SalesHeader,DateCaption),ShowAll);
          OnAfterSalesLineLineDiscExists(SalesLine,SalesHeader,TempSalesLineDisc,ShowAll); <=====================
        END;
        EXIT(TempSalesLineDisc.FINDFIRST);
      END;
    EXIT(FALSE);
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterSalesLinePriceExists>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<SalesLinePriceExists>
    Code lines:
    ...
        IF NOT IsHandled THEN BEGIN
          FindSalesPrice(
            TempSalesPrice,GetCustNoForSalesHeader(SalesHeader),SalesHeader."Bill-to Contact No.",
            "Customer Price Group",'',"No.","Variant Code","Unit of Measure Code",
            SalesHeader."Currency Code",SalesHeaderStartDate(SalesHeader,DateCaption),ShowAll);
          OnAfterSalesLinePriceExists(SalesLine,SalesHeader,TempSalesPrice,ShowAll); <=====================
        END;
        EXIT(TempSalesPrice.FINDFIRST);
      END;
    EXIT(FALSE);
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterServLineLineDiscExists>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<ServLineLineDiscExists>
    Code lines:
    ...
        OnBeforeServLineLineDiscExists(ServLine,ServHeader);
        FindSalesLineDisc(
          TempSalesLineDisc,"Bill-to Customer No.",ServHeader."Bill-to Contact No.",
          "Customer Disc. Group",'',"No.",Item."Item Disc. Group","Variant Code","Unit of Measure Code",
          ServHeader."Currency Code",ServHeaderStartDate(ServHeader,DateCaption),ShowAll);
        OnAfterServLineLineDiscExists(ServLine); <=====================
        EXIT(TempSalesLineDisc.FIND('-'));
      END;
    EXIT(FALSE);
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnAfterServLinePriceExists>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<ServLinePriceExists>
    Code lines:
    ...
        IF NOT IsHandled THEN
          FindSalesPrice(
            TempSalesPrice,"Bill-to Customer No.",ServHeader."Bill-to Contact No.",
            "Customer Price Group",'',"No.","Variant Code","Unit of Measure Code",
            ServHeader."Currency Code",ServHeaderStartDate(ServHeader,DateCaption),ShowAll);
        OnAfterServLinePriceExists(ServLine); <=====================
        EXIT(TempSalesPrice.FIND('-'));
      END;
    EXIT(FALSE);
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeConvertPriceToVAT>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<ConvertPriceToVAT>
    Code lines:
    IF FromPricesInclVAT THEN BEGIN
      VATPostingSetup.GET(FromVATBusPostingGr,FromVATProdPostingGr);
      OnBeforeConvertPriceToVAT(VATPostingSetup); <=====================
    
      CASE VATPostingSetup."VAT Calculation Type" OF
        VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT":
          VATPostingSetup."VAT %" := 0;
        VATPostingSetup."VAT Calculation Type"::"Sales Tax":
          ERROR(
            Text010,
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindAnalysisReportPrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindAnalysisReportPrice>
    Code lines:
    IsHandled := FALSE;
    OnBeforeFindAnalysisReportPrice(ItemNo,Date,UnitPrice,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(UnitPrice);
    
    SetCurrency('',0,0D);
    SetVAT(FALSE,0,0,'');
    SetUoM(0,1);
    Item.GET(ItemNo);
    
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindItemJnlLinePrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindItemJnlLinePrice>
    Code lines:
    IsHandled := FALSE;
    OnBeforeFindItemJnlLinePrice(ItemJnlLine,CalledByFieldNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH ItemJnlLine DO BEGIN
      SetCurrency('',0,0D);
      SetVAT(FALSE,0,0,'');
      SetUoM(ABS(Quantity),"Qty. per Unit of Measure");
      TESTFIELD("Qty. per Unit of Measure");
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindJobJnlLinePrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindJobJnlLinePrice>
    Code lines:
    IsHandled := FALSE;
    OnBeforeFindJobJnlLinePrice(JobJnlLine,CalledByFieldNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH JobJnlLine DO BEGIN
      SetCurrency("Currency Code","Currency Factor","Posting Date");
      SetVAT(FALSE,0,0,'');
      SetUoM(ABS(Quantity),"Qty. per Unit of Measure");
    
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindJobPlanningLinePrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindJobPlanningLinePrice>
    Code lines:
    IsHandled := FALSE;
    OnBeforeFindJobPlanningLinePrice(JobPlanningLine,CalledByFieldNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH JobPlanningLine DO BEGIN
      SetCurrency("Currency Code","Currency Factor","Planning Date");
      SetVAT(FALSE,0,0,'');
      SetUoM(ABS(Quantity),"Qty. per Unit of Measure");
      SetLineDisc(0,TRUE,TRUE);
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindSalesLineDisc>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindSalesLineDisc>
    Code lines:
    OnBeforeFindSalesLineDisc( <=====================
      ToSalesLineDisc,CustNo,ContNo,CustDiscGrCode,CampaignNo,ItemNo,ItemDiscGrCode,VariantCode,UOM,
      CurrencyCode,StartingDate,ShowAll);
    
    WITH FromSalesLineDisc DO BEGIN
      SETFILTER("Ending Date",'%1|>=%2',0D,StartingDate);
      SETFILTER("Variant Code",'%1|%2',VariantCode,'');
      OnFindSalesLineDiscOnAfterSetFilters(FromSalesLineDisc);
      IF NOT ShowAll THEN BEGIN
        SETRANGE("Starting Date",0D,StartingDate);
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindSalesLineLineDisc>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindSalesLineLineDisc>
    Code lines:
    IsHandled := FALSE;
    OnBeforeFindSalesLineLineDisc(SalesLine,SalesHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH SalesLine DO BEGIN
      SetCurrency(SalesHeader."Currency Code",0,0D);
      SetUoM(ABS(Quantity),"Qty. per Unit of Measure");
    
      TESTFIELD("Qty. per Unit of Measure");
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindSalesLinePrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindSalesLinePrice>
    Code lines:
    IsHandled := FALSE;
    OnBeforeFindSalesLinePrice(SalesLine,SalesHeader,CalledByFieldNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH SalesLine DO BEGIN
      SetCurrency(
        SalesHeader."Currency Code",SalesHeader."Currency Factor",SalesHeaderExchDate(SalesHeader));
      SetVAT(SalesHeader."Prices Including VAT","VAT %","VAT Calculation Type","VAT Bus. Posting Group");
      SetUoM(ABS(Quantity),"Qty. per Unit of Measure");
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindSalesPrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindSalesPrice>
    Code lines:
    ...
      ERROR(TempTableErr);
    
    ToSalesPrice.RESET;
    ToSalesPrice.DELETEALL;
    
    OnBeforeFindSalesPrice( <=====================
      ToSalesPrice,FromSalesPrice,QtyPerUOM,Qty,CustNo,ContNo,CustPriceGrCode,CampaignNo,
      ItemNo,VariantCode,UOM,CurrencyCode,StartingDate,ShowAll);
    
    WITH FromSalesPrice DO BEGIN
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindServLineDisc>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindServLineDisc>
    Code lines:
    IsHandled := FALSE;
    OnBeforeFindServLineDisc(ServHeader,ServLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH ServLine DO BEGIN
      SetCurrency(ServHeader."Currency Code",0,0D);
      SetUoM(ABS(Quantity),"Qty. per Unit of Measure");
    
      TESTFIELD("Qty. per Unit of Measure");
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindServLinePrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindServLinePrice>
    Code lines:
    IsHandled := FALSE;
    OnBeforeFindServLinePrice(ServLine,ServHeader,CalledByFieldNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH ServLine DO BEGIN
      ServHeader.GET("Document Type","Document No.");
      IF Type <> Type::" " THEN BEGIN
        SetCurrency(
          ServHeader."Currency Code",ServHeader."Currency Factor",ServHeaderExchDate(ServHeader));
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeFindStdItemJnlLinePrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindStdItemJnlLinePrice>
    Code lines:
    IsHandled := TRUE;
    OnBeforeFindStdItemJnlLinePrice(StdItemJnlLine,CalledByFieldNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH StdItemJnlLine DO BEGIN
      SetCurrency('',0,0D);
      SetVAT(FALSE,0,0,'');
      SetUoM(ABS(Quantity),"Qty. per Unit of Measure");
      TESTFIELD("Qty. per Unit of Measure");
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeGetSalesLineLineDisc>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<GetSalesLineLineDisc>
    Code lines:
    OnBeforeGetSalesLineLineDisc(SalesHeader,SalesLine); <=====================
    
    SalesLineLineDiscExists(SalesHeader,SalesLine,TRUE);
    
    WITH SalesLine DO
      IF PAGE.RUNMODAL(PAGE::"Get Sales Line Disc.",TempSalesLineDisc) = ACTION::LookupOK THEN
        BEGIN
        SetCurrency(SalesHeader."Currency Code",0,0D);
        SetUoM(ABS(Quantity),"Qty. per Unit of Measure");
    
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeJobJnlLineLineDiscExists>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<JobJnlLineLineDiscExists>
    Code lines:
    WITH JobJnlLine DO
      IF (Type = Type::Item) AND Item.GET("No.") THEN BEGIN
        Job.GET("Job No.");
        OnBeforeJobJnlLineLineDiscExists(JobJnlLine); <=====================
        FindSalesLineDisc(
          TempSalesLineDisc,Job."Bill-to Customer No.",Job."Bill-to Contact No.",
          Job."Customer Disc. Group",'',"No.",Item."Item Disc. Group","Variant Code","Unit of Measure Code",
          "Currency Code",JobJnlLineStartDate(JobJnlLine,DateCaption),ShowAll);
        OnAfterJobJnlLineLineDiscExists(JobJnlLine);
        EXIT(TempSalesLineDisc.FIND('-'));
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeJobPlanningLineFindJTPrice>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<JobPlanningLineFindJTPrice>
    Code lines:
    IsHandled := FALSE;
    OnBeforeJobPlanningLineFindJTPrice(JobPlanningLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH JobPlanningLine DO
      CASE Type OF
        Type::Item:
          BEGIN
            JobItemPrice.SETRANGE("Job No.","Job No.");
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeJobPlanningLineLineDiscExists>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<JobPlanningLineLineDiscExists>
    Code lines:
    WITH JobPlanningLine DO
      IF (Type = Type::Item) AND Item.GET("No.") THEN BEGIN
        Job.GET("Job No.");
        OnBeforeJobPlanningLineLineDiscExists(JobPlanningLine); <=====================
        FindSalesLineDisc(
          TempSalesLineDisc,Job."Bill-to Customer No.",Job."Bill-to Contact No.",
          Job."Customer Disc. Group",'',"No.",Item."Item Disc. Group","Variant Code","Unit of Measure Code",
          "Currency Code",JobPlanningLineStartDate(JobPlanningLine,DateCaption),ShowAll);
        OnAfterJobPlanningLineLineDiscExists(JobPlanningLine);
        EXIT(TempSalesLineDisc.FIND('-'));
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeSalesLineLineDiscExists>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<SalesLineLineDiscExists>
    Code lines:
    WITH SalesLine DO
      IF (Type = Type::Item) AND Item.GET("No.") THEN BEGIN
        IsHandled := FALSE;
        OnBeforeSalesLineLineDiscExists( <=====================
          SalesLine,SalesHeader,TempSalesLineDisc,SalesHeaderStartDate(SalesHeader,DateCaption),
          Qty,QtyPerUOM,ShowAll,IsHandled);
        IF NOT IsHandled THEN BEGIN
          FindSalesLineDisc(
            TempSalesLineDisc,GetCustNoForSalesHeader(SalesHeader),SalesHeader."Bill-to Contact No.",
            "Customer Disc. Group",'',"No.",Item."Item Disc. Group","Variant Code","Unit of Measure Code",
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeSalesLinePriceExists>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<SalesLinePriceExists>
    Code lines:
    WITH SalesLine DO
      IF (Type = Type::Item) AND Item.GET("No.") THEN BEGIN
        IsHandled := FALSE;
        OnBeforeSalesLinePriceExists( <=====================
          SalesLine,SalesHeader,TempSalesPrice,Currency,CurrencyFactor,
          SalesHeaderStartDate(SalesHeader,DateCaption),Qty,QtyPerUOM,ShowAll,IsHandled);
        IF NOT IsHandled THEN BEGIN
          FindSalesPrice(
            TempSalesPrice,GetCustNoForSalesHeader(SalesHeader),SalesHeader."Bill-to Contact No.",
            "Customer Price Group",'',"No.","Variant Code","Unit of Measure Code",
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeServLineLineDiscExists>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<ServLineLineDiscExists>
    Code lines:
    WITH ServLine DO
      IF (Type = Type::Item) AND Item.GET("No.") THEN BEGIN
        OnBeforeServLineLineDiscExists(ServLine,ServHeader); <=====================
        FindSalesLineDisc(
          TempSalesLineDisc,"Bill-to Customer No.",ServHeader."Bill-to Contact No.",
          "Customer Disc. Group",'',"No.",Item."Item Disc. Group","Variant Code","Unit of Measure Code",
          ServHeader."Currency Code",ServHeaderStartDate(ServHeader,DateCaption),ShowAll);
        OnAfterServLineLineDiscExists(ServLine);
        EXIT(TempSalesLineDisc.FIND('-'));
      END;
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnBeforeServLinePriceExists>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<ServLinePriceExists>
    Code lines:
    WITH ServLine DO
      IF (Type = Type::Item) AND Item.GET("No.") THEN BEGIN
        IsHandled := FALSE;
        OnBeforeServLinePriceExists(ServLine,ServHeader,TempSalesPrice,ShowAll,IsHandled); <=====================
        IF NOT IsHandled THEN
          FindSalesPrice(
            TempSalesPrice,"Bill-to Customer No.",ServHeader."Bill-to Contact No.",
            "Customer Price Group",'',"No.","Variant Code","Unit of Measure Code",
            ServHeader."Currency Code",ServHeaderStartDate(ServHeader,DateCaption),ShowAll);
        OnAfterServLinePriceExists(ServLine);
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnFindSalesLineDiscOnAfterSetFilters>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindSalesLineDisc>
    Code lines:
    ...
      CurrencyCode,StartingDate,ShowAll);
    
    WITH FromSalesLineDisc DO BEGIN
      SETFILTER("Ending Date",'%1|>=%2',0D,StartingDate);
      SETFILTER("Variant Code",'%1|%2',VariantCode,'');
      OnFindSalesLineDiscOnAfterSetFilters(FromSalesLineDisc); <=====================
      IF NOT ShowAll THEN BEGIN
        SETRANGE("Starting Date",0D,StartingDate);
        SETFILTER("Currency Code",'%1|%2',CurrencyCode,'');
        IF UOM <> '' THEN
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnFindSalesLineLineDiscOnBeforeCalcLineDisc>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<FindSalesLineLineDisc>
    Code lines:
    ...
      SetUoM(ABS(Quantity),"Qty. per Unit of Measure");
    
      TESTFIELD("Qty. per Unit of Measure");
    
      IsHandled := FALSE;
      OnFindSalesLineLineDiscOnBeforeCalcLineDisc(SalesHeader,SalesLine,TempSalesLineDisc,Qty,QtyPerUOM,IsHandled); <=====================
      IF NOT IsHandled THEN
        IF Type = Type::Item THEN BEGIN
          SalesLineLineDiscExists(SalesHeader,SalesLine,FALSE);
          CalcBestLineDisc(TempSalesLineDisc);
    ...
Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<OnGetCustNoForSalesHeader>
  Raised in: Codeunit<Sales Price Calc. Mgt.>.PROCEDURE<GetCustNoForSalesHeader>
    Code lines:
    CustNo := SalesHeader."Bill-to Customer No.";
    OnGetCustNoForSalesHeader(SalesHeader,CustNo); <=====================
    EXIT(CustNo);
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterFindJobJnlLinePrice>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<FindJobJnlLinePrice>
    Code lines:
    ...
            IF FoundPurchPrice OR
               NOT ((CalledByFieldNo = FIELDNO(Quantity)) OR
                    ((CalledByFieldNo = FIELDNO("Variant Code")) AND NOT PriceInSKU))
            THEN
              "Direct Unit Cost (LCY)" := TempPurchPrice."Direct Unit Cost";
            OnAfterFindJobJnlLinePriceItem(JobJnlLine); <=====================
          END;
        Type::Resource:
          BEGIN
            ResCost.INIT;
    ...
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterFindJobJnlLinePriceItem>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<FindJobJnlLinePrice>
    Code lines:
    ...
            IF FoundPurchPrice OR
               NOT ((CalledByFieldNo = FIELDNO(Quantity)) OR
                    ((CalledByFieldNo = FIELDNO("Variant Code")) AND NOT PriceInSKU))
            THEN
              "Direct Unit Cost (LCY)" := TempPurchPrice."Direct Unit Cost";
            OnAfterFindJobJnlLinePriceItem(JobJnlLine); <=====================
          END;
        Type::Resource:
          BEGIN
            ResCost.INIT;
    ...
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterFindJobJnlLinePriceResource>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<FindJobJnlLinePrice>
    Code lines:
    ...
            ConvertPriceLCYToFCY("Currency Code",ResCost."Unit Cost");
            "Direct Unit Cost (LCY)" :=
              ROUND(ResCost."Direct Unit Cost" * "Qty. per Unit of Measure",Currency."Unit-Amount Rounding Precision");
            VALIDATE("Unit Cost (LCY)",
              ROUND(ResCost."Unit Cost" * "Qty. per Unit of Measure",Currency."Unit-Amount Rounding Precision"));
            OnAfterFindJobJnlLinePriceResource(JobJnlLine); <=====================
          END;
      END;
      OnAfterFindJobJnlLinePrice(JobJnlLine,IsHandled);
      IF NOT IsHandled THEN
    ...
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterFindPurchLineDisc>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<FindPurchLineDisc>
    Code lines:
    ...
          ToPurchLineDisc := FromPurchLineDisc;
          ToPurchLineDisc.INSERT;
        UNTIL NEXT = 0;
    END;
    
    OnAfterFindPurchLineDisc(ToPurchLineDisc,FromPurchLineDisc,ItemNo,QuantityPerUoM,Quantity,ShowAll); <=====================
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterFindPurchLineLineDisc>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<FindPurchLineLineDisc>
    Code lines:
    ...
        CalcBestLineDisc(TempPurchLineDisc);
    
        "Line Discount %" := TempPurchLineDisc."Line Discount %";
      END;
    
      OnAfterFindPurchLineLineDisc(PurchLine,PurchHeader,TempPurchLineDisc); <=====================
    END;
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterFindPurchLinePrice>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<FindPurchLinePrice>
    Code lines:
    ...
               ("Prepmt. Amt. Inv." = 0)
            THEN
              "Direct Unit Cost" := TempPurchPrice."Direct Unit Cost";
          END;
      END;
      OnAfterFindPurchLinePrice(PurchLine,PurchHeader,TempPurchPrice,CalledByFieldNo); <=====================
    END;
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterFindPurchPrice>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<FindPurchPrice>
    Code lines:
    ...
          ToPurchPrice := FromPurchPrice;
          ToPurchPrice.INSERT;
        UNTIL NEXT = 0;
    END;
    
    OnAfterFindPurchPrice( <=====================
      ToPurchPrice,FromPurchPrice,VendorNo,ItemNo,VariantCode,UOM,CurrencyCode,StartingDate,ShowAll,Qty,QtyPerUOM);
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterFindReqLineDisc>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<FindReqLineDisc>
    Code lines:
    ...
        IF NOT IsHandled THEN
          FindPurchLineDisc(
            TempPurchLineDisc,"Vendor No.","No.","Variant Code",
            "Unit of Measure Code","Currency Code","Order Date",FALSE,
            "Qty. per Unit of Measure",ABS(Quantity));
        OnAfterFindReqLineDisc(ReqLine); <=====================
        CalcBestLineDisc(TempPurchLineDisc);
    
        "Line Discount %" := TempPurchLineDisc."Line Discount %";
      END;
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterFindReqLinePrice>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<FindReqLinePrice>
    Code lines:
    ...
                ((CalledByFieldNo = FIELDNO("Variant Code")) AND NOT PriceInSKU))
        THEN
          "Direct Unit Cost" := TempPurchPrice."Direct Unit Cost";
      END;
    
    OnAfterFindReqLinePrice(ReqLine,TempPurchPrice,CalledByFieldNo); <=====================
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterGetPurchLinePrice>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<GetPurchLinePrice>
    Code lines:
    ...
        ConvertPriceLCYToFCY(TempPurchPrice."Currency Code",TempPurchPrice."Direct Unit Cost");
    
        VALIDATE("Direct Unit Cost",TempPurchPrice."Direct Unit Cost");
      END;
    
    OnAfterGetPurchLinePrice(PurchHeader,PurchLine,TempPurchPrice); <=====================
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterJobJnlLineFindResCost>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<FindJobJnlLinePrice>
    Code lines:
    ...
          BEGIN
            ResCost.INIT;
            ResCost.Code := "No.";
            ResCost."Work Type Code" := "Work Type Code";
            CODEUNIT.RUN(CODEUNIT::"Resource-Find Cost",ResCost);
            OnAfterJobJnlLineFindResCost(JobJnlLine,CalledByFieldNo,ResCost); <=====================
            ConvertPriceLCYToFCY("Currency Code",ResCost."Unit Cost");
            "Direct Unit Cost (LCY)" :=
              ROUND(ResCost."Direct Unit Cost" * "Qty. per Unit of Measure",Currency."Unit-Amount Rounding Precision");
            VALIDATE("Unit Cost (LCY)",
    ...
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterJobPlanningLineFindResCost>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<FindJobPlanningLinePrice>
    Code lines:
    ...
          BEGIN
            ResCost.INIT;
            ResCost.Code := "No.";
            ResCost."Work Type Code" := "Work Type Code";
            CODEUNIT.RUN(CODEUNIT::"Resource-Find Cost",ResCost);
            OnAfterJobPlanningLineFindResCost(JobPlanningLine,CalledByFieldNo,ResCost); <=====================
            ConvertPriceLCYToFCY("Currency Code",ResCost."Unit Cost");
            "Direct Unit Cost (LCY)" := ROUND(ResCost."Direct Unit Cost" * "Qty. per Unit of Measure",
                Currency."Unit-Amount Rounding Precision");
            VALIDATE("Unit Cost (LCY)",ROUND(ResCost."Unit Cost" * "Qty. per Unit of Measure",
    ...
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterPurchLineLineDiscExists>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<PurchLineLineDiscExists>
    Code lines:
    ...
        IF NOT IsHandled THEN
          FindPurchLineDisc(
            TempPurchLineDisc,"Pay-to Vendor No.","No.","Variant Code","Unit of Measure Code",
            PurchHeader."Currency Code",PurchHeaderStartDate(PurchHeader,DateCaption),ShowAll,
            "Qty. per Unit of Measure",Quantity);
        OnAfterPurchLineLineDiscExists(PurchLine); <=====================
        EXIT(TempPurchLineDisc.FIND('-'));
      END;
    EXIT(FALSE);
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnAfterPurchLinePriceExists>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<PurchLinePriceExists>
    Code lines:
    ...
        OnBeforePurchLinePriceExists(PurchLine,PurchHeader,TempPurchPrice,ShowAll,IsHandled);
        IF NOT IsHandled THEN
          FindPurchPrice(
            TempPurchPrice,"Pay-to Vendor No.","No.","Variant Code","Unit of Measure Code",
            PurchHeader."Currency Code",PurchHeaderStartDate(PurchHeader,DateCaption),ShowAll);
        OnAfterPurchLinePriceExists(PurchLine); <=====================
        EXIT(TempPurchPrice.FIND('-'));
      END;
    EXIT(FALSE);
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnBeforeConvertPriceToVAT>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<ConvertPriceToVAT>
    Code lines:
    IF FromPriceInclVAT THEN BEGIN
      IF NOT VATPostingSetup.GET(FromVATBusPostingGr,FromVATProdPostingGr) THEN
        VATPostingSetup.INIT;
      OnBeforeConvertPriceToVAT(VATPostingSetup); <=====================
    
      IF PricesInclVAT THEN BEGIN
        IF VATBusPostingGr <> FromVATBusPostingGr THEN
          UnitPrice := UnitPrice * (100 + VATPerCent) / (100 + VATPostingSetup."VAT %");
      END ELSE
        UnitPrice := UnitPrice / (1 + VATPostingSetup."VAT %" / 100);
    ...
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnBeforeFindPurchPrice>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<FindPurchPrice>
    Code lines:
    OnBeforeFindPurchPrice( <=====================
      ToPurchPrice,FromPurchPrice,VendorNo,ItemNo,VariantCode,UOM,CurrencyCode,StartingDate,ShowAll,Qty,QtyPerUOM);
    
    WITH FromPurchPrice DO BEGIN
      SETRANGE("Item No.",ItemNo);
      SETRANGE("Vendor No.",VendorNo);
      SETFILTER("Ending Date",'%1|>=%2',0D,StartingDate);
      SETFILTER("Variant Code",'%1|%2',VariantCode,'');
      IF NOT ShowAll THEN BEGIN
        SETRANGE("Starting Date",0D,StartingDate);
    ...
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnBeforeFindReqLineDisc>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<FindReqLineDisc>
    Code lines:
    ...
    
      TESTFIELD("Qty. per Unit of Measure");
    
      IF Type = Type::Item THEN BEGIN
        IsHandled := FALSE;
        OnBeforeFindReqLineDisc(ReqLine,TempPurchLineDisc,IsHandled); <=====================
        IF NOT IsHandled THEN
          FindPurchLineDisc(
            TempPurchLineDisc,"Vendor No.","No.","Variant Code",
            "Unit of Measure Code","Currency Code","Order Date",FALSE,
    ...
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnBeforeFindReqLinePrice>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<FindReqLinePrice>
    Code lines:
    ...
    
        Item.GET("No.");
        PriceInSKU := SKU.GET("Location Code","No.","Variant Code");
    
        IsHandled := FALSE;
        OnBeforeFindReqLinePrice(TempPurchPrice,ReqLine,IsHandled); <=====================
        IF NOT IsHandled THEN
          FindPurchPrice(
            TempPurchPrice,VendorNo,"No.","Variant Code",
            "Unit of Measure Code","Currency Code","Order Date",FALSE);
    ...
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnBeforePurchLineLineDiscExists>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<PurchLineLineDiscExists>
    Code lines:
    WITH PurchLine DO
      IF (Type = Type::Item) AND Item.GET("No.") THEN BEGIN
        IsHandled := FALSE;
        OnBeforePurchLineLineDiscExists(PurchLine,PurchHeader,TempPurchLineDisc,ShowAll,IsHandled); <=====================
        IF NOT IsHandled THEN
          FindPurchLineDisc(
            TempPurchLineDisc,"Pay-to Vendor No.","No.","Variant Code","Unit of Measure Code",
            PurchHeader."Currency Code",PurchHeaderStartDate(PurchHeader,DateCaption),ShowAll,
            "Qty. per Unit of Measure",Quantity);
        OnAfterPurchLineLineDiscExists(PurchLine);
    ...
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnBeforePurchLinePriceExists>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<PurchLinePriceExists>
    Code lines:
    WITH PurchLine DO
      IF (Type = Type::Item) AND Item.GET("No.") THEN BEGIN
        IsHandled := FALSE;
        OnBeforePurchLinePriceExists(PurchLine,PurchHeader,TempPurchPrice,ShowAll,IsHandled); <=====================
        IF NOT IsHandled THEN
          FindPurchPrice(
            TempPurchPrice,"Pay-to Vendor No.","No.","Variant Code","Unit of Measure Code",
            PurchHeader."Currency Code",PurchHeaderStartDate(PurchHeader,DateCaption),ShowAll);
        OnAfterPurchLinePriceExists(PurchLine);
        EXIT(TempPurchPrice.FIND('-'));
    ...
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnCalcBestDirectUnitCostOnAfterSetUnitCost>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<CalcBestDirectUnitCost>
    Code lines:
    ...
          BestPurchPrice."Direct Unit Cost" := Item."Last Direct Cost";
      END;
      ConvertPriceToVAT(FALSE,Item."VAT Prod. Posting Group",'',BestPurchPrice."Direct Unit Cost");
      ConvertPriceToUoM('',BestPurchPrice."Direct Unit Cost");
      ConvertPriceLCYToFCY('',BestPurchPrice."Direct Unit Cost");
      OnCalcBestDirectUnitCostOnAfterSetUnitCost(BestPurchPrice); <=====================
    END;
    
    PurchPrice := BestPurchPrice;
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnCalcBestDirectUnitCostOnBeforeNoPriceFound>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<CalcBestDirectUnitCost>
    Code lines:
    ...
    END;
    
    // No price found in agreement
    IF NOT BestPurchPriceFound THEN BEGIN
      IsHandled := FALSE;
      OnCalcBestDirectUnitCostOnBeforeNoPriceFound(BestPurchPrice,Item,IsHandled); <=====================
      IF NOT IsHandled THEN BEGIN
        PriceInSKU := PriceInSKU AND (SKU."Last Direct Cost" <> 0);
        IF PriceInSKU THEN
          BestPurchPrice."Direct Unit Cost" := SKU."Last Direct Cost"
    ...
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnFindItemJnlLinePriceOnBeforeCalcBestDirectUnitCost>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<FindItemJnlLinePrice>
    Code lines:
    ...
    
      FindPurchPrice(
        TempPurchPrice,'',"Item No.","Variant Code",
        "Unit of Measure Code",'',"Posting Date",FALSE);
    
      OnFindItemJnlLinePriceOnBeforeCalcBestDirectUnitCost(ItemJnlLine,TempPurchPrice); <=====================
      CalcBestDirectUnitCost(TempPurchPrice);
    
      IF FoundPurchPrice OR
         NOT ((CalledByFieldNo = FIELDNO(Quantity)) OR
    ...
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnFindJobJnlLinePriceOnBeforeCalcBestDirectUnitCost>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<FindJobJnlLinePrice>
    Code lines:
    ...
            FindPurchPrice(
              TempPurchPrice,'',"No.","Variant Code","Unit of Measure Code","Country/Region Code","Posting Date",FALSE);
            PricesInCurrency := FALSE;
            GLSetup.GET;
    
            OnFindJobJnlLinePriceOnBeforeCalcBestDirectUnitCost(JobJnlLine,TempPurchPrice); <=====================
            CalcBestDirectUnitCost(TempPurchPrice);
            SetCurrency("Currency Code","Currency Factor","Posting Date");
    
            IF FoundPurchPrice OR
    ...
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnGetPurchLineLineDiscOnAfterLookup>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<GetPurchLineLineDisc>
    Code lines:
    ...
    WITH PurchLine DO
      IF PAGE.RUNMODAL(PAGE::"Get Purchase Line Disc.",TempPurchLineDisc) = ACTION::LookupOK THEN
        BEGIN
        SetCurrency(PurchHeader."Currency Code",0,0D);
        SetUoM(ABS(Quantity),"Qty. per Unit of Measure");
        OnGetPurchLineLineDiscOnAfterLookup(PurchHeader,PurchLine,TempPurchLineDisc); <=====================
    
        IF NOT IsInMinQty(TempPurchLineDisc."Unit of Measure Code",TempPurchLineDisc."Minimum Quantity") THEN
          ERROR(
            Text000,FIELDCAPTION(Quantity),
    ...
Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<OnGetPurchLinePriceOnAfterLookup>
  Raised in: Codeunit<Purch. Price Calc. Mgt.>.PROCEDURE<GetPurchLinePrice>
    Code lines:
    ...
    WITH PurchLine DO
      IF PAGE.RUNMODAL(PAGE::"Get Purchase Price",TempPurchPrice) = ACTION::LookupOK THEN BEGIN
        SetVAT(PurchHeader."Prices Including VAT","VAT %","VAT Bus. Posting Group");
        SetUoM(ABS(Quantity),"Qty. per Unit of Measure");
        SetCurrency(PurchHeader."Currency Code",PurchHeader."Currency Factor",PurchHeaderExchDate(PurchHeader));
        OnGetPurchLinePriceOnAfterLookup(PurchHeader,PurchLine,TempPurchPrice); <=====================
    
        IF NOT IsInMinQty(TempPurchPrice."Unit of Measure Code",TempPurchPrice."Minimum Quantity") THEN
          ERROR(
            Text000,
    ...
Codeunit<Find Record Management>.PROCEDURE<OnAfterFindRecordByDescriptionAndView>
  Raised in: Codeunit<Find Record Management>.PROCEDURE<FindRecordByDescriptionAndView>
    Code lines:
    ...
      EXIT(1);
    END;
    
    // Try find for extension
    MatchCount := 0;
    OnAfterFindRecordByDescriptionAndView(Result,Type,RecRef,SearchFieldRef,SearchFieldNo,SearchText,MatchCount); <=====================
    IF MatchCount <> 0 THEN
      EXIT(MatchCount);
    
    // Not found
Codeunit<Find Record Management>.PROCEDURE<OnBeforeFindNoFromTypedValue>
  Raised in: Codeunit<Find Record Management>.PROCEDURE<FindNoFromTypedValue>
    Code lines:
    OnBeforeFindNoFromTypedValue(Type,Value,FoundNo); <=====================
    IF FoundNo <> '' THEN
      EXIT(FoundNo);
    
    IF Type = Type::Item THEN
      EXIT(Item.GetItemNo(Value));
    
    FoundNo := FindNoByDescription(Type,Value,UseDefaultTableRelationFilters);
    IF FoundNo <> '' THEN
      EXIT(FoundNo);
Codeunit<Find Record Management>.PROCEDURE<OnBeforeFindRecordByDescriptionAndView>
  Raised in: Codeunit<Find Record Management>.PROCEDURE<FindRecordByDescriptionAndView>
    Code lines:
    ...
    IF SearchFieldNo[3] <> 0 THEN
      SearchFieldRef[3] := RecRef.FIELD(SearchFieldNo[3]);
    
    IsHandled := FALSE;
    MatchCount := 0;
    OnBeforeFindRecordByDescriptionAndView(Result,Type,RecRef,SearchFieldRef,SearchText,RecordView,MatchCount,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(MatchCount);
    
    // Try GET(SearchText)
    ...
Codeunit<Find Record Management>.PROCEDURE<OnBeforeFindRecordContainingSearchString>
  Raised in: Codeunit<Find Record Management>.PROCEDURE<FindRecordByDescriptionAndView>
    Code lines:
    ...
    RecFilterContains := '''@*' + RecWithoutQuote + '*''';
    SearchFieldRef[1].SETFILTER(RecFilterContains);
    SearchFieldRef[2].SETFILTER(RecFilterContains);
    IF SearchFieldNo[3] <> 0 THEN
      SearchFieldRef[3].SETFILTER(RecFilterContains);
    OnBeforeFindRecordContainingSearchString(Type,RecRef,RecFilterContains); <=====================
    IF RecRef.FINDFIRST THEN BEGIN
      Result := SearchFieldRef[1].VALUE;
      EXIT(RecRef.COUNT);
    END;
    ...
Codeunit<Find Record Management>.PROCEDURE<OnBeforeFindRecordStartingWithSearchString>
  Raised in: Codeunit<Find Record Management>.PROCEDURE<FindRecordByDescriptionAndView>
    Code lines:
    ...
    // Try FINDFIRST "No." OR "Description" by mask "@Search string ?*"
    RecRef.FILTERGROUP := -1;
    RecFilterFromStart := '''@' + RecWithoutQuote + '*''';
    SearchFieldRef[1].SETFILTER(RecFilterFromStart);
    SearchFieldRef[2].SETFILTER(RecFilterFromStart);
    OnBeforeFindRecordStartingWithSearchString(Type,RecRef,RecFilterFromStart); <=====================
    IF RecRef.FINDFIRST THEN BEGIN
      Result := SearchFieldRef[1].VALUE;
      EXIT(1);
    END;
    ...
Codeunit<Campaign Target Group Mgt>.PROCEDURE<OnBeforeActivateCampaign>
  Raised in: Codeunit<Campaign Target Group Mgt>.PROCEDURE<ActivateCampaign>
    Code lines:
    IsHandled := FALSE;
    OnBeforeActivateCampaign(Campaign,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SalesPrice.SETCURRENTKEY("Sales Type","Sales Code");
    SalesPrice.SETRANGE("Sales Type",SalesPrice."Sales Type"::Campaign);
    SalesPrice.SETRANGE("Sales Code",Campaign."No.");
    SalesLineDisc.SETCURRENTKEY("Sales Type","Sales Code");
    SalesLineDisc.SETRANGE("Sales Type",SalesLineDisc."Sales Type"::Campaign);
    ...
Codeunit<Analysis Report Management>.PROCEDURE<OnAfterFilterItemAnalysisViewBudgetEntry>
  Raised in: Codeunit<Analysis Report Management>.PROCEDURE<FilterItemAnalyViewBudgEntry>
    Code lines:
    ...
        COPYFILTER("Dimension 3 Filter",ItemAnalysisViewBudgEntry."Dimension 3 Value Code");
      FILTERGROUP := 0;
      ItemAnalysisViewBudgEntry.FILTERGROUP := 0;
    END;
    
    OnAfterFilterItemAnalysisViewBudgetEntry(ItemStatisticsBuf,ItemAnalysisViewBudgEntry); <=====================
Codeunit<Analysis Report Management>.PROCEDURE<OnAfterFilterItemAnalysisViewEntry>
  Raised in: Codeunit<Analysis Report Management>.PROCEDURE<FilterItemAnalyViewEntry>
    Code lines:
    ...
        COPYFILTER("Dimension 3 Filter",ItemAnalysisViewEntry."Dimension 3 Value Code");
      FILTERGROUP := 0;
      ItemAnalysisViewEntry.FILTERGROUP := 0;
    END;
    
    OnAfterFilterItemAnalysisViewEntry(ItemStatisticsBuf,ItemAnalysisViewEntry); <=====================
Codeunit<Analysis Report Management>.PROCEDURE<OnAfterFilterItemBudgetEntry>
  Raised in: Codeunit<Analysis Report Management>.PROCEDURE<FilterItemBudgetEntry>
    Code lines:
    ...
        COPYFILTER("Source No. Filter",ItemBudgetEntry."Source No.");
      END ELSE
        ItemBudgetEntry.SETCURRENTKEY("Analysis Area","Budget Name","Item No.");
    END;
    
    OnAfterFilterItemBudgetEntry(ItemStatisticsBuf,ItemBudgetEntry); <=====================
Codeunit<Analysis Report Management>.PROCEDURE<OnAfterFilterItemLedgEntry>
  Raised in: Codeunit<Analysis Report Management>.PROCEDURE<FilterItemLedgEntry>
    Code lines:
    ...
        COPYFILTER("Source No. Filter",ItemLedgEntry."Source No.");
      END ELSE
        ItemLedgEntry.SETCURRENTKEY("Item No.","Entry Type","Variant Code","Drop Shipment","Location Code","Posting Date");
    END;
    
    OnAfterFilterItemLedgEntry(ItemStatisticsBuf,ItemLedgEntry); <=====================
Codeunit<Analysis Report Management>.PROCEDURE<OnAfterFilterValueEntry>
  Raised in: Codeunit<Analysis Report Management>.PROCEDURE<FilterValueEntry>
    Code lines:
    ...
        COPYFILTER("Source No. Filter",ValueEntry."Source No.");
      END ELSE
        ValueEntry.SETCURRENTKEY("Item No.","Posting Date");
    END;
    
    OnAfterFilterValueEntry(ItemStatisticsBuf,ValueEntry); <=====================
Codeunit<Analysis Report Management>.PROCEDURE<OnAfterSetItemColumnFilters>
  Raised in: Codeunit<Analysis Report Management>.PROCEDURE<SetItemColumnFilters>
    Code lines:
    ...
            FiscalStartDate2,
            AccountingPeriodMgt.FindEndOfFiscalYear(FiscalStartDate2));
      END;
    END;
    
    OnAfterSetItemColumnFilters(ItemStatisticsBuf,AnalysisColumn); <=====================
Codeunit<Analysis Report Management>.PROCEDURE<OnAfterSetItemRowFilters>
  Raised in: Codeunit<Analysis Report Management>.PROCEDURE<SetItemRowFilters>
    Code lines:
    ...
            SetGroupDimFilter(ItemStatisticsBuf,InventorySetup."Item Group Dimension Code",Range);
          END;
      END;
    END;
    
    OnAfterSetItemRowFilters(ItemStatisticsBuf,AnalysisLine); <=====================
Codeunit<Update Item Analysis View>.PROCEDURE<OnAfterInitializeTempItemAnalysisViewEntry>
  Raised in: Codeunit<Update Item Analysis View>.PROCEDURE<UpdateAnalysisViewEntry>
    Code lines:
    ...
    TempItemAnalysisViewEntry."Dimension 1 Value Code" := DimValue1;
    TempItemAnalysisViewEntry."Dimension 2 Value Code" := DimValue2;
    TempItemAnalysisViewEntry."Dimension 3 Value Code" := DimValue3;
    TempItemAnalysisViewEntry."Entry No." := EntryNo;
    
    OnAfterInitializeTempItemAnalysisViewEntry(TempItemAnalysisViewEntry,ItemAnalysisView); <=====================
    
    IF TempItemAnalysisViewEntry.FIND THEN BEGIN
      IF (ItemAnalysisViewSource.EntryType = ItemAnalysisViewSource.EntryType::"Direct Cost") AND
         (ItemAnalysisViewSource.ItemChargeNo = '')
    ...
Codeunit<Update Item Analysis View>.PROCEDURE<OnAfterUpdateAll>
  Raised in: Codeunit<Update Item Analysis View>.PROCEDURE<UpdateAll>
    Code lines:
    ...
    IF ItemAnalysisView2.FINDSET THEN
      REPEAT
        UpdateOne(ItemAnalysisView2,Which,ItemAnalysisView2."Last Entry No." < LastValueEntryNo - 1000);
      UNTIL ItemAnalysisView2.NEXT = 0;
    
    OnAfterUpdateAll(Which,DirectlyFromPosting); <=====================
Codeunit<Update Item Analysis View>.PROCEDURE<OnBeforeUpdateAll>
  Raised in: Codeunit<Update Item Analysis View>.PROCEDURE<UpdateAll>
    Code lines:
    IsHandled := FALSE;
    OnBeforeUpdateAll(IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    ItemAnalysisView2.SETRANGE(Blocked,FALSE);
    IF DirectlyFromPosting THEN
      ItemAnalysisView2.SETRANGE("Update on Posting",TRUE);
    
    IF ItemAnalysisView2.ISEMPTY THEN
    ...
Codeunit<Update Item Analysis View>.PROCEDURE<OnUpdateEntriesOnAfterSetFilters>
  Raised in: Codeunit<Update Item Analysis View>.PROCEDURE<UpdateEntries>
    Code lines:
    ...
    ItemAnalysisViewSource.SETRANGE(EntryNo,ItemAnalysisView."Last Entry No." + 1,LastValueEntryNo);
    IF ItemAnalysisView."Item Filter" <> '' THEN
      ItemAnalysisViewSource.SETFILTER(ItemNo,ItemAnalysisView."Item Filter");
    IF ItemAnalysisView."Location Filter" <> '' THEN
      ItemAnalysisViewSource.SETFILTER(LocationCode,ItemAnalysisView."Location Filter");
    OnUpdateEntriesOnAfterSetFilters(ItemAnalysisView); <=====================
    ItemAnalysisViewSource.OPEN;
    
    WITH ItemAnalysisViewSource DO
      WHILE READ DO BEGIN
    ...
Codeunit<Sales Info-Pane Management>.PROCEDURE<OnAfterSetItemFilter>
  Raised in: Codeunit<Sales Info-Pane Management>.PROCEDURE<SetItemFilter>
    Code lines:
    Item.RESET;
    Item.SETRANGE("Date Filter",0D,CalcAvailabilityDate(SalesLine));
    Item.SETRANGE("Variant Filter",SalesLine."Variant Code");
    Item.SETRANGE("Location Filter",SalesLine."Location Code");
    Item.SETRANGE("Drop Shipment Filter",SalesLine."Drop Shipment");
    OnAfterSetItemFilter(Item,SalesLine); <=====================
Codeunit<Sales Info-Pane Management>.PROCEDURE<OnBeforeCalcAvailability>
  Raised in: Codeunit<Sales Info-Pane Management>.PROCEDURE<CalcAvailability>
    Code lines:
    IF GetItem(SalesLine) THEN BEGIN
      SetItemFilter(Item,SalesLine);
      IsHandled := FALSE;
      OnBeforeCalcAvailability(Item,SalesLine,AvailableQuantity,IsHandled); <=====================
      IF IsHandled THEN
        EXIT(AvailableQuantity);
    
      EVALUATE(LookaheadDateformula,'<0D>');
      EXIT(
        ConvertQty(
    ...
Codeunit<Purchases Info-Pane Management>.PROCEDURE<OnBeforeCalcAvailability>
  Raised in: Codeunit<Purchases Info-Pane Management>.PROCEDURE<CalcAvailability>
    Code lines:
    ...
      Item.SETRANGE("Variant Filter",PurchLine."Variant Code");
      Item.SETRANGE("Location Filter",PurchLine."Location Code");
      Item.SETRANGE("Drop Shipment Filter",FALSE);
    
      IsHandled := FALSE;
      OnBeforeCalcAvailability(Item,PurchLine,AvailableQuantity,IsHandled); <=====================
      IF IsHandled THEN
        EXIT(AvailableQuantity);
    
      EXIT(
    ...
Codeunit<Purch.-Explode BOM>.PROCEDURE<OnBeforeInsertExplodedPurchLine>
  Raised in: Codeunit<Purch.-Explode BOM>.PROCEDURE<ExplodeBOMCompLines>
    Code lines:
    ...
            ToPurchLine.Description := FromBOMComp.Description
          ELSE
            IF NOT ItemTranslation.GET(FromBOMComp."No.",FromBOMComp."Variant Code",PurchHeader."Language Code") THEN
              ToPurchLine.Description := FromBOMComp.Description;
    
          OnBeforeInsertExplodedPurchLine(ToPurchLine,PurchLine,FromBOMComp); <=====================
    
          IF ToPurchLine.Type = 3 THEN // Resource
            MESSAGE(Text004,FromBOMComp."No.")
          ELSE
    ...
Codeunit<Purch.-Explode BOM>.PROCEDURE<OnExplodeBOMCompLinesOnBeforeCreatePurchLine>
  Raised in: Codeunit<Purch.-Explode BOM>.PROCEDURE<ExplodeBOMCompLines>
    Code lines:
    ...
        ERROR(Text003);
    
      FromBOMComp.FIND('-');
      REPEAT
        SkipComponent := FALSE;
        OnExplodeBOMCompLinesOnBeforeCreatePurchLine(PurchLine,FromBOMComp,SkipComponent); <=====================
        IF NOT SkipComponent THEN BEGIN
          ToPurchLine.INIT;
          NextLineNo := NextLineNo + LineSpacing;
          ToPurchLine."Line No." := NextLineNo;
    ...
Codeunit<Whse. Jnl.-Register Line>.PROCEDURE<OnAfterInsertWhseEntry>
  Raised in: Codeunit<Whse. Jnl.-Register Line>.PROCEDURE<InsertWhseEntry>
    Code lines:
    ...
            Bin.MODIFY;
          END;
      END;
    END;
    
    OnAfterInsertWhseEntry(WhseEntry); <=====================
Codeunit<Whse. Jnl.-Register Line>.PROCEDURE<OnBeforeCode>
  Raised in: Codeunit<Whse. Jnl.-Register Line>.PROCEDURE<Code>
    Code lines:
    OnBeforeCode(WhseJnlLine); <=====================
    
    WITH WhseJnlLine DO BEGIN
      IF ("Qty. (Absolute)" = 0) AND ("Qty. (Base)" = 0) AND (NOT "Phys. Inventory") THEN
        EXIT;
      TESTFIELD("Item No.");
      GetLocation("Location Code");
      IF WhseEntryNo = 0 THEN BEGIN
        GlobalWhseEntry.LOCKTABLE;
        IF GlobalWhseEntry.FINDLAST THEN
    ...
Codeunit<Whse. Jnl.-Register Line>.PROCEDURE<OnBeforeInsertWhseEntry>
  Raised in: Codeunit<Whse. Jnl.-Register Line>.PROCEDURE<InsertWhseEntry>
    Code lines:
    ...
        ItemTrackingMgt.GetWhseExpirationDate("Item No.","Variant Code",Location,"Lot No.","Serial No.",ExistingExpDate);
        IF (ExistingExpDate <> 0D) AND ("Expiration Date" <> ExistingExpDate) THEN
          TESTFIELD("Expiration Date",ExistingExpDate)
      END;
    
      OnBeforeInsertWhseEntry(WhseEntry); <=====================
      INSERT;
      InsertWhseReg("Entry No.");
      IF Quantity > 0 THEN BEGIN
        IF Bin.Empty THEN BEGIN
    ...
Codeunit<Whse. Jnl.-Register Line>.PROCEDURE<OnDeleteFromBinContentOnAfterSetFiltersForBinContent>
  Raised in: Codeunit<Whse. Jnl.-Register Line>.PROCEDURE<DeleteFromBinContent>
    Code lines:
    ...
      ItemTrackingMgt.CheckWhseItemTrkgSetup(FromBinContent."Item No.",WhseSNRequired,WhseLNRequired,FALSE);
      IF WhseLNRequired THEN
        FromBinContent.SETRANGE("Lot No. Filter","Lot No.");
      IF WhseSNRequired THEN
        FromBinContent.SETRANGE("Serial No. Filter","Serial No.");
      OnDeleteFromBinContentOnAfterSetFiltersForBinContent(FromBinContent,WhseEntry); <=====================
      FromBinContent.CALCFIELDS("Quantity (Base)","Positive Adjmt. Qty. (Base)","Put-away Quantity (Base)");
      IF FromBinContent."Quantity (Base)" + "Qty. (Base)" = 0 THEN BEGIN
        WhseEntry2.SETCURRENTKEY(
          "Item No.","Bin Code","Location Code","Variant Code","Unit of Measure Code");
    ...
Codeunit<Whse. Jnl.-Register Line>.PROCEDURE<OnDeleteFromBinContentOnAfterSetFiltersForWhseEntry>
  Raised in: Codeunit<Whse. Jnl.-Register Line>.PROCEDURE<DeleteFromBinContent>
    Code lines:
    ...
        WhseEntry2.SETRANGE("Unit of Measure Code","Unit of Measure Code");
        IF WhseLNRequired THEN
          WhseEntry2.SETRANGE("Lot No.","Lot No.");
        IF WhseSNRequired THEN
          WhseEntry2.SETRANGE("Serial No.","Serial No.");
        OnDeleteFromBinContentOnAfterSetFiltersForWhseEntry(WhseEntry2,FromBinContent,WhseEntry); <=====================
        WhseEntry2.CALCSUMS(Cubage,Weight,"Qty. (Base)");
        Cubage := -WhseEntry2.Cubage;
        Weight := -WhseEntry2.Weight;
        IF WhseEntry2."Qty. (Base)" + "Qty. (Base)" <> 0 THEN
    ...
Codeunit<Whse. Jnl.-Register Line>.PROCEDURE<OnDeleteFromBinContentOnBeforeFieldError>
  Raised in: Codeunit<Whse. Jnl.-Register Line>.PROCEDURE<DeleteFromBinContent>
    Code lines:
    ...
          WhseJnlLine."Qty. (Base)" := "Qty. (Base)" * Sign;
          WhseJnlLine."Qty. (Absolute, Base)" := ABS("Qty. (Base)");
        END ELSE
          IF FromBinContent."Quantity (Base)" + "Qty. (Base)" < 0 THEN BEGIN
            IsHandled := FALSE;
            OnDeleteFromBinContentOnBeforeFieldError(FromBinContent,WhseEntry,IsHandled); <=====================
            IF NOT IsHandled THEN
              FromBinContent.FIELDERROR(
                "Quantity (Base)",
                STRSUBSTNO(Text000,FromBinContent."Quantity (Base)",-(FromBinContent."Quantity (Base)" + "Qty. (Base)")));
    ...
Codeunit<Whse. Jnl.-Register Line>.PROCEDURE<OnInitWhseEntryCopyFromWhseJnlLine>
  Raised in: Codeunit<Whse. Jnl.-Register Line>.PROCEDURE<InitWhseEntry>
    Code lines:
    ...
      END;
      WhseEntry."Warranty Date" := "Warranty Date";
      WhseEntry."Phys Invt Counting Period Code" := "Phys Invt Counting Period Code";
      WhseEntry."Phys Invt Counting Period Type" := "Phys Invt Counting Period Type";
    
      OnInitWhseEntryCopyFromWhseJnlLine(WhseEntry,WhseJnlLine,OnMovement); <=====================
    
      IF Sign > 0 THEN BEGIN
        IF BinCode <> Location."Adjustment Bin Code" THEN BEGIN
          IF NOT ToBinContent.GET(
    ...
Codeunit<WMS Management>.PROCEDURE<OnAfterCheckWhseJnlLine>
  Raised in: Codeunit<WMS Management>.PROCEDURE<CheckWhseJnlLine>
    Code lines:
    ...
        VALIDATE("Qty. (Absolute, Base)");
        MODIFY;
      END;
    END;
    
    OnAfterCheckWhseJnlLine(WhseJnlLine,SourceJnl,DecreaseQtyBase,ToTransfer); <=====================
Codeunit<WMS Management>.PROCEDURE<OnAfterCreateWhseJnlLine>
  Raised in: Codeunit<WMS Management>.PROCEDURE<CreateWhseJnlLine>
    Code lines:
    ...
      ELSE
        WhseJnlLine."Reference Document" := WhseJnlLine."Reference Document"::"Job Journal";
      WhseJnlLine."Reference No." := "Document No.";
      TransferWhseItemTrkg(WhseJnlLine,ItemJnlLine);
      WhseJnlLine.Description := Description;
      OnAfterCreateWhseJnlLine(WhseJnlLine,ItemJnlLine,ToTransfer); <=====================
      EXIT(TRUE);
    END;
Codeunit<WMS Management>.PROCEDURE<OnAfterCreateWhseJnlLineFromConsumJnl>
  Raised in: Codeunit<WMS Management>.PROCEDURE<CreateWhseJnlLineFromConsumJnl>
    Code lines:
    ...
      WhseJnlLine."Source Document" := WhseMgt.GetSourceDocument(WhseJnlLine."Source Type",WhseJnlLine."Source Subtype");
      WhseJnlLine.SetWhseDoc(WhseJnlLine."Whse. Document Type"::Production,"Order No.","Order Line No.");
      WhseJnlLine."Reference Document" := WhseJnlLine."Reference Document"::"Prod.";
      WhseJnlLine."Reference No." := "Order No.";
      TransferWhseItemTrkg(WhseJnlLine,ItemJnlLine);
      OnAfterCreateWhseJnlLineFromConsumJnl(WhseJnlLine,ItemJnlLine); <=====================
    END;
Codeunit<WMS Management>.PROCEDURE<OnAfterCreateWhseJnlLineFromOutputJnl>
  Raised in: Codeunit<WMS Management>.PROCEDURE<CreateWhseJnlLineFromOutputJnl>
    Code lines:
    ...
      WhseJnlLine."Source Document" := WhseMgt.GetSourceDocument(WhseJnlLine."Source Type",WhseJnlLine."Source Subtype");
      WhseJnlLine.SetWhseDoc(WhseJnlLine."Whse. Document Type"::Production,"Order No.","Order Line No.");
      WhseJnlLine."Reference Document" := WhseJnlLine."Reference Document"::"Prod.";
      WhseJnlLine."Reference No." := "Order No.";
      TransferWhseItemTrkg(WhseJnlLine,ItemJnlLine);
      OnAfterCreateWhseJnlLineFromOutputJnl(WhseJnlLine,ItemJnlLine); <=====================
    END;
Codeunit<WMS Management>.PROCEDURE<OnAfterSetZoneAndBins>
  Raised in: Codeunit<WMS Management>.PROCEDURE<SetZoneAndBins>
    Code lines:
    ...
              WhseJnlLine."To Bin Code" := "Bin Code";
            GetBin("Location Code",WhseJnlLine."To Bin Code");
            WhseJnlLine."To Zone Code" := Bin."Zone Code";
          END;
    
    OnAfterSetZoneAndBins(WhseJnlLine,ItemJnlLine,Location,Bin); <=====================
Codeunit<WMS Management>.PROCEDURE<OnAfterTransferWhseItemTrkg>
  Raised in: Codeunit<WMS Management>.PROCEDURE<TransferWhseItemTrkg>
    Code lines:
    ...
    IF WhseLNRequired THEN
      WhseJnlLine."Lot No." := ItemJnlLine."Lot No.";
    WhseJnlLine."Warranty Date" := ItemJnlLine."Warranty Date";
    WhseJnlLine."Expiration Date" := ItemJnlLine."Item Expiration Date";
    
    OnAfterTransferWhseItemTrkg(WhseJnlLine,ItemJnlLine); <=====================
Codeunit<WMS Management>.PROCEDURE<OnBeforeCheckItemJnlLineFieldChange>
  Raised in: Codeunit<WMS Management>.PROCEDURE<CheckItemJnlLineFieldChange>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckItemJnlLineFieldChange(ItemJnlLine,xItemJnlLine,CurrFieldCaption,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH ItemJnlLine DO BEGIN
      IF ("Order Type" = "Order Type"::Production) AND ("Entry Type" = "Entry Type"::Output) THEN
        IF ProdOrderLine.GET(ProdOrderLine.Status::Released,"Order No.","Order Line No.") THEN
          BinIsEligible := ("Location Code" = ProdOrderLine."Location Code") AND ("Bin Code" = ProdOrderLine."Bin Code");
      IF ("Order Type" = "Order Type"::Production) AND ("Entry Type" = "Entry Type"::Consumption) THEN
    ...
Codeunit<WMS Management>.PROCEDURE<OnBeforeCheckItemJnlLineLocation>
  Raised in: Codeunit<WMS Management>.PROCEDURE<CheckItemJnlLineLocation>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckItemJnlLineLocation(ItemJnlLine,xItemJnlLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH ItemJnlLine DO BEGIN
      IF "Entry Type" IN
         ["Entry Type"::"Negative Adjmt.","Entry Type"::"Positive Adjmt.","Entry Type"::Sale,"Entry Type"::Purchase]
      THEN
        IF "Location Code" <> xItemJnlLine."Location Code" THEN BEGIN
    ...
Codeunit<WMS Management>.PROCEDURE<OnBeforeCheckUserIsWhseEmployee>
  Raised in: Codeunit<WMS Management>.PROCEDURE<CheckUserIsWhseEmployee>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckUserIsWhseEmployee(Location,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF USERID <> '' THEN BEGIN
      WhseEmployee.SETRANGE("User ID",USERID);
      IF WhseEmployee.ISEMPTY THEN
        ERROR(UserIsNotWhseEmployeeErr,USERID);
    END;
Codeunit<WMS Management>.PROCEDURE<OnBeforeGetAllowedLocation>
  Raised in: Codeunit<WMS Management>.PROCEDURE<GetAllowedLocation>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetAllowedLocation(LocationCode,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(LocationCode);
    
    CheckUserIsWhseEmployee;
    IF WhseEmployee.GET(USERID,LocationCode) THEN
      EXIT(LocationCode);
    EXIT(GetDefaultLocation);
Codeunit<WMS Management>.PROCEDURE<OnBeforeGetDefaultLocation>
  Raised in: Codeunit<WMS Management>.PROCEDURE<GetDefaultLocation>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetDefaultLocation(LocationCode,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(LocationCode);
    
    IF USERID <> '' THEN BEGIN
      WhseEmployee.SETCURRENTKEY(Default);
      WhseEmployee.SETRANGE(Default,TRUE);
      WhseEmployee.SETRANGE("User ID",USERID);
      IF NOT WhseEmployee.FINDFIRST THEN
    ...
Codeunit<WMS Management>.PROCEDURE<OnBeforeLocationIsAllowed>
  Raised in: Codeunit<WMS Management>.PROCEDURE<LocationIsAllowed>
    Code lines:
    LocationAllowed := WhseEmployee.GET(USERID,LocationCode) OR (USERID = '');
    OnBeforeLocationIsAllowed(LocationCode,LocationAllowed); <=====================
    EXIT(LocationAllowed);
Codeunit<WMS Management>.PROCEDURE<OnCheckBalanceQtyToHandleOnAfterSetFilters>
  Raised in: Codeunit<WMS Management>.PROCEDURE<CheckBalanceQtyToHandle>
    Code lines:
    ...
            WhseActivLine3.COPY(WhseActivLine);
    
            WhseActivLine3.SETRANGE("Item No.","Item No.");
            WhseActivLine3.SETRANGE("Variant Code","Variant Code");
            WhseActivLine3.SetTrackingFilter("Serial No.","Lot No.");
            OnCheckBalanceQtyToHandleOnAfterSetFilters(WhseActivLine3,WhseActivLine); <=====================
    
            IF (WhseActivLine2."Action Type" = WhseActivLine2."Action Type"::Take) OR
               (WhseActivLine2.GETFILTER("Action Type") = '')
            THEN BEGIN
    ...
Codeunit<WMS Management>.PROCEDURE<OnInitWhseJnlLineCopyFromItemJnlLine>
  Raised in: Codeunit<WMS Management>.PROCEDURE<InitWhseJnlLine>
    Code lines:
    ...
      "Registering No. Series" := ItemJnlLine."Posting No. Series";
      IF Location."Directed Put-away and Pick" THEN
        CalcCubageAndWeight(
          ItemJnlLine."Item No.",ItemJnlLine."Unit of Measure Code","Qty. (Absolute)",Cubage,Weight);
    
      OnInitWhseJnlLineCopyFromItemJnlLine(WhseJnlLine,ItemJnlLine); <=====================
    END;
Codeunit<WMS Management>.PROCEDURE<OnShowSourceDocLine>
  Raised in: Codeunit<WMS Management>.PROCEDURE<ShowSourceDocLine>
    Code lines:
    ...
          ServiceLine.SETRANGE("Document No.",SourceNo);
          ServiceLine.SETRANGE("Line No.",SourceLineNo);
          PAGE.RUN(PAGE::"Service Line List",ServiceLine);
        END;
      ELSE
        OnShowSourceDocLine(SourceType,SourceSubType,SourceNo,SourceLineNo,SourceSubLineNo); <=====================
    END;
Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnAfterCheckItemAvailability>
  Raised in: Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<CheckItemAvailability>
    Code lines:
    ...
                ERROR('');
          END;
        END;
      UNTIL WhseJnlLineToPost.NEXT = 0;
    
    OnAfterCheckItemAvailability(WhseJnlLine); <=====================
Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnAfterCode>
  Raised in: Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<Code>
    Code lines:
    ...
      Window.CLOSE;
      COMMIT;
      CLEAR(WhseJnlRegisterLine);
    END;
    
    OnAfterCode(WhseJnlLine,WhseJnlBatch,WhseRegNo); <=====================
Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnAfterCollectTrackingInformation>
  Raised in: Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<Code>
    Code lines:
    ...
            IF WhseLNRequired THEN
              TESTFIELD("Lot No.");
          END;
        END;
        ItemTrackingMgt.CollectItemTrkgInfWhseJnlLine(WhseJnlLine);
        OnAfterCollectTrackingInformation(WhseJnlLine); <=====================
        IF NEXT = 0 THEN
          FIND('-');
      UNTIL "Line No." = StartLineNo;
      ItemTrackingMgt.CheckItemTrkgInfBeforePost;
    ...
Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnAfterCreateItemJnlLine>
  Raised in: Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<CreateItemJnlLine>
    Code lines:
    ...
          ItemJnlLine."Source No." := "Item No.";
          ItemJnlLine."Source Code" := "Source Code";
          ItemJnlLine."Reason Code" := "Reason Code";
          ItemJnlLine."Warehouse Adjustment" := TRUE;
          ItemJnlLine."Line No." := "Line No.";
          OnAfterCreateItemJnlLine(ItemJnlLine,WhseItemTrkgLine,WhseJnlLine2); <=====================
        END;
      END;
    END;
    
Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnAfterItemJnlPostLine>
  Raised in: Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<Code>
    Code lines:
    ...
    
        IF IsReclass("Journal Template Name") THEN
          IF CreateItemJnlLine(WhseJnlLine,ItemJnlLine) THEN
            ItemJnlPostLine.RunWithCheck(ItemJnlLine);
    
        OnAfterItemJnlPostLine(WhseJnlLine); <=====================
    
        IF IsPhysInvtCount(WhseJnlTemplate,"Phys Invt Counting Period Code","Phys Invt Counting Period Type") THEN BEGIN
          IF NOT PhysInvtCount THEN BEGIN
            PhysInvtCountMgt.InitTempItemSKUList;
    ...
Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnAfterPostJnlLines>
  Raised in: Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<Code>
    Code lines:
    ...
        UNTIL NoSeries.NEXT = 0;
    
      IF PhysInvtCount THEN
        PhysInvtCountMgt.UpdateItemSKUListPhysInvtCount;
    
      OnAfterPostJnlLines(WhseJnlBatch,WhseJnlLine,WhseRegNo); <=====================
    
      Window.CLOSE;
      COMMIT;
      CLEAR(WhseJnlRegisterLine);
    ...
Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnBeforeInsertTempHandlingSpecs>
  Raised in: Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<CreateTrackingSpecification>
    Code lines:
    ...
            ERROR(Text006);
        UNTIL WhseItemTrkgLine.NEXT = 0;
    
    IF WhseItemTrkgLine.FIND('-') THEN
      REPEAT
        OnBeforeInsertTempHandlingSpecs(WhseJnlLine,WhseItemTrkgLine); <=====================
    
        TempHandlingSpecification.INIT;
        TempHandlingSpecification.TRANSFERFIELDS(WhseItemTrkgLine);
        TempHandlingSpecification."Quantity actual Handled (Base)" := WhseItemTrkgLine."Qty. to Handle (Base)";
    ...
Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnBeforeRegisterLines>
  Raised in: Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<Code>
    Code lines:
    ...
      LineCount := 0;
      LastDocNo := '';
      LastDocNo2 := '';
      LastRegisteredDocNo := '';
      FIND('-');
      OnBeforeRegisterLines(WhseJnlLine,TempHandlingSpecification); <=====================
    
      REPEAT
        IF NOT EmptyLine AND
           (WhseJnlBatch."No. Series" <> '') AND
    ...
Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnBeforeTempHandlingSpecificationInsert>
  Raised in: Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<CreateTrackingSpecification>
    Code lines:
    ...
        OnBeforeInsertTempHandlingSpecs(WhseJnlLine,WhseItemTrkgLine);
    
        TempHandlingSpecification.INIT;
        TempHandlingSpecification.TRANSFERFIELDS(WhseItemTrkgLine);
        TempHandlingSpecification."Quantity actual Handled (Base)" := WhseItemTrkgLine."Qty. to Handle (Base)";
        OnBeforeTempHandlingSpecificationInsert(TempHandlingSpecification,WhseItemTrkgLine); <=====================
        TempHandlingSpecification.INSERT;
    
        WITH WhseJnlLine DO BEGIN
          Location.GET("Location Code");
    ...
Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnBeforeWhseJnlRegisterLineRun>
  Raised in: Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<Code>
    Code lines:
    ...
            "Item No.","Unit of Measure Code","Qty. (Absolute)",Cubage,Weight);
    
        ItemTrackingMgt.SplitWhseJnlLine(WhseJnlLine,TempWhseJnlLine2,TempHandlingSpecification,FALSE);
        IF TempWhseJnlLine2.FIND('-') THEN
          REPEAT
            OnBeforeWhseJnlRegisterLineRun(TempWhseJnlLine2); <=====================
            WhseJnlRegisterLine.RUN(TempWhseJnlLine2);
          UNTIL TempWhseJnlLine2.NEXT = 0;
    
        IF IsReclass("Journal Template Name") THEN
    ...
Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<OnCheckWhseJnlLine>
  Raised in: Codeunit<Whse. Jnl.-Register Batch>.PROCEDURE<Code>
    Code lines:
    ...
          IF WhseSNRequired THEN
            TESTFIELD("Qty. per Unit of Measure",1);
          IF WhseJnlTemplate.Type <> WhseJnlTemplate.Type::"Physical Inventory" THEN
            CreateTrackingSpecification(WhseJnlLine,TempHandlingSpecification)
          ELSE BEGIN
            OnCheckWhseJnlLine(WhseJnlLine); <=====================
            IF WhseSNRequired THEN
              TESTFIELD("Serial No.");
            IF WhseLNRequired THEN
              TESTFIELD("Lot No.");
    ...
Codeunit<Whse.-Act.-Register (Yes/No)>.PROCEDURE<OnBeforeCode>
  Raised in: Codeunit<Whse.-Act.-Register (Yes/No)>.PROCEDURE<Code>
    Code lines:
    OnBeforeCode(WhseActivLine); <=====================
    
    WITH WhseActivLine DO BEGIN
      IF ("Activity Type" = "Activity Type"::"Invt. Movement") AND
         NOT ("Source Document" IN ["Source Document"::" ",
                                    "Source Document"::"Prod. Consumption",
                                    "Source Document"::"Assembly Consumption"])
      THEN
        ERROR(Text002,"Source Document");
    
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterAssemblyLineModify>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<UpdateAssemblyLine>
    Code lines:
    ...
      ELSE
        AssemblyLine."Qty. Picked" :=
          ROUND(AssemblyLine."Qty. Picked" + "Qty. to Handle (Base)" / "Qty. per Unit of Measure");
      OnBeforeAssemblyLineModify(AssemblyLine,WhseActivityLine);
      AssemblyLine.MODIFY;
      OnAfterAssemblyLineModify(AssemblyLine); <=====================
    END;
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterAutofillQtyToHandle>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<Code>
    Code lines:
    ...
        "Last Registering No." := "Registering No.";
        "Registering No." := '';
        MODIFY;
        IF NOT HideDialog THEN
          WhseActivLine.AutofillQtyToHandle(WhseActivLine);
        OnAfterAutofillQtyToHandle(WhseActivLine); <=====================
      END;
      IF NOT HideDialog THEN
        Window.CLOSE;
      OnBeforeCommit(WhseActivHeader);
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterCheckWhseActivLine>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<CheckLines>
    Code lines:
    ...
            WhseActivLine.TESTFIELD("Unit of Measure Code");
            WhseActivLine.TESTFIELD("Bin Code");
            WhseActivLine.CheckWhseDocLine;
            UpdateTempBinContentBuffer(WhseActivLine);
          END;
          OnAfterCheckWhseActivLine(WhseActivLine); <=====================
    
          IF ((WhseActivLine."Activity Type" = WhseActivLine."Activity Type"::Pick) OR
              (WhseActivLine."Activity Type" = WhseActivLine."Activity Type"::"Invt. Pick") OR
              (WhseActivLine."Activity Type" = WhseActivLine."Activity Type"::"Invt. Movement")) AND
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterCreateRegActivHeader>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<CreateRegActivHeader>
    Code lines:
    ...
        WhseCommentLine2.Type := RegisteredType;
        WhseCommentLine2."No." := RegisteredNo;
        WhseCommentLine2.INSERT;
      UNTIL WhseCommentLine.NEXT = 0;
    
    OnAfterCreateRegActivHeader(WhseActivHeader); <=====================
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterCreateRegActivLine>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<Code>
    Code lines:
    ...
          UpdateWindow(3,'');
          UpdateWindow(4,'');
          IF Location."Bin Mandatory" THEN
            RegisterWhseJnlLine(WhseActivLine);
          CreateRegActivLine(WhseActivLine);
          OnAfterCreateRegActivLine(WhseActivLine,RegisteredWhseActivLine,RegisteredInvtMovementLine); <=====================
        UNTIL WhseActivLine.NEXT = 0;
      END;
    
      TempWhseActivLineToReserve.DELETEALL;
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterFindWhseActivLine>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<Code>
    Code lines:
    ...
      IF WhseActivLine.FIND('-') THEN
        REPEAT
          CopyWhseActivityLineToReservBuf(TempWhseActivLineToReserve,WhseActivLine);
          IF Type <> Type::Movement THEN
            UpdateWhseSourceDocLine(WhseActivLine);
          OnAfterFindWhseActivLine(WhseActivLine); <=====================
          IF WhseActivLine."Qty. Outstanding" = WhseActivLine."Qty. to Handle" THEN BEGIN
            SkipDelete := FALSE;
            OnBeforeWhseActivLineDelete(WhseActivLine,SkipDelete);
            IF NOT SkipDelete THEN
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterInitRegActLine>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<CreateRegActivLine>
    Code lines:
    ...
    END ELSE BEGIN
      RegisteredWhseActivLine.INIT;
      RegisteredWhseActivLine.TRANSFERFIELDS(WhseActivLine);
      RegisteredWhseActivLine."Activity Type" := RegisteredWhseActivHeader.Type;
      RegisteredWhseActivLine."No." := RegisteredWhseActivHeader."No.";
      OnAfterInitRegActLine(WhseActivLine,RegisteredWhseActivLine); <=====================
      RegisteredWhseActivLine.Quantity := WhseActivLine."Qty. to Handle";
      RegisteredWhseActivLine."Qty. (Base)" := WhseActivLine."Qty. to Handle (Base)";
      OnBeforeRegisteredWhseActivLineInsert(RegisteredWhseActivLine,WhseActivLine);
      RegisteredWhseActivLine.INSERT;
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterInitRegInvtMovementLine>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<CreateRegActivLine>
    Code lines:
    IF WhseActivLine."Activity Type" = WhseActivLine."Activity Type"::"Invt. Movement" THEN BEGIN
      RegisteredInvtMovementLine.INIT;
      RegisteredInvtMovementLine.TRANSFERFIELDS(WhseActivLine);
      RegisteredInvtMovementLine."No." := RegisteredInvtMovementHdr."No.";
      OnAfterInitRegInvtMovementLine(WhseActivLine,RegisteredInvtMovementLine); <=====================
      RegisteredInvtMovementLine.VALIDATE(Quantity,WhseActivLine."Qty. to Handle");
      OnBeforeRegisteredInvtMovementLineInsert(RegisteredInvtMovementLine,WhseActivLine);
      RegisteredInvtMovementLine.INSERT;
      OnAfterRegisteredInvtMovementLineInsert(RegisteredInvtMovementLine,WhseActivLine);
    END ELSE BEGIN
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterInsRegWhseItemTrkgLine>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<InsertRegWhseItemTrkgLine>
    Code lines:
    ...
    
      ItemTrackingMgt.SetRegistering(TRUE);
      ItemTrackingMgt.CalcWhseItemTrkgLine(WhseItemTrkgLine2);
      INSERT;
    END;
    OnAfterInsRegWhseItemTrkgLine(WhseActivLine,WhseItemTrkgLine2); <=====================
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterPostedWhseRcptLineModify>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<UpdatePostedWhseRcptLine>
    Code lines:
    ...
            PostedWhseRcptLine."Qty. Put Away" +
            "Qty. to Handle (Base)" / PostedWhseRcptLine."Qty. per Unit of Measure");
      PostedWhseRcptLine.Status := PostedWhseRcptLine.GetLineStatus;
      OnBeforePostedWhseRcptLineModify(PostedWhseRcptLine,WhseActivityLine);
      PostedWhseRcptLine.MODIFY;
      OnAfterPostedWhseRcptLineModify(PostedWhseRcptLine); <=====================
    END;
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterProdCompLineModify>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<UpdateProdCompLine>
    Code lines:
    ...
          ROUND(ProdCompLine."Qty. Picked" + "Qty. to Handle (Base)" / "Qty. per Unit of Measure");
      ProdCompLine."Completely Picked" :=
        ProdCompLine."Qty. Picked" = ProdCompLine."Expected Quantity";
      OnBeforeProdCompLineModify(ProdCompLine,WhseActivityLine);
      ProdCompLine.MODIFY;
      OnAfterProdCompLineModify(ProdCompLine); <=====================
    END;
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterRegisteredInvtMovementHdrInsert>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<CreateRegActivHeader>
    Code lines:
    ...
      RegisteredInvtMovementHdr.TRANSFERFIELDS(WhseActivHeader);
      RegisteredInvtMovementHdr."No." := WhseActivHeader."Registering No.";
      RegisteredInvtMovementHdr."Invt. Movement No." := WhseActivHeader."No.";
      OnBeforeRegisteredInvtMovementHdrInsert(RegisteredInvtMovementHdr,WhseActivHeader);
      RegisteredInvtMovementHdr.INSERT;
      OnAfterRegisteredInvtMovementHdrInsert(RegisteredInvtMovementHdr,WhseActivHeader); <=====================
    
      TableNameTo := WhseCommentLine."Table Name"::"Registered Invt. Movement";
      RegisteredType := 0;
      RegisteredNo := RegisteredInvtMovementHdr."No.";
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterRegisteredInvtMovementLineInsert>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<CreateRegActivLine>
    Code lines:
    ...
      RegisteredInvtMovementLine."No." := RegisteredInvtMovementHdr."No.";
      OnAfterInitRegInvtMovementLine(WhseActivLine,RegisteredInvtMovementLine);
      RegisteredInvtMovementLine.VALIDATE(Quantity,WhseActivLine."Qty. to Handle");
      OnBeforeRegisteredInvtMovementLineInsert(RegisteredInvtMovementLine,WhseActivLine);
      RegisteredInvtMovementLine.INSERT;
      OnAfterRegisteredInvtMovementLineInsert(RegisteredInvtMovementLine,WhseActivLine); <=====================
    END ELSE BEGIN
      RegisteredWhseActivLine.INIT;
      RegisteredWhseActivLine.TRANSFERFIELDS(WhseActivLine);
      RegisteredWhseActivLine."Activity Type" := RegisteredWhseActivHeader.Type;
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterRegisteredWhseActivHeaderInsert>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<CreateRegActivHeader>
    Code lines:
    ...
      RegisteredWhseActivHeader."Whse. Activity No." := WhseActivHeader."No.";
      RegisteredWhseActivHeader."Registering Date" := WORKDATE;
      RegisteredWhseActivHeader."No. Series" := WhseActivHeader."Registering No. Series";
      OnBeforeRegisteredWhseActivHeaderInsert(RegisteredWhseActivHeader,WhseActivHeader);
      RegisteredWhseActivHeader.INSERT;
      OnAfterRegisteredWhseActivHeaderInsert(RegisteredWhseActivHeader,WhseActivHeader); <=====================
    
      TableNameTo := WhseCommentLine2."Table Name"::"Rgstrd. Whse. Activity Header";
      RegisteredType := RegisteredWhseActivHeader.Type;
      RegisteredNo := RegisteredWhseActivHeader."No.";
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterRegisteredWhseActivLineInsert>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<CreateRegActivLine>
    Code lines:
    ...
      OnAfterInitRegActLine(WhseActivLine,RegisteredWhseActivLine);
      RegisteredWhseActivLine.Quantity := WhseActivLine."Qty. to Handle";
      RegisteredWhseActivLine."Qty. (Base)" := WhseActivLine."Qty. to Handle (Base)";
      OnBeforeRegisteredWhseActivLineInsert(RegisteredWhseActivLine,WhseActivLine);
      RegisteredWhseActivLine.INSERT;
      OnAfterRegisteredWhseActivLineInsert(RegisteredWhseActivLine,WhseActivLine); <=====================
    END;
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterRegisterWhseActivity>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<Code>
    Code lines:
    ...
      OnBeforeCommit(WhseActivHeader);
      COMMIT;
      CLEAR(WhseJnlRegisterLine);
    END;
    
    OnAfterRegisterWhseActivity(WhseActivHeader); <=====================
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterRegWhseItemTrkgLine>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<RegisterWhseItemTrkgLine>
    Code lines:
    ...
          WhseActivLine2."Serial No.",WhseActivLine2."Lot No.",
          WhseActivLine2."Warranty Date",WhseActivLine2."Expiration Date");
        TempTrackingSpecification."Quantity (Base)" := QtyToRegisterBase;
        OnBeforeRegWhseItemTrkgLine(WhseActivLine2,TempTrackingSpecification);
        TempTrackingSpecification.INSERT;
        OnAfterRegWhseItemTrkgLine(WhseActivLine2,TempTrackingSpecification); <=====================
      END;
    END;
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<UpdateTempTracking>
    Code lines:
    ...
        TempTrackingSpecification.Correction := TRUE;
        OnBeforeTempTrackingSpecificationInsert(TempTrackingSpecification,WhseActivLine2);
        TempTrackingSpecification.INSERT;
        Inserted := TRUE;
        TempTrackingSpecification.RESET;
        OnAfterRegWhseItemTrkgLine(WhseActivLine2,TempTrackingSpecification); <=====================
      END;
    END;
    EXIT(Inserted);
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterWhseInternalPickLineModify>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<UpdateWhseIntPickLine>
    Code lines:
    ...
        WhseInternalPickLine.VALIDATE(
          "Qty. Outstanding",WhseInternalPickLine."Qty. Outstanding" - "Qty. to Handle");
        WhseInternalPickLine.Status := WhseInternalPickLine.CalcStatusPickLine;
        OnBeforeWhseInternalPickLineModify(WhseInternalPickLine,WhseActivityLine);
        WhseInternalPickLine.MODIFY;
        OnAfterWhseInternalPickLineModify(WhseInternalPickLine); <=====================
      END;
    END;
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterWhseInternalPutAwayLineModify>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<UpdateWhseIntPutAwayLine>
    Code lines:
    ...
        WhseInternalPutAwayLine.VALIDATE(
          "Qty. Outstanding",WhseInternalPutAwayLine."Qty. Outstanding" - "Qty. to Handle");
        WhseInternalPutAwayLine.Status := WhseInternalPutAwayLine.CalcStatusPutAwayLine;
        OnBeforeWhseInternalPutAwayLineModify(WhseInternalPutAwayLine,WhseActivityLine);
        WhseInternalPutAwayLine.MODIFY;
        OnAfterWhseInternalPutAwayLineModify(WhseInternalPutAwayLine); <=====================
      END;
    END;
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnAfterWhseShptLineModify>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<UpdateWhseShptLine>
    Code lines:
    ...
    WhseShptLine.VALIDATE("Qty. to Ship",WhseShptLine."Qty. Picked" - WhseShptLine."Qty. Shipped");
    WhseShptLine."Qty. to Ship (Base)" := WhseShptLine."Qty. Picked (Base)" - WhseShptLine."Qty. Shipped (Base)";
    WhseShptLine.Status := WhseShptLine.CalcStatusShptLine;
    OnUpdateWhseShptLineOnBeforeWhseShptLineModify(WhseShptLine,WhseActivLine);
    WhseShptLine.MODIFY;
    OnAfterWhseShptLineModify(WhseShptLine); <=====================
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeAssemblyLineModify>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<UpdateAssemblyLine>
    Code lines:
    ...
      IF "Qty. per Unit of Measure" = AssemblyLine."Qty. per Unit of Measure" THEN
        AssemblyLine."Qty. Picked" := AssemblyLine."Qty. Picked" + "Qty. to Handle"
      ELSE
        AssemblyLine."Qty. Picked" :=
          ROUND(AssemblyLine."Qty. Picked" + "Qty. to Handle (Base)" / "Qty. per Unit of Measure");
      OnBeforeAssemblyLineModify(AssemblyLine,WhseActivityLine); <=====================
      AssemblyLine.MODIFY;
      OnAfterAssemblyLineModify(AssemblyLine);
    END;
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeAutoReserveForSalesLine>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<AutoReserveForSalesLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforeAutoReserveForSalesLine(TempWhseActivLineToReserve,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF TempWhseActivLineToReserve.FINDSET THEN
      REPEAT
        SalesLine.GET(
          SalesLine."Document Type"::Order,TempWhseActivLineToReserve."Source No.",TempWhseActivLineToReserve."Source Line No.");
    
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeCheckLines>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<CheckLines>
    Code lines:
    OnBeforeCheckLines(WhseActivHeader,WhseActivLine); <=====================
    
    WITH WhseActivHeader DO BEGIN
      TempBinContentBuffer.DELETEALL;
      LineCount := 0;
      IF WhseActivLine.FIND('-') THEN
        REPEAT
          LineCount := LineCount + 1;
          UpdateWindow(2,'');
          WhseActivLine.CheckBinInSourceDoc;
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeCheckQtyAvailToInsertBase>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<CheckWhseItemTrkgLine>
    Code lines:
    ...
          UNTIL TempWhseActivLine.NEXT = 0;
    
          QtyAvailToRegisterBase := CalcQtyAvailToRegisterBase(TempWhseActivLine);
          IF QtyToRegisterBase > QtyAvailToRegisterBase THEN
            QtyAvailToInsertBase -= QtyToRegisterBase - QtyAvailToRegisterBase;
          OnBeforeCheckQtyAvailToInsertBase(TempWhseActivLine,QtyAvailToInsertBase); <=====================
          IF QtyAvailToInsertBase < 0 THEN
            ERROR(
              InsufficientQtyItemTrkgErr,TempWhseActivLine."Source Line No.",TempWhseActivLine."Source Document",
              TempWhseActivLine."Source No.");
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeCheckWhseItemTrkgLine>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<CheckWhseItemTrkgLine>
    Code lines:
    OnBeforeCheckWhseItemTrkgLine(WhseActivLine); <=====================
    
    IF NOT
       ((WhseActivLine."Activity Type" = WhseActivLine."Activity Type"::Pick) OR
        (WhseActivLine."Activity Type" = WhseActivLine."Activity Type"::"Invt. Movement"))
    THEN
      EXIT;
    
    IF WhseActivLine.FIND('-') THEN
      REPEAT
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeCode>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<Code>
    Code lines:
    OnBeforeCode(WhseActivLine); <=====================
    
    WITH WhseActivHeader DO BEGIN
      WhseActivLine.SETRANGE("Activity Type",WhseActivLine."Activity Type");
      WhseActivLine.SETRANGE("No.",WhseActivLine."No.");
      WhseActivLine.SETFILTER("Qty. to Handle (Base)",'<>0');
      IF WhseActivLine.ISEMPTY THEN
        ERROR(Text003);
      CheckWhseItemTrkgLine(WhseActivLine);
    
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeCommit>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<Code>
    Code lines:
    ...
          WhseActivLine.AutofillQtyToHandle(WhseActivLine);
        OnAfterAutofillQtyToHandle(WhseActivLine);
      END;
      IF NOT HideDialog THEN
        Window.CLOSE;
      OnBeforeCommit(WhseActivHeader); <=====================
      COMMIT;
      CLEAR(WhseJnlRegisterLine);
    END;
    
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeCopyWhseActivityLineToReservBuf>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<CopyWhseActivityLineToReservBuf>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCopyWhseActivityLineToReservBuf(TempWhseActivLineToReserve,WhseActivLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT IsPickPlaceForSalesOrderTrackedItem(WhseActivLine) THEN
      EXIT;
    
    TempWhseActivLineToReserve.TRANSFERFIELDS(WhseActivLine);
    TempWhseActivLineToReserve.INSERT;
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeCreateRegActivHeader>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<CreateRegActivHeader>
    Code lines:
    OnBeforeCreateRegActivHeader(WhseActivHeader,IsHandled,RegisteredWhseActivHeader,RegisteredInvtMovementHdr); <=====================
    IF IsHandled THEN
      EXIT;
    
    TableNameFrom := WhseCommentLine."Table Name"::"Whse. Activity Header";
    IF WhseActivHeader.Type = WhseActivHeader.Type::"Invt. Movement" THEN BEGIN
      RegisteredInvtMovementHdr.INIT;
      RegisteredInvtMovementHdr.TRANSFERFIELDS(WhseActivHeader);
      RegisteredInvtMovementHdr."No." := WhseActivHeader."Registering No.";
      RegisteredInvtMovementHdr."Invt. Movement No." := WhseActivHeader."No.";
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforePostedWhseRcptLineModify>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<UpdatePostedWhseRcptLine>
    Code lines:
    ...
        PostedWhseRcptLine."Qty. Put Away" :=
          ROUND(
            PostedWhseRcptLine."Qty. Put Away" +
            "Qty. to Handle (Base)" / PostedWhseRcptLine."Qty. per Unit of Measure");
      PostedWhseRcptLine.Status := PostedWhseRcptLine.GetLineStatus;
      OnBeforePostedWhseRcptLineModify(PostedWhseRcptLine,WhseActivityLine); <=====================
      PostedWhseRcptLine.MODIFY;
      OnAfterPostedWhseRcptLineModify(PostedWhseRcptLine);
    END;
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeProdCompLineModify>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<UpdateProdCompLine>
    Code lines:
    ...
      ELSE
        ProdCompLine."Qty. Picked" :=
          ROUND(ProdCompLine."Qty. Picked" + "Qty. to Handle (Base)" / "Qty. per Unit of Measure");
      ProdCompLine."Completely Picked" :=
        ProdCompLine."Qty. Picked" = ProdCompLine."Expected Quantity";
      OnBeforeProdCompLineModify(ProdCompLine,WhseActivityLine); <=====================
      ProdCompLine.MODIFY;
      OnAfterProdCompLineModify(ProdCompLine);
    END;
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeRegisteredInvtMovementHdrInsert>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<CreateRegActivHeader>
    Code lines:
    ...
    IF WhseActivHeader.Type = WhseActivHeader.Type::"Invt. Movement" THEN BEGIN
      RegisteredInvtMovementHdr.INIT;
      RegisteredInvtMovementHdr.TRANSFERFIELDS(WhseActivHeader);
      RegisteredInvtMovementHdr."No." := WhseActivHeader."Registering No.";
      RegisteredInvtMovementHdr."Invt. Movement No." := WhseActivHeader."No.";
      OnBeforeRegisteredInvtMovementHdrInsert(RegisteredInvtMovementHdr,WhseActivHeader); <=====================
      RegisteredInvtMovementHdr.INSERT;
      OnAfterRegisteredInvtMovementHdrInsert(RegisteredInvtMovementHdr,WhseActivHeader);
    
      TableNameTo := WhseCommentLine."Table Name"::"Registered Invt. Movement";
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeRegisteredInvtMovementLineInsert>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<CreateRegActivLine>
    Code lines:
    ...
      RegisteredInvtMovementLine.INIT;
      RegisteredInvtMovementLine.TRANSFERFIELDS(WhseActivLine);
      RegisteredInvtMovementLine."No." := RegisteredInvtMovementHdr."No.";
      OnAfterInitRegInvtMovementLine(WhseActivLine,RegisteredInvtMovementLine);
      RegisteredInvtMovementLine.VALIDATE(Quantity,WhseActivLine."Qty. to Handle");
      OnBeforeRegisteredInvtMovementLineInsert(RegisteredInvtMovementLine,WhseActivLine); <=====================
      RegisteredInvtMovementLine.INSERT;
      OnAfterRegisteredInvtMovementLineInsert(RegisteredInvtMovementLine,WhseActivLine);
    END ELSE BEGIN
      RegisteredWhseActivLine.INIT;
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeRegisteredWhseActivHeaderInsert>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<CreateRegActivHeader>
    Code lines:
    ...
      RegisteredWhseActivHeader.Type := WhseActivHeader.Type;
      RegisteredWhseActivHeader."No." := WhseActivHeader."Registering No.";
      RegisteredWhseActivHeader."Whse. Activity No." := WhseActivHeader."No.";
      RegisteredWhseActivHeader."Registering Date" := WORKDATE;
      RegisteredWhseActivHeader."No. Series" := WhseActivHeader."Registering No. Series";
      OnBeforeRegisteredWhseActivHeaderInsert(RegisteredWhseActivHeader,WhseActivHeader); <=====================
      RegisteredWhseActivHeader.INSERT;
      OnAfterRegisteredWhseActivHeaderInsert(RegisteredWhseActivHeader,WhseActivHeader);
    
      TableNameTo := WhseCommentLine2."Table Name"::"Rgstrd. Whse. Activity Header";
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeRegisteredWhseActivLineInsert>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<CreateRegActivLine>
    Code lines:
    ...
      RegisteredWhseActivLine."Activity Type" := RegisteredWhseActivHeader.Type;
      RegisteredWhseActivLine."No." := RegisteredWhseActivHeader."No.";
      OnAfterInitRegActLine(WhseActivLine,RegisteredWhseActivLine);
      RegisteredWhseActivLine.Quantity := WhseActivLine."Qty. to Handle";
      RegisteredWhseActivLine."Qty. (Base)" := WhseActivLine."Qty. to Handle (Base)";
      OnBeforeRegisteredWhseActivLineInsert(RegisteredWhseActivLine,WhseActivLine); <=====================
      RegisteredWhseActivLine.INSERT;
      OnAfterRegisteredWhseActivLineInsert(RegisteredWhseActivLine,WhseActivLine);
    END;
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeRegWhseItemTrkgLine>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<RegisterWhseItemTrkgLine>
    Code lines:
    ...
        TempTrackingSpecification."Qty. per Unit of Measure" := WhseActivLine2."Qty. per Unit of Measure";
        TempTrackingSpecification.SetTracking(
          WhseActivLine2."Serial No.",WhseActivLine2."Lot No.",
          WhseActivLine2."Warranty Date",WhseActivLine2."Expiration Date");
        TempTrackingSpecification."Quantity (Base)" := QtyToRegisterBase;
        OnBeforeRegWhseItemTrkgLine(WhseActivLine2,TempTrackingSpecification); <=====================
        TempTrackingSpecification.INSERT;
        OnAfterRegWhseItemTrkgLine(WhseActivLine2,TempTrackingSpecification);
      END;
    END;
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeTempTrackingSpecificationInsert>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<UpdateTempTracking>
    Code lines:
    ...
        TempTrackingSpecification."Location Code" := "Location Code";
        TempTrackingSpecification.Description := Description;
        TempTrackingSpecification."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        TempTrackingSpecification.SetTracking("Serial No.","Lot No.","Warranty Date","Expiration Date");
        TempTrackingSpecification.Correction := TRUE;
        OnBeforeTempTrackingSpecificationInsert(TempTrackingSpecification,WhseActivLine2); <=====================
        TempTrackingSpecification.INSERT;
        Inserted := TRUE;
        TempTrackingSpecification.RESET;
        OnAfterRegWhseItemTrkgLine(WhseActivLine2,TempTrackingSpecification);
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeUpdateWhseShptLine>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<UpdateWhseShptLine>
    Code lines:
    WhseShptLine.GET(WhseDocNo,WhseDocLineNo);
    OnBeforeUpdateWhseShptLine(WhseShptLine,QtyToHandle,QtyToHandleBase,QtyPerUOM); <=====================
    WhseShptLine."Qty. Picked (Base)" :=
      WhseShptLine."Qty. Picked (Base)" + QtyToHandleBase;
    IF QtyPerUOM = WhseShptLine."Qty. per Unit of Measure" THEN
      WhseShptLine."Qty. Picked" := WhseShptLine."Qty. Picked" + QtyToHandle
    ELSE
      WhseShptLine."Qty. Picked" :=
        ROUND(WhseShptLine."Qty. Picked" + QtyToHandleBase / QtyPerUOM);
    
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeUpdateWhseSourceDocLine>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<UpdateWhseSourceDocLine>
    Code lines:
    WITH WhseActivLine DO BEGIN
      IF "Original Breakbulk" THEN
        EXIT;
    
      OnBeforeUpdateWhseSourceDocLine(WhseActivLine); <=====================
      IF ("Whse. Document Type" = "Whse. Document Type"::Shipment) AND "Assemble to Order" THEN
        WhseDocType2 := "Whse. Document Type"::Assembly
      ELSE
        WhseDocType2 := "Whse. Document Type";
      CASE WhseDocType2 OF
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeUpdWhseActivHeader>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<Code>
    Code lines:
    ...
            LineCount := LineCount + 1;
          UNTIL WhseActivLine.NEXT = 0;
        IF LineCount = 1 THEN
          OldWhseActivLine.DELETE;
      END;
      OnBeforeUpdWhseActivHeader(WhseActivHeader); <=====================
      WhseActivLine.RESET;
      WhseActivLine.SETRANGE("Activity Type",Type);
      WhseActivLine.SETRANGE("No.","No.");
      WhseActivLine.SETFILTER("Qty. Outstanding",'<>%1',0);
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeWhseActivHeaderDelete>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<Code>
    Code lines:
    ...
      WhseActivLine.SETRANGE("Activity Type",Type);
      WhseActivLine.SETRANGE("No.","No.");
      WhseActivLine.SETFILTER("Qty. Outstanding",'<>%1',0);
      IF NOT WhseActivLine.FIND('-') THEN BEGIN
        SkipDelete := FALSE;
        OnBeforeWhseActivHeaderDelete(WhseActivHeader,SkipDelete); <=====================
        IF NOT SkipDelete THEN
          DELETE(TRUE);
      END ELSE BEGIN
        "Last Registering No." := "Registering No.";
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeWhseActivLineDelete>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<Code>
    Code lines:
    ...
          IF Type <> Type::Movement THEN
            UpdateWhseSourceDocLine(WhseActivLine);
          OnAfterFindWhseActivLine(WhseActivLine);
          IF WhseActivLine."Qty. Outstanding" = WhseActivLine."Qty. to Handle" THEN BEGIN
            SkipDelete := FALSE;
            OnBeforeWhseActivLineDelete(WhseActivLine,SkipDelete); <=====================
            IF NOT SkipDelete THEN
              WhseActivLine.DELETE;
          END ELSE BEGIN
            QtyDiff := WhseActivLine."Qty. Outstanding" - WhseActivLine."Qty. to Handle";
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeWhseActivLineModify>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<Code>
    Code lines:
    ...
            IF WhseActivLine."Qty. to Handle (Base)" > QtyBaseDiff THEN // round off error- qty same, not base qty
              WhseActivLine."Qty. to Handle (Base)" := QtyBaseDiff;
            IF HideDialog THEN
              WhseActivLine.VALIDATE("Qty. to Handle",0);
            WhseActivLine.VALIDATE("Qty. Handled",WhseActivLine.Quantity - WhseActivLine."Qty. Outstanding");
            OnBeforeWhseActivLineModify(WhseActivLine); <=====================
            WhseActivLine.MODIFY;
          END;
    
          OldWhseActivLine := WhseActivLine;
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeWhseInternalPickLineModify>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<UpdateWhseIntPickLine>
    Code lines:
    ...
            ROUND(
              WhseInternalPickLine."Qty. Picked" + "Qty. to Handle (Base)" / "Qty. per Unit of Measure");
        WhseInternalPickLine.VALIDATE(
          "Qty. Outstanding",WhseInternalPickLine."Qty. Outstanding" - "Qty. to Handle");
        WhseInternalPickLine.Status := WhseInternalPickLine.CalcStatusPickLine;
        OnBeforeWhseInternalPickLineModify(WhseInternalPickLine,WhseActivityLine); <=====================
        WhseInternalPickLine.MODIFY;
        OnAfterWhseInternalPickLineModify(WhseInternalPickLine);
      END;
    END;
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeWhseInternalPutAwayLineModify>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<UpdateWhseIntPutAwayLine>
    Code lines:
    ...
              WhseInternalPutAwayLine."Qty. Put Away" +
              "Qty. to Handle (Base)" / WhseInternalPutAwayLine."Qty. per Unit of Measure");
        WhseInternalPutAwayLine.VALIDATE(
          "Qty. Outstanding",WhseInternalPutAwayLine."Qty. Outstanding" - "Qty. to Handle");
        WhseInternalPutAwayLine.Status := WhseInternalPutAwayLine.CalcStatusPutAwayLine;
        OnBeforeWhseInternalPutAwayLineModify(WhseInternalPutAwayLine,WhseActivityLine); <=====================
        WhseInternalPutAwayLine.MODIFY;
        OnAfterWhseInternalPutAwayLineModify(WhseInternalPutAwayLine);
      END;
    END;
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnBeforeWhseJnlRegisterLine>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<RegisterWhseJnlLine>
    Code lines:
    ...
          WhseJnlLine."Whse. Document Type" := WhseJnlLine."Whse. Document Type"::" ";
      END;
      IF "Serial No." <> '' THEN
        TESTFIELD("Qty. per Unit of Measure",1);
      WhseJnlLine.SetTracking("Serial No.","Lot No.","Warranty Date","Expiration Date");
      OnBeforeWhseJnlRegisterLine(WhseJnlLine,WhseActivLine); <=====================
      WhseJnlRegisterLine.RUN(WhseJnlLine);
    END;
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnInsertRegWhseItemTrkgLineOnAfterCopyFields>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<InsertRegWhseItemTrkgLine>
    Code lines:
    ...
        WhseActivLine."Serial No.",WhseActivLine."Lot No.",WhseActivLine."Warranty Date",WhseActivLine."Expiration Date");
      "Quantity (Base)" := QtyToRegisterBase;
      "Qty. per Unit of Measure" := WhseActivLine."Qty. per Unit of Measure";
      "Qty. Registered (Base)" := QtyToRegisterBase;
      "Created by Whse. Activity Line" := TRUE;
      OnInsertRegWhseItemTrkgLineOnAfterCopyFields(WhseItemTrkgLine2,WhseActivLine); <=====================
    
      ItemTrackingMgt.SetRegistering(TRUE);
      ItemTrackingMgt.CalcWhseItemTrkgLine(WhseItemTrkgLine2);
      INSERT;
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnUpdateTempBinContentBufferOnBeforeInsert>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<UpdateTempBinContentBuffer>
    Code lines:
    ...
        TempBinContentBuffer."Item No." := "Item No.";
        TempBinContentBuffer."Variant Code" := "Variant Code";
        TempBinContentBuffer."Unit of Measure Code" := UOMCode;
        TempBinContentBuffer."Lot No." := "Lot No.";
        TempBinContentBuffer."Serial No." := "Serial No.";
        OnUpdateTempBinContentBufferOnBeforeInsert(TempBinContentBuffer,WhseActivLine); <=====================
        TempBinContentBuffer.INSERT;
      END;
      Sign := 1;
      IF "Action Type" = "Action Type"::Take THEN
    ...
Codeunit<Whse.-Activity-Register>.PROCEDURE<OnUpdateWhseShptLineOnBeforeWhseShptLineModify>
  Raised in: Codeunit<Whse.-Activity-Register>.PROCEDURE<UpdateWhseShptLine>
    Code lines:
    ...
      WhseShptLine."Qty. Picked" := WhseShptLine.Quantity;
    
    WhseShptLine.VALIDATE("Qty. to Ship",WhseShptLine."Qty. Picked" - WhseShptLine."Qty. Shipped");
    WhseShptLine."Qty. to Ship (Base)" := WhseShptLine."Qty. Picked (Base)" - WhseShptLine."Qty. Shipped (Base)";
    WhseShptLine.Status := WhseShptLine.CalcStatusShptLine;
    OnUpdateWhseShptLineOnBeforeWhseShptLineModify(WhseShptLine,WhseActivLine); <=====================
    WhseShptLine.MODIFY;
    OnAfterWhseShptLineModify(WhseShptLine);
Codeunit<Replenishment>.PROCEDURE<OnBeforePickAccordingToFEFO>
  Raised in: Codeunit<Replenishment>.PROCEDURE<PickAccordingToFEFO>
    Code lines:
    IsHandled := FALSE;
    OnBeforePickAccordingToFEFO(Location,ItemNo,VariantCode,IsHandled,Result); <=====================
    IF IsHandled THEN
      EXIT(Result);
    
    IF NOT Location."Pick According to FEFO" THEN
      EXIT(FALSE);
    
    ItemTrackingMgt.CheckWhseItemTrkgSetup(ItemNo,SNRequired,LNRequired,FALSE);
    IF NOT (SNRequired OR LNRequired) THEN
    ...
Codeunit<Whse.-Shipment Release>.PROCEDURE<OnAfterRelease>
  Raised in: Codeunit<Whse.-Shipment Release>.PROCEDURE<Release>
    Code lines:
    ...
        WhsePickRqst.DELETEALL(TRUE);
    
      COMMIT;
    END;
    
    OnAfterRelease(WhseShptHeader,WhseShptLine); <=====================
Codeunit<Whse.-Shipment Release>.PROCEDURE<OnAfterReopen>
  Raised in: Codeunit<Whse.-Shipment Release>.PROCEDURE<Reopen>
    Code lines:
    ...
    
      Status := Status::Open;
      MODIFY;
    END;
    
    OnAfterReopen(WhseShptHeader); <=====================
Codeunit<Whse.-Shipment Release>.PROCEDURE<OnAfterTestWhseShptLine>
  Raised in: Codeunit<Whse.-Shipment Release>.PROCEDURE<Release>
    Code lines:
    ...
              UNTIL AsmLine.NEXT = 0;
          END;
        END;
      UNTIL WhseShptLine.NEXT = 0;
    
      OnAfterTestWhseShptLine(WhseShptHeader,WhseShptLine); <=====================
    
      Status := Status::Released;
      MODIFY;
    
    ...
Codeunit<Whse.-Shipment Release>.PROCEDURE<OnBeforeRelease>
  Raised in: Codeunit<Whse.-Shipment Release>.PROCEDURE<Release>
    Code lines:
    WITH WhseShptHeader DO BEGIN
      IF Status = Status::Released THEN
        EXIT;
    
      OnBeforeRelease(WhseShptHeader); <=====================
    
      WhseShptLine.SETRANGE("No.","No.");
      WhseShptLine.SETFILTER(Quantity,'<>0');
      IF NOT WhseShptLine.FIND('-') THEN
        ERROR(Text000,TABLECAPTION,"No.");
    ...
Codeunit<Whse.-Shipment Release>.PROCEDURE<OnBeforeReopen>
  Raised in: Codeunit<Whse.-Shipment Release>.PROCEDURE<Reopen>
    Code lines:
    WITH WhseShptHeader DO BEGIN
      IF Status = Status::Open THEN
        EXIT;
    
      OnBeforeReopen(WhseShptHeader); <=====================
    
      PickWkshLine.SETCURRENTKEY("Whse. Document Type","Whse. Document No.");
      PickWkshLine.SETRANGE("Whse. Document Type",PickWkshLine."Whse. Document Type"::Shipment);
      PickWkshLine.SETRANGE("Whse. Document No.","No.");
      IF NOT PickWkshLine.ISEMPTY THEN
    ...
Codeunit<Whse. Worksheet-Create>.PROCEDURE<OnAfterFromProdOrderCompLineCreateWhseWkshLine>
  Raised in: Codeunit<Whse. Worksheet-Create>.PROCEDURE<FromProdOrderCompLine>
    Code lines:
    ...
      IF ("Location Code" <> '') AND (ToBinCode <> '') THEN BEGIN
        Bin.GET(LocationCode,ToBinCode);
        WhseWkshLine."To Zone Code" := Bin."Zone Code";
      END;
    END;
    OnAfterFromProdOrderCompLineCreateWhseWkshLine(WhseWkshLine,ProdOrderCompLine); <=====================
    IF CreateWhseWkshLine(WhseWkshLine) THEN
      EXIT(TRUE);
Codeunit<Whse. Worksheet-Create>.PROCEDURE<OnAfterFromWhseRcptLineCreateWhseWkshLine>
  Raised in: Codeunit<Whse. Worksheet-Create>.PROCEDURE<FromWhseRcptLine>
    Code lines:
    ...
      WhseWkshLine."Qty. per From Unit of Measure" := "Qty. per Unit of Measure";
      WhseWkshLine."Whse. Document Type" := WhseWkshLine."Whse. Document Type"::Receipt;
      WhseWkshLine."Whse. Document No." := "No.";
      WhseWkshLine."Whse. Document Line No." := "Line No.";
    
      OnAfterFromWhseRcptLineCreateWhseWkshLine(WhseWkshLine,PostedWhseRcptLine); <=====================
    END;
    IF CreateWhseWkshLine(WhseWkshLine) THEN
      EXIT(TRUE);
Codeunit<Whse. Worksheet-Create>.PROCEDURE<OnAfterTransferFromWhseShptLine>
  Raised in: Codeunit<Whse. Worksheet-Create>.PROCEDURE<TransferFromWhseShptLine>
    Code lines:
    ...
      WhseWkshLine."Whse. Document Type" := WhseWkshLine."Whse. Document Type"::Shipment;
      WhseWkshLine."Whse. Document No." := "No.";
      WhseWkshLine."Whse. Document Line No." := "Line No.";
    END;
    
    OnAfterTransferFromWhseShptLine(WhseWkshLine,WhseWkshTemplateName,WhseWkshName,WhseShptLine); <=====================
Codeunit<Whse. Worksheet-Create>.PROCEDURE<OnCreateWhseWkshLineOnBeforeInsert>
  Raised in: Codeunit<Whse. Worksheet-Create>.PROCEDURE<CreateWhseWkshLine>
    Code lines:
    ...
      IF "Shelf No." = '' THEN BEGIN
        Item."No." := "Item No.";
        Item.ItemSKUGet(Item,"Location Code","Variant Code");
        "Shelf No." := Item."Shelf No.";
      END;
      OnCreateWhseWkshLineOnBeforeInsert(WhseWkshLine); <=====================
      IF INSERT THEN BEGIN
        Created := TRUE;
        ItemTrackingMgt.CheckWhseItemTrkgSetup("Item No.",SNRequired,LNRequired,FALSE);
        IF SNRequired OR LNRequired THEN
    ...
Codeunit<Whse. Worksheet-Create>.PROCEDURE<OnFromWhseInternalPickLineOnAfterTransferFields>
  Raised in: Codeunit<Whse. Worksheet-Create>.PROCEDURE<FromWhseInternalPickLine>
    Code lines:
    ...
      WhseWkshLine."Whse. Document Type" := WhseWkshLine."Whse. Document Type"::"Internal Pick";
      WhseWkshLine."Whse. Document No." := "No.";
      WhseWkshLine."Whse. Document Line No." := "Line No.";
    END;
    
    OnFromWhseInternalPickLineOnAfterTransferFields(WhseWkshLine,WhseWkshTemplateName,WhseWkshName,WhseInternalPickLine); <=====================
    
    IF CreateWhseWkshLine(WhseWkshLine) THEN
      EXIT(TRUE);
Codeunit<Whse. Worksheet-Create>.PROCEDURE<OnFromWhseInternalPutawayLineOnAfterTransferFields>
  Raised in: Codeunit<Whse. Worksheet-Create>.PROCEDURE<FromWhseInternalPutawayLine>
    Code lines:
    ...
      WhseWkshLine."Whse. Document Type" := WhseWkshLine."Whse. Document Type"::"Internal Put-away";
      WhseWkshLine."Whse. Document No." := "No.";
      WhseWkshLine."Whse. Document Line No." := "Line No.";
    END;
    
    OnFromWhseInternalPutawayLineOnAfterTransferFields(WhseWkshLine,WhseWkshTemplateName,WhseWkshName,WhseInternalPutawayLine); <=====================
    
    IF CreateWhseWkshLine(WhseWkshLine) THEN
      EXIT(TRUE);
Codeunit<Create Pick>.PROCEDURE<OnAfterBinContentExistsFilter>
  Raised in: Codeunit<Create Pick>.PROCEDURE<BinContentExists>
    Code lines:
    ...
          SETRANGE("Serial No. Filter",TempWhseItemTrackingLine."Serial No.")
        ELSE
          SETFILTER("Serial No. Filter",'%1|%2',TempWhseItemTrackingLine."Serial No.",'');
      END;
      ASCENDING(FALSE);
      OnAfterBinContentExistsFilter(BinContent); <=====================
      EXIT(FINDSET);
    END;
Codeunit<Create Pick>.PROCEDURE<OnAfterCalcQtyOnPickAndReceiveBins>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CalcTotalAvailQtyToPick>
    Code lines:
    ...
    // quantity in pick bins is considered as total quantity on the warehouse excluding receipt area and fixed receipt bin
    CalcQtyOnPickAndReceiveBins(
      QtyOnReceiveBins,QtyOnPickBins,
      ItemNo,LocationCode,VariantCode,LNRequired,LotNo,SNRequired,SerialNo,RespectLocationBins);
    
    OnAfterCalcQtyOnPickAndReceiveBins( <=====================
      SourceType,LocationCode,ItemNo,VariantCode,LotNo,SerialNo,CalledFromPickWksh,CalledFromMoveWksh,CalledFromWksh,
      QtyInWhse,QtyOnPickBins,QtyOnPutAwayBins,QtyOnOutboundBins,QtyOnReceiveBins,QtyOnDedicatedBins,QtyBlocked);
    
    IF CalledFromMoveWksh THEN BEGIN
    ...
Codeunit<Create Pick>.PROCEDURE<OnAfterCalcReservedQtyOnInventory>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CalcReservedQtyOnInventory>
    Code lines:
    ...
      DistrubuteReservedQtyByBins(TempBinContentBuffer);
      TempBinContentBuffer.CALCSUMS("Qty. to Handle (Base)");
      ReservedQty := TempBinContentBuffer."Qty. to Handle (Base)";
    END;
    
    OnAfterCalcReservedQtyOnInventory(ItemNo,LocationCode,VariantCode,LotNo,LNRequired,SerialNo,SNRequired,ReservedQty); <=====================
Codeunit<Create Pick>.PROCEDURE<OnAfterCreateTempLineCheckReservation>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateTempLine>
    Code lines:
    ...
    
    CheckReservation(
      QtyBaseMaxAvailToPick,SourceType,SourceSubType,SourceNo,SourceLineNo,SourceSubLineNo,Location."Always Create Pick Line",
      QtyPerUnitofMeasure,TotalQtytoPick,TotalQtytoPickBase);
    
    OnAfterCreateTempLineCheckReservation( <=====================
      LocationCode,ItemNo,VariantCode,UnitofMeasureCode,QtyPerUnitofMeasure,TotalQtytoPick,TotalQtytoPickBase,
      SourceType,SourceSubType,SourceNo,SourceLineNo,SourceSubLineNo);
    
    RemQtyToPick := TotalQtytoPick;
    ...
Codeunit<Create Pick>.PROCEDURE<OnAfterCreateTempWhseItemTrackingLines>
  Raised in: Codeunit<Create Pick>.PROCEDURE<SetTempWhseItemTrkgLine>
    Code lines:
    ...
          WhseItemTrkgExists := TRUE;
          WhseItemTrkgLineCount += 1;
        END;
      UNTIL WhseItemTrackingLine.NEXT = 0;
    
    OnAfterCreateTempWhseItemTrackingLines(TempWhseItemTrackingLine); <=====================
    
    SourceWhseItemTrackingLine.INIT;
    SourceWhseItemTrackingLine."Source Type" := SourceType;
    SourceWhseItemTrackingLine."Source ID" := SourceID;
    ...
Codeunit<Create Pick>.PROCEDURE<OnAfterCreateWhseDocLine>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateWhseDocLine>
    Code lines:
    ...
    END;
    
    IF Location."Bin Mandatory" THEN
      CreateWhseDocPlaceLine(WhseActivLine.Quantity,WhseActivLine."Qty. (Base)",LineNo);
    
    OnAfterCreateWhseDocLine(WhseActivLine); <=====================
Codeunit<Create Pick>.PROCEDURE<OnAfterCreateWhseDocument>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateWhseDocument>
    Code lines:
    ...
      TempWhseActivLine.SETRANGE("Zone Code");
      TempWhseActivLine.SETRANGE("Location Code");
      TempWhseActivLine.SETRANGE("Action Type");
      OnCreateWhseDocumentOnAfterSetFiltersAfterLoop(TempWhseActivLine);
      IF NOT TempWhseActivLine.FIND('-') THEN BEGIN
        OnAfterCreateWhseDocument(FirstWhseDocNo,LastWhseDocNo); <=====================
        EXIT;
      END;
    
    UNTIL FALSE;
Codeunit<Create Pick>.PROCEDURE<OnAfterFindWhseActivLine>
  Raised in: Codeunit<Create Pick>.PROCEDURE<FindWhseActivLine>
    Code lines:
    ...
      TempWhseActivLine.SETRANGE("Action Type",TempWhseActivLine."Action Type"::Take)
    ELSE
      TempWhseActivLine.SETRANGE("Action Type",TempWhseActivLine."Action Type"::" ");
    
    IF NOT TempWhseActivLine.FIND('-') THEN BEGIN
      OnAfterFindWhseActivLine(FirstWhseDocNo,LastWhseDocNo); <=====================
      EXIT(FALSE);
    END;
    
    EXIT(TRUE);
Codeunit<Create Pick>.PROCEDURE<OnAfterSetAssemblyLine>
  Raised in: Codeunit<Create Pick>.PROCEDURE<SetAssemblyLine>
    Code lines:
    ...
      AssemblyLine2."Document Type",
      AssemblyLine2."Document No.",
      AssemblyLine2."Line No.",
      0);
    
    OnAfterSetAssemblyLine(AssemblyLine); <=====================
Codeunit<Create Pick>.PROCEDURE<OnAfterSetProdOrderCompLine>
  Raised in: Codeunit<Create Pick>.PROCEDURE<SetProdOrderCompLine>
    Code lines:
    ...
      ProdOrderCompLine2.Status,
      ProdOrderCompLine2."Prod. Order No.",
      ProdOrderCompLine2."Prod. Order Line No.",
      ProdOrderCompLine2."Line No.");
    
    OnAfterSetProdOrderCompLine(ProdOrderCompLine); <=====================
Codeunit<Create Pick>.PROCEDURE<OnAfterSetValues>
  Raised in: Codeunit<Create Pick>.PROCEDURE<SetValues>
    Code lines:
    ...
    WhseSetup.GET;
    WhseSetupLocation.GetLocationSetup('',WhseSetupLocation);
    CLEAR(TempWhseActivLine);
    LastWhseItemTrkgLineNo := 0;
    
    OnAfterSetValues( <=====================
      AssignedID,SortPick,MaxNoOfSourceDoc,MaxNoOfLines,PerBin,PerZone,DoNotFillQtytoHandle,BreakbulkFilter,WhseSource);
Codeunit<Create Pick>.PROCEDURE<OnAfterSetWhseInternalPickLine>
  Raised in: Codeunit<Create Pick>.PROCEDURE<SetWhseInternalPickLine>
    Code lines:
    WhseInternalPickLine := WhseInternalPickLine2;
    TempNo := TempNo2;
    
    OnAfterSetWhseInternalPickLine(WhseInternalPickLine); <=====================
Codeunit<Create Pick>.PROCEDURE<OnAfterSetWhseShipment>
  Raised in: Codeunit<Create Pick>.PROCEDURE<SetWhseShipment>
    Code lines:
    ...
      WhseShptLine2."Source Subtype",
      WhseShptLine2."Source No.",
      WhseShptLine2."Source Line No.",
      0);
    
    OnAfterSetWhseShipment(WhseShptLine); <=====================
Codeunit<Create Pick>.PROCEDURE<OnAfterSetWhseWkshLine>
  Raised in: Codeunit<Create Pick>.PROCEDURE<SetWhseWkshLine>
    Code lines:
    ...
      WhseWkshLine2."Source Subtype",
      WhseWkshLine2."Source No.",
      WhseWkshLine2."Source Line No.",
      WhseWkshLine2."Source Subline No.");
    
    OnAfterSetWhseWkshLine(WhseWkshLine); <=====================
Codeunit<Create Pick>.PROCEDURE<OnAfterTransferItemTrkgFields>
  Raised in: Codeunit<Create Pick>.PROCEDURE<TransferItemTrkgFields>
    Code lines:
    ...
        WhseActivLine2."Expiration Date" :=
          ItemTrackingMgt.ExistingExpirationDate(
            TempWhseItemTrackingLine."Item No.",TempWhseItemTrackingLine."Variant Code",
            TempWhseItemTrackingLine."Lot No.",TempWhseItemTrackingLine."Serial No.",
            FALSE,EntriesExist);
      OnAfterTransferItemTrkgFields(WhseActivLine2,TempWhseItemTrackingLine,EntriesExist); <=====================
    END ELSE
      IF SNRequired THEN
        WhseActivLine2.TESTFIELD("Qty. per Unit of Measure",1);
Codeunit<Create Pick>.PROCEDURE<OnAfterWhseActivLineInsert>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateWhseDocLine>
    Code lines:
    ...
        WhseActivLine.Cubage := 0;
        WhseActivLine.Weight := 0;
      END;
      OnBeforeWhseActivLineInsert(WhseActivLine,WhseActivHeader);
      WhseActivLine.INSERT;
      OnAfterWhseActivLineInsert(WhseActivLine); <=====================
    END;
    
    IF Location."Bin Mandatory" THEN
      CreateWhseDocPlaceLine(WhseActivLine.Quantity,WhseActivLine."Qty. (Base)",LineNo);
    ...
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateWhseDocTakeLine>
    Code lines:
    ...
            WhseActivLine2.Cubage := 0;
            WhseActivLine2.Weight := 0;
          END;
          OnCreateWhseDocTakeLineOnBeforeWhseActivLineInsert(WhseActivLine2,WhseActivHeader,TempWhseActivLine);
          WhseActivLine2.INSERT;
          OnAfterWhseActivLineInsert(WhseActivLine2); <=====================
    
          TempWhseActivLine.DELETE;
          LineNo := LineNo + 10000;
    
    ...
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateWhseDocTakeLine>
    Code lines:
    ...
            WhseActivLine2.Cubage := 0;
            WhseActivLine2.Weight := 0;
          END;
          OnCreateWhseDocTakeLineOnBeforeWhseActivLineInsert(WhseActivLine2,WhseActivHeader,TempWhseActivLine);
          WhseActivLine2.INSERT;
          OnAfterWhseActivLineInsert(WhseActivLine2); <=====================
    
          TempWhseActivLine.DELETE;
          LineNo := LineNo + 10000;
    
    ...
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateWhseDocPlaceLine>
    Code lines:
    ...
            WhseActivLine."Qty. to Handle (Base)" := 0;
            WhseActivLine.Cubage := 0;
            WhseActivLine.Weight := 0;
          END;
          WhseActivLine.INSERT;
          OnAfterWhseActivLineInsert(WhseActivLine); <=====================
        END;
      UNTIL (TempWhseActivLine.NEXT = 0) OR (PickQtyBase = 0);
    
    TempWhseActivLine.COPY(TempWhseActivLine2);
Codeunit<Create Pick>.PROCEDURE<OnBeforeCalcPickBin>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CalcPickBin>
    Code lines:
    // Directed put-away and pick
    OnBeforeCalcPickBin( <=====================
      TempWhseActivLine,TotalQtytoPick,TotalQtytoPickBase,TempWhseItemTrackingLine,CrossDock,WhseItemTrkgExists,WhseSource,
      LocationCode,ItemNo,VariantCode,UnitofMeasureCode,ToBinCode,QtyPerUnitofMeasure);
    
    IF TotalQtytoPickBase > 0 THEN BEGIN
      ItemTrackingMgt.CheckWhseItemTrkgSetup(ItemNo,SNRequired,LNRequired,FALSE);
      FindPickBin(
        LocationCode,ItemNo,VariantCode,UnitofMeasureCode,
        ToBinCode,TempWhseActivLine,TotalQtytoPick,TempWhseItemTrackingLine,CrossDock,TotalQtytoPickBase);
    ...
Codeunit<Create Pick>.PROCEDURE<OnBeforeCalcTotalAvailQtyToPick>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CalcTotalAvailQtyToPick>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCalcTotalAvailQtyToPick( <=====================
      LocationCode,ItemNo,VariantCode,LotNo,SerialNo,SourceType,SourceSubType,SourceNo,SourceLineNo,SourceSubLineNo,
      NeededQtyBase,RespectLocationBins,CalledFromMoveWksh,CalledFromWksh,TempWhseActivLine,IsHandled,TotalAvailQtyBase);
    IF IsHandled THEN
      EXIT(TotalAvailQtyBase);
    
    // Directed put-away and pick
    GetLocation(LocationCode);
    
    ...
Codeunit<Create Pick>.PROCEDURE<OnBeforeCreateNewWhseDoc>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateNewWhseDoc>
    Code lines:
    OnBeforeCreateNewWhseDoc( <=====================
      TempWhseActivLine,OldNo,OldSourceNo,OldLocationCode,FirstWhseDocNo,LastWhseDocNo,NoOfSourceDoc,NoOfLines,WhseDocCreated);
    
    IF (TempWhseActivLine."No." <> OldNo) OR
       (TempWhseActivLine."Location Code" <> OldLocationCode)
    THEN BEGIN
      CreateWhseActivHeader(
        TempWhseActivLine."Location Code",FirstWhseDocNo,LastWhseDocNo,
        NoOfSourceDoc,NoOfLines,WhseDocCreated);
      CreateWhseDocLine;
    ...
Codeunit<Create Pick>.PROCEDURE<OnBeforeCreateTempItemTrkgLines>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateTempItemTrkgLines>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCreateTempItemTrkgLines(Location,ItemNo,VariantCode,TotalQtyToPickBase,HasExpiryDate,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT HasExpiryDate THEN
      IF TotalQtyToPickBase <= 0 THEN
        EXIT;
    
    WhseItemTrackingFEFO.SetSource(SourceType,SourceSubType,SourceNo,SourceLineNo,SourceSubLineNo);
    ...
Codeunit<Create Pick>.PROCEDURE<OnBeforeCreateWhseDocument>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateWhseDocument>
    Code lines:
    ...
      IF ShowError THEN
        ERROR(Text000,DequeueCannotBeHandledReason);
      EXIT;
    END;
    
    OnBeforeCreateWhseDocument(TempWhseActivLine,WhseSource); <=====================
    
    WhseActivHeader.LOCKTABLE;
    IF WhseActivHeader.FINDLAST THEN;
    WhseActivLine.LOCKTABLE;
    ...
Codeunit<Create Pick>.PROCEDURE<OnBeforeFindBWPickBin>
  Raised in: Codeunit<Create Pick>.PROCEDURE<FindBWPickBin>
    Code lines:
    IsSetCurrentKeyHandled := FALSE;
    OnBeforeFindBWPickBin(FromBinContent,IsSetCurrentKeyHandled); <=====================
    IF NOT IsSetCurrentKeyHandled THEN
      IF CrossDockBin THEN BEGIN
        FromBinContent.SETCURRENTKEY(
          "Location Code","Item No.","Variant Code","Cross-Dock Bin","Qty. per Unit of Measure","Bin Ranking");
        FromBinContent.ASCENDING(FALSE);
      END ELSE
        FromBinContent.SETCURRENTKEY(Default,"Location Code","Item No.","Variant Code","Bin Code");
    
    ...
Codeunit<Create Pick>.PROCEDURE<OnBeforeInsertTempItemTrkgLine>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateTempItemTrkgLines>
    Code lines:
    ...
            TotalAvailQtyToPickBase := Minimum(TotalAvailQtyToPickBase,QtyCanBePicked);
    
            TotalAvailQtyToPickBase := TotalAvailQtyToPickBase - QtyTracked;
            QtyToPickBase := 0;
    
            OnBeforeInsertTempItemTrkgLine(EntrySummary,RemQtyToPickBase,TotalAvailQtyToPickBase); <=====================
    
            IF TotalAvailQtyToPickBase > 0 THEN
              IF TotalAvailQtyToPickBase >= RemQtyToPickBase THEN BEGIN
                QtyToPickBase := RemQtyToPickBase;
    ...
Codeunit<Create Pick>.PROCEDURE<OnBeforePickStrictExpirationPosting>
  Raised in: Codeunit<Create Pick>.PROCEDURE<PickStrictExpirationPosting>
    Code lines:
    IsHandled := FALSE;
    OnBeforePickStrictExpirationPosting(ItemNo,SNRequired,LNRequired,StrictExpirationPosting,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(StrictExpirationPosting);
    
    EXIT(ItemTrackingMgt.StrictExpirationPosting(ItemNo) AND (SNRequired OR LNRequired));
Codeunit<Create Pick>.PROCEDURE<OnBeforeSetBinCodeFilter>
  Raised in: Codeunit<Create Pick>.PROCEDURE<FindBWPickBin>
    Code lines:
    ...
      SETRANGE("Cross-Dock Bin",CrossDockBin);
      SETRANGE("Location Code",LocationCode);
      SETRANGE("Item No.",ItemNo);
      SETRANGE("Variant Code",VariantCode);
      GetLocation(LocationCode);
      OnBeforeSetBinCodeFilter(BinCodeFilterText,LocationCode,ItemNo,VariantCode,ToBinCode); <=====================
      IF Location."Require Pick" AND (Location."Shipment Bin Code" <> '') THEN
        AddToFilterText(BinCodeFilterText,'&','<>',Location."Shipment Bin Code");
      IF Location."Require Put-away" AND (Location."Receipt Bin Code" <> '') THEN
        AddToFilterText(BinCodeFilterText,'&','<>',Location."Receipt Bin Code");
    ...
Codeunit<Create Pick>.PROCEDURE<OnBeforeTempWhseActivLineInsert>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateTempActivityLine>
    Code lines:
    ...
      TransferItemTrkgFields(TempWhseActivLine,TempWhseItemTrackingLine);
    
      IF (BreakBulkNo = 0) AND (ActionType <> 2) THEN
        TotalQtyPickedBase += QtyToPickBase;
    
      OnBeforeTempWhseActivLineInsert(TempWhseActivLine,ActionType); <=====================
      INSERT;
    END;
Codeunit<Create Pick>.PROCEDURE<OnBeforeTempWhseItemTrackingLineModify>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateTempLine>
    Code lines:
    ...
            END;
            NewQtyToHandle :=
              ROUND(RemQtyToPick / RemQtyToPickBase * TempWhseItemTrackingLine."Qty. to Handle (Base)",UOMMgt.QtyRndPrecision);
            IF TempWhseItemTrackingLine."Qty. to Handle" <> NewQtyToHandle THEN BEGIN
              TempWhseItemTrackingLine."Qty. to Handle" := NewQtyToHandle;
              OnBeforeTempWhseItemTrackingLineModify(TempWhseItemTrackingLine); <=====================
              TempWhseItemTrackingLine.MODIFY;
            END;
    
            QtyToPick := TempWhseItemTrackingLine."Qty. to Handle";
    ...
Codeunit<Create Pick>.PROCEDURE<OnBeforeTempWhseItemTrkgLineInsert>
  Raised in: Codeunit<Create Pick>.PROCEDURE<InsertTempItemTrkgLine>
    Code lines:
    ...
      "Source Type" := SourceWhseItemTrackingLine."Source Type";
      "Source Batch Name" := SourceWhseItemTrackingLine."Source Batch Name";
      "Source Prod. Order Line" := SourceWhseItemTrackingLine."Source Prod. Order Line";
      "Source Ref. No." := SourceWhseItemTrackingLine."Source Ref. No.";
      VALIDATE("Quantity (Base)",QuantityBase);
      OnBeforeTempWhseItemTrkgLineInsert(TempWhseItemTrackingLine,SourceWhseItemTrackingLine,EntrySummary); <=====================
      INSERT;
      LastWhseItemTrkgLineNo := "Entry No.";
      WhseItemTrkgExists := TRUE;
    END;
Codeunit<Create Pick>.PROCEDURE<OnBeforeWhseActivHeaderInsert>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateWhseActivHeader>
    Code lines:
    ...
    WhseActivHeader."Location Code" := LocationCode;
    IF AssignedID <> '' THEN
      WhseActivHeader.VALIDATE("Assigned User ID",AssignedID);
    WhseActivHeader."Sorting Method" := SortPick;
    WhseActivHeader."Breakbulk Filter" := BreakbulkFilter;
    OnBeforeWhseActivHeaderInsert(WhseActivHeader); <=====================
    WhseActivHeader.INSERT(TRUE);
    
    NoOfLines := 1 ;
    NoOfSourceDoc := 1;
    ...
Codeunit<Create Pick>.PROCEDURE<OnBeforeWhseActivLineInsert>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateWhseDocLine>
    Code lines:
    ...
        WhseActivLine."Qty. to Handle" := 0;
        WhseActivLine."Qty. to Handle (Base)" := 0;
        WhseActivLine.Cubage := 0;
        WhseActivLine.Weight := 0;
      END;
      OnBeforeWhseActivLineInsert(WhseActivLine,WhseActivHeader); <=====================
      WhseActivLine.INSERT;
      OnAfterWhseActivLineInsert(WhseActivLine);
    END;
    
    ...
Codeunit<Create Pick>.PROCEDURE<OnCalcAvailQtyOnFindBreakBulkBin>
  Raised in: Codeunit<Create Pick>.PROCEDURE<FindBreakBulkBin>
    Code lines:
    ...
                  (UseForReplenishment(FromBinContent) AND (WhseSource = WhseSource::"Movement Worksheet")))
              THEN BEGIN
                // Check and use bulk that has previously been broken
                QtyAvailableBase := CalcBinAvailQtyInBreakbulk(TempWhseActivLine2,FromBinContent,ToUOMCode);
    
                OnCalcAvailQtyOnFindBreakBulkBin( <=====================
                  TRUE,ItemNo,VariantCode,SNRequired,LNRequired,WhseItemTrkgExists,
                  TempWhseItemTrackingLine."Lot No.",TempWhseItemTrackingLine."Serial No.","Location Code","Bin Code",
                  SourceType,SourceSubType,SourceNo,SourceLineNo,SourceSubLineNo,TotalQtytoPickBase,QtyAvailableBase);
    
    ...
  Raised in: Codeunit<Create Pick>.PROCEDURE<FindBreakBulkBin>
    Code lines:
    ...
                  (UseForReplenishment(FromBinContent) AND (WhseSource = WhseSource::"Movement Worksheet")))
              THEN BEGIN
                // Check and use bulk that has previously been broken
                QtyAvailableBase := CalcBinAvailQtyInBreakbulk(TempWhseActivLine2,FromBinContent,ToUOMCode);
    
                OnCalcAvailQtyOnFindBreakBulkBin( <=====================
                  TRUE,ItemNo,VariantCode,SNRequired,LNRequired,WhseItemTrkgExists,
                  TempWhseItemTrackingLine."Lot No.",TempWhseItemTrackingLine."Serial No.","Location Code","Bin Code",
                  SourceType,SourceSubType,SourceNo,SourceLineNo,SourceSubLineNo,TotalQtytoPickBase,QtyAvailableBase);
    
    ...
Codeunit<Create Pick>.PROCEDURE<OnCalcAvailQtyOnFindBWPickBin>
  Raised in: Codeunit<Create Pick>.PROCEDURE<FindBWPickBin>
    Code lines:
    ...
          REPEAT
            QtyAvailableBase :=
              CalcQtyAvailToPick(0) -
              CalcPickQtyAssigned(LocationCode,ItemNo,VariantCode,'',"Bin Code",TempWhseItemTrackingLine);
    
            OnCalcAvailQtyOnFindBWPickBin( <=====================
              ItemNo,VariantCode,SNRequired,LNRequired,WhseItemTrkgExists,
              TempWhseItemTrackingLine."Serial No.",TempWhseItemTrackingLine."Lot No.","Location Code","Bin Code",
              SourceType,SourceSubType,SourceNo,SourceLineNo,SourceSubLineNo,TotalQtyToPickBase,QtyAvailableBase);
    
    ...
Codeunit<Create Pick>.PROCEDURE<OnCalcAvailQtyOnFindPickBin>
  Raised in: Codeunit<Create Pick>.PROCEDURE<FindPickBin>
    Code lines:
    ...
              AvailableQtyBase := TotalAvailQtyToPickBase;
    
            IF TotalQtytoPickBase < AvailableQtyBase THEN
              AvailableQtyBase := TotalQtytoPickBase;
    
            OnCalcAvailQtyOnFindPickBin( <=====================
              ItemNo,VariantCode,SNRequired,LNRequired,WhseItemTrkgExists,
              TempWhseItemTrackingLine."Lot No.",TempWhseItemTrackingLine."Serial No.","Location Code","Bin Code",
              SourceType,SourceSubType,SourceNo,SourceLineNo,SourceSubLineNo,TotalQtytoPickBase,AvailableQtyBase);
    
    ...
Codeunit<Create Pick>.PROCEDURE<OnCalcAvailQtyOnFindSmallerUOMBin>
  Raised in: Codeunit<Create Pick>.PROCEDURE<FindSmallerUOMBin>
    Code lines:
    ...
                 ((UseForPick(FromBinContent) AND (WhseSource <> WhseSource::"Movement Worksheet")) OR
                  (UseForReplenishment(FromBinContent) AND (WhseSource = WhseSource::"Movement Worksheet")))
              THEN BEGIN
                CalcBinAvailQtyFromSmallerUOM(QtyAvailableBase,FromBinContent,FALSE);
    
                OnCalcAvailQtyOnFindSmallerUOMBin( <=====================
                  FALSE,ItemNo,VariantCode,SNRequired,LNRequired,WhseItemTrkgExists,
                  TempWhseItemTrackingLine."Lot No.",TempWhseItemTrackingLine."Serial No.","Location Code","Bin Code",
                  SourceType,SourceSubType,SourceNo,SourceLineNo,SourceSubLineNo,TotalQtytoPickBase,QtyAvailableBase);
    
    ...
  Raised in: Codeunit<Create Pick>.PROCEDURE<FindSmallerUOMBin>
    Code lines:
    ...
                 ((UseForPick(FromBinContent) AND (WhseSource <> WhseSource::"Movement Worksheet")) OR
                  (UseForReplenishment(FromBinContent) AND (WhseSource = WhseSource::"Movement Worksheet")))
              THEN BEGIN
                CalcBinAvailQtyFromSmallerUOM(QtyAvailableBase,FromBinContent,FALSE);
    
                OnCalcAvailQtyOnFindSmallerUOMBin( <=====================
                  FALSE,ItemNo,VariantCode,SNRequired,LNRequired,WhseItemTrkgExists,
                  TempWhseItemTrackingLine."Lot No.",TempWhseItemTrackingLine."Serial No.","Location Code","Bin Code",
                  SourceType,SourceSubType,SourceNo,SourceLineNo,SourceSubLineNo,TotalQtytoPickBase,QtyAvailableBase);
    
    ...
Codeunit<Create Pick>.PROCEDURE<OnCalcQtyAssignedToPickOnAfterSetFilters>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CalcQtyAssignedToPick>
    Code lines:
    ...
      IF SerialNo <> '' THEN
        IF SNRequired THEN
          SETRANGE("Serial No.",SerialNo)
        ELSE
          SETFILTER("Serial No.",'%1|%2',SerialNo,'');
      OnCalcQtyAssignedToPickOnAfterSetFilters(WhseActivLine); <=====================
      CALCSUMS("Qty. Outstanding (Base)");
    
      EXIT("Qty. Outstanding (Base)" + CalcBreakbulkOutstdQty(WhseActivLine,LNRequired,SNRequired));
    END;
Codeunit<Create Pick>.PROCEDURE<OnCreateTempActivityLineOnAfterTransferFrom>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateTempActivityLine>
    Code lines:
    ...
          TransferFromAssemblyLine(AssemblyLine);
        WhseSource::"Movement Worksheet":
          TransferFromMovWkshLine(WhseWkshLine);
      END;
    
      OnCreateTempActivityLineOnAfterTransferFrom(TempWhseActivLine); <=====================
    
      IF (WhseSource = WhseSource::Shipment) AND WhseShptLine."Assemble to Order" THEN
        WhseSource2 := WhseSource::Assembly
      ELSE
    ...
Codeunit<Create Pick>.PROCEDURE<OnCreateTempLine2OnBeforeDirectedPutAwayAndPick>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateTempLine2>
    Code lines:
    ...
        END;
        EXIT;
      END;
    
      IsHandled := FALSE;
      OnCreateTempLine2OnBeforeDirectedPutAwayAndPick( <=====================
        LocationCode,ItemNo,VariantCode,UnitofMeasureCode,FromBinCode,ToBinCode,QtyPerUnitofMeasure,
        TotalQtytoPick,TotalQtytoPickBase,TempWhseItemTrackingLine,WhseSource,IsHandled);
      IF IsHandled THEN
        EXIT;
    ...
Codeunit<Create Pick>.PROCEDURE<OnCreateWhseDocPlaceLineOnAfterSetFilters>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateWhseDocPlaceLine>
    Code lines:
    ...
    TempWhseActivLine.SETRANGE("Zone Code");
    TempWhseActivLine.SETRANGE("Item No.",TempWhseActivLine2."Item No.");
    TempWhseActivLine.SETRANGE("Variant Code",TempWhseActivLine2."Variant Code");
    TempWhseActivLine.SETRANGE("Breakbulk No.",0);
    TempWhseActivLine.SetTrackingFilter(TempWhseActivLine2."Serial No.",TempWhseActivLine2."Lot No.");
    OnCreateWhseDocPlaceLineOnAfterSetFilters(TempWhseActivLine,TempWhseActivLine2,LineNo); <=====================
    IF TempWhseActivLine.FIND('-') THEN
      REPEAT
        LineNo := LineNo + 10000;
        WhseActivLine.INIT;
    ...
Codeunit<Create Pick>.PROCEDURE<OnCreateWhseDocTakeLineOnAfterSetFilters>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateWhseDocTakeLine>
    Code lines:
    ...
    TempWhseActivLine.SETRANGE("Bin Code",TempWhseActivLine2."Bin Code");
    TempWhseActivLine.SETRANGE("Unit of Measure Code",WhseActivLine."Unit of Measure Code");
    TempWhseActivLine.SETRANGE("Zone Code");
    TempWhseActivLine.SETRANGE("Breakbulk No.",0);
    TempWhseActivLine.SetTrackingFilter(TempWhseActivLine2."Serial No.",TempWhseActivLine2."Lot No.");
    OnCreateWhseDocTakeLineOnAfterSetFilters(TempWhseActivLine,TempWhseActivLine2); <=====================
    IF TempWhseActivLine.FIND('-') THEN BEGIN
      REPEAT
        WhseActivLine.Quantity := WhseActivLine.Quantity + TempWhseActivLine.Quantity;
      UNTIL TempWhseActivLine.NEXT = 0;
    ...
Codeunit<Create Pick>.PROCEDURE<OnCreateWhseDocTakeLineOnBeforeWhseActivLineInsert>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateWhseDocTakeLine>
    Code lines:
    ...
            WhseActivLine2."Qty. to Handle" := 0;
            WhseActivLine2."Qty. to Handle (Base)" := 0;
            WhseActivLine2.Cubage := 0;
            WhseActivLine2.Weight := 0;
          END;
          OnCreateWhseDocTakeLineOnBeforeWhseActivLineInsert(WhseActivLine2,WhseActivHeader,TempWhseActivLine); <=====================
          WhseActivLine2.INSERT;
          OnAfterWhseActivLineInsert(WhseActivLine2);
    
          TempWhseActivLine.DELETE;
    ...
Codeunit<Create Pick>.PROCEDURE<OnCreateWhseDocumentOnAfterSaveOldValues>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateWhseDocument>
    Code lines:
    ...
        OldZoneCode := TempWhseActivLine."Zone Code";
        OldBinCode := TempWhseActivLine."Bin Code";
        OldNo := TempWhseActivLine."No.";
        OldSourceNo := TempWhseActivLine."Source No.";
        OldLocationCode := TempWhseActivLine."Location Code";
        OnCreateWhseDocumentOnAfterSaveOldValues(TempWhseActivLine); <=====================
      UNTIL TempWhseActivLine.NEXT = 0;
      OnCreateWhseDocumentOnBeforeClearFilters(TempWhseActivLine);
      TempWhseActivLine.SETRANGE("Bin Code");
      TempWhseActivLine.SETRANGE("Zone Code");
    ...
Codeunit<Create Pick>.PROCEDURE<OnCreateWhseDocumentOnAfterSetFiltersAfterLoop>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateWhseDocument>
    Code lines:
    ...
      OnCreateWhseDocumentOnBeforeClearFilters(TempWhseActivLine);
      TempWhseActivLine.SETRANGE("Bin Code");
      TempWhseActivLine.SETRANGE("Zone Code");
      TempWhseActivLine.SETRANGE("Location Code");
      TempWhseActivLine.SETRANGE("Action Type");
      OnCreateWhseDocumentOnAfterSetFiltersAfterLoop(TempWhseActivLine); <=====================
      IF NOT TempWhseActivLine.FIND('-') THEN BEGIN
        OnAfterCreateWhseDocument(FirstWhseDocNo,LastWhseDocNo);
        EXIT;
      END;
    ...
Codeunit<Create Pick>.PROCEDURE<OnCreateWhseDocumentOnAfterSetFiltersBeforeLoop>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateWhseDocument>
    Code lines:
    ...
      IF PerBin THEN
        TempWhseActivLine.SETRANGE("Bin Code",TempWhseActivLine."Bin Code");
      IF PerZone THEN
        TempWhseActivLine.SETRANGE("Zone Code",TempWhseActivLine."Zone Code");
    
      OnCreateWhseDocumentOnAfterSetFiltersBeforeLoop(TempWhseActivLine,PerBin,PerZone); <=====================
    
      REPEAT
        IsHandled := FALSE;
        CreateNewHeader := FALSE;
    ...
Codeunit<Create Pick>.PROCEDURE<OnCreateWhseDocumentOnBeforeClearFilters>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateWhseDocument>
    Code lines:
    ...
        OldNo := TempWhseActivLine."No.";
        OldSourceNo := TempWhseActivLine."Source No.";
        OldLocationCode := TempWhseActivLine."Location Code";
        OnCreateWhseDocumentOnAfterSaveOldValues(TempWhseActivLine);
      UNTIL TempWhseActivLine.NEXT = 0;
      OnCreateWhseDocumentOnBeforeClearFilters(TempWhseActivLine); <=====================
      TempWhseActivLine.SETRANGE("Bin Code");
      TempWhseActivLine.SETRANGE("Zone Code");
      TempWhseActivLine.SETRANGE("Location Code");
      TempWhseActivLine.SETRANGE("Action Type");
    ...
Codeunit<Create Pick>.PROCEDURE<OnCreateWhseDocumentOnBeforeCreateDocAndLine>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateWhseDocument>
    Code lines:
    ...
      OnCreateWhseDocumentOnAfterSetFiltersBeforeLoop(TempWhseActivLine,PerBin,PerZone);
    
      REPEAT
        IsHandled := FALSE;
        CreateNewHeader := FALSE;
        OnCreateWhseDocumentOnBeforeCreateDocAndLine(TempWhseActivLine,IsHandled,CreateNewHeader); <=====================
        IF IsHandled THEN BEGIN
          IF CreateNewHeader THEN BEGIN
            CreateWhseActivHeader(
              TempWhseActivLine."Location Code",FirstWhseDocNo,LastWhseDocNo,
    ...
Codeunit<Create Pick>.PROCEDURE<OnCreateWhseDocumentOnBeforeShowError>
  Raised in: Codeunit<Create Pick>.PROCEDURE<CreateWhseDocument>
    Code lines:
    TempWhseActivLine.RESET;
    IF NOT TempWhseActivLine.FIND('-') THEN BEGIN
      OnCreateWhseDocumentOnBeforeShowError(ShowError); <=====================
      IF ShowError THEN
        ERROR(Text000,DequeueCannotBeHandledReason);
      EXIT;
    END;
    
    OnBeforeCreateWhseDocument(TempWhseActivLine,WhseSource);
    
    ...
Codeunit<Create Pick>.PROCEDURE<OnFindBWPickBinOnBeforeEndLoop>
  Raised in: Codeunit<Create Pick>.PROCEDURE<FindBWPickBin>
    Code lines:
    ...
              CreateTempActivityLine(
                LocationCode,ToBinCode,UnitofMeasureCode,QtyPerUnitofMeasure,QtytoPick,QtyToPickBase,2,0);
            END;
            EndLoop := FALSE;
            IsHandled := FALSE;
            OnFindBWPickBinOnBeforeEndLoop(FromBinContent,TotalQtyToPickBase,EndLoop,IsHandled); <=====================
            IF NOT IsHandled THEN
              EndLoop := (NEXT = 0) OR (TotalQtyToPickBase = 0);
          UNTIL EndLoop;
    END;
Codeunit<Create Pick>.PROCEDURE<OnFindBWPickBinOnBeforeFindFromBinContent>
  Raised in: Codeunit<Create Pick>.PROCEDURE<FindBWPickBin>
    Code lines:
    ...
      IF WhseItemTrkgExists THEN BEGIN
        SETRANGE("Lot No. Filter",TempWhseItemTrackingLine."Lot No.");
        SETRANGE("Serial No. Filter",TempWhseItemTrackingLine."Serial No.");
      END;
      IsHandled := FALSE;
      OnFindBWPickBinOnBeforeFindFromBinContent(FromBinContent,SourceType,TotalQtyPickedBase,IsHandled); <=====================
      IF NOT IsHandled THEN
        IF FINDSET THEN
          REPEAT
            QtyAvailableBase :=
    ...
Codeunit<Create Put-away>.PROCEDURE<OnAfterGetItemAndSKU>
  Raised in: Codeunit<Create Put-away>.PROCEDURE<GetItemAndSKU>
    Code lines:
    ...
    THEN BEGIN
      IF NOT SKU.GET(Location.Code,Item."No.",PostedWhseRcptLine."Variant Code") THEN
        CLEAR(SKU)
    END;
    
    OnAfterGetItemAndSKU(Location,Item,SKU); <=====================
Codeunit<Create Put-away>.PROCEDURE<OnAfterGetWhseActivHeaderNo>
  Raised in: Codeunit<Create Put-away>.PROCEDURE<GetWhseActivHeaderNo>
    Code lines:
    FirstPutAwayNo := WhseActivHeader."No.";
    LastPutAwayNo := WhseActivHeader."No.";
    
    OnAfterGetWhseActivHeaderNo(FirstPutAwayNo,LastPutAwayNo); <=====================
Codeunit<Create Put-away>.PROCEDURE<OnAfterMakeCrossDockPutAway>
  Raised in: Codeunit<Create Put-away>.PROCEDURE<MakeCrossDockPutAway>
    Code lines:
    ...
        "Qty. (Base)" := Quantity * "Qty. per Unit of Measure";
        EverythingHandled := FALSE;
      END;
    END;
    
    OnAfterMakeCrossDockPutAway(PostedWhseRcptLine); <=====================
Codeunit<Create Put-away>.PROCEDURE<OnAfterRun>
  Raised in: Codeunit<Create Put-away>.<OnRun>
    Code lines:
    ...
    
    PostedWhseRcptLine.COPY(Rec);
    Code;
    COPY(PostedWhseRcptLine);
    
    OnAfterRun(Rec); <=====================
Codeunit<Create Put-away>.PROCEDURE<OnAfterSetValues>
  Raised in: Codeunit<Create Put-away>.PROCEDURE<SetValues>
    Code lines:
    AssignedID := NewAssignedID;
    SortActivity := NewSortActivity;
    DoNotFillQtytoHandle := NewDoNotFillQtytoHandle;
    BreakbulkFilter := BreakbulkFilter2;
    
    OnAfterSetValues; <=====================
Codeunit<Create Put-away>.PROCEDURE<OnAfterWhseActivHeaderInsert>
  Raised in: Codeunit<Create Put-away>.PROCEDURE<InsertWhseActivHeader>
    Code lines:
    ...
    WhseActivHeader."Sorting Method" := SortActivity;
    WhseActivHeader."Breakbulk Filter" := BreakbulkFilter;
    OnBeforeWhseActivHeaderInsert(WhseActivHeader);
    WhseActivHeader.INSERT(TRUE);
    COMMIT;
    OnAfterWhseActivHeaderInsert(WhseActivHeader); <=====================
    InsertTempWhseActivHeader(WhseActivHeader);
    WhseActivLine.LOCKTABLE;
Codeunit<Create Put-away>.PROCEDURE<OnAfterWhseActivLineInsert>
  Raised in: Codeunit<Create Put-away>.PROCEDURE<InsertBreakPackageLines>
    Code lines:
    ...
        WhseActivLine."Activity Type" := WhseActivHeader.Type;
        WhseActivLine."No." := WhseActivHeader."No.";
        WhseActivLine."Bin Code" := PostedWhseRcptLine."Bin Code";
        WhseActivLine."Zone Code" := PostedWhseRcptLine."Zone Code";
        WhseActivLine.INSERT;
        OnAfterWhseActivLineInsert(WhseActivLine); <=====================
      UNTIL TempWhseActivLine.NEXT = 0;
      EXIT(TRUE);
    END
  Raised in: Codeunit<Create Put-away>.PROCEDURE<CreateNewWhseActivity>
    Code lines:
    ...
      WhseActivLine."Lot No." := "Lot No.";
      WhseActivLine."Warranty Date" := "Warranty Date";
      WhseActivLine."Expiration Date" := "Expiration Date";
      OnBeforeWhseActivLineInsert(WhseActivLine,PostedWhseRcptLine);
      WhseActivLine.INSERT;
      OnAfterWhseActivLineInsert(WhseActivLine); <=====================
    END;
Codeunit<Create Put-away>.PROCEDURE<OnBeforeCalcAvailCubageAndWeight>
  Raised in: Codeunit<Create Put-away>.PROCEDURE<CalcAvailCubageAndWeight>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCalcAvailCubageAndWeight(Bin,PostedWhseRcptLine,PutAwayItemUOM,QtyToPutAwayBase,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH Bin DO BEGIN
      IF ("Maximum Cubage" <> 0) OR ("Maximum Weight" <> 0) THEN BEGIN
        IF (PutAwayItemUOM.Cubage <> 0) OR (PutAwayItemUOM.Weight <> 0) THEN
          CalcCubageAndWeight(AvailPerCubageBase,AvailPerWeightBase,FALSE);
        IF ("Maximum Cubage" <> 0) AND (PutAwayItemUOM.Cubage <> 0) THEN BEGIN
    ...
Codeunit<Create Put-away>.PROCEDURE<OnBeforeCode>
  Raised in: Codeunit<Create Put-away>.PROCEDURE<Code>
    Code lines:
    OnBeforeCode(PostedWhseRcptLine); <=====================
    
    WITH PostedWhseRcptLine DO BEGIN
      QtyToPickBase := 0;
      QtyToPutAwayBase := 0;
      CrossDockInfo := 0;
      MessageText := '';
      EverythingHandled := FALSE;
      TempWhseActivLine.DELETEALL;
    
    ...
Codeunit<Create Put-away>.PROCEDURE<OnBeforeCreateNewWhseActivity>
  Raised in: Codeunit<Create Put-away>.PROCEDURE<CreateNewWhseActivity>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCreateNewWhseActivity( <=====================
      PostedWhseRcptLine,WhseActivLine,WhseActivHeader,Location,InsertHeader,Bin,ActionType,LineNo,
      BreakbulkNo,BreakbulkFilter,QtyToHandleBase,BreakPackage,EmptyZoneBin,Breakbulk,CrossDockInfo,PutAwayItemUOM,
      DoNotFillQtytoHandle,IsHandled);
    IF IsHandled THEN
      EXIT;
    
    WITH PostedWhseRcptLine DO BEGIN
      IF (WhseActivHeader."No." = '') AND InsertHeader THEN
    ...
Codeunit<Create Put-away>.PROCEDURE<OnBeforeGetPutAwayUOM>
  Raised in: Codeunit<Create Put-away>.PROCEDURE<GetPutAwayUOM>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetPutAwayUOM(PutAwayItemUOM,PostedWhseRcptLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT Location."Directed Put-away and Pick" THEN BEGIN
      PutAwayItemUOM.Code := PostedWhseRcptLine."Unit of Measure Code";
      PutAwayItemUOM."Qty. per Unit of Measure" := PostedWhseRcptLine."Qty. per Unit of Measure";
      EXIT;
    END;
    ...
Codeunit<Create Put-away>.PROCEDURE<OnBeforeRun>
  Raised in: Codeunit<Create Put-away>.<OnRun>
    Code lines:
    OnBeforeRun(Rec); <=====================
    
    PostedWhseRcptLine.COPY(Rec);
    Code;
    COPY(PostedWhseRcptLine);
    
    OnAfterRun(Rec);
Codeunit<Create Put-away>.PROCEDURE<OnBeforeWhseActivHeaderInsert>
  Raised in: Codeunit<Create Put-away>.PROCEDURE<InsertWhseActivHeader>
    Code lines:
    ...
    WhseActivHeader.Type := WhseActivHeader.Type::"Put-away";
    WhseActivHeader."Location Code" := LocationCode;
    WhseActivHeader.VALIDATE("Assigned User ID",AssignedID);
    WhseActivHeader."Sorting Method" := SortActivity;
    WhseActivHeader."Breakbulk Filter" := BreakbulkFilter;
    OnBeforeWhseActivHeaderInsert(WhseActivHeader); <=====================
    WhseActivHeader.INSERT(TRUE);
    COMMIT;
    OnAfterWhseActivHeaderInsert(WhseActivHeader);
    InsertTempWhseActivHeader(WhseActivHeader);
Codeunit<Create Put-away>.PROCEDURE<OnBeforeWhseActivLineInsert>
  Raised in: Codeunit<Create Put-away>.PROCEDURE<CreateNewWhseActivity>
    Code lines:
    ...
        WhseActivLine.TESTFIELD("Qty. per Unit of Measure",1);
      WhseActivLine."Serial No." := "Serial No.";
      WhseActivLine."Lot No." := "Lot No.";
      WhseActivLine."Warranty Date" := "Warranty Date";
      WhseActivLine."Expiration Date" := "Expiration Date";
      OnBeforeWhseActivLineInsert(WhseActivLine,PostedWhseRcptLine); <=====================
      WhseActivLine.INSERT;
      OnAfterWhseActivLineInsert(WhseActivLine);
    END;
Codeunit<Create Put-away>.PROCEDURE<OnCodeOnAfterCreateNewWhseActivity>
  Raised in: Codeunit<Create Put-away>.PROCEDURE<Code>
    Code lines:
    ...
            BreakPackage := TRUE;
        END;
        CreateNewWhseActivity(
          PostedWhseRcptLine,WhseActivLine,1,TakeLineNo,0,QtyToPickBase,FALSE,BreakPackage,FALSE,Breakbulk);
    
        OnCodeOnAfterCreateNewWhseActivity(WhseActivLine); <=====================
    
        OldLineNo := LineNo;
      END ELSE
        IF MessageText = '' THEN
    ...
Codeunit<Create Put-away>.PROCEDURE<OnFindBin>
  Raised in: Codeunit<Create Put-away>.PROCEDURE<FindBin>
    Code lines:
    ...
      SETFILTER("Bin Type Code",BinTypeFilter);
      SETRANGE("Cross-Dock Bin",FALSE);
      IF PutAwayTemplLine."Find Empty Bin" THEN
        SETRANGE(Empty,TRUE);
      IsHandled := FALSE;
      OnFindBin(PostedWhseRcptLine,PutAwayTemplLine,Bin,BinFound,IsHandled); <=====================
      IF IsHandled THEN
        EXIT(BinFound);
    
      IF FIND('+') THEN BEGIN
    ...
Codeunit<Create Put-away>.PROCEDURE<OnFindBinContent>
  Raised in: Codeunit<Create Put-away>.PROCEDURE<FindBinContent>
    Code lines:
    ...
        SETRANGE("Variant Code",VariantCode);
      END;
      IF PutAwayTemplLine."Find Unit of Measure Match" THEN
        SETRANGE("Unit of Measure Code",PutAwayItemUOM.Code);
      IsHandled := FALSE;
      OnFindBinContent(PostedWhseRcptLine,PutAwayTemplLine,BinContent,BinContentFound,IsHandled); <=====================
      IF NOT IsHandled THEN
        BinContentFound := FIND('+');
    
      EXIT(BinContentFound);
Codeunit<Create Put-away>.PROCEDURE<OnNextBin>
  Raised in: Codeunit<Create Put-away>.PROCEDURE<NextBin>
    Code lines:
    IF EverythingHandled THEN
      EXIT(FALSE);
    
    IsHandled := FALSE;
    OnNextBin(PostedWhseRcptLine,PutAwayTemplLine,Bin,BinFound,IsHandled); <=====================
    IF NOT IsHandled THEN
      BinFound := Bin.NEXT(-1) <> 0;
    
    EXIT(BinFound);
Codeunit<Create Put-away>.PROCEDURE<OnNextBinContent>
  Raised in: Codeunit<Create Put-away>.PROCEDURE<NextBinContent>
    Code lines:
    IF EverythingHandled THEN
      EXIT(FALSE);
    
    IsHandled := FALSE;
    OnNextBinContent(PostedWhseRcptLine,PutAwayTemplLine,BinContent,BinContentFound,IsHandled); <=====================
    IF NOT IsHandled THEN
      BinContentFound := BinContent.NEXT(-1) <> 0;
    
    EXIT(BinContentFound);
Codeunit<Create Put-away>.PROCEDURE<OnUpdateTempWhseItemTrkgLines>
  Raised in: Codeunit<Create Put-away>.PROCEDURE<UpdateTempWhseItemTrkgLines>
    Code lines:
    ...
    TempWhseItemTrkgLine."Source ID" := PostedWhseRcptLine."No.";
    TempWhseItemTrkgLine."Source Ref. No." := PostedWhseRcptLine."Line No.";
    TempWhseItemTrkgLine."Serial No." := PostedWhseRcptLine."Serial No.";
    TempWhseItemTrkgLine."Lot No." := PostedWhseRcptLine."Lot No.";
    TempWhseItemTrkgLine."Quantity (Base)" := QtyToPickBase;
    OnUpdateTempWhseItemTrkgLines(TempWhseItemTrkgLine,PostedWhseRcptLine); <=====================
    TempWhseItemTrkgLine.INSERT;
Codeunit<Warehouse Availability Mgt.>.PROCEDURE<OnAfterCalcQtyRcvdNotAvailable>
  Raised in: Codeunit<Warehouse Availability Mgt.>.PROCEDURE<CalcQtyRcvdNotAvailable>
    Code lines:
    ...
      SETRANGE("Item No.",ItemNo);
      SETRANGE("Location Code",LocationCode);
      SETRANGE("Variant Code",VariantCode);
      CALCSUMS("Qty. (Base)","Qty. Put Away (Base)");
      QtyRcvdNotAvailable := "Qty. (Base)" - "Qty. Put Away (Base)";
      OnAfterCalcQtyRcvdNotAvailable(PostedWhseRcptLine,LocationCode,ItemNo,VariantCode,QtyRcvdNotAvailable); <=====================
      EXIT(QtyRcvdNotAvailable);
    END;
Codeunit<Warehouse Availability Mgt.>.PROCEDURE<OnAfterCalcReservedQtyOnInventory>
  Raised in: Codeunit<Warehouse Availability Mgt.>.PROCEDURE<CalcInvtAvailQty>
    Code lines:
    ...
        QtyShipped := CalcQtyShipped(Location,"No.",VariantCode);
      QtyReservedOnPickShip := CalcReservQtyOnPicksShips(Location.Code,"No.",VariantCode,WarehouseActivityLine);
      QtyOnDedicatedBins := CalcQtyOnDedicatedBins(Location.Code,"No.",VariantCode,'','');
    
      ReservedQtyOnInventory := "Reserved Qty. on Inventory";
      OnAfterCalcReservedQtyOnInventory(Item,ReservedQtyOnInventory,Location); <=====================
    
      // The reserved qty might exceed the qty available in warehouse and thereby
      // having reserved from the qty not yet put-away
      IF (Inventory - QtyReceivedNotAvail - QtyAssgndtoPick - "Qty. Picked" + QtyShipped - QtyOnDedicatedBins) <
    ...
Codeunit<Whse. Integration Management>.PROCEDURE<OnCheckBinTypeCode>
  Raised in: Codeunit<Whse. Integration Management>.PROCEDURE<CheckBinTypeCode>
    Code lines:
    ...
        END;
      DATABASE::"Service Line":
        IF AdditionalIdentifier = ServiceLine."Document Type"::Invoice THEN
          BinType.TESTFIELD(Pick,TRUE);
      ELSE
        OnCheckBinTypeCode(Location,Bin,BinType,SourceTable,BinCodeFieldCaption,AdditionalIdentifier); <=====================
    END;
Codeunit<Bin Create>.PROCEDURE<OnAfterBinInsert>
  Raised in: Codeunit<Bin Create>.PROCEDURE<BinCreate>
    Code lines:
    ...
        Bin."Maximum Weight" := "Maximum Weight";
        Bin."Cross-Dock Bin" := "Cross-Dock Bin";
      END;
      OnBeforeBinInsert(Bin,BinCreationWorksheetLine);
      Bin.INSERT(TRUE);
      OnAfterBinInsert(Bin,BinCreationWorksheetLine); <=====================
    END;
Codeunit<Bin Create>.PROCEDURE<OnBeforeBinInsert>
  Raised in: Codeunit<Bin Create>.PROCEDURE<BinCreate>
    Code lines:
    ...
        Bin."Bin Ranking" := "Bin Ranking";
        Bin."Maximum Cubage" := "Maximum Cubage";
        Bin."Maximum Weight" := "Maximum Weight";
        Bin."Cross-Dock Bin" := "Cross-Dock Bin";
      END;
      OnBeforeBinInsert(Bin,BinCreationWorksheetLine); <=====================
      Bin.INSERT(TRUE);
      OnAfterBinInsert(Bin,BinCreationWorksheetLine);
    END;
Codeunit<Whse. Undo Quantity>.PROCEDURE<OnAfterUndoPostedWhseRcptLine>
  Raised in: Codeunit<Whse. Undo Quantity>.PROCEDURE<UndoPostedWhseRcptLine>
    Code lines:
    PostedWhseRcptLine.TESTFIELD("Source Type");
    InsertPostedWhseRcptLine(PostedWhseRcptLine);
    DeleteWhsePutAwayRequest(PostedWhseRcptLine);
    DeleteWhseItemEntryRelationRcpt(PostedWhseRcptLine);
    
    OnAfterUndoPostedWhseRcptLine(PostedWhseRcptLine); <=====================
Codeunit<Whse. Undo Quantity>.PROCEDURE<OnAfterUndoPostedWhseShptLine>
  Raised in: Codeunit<Whse. Undo Quantity>.PROCEDURE<UndoPostedWhseShptLine>
    Code lines:
    PostedWhseShptLine.TESTFIELD("Source Type");
    InsertPostedWhseShptLine(PostedWhseShptLine);
    DeleteWhsePickRequest(PostedWhseShptLine);
    DeleteWhseItemEntryRelationShpt(PostedWhseShptLine);
    
    OnAfterUndoPostedWhseShptLine(PostedWhseShptLine); <=====================
Codeunit<Whse. Undo Quantity>.PROCEDURE<OnAfterUpdateWhseRequestRcpt>
  Raised in: Codeunit<Whse. Undo Quantity>.PROCEDURE<UpdateWhseRequestRcpt>
    Code lines:
    ...
          END;
      END;
      UpdateWhseRequest("Source Type","Source Subtype","Source No.","Location Code");
    END;
    
    OnAfterUpdateWhseRequestRcpt(PostedWhseRcptLine); <=====================
Codeunit<Whse. Undo Quantity>.PROCEDURE<OnAfterUpdateWhseRequestShpt>
  Raised in: Codeunit<Whse. Undo Quantity>.PROCEDURE<UpdateWhseRequestShpt>
    Code lines:
    ...
          END;
      END;
      UpdateWhseRequest("Source Type","Source Subtype","Source No.","Location Code");
    END;
    
    OnAfterUpdateWhseRequestShpt(PostedWhseShptLine); <=====================
Codeunit<Whse. Undo Quantity>.PROCEDURE<OnBeforePostedWhseRcptLineInsert>
  Raised in: Codeunit<Whse. Undo Quantity>.PROCEDURE<InsertPostedWhseRcptLine>
    Code lines:
    ...
      NewPostedWhseRcptLine.Quantity := -Quantity;
      NewPostedWhseRcptLine."Qty. (Base)" := -"Qty. (Base)";
      NewPostedWhseRcptLine."Qty. Put Away" := -"Qty. Put Away";
      NewPostedWhseRcptLine."Qty. Put Away (Base)" := -"Qty. Put Away (Base)";
      NewPostedWhseRcptLine.Status := NewPostedWhseRcptLine.Status::"Completely Put Away";
      OnBeforePostedWhseRcptLineInsert(NewPostedWhseRcptLine,OldPostedWhseRcptLine); <=====================
      NewPostedWhseRcptLine.INSERT;
    
      Status := Status::"Completely Put Away";
      MODIFY;
Codeunit<Whse. Undo Quantity>.PROCEDURE<OnBeforePostedWhseShptLineInsert>
  Raised in: Codeunit<Whse. Undo Quantity>.PROCEDURE<InsertPostedWhseShptLine>
    Code lines:
    ...
      NewPostedWhseShptLine.INIT;
      NewPostedWhseShptLine.COPY(OldPostedWhseShptLine);
      NewPostedWhseShptLine."Line No." := "Line No." + LineSpacing;
      NewPostedWhseShptLine.Quantity := -Quantity;
      NewPostedWhseShptLine."Qty. (Base)" := -"Qty. (Base)";
      OnBeforePostedWhseShptLineInsert(NewPostedWhseShptLine,OldPostedWhseShptLine); <=====================
      NewPostedWhseShptLine.INSERT;
    END;
Codeunit<Whse. Undo Quantity>.PROCEDURE<OnBeforePostTempWhseJnlLine>
  Raised in: Codeunit<Whse. Undo Quantity>.PROCEDURE<PostTempWhseJnlLineCache>
    Code lines:
    OnBeforePostTempWhseJnlLine(TempWhseJnlLine); <=====================
    IF TempWhseJnlLine.FIND('-') THEN
      REPEAT
        WhseJnlRegLine.RegisterWhseJnlLine(TempWhseJnlLine);
      UNTIL TempWhseJnlLine.NEXT = 0;
Codeunit<Whse. Undo Quantity>.PROCEDURE<OnBeforeTempWhseJnlLineInsert>
  Raised in: Codeunit<Whse. Undo Quantity>.PROCEDURE<InsertTempWhseJnlLine>
    Code lines:
    ...
            TempWhseJnlLine."From Bin Code" := TempWhseJnlLine."Bin Code";
          END ELSE BEGIN
            TempWhseJnlLine."To Zone Code" := TempWhseJnlLine."Zone Code";
            TempWhseJnlLine."To Bin Code" := TempWhseJnlLine."Bin Code";
          END;
          OnBeforeTempWhseJnlLineInsert(TempWhseJnlLine,WhseEntry,ItemJnlLine); <=====================
          TempWhseJnlLine.INSERT;
          NextLineNo := TempWhseJnlLine."Line No." + 10000;
        UNTIL WhseEntry.NEXT(-1) = 0;
    END;
Codeunit<Whse. Undo Quantity>.PROCEDURE<OnBeforeWhseRcptLineModify>
  Raised in: Codeunit<Whse. Undo Quantity>.PROCEDURE<UpdateWhseRcptLine>
    Code lines:
    ...
          WhseRcptLine.Status := WhseRcptLine.Status::" ";
          WhseRcptHeader.GET(WhseRcptLine."No.");
          WhseRcptHeader."Document Status" := WhseRcptHeader."Document Status"::" ";
          WhseRcptHeader.MODIFY;
        END;
        OnBeforeWhseRcptLineModify(WhseRcptLine,PostedWhseRcptLine); <=====================
        WhseRcptLine.MODIFY;
      END;
    END;
Codeunit<Whse. Undo Quantity>.PROCEDURE<OnBeforeWhseShptLineModify>
  Raised in: Codeunit<Whse. Undo Quantity>.PROCEDURE<UpdateWhseShptLine>
    Code lines:
    ...
          WhseShptLine.Status := WhseShptLine.Status::" ";
          WhseShptHeader.GET(WhseShptLine."No.");
          WhseShptHeader."Document Status" := WhseShptHeader."Document Status"::" ";
          WhseShptHeader.MODIFY;
        END;
        OnBeforeWhseShptLineModify(WhseShptLine,PostedWhseShptLine); <=====================
        WhseShptLine.MODIFY;
      END;
    END;
Codeunit<Whse. Undo Quantity>.PROCEDURE<OnFindPostedWhseRcptLineOnAfterSetFilters>
  Raised in: Codeunit<Whse. Undo Quantity>.PROCEDURE<FindPostedWhseRcptLine>
    Code lines:
    ...
        ELSE
          EXIT;
      END;
      SetSourceFilter(SourceType,SourceSubtype,SourceID,SourceRefNo,TRUE);
      SETRANGE("Posted Source No.",UndoID);
      OnFindPostedWhseRcptLineOnAfterSetFilters(PostedWhseRcptLine); <=====================
      IF FINDFIRST THEN BEGIN
        IF COUNT > 1 THEN
          ERROR(Text000,TABLECAPTION); // Assert: only one posted line.
        Ok := TRUE;
    ...
Codeunit<Whse. Undo Quantity>.PROCEDURE<OnFindPostedWhseShptLineOnAfterSetFilters>
  Raised in: Codeunit<Whse. Undo Quantity>.PROCEDURE<FindPostedWhseShptLine>
    Code lines:
    ...
        ELSE
          EXIT;
      END;
      SetSourceFilter(SourceType,SourceSubtype,SourceID,SourceRefNo,TRUE);
      SETRANGE("Posted Source No.",UndoID);
      OnFindPostedWhseShptLineOnAfterSetFilters(PostedWhseShptLine); <=====================
      IF FINDFIRST THEN BEGIN
        PostedWhseShptLine2.COPYFILTERS(PostedWhseShptLine);
        PostedWhseShptLine2.SETFILTER("No.",'<>%1',"No.");
        PostedWhseShptLine2.SETFILTER("Line No.",'<>%1',"Line No.");
    ...
Codeunit<Create Inventory Put-away>.PROCEDURE<OnAfterAutoCreatePutAway>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<AutoCreatePutAway>
    Code lines:
    ...
    IF LineCreated THEN BEGIN
      WhseActivHeader.MODIFY;
      WhseActivHeaderNew := WhseActivHeader;
    END;
    
    OnAfterAutoCreatePutAway(WhseRequest,LineCreated,WhseActivHeaderNew); <=====================
Codeunit<Create Inventory Put-away>.PROCEDURE<OnAfterCreateInventoryPutaway>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<Code>
    Code lines:
    ...
      WhseActivHeader.MODIFY
    ELSE
      IF NOT AutoCreation THEN
        ERROR(Text000);
    
    OnAfterCreateInventoryPutaway(WhseRequest,LineCreated,WhseActivHeader); <=====================
Codeunit<Create Inventory Put-away>.PROCEDURE<OnAfterInsertWhseActivLine>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<InsertWhseActivLine>
    Code lines:
    ...
    END;
    NewWhseActivLine."No." := WhseActivHeader."No.";
    NewWhseActivLine."Line No." := NextLineNo;
    OnBeforeInsertWhseActivLine(NewWhseActivLine);
    NewWhseActivLine.INSERT;
    OnAfterInsertWhseActivLine(NewWhseActivLine,SNRequired,LNRequired); <=====================
    
    LineCreated := TRUE;
    NextLineNo := NextLineNo + 10000;
    RemQtyToPutAway -= NewWhseActivLine.Quantity;
Codeunit<Create Inventory Put-away>.PROCEDURE<OnAfterUpdateWhseActivHeader>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<UpdateWhseActivHeader>
    Code lines:
    ...
      WhseActivHeader."Posting Date" := PostingDate;
      WhseActivHeader."External Document No.2" := VendorDocNo;
      GetLocation("Location Code");
    END;
    
    OnAfterUpdateWhseActivHeader(WhseActivHeader,WhseRequest); <=====================
Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeCreatePutAwayLinesFromCompLoop>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<CreatePutAwayLinesFromComp>
    Code lines:
    ...
    
      FindNextLineNo;
    
      REPEAT
        IsHandled := FALSE;
        OnBeforeCreatePutAwayLinesFromCompLoop(WhseActivHeader,ProdOrder,IsHandled); <=====================
        IF NOT IsHandled THEN
          IF NOT
             NewWhseActivLine.ActivityExists(
               DATABASE::"Prod. Order Component",Status,"Prod. Order No.","Prod. Order Line No.","Line No.",0)
    ...
Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeCreatePutAwayLinesFromProdLoop>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<CreatePutAwayLinesFromProd>
    Code lines:
    ...
    
      FindNextLineNo;
    
      REPEAT
        IsHandled := FALSE;
        OnBeforeCreatePutAwayLinesFromProdLoop(WhseActivHeader,ProdOrder,IsHandled); <=====================
        IF NOT IsHandled THEN
          IF NOT NewWhseActivLine.ActivityExists(DATABASE::"Prod. Order Line",Status,"Prod. Order No.","Line No.",0,0) THEN BEGIN
            RemQtyToPutAway := "Remaining Quantity";
    
    ...
Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeCreatePutAwayLinesFromPurchaseLoop>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<CreatePutAwayLinesFromPurchase>
    Code lines:
    ...
    
      FindNextLineNo;
    
      REPEAT
        IsHandled := FALSE;
        OnBeforeCreatePutAwayLinesFromPurchaseLoop(WhseActivHeader,PurchHeader,IsHandled); <=====================
        IF NOT IsHandled THEN
          IF NOT NewWhseActivLine.ActivityExists(DATABASE::"Purchase Line","Document Type","Document No.","Line No.",0,0) THEN BEGIN
            IF "Document Type" = "Document Type"::Order THEN
              RemQtyToPutAway := "Qty. to Receive"
    ...
Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeCreatePutAwayLinesFromSalesLoop>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<CreatePutAwayLinesFromSales>
    Code lines:
    ...
    
      FindNextLineNo;
    
      REPEAT
        IsHandled := FALSE;
        OnBeforeCreatePutAwayLinesFromSalesLoop(WhseActivHeader,SalesHeader,IsHandled); <=====================
        IF NOT IsHandled THEN
          IF NOT NewWhseActivLine.ActivityExists(DATABASE::"Sales Line","Document Type","Document No.","Line No.",0,0) THEN BEGIN
            IF "Document Type" = "Document Type"::Order THEN
              RemQtyToPutAway := -"Qty. to Ship"
    ...
Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeCreatePutAwayLinesFromTransferLoop>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<CreatePutAwayLinesFromTransfer>
    Code lines:
    ...
    
      FindNextLineNo;
    
      REPEAT
        IsHandled := FALSE;
        OnBeforeCreatePutAwayLinesFromTransferLoop(WhseActivHeader,TransferHeader,IsHandled); <=====================
        IF NOT IsHandled THEN
          IF NOT NewWhseActivLine.ActivityExists(DATABASE::"Transfer Line",1,"Document No.","Line No.",0,0) THEN BEGIN
            RemQtyToPutAway := "Qty. to Receive";
    
    ...
Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeFindProdOrderComp>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<SetFilterProdCompLine>
    Code lines:
    ...
      IF NOT CheckLineExist THEN
        SETRANGE("Location Code",WhseActivHeader."Location Code");
      SETRANGE("Flushing Method","Flushing Method"::Manual);
      SETRANGE("Planning Level Code",0);
      SETFILTER("Remaining Quantity",'<0');
      OnBeforeFindProdOrderComp(ProdOrderComp); <=====================
      EXIT(FIND('-'));
    END;
Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeFindProdOrderLine>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<SetFilterProdOrderLine>
    Code lines:
    ...
      SETRANGE(Status,ProdOrder.Status);
      SETRANGE("Prod. Order No.",ProdOrder."No.");
      IF NOT CheckLineExist THEN
        SETRANGE("Location Code",WhseActivHeader."Location Code");
      SETFILTER("Remaining Quantity",'>%1',0);
      OnBeforeFindProdOrderLine(ProdOrderLine); <=====================
      EXIT(FIND('-'));
    END;
Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeFindPurchLine>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<SetFilterPurchLine>
    Code lines:
    ...
      SETRANGE(Type,Type::Item);
      IF PurchHeader."Document Type" = PurchHeader."Document Type"::Order THEN
        SETFILTER("Qty. to Receive",'>%1',0)
      ELSE
        SETFILTER("Return Qty. to Ship",'<%1',0);
      OnBeforeFindPurchLine(PurchLine); <=====================
      EXIT(FIND('-'));
    END;
Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeFindSalesLine>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<SetFilterSalesLine>
    Code lines:
    ...
      SETRANGE(Type,Type::Item);
      IF SalesHeader."Document Type" = SalesHeader."Document Type"::Order THEN
        SETFILTER("Qty. to Ship",'<%1',0)
      ELSE
        SETFILTER("Return Qty. to Receive",'>%1',0);
      OnBeforeFindSalesLine(SalesLine); <=====================
      EXIT(FIND('-'));
    END;
Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeFindTransLine>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<SetFilterTransferLine>
    Code lines:
    ...
      SETRANGE("Document No.",TransferHeader."No.");
      SETRANGE("Derived From Line No.",0);
      IF NOT CheckLineExist THEN
        SETRANGE("Transfer-to Code",WhseActivHeader."Location Code");
      SETFILTER("Qty. to Receive",'>%1',0);
      OnBeforeFindTransLine(TransferLine); <=====================
      EXIT(FIND('-'));
    END;
Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeInsertWhseActivLine>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<InsertWhseActivLine>
    Code lines:
    ...
      NextLineNo := 10000;
      COMMIT;
    END;
    NewWhseActivLine."No." := WhseActivHeader."No.";
    NewWhseActivLine."Line No." := NextLineNo;
    OnBeforeInsertWhseActivLine(NewWhseActivLine); <=====================
    NewWhseActivLine.INSERT;
    OnAfterInsertWhseActivLine(NewWhseActivLine,SNRequired,LNRequired);
    
    LineCreated := TRUE;
    ...
Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromComp>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<CreatePutAwayLinesFromComp>
    Code lines:
    ...
              NewWhseActivLine."Unit of Measure Code" := "Unit of Measure Code";
              NewWhseActivLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
              NewWhseActivLine.Description := Description;
              NewWhseActivLine."Due Date" := "Due Date";
              NewWhseActivLine."Source Document" := NewWhseActivLine."Source Document"::"Prod. Consumption";
              OnBeforeNewWhseActivLineInsertFromComp(NewWhseActivLine,ProdOrderComp); <=====================
              IF NOT ReservationFound AND SNRequired THEN
                REPEAT
                  NewWhseActivLine."Line No." := NextLineNo;
                  InsertWhseActivLine(NewWhseActivLine,1);
    ...
Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromProd>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<CreatePutAwayLinesFromProd>
    Code lines:
    ...
              NewWhseActivLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
              NewWhseActivLine.Description := Description;
              NewWhseActivLine."Description 2" := "Description 2";
              NewWhseActivLine."Due Date" := "Due Date";
              NewWhseActivLine."Source Document" := NewWhseActivLine."Source Document"::"Prod. Output";
              OnBeforeNewWhseActivLineInsertFromProd(NewWhseActivLine,ProdOrderLine); <=====================
              IF NOT ReservationFound AND SNRequired THEN
                REPEAT
                  NewWhseActivLine."Line No." := NextLineNo;
                  InsertWhseActivLine(NewWhseActivLine,1);
    ...
Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromPurchase>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<CreatePutAwayLinesFromPurchase>
    Code lines:
    ...
              NewWhseActivLine."Due Date" := "Expected Receipt Date";
              IF "Document Type" = "Document Type"::Order THEN
                NewWhseActivLine."Source Document" := NewWhseActivLine."Source Document"::"Purchase Order"
              ELSE
                NewWhseActivLine."Source Document" := NewWhseActivLine."Source Document"::"Purchase Return Order";
              OnBeforeNewWhseActivLineInsertFromPurchase(NewWhseActivLine,PurchLine); <=====================
              IF NOT ReservationFound AND SNRequired THEN
                REPEAT
                  NewWhseActivLine."Line No." := NextLineNo;
                  InsertWhseActivLine(NewWhseActivLine,1);
    ...
Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromSales>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<CreatePutAwayLinesFromSales>
    Code lines:
    ...
              NewWhseActivLine."Due Date" := "Planned Shipment Date";
              IF "Document Type" = "Document Type"::Order THEN
                NewWhseActivLine."Source Document" := NewWhseActivLine."Source Document"::"Sales Order"
              ELSE
                NewWhseActivLine."Source Document" := NewWhseActivLine."Source Document"::"Sales Return Order";
              OnBeforeNewWhseActivLineInsertFromSales(NewWhseActivLine,SalesLine); <=====================
              IF NOT ReservationFound AND SNRequired THEN
                REPEAT
                  NewWhseActivLine."Line No." := NextLineNo;
                  InsertWhseActivLine(NewWhseActivLine,1);
    ...
Codeunit<Create Inventory Put-away>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromTransfer>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<CreatePutAwayLinesFromTransfer>
    Code lines:
    ...
              NewWhseActivLine."Unit of Measure Code" := "Unit of Measure Code";
              NewWhseActivLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
              NewWhseActivLine.Description := Description;
              NewWhseActivLine."Description 2" := "Description 2";
              NewWhseActivLine."Due Date" := "Receipt Date";
              OnBeforeNewWhseActivLineInsertFromTransfer(NewWhseActivLine,TransferLine); <=====================
              IF NOT ReservationFound AND SNRequired THEN
                REPEAT
                  NewWhseActivLine."Line No." := NextLineNo;
                  InsertWhseActivLine(NewWhseActivLine,1);
    ...
Codeunit<Create Inventory Put-away>.PROCEDURE<OnInsertWhseActivLineOnBeforeAutoCreation>
  Raised in: Codeunit<Create Inventory Put-away>.PROCEDURE<InsertWhseActivLine>
    Code lines:
    ...
          CopyTrackingFromSpec(TempTrackingSpecification);
          VALIDATE(Quantity,CalcQty(TempTrackingSpecification."Qty. to Handle (Base)"));
        END ELSE
          VALIDATE(Quantity,PutAwayQty);
      VALIDATE("Qty. to Handle",0);
      OnInsertWhseActivLineOnBeforeAutoCreation(NewWhseActivLine,TempTrackingSpecification,ReservationFound,SNRequired,LNRequired); <=====================
    END;
    
    IF AutoCreation AND NOT LineCreated THEN BEGIN
      WhseActivHeader."No." := '';
    ...
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnAfterAutoCreatePickOrMove>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<AutoCreatePickOrMove>
    Code lines:
    ...
    IF LineCreated THEN BEGIN
      WhseActivHeader.MODIFY;
      WhseActivHeaderNew := WhseActivHeader;
    END;
    
    OnAfterAutoCreatePickOrMove(WhseRequest,LineCreated,WhseActivHeaderNew); <=====================
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnAfterCalcTotalAvailQtyToPickBase>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<CreateTempHandlingSpec>
    Code lines:
    ...
              TotalAvailQtyToPickBase := CalcInvtAvailability(WhseActivLine,EntrySummary."Lot No.",EntrySummary."Serial No.");
    
            TotalAvailQtyToPickBase := TotalAvailQtyToPickBase - QtyTracked;
            QtyToPickBase := 0;
    
            OnAfterCalcTotalAvailQtyToPickBase( <=====================
              WhseActivLine."Item No.",WhseActivLine."Variant Code",EntrySummary."Lot No.",EntrySummary."Serial No.",
              Location.Code,'',WhseActivLine."Source Type",WhseActivLine."Source Subtype",WhseActivLine."Source No.",
              WhseActivLine."Source Line No.",WhseActivLine."Source Subline No.",RemQtyToPickBase,TotalAvailQtyToPickBase);
    
    ...
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnAfterCreateInventoryPickMovement>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<Code>
    Code lines:
    ...
      WhseActivHeader.MODIFY
    ELSE
      IF NOT AutoCreation THEN
        MESSAGE(Text000 + ExpiredItemMessageText);
    
    OnAfterCreateInventoryPickMovement(WhseRequest,LineCreated,WhseActivHeader); <=====================
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnAfterInsertWhseActivLine>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<CreatePickOrMoveLine>
    Code lines:
    ...
      END ELSE
        IF (RemQtyToPickBase > 0) AND (NOT HasExpiredItems) THEN
          InsertShelfWhseActivLine(NewWhseActivLine,RemQtyToPickBase);
    END;
    
    OnAfterInsertWhseActivLine(NewWhseActivLine,SNRequired,LNRequired); <=====================
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnAfterUpdateWhseActivHeader>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<UpdateWhseActivHeader>
    Code lines:
    ...
      WhseActivHeader."Posting Date" := PostingDate;
      WhseActivHeader."External Document No.2" := VendorDocNo;
      GetLocation("Location Code");
    END;
    
    OnAfterUpdateWhseActivHeader(WhseActivHeader,WhseRequest); <=====================
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeCreatePickOrMoveLineFromProductionLoop>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<CreatePickOrMoveFromProduction>
    Code lines:
    ...
    
      FindNextLineNo;
    
      REPEAT
        IsHandled := FALSE;
        OnBeforeCreatePickOrMoveLineFromProductionLoop(WhseActivHeader,ProdOrder,IsHandled); <=====================
        IF NOT IsHandled THEN
          IF NOT
             NewWhseActivLine.ActivityExists(
               DATABASE::"Prod. Order Component",Status,"Prod. Order No.","Prod. Order Line No.","Line No.",0)
    ...
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeCreatePickOrMoveLineFromPurchaseLoop>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<CreatePickOrMoveFromPurchase>
    Code lines:
    ...
    
      FindNextLineNo;
    
      REPEAT
        IsHandled := FALSE;
        OnBeforeCreatePickOrMoveLineFromPurchaseLoop(WhseActivHeader,PurchHeader,IsHandled); <=====================
        IF NOT IsHandled THEN
          IF NOT NewWhseActivLine.ActivityExists(DATABASE::"Purchase Line","Document Type","Document No.","Line No.",0,0) THEN BEGIN
            NewWhseActivLine.INIT;
            NewWhseActivLine."Activity Type" := WhseActivHeader.Type;
    ...
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeCreatePickOrMoveLineFromSalesLoop>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<CreatePickOrMoveFromSales>
    Code lines:
    ...
    
      FindNextLineNo;
    
      REPEAT
        IsHandled := FALSE;
        OnBeforeCreatePickOrMoveLineFromSalesLoop(WhseActivHeader,SalesHeader,IsHandled); <=====================
        IF NOT IsHandled THEN
          IF NOT NewWhseActivLine.ActivityExists(DATABASE::"Sales Line","Document Type","Document No.","Line No.",0,0) THEN BEGIN
            NewWhseActivLine.INIT;
            NewWhseActivLine."Activity Type" := WhseActivHeader.Type;
    ...
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeCreatePickOrMoveLineFromTransferLoop>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<CreatePickOrMoveFromTransfer>
    Code lines:
    ...
    
      FindNextLineNo;
    
      REPEAT
        IsHandled := FALSE;
        OnBeforeCreatePickOrMoveLineFromTransferLoop(WhseActivHeader,TransferHeader,IsHandled); <=====================
        IF NOT IsHandled THEN
          IF NOT NewWhseActivLine.ActivityExists(DATABASE::"Transfer Line",0,"Document No.","Line No.",0,0) THEN BEGIN
            NewWhseActivLine.INIT;
            NewWhseActivLine."Activity Type" := WhseActivHeader.Type;
    ...
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeCreateTempHandlingSpec>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<CreateTempHandlingSpec>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCreateTempHandlingSpec(WhseActivLine,TotalQtyToPickBase,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF Location."Bin Mandatory" THEN
      IF NOT IsItemOnBins(WhseActivLine) THEN
        EXIT;
    
    WhseItemTrackingFEFO.SetSource(
    ...
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeFindAssemblyLine>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<SetFilterAssemblyLine>
    Code lines:
    ...
      IF NOT CheckLineExist THEN
        SETRANGE("Location Code",WhseActivHeader."Location Code");
      IF IsInvtMovement THEN
        SETFILTER("Bin Code",'<>%1','');
      SETFILTER("Remaining Quantity",'>0');
      OnBeforeFindAssemblyLine(AssemblyLine); <=====================
      EXIT(FIND('-'));
    END;
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeFindFromBinContent>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<InsertPickOrMoveBinWhseActLine>
    Code lines:
    ...
      IF NewWhseActivLine."Serial No." <> '' THEN
        SETRANGE("Serial No. Filter",NewWhseActivLine."Serial No.");
      IF NewWhseActivLine."Lot No." <> '' THEN
        SETRANGE("Lot No. Filter",NewWhseActivLine."Lot No.");
    
      OnBeforeFindFromBinContent(FromBinContent,NewWhseActivLine); <=====================
      IF FIND('-') THEN
        REPEAT
          IF NewWhseActivLine."Activity Type" = NewWhseActivLine."Activity Type"::"Invt. Movement" THEN
            QtyAvailToPickBase := CalcQtyAvailToPickIncludingDedicated(0)
    ...
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeFindProdOrderComp>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<SetFilterProductionLine>
    Code lines:
    ...
          "Flushing Method"::"Pick + Forward",
          "Flushing Method"::"Pick + Backward");
      END ELSE
        SETRANGE("Flushing Method","Flushing Method"::Manual);
      SETFILTER("Remaining Quantity",'>0');
      OnBeforeFindProdOrderComp(ProdOrderComp); <=====================
      EXIT(FIND('-'));
    END;
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeFindPurchLine>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<SetFilterPurchLine>
    Code lines:
    ...
      SETRANGE(Type,Type::Item);
      IF PurchHeader."Document Type" = PurchHeader."Document Type"::Order THEN
        SETFILTER("Qty. to Receive",'<%1',0)
      ELSE
        SETFILTER("Return Qty. to Ship",'>%1',0);
      OnBeforeFindPurchLine(PurchLine); <=====================
      EXIT(FIND('-'));
    END;
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeFindSalesLine>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<SetFilterSalesLine>
    Code lines:
    ...
      SETRANGE(Type,Type::Item);
      IF SalesHeader."Document Type" = SalesHeader."Document Type"::Order THEN
        SETFILTER("Qty. to Ship",'>%1',0)
      ELSE
        SETFILTER("Return Qty. to Receive",'<%1',0);
      OnBeforeFindSalesLine(SalesLine,SalesHeader); <=====================
      EXIT(FIND('-'));
    END;
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeFindTransLine>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<SetFilterTransferLine>
    Code lines:
    ...
      SETRANGE("Document No.",TransferHeader."No.");
      SETRANGE("Derived From Line No.",0);
      IF NOT CheckLineExist THEN
        SETRANGE("Transfer-from Code",WhseActivHeader."Location Code");
      SETFILTER("Qty. to Ship",'>%1',0);
      OnBeforeFindTransLine(TransferLine); <=====================
      EXIT(FIND('-'));
    END;
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeInsertPickOrMoveBinWhseActLine>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<InsertPickOrMoveBinWhseActLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforeInsertPickOrMoveBinWhseActLine(NewWhseActivLine,BinCode,DefaultBin,RemQtyToPickBase,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    CreateATOPickLine(NewWhseActivLine,BinCode,RemQtyToPickBase);
    IF RemQtyToPickBase = 0 THEN
      EXIT;
    
    WITH FromBinContent DO BEGIN
    ...
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeNewWhseActivLineInsert>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<MakeLine>
    Code lines:
    ...
    NewWhseActivLine."Qty. Outstanding" := NewWhseActivLine.Quantity;
    NewWhseActivLine."Qty. Outstanding (Base)" := NewWhseActivLine."Qty. (Base)";
    NewWhseActivLine."Qty. to Handle" := 0;
    NewWhseActivLine."Qty. to Handle (Base)" := 0;
    RemQtyToPickBase := RemQtyToPickBase - QtyToPickBase;
    OnBeforeNewWhseActivLineInsert(NewWhseActivLine); <=====================
    NewWhseActivLine.INSERT;
    
    IF Location."Bin Mandatory" AND IsInvtMovement THEN BEGIN
      // Place Action for inventory movement
    ...
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromAssembly>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<CreatePickOrMoveFromAssembly>
    Code lines:
    ...
          NewWhseActivLine."Due Date" := "Due Date";
          NewWhseActivLine."Destination Type" := NewWhseActivLine."Destination Type"::Item;
          NewWhseActivLine."Destination No." := AssemblyHeader."Item No.";
          RemQtyToPickBase := "Quantity (Base)" - "Remaining Quantity (Base)" +
            "Quantity to Consume (Base)" - "Qty. Picked (Base)";
          OnBeforeNewWhseActivLineInsertFromAssembly(NewWhseActivLine,AssemblyLine); <=====================
          CALCFIELDS("Reserved Quantity");
          CreatePickOrMoveLine(
            NewWhseActivLine,RemQtyToPickBase,RemQtyToPickBase,"Reserved Quantity" <> 0);
        END;
    ...
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromComp>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<CreatePickOrMoveFromProduction>
    Code lines:
    ...
            NewWhseActivLine."Due Date" := "Due Date";
            IF WhseActivHeader.Type = WhseActivHeader.Type::"Invt. Pick" THEN
              RemQtyToPickBase := "Remaining Qty. (Base)"
            ELSE
              RemQtyToPickBase := "Expected Qty. (Base)" - "Qty. Picked (Base)";
            OnBeforeNewWhseActivLineInsertFromComp(NewWhseActivLine,ProdOrderComp); <=====================
            CALCFIELDS("Reserved Quantity");
            CreatePickOrMoveLine(
              NewWhseActivLine,RemQtyToPickBase,RemQtyToPickBase,"Reserved Quantity" <> 0);
          END;
    ...
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromPurchase>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<CreatePickOrMoveFromPurchase>
    Code lines:
    ...
            END ELSE BEGIN
              NewWhseActivLine."Source Document" :=
                NewWhseActivLine."Source Document"::"Purchase Return Order";
              RemQtyToPickBase := "Return Qty. to Ship (Base)";
            END;
            OnBeforeNewWhseActivLineInsertFromPurchase(NewWhseActivLine,PurchLine); <=====================
            CALCFIELDS("Reserved Quantity");
            CreatePickOrMoveLine(
              NewWhseActivLine,RemQtyToPickBase,"Outstanding Qty. (Base)","Reserved Quantity" <> 0);
          END;
    ...
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromSales>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<CreatePickOrMoveFromSales>
    Code lines:
    ...
              RemQtyToPickBase := "Qty. to Ship (Base)";
            END ELSE BEGIN
              NewWhseActivLine."Source Document" := NewWhseActivLine."Source Document"::"Sales Return Order";
              RemQtyToPickBase := -"Return Qty. to Receive (Base)";
            END;
            OnBeforeNewWhseActivLineInsertFromSales(NewWhseActivLine,SalesLine); <=====================
            CALCFIELDS("Reserved Quantity");
            CreatePickOrMoveLine(
              NewWhseActivLine,RemQtyToPickBase,"Outstanding Qty. (Base)","Reserved Quantity" <> 0);
    
    ...
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeNewWhseActivLineInsertFromTransfer>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<CreatePickOrMoveFromTransfer>
    Code lines:
    ...
            NewWhseActivLine."Shipping Agent Service Code" := "Shipping Agent Service Code";
            NewWhseActivLine."Shipment Method Code" := TransferHeader."Shipment Method Code";
            NewWhseActivLine."Destination Type" := NewWhseActivLine."Destination Type"::Location;
            NewWhseActivLine."Destination No." := TransferHeader."Transfer-to Code";
            RemQtyToPickBase := "Qty. to Ship (Base)";
            OnBeforeNewWhseActivLineInsertFromTransfer(NewWhseActivLine,TransferLine); <=====================
            CALCFIELDS("Reserved Quantity Outbnd.");
            CreatePickOrMoveLine(
              NewWhseActivLine,RemQtyToPickBase,
              "Outstanding Qty. (Base)","Reserved Quantity Outbnd." <> 0);
    ...
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforePickStrictExpirationPosting>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<PickStrictExpirationPosting>
    Code lines:
    IsHandled := FALSE;
    OnBeforePickStrictExpirationPosting(ItemNo,SNRequired,LNRequired,StrictExpirationPosting,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(StrictExpirationPosting);
    
    EXIT(ItemTrackingMgt.StrictExpirationPosting(ItemNo) AND (SNRequired OR LNRequired));
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeTempReservEntryInsert>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<PrepareItemTrackingFromWhseIT>
    Code lines:
    ...
        TempReservEntry."Entry No." := EntryNo;
        TempReservEntry.Positive := FALSE;
        TempReservEntry."Reservation Status" := TempReservEntry."Reservation Status"::Surplus;
        TempReservEntry.VALIDATE("Quantity (Base)",-TempReservEntry."Quantity (Base)");
        TempReservEntry.UpdateItemTracking;
        OnBeforeTempReservEntryInsert(TempReservEntry,WhseItemTrackingLine); <=====================
        TempReservEntry.INSERT;
      UNTIL WhseItemTrackingLine.NEXT = 0;
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnBeforeWhseItemTrackingLineInsert>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<SynchronizeWhseItemTracking>
    Code lines:
    ...
    CLEAR(WhseItemTrackingLine);
    WhseItemTrackingLine.TRANSFERFIELDS(TrackingSpecification);
    WhseItemTrackingLine.VALIDATE("Quantity (Base)",ABS(WhseItemTrackingLine."Quantity (Base)"));
    WhseItemTrackingLine.VALIDATE("Qty. to Invoice (Base)",ABS(WhseItemTrackingLine."Qty. to Invoice (Base)"));
    WhseItemTrackingLine."Entry No." := EntryNo;
    OnBeforeWhseItemTrackingLineInsert(WhseItemTrackingLine,TrackingSpecification); <=====================
    WhseItemTrackingLine.INSERT;
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnCreateInvtMvntWithoutSourceOnAfterTransferFields>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<CreateInvtMvntWithoutSource>
    Code lines:
    ...
        NewWhseActivLine."Unit of Measure Code" := "Unit of Measure Code";
        NewWhseActivLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        NewWhseActivLine.Description := Description;
        NewWhseActivLine."Due Date" := "Due Date";
        RemQtyToPickBase := "Qty. (Base)";
        OnCreateInvtMvntWithoutSourceOnAfterTransferFields(NewWhseActivLine,InternalMovementLine); <=====================
        PrepareItemTrackingFromWhseIT(InternalMovementLine);
        CreatePickOrMoveLine(NewWhseActivLine,RemQtyToPickBase,RemQtyToPickBase,FALSE);
      UNTIL NEXT = 0;
    END;
    ...
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnCreatePickOrMoveLineFromHandlingSpec>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<CreatePickOrMoveLine>
    Code lines:
    ...
                NewWhseActivLine."Expiration Date" :=
                  ItemTrackingMgt.ExistingExpirationDate(NewWhseActivLine."Item No.",
                    NewWhseActivLine."Variant Code",NewWhseActivLine."Lot No.",NewWhseActivLine."Serial No.",
                    FALSE,EntriesExist);
    
              OnCreatePickOrMoveLineFromHandlingSpec(NewWhseActivLine,TempHandlingSpecification,EntriesExist); <=====================
    
              IF Location."Bin Mandatory" THEN BEGIN
                // find Take qty. for bin code of source line
                IF (NewWhseActivLine."Bin Code" <> '') AND (NOT IsInvtMovement OR IsBlankInvtMovement) THEN
    ...
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnInsertTempHandlingSpecOnBeforeValidateQtyBase>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<InsertTempHandlingSpec>
    Code lines:
    ...
      "Item No." := ItemNo;
      "Variant Code" := VariantCode;
      "Lot No." := EntrySummary."Lot No.";
      "Serial No." := EntrySummary."Serial No.";
      "Expiration Date" := EntrySummary."Expiration Date";
      OnInsertTempHandlingSpecOnBeforeValidateQtyBase(TempHandlingSpecification,EntrySummary); <=====================
      VALIDATE("Quantity (Base)",-QuantityBase);
      INSERT;
      LastTempHandlingSpecNo := "Entry No.";
    END;
Codeunit<Create Inventory Pick/Movement>.PROCEDURE<OnInvtMvntWithoutSourceOnBeforeWhseActivHeaderModify>
  Raised in: Codeunit<Create Inventory Pick/Movement>.PROCEDURE<CreateInvtMvntWithoutSource>
    Code lines:
    ...
      WhseActivHeader.VALIDATE("Location Code",InternalMovementHeader."Location Code");
      WhseActivHeader.VALIDATE("Posting Date",InternalMovementHeader."Due Date");
      WhseActivHeader.VALIDATE("Assigned User ID",InternalMovementHeader."Assigned User ID");
      WhseActivHeader.VALIDATE("Assignment Date",InternalMovementHeader."Assignment Date");
      WhseActivHeader.VALIDATE("Assignment Time",InternalMovementHeader."Assignment Time");
      OnInvtMvntWithoutSourceOnBeforeWhseActivHeaderModify(WhseActivHeader,InternalMovementHeader); <=====================
      WhseActivHeader.MODIFY;
    
      FindNextLineNo;
    
    ...
Codeunit<Whse.-Act.-Post (Yes/No)>.PROCEDURE<OnBeforeConfirmPost>
  Raised in: Codeunit<Whse.-Act.-Post (Yes/No)>.PROCEDURE<Code>
    Code lines:
    IsHandled := FALSE;
    HideDialog := FALSE;
    DefaultOption := 2;
    OnBeforeConfirmPost(WhseActivLine,HideDialog,Selection,DefaultOption,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF (DefaultOption < 1) OR (DefaultOption > 2) THEN
      DefaultOption := 2;
    
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterCode>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<Code>
    Code lines:
    ...
            TransferOrderPostPrint.PrintReport(TransHeader,Selection::Receipt);
          "Source Document"::"Outbound Transfer":
            TransferOrderPostPrint.PrintReport(TransHeader,Selection::Shipment);
        END;
    
      OnAfterCode(WhseActivLine); <=====================
    
      COMMIT;
      OnAfterPostWhseActivHeader(WhseActivHeader);
    
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterCreateWhseJnlLine>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<CreateWhseJnlLine>
    Code lines:
    ...
      WhseJnlLine."Lot No." := "Lot No.";
      WhseJnlLine."Warranty Date" := "Warranty Date";
      WhseJnlLine."Expiration Date" := "Expiration Date";
    END;
    
    OnAfterCreateWhseJnlLine(WhseJnlLine,WhseActivLine); <=====================
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterInitSourceDocument>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<InitSourceDocument>
    Code lines:
    ...
            IF ModifyHeader THEN
              TransHeader.MODIFY;
          END;
      END;
    
    OnAfterInitSourceDocument(WhseActivHeader); <=====================
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterPostWhseActivHeader>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<Code>
    Code lines:
    ...
        END;
    
      OnAfterCode(WhseActivLine);
    
      COMMIT;
      OnAfterPostWhseActivHeader(WhseActivHeader); <=====================
    
      CLEAR(WhseJnlRegisterLine);
    END;
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterPurchLineModify>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<InitSourceDocument>
    Code lines:
    ...
                  PurchLine.VALIDATE("Qty. to Receive",0)
                ELSE
                  PurchLine.VALIDATE("Return Qty. to Ship",0);
                PurchLine.VALIDATE("Qty. to Invoice",0);
                PurchLine.MODIFY;
                OnAfterPurchLineModify(PurchLine); <=====================
              UNTIL PurchLine.NEXT = 0;
    
            IF (PurchHeader."Posting Date" <> "Posting Date") AND ("Posting Date" <> 0D) THEN BEGIN
              PurchRelease.Reopen(PurchHeader);
    ...
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<UpdateSourceDocument>
    Code lines:
    ...
              IF InvoiceSourceDoc THEN
                PurchLine.VALIDATE("Qty. to Invoice",-"Qty. to Handle");
            END;
            PurchLine."Bin Code" := "Bin Code";
            PurchLine.MODIFY;
            OnAfterPurchLineModify(PurchLine); <=====================
            OnUpdateSourceDocumentOnAfterPurchLineModify(PurchLine,TempWhseActivLine); <=====================
          END;
        DATABASE::"Sales Line":
          BEGIN
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterSalesLineModify>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<InitSourceDocument>
    Code lines:
    ...
                  SalesLine.VALIDATE("Qty. to Ship",0)
                ELSE
                  SalesLine.VALIDATE("Return Qty. to Receive",0);
                SalesLine.VALIDATE("Qty. to Invoice",0);
                SalesLine.MODIFY;
                OnAfterSalesLineModify(SalesLine); <=====================
              UNTIL SalesLine.NEXT = 0;
    
            IF (SalesHeader."Posting Date" <> "Posting Date") AND ("Posting Date" <> 0D) THEN BEGIN
              SalesRelease.Reopen(SalesHeader);
    ...
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<UpdateSourceDocument>
    Code lines:
    ...
            SalesLine.MODIFY;
            IF "Assemble to Order" THEN BEGIN
              ATOLink.UpdateQtyToAsmFromInvtPickLine(TempWhseActivLine);
              ATOLink.UpdateAsmBinCodeFromInvtPickLine(TempWhseActivLine);
            END;
            OnAfterSalesLineModify(SalesLine); <=====================
            OnUpdateSourceDocumentOnAfterSalesLineModify(SalesLine,TempWhseActivLine); <=====================
          END;
        DATABASE::"Transfer Line":
          BEGIN
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterTransLineModify>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<InitSourceDocument>
    Code lines:
    ...
            IF TransLine.FIND('-') THEN
              REPEAT
                TransLine.VALIDATE("Qty. to Ship",0);
                TransLine.VALIDATE("Qty. to Receive",0);
                TransLine.MODIFY;
                OnAfterTransLineModify(TransLine); <=====================
              UNTIL TransLine.NEXT = 0;
    
            IF (TransHeader."Posting Date" <> "Posting Date") AND ("Posting Date" <> 0D) THEN BEGIN
              TransHeader.CalledFromWarehouse(TRUE);
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnAfterWhseActivLineModify>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<Code>
    Code lines:
    ...
            IF HideDialog THEN
              WhseActivLine.VALIDATE("Qty. to Handle",0);
            WhseActivLine.VALIDATE(
              "Qty. Handled",WhseActivLine.Quantity - WhseActivLine."Qty. Outstanding");
            WhseActivLine.MODIFY;
            OnAfterWhseActivLineModify(WhseActivLine); <=====================
          END;
        UNTIL WhseActivLine.NEXT = 0;
    
      WhseActivLine.RESET;
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnBeforeCheckItemTracking>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<CheckItemTracking>
    Code lines:
    OnBeforeCheckItemTracking(WhseActivLine2,Result,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(Result);
    
    WITH WhseActivLine2 DO BEGIN
      ItemTrackingMgt.CheckWhseItemTrkgSetup("Item No.",SNRequired,LNRequired,FALSE);
      IF SNRequired THEN
        TESTFIELD("Serial No.");
      IF LNRequired THEN
        TESTFIELD("Lot No.");
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnBeforeCheckLines>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<Code>
    Code lines:
    ...
          Text002);
        Window.UPDATE(1,"No.");
      END;
    
      // Check Lines
      OnBeforeCheckLines(WhseActivHeader); <=====================
      LineCount := 0;
      IF WhseActivLine.FIND('-') THEN BEGIN
        TempWhseActivLine.SETCURRENTKEY(
          "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.");
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnBeforeCode>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<Code>
    Code lines:
    OnBeforeCode(WhseActivLine); <=====================
    
    PostingReference := WhseSetup.GetNextReference;
    
    WITH WhseActivHeader DO BEGIN
      WhseActivLine.SETRANGE("Activity Type",WhseActivLine."Activity Type");
      WhseActivLine.SETRANGE("No.",WhseActivLine."No.");
      WhseActivLine.SETFILTER("Qty. to Handle",'<>0');
      IF NOT WhseActivLine.FIND('-') THEN
        ERROR(Text003);
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnBeforeInitSourceDocument>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<InitSourceDocument>
    Code lines:
    OnBeforeInitSourceDocument(WhseActivHeader); <=====================
    
    WITH WhseActivHeader DO
      CASE "Source Type" OF
        DATABASE::"Purchase Line":
          BEGIN
            PurchHeader.GET("Source Subtype","Source No.");
            PurchLine.SETRANGE("Document Type","Source Subtype");
            PurchLine.SETRANGE("Document No.","Source No.");
            IF PurchLine.FIND('-') THEN
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnBeforeInsertTempWhseActivLine>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<InsertTempWhseActivLine>
    Code lines:
    OnBeforeInsertTempWhseActivLine(WhseActivLine,ItemTrackingRequired); <=====================
    
    WITH WhseActivLine DO BEGIN
      TempWhseActivLine.SetSourceFilter(
        "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.",FALSE);
      IF TempWhseActivLine.FIND('-') THEN BEGIN
        TempWhseActivLine."Qty. to Handle" += "Qty. to Handle";
        TempWhseActivLine."Qty. to Handle (Base)" += "Qty. to Handle (Base)";
        TempWhseActivLine.MODIFY;
      END ELSE BEGIN
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnBeforePostedInvtPickLineInsert>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<CreatePostedActivLine>
    Code lines:
    ...
    END ELSE BEGIN
      PostedInvtPickLine.INIT;
      PostedInvtPickLine.TRANSFERFIELDS(WhseActivLine);
      PostedInvtPickLine."No." := PostedInvtPickHdr."No.";
      PostedInvtPickLine.VALIDATE(Quantity,WhseActivLine."Qty. to Handle");
      OnBeforePostedInvtPickLineInsert(PostedInvtPickLine,WhseActivLine); <=====================
      PostedInvtPickLine.INSERT;
    END;
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnBeforePostedInvtPutAwayLineInsert>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<CreatePostedActivLine>
    Code lines:
    IF WhseActivHeader.Type = WhseActivHeader.Type::"Invt. Put-away" THEN BEGIN
      PostedInvtPutAwayLine.INIT;
      PostedInvtPutAwayLine.TRANSFERFIELDS(WhseActivLine);
      PostedInvtPutAwayLine."No." := PostedInvtPutAwayHdr."No.";
      PostedInvtPutAwayLine.VALIDATE(Quantity,WhseActivLine."Qty. to Handle");
      OnBeforePostedInvtPutAwayLineInsert(PostedInvtPutAwayLine,WhseActivLine); <=====================
      PostedInvtPutAwayLine.INSERT;
    END ELSE BEGIN
      PostedInvtPickLine.INIT;
      PostedInvtPickLine.TRANSFERFIELDS(WhseActivLine);
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnBeforePostWhseJnlLine>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<PostWhseJnlLine>
    Code lines:
    OnBeforePostWhseJnlLine(WhseActivLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    CreateWhseJnlLine(TempWhseJnlLine,WhseActivLine);
    IF TempWhseJnlLine."Entry Type" = TempWhseJnlLine."Entry Type"::"Negative Adjmt." THEN
      WMSMgt.CheckWhseJnlLine(TempWhseJnlLine,4,TempWhseJnlLine."Qty. (Base)",FALSE); // 4 = Whse. Journal
    WhseJnlRegisterLine.RUN(TempWhseJnlLine);
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnBeforeTempWhseActivLineInsert>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<InsertTempWhseActivLine>
    Code lines:
    ...
        TempWhseActivLine."Qty. to Handle (Base)" += "Qty. to Handle (Base)";
        TempWhseActivLine.MODIFY;
      END ELSE BEGIN
        TempWhseActivLine.INIT;
        TempWhseActivLine := WhseActivLine;
        OnBeforeTempWhseActivLineInsert(TempWhseActivLine,WhseActivLine); <=====================
        TempWhseActivLine.INSERT;
        IF ItemTrackingRequired AND
           ("Activity Type" IN ["Activity Type"::"Invt. Pick","Activity Type"::"Invt. Put-away"])
        THEN
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnBeforeUnhandledTransLineModify>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<UpdateUnhandledTransLine>
    Code lines:
    ...
        REPEAT
          IF "Qty. in Transit" <> 0 THEN
            VALIDATE("Qty. to Receive","Qty. in Transit");
          IF "Outstanding Quantity" <> 0 THEN
            VALIDATE("Qty. to Ship","Outstanding Quantity");
          OnBeforeUnhandledTransLineModify(TransLine); <=====================
          MODIFY;
        UNTIL NEXT = 0;
    END;
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnBeforeUpdateSourceDocument>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<UpdateSourceDocument>
    Code lines:
    OnBeforeUpdateSourceDocument(TempWhseActivLine); <=====================
    
    WITH TempWhseActivLine DO
      CASE "Source Type" OF
        DATABASE::"Purchase Line":
          BEGIN
            IF "Activity Type" = "Activity Type"::"Invt. Pick" THEN BEGIN
              "Qty. to Handle" := -"Qty. to Handle";
              "Qty. to Handle (Base)" := -"Qty. to Handle (Base)";
            END;
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnBeforeWhseActivLineDelete>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<Code>
    Code lines:
    ...
      WhseActivLine.SETCURRENTKEY(
        "Activity Type","No.","Whse. Document Type","Whse. Document No.");
      IF WhseActivLine.FIND('-') THEN
        REPEAT
          ForceDelete := FALSE;
          OnBeforeWhseActivLineDelete(WhseActivLine,ForceDelete); <=====================
          IF (WhseActivLine."Qty. Outstanding" = WhseActivLine."Qty. to Handle") OR ForceDelete THEN
            WhseActivLine.DELETE
          ELSE BEGIN
            WhseActivLine.VALIDATE(
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnCodeOnAfterCreatePostedWhseActivDocument>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<Code>
    Code lines:
    ...
    
          IF Location."Bin Mandatory" THEN
            PostWhseJnlLine(WhseActivLine);
          CreatePostedActivLine(WhseActivLine);
        UNTIL WhseActivLine.NEXT = 0;
        OnCodeOnAfterCreatePostedWhseActivDocument(WhseActivHeader); <=====================
      END;
    
      // Modify/delete activity header and activity lines
      TempWhseActivLine.DELETEALL;
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnPostConsumptionLineOnAfterCreateItemJnlLine>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<PostConsumptionLine>
    Code lines:
    ...
      ItemJnlLine."Variant Code" := "Variant Code";
      ItemJnlLine."Source Code" := SourceCodeSetup."Consumption Journal";
      ItemJnlLine."Gen. Bus. Posting Group" := ProdOrder."Gen. Bus. Posting Group";
      GetItem("Item No.");
      ItemJnlLine."Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";
      OnPostConsumptionLineOnAfterCreateItemJnlLine(ItemJnlLine,ProdOrderLine,WhseActivLine); <=====================
      ReserveProdOrderComp.TransferPOCompToItemJnlLineCheckILE(ProdOrderComp,ItemJnlLine,ItemJnlLine."Quantity (Base)",TRUE);
      ItemJnlPostLine.SetCalledFromInvtPutawayPick(TRUE);
      ItemJnlPostLine.RunWithCheck(ItemJnlLine);
      ReserveProdOrderComp.UpdateItemTrackingAfterPosting(ProdOrderComp);
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnPostOutputLineOnAfterCreateItemJnlLine>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<PostOutputLine>
    Code lines:
    ...
      IF ProdOrderLine."Routing No." <> '' THEN
        ItemJnlLine.VALIDATE("Operation No.",CalcLastOperationNo);
      ItemJnlLine.VALIDATE("Output Quantity","Qty. to Handle");
      ItemJnlLine."Source Code" := SourceCodeSetup."Output Journal";
      ItemJnlLine."Dimension Set ID" := ProdOrderLine."Dimension Set ID";
      OnPostOutputLineOnAfterCreateItemJnlLine(ItemJnlLine,ProdOrderLine,TempWhseActivLine); <=====================
      ReservProdOrderLine.TransferPOLineToItemJnlLine(
        ProdOrderLine,ItemJnlLine,ItemJnlLine."Quantity (Base)");
      ItemJnlPostLine.SetCalledFromInvtPutawayPick(TRUE);
      ItemJnlPostLine.RunWithCheck(ItemJnlLine);
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnUpdateSourceDocumentOnAfterPurchLineModify>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<UpdateSourceDocument>
    Code lines:
    ...
                PurchLine.VALIDATE("Qty. to Invoice",-"Qty. to Handle");
            END;
            PurchLine."Bin Code" := "Bin Code";
            PurchLine.MODIFY;
            OnAfterPurchLineModify(PurchLine);
            OnUpdateSourceDocumentOnAfterPurchLineModify(PurchLine,TempWhseActivLine); <=====================
          END;
        DATABASE::"Sales Line":
          BEGIN
            IF "Activity Type" = "Activity Type"::"Invt. Pick" THEN BEGIN
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnUpdateSourceDocumentOnAfterSalesLineModify>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<UpdateSourceDocument>
    Code lines:
    ...
            IF "Assemble to Order" THEN BEGIN
              ATOLink.UpdateQtyToAsmFromInvtPickLine(TempWhseActivLine);
              ATOLink.UpdateAsmBinCodeFromInvtPickLine(TempWhseActivLine);
            END;
            OnAfterSalesLineModify(SalesLine);
            OnUpdateSourceDocumentOnAfterSalesLineModify(SalesLine,TempWhseActivLine); <=====================
          END;
        DATABASE::"Transfer Line":
          BEGIN
            TransLine.GET("Source No.","Source Line No.");
    ...
Codeunit<Whse.-Activity-Post>.PROCEDURE<OnUpdateSourceDocumentOnAfterTransLineModify>
  Raised in: Codeunit<Whse.-Activity-Post>.PROCEDURE<UpdateSourceDocument>
    Code lines:
    ...
              TransLine."Transfer-from Bin Code" := "Bin Code";
              TransLine.VALIDATE("Qty. to Ship","Qty. to Handle");
              TransLine."Qty. to Ship (Base)" := "Qty. to Handle (Base)";
            END;
            TransLine.MODIFY;
            OnUpdateSourceDocumentOnAfterTransLineModify(TransLine,TempWhseActivLine); <=====================
          END;
      END;
Codeunit<Whse.-Output Prod. Release>.PROCEDURE<OnAfterCheckWhseRqstProdOrderLine>
  Raised in: Codeunit<Whse.-Output Prod. Release>.PROCEDURE<CheckWhseRqst>
    Code lines:
    ...
                 ProdOrderLine2.Status,
                 ProdOrderLine2."Prod. Order No.")
            THEN
              WhseRqstCreated := FALSE;
          END;
          OnAfterCheckWhseRqstProdOrderLine(ProdOrderLine2,WhseRqst,WhseRqstCreated); <=====================
        UNTIL (ProdOrderLine2.NEXT = 0) OR NOT WhseRqstCreated;
    END;
    EXIT(WhseRqstCreated);
Codeunit<Whse.-Output Prod. Release>.PROCEDURE<OnAfterCreateWhseRqst>
  Raised in: Codeunit<Whse.-Output Prod. Release>.PROCEDURE<CreateWhseRqst>
    Code lines:
    ...
    IF NOT WhseRqst.INSERT THEN
      WhseRqst.MODIFY;
    
    WhseRqstCreated := TRUE;
    
    OnAfterCreateWhseRqst(ProdOrder,ProdOrderLine,WhseRqst); <=====================
Codeunit<Whse.-Output Prod. Release>.PROCEDURE<OnAfterDeleteLine>
  Raised in: Codeunit<Whse.-Output Prod. Release>.PROCEDURE<DeleteLine>
    Code lines:
    ...
    
      IF NOT KeepWhseRqst THEN
        DeleteWhseRqst(ProdOrderLine,FALSE);
    END;
    
    OnAfterDeleteLine(ProdOrderLine,KeepWhseRqst); <=====================
Codeunit<Whse.-Output Prod. Release>.PROCEDURE<OnBeforeWhseRequestInsert>
  Raised in: Codeunit<Whse.-Output Prod. Release>.PROCEDURE<CreateWhseRqst>
    Code lines:
    ...
      ProdOrder."Source Type"::Family:
        WhseRqst."Destination Type" := WhseRqst."Destination Type"::Family;
      ProdOrder."Source Type"::"Sales Header":
        WhseRqst."Destination Type" := WhseRqst."Destination Type"::"Sales Order";
    END;
    OnBeforeWhseRequestInsert(WhseRqst,ProdOrderLine,ProdOrder); <=====================
    IF NOT WhseRqst.INSERT THEN
      WhseRqst.MODIFY;
    
    WhseRqstCreated := TRUE;
    ...
Codeunit<Whse. Item Tracking FEFO>.PROCEDURE<OnAfterCreateEntrySummaryFEFO>
  Raised in: Codeunit<Whse. Item Tracking FEFO>.PROCEDURE<CreateEntrySummaryFEFO>
    Code lines:
    ...
    
    SummarizeInventoryFEFO(Location,ItemNo,VariantCode,UseExpDates);
    IF UseExpDates THEN
      SummarizeAdjustmentBinFEFO(Location,ItemNo,VariantCode);
    
    OnAfterCreateEntrySummaryFEFO(TempGlobalEntrySummary); <=====================
Codeunit<Whse. Item Tracking FEFO>.PROCEDURE<OnBeforeFindFirstEntrySummaryFEFO>
  Raised in: Codeunit<Whse. Item Tracking FEFO>.PROCEDURE<FindFirstEntrySummaryFEFO>
    Code lines:
    IsHandled := FALSE;
    IsFound := FALSE;
    OnBeforeFindFirstEntrySummaryFEFO(TempGlobalEntrySummary,IsFound,IsHandled); <=====================
    IF IsHandled THEN BEGIN
      IF IsFound THEN
        EntrySummary := TempGlobalEntrySummary;
      EXIT(IsFound);
    END;
    
    WITH TempGlobalEntrySummary DO BEGIN
    ...
Codeunit<Whse. Item Tracking FEFO>.PROCEDURE<OnBeforeInsertEntrySummaryFEFO>
  Raised in: Codeunit<Whse. Item Tracking FEFO>.PROCEDURE<InsertEntrySummaryFEFO>
    Code lines:
    ...
        INIT;
        "Entry No." := LastSummaryEntryNo + 1;
        "Serial No." := SerialNo;
        "Lot No." := LotNo;
        "Expiration Date" := ExpirationDate;
        OnBeforeInsertEntrySummaryFEFO(TempGlobalEntrySummary); <=====================
        INSERT;
        LastSummaryEntryNo := "Entry No.";
      END ELSE
        HasExpiredItems := TRUE;
Codeunit<Whse. Item Tracking FEFO>.PROCEDURE<OnBeforeSetSource>
  Raised in: Codeunit<Whse. Item Tracking FEFO>.PROCEDURE<SetSource>
    Code lines:
    OnBeforeSetSource(SourceType2,SourceSubType2,SourceNo2,SourceLineNo2,SourceSubLineNo2); <=====================
    
    SourceReservationEntry.RESET;
    CreatePick.SetFiltersOnReservEntry(
      SourceReservationEntry,SourceType2,SourceSubType2,SourceNo2,SourceLineNo2,SourceSubLineNo2);
    SourceSet := TRUE;
Codeunit<Whse. Item Tracking FEFO>.PROCEDURE<OnBeforeSummarizeInventoryFEFO>
  Raised in: Codeunit<Whse. Item Tracking FEFO>.PROCEDURE<SummarizeInventoryFEFO>
    Code lines:
    IsHandled := FALSE;
    OnBeforeSummarizeInventoryFEFO(Location,ItemNo,VariantCode,HasExpirationDate,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH ItemLedgEntry DO BEGIN
      RESET;
      SETCURRENTKEY("Item No.",Open,"Variant Code",Positive,"Lot No.","Serial No.");
      SETRANGE("Item No.",ItemNo);
      SETRANGE(Open,TRUE);
    ...
Codeunit<Whse. Item Tracking FEFO>.PROCEDURE<OnEntrySummaryFEFOExistsOnAfterSetFilters>
  Raised in: Codeunit<Whse. Item Tracking FEFO>.PROCEDURE<EntrySummaryFEFOExists>
    Code lines:
    WITH TempGlobalEntrySummary DO BEGIN
      SetTrackingFilter(SerialNo,LotNo);
      OnEntrySummaryFEFOExistsOnAfterSetFilters(TempGlobalEntrySummary); <=====================
      EXIT(FINDSET);
    END;
Codeunit<Whse. Item Tracking FEFO>.PROCEDURE<OnSummarizeAdjustmentBinFEFOOnBeforeInsertEntrySummaryFEFO>
  Raised in: Codeunit<Whse. Item Tracking FEFO>.PROCEDURE<SummarizeAdjustmentBinFEFO>
    Code lines:
    ...
                    "Item No.","Variant Code",Location,"Lot No.","Serial No.",EntriesExist);
    
                IF NOT EntriesExist THEN
                  ExpirationDate := 0D;
    
                OnSummarizeAdjustmentBinFEFOOnBeforeInsertEntrySummaryFEFO(TempGlobalEntrySummary,WhseEntry); <=====================
                InsertEntrySummaryFEFO("Lot No.","Serial No.",ExpirationDate);
              END;
        UNTIL NEXT = 0;
    END;
Codeunit<Whse. Item Tracking FEFO>.PROCEDURE<OnSummarizeInventoryFEFOOnBeforeInsertEntrySummaryFEFO>
  Raised in: Codeunit<Whse. Item Tracking FEFO>.PROCEDURE<SummarizeInventoryFEFO>
    Code lines:
    ...
          UNTIL NEXT = 0;
    
        IF NonReservedQtyLotSN - CalcNonRegisteredQtyOutstanding(
             "Item No.","Variant Code","Location Code","Lot No.","Serial No.",HasExpirationDate) > 0
        THEN BEGIN
          OnSummarizeInventoryFEFOOnBeforeInsertEntrySummaryFEFO(TempGlobalEntrySummary,ItemLedgEntry); <=====================
          InsertEntrySummaryFEFO("Lot No.","Serial No.","Expiration Date");
        END;
    
        SETRANGE("Lot No.");
    ...
Codeunit<Phys. Invt. Count.-Management>.PROCEDURE<OnBeforeCreatePhysInvtItemJnl>
  Raised in: Codeunit<Phys. Invt. Count.-Management>.PROCEDURE<CreatePhysInvtItemJnl>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCreatePhysInvtItemJnl(ItemJnlLine,TempPhysInvtItemSelection,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    ItemJnlBatch.GET(ItemJnlLine."Journal Template Name",ItemJnlLine."Journal Batch Name");
    PhysInvtCountRep.SetItemJnlLine(ItemJnlBatch);
    PhysInvtCountRep.RUNMODAL;
    
    IF PhysInvtCountRep.GetRequest(
    ...
Codeunit<Phys. Invt. Count.-Management>.PROCEDURE<OnCreateCustomPhysInvtJournal>
  Raised in: Codeunit<Phys. Invt. Count.-Management>.<OnRun>
    Code lines:
    ...
        SourceJnl::ItemJnl:
          CreatePhysInvtItemJnl;
        SourceJnl::WhseJnl:
          CreatePhysInvtWhseJnl;
        SourceJnl::Custom:
          OnCreateCustomPhysInvtJournal(TempPhysInvtItemSelection,SortingMethod,HideValidationDialog); <=====================
      END;
Codeunit<Phys. Invt. Count.-Management>.PROCEDURE<OnRunOnAfterSetItemFilters>
  Raised in: Codeunit<Phys. Invt. Count.-Management>.<OnRun>
    Code lines:
    WITH Item DO BEGIN
      SETFILTER("Phys Invt Counting Period Code",'<>''''');
      SETFILTER("Next Counting Start Date",'<>%1',0D);
      SETFILTER("Next Counting End Date",'<>%1',0D);
      OnRunOnAfterSetItemFilters(Item,SourceJnl); <=====================
      IF FIND('-') THEN
        REPEAT
          IF ("Last Counting Period Update" < "Next Counting Start Date") AND
             (WORKDATE >= "Next Counting Start Date")
          THEN
    ...
Codeunit<Phys. Invt. Count.-Management>.PROCEDURE<OnRunOnAfterSetSKUFilters>
  Raised in: Codeunit<Phys. Invt. Count.-Management>.<OnRun>
    Code lines:
    ...
      SETFILTER("Phys Invt Counting Period Code",'<>''''');
      SETFILTER("Next Counting Start Date",'<>%1',0D);
      SETFILTER("Next Counting End Date",'<>%1',0D);
      IF SourceJnl = SourceJnl::WhseJnl THEN
        SETRANGE("Location Code",WhseJnlLine."Location Code");
      OnRunOnAfterSetSKUFilters(SKU,SourceJnl); <=====================
      IF FIND('-') THEN
        REPEAT
          IF ("Last Counting Period Update" < "Next Counting Start Date") AND
             (WORKDATE >= "Next Counting Start Date")
    ...
Codeunit<Purch.-Get Receipt>.PROCEDURE<OnAfterCalcInvoiceDiscount>
  Raised in: Codeunit<Purch.-Get Receipt>.PROCEDURE<CreateInvLines>
    Code lines:
    ...
          END;
        UNTIL NEXT = 0;
        OnAfterInsertLines(PurchHeader);
    
        CalcInvoiceDiscount(PurchLine);
        OnAfterCalcInvoiceDiscount(PurchHeader); <=====================
    
        IF TransferLine THEN
          AdjustPrepmtAmtToDeductRounding(PurchLine,PrepmtAmtToDeductRounding);
      END;
Codeunit<Purch.-Get Receipt>.PROCEDURE<OnAfterInsertLines>
  Raised in: Codeunit<Purch.-Get Receipt>.PROCEDURE<CreateInvLines>
    Code lines:
    ...
            CalcUpdatePrepmtAmtToDeductRounding(PurchRcptLine,PurchLine,PrepmtAmtToDeductRounding);
            IF Type = Type::"Charge (Item)" THEN
              GetItemChargeAssgnt(PurchRcptLine2,PurchLine."Qty. to Invoice");
          END;
        UNTIL NEXT = 0;
        OnAfterInsertLines(PurchHeader); <=====================
    
        CalcInvoiceDiscount(PurchLine);
        OnAfterCalcInvoiceDiscount(PurchHeader);
    
    ...
Codeunit<Purch.-Get Receipt>.PROCEDURE<OnAfterPurchRcptLineSetFilters>
  Raised in: Codeunit<Purch.-Get Receipt>.<OnRun>
    Code lines:
    ...
    PurchRcptLine.SETRANGE("Pay-to Vendor No.",PurchHeader."Pay-to Vendor No.");
    PurchRcptLine.SETRANGE("Buy-from Vendor No.",PurchHeader."Buy-from Vendor No.");
    PurchRcptLine.SETFILTER("Qty. Rcd. Not Invoiced",'<>0');
    PurchRcptLine.SETRANGE("Currency Code",PurchHeader."Currency Code");
    
    OnAfterPurchRcptLineSetFilters(PurchRcptLine,PurchHeader); <=====================
    
    GetReceipts.SETTABLEVIEW(PurchRcptLine);
    GetReceipts.LOOKUPMODE := TRUE;
    GetReceipts.SetPurchHeader(PurchHeader);
Codeunit<Purch.-Get Receipt>.PROCEDURE<OnBeforeCalcUpdatePrepmtAmtToDeductRounding>
  Raised in: Codeunit<Purch.-Get Receipt>.PROCEDURE<CalcUpdatePrepmtAmtToDeductRounding>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCalcUpdatePrepmtAmtToDeductRounding(PurchRcptLine,PurchaseLine,RoundingAmount,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF (PurchaseLine."Prepayment %" > 0) AND (PurchaseLine."Prepayment %" < 100) AND
       (PurchaseLine."Document Type" = PurchaseLine."Document Type"::Invoice)
    THEN BEGIN
      PurchOrderLine.GET(PurchOrderLine."Document Type"::Order,PurchRcptLine."Order No.",PurchRcptLine."Order Line No.");
      Fraction := PurchRcptLine.Quantity / PurchOrderLine.Quantity;
    ...
Codeunit<Purch.-Get Receipt>.PROCEDURE<OnBeforeGetItemChargeAssgnt>
  Raised in: Codeunit<Purch.-Get Receipt>.PROCEDURE<GetItemChargeAssgnt>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetItemChargeAssgnt(PurchRcptLine,QtyToInvoice,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT PurchOrderLine.GET(PurchOrderLine."Document Type"::Order,PurchRcptLine."Order No.",PurchRcptLine."Order Line No.") THEN
      EXIT;
    
    ItemChargeAssgntPurch.LOCKTABLE;
    ItemChargeAssgntPurch.RESET;
    ...
Codeunit<Purch.-Get Receipt>.PROCEDURE<OnBeforeInsertLines>
  Raised in: Codeunit<Purch.-Get Receipt>.PROCEDURE<CreateInvLines>
    Code lines:
    ...
        PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
        PurchLine.SETRANGE("Document No.",PurchHeader."No.");
        PurchLine."Document Type" := PurchHeader."Document Type";
        PurchLine."Document No." := PurchHeader."No.";
    
        OnBeforeInsertLines(PurchHeader); <=====================
    
        REPEAT
          IF PurchRcptHeader."No." <> "Document No." THEN BEGIN
            PurchRcptHeader.GET("Document No.");
    ...
Codeunit<Purch.-Get Receipt>.PROCEDURE<OnBeforeTransferLineToPurchaseDoc>
  Raised in: Codeunit<Purch.-Get Receipt>.PROCEDURE<CreateInvLines>
    Code lines:
    ...
                PurchHeader.FIELDCAPTION("Pay-to Vendor No."),
                PurchHeader.TABLECAPTION,PurchHeader."No.",
                PurchRcptHeader.TABLECAPTION,PurchRcptHeader."No.");
              TransferLine := FALSE;
            END;
            OnBeforeTransferLineToPurchaseDoc(PurchRcptHeader,PurchRcptLine2,PurchHeader,TransferLine); <=====================
          END;
          IF TransferLine THEN BEGIN
            PurchRcptLine := PurchRcptLine2;
            PurchRcptLine.TESTFIELD("VAT Bus. Posting Group",PurchHeader."VAT Bus. Posting Group");
    ...
Codeunit<VAT Report Release/Reopen>.PROCEDURE<OnBeforeValidate>
  Raised in: Codeunit<VAT Report Release/Reopen>.PROCEDURE<Release>
    Code lines:
    ...
    
    ErrorMessage.SetContext(VATReportHeader);
    ErrorMessage.ClearLog;
    
    IsValidated := FALSE;
    OnBeforeValidate(VATReportHeader,IsValidated); <=====================
    IF NOT IsValidated THEN BEGIN
      VATReportsConfiguration.SETRANGE("VAT Report Type",VATReportHeader."VAT Report Config. Code");
      IF VATReportHeader."VAT Report Version" <> '' THEN
        VATReportsConfiguration.SETRANGE("VAT Report Version",VATReportHeader."VAT Report Version");
    ...
Codeunit<Item Attribute Management>.PROCEDURE<OnBeforeBufferedItemAttributeValueMappingInsert>
  Raised in: Codeunit<Item Attribute Management>.PROCEDURE<InsertBufferedItemAttributeValueMapping>
    Code lines:
    ...
        ItemAttributeValueMapping."No." := Item."No.";
        ItemAttributeValueMapping."Item Attribute ID" := TempItemAttributeValueToInsert."Attribute ID";
        ItemAttributeValueMapping."Item Attribute Value ID" := TempItemAttributeValueToInsert.ID;
        IF ItemAttributeValueMapping.INSERT(TRUE) THEN BEGIN
          TempInsertedItemAttributeValueMapping.TRANSFERFIELDS(ItemAttributeValueMapping);
          OnBeforeBufferedItemAttributeValueMappingInsert(ItemAttributeValueMapping,TempInsertedItemAttributeValueMapping); <=====================
          TempInsertedItemAttributeValueMapping.INSERT;
        END;
      UNTIL TempItemAttributeValueToInsert.NEXT = 0;
Codeunit<Item Attribute Management>.PROCEDURE<OnBeforeItemAttributeValueMappingInsert>
  Raised in: Codeunit<Item Attribute Management>.PROCEDURE<InsertItemAttributeValueMapping>
    Code lines:
    ...
      REPEAT
        ItemAttributeValueMapping."Table ID" := DATABASE::Item;
        ItemAttributeValueMapping."No." := Item."No.";
        ItemAttributeValueMapping."Item Attribute ID" := TempItemAttributeValueToInsert."Attribute ID";
        ItemAttributeValueMapping."Item Attribute Value ID" := TempItemAttributeValueToInsert.ID;
        OnBeforeItemAttributeValueMappingInsert(ItemAttributeValueMapping,TempItemAttributeValueToInsert); <=====================
        IF ItemAttributeValueMapping.INSERT(TRUE) THEN;
      UNTIL TempItemAttributeValueToInsert.NEXT = 0;
Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnAfterPurchaseLineInsert>
  Raised in: Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<Code>
    Code lines:
    ...
          PurchLine."Purchasing Code" := SalesLine."Purchasing Code";
          EVALUATE(PurchLine."Inbound Whse. Handling Time",'<0D>');
          PurchLine.VALIDATE("Inbound Whse. Handling Time");
          OnBeforePurchaseLineInsert(PurchLine,SalesLine);
          PurchLine.INSERT;
          OnAfterPurchaseLineInsert(PurchLine); <=====================
    
          NextLineNo := NextLineNo + 10000;
    
          SalesLine."Unit Cost (LCY)" := PurchLine."Unit Cost (LCY)";
    ...
Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnAfterSalesLineModify>
  Raised in: Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<Code>
    Code lines:
    ...
          SalesLine.VALIDATE("Unit Cost (LCY)");
          SalesLine."Purchase Order No." := PurchLine."Document No.";
          SalesLine."Purch. Order Line No." := PurchLine."Line No.";
          OnBeforeSalesLineModify(SalesLine,PurchLine);
          SalesLine.MODIFY;
          OnAfterSalesLineModify(SalesLine,PurchLine); <=====================
          ItemTrackingMgt.CopyItemTracking(SalesLine.RowID1,PurchLine.RowID1,TRUE);
    
          IF TransferExtendedText.PurchCheckIfAnyExtText(PurchLine,TRUE) THEN BEGIN
            TransferExtendedText.InsertPurchExtText(PurchLine);
    ...
Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnBeforePurchaseLineInsert>
  Raised in: Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<Code>
    Code lines:
    ...
          PurchLine."Sales Order Line No." := SalesLine."Line No.";
          PurchLine."Drop Shipment" := TRUE;
          PurchLine."Purchasing Code" := SalesLine."Purchasing Code";
          EVALUATE(PurchLine."Inbound Whse. Handling Time",'<0D>');
          PurchLine.VALIDATE("Inbound Whse. Handling Time");
          OnBeforePurchaseLineInsert(PurchLine,SalesLine); <=====================
          PurchLine.INSERT;
          OnAfterPurchaseLineInsert(PurchLine);
    
          NextLineNo := NextLineNo + 10000;
    ...
Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnBeforeSalesLineModify>
  Raised in: Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<Code>
    Code lines:
    ...
    
          SalesLine."Unit Cost (LCY)" := PurchLine."Unit Cost (LCY)";
          SalesLine.VALIDATE("Unit Cost (LCY)");
          SalesLine."Purchase Order No." := PurchLine."Document No.";
          SalesLine."Purch. Order Line No." := PurchLine."Line No.";
          OnBeforeSalesLineModify(SalesLine,PurchLine); <=====================
          SalesLine.MODIFY;
          OnAfterSalesLineModify(SalesLine,PurchLine);
          ItemTrackingMgt.CopyItemTracking(SalesLine.RowID1,PurchLine.RowID1,TRUE);
    
    ...
Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnCodeOnBeforeModify>
  Raised in: Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<Code>
    Code lines:
    ...
      ELSE
        ERROR(
          Text000,
          SalesHeader."No.");
    
      OnCodeOnBeforeModify(PurchHeader,SalesHeader); <=====================
    
      MODIFY; // Only version check
      SalesHeader.MODIFY; // Only version check
    END;
Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnCodeOnBeforeSelectSalesHeader>
  Raised in: Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<Code>
    Code lines:
    ...
    
      IF "Sell-to Customer No." = '' THEN
        ERROR(SelltoCustomerBlankErr);
    
      IsHandled := FALSE;
      OnCodeOnBeforeSelectSalesHeader(PurchHeader,SalesHeader,IsHandled); <=====================
      IF NOT IsHandled THEN BEGIN
        SalesHeader.SETCURRENTKEY("Document Type","Sell-to Customer No.");
        SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
        SalesHeader.SETRANGE("Sell-to Customer No.","Sell-to Customer No.");
    ...
Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnGetDescriptionFromItem>
  Raised in: Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<GetDescriptionFromItem>
    Code lines:
    PurchaseLine.Description := Item.Description;
    PurchaseLine."Description 2" := Item."Description 2";
    OnGetDescriptionFromItem(PurchaseLine,Item); <=====================
Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnGetDescriptionFromItemTranslation>
  Raised in: Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<GetDescriptionFromItemTranslation>
    Code lines:
    ...
      Vend.GET(PurchHeader."Buy-from Vendor No.");
      IF Vend."Language Code" <> '' THEN
        IF ItemTranslation.GET(SalesLine."No.",SalesLine."Variant Code",Vend."Language Code") THEN BEGIN
          PurchaseLine.Description := ItemTranslation.Description;
          PurchaseLine."Description 2" := ItemTranslation."Description 2";
          OnGetDescriptionFromItemTranslation(PurchaseLine,ItemTranslation); <=====================
          EXIT(TRUE);
        END;
    END;
    EXIT(FALSE)
Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnGetDescriptionFromItemVariant>
  Raised in: Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<GetDescriptionFromItemVariant>
    Code lines:
    IF SalesLine."Variant Code" <> '' THEN BEGIN
      ItemVariant.GET(Item."No.",SalesLine."Variant Code");
      PurchaseLine.Description := ItemVariant.Description;
      PurchaseLine."Description 2" := ItemVariant."Description 2";
      OnGetDescriptionFromItemVariant(PurchaseLine,ItemVariant); <=====================
      EXIT(TRUE);
    END;
    EXIT(FALSE)
Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<OnGetDescriptionFromSalesLine>
  Raised in: Codeunit<Purch.-Get Drop Shpt.>.PROCEDURE<GetDescriptionFromSalesLine>
    Code lines:
    IF (SalesLine.Description <> '') OR (SalesLine."Description 2" <> '') THEN BEGIN
      PurchaseLine.Description := SalesLine.Description;
      PurchaseLine."Description 2" := SalesLine."Description 2";
      OnGetDescriptionFromSalesLine(PurchaseLine,SalesLine); <=====================
      EXIT(TRUE);
    END;
    EXIT(FALSE);
Codeunit<Calendar Management>.PROCEDURE<OnBeforeCalcDateBOC>
  Raised in: Codeunit<Calendar Management>.PROCEDURE<CalcDateBOC>
    Code lines:
    OnBeforeCalcDateBOC( <=====================
      FirstCalCode,FirstSourceType,FirstSourceCode,FirstAddCode,
      SecondCalCode,SecondSourceType,SecondSourceCode,SecondAddCode,CalConvTimeFrame,Handled);
    
    IF NOT Handled THEN BEGIN
      IF (FirstSourceType = FirstSourceType::"Shipping Agent") AND
         ((FirstSourceCode = '') OR (FirstAddCode = ''))
      THEN BEGIN
        FirstSourceType := FirstSourceType::Company;
        FirstSourceCode := '';
    ...
Codeunit<Calendar Management>.PROCEDURE<OnCalcDateBOCOnAfterCheckDates>
  Raised in: Codeunit<Calendar Management>.PROCEDURE<CalcDateBOC>
    Code lines:
    ...
          Ok := NOT CheckCustomizedDateStatus(
              SecondSourceType,SecondSourceCode,SecondAddCode,SecondCalCode,NewDate,TempDesc)
        ELSE
          Ok := NOT CheckCustomizedDateStatus(
              FirstSourceType,FirstSourceCode,FirstAddCode,FirstCalCode,NewDate,TempDesc);
        OnCalcDateBOCOnAfterCheckDates(NewDate,TempDesc,Ok); <=====================
        IF Ok THEN
          LoopCounter := LoopCounter + 1;
        IF NewDate >= OrgDate + CalConvTimeFrame THEN
          LoopCounter := ABS(CALCDATE(DateFormula,OrgDate) - OrgDate);
    ...
Codeunit<Calendar Management>.PROCEDURE<OnCalcDateBOCOnAfterGetCalendarCodes>
  Raised in: Codeunit<Calendar Management>.PROCEDURE<CalcDateBOC>
    Code lines:
    ...
        CalConvTimeFrame := CALCDATE(CompanyInfo."Cal. Convergence Time Frame",WORKDATE) - WORKDATE;
    
      FirstCalCode := GetCalendarCode(FirstSourceType,FirstSourceCode,FirstAddCode);
      SecondCalCode := GetCalendarCode(SecondSourceType,SecondSourceCode,SecondAddCode);
    
      OnCalcDateBOCOnAfterGetCalendarCodes( <=====================
        FirstSourceType,FirstSourceCode,FirstAddCode,FirstCalCode,
        SecondSourceType,SecondSourceCode,SecondAddCode,SecondCalCode);
    END;
    
    ...
Codeunit<Calendar Management>.PROCEDURE<OnCalcDateBOCOnAfterSetNonworking>
  Raised in: Codeunit<Calendar Management>.PROCEDURE<CalcDateBOC>
    Code lines:
    ...
        CheckCustomizedDateStatus(
          FirstSourceType,FirstSourceCode,FirstAddCode,FirstCalCode,NewDate,TempDesc);
      Nonworking2 :=
        CheckCustomizedDateStatus(
          SecondSourceType,SecondSourceCode,SecondAddCode,SecondCalCode,NewDate,TempDesc);
      OnCalcDateBOCOnAfterSetNonworking(FirstCalCode,SecondCalCode,NewDate,TempDesc,Nonworking,Nonworking2); <=====================
      IF Nonworking THEN BEGIN
        NewDate := NewDate + LoopFactor;
      END ELSE BEGIN
        IF NOT CheckBothCalendars THEN
    ...
Codeunit<Sales-Post and Send>.PROCEDURE<OnAfterPostAndBeforeSend>
  Raised in: Codeunit<Sales-Post and Send>.PROCEDURE<Code>
    Code lines:
    ...
      IF NOT (SalesHeader.Ship OR SalesHeader.Invoice) THEN
        EXIT;
    END ELSE
      CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);
    
    OnAfterPostAndBeforeSend(SalesHeader); <=====================
    
    COMMIT;
    
    SalesPost.SendPostedDocumentRecord(SalesHeader,TempDocumentSendingProfile);
    ...
Codeunit<Sales-Post and Send>.PROCEDURE<OnAfterPostAndSend>
  Raised in: Codeunit<Sales-Post and Send>.PROCEDURE<Code>
    Code lines:
    ...
    
    COMMIT;
    
    SalesPost.SendPostedDocumentRecord(SalesHeader,TempDocumentSendingProfile);
    
    OnAfterPostAndSend(SalesHeader); <=====================
Codeunit<Sales-Post and Send>.PROCEDURE<OnBeforeConfirmAndSend>
  Raised in: Codeunit<Sales-Post and Send>.PROCEDURE<ConfirmPostAndSend>
    Code lines:
    ...
      COMMIT;
      TempDocumentSendingProfile.COPY(DocumentSendingProfile);
      TempDocumentSendingProfile.SetDocumentUsage(SalesHeader);
      TempDocumentSendingProfile.INSERT;
    
      OnBeforeConfirmAndSend(SalesHeader,TempDocumentSendingProfile); <=====================
      IF PAGE.RUNMODAL(PAGE::"Post and Send Confirmation",TempDocumentSendingProfile) <> ACTION::Yes THEN
        EXIT(FALSE);
    END;
    
Codeunit<Sales-Post and Send>.PROCEDURE<OnBeforePostAndSend>
  Raised in: Codeunit<Sales-Post and Send>.PROCEDURE<Code>
    Code lines:
    HideDialog := FALSE;
    
    OnBeforePostAndSend(SalesHeader,HideDialog,TempDocumentSendingProfile); <=====================
    IF NOT HideDialog THEN
      WITH SalesHeader DO
        CASE "Document Type" OF
          "Document Type"::Invoice,
          "Document Type"::"Credit Memo",
          "Document Type"::Order:
            IF NOT ConfirmPostAndSend(SalesHeader,TempDocumentSendingProfile) THEN
    ...
Codeunit<AccSchedManagement>.PROCEDURE<OnAfterAccSchedLineInsert>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<MoveAccSchedLines>
    Code lines:
    ...
        I := AccSchedLine."Line No.";
        IF I > AccSchedLineNo THEN BEGIN
          AccSchedLine.DELETE;
          AccSchedLine."Line No." := I + 10000 * Place;
          AccSchedLine.INSERT;
          OnAfterAccSchedLineInsert(AccSchedLine); <=====================
        END;
      UNTIL (I <= AccSchedLineNo) OR (AccSchedLine.NEXT(-1) = 0);
Codeunit<AccSchedManagement>.PROCEDURE<OnAfterCalcCellValue>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<CalcCellValue>
    Code lines:
    ...
                        Result := Result + CalcCFAccount(CFAccount,AccSchedLine,ColumnLayout);
                      UNTIL CFAccount.NEXT = 0;
                END;
            END;
    
      OnAfterCalcCellValue(AccSchedLine,ColumnLayout,Result); <=====================
    
      AccSchedCellValue."Row No." := AccSchedLine."Line No.";
      AccSchedCellValue."Column No." := ColumnLayout."Line No.";
      AccSchedCellValue.Value := Result;
    ...
Codeunit<AccSchedManagement>.PROCEDURE<OnAfterSetCFAccColumnFilter>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<SetCFAccColumnFilter>
    Code lines:
    ...
              CFAccount.SETRANGE("Date Filter",0D,AccountingPeriodMgt.FindEndOfFiscalYear(ToDate));
          END;
      END;
    END;
    
    OnAfterSetCFAccColumnFilter(CFAccount,AccSchedLine2,ColumnLayout2); <=====================
Codeunit<AccSchedManagement>.PROCEDURE<OnAfterSetCFAccRowFilter>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<SetCFAccRowFilter>
    Code lines:
    ...
            CFAccount.SETFILTER("Account Type",'<>%1',CFAccount."Account Type"::Entry);
          END;
      END;
    END;
    
    OnAfterSetCFAccRowFilter(CFAccount,AccSchedLine2); <=====================
Codeunit<AccSchedManagement>.PROCEDURE<OnAfterSetGLAccAnalysisViewBudgetEntries>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<SetGLAccAnalysisViewBudgetEntries>
    Code lines:
    ...
        GetDimTotalingFilter(4,ColumnLayout."Dimension 4 Totaling"));
      SETFILTER("Business Unit Code",ColumnLayout."Business Unit Totaling");
      FILTERGROUP(0);
    END;
    
    OnAfterSetGLAccAnalysisViewBudgetEntries(GLAcc,AnalysisViewBudgetEntry,AccSchedLine,ColumnLayout); <=====================
Codeunit<AccSchedManagement>.PROCEDURE<OnAfterSetGLAccAnalysisViewEntryFilters>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<SetGLAccAnalysisViewEntryFilters>
    Code lines:
    ...
        GetDimTotalingFilter(4,ColumnLayout."Dimension 4 Totaling"));
      SETFILTER("Business Unit Code",ColumnLayout."Business Unit Totaling");
      FILTERGROUP(0);
    END;
    
    OnAfterSetGLAccAnalysisViewEntryFilters(GLAcc,AnalysisViewEntry,AccSchedLine,ColumnLayout); <=====================
Codeunit<AccSchedManagement>.PROCEDURE<OnAfterSetGLAccColumnFilters>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<SetGLAccColumnFilters>
    Code lines:
    ...
              GLAcc.SETRANGE("Date Filter",0D,AccountingPeriodMgt.FindEndOfFiscalYear(ToDate));
          END;
      END;
    END;
    
    OnAfterSetGLAccColumnFilters(GLAcc,AccSchedLine2,ColumnLayout) <=====================
Codeunit<AccSchedManagement>.PROCEDURE<OnAfterSetGLAccGLBudgetEntryFilters>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<SetGLAccGLBudgetEntryFilters>
    Code lines:
    ...
      SETFILTER("Global Dimension 2 Code",GetDimTotalingFilter(2,ColumnLayout."Dimension 2 Totaling"));
      SETFILTER("Business Unit Code",ColumnLayout."Business Unit Totaling");
      FILTERGROUP(0);
    END;
    
    OnAfterSetGLAccGLBudgetEntryFilters(GLAcc,GLBudgetEntry,AccSchedLine,ColumnLayout,UseBusUnitFilter,UseDimFilter); <=====================
Codeunit<AccSchedManagement>.PROCEDURE<OnAfterSetGLAccGLEntryFilters>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<SetGLAccGLEntryFilters>
    Code lines:
    ...
      SETFILTER("Global Dimension 2 Code",GetDimTotalingFilter(2,ColumnLayout."Dimension 2 Totaling"));
      SETFILTER("Business Unit Code",ColumnLayout."Business Unit Totaling");
      FILTERGROUP(0);
    END;
    
    OnAfterSetGLAccGLEntryFilters(GLAcc,GLEntry,AccSchedLine,ColumnLayout,UseBusUnitFilter,UseDimFilter); <=====================
Codeunit<AccSchedManagement>.PROCEDURE<OnAfterSetGLAccRowFilters>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<SetGLAccRowFilters>
    Code lines:
    ...
            GLAcc.SETFILTER("No.",Totaling);
            GLAcc.SETFILTER("Account Type",'<>%1',GLAcc."Account Type"::Posting);
          END;
      END;
    
    OnAfterSetGLAccRowFilters(GLAcc,AccSchedLine2); <=====================
Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeCalcCellExit>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<CalcCell>
    Code lines:
    ...
      END;
    END;
    IF AccSchedLine."Show Opposite Sign" THEN
      Result := -Result;
    
    OnBeforeCalcCellExit(AccSchedLine,ColumnLayout,CalcAddCurr,Result); <=====================
    EXIT(Result);
Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeCalcCFAcc>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<CalcCFAccount>
    Code lines:
    ColValue := 0;
    IsHandled := FALSE;
    OnBeforeCalcCFAcc(CFAccount,AccSchedLine,ColumnLayout,ColValue,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(ColValue);
    
    IF AccSchedName.Name <> AccSchedLine."Schedule Name" THEN
      AccSchedName.GET(AccSchedLine."Schedule Name");
    
    IF ConflictAmountType(AccSchedLine,ColumnLayout."Amount Type",AmountType) THEN
    ...
Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeCalcCostType>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<CalcCostType>
    Code lines:
    ColValue := 0;
    IsHandled := FALSE;
    OnBeforeCalcCostType(CostType,AccSchedLine,ColumnLayout,CalcAddCurr,ColValue,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(ColValue);
    
    IF AccSchedName.Name <> AccSchedLine."Schedule Name" THEN
      AccSchedName.GET(AccSchedLine."Schedule Name");
    
    IF ConflictAmountType(AccSchedLine,ColumnLayout."Amount Type",AmountType) THEN
    ...
Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeCalcGLAcc>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<CalcGLAcc>
    Code lines:
    ColValue := 0;
    IsHandled := FALSE;
    OnBeforeCalcGLAcc(GLAcc,AccSchedLine,ColumnLayout,CalcAddCurr,ColValue,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(ColValue);
    
    UseDimFilter := FALSE;
    IF AccSchedName.Name <> AccSchedLine."Schedule Name" THEN
      AccSchedName.GET(AccSchedLine."Schedule Name");
    
    ...
Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeDrillDownFromOverviewPage>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<DrillDownFromOverviewPage>
    Code lines:
    IsHandled := FALSE;
    OnBeforeDrillDownFromOverviewPage(TempColumnLayout,AccScheduleLine,PeriodLength,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH AccScheduleLine DO BEGIN
      IF "Totaling Type" IN ["Totaling Type"::Formula,"Totaling Type"::"Set Base For Percent"] THEN
        MESSAGE(RowFormulaMsg,Totaling)
      ELSE
        DrillDown(TempColumnLayout,AccScheduleLine,PeriodLength);
Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeDrillDownOnAccounts>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<DrillDown>
    Code lines:
    ...
        AccScheduleOverview.SetPeriodType(PeriodLength);
        AccScheduleOverview.RUN;
        EXIT;
      END;
    
      OnBeforeDrillDownOnAccounts(AccScheduleLine,TempColumnLayout,PeriodLength,StartDate,EndDate); <=====================
    
      IF Totaling = '' THEN
        EXIT;
    
    ...
Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeDrillDownOnGLAccount>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<DrillDownOnGLAccount>
    Code lines:
    IsHandled := FALSE;
    OnBeforeDrillDownOnGLAccount(TempColumnLayout,AccScheduleLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH AccScheduleLine DO
      IF "Totaling Type" IN ["Totaling Type"::"Cost Type","Totaling Type"::"Cost Type Total"] THEN BEGIN
        SetCostTypeRowFilters(CostType,AccScheduleLine,TempColumnLayout);
        SetCostTypeColumnFilters(CostType,AccScheduleLine,TempColumnLayout);
        COPYFILTER("Cost Center Filter",CostType."Cost Center Filter");
    ...
Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeEvaluateExpression>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<EvaluateExpression>
    Code lines:
    Result := 0;
    MaxLevel := 25;
    
    OnBeforeEvaluateExpression(AccSchedLine,ColumnLayout,MaxLevel); <=====================
    
    CallLevel := CallLevel + 1;
    IF CallLevel > MaxLevel THEN
      ShowError(Text020,AccSchedLine,ColumnLayout);
    
    Expression := DELCHR(Expression,'<>',' ');
    ...
Codeunit<AccSchedManagement>.PROCEDURE<OnBeforeTestBalance>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<CalcGLAcc>
    Code lines:
    ...
            IF CalcAddCurr THEN
              ColValue := CalcLCYToACY(ColValue);
          END;
      END;
    
      OnBeforeTestBalance( <=====================
        GLAcc,AccSchedName,AccSchedLine,ColumnLayout,AmountType,ColValue,CalcAddCurr,TestBalance,GLEntry,GLBudgEntry);
    
      IF TestBalance THEN BEGIN
        IF AccSchedLine.Show = AccSchedLine.Show::"When Positive Balance" THEN
    ...
Codeunit<AccSchedManagement>.PROCEDURE<OnCalcCellValueOnBeforeExit>
  Raised in: Codeunit<AccSchedManagement>.PROCEDURE<CalcCellValue>
    Code lines:
    ...
      AccSchedCellValue."Has Error" := DivisionError;
      AccSchedCellValue."Period Error" := PeriodError;
      AccSchedCellValue.INSERT;
    END;
    
    OnCalcCellValueOnBeforeExit(AccSchedLine,ColumnLayout,CalcAddCurr,StartDate,EndDate,Result); <=====================
    EXIT(Result);
Codeunit<Sales-Post>.PROCEDURE<OnAfterCheckAndUpdate>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CheckAndUpdate>
    Code lines:
    ...
      InsertPostedHeaders(SalesHeader);
    
      UpdateIncomingDocument("Incoming Document Entry No.","Posting Date",GenJnlLineDocNo);
    END;
    
    OnAfterCheckAndUpdate(SalesHeader,SuppressCommit,PreviewMode); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterCheckMandatoryFields>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CheckMandatoryHeaderFields>
    Code lines:
    ...
    SalesHeader.TESTFIELD("Sell-to Customer No.");
    SalesHeader.TESTFIELD("Bill-to Customer No.");
    SalesHeader.TESTFIELD("Posting Date");
    SalesHeader.TESTFIELD("Document Date");
    
    OnAfterCheckMandatoryFields(SalesHeader,SuppressCommit); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterCheckSalesDoc>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CheckAndUpdate>
    Code lines:
    ...
      IF ("Shipping Advice" = "Shipping Advice"::Complete) AND Ship THEN
        CheckShippingAdvice;
    
      CheckAssosOrderLines(SalesHeader);
    
      OnAfterCheckSalesDoc(SalesHeader,SuppressCommit,WhseShip,WhseReceive); <=====================
      ErrorMessageMgt.Finish;
    
      // Update
      IF Invoice THEN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterCheckTrackingAndWarehouseForReceive>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CheckTrackingAndWarehouseForReceive>
    Code lines:
    ...
      IF Receive THEN BEGIN
        CheckTrackingSpecification(SalesHeader,TempSalesLine);
        IF NOT (WhseReceive OR WhseShip OR InvtPickPutaway) THEN
          CheckWarehouse(TempSalesLine);
      END;
      OnAfterCheckTrackingAndWarehouseForReceive(SalesHeader,Receive,SuppressCommit,TempWhseShptHeader,TempWhseRcptHeader); <=====================
      EXIT(Receive);
    END;
Codeunit<Sales-Post>.PROCEDURE<OnAfterCheckTrackingAndWarehouseForShip>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CheckTrackingAndWarehouseForShip>
    Code lines:
    ...
      IF Ship THEN BEGIN
        CheckTrackingSpecification(SalesHeader,TempSalesLine);
        IF NOT (WhseShip OR WhseReceive OR InvtPickPutaway) THEN
          CheckWarehouse(TempSalesLine);
      END;
      OnAfterCheckTrackingAndWarehouseForShip(SalesHeader,Ship,SuppressCommit,TempWhseShptHeader,TempWhseRcptHeader,TempSalesLine); <=====================
      EXIT(Ship);
    END;
Codeunit<Sales-Post>.PROCEDURE<OnAfterCreatePostedDeferralScheduleFromSalesDoc>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CreatePostedDeferralScheduleFromSalesDoc>
    Code lines:
    ...
          PostedDeferralLine.InitFromDeferralLine(
            TempDeferralLine,'','',NewDocumentType,NewDocumentNo,NewLineNo,DeferralAccount);
        UNTIL TempDeferralLine.NEXT = 0;
    END;
    
    OnAfterCreatePostedDeferralScheduleFromSalesDoc(SalesLine,PostedDeferralHeader); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterDeleteAfterPosting>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<DeleteAfterPosting>
    Code lines:
    ...
      DeleteItemChargeAssgnt(SalesHeader);
      SalesCommentLine.DeleteComments("Document Type","No.");
      WarehouseRequest.DeleteRequest(DATABASE::"Sales Line","Document Type","No.");
    END;
    
    OnAfterDeleteAfterPosting(SalesHeader,SalesInvHeader,SalesCrMemoHeader,SuppressCommit); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterDivideAmount>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<DivideAmount>
    Code lines:
    ...
        TempVATAmountLineRemainder.MODIFY;
        IF "Deferral Code" <> '' THEN
          CalcDeferralAmounts(SalesHeader,SalesLine,OriginalDeferralAmount);
      END;
    
    OnAfterDivideAmount(SalesHeader,SalesLine,QtyType,SalesLineQty,TempVATAmountLine,TempVATAmountLineRemainder); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterFillInvoicePostBuffer>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<FillInvoicePostingBuffer>
    Code lines:
    ...
        SalesAccount := GenPostingSetup.GetSalesAccount;
    
    InvoicePostBuffer.SetAccount(SalesAccount,TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY);
    InvoicePostBuffer.UpdateVATBase(TotalVATBase,TotalVATBaseACY);
    InvoicePostBuffer."Deferral Code" := SalesLine."Deferral Code";
    OnAfterFillInvoicePostBuffer(InvoicePostBuffer,SalesLine,TempInvoicePostBuffer,SuppressCommit); <=====================
    UpdateInvoicePostBuffer(TempInvoicePostBuffer,InvoicePostBuffer,FALSE);
    
    OnFillInvoicePostingBufferOnAfterUpdateInvoicePostBuffer(SalesHeader,SalesLine,InvoicePostBuffer,TempInvoicePostBuffer);
    
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterFinalizePosting>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<FinalizePosting>
    Code lines:
    ...
          DeleteAfterPosting(SalesHeader);
      END;
    
      InsertValueEntryRelation;
    
      OnAfterFinalizePostingOnBeforeCommit( <=====================
        SalesHeader,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,GenJnlPostLine,SuppressCommit,PreviewMode);
    
      IF PreviewMode THEN BEGIN
        Window.CLOSE;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterFinalizePostingOnBeforeCommit>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<FinalizePosting>
    Code lines:
    ...
          DeleteAfterPosting(SalesHeader);
      END;
    
      InsertValueEntryRelation;
    
      OnAfterFinalizePostingOnBeforeCommit( <=====================
        SalesHeader,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,GenJnlPostLine,SuppressCommit,PreviewMode);
    
      IF PreviewMode THEN BEGIN
        Window.CLOSE;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterIncrAmount>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<IncrAmount>
    Code lines:
    ...
      Increment(TotalSalesLine."Prepmt Amt to Deduct","Prepmt Amt to Deduct");
      Increment(TotalSalesLine."Prepmt Amt Deducted","Prepmt Amt Deducted");
      Increment(TotalSalesLine."Prepayment VAT Difference","Prepayment VAT Difference");
      Increment(TotalSalesLine."Prepmt VAT Diff. to Deduct","Prepmt VAT Diff. to Deduct");
      Increment(TotalSalesLine."Prepmt VAT Diff. Deducted","Prepmt VAT Diff. Deducted");
      OnAfterIncrAmount(TotalSalesLine,SalesLine,SalesHeader); <=====================
    END;
Codeunit<Sales-Post>.PROCEDURE<OnAfterInitAssocItemJnlLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InitAssocItemJnlLine>
    Code lines:
    ...
      "Discount Amount" := PurchOrderLine."Line Discount Amount";
    
      "Applies-to Entry" := 0;
    END;
    
    OnAfterInitAssocItemJnlLine(ItemJnlLine,PurchOrderHeader,PurchOrderLine,SalesHeader); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterInsertDropOrderPurchRcptHeader>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostDropOrderShipment>
    Code lines:
    ...
              TempDropShptPostBuffer."Order No.",TempDropShptPostBuffer."Order Line No.");
            InsertPurchRcptLine(PurchRcptHeader,PurchOrderLine,TempDropShptPostBuffer);
            PurchPost.UpdateBlanketOrderLine(PurchOrderLine,TRUE,FALSE,FALSE);
          UNTIL TempDropShptPostBuffer.NEXT = 0;
          TempDropShptPostBuffer.SETRANGE("Order No.");
          OnAfterInsertDropOrderPurchRcptHeader(PurchRcptHeader); <=====================
        UNTIL TempDropShptPostBuffer.NEXT = 0;
      END;
Codeunit<Sales-Post>.PROCEDURE<OnAfterInsertedPrepmtVATBaseToDeduct>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertedPrepmtVATBaseToDeduct>
    Code lines:
    ...
      "Attached to Line No." := PrepmtLineNo;
      "VAT Base Amount" := PrepmtVATBaseToDeduct;
      INSERT;
    END;
    
    OnAfterInsertedPrepmtVATBaseToDeduct( <=====================
      SalesHeader,SalesLine,PrepmtLineNo,TotalPrepmtAmtToDeduct,TempPrepmtDeductLCYSalesLine,PrepmtVATBaseToDeduct);
    
    EXIT(PrepmtVATBaseToDeduct);
Codeunit<Sales-Post>.PROCEDURE<OnAfterInvoicePostingBufferAssignAmounts>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<FillInvoicePostingBuffer>
    Code lines:
    ...
    TotalAmount := SalesLine.Amount;
    TotalAmountACY := SalesLineACY.Amount;
    TotalVATBase := SalesLine."VAT Base Amount";
    TotalVATBaseACY := SalesLineACY."VAT Base Amount";
    
    OnAfterInvoicePostingBufferAssignAmounts(SalesLine,TotalAmount,TotalAmountACY); <=====================
    
    IF SalesLine."Deferral Code" <> '' THEN
      GetAmountsForDeferral(SalesLine,AmtToDefer,AmtToDeferACY,DeferralAccount)
    ELSE BEGIN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterInvoicePostingBufferSetAmounts>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<FillInvoicePostingBuffer>
    Code lines:
    ...
      TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY,TotalVATBase,TotalVATBaseACY);
    
    InvoicePostBuffer.SetAmounts(
      TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY,SalesLine."VAT Difference",TotalVATBase,TotalVATBaseACY);
    
    OnAfterInvoicePostingBufferSetAmounts(InvoicePostBuffer,SalesLine); <=====================
    
    IF (SalesLine.Type = SalesLine.Type::"G/L Account") OR (SalesLine.Type = SalesLine.Type::"Fixed Asset") THEN
      SalesAccount := SalesLine."No."
    ELSE
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterInvoiceRoundingAmount>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InvoiceRounding>
    Code lines:
    ...
        RoundingLineInserted := TRUE;
        RoundingLineNo := "Line No.";
      END;
    END;
    
    OnAfterInvoiceRoundingAmount(SalesHeader,SalesLine,TotalSalesLine,UseTempData,InvoiceRoundingAmount,SuppressCommit); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostBalancingEntry>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostBalancingEntry>
    Code lines:
    ...
          ROUND(CustLedgEntry."Remaining Pmt. Disc. Possible" / CustLedgEntry."Adjusted Currency Factor");
      "Allow Zero-Amount Posting" := TRUE;
    
      OnBeforePostBalancingEntry(GenJnlLine,SalesHeader,TotalSalesLine2,TotalSalesLineLCY2,SuppressCommit,PreviewMode);
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostBalancingEntry(GenJnlLine,SalesHeader,TotalSalesLine2,TotalSalesLineLCY2,SuppressCommit,GenJnlPostLine); <=====================
    END;
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostCustomerEntry>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostCustomerEntry>
    Code lines:
    ...
      "Profit (LCY)" := -(TotalSalesLineLCY2.Amount - TotalSalesLineLCY2."Unit Cost (LCY)");
      "Inv. Discount (LCY)" := -TotalSalesLineLCY2."Inv. Discount Amount";
    
      OnBeforePostCustomerEntry(GenJnlLine,SalesHeader,TotalSalesLine2,TotalSalesLineLCY2,SuppressCommit,PreviewMode);
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostCustomerEntry(GenJnlLine,SalesHeader,TotalSalesLine2,TotalSalesLineLCY2,SuppressCommit,GenJnlPostLine); <=====================
    END;
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostGLAndCustomer>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostGLAndCustomer>
    Code lines:
    ...
        PostBalancingEntry(
          SalesHeader,TotalSalesLine,TotalSalesLineLCY,GenJnlLineDocType,GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode);
      END;
    END;
    
    OnAfterPostGLAndCustomer(SalesHeader,GenJnlPostLine,TotalSalesLine,TotalSalesLineLCY,SuppressCommit); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostInvPostBuffer>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostInvoicePostBufferLine>
    Code lines:
    ...
        CopyFromInvoicePostBufferFA(InvoicePostBuffer);
      END;
    
      OnBeforePostInvPostBuffer(GenJnlLine,InvoicePostBuffer,SalesHeader,SuppressCommit,GenJnlPostLine,PreviewMode);
      GLEntryNo := RunGenJnlPostLine(GenJnlLine);
      OnAfterPostInvPostBuffer(GenJnlLine,InvoicePostBuffer,SalesHeader,GLEntryNo,SuppressCommit,GenJnlPostLine); <=====================
    END;
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostItemJnlLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
        ELSE
          PostItemJnlLineTracking(SalesLine,TempWhseTrackingSpecification,PostWhseJnlLine,QtyToBeInvoiced,TempHandlingSpecification);
    
        PostItemJnlLineWhseLine(TempWhseJnlLine,TempWhseTrackingSpecification);
    
        OnAfterPostItemJnlLineWhseLine(SalesLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit); <=====================
    
        IF (SalesLine.Type = SalesLine.Type::Item) AND SalesHeader.Invoice THEN
          PostItemJnlLineItemCharges(SalesHeader,SalesLine,OriginalItemJnlLine,"Item Shpt. Entry No.");
      END;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostItemJnlLineBeforePost>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemJnlLineBeforePost>
    Code lines:
    ...
        IF CheckApplFromItemEntry AND SalesLine.IsInventoriableItem THEN
          SalesLine.TESTFIELD("Appl.-from Item Entry");
      END;
    END;
    
    OnAfterPostItemJnlLineBeforePost(ItemJnlLine,SalesLine); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostItemJnlLineWhseLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
        ELSE
          PostItemJnlLineTracking(SalesLine,TempWhseTrackingSpecification,PostWhseJnlLine,QtyToBeInvoiced,TempHandlingSpecification);
    
        PostItemJnlLineWhseLine(TempWhseJnlLine,TempWhseTrackingSpecification);
    
        OnAfterPostItemJnlLineWhseLine(SalesLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit); <=====================
    
        IF (SalesLine.Type = SalesLine.Type::Item) AND SalesHeader.Invoice THEN
          PostItemJnlLineItemCharges(SalesHeader,SalesLine,OriginalItemJnlLine,"Item Shpt. Entry No.");
      END;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostItemTrackingForShipment>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemTrackingForShipment>
    Code lines:
    ...
          IF PostItemTrackingForShipmentCondition(SalesLine,SalesShptLine) THEN
            PostItemJnlLine(
              SalesHeader,SalesLine,0,0,QtyToBeInvoiced,QtyToBeInvoicedBase,
              ItemEntryRelation."Item Entry No.",'',TempTrackingSpecification,FALSE);
    
          OnAfterPostItemTrackingForShipment( <=====================
            SalesInvHeader,SalesShptLine,TempTrackingSpecification,TrackingSpecificationExists,SalesLine,
            QtyToBeInvoiced,QtyToBeInvoicedBase);
        UNTIL IsEndLoopForShippedNotInvoiced(
                RemQtyToBeInvoiced,TrackingSpecificationExists,HasATOShippedNotInvoiced,
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostItemTrackingReturnRcpt>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemTrackingForReceipt>
    Code lines:
    ...
          IF PostItemTrackingForReceiptCondition(SalesLine,ReturnRcptLine) THEN
            PostItemJnlLine(
              SalesHeader,SalesLine,0,0,QtyToBeInvoiced,QtyToBeInvoicedBase,
              ItemEntryRelation."Item Entry No.",'',TempTrackingSpecification,FALSE);
    
          OnAfterPostItemTrackingReturnRcpt( <=====================
            SalesInvHeader,SalesShptLine,TempTrackingSpecification,TrackingSpecificationExists,
            SalesCrMemoHeader,ReturnRcptLine,SalesLine,QtyToBeInvoiced,QtyToBeInvoicedBase);
    
          IF TrackingSpecificationExists THEN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostSalesDoc>
  Raised in: Codeunit<Sales-Post>.<OnRun>
    Code lines:
    ...
      COMMIT;
      UpdateAnalysisView.UpdateAll(0,TRUE);
      UpdateItemAnalysisView.UpdateAll(0,TRUE);
    END;
    
    OnAfterPostSalesDoc( <=====================
      Rec,GenJnlPostLine,SalesShptHeader."No.",ReturnRcptHeader."No.",
      SalesInvHeader."No.",SalesCrMemoHeader."No.",SuppressCommit,InvtPickPutaway);
    OnAfterPostSalesDocDropShipment(PurchRcptHeader."No.",SuppressCommit); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostSalesDocDropShipment>
  Raised in: Codeunit<Sales-Post>.<OnRun>
    Code lines:
    ...
    END;
    
    OnAfterPostSalesDoc(
      Rec,GenJnlPostLine,SalesShptHeader."No.",ReturnRcptHeader."No.",
      SalesInvHeader."No.",SalesCrMemoHeader."No.",SuppressCommit,InvtPickPutaway);
    OnAfterPostSalesDocDropShipment(PurchRcptHeader."No.",SuppressCommit); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostSalesLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostSalesLine>
    Code lines:
    ...
              SalesCrMemoHeader."No.",SalesCrMemoLine."Line No.",SalesCrMemoHeader."Posting Date");
          END;
        END;
    END;
    
    OnAfterPostSalesLine(SalesHeader,SalesLine,SuppressCommit); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostSalesLines>
  Raised in: Codeunit<Sales-Post>.<OnRun>
    Code lines:
    ...
          IF LastLineRetrieved AND SalesSetup."Invoice Rounding" THEN
            InvoiceRounding(SalesHeader,TempSalesLineGlobal,FALSE,BiggestLineNo);
        END;
      UNTIL LastLineRetrieved;
    
    OnAfterPostSalesLines( <=====================
      SalesHeader,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,WhseShip,WhseReceive,SalesLinesProcessed,
      SuppressCommit,EverythingInvoiced);
    
    IF NOT SalesHeader.IsCreditDocType THEN BEGIN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterPostUpdateOrderLineModifyTempLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostUpdateOrderLine>
    Code lines:
    ...
          IF ("Purch. Order Line No." <> 0) AND (Quantity = "Quantity Invoiced") THEN
            UpdateAssocLines(TempSalesLine);
          SetDefaultQuantity;
          OnBeforePostUpdateOrderLineModifyTempLine(TempSalesLine,WhseShip,WhseReceive,SuppressCommit);
          ModifyTempLine(TempSalesLine);
          OnAfterPostUpdateOrderLineModifyTempLine(TempSalesLine,WhseShip,WhseReceive,SuppressCommit); <=====================
        UNTIL NEXT = 0;
    END;
Codeunit<Sales-Post>.PROCEDURE<OnAfterPurchRcptHeaderInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertPurchRcptHeader>
    Code lines:
    ...
      "Posting Date" := SalesHeader."Posting Date";
      "Document Date" := SalesHeader."Document Date";
      "No. Printed" := 0;
      OnBeforePurchRcptHeaderInsert(PurchRcptHeader,PurchaseHeader,SalesHeader,SuppressCommit);
      INSERT;
      OnAfterPurchRcptHeaderInsert(PurchRcptHeader,PurchaseHeader,SalesHeader,SuppressCommit); <=====================
    END;
Codeunit<Sales-Post>.PROCEDURE<OnAfterPurchRcptLineInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertPurchRcptLine>
    Code lines:
    ...
        "Item Rcpt. Entry No." := DropShptPostBuffer."Item Shpt. Entry No.";
        "Item Charge Base Amount" := PurchOrderLine."Line Amount"
      END;
      OnBeforePurchRcptLineInsert(PurchRcptLine,PurchRcptHeader,PurchOrderLine,DropShptPostBuffer,SuppressCommit);
      INSERT;
      OnAfterPurchRcptLineInsert(PurchRcptLine,PurchRcptHeader,PurchOrderLine,DropShptPostBuffer,SuppressCommit); <=====================
    END;
Codeunit<Sales-Post>.PROCEDURE<OnAfterReleaseSalesDoc>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<ReleaseSalesDocument>
    Code lines:
    ...
        RefreshTempLines(SalesHeader,TempSalesLineGlobal);
      TESTFIELD(Status,Status::Released);
      Status := SavedStatus;
      RestoreSalesHeader(SalesHeader,SalesHeaderCopy);
      ReopenAsmOrders(TempAsmHeader);
      OnAfterReleaseSalesDoc(SalesHeader); <=====================
      IF NOT (PreviewMode OR SuppressCommit) THEN BEGIN
        MODIFY;
        COMMIT;
      END;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterResetTempLines>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<ResetTempLines>
    Code lines:
    TempSalesLineLocal.RESET;
    TempSalesLineLocal.COPY(TempSalesLineGlobal,TRUE);
    OnAfterResetTempLines(TempSalesLineLocal); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterRestoreSalesHeader>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<RestoreSalesHeader>
    Code lines:
    ...
      "Posting No." := SalesHeaderCopy."Posting No.";
      "Shipping No." := SalesHeaderCopy."Shipping No.";
      "Return Receipt No." := SalesHeaderCopy."Return Receipt No.";
    END;
    
    OnAfterRestoreSalesHeader(SalesHeader,SalesHeaderCopy); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterReturnRcptHeaderInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertReturnReceiptHeader>
    Code lines:
    ...
        ReturnRcptHeader."Source Code" := SrcCode;
        ReturnRcptHeader."User ID" := USERID;
        ReturnRcptHeader."No. Printed" := 0;
        OnBeforeReturnRcptHeaderInsert(ReturnRcptHeader,SalesHeader,SuppressCommit);
        ReturnRcptHeader.INSERT(TRUE);
        OnAfterReturnRcptHeaderInsert(ReturnRcptHeader,SalesHeader,SuppressCommit); <=====================
    
        ApprovalsMgmt.PostApprovalEntries(RECORDID,ReturnRcptHeader.RECORDID,ReturnRcptHeader."No.");
    
        IF SalesSetup."Copy Cmts Ret.Ord. to Ret.Rcpt" THEN BEGIN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterReturnRcptLineInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertReturnReceiptLine>
    Code lines:
    ...
      ReturnRcptLine."Item Charge Base Amount" :=
        ROUND(CostBaseAmount / SalesLine.Quantity * ReturnRcptLine.Quantity);
    END;
    OnBeforeReturnRcptLineInsert(ReturnRcptLine,ReturnRcptHeader,SalesLine,SuppressCommit);
    ReturnRcptLine.INSERT(TRUE);
    OnAfterReturnRcptLineInsert( <=====================
      ReturnRcptLine,ReturnRcptHeader,SalesLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit,SalesCrMemoHeader);
Codeunit<Sales-Post>.PROCEDURE<OnAfterReverseAmount>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<ReverseAmount>
    Code lines:
    ...
      "VAT Base Amount" := -"VAT Base Amount";
      "VAT Difference" := -"VAT Difference";
      "Amount Including VAT" := -"Amount Including VAT";
      "Line Discount Amount" := -"Line Discount Amount";
      "Inv. Discount Amount" := -"Inv. Discount Amount";
      OnAfterReverseAmount(SalesLine); <=====================
    END;
Codeunit<Sales-Post>.PROCEDURE<OnAfterRoundAmount>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<RoundAmount>
    Code lines:
    ...
    
      IncrAmount(SalesHeader,SalesLine,TotalSalesLineLCY);
      Increment(TotalSalesLineLCY."Unit Cost (LCY)",ROUND(SalesLineQty * "Unit Cost (LCY)"));
    END;
    
    OnAfterRoundAmount(SalesHeader,SalesLine,SalesLineQty); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesCrMemoHeaderInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertCrMemoHeader>
    Code lines:
    ...
      SalesCrMemoHeader."Source Code" := SrcCode;
      SalesCrMemoHeader."User ID" := USERID;
      SalesCrMemoHeader."No. Printed" := 0;
      OnBeforeSalesCrMemoHeaderInsert(SalesCrMemoHeader,SalesHeader,SuppressCommit);
      SalesCrMemoHeader.INSERT(TRUE);
      OnAfterSalesCrMemoHeaderInsert(SalesCrMemoHeader,SalesHeader,SuppressCommit); <=====================
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,SalesCrMemoHeader.RECORDID,SalesCrMemoHeader."No.");
    
      IF SalesSetup."Copy Cmts Ret.Ord. to Cr. Memo" THEN BEGIN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesCrMemoLineInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostSalesLine>
    Code lines:
    ...
              SalesCrMemoLine."Order No." := "Document No.";
              SalesCrMemoLine."Order Line No." := "Line No.";
            END;
            OnBeforeSalesCrMemoLineInsert(SalesCrMemoLine,SalesCrMemoHeader,xSalesLine,SuppressCommit);
            SalesCrMemoLine.INSERT(TRUE);
            OnAfterSalesCrMemoLineInsert( <=====================
              SalesCrMemoLine,SalesCrMemoHeader,SalesHeader,xSalesLine,TempItemChargeAssgntSales,SuppressCommit);
            CreatePostedDeferralScheduleFromSalesDoc(xSalesLine,SalesCrMemoLine.GetDocumentType,
              SalesCrMemoHeader."No.",SalesCrMemoLine."Line No.",SalesCrMemoHeader."Posting Date");
          END;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesInvHeaderInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertInvoiceHeader>
    Code lines:
    ...
      SalesInvHeader."User ID" := USERID;
      SalesInvHeader."No. Printed" := 0;
      SetPaymentInstructions(SalesHeader);
      OnBeforeSalesInvHeaderInsert(SalesInvHeader,SalesHeader,SuppressCommit);
      SalesInvHeader.INSERT(TRUE);
      OnAfterSalesInvHeaderInsert(SalesInvHeader,SalesHeader,SuppressCommit); <=====================
    
      UpdateWonOpportunities(SalesHeader);
      SegManagement.CreateCampaignEntryOnSalesInvoicePosting(SalesInvHeader);
    
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesInvLineInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostSalesLine>
    Code lines:
    ...
                SalesInvLine."Order No." := SalesShptLine."Order No.";
                SalesInvLine."Order Line No." := SalesShptLine."Order Line No.";
              END;
            OnBeforeSalesInvLineInsert(SalesInvLine,SalesInvHeader,xSalesLine,SuppressCommit);
            SalesInvLine.INSERT(TRUE);
            OnAfterSalesInvLineInsert( <=====================
              SalesInvLine,SalesInvHeader,xSalesLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit,SalesHeader);
            CreatePostedDeferralScheduleFromSalesDoc(xSalesLine,SalesInvLine.GetDocumentType,
              SalesInvHeader."No.",SalesInvLine."Line No.",SalesInvHeader."Posting Date");
          END;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesShptHeaderInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertShipmentHeader>
    Code lines:
    ...
      SalesShptHeader."Source Code" := SrcCode;
      SalesShptHeader."User ID" := USERID;
      SalesShptHeader."No. Printed" := 0;
      OnBeforeSalesShptHeaderInsert(SalesShptHeader,SalesHeader,SuppressCommit);
      SalesShptHeader.INSERT(TRUE);
      OnAfterSalesShptHeaderInsert(SalesShptHeader,SalesHeader,SuppressCommit); <=====================
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,SalesShptHeader.RECORDID,SalesShptHeader."No.");
    
      IF SalesSetup."Copy Comments Order to Shpt." THEN BEGIN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterSalesShptLineInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertShipmentLine>
    Code lines:
    ...
      SalesShptLine."Item Charge Base Amount" :=
        ROUND(CostBaseAmount / SalesLine.Quantity * SalesShptLine.Quantity);
    END;
    OnBeforeSalesShptLineInsert(SalesShptLine,SalesShptHeader,SalesLine,SuppressCommit,PostedWhseShptLine);
    SalesShptLine.INSERT(TRUE);
    OnAfterSalesShptLineInsert(SalesShptLine,SalesLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit,SalesInvHeader); <=====================
    
    CheckCertificateOfSupplyStatus(SalesShptHeader,SalesShptLine);
    
    OnInvoiceSalesShptLine(SalesShptLine,SalesInvHeader."No.",xSalesLine."Line No.",xSalesLine."Qty. to Invoice",SuppressCommit);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnAfterSetApplyToDocNo>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<SetApplyToDocNo>
    Code lines:
    ...
      "Bal. Account No." := SalesHeader."Bal. Account No.";
      "Applies-to Doc. Type" := DocType;
      "Applies-to Doc. No." := DocNo;
    END;
    
    OnAfterSetApplyToDocNo(GenJnlLine,SalesHeader); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterTestSalesLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<TestSalesLine>
    Code lines:
    ...
            TESTFIELD("Qty. to Ship",0);
            TESTFIELD("Qty. to Invoice",Quantity);
          END;
      END;
    
      OnAfterTestSalesLine(SalesHeader,SalesLine,WhseShip,WhseReceive,SuppressCommit); <=====================
    END;
Codeunit<Sales-Post>.PROCEDURE<OnAfterUpdateAfterPosting>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<UpdateAfterPosting>
    Code lines:
    ...
        REPEAT
          UpdateBlanketOrderLine(TempSalesLine,SalesHeader.Ship,SalesHeader.Receive,SalesHeader.Invoice);
        UNTIL NEXT = 0;
    END;
    
    OnAfterUpdateAfterPosting(SalesHeader,TempSalesLine); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterUpdateBlanketOrderLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<UpdateBlanketOrderLine>
    Code lines:
    ...
          BlanketOrderSalesLine."Qty. to Ship (Base)" :=
            BlanketOrderSalesLine."Quantity (Base)" - BlanketOrderSalesLine."Qty. Shipped (Base)";
    
          OnBeforeBlanketOrderSalesLineModify(BlanketOrderSalesLine,SalesLine);
          BlanketOrderSalesLine.MODIFY;
          OnAfterUpdateBlanketOrderLine(BlanketOrderSalesLine,SalesLine,Ship,Receive,Invoice); <=====================
        END;
      END;
Codeunit<Sales-Post>.PROCEDURE<OnAfterUpdatePostingNos>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<UpdatePostingNos>
    Code lines:
    ...
              "Posting No." := PostingPreviewNoTok;
          END;
        END;
    END;
    
    OnAfterUpdatePostingNos(SalesHeader,NoSeriesMgt,SuppressCommit); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterUpdatePrepmtSalesLineWithRounding>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<UpdatePrepmtSalesLineWithRounding>
    Code lines:
    ...
        TotalSalesLine."Amount Including VAT" := 0;
        TotalSalesLineLCY."Amount Including VAT" := 0;
      END;
    END;
    
    OnAfterUpdatePrepmtSalesLineWithRounding( <=====================
      PrepmtSalesLine,TotalRoundingAmount,TotalPrepmtAmount,FinalInvoice,PricesInclVATRoundingAmount,
      TotalSalesLine,TotalSalesLineLCY);
Codeunit<Sales-Post>.PROCEDURE<OnAfterUpdateSalesHeader>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<UpdateSalesHeader>
    Code lines:
    ...
          SalesCrMemoHeader."Cust. Ledger Entry No." := CustLedgerEntry."Entry No.";
          SalesCrMemoHeader.MODIFY;
        END;
    END;
    
    OnAfterUpdateSalesHeader(CustLedgerEntry,SalesInvHeader,SalesCrMemoHeader,GenJnlLineDocType); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterUpdateSalesLineBeforePost>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<UpdateSalesLineBeforePost>
    Code lines:
    ...
        IF (Item."Costing Method" = Item."Costing Method"::Standard) AND NOT IsShipment THEN
          GetUnitCost;
      END;
    END;
    
    OnAfterUpdateSalesLineBeforePost(SalesLine,SalesHeader,WhseShip,WhseReceive,SuppressCommit); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterUpdateWhseDocuments>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<UpdateWhseDocuments>
    Code lines:
    ...
    IF WhseShip THEN BEGIN
      WhsePostShpt.PostUpdateWhseDocuments(WhseShptHeader);
      TempWhseShptHeader.DELETE;
    END;
    
    OnAfterUpdateWhseDocuments(SalesHeader,WhseShip,WhseReceive,WhseShptHeader,WhseRcptHeader); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnAfterValidatePostingAndDocumentDate>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<ValidatePostingAndDocumentDate>
    Code lines:
    ...
    END;
    
    IF ModifyHeader THEN
      SalesHeader.MODIFY;
    
    OnAfterValidatePostingAndDocumentDate(SalesHeader,SuppressCommit,PreviewMode); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnBeforeArchiveUnpostedOrder>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<ArchiveUnpostedOrder>
    Code lines:
    IsHandled := FALSE;
    OnBeforeArchiveUnpostedOrder(SalesHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SalesSetup.GET;
    IF NOT (SalesHeader."Document Type" IN [SalesHeader."Document Type"::Order,SalesHeader."Document Type"::"Return Order"]) THEN
      EXIT;
    
    SalesSetup.GET;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeBlanketOrderSalesLineModify>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<UpdateBlanketOrderLine>
    Code lines:
    ...
          BlanketOrderSalesLine."Qty. to Invoice (Base)" :=
            BlanketOrderSalesLine."Quantity (Base)" - BlanketOrderSalesLine."Qty. Invoiced (Base)";
          BlanketOrderSalesLine."Qty. to Ship (Base)" :=
            BlanketOrderSalesLine."Quantity (Base)" - BlanketOrderSalesLine."Qty. Shipped (Base)";
    
          OnBeforeBlanketOrderSalesLineModify(BlanketOrderSalesLine,SalesLine); <=====================
          BlanketOrderSalesLine.MODIFY;
          OnAfterUpdateBlanketOrderLine(BlanketOrderSalesLine,SalesLine,Ship,Receive,Invoice);
        END;
      END;
Codeunit<Sales-Post>.PROCEDURE<OnBeforeCreatePostedWhseRcptHeader>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertShipmentHeader>
    Code lines:
    ...
        OnBeforeCreatePostedWhseShptHeader(PostedWhseShptHeader,WhseShptHeader,SalesHeader);
        WhsePostShpt.CreatePostedShptHeader(PostedWhseShptHeader,WhseShptHeader,"Shipping No.","Posting Date");
      END;
      IF WhseReceive THEN BEGIN
        WhseRcptHeader.GET(TempWhseRcptHeader."No.");
        OnBeforeCreatePostedWhseRcptHeader(PostedWhseRcptHeader,WhseRcptHeader,SalesHeader); <=====================
        WhsePostRcpt.CreatePostedRcptHeader(PostedWhseRcptHeader,WhseRcptHeader,"Shipping No.","Posting Date");
      END;
    END;
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertReturnReceiptHeader>
    Code lines:
    ...
        END;
      END;
    
      IF WhseReceive THEN BEGIN
        WhseRcptHeader.GET(TempWhseRcptHeader."No.");
        OnBeforeCreatePostedWhseRcptHeader(PostedWhseRcptHeader,WhseRcptHeader,SalesHeader); <=====================
        WhsePostRcpt.CreatePostedRcptHeader(PostedWhseRcptHeader,WhseRcptHeader,"Return Receipt No.","Posting Date");
      END;
      IF WhseShip THEN BEGIN
        WhseShptHeader.GET(TempWhseShptHeader."No.");
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeCreatePostedWhseShptHeader>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertShipmentHeader>
    Code lines:
    ...
          "Document Type",SalesCommentLine."Document Type"::Shipment,"No.",SalesShptHeader."No.");
        RecordLinkManagement.CopyLinks(SalesHeader,SalesShptHeader);
      END;
      IF WhseShip THEN BEGIN
        WhseShptHeader.GET(TempWhseShptHeader."No.");
        OnBeforeCreatePostedWhseShptHeader(PostedWhseShptHeader,WhseShptHeader,SalesHeader); <=====================
        WhsePostShpt.CreatePostedShptHeader(PostedWhseShptHeader,WhseShptHeader,"Shipping No.","Posting Date");
      END;
      IF WhseReceive THEN BEGIN
        WhseRcptHeader.GET(TempWhseRcptHeader."No.");
    ...
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertReturnReceiptHeader>
    Code lines:
    ...
        OnBeforeCreatePostedWhseRcptHeader(PostedWhseRcptHeader,WhseRcptHeader,SalesHeader);
        WhsePostRcpt.CreatePostedRcptHeader(PostedWhseRcptHeader,WhseRcptHeader,"Return Receipt No.","Posting Date");
      END;
      IF WhseShip THEN BEGIN
        WhseShptHeader.GET(TempWhseShptHeader."No.");
        OnBeforeCreatePostedWhseShptHeader(PostedWhseShptHeader,WhseShptHeader,SalesHeader); <=====================
        WhsePostShpt.CreatePostedShptHeader(PostedWhseShptHeader,WhseShptHeader,"Return Receipt No.","Posting Date");
      END;
    END;
Codeunit<Sales-Post>.PROCEDURE<OnBeforeCreatePrepaymentLines>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CreatePrepaymentLines>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCreatePrepaymentLines(SalesHeader,TempPrepmtSalesLine,CompleteFunctionality,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    GetGLSetup;
    WITH TempSalesLine DO BEGIN
      FillTempLines(SalesHeader,TempSalesLineGlobal);
      ResetTempLines(TempSalesLine);
      IF NOT FINDLAST THEN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeDeleteAfterPosting>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<DeleteAfterPosting>
    Code lines:
    OnBeforeDeleteAfterPosting(SalesHeader,SalesInvHeader,SalesCrMemoHeader,SkipDelete,SuppressCommit); <=====================
    IF SkipDelete THEN
      EXIT;
    
    WITH SalesHeader DO BEGIN
      IF HASLINKS THEN
        DELETELINKS;
      DELETE;
      ReserveSalesLine.DeleteInvoiceSpecFromHeader(SalesHeader);
      DeleteATOLinks(SalesHeader);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeDivideAmount>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<DivideAmount>
    Code lines:
    IF RoundingLineInserted AND (RoundingLineNo = SalesLine."Line No.") THEN
      EXIT;
    
    OnBeforeDivideAmount(SalesHeader,SalesLine,QtyType,SalesLineQty,TempVATAmountLine,TempVATAmountLineRemainder); <=====================
    
    WITH SalesLine DO
      IF (SalesLineQty = 0) OR ("Unit Price" = 0) THEN BEGIN
        "Line Amount" := 0;
        "Line Discount Amount" := 0;
        "Inv. Discount Amount" := 0;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeFillDeferralPostingBuffer>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<FillInvoicePostingBuffer>
    Code lines:
    ...
    UpdateInvoicePostBuffer(TempInvoicePostBuffer,InvoicePostBuffer,FALSE);
    
    OnFillInvoicePostingBufferOnAfterUpdateInvoicePostBuffer(SalesHeader,SalesLine,InvoicePostBuffer,TempInvoicePostBuffer);
    
    IF SalesLine."Deferral Code" <> '' THEN BEGIN
      OnBeforeFillDeferralPostingBuffer( <=====================
        SalesLine,InvoicePostBuffer,TempInvoicePostBuffer,UseDate,InvDefLineNo,DeferralLineNo,SuppressCommit);
      FillDeferralPostingBuffer(SalesHeader,SalesLine,InvoicePostBuffer,AmtToDefer,AmtToDeferACY,DeferralAccount,SalesAccount);
    END;
Codeunit<Sales-Post>.PROCEDURE<OnBeforeFinalizePosting>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<FinalizePosting>
    Code lines:
    OnBeforeFinalizePosting(SalesHeader,TempSalesLineGlobal,EverythingInvoiced,SuppressCommit,GenJnlPostLine); <=====================
    
    WITH SalesHeader DO BEGIN
      IF ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"]) AND
         (NOT EverythingInvoiced)
      THEN BEGIN
        MODIFY;
        InsertTrackingSpecification(SalesHeader);
        PostUpdateOrderLine(SalesHeader);
        UpdateAssocOrder(TempDropShptPostBuffer);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeGetCountryCode>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<GetCountryCode>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetCountryCode(SalesHeader,SalesLine,CountryRegionCode,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(CountryRegionCode);
    
    IF SalesLine."Shipment No." <> '' THEN BEGIN
      SalesShipmentHeader.GET(SalesLine."Shipment No.");
      EXIT(
        GetCountryRegionCode(
          SalesLine."Sell-to Customer No.",
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeInitAssocItemJnlLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InitAssocItemJnlLine>
    Code lines:
    OnBeforeInitAssocItemJnlLine(ItemJnlLine,PurchOrderHeader,PurchOrderLine,SalesHeader); <=====================
    
    WITH ItemJnlLine DO BEGIN
      INIT;
      "Entry Type" := "Entry Type"::Purchase;
      CopyDocumentFields(
        "Document Type"::"Purchase Receipt",PurchOrderHeader."Receiving No.",PurchOrderHeader."No.",SrcCode,
        PurchOrderHeader."Posting No. Series");
    
      CopyFromPurchHeader(PurchOrderHeader);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeInsertICGenJnlLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertICGenJnlLine>
    Code lines:
    ...
          Amount := -SalesLine.Amount;
      END;
      IF "Bal. VAT %" <> 0 THEN
        Amount := ROUND(Amount * (1 + "Bal. VAT %" / 100),Currency."Amount Rounding Precision");
      VALIDATE(Amount);
      OnBeforeInsertICGenJnlLine(TempICGenJnlLine,SalesHeader,SalesLine,SuppressCommit); <=====================
      INSERT;
    END;
Codeunit<Sales-Post>.PROCEDURE<OnBeforeInsertPostedHeaders>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertPostedHeaders>
    Code lines:
    OnBeforeInsertPostedHeaders(SalesHeader,TempWhseShptHeader,TempWhseRcptHeader); <=====================
    IF PreviewMode THEN
      PostingPreviewEventHandler.PreventCommit;
    WITH SalesHeader DO BEGIN
      // Insert shipment header
      IF Ship THEN BEGIN
        IF ("Document Type" = "Document Type"::Order) OR
           (("Document Type" = "Document Type"::Invoice) AND SalesSetup."Shipment on Invoice")
        THEN BEGIN
          IF DropShipOrder THEN BEGIN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeInsertReturnReceiptHeader>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertReturnReceiptHeader>
    Code lines:
    OnBeforeInsertReturnReceiptHeader(SalesHeader,ReturnRcptHeader,IsHandled,SuppressCommit); <=====================
    
    WITH SalesHeader DO BEGIN
      IF NOT IsHandled THEN BEGIN
        ReturnRcptHeader.INIT;
        ReturnRcptHeader.TRANSFERFIELDS(SalesHeader);
        ReturnRcptHeader."No." := "Return Receipt No.";
        IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
          ReturnRcptHeader."Return Order No. Series" := "No. Series";
          ReturnRcptHeader."Return Order No." := "No.";
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeInsertReturnReceiptLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertReturnReceiptLine>
    Code lines:
    OnBeforeInsertReturnReceiptLine(SalesLine,ReturnRcptLine,RemQtyToBeInvoiced,RemQtyToBeInvoicedBase); <=====================
    ReturnRcptLine.InitFromSalesLine(ReturnRcptHeader,xSalesLine);
    ReturnRcptLine."Quantity Invoiced" := RemQtyToBeInvoiced;
    ReturnRcptLine."Qty. Invoiced (Base)" := RemQtyToBeInvoicedBase;
    ReturnRcptLine."Return Qty. Rcd. Not Invd." := ReturnRcptLine.Quantity - ReturnRcptLine."Quantity Invoiced";
    
    IF (SalesLine.Type = SalesLine.Type::Item) AND (SalesLine."Return Qty. to Receive" <> 0) THEN BEGIN
      IF WhseReceive THEN
        IF WhseRcptLine.GetWhseRcptLine(
             WhseRcptHeader."No.",DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.")
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeInvoicePostingBufferSetAmounts>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<FillInvoicePostingBuffer>
    Code lines:
    ...
    
    OnFillInvoicePostingBufferOnBeforeDeferrals(SalesLine,TotalAmount,TotalAmountACY,UseDate);
    DeferralUtilities.AdjustTotalAmountForDeferralsNoBase(
      SalesLine."Deferral Code",AmtToDefer,AmtToDeferACY,TotalAmount,TotalAmountACY);
    
    OnBeforeInvoicePostingBufferSetAmounts( <=====================
      SalesLine,TempInvoicePostBuffer,InvoicePostBuffer,
      TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY,TotalVATBase,TotalVATBaseACY);
    
    InvoicePostBuffer.SetAmounts(
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeInvoiceRoundingAmount>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InvoiceRounding>
    Code lines:
    ...
        TotalSalesLine."Amount Including VAT" -
        ROUND(
          TotalSalesLine."Amount Including VAT",Currency."Invoice Rounding Precision",Currency.InvoiceRoundingDirection),
        Currency."Amount Rounding Precision");
    
    OnBeforeInvoiceRoundingAmount( <=====================
      SalesHeader,TotalSalesLine."Amount Including VAT",UseTempData,InvoiceRoundingAmount,SuppressCommit,TotalSalesLine);
    IF InvoiceRoundingAmount <> 0 THEN BEGIN
      CustPostingGr.GET(SalesHeader."Customer Posting Group");
      WITH SalesLine DO BEGIN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeItemJnlPostLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<IsItemJnlPostLineHandled>
    Code lines:
    IsHandled := FALSE;
    OnBeforeItemJnlPostLine(ItemJnlLine,SalesLine,SalesHeader,SuppressCommit,IsHandled); <=====================
    EXIT(IsHandled);
Codeunit<Sales-Post>.PROCEDURE<OnBeforeLockTables>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<LockTables>
    Code lines:
    OnBeforeLockTables(SalesHeader,PreviewMode,SuppressCommit); <=====================
    
    SalesLine.LOCKTABLE;
    ItemChargeAssgntSales.LOCKTABLE;
    PurchOrderLine.LOCKTABLE;
    PurchOrderHeader.LOCKTABLE;
    GetGLSetup;
    IF NOT GLSetup.OptimGLEntLockForMultiuserEnv THEN BEGIN
      GLEntry.LOCKTABLE;
      IF GLEntry.FINDLAST THEN;
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostAssocItemJnlLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostAssocItemJnlLine>
    Code lines:
    ...
    
    IsHandled := FALSE;
    OnPostAssocItemJnlLineOnBeforePost(ItemJnlLine,PurchOrderLine,IsHandled);
    IF (PurchOrderLine."Job No." = '') OR IsHandled THEN BEGIN
      TransferReservFromPurchLine(PurchOrderLine,ItemJnlLine,SalesLine,QtyToBeShippedBase);
      OnBeforePostAssocItemJnlLine(ItemJnlLine,PurchOrderLine,SuppressCommit,SalesLine); <=====================
      ItemJnlPostLine.RunWithCheck(ItemJnlLine);
    
      // Handle Item Tracking
      IF ItemJnlPostLine.CollectTrackingSpecification(TempHandlingSpecification2) THEN BEGIN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostBalancingEntry>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostBalancingEntry>
    Code lines:
    ...
        "Amount (LCY)" :=
          TotalSalesLineLCY2."Amount Including VAT" +
          ROUND(CustLedgEntry."Remaining Pmt. Disc. Possible" / CustLedgEntry."Adjusted Currency Factor");
      "Allow Zero-Amount Posting" := TRUE;
    
      OnBeforePostBalancingEntry(GenJnlLine,SalesHeader,TotalSalesLine2,TotalSalesLineLCY2,SuppressCommit,PreviewMode); <=====================
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostBalancingEntry(GenJnlLine,SalesHeader,TotalSalesLine2,TotalSalesLineLCY2,SuppressCommit,GenJnlPostLine);
    END;
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostCommitSalesDoc>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CheckAndUpdate>
    Code lines:
    ...
    
      ModifyHeader := UpdatePostingNos(SalesHeader);
    
      DropShipOrder := UpdateAssosOrderPostingNos(SalesHeader);
    
      OnBeforePostCommitSalesDoc(SalesHeader,GenJnlPostLine,PreviewMode,ModifyHeader,SuppressCommit,TempSalesLineGlobal); <=====================
      IF NOT PreviewMode AND ModifyHeader THEN BEGIN
        MODIFY;
        IF NOT SuppressCommit THEN
          COMMIT;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostCustomerEntry>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostCustomerEntry>
    Code lines:
    ...
      "Amount (LCY)" := -TotalSalesLineLCY2."Amount Including VAT";
      "Sales/Purch. (LCY)" := -TotalSalesLineLCY2.Amount;
      "Profit (LCY)" := -(TotalSalesLineLCY2.Amount - TotalSalesLineLCY2."Unit Cost (LCY)");
      "Inv. Discount (LCY)" := -TotalSalesLineLCY2."Inv. Discount Amount";
    
      OnBeforePostCustomerEntry(GenJnlLine,SalesHeader,TotalSalesLine2,TotalSalesLineLCY2,SuppressCommit,PreviewMode); <=====================
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostCustomerEntry(GenJnlLine,SalesHeader,TotalSalesLine2,TotalSalesLineLCY2,SuppressCommit,GenJnlPostLine);
    END;
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostDropOrderShipment>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostDropOrderShipment>
    Code lines:
    OnBeforePostDropOrderShipment(SalesHeader,TempDropShptPostBuffer); <=====================
    
    ArchivePurchaseOrders(TempDropShptPostBuffer);
    WITH SalesHeader DO
      IF TempDropShptPostBuffer.FINDSET THEN BEGIN
        PurchSetup.GET;
        REPEAT
          PurchOrderHeader.GET(PurchOrderHeader."Document Type"::Order,TempDropShptPostBuffer."Order No.");
          InsertPurchRcptHeader(PurchOrderHeader,SalesHeader,PurchRcptHeader);
          ApprovalsMgmt.PostApprovalEntries(RECORDID,PurchRcptHeader.RECORDID,PurchRcptHeader."No.");
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostGLAndCustomer>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostGLAndCustomer>
    Code lines:
    OnBeforePostGLAndCustomer(SalesHeader,TempInvoicePostBuffer,CustLedgEntry,SuppressCommit,PreviewMode,GenJnlPostLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH SalesHeader DO BEGIN
      // Post sales and VAT to G/L entries from posting buffer
      PostInvoicePostBuffer(SalesHeader,TempInvoicePostBuffer);
    
      // Post customer entry
      IF GUIALLOWED AND NOT HideProgressWindow THEN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostInvoicePostBuffer>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostInvoicePostBuffer>
    Code lines:
    OnBeforePostInvoicePostBuffer(SalesHeader,TempInvoicePostBuffer,TotalSalesLine,TotalSalesLineLCY); <=====================
    
    LineCount := 0;
    IF TempInvoicePostBuffer.FIND('+') THEN
      REPEAT
        LineCount := LineCount + 1;
        IF GUIALLOWED AND NOT HideProgressWindow THEN
          Window.UPDATE(3,LineCount);
    
        GLEntryNo := PostInvoicePostBufferLine(SalesHeader,TempInvoicePostBuffer);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostInvPostBuffer>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostInvoicePostBufferLine>
    Code lines:
    ...
      IF InvoicePostBuffer.Type = InvoicePostBuffer.Type::"Fixed Asset" THEN BEGIN
        "FA Posting Type" := "FA Posting Type"::Disposal;
        CopyFromInvoicePostBufferFA(InvoicePostBuffer);
      END;
    
      OnBeforePostInvPostBuffer(GenJnlLine,InvoicePostBuffer,SalesHeader,SuppressCommit,GenJnlPostLine,PreviewMode); <=====================
      GLEntryNo := RunGenJnlPostLine(GenJnlLine);
      OnAfterPostInvPostBuffer(GenJnlLine,InvoicePostBuffer,SalesHeader,GLEntryNo,SuppressCommit,GenJnlPostLine);
    END;
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostItemChargePerOrder>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemChargePerOrder>
    Code lines:
    OnBeforePostItemChargePerOrder(SalesHeader,SalesLine,ItemJnlLine2,ItemChargeSalesLine,SuppressCommit); <=====================
    
    IsHandled := FALSE;
    OnPostItemChargePerOrderOnBeforeTestJobNo(SalesLine,IsHandled);
    IF NOT IsHandled THEN
      SalesLine.TESTFIELD("Job No.",'');
    SalesLine.TESTFIELD("Allow Item Charge Assignment",TRUE);
    
    WITH TempItemChargeAssgntSales DO BEGIN
      ItemJnlLine2."Document No." := GenJnlLineDocNo;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostItemJnlLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemJnlLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforePostItemJnlLine( <=====================
      SalesHeader,SalesLine,QtyToBeShipped,QtyToBeShippedBase,QtyToBeInvoiced,QtyToBeInvoicedBase,
      ItemLedgShptEntryNo,ItemChargeNo,TrackingSpecification,IsATO,SuppressCommit,IsHandled);
    IF IsHandled THEN
      EXIT;
    
    IF NOT ItemJnlRollRndg THEN BEGIN
      RemAmt := 0;
      RemDiscAmt := 0;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostItemTrackingForReceiptCondition>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemTrackingForReceiptCondition>
    Code lines:
    Condition := SalesLine.Type = SalesLine.Type::Item;
    OnBeforePostItemTrackingForReceiptCondition(SalesLine,ReturnRcptLine,Condition); <=====================
    EXIT(Condition);
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostItemTrackingForShipment>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemTrackingForShipment>
    Code lines:
    ...
          RemQtyToBeInvoicedBase := RemQtyToBeInvoicedBase - QtyToBeInvoicedBase;
          OnBeforeUpdateInvoicedQtyOnShipmentLine(SalesShptLine,SalesLine,SalesHeader,SalesInvHeader,SuppressCommit);
          UpdateInvoicedQtyOnShipmentLine(SalesShptLine,QtyToBeInvoiced,QtyToBeInvoicedBase);
          OnInvoiceSalesShptLine(SalesShptLine,SalesInvHeader."No.",SalesLine."Line No.",-QtyToBeInvoiced,SuppressCommit);
    
          OnBeforePostItemTrackingForShipment( <=====================
            SalesInvHeader,SalesShptLine,TempTrackingSpecification,TrackingSpecificationExists,SalesLine,
            QtyToBeInvoiced,QtyToBeInvoicedBase);
    
          IF PostItemTrackingForShipmentCondition(SalesLine,SalesShptLine) THEN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostItemTrackingForShipmentCondition>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemTrackingForShipmentCondition>
    Code lines:
    Condition := SalesLine.Type = SalesLine.Type::Item;
    OnBeforePostItemTrackingForShipmentCondition(SalesLine,SalesShptLine,Condition); <=====================
    EXIT(Condition);
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostItemTrackingReturnRcpt>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemTrackingForReceipt>
    Code lines:
    ...
            ReturnRcptLine.Quantity - ReturnRcptLine."Quantity Invoiced";
    
          OnPostItemTrackingForReceiptOnBeforeReturnRcptLineModify(SalesHeader,ReturnRcptLine);
          ReturnRcptLine.MODIFY;
    
          OnBeforePostItemTrackingReturnRcpt( <=====================
            SalesInvHeader,SalesShptLine,TempTrackingSpecification,TrackingSpecificationExists,
            SalesCrMemoHeader,ReturnRcptLine,SalesLine,QtyToBeInvoiced,QtyToBeInvoicedBase);
    
          IF PostItemTrackingForReceiptCondition(SalesLine,ReturnRcptLine) THEN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostJobContractLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostJobContractLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforePostJobContractLine(SalesHeader,SalesLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF SalesLine."Job Contract Entry No." = 0 THEN
      EXIT;
    IF (SalesHeader."Document Type" <> SalesHeader."Document Type"::Invoice) AND
       (SalesHeader."Document Type" <> SalesHeader."Document Type"::"Credit Memo")
    THEN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostLines>
  Raised in: Codeunit<Sales-Post>.<OnRun>
    Code lines:
    ...
    TempInvoicePostBuffer.DELETEALL;
    TempDropShptPostBuffer.DELETEALL;
    EverythingInvoiced := TRUE;
    
    // Lines
    OnBeforePostLines(TempSalesLineGlobal,SalesHeader,SuppressCommit,PreviewMode); <=====================
    
    LineCount := 0;
    RoundingLineInserted := FALSE;
    AdjustFinalInvWith100PctPrepmt(TempSalesLineGlobal);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostSalesDoc>
  Raised in: Codeunit<Sales-Post>.<OnRun>
    Code lines:
    OnBeforePostSalesDoc(Rec,SuppressCommit,PreviewMode,HideProgressWindow); <=====================
    
    ValidatePostingAndDocumentDate(Rec);
    
    SavedPreviewMode := PreviewMode;
    SavedSuppressCommit := SuppressCommit;
    ClearAllVariables;
    SuppressCommit := SavedSuppressCommit;
    PreviewMode := SavedPreviewMode;
    
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostUpdateOrderLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostUpdateOrderLine>
    Code lines:
    OnBeforePostUpdateOrderLine(SalesHeader,TempSalesLineGlobal,SuppressCommit); <=====================
    
    ResetTempLines(TempSalesLine);
    WITH TempSalesLine DO BEGIN
      SETRANGE("Prepayment Line",FALSE);
      SETFILTER(Quantity,'<>0');
      IF FINDSET THEN
        REPEAT
          OnPostUpdateOrderLineOnBeforeInitTempSalesLineQuantities(SalesHeader,TempSalesLine);
          IF SalesHeader.Ship THEN BEGIN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforePostUpdateOrderLineModifyTempLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostUpdateOrderLine>
    Code lines:
    ...
          END;
    
          IF ("Purch. Order Line No." <> 0) AND (Quantity = "Quantity Invoiced") THEN
            UpdateAssocLines(TempSalesLine);
          SetDefaultQuantity;
          OnBeforePostUpdateOrderLineModifyTempLine(TempSalesLine,WhseShip,WhseReceive,SuppressCommit); <=====================
          ModifyTempLine(TempSalesLine);
          OnAfterPostUpdateOrderLineModifyTempLine(TempSalesLine,WhseShip,WhseReceive,SuppressCommit);
        UNTIL NEXT = 0;
    END;
Codeunit<Sales-Post>.PROCEDURE<OnBeforePurchRcptHeaderInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertPurchRcptHeader>
    Code lines:
    ...
      "No." := PurchaseHeader."Receiving No.";
      "Order No." := PurchaseHeader."No.";
      "Posting Date" := SalesHeader."Posting Date";
      "Document Date" := SalesHeader."Document Date";
      "No. Printed" := 0;
      OnBeforePurchRcptHeaderInsert(PurchRcptHeader,PurchaseHeader,SalesHeader,SuppressCommit); <=====================
      INSERT;
      OnAfterPurchRcptHeaderInsert(PurchRcptHeader,PurchaseHeader,SalesHeader,SuppressCommit);
    END;
Codeunit<Sales-Post>.PROCEDURE<OnBeforePurchRcptLineInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertPurchRcptLine>
    Code lines:
    ...
      "Qty. Rcd. Not Invoiced" := Quantity - "Quantity Invoiced";
      IF Quantity <> 0 THEN BEGIN
        "Item Rcpt. Entry No." := DropShptPostBuffer."Item Shpt. Entry No.";
        "Item Charge Base Amount" := PurchOrderLine."Line Amount"
      END;
      OnBeforePurchRcptLineInsert(PurchRcptLine,PurchRcptHeader,PurchOrderLine,DropShptPostBuffer,SuppressCommit); <=====================
      INSERT;
      OnAfterPurchRcptLineInsert(PurchRcptLine,PurchRcptHeader,PurchOrderLine,DropShptPostBuffer,SuppressCommit);
    END;
Codeunit<Sales-Post>.PROCEDURE<OnBeforeReleaseSalesDoc>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<ReleaseSalesDocument>
    Code lines:
    ...
        EXIT;
    
      SalesHeaderCopy := SalesHeader;
      SavedStatus := Status;
      GetOpenLinkedATOs(TempAsmHeader);
      OnBeforeReleaseSalesDoc(SalesHeader); <=====================
      LinesWereModified := ReleaseSalesDocument.ReleaseSalesHeader(SalesHeader,PreviewMode);
      IF LinesWereModified THEN
        RefreshTempLines(SalesHeader,TempSalesLineGlobal);
      TESTFIELD(Status,Status::Released);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeReturnRcptHeaderInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertReturnReceiptHeader>
    Code lines:
    ...
        END;
        ReturnRcptHeader."No. Series" := "Return Receipt No. Series";
        ReturnRcptHeader."Source Code" := SrcCode;
        ReturnRcptHeader."User ID" := USERID;
        ReturnRcptHeader."No. Printed" := 0;
        OnBeforeReturnRcptHeaderInsert(ReturnRcptHeader,SalesHeader,SuppressCommit); <=====================
        ReturnRcptHeader.INSERT(TRUE);
        OnAfterReturnRcptHeaderInsert(ReturnRcptHeader,SalesHeader,SuppressCommit);
    
        ApprovalsMgmt.PostApprovalEntries(RECORDID,ReturnRcptHeader.RECORDID,ReturnRcptHeader."No.");
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeReturnRcptLineInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertReturnReceiptLine>
    Code lines:
    ...
      ReturnRcptLine."Item Rcpt. Entry No." :=
        InsertReturnEntryRelation(ReturnRcptLine); // ItemLedgShptEntryNo;
      ReturnRcptLine."Item Charge Base Amount" :=
        ROUND(CostBaseAmount / SalesLine.Quantity * ReturnRcptLine.Quantity);
    END;
    OnBeforeReturnRcptLineInsert(ReturnRcptLine,ReturnRcptHeader,SalesLine,SuppressCommit); <=====================
    ReturnRcptLine.INSERT(TRUE);
    OnAfterReturnRcptLineInsert(
      ReturnRcptLine,ReturnRcptHeader,SalesLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit,SalesCrMemoHeader);
Codeunit<Sales-Post>.PROCEDURE<OnBeforeRoundAmount>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<RoundAmount>
    Code lines:
    OnBeforeRoundAmount(SalesHeader,SalesLine,SalesLineQty); <=====================
    
    WITH SalesLine DO BEGIN
      IncrAmount(SalesHeader,SalesLine,TotalSalesLine);
      Increment(TotalSalesLine."Net Weight",ROUND(SalesLineQty * "Net Weight",UOMMgt.WeightRndPrecision));
      Increment(TotalSalesLine."Gross Weight",ROUND(SalesLineQty * "Gross Weight",UOMMgt.WeightRndPrecision));
      Increment(TotalSalesLine."Unit Volume",ROUND(SalesLineQty * "Unit Volume",UOMMgt.CubageRndPrecision));
      Increment(TotalSalesLine.Quantity,SalesLineQty);
      IF "Units per Parcel" > 0 THEN
        Increment(
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesCrMemoHeaderInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertCrMemoHeader>
    Code lines:
    ...
        END;
      END;
      SalesCrMemoHeader."Source Code" := SrcCode;
      SalesCrMemoHeader."User ID" := USERID;
      SalesCrMemoHeader."No. Printed" := 0;
      OnBeforeSalesCrMemoHeaderInsert(SalesCrMemoHeader,SalesHeader,SuppressCommit); <=====================
      SalesCrMemoHeader.INSERT(TRUE);
      OnAfterSalesCrMemoHeaderInsert(SalesCrMemoHeader,SalesHeader,SuppressCommit);
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,SalesCrMemoHeader.RECORDID,SalesCrMemoHeader."No.");
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesCrMemoLineInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostSalesLine>
    Code lines:
    ...
            ItemJnlPostLine.CollectValueEntryRelation(TempValueEntryRelation,SalesCrMemoLine.RowID1);
            IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
              SalesCrMemoLine."Order No." := "Document No.";
              SalesCrMemoLine."Order Line No." := "Line No.";
            END;
            OnBeforeSalesCrMemoLineInsert(SalesCrMemoLine,SalesCrMemoHeader,xSalesLine,SuppressCommit); <=====================
            SalesCrMemoLine.INSERT(TRUE);
            OnAfterSalesCrMemoLineInsert(
              SalesCrMemoLine,SalesCrMemoHeader,SalesHeader,xSalesLine,TempItemChargeAssgntSales,SuppressCommit);
            CreatePostedDeferralScheduleFromSalesDoc(xSalesLine,SalesCrMemoLine.GetDocumentType,
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesInvHeaderInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertInvoiceHeader>
    Code lines:
    ...
        Window.UPDATE(1,STRSUBSTNO(InvoiceNoMsg,"Document Type","No.",SalesInvHeader."No."));
      SalesInvHeader."Source Code" := SrcCode;
      SalesInvHeader."User ID" := USERID;
      SalesInvHeader."No. Printed" := 0;
      SetPaymentInstructions(SalesHeader);
      OnBeforeSalesInvHeaderInsert(SalesInvHeader,SalesHeader,SuppressCommit); <=====================
      SalesInvHeader.INSERT(TRUE);
      OnAfterSalesInvHeaderInsert(SalesInvHeader,SalesHeader,SuppressCommit);
    
      UpdateWonOpportunities(SalesHeader);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesInvLineInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostSalesLine>
    Code lines:
    ...
            END ELSE
              IF SalesShptLine.GET("Shipment No.","Shipment Line No.") THEN BEGIN
                SalesInvLine."Order No." := SalesShptLine."Order No.";
                SalesInvLine."Order Line No." := SalesShptLine."Order Line No.";
              END;
            OnBeforeSalesInvLineInsert(SalesInvLine,SalesInvHeader,xSalesLine,SuppressCommit); <=====================
            SalesInvLine.INSERT(TRUE);
            OnAfterSalesInvLineInsert(
              SalesInvLine,SalesInvHeader,xSalesLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit,SalesHeader);
            CreatePostedDeferralScheduleFromSalesDoc(xSalesLine,SalesInvLine.GetDocumentType,
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesLineDeleteAll>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<DeleteAfterPosting>
    Code lines:
    ...
            TempSalesLine.DELETELINKS;
        UNTIL TempSalesLine.NEXT = 0;
    
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      OnBeforeSalesLineDeleteAll(SalesLine,SuppressCommit); <=====================
      SalesLine.DELETEALL;
      IF IdentityManagement.IsInvAppId AND CustInvoiceDisc.GET("Invoice Disc. Code") THEN
        CustInvoiceDisc.DELETE; // Cleanup of autogenerated cust. invoice discounts
    
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesShptHeaderInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertShipmentHeader>
    Code lines:
    ...
          TESTFIELD("External Document No.");
      END;
      SalesShptHeader."Source Code" := SrcCode;
      SalesShptHeader."User ID" := USERID;
      SalesShptHeader."No. Printed" := 0;
      OnBeforeSalesShptHeaderInsert(SalesShptHeader,SalesHeader,SuppressCommit); <=====================
      SalesShptHeader.INSERT(TRUE);
      OnAfterSalesShptHeaderInsert(SalesShptHeader,SalesHeader,SuppressCommit);
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,SalesShptHeader.RECORDID,SalesShptHeader."No.");
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeSalesShptLineInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertShipmentLine>
    Code lines:
    ...
      SalesShptLine."Item Shpt. Entry No." :=
        InsertShptEntryRelation(SalesShptLine); // ItemLedgShptEntryNo
      SalesShptLine."Item Charge Base Amount" :=
        ROUND(CostBaseAmount / SalesLine.Quantity * SalesShptLine.Quantity);
    END;
    OnBeforeSalesShptLineInsert(SalesShptLine,SalesShptHeader,SalesLine,SuppressCommit,PostedWhseShptLine); <=====================
    SalesShptLine.INSERT(TRUE);
    OnAfterSalesShptLineInsert(SalesShptLine,SalesLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit,SalesInvHeader);
    
    CheckCertificateOfSupplyStatus(SalesShptHeader,SalesShptLine);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeSendICDocument>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<SendICDocument>
    Code lines:
    IsHandled := FALSE;
    OnBeforeSendICDocument(SalesHeader,ModifyHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH SalesHeader DO
      IF "Send IC Document" AND ("IC Status" = "IC Status"::New) AND ("IC Direction" = "IC Direction"::Outgoing) AND
         ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"])
      THEN BEGIN
        ICInboxOutboxMgt.SendSalesDoc(SalesHeader,TRUE);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeShouldPostWhseJnlLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<ShouldPostWhseJnlLine>
    Code lines:
    OnBeforeShouldPostWhseJnlLine(SalesLine,Result,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(Result);
    
    WITH SalesLine DO BEGIN
      GetLocation("Location Code");
      IF (("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) AND
          Location."Directed Put-away and Pick") OR
         (Location."Bin Mandatory" AND NOT (WhseShip OR WhseReceive OR InvtPickPutaway OR "Drop Shipment"))
      THEN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeTempDeferralLineInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CalcDeferralAmounts>
    Code lines:
    ...
                    TempDeferralLine.Amount,SalesHeader."Currency Factor"));
              TotalAmount := TotalAmount + TempDeferralLine.Amount;
              TotalAmountLCY := TotalAmountLCY + TempDeferralLine."Amount (LCY)";
            END;
    
            OnBeforeTempDeferralLineInsert(TempDeferralLine,DeferralLine,SalesLine,DeferralCount,TotalDeferralCount); <=====================
            TempDeferralLine.INSERT;
          UNTIL NEXT = 0;
        END;
      END;
Codeunit<Sales-Post>.PROCEDURE<OnBeforeTempPrepmtSalesLineInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CreatePrepaymentLines>
    Code lines:
    ...
              TempPrepmtSalesLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
              TempPrepmtSalesLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
              TempPrepmtSalesLine."Dimension Set ID" := "Dimension Set ID";
              TempPrepmtSalesLine."Line No." := NextLineNo;
              NextLineNo := NextLineNo + 10000;
              OnBeforeTempPrepmtSalesLineInsert(TempPrepmtSalesLine,TempSalesLine,SalesHeader,CompleteFunctionality); <=====================
              TempPrepmtSalesLine.INSERT;
    
              TransferExtText.PrepmtGetAnyExtText(
                TempPrepmtSalesLine."No.",DATABASE::"Sales Invoice Line",
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeTempPrepmtSalesLineModify>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CreatePrepaymentLines>
    Code lines:
    ...
                "Unit Price",TempPrepmtSalesLine."Unit Price" + "Prepmt Amt to Deduct");
              TempPrepmtSalesLine.VALIDATE("VAT Difference",VATDifference - "Prepmt VAT Diff. to Deduct");
              TempPrepmtSalesLine."Prepmt Amt to Deduct" := PrepmtAmtToDeduct;
              IF "Prepayment %" < TempPrepmtSalesLine."Prepayment %" THEN
                TempPrepmtSalesLine."Prepayment %" := "Prepayment %";
              OnBeforeTempPrepmtSalesLineModify(TempPrepmtSalesLine,TempSalesLine,SalesHeader,CompleteFunctionality); <=====================
              TempPrepmtSalesLine.MODIFY;
            END ELSE BEGIN
              TempPrepmtSalesLine.INIT;
              TempPrepmtSalesLine."Document Type" := SalesHeader."Document Type";
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeTestSalesLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<TestSalesLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTestSalesLine(SalesHeader,SalesLine,SuppressCommit,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH SalesLine DO BEGIN
      CASE Type OF
        Type::Item:
          DummyTrackingSpecification.CheckItemTrackingQuantity(
            DATABASE::"Sales Line","Document Type","Document No.","Line No.",
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeTestSalesLineFixedAsset>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<TestSalesLineFixedAsset>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTestSalesLineFixedAsset(SalesLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH SalesLine DO BEGIN
      TESTFIELD("Job No.",'');
      TESTFIELD("Depreciation Book Code");
      DeprBook.GET("Depreciation Book Code");
      DeprBook.TESTFIELD("G/L Integration - Disposal",TRUE);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeTestSalesLineItemCharge>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<TestSalesLineItemCharge>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTestSalesLineItemCharge(SalesLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH SalesLine DO BEGIN
      TESTFIELD(Amount);
      TESTFIELD("Job No.",'');
      TESTFIELD("Job Contract Entry No.",0);
    END;
Codeunit<Sales-Post>.PROCEDURE<OnBeforeTestSalesLineJob>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<TestSalesLineJob>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTestSalesLineJob(SalesLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH SalesLine DO
      IF NOT ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) THEN
        TESTFIELD("Job No.",'');
Codeunit<Sales-Post>.PROCEDURE<OnBeforeTestSalesLineOthers>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<TestSalesLineOthers>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTestSalesLineOthers(SalesLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH SalesLine DO BEGIN
      TESTFIELD("Depreciation Book Code",'');
      TESTFIELD("Depr. until FA Posting Date",FALSE);
      TESTFIELD("FA Posting Date",0D);
      TESTFIELD("Duplicate in Depreciation Book",'');
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeUpdateAssocLines>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<UpdateAssocLines>
    Code lines:
    IsHandled := FALSE;
    OnBeforeUpdateAssocLines(SalesOrderLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    PurchOrderLine.GET(
      PurchOrderLine."Document Type"::Order,
      SalesOrderLine."Purchase Order No.",SalesOrderLine."Purch. Order Line No.");
    PurchOrderLine."Sales Order No." := '';
    PurchOrderLine."Sales Order Line No." := 0;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeUpdateBlanketOrderLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<UpdateBlanketOrderLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforeUpdateBlanketOrderLine(SalesLine,Ship,Receive,Invoice,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF (SalesLine."Blanket Order No." <> '') AND (SalesLine."Blanket Order Line No." <> 0) AND
       ((Ship AND (SalesLine."Qty. to Ship" <> 0)) OR
        (Receive AND (SalesLine."Return Qty. to Receive" <> 0)) OR
        (Invoice AND (SalesLine."Qty. to Invoice" <> 0)))
    THEN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeUpdateHandledICInboxTransaction>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<UpdateHandledICInboxTransaction>
    Code lines:
    IsHandled := FALSE;
    OnBeforeUpdateHandledICInboxTransaction(SalesHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH SalesHeader DO
      IF "IC Direction" = "IC Direction"::Incoming THEN BEGIN
        HandledICInboxTrans.SETRANGE("Document No.","External Document No.");
        Customer.GET("Sell-to Customer No.");
        HandledICInboxTrans.SETRANGE("IC Partner Code",Customer."IC Partner Code");
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeUpdateInvoicedQtyOnShipmentLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemTrackingForShipment>
    Code lines:
    ...
              RemQtyToInvoiceCurrLine,QtyToBeInvoiced,
              RemQtyToInvoiceCurrLineBase,QtyToBeInvoicedBase);
    
          RemQtyToBeInvoiced := RemQtyToBeInvoiced - QtyToBeInvoiced;
          RemQtyToBeInvoicedBase := RemQtyToBeInvoicedBase - QtyToBeInvoicedBase;
          OnBeforeUpdateInvoicedQtyOnShipmentLine(SalesShptLine,SalesLine,SalesHeader,SalesInvHeader,SuppressCommit); <=====================
          UpdateInvoicedQtyOnShipmentLine(SalesShptLine,QtyToBeInvoiced,QtyToBeInvoicedBase);
          OnInvoiceSalesShptLine(SalesShptLine,SalesInvHeader."No.",SalesLine."Line No.",-QtyToBeInvoiced,SuppressCommit);
    
          OnBeforePostItemTrackingForShipment(
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeUpdatePostingNo>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<UpdatePostingNos>
    Code lines:
    OnBeforeUpdatePostingNos(SalesHeader,NoSeriesMgt,SuppressCommit,ModifyHeader); <=====================
    WITH SalesHeader DO BEGIN
      IsHandled := FALSE;
      OnBeforeUpdateShippingNo(SalesHeader,WhseShip,WhseReceive,InvtPickPutaway,PreviewMode,ModifyHeader,IsHandled);
      IF NOT IsHandled THEN
        IF Ship AND ("Shipping No." = '') THEN
          IF ("Document Type" = "Document Type"::Order) OR
             (("Document Type" = "Document Type"::Invoice) AND SalesSetup."Shipment on Invoice")
          THEN
            IF NOT PreviewMode THEN BEGIN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeUpdatePostingNos>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<UpdatePostingNos>
    Code lines:
    OnBeforeUpdatePostingNos(SalesHeader,NoSeriesMgt,SuppressCommit,ModifyHeader); <=====================
    WITH SalesHeader DO BEGIN
      IsHandled := FALSE;
      OnBeforeUpdateShippingNo(SalesHeader,WhseShip,WhseReceive,InvtPickPutaway,PreviewMode,ModifyHeader,IsHandled);
      IF NOT IsHandled THEN
        IF Ship AND ("Shipping No." = '') THEN
          IF ("Document Type" = "Document Type"::Order) OR
             (("Document Type" = "Document Type"::Invoice) AND SalesSetup."Shipment on Invoice")
          THEN
            IF NOT PreviewMode THEN BEGIN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeUpdatePrepmtSalesLineWithRounding>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<UpdatePrepmtSalesLineWithRounding>
    Code lines:
    OnBeforeUpdatePrepmtSalesLineWithRounding( <=====================
      PrepmtSalesLine,TotalRoundingAmount,TotalPrepmtAmount,FinalInvoice,PricesInclVATRoundingAmount,
      TotalSalesLine,TotalSalesLineLCY);
    
    WITH PrepmtSalesLine DO BEGIN
      NewAmountIncludingVAT := TotalPrepmtAmount[1] + TotalPrepmtAmount[2] + TotalRoundingAmount[1] + TotalRoundingAmount[2];
      IF "Prepayment %" = 100 THEN
        TotalRoundingAmount[1] += "Amount Including VAT" - NewAmountIncludingVAT;
      AmountRoundingPrecision :=
        GetAmountRoundingPrecisionInLCY("Document Type","Document No.","Currency Code");
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeUpdateSalesLineBeforePost>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<UpdateSalesLineBeforePost>
    Code lines:
    OnBeforeUpdateSalesLineBeforePost(SalesLine,SalesHeader,WhseShip,WhseReceive,RoundingLineInserted,SuppressCommit); <=====================
    
    WITH SalesLine DO BEGIN
      IF NOT (SalesHeader.Ship OR RoundingLineInserted) THEN BEGIN
        "Qty. to Ship" := 0;
        "Qty. to Ship (Base)" := 0;
      END;
      IF NOT (SalesHeader.Receive OR RoundingLineInserted) THEN BEGIN
        "Return Qty. to Receive" := 0;
        "Return Qty. to Receive (Base)" := 0;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeUpdateShippingNo>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<UpdatePostingNos>
    Code lines:
    OnBeforeUpdatePostingNos(SalesHeader,NoSeriesMgt,SuppressCommit,ModifyHeader);
    WITH SalesHeader DO BEGIN
      IsHandled := FALSE;
      OnBeforeUpdateShippingNo(SalesHeader,WhseShip,WhseReceive,InvtPickPutaway,PreviewMode,ModifyHeader,IsHandled); <=====================
      IF NOT IsHandled THEN
        IF Ship AND ("Shipping No." = '') THEN
          IF ("Document Type" = "Document Type"::Order) OR
             (("Document Type" = "Document Type"::Invoice) AND SalesSetup."Shipment on Invoice")
          THEN
            IF NOT PreviewMode THEN BEGIN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeValidatePostingAndDocumentDate>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<ValidatePostingAndDocumentDate>
    Code lines:
    OnBeforeValidatePostingAndDocumentDate(SalesHeader,SuppressCommit); <=====================
    
    PostingDateExists :=
      BatchProcessingMgt.GetParameterBoolean(SalesHeader.RECORDID,BatchPostParameterTypes.ReplacePostingDate,ReplacePostingDate) AND
      BatchProcessingMgt.GetParameterBoolean(
        SalesHeader.RECORDID,BatchPostParameterTypes.ReplaceDocumentDate,ReplaceDocumentDate) AND
      BatchProcessingMgt.GetParameterDate(SalesHeader.RECORDID,BatchPostParameterTypes.PostingDate,PostingDate);
    
    IF PostingDateExists AND (ReplacePostingDate OR (SalesHeader."Posting Date" = 0D)) THEN BEGIN
      SalesHeader."Posting Date" := PostingDate;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnBeforeWhseHandlingRequired>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<WhseHandlingRequired>
    Code lines:
    IsHandled := FALSE;
    OnBeforeWhseHandlingRequired(SalesLine,Required,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(Required);
    
    IF (SalesLine.Type = SalesLine.Type::Item) AND (NOT SalesLine."Drop Shipment") THEN BEGIN
      IF SalesLine."Location Code" = '' THEN BEGIN
        WhseSetup.GET;
        IF SalesLine."Document Type" = SalesLine."Document Type"::"Return Order" THEN
          EXIT(WhseSetup."Require Receive");
    ...
Codeunit<Sales-Post>.PROCEDURE<OnCalcInvDiscountSetFilter>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CalcInvDiscount>
    Code lines:
    ...
    
      SalesHeaderCopy := SalesHeader;
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      OnCalcInvDiscountSetFilter(SalesLine,SalesHeader); <=====================
      SalesLine.FINDFIRST;
      CODEUNIT.RUN(CODEUNIT::"Sales-Calc. Discount",SalesLine);
      RefreshTempLines(SalesHeader,TempSalesLineGlobal);
      GET("Document Type","No.");
    ...
Codeunit<Sales-Post>.PROCEDURE<OnCheckAndUpdateOnBeforeCalcInvDiscount>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CheckAndUpdate>
    Code lines:
    ...
        IF NOT SuppressCommit THEN
          COMMIT;
      END;
    
      RefreshTempLinesNeeded := FALSE;
      OnCheckAndUpdateOnBeforeCalcInvDiscount( <=====================
        SalesHeader,TempWhseRcptHeader,TempWhseShptHeader,WhseReceive,WhseShip,RefreshTempLinesNeeded);
      IF RefreshTempLinesNeeded THEN
        RefreshTempLines(SalesHeader,TempSalesLineGlobal);
    
    ...
Codeunit<Sales-Post>.PROCEDURE<OnCheckTrackingAndWarehouseForReceiveOnBeforeCheck>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CheckTrackingAndWarehouseForReceive>
    Code lines:
    ...
      SETFILTER("Return Qty. to Receive",'<>0');
      SETRANGE("Return Receipt No.",'');
      Receive := FINDFIRST;
      WhseShip := TempWhseShptHeader.FINDFIRST;
      WhseReceive := TempWhseRcptHeader.FINDFIRST;
      OnCheckTrackingAndWarehouseForReceiveOnBeforeCheck(SalesHeader,TempWhseShptHeader,TempWhseRcptHeader,Receive); <=====================
      IF Receive THEN BEGIN
        CheckTrackingSpecification(SalesHeader,TempSalesLine);
        IF NOT (WhseReceive OR WhseShip OR InvtPickPutaway) THEN
          CheckWarehouse(TempSalesLine);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnCheckTrackingAndWarehouseForShipOnBeforeCheck>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CheckTrackingAndWarehouseForShip>
    Code lines:
    WITH TempSalesLine DO BEGIN
      FindNotShippedLines(SalesHeader,TempSalesLine);
      Ship := FINDFIRST;
      WhseShip := TempWhseShptHeader.FINDFIRST;
      WhseReceive := TempWhseRcptHeader.FINDFIRST;
      OnCheckTrackingAndWarehouseForShipOnBeforeCheck(SalesHeader,TempWhseShptHeader,TempWhseRcptHeader,Ship,TempSalesLine); <=====================
      IF Ship THEN BEGIN
        CheckTrackingSpecification(SalesHeader,TempSalesLine);
        IF NOT (WhseShip OR WhseReceive OR InvtPickPutaway) THEN
          CheckWarehouse(TempSalesLine);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnCopyAndCheckItemChargeOnBeforeLoop>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CopyAndCheckItemCharge>
    Code lines:
    ...
        UNTIL ItemChargeAssgntSales.NEXT = 0;
    
      SETFILTER("Qty. to Invoice",'<>0');
      IF FINDSET THEN
        REPEAT
          OnCopyAndCheckItemChargeOnBeforeLoop(TempSalesLine,SalesHeader); <=====================
          TESTFIELD("Job No.",'');
          TESTFIELD("Job Contract Entry No.",0);
          IF ("Qty. to Ship" + "Return Qty. to Receive" <> 0) AND
             ((SalesHeader.Ship OR SalesHeader.Receive) OR
    ...
Codeunit<Sales-Post>.PROCEDURE<OnCopyToTempLinesOnAfterSetFilters>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CopyToTempLines>
    Code lines:
    SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
    SalesLine.SETRANGE("Document No.",SalesHeader."No.");
    OnCopyToTempLinesOnAfterSetFilters(SalesLine,SalesHeader); <=====================
    IF SalesLine.FINDSET THEN
      REPEAT
        TempSalesLine := SalesLine;
        TempSalesLine.INSERT;
      UNTIL SalesLine.NEXT = 0;
Codeunit<Sales-Post>.PROCEDURE<OnFillInvoicePostingBufferOnAfterUpdateInvoicePostBuffer>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<FillInvoicePostingBuffer>
    Code lines:
    ...
    InvoicePostBuffer.UpdateVATBase(TotalVATBase,TotalVATBaseACY);
    InvoicePostBuffer."Deferral Code" := SalesLine."Deferral Code";
    OnAfterFillInvoicePostBuffer(InvoicePostBuffer,SalesLine,TempInvoicePostBuffer,SuppressCommit);
    UpdateInvoicePostBuffer(TempInvoicePostBuffer,InvoicePostBuffer,FALSE);
    
    OnFillInvoicePostingBufferOnAfterUpdateInvoicePostBuffer(SalesHeader,SalesLine,InvoicePostBuffer,TempInvoicePostBuffer); <=====================
    
    IF SalesLine."Deferral Code" <> '' THEN BEGIN
      OnBeforeFillDeferralPostingBuffer(
        SalesLine,InvoicePostBuffer,TempInvoicePostBuffer,UseDate,InvDefLineNo,DeferralLineNo,SuppressCommit);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnFillInvoicePostingBufferOnBeforeDeferrals>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<FillInvoicePostingBuffer>
    Code lines:
    ...
        InvoicePostBuffer.UpdateVATBase(TotalVATBase,TotalVATBaseACY);
        UpdateInvoicePostBuffer(TempInvoicePostBuffer,InvoicePostBuffer,TRUE);
      END;
    END;
    
    OnFillInvoicePostingBufferOnBeforeDeferrals(SalesLine,TotalAmount,TotalAmountACY,UseDate); <=====================
    DeferralUtilities.AdjustTotalAmountForDeferralsNoBase(
      SalesLine."Deferral Code",AmtToDefer,AmtToDeferACY,TotalAmount,TotalAmountACY);
    
    OnBeforeInvoicePostingBufferSetAmounts(
    ...
Codeunit<Sales-Post>.PROCEDURE<OnFinalizePostingOnBeforeCreateOutboxSalesTrans>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<FinalizePosting>
    Code lines:
    ...
        COMMIT;
    
      Window.CLOSE;
    
      IsHandled := FALSE;
      OnFinalizePostingOnBeforeCreateOutboxSalesTrans(SalesHeader,IsHandled); <=====================
      IF NOT IsHandled THEN
        IF Invoice AND ("Bill-to IC Partner Code" <> '') THEN
          IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN
            ICInboxOutboxMgt.CreateOutboxSalesInvTrans(SalesInvHeader)
    ...
Codeunit<Sales-Post>.PROCEDURE<OnGetPostedDocumentRecordElseCase>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<GetPostedDocumentRecord>
    Code lines:
    ...
            SalesCrMemoHeader.SETRECFILTER;
            PostedSalesDocumentVariant := SalesCrMemoHeader;
          END;
        ELSE BEGIN
          IsHandled := FALSE;
          OnGetPostedDocumentRecordElseCase(SalesHeader,PostedSalesDocumentVariant,IsHandled); <=====================
          IF NOT IsHandled THEN
            ERROR(NotSupportedDocumentTypeErr,"Document Type");
        END;
      END;
Codeunit<Sales-Post>.PROCEDURE<OnInsertPostedHeadersOnBeforeInsertInvoiceHeader>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertPostedHeaders>
    Code lines:
    ...
           (("Document Type" = "Document Type"::"Credit Memo") AND SalesSetup."Return Receipt on Credit Memo")
        THEN
          InsertReturnReceiptHeader(SalesHeader,ReturnRcptHeader);
    
      IsHandled := FALSE;
      OnInsertPostedHeadersOnBeforeInsertInvoiceHeader(SalesHeader,IsHandled); <=====================
      IF NOT IsHandled THEN
        // Insert invoice header or credit memo header
        IF Invoice THEN
          IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN BEGIN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnInvoiceSalesShptLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<InsertShipmentLine>
    Code lines:
    ...
    SalesShptLine.INSERT(TRUE);
    OnAfterSalesShptLineInsert(SalesShptLine,SalesLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit,SalesInvHeader);
    
    CheckCertificateOfSupplyStatus(SalesShptHeader,SalesShptLine);
    
    OnInvoiceSalesShptLine(SalesShptLine,SalesInvHeader."No.",xSalesLine."Line No.",xSalesLine."Qty. to Invoice",SuppressCommit); <=====================
    
    ServItemMgt.CreateServItemOnSalesLineShpt(SalesHeader,xSalesLine,SalesShptLine);
    IF SalesLine."BOM Item No." <> '' THEN BEGIN
      ServItemMgt.ReturnServItemComp(TempServiceItem1,TempServiceItemComp1);
    ...
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemTrackingForShipment>
    Code lines:
    ...
    
          RemQtyToBeInvoiced := RemQtyToBeInvoiced - QtyToBeInvoiced;
          RemQtyToBeInvoicedBase := RemQtyToBeInvoicedBase - QtyToBeInvoicedBase;
          OnBeforeUpdateInvoicedQtyOnShipmentLine(SalesShptLine,SalesLine,SalesHeader,SalesInvHeader,SuppressCommit);
          UpdateInvoicedQtyOnShipmentLine(SalesShptLine,QtyToBeInvoiced,QtyToBeInvoicedBase);
          OnInvoiceSalesShptLine(SalesShptLine,SalesInvHeader."No.",SalesLine."Line No.",-QtyToBeInvoiced,SuppressCommit); <=====================
    
          OnBeforePostItemTrackingForShipment(
            SalesInvHeader,SalesShptLine,TempTrackingSpecification,TrackingSpecificationExists,SalesLine,
            QtyToBeInvoiced,QtyToBeInvoicedBase);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnPostAssocItemJnlLineOnBeforePost>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostAssocItemJnlLine>
    Code lines:
    ...
      PurchOrderLine."Document Type"::Order,SalesLine."Purchase Order No.",SalesLine."Purch. Order Line No.");
    
    InitAssocItemJnlLine(ItemJnlLine,PurchOrderHeader,PurchOrderLine,SalesHeader,QtyToBeShipped,QtyToBeShippedBase);
    
    IsHandled := FALSE;
    OnPostAssocItemJnlLineOnBeforePost(ItemJnlLine,PurchOrderLine,IsHandled); <=====================
    IF (PurchOrderLine."Job No." = '') OR IsHandled THEN BEGIN
      TransferReservFromPurchLine(PurchOrderLine,ItemJnlLine,SalesLine,QtyToBeShippedBase);
      OnBeforePostAssocItemJnlLine(ItemJnlLine,PurchOrderLine,SuppressCommit,SalesLine);
      ItemJnlPostLine.RunWithCheck(ItemJnlLine);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnPostATOOnBeforePostedATOLinkInsert>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostATO>
    Code lines:
    ...
      PostedATOLink."Order Line No." := SalesLine."Line No.";
    
      PostedATOLink."Assembled Quantity" := AsmHeader."Quantity to Assemble";
      PostedATOLink."Assembled Quantity (Base)" := AsmHeader."Quantity to Assemble (Base)";
    
      OnPostATOOnBeforePostedATOLinkInsert(PostedATOLink); <=====================
      PostedATOLink.INSERT;
    
      TempPostedATOLink := PostedATOLink;
      TempPostedATOLink.INSERT;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnPostBalancingEntryOnBeforeFindCustLedgEntry>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostBalancingEntry>
    Code lines:
    EntryFound := FALSE;
    OnPostBalancingEntryOnBeforeFindCustLedgEntry( <=====================
      SalesHeader,TotalSalesLine2,DocType,DocNo,ExtDocNo,CustLedgEntry,EntryFound);
    IF NOT EntryFound THEN
      FindCustLedgEntry(DocType,DocNo,CustLedgEntry);
    
    WITH GenJnlLine DO BEGIN
      InitNewLine(
        SalesHeader."Posting Date",SalesHeader."Document Date",SalesHeader."Posting Description",
        SalesHeader."Shortcut Dimension 1 Code",SalesHeader."Shortcut Dimension 2 Code",
    ...
Codeunit<Sales-Post>.PROCEDURE<OnPostItemChargeOnBeforePostItemJnlLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemCharge>
    Code lines:
    ...
      SalesLineToPost."Unit Cost (LCY)" := ROUND(
          SalesLineToPost.Amount / QuantityBase,GLSetup."Unit-Amount Rounding Precision");
      UpdateSalesLineDimSetIDFromAppliedEntry(SalesLineToPost,SalesLine);
      SalesLineToPost."Line No." := "Document Line No.";
    
      OnPostItemChargeOnBeforePostItemJnlLine(SalesLineToPost,SalesLine,QtyToAssign); <=====================
    
      PostItemJnlLine(
        SalesHeader,SalesLineToPost,0,0,-QuantityBase,-QuantityBase,
        SalesLineToPost."Appl.-to Item Entry","Item Charge No.",DummyTrackingSpecification,FALSE);
Codeunit<Sales-Post>.PROCEDURE<OnPostItemChargePerOrderOnAfterCopyToItemJnlLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemChargePerOrder>
    Code lines:
    ...
      ItemJnlLine2."Shortcut Dimension 1 Code" := ItemChargeSalesLine."Shortcut Dimension 1 Code";
      ItemJnlLine2."Shortcut Dimension 2 Code" := ItemChargeSalesLine."Shortcut Dimension 2 Code";
      ItemJnlLine2."Dimension Set ID" := ItemChargeSalesLine."Dimension Set ID";
      ItemJnlLine2."Gen. Prod. Posting Group" := ItemChargeSalesLine."Gen. Prod. Posting Group";
    
      OnPostItemChargePerOrderOnAfterCopyToItemJnlLine( <=====================
        ItemJnlLine2,ItemChargeSalesLine,GLSetup,QtyToInvoice,TempItemChargeAssgntSales);
    END;
    
    WITH TempTrackingSpecificationInv DO BEGIN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnPostItemChargePerOrderOnBeforeTestJobNo>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemChargePerOrder>
    Code lines:
    OnBeforePostItemChargePerOrder(SalesHeader,SalesLine,ItemJnlLine2,ItemChargeSalesLine,SuppressCommit);
    
    IsHandled := FALSE;
    OnPostItemChargePerOrderOnBeforeTestJobNo(SalesLine,IsHandled); <=====================
    IF NOT IsHandled THEN
      SalesLine.TESTFIELD("Job No.",'');
    SalesLine.TESTFIELD("Allow Item Charge Assignment",TRUE);
    
    WITH TempItemChargeAssgntSales DO BEGIN
      ItemJnlLine2."Document No." := GenJnlLineDocNo;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnPostItemChargePerShptOnBeforeTestJobNo>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemChargePerShpt>
    Code lines:
    ...
         TempItemChargeAssgntSales."Applies-to Doc. No.",TempItemChargeAssgntSales."Applies-to Doc. Line No.")
    THEN
      ERROR(ShipmentLinesDeletedErr);
    
    IsHandled := FALSE;
    OnPostItemChargePerShptOnBeforeTestJobNo(SalesShptLine,IsHandled); <=====================
    IF NOT IsHandled THEN
      SalesShptLine.TESTFIELD("Job No.",'');
    
    IF SalesShptLine."Item Shpt. Entry No." <> 0 THEN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnPostItemJnlLineOnAfterCopyDocumentFields>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemJnlLineCopyDocumentFields>
    Code lines:
    ...
                "Document Type"::"Sales Invoice",GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode,SalesHeader."Posting No. Series");
          "Posting No. Series" := SalesHeader."Posting No. Series";
        END;
      END;
    
    OnPostItemJnlLineOnAfterCopyDocumentFields(ItemJnlLine,SalesLine,TempWhseRcptHeader,TempWhseShptHeader); <=====================
Codeunit<Sales-Post>.PROCEDURE<OnPostItemJnlLineOnBeforeTransferReservToItemJnlLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemJnlLineBeforePost>
    Code lines:
    ...
        IF ShouldPostWhseJnlLine(SalesLine) THEN BEGIN
          CreateWhseJnlLine(ItemJnlLine,SalesLine,TempWhseJnlLine);
          PostWhseJnlLine := TRUE;
        END;
    
      OnPostItemJnlLineOnBeforeTransferReservToItemJnlLine(SalesLine,ItemJnlLine); <=====================
    
      IF QtyToBeShippedBase <> 0 THEN BEGIN
        IF SalesLine.IsCreditDocType THEN
          ReserveSalesLine.TransferSalesLineToItemJnlLine(SalesLine,ItemJnlLine,QtyToBeShippedBase,CheckApplFromItemEntry,FALSE)
    ...
Codeunit<Sales-Post>.PROCEDURE<OnPostItemTrackingForReceiptOnAfterSetFilters>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemTrackingForReceipt>
    Code lines:
    ...
            ReturnRcptLine.SETRANGE("Document No.",SalesLine."Return Receipt No.");
            ReturnRcptLine.SETRANGE("Line No.",SalesLine."Return Receipt Line No.");
          END;
      END;
      ReturnRcptLine.SETFILTER("Return Qty. Rcd. Not Invd.",'<>0');
      OnPostItemTrackingForReceiptOnAfterSetFilters(ReturnRcptLine,SalesHeader,SalesLine); <=====================
      IF ReturnRcptLine.FIND('-') THEN BEGIN
        ItemJnlRollRndg := TRUE;
        REPEAT
          IF TrackingSpecificationExists THEN BEGIN  // Item Tracking
    ...
Codeunit<Sales-Post>.PROCEDURE<OnPostItemTrackingForReceiptOnBeforeReturnRcptLineModify>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostItemTrackingForReceipt>
    Code lines:
    ...
          ReturnRcptLine."Qty. Invoiced (Base)" :=
            ReturnRcptLine."Qty. Invoiced (Base)" + QtyToBeInvoicedBase;
          ReturnRcptLine."Return Qty. Rcd. Not Invd." :=
            ReturnRcptLine.Quantity - ReturnRcptLine."Quantity Invoiced";
    
          OnPostItemTrackingForReceiptOnBeforeReturnRcptLineModify(SalesHeader,ReturnRcptLine); <=====================
          ReturnRcptLine.MODIFY;
    
          OnBeforePostItemTrackingReturnRcpt(
            SalesInvHeader,SalesShptLine,TempTrackingSpecification,TrackingSpecificationExists,
    ...
Codeunit<Sales-Post>.PROCEDURE<OnPostSalesLineOnAfterPostItemTrackingLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostSalesLine>
    Code lines:
    ...
    
      OnPostSalesLineOnBeforePostItemTrackingLine(SalesHeader,SalesLine,WhseShip,WhseReceive,InvtPickPutaway);
    
      PostItemTrackingLine(SalesHeader,SalesLine,TempItemLedgEntryNotInvoiced,HasATOShippedNotInvoiced);
    
      OnPostSalesLineOnAfterPostItemTrackingLine(SalesHeader,SalesLine,WhseShip,WhseReceive,InvtPickPutaway); <=====================
    
      CASE Type OF
        Type::"G/L Account":
          PostGLAccICLine(SalesHeader,SalesLine,ICGenJnlLineNo);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnPostSalesLineOnAfterSetEverythingInvoiced>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostSalesLine>
    Code lines:
    ...
      OnPostSalesLineOnAfterTestUpdatedSalesLine(SalesLine,EverythingInvoiced);
    
      IF "Qty. to Invoice" + "Quantity Invoiced" <> Quantity THEN
        EverythingInvoiced := FALSE;
    
      OnPostSalesLineOnAfterSetEverythingInvoiced(SalesLine,EverythingInvoiced); <=====================
    
      IF Quantity <> 0 THEN
        DivideAmount(SalesHeader,SalesLine,1,"Qty. to Invoice",TempVATAmountLine,TempVATAmountLineRemainder);
    
    ...
Codeunit<Sales-Post>.PROCEDURE<OnPostSalesLineOnAfterTestUpdatedSalesLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostSalesLine>
    Code lines:
    ...
        PostATO(SalesHeader,SalesLine,TempPostedATOLink);
    
      UpdateSalesLineBeforePost(SalesHeader,SalesLine);
    
      TestUpdatedSalesLine(SalesLine);
      OnPostSalesLineOnAfterTestUpdatedSalesLine(SalesLine,EverythingInvoiced); <=====================
    
      IF "Qty. to Invoice" + "Quantity Invoiced" <> Quantity THEN
        EverythingInvoiced := FALSE;
    
    ...
Codeunit<Sales-Post>.PROCEDURE<OnPostSalesLineOnBeforeInsertCrMemoLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostSalesLine>
    Code lines:
    ...
              SalesInvLine,SalesInvHeader,xSalesLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit,SalesHeader);
            CreatePostedDeferralScheduleFromSalesDoc(xSalesLine,SalesInvLine.GetDocumentType,
              SalesInvHeader."No.",SalesInvLine."Line No.",SalesInvHeader."Posting Date");
          END;
        END ELSE BEGIN
          OnPostSalesLineOnBeforeInsertCrMemoLine(SalesHeader,SalesLine,IsHandled); <=====================
          IF NOT IsHandled THEN BEGIN
            SalesCrMemoLine.InitFromSalesLine(SalesCrMemoHeader,xSalesLine);
            ItemJnlPostLine.CollectValueEntryRelation(TempValueEntryRelation,SalesCrMemoLine.RowID1);
            IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnPostSalesLineOnBeforeInsertInvoiceLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostSalesLine>
    Code lines:
    ...
        InsertReturnReceiptLine(ReturnRcptHeader,SalesLine,CostBaseAmount);
    
      IsHandled := FALSE;
      IF SalesHeader.Invoice THEN
        IF SalesHeader."Document Type" IN [SalesHeader."Document Type"::Order,SalesHeader."Document Type"::Invoice] THEN BEGIN
          OnPostSalesLineOnBeforeInsertInvoiceLine(SalesHeader,SalesLine,IsHandled); <=====================
          IF NOT IsHandled THEN BEGIN
            SalesInvLine.InitFromSalesLine(SalesInvHeader,xSalesLine);
            ItemJnlPostLine.CollectValueEntryRelation(TempValueEntryRelation,SalesInvLine.RowID1);
            IF "Document Type" = "Document Type"::Order THEN BEGIN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnPostSalesLineOnBeforeInsertReturnReceiptLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostSalesLine>
    Code lines:
    ...
           NOT RoundingLineInserted AND NOT "Prepayment Line"
        THEN
          InsertShipmentLine(SalesHeader,SalesShptHeader,SalesLine,CostBaseAmount,TempServiceItem2,TempServiceItemComp2);
    
      IsHandled := FALSE;
      OnPostSalesLineOnBeforeInsertReturnReceiptLine(SalesHeader,SalesLine,IsHandled); <=====================
      IF (ReturnRcptHeader."No." <> '') AND ("Return Receipt No." = '') AND
         NOT RoundingLineInserted
      THEN
        InsertReturnReceiptLine(ReturnRcptHeader,SalesLine,CostBaseAmount);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnPostSalesLineOnBeforeInsertShipmentLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostSalesLine>
    Code lines:
    ...
      IF NOT IsHandled THEN
        IF NOT ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) THEN
          TESTFIELD("Job No.",'');
    
      IsHandled := FALSE;
      OnPostSalesLineOnBeforeInsertShipmentLine( <=====================
        SalesHeader,SalesLine,IsHandled,SalesLineACY,GenJnlLineDocType,GenJnlLineDocNo,GenJnlLineExtDocNo);
      IF NOT IsHandled THEN
        IF (SalesShptHeader."No." <> '') AND ("Shipment No." = '') AND
           NOT RoundingLineInserted AND NOT "Prepayment Line"
    ...
Codeunit<Sales-Post>.PROCEDURE<OnPostSalesLineOnBeforePostItemTrackingLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostSalesLine>
    Code lines:
    ...
      END;
    
      RemQtyToBeInvoiced := "Qty. to Invoice";
      RemQtyToBeInvoicedBase := "Qty. to Invoice (Base)";
    
      OnPostSalesLineOnBeforePostItemTrackingLine(SalesHeader,SalesLine,WhseShip,WhseReceive,InvtPickPutaway); <=====================
    
      PostItemTrackingLine(SalesHeader,SalesLine,TempItemLedgEntryNotInvoiced,HasATOShippedNotInvoiced);
    
      OnPostSalesLineOnAfterPostItemTrackingLine(SalesHeader,SalesLine,WhseShip,WhseReceive,InvtPickPutaway);
    ...
Codeunit<Sales-Post>.PROCEDURE<OnPostSalesLineOnBeforeTestJobNo>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostSalesLine>
    Code lines:
    ...
        FillInvoicePostingBuffer(SalesHeader,SalesLine,SalesLineACY,TempInvoicePostBuffer,InvoicePostBuffer);
        InsertPrepmtAdjInvPostingBuf(SalesHeader,SalesLine,TempInvoicePostBuffer,InvoicePostBuffer);
      END;
    
      IsHandled := FALSE;
      OnPostSalesLineOnBeforeTestJobNo(SalesLine,IsHandled); <=====================
      IF NOT IsHandled THEN
        IF NOT ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) THEN
          TESTFIELD("Job No.",'');
    
    ...
Codeunit<Sales-Post>.PROCEDURE<OnPostUpdateOrderLineOnBeforeInitOutstanding>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostUpdateOrderLine>
    Code lines:
    ...
            END;
          END;
    
          UpdateBlanketOrderLine(TempSalesLine,SalesHeader.Ship,SalesHeader.Receive,SalesHeader.Invoice);
    
          OnPostUpdateOrderLineOnBeforeInitOutstanding(SalesHeader,TempSalesLine); <=====================
    
          InitOutstanding;
          CheckATOLink(TempSalesLine);
          IF WhseHandlingRequired(TempSalesLine) OR
    ...
Codeunit<Sales-Post>.PROCEDURE<OnPostUpdateOrderLineOnBeforeInitTempSalesLineQuantities>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<PostUpdateOrderLine>
    Code lines:
    ...
    WITH TempSalesLine DO BEGIN
      SETRANGE("Prepayment Line",FALSE);
      SETFILTER(Quantity,'<>0');
      IF FINDSET THEN
        REPEAT
          OnPostUpdateOrderLineOnBeforeInitTempSalesLineQuantities(SalesHeader,TempSalesLine); <=====================
          IF SalesHeader.Ship THEN BEGIN
            "Quantity Shipped" += "Qty. to Ship";
            "Qty. Shipped (Base)" += "Qty. to Ship (Base)";
          END;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnRoundAmountOnBeforeIncrAmount>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<RoundAmount>
    Code lines:
    ...
              UseDate,SalesHeader."Currency Code",
              TotalSalesLine."VAT Base Amount",SalesHeader."Currency Factor")) -
          TotalSalesLineLCY."VAT Base Amount";
      END;
    
      OnRoundAmountOnBeforeIncrAmount(SalesHeader,SalesLine,SalesLineQty,TotalSalesLine,TotalSalesLineLCY); <=====================
    
      IncrAmount(SalesHeader,SalesLine,TotalSalesLineLCY);
      Increment(TotalSalesLineLCY."Unit Cost (LCY)",ROUND(SalesLineQty * "Unit Cost (LCY)"));
    END;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnRunOnBeforeFinalizePosting>
  Raised in: Codeunit<Sales-Post>.<OnRun>
    Code lines:
    ...
      PostICGenJnl;
    
    MakeInventoryAdjustment;
    UpdateLastPostingNos(SalesHeader);
    
    OnRunOnBeforeFinalizePosting( <=====================
      SalesHeader,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,GenJnlPostLine,SuppressCommit);
    
    FinalizePosting(SalesHeader,EverythingInvoiced,TempDropShptPostBuffer);
    
    ...
Codeunit<Sales-Post>.PROCEDURE<OnSendPostedDocumentRecordElseCase>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<SendPostedDocumentRecord>
    Code lines:
    ...
            SalesCrMemoHeader.SETRECFILTER;
            SalesCrMemoHeader.SendProfile(DocumentSendingProfile);
          END;
        ELSE BEGIN
          IsHandled := FALSE;
          OnSendPostedDocumentRecordElseCase(SalesHeader,DocumentSendingProfile,IsHandled); <=====================
          IF NOT IsHandled THEN
            ERROR(NotSupportedDocumentTypeErr,"Document Type");
        END;
      END;
Codeunit<Sales-Post>.PROCEDURE<OnSendSalesDocument>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<SendPostedDocumentRecord>
    Code lines:
    WITH SalesHeader DO
      CASE "Document Type" OF
        "Document Type"::Order:
          BEGIN
            OnSendSalesDocument(Invoice AND Ship,SuppressCommit); <=====================
            IF Invoice THEN BEGIN
              SalesInvHeader.GET("Last Posting No.");
              SalesInvHeader.SETRECFILTER;
              SalesInvHeader.SendProfile(DocumentSendingProfile);
            END;
    ...
Codeunit<Sales-Post>.PROCEDURE<OnSumSalesLines2OnBeforeDivideAmount>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<SumSalesLines2>
    Code lines:
    ...
                ELSE
                  SalesLineQty := SalesLine."Qty. to Ship";
              END;
          END;
          IsHandled := FALSE;
          OnSumSalesLines2OnBeforeDivideAmount(OldSalesLine,IsHandled); <=====================
          IF NOT IsHandled THEN
            DivideAmount(SalesHeader,SalesLine,QtyType,SalesLineQty,TempVATAmountLine,TempVATAmountLineRemainder);
          SalesLine.Quantity := SalesLineQty;
          IF SalesLineQty <> 0 THEN BEGIN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnSumSalesLines2SetFilter>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<SumSalesLines2>
    Code lines:
    ...
      GetGLSetup;
      SalesSetup.GET;
      GetCurrency("Currency Code");
      OldSalesLine.SETRANGE("Document Type","Document Type");
      OldSalesLine.SETRANGE("Document No.","No.");
      OnSumSalesLines2SetFilter(OldSalesLine,SalesHeader,InsertSalesLine); <=====================
      RoundingLineInserted := FALSE;
      IF OldSalesLine.FINDSET THEN
        REPEAT
          IF NOT RoundingLineInserted THEN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnUpdateAssocOrderOnAfterModifyPurchLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<UpdateAssocOrder>
    Code lines:
    ...
      PurchOrderLine.InitOutstanding;
      PurchOrderLine.ClearQtyIfBlank;
      PurchOrderLine.InitQtyToReceive;
      OnUpdateAssocOrderOnBeforeModifyPurchLine(PurchOrderLine,TempDropShptPostBuffer);
      PurchOrderLine.MODIFY;
      OnUpdateAssocOrderOnAfterModifyPurchLine(PurchOrderLine,TempDropShptPostBuffer); <=====================
    UNTIL TempDropShptPostBuffer.NEXT = 0;
    TempDropShptPostBuffer.DELETEALL;
Codeunit<Sales-Post>.PROCEDURE<OnUpdateAssocOrderOnBeforeModifyPurchLine>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<UpdateAssocOrder>
    Code lines:
    ...
      PurchOrderLine."Quantity Received" := PurchOrderLine."Quantity Received" + TempDropShptPostBuffer.Quantity;
      PurchOrderLine."Qty. Received (Base)" := PurchOrderLine."Qty. Received (Base)" + TempDropShptPostBuffer."Quantity (Base)";
      PurchOrderLine.InitOutstanding;
      PurchOrderLine.ClearQtyIfBlank;
      PurchOrderLine.InitQtyToReceive;
      OnUpdateAssocOrderOnBeforeModifyPurchLine(PurchOrderLine,TempDropShptPostBuffer); <=====================
      PurchOrderLine.MODIFY;
      OnUpdateAssocOrderOnAfterModifyPurchLine(PurchOrderLine,TempDropShptPostBuffer);
    UNTIL TempDropShptPostBuffer.NEXT = 0;
    TempDropShptPostBuffer.DELETEALL;
Codeunit<Sales-Post>.PROCEDURE<OnUpdateBlanketOrderLineOnBeforeCheck>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<UpdateBlanketOrderLine>
    Code lines:
    ...
        IF ModifyLine THEN BEGIN
          OnUpdateBlanketOrderLineOnBeforeInitOutstanding(BlanketOrderSalesLine,SalesLine);
          BlanketOrderSalesLine.InitOutstanding;
    
          IsHandled := FALSE;
          OnUpdateBlanketOrderLineOnBeforeCheck(BlanketOrderSalesLine,SalesLine,IsHandled); <=====================
          IF NOT IsHandled THEN BEGIN
            IF (BlanketOrderSalesLine.Quantity * BlanketOrderSalesLine."Quantity Shipped" < 0) OR
               (ABS(BlanketOrderSalesLine.Quantity) < ABS(BlanketOrderSalesLine."Quantity Shipped"))
            THEN
    ...
Codeunit<Sales-Post>.PROCEDURE<OnUpdateBlanketOrderLineOnBeforeInitOutstanding>
  Raised in: Codeunit<Sales-Post>.PROCEDURE<UpdateBlanketOrderLine>
    Code lines:
    ...
          BlanketOrderSalesLine."Qty. Invoiced (Base)" += Sign * SalesLine."Qty. to Invoice (Base)";
          ModifyLine := TRUE;
        END;
    
        IF ModifyLine THEN BEGIN
          OnUpdateBlanketOrderLineOnBeforeInitOutstanding(BlanketOrderSalesLine,SalesLine); <=====================
          BlanketOrderSalesLine.InitOutstanding;
    
          IsHandled := FALSE;
          OnUpdateBlanketOrderLineOnBeforeCheck(BlanketOrderSalesLine,SalesLine,IsHandled);
    ...
Codeunit<Online Map Management>.PROCEDURE<OnAfterGetAddress>
  Raised in: Codeunit<Online Map Management>.PROCEDURE<GetAddress>
    Code lines:
    ...
          Parameters[10] := FORMAT(Geolocation.Latitude,0,2);
          Parameters[11] := FORMAT(Geolocation.Longitude,0,2);
        END;
    END;
    
    OnAfterGetAddress(TableID,RecPosition,Parameters,RecordRef); <=====================
Codeunit<Online Map Management>.PROCEDURE<OnAfterProcessWebDirections>
  Raised in: Codeunit<Online Map Management>.PROCEDURE<ProcessWebDirections>
    Code lines:
    ...
      SubstituteParameters(url,Parameters[1]);
      SubstituteParameters(url,Parameters[2]);
    END;
    
    IsHandled := FALSE;
    OnAfterProcessWebDirections(url,IsHandled); <=====================
    IF NOT IsHandled THEN
      HYPERLINK(url);
Codeunit<Online Map Management>.PROCEDURE<OnAfterProcessWebMap>
  Raised in: Codeunit<Online Map Management>.PROCEDURE<ProcessWebMap>
    Code lines:
    ...
    
    url := OnlineMapParameterSetup."Map Service";
    SubstituteParameters(url,Parameters);
    
    IsHandled := FALSE;
    OnAfterProcessWebMap(url,IsHandled); <=====================
    IF NOT IsHandled THEN
      HYPERLINK(url);
Codeunit<Online Map Management>.PROCEDURE<OnAfterValidAddress>
  Raised in: Codeunit<Online Map Management>.PROCEDURE<ValidAddresses>
    Code lines:
    ...
                  DATABASE::"Ship-to Address",
                  DATABASE::"Order Address",
                  DATABASE::Vendor,
                  DATABASE::Geolocation];
    
    OnAfterValidAddress(TableID,IsValid); <=====================
    EXIT(IsValid);
Codeunit<Online Map Management>.PROCEDURE<OnBeforeGetAddress>
  Raised in: Codeunit<Online Map Management>.PROCEDURE<GetAddress>
    Code lines:
    OnBeforeGetAddress(TableID,RecPosition,Parameters,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    RecordRef.OPEN(TableID);
    RecordRef.SETPOSITION(RecPosition);
    IF NOT RecordRef.FIND('=') THEN
      ERROR(Text008);
    
    CASE TableID OF
    ...
Codeunit<Online Map Management>.PROCEDURE<OnBeforeValidAddress>
  Raised in: Codeunit<Online Map Management>.PROCEDURE<ValidAddresses>
    Code lines:
    OnBeforeValidAddress(TableID,IsValid); <=====================
    IF IsValid THEN
      EXIT(TRUE);
    
    IsValid :=
      TableID IN [DATABASE::"Bank Account",
                  DATABASE::"Company Information",
                  DATABASE::Contact,
                  DATABASE::Customer,
                  DATABASE::Employee,
    ...
Codeunit<Sales-Post (Yes/No)>.PROCEDURE<OnAfterConfirmPost>
  Raised in: Codeunit<Sales-Post (Yes/No)>.PROCEDURE<Code>
    Code lines:
    ...
    
    IF NOT HideDialog THEN
      IF NOT ConfirmPost(SalesHeader,DefaultOption) THEN
        EXIT;
    
    OnAfterConfirmPost(SalesHeader); <=====================
    
    SalesSetup.GET;
    IF SalesSetup."Post with Job Queue" AND NOT PostAndSend THEN
      SalesPostViaJobQueue.EnqueueSalesDoc(SalesHeader)
    ...
Codeunit<Sales-Post (Yes/No)>.PROCEDURE<OnAfterPost>
  Raised in: Codeunit<Sales-Post (Yes/No)>.PROCEDURE<Code>
    Code lines:
    ...
    IF SalesSetup."Post with Job Queue" AND NOT PostAndSend THEN
      SalesPostViaJobQueue.EnqueueSalesDoc(SalesHeader)
    ELSE
      CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);
    
    OnAfterPost(SalesHeader); <=====================
Codeunit<Sales-Post (Yes/No)>.PROCEDURE<OnBeforeConfirmSalesPost>
  Raised in: Codeunit<Sales-Post (Yes/No)>.PROCEDURE<Code>
    Code lines:
    HideDialog := FALSE;
    IsHandled := FALSE;
    DefaultOption := 3;
    OnBeforeConfirmSalesPost(SalesHeader,HideDialog,IsHandled,DefaultOption,PostAndSend); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT HideDialog THEN
      IF NOT ConfirmPost(SalesHeader,DefaultOption) THEN
        EXIT;
    ...
Codeunit<Sales-Post (Yes/No)>.PROCEDURE<OnRunPreviewOnAfterSetPostingFlags>
  Raised in: Codeunit<Sales-Post (Yes/No)>.PROCEDURE<OnRunPreview>
    Code lines:
    ...
      Receive := "Document Type" = "Document Type"::"Return Order";
      Ship := "Document Type" = "Document Type"::Order;
      Invoice := TRUE;
    END;
    
    OnRunPreviewOnAfterSetPostingFlags(SalesHeader); <=====================
    
    SalesPost.SetPreviewMode(TRUE);
    Result := SalesPost.RUN(SalesHeader);
Codeunit<Sales-Post + Print>.PROCEDURE<OnAfterConfirmPost>
  Raised in: Codeunit<Sales-Post + Print>.PROCEDURE<Code>
    Code lines:
    ...
    
    IF NOT HideDialog THEN
      IF NOT ConfirmPost(SalesHeader,DefaultOption) THEN
        EXIT;
    
    OnAfterConfirmPost(SalesHeader); <=====================
    
    SalesSetup.GET;
    IF SalesSetup."Post & Print with Job Queue" AND NOT SendReportAsEmail THEN
      SalesPostViaJobQueue.EnqueueSalesDoc(SalesHeader)
    ...
Codeunit<Sales-Post + Print>.PROCEDURE<OnAfterPost>
  Raised in: Codeunit<Sales-Post + Print>.PROCEDURE<Code>
    Code lines:
    ...
    ELSE BEGIN
      CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);
      GetReport(SalesHeader);
    END;
    
    OnAfterPost(SalesHeader); <=====================
    COMMIT;
Codeunit<Sales-Post + Print>.PROCEDURE<OnBeforeConfirmPost>
  Raised in: Codeunit<Sales-Post + Print>.PROCEDURE<Code>
    Code lines:
    HideDialog := FALSE;
    IsHandled := FALSE;
    DefaultOption := 3;
    OnBeforeConfirmPost(SalesHeader,HideDialog,IsHandled,SendReportAsEmail,DefaultOption); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT HideDialog THEN
      IF NOT ConfirmPost(SalesHeader,DefaultOption) THEN
        EXIT;
    ...
Codeunit<Sales-Post + Print>.PROCEDURE<OnBeforeGetReport>
  Raised in: Codeunit<Sales-Post + Print>.PROCEDURE<GetReport>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetReport(SalesHeader,IsHandled,SendReportAsEmail); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH SalesHeader DO
      CASE "Document Type" OF
        "Document Type"::Order:
          BEGIN
            IF Ship THEN
    ...
Codeunit<Sales-Post + Print>.PROCEDURE<OnBeforePrintCrMemo>
  Raised in: Codeunit<Sales-Post + Print>.PROCEDURE<PrintCrMemo>
    Code lines:
    IsHandled := FALSE;
    OnBeforePrintCrMemo(SalesHeader,SendReportAsEmail,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF SalesHeader."Last Posting No." = '' THEN
      SalesCrMemoHeader."No." := SalesHeader."No."
    ELSE
      SalesCrMemoHeader."No." := SalesHeader."Last Posting No.";
    SalesCrMemoHeader.FIND;
    ...
Codeunit<Sales-Post + Print>.PROCEDURE<OnBeforePrintInvoice>
  Raised in: Codeunit<Sales-Post + Print>.PROCEDURE<PrintInvoice>
    Code lines:
    IsHandled := FALSE;
    OnBeforePrintInvoice(SalesHeader,SendReportAsEmail,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF SalesHeader."Last Posting No." = '' THEN
      SalesInvHeader."No." := SalesHeader."No."
    ELSE
      SalesInvHeader."No." := SalesHeader."Last Posting No.";
    SalesInvHeader.FIND;
    ...
Codeunit<Sales-Post + Print>.PROCEDURE<OnBeforePrintReceive>
  Raised in: Codeunit<Sales-Post + Print>.PROCEDURE<PrintReceive>
    Code lines:
    IsHandled := FALSE;
    OnBeforePrintReceive(SalesHeader,SendReportAsEmail,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    ReturnRcptHeader."No." := SalesHeader."Last Return Receipt No.";
    IF ReturnRcptHeader.FIND THEN;
    ReturnRcptHeader.SETRECFILTER;
    
    IF SendReportAsEmail THEN
    ...
Codeunit<Sales-Post + Print>.PROCEDURE<OnBeforePrintShip>
  Raised in: Codeunit<Sales-Post + Print>.PROCEDURE<PrintShip>
    Code lines:
    IsHandled := FALSE;
    OnBeforePrintShip(SalesHeader,SendReportAsEmail,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SalesShptHeader."No." := SalesHeader."Last Shipping No.";
    IF SalesShptHeader.FIND THEN;
    SalesShptHeader.SETRECFILTER;
    
    IF SendReportAsEmail THEN
    ...
Codeunit<Sales-Quote to Order (Yes/No)>.PROCEDURE<OnAfterSalesQuoteToOrderRun>
  Raised in: Codeunit<Sales-Quote to Order (Yes/No)>.<OnRun>
    Code lines:
    ...
    
    SalesQuoteToOrder.RUN(Rec);
    SalesQuoteToOrder.GetSalesOrderHeader(SalesHeader2);
    COMMIT;
    
    OnAfterSalesQuoteToOrderRun(SalesHeader2); <=====================
    
    IF GUIALLOWED THEN
      IF OfficeMgt.AttachAvailable THEN
        OpenPage := TRUE
    ...
Codeunit<Sales-Quote to Order (Yes/No)>.PROCEDURE<OnBeforeRun>
  Raised in: Codeunit<Sales-Quote to Order (Yes/No)>.PROCEDURE<IsOnRunHandled>
    Code lines:
    IsHandled := FALSE;
    OnBeforeRun(SalesHeader,IsHandled); <=====================
    EXIT(IsHandled);
Codeunit<Blnkt Sales Ord. to Ord. (Y/N)>.PROCEDURE<OnBeforeRun>
  Raised in: Codeunit<Blnkt Sales Ord. to Ord. (Y/N)>.PROCEDURE<IsOnRunHandled>
    Code lines:
    IsHandled := FALSE;
    OnBeforeRun(SalesHeader,IsHandled); <=====================
    EXIT(IsHandled);
Codeunit<Cash Flow Management>.PROCEDURE<OnBeforeGetTaxAmountFromPurchaseOrder>
  Raised in: Codeunit<Cash Flow Management>.PROCEDURE<GetTaxAmountFromPurchaseOrder>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetTaxAmountFromPurchaseOrder(PurchaseHeader,VATAmount,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(VATAmount);
    
    PurchPost.SumPurchLines(
      PurchaseHeader,QtyType::Invoicing,NewPurchLine,NewPurchLineLCY,VATAmount,VATAmountText);
    EXIT(VATAmount);
Codeunit<Cash Flow Management>.PROCEDURE<OnBeforeGetTaxAmountFromSalesOrder>
  Raised in: Codeunit<Cash Flow Management>.PROCEDURE<GetTaxAmountFromSalesOrder>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetTaxAmountFromSalesOrder(SalesHeader,VATAmount,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(VATAmount);
    
    SalesPost.SumSalesLines(
      SalesHeader,QtyType::Invoicing,NewSalesLine,NewSalesLineLCY,
      VATAmount,VATAmountText,ProfitLCY,ProfitPct,TotalAdjCostLCY);
    EXIT(-1 * VATAmount);
Codeunit<Cash Flow Management>.PROCEDURE<OnBeforeShowSource>
  Raised in: Codeunit<Cash Flow Management>.PROCEDURE<ShowSource>
    Code lines:
    OnBeforeShowSource(CFVariant,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    CFRecordRef.GETTABLE(CFVariant);
    CASE CFRecordRef.NUMBER OF
      DATABASE::"Cash Flow Worksheet Line":
        ShowSourceLocalCFWorkSheetLine(FALSE,CFVariant);
      DATABASE::"Cash Flow Forecast Entry":
        ShowSourceLocalCFEntry(FALSE,CFVariant);
Codeunit<Cash Flow Management>.PROCEDURE<OnBeforeShowSourceDocument>
  Raised in: Codeunit<Cash Flow Management>.PROCEDURE<ShowSourceDocument>
    Code lines:
    OnBeforeShowSourceDocument(CFVariant,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    CFRecordRef.GETTABLE(CFVariant);
    CASE CFRecordRef.NUMBER OF
      DATABASE::"Cash Flow Worksheet Line":
        ShowSourceLocalCFWorkSheetLine(TRUE,CFVariant);
      DATABASE::"Cash Flow Forecast Entry":
        ShowSourceLocalCFEntry(TRUE,CFVariant);
Codeunit<Cash Flow Management>.PROCEDURE<OnBeforeUpdateCashFlowForecast>
  Raised in: Codeunit<Cash Flow Management>.PROCEDURE<UpdateCashFlowForecast>
    Code lines:
    OnBeforeUpdateCashFlowForecast(CortanaIntelligenceEnabled,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    Window.OPEN(UpdatingMsg);
    
    IF NOT CashFlowSetup.GET THEN
      EXIT;
    
    IF NOT CashFlowForecast.GET(CashFlowSetup."CF No. on Chart in Role Center") THEN
    ...
Codeunit<Cash Flow Wksh. -Register Line>.PROCEDURE<OnAfterCreateForecastEntry>
  Raised in: Codeunit<Cash Flow Wksh. -Register Line>.PROCEDURE<Code>
    Code lines:
    ...
      IF CFForecastEntry.Description = CashFlowForecast.Description THEN
        CFForecastEntry.Description := '';
      CFForecastEntry."User ID" := USERID;
      CFForecastEntry."Entry No." := NextEntryNo;
    
      OnAfterCreateForecastEntry(CFForecastEntry,CFWkshLine); <=====================
      CFForecastEntry.INSERT;
    
      NextEntryNo := NextEntryNo + 1;
    END;
Codeunit<Cash Flow Forecast Handler>.PROCEDURE<OnAfterHasMinimumHistoricalData>
  Raised in: Codeunit<Cash Flow Forecast Handler>.PROCEDURE<PrepareForecast>
    Code lines:
    ...
        CustLedgerEntry,
        CustLedgerEntry.FIELDNO("Due Date"),
        CashFlowSetup."Period Type",
        ForecastStartDate);
    
    OnAfterHasMinimumHistoricalData( <=====================
      HasMinimumHistoryLoc,
      NumberOfPeriodsWithHistoryLoc,
      CashFlowSetup."Period Type",
      ForecastStartDate);
    ...
Codeunit<Cash Flow Forecast Handler>.PROCEDURE<OnAfterPreparePurchHistoryData>
  Raised in: Codeunit<Cash Flow Forecast Handler>.PROCEDURE<PrepareForecast>
    Code lines:
    ...
      VendorLedgerEntry.FIELDNO("Due Date"),
      VendorLedgerEntry.FIELDNO("Amount (LCY)"),
      FORMAT(VendorLedgerEntry."Document Type"::Invoice),
      FORMAT(VendorLedgerEntry."Document Type"::"Credit Memo")
      );
    OnAfterPreparePurchHistoryData(TempVendTimeSeriesBuffer,PeriodType,ForecastStartDate,NumberOfPeriodsWithHistory); <=====================
    AppendRecords(TimeSeriesBuffer,TempVendTimeSeriesBuffer,XPAYABLESTxt);
    
    VATEntry.SETCURRENTKEY("Document Date");
    VATEntry.SETRANGE(Type,VATEntry.Type::Sale);
    ...
Codeunit<Cash Flow Forecast Handler>.PROCEDURE<OnAfterPrepareSalesHistoryData>
  Raised in: Codeunit<Cash Flow Forecast Handler>.PROCEDURE<PrepareForecast>
    Code lines:
    ...
      CustLedgerEntry.FIELDNO("Due Date"),
      CustLedgerEntry.FIELDNO("Amount (LCY)"),
      FORMAT(CustLedgerEntry."Document Type"::Invoice),
      FORMAT(CustLedgerEntry."Document Type"::"Credit Memo")
      );
    OnAfterPrepareSalesHistoryData(TempCustTimeSeriesBuffer,PeriodType,ForecastStartDate,NumberOfPeriodsWithHistory); <=====================
    AppendRecords(TimeSeriesBuffer,TempCustTimeSeriesBuffer,XRECEIVABLESTxt);
    
    // Prepare Purchase History
    PrepareData(
    ...
Codeunit<Sales-Quote to Order>.PROCEDURE<OnAfterInsertAllSalesOrderLines>
  Raised in: Codeunit<Sales-Quote to Order>.<OnRun>
    Code lines:
    ...
    CheckInProgressOpportunities(Rec);
    
    CreateSalesHeader(Rec,Cust."Prepayment %");
    
    TransferQuoteToOrderLines(SalesQuoteLine,Rec,SalesOrderLine,SalesOrderHeader,Cust);
    OnAfterInsertAllSalesOrderLines(SalesOrderLine,Rec); <=====================
    
    SalesSetup.GET;
    CASE SalesSetup."Archive Quotes" OF
      SalesSetup."Archive Quotes"::Always:
    ...
Codeunit<Sales-Quote to Order>.PROCEDURE<OnAfterInsertSalesOrderLine>
  Raised in: Codeunit<Sales-Quote to Order>.PROCEDURE<TransferQuoteToOrderLines>
    Code lines:
    ...
          SalesOrderLine.VALIDATE("Prepayment %");
          IF SalesOrderLine."No." <> '' THEN
            SalesOrderLine.DefaultDeferralCode;
          OnBeforeInsertSalesOrderLine(SalesOrderLine,SalesOrderHeader,SalesQuoteLine,SalesQuoteHeader);
          SalesOrderLine.INSERT;
          OnAfterInsertSalesOrderLine(SalesOrderLine,SalesOrderHeader,SalesQuoteLine,SalesQuoteHeader); <=====================
          ATOLink.MakeAsmOrderLinkedToSalesOrderLine(SalesQuoteLine,SalesOrderLine);
          SalesLineReserve.TransferSaleLineToSalesLine(
            SalesQuoteLine,SalesOrderLine,SalesQuoteLine."Outstanding Qty. (Base)");
          SalesLineReserve.VerifyQuantity(SalesOrderLine,SalesQuoteLine);
    ...
Codeunit<Sales-Quote to Order>.PROCEDURE<OnAfterOnRun>
  Raised in: Codeunit<Sales-Quote to Order>.<OnRun>
    Code lines:
    ...
    END;
    
    IF NOT ShouldRedistributeInvoiceAmount THEN
      SalesCalcDiscountByType.ResetRecalculateInvoiceDisc(SalesOrderHeader);
    
    OnAfterOnRun(Rec,SalesOrderHeader); <=====================
Codeunit<Sales-Quote to Order>.PROCEDURE<OnBeforeCreateSalesHeader>
  Raised in: Codeunit<Sales-Quote to Order>.PROCEDURE<CreateSalesHeader>
    Code lines:
    OnBeforeCreateSalesHeader(SalesHeader); <=====================
    
    WITH SalesHeader DO BEGIN
      SalesOrderHeader := SalesHeader;
      SalesOrderHeader."Document Type" := SalesOrderHeader."Document Type"::Order;
    
      SalesOrderHeader."No. Printed" := 0;
      SalesOrderHeader.Status := SalesOrderHeader.Status::Open;
      SalesOrderHeader."No." := '';
      SalesOrderHeader."Quote No." := "No.";
    ...
Codeunit<Sales-Quote to Order>.PROCEDURE<OnBeforeDeleteSalesQuote>
  Raised in: Codeunit<Sales-Quote to Order>.<OnRun>
    Code lines:
    ...
    MoveWonLostOpportunites(Rec,SalesOrderHeader);
    
    ApprovalsMgmt.CopyApprovalEntryQuoteToOrder(RECORDID,SalesOrderHeader."No.",SalesOrderHeader.RECORDID);
    
    IsHandled := FALSE;
    OnBeforeDeleteSalesQuote(Rec,SalesOrderHeader,IsHandled); <=====================
    IF NOT IsHandled THEN BEGIN
      ApprovalsMgmt.DeleteApprovalEntries(RECORDID);
      DELETELINKS;
      DELETE;
    ...
Codeunit<Sales-Quote to Order>.PROCEDURE<OnBeforeInsertSalesOrderHeader>
  Raised in: Codeunit<Sales-Quote to Order>.PROCEDURE<CreateSalesHeader>
    Code lines:
    ...
      SalesOrderHeader."No. Printed" := 0;
      SalesOrderHeader.Status := SalesOrderHeader.Status::Open;
      SalesOrderHeader."No." := '';
      SalesOrderHeader."Quote No." := "No.";
      SalesOrderLine.LOCKTABLE;
      OnBeforeInsertSalesOrderHeader(SalesOrderHeader,SalesHeader); <=====================
      SalesOrderHeader.INSERT(TRUE);
    
      SalesOrderHeader."Order Date" := "Order Date";
      IF "Posting Date" <> 0D THEN
    ...
Codeunit<Sales-Quote to Order>.PROCEDURE<OnBeforeInsertSalesOrderLine>
  Raised in: Codeunit<Sales-Quote to Order>.PROCEDURE<TransferQuoteToOrderLines>
    Code lines:
    ...
            SalesOrderLine."Prepayment %" := Customer."Prepayment %";
          PrepmtMgt.SetSalesPrepaymentPct(SalesOrderLine,SalesOrderHeader."Posting Date");
          SalesOrderLine.VALIDATE("Prepayment %");
          IF SalesOrderLine."No." <> '' THEN
            SalesOrderLine.DefaultDeferralCode;
          OnBeforeInsertSalesOrderLine(SalesOrderLine,SalesOrderHeader,SalesQuoteLine,SalesQuoteHeader); <=====================
          SalesOrderLine.INSERT;
          OnAfterInsertSalesOrderLine(SalesOrderLine,SalesOrderHeader,SalesQuoteLine,SalesQuoteHeader);
          ATOLink.MakeAsmOrderLinkedToSalesOrderLine(SalesQuoteLine,SalesOrderLine);
          SalesLineReserve.TransferSaleLineToSalesLine(
    ...
Codeunit<Sales-Quote to Order>.PROCEDURE<OnBeforeModifySalesOrderHeader>
  Raised in: Codeunit<Sales-Quote to Order>.PROCEDURE<CreateSalesHeader>
    Code lines:
    ...
      SalesOrderHeader.Reserve := Reserve;
    
      SalesOrderHeader."Prepayment %" := PrepmtPercent;
      IF SalesOrderHeader."Posting Date" = 0D THEN
        SalesOrderHeader."Posting Date" := WORKDATE;
      OnBeforeModifySalesOrderHeader(SalesOrderHeader,SalesHeader); <=====================
      SalesOrderHeader.MODIFY;
    END;
Codeunit<Sales-Quote to Order>.PROCEDURE<OnBeforeOnRun>
  Raised in: Codeunit<Sales-Quote to Order>.<OnRun>
    Code lines:
    OnBeforeOnRun(Rec); <=====================
    
    TESTFIELD("Document Type","Document Type"::Quote);
    ShouldRedistributeInvoiceAmount := SalesCalcDiscountByType.ShouldRedistributeInvoiceDiscountAmount(Rec);
    
    OnCheckSalesPostRestrictions;
    
    Cust.GET("Sell-to Customer No.");
    Cust.CheckBlockedCustOnDocs(Cust,"Document Type"::Order,TRUE,FALSE);
    IF "Sell-to Customer No." <> "Bill-to Customer No." THEN BEGIN
    ...
Codeunit<Sales-Quote to Order>.PROCEDURE<OnBeforeTransferQuoteLineToOrderLineLoop>
  Raised in: Codeunit<Sales-Quote to Order>.PROCEDURE<TransferQuoteToOrderLines>
    Code lines:
    ...
    SalesQuoteLine.SETRANGE("Document No.",SalesQuoteHeader."No.");
    OnTransferQuoteToOrderLinesOnAfterSetFilters(SalesQuoteLine,SalesQuoteHeader);
    IF SalesQuoteLine.FINDSET THEN
      REPEAT
        IsHandled := FALSE;
        OnBeforeTransferQuoteLineToOrderLineLoop(SalesQuoteLine,SalesQuoteHeader,SalesOrderHeader,IsHandled); <=====================
        IF NOT IsHandled THEN BEGIN
          SalesOrderLine := SalesQuoteLine;
          SalesOrderLine."Document Type" := SalesOrderHeader."Document Type";
          SalesOrderLine."Document No." := SalesOrderHeader."No.";
    ...
Codeunit<Sales-Quote to Order>.PROCEDURE<OnTransferQuoteToOrderLinesOnAfterSetFilters>
  Raised in: Codeunit<Sales-Quote to Order>.PROCEDURE<TransferQuoteToOrderLines>
    Code lines:
    SalesQuoteLine.RESET;
    SalesQuoteLine.SETRANGE("Document Type",SalesQuoteHeader."Document Type");
    SalesQuoteLine.SETRANGE("Document No.",SalesQuoteHeader."No.");
    OnTransferQuoteToOrderLinesOnAfterSetFilters(SalesQuoteLine,SalesQuoteHeader); <=====================
    IF SalesQuoteLine.FINDSET THEN
      REPEAT
        IsHandled := FALSE;
        OnBeforeTransferQuoteLineToOrderLineLoop(SalesQuoteLine,SalesQuoteHeader,SalesOrderHeader,IsHandled);
        IF NOT IsHandled THEN BEGIN
          SalesOrderLine := SalesQuoteLine;
    ...
Codeunit<Config. Package Management>.PROCEDURE<OnAfterValidatePackageDataRelation>
  Raised in: Codeunit<Config. Package Management>.PROCEDURE<ValidatePackageDataRelation>
    Code lines:
    ...
      IF GetRelationInfo(ConfigPackageField,RelationTableNo,RelationFieldNo) THEN
        DataInPackageData :=
          ValidateFieldRelationAgainstPackageData(
            ConfigPackageData,ValidatedConfigPackageTable,RelationTableNo,RelationFieldNo);
    
      OnAfterValidatePackageDataRelation( <=====================
        ConfigPackageData,ConfigPackageField,ValidatedConfigPackageTable,RelationTableNo,RelationFieldNo,DataInPackageData);
    
      IF NOT DataInPackageData THEN BEGIN
        ErrorText := ValidateFieldRelationAgainstCompanyData(ConfigPackageData);
    ...
Codeunit<Config. Package Management>.PROCEDURE<OnBeforeGetFieldRelationTableNo>
  Raised in: Codeunit<Config. Package Management>.PROCEDURE<GetRelatedTables>
    Code lines:
    ...
    IF ConfigPackageTable.FINDSET THEN
      REPEAT
        SetFieldFilter(Field,ConfigPackageTable."Table ID",0);
        Field.SETFILTER(RelationTableNo,'<>%1&<>%2&..%3',0,ConfigPackageTable."Table ID",99000999);
        IsHandled := FALSE;
        OnBeforeGetFieldRelationTableNo(ConfigPackageTable,Field,TempConfigPackageTable,IsHandled); <=====================
        IF NOT IsHandled THEN
          IF Field.FINDSET THEN
            REPEAT
              TempConfigPackageTable."Package Code" := ConfigPackageTable."Package Code";
    ...
Codeunit<Config. Package Management>.PROCEDURE<OnModifyRecordDataFieldsOnBeforeFindConfigPackageField>
  Raised in: Codeunit<Config. Package Management>.PROCEDURE<ModifyRecordDataFields>
    Code lines:
    ...
    
    ConfigPackageTable.GET(ConfigPackageRecord."Package Code",ConfigPackageRecord."Table ID");
    IF DoModify OR DelayedInsert THEN
      ApplyTemplate(ConfigPackageTable,RecRef);
    
    OnModifyRecordDataFieldsOnBeforeFindConfigPackageField(ConfigPackageField,ConfigPackageRecord,RecRef,DoModify,DelayedInsert); <=====================
    IF ConfigPackageField.FINDSET THEN
      REPEAT
        ValidationFieldID := ConfigPackageField."Field ID";
        IF ((ConfigPackageRecord."Package Code" = QBPackageCodeTxt) OR (ConfigPackageRecord."Package Code" = MSGPPackageCodeTxt)) AND
    ...
Codeunit<Config. Package Management>.PROCEDURE<OnPostProcessPackage>
  Raised in: Codeunit<Config. Package Management>.PROCEDURE<ProcessAppliedPackageRecords>
    Code lines:
    ...
          TempConfigPackageRecord.DELETE; // Remove it from the buffer to avoid deletion in the package
          COMMIT;
        END;
      UNTIL TempConfigRecordForProcessing.NEXT = 0;
    TempConfigRecordForProcessing.DELETEALL;
    OnPostProcessPackage; <=====================
Codeunit<Config. Package Management>.PROCEDURE<OnPreProcessPackage>
  Raised in: Codeunit<Config. Package Management>.PROCEDURE<ProcessAppliedPackageRecords>
    Code lines:
    OnPreProcessPackage(TempConfigRecordForProcessing,Subscriber); <=====================
    IF TempConfigRecordForProcessing.FINDSET THEN
      REPEAT
        IF NOT ConfigTableProcessingRule.Process(TempConfigRecordForProcessing) THEN BEGIN
          TempConfigRecordForProcessing.FindConfigRecord(TempConfigPackageRecord);
          RecordError(TempConfigPackageRecord,0,COPYSTR(GETLASTERRORTEXT,1,250));
          TempConfigPackageRecord.DELETE; // Remove it from the buffer to avoid deletion in the package
          COMMIT;
        END;
      UNTIL TempConfigRecordForProcessing.NEXT = 0;
    ...
Codeunit<Config. Template Management>.PROCEDURE<OnApplyTemplLinesWithoutValidationAfterRecRefCheck>
  Raised in: Codeunit<Config. Template Management>.PROCEDURE<ApplyTemplateLinesWithoutValidation>
    Code lines:
    ...
          IF RecordRef.FIELDEXIST(ConfigTemplateLine."Field ID") THEN BEGIN
            FieldRef := RecordRef.FIELD(ConfigTemplateLine."Field ID");
            ConfigValidateMgt.ValidateFieldValue(
              RecordRef,FieldRef,ConfigTemplateLine."Default Value",TRUE,ConfigTemplateLine."Language ID");
            RecordRef.MODIFY(FALSE);
            OnApplyTemplLinesWithoutValidationAfterRecRefCheck(ConfigTemplateHeader,ConfigTemplateLine,RecordRef); <=====================
          END;
      UNTIL ConfigTemplateLine.NEXT = 0;
Codeunit<Config. Template Management>.PROCEDURE<OnBeforeUpdateWithSkipFields>
  Raised in: Codeunit<Config. Template Management>.PROCEDURE<UpdateRecord>
    Code lines:
    OnBeforeUpdateWithSkipFields(SkipFieldValidation); <=====================
    UpdateRecordWithSkipFields(ConfigTemplateHeader,RecRef,SkipFieldValidation,TempDummyField);
Codeunit<Config. XML Exchange>.PROCEDURE<OnBeforeGetElementName>
  Raised in: Codeunit<Config. XML Exchange>.PROCEDURE<GetElementName>
    Code lines:
    OnBeforeGetElementName(NameIn); <=====================
    
    IF NOT XMLDOMManagement.IsValidXMLNameStartCharacter(NameIn[1]) THEN
      NameIn := '_' + NameIn;
    NameIn := COPYSTR(XMLDOMManagement.ReplaceXMLInvalidCharacters(NameIn,' '),1,MAXSTRLEN(NameIn));
    NameIn := DELCHR(NameIn,'=','?''`');
    NameIn := CONVERTSTR(NameIn,'<>,./\+&()%:','            ');
    NameIn := CONVERTSTR(NameIn,'-','_');
    NameIn := DELCHR(NameIn,'=',' ');
    EXIT(NameIn);
Codeunit<Config. Management>.PROCEDURE<OnFindPage>
  Raised in: Codeunit<Config. Management>.PROCEDURE<FindPage>
    Code lines:
    ...
      DATABASE::"Value Entry":
        EXIT(PAGE::"Value Entries");
      DATABASE::"Source Code Setup":
        EXIT(PAGE::"Source Code Setup");
      ELSE BEGIN
        OnFindPage(TableID,PageID); <=====================
        EXIT(PageID);
      END;
    END;
Codeunit<Config. Excel Exchange>.PROCEDURE<OnBeforeExportExcel>
  Raised in: Codeunit<Config. Excel Exchange>.PROCEDURE<ExportExcel>
    Code lines:
    OnBeforeExportExcel(ConfigPackageTable); <=====================
    
    CLEAR(ExportFromWksht); // Obsolete parameter
    TempSchemaFileName := CreateSchemaFile(ConfigPackageTable,RootElementName);
    TempSetupDataFileName := BuildDataSetForPackageTable(ConfigPackageTable);
    
    CreateBook(TempBlob);
    WrkShtHelper := WrkShtHelper.WorksheetHelper(WrkbkWriter.FirstWorksheet.Worksheet);
    OpenXMLManagement.ImportSchema(WrkbkWriter,TempSchemaFileName,1,RootElementName);
    OpenXMLManagement.CreateSchemaConnection(WrkbkWriter,TempSetupDataFileName);
    ...
Codeunit<Config. Excel Exchange>.PROCEDURE<OnImportExcelFile>
  Raised in: Codeunit<Config. Excel Exchange>.PROCEDURE<IsFileImportedToBLOB>
    Code lines:
    OnImportExcelFile(TempBlob,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(TRUE);
    EXIT(FileMgt.BLOBImportWithFilter(TempBlob,ImportFromExcelMsg,'',FileExtensionFilterTok,ExcelFileExtensionTok) <> '');
Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnAfterInsertAllSalesOrderLines>
  Raised in: Codeunit<Blanket Sales Order to Order>.<OnRun>
    Code lines:
    ...
          END;
        END;
      UNTIL BlanketOrderSalesLine.NEXT = 0;
    END;
    
    OnAfterInsertAllSalesOrderLines(Rec,SalesOrderHeader); <=====================
    
    IF SalesSetup."Default Posting Date" = SalesSetup."Default Posting Date"::"No Date" THEN BEGIN
      SalesOrderHeader."Posting Date" := 0D;
      SalesOrderHeader.MODIFY;
    ...
Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnAfterInsertSalesOrderLine>
  Raised in: Codeunit<Blanket Sales Order to Order>.<OnRun>
    Code lines:
    ...
          END;
          SalesOrderLine.DefaultDeferralCode;
          IF IsSalesOrderLineToBeInserted(SalesOrderLine) THEN BEGIN
            OnBeforeInsertSalesOrderLine(SalesOrderLine,SalesOrderHeader,BlanketOrderSalesLine,Rec);
            SalesOrderLine.INSERT;
            OnAfterInsertSalesOrderLine(SalesOrderLine,SalesOrderHeader,BlanketOrderSalesLine,Rec); <=====================
          END;
    
          IF ATOLink.AsmExistsForSalesLine(BlanketOrderSalesLine) THEN
            ATOLink.MakeAsmOrderLinkedToSalesOrderLine(BlanketOrderSalesLine,SalesOrderLine);
    ...
Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnAfterResetQuantityFields>
  Raised in: Codeunit<Blanket Sales Order to Order>.PROCEDURE<ResetQuantityFields>
    Code lines:
    ...
    SalesLine."Qty. Shipped (Base)" := 0;
    SalesLine."Qty. Invoiced (Base)" := 0;
    SalesLine."Outstanding Quantity" := 0;
    SalesLine."Outstanding Qty. (Base)" := 0;
    
    OnAfterResetQuantityFields(SalesLine); <=====================
Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnAfterRun>
  Raised in: Codeunit<Blanket Sales Order to Order>.<OnRun>
    Code lines:
    ...
          UNTIL TempSalesLine.NEXT = 0;
    
    CLEAR(CustCheckCreditLimit);
    CLEAR(ItemCheckAvail);
    
    OnAfterRun(Rec,SalesOrderHeader); <=====================
Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnBeforeCreateSalesHeader>
  Raised in: Codeunit<Blanket Sales Order to Order>.PROCEDURE<CreateSalesHeader>
    Code lines:
    OnBeforeCreateSalesHeader(SalesHeader); <=====================
    
    WITH SalesHeader DO BEGIN
      SalesOrderHeader := SalesHeader;
      SalesOrderHeader."Document Type" := SalesOrderHeader."Document Type"::Order;
      IF NOT HideValidationDialog THEN
        CreditLimitExceeded := CustCheckCreditLimit.SalesHeaderCheck(SalesOrderHeader);
    
      SalesOrderHeader."No. Printed" := 0;
      SalesOrderHeader.Status := SalesOrderHeader.Status::Open;
    ...
Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnBeforeInsertSalesOrderHeader>
  Raised in: Codeunit<Blanket Sales Order to Order>.PROCEDURE<CreateSalesHeader>
    Code lines:
    ...
      SalesOrderHeader."No. Printed" := 0;
      SalesOrderHeader.Status := SalesOrderHeader.Status::Open;
      SalesOrderHeader."No." := '';
    
      SalesOrderLine.LOCKTABLE;
      OnBeforeInsertSalesOrderHeader(SalesOrderHeader,SalesHeader); <=====================
      SalesOrderHeader.INSERT(TRUE);
    
      IF "Order Date" = 0D THEN
        SalesOrderHeader."Order Date" := WORKDATE
    ...
Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnBeforeInsertSalesOrderLine>
  Raised in: Codeunit<Blanket Sales Order to Order>.<OnRun>
    Code lines:
    ...
            SalesOrderLine."Qty. to Assemble to Order" := SalesOrderLine.Quantity;
            SalesOrderLine."Qty. to Asm. to Order (Base)" := SalesOrderLine."Quantity (Base)";
          END;
          SalesOrderLine.DefaultDeferralCode;
          IF IsSalesOrderLineToBeInserted(SalesOrderLine) THEN BEGIN
            OnBeforeInsertSalesOrderLine(SalesOrderLine,SalesOrderHeader,BlanketOrderSalesLine,Rec); <=====================
            SalesOrderLine.INSERT;
            OnAfterInsertSalesOrderLine(SalesOrderLine,SalesOrderHeader,BlanketOrderSalesLine,Rec);
          END;
    
    ...
Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnBeforeReserveItemsManuallyLoop>
  Raised in: Codeunit<Blanket Sales Order to Order>.<OnRun>
    Code lines:
    ...
      SalesCalcDiscountByType.ResetRecalculateInvoiceDisc(SalesOrderHeader);
    
    IF (NOT HideValidationDialog) AND (NOT CreditLimitExceeded) THEN
      CustCheckCreditLimit.BlanketSalesOrderToOrderCheck(SalesOrderHeader);
    
    OnBeforeReserveItemsManuallyLoop(Rec,SalesOrderHeader,TempSalesLine); <=====================
    COMMIT;
    
    IF GUIALLOWED THEN
      IF TempSalesLine.FIND('-') THEN
    ...
Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnBeforeRun>
  Raised in: Codeunit<Blanket Sales Order to Order>.<OnRun>
    Code lines:
    OnBeforeRun(Rec); <=====================
    
    TESTFIELD("Document Type","Document Type"::"Blanket Order");
    ShouldRedistributeInvoiceAmount := SalesCalcDiscountByType.ShouldRedistributeInvoiceDiscountAmount(Rec);
    
    Cust.GET("Sell-to Customer No.");
    Cust.CheckBlockedCustOnDocs(Cust,"Document Type"::Order,TRUE,FALSE);
    
    ValidateSalesPersonOnSalesHeader(Rec,TRUE,FALSE);
    
    ...
Codeunit<Blanket Sales Order to Order>.PROCEDURE<OnBeforeSalesOrderHeaderModify>
  Raised in: Codeunit<Blanket Sales Order to Order>.PROCEDURE<CreateSalesHeader>
    Code lines:
    ...
      SalesOrderHeader."Outbound Whse. Handling Time" := "Outbound Whse. Handling Time";
      SalesOrderHeader.Reserve := Reserve;
    
      SalesOrderHeader."Prepayment %" := PrepmtPercent;
    
      OnBeforeSalesOrderHeaderModify(SalesOrderHeader,SalesHeader); <=====================
      SalesOrderHeader.MODIFY;
    END;
Codeunit<Sales Post via Job Queue>.PROCEDURE<OnBeforeEnqueueSalesDoc>
  Raised in: Codeunit<Sales Post via Job Queue>.PROCEDURE<EnqueueSalesDocWithUI>
    Code lines:
    OnBeforeEnqueueSalesDoc(SalesHeader,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    WITH SalesHeader DO BEGIN
      IF NOT ("Job Queue Status" IN ["Job Queue Status"::" ","Job Queue Status"::Error]) THEN
        ERROR(WrongJobQueueStatus,"Document Type","No.");
      TempInvoice := Invoice;
      TempRcpt := Receive;
      TempShip := Ship;
    ...
Codeunit<Sales Post via Job Queue>.PROCEDURE<OnBeforeReleaseSalesDoc>
  Raised in: Codeunit<Sales Post via Job Queue>.PROCEDURE<EnqueueSalesDocWithUI>
    Code lines:
    ...
      IF NOT ("Job Queue Status" IN ["Job Queue Status"::" ","Job Queue Status"::Error]) THEN
        ERROR(WrongJobQueueStatus,"Document Type","No.");
      TempInvoice := Invoice;
      TempRcpt := Receive;
      TempShip := Ship;
      OnBeforeReleaseSalesDoc(SalesHeader); <=====================
      IF Status = Status::Open THEN
        CODEUNIT.RUN(CODEUNIT::"Release Sales Document",SalesHeader);
      Invoice := TempInvoice;
      Receive := TempRcpt;
    ...
Codeunit<Custom Layout Reporting>.PROCEDURE<OnBeforeVerifyXmlContainsDataset>
  Raised in: Codeunit<Custom Layout Reporting>.PROCEDURE<VerifyXmlContainsDatasetOnBeforeMergeDocument>
    Code lines:
    OnBeforeVerifyXmlContainsDataset(CancelVerification); <=====================
    IF CancelVerification THEN
      EXIT;
    
    WordOutputXmlHasData := DocumentReportMgt.IsStreamHasDataset(InStrXmlData);
    
    WordOutputXmlHasDataVerified := TRUE;
Codeunit<ReadSoft OCR Master Data Sync>.PROCEDURE<OnBeforeSendRequest>
  Raised in: Codeunit<ReadSoft OCR Master Data Sync>.PROCEDURE<SyncMasterDataEntities>
    Code lines:
    ...
    
    RequestAction := FirstPortionAction;
    FOR PortionNumber := 1 TO PortionCount DO BEGIN
      UpdateWindow;
      Data := GetMasterDataEntitiesXml(TempBlob,RootNodeName,PortionSize,LastPortion);
      OnBeforeSendRequest(Data); <=====================
      IF NOT OCRServiceMgt.RsoRequest(RequestUri,RequestAction,Data,ResponseStream) THEN BEGIN
        LogTelemetryFailedMasterDataSync(RootNodeName);
        OCRServiceMgt.LogActivityFailed(OCRServiceSetup.RECORDID,ActivityDescription,SyncFailedSimpleMsg);
        EXIT(FALSE);
    ...
Codeunit<Sales-Post + Email>.PROCEDURE<OnAfterConfirmPost>
  Raised in: Codeunit<Sales-Post + Email>.PROCEDURE<Code>
    Code lines:
    ...
              EXIT;
          ELSE
            ErrorPostAndDistribute(SalesHeader);
        END;
    
    OnAfterConfirmPost(SalesHeader); <=====================
    
    CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);
    
    OnAfterPostAndBeforeSend(SalesHeader);
    ...
Codeunit<Sales-Post + Email>.PROCEDURE<OnAfterPostAndBeforeSend>
  Raised in: Codeunit<Sales-Post + Email>.PROCEDURE<Code>
    Code lines:
    ...
    
    OnAfterConfirmPost(SalesHeader);
    
    CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);
    
    OnAfterPostAndBeforeSend(SalesHeader); <=====================
    COMMIT;
    SendDocumentReport(SalesHeader);
    
    OnAfterPostAndSend(SalesHeader);
Codeunit<Sales-Post + Email>.PROCEDURE<OnAfterPostAndSend>
  Raised in: Codeunit<Sales-Post + Email>.PROCEDURE<Code>
    Code lines:
    ...
    
    OnAfterPostAndBeforeSend(SalesHeader);
    COMMIT;
    SendDocumentReport(SalesHeader);
    
    OnAfterPostAndSend(SalesHeader); <=====================
Codeunit<Sales-Post + Email>.PROCEDURE<OnBeforePostAndEMail>
  Raised in: Codeunit<Sales-Post + Email>.PROCEDURE<Code>
    Code lines:
    HideDialog := FALSE;
    IsHandled := FALSE;
    OnBeforePostAndEMail(SalesHeader,HideDialog,IsHandled,HideMailDialog); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT HideDialog THEN
      WITH SalesHeader DO
        CASE "Document Type" OF
          "Document Type"::Invoice,
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterBlanketOrderPurchLineModify>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<UpdateBlanketOrderLine>
    Code lines:
    ...
          BlanketOrderPurchLine."Qty. to Receive (Base)" :=
            BlanketOrderPurchLine."Quantity (Base)" - BlanketOrderPurchLine."Qty. Received (Base)";
    
          OnBeforeBlanketOrderPurchLineModify(BlanketOrderPurchLine,PurchLine);
          BlanketOrderPurchLine.MODIFY;
          OnAfterBlanketOrderPurchLineModify(BlanketOrderPurchLine,PurchLine,Ship,Receive,Invoice); <=====================
        END;
      END;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterCheckAndUpdate>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CheckAndUpdate>
    Code lines:
    ...
      InsertPostedHeaders(PurchHeader);
    
      UpdateIncomingDocument("Incoming Document Entry No.","Posting Date",GenJnlLineDocNo);
    END;
    
    OnAfterCheckAndUpdate(PurchHeader,SuppressCommit,PreviewMode); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterCheckMandatoryFields>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CheckMandatoryHeaderFields>
    Code lines:
    ...
    PurchHeader.TESTFIELD("Buy-from Vendor No.");
    PurchHeader.TESTFIELD("Pay-to Vendor No.");
    PurchHeader.TESTFIELD("Posting Date");
    PurchHeader.TESTFIELD("Document Date");
    
    OnAfterCheckMandatoryFields(PurchHeader,SuppressCommit); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterCheckPurchDoc>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CheckAndUpdate>
    Code lines:
    ...
      CheckAssosOrderLines(PurchHeader);
    
      IF Invoice AND PurchSetup."Ext. Doc. No. Mandatory" THEN
        CheckExtDocNo(PurchHeader);
    
      OnAfterCheckPurchDoc(PurchHeader,SuppressCommit,WhseShip,WhseReceive); <=====================
      ErrorMessageMgt.Finish;
    
      // Update
      IF Invoice THEN
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterCheckTrackingAndWarehouseForReceive>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CheckTrackingAndWarehouseForReceive>
    Code lines:
    ...
      IF Receive THEN BEGIN
        CheckTrackingSpecification(PurchHeader,TempPurchLine);
        IF NOT (WhseReceive OR WhseShip OR InvtPickPutaway) THEN
          CheckWarehouse(TempPurchLine);
      END;
      OnAfterCheckTrackingAndWarehouseForReceive(PurchHeader,Receive,SuppressCommit); <=====================
      EXIT(Receive);
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterCheckTrackingAndWarehouseForShip>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CheckTrackingAndWarehouseForShip>
    Code lines:
    ...
      IF Ship THEN BEGIN
        CheckTrackingSpecification(PurchHeader,TempPurchLine);
        IF NOT (WhseShip OR WhseReceive OR InvtPickPutaway) THEN
          CheckWarehouse(TempPurchLine);
      END;
      OnAfterCheckTrackingAndWarehouseForShip(PurchHeader,Ship,SuppressCommit); <=====================
      EXIT(Ship);
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterCreatePostedDeferralScheduleFromPurchDoc>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CreatePostedDeferralScheduleFromPurchDoc>
    Code lines:
    ...
          PostedDeferralLine.InitFromDeferralLine(
            TempDeferralLine,'','',NewDocumentType,NewDocumentNo,NewLineNo,DeferralAccount);
        UNTIL TempDeferralLine.NEXT = 0;
    END;
    
    OnAfterCreatePostedDeferralScheduleFromPurchDoc(PurchLine,PostedDeferralHeader); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterDeleteAfterPosting>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<DeleteAfterPosting>
    Code lines:
    ...
      DeleteItemChargeAssgnt(PurchHeader);
      PurchCommentLine.DeleteComments("Document Type","No.");
      WarehouseRequest.DeleteRequest(DATABASE::"Purchase Line","Document Type","No.");
    END;
    
    OnAfterDeleteAfterPosting(PurchHeader,PurchInvHeader,PurchCrMemoHeader,SuppressCommit); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterDivideAmount>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<DivideAmount>
    Code lines:
    ...
        TempVATAmountLineRemainder.MODIFY;
        IF "Deferral Code" <> '' THEN
          CalcDeferralAmounts(PurchHeader,PurchLine,OriginalDeferralAmount);
      END;
    
    OnAfterDivideAmount(PurchHeader,PurchLine,QtyType,PurchLineQty,TempVATAmountLine,TempVATAmountLineRemainder); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterFillInvoicePostBuffer>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<FillInvoicePostBuffer>
    Code lines:
    ...
        PurchAccount := GenPostingSetup.GetPurchAccount;
    
    InvoicePostBuffer.SetAccount(PurchAccount,TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY);
    InvoicePostBuffer.UpdateVATBase(TotalVATBase,TotalVATBaseACY);
    InvoicePostBuffer."Deferral Code" := PurchLine."Deferral Code";
    OnAfterFillInvoicePostBuffer(InvoicePostBuffer,PurchLine,TempInvoicePostBuffer,SuppressCommit); <=====================
    UpdateInvoicePostBuffer(TempInvoicePostBuffer,InvoicePostBuffer);
    
    OnFillInvoicePostingBufferOnAfterUpdateInvoicePostBuffer(PurchHeader,PurchLine,InvoicePostBuffer,TempInvoicePostBuffer);
    
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterFinalizePosting>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<FinalizePosting>
    Code lines:
    ...
      END;
    
      InsertValueEntryRelation;
    END;
    
    OnAfterFinalizePostingOnBeforeCommit( <=====================
      PurchHeader,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,ReturnShptHeader,GenJnlPostLine,PreviewMode,SuppressCommit);
    
    IF PreviewMode THEN BEGIN
      Window.CLOSE;
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterFinalizePostingOnBeforeCommit>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<FinalizePosting>
    Code lines:
    ...
      END;
    
      InsertValueEntryRelation;
    END;
    
    OnAfterFinalizePostingOnBeforeCommit( <=====================
      PurchHeader,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,ReturnShptHeader,GenJnlPostLine,PreviewMode,SuppressCommit);
    
    IF PreviewMode THEN BEGIN
      Window.CLOSE;
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterIncrAmount>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<IncrAmount>
    Code lines:
    ...
      Increment(TotalPurchLine."Prepmt Amt to Deduct","Prepmt Amt to Deduct");
      Increment(TotalPurchLine."Prepmt Amt Deducted","Prepmt Amt Deducted");
      Increment(TotalPurchLine."Prepayment VAT Difference","Prepayment VAT Difference");
      Increment(TotalPurchLine."Prepmt VAT Diff. to Deduct","Prepmt VAT Diff. to Deduct");
      Increment(TotalPurchLine."Prepmt VAT Diff. Deducted","Prepmt VAT Diff. Deducted");
      OnAfterIncrAmount(TotalPurchLine,PurchLine); <=====================
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterInitAssocItemJnlLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InitAssocItemJnlLine>
    Code lines:
    ...
        Amount := ROUND(Amount);
        "Discount Amount" := SalesOrderLine."Line Discount Amount";
      END;
    END;
    
    OnAfterInitAssocItemJnlLine(ItemJnlLine,SalesOrderHeader,SalesOrderLine,PurchHeader); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterInsertCombinedSalesShipment>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostCombineSalesOrderShipment>
    Code lines:
    ...
                SalesShptLine.INSERT;
                OnAfterSalesShptLineInsert(SalesShptLine,SalesShptHeader,SalesOrderLine,SuppressCommit,TempDropShptPostBuffer);
              UNTIL SalesOrderLine.NEXT = 0;
          UNTIL TempDropShptPostBuffer.NEXT = 0;
          TempDropShptPostBuffer.SETRANGE("Order No.");
          OnAfterInsertCombinedSalesShipment(SalesShptHeader); <=====================
        UNTIL TempDropShptPostBuffer.NEXT = 0;
      END;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterInsertedPrepmtVATBaseToDeduct>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertedPrepmtVATBaseToDeduct>
    Code lines:
    ...
      "Attached to Line No." := PrepmtLineNo;
      "VAT Base Amount" := PrepmtVATBaseToDeduct;
      INSERT;
    END;
    
    OnAfterInsertedPrepmtVATBaseToDeduct( <=====================
      PurchHeader,PurchLine,PrepmtLineNo,TotalPrepmtAmtToDeduct,TempPrepmtDeductLCYPurchLine,PrepmtVATBaseToDeduct);
    
    EXIT(PrepmtVATBaseToDeduct);
Codeunit<Purch.-Post>.PROCEDURE<OnAfterInsertPostedHeaders>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertPostedHeaders>
    Code lines:
    ...
          GenJnlLineDocNo := PurchCrMemoHeader."No.";
          GenJnlLineExtDocNo := "Vendor Cr. Memo No.";
        END;
    END;
    
    OnAfterInsertPostedHeaders(PurchHeader,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,ReturnShptHeader); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterInvoiceRoundingAmount>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InvoiceRounding>
    Code lines:
    ...
        RoundingLineInserted := TRUE;
        RoundingLineNo := "Line No.";
      END;
    END;
    
    OnAfterInvoiceRoundingAmount( <=====================
      PurchHeader,PurchLine,TotalPurchLine,UseTempData,InvoiceRoundingAmount,SuppressCommit);
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostAccICLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostGLAccICLine>
    Code lines:
    ...
        JobPostLine.PostJobOnPurchaseLine(PurchHeader,PurchInvHeader,PurchCrMemoHeader,JobPurchLine,SrcCode);
      END;
      IF (PurchLine."IC Partner Code" <> '') AND PurchHeader.Invoice THEN
        InsertICGenJnlLine(PurchHeader,xPurchLine,ICGenJnlLineNo);
    
      OnAfterPostAccICLine(PurchLine,SuppressCommit); <=====================
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostBalancingEntry>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostBalancingEntry>
    Code lines:
    ...
          ROUND(VendLedgEntry."Remaining Pmt. Disc. Possible" / VendLedgEntry."Adjusted Currency Factor");
      "Allow Zero-Amount Posting" := TRUE;
    
      OnBeforePostBalancingEntry(GenJnlLine,PurchHeader,TotalPurchLine2,TotalPurchLineLCY2,PreviewMode,SuppressCommit);
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostBalancingEntry(GenJnlLine,PurchHeader,TotalPurchLine2,TotalPurchLineLCY2,SuppressCommit,GenJnlPostLine); <=====================
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostGLAndVendor>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostGLAndVendor>
    Code lines:
    ...
        PostBalancingEntry(
          PurchHeader,TotalPurchLine,TotalPurchLineLCY,GenJnlLineDocType,GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode);
      END;
    END;
    
    OnAfterPostGLAndVendor(PurchHeader,GenJnlPostLine,TotalPurchLine,TotalPurchLineLCY,SuppressCommit); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostInvPostBuffer>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostInvoicePostBufferLine>
    Code lines:
    ...
        CopyFromInvoicePostBufferFA(InvoicePostBuffer);
      END;
    
      OnBeforePostInvPostBuffer(GenJnlLine,InvoicePostBuffer,PurchHeader,GenJnlPostLine,PreviewMode,SuppressCommit);
      GLEntryNo := RunGenJnlPostLine(GenJnlLine);
      OnAfterPostInvPostBuffer(GenJnlLine,InvoicePostBuffer,PurchHeader,GLEntryNo,SuppressCommit,GenJnlPostLine); <=====================
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostItemJnlLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
      IF (PurchLine.Type = PurchLine.Type::Item) AND PurchHeader.Invoice THEN
        PostItemJnlLineItemCharges(
          PurchHeader,PurchLine,OriginalItemJnlLine,"Item Shpt. Entry No.",TempTrackingSpecificationChargeAssmt);
    END;
    
    OnAfterPostItemJnlLine(ItemJnlLine,PurchLine,PurchHeader,ItemJnlPostLine); <=====================
    
    EXIT(ItemJnlLine."Item Shpt. Entry No.");
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostItemJnlLineCopyProdOrder>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemJnlLineCopyProdOrder>
    Code lines:
    ...
      ItemJnlLine."Work Center No." := "Work Center No.";
      ItemJnlLine."Unit Cost Calculation" := ItemJnlLine."Unit Cost Calculation"::Units;
      IF Finished THEN
        ItemJnlLine.Finished := Finished;
    END;
    OnAfterPostItemJnlLineCopyProdOrder(ItemJnlLine,PurchLine,PurchRcptHeader,QtyToBeReceived,SuppressCommit); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostItemLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemLine>
    Code lines:
    ...
            PostAssocItemJnlLine(PurchHeader,PurchLine,TempDropShptPostBuffer.Quantity,TempDropShptPostBuffer."Quantity (Base)");
          TempDropShptPostBuffer.INSERT;
        END;
      END;
    
      OnAfterPostItemLine(PurchLine,SuppressCommit); <=====================
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostItemTrackingLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemTrackingLine>
    Code lines:
    ...
    PostItemTracking(PurchHeader,PurchLine,TempTrackingSpecification,TrackingSpecificationExists);
    
    IF TrackingSpecificationExists THEN
      SaveInvoiceSpecification(TempTrackingSpecification);
    
    OnAfterPostItemTrackingLine(PurchHeader,PurchLine,WhseReceive,WhseShip,InvtPickPutaway); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostPurchaseDoc>
  Raised in: Codeunit<Purch.-Post>.<OnRun>
    Code lines:
    ...
      COMMIT;
      UpdateAnalysisView.UpdateAll(0,TRUE);
      UpdateItemAnalysisView.UpdateAll(0,TRUE);
    END;
    
    OnAfterPostPurchaseDoc( <=====================
      Rec,GenJnlPostLine,PurchRcptHeader."No.",ReturnShptHeader."No.",PurchInvHeader."No.",PurchCrMemoHeader."No.",
      SuppressCommit);
    OnAfterPostPurchaseDocDropShipment(SalesShptHeader."No.",SuppressCommit); <=====================
  Raised in: Table<Purchase Header>.PROCEDURE<TriggerOnAfterPostPurchaseDoc>
    Code lines:
    PurchPost.OnAfterPostPurchaseDoc(Rec,GenJnlPostLine,PurchRcpHdrNo,RetShptHdrNo,PurchInvHdrNo,PurchCrMemoHdrNo,FALSE); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostPurchaseDocDropShipment>
  Raised in: Codeunit<Purch.-Post>.<OnRun>
    Code lines:
    ...
    END;
    
    OnAfterPostPurchaseDoc(
      Rec,GenJnlPostLine,PurchRcptHeader."No.",ReturnShptHeader."No.",PurchInvHeader."No.",PurchCrMemoHeader."No.",
      SuppressCommit);
    OnAfterPostPurchaseDocDropShipment(SalesShptHeader."No.",SuppressCommit); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostPurchLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostPurchLine>
    Code lines:
    ...
          CreatePostedDeferralScheduleFromPurchDoc(xPurchLine,PurchCrMemoLine.GetDocumentType,
            PurchCrMemoHeader."No.",PurchCrMemoLine."Line No.",PurchCrMemoHeader."Posting Date");
        END;
    END;
    
    OnAfterPostPurchLine(PurchHeader,PurchLine,SuppressCommit); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostPurchLines>
  Raised in: Codeunit<Purch.-Post>.<OnRun>
    Code lines:
    ...
          IF LastLineRetrieved AND PurchSetup."Invoice Rounding" THEN
            InvoiceRounding(PurchHeader,TempPurchLineGlobal,FALSE,BiggestLineNo);
        END;
      UNTIL LastLineRetrieved;
    
    OnAfterPostPurchLines( <=====================
      PurchHeader,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,ReturnShptHeader,WhseShip,WhseReceive,PurchaseLinesProcessed,
      SuppressCommit,EverythingInvoiced);
    
    IF PurchHeader.IsCreditDocType THEN BEGIN
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostUpdateOrderLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostUpdateOrderLine>
    Code lines:
    ...
              InitQtyToReceive2;
          END;
          SetDefaultQuantity;
          OnBeforePostUpdateOrderLineModifyTempLine(TempPurchLine,WhseShip,WhseReceive,SuppressCommit,PurchHeader);
          ModifyTempLine(TempPurchLine);
          OnAfterPostUpdateOrderLine(TempPurchLine,WhseShip,WhseReceive,SuppressCommit); <=====================
        UNTIL NEXT = 0;
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostVendorEntry>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostVendorEntry>
    Code lines:
    ...
      "Sales/Purch. (LCY)" := -TotalPurchLineLCY2.Amount;
      "Inv. Discount (LCY)" := -TotalPurchLineLCY2."Inv. Discount Amount";
    
      OnBeforePostVendorEntry(GenJnlLine,PurchHeader,TotalPurchLine2,TotalPurchLineLCY2,PreviewMode,SuppressCommit);
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostVendorEntry(GenJnlLine,PurchHeader,TotalPurchLine2,TotalPurchLineLCY2,SuppressCommit,GenJnlPostLine); <=====================
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPostWhseJnlLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
            PurchHeader,PurchLine,OriginalItemJnlLine,TempReservationEntry,QtyToBeInvoiced,QtyToBeReceived,
            TempHandlingSpecification,"Item Shpt. Entry No.");
    
      IF PostWhseJnlLine THEN BEGIN
        PostItemJnlLineWhseLine(TempWhseJnlLine,TempWhseTrackingSpecification,PurchLine,PostJobConsumptionBeforePurch);
        OnAfterPostWhseJnlLine(PurchLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit); <=====================
      END;
      IF (PurchLine.Type = PurchLine.Type::Item) AND PurchHeader.Invoice THEN
        PostItemJnlLineItemCharges(
          PurchHeader,PurchLine,OriginalItemJnlLine,"Item Shpt. Entry No.",TempTrackingSpecificationChargeAssmt);
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchCrMemoHeaderInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertCrMemoHeader>
    Code lines:
    ...
      PurchCrMemoHdr."Source Code" := SrcCode;
      PurchCrMemoHdr."User ID" := USERID;
      PurchCrMemoHdr."No. Printed" := 0;
      OnBeforePurchCrMemoHeaderInsert(PurchCrMemoHdr,PurchHeader,SuppressCommit);
      PurchCrMemoHdr.INSERT(TRUE);
      OnAfterPurchCrMemoHeaderInsert(PurchCrMemoHdr,PurchHeader,SuppressCommit); <=====================
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,PurchCrMemoHdr.RECORDID,PurchCrMemoHdr."No.");
    
      IF PurchSetup."Copy Cmts Ret.Ord. to Cr. Memo" THEN BEGIN
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchCrMemoLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostPurchLine>
    Code lines:
    ...
            PurchCrMemoLine."Order No." := "Document No.";
            PurchCrMemoLine."Order Line No." := "Line No.";
          END;
          OnBeforePurchCrMemoLineInsert(PurchCrMemoLine,PurchCrMemoHeader,PurchLine,SuppressCommit);
          PurchCrMemoLine.INSERT(TRUE);
          OnAfterPurchCrMemoLineInsert(PurchCrMemoLine,PurchCrMemoHeader,PurchLine,SuppressCommit); <=====================
          CreatePostedDeferralScheduleFromPurchDoc(xPurchLine,PurchCrMemoLine.GetDocumentType,
            PurchCrMemoHeader."No.",PurchCrMemoLine."Line No.",PurchCrMemoHeader."Posting Date");
        END;
    END;
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchInvHeaderInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertInvoiceHeader>
    Code lines:
    ...
      PurchInvHeader."Source Code" := SrcCode;
      PurchInvHeader."User ID" := USERID;
      PurchInvHeader."No. Printed" := 0;
      OnBeforePurchInvHeaderInsert(PurchInvHeader,PurchHeader,SuppressCommit);
      PurchInvHeader.INSERT(TRUE);
      OnAfterPurchInvHeaderInsert(PurchInvHeader,PurchHeader); <=====================
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,PurchInvHeader.RECORDID,PurchInvHeader."No.");
      IF PurchSetup."Copy Comments Order to Invoice" THEN BEGIN
        PurchCommentLine.CopyComments(
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchInvLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostPurchLine>
    Code lines:
    ...
              PurchInvLine."Order No." := PurchRcptLine."Order No.";
              PurchInvLine."Order Line No." := PurchRcptLine."Order Line No.";
            END;
          OnBeforePurchInvLineInsert(PurchInvLine,PurchInvHeader,PurchLine,SuppressCommit);
          PurchInvLine.INSERT(TRUE);
          OnAfterPurchInvLineInsert( <=====================
            PurchInvLine,PurchInvHeader,PurchLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit);
          CreatePostedDeferralScheduleFromPurchDoc(xPurchLine,PurchInvLine.GetDocumentType,
            PurchInvHeader."No.",PurchInvLine."Line No.",PurchInvHeader."Posting Date");
        END ELSE BEGIN // Credit Memo
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchRcptHeaderInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertReceiptHeader>
    Code lines:
    ...
        PurchRcptHeader."No. Printed" := 0;
        PurchRcptHeader."Source Code" := SrcCode;
        PurchRcptHeader."User ID" := USERID;
        OnBeforePurchRcptHeaderInsert(PurchRcptHeader,PurchHeader,SuppressCommit);
        PurchRcptHeader.INSERT(TRUE);
        OnAfterPurchRcptHeaderInsert(PurchRcptHeader,PurchHeader,SuppressCommit); <=====================
    
        ApprovalsMgmt.PostApprovalEntries(RECORDID,PurchRcptHeader.RECORDID,PurchRcptHeader."No.");
    
        IF PurchSetup."Copy Comments Order to Receipt" THEN BEGIN
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterPurchRcptLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertReceiptLine>
    Code lines:
    ...
      PurchRcptLine."Item Rcpt. Entry No." := InsertRcptEntryRelation(PurchRcptLine);
      PurchRcptLine."Item Charge Base Amount" := ROUND(CostBaseAmount / PurchLine.Quantity * PurchRcptLine.Quantity);
    END;
    OnBeforePurchRcptLineInsert(PurchRcptLine,PurchRcptHeader,PurchLine,SuppressCommit,PostedWhseRcptLine);
    PurchRcptLine.INSERT(TRUE);
    OnAfterPurchRcptLineInsert( <=====================
      PurchLine,PurchRcptLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit,PurchInvHeader);
Codeunit<Purch.-Post>.PROCEDURE<OnAfterResetTempLines>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<ResetTempLines>
    Code lines:
    TempPurchLineLocal.RESET;
    TempPurchLineLocal.COPY(TempPurchLineGlobal,TRUE);
    
    OnAfterResetTempLines(TempPurchLineGlobal); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterRestorePurchaseHeader>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<RestorePurchaseHeader>
    Code lines:
    ...
      "Posting No." := PurchaseHeaderCopy."Posting No.";
      "Receiving No." := PurchaseHeaderCopy."Receiving No.";
      "Return Shipment No." := PurchaseHeaderCopy."Return Shipment No.";
    END;
    
    OnAfterRestorePurchaseHeader(PurchaseHeader,PurchaseHeaderCopy); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterReturnShptHeaderInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertReturnShipmentHeader>
    Code lines:
    ...
      ReturnShptHeader."No. Printed" := 0;
      ReturnShptHeader."Source Code" := SrcCode;
      ReturnShptHeader."User ID" := USERID;
      OnBeforeReturnShptHeaderInsert(ReturnShptHeader,PurchHeader,SuppressCommit);
      ReturnShptHeader.INSERT(TRUE);
      OnAfterReturnShptHeaderInsert(ReturnShptHeader,PurchHeader,SuppressCommit); <=====================
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,ReturnShptHeader.RECORDID,ReturnShptHeader."No.");
    
      IF PurchSetup."Copy Cmts Ret.Ord. to Ret.Shpt" THEN BEGIN
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterReturnShptLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertReturnShipmentLine>
    Code lines:
    ...
      ReturnShptLine."Item Shpt. Entry No." := InsertReturnEntryRelation(ReturnShptLine);
      ReturnShptLine."Item Charge Base Amount" := ROUND(CostBaseAmount / PurchLine.Quantity * ReturnShptLine.Quantity);
    END;
    OnBeforeReturnShptLineInsert(ReturnShptLine,ReturnShptHeader,PurchLine,SuppressCommit);
    ReturnShptLine.INSERT(TRUE);
    OnAfterReturnShptLineInsert( <=====================
      ReturnShptLine,ReturnShptHeader,PurchLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit,
      TempWhseShptHeader,PurchCrMemoHeader);
    
    CheckCertificateOfSupplyStatus(ReturnShptHeader,ReturnShptLine);
Codeunit<Purch.-Post>.PROCEDURE<OnAfterReverseAmount>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<ReverseAmount>
    Code lines:
    ...
      "VAT Difference" := -"VAT Difference";
      "Amount Including VAT" := -"Amount Including VAT";
      "Line Discount Amount" := -"Line Discount Amount";
      "Inv. Discount Amount" := -"Inv. Discount Amount";
      "Salvage Value" := -"Salvage Value";
      OnAfterReverseAmount(PurchLine); <=====================
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterRoundAmount>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<RoundAmount>
    Code lines:
    ...
    
      IncrAmount(PurchHeader,PurchLine,TotalPurchLineLCY);
      Increment(TotalPurchLineLCY."Unit Cost (LCY)",ROUND(PurchLineQty * "Unit Cost (LCY)"));
    END;
    
    OnAfterRoundAmount(PurchHeader,PurchLine,PurchLineQty); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterSalesShptHeaderInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertSalesShptHeader>
    Code lines:
    ...
      "Posting Date" := PurchHeader."Posting Date";
      "Document Date" := PurchHeader."Document Date";
      "No. Printed" := 0;
      OnBeforeSalesShptHeaderInsert(SalesShptHeader,SalesOrderHeader,SuppressCommit);
      INSERT(TRUE);
      OnAfterSalesShptHeaderInsert(SalesShptHeader,SalesOrderHeader,SuppressCommit); <=====================
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnAfterSalesShptLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertSalesShptLine>
    Code lines:
    ...
        "Item Shpt. Entry No." := DropShptPostBuffer."Item Shpt. Entry No.";
        "Item Charge Base Amount" := SalesOrderLine."Line Amount";
      END;
      OnBeforeSalesShptLineInsert(SalesShptLine,SalesShptHeader,SalesOrderLine,SuppressCommit,DropShptPostBuffer);
      INSERT;
      OnAfterSalesShptLineInsert(SalesShptLine,SalesShptHeader,SalesOrderLine,SuppressCommit,DropShptPostBuffer); <=====================
    END;
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostCombineSalesOrderShipment>
    Code lines:
    ...
                SalesShptLine."Document No." := SalesShptHeader."No.";
                SalesShptLine."Order No." := SalesOrderLine."Document No.";
                SalesShptLine."Order Line No." := SalesOrderLine."Line No.";
                OnBeforeSalesShptLineInsert(SalesShptLine,SalesShptHeader,SalesOrderLine,SuppressCommit,TempDropShptPostBuffer);
                SalesShptLine.INSERT;
                OnAfterSalesShptLineInsert(SalesShptLine,SalesShptHeader,SalesOrderLine,SuppressCommit,TempDropShptPostBuffer); <=====================
              UNTIL SalesOrderLine.NEXT = 0;
          UNTIL TempDropShptPostBuffer.NEXT = 0;
          TempDropShptPostBuffer.SETRANGE("Order No.");
          OnAfterInsertCombinedSalesShipment(SalesShptHeader);
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterSaveTempWhseSplitSpec>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<SaveTempWhseSplitSpec>
    Code lines:
    ...
        TempWhseSplitSpecification."Source ID" := PurchLine3."Document No.";
        TempWhseSplitSpecification."Source Ref. No." := PurchLine3."Line No.";
        TempWhseSplitSpecification.INSERT;
      UNTIL TempHandlingSpecification.NEXT = 0;
    
    OnAfterSaveTempWhseSplitSpec(PurchLine3,TempWhseSplitSpecification); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterSetApplyToDocNo>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<SetApplyToDocNo>
    Code lines:
    ...
      "Bal. Account No." := PurchHeader."Bal. Account No.";
      "Applies-to Doc. Type" := DocType;
      "Applies-to Doc. No." := DocNo;
    END;
    
    OnAfterSetApplyToDocNo(GenJnlLine,PurchHeader); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterTestPurchLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<TestPurchLine>
    Code lines:
    ...
            TESTFIELD("Qty. to Invoice",Quantity);
          END;
      END;
    END;
    
    OnAfterTestPurchLine(PurchHeader,PurchLine,WhseReceive,WhseShip); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterUpdateInvoicedQtyOnPurchRcptLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemTrackingForReceipt>
    Code lines:
    ...
    
          RemQtyToBeInvoiced := RemQtyToBeInvoiced - QtyToBeInvoiced;
          RemQtyToBeInvoicedBase := RemQtyToBeInvoicedBase - QtyToBeInvoicedBase;
          UpdateInvoicedQtyOnPurchRcptLine(PurchRcptLine,QtyToBeInvoiced,QtyToBeInvoicedBase);
    
          OnAfterUpdateInvoicedQtyOnPurchRcptLine( <=====================
            PurchInvHeader,PurchRcptLine,PurchLine,TempTrackingSpecification,TrackingSpecificationExists,
            QtyToBeInvoiced,QtyToBeInvoicedBase);
    
          IF PostItemTrackingForReceiptCondition(PurchLine,PurchRcptLine) THEN
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterUpdateInvoicedQtyOnReturnShptLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemTrackingForShipment>
    Code lines:
    ...
    
          RemQtyToBeInvoiced := RemQtyToBeInvoiced - QtyToBeInvoiced;
          RemQtyToBeInvoicedBase := RemQtyToBeInvoicedBase - QtyToBeInvoicedBase;
          UpdateInvoicedQtyOnReturnShptLine(ReturnShptLine,QtyToBeInvoiced,QtyToBeInvoicedBase);
    
          OnAfterUpdateInvoicedQtyOnReturnShptLine( <=====================
            PurchCrMemoHeader,ReturnShptLine,PurchLine,TempTrackingSpecification,TrackingSpecificationExists,
            QtyToBeInvoiced,QtyToBeInvoicedBase);
    
          IF PostItemTrackingForShipmentCondition(PurchLine,ReturnShptLine) THEN
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnAfterUpdatePostingNos>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<UpdatePostingNos>
    Code lines:
    ...
            "Posting No." := PostingPreviewNoTok;
        END;
      END;
    END;
    
    OnAfterUpdatePostingNos(PurchHeader,NoSeriesMgt,SuppressCommit); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterUpdatePrepmtPurchLineWithRounding>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<UpdatePrepmtPurchLineWithRounding>
    Code lines:
    ...
        TotalPurchLine."Amount Including VAT" := 0;
        TotalPurchLineLCY."Amount Including VAT" := 0;
      END;
    END;
    
    OnAfterUpdatePrepmtPurchLineWithRounding( <=====================
      PrepmtPurchLine,TotalRoundingAmount,TotalPrepmtAmount,FinalInvoice,PricesInclVATRoundingAmount,
      TotalPurchLine,TotalPurchLineLCY);
Codeunit<Purch.-Post>.PROCEDURE<OnAfterUpdatePurchaseHeader>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<UpdatePurchaseHeader>
    Code lines:
    ...
          PurchCrMemoHeader."Vendor Ledger Entry No." := VendorLedgerEntry."Entry No.";
          PurchCrMemoHeader.MODIFY;
        END;
    END;
    
    OnAfterUpdatePurchaseHeader(VendorLedgerEntry,PurchInvHeader,PurchCrMemoHeader,GenJnlLineDocType); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterUpdatePurchLineBeforePost>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<UpdatePurchLineBeforePost>
    Code lines:
    ...
        "Qty. to Invoice" := 0;
        "Qty. to Invoice (Base)" := 0;
      END;
    END;
    
    OnAfterUpdatePurchLineBeforePost(PurchLine,WhseShip,WhseReceive); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnAfterValidatePostingAndDocumentDate>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<ValidatePostingAndDocumentDate>
    Code lines:
    ...
    END;
    
    IF ModifyHeader THEN
      PurchaseHeader.MODIFY;
    
    OnAfterValidatePostingAndDocumentDate(PurchaseHeader,SuppressCommit,PreviewMode); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeArchiveUnpostedOrder>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<ArchiveUnpostedOrder>
    Code lines:
    IsHandled := FALSE;
    OnBeforeArchiveUnpostedOrder(PurchHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT (PurchHeader."Document Type" IN [PurchHeader."Document Type"::Order,PurchHeader."Document Type"::"Return Order"]) THEN
      EXIT;
    
    PurchSetup.GET;
    IF (PurchHeader."Document Type" = PurchHeader."Document Type"::Order) AND NOT PurchSetup."Archive Orders" THEN
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeBlanketOrderPurchLineModify>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<UpdateBlanketOrderLine>
    Code lines:
    ...
          BlanketOrderPurchLine."Qty. to Invoice (Base)" :=
            BlanketOrderPurchLine."Quantity (Base)" - BlanketOrderPurchLine."Qty. Invoiced (Base)";
          BlanketOrderPurchLine."Qty. to Receive (Base)" :=
            BlanketOrderPurchLine."Quantity (Base)" - BlanketOrderPurchLine."Qty. Received (Base)";
    
          OnBeforeBlanketOrderPurchLineModify(BlanketOrderPurchLine,PurchLine); <=====================
          BlanketOrderPurchLine.MODIFY;
          OnAfterBlanketOrderPurchLineModify(BlanketOrderPurchLine,PurchLine,Ship,Receive,Invoice);
        END;
      END;
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeCheckExternalDocumentNumber>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CheckExternalDocumentNumber>
    Code lines:
    OnBeforeCheckExternalDocumentNumber(VendLedgEntry,PurchaseHeader,Handled,GenJnlLineDocType,GenJnlLineExtDocNo); <=====================
    IF Handled THEN
      EXIT;
    
    VendLedgEntry.RESET;
    VendLedgEntry.SETCURRENTKEY("External Document No.");
    VendorMgt.SetFilterForExternalDocNo(
      VendLedgEntry,GenJnlLineDocType,GenJnlLineExtDocNo,PurchaseHeader."Pay-to Vendor No.",PurchaseHeader."Document Date");
    IF VendLedgEntry.FINDFIRST THEN
      ERROR(
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeCheckICDocumentDuplicatePosting>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CheckICDocumentDuplicatePosting>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckICDocumentDuplicatePosting(PurchHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH PurchHeader DO BEGIN
      IF NOT Invoice THEN
        EXIT;
      IF "IC Direction" = "IC Direction"::Outgoing THEN BEGIN
        PurchInvHeader.SETRANGE("Your Reference","No.");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeCreatePostedWhseRcptHeader>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertReceiptHeader>
    Code lines:
    ...
        END;
      END;
    
      IF WhseReceive THEN BEGIN
        WhseRcptHeader.GET(TempWhseRcptHeader."No.");
        OnBeforeCreatePostedWhseRcptHeader(PostedWhseRcptHeader,WhseRcptHeader,PurchHeader); <=====================
        WhsePostRcpt.CreatePostedRcptHeader(PostedWhseRcptHeader,WhseRcptHeader,"Receiving No.","Posting Date");
      END;
      IF WhseShip THEN BEGIN
        WhseShptHeader.GET(TempWhseShptHeader."No.");
    ...
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertReturnShipmentHeader>
    Code lines:
    ...
        OnBeforeCreatePostedWhseShptHeader(PostedWhseShptHeader,WhseShptHeader,PurchHeader);
        WhsePostShpt.CreatePostedShptHeader(PostedWhseShptHeader,WhseShptHeader,"Return Shipment No.","Posting Date");
      END;
      IF WhseReceive THEN BEGIN
        WhseRcptHeader.GET(TempWhseRcptHeader."No.");
        OnBeforeCreatePostedWhseRcptHeader(PostedWhseRcptHeader,WhseRcptHeader,PurchHeader); <=====================
        WhsePostRcpt.CreatePostedRcptHeader(PostedWhseRcptHeader,WhseRcptHeader,"Return Shipment No.","Posting Date");
      END;
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeCreatePostedWhseShptHeader>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertReceiptHeader>
    Code lines:
    ...
        OnBeforeCreatePostedWhseRcptHeader(PostedWhseRcptHeader,WhseRcptHeader,PurchHeader);
        WhsePostRcpt.CreatePostedRcptHeader(PostedWhseRcptHeader,WhseRcptHeader,"Receiving No.","Posting Date");
      END;
      IF WhseShip THEN BEGIN
        WhseShptHeader.GET(TempWhseShptHeader."No.");
        OnBeforeCreatePostedWhseShptHeader(PostedWhseShptHeader,WhseShptHeader,PurchHeader); <=====================
        WhsePostShpt.CreatePostedShptHeader(PostedWhseShptHeader,WhseShptHeader,"Receiving No.","Posting Date");
      END;
    END;
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertReturnShipmentHeader>
    Code lines:
    ...
          "Document Type",PurchCommentLine."Document Type"::"Posted Return Shipment","No.",ReturnShptHeader."No.");
        RecordLinkManagement.CopyLinks(PurchHeader,ReturnShptHeader);
      END;
      IF WhseShip THEN BEGIN
        WhseShptHeader.GET(TempWhseShptHeader."No.");
        OnBeforeCreatePostedWhseShptHeader(PostedWhseShptHeader,WhseShptHeader,PurchHeader); <=====================
        WhsePostShpt.CreatePostedShptHeader(PostedWhseShptHeader,WhseShptHeader,"Return Shipment No.","Posting Date");
      END;
      IF WhseReceive THEN BEGIN
        WhseRcptHeader.GET(TempWhseRcptHeader."No.");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeCreatePrepmtLines>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CreatePrepmtLines>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCreatePrepmtLines(PurchHeader,TempPrepmtPurchLine,CompleteFunctionality,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    GetGLSetup;
    WITH TempPurchLine DO BEGIN
      FillTempLines(PurchHeader,TempPurchLineGlobal);
      ResetTempLines(TempPurchLine);
      IF NOT FINDLAST THEN
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeDeleteAfterPosting>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<DeleteAfterPosting>
    Code lines:
    OnBeforeDeleteAfterPosting(PurchHeader,PurchInvHeader,PurchCrMemoHeader,SkipDelete,SuppressCommit); <=====================
    IF SkipDelete THEN
      EXIT;
    
    WITH PurchHeader DO BEGIN
      IF HASLINKS THEN
        DELETELINKS;
      DELETE;
    
      ReservePurchLine.DeleteInvoiceSpecFromHeader(PurchHeader);
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeDivideAmount>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<DivideAmount>
    Code lines:
    IF RoundingLineInserted AND (RoundingLineNo = PurchLine."Line No.") THEN
      EXIT;
    
    OnBeforeDivideAmount(PurchHeader,PurchLine,QtyType,PurchLineQty,TempVATAmountLine,TempVATAmountLineRemainder); <=====================
    
    WITH PurchLine DO
      IF (PurchLineQty = 0) OR ("Direct Unit Cost" = 0) THEN BEGIN
        "Line Amount" := 0;
        "Line Discount Amount" := 0;
        "Inv. Discount Amount" := 0;
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeFillDeferralPostingBuffer>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<FillInvoicePostBuffer>
    Code lines:
    ...
    UpdateInvoicePostBuffer(TempInvoicePostBuffer,InvoicePostBuffer);
    
    OnFillInvoicePostingBufferOnAfterUpdateInvoicePostBuffer(PurchHeader,PurchLine,InvoicePostBuffer,TempInvoicePostBuffer);
    
    IF PurchLine."Deferral Code" <> '' THEN BEGIN
      OnBeforeFillDeferralPostingBuffer( <=====================
        PurchLine,InvoicePostBuffer,TempInvoicePostBuffer,Usedate,InvDefLineNo,DeferralLineNo,SuppressCommit);
      FillDeferralPostingBuffer(PurchHeader,PurchLine,InvoicePostBuffer,AmtToDefer,AmtToDeferACY,DeferralAccount,PurchAccount);
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeFinalizePosting>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<FinalizePosting>
    Code lines:
    OnBeforeFinalizePosting(PurchHeader,TempPurchLineGlobal,EverythingInvoiced,SuppressCommit,GenJnlPostLine); <=====================
    
    WITH PurchHeader DO BEGIN
      IF ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"]) AND
         (NOT EverythingInvoiced)
      THEN BEGIN
        MODIFY;
        InsertTrackingSpecification(PurchHeader);
        PostUpdateOrderLine(PurchHeader);
        UpdateAssocOrder(TempDropShptPostBuffer);
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeGetCountryCode>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<GetCountryCode>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetCountryCode(SalesHeader,SalesLine,CountryRegionCode,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(CountryRegionCode);
    
    IF SalesLine."Shipment No." <> '' THEN BEGIN
      SalesShipmentHeader.GET(SalesLine."Shipment No.");
      EXIT(
        GetCountryRegionCode(
          SalesLine."Sell-to Customer No.",
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeInitAssocItemJnlLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InitAssocItemJnlLine>
    Code lines:
    OnBeforeInitAssocItemJnlLine(ItemJnlLine,SalesOrderHeader,SalesOrderLine,PurchHeader); <=====================
    
    WITH ItemJnlLine DO BEGIN
      INIT;
      CopyDocumentFields(
        "Document Type"::"Sales Shipment",SalesOrderHeader."Shipping No.",'',SrcCode,SalesOrderHeader."Posting No. Series");
    
      CopyFromSalesHeader(SalesOrderHeader);
      "Country/Region Code" := GetCountryCode(SalesOrderLine,SalesOrderHeader);
      "Posting Date" := PurchHeader."Posting Date";
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeInsertPostedHeaders>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CheckAndUpdate>
    Code lines:
    ...
      LockTables(PurchHeader);
    
      SourceCodeSetup.GET;
      SrcCode := SourceCodeSetup.Purchases;
    
      OnBeforeInsertPostedHeaders(PurchHeader,TempWhseRcptHeader,TempWhseShptHeader); <=====================
      InsertPostedHeaders(PurchHeader);
    
      UpdateIncomingDocument("Incoming Document Entry No.","Posting Date",GenJnlLineDocNo);
    END;
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeInsertReceiptHeader>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertReceiptHeader>
    Code lines:
    IsHandled := FALSE;
    OnBeforeInsertReceiptHeader(PurchHeader,PurchRcptHeader,IsHandled,SuppressCommit); <=====================
    
    WITH PurchHeader DO BEGIN
      IF NOT IsHandled THEN BEGIN
        PurchRcptHeader.INIT;
        PurchRcptHeader.TRANSFERFIELDS(PurchHeader);
        PurchRcptHeader."No." := "Receiving No.";
        IF "Document Type" = "Document Type"::Order THEN BEGIN
          PurchRcptHeader."Order No. Series" := "No. Series";
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeInvoicePostingBufferSetAmounts>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<FillInvoicePostBuffer>
    Code lines:
    ...
    END;
    
    DeferralUtilities.AdjustTotalAmountForDeferralsNoBase(
      PurchLine."Deferral Code",AmtToDefer,AmtToDeferACY,TotalAmount,TotalAmountACY);
    
    OnBeforeInvoicePostingBufferSetAmounts( <=====================
      PurchLine,TempInvoicePostBuffer,InvoicePostBuffer,
      TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY,TotalVATBase,TotalVATBaseACY);
    
    IF PurchLine."VAT Calculation Type" = PurchLine."VAT Calculation Type"::"Reverse Charge VAT" THEN BEGIN
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeInvoiceRoundingAmount>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InvoiceRounding>
    Code lines:
    ...
        TotalPurchLine."Amount Including VAT" -
        ROUND(
          TotalPurchLine."Amount Including VAT",Currency."Invoice Rounding Precision",Currency.InvoiceRoundingDirection),
        Currency."Amount Rounding Precision");
    
    OnBeforeInvoiceRoundingAmount( <=====================
      PurchHeader,TotalPurchLine."Amount Including VAT",UseTempData,InvoiceRoundingAmount,SuppressCommit);
    IF InvoiceRoundingAmount <> 0 THEN BEGIN
      VendPostingGr.GET(PurchHeader."Vendor Posting Group");
      VendPostingGr.TESTFIELD("Invoice Rounding Account");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeItemJnlPostLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
    
      TempHandlingSpecification.RESET;
      TempHandlingSpecification.DELETEALL;
    
      IsHandled := FALSE;
      OnBeforeItemJnlPostLine(ItemJnlLine,PurchLine,PurchHeader,SuppressCommit,IsHandled); <=====================
      IF NOT IsHandled THEN
        IF PurchLine."Job No." <> '' THEN BEGIN
          PostJobConsumptionBeforePurch := IsPurchaseReturn;
          IF PostJobConsumptionBeforePurch THEN
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeLockTables>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<LockTables>
    Code lines:
    OnBeforeLockTables(PurchHeader,PreviewMode,SuppressCommit); <=====================
    
    PurchLine.LOCKTABLE;
    SalesLine.LOCKTABLE;
    GetGLSetup;
    IF NOT GLSetup.OptimGLEntLockForMultiuserEnv THEN BEGIN
      GLEntry.LOCKTABLE;
      IF GLEntry.FINDLAST THEN;
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostAssocItemJnlLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostAssocItemJnlLine>
    Code lines:
    ...
    
    InitAssocItemJnlLine(ItemJnlLine,SalesOrderHeader,SalesOrderLine,PurchHeader,QtyToBeShipped,QtyToBeShippedBase);
    
    IF SalesOrderLine."Job Contract Entry No." = 0 THEN BEGIN
      TransferReservToItemJnlLine(SalesOrderLine,ItemJnlLine,PurchLine,QtyToBeShippedBase,TRUE);
      OnBeforePostAssocItemJnlLine(ItemJnlLine,SalesOrderLine,SuppressCommit,PurchLine); <=====================
      ItemJnlPostLine.RunWithCheck(ItemJnlLine);
      // Handle Item Tracking
      IF ItemJnlPostLine.CollectTrackingSpecification(TempHandlingSpecification2) THEN BEGIN
        IF TempHandlingSpecification2.FINDSET THEN
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostBalancingEntry>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostBalancingEntry>
    Code lines:
    ...
        "Amount (LCY)" :=
          TotalPurchLineLCY2."Amount Including VAT" +
          ROUND(VendLedgEntry."Remaining Pmt. Disc. Possible" / VendLedgEntry."Adjusted Currency Factor");
      "Allow Zero-Amount Posting" := TRUE;
    
      OnBeforePostBalancingEntry(GenJnlLine,PurchHeader,TotalPurchLine2,TotalPurchLineLCY2,PreviewMode,SuppressCommit); <=====================
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostBalancingEntry(GenJnlLine,PurchHeader,TotalPurchLine2,TotalPurchLineLCY2,SuppressCommit,GenJnlPostLine);
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostCombineSalesOrderShipment>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostCombineSalesOrderShipment>
    Code lines:
    OnBeforePostCombineSalesOrderShipment(PurchHeader,TempDropShptPostBuffer); <=====================
    
    ArchiveSalesOrders(TempDropShptPostBuffer);
    WITH PurchHeader DO
      IF TempDropShptPostBuffer.FINDSET THEN BEGIN
        SalesSetup.GET;
        REPEAT
          SalesOrderHeader.GET(SalesOrderHeader."Document Type"::Order,TempDropShptPostBuffer."Order No.");
          InsertSalesShptHeader(SalesOrderHeader,PurchHeader,SalesShptHeader);
          ApprovalsMgmt.PostApprovalEntries(RECORDID,SalesShptHeader.RECORDID,SalesShptHeader."No.");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostCommitPurchaseDoc>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CheckAndUpdate>
    Code lines:
    ...
    
      ModifyHeader := UpdatePostingNos(PurchHeader);
    
      DropShipOrder := UpdateAssosOrderPostingNos(PurchHeader);
    
      OnBeforePostCommitPurchaseDoc(PurchHeader,GenJnlPostLine,PreviewMode,ModifyHeader,SuppressCommit,TempPurchLineGlobal); <=====================
      IF NOT PreviewMode AND ModifyHeader THEN BEGIN
        MODIFY;
        COMMIT;
      END;
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostGLAccICLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostGLAccICLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforePostGLAccICLine(PurchHeader,PurchLine,ICGenJnlLineNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF (PurchLine."No." <> '') AND NOT PurchLine."System-Created Entry" THEN BEGIN
      GLAcc.GET(PurchLine."No.");
      GLAcc.TESTFIELD("Direct Posting");
      IF (PurchLine."Job No." <> '') AND (PurchLine."Qty. to Invoice" <> 0) THEN BEGIN
        CreateJobPurchLine(JobPurchLine,PurchLine,PurchHeader."Prices Including VAT");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostGLAndVendor>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostGLAndVendor>
    Code lines:
    OnBeforePostGLAndVendor(PurchHeader,TempInvoicePostBuffer,PreviewMode,SuppressCommit,GenJnlPostLine); <=====================
    
    WITH PurchHeader DO BEGIN
      // Post purchase and VAT to G/L entries from buffer
      PostInvoicePostingBuffer(PurchHeader,TempInvoicePostBuffer);
    
      // Check External Document number
      IF PurchSetup."Ext. Doc. No. Mandatory" OR (GenJnlLineExtDocNo <> '') THEN
        CheckExternalDocumentNumber(VendLedgEntry,PurchHeader);
    
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostInvoicePostBuffer>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostInvoicePostingBuffer>
    Code lines:
    OnBeforePostInvoicePostBuffer(PurchHeader,TempInvoicePostBuffer,TotalPurchLine,TotalPurchLineLCY); <=====================
    
    LineCount := 0;
    IF TempInvoicePostBuffer.FIND('+') THEN
      REPEAT
        LineCount := LineCount + 1;
        IF GUIALLOWED AND NOT HideProgressWindow THEN
          Window.UPDATE(3,LineCount);
    
        CASE TempInvoicePostBuffer."VAT Calculation Type" OF
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostInvPostBuffer>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostInvoicePostBufferLine>
    Code lines:
    ...
            "FA Posting Type" := "FA Posting Type"::Appreciation;
        END;
        CopyFromInvoicePostBufferFA(InvoicePostBuffer);
      END;
    
      OnBeforePostInvPostBuffer(GenJnlLine,InvoicePostBuffer,PurchHeader,GenJnlPostLine,PreviewMode,SuppressCommit); <=====================
      GLEntryNo := RunGenJnlPostLine(GenJnlLine);
      OnAfterPostInvPostBuffer(GenJnlLine,InvoicePostBuffer,PurchHeader,GLEntryNo,SuppressCommit,GenJnlPostLine);
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostItemChargePerOrder>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemChargePerOrder>
    Code lines:
    OnBeforePostItemChargePerOrder( <=====================
      PurchHeader,PurchLine,ItemJnlLine2,ItemChargePurchLine,TempTrackingSpecificationChargeAssmt,SuppressCommit,
      TempItemChargeAssgntPurch);
    
    WITH TempItemChargeAssgntPurch DO BEGIN
      PurchLine.TESTFIELD("Allow Item Charge Assignment",TRUE);
      ItemJnlLine2."Document No." := GenJnlLineDocNo;
      ItemJnlLine2."External Document No." := GenJnlLineExtDocNo;
      ItemJnlLine2."Item Charge No." := "Item Charge No.";
      ItemJnlLine2.Description := ItemChargePurchLine.Description;
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostItemJnlLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemJnlLine>
    Code lines:
    IF NOT ItemJnlRollRndg THEN BEGIN
      RemAmt := 0;
      RemDiscAmt := 0;
    END;
    
    OnBeforePostItemJnlLine( <=====================
      PurchHeader,PurchLine,QtyToBeReceived,QtyToBeReceivedBase,QtyToBeInvoiced,QtyToBeInvoicedBase,
      ItemLedgShptEntryNo,ItemChargeNo,TrackingSpecification,SuppressCommit);
    
    WITH ItemJnlLine DO BEGIN
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostItemJnlLineJobConsumption>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
    
      IF NOT Subcontracting THEN
        PostItemJnlLineTracking(
          PurchLine,TempWhseTrackingSpecification,TempTrackingSpecificationChargeAssmt,PostWhseJnlLine,QtyToBeInvoiced);
    
      OnBeforePostItemJnlLineJobConsumption( <=====================
        ItemJnlLine,PurchLine,PurchInvHeader,PurchCrMemoHeader,QtyToBeInvoiced,QtyToBeInvoicedBase,SrcCode);
    
      IF PurchLine."Job No." <> '' THEN
        IF NOT PostJobConsumptionBeforePurch THEN
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostItemTrackingForReceiptCondition>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemTrackingForReceiptCondition>
    Code lines:
    Condition := PurchLine.Type = PurchLine.Type::Item;
    OnBeforePostItemTrackingForReceiptCondition(PurchLine,PurchRcptLine,Condition); <=====================
    EXIT(Condition);
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostItemTrackingForShipmentCondition>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemTrackingForShipmentCondition>
    Code lines:
    Condition := PurchLine.Type = PurchLine.Type::Item;
    OnBeforePostItemTrackingForShipmentCondition(PurchLine,ReturnShipmentLine,Condition); <=====================
    EXIT(Condition);
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostLines>
  Raised in: Codeunit<Purch.-Post>.<OnRun>
    Code lines:
    ...
    TempInvoicePostBuffer.DELETEALL;
    TempDropShptPostBuffer.DELETEALL;
    EverythingInvoiced := TRUE;
    
    // Lines
    OnBeforePostLines(TempPurchLineGlobal,PurchHeader,PreviewMode,SuppressCommit); <=====================
    
    LineCount := 0;
    RoundingLineInserted := FALSE;
    AdjustFinalInvWith100PctPrepmt(TempPurchLineGlobal);
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostPurchaseDoc>
  Raised in: Codeunit<Purch.-Post>.<OnRun>
    Code lines:
    OnBeforePostPurchaseDoc(Rec,PreviewMode,SuppressCommit,HideProgressWindow); <=====================
    
    ValidatePostingAndDocumentDate(Rec);
    
    SavedPreviewMode := PreviewMode;
    SavedSuppressCommit := SuppressCommit;
    ClearAllVariables;
    PreviewMode := SavedPreviewMode;
    SuppressCommit := SavedSuppressCommit;
    
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostUpdateOrderLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostUpdateOrderLine>
    Code lines:
    OnBeforePostUpdateOrderLine(PurchHeader,TempPurchLineGlobal); <=====================
    
    ResetTempLines(TempPurchLine);
    WITH TempPurchLine DO BEGIN
      SETRANGE("Prepayment Line",FALSE);
      SETFILTER(Quantity,'<>0');
      IF FINDSET THEN
        REPEAT
          IF PurchHeader.Receive THEN BEGIN
            "Quantity Received" += "Qty. to Receive";
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostUpdateOrderLineModifyTempLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostUpdateOrderLine>
    Code lines:
    ...
              InitQtyToShip
            ELSE
              InitQtyToReceive2;
          END;
          SetDefaultQuantity;
          OnBeforePostUpdateOrderLineModifyTempLine(TempPurchLine,WhseShip,WhseReceive,SuppressCommit,PurchHeader); <=====================
          ModifyTempLine(TempPurchLine);
          OnAfterPostUpdateOrderLine(TempPurchLine,WhseShip,WhseReceive,SuppressCommit);
        UNTIL NEXT = 0;
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePostVendorEntry>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostVendorEntry>
    Code lines:
    ...
      "Source Currency Amount" := -TotalPurchLine2."Amount Including VAT";
      "Amount (LCY)" := -TotalPurchLineLCY2."Amount Including VAT";
      "Sales/Purch. (LCY)" := -TotalPurchLineLCY2.Amount;
      "Inv. Discount (LCY)" := -TotalPurchLineLCY2."Inv. Discount Amount";
    
      OnBeforePostVendorEntry(GenJnlLine,PurchHeader,TotalPurchLine2,TotalPurchLineLCY2,PreviewMode,SuppressCommit); <=====================
      GenJnlPostLine.RunWithCheck(GenJnlLine);
      OnAfterPostVendorEntry(GenJnlLine,PurchHeader,TotalPurchLine2,TotalPurchLineLCY2,SuppressCommit,GenJnlPostLine);
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchCrMemoHeaderInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertCrMemoHeader>
    Code lines:
    ...
        END;
      END;
      PurchCrMemoHdr."Source Code" := SrcCode;
      PurchCrMemoHdr."User ID" := USERID;
      PurchCrMemoHdr."No. Printed" := 0;
      OnBeforePurchCrMemoHeaderInsert(PurchCrMemoHdr,PurchHeader,SuppressCommit); <=====================
      PurchCrMemoHdr.INSERT(TRUE);
      OnAfterPurchCrMemoHeaderInsert(PurchCrMemoHdr,PurchHeader,SuppressCommit);
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,PurchCrMemoHdr.RECORDID,PurchCrMemoHdr."No.");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchCrMemoLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostPurchLine>
    Code lines:
    ...
          ItemJnlPostLine.CollectValueEntryRelation(TempValueEntryRelation,COPYSTR(PurchCrMemoLine.RowID1,1,100));
          IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
            PurchCrMemoLine."Order No." := "Document No.";
            PurchCrMemoLine."Order Line No." := "Line No.";
          END;
          OnBeforePurchCrMemoLineInsert(PurchCrMemoLine,PurchCrMemoHeader,PurchLine,SuppressCommit); <=====================
          PurchCrMemoLine.INSERT(TRUE);
          OnAfterPurchCrMemoLineInsert(PurchCrMemoLine,PurchCrMemoHeader,PurchLine,SuppressCommit);
          CreatePostedDeferralScheduleFromPurchDoc(xPurchLine,PurchCrMemoLine.GetDocumentType,
            PurchCrMemoHeader."No.",PurchCrMemoLine."Line No.",PurchCrMemoHeader."Posting Date");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchInvHeaderInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertInvoiceHeader>
    Code lines:
    ...
      PurchInvHeader."Payment Reference" := "Payment Reference";
      PurchInvHeader."Payment Method Code" := "Payment Method Code";
      PurchInvHeader."Source Code" := SrcCode;
      PurchInvHeader."User ID" := USERID;
      PurchInvHeader."No. Printed" := 0;
      OnBeforePurchInvHeaderInsert(PurchInvHeader,PurchHeader,SuppressCommit); <=====================
      PurchInvHeader.INSERT(TRUE);
      OnAfterPurchInvHeaderInsert(PurchInvHeader,PurchHeader);
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,PurchInvHeader.RECORDID,PurchInvHeader."No.");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchInvLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostPurchLine>
    Code lines:
    ...
          END ELSE
            IF PurchRcptLine.GET("Receipt No.","Receipt Line No.") THEN BEGIN
              PurchInvLine."Order No." := PurchRcptLine."Order No.";
              PurchInvLine."Order Line No." := PurchRcptLine."Order Line No.";
            END;
          OnBeforePurchInvLineInsert(PurchInvLine,PurchInvHeader,PurchLine,SuppressCommit); <=====================
          PurchInvLine.INSERT(TRUE);
          OnAfterPurchInvLineInsert(
            PurchInvLine,PurchInvHeader,PurchLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit);
          CreatePostedDeferralScheduleFromPurchDoc(xPurchLine,PurchInvLine.GetDocumentType,
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchLineDeleteAll>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<DeleteAfterPosting>
    Code lines:
    ...
            TempPurchLine.DELETELINKS;
        UNTIL TempPurchLine.NEXT = 0;
    
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      OnBeforePurchLineDeleteAll(PurchLine,SuppressCommit); <=====================
      PurchLine.DELETEALL;
    
      DeleteItemChargeAssgnt(PurchHeader);
      PurchCommentLine.DeleteComments("Document Type","No.");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchRcptHeaderInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertReceiptHeader>
    Code lines:
    ...
          PurchRcptHeader."Order No." := "No.";
        END;
        PurchRcptHeader."No. Printed" := 0;
        PurchRcptHeader."Source Code" := SrcCode;
        PurchRcptHeader."User ID" := USERID;
        OnBeforePurchRcptHeaderInsert(PurchRcptHeader,PurchHeader,SuppressCommit); <=====================
        PurchRcptHeader.INSERT(TRUE);
        OnAfterPurchRcptHeaderInsert(PurchRcptHeader,PurchHeader,SuppressCommit);
    
        ApprovalsMgmt.PostApprovalEntries(RECORDID,PurchRcptHeader.RECORDID,PurchRcptHeader."No.");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforePurchRcptLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertReceiptLine>
    Code lines:
    ...
            WhseShptLine,PostedWhseShptHeader,PostedWhseShptLine,TempWhseSplitSpecification);
        END;
      PurchRcptLine."Item Rcpt. Entry No." := InsertRcptEntryRelation(PurchRcptLine);
      PurchRcptLine."Item Charge Base Amount" := ROUND(CostBaseAmount / PurchLine.Quantity * PurchRcptLine.Quantity);
    END;
    OnBeforePurchRcptLineInsert(PurchRcptLine,PurchRcptHeader,PurchLine,SuppressCommit,PostedWhseRcptLine); <=====================
    PurchRcptLine.INSERT(TRUE);
    OnAfterPurchRcptLineInsert(
      PurchLine,PurchRcptLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit,PurchInvHeader);
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeReturnShptHeaderInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertReturnShipmentHeader>
    Code lines:
    ...
      END;
      ReturnShptHeader."No. Series" := "Return Shipment No. Series";
      ReturnShptHeader."No. Printed" := 0;
      ReturnShptHeader."Source Code" := SrcCode;
      ReturnShptHeader."User ID" := USERID;
      OnBeforeReturnShptHeaderInsert(ReturnShptHeader,PurchHeader,SuppressCommit); <=====================
      ReturnShptHeader.INSERT(TRUE);
      OnAfterReturnShptHeaderInsert(ReturnShptHeader,PurchHeader,SuppressCommit);
    
      ApprovalsMgmt.PostApprovalEntries(RECORDID,ReturnShptHeader.RECORDID,ReturnShptHeader."No.");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeReturnShptLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertReturnShipmentLine>
    Code lines:
    ...
        END;
    
      ReturnShptLine."Item Shpt. Entry No." := InsertReturnEntryRelation(ReturnShptLine);
      ReturnShptLine."Item Charge Base Amount" := ROUND(CostBaseAmount / PurchLine.Quantity * ReturnShptLine.Quantity);
    END;
    OnBeforeReturnShptLineInsert(ReturnShptLine,ReturnShptHeader,PurchLine,SuppressCommit); <=====================
    ReturnShptLine.INSERT(TRUE);
    OnAfterReturnShptLineInsert(
      ReturnShptLine,ReturnShptHeader,PurchLine,ItemLedgShptEntryNo,WhseShip,WhseReceive,SuppressCommit,
      TempWhseShptHeader,PurchCrMemoHeader);
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeRevertWarehouseEntry>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<RevertWarehouseEntry>
    Code lines:
    IsHandled := FALSE;
    OnBeforeRevertWarehouseEntry(TempWhseJnlLine,JobNo,PostJobConsumptionBeforePurch,Result,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(Result);
    
    IF PostJobConsumptionBeforePurch OR (JobNo = '') OR PositiveWhseEntrycreated THEN
      EXIT(FALSE);
    
    WITH TempWhseJnlLine DO BEGIN
      "Entry Type" := "Entry Type"::"Negative Adjmt.";
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeRoundAmount>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<RoundAmount>
    Code lines:
    OnBeforeRoundAmount(PurchHeader,PurchLine,PurchLineQty); <=====================
    
    WITH PurchLine DO BEGIN
      IncrAmount(PurchHeader,PurchLine,TotalPurchLine);
      Increment(TotalPurchLine."Net Weight",ROUND(PurchLineQty * "Net Weight",UOMMgt.WeightRndPrecision));
      Increment(TotalPurchLine."Gross Weight",ROUND(PurchLineQty * "Gross Weight",UOMMgt.WeightRndPrecision));
      Increment(TotalPurchLine."Unit Volume",ROUND(PurchLineQty * "Unit Volume",UOMMgt.CubageRndPrecision));
      Increment(TotalPurchLine.Quantity,PurchLineQty);
      IF "Units per Parcel" > 0 THEN
        Increment(TotalPurchLine."Units per Parcel",ROUND(PurchLineQty / "Units per Parcel",1,'>'));
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeSalesShptHeaderInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertSalesShptHeader>
    Code lines:
    ...
      "No." := SalesOrderHeader."Shipping No.";
      "Order No." := SalesOrderHeader."No.";
      "Posting Date" := PurchHeader."Posting Date";
      "Document Date" := PurchHeader."Document Date";
      "No. Printed" := 0;
      OnBeforeSalesShptHeaderInsert(SalesShptHeader,SalesOrderHeader,SuppressCommit); <=====================
      INSERT(TRUE);
      OnAfterSalesShptHeaderInsert(SalesShptHeader,SalesOrderHeader,SuppressCommit);
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeSalesShptLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertSalesShptLine>
    Code lines:
    ...
        Quantity - "Quantity Invoiced";
      IF Quantity <> 0 THEN BEGIN
        "Item Shpt. Entry No." := DropShptPostBuffer."Item Shpt. Entry No.";
        "Item Charge Base Amount" := SalesOrderLine."Line Amount";
      END;
      OnBeforeSalesShptLineInsert(SalesShptLine,SalesShptHeader,SalesOrderLine,SuppressCommit,DropShptPostBuffer); <=====================
      INSERT;
      OnAfterSalesShptLineInsert(SalesShptLine,SalesShptHeader,SalesOrderLine,SuppressCommit,DropShptPostBuffer);
    END;
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostCombineSalesOrderShipment>
    Code lines:
    ...
                SalesShptLine.INIT;
                SalesShptLine.TRANSFERFIELDS(SalesOrderLine);
                SalesShptLine."Document No." := SalesShptHeader."No.";
                SalesShptLine."Order No." := SalesOrderLine."Document No.";
                SalesShptLine."Order Line No." := SalesOrderLine."Line No.";
                OnBeforeSalesShptLineInsert(SalesShptLine,SalesShptHeader,SalesOrderLine,SuppressCommit,TempDropShptPostBuffer); <=====================
                SalesShptLine.INSERT;
                OnAfterSalesShptLineInsert(SalesShptLine,SalesShptHeader,SalesOrderLine,SuppressCommit,TempDropShptPostBuffer);
              UNTIL SalesOrderLine.NEXT = 0;
          UNTIL TempDropShptPostBuffer.NEXT = 0;
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeSendICDocument>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<SendICDocument>
    Code lines:
    OnBeforeSendICDocument(PurchHeader,ModifyHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH PurchHeader DO
      IF "Send IC Document" AND ("IC Status" = "IC Status"::New) AND ("IC Direction" = "IC Direction"::Outgoing) AND
         ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"])
      THEN BEGIN
        ICInboxOutboxMgt.SendPurchDoc(PurchHeader,TRUE);
        "IC Status" := "IC Status"::Pending;
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeTempDeferralLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CalcDeferralAmounts>
    Code lines:
    ...
                    UseDate,PurchHeader."Currency Code",
                    TempDeferralLine.Amount,PurchHeader."Currency Factor"));
              TotalAmount := TotalAmount + TempDeferralLine.Amount;
              TotalAmountLCY := TotalAmountLCY + TempDeferralLine."Amount (LCY)";
            END;
            OnBeforeTempDeferralLineInsert(TempDeferralLine,DeferralLine,PurchLine,DeferralCount,TotalDeferralCount); <=====================
            TempDeferralLine.INSERT;
          UNTIL NEXT = 0;
        END;
      END;
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeTempPrepmtPurchLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CreatePrepmtLines>
    Code lines:
    ...
              TempPrepmtPurchLine."Job No." := "Job No.";
              TempPrepmtPurchLine."Job Task No." := "Job Task No.";
              TempPrepmtPurchLine."Job Line Type" := "Job Line Type";
              TempPrepmtPurchLine."Line No." := NextLineNo;
              NextLineNo := NextLineNo + 10000;
              OnBeforeTempPrepmtPurchLineInsert(TempPrepmtPurchLine,TempPurchLine,PurchHeader,CompleteFunctionality); <=====================
              TempPrepmtPurchLine.INSERT;
    
              TransferExtText.PrepmtGetAnyExtText(
                TempPrepmtPurchLine."No.",DATABASE::"Purch. Inv. Line",
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeTempPrepmtPurchLineModify>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CreatePrepmtLines>
    Code lines:
    ...
                "Direct Unit Cost",TempPrepmtPurchLine."Direct Unit Cost" + "Prepmt Amt to Deduct");
              TempPrepmtPurchLine.VALIDATE("VAT Difference",VATDifference - "Prepmt VAT Diff. to Deduct");
              TempPrepmtPurchLine."Prepmt Amt to Deduct" := PrepmtAmtToDeduct;
              IF "Prepayment %" < TempPrepmtPurchLine."Prepayment %" THEN
                TempPrepmtPurchLine."Prepayment %" := "Prepayment %";
              OnBeforeTempPrepmtPurchLineModify(TempPrepmtPurchLine,TempPurchLine,PurchHeader,CompleteFunctionality); <=====================
              TempPrepmtPurchLine.MODIFY;
            END ELSE BEGIN
              TempPrepmtPurchLine.INIT;
              TempPrepmtPurchLine."Document Type" := PurchHeader."Document Type";
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeTestPurchLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<TestPurchLine>
    Code lines:
    OnBeforeTestPurchLine(PurchLine,PurchHeader,SuppressCommit); <=====================
    
    WITH PurchLine DO BEGIN
      CASE Type OF
        Type::Item:
          DummyTrackingSpecification.CheckItemTrackingQuantity(
            DATABASE::"Purchase Line","Document Type","Document No.","Line No.",
            "Qty. to Receive (Base)","Qty. to Invoice (Base)",PurchHeader.Receive,PurchHeader.Invoice);
        Type::"Charge (Item)":
          TestPurchLineItemCharge(PurchLine);
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeTestPurchLineFixedAsset>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<TestPurchLineFixedAsset>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTestPurchLineFixedAsset(PurchaseLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH PurchaseLine DO BEGIN
      TESTFIELD("Job No.",'');
      TESTFIELD("Depreciation Book Code");
      TESTFIELD("FA Posting Type");
      FixedAsset.GET("No.");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeTestPurchLineItemCharge>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<TestPurchLineItemCharge>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTestPurchLineItemCharge(PurchaseLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH PurchaseLine DO BEGIN
      TESTFIELD(Amount);
      TESTFIELD("Job No.",'');
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeTestPurchLineJob>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<TestPurchLineJob>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTestPurchLineJob(PurchaseLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH PurchaseLine DO
      IF "Job No." <> '' THEN
        TESTFIELD("Job Task No.");
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeTestPurchLineOthers>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<TestPurchLineOthers>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTestPurchLineOthers(PurchaseLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH PurchaseLine DO BEGIN
      TESTFIELD("Depreciation Book Code",'');
      TESTFIELD("FA Posting Type",0);
      TESTFIELD("Maintenance Code",'');
      TESTFIELD("Insurance No.",'');
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeUpdateBlanketOrderLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<UpdateBlanketOrderLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforeUpdateBlanketOrderLine(PurchLine,Ship,Receive,Invoice,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF (PurchLine."Blanket Order No." <> '') AND (PurchLine."Blanket Order Line No." <> 0) AND
       ((Receive AND (PurchLine."Qty. to Receive" <> 0)) OR
        (Ship AND (PurchLine."Return Qty. to Ship" <> 0)) OR
        (Invoice AND (PurchLine."Qty. to Invoice" <> 0)))
    THEN
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeUpdateHandledICInboxTransaction>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<UpdateHandledICInboxTransaction>
    Code lines:
    OnBeforeUpdateHandledICInboxTransaction(PurchHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH PurchHeader DO
      IF "IC Direction" = "IC Direction"::Incoming THEN BEGIN
        CASE "Document Type" OF
          "Document Type"::Invoice:
            HandledICInboxTrans.SETRANGE("Document No.","Vendor Invoice No.");
          "Document Type"::Order:
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeUpdateInvoicedQtyOnPurchRcptLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<UpdateInvoicedQtyOnPurchRcptLine>
    Code lines:
    OnBeforeUpdateInvoicedQtyOnPurchRcptLine(PurchRcptLine,QtyToBeInvoiced,QtyToBeInvoicedBase,SuppressCommit); <=====================
    WITH PurchRcptLine DO BEGIN
      "Quantity Invoiced" := "Quantity Invoiced" + QtyToBeInvoiced;
      "Qty. Invoiced (Base)" := "Qty. Invoiced (Base)" + QtyToBeInvoicedBase;
      "Qty. Rcd. Not Invoiced" := Quantity - "Quantity Invoiced";
      MODIFY;
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeUpdatePrepmtPurchLineWithRounding>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<UpdatePrepmtPurchLineWithRounding>
    Code lines:
    OnBeforeUpdatePrepmtPurchLineWithRounding( <=====================
      PrepmtPurchLine,TotalRoundingAmount,TotalPrepmtAmount,FinalInvoice,PricesInclVATRoundingAmount,
      TotalPurchLine,TotalPurchLineLCY);
    
    WITH PrepmtPurchLine DO BEGIN
      NewAmountIncludingVAT := TotalPrepmtAmount[1] + TotalPrepmtAmount[2] + TotalRoundingAmount[1] + TotalRoundingAmount[2];
      IF "Prepayment %" = 100 THEN
        TotalRoundingAmount[1] -= "Amount Including VAT" + NewAmountIncludingVAT;
      AmountRoundingPrecision :=
        GetAmountRoundingPrecisionInLCY("Document Type","Document No.","Currency Code");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeUpdatePurchLineBeforePost>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<UpdatePurchLineBeforePost>
    Code lines:
    OnBeforeUpdatePurchLineBeforePost(PurchLine,PurchHeader,WhseShip,WhseReceive,RoundingLineInserted,SuppressCommit); <=====================
    
    WITH PurchLine DO BEGIN
      IF NOT (PurchHeader.Receive OR RoundingLineInserted) THEN BEGIN
        "Qty. to Receive" := 0;
        "Qty. to Receive (Base)" := 0;
      END;
    
      IF NOT (PurchHeader.Ship OR RoundingLineInserted) THEN BEGIN
        "Return Qty. to Ship" := 0;
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeValidatePostingAndDocumentDate>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<ValidatePostingAndDocumentDate>
    Code lines:
    OnBeforeValidatePostingAndDocumentDate(PurchaseHeader,SuppressCommit); <=====================
    
    PostingDateExists :=
      BatchProcessingMgt.GetParameterBoolean(
        PurchaseHeader.RECORDID,BatchPostParameterTypes.ReplacePostingDate,ReplacePostingDate) AND
      BatchProcessingMgt.GetParameterBoolean(
        PurchaseHeader.RECORDID,BatchPostParameterTypes.ReplaceDocumentDate,ReplaceDocumentDate) AND
      BatchProcessingMgt.GetParameterDate(
        PurchaseHeader.RECORDID,BatchPostParameterTypes.PostingDate,PostingDate);
    
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnBeforeWhseHandlingRequired>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<WhseHandlingRequired>
    Code lines:
    IsHandled := FALSE;
    OnBeforeWhseHandlingRequired(PurchLine,Required,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(Required);
    
    IF (PurchLine.Type = PurchLine.Type::Item) AND (NOT PurchLine."Drop Shipment") THEN BEGIN
      IF PurchLine."Location Code" = '' THEN BEGIN
        WhseSetup.GET;
        IF PurchLine."Document Type" = PurchLine."Document Type"::"Return Order" THEN
          EXIT(WhseSetup."Require Pick");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnCheckAndUpdateOnBeforeCalcInvDiscount>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CheckAndUpdate>
    Code lines:
    ...
      IF NOT PreviewMode AND ModifyHeader THEN BEGIN
        MODIFY;
        COMMIT;
      END;
    
      OnCheckAndUpdateOnBeforeCalcInvDiscount( <=====================
        PurchHeader,TempWhseRcptHeader,TempWhseShptHeader,WhseReceive,WhseShip,RefreshTempLinesNeeded);
      IF RefreshTempLinesNeeded THEN
        RefreshTempLines(PurchHeader,TempPurchLineGlobal);
      CalcInvDiscount(PurchHeader);
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnCopyAndCheckItemChargeOnBeforeLoop>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CopyAndCheckItemCharge>
    Code lines:
    ...
      CopyItemChargeForPurchLine(TempItemChargeAssgntPurch,TempPurchLine);
    
      SETFILTER("Qty. to Invoice",'<>0');
      IF FINDSET THEN
        REPEAT
          OnCopyAndCheckItemChargeOnBeforeLoop(TempPurchLine,PurchHeader); <=====================
          TESTFIELD("Job No.",'');
          IF PurchHeader.Invoice AND
             ("Qty. to Receive" + "Return Qty. to Ship" <> 0) AND
             ((PurchHeader.Ship OR PurchHeader.Receive) OR
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnCopyToTempLinesOnAfterSetFilters>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CopyToTempLines>
    Code lines:
    PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
    PurchLine.SETRANGE("Document No.",PurchHeader."No.");
    OnCopyToTempLinesOnAfterSetFilters(PurchLine,PurchHeader); <=====================
    IF PurchLine.FINDSET THEN
      REPEAT
        TempPurchLine := PurchLine;
        TempPurchLine.INSERT;
      UNTIL PurchLine.NEXT = 0;
Codeunit<Purch.-Post>.PROCEDURE<OnFillInvoicePostBufferOnAfterInitAmounts>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<FillInvoicePostBuffer>
    Code lines:
    GenPostingSetup.GET(PurchLine."Gen. Bus. Posting Group",PurchLine."Gen. Prod. Posting Group");
    InvoicePostBuffer.PreparePurchase(PurchLine);
    InitAmounts(PurchLine,TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY,AmtToDefer,AmtToDeferACY,DeferralAccount);
    InitVATBase(PurchLine,TotalVATBase,TotalVATBaseACY);
    
    OnFillInvoicePostBufferOnAfterInitAmounts( <=====================
      PurchHeader,PurchLine,PurchLineACY,TempInvoicePostBuffer,InvoicePostBuffer,TotalAmount,TotalAmountACY);
    
    IF PurchSetup."Discount Posting" IN
       [PurchSetup."Discount Posting"::"Invoice Discounts",PurchSetup."Discount Posting"::"All Discounts"]
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnFillInvoicePostingBufferOnAfterUpdateInvoicePostBuffer>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<FillInvoicePostBuffer>
    Code lines:
    ...
    InvoicePostBuffer.UpdateVATBase(TotalVATBase,TotalVATBaseACY);
    InvoicePostBuffer."Deferral Code" := PurchLine."Deferral Code";
    OnAfterFillInvoicePostBuffer(InvoicePostBuffer,PurchLine,TempInvoicePostBuffer,SuppressCommit);
    UpdateInvoicePostBuffer(TempInvoicePostBuffer,InvoicePostBuffer);
    
    OnFillInvoicePostingBufferOnAfterUpdateInvoicePostBuffer(PurchHeader,PurchLine,InvoicePostBuffer,TempInvoicePostBuffer); <=====================
    
    IF PurchLine."Deferral Code" <> '' THEN BEGIN
      OnBeforeFillDeferralPostingBuffer(
        PurchLine,InvoicePostBuffer,TempInvoicePostBuffer,Usedate,InvDefLineNo,DeferralLineNo,SuppressCommit);
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnGetItemChargeLineOnAfterGet>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<GetItemChargeLine>
    Code lines:
    ...
      IF (ItemChargePurchLine."Document Type" <> "Document Type") OR
         (ItemChargePurchLine."Document No." <> "Document No.") OR
         (ItemChargePurchLine."Line No." <> "Document Line No.")
      THEN BEGIN
        ItemChargePurchLine.GET("Document Type","Document No.","Document Line No.");
        OnGetItemChargeLineOnAfterGet(ItemChargePurchLine,PurchHeader); <=====================
        IF NOT PurchHeader.Receive THEN
          ItemChargePurchLine."Qty. to Receive" := 0;
        IF NOT PurchHeader.Ship THEN
          ItemChargePurchLine."Return Qty. to Ship" := 0;
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnInsertICGenJnlLineOnBeforeICGenJnlLineInsert>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<InsertICGenJnlLine>
    Code lines:
    ...
          Amount := PurchLine.Amount;
      END;
      IF "Bal. VAT %" <> 0 THEN
        Amount := ROUND(Amount * (1 + "Bal. VAT %" / 100),Currency."Amount Rounding Precision");
      VALIDATE(Amount);
      OnInsertICGenJnlLineOnBeforeICGenJnlLineInsert(TempICGenJnlLine,PurchHeader,PurchLine,SuppressCommit); <=====================
      INSERT;
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnPostItemChargeOnBeforePostItemJnlLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemCharge>
    Code lines:
    ...
      PurchLine."Inv. Discount Amount" := PurchLine."Inv. Discount Amount" - PurchLineToPost."Inv. Discount Amount";
      PurchLine."Line Discount Amount" := PurchLine."Line Discount Amount" - PurchLineToPost."Line Discount Amount";
      PurchLine."Line Amount" := PurchLine."Line Amount" - PurchLineToPost."Line Amount";
      PurchLine.Quantity := PurchLine.Quantity - QtyToAssign;
    
      OnPostItemChargeOnBeforePostItemJnlLine(PurchLineToPost,PurchLine,QtyToAssign); <=====================
    
      PostItemJnlLine(
        PurchHeader,PurchLineToPost,0,0,QuantityBase,QuantityBase,
        PurchLineToPost."Appl.-to Item Entry","Item Charge No.",DummyTrackingSpecification);
Codeunit<Purch.-Post>.PROCEDURE<OnPostItemChargePerOrderOnAfterCopyToItemJnlLine>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemChargePerOrder>
    Code lines:
    ...
      ItemJnlLine2."Shortcut Dimension 1 Code" := ItemChargePurchLine."Shortcut Dimension 1 Code";
      ItemJnlLine2."Shortcut Dimension 2 Code" := ItemChargePurchLine."Shortcut Dimension 2 Code";
      ItemJnlLine2."Dimension Set ID" := ItemChargePurchLine."Dimension Set ID";
      ItemJnlLine2."Gen. Prod. Posting Group" := ItemChargePurchLine."Gen. Prod. Posting Group";
    
      OnPostItemChargePerOrderOnAfterCopyToItemJnlLine( <=====================
        ItemJnlLine2,ItemChargePurchLine,GLSetup,QtyToInvoice,TempItemChargeAssgntPurch);
    END;
    
    WITH TempTrackingSpecificationChargeAssmt DO BEGIN
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnPostItemChargePerRetShptOnBeforeTestJobNo>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemChargePerRetShpt>
    Code lines:
    ReturnShptLine.GET(
      TempItemChargeAssgntPurch."Applies-to Doc. No.",TempItemChargeAssgntPurch."Applies-to Doc. Line No.");
    
    IsHandled := FALSE;
    OnPostItemChargePerRetShptOnBeforeTestJobNo(ReturnShptLine,IsHandled); <=====================
    IF NOT IsHandled THEN
      ReturnShptLine.TESTFIELD("Job No.",'');
    
    Sign := GetSign(PurchLine."Line Amount");
    IF PurchLine.IsCreditDocType THEN
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnPostItemChargePerSalesRetRcptOnBeforeTestJobNo>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemChargePerRetRcpt>
    Code lines:
    ...
         TempItemChargeAssgntPurch."Applies-to Doc. No.",TempItemChargeAssgntPurch."Applies-to Doc. Line No.")
    THEN
      ERROR(RelatedItemLedgEntriesNotFoundErr);
    
    IsHandled := FALSE;
    OnPostItemChargePerSalesRetRcptOnBeforeTestJobNo(ReturnRcptLine,IsHandled); <=====================
    IF NOT IsHandled THEN
      ReturnRcptLine.TESTFIELD("Job No.",'');
    
    Sign := GetSign(ReturnRcptLine."Quantity (Base)");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnPostItemChargePerSalesShptOnBeforeTestJobNo>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemChargePerSalesShpt>
    Code lines:
    ...
         TempItemChargeAssgntPurch."Applies-to Doc. No.",TempItemChargeAssgntPurch."Applies-to Doc. Line No.")
    THEN
      ERROR(RelatedItemLedgEntriesNotFoundErr);
    
    IsHandled := FALSE;
    OnPostItemChargePerSalesShptOnBeforeTestJobNo(SalesShptLine,IsHandled); <=====================
    IF NOT IsHandled THEN
      SalesShptLine.TESTFIELD("Job No.",'');
    
    Sign := -GetSign(SalesShptLine."Quantity (Base)");
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnPostItemJnlLineJobConsumption>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemJnlLineJobConsumption>
    Code lines:
    IsHandled := FALSE;
    OnPostItemJnlLineJobConsumption( <=====================
      PurchHeader,PurchLine,ItemJournalLine,TempPurchReservEntry,QtyToBeInvoiced,QtyToBeReceived,
      TempTrackingSpecification,PurchItemLedgEntryNo,IsHandled);
    IF IsHandled THEN
      EXIT;
    
    WITH PurchLine DO
      IF "Job No." <> '' THEN BEGIN
        ItemJournalLine."Entry Type" := ItemJournalLine."Entry Type"::"Negative Adjmt.";
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnPostItemJnlLineOnAfterCopyDocumentFields>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemJnlLineCopyDocumentFields>
    Code lines:
    ...
              CopyDocumentFields(
                "Document Type"::"Purchase Invoice",GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode,PurchHeader."Posting No. Series");
        END;
      END;
    
    OnPostItemJnlLineOnAfterCopyDocumentFields(ItemJnlLine,PurchLine,TempWhseRcptHeader,TempWhseShptHeader); <=====================
Codeunit<Purch.-Post>.PROCEDURE<OnPostItemJnlLineOnAfterSetFactor>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemJnlLine>
    Code lines:
    ...
      IF QtyToBeInvoiced <> 0 THEN BEGIN
        IF (QtyToBeInvoicedBase <> 0) AND (PurchLine.Type = PurchLine.Type::Item)THEN
          Factor := QtyToBeInvoicedBase / PurchLine."Qty. to Invoice (Base)"
        ELSE
          Factor := QtyToBeInvoiced / PurchLine."Qty. to Invoice";
        OnPostItemJnlLineOnAfterSetFactor(PurchLine,Factor); <=====================
        Amount := PurchLine.Amount * Factor + RemAmt;
        IF PurchHeader."Prices Including VAT" THEN
          "Discount Amount" :=
            (PurchLine."Line Discount Amount" + PurchLine."Inv. Discount Amount") /
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnPostItemJnlLineOnBeforeCopyDocumentFields>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostItemJnlLineCopyDocumentFields>
    Code lines:
    OnPostItemJnlLineOnBeforeCopyDocumentFields(ItemJnlLine,PurchHeader,PurchLine,WhseReceive,WhseShip,InvtPickPutaway); <=====================
    
    WITH ItemJnlLine DO
      IF QtyToBeReceived = 0 THEN
        IF PurchLine.IsCreditDocType THEN
          CopyDocumentFields(
            "Document Type"::"Purchase Credit Memo",GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode,PurchHeader."Posting No. Series")
        ELSE
          CopyDocumentFields(
            "Document Type"::"Purchase Invoice",GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode,PurchHeader."Posting No. Series")
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnPostPurchLineOnAfterSetEverythingInvoiced>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostPurchLine>
    Code lines:
    ...
      UpdatePurchLineBeforePost(PurchHeader,PurchLine);
    
      IF "Qty. to Invoice" + "Quantity Invoiced" <> Quantity THEN
        EverythingInvoiced := FALSE;
    
      OnPostPurchLineOnAfterSetEverythingInvoiced(PurchLine,EverythingInvoiced); <=====================
    
      IF Quantity <> 0 THEN BEGIN
        TESTFIELD("No.");
        TESTFIELD(Type);
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnPostUpdateInvoiceLineOnAfterPurchOrderLineModify>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<PostUpdateInvoiceLine>
    Code lines:
    ...
              PurchOrderLine."Prepmt. Amt. Inv." - PurchOrderLine."Prepmt Amt Deducted";
            PurchOrderLine."Prepmt VAT Diff. to Deduct" := 0;
          END;
          PurchOrderLine.InitOutstanding;
          PurchOrderLine.MODIFY;
          OnPostUpdateInvoiceLineOnAfterPurchOrderLineModify(PurchOrderLine,TempPurchLine); <=====================
        UNTIL NEXT = 0;
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnReleasePurchDocumentOnBeforeSetStatus>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<ReleasePurchDocument>
    Code lines:
    ...
      IF NOT PreviewMode THEN BEGIN
        MODIFY;
        COMMIT;
      END;
      IsHandled := FALSE;
      OnReleasePurchDocumentOnBeforeSetStatus(PurchHeader,IsHandled); <=====================
      IF NOT IsHandled THEN
        Status := Status::Released;
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnRoundAmountOnBeforeIncrAmount>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<RoundAmount>
    Code lines:
    ...
              Usedate,PurchHeader."Currency Code",
              TotalPurchLine."VAT Base Amount",PurchHeader."Currency Factor")) -
          TotalPurchLineLCY."VAT Base Amount";
      END;
    
      OnRoundAmountOnBeforeIncrAmount(PurchHeader,PurchLine,PurchLineQty,TotalPurchLine,TotalPurchLineLCY); <=====================
    
      IncrAmount(PurchHeader,PurchLine,TotalPurchLineLCY);
      Increment(TotalPurchLineLCY."Unit Cost (LCY)",ROUND(PurchLineQty * "Unit Cost (LCY)"));
    END;
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnRunOnBeforeFinalizePosting>
  Raised in: Codeunit<Purch.-Post>.<OnRun>
    Code lines:
    ...
      PostICGenJnl;
    
    MakeInventoryAdjustment;
    UpdateLastPostingNos(PurchHeader);
    
    OnRunOnBeforeFinalizePosting( <=====================
      PurchHeader,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,ReturnShptHeader,GenJnlPostLine,SuppressCommit);
    
    FinalizePosting(PurchHeader,TempDropShptPostBuffer,EverythingInvoiced);
    
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnUpdateAssocOrderOnAfterSalesOrderLineModify>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<UpdateAssocOrder>
    Code lines:
    ...
          ELSE BEGIN
            SalesOrderLine."Qty. to Ship" := 0;
            SalesOrderLine."Qty. to Ship (Base)" := 0;
          END;
          SalesOrderLine.MODIFY;
          OnUpdateAssocOrderOnAfterSalesOrderLineModify(SalesOrderLine,TempDropShptPostBuffer); <=====================
        UNTIL TempDropShptPostBuffer.NEXT = 0;
        TempDropShptPostBuffer.SETRANGE("Order No.");
      UNTIL TempDropShptPostBuffer.NEXT = 0;
      TempDropShptPostBuffer.DELETEALL;
Codeunit<Purch.-Post>.PROCEDURE<OnUpdateBlanketOrderLineOnBeforeCheck>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<UpdateBlanketOrderLine>
    Code lines:
    ...
        IF ModifyLine THEN BEGIN
          OnUpdateBlanketOrderLineOnBeforeInitOutstanding(BlanketOrderPurchLine,PurchLine);
          BlanketOrderPurchLine.InitOutstanding;
    
          IsHandled := FALSE;
          OnUpdateBlanketOrderLineOnBeforeCheck(BlanketOrderPurchLine,PurchLine,IsHandled); <=====================
          IF NOT IsHandled THEN BEGIN
            IF (BlanketOrderPurchLine.Quantity * BlanketOrderPurchLine."Quantity Received" < 0) OR
               (ABS(BlanketOrderPurchLine.Quantity) < ABS(BlanketOrderPurchLine."Quantity Received"))
            THEN
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnUpdateBlanketOrderLineOnBeforeInitOutstanding>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<UpdateBlanketOrderLine>
    Code lines:
    ...
            BlanketOrderPurchLine."Qty. Invoiced (Base)" + Sign * PurchLine."Qty. to Invoice (Base)";
          ModifyLine := TRUE;
        END;
    
        IF ModifyLine THEN BEGIN
          OnUpdateBlanketOrderLineOnBeforeInitOutstanding(BlanketOrderPurchLine,PurchLine); <=====================
          BlanketOrderPurchLine.InitOutstanding;
    
          IsHandled := FALSE;
          OnUpdateBlanketOrderLineOnBeforeCheck(BlanketOrderPurchLine,PurchLine,IsHandled);
    ...
Codeunit<Purch.-Post>.PROCEDURE<OnUpdateWhseDocumentsOnAfterUpdateWhseRcpt>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<UpdateWhseDocuments>
    Code lines:
    IF WhseReceive THEN BEGIN
      WhsePostRcpt.PostUpdateWhseDocuments(WhseRcptHeader);
      TempWhseRcptHeader.DELETE;
      OnUpdateWhseDocumentsOnAfterUpdateWhseRcpt(WhseRcptHeader); <=====================
    END;
    IF WhseShip THEN BEGIN
      WhsePostShpt.PostUpdateWhseDocuments(WhseShptHeader);
      TempWhseShptHeader.DELETE;
      OnUpdateWhseDocumentsOnAfterUpdateWhseShpt(WhseShptHeader);
    END;
Codeunit<Purch.-Post>.PROCEDURE<OnUpdateWhseDocumentsOnAfterUpdateWhseShpt>
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<UpdateWhseDocuments>
    Code lines:
    ...
      OnUpdateWhseDocumentsOnAfterUpdateWhseRcpt(WhseRcptHeader);
    END;
    IF WhseShip THEN BEGIN
      WhsePostShpt.PostUpdateWhseDocuments(WhseShptHeader);
      TempWhseShptHeader.DELETE;
      OnUpdateWhseDocumentsOnAfterUpdateWhseShpt(WhseShptHeader); <=====================
    END;
Codeunit<Assembly-Post>.PROCEDURE<OnAfterCreateItemJnlLineFromAssemblyHeader>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<PostItemOutput>
    Code lines:
    ...
        ROUND(("Unit Cost" - "Overhead Rate") / (1 + "Indirect Cost %" / 100),
          GLSetup."Unit-Amount Rounding Precision"));
      ItemJnlLine.Correction := IsCorrection;
      UpdateItemCategoryAndGroupCode(ItemJnlLine);
    END;
    OnAfterCreateItemJnlLineFromAssemblyHeader(ItemJnlLine,AssemblyHeader); <=====================
    
    IF IsCorrection THEN
      PostCorrectionItemJnLine(
        ItemJnlLine,AssemblyHeader,ItemJnlPostLine,WhseJnlRegisterLine,DATABASE::"Posted Assembly Header",ApplyToEntryNo)
    ...
Codeunit<Assembly-Post>.PROCEDURE<OnAfterCreateItemJnlLineFromAssemblyLine>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<PostResourceConsumption>
    Code lines:
    ...
      ItemJnlLine.Description := Description;
      ItemJnlLine.Quantity := QtyToConsume;
      ItemJnlLine."Quantity (Base)" := QtyToConsumeBase;
      ItemJnlLine.Correction := IsCorrection;
    END;
    OnAfterCreateItemJnlLineFromAssemblyLine(ItemJnlLine,AssemblyLine); <=====================
    ItemJnlPostLine.RunWithCheck(ItemJnlLine);
    
    WITH ItemJnlLine DO BEGIN
      ResJnlLine.INIT;
    ...
Codeunit<Assembly-Post>.PROCEDURE<OnAfterCreateResJnlLineFromItemJnlLine>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<PostResourceConsumption>
    Code lines:
    ...
      ResJnlLine."Unit Cost" := AssemblyLine."Unit Cost";
      ResJnlLine."Total Cost" := AssemblyLine."Unit Cost" * ResJnlLine.Quantity;
      ResJnlLine."Source Code" := "Source Code";
      ResJnlLine."Posting No. Series" := "Posting No. Series";
      ResJnlLine."Qty. per Unit of Measure" := AssemblyLine."Qty. per Unit of Measure";
      OnAfterCreateResJnlLineFromItemJnlLine(ResJnlLine,ItemJnlLine,AssemblyLine); <=====================
      ResJnlPostLine.RunWithCheck(ResJnlLine);
    END;
    
    TimeSheetMgt.CreateTSLineFromAssemblyLine(AssemblyHeader,AssemblyLine,QtyToConsumeBase);
Codeunit<Assembly-Post>.PROCEDURE<OnAfterCreateWhseJnlLineFromItemJnlLine>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<CreateWhseJnlLine>
    Code lines:
    ...
      IF Location."Directed Put-away and Pick" THEN
        WMSManagement.CalcCubageAndWeight(
          "Item No.","Unit of Measure Code",WhseJnlLine."Qty. (Absolute)",
          WhseJnlLine.Cubage,WhseJnlLine.Weight);
    END;
    OnAfterCreateWhseJnlLineFromItemJnlLine(WhseJnlLine,ItemJnlLine); <=====================
    WMSManagement.CheckWhseJnlLine(WhseJnlLine,0,0,FALSE);
Codeunit<Assembly-Post>.PROCEDURE<OnAfterFinalizePost>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<FinalizePost>
    Code lines:
    ...
        IF NOT AssemblyCommentLine.ISEMPTY THEN
          AssemblyCommentLine.DELETEALL;
      END;
    END;
    
    OnAfterFinalizePost(AssemblyHeader); <=====================
Codeunit<Assembly-Post>.PROCEDURE<OnAfterInitPost>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<InitPost>
    Code lines:
    ...
      END;
    
      GetSourceCode(IsAsmToOrder);
    END;
    
    OnAfterInitPost(AssemblyHeader,SuppressCommit); <=====================
Codeunit<Assembly-Post>.PROCEDURE<OnAfterOnRun>
  Raised in: Codeunit<Assembly-Post>.<OnRun>
    Code lines:
    ...
      COMMIT;
    
    Window.CLOSE;
    Rec := AssemblyHeader;
    
    OnAfterOnRun(AssemblyHeader,SuppressCommit); <=====================
Codeunit<Assembly-Post>.PROCEDURE<OnAfterPost>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<Post>
    Code lines:
    ...
      TESTFIELD("Document Type","Document Type"::Order);
      PostLines(AssemblyHeader,AssemblyLine,PostedAssemblyHeader,ItemJnlPostLine,ResJnlPostLine,WhseJnlRegisterLine);
      PostHeader(AssemblyHeader,PostedAssemblyHeader,ItemJnlPostLine,WhseJnlRegisterLine,NeedUpdateUnitCost);
    END;
    
    OnAfterPost(AssemblyHeader); <=====================
Codeunit<Assembly-Post>.PROCEDURE<OnAfterPostedAssemblyHeaderModify>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<PostHeader>
    Code lines:
    ...
      PostedAssemblyHeader."Quantity (Base)" := QtyToOutputBase;
      PostedAssemblyHeader."Cost Amount" := ROUND(PostedAssemblyHeader.Quantity * "Unit Cost");
    
      InsertHeaderItemEntryRelation(PostedAssemblyHeader,ItemJnlPostLine,ItemLedgEntryNo);
      PostedAssemblyHeader.MODIFY;
      OnAfterPostedAssemblyHeaderModify(PostedAssemblyHeader,AssemblyHeader); <=====================
    END;
Codeunit<Assembly-Post>.PROCEDURE<OnAfterPostedAssemblyLineInsert>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<PostLines>
    Code lines:
    ...
          PostedAssemblyLine."Order No." := "Document No.";
          PostedAssemblyLine."Order Line No." := "Line No.";
          InsertLineItemEntryRelation(PostedAssemblyLine,ItemJnlPostLine,ItemLedgEntryNo);
          OnBeforePostedAssemblyLineInsert(PostedAssemblyLine,AssemblyLine);
          PostedAssemblyLine.INSERT;
          OnAfterPostedAssemblyLineInsert(PostedAssemblyLine,AssemblyLine); <=====================
        UNTIL NEXT = 0;
    END;
Codeunit<Assembly-Post>.PROCEDURE<OnAfterRecreateAsmOrderWithUndo>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<RecreateAsmOrderWithUndo>
    Code lines:
    ...
          RestoreItemTracking(TempItemLedgEntry,"Document No.","Line No.",DATABASE::"Assembly Line","Document Type",0D,"Due Date");
          VerifyAsmLineReservAfterUndo(AsmLine);
        END;
      UNTIL PostedAsmLine.NEXT = 0;
    
    OnAfterRecreateAsmOrderWithUndo(PostedAsmHeader,AsmHeader); <=====================
Codeunit<Assembly-Post>.PROCEDURE<OnAfterUndoInitPost>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<UndoInitPost>
    Code lines:
    ...
    
      TempItemLedgEntry.RESET;
      TempItemLedgEntry.DELETEALL;
    END;
    
    OnAfterUndoInitPost(PostedAsmHeader); <=====================
Codeunit<Assembly-Post>.PROCEDURE<OnAfterUndoPost>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<UndoPost>
    Code lines:
    AssembledItem.GET(PostedAsmHeader."Item No.");
    UndoPostHeader(PostedAsmHeader,ItemJnlPostLine,WhseJnlRegisterLine);
    UndoPostLines(PostedAsmHeader,ItemJnlPostLine,ResJnlPostLine,WhseJnlRegisterLine);
    
    OnAfterUndoPost(PostedAsmHeader,SuppressCommit); <=====================
Codeunit<Assembly-Post>.PROCEDURE<OnAfterUpdateAsmOrderWithUndo>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<UpdateAsmOrderWithUndo>
    Code lines:
    ...
          RestoreItemTracking(TempItemLedgEntry,"Document No.","Line No.",DATABASE::"Assembly Line","Document Type",0D,"Due Date");
          VerifyAsmLineReservAfterUndo(AsmLine);
        END;
      UNTIL PostedAsmLine.NEXT = 0;
    
    OnAfterUpdateAsmOrderWithUndo(PostedAsmHeader,AsmHeader); <=====================
Codeunit<Assembly-Post>.PROCEDURE<OnBeforeFinalizePost>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<FinalizePost>
    Code lines:
    OnBeforeFinalizePost(AssemblyHeader); <=====================
    
    MakeInvtAdjmt;
    
    WITH AssemblyHeader DO BEGIN
      // Delete header and lines
      AssemblyLine.RESET;
      AssemblyLine.SETRANGE("Document Type","Document Type");
      AssemblyLine.SETRANGE("Document No.","No.");
      IF "Remaining Quantity (Base)" = 0 THEN BEGIN
    ...
Codeunit<Assembly-Post>.PROCEDURE<OnBeforeInitPost>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<InitPost>
    Code lines:
    OnBeforeInitPost(AssemblyHeader,SuppressCommit); <=====================
    
    WITH AssemblyHeader DO BEGIN
      TESTFIELD("Document Type");
      TESTFIELD("Posting Date");
      PostingDate := "Posting Date";
      IF GenJnlCheckLine.DateNotAllowed("Posting Date") THEN
        FIELDERROR("Posting Date",Text001);
      TESTFIELD("Item No.");
      CheckDim(AssemblyHeader);
    ...
Codeunit<Assembly-Post>.PROCEDURE<OnBeforeOnRun>
  Raised in: Codeunit<Assembly-Post>.<OnRun>
    Code lines:
    OnBeforeOnRun(Rec,SuppressCommit); <=====================
    
    // Replace posting date if called from batch posting
    ValidatePostingDate(Rec);
    
    CLEARALL;
    AssemblyHeader := Rec;
    
    IF IsAsmToOrder THEN
      TESTFIELD("Assemble to Order",FALSE);
    ...
Codeunit<Assembly-Post>.PROCEDURE<OnBeforePost>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<Post>
    Code lines:
    OnBeforePost(AssemblyHeader); <=====================
    
    WITH AssemblyHeader DO BEGIN
      SuspendStatusCheck(TRUE);
      LockTables(AssemblyLine,AssemblyHeader);
    
      // Insert posted assembly header
      IF "Document Type" = "Document Type"::Order THEN BEGIN
        PostedAssemblyHeader.INIT;
        PostedAssemblyHeader.TRANSFERFIELDS(AssemblyHeader);
    ...
Codeunit<Assembly-Post>.PROCEDURE<OnBeforePostCorrectionItemJnLine>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<PostCorrectionItemJnLine>
    Code lines:
    ...
        ItemJnlLine."Lot No." := TempItemLedgEntry."Lot No.";
        ItemJnlLine."Warranty Date" := TempItemLedgEntry."Warranty Date";
        ItemJnlLine."Item Expiration Date" := TempItemLedgEntry."Expiration Date";
        ItemJnlLine."Item Shpt. Entry No." := 0;
    
        OnBeforePostCorrectionItemJnLine(ItemJnlLine,TempItemLedgEntry); <=====================
    
        ItemJnlPostLine.RunWithCheck(ItemJnlLine);
        PostWhseJnlLine(AssemblyHeader,ItemJnlLine,ItemJnlPostLine,WhseJnlRegisterLine);
      UNTIL TempItemLedgEntry2.NEXT = 0;
Codeunit<Assembly-Post>.PROCEDURE<OnBeforePostedAssemblyLineInsert>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<PostLines>
    Code lines:
    ...
          PostedAssemblyLine."Quantity (Base)" := QtyToConsumeBase;
          PostedAssemblyLine."Cost Amount" := ROUND(PostedAssemblyLine.Quantity * "Unit Cost");
          PostedAssemblyLine."Order No." := "Document No.";
          PostedAssemblyLine."Order Line No." := "Line No.";
          InsertLineItemEntryRelation(PostedAssemblyLine,ItemJnlPostLine,ItemLedgEntryNo);
          OnBeforePostedAssemblyLineInsert(PostedAssemblyLine,AssemblyLine); <=====================
          PostedAssemblyLine.INSERT;
          OnAfterPostedAssemblyLineInsert(PostedAssemblyLine,AssemblyLine);
        UNTIL NEXT = 0;
    END;
Codeunit<Assembly-Post>.PROCEDURE<OnBeforePostItemConsumption>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<PostItemConsumption>
    Code lines:
    ...
      ItemJnlLine.Correction := IsCorrection;
      ItemJnlLine."Applies-to Entry" := "Appl.-to Item Entry";
      UpdateItemCategoryAndGroupCode(ItemJnlLine);
    END;
    
    OnBeforePostItemConsumption(AssemblyHeader,AssemblyLine,ItemJnlLine); <=====================
    
    IF IsCorrection THEN
      PostCorrectionItemJnLine(
        ItemJnlLine,AssemblyHeader,ItemJnlPostLine,WhseJnlRegisterLine,DATABASE::"Posted Assembly Line",ApplyToEntryNo)
    ...
Codeunit<Assembly-Post>.PROCEDURE<OnBeforeRecreatedAsmHeaderInsert>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<RecreateAsmOrderWithUndo>
    Code lines:
    ...
      Quantity := PostedAsmHeader.Quantity + "Assembled Quantity";
      "Quantity (Base)" := PostedAsmHeader."Quantity (Base)" + "Assembled Quantity (Base)";
      InitRemainingQty;
      InitQtyToAssemble;
    
      OnBeforeRecreatedAsmHeaderInsert(AsmHeader,PostedAsmHeader); <=====================
      INSERT;
    
      CopyCommentLines(
        AsmCommentLine."Document Type"::"Posted Assembly","Document Type",
    ...
Codeunit<Assembly-Post>.PROCEDURE<OnPostOnAfterCopyComments>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<Post>
    Code lines:
    ...
        IF AssemblySetup."Copy Comments when Posting" THEN BEGIN
          CopyCommentLines(
            "Document Type",AssemblyCommentLine."Document Type"::"Posted Assembly",
            "No.",PostedAssemblyHeader."No.");
          RecordLinkManagement.CopyLinks(AssemblyHeader,PostedAssemblyHeader);
          OnPostOnAfterCopyComments(AssemblyHeader,PostedAssemblyHeader); <=====================
        END;
      END;
    
      AssembledItem.GET("Item No.");
    ...
Codeunit<Assembly-Post>.PROCEDURE<OnUndoPostHeaderOnAfterTransferFields>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<UndoPostHeader>
    Code lines:
    WITH PostedAsmHeader DO BEGIN
      AsmHeader.TRANSFERFIELDS(PostedAsmHeader);
      OnUndoPostHeaderOnAfterTransferFields(AsmHeader,PostedAsmHeader); <=====================
      AsmHeader."Document Type" := AsmHeader."Document Type"::Order;
      AsmHeader."No." := "Order No.";
    
      PostItemOutput(
        AsmHeader,"No. Series",-Quantity,-"Quantity (Base)",ItemJnlPostLine,WhseJnlRegisterLine,"No.",TRUE,"Item Rcpt. Entry No.");
      InsertHeaderItemEntryRelation(PostedAsmHeader,ItemJnlPostLine,0);
    
    ...
Codeunit<Assembly-Post>.PROCEDURE<OnUndoPostLinesOnAfterTransferFields>
  Raised in: Codeunit<Assembly-Post>.PROCEDURE<UndoPostLines>
    Code lines:
    ...
    
      LineCounter := 0;
      IF FINDSET THEN
        REPEAT
          AsmLine.TRANSFERFIELDS(PostedAsmLine);
          OnUndoPostLinesOnAfterTransferFields(AsmLine,AsmHeader,PostedAsmHeader); <=====================
          AsmLine."Document Type" := AsmHeader."Document Type"::Order;
          AsmLine."Document No." := PostedAsmHeader."Order No.";
    
          LineCounter := LineCounter + 1;
    ...
Codeunit<Azure AD User Management>.PROCEDURE<OnInitialize>
  Raised in: Codeunit<Azure AD User Management>.PROCEDURE<Initialize>
    Code lines:
    ...
    
    IF CanHandle THEN BEGIN
      IF NOT TryCreateGraph(Graph) THEN
        EXIT(FALSE)
    END ELSE
      OnInitialize(Graph); <=====================
    
    IsInitialized := NOT ISNULL(Graph);
    EXIT(IsInitialized);
Codeunit<Application System Constants>.PROCEDURE<OnAfterGetApplicationVersion>
  Raised in: Codeunit<Application System Constants>.PROCEDURE<ApplicationVersion>
    Code lines:
    ApplicationVersion := OriginalApplicationVersion;
    OnAfterGetApplicationVersion(ApplicationVersion); <=====================
Codeunit<Small Business Report Catalog>.PROCEDURE<OnBeforeRunDetailTrialBalanceReport>
  Raised in: Codeunit<Small Business Report Catalog>.PROCEDURE<RunDetailTrialBalanceReport>
    Code lines:
    IsHandled := FALSE;
    OnBeforeRunDetailTrialBalanceReport(UseRequestPage,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    DetailTrialBalance.USEREQUESTPAGE(UseRequestPage);
    
    FileName := FileMgt.ServerTempFileName('xlsx');
    // Render report on the server
    DetailTrialBalance.SAVEASEXCEL(FileName);
    ...
Codeunit<Release Assembly Document>.PROCEDURE<OnAfterReleaseAssemblyDoc>
  Raised in: Codeunit<Release Assembly Document>.<OnRun>
    Code lines:
    ...
    MODIFY;
    
    IF "Document Type" = "Document Type"::Order THEN
      WhseAssemblyRelease.Release(Rec);
    
    OnAfterReleaseAssemblyDoc(Rec); <=====================
Codeunit<Release Assembly Document>.PROCEDURE<OnAfterReopenAssemblyDoc>
  Raised in: Codeunit<Release Assembly Document>.PROCEDURE<Reopen>
    Code lines:
    ...
      MODIFY(TRUE);
    
      IF "Document Type" = "Document Type"::Order THEN
        WhseAssemblyRelease.Reopen(AssemblyHeader);
    
      OnAfterReopenAssemblyDoc(AssemblyHeader); <=====================
    END;
Codeunit<Release Assembly Document>.PROCEDURE<OnBeforeReleaseAssemblyDoc>
  Raised in: Codeunit<Release Assembly Document>.<OnRun>
    Code lines:
    IF Status = Status::Released THEN
      EXIT;
    
    OnBeforeReleaseAssemblyDoc(Rec); <=====================
    
    AssemblyLine.SETRANGE("Document Type","Document Type");
    AssemblyLine.SETRANGE("Document No.","No.");
    AssemblyLine.SETFILTER(Type,'<>%1',AssemblyLine.Type::" ");
    AssemblyLine.SETFILTER(Quantity,'<>0');
    IF NOT AssemblyLine.FIND('-') THEN
    ...
Codeunit<Release Assembly Document>.PROCEDURE<OnBeforeReopenAssemblyDoc>
  Raised in: Codeunit<Release Assembly Document>.PROCEDURE<Reopen>
    Code lines:
    WITH AssemblyHeader DO BEGIN
      IF Status = Status::Open THEN
        EXIT;
    
      OnBeforeReopenAssemblyDoc(AssemblyHeader); <=====================
    
      Status := Status::Open;
      MODIFY(TRUE);
    
      IF "Document Type" = "Document Type"::Order THEN
    ...
Codeunit<Invite External Accountant>.PROCEDURE<OnInvitationCreateNewUser>
  Raised in: Codeunit<Invite External Accountant>.PROCEDURE<CreateNewUser>
    Code lines:
    ...
      Count := Count + 1;
      Graph.TryGetUserByObjectId(InvitedUserId,GuestGraphUser);
    UNTIL (Graph.GetUserAssignedPlans(GuestGraphUser).Count > 1) OR (Count = 10);
    
    IF Graph.GetUserAssignedPlans(GuestGraphUser).Count > 1 THEN BEGIN
      OnInvitationCreateNewUser(TRUE); <=====================
      AzureADUserManagement.CreateNewUserFromGraphUser(GuestGraphUser);
    END ELSE
      OnInvitationCreateNewUser(FALSE); <=====================
  Raised in: Codeunit<Invite External Accountant>.PROCEDURE<CreateNewUser>
    Code lines:
    ...
      Count := Count + 1;
      Graph.TryGetUserByObjectId(InvitedUserId,GuestGraphUser);
    UNTIL (Graph.GetUserAssignedPlans(GuestGraphUser).Count > 1) OR (Count = 10);
    
    IF Graph.GetUserAssignedPlans(GuestGraphUser).Count > 1 THEN BEGIN
      OnInvitationCreateNewUser(TRUE); <=====================
      AzureADUserManagement.CreateNewUserFromGraphUser(GuestGraphUser);
    END ELSE
      OnInvitationCreateNewUser(FALSE); <=====================
Codeunit<Whse.-Assembly Release>.PROCEDURE<OnBeforeWhseRequestInsert>
  Raised in: Codeunit<Whse.-Assembly Release>.PROCEDURE<CreateWhseRqst>
    Code lines:
    ...
      WhseRqst."Document Status" := WhseRqst."Document Status"::Released;
      WhseRqst."Location Code" := AssemblyLine."Location Code";
      WhseRqst."Destination Type" := WhseRqst."Destination Type"::Item;
      WhseRqst."Destination No." := AssemblyHeader."Item No.";
      WhseRqst."Completely Handled" := AssemblyCompletelyHandled(AssemblyHeader,AssemblyLine."Location Code");
      OnBeforeWhseRequestInsert(WhseRqst,AssemblyLine,AssemblyHeader); <=====================
      IF NOT WhseRqst.INSERT THEN
        WhseRqst.MODIFY;
    END;
Codeunit<Assembly Line Management>.PROCEDURE<OnAfterTransferBOMComponent>
  Raised in: Codeunit<Assembly Line Management>.PROCEDURE<AddBOMLine2>
    Code lines:
    ...
      AssemblyLine."Position 3" := BOMComponent."Position 3";
      IF "Location Code" <> '' THEN
        IF AssemblyLine.IsInventoriableItem THEN
          AssemblyLine.VALIDATE("Location Code","Location Code");
    
      OnAfterTransferBOMComponent(AssemblyLine,BOMComponent); <=====================
    
      AssemblyLine.MODIFY(TRUE);
    END;
Codeunit<Assembly Line Management>.PROCEDURE<OnBeforeReplaceAssemblyLines>
  Raised in: Codeunit<Assembly Line Management>.PROCEDURE<UpdateAssemblyLines>
    Code lines:
    ...
    NoOfLinesFound := CopyAssemblyData(AsmHeader,TempAssemblyHeader,TempAssemblyLine);
    IF ReplaceLinesFromBOM THEN BEGIN
      TempAssemblyLine.DELETEALL;
      IF NOT ((AsmHeader."Quantity (Base)" = 0) OR (AsmHeader."Item No." = '')) THEN BEGIN  // condition to replace asm lines
        IsHandled := FALSE;
        OnBeforeReplaceAssemblyLines(AsmHeader,TempAssemblyLine,IsHandled); <=====================
        IF NOT IsHandled THEN BEGIN
          SetLinkToBOM(AsmHeader,BOMComponent);
          IF BOMComponent.FINDSET THEN
            REPEAT
    ...
Codeunit<Assembly Line Management>.PROCEDURE<OnBeforeShowAvailability>
  Raised in: Codeunit<Assembly Line Management>.PROCEDURE<ShowAvailability>
    Code lines:
    IsHandled := FALSE;
    OnBeforeShowAvailability(TempAssemblyHeader,TempAssemblyLine,ShowPageEvenIfEnoughComponentsAvailable,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    AssemblySetup.GET;
    IF NOT GUIALLOWED OR
       TempAssemblyLine.ISEMPTY OR
       (NOT AssemblySetup."Stockout Warning" AND NOT ShowPageEvenIfEnoughComponentsAvailable) OR
       NOT GetWarningMode
    ...
Codeunit<Assembly Line Management>.PROCEDURE<OnBeforeUpdateAssemblyLines>
  Raised in: Codeunit<Assembly Line Management>.PROCEDURE<UpdateAssemblyLines>
    Code lines:
    OnBeforeUpdateAssemblyLines(AsmHeader,OldAsmHeader,FieldNum,ReplaceLinesFromBOM,CurrFieldNo,CurrentFieldNum); <=====================
    
    IF (FieldNum <> CurrentFieldNum) OR // Update has been called from OnValidate of another field than was originally intended.
       ((NOT (FieldNum IN [AsmHeader.FIELDNO("Item No."),
                           AsmHeader.FIELDNO("Variant Code"),
                           AsmHeader.FIELDNO("Location Code"),
                           AsmHeader.FIELDNO("Starting Date"),
                           AsmHeader.FIELDNO(Quantity),
                           AsmHeader.FIELDNO("Unit of Measure Code"),
                           AsmHeader.FIELDNO("Quantity to Assemble"),
    ...
Codeunit<Postcode Service Manager>.PROCEDURE<OnCheckIsServiceConfigured>
  Raised in: Codeunit<Postcode Service Manager>.PROCEDURE<IsServiceConfigured>
    Code lines:
    OnCheckIsServiceConfigured(ServiceKey,IsConfigured); <=====================
Codeunit<Postcode Service Manager>.PROCEDURE<OnDiscoverPostcodeServices>
  Raised in: Codeunit<Postcode Service Manager>.PROCEDURE<DiscoverPostcodeServices>
    Code lines:
    OnDiscoverPostcodeServices(TempServiceListNameValueBuffer); <=====================
Codeunit<Postcode Service Manager>.PROCEDURE<OnRetrieveAddress>
  Raised in: Codeunit<Postcode Service Manager>.PROCEDURE<TryGetAddress>
    Code lines:
    OnRetrieveAddress(ServiceKey,TempEnteredAutocompleteAddress,TempSelectedAddressNameValueBuffer, <=====================
      TempAutocompleteAddress,IsSuccessful,ErrorMsg);
Codeunit<Postcode Service Manager>.PROCEDURE<OnRetrieveAddressList>
  Raised in: Codeunit<Postcode Service Manager>.PROCEDURE<TryGetAddressList>
    Code lines:
    OnRetrieveAddressList(ServiceKey,TempEnteredAutocompleteAddress,TempAddressListNameValueBuffer,IsSuccessful,ErrorMSg); <=====================
Codeunit<Postcode Service Manager>.PROCEDURE<OnShowConfigurationPage>
  Raised in: Codeunit<Postcode Service Manager>.PROCEDURE<ShowConfigurationPage>
    Code lines:
    OnShowConfigurationPage(ServiceKey,IsSuccessful); <=====================
Codeunit<Purch.-Post (Yes/No)>.PROCEDURE<OnAfterConfirmPost>
  Raised in: Codeunit<Purch.-Post (Yes/No)>.PROCEDURE<Code>
    Code lines:
    ...
    
    IF NOT HideDialog THEN
      IF NOT ConfirmPost(PurchaseHeader,DefaultOption) THEN
        EXIT;
    
    OnAfterConfirmPost(PurchaseHeader); <=====================
    
    PurchSetup.GET;
    IF PurchSetup."Post with Job Queue" THEN
      PurchPostViaJobQueue.EnqueuePurchDoc(PurchaseHeader)
    ...
Codeunit<Purch.-Post (Yes/No)>.PROCEDURE<OnAfterPost>
  Raised in: Codeunit<Purch.-Post (Yes/No)>.PROCEDURE<Code>
    Code lines:
    ...
    ELSE BEGIN
      OnBeforeRunPurchPost(PurchaseHeader);
      CODEUNIT.RUN(CODEUNIT::"Purch.-Post",PurchaseHeader);
    END;
    
    OnAfterPost(PurchaseHeader); <=====================
Codeunit<Purch.-Post (Yes/No)>.PROCEDURE<OnBeforeConfirmPost>
  Raised in: Codeunit<Purch.-Post (Yes/No)>.PROCEDURE<Code>
    Code lines:
    HideDialog := FALSE;
    IsHandled := FALSE;
    DefaultOption := 3;
    OnBeforeConfirmPost(PurchaseHeader,HideDialog,IsHandled,DefaultOption); <=====================
    IF  IsHandled THEN
      EXIT;
    
    IF NOT HideDialog THEN
      IF NOT ConfirmPost(PurchaseHeader,DefaultOption) THEN
        EXIT;
    ...
Codeunit<Purch.-Post (Yes/No)>.PROCEDURE<OnBeforeRunPurchPost>
  Raised in: Codeunit<Purch.-Post (Yes/No)>.PROCEDURE<Code>
    Code lines:
    ...
    
    PurchSetup.GET;
    IF PurchSetup."Post with Job Queue" THEN
      PurchPostViaJobQueue.EnqueuePurchDoc(PurchaseHeader)
    ELSE BEGIN
      OnBeforeRunPurchPost(PurchaseHeader); <=====================
      CODEUNIT.RUN(CODEUNIT::"Purch.-Post",PurchaseHeader);
    END;
    
    OnAfterPost(PurchaseHeader);
Codeunit<Assembly Info-Pane Management>.PROCEDURE<OnBeforeLookupItem>
  Raised in: Codeunit<Assembly Info-Pane Management>.PROCEDURE<LookupItem>
    Code lines:
    IsHandled := FALSE;
    OnBeforeLookupItem(AsmLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    AsmLine.TESTFIELD(Type,AsmLine.Type::Item);
    AsmLine.TESTFIELD("No.");
    GetItem(AsmLine);
    PAGE.RUNMODAL(PAGE::"Item Card",Item);
Codeunit<Help & Support Management>.PROCEDURE<OnBeforeGetSupportInformation>
  Raised in: Codeunit<Help & Support Management>.PROCEDURE<GetSupportInformation>
    Code lines:
    OnBeforeGetSupportInformation(Name,Email,Url); <=====================
    
    IF (Name <> '') OR (Email <> '') OR (Url <> '') THEN
      EXIT;
    
    IF NOT SupportContactInformation.READPERMISSION THEN
      EXIT;
    
    IF NOT SupportContactInformation.GET THEN
      EXIT;
    ...
Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnAfterCopyProfile>
  Raised in: Codeunit<Conf./Personalization Mgt.>.PROCEDURE<CopyProfile>
    Code lines:
    ...
        UNTIL ProfileMetadata.NEXT = 0;
    END;
    
    CopyProfilePageMetadata(Profile,NewProfile);
    
    OnAfterCopyProfile(Profile,NewProfile); <=====================
Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnAfterGetDefaultRoleCenter>
  Raised in: Codeunit<Conf./Personalization Mgt.>.PROCEDURE<DefaultRoleCenterID>
    Code lines:
    ...
      RoleCenterID := PAGE::"Business Manager Role Center"; // BUSINESS MANAGER
    
    IF IdentityManagement.IsInvAppId THEN
      RoleCenterID := PAGE::"O365 Sales Activities RC"; // O365 Sales Activities RC
    
    OnAfterGetDefaultRoleCenter(RoleCenterID); <=====================
    EXIT(RoleCenterID);
Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnBeforeOpenSettings>
  Raised in: Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OpenSettings>
    Code lines:
    SettingsPageID := GetSettingsPageID;
    OnBeforeOpenSettings(SettingsPageID,Handled); <=====================
    IF NOT Handled THEN
      PAGE.RUN(SettingsPageID);
Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnGetBuiltInRoleCenterFilter>
  Raised in: Codeunit<Conf./Personalization Mgt.>.PROCEDURE<GetBuiltInSaaSProfilesFilter>
    Code lines:
    ...
    PageNos[12] := PAGE::"Whse. Worker WMS Role Center";
    
    FOR i := 1 TO ARRAYLEN(PageNos) DO
      RoleCenterFilter := RoleCenterFilter + '|' + FORMAT(PageNos[i]);
    RoleCenterFilter := DELSTR(RoleCenterFilter,1,1);
    OnGetBuiltInRoleCenterFilter(RoleCenterFilter); <=====================
Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnInitializeProfiles>
  Raised in: Codeunit<Conf./Personalization Mgt.>.PROCEDURE<InitializeProfiles>
    Code lines:
    ...
    InsertProfile(AccountingServicesTxt,AccountingServicesDescriptionTxt,9023);
    InsertProfile(SecurityAdministratorTxt,SecurityAdministratorDescriptionTxt,9024);
    InsertProfile(AccountantTxt,AccountantDescriptionTxt,9027);
    InsertProfile(O365SalesTxt,O365SalesDescriptionTxt,9029);
    InsertProfile(TeamMemberTxt,TeamMemberDescriptionTxt,9028);
    OnInitializeProfiles; <=====================
    COMMIT;
Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnProfileChanged>
  Raised in: Codeunit<Conf./Personalization Mgt.>.PROCEDURE<SetCurrentProfileID>
    Code lines:
    ...
      UserPersonalization."User SID" := USERSECURITYID;
      UserPersonalization."Profile ID" := ProfileID;
      UserPersonalization.INSERT(TRUE);
    END;
    
    OnProfileChanged(PrevProfileID,ProfileID); <=====================
  Raised in: Codeunit<Conf./Personalization Mgt.>.PROCEDURE<SetCurrentProfile>
    Code lines:
    ...
      UserPersonalization.Scope := AllProfile.Scope;
      UserPersonalization."App ID" := AllProfile."App ID";
      UserPersonalization.INSERT(TRUE);
    END;
    
    OnProfileChanged(PrevAllProfile."Profile ID",AllProfile."Profile ID"); <=====================
Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnRoleCenterOpen>
  Raised in: Codeunit<Conf./Personalization Mgt.>.PROCEDURE<RaiseOnOpenRoleCenterEvent>
    Code lines:
    OnRoleCenterOpen; <=====================
Codeunit<Conf./Personalization Mgt.>.PROCEDURE<OnTranslateProfileID>
  Raised in: Codeunit<Conf./Personalization Mgt.>.PROCEDURE<TranslateProfileID>
    Code lines:
    ...
        UPPERCASE(SecurityAdministratorTxt):
          ProfileIDTxt := SecurityAdministratorTxt;
        UPPERCASE(TeamMemberTxt):
          ProfileIDTxt := TeamMemberTxt;
      END;
      OnTranslateProfileID(ProfileID,ProfileIDTxt); <=====================
      TranslatedProfileID :=
        SetTranslationParameters(WindowsLanguage,ProfileIDTxt,TempLanguage,TranslateToLanguageID);
    UNTIL (WindowsLanguage.NEXT = 0) OR (TranslatedProfileID <> '');
    
    ...
Codeunit<Application Area Mgmt.>.PROCEDURE<OnBeforeLookupExperienceTier>
  Raised in: Codeunit<Application Area Mgmt.>.PROCEDURE<LookupExperienceTier>
    Code lines:
    ...
    
    IF NOT ExperienceTierSetup.Invoicing THEN
      IF TempExperienceTierBuffer.GET(ExperienceTierSetup.FIELDNO(Invoicing)) THEN
        TempExperienceTierBuffer.DELETE;
    
    OnBeforeLookupExperienceTier(TempExperienceTierBuffer); <=====================
    IF PAGE.RUNMODAL(0,TempExperienceTierBuffer,TempExperienceTierBuffer."Experience Tier") = ACTION::LookupOK THEN BEGIN
      NewExperienceTier := TempExperienceTierBuffer."Experience Tier";
      EXIT(TRUE);
    END;
Codeunit<Application Area Mgmt.>.PROCEDURE<OnGetBasicExperienceAppAreas>
  Raised in: Codeunit<Application Area Mgmt.>.PROCEDURE<GetBasicExperienceAppAreas>
    Code lines:
    TempApplicationAreaSetup.Basic := TRUE;
    TempApplicationAreaSetup."Relationship Mgmt" := TRUE;
    TempApplicationAreaSetup."Record Links" := TRUE;
    TempApplicationAreaSetup.Notes := TRUE;
    
    OnGetBasicExperienceAppAreas(TempApplicationAreaSetup); <=====================
Codeunit<Application Area Mgmt.>.PROCEDURE<OnGetEssentialExperienceAppAreas>
  Raised in: Codeunit<Application Area Mgmt.>.PROCEDURE<GetEssentialExperienceAppAreas>
    Code lines:
    ...
    TempApplicationAreaSetup.Dimensions := TRUE;
    TempApplicationAreaSetup.ADCS := TRUE;
    TempApplicationAreaSetup.Planning := TRUE;
    TempApplicationAreaSetup.Comments := TRUE;
    
    OnGetEssentialExperienceAppAreas(TempApplicationAreaSetup); <=====================
Codeunit<Application Area Mgmt.>.PROCEDURE<OnGetPremiumExperienceAppAreas>
  Raised in: Codeunit<Application Area Mgmt.>.PROCEDURE<GetPremiumExperienceAppAreas>
    Code lines:
    GetEssentialExperienceAppAreas(TempApplicationAreaSetup);
    TempApplicationAreaSetup.Service := TRUE;
    TempApplicationAreaSetup.Manufacturing := TRUE;
    
    OnGetPremiumExperienceAppAreas(TempApplicationAreaSetup); <=====================
Codeunit<Application Area Mgmt.>.PROCEDURE<OnSetExperienceTier>
  Raised in: Codeunit<Application Area Mgmt.>.PROCEDURE<SetExperienceTier>
    Code lines:
    ...
        BEGIN
          TempApplicationAreaSetup.INIT;
          TempApplicationAreaSetup.Invoicing := TRUE;
        END;
      ELSE BEGIN
        OnSetExperienceTier(ExperienceTierSetup,TempApplicationAreaSetup,ApplicationAreasSet); <=====================
        IF NOT ApplicationAreasSet THEN
          EXIT;
      END;
    END;
    ...
Codeunit<Application Area Mgmt.>.PROCEDURE<OnValidateApplicationAreas>
  Raised in: Codeunit<Application Area Mgmt.>.PROCEDURE<ValidateApplicationAreasSet>
    Code lines:
    ...
      IF NOT ApplicationAreaSetupsMatch(TempApplicationAreaSetup,TempApplicationAreaSetup2,FALSE) THEN
        ERROR(InvoicingExpTierErr);
    END ELSE
      TempApplicationAreaSetup.TESTFIELD(Basic,TRUE);
    
    OnValidateApplicationAreas(ExperienceTierSetup,TempApplicationAreaSetup); <=====================
Codeunit<Application Area Mgmt. Facade>.PROCEDURE<OnBeforeLookupExperienceTier>
  Raised in: Codeunit<Application Area Mgmt. Facade>.PROCEDURE<RaiseOnBeforeLookupExperienceTier>
    Code lines:
    OnBeforeLookupExperienceTier(TempExperienceTierBuffer) <=====================
Codeunit<Application Area Mgmt. Facade>.PROCEDURE<OnGetBasicExperienceAppAreas>
  Raised in: Codeunit<Application Area Mgmt. Facade>.PROCEDURE<RaiseOnGetBasicExperienceAppAreas>
    Code lines:
    OnGetBasicExperienceAppAreas(TempApplicationAreaSetup) <=====================
Codeunit<Application Area Mgmt. Facade>.PROCEDURE<OnGetEssentialExperienceAppAreas>
  Raised in: Codeunit<Application Area Mgmt. Facade>.PROCEDURE<RaiseOnGetEssentialExperienceAppAreas>
    Code lines:
    OnGetEssentialExperienceAppAreas(TempApplicationAreaSetup); <=====================
Codeunit<Application Area Mgmt. Facade>.PROCEDURE<OnGetPremiumExperienceAppAreas>
  Raised in: Codeunit<Application Area Mgmt. Facade>.PROCEDURE<RaiseOnGetPremiumExperienceAppAreas>
    Code lines:
    OnGetPremiumExperienceAppAreas(TempApplicationAreaSetup); <=====================
Codeunit<Application Area Mgmt. Facade>.PROCEDURE<OnSetExperienceTier>
  Raised in: Codeunit<Application Area Mgmt. Facade>.PROCEDURE<RaiseOnSetExperienceTier>
    Code lines:
    OnSetExperienceTier(ExperienceTierSetup,TempApplicationAreaSetup,ApplicationAreasSet); <=====================
Codeunit<Application Area Mgmt. Facade>.PROCEDURE<OnValidateApplicationAreas>
  Raised in: Codeunit<Application Area Mgmt. Facade>.PROCEDURE<RaiseOnValidateApplicationAreas>
    Code lines:
    OnValidateApplicationAreas(ExperienceTierSetup,TempApplicationAreaSetup) <=====================
Codeunit<Purch.-Post + Print>.PROCEDURE<OnAfterConfirmPost>
  Raised in: Codeunit<Purch.-Post + Print>.PROCEDURE<Code>
    Code lines:
    ...
    
    IF NOT HideDialog THEN
      IF NOT ConfirmPost(PurchHeader,DefaultOption) THEN
        EXIT;
    
    OnAfterConfirmPost(PurchHeader); <=====================
    
    PurchSetup.GET;
    IF PurchSetup."Post & Print with Job Queue" THEN
      PurchasePostViaJobQueue.EnqueuePurchDoc(PurchHeader)
    ...
Codeunit<Purch.-Post + Print>.PROCEDURE<OnAfterPost>
  Raised in: Codeunit<Purch.-Post + Print>.PROCEDURE<Code>
    Code lines:
    ...
    ELSE BEGIN
      CODEUNIT.RUN(CODEUNIT::"Purch.-Post",PurchHeader);
      GetReport(PurchHeader);
    END;
    
    OnAfterPost(PurchHeader); <=====================
Codeunit<Purch.-Post + Print>.PROCEDURE<OnBeforeConfirmPost>
  Raised in: Codeunit<Purch.-Post + Print>.PROCEDURE<Code>
    Code lines:
    HideDialog := FALSE;
    IsHandled := FALSE;
    DefaultOption := 3;
    OnBeforeConfirmPost(PurchHeader,HideDialog,IsHandled,DefaultOption); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT HideDialog THEN
      IF NOT ConfirmPost(PurchHeader,DefaultOption) THEN
        EXIT;
    ...
Codeunit<Purch.-Post + Print>.PROCEDURE<OnBeforeGetReport>
  Raised in: Codeunit<Purch.-Post + Print>.PROCEDURE<GetReport>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetReport(PurchHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH PurchHeader DO
      CASE "Document Type" OF
        "Document Type"::Order:
          BEGIN
            IF Receive THEN
    ...
Codeunit<Purch.-Post + Print>.PROCEDURE<OnBeforePrintCrMemo>
  Raised in: Codeunit<Purch.-Post + Print>.PROCEDURE<PrintCrMemo>
    Code lines:
    IsHandled := FALSE;
    OnBeforePrintCrMemo(PurchHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF PurchHeader."Last Posting No." = '' THEN
      PurchCrMemoHdr."No." := PurchHeader."No."
    ELSE
      PurchCrMemoHdr."No." := PurchHeader."Last Posting No.";
    PurchCrMemoHdr.SETRECFILTER;
Codeunit<Purch.-Post + Print>.PROCEDURE<OnBeforePrintInvoice>
  Raised in: Codeunit<Purch.-Post + Print>.PROCEDURE<PrintInvoice>
    Code lines:
    IsHandled := FALSE;
    OnBeforePrintInvoice(PurchHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF PurchHeader."Last Posting No." = '' THEN
      PurchInvHeader."No." := PurchHeader."No."
    ELSE
      PurchInvHeader."No." := PurchHeader."Last Posting No.";
    PurchInvHeader.SETRECFILTER;
Codeunit<Purch.-Post + Print>.PROCEDURE<OnBeforePrintReceive>
  Raised in: Codeunit<Purch.-Post + Print>.PROCEDURE<PrintReceive>
    Code lines:
    IsHandled := FALSE;
    OnBeforePrintReceive(PurchHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    PurchRcptHeader."No." := PurchHeader."Last Receiving No.";
    PurchRcptHeader.SETRECFILTER;
    PurchRcptHeader.PrintRecords(FALSE);
Codeunit<Purch.-Post + Print>.PROCEDURE<OnBeforePrintShip>
  Raised in: Codeunit<Purch.-Post + Print>.PROCEDURE<PrintShip>
    Code lines:
    IsHandled := FALSE;
    OnBeforePrintShip(PurchHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    ReturnShptHeader."No." := PurchHeader."Last Return Shipment No.";
    ReturnShptHeader.SETRECFILTER;
    ReturnShptHeader.PrintRecords(FALSE);
Codeunit<Assembly Header-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
  Raised in: Codeunit<Assembly Header-Reserve>.PROCEDURE<VerifyChange>
    Code lines:
    ...
      IF ShowError THEN
        NewAssemblyHeader.FIELDERROR("Variant Code",Text003);
      HasError := TRUE;
    END;
    
    OnVerifyChangeOnBeforeHasError(NewAssemblyHeader,OldAssemblyHeader,HasError,ShowError); <=====================
    
    IF HasError THEN
      IF (NewAssemblyHeader."Item No." <> OldAssemblyHeader."Item No.") OR
         FindReservEntry(NewAssemblyHeader,ReservEntry)
    ...
Codeunit<Assembly Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
  Raised in: Codeunit<Assembly Line-Reserve>.PROCEDURE<VerifyChange>
    Code lines:
    ...
      IF ShowError THEN
        NewAssemblyLine.FIELDERROR("Location Code",Text003);
      HasError := TRUE;
    END;
    
    OnVerifyChangeOnBeforeHasError(NewAssemblyLine,OldAssemblyLine,HasError,ShowError); <=====================
    
    IF (NewAssemblyLine.Type = NewAssemblyLine.Type::Item) AND (OldAssemblyLine.Type = OldAssemblyLine.Type::Item) AND
       (NewAssemblyLine."Bin Code" <> OldAssemblyLine."Bin Code")
    THEN
    ...
Codeunit<Purch.-Quote to Order (Yes/No)>.PROCEDURE<OnBeforePurchQuoteToOrder>
  Raised in: Codeunit<Purch.-Quote to Order (Yes/No)>.<OnRun>
    Code lines:
    TESTFIELD("Document Type","Document Type"::Quote);
    IF NOT ConfirmManagement.ConfirmProcess(Text000,TRUE) THEN
      EXIT;
    
    IsHandled := FALSE;
    OnBeforePurchQuoteToOrder(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    PurchQuoteToOrder.RUN(Rec);
    ...
Codeunit<Blnkt Purch Ord. to Ord. (Y/N)>.PROCEDURE<OnBeforeRun>
  Raised in: Codeunit<Blnkt Purch Ord. to Ord. (Y/N)>.PROCEDURE<IsOnRunHandled>
    Code lines:
    IsHandled := FALSE;
    OnBeforeRun(PurchaseHeader,IsHandled); <=====================
    EXIT(IsHandled);
Codeunit<Time Sheet Management>.PROCEDURE<OnBeforeToTimeSheetLineInsert>
  Raised in: Codeunit<Time Sheet Management>.PROCEDURE<CopyPrevTimeSheetLines>
    Code lines:
    ...
              ToTimeSheetLine.VALIDATE("Cause of Absence Code",FromTimeSheetLine."Cause of Absence Code");
          END;
          ToTimeSheetLine.Description := FromTimeSheetLine.Description;
          ToTimeSheetLine.Chargeable := FromTimeSheetLine.Chargeable;
          ToTimeSheetLine."Work Type Code" := FromTimeSheetLine."Work Type Code";
          OnBeforeToTimeSheetLineInsert(ToTimeSheetLine,FromTimeSheetLine); <=====================
          ToTimeSheetLine.INSERT;
        UNTIL FromTimeSheetLine.NEXT = 0;
    END;
Codeunit<Time Sheet Management>.PROCEDURE<OnCheckInsertJobPlanningLine>
  Raised in: Codeunit<Time Sheet Management>.PROCEDURE<FillJobPlanningBuffer>
    Code lines:
    ...
    JobPlanningLine.SETRANGE("No.",TimeSheetHeader."Resource No.");
    JobPlanningLine.SETRANGE("Planning Date",TimeSheetHeader."Starting Date",TimeSheetHeader."Ending Date");
    IF JobPlanningLine.FINDSET THEN
      REPEAT
        SkipLine := FALSE;
        OnCheckInsertJobPlanningLine(JobPlanningLine,JobPlanningLineBuffer,SkipLine); <=====================
        IF NOT SkipLine THEN BEGIN
          JobPlanningLineBuffer.SETRANGE("Job No.",JobPlanningLine."Job No.");
          JobPlanningLineBuffer.SETRANGE("Job Task No.",JobPlanningLine."Job Task No.");
          IF JobPlanningLineBuffer.ISEMPTY THEN BEGIN
    ...
Codeunit<Time Sheet Approval Management>.PROCEDURE<OnAfterApprove>
  Raised in: Codeunit<Time Sheet Approval Management>.PROCEDURE<Approve>
    Code lines:
    ...
        Type::Absence:
          PostAbsence(TimeSheetLine);
        Type::Service:
          AfterApproveServiceOrderTmeSheetEntries(TimeSheetLine);
      END;
      OnAfterApprove(TimeSheetLine); <=====================
    END;
Codeunit<Time Sheet Approval Management>.PROCEDURE<OnAfterReject>
  Raised in: Codeunit<Time Sheet Approval Management>.PROCEDURE<Reject>
    Code lines:
    ...
        EXIT;
      TESTFIELD(Status,Status::Submitted);
      CheckApproverPermissions(TimeSheetLine);
      Status := Status::Rejected;
      MODIFY(TRUE);
      OnAfterReject(TimeSheetLine); <=====================
    END;
Codeunit<Time Sheet Approval Management>.PROCEDURE<OnAfterReopenApproved>
  Raised in: Codeunit<Time Sheet Approval Management>.PROCEDURE<ReopenApproved>
    Code lines:
    ...
      CheckApproverPermissions(TimeSheetLine);
      CheckLinkedServiceDoc(TimeSheetLine);
      UpdateApproverID;
      Status := Status::Submitted;
      MODIFY(TRUE);
      OnAfterReopenApproved(TimeSheetLine); <=====================
    END;
Codeunit<Time Sheet Approval Management>.PROCEDURE<OnAfterReopenSubmitted>
  Raised in: Codeunit<Time Sheet Approval Management>.PROCEDURE<ReopenSubmitted>
    Code lines:
    ...
      IF Status = Status::Open THEN
        EXIT;
      TESTFIELD(Status,Status::Submitted);
      Status := Status::Open;
      MODIFY(TRUE);
      OnAfterReopenSubmitted(TimeSheetLine); <=====================
    END;
Codeunit<Time Sheet Approval Management>.PROCEDURE<OnAfterSubmit>
  Raised in: Codeunit<Time Sheet Approval Management>.PROCEDURE<Submit>
    Code lines:
    ...
          TESTFIELD("Service Order No.");
      END;
      UpdateApproverID;
      Status := Status::Submitted;
      MODIFY(TRUE);
      OnAfterSubmit(TimeSheetLine); <=====================
    END;
Codeunit<Time Sheet Approval Management>.PROCEDURE<OnBeforeInsertEmployeeAbsence>
  Raised in: Codeunit<Time Sheet Approval Management>.PROCEDURE<PostAbsence>
    Code lines:
    ...
        EmployeeAbsence.VALIDATE("Employee No.",Employee."No.");
        EmployeeAbsence.VALIDATE("From Date",TimeSheetDetail.Date);
        EmployeeAbsence.VALIDATE("Cause of Absence Code",TimeSheetDetail."Cause of Absence Code");
        EmployeeAbsence.VALIDATE("Unit of Measure Code",Resource."Base Unit of Measure");
        EmployeeAbsence.VALIDATE(Quantity,TimeSheetDetail.Quantity);
        OnBeforeInsertEmployeeAbsence(EmployeeAbsence,TimeSheetLine,TimeSheetDetail); <=====================
        EmployeeAbsence.INSERT(TRUE);
    
        TimeSheetDetail.Posted := TRUE;
        TimeSheetDetail.MODIFY;
    ...
Codeunit<Mail Management>.PROCEDURE<OnAfterDeleteTempAttachments>
  Raised in: Codeunit<Mail Management>.PROCEDURE<DeleteTempAttachments>
    Code lines:
    ...
    IF TryDeleteTempAttachment(EmailItem."Attachment File Path 4") THEN;
    IF TryDeleteTempAttachment(EmailItem."Attachment File Path 5") THEN;
    IF TryDeleteTempAttachment(EmailItem."Attachment File Path 6") THEN;
    IF TryDeleteTempAttachment(EmailItem."Attachment File Path 7") THEN;
    
    OnAfterDeleteTempAttachments(EmailItem); <=====================
Codeunit<Mail Management>.PROCEDURE<OnAfterGetSenderEmailAddress>
  Raised in: Codeunit<Mail Management>.PROCEDURE<GetSenderEmailAddress>
    Code lines:
    IF NOT IsEnabled THEN
      EXIT('');
    QualifyFromAddress;
    
    OnAfterGetSenderEmailAddress(TempEmailItem); <=====================
    EXIT(TempEmailItem."From Address");
Codeunit<Mail Management>.PROCEDURE<OnBeforeCheckValidEmailAddress>
  Raised in: Codeunit<Mail Management>.PROCEDURE<CheckValidEmailAddresses>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckValidEmailAddress(Recipients,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF Recipients = '' THEN
      ERROR(InvalidEmailAddressErr,Recipients);
    
    TmpRecipients := DELCHR(Recipients,'<>',';');
    WHILE STRPOS(TmpRecipients,';') > 1 DO BEGIN
    ...
Codeunit<Mail Management>.PROCEDURE<OnBeforeDoSending>
  Raised in: Codeunit<Mail Management>.PROCEDURE<CanSend>
    Code lines:
    OnBeforeDoSending(CancelSending); <=====================
    EXIT(NOT CancelSending);
Codeunit<Mail Management>.PROCEDURE<OnBeforeQualifyFromAddress>
  Raised in: Codeunit<Mail Management>.PROCEDURE<QualifyFromAddress>
    Code lines:
    OnBeforeQualifyFromAddress(TempEmailItem); <=====================
    
    IF TempEmailItem."From Address" <> '' THEN
      EXIT;
    
    MailForEmails.CollectCurrentUserEmailAddresses(TempPossibleEmailNameValueBuffer);
    
    IF GraphSupported THEN
      IF AssignFromAddressIfExist(TempPossibleEmailNameValueBuffer,'GraphSetup') THEN
        EXIT;
    ...
Codeunit<Mail Management>.PROCEDURE<OnBeforeSendMailOnWinClient>
  Raised in: Codeunit<Mail Management>.PROCEDURE<SendMailOnWinClient>
    Code lines:
    ...
      WITH TempEmailItem DO BEGIN
        IF "Attachment File Path" <> '' THEN BEGIN
          ClientAttachmentFilePath := DownloadPdfOnClient("Attachment File Path");
          ClientAttachmentFullName := FileManagement.MoveAndRenameClientFile(ClientAttachmentFilePath,"Attachment Name",'');
        END;
        OnBeforeSendMailOnWinClient(TempEmailItem); <=====================
        IF Mail.NewMessageAsync("Send to","Send CC","Send BCC",Subject,GetBodyText,ClientAttachmentFullName,NOT HideMailDialog) THEN BEGIN
          FileManagement.DeleteClientFile(ClientAttachmentFullName);
          MailSent := TRUE;
          EXIT(TRUE)
    ...
Codeunit<Mail Management>.PROCEDURE<OnBeforeSentViaSMTP>
  Raised in: Codeunit<Mail Management>.PROCEDURE<SendViaSMTP>
    Code lines:
    ...
      IF "Send CC" <> '' THEN
        SMTPMail.AddCC("Send CC");
      IF "Send BCC" <> '' THEN
        SMTPMail.AddBCC("Send BCC");
    END;
    OnBeforeSentViaSMTP(TempEmailItem); <=====================
    MailSent := SMTPMail.TrySend;
    IF NOT MailSent AND NOT HideSMTPError THEN
      ERROR(SMTPMail.GetLastSendMailErrorText);
    EXIT(MailSent);
Codeunit<Purch.-Quote to Order>.PROCEDURE<OnAfterInsertAllPurchOrderLines>
  Raised in: Codeunit<Purch.-Quote to Order>.<OnRun>
    Code lines:
    ...
    CheckForBlockedLines;
    
    CreatePurchHeader(Rec,Vend."Prepayment %");
    
    TransferQuoteToOrderLines(PurchQuoteLine,Rec,PurchOrderLine,PurchOrderHeader,Vend);
    OnAfterInsertAllPurchOrderLines(PurchOrderLine,Rec); <=====================
    
    PurchSetup.GET;
    CASE PurchSetup."Archive Quotes" OF
      PurchSetup."Archive Quotes"::Always:
    ...
Codeunit<Purch.-Quote to Order>.PROCEDURE<OnAfterInsertPurchOrderLine>
  Raised in: Codeunit<Purch.-Quote to Order>.PROCEDURE<TransferQuoteToOrderLines>
    Code lines:
    ...
          PrepmtMgt.SetPurchPrepaymentPct(PurchOrderLine,PurchOrderHeader."Posting Date");
          PurchOrderLine.VALIDATE("Prepayment %");
          PurchOrderLine.DefaultDeferralCode;
          OnBeforeInsertPurchOrderLine(PurchOrderLine,PurchOrderHeader,PurchQuoteLine,PurchQuoteHeader);
          PurchOrderLine.INSERT;
          OnAfterInsertPurchOrderLine(PurchQuoteLine,PurchOrderLine); <=====================
          PurchLineReserve.VerifyQuantity(PurchOrderLine,PurchQuoteLine);
        END;
      UNTIL PurchQuoteLine.NEXT = 0;
Codeunit<Purch.-Quote to Order>.PROCEDURE<OnAfterRun>
  Raised in: Codeunit<Purch.-Quote to Order>.<OnRun>
    Code lines:
    ...
    END;
    
    IF NOT ShouldRedistributeInvoiceAmount THEN
      PurchCalcDiscByType.ResetRecalculateInvoiceDisc(PurchOrderHeader);
    
    OnAfterRun(Rec,PurchOrderHeader); <=====================
Codeunit<Purch.-Quote to Order>.PROCEDURE<OnBeforeCreatePurchHeader>
  Raised in: Codeunit<Purch.-Quote to Order>.PROCEDURE<CreatePurchHeader>
    Code lines:
    OnBeforeCreatePurchHeader(PurchHeader); <=====================
    
    WITH PurchHeader DO BEGIN
      PurchOrderHeader := PurchHeader;
      PurchOrderHeader."Document Type" := PurchOrderHeader."Document Type"::Order;
      PurchOrderHeader."No. Printed" := 0;
      PurchOrderHeader.Status := PurchOrderHeader.Status::Open;
      PurchOrderHeader."No." := '';
      PurchOrderHeader."Quote No." := "No.";
      PurchOrderHeader.InitRecord;
    ...
Codeunit<Purch.-Quote to Order>.PROCEDURE<OnBeforeDeletePurchQuote>
  Raised in: Codeunit<Purch.-Quote to Order>.<OnRun>
    Code lines:
    ...
    AssignItemCharges("Document Type","No.",PurchOrderHeader."Document Type",PurchOrderHeader."No.");
    
    ApprovalsMgmt.CopyApprovalEntryQuoteToOrder(RECORDID,PurchOrderHeader."No.",PurchOrderHeader.RECORDID);
    
    IsHandled := FALSE;
    OnBeforeDeletePurchQuote(Rec,PurchOrderHeader,IsHandled); <=====================
    IF NOT IsHandled THEN BEGIN
      ApprovalsMgmt.DeleteApprovalEntries(RECORDID);
      DELETELINKS;
      DELETE;
    ...
Codeunit<Purch.-Quote to Order>.PROCEDURE<OnBeforeInsertPurchOrderHeader>
  Raised in: Codeunit<Purch.-Quote to Order>.PROCEDURE<CreatePurchHeader>
    Code lines:
    ...
      PurchOrderHeader."Inbound Whse. Handling Time" := "Inbound Whse. Handling Time";
    
      PurchOrderHeader."Prepayment %" := PrepmtPercent;
      IF PurchOrderHeader."Posting Date" = 0D THEN
        PurchOrderHeader."Posting Date" := WORKDATE;
      OnBeforeInsertPurchOrderHeader(PurchOrderHeader,PurchHeader); <=====================
      PurchOrderHeader.MODIFY;
    END;
Codeunit<Purch.-Quote to Order>.PROCEDURE<OnBeforeInsertPurchOrderLine>
  Raised in: Codeunit<Purch.-Quote to Order>.PROCEDURE<TransferQuoteToOrderLines>
    Code lines:
    ...
          IF Vend."Prepayment %" <> 0 THEN
            PurchOrderLine."Prepayment %" := Vend."Prepayment %";
          PrepmtMgt.SetPurchPrepaymentPct(PurchOrderLine,PurchOrderHeader."Posting Date");
          PurchOrderLine.VALIDATE("Prepayment %");
          PurchOrderLine.DefaultDeferralCode;
          OnBeforeInsertPurchOrderLine(PurchOrderLine,PurchOrderHeader,PurchQuoteLine,PurchQuoteHeader); <=====================
          PurchOrderLine.INSERT;
          OnAfterInsertPurchOrderLine(PurchQuoteLine,PurchOrderLine);
          PurchLineReserve.VerifyQuantity(PurchOrderLine,PurchQuoteLine);
        END;
Codeunit<Purch.-Quote to Order>.PROCEDURE<OnBeforeRun>
  Raised in: Codeunit<Purch.-Quote to Order>.<OnRun>
    Code lines:
    OnBeforeRun(Rec); <=====================
    
    TESTFIELD("Document Type","Document Type"::Quote);
    ShouldRedistributeInvoiceAmount := PurchCalcDiscByType.ShouldRedistributeInvoiceDiscountAmount(Rec);
    
    OnCheckPurchasePostRestrictions;
    
    Vend.GET("Buy-from Vendor No.");
    Vend.CheckBlockedVendOnDocs(Vend,FALSE);
    
    ...
Codeunit<Purch.-Quote to Order>.PROCEDURE<OnBeforeTransferQuoteLineToOrderLineLoop>
  Raised in: Codeunit<Purch.-Quote to Order>.PROCEDURE<TransferQuoteToOrderLines>
    Code lines:
    PurchQuoteLine.SETRANGE("Document Type",PurchQuoteHeader."Document Type");
    PurchQuoteLine.SETRANGE("Document No.",PurchQuoteHeader."No.");
    IF PurchQuoteLine.FINDSET THEN
      REPEAT
        IsHandled := FALSE;
        OnBeforeTransferQuoteLineToOrderLineLoop(PurchQuoteLine,PurchQuoteHeader,PurchOrderHeader,IsHandled); <=====================
        IF NOT IsHandled THEN BEGIN
          PurchOrderLine := PurchQuoteLine;
          PurchOrderLine."Document Type" := PurchOrderHeader."Document Type";
          PurchOrderLine."Document No." := PurchOrderHeader."No.";
    ...
Codeunit<Document Report Mgt.>.PROCEDURE<OnAfterGetCustomLayoutCode>
  Raised in: Codeunit<Document Report Mgt.>.PROCEDURE<MergeWordLayout>
    Code lines:
    ...
      IF ReportLayoutSelection.GET(ReportID,COMPANYNAME) AND
         (ReportLayoutSelection.Type = ReportLayoutSelection.Type::"Custom Layout")
      THEN
        CustomLayoutCode := ReportLayoutSelection."Custom Report Layout Code";
    
    OnAfterGetCustomLayoutCode(ReportID,CustomLayoutCode); <=====================
    
    IF CustomLayoutCode <> '' THEN
      IF NOT CustomReportLayout.GET(CustomLayoutCode) THEN
        CustomLayoutCode := '';
    ...
Codeunit<Document Report Mgt.>.PROCEDURE<OnAfterMergeWordDocument>
  Raised in: Codeunit<Document Report Mgt.>.PROCEDURE<MergeWordLayout>
    Code lines:
    ...
    
      ERROR(GETLASTERRORTEXT);
    END;
    
    COMMIT;
    OnAfterMergeWordDocument(ReportID,InStrXmlData,OutTempBlob); <=====================
    
    CurrentFileType := '';
    CASE ReportAction OF
      ReportAction::SaveAsWord:
    ...
Codeunit<Document Report Mgt.>.PROCEDURE<OnBeforeCalculateUpgradeChangeSetSetCustomReportLayoutFilters>
  Raised in: Codeunit<Document Report Mgt.>.PROCEDURE<CalculateUpgradeChangeSet>
    Code lines:
    OnBeforeCalculateUpgradeChangeSetSetCustomReportLayoutFilters(CustomReportLayout); <=====================
    IF CustomReportLayout.FIND('-') THEN
      REPEAT
        ReportUpgradeSet := ReportUpgradeCollection.AddReport(CustomReportLayout."Report ID"); // runtime will load the current XmlPart from metadata
        IF NOT ISNULL(ReportUpgradeSet) THEN
          ReportUpgradeSet.CalculateAutoChangeSet(CustomReportLayout.GetCustomXmlPart);
      UNTIL CustomReportLayout.NEXT <> 1;
Codeunit<Document Report Mgt.>.PROCEDURE<OnBeforeMergeDocument>
  Raised in: Codeunit<Document Report Mgt.>.PROCEDURE<MergeWordLayout>
    Code lines:
    IF ReportAction = ReportAction::Print THEN
      PrinterName := FileName;
    
    OutTempBlob.Blob.CREATEOUTSTREAM(OutStrWordDoc);
    OnBeforeMergeDocument(ReportID,ReportAction,InStrXmlData,PrinterName,OutStrWordDoc,Handled,FileName = ''); <=====================
    IF Handled THEN BEGIN
      IF (FileName <> '') AND OutTempBlob.Blob.HASVALUE THEN
        OutTempBlob.Blob.EXPORT(FileName);
      EXIT;
    END;
    ...
Codeunit<Document Report Mgt.>.PROCEDURE<OnBeforeMergeWordDocument>
  Raised in: Codeunit<Document Report Mgt.>.PROCEDURE<MergeWordLayout>
    Code lines:
    ...
      CustomReportLayout.GetLayoutBlob(InTempBlob);
      InTempBlob.Blob.CREATEINSTREAM(InStrWordDoc);
      ValidateWordLayoutCheckOnly(ReportID,InStrWordDoc);
    END;
    
    OnBeforeMergeWordDocument; <=====================
    
    IF NOT TryXmlMergeWordDocument(InStrWordDoc,InStrXmlData,OutStrWordDoc) THEN BEGIN
      IF TypeHelper.IsMatch(GETLASTERRORTEXT,UnexpectedHexCharacterRegexErr) THEN
        ERROR(UnexpectedCharInDataErr);
    ...
Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnAfterInsertAllPurchOrderLines>
  Raised in: Codeunit<Blanket Purch. Order to Order>.<OnRun>
    Code lines:
    ...
            PurchBlanketOrderLine.MODIFY;
          END;
        END;
      UNTIL PurchBlanketOrderLine.NEXT = 0;
    
    OnAfterInsertAllPurchOrderLines(Rec,PurchOrderHeader); <=====================
    
    IF PurchSetup."Default Posting Date" = PurchSetup."Default Posting Date"::"No Date" THEN BEGIN
      PurchOrderHeader."Posting Date" := 0D;
      PurchOrderHeader.MODIFY;
    ...
Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnAfterPurchOrderLineInsert>
  Raised in: Codeunit<Blanket Purch. Order to Order>.<OnRun>
    Code lines:
    ...
          PurchOrderLine."Dimension Set ID" := PurchBlanketOrderLine."Dimension Set ID";
          PurchOrderLine.DefaultDeferralCode;
          IF IsPurchOrderLineToBeInserted(PurchOrderLine) THEN BEGIN
            OnBeforeInsertPurchOrderLine(PurchOrderLine,PurchOrderHeader,PurchBlanketOrderLine,Rec);
            PurchOrderLine.INSERT;
            OnAfterPurchOrderLineInsert(PurchOrderLine,PurchBlanketOrderLine); <=====================
          END;
    
          IF PurchBlanketOrderLine."Qty. to Receive" <> 0 THEN BEGIN
            PurchBlanketOrderLine.VALIDATE("Qty. to Receive",0);
    ...
Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnAfterResetQuantityFields>
  Raised in: Codeunit<Blanket Purch. Order to Order>.PROCEDURE<ResetQuantityFields>
    Code lines:
    ...
    PurchLine."Quantity Invoiced" := 0;
    PurchLine."Qty. Rcd. Not Invoiced (Base)" := 0;
    PurchLine."Qty. Received (Base)" := 0;
    PurchLine."Qty. Invoiced (Base)" := 0;
    
    OnAfterResetQuantityFields(PurchLine); <=====================
Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnAfterRun>
  Raised in: Codeunit<Blanket Purch. Order to Order>.<OnRun>
    Code lines:
    ...
    IF NOT ShouldRedistributeInvoiceAmount THEN
      PurchCalcDiscByType.ResetRecalculateInvoiceDisc(PurchOrderHeader);
    
    COMMIT;
    
    OnAfterRun(Rec,PurchOrderHeader); <=====================
Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnBeforeCreatePurchHeader>
  Raised in: Codeunit<Blanket Purch. Order to Order>.PROCEDURE<CreatePurchHeader>
    Code lines:
    OnBeforeCreatePurchHeader(PurchHeader); <=====================
    
    WITH PurchHeader DO BEGIN
      PurchOrderHeader := PurchHeader;
      PurchOrderHeader."Document Type" := PurchOrderHeader."Document Type"::Order;
      PurchOrderHeader."No. Printed" := 0;
      PurchOrderHeader.Status := PurchOrderHeader.Status::Open;
      PurchOrderHeader."No." := '';
      PurchOrderHeader.InitRecord;
      PurchOrderLine.LOCKTABLE;
    ...
Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnBeforeInsertPurchOrderHeader>
  Raised in: Codeunit<Blanket Purch. Order to Order>.PROCEDURE<CreatePurchHeader>
    Code lines:
    ...
      PurchOrderHeader."No. Printed" := 0;
      PurchOrderHeader.Status := PurchOrderHeader.Status::Open;
      PurchOrderHeader."No." := '';
      PurchOrderHeader.InitRecord;
      PurchOrderLine.LOCKTABLE;
      OnBeforeInsertPurchOrderHeader(PurchOrderHeader,PurchHeader); <=====================
      PurchOrderHeader.INSERT(TRUE);
    
      IF "Order Date" = 0D THEN
        PurchOrderHeader."Order Date" := WORKDATE
    ...
Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnBeforeInsertPurchOrderLine>
  Raised in: Codeunit<Blanket Purch. Order to Order>.<OnRun>
    Code lines:
    ...
          PurchOrderLine."Shortcut Dimension 1 Code" := PurchBlanketOrderLine."Shortcut Dimension 1 Code";
          PurchOrderLine."Shortcut Dimension 2 Code" := PurchBlanketOrderLine."Shortcut Dimension 2 Code";
          PurchOrderLine."Dimension Set ID" := PurchBlanketOrderLine."Dimension Set ID";
          PurchOrderLine.DefaultDeferralCode;
          IF IsPurchOrderLineToBeInserted(PurchOrderLine) THEN BEGIN
            OnBeforeInsertPurchOrderLine(PurchOrderLine,PurchOrderHeader,PurchBlanketOrderLine,Rec); <=====================
            PurchOrderLine.INSERT;
            OnAfterPurchOrderLineInsert(PurchOrderLine,PurchBlanketOrderLine);
          END;
    
    ...
Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnBeforePurchOrderHeaderModify>
  Raised in: Codeunit<Blanket Purch. Order to Order>.PROCEDURE<CreatePurchHeader>
    Code lines:
    ...
    
      PurchOrderHeader.InitFromPurchHeader(PurchHeader);
      PurchOrderHeader.VALIDATE("Posting Date");
    
      PurchOrderHeader."Prepayment %" := PrepmtPercent;
      OnBeforePurchOrderHeaderModify(PurchOrderHeader,PurchHeader); <=====================
      PurchOrderHeader.MODIFY;
    END;
Codeunit<Blanket Purch. Order to Order>.PROCEDURE<OnBeforeRun>
  Raised in: Codeunit<Blanket Purch. Order to Order>.<OnRun>
    Code lines:
    OnBeforeRun(Rec); <=====================
    
    TESTFIELD("Document Type","Document Type"::"Blanket Order");
    ShouldRedistributeInvoiceAmount := PurchCalcDiscByType.ShouldRedistributeInvoiceDiscountAmount(Rec);
    
    Vend.GET("Buy-from Vendor No.");
    Vend.CheckBlockedVendOnDocs(Vend,FALSE);
    
    ValidatePurchaserOnPurchHeader(Rec,TRUE,FALSE);
    
    ...
Codeunit<Purchase Post via Job Queue>.PROCEDURE<OnBeforeEnqueuePurchDoc>
  Raised in: Codeunit<Purchase Post via Job Queue>.PROCEDURE<EnqueuePurchDocWithUI>
    Code lines:
    OnBeforeEnqueuePurchDoc(PurchHeader,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    WITH PurchHeader DO BEGIN
      IF NOT ("Job Queue Status" IN ["Job Queue Status"::" ","Job Queue Status"::Error]) THEN
        ERROR(WrongJobQueueStatus,"Document Type","No.");
      TempInvoice := Invoice;
      TempRcpt := Receive;
      TempShip := Ship;
    ...
Codeunit<Purchase Post via Job Queue>.PROCEDURE<OnBeforeReleasePurchDoc>
  Raised in: Codeunit<Purchase Post via Job Queue>.PROCEDURE<EnqueuePurchDocWithUI>
    Code lines:
    ...
      IF NOT ("Job Queue Status" IN ["Job Queue Status"::" ","Job Queue Status"::Error]) THEN
        ERROR(WrongJobQueueStatus,"Document Type","No.");
      TempInvoice := Invoice;
      TempRcpt := Receive;
      TempShip := Ship;
      OnBeforeReleasePurchDoc(PurchHeader); <=====================
      IF Status = Status::Open THEN
        CODEUNIT.RUN(CODEUNIT::"Release Purchase Document",PurchHeader);
      Invoice := TempInvoice;
      Receive := TempRcpt;
    ...
Codeunit<Payment Registration Mgt.>.PROCEDURE<OnAfterPostPaymentRegistration>
  Raised in: Codeunit<Payment Registration Mgt.>.PROCEDURE<Post>
    Code lines:
    ...
      END;
    UNTIL TempPaymentRegistrationBuffer.NEXT = 0;
    
    IF NOT PreviewMode THEN BEGIN
      CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post Batch",GenJournalLine);
      OnAfterPostPaymentRegistration(TempPaymentRegistrationBuffer); <=====================
    END ELSE
      GenJnlPostBatch.Preview(GenJournalLine);
Codeunit<Payment Registration Mgt.>.PROCEDURE<OnBeforeGenJournalLineInsert>
  Raised in: Codeunit<Payment Registration Mgt.>.PROCEDURE<Post>
    Code lines:
    ...
        ELSE BEGIN
          VALIDATE("Applies-to Doc. Type",TempPaymentRegistrationBuffer."Document Type");
          VALIDATE("Applies-to Doc. No.",TempPaymentRegistrationBuffer."Document No.");
        END;
        VALIDATE("External Document No.",TempPaymentRegistrationBuffer."External Document No.");
        OnBeforeGenJournalLineInsert(GenJournalLine,TempPaymentRegistrationBuffer); <=====================
        INSERT(TRUE);
      END;
    UNTIL TempPaymentRegistrationBuffer.NEXT = 0;
    
    ...
Codeunit<Identity Management>.PROCEDURE<OnAfterKeyLenCheck>
  Raised in: Codeunit<Identity Management>.PROCEDURE<ValidateKeyStrength>
    Code lines:
    KeyLen := STRLEN(Key);
    
    IF KeyLen < 8 THEN
      EXIT(FALSE);
    
    OnAfterKeyLenCheck(KeyLen,ValidationError); <=====================
    IF ValidationError THEN
      EXIT(FALSE);
    
    FOR i := 1 TO STRLEN(Key) DO BEGIN
    ...
Codeunit<Identity Management>.PROCEDURE<OnBeforeGetApplicationIdentifier>
  Raised in: Codeunit<Identity Management>.PROCEDURE<IsInvAppId>
    Code lines:
    AppId := APPLICATIONIDENTIFIER;
    OnBeforeGetApplicationIdentifier(AppId); <=====================
    EXIT(AppId = InvoiceTok);
  Raised in: Codeunit<Identity Management>.PROCEDURE<IsFinAppId>
    Code lines:
    AppId := APPLICATIONIDENTIFIER;
    OnBeforeGetApplicationIdentifier(AppId); <=====================
    EXIT(AppId = FinancialsTok);
  Raised in: Codeunit<Identity Management>.PROCEDURE<IsNavAppId>
    Code lines:
    AppId := APPLICATIONIDENTIFIER;
    OnBeforeGetApplicationIdentifier(AppId); <=====================
    EXIT(AppId = NavTok);
  Raised in: Codeunit<Identity Management>.PROCEDURE<IsC5AppId>
    Code lines:
    AppId := APPLICATIONIDENTIFIER;
    OnBeforeGetApplicationIdentifier(AppId); <=====================
    EXIT(AppId = C5Tok);
Codeunit<Effective Permissions Mgt.>.PROCEDURE<OnTenantPermissionModified>
  Raised in: Codeunit<Effective Permissions Mgt.>.PROCEDURE<ModifyPermission>
    Code lines:
    ...
    END;
    IF NOT CallModify THEN
      EXIT;
    TenantPermission.MODIFY;
    SendNotification(PermissionBuffer."Permission Set",PassedObjectType,PassedObjectId,PassedUserID,FieldNumChanged,OldValue);
    OnTenantPermissionModified(TenantPermission."Role ID"); <=====================
Codeunit<Data Upgrade Mgt.>.PROCEDURE<OnCheckPreconditionsPerCompany>
  Raised in: Codeunit<Data Upgrade Mgt.>.PROCEDURE<RaiseOnCheckPreconditionsPerCompany>
    Code lines:
    OnCheckPreconditionsPerCompany <=====================
Codeunit<Data Upgrade Mgt.>.PROCEDURE<OnCheckPreconditionsPerDatabase>
  Raised in: Codeunit<Data Upgrade Mgt.>.PROCEDURE<RaiseOnCheckPreconditionsPerDatabase>
    Code lines:
    OnCheckPreconditionsPerDatabase <=====================
Codeunit<Data Upgrade Mgt.>.PROCEDURE<OnIsUpgradeInProgress>
  Raised in: Codeunit<Data Upgrade Mgt.>.PROCEDURE<IsUpgradeInProgress>
    Code lines:
    OnIsUpgradeInProgress(UpgradeIsInProgress); <=====================
Codeunit<Data Upgrade Mgt.>.PROCEDURE<OnUpgradePerCompany>
  Raised in: Codeunit<Data Upgrade Mgt.>.PROCEDURE<RaiseOnUpgradePerCompany>
    Code lines:
    OnUpgradePerCompany <=====================
Codeunit<Data Upgrade Mgt.>.PROCEDURE<OnUpgradePerDatabase>
  Raised in: Codeunit<Data Upgrade Mgt.>.PROCEDURE<RaiseOnUpgradePerDatabase>
    Code lines:
    OnUpgradePerDatabase <=====================
Codeunit<Data Upgrade Mgt.>.PROCEDURE<OnValidateUpgradePerCompany>
  Raised in: Codeunit<Data Upgrade Mgt.>.PROCEDURE<RaiseOnValidateUpgradePerCompany>
    Code lines:
    OnValidateUpgradePerCompany <=====================
Codeunit<Data Upgrade Mgt.>.PROCEDURE<OnValidateUpgradePerDatabase>
  Raised in: Codeunit<Data Upgrade Mgt.>.PROCEDURE<RaiseOnValidateUpgradePerDatabase>
    Code lines:
    OnValidateUpgradePerDatabase <=====================
Codeunit<Check Routing Lines>.PROCEDURE<OnBeforeFindRoutingLines>
  Raised in: Codeunit<Check Routing Lines>.PROCEDURE<Calculate>
    Code lines:
    ...
    
    CalcPreviousOperations(RtngHeader,VersionCode);
    CalcSequenceBack(RtngHeader,VersionCode);
    CalcSequenceForward(RtngHeader,VersionCode);
    
    OnBeforeFindRoutingLines(RtngHeader,VersionCode); <=====================
    
    IF RtngLine.FIND('-') THEN
      REPEAT
        IF RtngLine."Next Operation No." <> '' THEN BEGIN
    ...
Codeunit<Check Routing Lines>.PROCEDURE<OnCalculateOnAfterCalcScrapQtyAndFactor>
  Raised in: Codeunit<Check Routing Lines>.PROCEDURE<Calculate>
    Code lines:
    ...
                (1 + RtngLine."Scrap Factor %" / 100),0.00001) - 1;
        END ELSE
          CalcScrapFactor :=
            ROUND(1 + RtngLine."Scrap Factor %" / 100,0.00001) - 1;
        CalcScrapQty := CalcScrapQty * (1 + RtngLine."Scrap Factor %" / 100) + RtngLine."Fixed Scrap Quantity";
        OnCalculateOnAfterCalcScrapQtyAndFactor(RtngLine,CalcScrapQty,CalcScrapFactor); <=====================
        RtngLine."Fixed Scrap Qty. (Accum.)" := CalcScrapQty;
        RtngLine."Scrap Factor % (Accumulated)" := CalcScrapFactor;
        RtngLine.MODIFY;
      UNTIL RtngLine.NEXT = 0;
    ...
Codeunit<Routing Line-Copy Lines>.PROCEDURE<OnAfterCopyRouting>
  Raised in: Codeunit<Routing Line-Copy Lines>.PROCEDURE<CopyRouting>
    Code lines:
    ...
        RoutingCommentLine."Routing No." := RoutingHeader."No.";
        RoutingCommentLine."Version Code" := ToVersionCode;
        RoutingCommentLine.INSERT;
      UNTIL FromRoutingCommentLine.NEXT = 0;
    
    OnAfterCopyRouting(RoutingHeader,FromRoutingHeaderNo,FromVersionCode,ToVersionCode); <=====================
Codeunit<Routing Line-Copy Lines>.PROCEDURE<OnAfterDeleteRouting>
  Raised in: Codeunit<Routing Line-Copy Lines>.PROCEDURE<CopyRouting>
    Code lines:
    ...
    
    RoutingLine.SETRANGE("Routing No.",RoutingHeader."No.");
    RoutingLine.SETRANGE("Version Code",ToVersionCode);
    RoutingLine.DELETEALL(TRUE);
    
    OnAfterDeleteRouting(RoutingHeader,ToVersionCode); <=====================
    
    RoutingLine2.SETRANGE("Routing No.",FromRoutingHeaderNo);
    RoutingLine2.SETRANGE("Version Code",FromVersionCode);
    IF RoutingLine2.FIND('-') THEN
    ...
Codeunit<Routing Line-Copy Lines>.PROCEDURE<OnCopyRountingOnAfterRoutingLineInsert>
  Raised in: Codeunit<Routing Line-Copy Lines>.PROCEDURE<CopyRouting>
    Code lines:
    ...
      REPEAT
        RoutingLine := RoutingLine2;
        RoutingLine."Routing No." := RoutingHeader."No.";
        RoutingLine."Version Code" := ToVersionCode;
        RoutingLine.INSERT;
        OnCopyRountingOnAfterRoutingLineInsert(RoutingLine,RoutingLine2); <=====================
      UNTIL RoutingLine2.NEXT = 0;
    
    FromRoutingTool.SETRANGE("Routing No.",FromRoutingHeaderNo);
    FromRoutingTool.SETRANGE("Version Code",FromVersionCode);
    ...
Codeunit<CalendarManagement>.PROCEDURE<OnBeforeCalculateSchedule>
  Raised in: Codeunit<CalendarManagement>.PROCEDURE<CalculateSchedule>
    Code lines:
    WorkCenter.GET(WorkCenterNo);
    WorkCenter.TESTFIELD("Shop Calendar Code");
    
    OnBeforeCalculateSchedule(WorkCenter,StartingDate); <=====================
    
    CalendarEntry.LOCKTABLE;
    CalendarEntry.SETRANGE("Capacity Type",CapacityType);
    CalendarEntry.SETRANGE("No.",No);
    CalendarEntry.SETRANGE(Date,StartingDate,EndingDate);
    CalendarEntry.DELETEALL;
    ...
Codeunit<CalendarManagement>.PROCEDURE<OnCalculateScheduleOnBeforeProcessShopCalendar>
  Raised in: Codeunit<CalendarManagement>.PROCEDURE<CalculateSchedule>
    Code lines:
    ...
      ShopCalendar.SETRANGE(Day,DATE2DWY(PeriodDate,1) - 1);
      OnCalculateScheduleOnSetShopCalendarFilters(ShopCalendar,PeriodDate);
      IF ShopCalendar.FIND('-') THEN
        REPEAT
          IsHandled := FALSE;
          OnCalculateScheduleOnBeforeProcessShopCalendar(ShopCalendar,PeriodDate,StartingDate,EndingDate,IsHandled); <=====================
          IF NOT IsHandled THEN BEGIN
            ShopCalendar.TESTFIELD("Starting Time");
            ShopCalendar.TESTFIELD("Ending Time");
            ShopCalendar.TESTFIELD("Work Shift Code");
    ...
Codeunit<CalendarManagement>.PROCEDURE<OnCalculateScheduleOnSetShopCalendarFilters>
  Raised in: Codeunit<CalendarManagement>.PROCEDURE<CalculateSchedule>
    Code lines:
    ...
    
    ShopCalendar.SETRANGE("Shop Calendar Code",WorkCenter."Shop Calendar Code");
    PeriodDate := StartingDate;
    WHILE PeriodDate <= EndingDate DO BEGIN
      ShopCalendar.SETRANGE(Day,DATE2DWY(PeriodDate,1) - 1);
      OnCalculateScheduleOnSetShopCalendarFilters(ShopCalendar,PeriodDate); <=====================
      IF ShopCalendar.FIND('-') THEN
        REPEAT
          IsHandled := FALSE;
          OnCalculateScheduleOnBeforeProcessShopCalendar(ShopCalendar,PeriodDate,StartingDate,EndingDate,IsHandled);
    ...
Codeunit<Calendar Absence Management>.PROCEDURE<OnAfterUpdateAbsence>
  Raised in: Codeunit<Calendar Absence Management>.PROCEDURE<UpdateAbsence>
    Code lines:
    ...
    IF NOT Remove THEN
      CalAbsentEntry.MODIFY;
    
    GatherEntries(CalendarEntry3);
    
    OnAfterUpdateAbsence(CalAbsentEntry); <=====================
Codeunit<Production BOM-Copy>.PROCEDURE<OnAfterInsertProdBOMComponent>
  Raised in: Codeunit<Production BOM-Copy>.PROCEDURE<CopyBOM>
    Code lines:
    ...
        ToProdBOMLine."Version Code" := ToVersionCode;
        IF SkipBOMDeletion THEN
          ToProdBOMLine."Line No." := LineNo;
        OnBeforeInsertProdBOMComponent(ToProdBOMLine,FromProdBOMLine);
        ToProdBOMLine.INSERT;
        OnAfterInsertProdBOMComponent(ToProdBOMLine,FromProdBOMLine,CurrentBOMHeader,SkipBOMDeletion,LineNo); <=====================
      UNTIL FromProdBOMLine.NEXT = 0;
    
    IF SkipBOMDeletion THEN
      EXIT;
    ...
Codeunit<Production BOM-Copy>.PROCEDURE<OnBeforeCopyBOM>
  Raised in: Codeunit<Production BOM-Copy>.PROCEDURE<CopyBOM>
    Code lines:
    ...
          ProdBOMVersion.Status);
    END;
    
    LineNo := 0;
    SkipBOMDeletion := FALSE;
    OnBeforeCopyBOM(CurrentBOMHeader,BOMHeaderNo,FromVersionCode,ToVersionCode,SkipBOMDeletion,LineNo); <=====================
    IF NOT SkipBOMDeletion THEN BEGIN
      ToProdBOMLine.SETRANGE("Production BOM No.",CurrentBOMHeader."No.");
      ToProdBOMLine.SETRANGE("Version Code",ToVersionCode);
      ToProdBOMLine.DELETEALL;
    ...
Codeunit<Production BOM-Copy>.PROCEDURE<OnBeforeInsertProdBOMComponent>
  Raised in: Codeunit<Production BOM-Copy>.PROCEDURE<CopyBOM>
    Code lines:
    ...
        ToProdBOMLine := FromProdBOMLine;
        ToProdBOMLine."Production BOM No." := CurrentBOMHeader."No.";
        ToProdBOMLine."Version Code" := ToVersionCode;
        IF SkipBOMDeletion THEN
          ToProdBOMLine."Line No." := LineNo;
        OnBeforeInsertProdBOMComponent(ToProdBOMLine,FromProdBOMLine); <=====================
        ToProdBOMLine.INSERT;
        OnAfterInsertProdBOMComponent(ToProdBOMLine,FromProdBOMLine,CurrentBOMHeader,SkipBOMDeletion,LineNo);
      UNTIL FromProdBOMLine.NEXT = 0;
    
    ...
Codeunit<Production BOM-Check>.PROCEDURE<OnAfterCode>
  Raised in: Codeunit<Production BOM-Check>.PROCEDURE<Code>
    Code lines:
    ...
          CheckBOMStructure(ProdBOMHeader."No.",VersionCode,1);
        ItemUnitOfMeasure.GET(Item."No.",ProdBOMHeader."Unit of Measure Code");
      UNTIL Item.NEXT = 0;
    END;
    
    OnAfterCode(ProdBOMHeader,VersionCode); <=====================
Codeunit<Production BOM-Check>.PROCEDURE<OnAfterProdBomLineCheck>
  Raised in: Codeunit<Production BOM-Check>.PROCEDURE<ProdBOMLineCheck>
    Code lines:
    ...
    ProdBOMLine.SETFILTER(Type,'<>%1',ProdBOMLine.Type::" ");
    ProdBOMLine.SETRANGE("No.",'');
    IF ProdBOMLine.FINDFIRST THEN
      ProdBOMLine.FIELDERROR("No.");
    
    OnAfterProdBomLineCheck(ProdBOMLine,VersionCode); <=====================
Codeunit<Where-Used Management>.PROCEDURE<OnBeforeWhereUsedListInsert>
  Raised in: Codeunit<Where-Used Management>.PROCEDURE<BuildWhereUsedList>
    Code lines:
    ...
              ItemAssembly,
              VersionMgt.GetBOMUnitOfMeasure(
                ItemAssembly."Production BOM No.",
                VersionMgt.GetBOMVersion(ItemAssembly."Production BOM No.",CalcDate,FALSE)));
          WhereUsedList."Version Code" := VersionMgt.GetBOMVersion(No,CalcDate,TRUE);
          OnBeforeWhereUsedListInsert(WhereUsedList,ItemAssembly,CalcDate,Quantity); <=====================
          WhereUsedList.INSERT;
          NextWhereUsedEntryNo := NextWhereUsedEntryNo + 1;
          IF MultiLevel THEN
            BuildWhereUsedList(
    ...
Codeunit<Where-Used Management>.PROCEDURE<OnBuildWhereUsedListOnLoopProdBomComponent>
  Raised in: Codeunit<Where-Used Management>.PROCEDURE<BuildWhereUsedList>
    Code lines:
    ...
      REPEAT
        IF VersionMgt.GetBOMVersion(
             ProdBOMComponent."Production BOM No.",CalcDate,TRUE) =
           ProdBOMComponent."Version Code"
        THEN BEGIN
          OnBuildWhereUsedListOnLoopProdBomComponent(ProdBOMComponent); <=====================
          IF IsActiveProductionBOM(ProdBOMComponent) THEN
            BuildWhereUsedList(
              2,
              ProdBOMComponent."Production BOM No.",
    ...
Codeunit<BOM Matrix Management>.PROCEDURE<OnBuildMatrixForItemOnAfterGetItem>
  Raised in: Codeunit<BOM Matrix Management>.PROCEDURE<BuildMatrix>
    Code lines:
    ...
    IF ProdBOMComponent.FIND('-') THEN
      REPEAT
        CASE ProdBOMComponent.Type OF
          ProdBOMComponent.Type::Item:
            IF Item.GET(ProdBOMComponent."No.") THEN BEGIN
              OnBuildMatrixForItemOnAfterGetItem(ProdBOMComponent); <=====================
              IF MultiLevel AND (Item."Production BOM No." <> '') THEN BEGIN
                VersionCode :=
                  VersionMgt.GetBOMVersion(Item."Production BOM No.",GlobalCalcDate,FALSE);
                OnBuildMatrixForItemOnBeforeRecursion(ProdBOMComponent);
    ...
Codeunit<BOM Matrix Management>.PROCEDURE<OnBuildMatrixForItemOnBeforeComponentListFind>
  Raised in: Codeunit<BOM Matrix Management>.PROCEDURE<BuildMatrix>
    Code lines:
    ...
              END ELSE BEGIN
                ComponentList."Item No." := ProdBOMComponent."No.";
                ComponentList."Variant Code" := ProdBOMComponent."Variant Code";
                ComponentList.Description := ProdBOMComponent.Description;
                ComponentList."Unit of Measure Code" := Item."Base Unit of Measure";
                OnBuildMatrixForItemOnBeforeComponentListFind(ProdBOMComponent,ComponentList); <=====================
                IF NOT ComponentList.FIND THEN
                  ComponentList.INSERT;
                ComponentEntry2.INIT;
                ComponentEntry2."Item No." := ProdBOMComponent."No.";
    ...
Codeunit<BOM Matrix Management>.PROCEDURE<OnBuildMatrixForItemOnBeforeRecursion>
  Raised in: Codeunit<BOM Matrix Management>.PROCEDURE<BuildMatrix>
    Code lines:
    ...
            IF Item.GET(ProdBOMComponent."No.") THEN BEGIN
              OnBuildMatrixForItemOnAfterGetItem(ProdBOMComponent);
              IF MultiLevel AND (Item."Production BOM No." <> '') THEN BEGIN
                VersionCode :=
                  VersionMgt.GetBOMVersion(Item."Production BOM No.",GlobalCalcDate,FALSE);
                OnBuildMatrixForItemOnBeforeRecursion(ProdBOMComponent); <=====================
                BuildMatrix(
                  Item."Production BOM No.",VersionCode,Level + 1,
                  Quantity *
                  UOMMgt.GetQtyPerUnitOfMeasure(Item,ProdBOMComponent."Unit of Measure Code") /
    ...
Codeunit<Prod. Order Route Management>.PROCEDURE<OnBeforeCalcPreviousOperations>
  Raised in: Codeunit<Prod. Order Route Management>.PROCEDURE<CalcPreviousOperations>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCalcPreviousOperations(ProdOrderLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SetRoutingFilter(
      ProdOrderRtngLine,ProdOrderLine.Status,ProdOrderLine."Prod. Order No.",
      ProdOrderLine."Routing No.",ProdOrderLine."Routing Reference No.");
    ProdOrderRtngLine.MODIFYALL("Previous Operation No.",'');
    
    ...
Codeunit<Prod. Order Route Management>.PROCEDURE<OnBeforeSetNextOperations>
  Raised in: Codeunit<Prod. Order Route Management>.PROCEDURE<SetNextOperations>
    Code lines:
    IsHandled := FALSE;
    OnBeforeSetNextOperations(ProdOrderLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SetRoutingFilter(
      ProdOrderRtngLine,ProdOrderLine.Status,ProdOrderLine."Prod. Order No.",
      ProdOrderLine."Routing No.",ProdOrderLine."Routing Reference No.");
    ProdOrderRtngLine.MODIFYALL("Next Operation No.",'');
    
    ...
Codeunit<Prod. Order Route Management>.PROCEDURE<OnBeforeUpdateComponentsBin>
  Raised in: Codeunit<Prod. Order Route Management>.PROCEDURE<UpdateComponentsBin>
    Code lines:
    OnBeforeUpdateComponentsBin(FilteredProdOrderRtngLineSet,SkipUpdate,ErrorOccured,AutoUpdateCompBinCode); <=====================
    IF SkipUpdate THEN
      EXIT(NOT ErrorOccured);
    
    WITH FilteredProdOrderRtngLineSet DO BEGIN
      IF NOT FINDFIRST THEN
        EXIT;
      SetOrderLineRoutingFilter(ProdOrderLine,Status,"Prod. Order No.","Routing No.","Routing Reference No.");
      IF ProdOrderLine.FINDSET(FALSE) THEN
        REPEAT
    ...
Codeunit<Prod. Order Route Management>.PROCEDURE<OnCalculateOnAfterCalcScrapQtyAndFactor>
  Raised in: Codeunit<Prod. Order Route Management>.PROCEDURE<Calculate>
    Code lines:
    ...
                (1 + CalcScrapFactor) *
                (1 + ProdOrderRtngLine."Scrap Factor %" / 100),0.00001) - 1;
        END ELSE
          CalcScrapFactor := ROUND(1 + ProdOrderRtngLine."Scrap Factor %" / 100,0.00001) - 1;
        CalcScrapQty := CalcScrapQty + ProdOrderRtngLine."Fixed Scrap Quantity";
        OnCalculateOnAfterCalcScrapQtyAndFactor(ProdOrderRtngLine,CalcScrapQty,CalcScrapFactor); <=====================
        ProdOrderRtngLine."Fixed Scrap Qty. (Accum.)" := CalcScrapQty;
        ProdOrderRtngLine."Scrap Factor % (Accumulated)" := CalcScrapFactor;
        ProdOrderRtngLine.MODIFY;
      UNTIL ProdOrderRtngLine.NEXT = 0;
    ...
Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterInsertProdRoutingLine>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<TransferRouting>
    Code lines:
    ...
        ProdOrderRoutingLine."Ending Time" := ProdOrderLine."Ending Time";
        ProdOrderRoutingLine."Ending Date" := ProdOrderLine."Ending Date";
        ProdOrderRoutingLine.UpdateDatetime;
        OnAfterTransferRoutingLine(ProdOrderLine,RoutingLine,ProdOrderRoutingLine);
        ProdOrderRoutingLine.INSERT;
        OnAfterInsertProdRoutingLine(ProdOrderRoutingLine,ProdOrderLine); <=====================
        TransferTaskInfo(ProdOrderRoutingLine,ProdOrderLine."Routing Version Code");
      UNTIL RoutingLine.NEXT = 0;
    
    OnAfterTransferRouting(ProdOrderLine);
Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterProdOrderCompFilter>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<TransferBOMProcessItem>
    Code lines:
    ProdOrderComp.SETCURRENTKEY(Status,"Prod. Order No.","Prod. Order Line No.","Item No.");
    ProdOrderComp.SETRANGE(Status,ProdOrderLine.Status);
    ProdOrderComp.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
    ProdOrderComp.SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");
    ProdOrderComp.SetFilterFromProdBOMLine(ProdBOMLine[Level]);
    OnAfterProdOrderCompFilter(ProdOrderComp,ProdBOMLine[Level]); <=====================
    IF NOT ProdOrderComp.FINDFIRST THEN BEGIN
      ProdOrderComp.RESET;
      ProdOrderComp.SETRANGE(Status,ProdOrderLine.Status);
      ProdOrderComp.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
    ...
Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterTransferBOM>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<TransferBOM>
    Code lines:
    ...
              END;
          END;
        END;
      UNTIL ProdBOMLine[Level].NEXT = 0;
    
    OnAfterTransferBOM(ProdOrder,ProdOrderLine,ProdBOMNo,Level,LineQtyPerUOM,ItemQtyPerUOM,Blocked,ErrorOccured); <=====================
    
    EXIT(NOT ErrorOccured);
Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterTransferBOMComponent>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<TransferBOMProcessItem>
    Code lines:
    ...
        ProdOrderComp."Planning Level Code" := ProdOrderLine."Planning Level Code" + 1;
        Item2.GET(ProdOrderComp."Item No.");
        ProdOrderComp."Item Low-Level Code" := Item2."Low-Level Code";
      END;
      ProdOrderComp.GetDefaultBin;
      OnAfterTransferBOMComponent(ProdOrderLine,ProdBOMLine[Level],ProdOrderComp,LineQtyPerUOM,ItemQtyPerUOM); <=====================
      ProdOrderComp.INSERT(TRUE);
    END ELSE BEGIN
      ProdOrderComp.SetIgnoreErrors;
      ProdOrderComp.SETCURRENTKEY(Status,"Prod. Order No."); // Reset key
    ...
Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterTransferRouting>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<TransferRouting>
    Code lines:
    ...
        ProdOrderRoutingLine."Starting Time" := ProdOrderLine."Starting Time";
        ProdOrderRoutingLine."Starting Date" := ProdOrderLine."Starting Date";
        ProdOrderRoutingLine."Ending Time" := ProdOrderLine."Ending Time";
        ProdOrderRoutingLine."Ending Date" := ProdOrderLine."Ending Date";
        ProdOrderRoutingLine.UpdateDatetime;
        OnAfterTransferRoutingLine(ProdOrderLine,RoutingLine,ProdOrderRoutingLine); <=====================
        ProdOrderRoutingLine.INSERT;
        OnAfterInsertProdRoutingLine(ProdOrderRoutingLine,ProdOrderLine);
        TransferTaskInfo(ProdOrderRoutingLine,ProdOrderLine."Routing Version Code");
      UNTIL RoutingLine.NEXT = 0;
    ...
Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterTransferRoutingLine>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<TransferRouting>
    Code lines:
    ...
        ProdOrderRoutingLine."Starting Time" := ProdOrderLine."Starting Time";
        ProdOrderRoutingLine."Starting Date" := ProdOrderLine."Starting Date";
        ProdOrderRoutingLine."Ending Time" := ProdOrderLine."Ending Time";
        ProdOrderRoutingLine."Ending Date" := ProdOrderLine."Ending Date";
        ProdOrderRoutingLine.UpdateDatetime;
        OnAfterTransferRoutingLine(ProdOrderLine,RoutingLine,ProdOrderRoutingLine); <=====================
        ProdOrderRoutingLine.INSERT;
        OnAfterInsertProdRoutingLine(ProdOrderRoutingLine,ProdOrderLine);
        TransferTaskInfo(ProdOrderRoutingLine,ProdOrderLine."Routing Version Code");
      UNTIL RoutingLine.NEXT = 0;
    ...
Codeunit<Calculate Prod. Order>.PROCEDURE<OnAfterTransferTaskInfo>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<TransferTaskInfo>
    Code lines:
    CopyRoutingTools(FromProdOrderRoutingLine,VersionCode);
    CopyRoutingPersonnel(FromProdOrderRoutingLine,VersionCode);
    CopyRoutingQualityMeasures(FromProdOrderRoutingLine,VersionCode);
    CopyRoutingComments(FromProdOrderRoutingLine,VersionCode);
    
    OnAfterTransferTaskInfo(FromProdOrderRoutingLine,VersionCode); <=====================
Codeunit<Calculate Prod. Order>.PROCEDURE<OnBeforeCalculate>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<Calculate>
    Code lines:
    ProdOrderLine := ProdOrderLine2;
    
    OnBeforeCalculate(ItemLedgEntry,CapLedgEntry); <=====================
    
    IF ProdOrderLine.Status = ProdOrderLine.Status::Released THEN BEGIN
      ItemLedgEntry.SETCURRENTKEY("Order Type","Order No.");
      ItemLedgEntry.SETRANGE("Order Type",ItemLedgEntry."Order Type"::Production);
      ItemLedgEntry.SETRANGE("Order No.",ProdOrderLine."Prod. Order No.");
      IF NOT ItemLedgEntry.ISEMPTY THEN
        ERROR(
    ...
Codeunit<Calculate Prod. Order>.PROCEDURE<OnBeforeCalculateProdOrderDates>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<CalculateProdOrderDates>
    Code lines:
    OnBeforeCalculateProdOrderDates(ProdOrderLine); <=====================
    
    ProdOrder.GET(ProdOrderLine.Status,ProdOrderLine."Prod. Order No.");
    
    ProdOrderRoutingLine.SETRANGE(Status,ProdOrderLine.Status);
    ProdOrderRoutingLine.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
    ProdOrderRoutingLine.SETRANGE("Routing No.",ProdOrderLine."Routing No.");
    IF ProdOrder."Source Type" <> ProdOrder."Source Type"::Family THEN
      ProdOrderRoutingLine.SETRANGE("Routing Reference No.",ProdOrderLine."Line No.")
    ELSE
    ...
Codeunit<Calculate Prod. Order>.PROCEDURE<OnBeforeCopyProdBOMComments>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<CopyProdBOMComments>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCopyProdBOMComments(ProdBOMCommentLine,ProdBOMLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    ProdBOMCommentLine.SETRANGE("Production BOM No.",ProdBOMLine."Production BOM No.");
    ProdBOMCommentLine.SETRANGE("BOM Line No.",ProdBOMLine."Line No.");
    ProdBOMCommentLine.SETRANGE("Version Code",ProdBOMLine."Version Code");
    IF ProdBOMCommentLine.FINDSET THEN
      REPEAT
    ...
Codeunit<Calculate Prod. Order>.PROCEDURE<OnBeforeProdOrderCompModify>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<TransferBOMProcessItem>
    Code lines:
    ...
      ProdOrderComp.BlockDynamicTracking(Blocked);
      ProdOrderComp.VALIDATE(
        "Quantity per",
        ProdOrderComp."Quantity per" + ProdBOMLine[Level]."Quantity per" * LineQtyPerUOM / ItemQtyPerUOM);
      ProdOrderComp.VALIDATE("Routing Link Code",ProdBOMLine[Level]."Routing Link Code");
      OnBeforeProdOrderCompModify(ProdOrderComp,ProdBOMLine[Level],LineQtyPerUOM,ItemQtyPerUOM); <=====================
      ProdOrderComp.MODIFY;
    END;
    IF ProdOrderComp.HasErrorOccured THEN
      ErrorOccured := TRUE;
    ...
Codeunit<Calculate Prod. Order>.PROCEDURE<OnBeforeTransferBOM>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<TransferBOM>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTransferBOM(ProdOrder,ProdOrderLine,ProdBOMNo,Level,LineQtyPerUOM,ItemQtyPerUOM,Blocked,ErrorOccured,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(NOT ErrorOccured);
    
    IF ProdBOMNo = '' THEN
      EXIT;
    
    ProdOrderComp.LOCKTABLE;
    
    ...
Codeunit<Calculate Prod. Order>.PROCEDURE<OnBeforeTransferBOMComponent>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<TransferBOM>
    Code lines:
    ...
    ProdBOMLine[Level].SETFILTER("Ending Date",'%1|%2..',0D,ProdOrderLine."Starting Date");
    OnTransferBOMOnAfterSetFiltersProdBOMLine(ProdBOMLine[Level],ProdOrderLine);
    IF ProdBOMLine[Level].FIND('-') THEN
      REPEAT
        IsHandled := FALSE;
        OnBeforeTransferBOMComponent(ProdOrder,ProdOrderLine,ProdBOMLine[Level],ErrorOccured,IsHandled); <=====================
        IF NOT IsHandled THEN BEGIN
          IF ProdBOMLine[Level]."Routing Link Code" <> '' THEN BEGIN
            ProdOrderRoutingLine2.SETRANGE(Status,ProdOrderLine.Status);
            ProdOrderRoutingLine2.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
    ...
Codeunit<Calculate Prod. Order>.PROCEDURE<OnBeforeTransferRouting>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<TransferRouting>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTransferRouting(ProdOrder,ProdOrderLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF ProdOrderLine."Routing No." = '' THEN
      EXIT;
    
    RoutingHeader.GET(ProdOrderLine."Routing No.");
    
    ...
Codeunit<Calculate Prod. Order>.PROCEDURE<OnBeforeUpdateProdOrderDates>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<CalculateProdOrderDates>
    Code lines:
    ...
    END;
    
    ProdOrderLine.UpdateDatetime;
    ProdOrderLine.MODIFY;
    
    OnBeforeUpdateProdOrderDates(ProdOrder,ProdOrderLine); <=====================
    
    IF NOT ProdOrderModify THEN BEGIN
      ProdOrder.AdjustStartEndingDate;
      ProdOrder.MODIFY;
Codeunit<Calculate Prod. Order>.PROCEDURE<OnCalculateComponentsOnBeforeUpdateRoutingLinkCode>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<CalculateComponents>
    Code lines:
    ...
    ProdOrderComp.SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");
    IF ProdOrderComp.FIND('-') THEN
      REPEAT
        ProdOrderComp.BlockDynamicTracking(Blocked);
        IsHandled := FALSE;
        OnCalculateComponentsOnBeforeUpdateRoutingLinkCode(ProdOrderComp,ProdOrderLine,IsHandled); <=====================
        IF NOT IsHandled THEN BEGIN
          ProdOrderComp.VALIDATE("Routing Link Code");
          ProdOrderComp.MODIFY;
          ProdOrderComp.AutoReserve;
    ...
Codeunit<Calculate Prod. Order>.PROCEDURE<OnCalculateOnBeforeCheckNextOperation>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<Calculate>
    Code lines:
    ...
            REPEAT
              IF ProdOrderRoutingLine3."Next Operation No." <> '' THEN BEGIN
                ProdOrderRoutingLine4.SETRANGE("Operation No.",ProdOrderRoutingLine3."Next Operation No.");
                IF ProdOrderRoutingLine4.ISEMPTY THEN BEGIN
                  IsHandled := FALSE;
                  OnCalculateOnBeforeCheckNextOperation(ProdOrder,ProdOrderLine2,ProdOrderRoutingLine3,IsHandled); <=====================
                  IF NOT IsHandled THEN
                    ERROR(OperationCannotFollowErr,ProdOrderRoutingLine3."Next Operation No.");
                END;
              END;
    ...
Codeunit<Calculate Prod. Order>.PROCEDURE<OnCalculateOnBeforeCheckPrevOperation>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<Calculate>
    Code lines:
    ...
              END;
              IF ProdOrderRoutingLine3."Previous Operation No." <> '' THEN BEGIN
                ProdOrderRoutingLine4.SETRANGE("Operation No.",ProdOrderRoutingLine3."Previous Operation No.");
                IF ProdOrderRoutingLine4.ISEMPTY THEN BEGIN
                  IsHandled := FALSE;
                  OnCalculateOnBeforeCheckPrevOperation(ProdOrder,ProdOrderLine2,ProdOrderRoutingLine3,IsHandled); <=====================
                  IF NOT IsHandled THEN
                    ERROR(OperationCannotPrecedeErr,ProdOrderRoutingLine3."Previous Operation No.");
                END;
              END;
    ...
Codeunit<Calculate Prod. Order>.PROCEDURE<OnCalculateProdOrderDatesOnAfterSetFilters>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<CalculateProdOrderDates>
    Code lines:
    ...
      ProdOrderRoutingLine.SETRANGE("Routing Reference No.",ProdOrderLine."Line No.")
    ELSE
      ProdOrderRoutingLine.SETRANGE("Routing Reference No.",0);
    ProdOrderRoutingLine.SETFILTER("Routing Status",'<>%1',ProdOrderRoutingLine."Routing Status"::Finished);
    ProdOrderRoutingLine.SETFILTER("Next Operation No.",'%1','');
    OnCalculateProdOrderDatesOnAfterSetFilters(ProdOrderRoutingLine,ProdOrder,ProdOrderLine); <=====================
    
    IF ProdOrderRoutingLine.FINDFIRST THEN BEGIN
      ProdOrderLine."Ending Date" := ProdOrderRoutingLine."Ending Date";
      ProdOrderLine."Ending Time" := ProdOrderRoutingLine."Ending Time";
    ...
Codeunit<Calculate Prod. Order>.PROCEDURE<OnCalculateProdOrderDatesOnSetBeforeDueDate>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<CalculateProdOrderDates>
    Code lines:
    ...
      ProdOrderLine."Starting Date" := ProdOrderRoutingLine."Starting Date";
      ProdOrderLine."Starting Time" := ProdOrderRoutingLine."Starting Time";
    END;
    
    IsHandled := FALSE;
    OnCalculateProdOrderDatesOnSetBeforeDueDate(ProdOrderLine,IsHandled); <=====================
    IF NOT IsHandled THEN BEGIN
      IF ProdOrderLine."Planning Level Code" = 0 THEN
        NewDueDate :=
          LeadTimeMgt.PlannedDueDate(
    ...
Codeunit<Calculate Prod. Order>.PROCEDURE<OnTransferBOMOnAfterCalcReqQty>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<TransferBOM>
    Code lines:
    ...
              ProdOrderRoutingLine2."Fixed Scrap Qty. (Accum.)";
          END ELSE
            ReqQty :=
              ProdBOMLine[Level].Quantity * (1 + ProdBOMLine[Level]."Scrap %" / 100) * LineQtyPerUOM / ItemQtyPerUOM;
    
          OnTransferBOMOnAfterCalcReqQty( <=====================
            ProdBOMLine[Level],ProdOrderRoutingLine2,ProdOrderLine,ReqQty,LineQtyPerUOM,ItemQtyPerUOM);
    
          CASE ProdBOMLine[Level].Type OF
            ProdBOMLine[Level].Type::Item:
    ...
Codeunit<Calculate Prod. Order>.PROCEDURE<OnTransferBOMOnAfterSetFiltersProdBOMLine>
  Raised in: Codeunit<Calculate Prod. Order>.PROCEDURE<TransferBOM>
    Code lines:
    ...
    
    ProdBOMLine[Level].SETRANGE("Production BOM No.",ProdBOMNo);
    ProdBOMLine[Level].SETRANGE("Version Code",VersionCode);
    ProdBOMLine[Level].SETFILTER("Starting Date",'%1|..%2',0D,ProdOrderLine."Starting Date");
    ProdBOMLine[Level].SETFILTER("Ending Date",'%1|%2..',0D,ProdOrderLine."Starting Date");
    OnTransferBOMOnAfterSetFiltersProdBOMLine(ProdBOMLine[Level],ProdOrderLine); <=====================
    IF ProdBOMLine[Level].FIND('-') THEN
      REPEAT
        IsHandled := FALSE;
        OnBeforeTransferBOMComponent(ProdOrder,ProdOrderLine,ProdBOMLine[Level],ErrorOccured,IsHandled);
    ...
Codeunit<Calculate Routing Line>.PROCEDURE<OnAfterCalculateRoutingLine>
  Raised in: Codeunit<Calculate Routing Line>.PROCEDURE<CalculateRoutingLine>
    Code lines:
    ...
        CalcRoutingLineBack(CalcStartEndDate)
      ELSE
        CalcRoutingLineForward(CalcStartEndDate);
    END;
    
    OnAfterCalculateRoutingLine(ProdOrderRoutingLine); <=====================
    
    ProdOrderRoutingLine2 := ProdOrderRoutingLine;
Codeunit<Calculate Routing Line>.PROCEDURE<OnBeforeCalcExpectedCost>
  Raised in: Codeunit<Calculate Routing Line>.PROCEDURE<CalculateRoutingLine>
    Code lines:
    ...
        (1 + TotalScrap / 100) +
        ProdOrderRoutingLine."Fixed Scrap Qty. (Accum.)";
    END ELSE
      TotalQtyPerOperation := MaxLotSize;
    
    OnBeforeCalcExpectedCost(ProdOrderRoutingLine,MaxLotSize,TotalQtyPerOperation,ActualOperOutput); <=====================
    
    TotalCapacityPerOperation :=
      ROUND(
        TotalQtyPerOperation *
    ...
Codeunit<Calculate Routing Line>.PROCEDURE<OnBeforeScheduleRoutingLine>
  Raised in: Codeunit<Calculate Routing Line>.PROCEDURE<CalculateRoutingLine>
    Code lines:
    ...
            ProdOrderRoutingLine."Work Center No.",ProdOrderRoutingLine."Setup Time Unit of Meas. Code"),
          UOMMgt.QtyRndPrecision);
    END;
    CalcExpectedCost(ProdOrderRoutingLine,TotalQtyPerOperation,TotalCapacityPerOperation);
    
    OnBeforeScheduleRoutingLine(ProdOrderRoutingLine); <=====================
    
    IF ProdOrderRoutingLine."Schedule Manually" THEN
      CalculateRoutingLineFixed
    ELSE BEGIN
    ...
Codeunit<Calculate Routing Line>.PROCEDURE<OnCalculateRoutingLineOnAfterProdOrderLineSetFilters>
  Raised in: Codeunit<Calculate Routing Line>.PROCEDURE<CalculateRoutingLine>
    Code lines:
    ...
    TotalLotSize := 0;
    ProdOrderLine.SETRANGE(Status,ProdOrderRoutingLine.Status);
    ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrderRoutingLine."Prod. Order No.");
    ProdOrderLine.SETRANGE("Routing Reference No.",ProdOrderRoutingLine."Routing Reference No.");
    ProdOrderLine.SETRANGE("Routing No.",ProdOrderRoutingLine."Routing No.");
    OnCalculateRoutingLineOnAfterProdOrderLineSetFilters(ProdOrderLine,ProdOrder,ProdOrderRoutingLine); <=====================
    IF ProdOrderLine.FIND('-') THEN BEGIN
      ExpectedOperOutput := 0;
      REPEAT
        IsHandled := FALSE;
    ...
Codeunit<Calculate Routing Line>.PROCEDURE<OnCalculateRoutingLineOnBeforeCalcExpectedOperOutput>
  Raised in: Codeunit<Calculate Routing Line>.PROCEDURE<CalculateRoutingLine>
    Code lines:
    ...
    OnCalculateRoutingLineOnAfterProdOrderLineSetFilters(ProdOrderLine,ProdOrder,ProdOrderRoutingLine);
    IF ProdOrderLine.FIND('-') THEN BEGIN
      ExpectedOperOutput := 0;
      REPEAT
        IsHandled := FALSE;
        OnCalculateRoutingLineOnBeforeCalcExpectedOperOutput(ProdOrderLine,ExpectedOperOutput,IsHandled); <=====================
        IF NOT IsHandled THEN
          ExpectedOperOutput := ExpectedOperOutput + ProdOrderLine."Quantity (Base)";
        TotalScrap := TotalScrap + ProdOrderLine."Scrap %";
      UNTIL ProdOrderLine.NEXT = 0;
    ...
Codeunit<OrderTrackingManagement>.PROCEDURE<OnAfterInsertTrackingEntry>
  Raised in: Codeunit<OrderTrackingManagement>.PROCEDURE<InsertOrderTrackingEntry>
    Code lines:
    ...
          TempOrderTrackingEntry.Name := Text004;
    
    TempOrderTrackingEntry.INSERT;
    EntryNo := EntryNo + 1;
    
    OnAfterInsertTrackingEntry(TempOrderTrackingEntry,DateWarning); <=====================
Codeunit<OrderTrackingManagement>.PROCEDURE<OnBeforeTempOrderTrackingEntryInsert>
  Raised in: Codeunit<OrderTrackingManagement>.PROCEDURE<InsertItemLedgTrackEntry>
    Code lines:
    ...
    RefNo := ToItemLedgEntry."Entry No.";
    
    TempOrderTrackingEntry."Starting Date" := 0D;
    TempOrderTrackingEntry."Ending Date" := 0D;
    
    OnBeforeTempOrderTrackingEntryInsert(TempOrderTrackingEntry,ToItemLedgEntry,FromItemLedgEntry); <=====================
    TempOrderTrackingEntry.INSERT;
    EntryNo := EntryNo + 1;
Codeunit<OrderTrackingManagement>.PROCEDURE<OnDrillOrdersUpCaseElse>
  Raised in: Codeunit<OrderTrackingManagement>.PROCEDURE<DrillOrdersUp>
    Code lines:
    ...
                DrillOrdersUp(ReservEntry2,Level + 1);
                IF DerivePlanningFilter(ReservEntry3,FilterReservEntry) THEN
                  DrillOrdersUp(FilterReservEntry,Level + 1);
              END;
            ELSE BEGIN
              OnDrillOrdersUpCaseElse(ReservEntry3,ReservEntry2,SearchUp,ContinueDrillUp,IncludePlanningFilter); <=====================
              IF ContinueDrillUp THEN
                DrillOrdersUp(ReservEntry2,Level + 1);
              IF IncludePlanningFilter THEN
                IF DerivePlanningFilter(ReservEntry3,FilterReservEntry) THEN
    ...
Codeunit<OrderTrackingManagement>.PROCEDURE<OnInsertOrderTrackingEntry>
  Raised in: Codeunit<OrderTrackingManagement>.PROCEDURE<InsertOrderTrackingEntry>
    Code lines:
    ...
            TempOrderTrackingEntry."Starting Date" := JobPlanningLine."Planning Date";
            TempOrderTrackingEntry."Ending Date" := JobPlanningLine."Planning Date";
          END;
        END;
      ELSE
        OnInsertOrderTrackingEntry(TempOrderTrackingEntry,Type,Subtype,ID,RefNo,BatchName,ProdOrderLineNo); <=====================
    END;
    
    IF TempOrderTrackingEntry."From Type" = DATABASE::"Requisition Line" THEN
      IF ReqLine.GET(
    ...
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnAfterInitProdOrderLine>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<InitProdOrderLine>
    Code lines:
    ...
    ProdOrderLine."Planning Level Code" := 0;
    ProdOrderLine."Inventory Posting Group" := Item."Inventory Posting Group";
    ProdOrderLine.UpdateDatetime;
    ProdOrderLine.VALIDATE("Unit Cost");
    
    OnAfterInitProdOrderLine(ProdOrderLine,ProdOrder,SalesLine); <=====================
    
    NextProdOrderLineNo := NextProdOrderLineNo + 10000;
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnAfterProcessProdOrderLine>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<ProcessProdOrderLines>
    Code lines:
    ...
        IF NOT IsHandled THEN BEGIN
          CalcProdOrder.SetParameter(TRUE);
          IF NOT CalcProdOrder.Calculate(ProdOrderLine,Direction,TRUE,TRUE,TRUE,LetDueDateDecrease) THEN
            ErrorOccured := TRUE;
        END;
        OnAfterProcessProdOrderLine(ProdOrderLine,Direction,LetDueDateDecrease); <=====================
      UNTIL ProdOrderLine.NEXT = 0;
    ProdOrder.AdjustStartEndingDate;
    ProdOrder.MODIFY;
    
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnAfterProdOrderLineInsert>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<Copy>
    Code lines:
    ...
          OnBeforeProdOrderLineInsert(ProdOrderLine,ProdOrder,SalesLineIsSet,SalesLine);
          ProdOrderLine.INSERT;
          IF ProdOrderLine.HasErrorOccured THEN
            ErrorOccured := TRUE;
    
          OnAfterProdOrderLineInsert(ProdOrder,ProdOrderLine,NextProdOrderLineNo); <=====================
        END;
      ProdOrder."Source Type"::Family:
        IF NOT CopyFromFamily THEN
          ErrorOccured := TRUE;
    ...
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<InsertProdOrderLine>
    Code lines:
    ...
        ProdOrderLine3.MODIFY;
        ProdOrderLine := ProdOrderLine3;
        EXIT(FALSE);
      END;
    ProdOrderLine.INSERT;
    OnAfterProdOrderLineInsert(ProdOrder,ProdOrderLine,NextProdOrderLineNo); <=====================
    EXIT(TRUE);
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnAfterReserveMultiLevelStructureComp>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<ReserveMultiLevelStructure>
    Code lines:
    ...
          THEN BEGIN
            ProdOrderComp3.CALCFIELDS("Reserved Quantity","Reserved Qty. (Base)");
            ProdOrderCompReserve.BindToProdOrder(ProdOrderComp3,ProdOrderLine3,
              ProdOrderComp3."Remaining Quantity" - ProdOrderComp3."Reserved Quantity",
              ProdOrderComp3."Remaining Qty. (Base)" - ProdOrderComp3."Reserved Qty. (Base)");
            OnAfterReserveMultiLevelStructureComp(ProdOrderLine3,ProdOrderComp3); <=====================
          END;
      UNTIL ProdOrderComp3.NEXT(-1) = 0;
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnAfterUpdateProdOrderLine>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<UpdateProdOrderLine>
    Code lines:
    ...
          ProdOrderLine3.MODIFY;
        END;
      UNTIL ProdOrderComp3.NEXT = 0;
    TempOldProdOrderComp.DELETEALL;
    
    OnAfterUpdateProdOrderLine(ProdOrderLine,Direction,LetDueDateDecrease); <=====================
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnBeforeCopyFromSalesOrder>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<CopyFromSalesOrder>
    Code lines:
    OnBeforeCopyFromSalesOrder(SalesHeader,SalesLine,ProdOrder); <=====================
    
    SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
    SalesLine.SETRANGE("Document No.",SalesHeader."No.");
    IF SalesLine.FINDSET THEN
      REPEAT
        SalesLine.CALCFIELDS("Reserved Quantity");
        IF (SalesLine.Type = SalesLine.Type::Item) AND
           (SalesLine."No." <> '') AND
           ((SalesLine."Outstanding Quantity" - SalesLine."Reserved Quantity") <> 0)
    ...
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnBeforeInsertProdOrderLine>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<InsertProdOrderLine>
    Code lines:
    ...
    ProdOrderLine3.SETRANGE("Item No.",ProdOrderLine."Item No.");
    ProdOrderLine3.SETRANGE("Variant Code",ProdOrderLine."Variant Code");
    ProdOrderLine3.SETRANGE("Location Code",ProdOrderLine."Location Code");
    ProdOrderLine3.SETRANGE("Planning Level Code",ProdOrderLine."Planning Level Code");
    IsHandled := FALSE;
    OnBeforeInsertProdOrderLine(ProdOrderLine,ProdOrderLine3,InsertNew,IsHandled); <=====================
    IF NOT IsHandled THEN
      IF (NOT InsertNew) AND ProdOrderLine3.FINDFIRST THEN BEGIN
        CopyProdOrderCompToTemp(ProdOrderLine3);
        ProdOrderLine3.VALIDATE(Quantity,ProdOrderLine3.Quantity + ProdOrderLine.Quantity);
    ...
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnBeforeProcessProdOrderLine>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<ProcessProdOrderLines>
    Code lines:
    ProdOrderLine.SETRANGE(Status,ProdOrder.Status);
    ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrder."No.");
    IF ProdOrderLine.FINDSET(TRUE) THEN
      REPEAT
        IsHandled := FALSE;
        OnBeforeProcessProdOrderLine(ProdOrderLine,ProdOrder,Direction,LetDueDateDecrease,ErrorOccured,IsHandled); <=====================
        IF NOT IsHandled THEN BEGIN
          CalcProdOrder.SetParameter(TRUE);
          IF NOT CalcProdOrder.Calculate(ProdOrderLine,Direction,TRUE,TRUE,TRUE,LetDueDateDecrease) THEN
            ErrorOccured := TRUE;
    ...
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnBeforeProdOrderLine3Modify>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<InsertProdOrderLine>
    Code lines:
    ...
    
        IF ProdOrderLine3."Planning Level Code" < ProdOrderLine."Planning Level Code" THEN BEGIN
          ProdOrderLine3."Planning Level Code" := ProdOrderLine."Planning Level Code";
          UpdateCompPlanningLevel(ProdOrderLine3);
        END;
        OnBeforeProdOrderLine3Modify(ProdOrderLine3,ProdOrderLine); <=====================
        ProdOrderLine3.MODIFY;
        ProdOrderLine := ProdOrderLine3;
        EXIT(FALSE);
      END;
    ...
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnBeforeProdOrderLineInsert>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<Copy>
    Code lines:
    ...
          ProdOrderLine."Description 2" := ProdOrder."Description 2";
          ProdOrderLine.VALIDATE(Quantity,ProdOrder.Quantity);
          ProdOrderLine.UpdateDatetime;
          IF SalesLineIsSet THEN
            CopyDimFromSalesLine(SalesLine,ProdOrderLine);
          OnBeforeProdOrderLineInsert(ProdOrderLine,ProdOrder,SalesLineIsSet,SalesLine); <=====================
          ProdOrderLine.INSERT;
          IF ProdOrderLine.HasErrorOccured THEN
            ErrorOccured := TRUE;
    
    ...
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<CopyFromSalesOrder>
    Code lines:
    ...
        ProdOrderLine."Due Date" := SalesLine."Shipment Date";
        ProdOrderLine."Ending Date" :=
          LeadTimeMgt.PlannedEndingDate(ProdOrderLine."Item No.",ProdOrderLine."Location Code",'',ProdOrderLine."Due Date",'',2);
        ProdOrderLine.VALIDATE("Ending Date");
    
        OnBeforeProdOrderLineInsert(ProdOrderLine,ProdOrder,TRUE,SalesLine); <=====================
        InsertProdOrderLine;
        IF ProdOrderLine.HasErrorOccured THEN
          ErrorOccured := TRUE;
        ItemTrackingMgt.CopyItemTracking2(SalesLine.RowID1,ProdOrderLine.RowID1,TRUE,TRUE);
    ...
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnBeforeReserveMultiLevelStructureComp>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<ReserveMultiLevelStructure>
    Code lines:
    ...
    ProdOrderComp3.SETCURRENTKEY(Status,"Prod. Order No.","Prod. Order Line No.","Due Date");
    ProdOrderComp3.SETFILTER("Supplied-by Line No.",'<>0');
    IF ProdOrderComp3.FIND('+') THEN
      REPEAT
        IsHandled := FALSE;
        OnBeforeReserveMultiLevelStructureComp(ProdOrderComp3,ProdOrderLine3,IsHandled); <=====================
        IF NOT IsHandled THEN
          IF ProdOrderLine3.GET(
               ProdOrderComp3.Status,ProdOrderComp3."Prod. Order No.",ProdOrderComp3."Supplied-by Line No.")
          THEN BEGIN
    ...
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCheckMakeOrderLineBeforeIf>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<CheckMakeOrderLine>
    Code lines:
    ...
    ELSE BEGIN
      ParentItem.GET(ProdOrderLine2."Item No.");
      MakeProdOrder := ParentItem."Manufacturing Policy" = ParentItem."Manufacturing Policy"::"Make-to-Order";
    END;
    
    OnCheckMakeOrderLineBeforeIf(ProdOrder,ProdOrderLine2,ProdOrderComp,MakeProdOrder); <=====================
    
    IF NOT MakeProdOrder THEN
      EXIT(FALSE);
    
    ...
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<CheckMakeOrderLine>
    Code lines:
    ...
    ELSE BEGIN
      ParentItem.GET(ProdOrderLine2."Item No.");
      MakeProdOrder := ParentItem."Manufacturing Policy" = ParentItem."Manufacturing Policy"::"Make-to-Order";
    END;
    
    OnCheckMakeOrderLineBeforeIf(ProdOrder,ProdOrderLine2,ProdOrderComp,MakeProdOrder); <=====================
    
    IF NOT MakeProdOrder THEN
      EXIT(FALSE);
    
    ...
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCheckMakeOrderLineBeforeInsert>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<CheckMakeOrderLine>
    Code lines:
    ...
    ProdOrderLine."Ending Time" := ProdOrderComp."Due Time";
    ProdOrderLine.UpdateDatetime;
    // this InsertNew is responsible for controlling if same POLine is added up or new POLine is created
    InsertNew := InsertNew AND (ProdOrderComp."Planning Level Code" > 1);
    
    OnCheckMakeOrderLineBeforeInsert(ProdOrderLine,ProdOrderComp); <=====================
    Inserted := InsertProdOrderLine;
    IF MultiLevel THEN BEGIN
      IF Inserted THEN
        CalcProdOrder.Calculate(ProdOrderLine,Direction::Backward,TRUE,TRUE,TRUE,LetDueDateDecrease)
    ...
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCheckMakeOrderLineOnAfterUpdateProdOrderLine>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<CheckMakeOrderLine>
    Code lines:
    ...
      ELSE BEGIN
        CalcProdOrder.Recalculate(ProdOrderLine,Direction::Backward,LetDueDateDecrease);
        IF ProdOrderLine."Line No." < ProdOrderComp."Prod. Order Line No." THEN
          UpdateProdOrderLine(ProdOrderLine,Direction,LetDueDateDecrease);
      END;
      OnCheckMakeOrderLineOnAfterUpdateProdOrderLine(ProdOrderLine); <=====================
    END ELSE
      EXIT(FALSE);
    ProdOrderComp."Supplied-by Line No." := ProdOrderLine."Line No.";
    ProdOrderComp.MODIFY;
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCopyFromFamilyOnAfterInsertProdOrderLine>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<CopyFromFamily>
    Code lines:
    ...
          ProdOrderLine.UpdateDatetime;
          OnCopyFromFamilyOnBeforeInsertProdOrderLine(ProdOrderLine,FamilyLine);
          InsertProdOrderLine;
          IF ProdOrderLine.HasErrorOccured THEN
            ErrorOccured := TRUE;
          OnCopyFromFamilyOnAfterInsertProdOrderLine(ProdOrderLine); <=====================
        END;
      UNTIL FamilyLine.NEXT = 0;
    EXIT(NOT ErrorOccured);
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCopyFromFamilyOnBeforeInsertProdOrderLine>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<CopyFromFamily>
    Code lines:
    ...
          ProdOrderLine.VALIDATE("Unit of Measure Code",FamilyLine."Unit of Measure Code");
          ProdOrderLine.VALIDATE(Quantity,FamilyLine.Quantity * ProdOrder.Quantity);
          ProdOrderLine."Routing No." := Family."Routing No.";
          ProdOrderLine."Routing Reference No." := 0;
          ProdOrderLine.UpdateDatetime;
          OnCopyFromFamilyOnBeforeInsertProdOrderLine(ProdOrderLine,FamilyLine); <=====================
          InsertProdOrderLine;
          IF ProdOrderLine.HasErrorOccured THEN
            ErrorOccured := TRUE;
          OnCopyFromFamilyOnAfterInsertProdOrderLine(ProdOrderLine);
    ...
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCopyFromSalesOrderOnBeforeProdOrderLineModify>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<CopyFromSalesOrder>
    Code lines:
    ...
          SalesLineReserve.BindToProdOrder(SalesLine,ProdOrderLine,
            ProdOrderLine."Remaining Quantity" - ProdOrderLine."Reserved Quantity",
            ProdOrderLine."Remaining Qty. (Base)" - ProdOrderLine."Reserved Qty. (Base)");
        END;
        CopyDimFromSalesLine(SalesLine,ProdOrderLine);
        OnCopyFromSalesOrderOnBeforeProdOrderLineModify(ProdOrderLine,SalesLine,SalesPlanLine,NextProdOrderLineNo); <=====================
        ProdOrderLine.MODIFY;
      UNTIL (SalesPlanLine.NEXT = 0);
    EXIT(NOT ErrorOccured);
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnCopyFromSalesOrderOnBeforeSalesPlanLineInsert>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<CopyFromSalesOrder>
    Code lines:
    ...
          IF IsReplSystemProdOrder(SalesLine."No.",SalesLine."Variant Code",SalesLine."Location Code") THEN BEGIN
            SalesPlanLine.INIT;
            SalesPlanLine."Sales Order No." := SalesLine."Document No.";
            SalesPlanLine."Sales Order Line No." := SalesLine."Line No.";
            SalesPlanLine.VALIDATE("Item No.",SalesLine."No.");
            OnCopyFromSalesOrderOnBeforeSalesPlanLineInsert(SalesLine,SalesPlanLine); <=====================
            SalesPlanLine.INSERT;
          END;
      UNTIL SalesLine.NEXT = 0;
    
    ...
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnInitProdOrderLineAfterScrap>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<InitProdOrderLine>
    Code lines:
    ...
    ELSE
      CalcProdOrder.SetProdOrderLineBinCodeFromRoute(ProdOrderLine,ProdOrderLine."Location Code",ProdOrderLine."Routing No.");
    
    Item.GET(ItemNo);
    ProdOrderLine."Scrap %" := Item."Scrap %";
    OnInitProdOrderLineAfterScrap(ProdOrderLine,ProdOrder); <=====================
    ProdOrderLine."Due Date" := ProdOrder."Due Date";
    ProdOrderLine."Starting Date" := ProdOrder."Starting Date";
    ProdOrderLine."Starting Time" := ProdOrder."Starting Time";
    ProdOrderLine."Ending Date" := ProdOrder."Ending Date";
    ...
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnInitProdOrderLineAfterVariantCode>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<InitProdOrderLine>
    Code lines:
    ...
    ProdOrderLine."Routing Reference No." := ProdOrderLine."Line No.";
    OnInitProdOrderLineBeforeAssignItemNo(ProdOrderLine,ItemNo,VariantCode,LocationCode);
    ProdOrderLine.VALIDATE("Item No.",ItemNo);
    ProdOrderLine."Location Code" := LocationCode;
    ProdOrderLine."Variant Code" := VariantCode;
    OnInitProdOrderLineAfterVariantCode(ProdOrderLine,VariantCode); <=====================
    IF (LocationCode = ProdOrder."Location Code") AND (ProdOrder."Bin Code" <> '') THEN
      ProdOrderLine.VALIDATE("Bin Code",ProdOrder."Bin Code")
    ELSE
      CalcProdOrder.SetProdOrderLineBinCodeFromRoute(ProdOrderLine,ProdOrderLine."Location Code",ProdOrderLine."Routing No.");
    ...
Codeunit<Create Prod. Order Lines>.PROCEDURE<OnInitProdOrderLineBeforeAssignItemNo>
  Raised in: Codeunit<Create Prod. Order Lines>.PROCEDURE<InitProdOrderLine>
    Code lines:
    ...
    ProdOrderLine.SetIgnoreErrors;
    ProdOrderLine.Status := ProdOrder.Status;
    ProdOrderLine."Prod. Order No." := ProdOrder."No.";
    ProdOrderLine."Line No." := NextProdOrderLineNo;
    ProdOrderLine."Routing Reference No." := ProdOrderLine."Line No.";
    OnInitProdOrderLineBeforeAssignItemNo(ProdOrderLine,ItemNo,VariantCode,LocationCode); <=====================
    ProdOrderLine.VALIDATE("Item No.",ItemNo);
    ProdOrderLine."Location Code" := LocationCode;
    ProdOrderLine."Variant Code" := VariantCode;
    OnInitProdOrderLineAfterVariantCode(ProdOrderLine,VariantCode);
    ...
Codeunit<Create Prod. Order from Sale>.PROCEDURE<OnAfterCreateProdOrder>
  Raised in: Codeunit<Create Prod. Order from Sale>.PROCEDURE<CreateProdOrder>
    Code lines:
    ...
      ProdOrder.VALIDATE("Source No.",SalesLine."No.");
      ProdOrder.VALIDATE(Description,SalesLine.Description);
      SalesLine.CALCFIELDS("Reserved Qty. (Base)");
      ProdOrder.Quantity := SalesLine."Outstanding Qty. (Base)" - SalesLine."Reserved Qty. (Base)";
    END;
    OnAfterCreateProdOrderFromSalesLine(ProdOrder,SalesLine); <=====================
    ProdOrder.MODIFY;
    ProdOrder.SETRANGE("No.",ProdOrder."No.");
    
    IsHandled := FALSE;
    ...
Codeunit<Create Prod. Order from Sale>.PROCEDURE<OnAfterCreateProdOrderFromSalesLine>
  Raised in: Codeunit<Create Prod. Order from Sale>.PROCEDURE<CreateProdOrder>
    Code lines:
    ...
      ProdOrder.VALIDATE("Source No.",SalesLine."No.");
      ProdOrder.VALIDATE(Description,SalesLine.Description);
      SalesLine.CALCFIELDS("Reserved Qty. (Base)");
      ProdOrder.Quantity := SalesLine."Outstanding Qty. (Base)" - SalesLine."Reserved Qty. (Base)";
    END;
    OnAfterCreateProdOrderFromSalesLine(ProdOrder,SalesLine); <=====================
    ProdOrder.MODIFY;
    ProdOrder.SETRANGE("No.",ProdOrder."No.");
    
    IsHandled := FALSE;
    ...
Codeunit<Create Prod. Order from Sale>.PROCEDURE<OnBeforeCreateProdOrderLines>
  Raised in: Codeunit<Create Prod. Order from Sale>.PROCEDURE<CreateProdOrder>
    Code lines:
    ...
    OnAfterCreateProdOrderFromSalesLine(ProdOrder,SalesLine);
    ProdOrder.MODIFY;
    ProdOrder.SETRANGE("No.",ProdOrder."No.");
    
    IsHandled := FALSE;
    OnBeforeCreateProdOrderLines(ProdOrder,SalesLine,IsHandled); <=====================
    IF NOT IsHandled THEN BEGIN
      CreateProdOrderLines.SetSalesLine(SalesLine);
      CreateProdOrderLines.Copy(ProdOrder,1,SalesLine."Variant Code",TRUE);
    END;
    ...
Codeunit<Calculate Low-Level Code>.PROCEDURE<OnAfterCalcLevels>
  Raised in: Codeunit<Calculate Low-Level Code>.PROCEDURE<CalcLevels>
    Code lines:
    ...
              TotalLevels := ActLevel;
          END;
        END;
      UNTIL ProdBOMLine.NEXT = 0;
    
    OnAfterCalcLevels(Type,No,TotalLevels); <=====================
    EXIT(TotalLevels);
Codeunit<Calculate Low-Level Code>.PROCEDURE<OnBeforeItemModify>
  Raised in: Codeunit<Calculate Low-Level Code>.<OnRun>
    Code lines:
    Item2.COPY(Rec);
    Item := Item2; // to store the last item- used in RecalcLowerLevels
    Item2."Low-Level Code" := CalcLevels(1,Item2."No.",0,0);
    IF ProdBOM.GET(Item."Production BOM No.") THEN
      SetRecursiveLevelsOnBOM(ProdBOM,Item2."Low-Level Code" + 1,FALSE);
    OnBeforeItemModify(Item2); <=====================
    Item2.MODIFY;
    COPY(Item2);
Codeunit<Calculate Low-Level Code>.PROCEDURE<OnCalcLevelsForProdBOM>
  Raised in: Codeunit<Calculate Low-Level Code>.PROCEDURE<CalcLevels>
    Code lines:
    ...
            REPEAT
              ActLevel := CalcLevels(Type::Item,Item2."No.",Level + 1,LevelDepth + 1);
              IF ActLevel > TotalLevels THEN
                TotalLevels := ActLevel;
            UNTIL Item2.NEXT = 0;
          OnCalcLevelsForProdBOM(Item2,No,Level,LevelDepth,TotalLevels); <=====================
        END;
      Type::Assembly:
        BEGIN
          Item2.GET(No);
    ...
Codeunit<Planning Line Management>.PROCEDURE<OnAfterInsertPlanningLine>
  Raised in: Codeunit<Planning Line Management>.PROCEDURE<InsertPlanningLine>
    Code lines:
    ...
      ReqLine2.MODIFY;
      ReqLine := ReqLine2;
    END ELSE
      ReqLine.INSERT;
    
    OnAfterInsertPlanningLine(ReqLine); <=====================
Codeunit<Planning Line Management>.PROCEDURE<OnAfterIsPlannedAsmCompFound>
  Raised in: Codeunit<Planning Line Management>.PROCEDURE<IsPlannedAsmCompFound>
    Code lines:
    ...
        ("Variant Code" = AsmBOMComp."Variant Code") AND
        (Position = AsmBOMComp.Position) AND
        ("Position 2" = AsmBOMComp."Position 2") AND
        ("Position 3" = AsmBOMComp."Position 3") AND
        ("Unit of Measure Code" = AsmBOMComp."Unit of Measure Code");
      OnAfterIsPlannedAsmCompFound(PlanningComp,AsmBOMComp,IsFound); <=====================
      EXIT(IsFound);
    END;
Codeunit<Planning Line Management>.PROCEDURE<OnAfterIsPlannedCompFound>
  Raised in: Codeunit<Planning Line Management>.PROCEDURE<IsPlannedCompFound>
    Code lines:
    ...
        (Length = ProdBOMLine.Length) AND
        (Width = ProdBOMLine.Width) AND
        (Weight = ProdBOMLine.Weight) AND
        (Depth = ProdBOMLine.Depth) AND
        ("Unit of Measure Code" = ProdBOMLine."Unit of Measure Code");
      OnAfterIsPlannedCompFound(PlanningComp,ProdBOMLine,IsFound); <=====================
      EXIT(IsFound);
    END;
Codeunit<Planning Line Management>.PROCEDURE<OnAfterTransferRouting>
  Raised in: Codeunit<Planning Line Management>.PROCEDURE<TransferRouting>
    Code lines:
    ...
        PlanningRoutingLine.TESTFIELD(Recalculate,FALSE);
        CheckRoutingLine(RoutingHeader,RoutingLine);
        TransferRoutingLine(PlanningRoutingLine,ReqLine,RoutingLine);
      UNTIL RoutingLine.NEXT = 0;
    
    OnAfterTransferRouting(ReqLine); <=====================
Codeunit<Planning Line Management>.PROCEDURE<OnAfterTransferRtngLine>
  Raised in: Codeunit<Planning Line Management>.PROCEDURE<TransferRoutingLine>
    Code lines:
    ...
      CostCalcMgt.RoutingCostPerUnit(
        Type,"No.","Direct Unit Cost","Indirect Cost %","Overhead Rate","Unit Cost per","Unit Cost Calculation");
      VALIDATE("Direct Unit Cost");
    
      UpdateDatetime;
      OnAfterTransferRtngLine(ReqLine,RoutingLine,PlanningRoutingLine); <=====================
      INSERT;
    END;
Codeunit<Planning Line Management>.PROCEDURE<OnBeforeCalculate>
  Raised in: Codeunit<Planning Line Management>.PROCEDURE<Calculate>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCalculate(ReqLine2,Direction,CalcRouting,CalcComponents,PlanningLevel,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    ReqLine := ReqLine2;
    IF ReqLine."Action Message" <> ReqLine."Action Message"::Cancel THEN
      ReqLine.TESTFIELD(Quantity);
    IF Direction = Direction::Backward THEN
      ReqLine.TESTFIELD("Ending Date")
    ...
Codeunit<Planning Line Management>.PROCEDURE<OnBeforeInsertAsmPlanningComponent>
  Raised in: Codeunit<Planning Line Management>.PROCEDURE<TransferAsmBOM>
    Code lines:
    ...
    
                PlanningComponent."Flushing Method" := CompSKU."Flushing Method";
                PlanningComponent."Ref. Order Type" := ReqLine."Ref. Order Type";
                PlanningComponent."Ref. Order Status" := ReqLine."Ref. Order Status";
                PlanningComponent."Ref. Order No." := ReqLine."Ref. Order No.";
                OnBeforeInsertAsmPlanningComponent(ReqLine,AsmBOMComp[Level],PlanningComponent); <=====================
                PlanningComponent.INSERT;
              END ELSE BEGIN
                PlanningComponent.RESET;
                PlanningComponent.BlockDynamicTracking(Blocked);
    ...
Codeunit<Planning Line Management>.PROCEDURE<OnBeforeInsertPlanningComponent>
  Raised in: Codeunit<Planning Line Management>.PROCEDURE<CreatePlanningComponentFromProdBOM>
    Code lines:
    ...
        "Planning Level Code" := ReqLine."Planning Level" + 1;
    
      "Ref. Order Type" := ReqLine."Ref. Order Type";
      "Ref. Order Status" := ReqLine."Ref. Order Status";
      "Ref. Order No." := ReqLine."Ref. Order No.";
      OnBeforeInsertPlanningComponent(ReqLine,ProdBOMLine,PlanningComponent); <=====================
      INSERT;
    END;
Codeunit<Planning Line Management>.PROCEDURE<OnBeforeModifyPlanningComponent>
  Raised in: Codeunit<Planning Line Management>.PROCEDURE<TransferBOM>
    Code lines:
    ...
                      PlanningComponent.BlockDynamicTracking(Blocked);
                      PlanningComponent.VALIDATE(
                        "Quantity per",
                        PlanningComponent."Quantity per" + ProdBOMLine[Level]."Quantity per" * LineQtyPerUOM / ItemQtyPerUOM);
                      PlanningComponent.VALIDATE("Routing Link Code",ProdBOMLine[Level]."Routing Link Code");
                      OnBeforeModifyPlanningComponent(ReqLine,ProdBOMLine[Level],PlanningComponent,LineQtyPerUOM,ItemQtyPerUOM); <=====================
                      PlanningComponent.MODIFY;
                    END;
    
                    // A temporary list of Planning Components handled is sustained:
    ...
Codeunit<Planning Line Management>.PROCEDURE<OnBeforeTransferRouting>
  Raised in: Codeunit<Planning Line Management>.PROCEDURE<TransferRouting>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTransferRouting(ReqLine,PlanningResiliency,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF ReqLine."Routing No." = '' THEN
      EXIT;
    
    RoutingHeader.GET(ReqLine."Routing No.");
    RoutingLine.SETRANGE("Routing No.",ReqLine."Routing No.");
    ...
Codeunit<Planning Line Management>.PROCEDURE<OnCalculateOnBeforeTransferBOM>
  Raised in: Codeunit<Planning Line Management>.PROCEDURE<Calculate>
    Code lines:
    ...
    
        IF ReqLine."Replenishment System" = ReqLine."Replenishment System"::Assembly THEN
          TransferAsmBOM(Item."No.",1,ReqLine."Qty. per Unit of Measure")
        ELSE BEGIN
          IsHandled := FALSE;
          OnCalculateOnBeforeTransferBOM(ReqLine,SKU,PlanningResiliency,IsHandled); <=====================
          IF NOT IsHandled THEN
            TransferBOM(
              ReqLine."Production BOM No.",1,ReqLine."Qty. per Unit of Measure",
              UOMMgt.GetQtyPerUnitOfMeasure(
    ...
Codeunit<Planning Line Management>.PROCEDURE<OnCheckMultiLevelStructureOnBeforeInsertPlanningLine>
  Raised in: Codeunit<Planning Line Management>.PROCEDURE<CheckMultiLevelStructure>
    Code lines:
    ...
    
        ReqLine3."Planning Level" := PlanningLevel + 1;
        ReqLine3."Related to Planning Line" := ReqLine2."Line No.";
        ReqLine3."Order Promising ID" := ReqLine2."Order Promising ID";
        ReqLine3."Order Promising Line ID" := ReqLine2."Order Promising Line ID";
        OnCheckMultiLevelStructureOnBeforeInsertPlanningLine(ReqLine3,PlanningComp); <=====================
        InsertPlanningLine(ReqLine3);
        ReqLine3.Quantity :=
          ROUND(
            ReqLine3."Quantity (Base)" /
    ...
Codeunit<Planning Line Management>.PROCEDURE<OnTransferBOMOnAfterProdBOMLineSetFilters>
  Raised in: Codeunit<Planning Line Management>.PROCEDURE<TransferBOM>
    Code lines:
    ...
      ProdBOMLine[Level].SETRANGE("Version Code",VersionMgt.GetBOMVersion(BOMHeader."No.",ReqLine."Starting Date",TRUE))
    ELSE
      ProdBOMLine[Level].SETRANGE("Version Code",ReqLine."Production BOM Version Code");
    ProdBOMLine[Level].SETFILTER("Starting Date",'%1|..%2',0D,ReqLine."Starting Date");
    ProdBOMLine[Level].SETFILTER("Ending Date",'%1|%2..',0D,ReqLine."Starting Date");
    OnTransferBOMOnAfterProdBOMLineSetFilters(ProdBOMLine[Level],ReqLine); <=====================
    IF ProdBOMLine[Level].FIND('-') THEN
      REPEAT
        IsHandled := FALSE;
        OnTransferBOMOnBeforeTransferPlanningComponent(ReqLine,ProdBOMLine[Level],Blocked,IsHandled);
    ...
Codeunit<Planning Line Management>.PROCEDURE<OnTransferBOMOnBeforeGetDefaultBin>
  Raised in: Codeunit<Planning Line Management>.PROCEDURE<CreatePlanningComponentFromProdBOM>
    Code lines:
    ...
      Description := ProdBOMLine.Description;
      "Planning Line Origin" := ReqLine."Planning Line Origin";
      VALIDATE("Unit of Measure Code",ProdBOMLine."Unit of Measure Code");
      "Quantity per" := ProdBOMLine."Quantity per" * LineQtyPerUOM / ItemQtyPerUOM;
      VALIDATE("Routing Link Code",ProdBOMLine."Routing Link Code");
      OnTransferBOMOnBeforeGetDefaultBin(PlanningComponent,ProdBOMLine); <=====================
      GetDefaultBin;
      Length := ProdBOMLine.Length;
      Width := ProdBOMLine.Width;
      Weight := ProdBOMLine.Weight;
    ...
Codeunit<Planning Line Management>.PROCEDURE<OnTransferBOMOnBeforeTransferPlanningComponent>
  Raised in: Codeunit<Planning Line Management>.PROCEDURE<TransferBOM>
    Code lines:
    ...
    ProdBOMLine[Level].SETFILTER("Ending Date",'%1|%2..',0D,ReqLine."Starting Date");
    OnTransferBOMOnAfterProdBOMLineSetFilters(ProdBOMLine[Level],ReqLine);
    IF ProdBOMLine[Level].FIND('-') THEN
      REPEAT
        IsHandled := FALSE;
        OnTransferBOMOnBeforeTransferPlanningComponent(ReqLine,ProdBOMLine[Level],Blocked,IsHandled); <=====================
        IF NOT IsHandled THEN BEGIN
          IF ProdBOMLine[Level]."Routing Link Code" <> '' THEN BEGIN
            PlanningRtngLine2.SETRANGE("Worksheet Template Name",ReqLine."Worksheet Template Name");
            PlanningRtngLine2.SETRANGE("Worksheet Batch Name",ReqLine."Journal Batch Name");
    ...
Codeunit<Planning Line Management>.PROCEDURE<OnTransferBOMOnBeforeUpdatePlanningComp>
  Raised in: Codeunit<Planning Line Management>.PROCEDURE<TransferBOM>
    Code lines:
    ...
          CASE ProdBOMLine[Level].Type OF
            ProdBOMLine[Level].Type::Item:
              BEGIN
                IsHandled := FALSE;
                UpdateCondition := ReqQty <> 0;
                OnTransferBOMOnBeforeUpdatePlanningComp(ProdBOMLine[Level],UpdateCondition,IsHandled); <=====================
                IF NOT IsHandled THEN
                  IF UpdateCondition THEN BEGIN
                    IF NOT IsPlannedComp(PlanningComponent,ReqLine,ProdBOMLine[Level]) THEN BEGIN
                      NextPlanningCompLineNo := NextPlanningCompLineNo + 10000;
    ...
Codeunit<Calculate Planning Route Line>.PROCEDURE<OnBeforeCalculateRouteLine>
  Raised in: Codeunit<Calculate Planning Route Line>.PROCEDURE<CalculateRouteLine>
    Code lines:
    ...
      (1 + ReqLine."Scrap %" / 100) +
      PlanningRoutingLine."Fixed Scrap Qty. (Accum.)";
    
    PlanningRoutingLine."Input Quantity" := MaxLotSize;
    
    OnBeforeCalculateRouteLine(PlanningRoutingLine); <=====================
    IF Direction = Direction::Backward THEN
      CalcRoutingLineBack(CalcStartEndDate)
    ELSE
      CalcRoutingLineForward(CalcStartEndDate);
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnAfterCarryOutToReqWksh>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<CarryOutToReqWksh>
    Code lines:
    ...
        ProdOrderCapNeed2."Worksheet Batch Name" := ReqJournalName;
        ProdOrderCapNeed.DELETE;
        ProdOrderCapNeed2.INSERT;
      UNTIL ProdOrderCapNeed.NEXT = 0;
    
    OnAfterCarryOutToReqWksh(ReqLine2,ReqLine); <=====================
Codeunit<Carry Out Action>.PROCEDURE<OnAfterDeleteOrderLines>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<DeleteOrderLines>
    Code lines:
    ...
          AsmHeader.GET(AsmHeader."Document Type"::Order,ReqLine."Ref. Order No.");
          AsmHeader.DELETE(TRUE);
        END;
    END;
    
    OnAfterDeleteOrderLines(ReqLine); <=====================
Codeunit<Carry Out Action>.PROCEDURE<OnAfterInsertAsmHeader>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<InsertAsmHeader>
    Code lines:
    ...
    IF BOMComp.FIND('-') THEN
      REPEAT
        AsmHeader.AddBOMLine(BOMComp);
      UNTIL BOMComp.NEXT = 0;
    
    OnAfterInsertAsmHeader(ReqLine,AsmHeader); <=====================
    
    PrintAsmOrder(AsmHeader);
    TempDocumentEntry.INIT;
    TempDocumentEntry."Table ID" := DATABASE::"Assembly Header";
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnAfterInsertProdOrder>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<InsertProdOrder>
    Code lines:
    ...
      ProdOrder.MODIFY;
      InsertTempProdOrder(ReqLine,ProdOrder);
    END;
    InsertProdOrderLine(ReqLine,ProdOrder,Item);
    
    OnAfterInsertProdOrder(ProdOrder,ProdOrderChoice,ReqLine); <=====================
Codeunit<Carry Out Action>.PROCEDURE<OnAfterInsertProdOrderLine>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<InsertProdOrderLine>
    Code lines:
    ...
    TransferCapNeed(ReqLine,ProdOrder,ProdOrderLine."Routing No.",ProdOrderLine."Routing Reference No.");
    
    IF ProdOrderLine."Planning Level Code" > 0 THEN
      UpdateComponentLink(ProdOrderLine);
    
    OnAfterInsertProdOrderLine(ReqLine,ProdOrder,ProdOrderLine,Item); <=====================
    
    FinalizeOrderHeader(ProdOrder);
Codeunit<Carry Out Action>.PROCEDURE<OnAfterProdOrderChgAndReshedule>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<ProdOrderChgAndReshedule>
    Code lines:
    ...
            ProdOrder."Due Date" := "Due Date";
            OnProdOrderChgAndResheduleOnBeforeProdOrderModify(ProdOrder,ProdOrderLine,ReqLine);
            ProdOrder.MODIFY;
            FinalizeOrderHeader(ProdOrder);
          END;
        OnAfterProdOrderChgAndReshedule(ReqLine,ProdOrderLine); <=====================
      END ELSE BEGIN
        MESSAGE(STRSUBSTNO(CouldNotChangeSupplyTxt,"Ref. Order No.","Ref. Line No."));
        EXIT(FALSE);
      END;
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnAfterProdOrderRtngLineInsert>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<TransferRouting>
    Code lines:
    ...
              FlushingMethod);
    
        ProdOrderRtngLine.UpdateDatetime;
        OnAfterTransferPlanningRtngLine(PlanningRtngLine,ProdOrderRtngLine);
        ProdOrderRtngLine.INSERT;
        OnAfterProdOrderRtngLineInsert(ProdOrderRtngLine,PlanningRtngLine,ProdOrder,ReqLine); <=====================
        CalcProdOrder.TransferTaskInfo(ProdOrderRtngLine,ReqLine."Routing Version Code");
      UNTIL PlanningRtngLine.NEXT = 0;
    
    EXIT(NOT PlanningRtngLine.ISEMPTY);
Codeunit<Carry Out Action>.PROCEDURE<OnAfterTransferAsmPlanningComp>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<TransferAsmPlanningComp>
    Code lines:
    ...
        AsmLine."Cost Amount" := PlanningComponent."Cost Amount";
    
        AsmLine."Shortcut Dimension 1 Code" := PlanningComponent."Shortcut Dimension 1 Code";
        AsmLine."Shortcut Dimension 2 Code" := PlanningComponent."Shortcut Dimension 2 Code";
    
        OnAfterTransferAsmPlanningComp(PlanningComponent,AsmLine); <=====================
    
        AsmLine.INSERT;
    
        ReservePlanningComponent.TransferPlanningCompToAsmLine(PlanningComponent,AsmLine,0,TRUE);
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnAfterTransferPlanningComp>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<TransferBOM>
    Code lines:
    ...
        ProdOrderComp2.Status := ProdOrder.Status;
        ProdOrderComp2."Prod. Order No." := ProdOrder."No.";
        ProdOrderComp2."Prod. Order Line No." := ProdOrderLineNo;
        ProdOrderComp2.CopyFromPlanningComp(PlanningComponent);
        ProdOrderComp2.UpdateDatetime;
        OnAfterTransferPlanningComp(PlanningComponent,ProdOrderComp2); <=====================
        ProdOrderComp2.INSERT;
        CopyProdBOMComments(ProdOrderComp2);
        ReservePlanningComponent.TransferPlanningCompToPOComp(PlanningComponent,ProdOrderComp2,0,TRUE);
        IF ProdOrderComp2.Status IN [ProdOrderComp2.Status::"Firm Planned",ProdOrderComp2.Status::Released] THEN
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnAfterTransferPlanningRtngLine>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<TransferRouting>
    Code lines:
    ...
          ProdOrderRtngLine."Open Shop Floor Bin Code" := WMSManagement.GetProdCenterBinCode(
              PlanningRtngLine.Type,PlanningRtngLine."No.",ReqLine."Location Code",TRUE,
              FlushingMethod);
    
        ProdOrderRtngLine.UpdateDatetime;
        OnAfterTransferPlanningRtngLine(PlanningRtngLine,ProdOrderRtngLine); <=====================
        ProdOrderRtngLine.INSERT;
        OnAfterProdOrderRtngLineInsert(ProdOrderRtngLine,PlanningRtngLine,ProdOrder,ReqLine);
        CalcProdOrder.TransferTaskInfo(ProdOrderRtngLine,ReqLine."Routing Version Code");
      UNTIL PlanningRtngLine.NEXT = 0;
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnAfterTransLineInsert>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<InsertTransLine>
    Code lines:
    ...
    TransLine."Receipt Date" := ReqLine."Due Date";
    TransLine."Shipment Date" := ReqLine."Transfer Shipment Date";
    TransLine.VALIDATE("Planning Flexibility",ReqLine."Planning Flexibility");
    OnInsertTransLineWithReqLine(TransLine,ReqLine);
    TransLine.INSERT;
    OnAfterTransLineInsert(TransLine,ReqLine); <=====================
    
    ReqLineReserve.TransferReqLineToTransLine(ReqLine,TransLine,ReqLine."Quantity (Base)",FALSE);
    IF ReqLine.Reserve THEN
      ReserveBindingOrderToTrans(TransLine,ReqLine);
Codeunit<Carry Out Action>.PROCEDURE<OnAsmOrderChgAndResheduleOnBeforeAsmHeaderModify>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<AsmOrderChgAndReshedule>
    Code lines:
    ...
      IF AsmHeader.GET(AsmHeader."Document Type"::Order,"Ref. Order No.") THEN BEGIN
        AsmHeader.SetWarningsOff;
        AsmHeader.VALIDATE(Quantity,Quantity);
        AsmHeader.VALIDATE("Planning Flexibility","Planning Flexibility");
        AsmHeader.VALIDATE("Due Date","Due Date");
        OnAsmOrderChgAndResheduleOnBeforeAsmHeaderModify(ReqLine,AsmHeader); <=====================
        AsmHeader.MODIFY(TRUE);
        ReqLineReserve.TransferPlanningLineToAsmHdr(ReqLine,AsmHeader,0,TRUE);
        ReqLineReserve.UpdateDerivedTracking(ReqLine);
        ReservMgt.SetAssemblyHeader(AsmHeader);
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnBeforeDeleteOrderLines>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<DeleteOrderLines>
    Code lines:
    OnBeforeDeleteOrderLines(ReqLine); <=====================
    
    CASE ReqLine."Ref. Order Type" OF
      ReqLine."Ref. Order Type"::"Prod. Order":
        BEGIN
          ProdOrderLine.SETCURRENTKEY(Status,"Prod. Order No.","Line No.");
          ProdOrderLine.SETFILTER("Item No.",'<>%1','');
          ProdOrderLine.SETRANGE(Status,ReqLine."Ref. Order Status");
          ProdOrderLine.SETRANGE("Prod. Order No.",ReqLine."Ref. Order No.");
          IF ProdOrderLine.COUNT IN [0,1] THEN BEGIN
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnBeforePrintPurchaseOrder>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<PrintPurchaseOrder>
    Code lines:
    ...
        PurchLine.FINDFIRST;
        CODEUNIT.RUN(CODEUNIT::"Purch.-Calc.Discount",PurchLine);
      END;
    
      IsHandled := FALSE;
      OnBeforePrintPurchaseOrder(PurchHeader2,IsHandled); <=====================
      IF IsHandled THEN
        EXIT;
    
      PurchHeader2.SETRECFILTER;
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnBeforeTransHeaderInsert>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<InsertTransHeader>
    Code lines:
    ...
      TransHeader."Receipt Date" := "Due Date";
      TransHeader."Shipment Date" := "Transfer Shipment Date";
      TransHeader."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
      TransHeader."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
      TransHeader."Dimension Set ID" := "Dimension Set ID";
      OnBeforeTransHeaderInsert(TransHeader,ReqLine); <=====================
      TransHeader.MODIFY;
      TempDocumentEntry.INIT;
      TempDocumentEntry."Table ID" := DATABASE::"Transfer Header";
      TempDocumentEntry."Document No." := TransHeader."No.";
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnCarryOutToReqWkshOnAfterPlanningCompInsert>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<CarryOutToReqWksh>
    Code lines:
    ...
        PlanningComp2."Worksheet Batch Name" := ReqJournalName;
        IF PlanningComp2."Planning Line Origin" = PlanningComp2."Planning Line Origin"::"Order Planning" THEN
          PlanningComp2."Planning Line Origin" := PlanningComp2."Planning Line Origin"::" ";
        PlanningComp2."Dimension Set ID" := ReqLine2."Dimension Set ID";
        PlanningComp2.INSERT;
        OnCarryOutToReqWkshOnAfterPlanningCompInsert(PlanningComp2,PlanningComp); <=====================
      UNTIL PlanningComp.NEXT = 0;
    
    PlanningRoutingLine.SETRANGE("Worksheet Template Name",ReqLine."Worksheet Template Name");
    PlanningRoutingLine.SETRANGE("Worksheet Batch Name",ReqLine."Journal Batch Name");
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnCarryOutToReqWkshOnAfterPlanningRoutingLineInsert>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<CarryOutToReqWksh>
    Code lines:
    ...
    IF PlanningRoutingLine.FIND('-') THEN
      REPEAT
        PlanningRoutingLine2 := PlanningRoutingLine;
        PlanningRoutingLine2."Worksheet Template Name" := ReqWkshTempName;
        PlanningRoutingLine2."Worksheet Batch Name" := ReqJournalName;
        OnCarryOutToReqWkshOnAfterPlanningRoutingLineInsert(PlanningRoutingLine2,PlanningRoutingLine); <=====================
        PlanningRoutingLine2.INSERT;
      UNTIL PlanningRoutingLine.NEXT = 0;
    
    ProdOrderCapNeed.SETRANGE("Worksheet Template Name",ReqLine."Worksheet Template Name");
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnInsertProdOrderLineOnAfterTransferRouting>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<InsertProdOrderLine>
    Code lines:
    ...
      ReserveBindingOrderToProd(ProdOrderLine,ReqLine);
    
    ProdOrderLine.MODIFY;
    IF TransferRouting(ReqLine,ProdOrder,ProdOrderLine."Routing No.",ProdOrderLine."Routing Reference No.") THEN BEGIN
      RefreshProdOrderLine := FALSE;
      OnInsertProdOrderLineOnAfterTransferRouting(ProdOrderLine,RefreshProdOrderLine); <=====================
      IF RefreshProdOrderLine THEN
        ProdOrderLine.GET(ProdOrderLine.Status,ProdOrderLine."Prod. Order No.",ProdOrderLine."Line No.");
      CalcProdOrder.SetProdOrderLineBinCodeFromPlanningRtngLines(ProdOrderLine,ReqLine);
      ProdOrderLine.MODIFY;
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnInsertProdOrderLineWithReqLine>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<InsertProdOrderLine>
    Code lines:
    ...
      ProdOrderLine."Planning Flexibility" := ReqLine."Planning Flexibility";
    ProdOrderLine.UpdateDatetime;
    ProdOrderLine."Shortcut Dimension 1 Code" := ReqLine."Shortcut Dimension 1 Code";
    ProdOrderLine."Shortcut Dimension 2 Code" := ReqLine."Shortcut Dimension 2 Code";
    ProdOrderLine."Dimension Set ID" := ReqLine."Dimension Set ID";
    OnInsertProdOrderLineWithReqLine(ProdOrderLine,ReqLine); <=====================
    ProdOrderLine.INSERT;
    CalculateProdOrder.CalculateProdOrderDates(ProdOrderLine,FALSE);
    
    ReqLineReserve.TransferPlanningLineToPOLine(ReqLine,ProdOrderLine,ReqLine."Net Quantity (Base)",FALSE);
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnInsertProdOrderWithReqLine>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<InsertProdOrder>
    Code lines:
    ...
      ProdOrder."Cost Amount" := ReqLine."Cost Amount";
      ProdOrder."Shortcut Dimension 1 Code" := ReqLine."Shortcut Dimension 1 Code";
      ProdOrder."Shortcut Dimension 2 Code" := ReqLine."Shortcut Dimension 2 Code";
      ProdOrder."Dimension Set ID" := ReqLine."Dimension Set ID";
      ProdOrder.UpdateDatetime;
      OnInsertProdOrderWithReqLine(ProdOrder,ReqLine); <=====================
      ProdOrder.MODIFY;
      InsertTempProdOrder(ReqLine,ProdOrder);
    END;
    InsertProdOrderLine(ReqLine,ProdOrder,Item);
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnInsertTransLineWithReqLine>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<InsertTransLine>
    Code lines:
    ...
    TransLine."Shortcut Dimension 2 Code" := ReqLine."Shortcut Dimension 2 Code";
    TransLine."Dimension Set ID" := ReqLine."Dimension Set ID";
    TransLine."Receipt Date" := ReqLine."Due Date";
    TransLine."Shipment Date" := ReqLine."Transfer Shipment Date";
    TransLine.VALIDATE("Planning Flexibility",ReqLine."Planning Flexibility");
    OnInsertTransLineWithReqLine(TransLine,ReqLine); <=====================
    TransLine.INSERT;
    OnAfterTransLineInsert(TransLine,ReqLine);
    
    ReqLineReserve.TransferReqLineToTransLine(ReqLine,TransLine,ReqLine."Quantity (Base)",FALSE);
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnProdOrderChgAndResheduleOnAfterValidateQuantity>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<ProdOrderChgAndReshedule>
    Code lines:
    ...
        ProdOrderCapNeed.SETRANGE("Worksheet Batch Name","Journal Batch Name");
        ProdOrderCapNeed.SETRANGE("Worksheet Line No.","Line No.");
        ProdOrderCapNeed.DELETEALL;
        ProdOrderLine.BlockDynamicTracking(TRUE);
        ProdOrderLine.VALIDATE(Quantity,Quantity);
        OnProdOrderChgAndResheduleOnAfterValidateQuantity(ProdOrderLine,ReqLine); <=====================
        ProdOrderLine."Ending Time" := "Ending Time";
        ProdOrderLine."Due Date" := "Due Date";
        ProdOrderLine.VALIDATE("Planning Flexibility","Planning Flexibility");
        ProdOrderLine.VALIDATE("Ending Date","Ending Date");
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnProdOrderChgAndResheduleOnBeforeProdOrderModify>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<ProdOrderChgAndReshedule>
    Code lines:
    ...
            ProdOrder."Starting Time" := "Starting Time";
            ProdOrder."Starting Date" := "Starting Date";
            ProdOrder."Ending Time" := "Ending Time";
            ProdOrder."Ending Date" := "Ending Date";
            ProdOrder."Due Date" := "Due Date";
            OnProdOrderChgAndResheduleOnBeforeProdOrderModify(ProdOrder,ProdOrderLine,ReqLine); <=====================
            ProdOrder.MODIFY;
            FinalizeOrderHeader(ProdOrder);
          END;
        OnAfterProdOrderChgAndReshedule(ReqLine,ProdOrderLine);
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnPurchOrderChgAndResheduleOnBeforePurchLineModify>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<PurchOrderChgAndReshedule>
    Code lines:
    ...
    THEN BEGIN
      PurchLine.BlockDynamicTracking(TRUE);
      PurchLine.VALIDATE(Quantity,ReqLine.Quantity);
      PurchLine.VALIDATE("Expected Receipt Date",ReqLine."Due Date");
      PurchLine.VALIDATE("Planning Flexibility",ReqLine."Planning Flexibility");
      OnPurchOrderChgAndResheduleOnBeforePurchLineModify(ReqLine,PurchLine); <=====================
      PurchLine.MODIFY(TRUE);
      ReqLineReserve.TransferReqLineToPurchLine(ReqLine,PurchLine,0,TRUE);
      ReqLineReserve.UpdateDerivedTracking(ReqLine);
      ReservMgt.SetPurchLine(PurchLine);
    ...
Codeunit<Carry Out Action>.PROCEDURE<OnTransOrderChgAndResheduleOnBeforeTransLineModify>
  Raised in: Codeunit<Carry Out Action>.PROCEDURE<TransOrderChgAndReshedule>
    Code lines:
    ...
      TransLine.BlockDynamicTracking(TRUE);
      TransLine.VALIDATE(Quantity,ReqLine.Quantity);
      TransLine.VALIDATE("Receipt Date",ReqLine."Due Date");
      TransLine."Shipment Date" := ReqLine."Transfer Shipment Date";
      TransLine.VALIDATE("Planning Flexibility",ReqLine."Planning Flexibility");
      OnTransOrderChgAndResheduleOnBeforeTransLineModify(ReqLine,TransLine); <=====================
      TransLine.MODIFY(TRUE);
      ReqLineReserve.TransferReqLineToTransLine(ReqLine,TransLine,0,TRUE);
      ReqLineReserve.UpdateDerivedTracking(ReqLine);
      ReservMgt.SetTransferLine(TransLine,0);
    ...
Codeunit<Reservation-Check Date Confl.>.PROCEDURE<OnUpdateDateFilterReservEntryLoop>
  Raised in: Codeunit<Reservation-Check Date Confl.>.PROCEDURE<UpdateDate>
    Code lines:
    FilterReservEntry.SETRANGE("Reservation Status");
    IF NOT FilterReservEntry.FIND('-') THEN
      EXIT;
    
    REPEAT
      OnUpdateDateFilterReservEntryLoop(FilterReservEntry,ForceModifyShipmentDate,Date); <=====================
      IF FilterReservEntry."Quantity (Base)" < 0 THEN
        IF (FilterReservEntry."Expected Receipt Date" <> 0D) AND
           (Date < FilterReservEntry."Expected Receipt Date") AND NOT ForceModifyShipmentDate
        THEN
    ...
Codeunit<Create Reserv. Entry>.PROCEDURE<OnAfterCheckValidity>
  Raised in: Codeunit<Create Reserv. Entry>.PROCEDURE<CheckValidity>
    Code lines:
    ...
      DATABASE::"Job Journal Line":
        IsError := ReservEntry.Binding = ReservEntry.Binding::"Order-to-Order";
      DATABASE::"Job Planning Line":
        IsError := ReservEntry."Source Subtype" <> 2;
      ELSE
        OnAfterCheckValidity(ReservEntry,IsError); <=====================
    END;
    
    IF IsError THEN
      ERROR(Text000);
Codeunit<Create Reserv. Entry>.PROCEDURE<OnAfterCopyFromInsertReservEntry>
  Raised in: Codeunit<Create Reserv. Entry>.PROCEDURE<CreateEntry>
    Code lines:
    ...
      ReservEntry2."Serial No." := InsertReservEntry2."Serial No.";
      ReservEntry2."Lot No." := InsertReservEntry2."Lot No.";
      ReservEntry2."Qty. per Unit of Measure" := InsertReservEntry2."Qty. per Unit of Measure";
      ReservEntry2."Untracked Surplus" := InsertReservEntry2."Untracked Surplus" AND NOT ReservEntry2.Positive;
    
      OnAfterCopyFromInsertReservEntry(InsertReservEntry2,ReservEntry2); <=====================
    
      IF NOT QtyToHandleAndInvoiceIsSet THEN BEGIN
        ReservEntry2."Qty. to Handle (Base)" := ReservEntry2."Quantity (Base)";
        ReservEntry2."Qty. to Invoice (Base)" := ReservEntry2."Quantity (Base)";
    ...
Codeunit<Create Reserv. Entry>.PROCEDURE<OnAfterReservEntryInsertNonSurplus>
  Raised in: Codeunit<Create Reserv. Entry>.PROCEDURE<CreateEntry>
    Code lines:
    ...
      IF Status < Status::Surplus THEN BEGIN
        ReservEntry2."Entry No." := ReservEntry."Entry No.";
        ReservEntry2.UpdateItemTracking;
        OnBeforeReservEntryInsertNonSurplus(ReservEntry2);
        ReservEntry2.INSERT;
        OnAfterReservEntryInsertNonSurplus(ReservEntry2,ReservEntry); <=====================
      END;
    END;
    
    LastReservEntry := ReservEntry;
    ...
Codeunit<Create Reserv. Entry>.PROCEDURE<OnAfterSignFactor>
  Raised in: Codeunit<Create Reserv. Entry>.PROCEDURE<SignFactor>
    Code lines:
    ...
            EXIT(1);
          EXIT(-1);
        END;
    END;
    
    OnAfterSignFactor(ReservEntry,Sign); <=====================
    EXIT(Sign);
Codeunit<Create Reserv. Entry>.PROCEDURE<OnBeforeCreateRemainingNonSurplusReservEntry>
  Raised in: Codeunit<Create Reserv. Entry>.PROCEDURE<CreateRemainingReservEntry>
    Code lines:
    ...
          OldReservEntry2."Source ID",OldReservEntry2."Source Batch Name",
          OldReservEntry2."Source Prod. Order Line",OldReservEntry2."Source Ref. No.",OldReservEntry2."Qty. per Unit of Measure",
          OldReservEntry2."Serial No.",OldReservEntry2."Lot No.");
        InsertReservEntry2."Warranty Date" := OldReservEntry2."Warranty Date";
        InsertReservEntry2."Expiration Date" := OldReservEntry2."Expiration Date";
        OnBeforeCreateRemainingNonSurplusReservEntry(InsertReservEntry2,OldReservEntry2); <=====================
      END;
    
    CreateEntry(
      OldReservEntry."Item No.",OldReservEntry."Variant Code",
    ...
Codeunit<Create Reserv. Entry>.PROCEDURE<OnBeforeCreateRemainingReservEntry>
  Raised in: Codeunit<Create Reserv. Entry>.PROCEDURE<CreateRemainingReservEntry>
    Code lines:
    ...
      OldReservEntry."Source Prod. Order Line",OldReservEntry."Source Ref. No.",
      OldReservEntry."Qty. per Unit of Measure",RemainingQuantity,RemainingQuantityBase,
      OldReservEntry."Serial No.",OldReservEntry."Lot No.");
    InsertReservEntry."Warranty Date" := OldReservEntry."Warranty Date";
    InsertReservEntry."Expiration Date" := OldReservEntry."Expiration Date";
    OnBeforeCreateRemainingReservEntry(InsertReservEntry,OldReservEntry); <=====================
    
    IF OldReservEntry."Reservation Status" < OldReservEntry."Reservation Status"::Surplus THEN
      IF OldReservEntry2.GET(OldReservEntry."Entry No.",NOT OldReservEntry.Positive) THEN BEGIN // Get the related entry
        CreateReservEntryFrom(
    ...
Codeunit<Create Reserv. Entry>.PROCEDURE<OnBeforeReservEntryInsert>
  Raised in: Codeunit<Create Reserv. Entry>.PROCEDURE<CreateEntry>
    Code lines:
    ...
    
    FirstSplit := TRUE;
    WHILE SplitReservEntry(ReservEntry,ReservEntry2,TrackingSpecificationExists,FirstSplit) DO BEGIN
      ReservEntry."Entry No." := 0;
      ReservEntry.UpdateItemTracking;
      OnBeforeReservEntryInsert(ReservEntry); <=====================
      ReservEntry.INSERT;
      IF Status < Status::Surplus THEN BEGIN
        ReservEntry2."Entry No." := ReservEntry."Entry No.";
        ReservEntry2.UpdateItemTracking;
    ...
Codeunit<Create Reserv. Entry>.PROCEDURE<OnBeforeReservEntryInsertNonSurplus>
  Raised in: Codeunit<Create Reserv. Entry>.PROCEDURE<CreateEntry>
    Code lines:
    ...
      OnBeforeReservEntryInsert(ReservEntry);
      ReservEntry.INSERT;
      IF Status < Status::Surplus THEN BEGIN
        ReservEntry2."Entry No." := ReservEntry."Entry No.";
        ReservEntry2.UpdateItemTracking;
        OnBeforeReservEntryInsertNonSurplus(ReservEntry2); <=====================
        ReservEntry2.INSERT;
        OnAfterReservEntryInsertNonSurplus(ReservEntry2,ReservEntry);
      END;
    END;
    ...
Codeunit<Create Reserv. Entry>.PROCEDURE<OnBeforeSplitNonSurplusReservEntry>
  Raised in: Codeunit<Create Reserv. Entry>.PROCEDURE<SplitReservEntry>
    Code lines:
    ...
      ReservEntry.Quantity := OldReservEntryQty;
    TempTrkgSpec1.DELETE;
    
    IF ReservEntry."Reservation Status" < ReservEntry."Reservation Status"::Surplus THEN BEGIN
      TempTrkgSpec2.GET(TempTrkgSpec1."Entry No.");
      OnBeforeSplitNonSurplusReservEntry(TempTrkgSpec2,ReservEntry); <=====================
    
      ReservEntry2.CopyTrackingFromSpec(TempTrkgSpec2);
      OldReservEntryQty := ReservEntry2.Quantity;
      ReservEntry2.VALIDATE("Quantity (Base)",TempTrkgSpec2."Quantity (Base)");
    ...
Codeunit<Create Reserv. Entry>.PROCEDURE<OnBeforeSplitReservEntry>
  Raised in: Codeunit<Create Reserv. Entry>.PROCEDURE<SplitReservEntry>
    Code lines:
    ...
    SalesSetup.GET;
    TempTrkgSpec1.RESET;
    IF NOT TempTrkgSpec1.FINDFIRST THEN
      EXIT(FALSE);
    
    OnBeforeSplitReservEntry(TempTrkgSpec1,ReservEntry); <=====================
    
    ReservEntry.CopyTrackingFromSpec(TempTrkgSpec1);
    OldReservEntryQty := ReservEntry.Quantity;
    ReservEntry.VALIDATE("Quantity (Base)",TempTrkgSpec1."Quantity (Base)");
    ...
Codeunit<Create Reserv. Entry>.PROCEDURE<OnBeforeUseOldReservEntry>
  Raised in: Codeunit<Create Reserv. Entry>.PROCEDURE<TransferReservEntry>
    Code lines:
    ...
        NewReservEntry.VALIDATE("Quantity (Base)",-TransferQty);
        NewReservEntry.MODIFY;
      END;
    END ELSE
      IF ABS(TransferQty) < ABS(OldReservEntry."Quantity (Base)") THEN BEGIN
        OnBeforeUseOldReservEntry(OldReservEntry,InsertReservEntry); <=====================
        IF OldReservEntry.Binding = OldReservEntry.Binding::"Order-to-Order" THEN
          SetBinding(OldReservEntry.Binding::"Order-to-Order");
        IF OldReservEntry."Disallow Cancellation" THEN
          SetDisallowCancellation(OldReservEntry."Disallow Cancellation");
    ...
Codeunit<Create Reserv. Entry>.PROCEDURE<OnCreateEntryOnBeforeSurplusCondition>
  Raised in: Codeunit<Create Reserv. Entry>.PROCEDURE<CreateEntry>
    Code lines:
    ...
      ReservEntry."Qty. to Handle (Base)" := ReservEntry."Quantity (Base)";
      ReservEntry."Qty. to Invoice (Base)" := ReservEntry."Quantity (Base)";
    END;
    ReservEntry."Untracked Surplus" := InsertReservEntry."Untracked Surplus" AND NOT ReservEntry.Positive;
    
    OnCreateEntryOnBeforeSurplusCondition(ReservEntry); <=====================
    
    IF Status < Status::Surplus THEN BEGIN
      InsertReservEntry2.TESTFIELD("Source Type");
    
    ...
Codeunit<Create Reserv. Entry>.PROCEDURE<OnTransferReservEntryOnBeforeUpdateItemTracking>
  Raised in: Codeunit<Create Reserv. Entry>.PROCEDURE<TransferReservEntry>
    Code lines:
    ...
    IF (CarriedSerialNo + CarriedLotNo) <> '' THEN BEGIN
      IF NewReservEntry."Qty. to Handle (Base)" = 0 THEN
        NewReservEntry.VALIDATE("Quantity (Base)");
      NewReservEntry."Serial No." := CarriedSerialNo;
      NewReservEntry."Lot No." := CarriedLotNo;
      OnTransferReservEntryOnBeforeUpdateItemTracking(NewReservEntry); <=====================
      NewReservEntry.UpdateItemTracking;
      IF NewReservEntry.MODIFY THEN ;
    END;
    
    ...
Codeunit<Reservation Engine Mgt.>.PROCEDURE<OnAfterCreateText>
  Raised in: Codeunit<Reservation Engine Mgt.>.PROCEDURE<CreateText>
    Code lines:
    ...
                CalcAsmLine."Document Type","Source ID"));
          END;
      END;
    
      SourceTypeDesc := '';
      OnAfterCreateText(ReservEntry,SourceTypeDesc); <=====================
      EXIT(SourceTypeDesc);
    END;
Codeunit<Reservation Engine Mgt.>.PROCEDURE<OnAfterModifyShipmentDate>
  Raised in: Codeunit<Reservation Engine Mgt.>.PROCEDURE<ModifyShipmentDate>
    Code lines:
    ...
      ReservEntry2.MODIFY;
    
      ModifyActionMessageDating(ReservEntry2);
    END;
    
    OnAfterModifyShipmentDate(ReservEntry2,ReservEntry); <=====================
Codeunit<Reservation Engine Mgt.>.PROCEDURE<OnAfterSetItemTracking2>
  Raised in: Codeunit<Reservation Engine Mgt.>.PROCEDURE<SetItemTracking2>
    Code lines:
    ...
      // each record brings/holds own IT
      TrackingSpecification2."Serial No." := TempReservEntry2."Serial No.";
      TrackingSpecification2."Lot No." := TempReservEntry2."Lot No.";
    END;
    
    OnAfterSetItemTracking2(TrackingSpecification2,TempReservEntry2); <=====================
Codeunit<Reservation Engine Mgt.>.PROCEDURE<OnBeforeUpdateItemTracking>
  Raised in: Codeunit<Reservation Engine Mgt.>.PROCEDURE<ModifyItemTrackingOnTempRec>
    Code lines:
    ...
      ReservEntry2."Lot No." := TrackingSpecification."Lot No.";
      ReservEntry2."Serial No." := TrackingSpecification."Serial No.";
      ReservEntry2."Warranty Date" := TrackingSpecification."Warranty Date";
      ReservEntry2."Expiration Date" := TrackingSpecification."Expiration Date";
      ReservEntry2."Entry No." := LastEntryNo;
      OnBeforeUpdateItemTracking(ReservEntry2,TrackingSpecification); <=====================
      ReservEntry2.UpdateItemTracking;
      IF EntryMismatch THEN BEGIN
        IF NOT CalledRecursively THEN
          SaveLostReservQty(ReservEntry2); // Late Binding
    ...
  Raised in: Codeunit<Reservation Engine Mgt.>.PROCEDURE<ModifyItemTrackingOnTempRec>
    Code lines:
    ...
      ReservEntry2."Lot No." := TrackingSpecification."Lot No.";
      ReservEntry2."Serial No." := TrackingSpecification."Serial No.";
      ReservEntry2."Warranty Date" := TrackingSpecification."Warranty Date";
      ReservEntry2."Expiration Date" := TrackingSpecification."Expiration Date";
      ReservEntry2."Entry No." := LastEntryNo;
      OnBeforeUpdateItemTracking(ReservEntry2,TrackingSpecification); <=====================
      ReservEntry2.UpdateItemTracking;
      IF EntryMismatch THEN BEGIN
        IF NOT CalledRecursively THEN
          SaveLostReservQty(ReservEntry2); // Late Binding
    ...
Codeunit<Sales Line-Reserve>.PROCEDURE<OnAfterReservQuantity>
  Raised in: Codeunit<Sales Line-Reserve>.PROCEDURE<ReservQuantity>
    Code lines:
    ...
          QtyToReserve := -SalesLine."Outstanding Quantity";
          QtyToReserveBase := -SalesLine."Outstanding Qty. (Base)"
        END;
    END;
    
    OnAfterReservQuantity(SalesLine,QtyToReserve,QtyToReserveBase); <=====================
Codeunit<Sales Line-Reserve>.PROCEDURE<OnBeforeDeleteLine>
  Raised in: Codeunit<Sales Line-Reserve>.PROCEDURE<DeleteLine>
    Code lines:
    OnBeforeDeleteLine(SalesLine); <=====================
    
    WITH SalesLine DO BEGIN
      ReservMgt.SetSalesLine(SalesLine);
      IF DeleteItemTracking THEN
        ReservMgt.SetItemTrackingHandling(1); // Allow Deletion
      ReservMgt.DeleteReservEntries(TRUE,0);
      DeleteInvoiceSpecFromLine(SalesLine);
      CALCFIELDS("Reserved Qty. (Base)");
      AssignForPlanning(SalesLine);
Codeunit<Sales Line-Reserve>.PROCEDURE<OnTestSalesLineModificationOnBeforeTestJobNo>
  Raised in: Codeunit<Sales Line-Reserve>.PROCEDURE<TestSalesLineModification>
    Code lines:
    ...
      IF ThrowError THEN
        NewSalesLine.FIELDERROR("Shipment Date",ValueIsEmptyErr);
      HasError := TRUE;
    END;
    
    OnTestSalesLineModificationOnBeforeTestJobNo(NewSalesLine,IsHandled); <=====================
    IF NOT IsHandled THEN
      IF NewSalesLine."Job No." <> '' THEN BEGIN
        IF ThrowError THEN
          NewSalesLine.FIELDERROR("Job No.",ValueNotEmptyErr);
    ...
Codeunit<Sales Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
  Raised in: Codeunit<Sales Line-Reserve>.PROCEDURE<VerifyChange>
    Code lines:
    ...
    NewSalesLine.CALCFIELDS("Reserved Qty. (Base)");
    ShowError := NewSalesLine."Reserved Qty. (Base)" <> 0;
    
    HasError := TestSalesLineModification(OldSalesLine,NewSalesLine,ShowError);
    
    OnVerifyChangeOnBeforeHasError(NewSalesLine,OldSalesLine,HasError,ShowError); <=====================
    
    IF HasError THEN
      ClearReservation(OldSalesLine,NewSalesLine);
    
    ...
Codeunit<Req. Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
  Raised in: Codeunit<Req. Line-Reserve>.PROCEDURE<VerifyChange>
    Code lines:
    ...
      ELSE
        HasError := TRUE;
    
    VerifyBinInReqLine(NewReqLine,OldReqLine,HasError);
    
    OnVerifyChangeOnBeforeHasError(NewReqLine,OldReqLine,HasError,ShowError); <=====================
    
    IF HasError THEN
      IF (NewReqLine."No." <> OldReqLine."No.") OR
         FindReservEntry(NewReqLine,TempReservEntry)
    ...
Codeunit<Purch. Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
  Raised in: Codeunit<Purch. Line-Reserve>.PROCEDURE<VerifyChange>
    Code lines:
    ...
        NewPurchLine.FIELDERROR("Location Code",Text003)
      ELSE
        HasError := TRUE;
    VerifyPurchLine(NewPurchLine,OldPurchLine,HasError);
    
    OnVerifyChangeOnBeforeHasError(NewPurchLine,OldPurchLine,HasError,ShowError); <=====================
    
    IF HasError THEN
      IF (NewPurchLine."No." <> OldPurchLine."No.") OR
         FindReservEntry(NewPurchLine,TempReservEntry)
    ...
Codeunit<Item Jnl. Line-Reserve>.PROCEDURE<OnBeforeVerifyQuantity>
  Raised in: Codeunit<Item Jnl. Line-Reserve>.PROCEDURE<VerifyQuantity>
    Code lines:
    OnBeforeVerifyQuantity(NewItemJnlLine,OldItemJnlLine); <=====================
    
    IF Blocked THEN
      EXIT;
    
    WITH NewItemJnlLine DO BEGIN
      IF "Line No." = OldItemJnlLine."Line No." THEN
        IF "Quantity (Base)" = OldItemJnlLine."Quantity (Base)" THEN
          EXIT;
      IF "Line No." = 0 THEN
    ...
Codeunit<Item Jnl. Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
  Raised in: Codeunit<Item Jnl. Line-Reserve>.PROCEDURE<VerifyChange>
    Code lines:
    ...
      ELSE
        HasError := TRUE;
    IF NewItemJnlLine."Line No." <> OldItemJnlLine."Line No." THEN
      HasError := TRUE;
    
    OnVerifyChangeOnBeforeHasError(NewItemJnlLine,OldItemJnlLine,HasError,ShowError); <=====================
    
    IF HasError THEN BEGIN
      FindReservEntry(NewItemJnlLine,TempReservEntry);
      TempReservEntry.ClearTrackingFilter;
    ...
Codeunit<Transfer Line-Reserve>.PROCEDURE<OnAfterCallItemTracking>
  Raised in: Codeunit<Transfer Line-Reserve>.PROCEDURE<CallItemTracking>
    Code lines:
    TrackingSpecification.InitFromTransLine(TransLine,AvalabilityDate,Direction);
    ItemTrackingLines.SetSourceSpec(TrackingSpecification,AvalabilityDate);
    ItemTrackingLines.SetInbound(TransLine.IsInbound);
    ItemTrackingLines.RUNMODAL;
    OnAfterCallItemTracking(TransLine); <=====================
  Raised in: Codeunit<Transfer Line-Reserve>.PROCEDURE<CallItemTracking2>
    Code lines:
    TrackingSpecification.InitFromTransLine(TransLine,AvailabilityDate,Direction);
    ItemTrackingLines.SetSourceSpec(TrackingSpecification,AvailabilityDate);
    ItemTrackingLines.SetSecondSourceQuantity(SecondSourceQuantityArray);
    ItemTrackingLines.RUNMODAL;
    OnAfterCallItemTracking(TransLine); <=====================
Codeunit<Transfer Line-Reserve>.PROCEDURE<OnBeforeVerifyReserved>
  Raised in: Codeunit<Transfer Line-Reserve>.PROCEDURE<VerifyQuantity>
    Code lines:
    OnBeforeVerifyReserved(NewTransLine,OldTransLine); <=====================
    
    IF Blocked THEN
      EXIT;
    
    WITH NewTransLine DO BEGIN
      IF "Line No." = OldTransLine."Line No." THEN
        IF "Quantity (Base)" = OldTransLine."Quantity (Base)" THEN
          EXIT;
      IF "Line No." = 0 THEN
    ...
Codeunit<Transfer Line-Reserve>.PROCEDURE<OnTransferTransferToItemJnlLineTransferFields>
  Raised in: Codeunit<Transfer Line-Reserve>.PROCEDURE<TransferTransferToItemJnlLine>
    Code lines:
    ...
      REPEAT
        OldReservEntry.TestItemFields(TransLine."Item No.",TransLine."Variant Code",TransferLocation);
        OldReservEntry."New Serial No." := OldReservEntry."Serial No.";
        OldReservEntry."New Lot No." := OldReservEntry."Lot No.";
    
        OnTransferTransferToItemJnlLineTransferFields(OldReservEntry,TransLine,ItemJnlLine,TransferQty,Direction); <=====================
    
        TransferQty :=
          CreateReservEntry.TransferReservEntry(DATABASE::"Item Journal Line",
            ItemJnlLine."Entry Type",ItemJnlLine."Journal Template Name",
    ...
Codeunit<Transfer Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
  Raised in: Codeunit<Transfer Line-Reserve>.PROCEDURE<VerifyChange>
    Code lines:
    ...
    IF NewTransLine."Line No." <> OldTransLine."Line No." THEN BEGIN
      HasErrorInbnd := TRUE;
      HasErrorOutbnd := TRUE;
    END;
    
    OnVerifyChangeOnBeforeHasError(NewTransLine,OldTransLine,HasErrorInbnd,HasErrorOutbnd,ShowErrorInbnd,ShowErrorOutbnd); <=====================
    
    IF HasErrorOutbnd THEN BEGIN
      AutoTracking(OldTransLine,NewTransLine,TempReservEntry,0);
      AssignForPlanning(NewTransLine,0);
    ...
Codeunit<Prod. Order Line-Reserve>.PROCEDURE<OnAfterCallItemTracking>
  Raised in: Codeunit<Prod. Order Line-Reserve>.PROCEDURE<CallItemTracking>
    Code lines:
    ...
      ItemTrackingLines.SetSourceSpec(TrackingSpecification,ProdOrderLine."Due Date");
      ItemTrackingLines.SetInbound(ProdOrderLine.IsInbound);
      ItemTrackingLines.RUNMODAL;
    END;
    
    OnAfterCallItemTracking(ProdOrderLine); <=====================
Codeunit<Prod. Order Line-Reserve>.PROCEDURE<OnBeforeTransferPOLineToPOLine>
  Raised in: Codeunit<Prod. Order Line-Reserve>.PROCEDURE<TransferPOLineToPOLine>
    Code lines:
    OnBeforeTransferPOLineToPOLine(OldProdOrderLine,NewProdOrderLine); <=====================
    
    IF NOT FindReservEntry(OldProdOrderLine,OldReservEntry) THEN
      EXIT;
    
    OldReservEntry.Lock;
    
    NewProdOrderLine.TestItemFields(OldProdOrderLine."Item No.",OldProdOrderLine."Variant Code",OldProdOrderLine."Location Code");
    
    OldReservEntry.TransferReservations(
    ...
Codeunit<Prod. Order Line-Reserve>.PROCEDURE<OnDeleteLineOnAfterDeleteReservEntries>
  Raised in: Codeunit<Prod. Order Line-Reserve>.PROCEDURE<DeleteLine>
    Code lines:
    ...
      EXIT;
    
    WITH ProdOrderLine DO BEGIN
      ReservMgt.SetProdOrderLine(ProdOrderLine);
      ReservMgt.DeleteReservEntries(TRUE,0);
      OnDeleteLineOnAfterDeleteReservEntries(ProdOrderLine); <=====================
      ReservMgt.ClearActionMessageReferences;
      CALCFIELDS("Reserved Qty. (Base)");
      AssignForPlanning(ProdOrderLine);
    END;
Codeunit<Prod. Order Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
  Raised in: Codeunit<Prod. Order Line-Reserve>.PROCEDURE<VerifyChange>
    Code lines:
    ...
      ELSE
        HasError := TRUE;
    IF NewProdOrderLine."Line No." <> OldProdOrderLine."Line No." THEN
      HasError := TRUE;
    
    OnVerifyChangeOnBeforeHasError(NewProdOrderLine,OldProdOrderLine,HasError,ShowError); <=====================
    
    IF HasError THEN
      IF (NewProdOrderLine."Item No." <> OldProdOrderLine."Item No.") OR
         FindReservEntry(NewProdOrderLine,TempReservEntry)
    ...
Codeunit<Prod. Order Comp.-Reserve>.PROCEDURE<OnAfterCallItemTracking>
  Raised in: Codeunit<Prod. Order Comp.-Reserve>.PROCEDURE<CallItemTracking>
    Code lines:
    ...
      ItemTrackingLines.SetSourceSpec(TrackingSpecification,ProdOrderComp."Due Date");
      ItemTrackingLines.SetInbound(ProdOrderComp.IsInbound);
      ItemTrackingLines.RUNMODAL;
    END;
    
    OnAfterCallItemTracking(ProdOrderComp); <=====================
Codeunit<Prod. Order Comp.-Reserve>.PROCEDURE<OnBeforeTransferPOCompToPOComp>
  Raised in: Codeunit<Prod. Order Comp.-Reserve>.PROCEDURE<TransferPOCompToPOComp>
    Code lines:
    OnBeforeTransferPOCompToPOComp(OldProdOrderComp,NewProdOrderComp); <=====================
    
    IF NOT FindReservEntry(OldProdOrderComp,OldReservEntry) THEN
      EXIT;
    
    OldReservEntry.Lock;
    
    NewProdOrderComp.TestItemFields(OldProdOrderComp."Item No.",OldProdOrderComp."Variant Code",OldProdOrderComp."Location Code");
    
    OldReservEntry.TransferReservations(
    ...
Codeunit<Prod. Order Comp.-Reserve>.PROCEDURE<OnDeleteLineOnAfterDeleteReservEntries>
  Raised in: Codeunit<Prod. Order Comp.-Reserve>.PROCEDURE<DeleteLine>
    Code lines:
    ...
      CLEAR(ReservMgt);
      ReservMgt.SetProdOrderComponent(ProdOrderComp);
      IF DeleteItemTracking THEN
        ReservMgt.SetItemTrackingHandling(1); // Allow Deletion
      ReservMgt.DeleteReservEntries(TRUE,0);
      OnDeleteLineOnAfterDeleteReservEntries(ProdOrderComp); <=====================
      CALCFIELDS("Reserved Qty. (Base)");
      AssignForPlanning(ProdOrderComp);
    END;
Codeunit<Prod. Order Comp.-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
  Raised in: Codeunit<Prod. Order Comp.-Reserve>.PROCEDURE<VerifyChange>
    Code lines:
    ...
      ELSE
        HasError := TRUE;
    IF NewProdOrderComp."Line No." <> OldProdOrderComp."Line No." THEN
      HasError := TRUE;
    
    OnVerifyChangeOnBeforeHasError(NewProdOrderComp,OldProdOrderComp,HasError,ShowError); <=====================
    
    IF HasError THEN
      IF (NewProdOrderComp."Item No." <> OldProdOrderComp."Item No.") OR
         FindReservEntry(NewProdOrderComp,TempReservEntry)
    ...
Codeunit<Plng. Component-Reserve>.PROCEDURE<OnAfterCallItemTracking>
  Raised in: Codeunit<Plng. Component-Reserve>.PROCEDURE<CallItemTracking>
    Code lines:
    TrackingSpecification.InitFromProdPlanningComp(PlanningComponent);
    ItemTrackingLines.SetSourceSpec(TrackingSpecification,PlanningComponent."Due Date");
    ItemTrackingLines.RUNMODAL;
    
    OnAfterCallItemTracking(PlanningComponent); <=====================
Codeunit<Plng. Component-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
  Raised in: Codeunit<Plng. Component-Reserve>.PROCEDURE<VerifyChange>
    Code lines:
    ...
        NewPlanningComponent.FIELDERROR("Variant Code",Text003);
    HasError := TRUE;
    IF NewPlanningComponent."Line No." <> OldPlanningComponent."Line No." THEN
      HasError := TRUE;
    
    OnVerifyChangeOnBeforeHasError(NewPlanningComponent,OldPlanningComponent,HasError,ShowError); <=====================
    
    IF HasError THEN
      IF (NewPlanningComponent."Item No." <> OldPlanningComponent."Item No.") OR
         FindReservEntry(NewPlanningComponent,TempReservEntry)
    ...
Codeunit<Service Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
  Raised in: Codeunit<Service Line-Reserve>.PROCEDURE<VerifyChange>
    Code lines:
    ...
      END;
    
    IF NewServiceLine."Line No." <> OldServiceLine."Line No." THEN
      HasError := TRUE;
    
    OnVerifyChangeOnBeforeHasError(NewServiceLine,OldServiceLine,HasError,ShowError); <=====================
    
    IF HasError THEN
      IF (NewServiceLine."No." <> OldServiceLine."No.") OR
         FindReservEntry(NewServiceLine,TempReservEntry)
    ...
Codeunit<Job Jnl. Line-Reserve>.PROCEDURE<OnVerifyChangeOnBeforeHasError>
  Raised in: Codeunit<Job Jnl. Line-Reserve>.PROCEDURE<VerifyChange>
    Code lines:
    ...
      HasError := TRUE;
    
    IF NewJobJnlLine."No." <> OldJobJnlLine."No." THEN
      HasError := TRUE;
    
    OnVerifyChangeOnBeforeHasError(NewJobJnlLine,OldJobJnlLine,HasError,ShowError); <=====================
    
    IF HasError THEN BEGIN
      FindReservEntry(NewJobJnlLine,TempReservEntry);
      TempReservEntry.ClearTrackingFilter;
    ...
Codeunit<Reservation Management>.PROCEDURE<OnAfterAutoReserve>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<AutoReserve>
    Code lines:
    ...
    FOR i := 1 TO SetValueArray(0) DO
      AutoReserveOneLine(ValueArray[i],RemainingQtyToReserve,RemainingQtyToReserveBase,Description,AvailabilityDate);
    
    FullAutoReservation := (RemainingQtyToReserveBase = 0);
    
    OnAfterAutoReserve(CalcReservEntry,FullAutoReservation); <=====================
Codeunit<Reservation Management>.PROCEDURE<OnAfterCalcReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<AutoReserveItemLedgEntry>
    Code lines:
    ...
            END ELSE BEGIN
              QtyThisLineBase := TotalAvailQty + QtyOnOutBound;
              QtyThisLine := ROUND(QtyThisLineBase,UOMMgt.QtyRndPrecision);
            END;
    
          OnAfterCalcReservation(CalcReservEntry,CalcItemLedgEntry,ReservSummEntryNo,QtyThisLine,QtyThisLineBase); <=====================
    
          CallTrackingSpecification.InitTrackingSpecification(
            DATABASE::"Item Ledger Entry",0,'','',0,CalcItemLedgEntry."Entry No.",
            CalcItemLedgEntry."Variant Code",CalcItemLedgEntry."Location Code",
    ...
Codeunit<Reservation Management>.PROCEDURE<OnAfterInitFilter>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<InitFilter>
    Code lines:
    ...
          ELSE
            CalcAssemblyLine.SETFILTER("Remaining Quantity (Base)",'>0');
        END;
    END;
    
    OnAfterInitFilter(CalcReservEntry,EntryID); <=====================
Codeunit<Reservation Management>.PROCEDURE<OnAfterSetValueArray>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<SetValueArray>
    Code lines:
    ...
          ValueArray[2] := 6500;
          EXIT(2);
        END;
    END;
    
    OnAfterSetValueArray(EntryStatus,ValueArray); <=====================
Codeunit<Reservation Management>.PROCEDURE<OnAutoReserveItemLedgEntryOnFindFirstItemLedgEntry>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<AutoReserveItemLedgEntry>
    Code lines:
    ...
      AllocationsChanged :=
        LateBindingMgt.ReleaseForReservation3(CalcItemLedgEntry,CalcReservEntry,RemainingQtyToReserveBase);
    
    IsFound := FALSE;
    IsHandled := FALSE;
    OnAutoReserveItemLedgEntryOnFindFirstItemLedgEntry(CalcReservEntry,CalcItemLedgEntry,InvSearch,IsHandled,IsFound); <=====================
    IF NOT IsHandled THEN
      IsFound := CalcItemLedgEntry.FIND(InvSearch);
    IF IsFound THEN BEGIN
      IF Location."Bin Mandatory" OR Location."Require Pick" THEN BEGIN
    ...
Codeunit<Reservation Management>.PROCEDURE<OnAutoReserveItemLedgEntryOnFindNextItemLedgEntry>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<AutoReserveItemLedgEntry>
    Code lines:
    ...
              TotalAvailQty := TotalAvailQty - QtyThisLineBase;
        END;
    
        IsHandled := FALSE;
        IsFound := FALSE;
        OnAutoReserveItemLedgEntryOnFindNextItemLedgEntry(CalcReservEntry,CalcItemLedgEntry,InvSearch,IsHandled,IsFound); <=====================
        IF NOT IsHandled THEN
          IsFound := CalcItemLedgEntry.NEXT(InvNextStep) <> 0;
      UNTIL NOT IsFound OR (RemainingQtyToReserveBase = 0);
    END;
Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveAssemblyHeader>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<AutoReserveAssemblyHeader>
    Code lines:
    IsReserved := FALSE;
    OnBeforeAutoReserveAssemblyHeader( <=====================
      ReservSummEntryNo,RemainingQtyToReserve,RemainingQtyToReserve,Description,AvailabilityDate,IsReserved,Search,NextStep);
    IF IsReserved THEN
      EXIT;
    
    InitFilter(ReservSummEntryNo,AvailabilityDate);
    IF CalcAssemblyHeader.FIND(Search) THEN
      REPEAT
        CalcAssemblyHeader.CALCFIELDS("Reserved Qty. (Base)");
    ...
Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveAssemblyLine>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<AutoReserveAssemblyLine>
    Code lines:
    IsReserved := FALSE;
    OnBeforeAutoReserveAssemblyLine( <=====================
      ReservSummEntryNo,RemainingQtyToReserve,RemainingQtyToReserve,Description,AvailabilityDate,IsReserved,Search,NextStep);
    IF IsReserved THEN
      EXIT;
    
    InitFilter(ReservSummEntryNo,AvailabilityDate);
    IF CalcAssemblyLine.FIND(Search) THEN
      REPEAT
        CalcAssemblyLine.CALCFIELDS("Reserved Qty. (Base)");
    ...
Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveItemLedgEntry>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<AutoReserveItemLedgEntry>
    Code lines:
    IsReserved := FALSE;
    OnBeforeAutoReserveItemLedgEntry( <=====================
      ReservSummEntryNo,RemainingQtyToReserve,RemainingQtyToReserve,Description,AvailabilityDate,IsReserved,CalcReservEntry);
    IF IsReserved THEN
      EXIT;
    
    IF NOT Location.GET(CalcReservEntry."Location Code") THEN
      CLEAR(Location);
    
    InitFilter(ReservSummEntryNo,AvailabilityDate);
    ...
Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveJobPlanningLine>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<AutoReserveJobPlanningLine>
    Code lines:
    IsReserved := FALSE;
    OnBeforeAutoReserveJobPlanningLine( <=====================
      ReservSummEntryNo,RemainingQtyToReserve,RemainingQtyToReserve,Description,AvailabilityDate,IsReserved,Search,NextStep);
    IF IsReserved THEN
      EXIT;
    
    InitFilter(ReservSummEntryNo,AvailabilityDate);
    IF CalcJobPlanningLine.FIND(Search) THEN
      REPEAT
        CalcJobPlanningLine.CALCFIELDS("Reserved Qty. (Base)");
    ...
Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveProdOrderComp>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<AutoReserveProdOrderComp>
    Code lines:
    IsReserved := FALSE;
    OnBeforeAutoReserveProdOrderComp( <=====================
      ReservSummEntryNo,RemainingQtyToReserve,RemainingQtyToReserve,Description,AvailabilityDate,IsReserved,Search,NextStep);
    IF IsReserved THEN
      EXIT;
    
    InitFilter(ReservSummEntryNo,AvailabilityDate);
    IF CalcProdOrderComp.FIND(Search) THEN
      REPEAT
        CalcProdOrderComp.CALCFIELDS("Reserved Qty. (Base)");
    ...
Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveProdOrderLine>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<AutoReserveProdOrderLine>
    Code lines:
    IsReserved := FALSE;
    OnBeforeAutoReserveProdOrderLine( <=====================
      ReservSummEntryNo,RemainingQtyToReserve,RemainingQtyToReserve,Description,AvailabilityDate,IsReserved,Search,NextStep);
    IF IsReserved THEN
      EXIT;
    
    InitFilter(ReservSummEntryNo,AvailabilityDate);
    IF CalcProdOrderLine.FIND(Search) THEN
      REPEAT
        CalcProdOrderLine.CALCFIELDS("Reserved Qty. (Base)");
    ...
Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReservePurchLine>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<AutoReservePurchLine>
    Code lines:
    IsReserved := FALSE;
    OnBeforeAutoReservePurchLine( <=====================
      ReservSummEntryNo,RemainingQtyToReserve,RemainingQtyToReserve,Description,AvailabilityDate,IsReserved,Search,NextStep);
    IF IsReserved THEN
      EXIT;
    
    InitFilter(ReservSummEntryNo,AvailabilityDate);
    IF CalcPurchLine.FIND(Search) THEN
      REPEAT
        CalcPurchLine.CALCFIELDS("Reserved Qty. (Base)");
    ...
Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveSalesLine>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<AutoReserveSalesLine>
    Code lines:
    IsReserved := FALSE;
    OnBeforeAutoReserveSalesLine( <=====================
      ReservSummEntryNo,RemainingQtyToReserve,RemainingQtyToReserve,Description,AvailabilityDate,IsReserved,Search,NextStep);
    IF IsReserved THEN
      EXIT;
    
    InitFilter(ReservSummEntryNo,AvailabilityDate);
    IF CalcSalesLine.FIND(Search) THEN
      REPEAT
        CalcSalesLine.CALCFIELDS("Reserved Qty. (Base)");
    ...
Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveServLine>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<AutoReserveServLine>
    Code lines:
    IsReserved := FALSE;
    OnBeforeAutoReserveServLine( <=====================
      ReservSummEntryNo,RemainingQtyToReserve,RemainingQtyToReserve,Description,AvailabilityDate,IsReserved,Search,NextStep);
    IF IsReserved THEN
      EXIT;
    
    InitFilter(ReservSummEntryNo,AvailabilityDate);
    IF CalcServiceLine.FIND(Search) THEN
      REPEAT
        CalcServiceLine.CALCFIELDS("Reserved Qty. (Base)");
    ...
Codeunit<Reservation Management>.PROCEDURE<OnBeforeAutoReserveTransLine>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<AutoReserveTransLine>
    Code lines:
    IsReserved := FALSE;
    OnBeforeAutoReserveTransLine( <=====================
      ReservSummEntryNo,RemainingQtyToReserve,RemainingQtyToReserve,Description,AvailabilityDate,IsReserved,Search,NextStep);
    IF IsReserved THEN
      EXIT;
    
    InitFilter(ReservSummEntryNo,AvailabilityDate);
    IF CalcTransLine.FIND(Search) THEN
      REPEAT
        CASE ReservSummEntryNo OF
    ...
Codeunit<Reservation Management>.PROCEDURE<OnBeforeCreateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<CreateReservation>
    Code lines:
    CalcReservEntry.TESTFIELD("Source Type");
    
    OnBeforeCreateReservation(TrackingSpecification,CalcReservEntry,CalcItemLedgEntry); <=====================
    
    CASE CalcReservEntry."Source Type" OF
      DATABASE::"Sales Line":
        BEGIN
          ReserveSalesLine.CreateReservationSetFrom(TrackingSpecification);
          ReserveSalesLine.CreateReservation(
            ForSalesLine,Description,ExpectedDate,Quantity,QuantityBase,
    ...
Codeunit<Reservation Management>.PROCEDURE<OnBeforeDeleteDocumentReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<DeleteDocumentReservation>
    Code lines:
    OnBeforeDeleteDocumentReservation(TableID,DocType,DocNo,HideValidationDialog); <=====================
    
    WITH ReservEntry DO BEGIN
      RESET;
      SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line","Reservation Status");
      IF TableID <> DATABASE::"Prod. Order Line" THEN BEGIN
        SETRANGE("Source Type",TableID);
        SETRANGE("Source Prod. Order Line",0);
    ...
Codeunit<Reservation Management>.PROCEDURE<OnBeforeUpdateItemLedgEntryStats>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<UpdateItemLedgEntryStats>
    Code lines:
    OnBeforeUpdateItemLedgEntryStats(CalcReservEntry); <=====================
    IF CalcItemLedgEntry.READPERMISSION THEN BEGIN
      InitFilter(ValueArray[i],AvailabilityDate);
      IF CalcItemLedgEntry.FINDSET THEN
        REPEAT
          CalcItemLedgEntry.CALCFIELDS("Reserved Quantity");
          OnUpdateItemLedgEntryStatsUpdateTotals(CalcReservEntry,CalcItemLedgEntry,TotalAvailQty,QtyOnOutBound);
          ReservEntrySummary."Total Reserved Quantity" += CalcItemLedgEntry."Reserved Quantity";
          CalcSumValue += CalcItemLedgEntry."Remaining Quantity";
        UNTIL CalcItemLedgEntry.NEXT = 0;
    ...
Codeunit<Reservation Management>.PROCEDURE<OnGetSourceRecordValue>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<GetSourceRecordValue>
    Code lines:
    ...
        DATABASE::"Service Line":
          EXIT(GetSourceServLineValue(ReservEntry,SetAsCurrent,ReturnOption));
        DATABASE::"Job Planning Line":
          EXIT(GetSourceJobPlanningLineValue(ReservEntry,SetAsCurrent,ReturnOption));
        ELSE BEGIN
          OnGetSourceRecordValue(ReservEntry,SetAsCurrent,ReturnOption,ReturnQty); <=====================
          EXIT(ReturnQty);
        END;
      END;
Codeunit<Reservation Management>.PROCEDURE<OnLookupDocument>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<LookupDocument>
    Code lines:
    ...
            5:
              ;
          END;
        END;
      ELSE
        OnLookupDocument(SourceType,SourceSubtype,SourceID,SourceBatchName,SourceProdOrderLine,SourceRefNo); <=====================
    END;
Codeunit<Reservation Management>.PROCEDURE<OnLookupLine>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<LookupLine>
    Code lines:
    ...
          AsmLine.SETRANGE("Document No.",SourceID);
          AsmLine.SETRANGE("Line No.",SourceRefNo);
          PAGE.RUN(PAGE::"Assembly Lines",AsmLine);
        END;
      ELSE
        OnLookupLine(SourceType,SourceSubtype,SourceID,SourceBatchName,SourceProdOrderLine,SourceRefNo); <=====================
    END;
Codeunit<Reservation Management>.PROCEDURE<OnSetAssemblyHeaderOnBeforeUpdateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<SetAssemblyHeader>
    Code lines:
    ...
    CalcReservEntry.SetItemData(
      NewAssemblyHeader."Item No.",NewAssemblyHeader.Description,NewAssemblyHeader."Location Code",NewAssemblyHeader."Variant Code",
      NewAssemblyHeader."Qty. per Unit of Measure");
    CalcReservEntry."Expected Receipt Date" := NewAssemblyHeader."Due Date";
    CalcReservEntry."Shipment Date" := NewAssemblyHeader."Due Date";
    OnSetAssemblyHeaderOnBeforeUpdateReservation(CalcReservEntry,NewAssemblyHeader); <=====================
    UpdateReservation((CreateReservEntry.SignFactor(CalcReservEntry) * ForAssemblyHeader."Remaining Quantity (Base)") < 0);
Codeunit<Reservation Management>.PROCEDURE<OnSetAssemblyLineOnBeforeUpdateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<SetAssemblyLine>
    Code lines:
    ...
      NewAssemblyLine."Qty. per Unit of Measure");
    IF NewAssemblyLine.Type <> NewAssemblyLine.Type::Item THEN
      CalcReservEntry."Item No." := '';
    CalcReservEntry."Expected Receipt Date" := NewAssemblyLine."Due Date";
    CalcReservEntry."Shipment Date" := NewAssemblyLine."Due Date";
    OnSetAssemblyLineOnBeforeUpdateReservation(CalcReservEntry,NewAssemblyLine); <=====================
    UpdateReservation((CreateReservEntry.SignFactor(CalcReservEntry) * ForAssemblyLine."Remaining Quantity (Base)") < 0);
Codeunit<Reservation Management>.PROCEDURE<OnSetItemJnlLineOnBeforeUpdateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<SetItemJnlLine>
    Code lines:
    ...
    CalcReservEntry.SetItemData(
      NewItemJnlLine."Item No.",NewItemJnlLine.Description,NewItemJnlLine."Location Code",NewItemJnlLine."Variant Code",
      NewItemJnlLine."Qty. per Unit of Measure");
    CalcReservEntry."Expected Receipt Date" := NewItemJnlLine."Posting Date";
    CalcReservEntry."Shipment Date" := NewItemJnlLine."Posting Date";
    OnSetItemJnlLineOnBeforeUpdateReservation(CalcReservEntry,NewItemJnlLine); <=====================
    UpdateReservation((CreateReservEntry.SignFactor(CalcReservEntry) * ForItemJnlLine."Quantity (Base)") < 0);
Codeunit<Reservation Management>.PROCEDURE<OnSetItemLedgEntryOnBeforeUpdateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<SetItemLedgEntry>
    Code lines:
    ...
      CalcReservEntry."Shipment Date" := DMY2DATE(31,12,9999);
    END ELSE BEGIN
      CalcReservEntry."Expected Receipt Date" := 0D;
      CalcReservEntry."Shipment Date" := 0D;
    END;
    OnSetItemLedgEntryOnBeforeUpdateReservation(CalcReservEntry,NewItemLedgEntry); <=====================
    UpdateReservation(Positive);
Codeunit<Reservation Management>.PROCEDURE<OnSetJobJnlLineOnBeforeUpdateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<SetJobJnlLine>
    Code lines:
    ...
    CalcReservEntry.SetItemData(
      NewJobJnlLine."No.",NewJobJnlLine.Description,NewJobJnlLine."Location Code",NewJobJnlLine."Variant Code",
      NewJobJnlLine."Qty. per Unit of Measure");
    CalcReservEntry."Expected Receipt Date" := NewJobJnlLine."Posting Date";
    CalcReservEntry."Shipment Date" := NewJobJnlLine."Posting Date";
    OnSetJobJnlLineOnBeforeUpdateReservation(CalcReservEntry,NewJobJnlLine); <=====================
    UpdateReservation((CreateReservEntry.SignFactor(CalcReservEntry) * ForJobJnlLine."Quantity (Base)") < 0);
Codeunit<Reservation Management>.PROCEDURE<OnSetJobPlanningLineOnBeforeUpdateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<SetJobPlanningLine>
    Code lines:
    ...
      NewJobPlanningLine."Qty. per Unit of Measure");
    IF NewJobPlanningLine.Type <> NewJobPlanningLine.Type::Item THEN
      CalcReservEntry."Item No." := '';
    CalcReservEntry."Expected Receipt Date" := NewJobPlanningLine."Planning Date";
    CalcReservEntry."Shipment Date" := NewJobPlanningLine."Planning Date";
    OnSetJobPlanningLineOnBeforeUpdateReservation(CalcReservEntry,NewJobPlanningLine); <=====================
    UpdateReservation((CreateReservEntry.SignFactor(CalcReservEntry) * ForJobPlanningLine."Remaining Qty. (Base)") <= 0);
Codeunit<Reservation Management>.PROCEDURE<OnSetPlanningCompOnBeforeUpdateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<SetPlanningComponent>
    Code lines:
    ...
    CalcReservEntry.SetItemData(
      NewPlanningComponent."Item No.",NewPlanningComponent.Description,NewPlanningComponent."Location Code",
      NewPlanningComponent."Variant Code",NewPlanningComponent."Qty. per Unit of Measure");
    CalcReservEntry."Expected Receipt Date" := NewPlanningComponent."Due Date";
    CalcReservEntry."Shipment Date" := NewPlanningComponent."Due Date";
    OnSetPlanningCompOnBeforeUpdateReservation(CalcReservEntry,NewPlanningComponent); <=====================
    UpdateReservation(ForPlanningComponent."Net Quantity (Base)" > 0);
Codeunit<Reservation Management>.PROCEDURE<OnSetProdOrderCompOnBeforeUpdateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<SetProdOrderComponent>
    Code lines:
    ...
    CalcReservEntry.SetItemData(
      NewProdOrderComp."Item No.",NewProdOrderComp.Description,NewProdOrderComp."Location Code",NewProdOrderComp."Variant Code",
      NewProdOrderComp."Qty. per Unit of Measure");
    CalcReservEntry."Expected Receipt Date" := NewProdOrderComp."Due Date";
    CalcReservEntry."Shipment Date" := NewProdOrderComp."Due Date";
    OnSetProdOrderCompOnBeforeUpdateReservation(CalcReservEntry,NewProdOrderComp); <=====================
    UpdateReservation(ForProdOrderComp."Remaining Qty. (Base)" > 0);
Codeunit<Reservation Management>.PROCEDURE<OnSetProdOrderLineOnBeforeUpdateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<SetProdOrderLine>
    Code lines:
    ...
      NewProdOrderLine."Item No.",NewProdOrderLine.Description,NewProdOrderLine."Location Code",NewProdOrderLine."Variant Code",
      NewProdOrderLine."Qty. per Unit of Measure");
    CalcReservEntry."Expected Receipt Date" := NewProdOrderLine."Due Date";
    CalcReservEntry."Shipment Date" := NewProdOrderLine."Due Date";
    CalcReservEntry."Planning Flexibility" := NewProdOrderLine."Planning Flexibility";
    OnSetProdOrderLineOnBeforeUpdateReservation(CalcReservEntry,NewProdOrderLine); <=====================
    UpdateReservation(ForProdOrderLine."Remaining Qty. (Base)" < 0);
Codeunit<Reservation Management>.PROCEDURE<OnSetPurchLineOnBeforeUpdateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<SetPurchLine>
    Code lines:
    ...
    IF NewPurchLine.Type <> NewPurchLine.Type::Item THEN
      CalcReservEntry."Item No." := '';
    CalcReservEntry."Expected Receipt Date" := NewPurchLine."Expected Receipt Date";
    CalcReservEntry."Shipment Date" := NewPurchLine."Expected Receipt Date";
    CalcReservEntry."Planning Flexibility" := NewPurchLine."Planning Flexibility";
    OnSetPurchLineOnBeforeUpdateReservation(CalcReservEntry,NewPurchLine); <=====================
    UpdateReservation((CreateReservEntry.SignFactor(CalcReservEntry) * ForPurchLine."Outstanding Qty. (Base)") < 0);
Codeunit<Reservation Management>.PROCEDURE<OnSetReqLineOnBeforeUpdateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<SetReqLine>
    Code lines:
    ...
    IF NewReqLine.Type <> NewReqLine.Type::Item THEN
      CalcReservEntry."Item No." := '';
    CalcReservEntry."Expected Receipt Date" := NewReqLine."Due Date";
    CalcReservEntry."Shipment Date" := NewReqLine."Due Date";
    CalcReservEntry."Planning Flexibility" := NewReqLine."Planning Flexibility";
    OnSetReqLineOnBeforeUpdateReservation(CalcReservEntry,NewReqLine); <=====================
    UpdateReservation(ForReqLine."Net Quantity (Base)" < 0);
Codeunit<Reservation Management>.PROCEDURE<OnSetSalesLineOnBeforeUpdateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<SetSalesLine>
    Code lines:
    ...
      NewSalesLine."Qty. per Unit of Measure");
    IF NewSalesLine.Type <> NewSalesLine.Type::Item THEN
      CalcReservEntry."Item No." := '';
    CalcReservEntry."Expected Receipt Date" := NewSalesLine."Shipment Date";
    CalcReservEntry."Shipment Date" := NewSalesLine."Shipment Date";
    OnSetSalesLineOnBeforeUpdateReservation(CalcReservEntry,NewSalesLine); <=====================
    
    UpdateReservation((CreateReservEntry.SignFactor(CalcReservEntry) * ForSalesLine."Outstanding Qty. (Base)") <= 0);
Codeunit<Reservation Management>.PROCEDURE<OnSetServLineOnBeforeUpdateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<SetServLine>
    Code lines:
    ...
      NewServiceLine."Qty. per Unit of Measure");
    IF NewServiceLine.Type <> NewServiceLine.Type::Item THEN
      CalcReservEntry."Item No." := '';
    CalcReservEntry."Expected Receipt Date" := NewServiceLine."Needed by Date";
    CalcReservEntry."Shipment Date" := NewServiceLine."Needed by Date";
    OnSetServLineOnBeforeUpdateReservation(CalcReservEntry,NewServiceLine); <=====================
    UpdateReservation((CreateReservEntry.SignFactor(CalcReservEntry) * ForServiceLine."Outstanding Qty. (Base)") <= 0);
Codeunit<Reservation Management>.PROCEDURE<OnSetTransLineOnBeforeUpdateReservation>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<SetTransferLine>
    Code lines:
    ...
            NewTransLine."Item No.",NewTransLine.Description,NewTransLine."Transfer-to Code",NewTransLine."Variant Code",
            NewTransLine."Qty. per Unit of Measure");
          CalcReservEntry."Expected Receipt Date" := NewTransLine."Receipt Date";
        END;
    END;
    OnSetTransLineOnBeforeUpdateReservation(CalcReservEntry,NewTransLine); <=====================
    UpdateReservation((CreateReservEntry.SignFactor(CalcReservEntry) * ForTransLine."Outstanding Qty. (Base)") <= 0);
Codeunit<Reservation Management>.PROCEDURE<OnUpdateItemLedgEntryStatsUpdateTotals>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<UpdateItemLedgEntryStats>
    Code lines:
    ...
    IF CalcItemLedgEntry.READPERMISSION THEN BEGIN
      InitFilter(ValueArray[i],AvailabilityDate);
      IF CalcItemLedgEntry.FINDSET THEN
        REPEAT
          CalcItemLedgEntry.CALCFIELDS("Reserved Quantity");
          OnUpdateItemLedgEntryStatsUpdateTotals(CalcReservEntry,CalcItemLedgEntry,TotalAvailQty,QtyOnOutBound); <=====================
          ReservEntrySummary."Total Reserved Quantity" += CalcItemLedgEntry."Reserved Quantity";
          CalcSumValue += CalcItemLedgEntry."Remaining Quantity";
        UNTIL CalcItemLedgEntry.NEXT = 0;
      IF HandleItemTracking2 THEN
    ...
Codeunit<Reservation Management>.PROCEDURE<OnUpdateItemTrackingLineStatsOnBeforeReservEntrySummaryInsert>
  Raised in: Codeunit<Reservation Management>.PROCEDURE<UpdateItemTrackingLineStats>
    Code lines:
    ...
            IF CalcReservEntry.HasSamePointer(ReservEntry) THEN
              ReservEntrySummary."Current Reserved Quantity" += ReservEntry."Quantity (Base)";
          UNTIL ReservEntry.NEXT = 0;
        ReservEntrySummary."Total Available Quantity" :=
          ReservEntrySummary."Total Quantity" - ReservEntrySummary."Total Reserved Quantity";
        OnUpdateItemTrackingLineStatsOnBeforeReservEntrySummaryInsert(ReservEntrySummary,ReservEntry); <=====================
        ReservEntrySummary.INSERT;
        ReservEntry.SETRANGE("Source Type");
        ReservEntry.SETRANGE("Source Subtype");
      UNTIL ReservEntry.NEXT = 0;
Codeunit<Calc. Low-level code>.PROCEDURE<OnAfterFindTopLevel>
  Raised in: Codeunit<Calc. Low-level code>.PROCEDURE<FindTopLevel>
    Code lines:
    ...
        ProdBOMHeader2 := ProdBOMHeader;
        CalcLevelsForBOM(ProdBOMHeader2);
        NoofItems := NoofItems + 1;
      UNTIL ProdBOMHeader.NEXT = 0;
    
    OnAfterFindTopLevel; <=====================
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterCalculatePlanFromWorksheet>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<CalculatePlanFromWorksheet>
    Code lines:
    ...
    FindCombination(InventoryProfile[1],InventoryProfile[2],Item);
    PlanItem(InventoryProfile[1],InventoryProfile[2],OrderDate,ToDate,RespectPlanningParm);
    OnCalculatePlanFromWorksheetOnAfterPlanItem(CurrTemplateName,CurrWorksheetName,Item,ReqLine,TempTrkgReservEntry);
    CommitTracking;
    
    OnAfterCalculatePlanFromWorksheet(Item); <=====================
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterDemandToInvProfile>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<DemandToInvtProfile>
    Code lines:
    ...
    TransAsmLineToProfile(InventoryProfile,Item);
    TransPlanningCompToProfile(InventoryProfile,Item);
    TransTransReqLineToProfile(InventoryProfile,Item,ToDate);
    TransShptTransLineToProfile(InventoryProfile,Item);
    
    OnAfterDemandToInvProfile(InventoryProfile,Item,TempItemTrkgEntry,LineNo); <=====================
    
    Item.COPY(CopyOfItem);
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterFindLinesWithItemToPlan>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<TransSalesLineToProfile>
    Code lines:
    IF SalesLine.FindLinesWithItemToPlan(Item,SalesLine."Document Type"::Order) THEN
      REPEAT
        IF SalesLine."Shipment Date" <> 0D THEN BEGIN
          IsHandled := FALSE;
          OnAfterFindLinesWithItemToPlan(SalesLine,IsHandled); <=====================
          IF NOT IsHandled THEN BEGIN
            InventoryProfile.INIT;
            InventoryProfile."Line No." := NextLineNo;
            InventoryProfile.TransferFromSalesLine(SalesLine,TempItemTrkgEntry);
            IF InventoryProfile.IsSupply THEN
    ...
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<TransSalesLineToProfile>
    Code lines:
    IF SalesLine.FindLinesWithItemToPlan(Item,SalesLine."Document Type"::Order) THEN
      REPEAT
        IF SalesLine."Shipment Date" <> 0D THEN BEGIN
          IsHandled := FALSE;
          OnAfterFindLinesWithItemToPlan(SalesLine,IsHandled); <=====================
          IF NOT IsHandled THEN BEGIN
            InventoryProfile.INIT;
            InventoryProfile."Line No." := NextLineNo;
            InventoryProfile.TransferFromSalesLine(SalesLine,TempItemTrkgEntry);
            IF InventoryProfile.IsSupply THEN
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterGetRoutingFromProdOrder>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<GetRouting>
    Code lines:
    ...
              PlanRoutingLine."Worksheet Batch Name" := "Journal Batch Name";
              PlanRoutingLine."Worksheet Line No." := "Line No.";
              PlanRoutingLine.TransferFromProdOrderRouting(ProdOrderRoutingLine);
              PlanRoutingLine.INSERT;
            UNTIL ProdOrderRoutingLine.NEXT = 0;
          OnAfterGetRoutingFromProdOrder(ReqLine); <=====================
        END;
    END;
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterInsertSafetyStockDemands>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<InsertSafetyStockDemands>
    Code lines:
    ...
        DemandInvtProfile.INSERT;
      UNTIL TempSafetyStockInvtProfile.NEXT = 0;
    
    DemandInvtProfile.COPY(xDemandInvtProfile);
    
    OnAfterInsertSafetyStockDemands( <=====================
      DemandInvtProfile,xDemandInvtProfile,TempSafetyStockInvtProfile,TempSKU,PlanningStartDate,PlanToDate);
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterPlanItemNextStateCloseDemand>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<PlanItemNextStateCloseDemand>
    Code lines:
    ...
      SupplyExists := SupplyInvtProfile.FINDSET(TRUE); // We assume that next profile is NOT safety stock
    
    DemandExists := DemandInvtProfile.NEXT <> 0;
    NextState := NextState::StartOver;
    
    OnAfterPlanItemNextStateCloseDemand(SupplyInvtProfile,SupplyExists); <=====================
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterPostInvChgReminder>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<PostInvChgReminder>
    Code lines:
    ...
      TempReminderInvtProfile."Remaining Quantity (Base)" += InvProfile."Safety Stock Quantity";
    END;
    
    IF NOT TempReminderInvtProfile.INSERT THEN
      TempReminderInvtProfile.MODIFY;
    OnAfterPostInvChgReminder(TempReminderInvtProfile,InvProfile,PostOnlyMinimum); <=====================
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterPrePlanDateSupplyProc>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<PlanItem>
    Code lines:
    ...
            END;
            SupplyInvtProfile."Planning Flexibility" := SupplyInvtProfile."Planning Flexibility"::None;
            SupplyInvtProfile.MODIFY;
            SupplyExists := SupplyInvtProfile.NEXT <> 0;
          END;
          OnAfterPrePlanDateSupplyProc(SupplyInvtProfile,DemandInvtProfile,SupplyExists,DemandExists); <=====================
    
          IF LastAvailableInventory < 0 THEN BEGIN // Emergency order
            // Insert Supply
            InitSupply(SupplyInvtProfile,-LastAvailableInventory,PlanningStartDate - 1);
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterRecalculateReqLine>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<Recalculate>
    Code lines:
    WITH ReqLine DO BEGIN
      PlngLnMgt.Calculate(
        ReqLine,Direction,RefreshRouting,
        ("Action Message" = "Action Message"::New) AND
        ("Ref. Order Type" IN ["Ref. Order Type"::"Prod. Order","Ref. Order Type"::Assembly]),-1);
      OnAfterRecalculateReqLine(ReqLine); <=====================
      IF "Action Message" = "Action Message"::New THEN
        PlngLnMgt.GetPlanningCompList(TempPlanningCompList);
    END;
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterSetOrderPriority>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<SetPriority>
    Code lines:
    ...
            "Order Priority" := 600;
          DATABASE::"Production Forecast Entry":
            "Order Priority" := 800;
        END;
    
      OnAfterSetOrderPriority(InvProfile); <=====================
    
      TESTFIELD("Order Priority");
    
      // Inflexible supply must be handled before all other supply and is therefore grouped
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterShouldDeleteReservEntry>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<ShouldDeleteReservEntry>
    Code lines:
    ...
        ((Binding = Binding::"Order-to-Order") AND ("Shipment Date" <= ToDate) AND
         (Item."Manufacturing Policy" = Item."Manufacturing Policy"::"Make-to-Stock") AND
         (Item."Replenishment System" = Item."Replenishment System"::"Prod. Order") AND
         (NOT IsReservedForProdComponent));
    
    OnAfterShouldDeleteReservEntry(ReservEntry,ToDate,DeleteCondition); <=====================
    EXIT(DeleteCondition);
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterSupplyToInvProfile>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<SupplytoInvProfile>
    Code lines:
    ...
    TransPurchLineToProfile(InventoryProfile,Item,ToDate);
    TransProdOrderToProfile(InventoryProfile,Item,ToDate);
    TransAsmHeaderToProfile(InventoryProfile,Item,ToDate);
    TransRcptTransLineToProfile(InventoryProfile,Item,ToDate);
    
    OnAfterSupplyToInvProfile(InventoryProfile,Item,ToDate,TempItemTrkgEntry,LineNo); <=====================
    
    Item.COPY(CopyOfItem);
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterTransferAttributes>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<TransferAttributes>
    Code lines:
    ...
    ToInvProfile."MPS Order" := FromInvProfile."MPS Order";
    
    IF ToInvProfile.TrackingExists THEN
      ToInvProfile."Planning Flexibility" := ToInvProfile."Planning Flexibility"::None;
    
    OnAfterTransferAttributes(ToInvProfile,FromInvProfile,TempSKU,SpecificLotTracking,SpecificSNTracking); <=====================
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnAfterTransToChildInvProfile>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<UnfoldItemTracking>
    Code lines:
    ...
            ChildInvProfile."Tracking Reference" := ParentInvProfile."Line No.";
            ChildInvProfile."Lot No." := TempItemTrkgEntry."Lot No.";
            ChildInvProfile."Serial No." := TempItemTrkgEntry."Serial No.";
            ChildInvProfile."Expiration Date" := TempItemTrkgEntry."Expiration Date";
            ChildInvProfile.TransferQtyFromItemTrgkEntry(TempItemTrkgEntry);
            OnAfterTransToChildInvProfile(TempItemTrkgEntry,ChildInvProfile); <=====================
            ChildInvProfile.INSERT;
            ParentInvProfile.ReduceQtyByItemTracking(ChildInvProfile);
            ParentInvProfile.MODIFY;
          UNTIL TempItemTrkgEntry.NEXT = 0;
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforeAdjustPlanLine>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<AdjustPlanLine>
    Code lines:
    OnBeforeAdjustPlanLine(ReqLine,Supply); <=====================
    
    WITH Supply DO BEGIN
      ReqLine."Action Message" := "Action Message";
      ReqLine.BlockDynamicTracking(TRUE);
      IF "Action Message" IN
         ["Action Message"::New,
          "Action Message"::"Change Qty.",
          "Action Message"::Reschedule,
          "Action Message"::"Resched.& Chg. Qty.",
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforeBlanketOrderConsumpFind>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<BlanketOrderConsump>
    Code lines:
    ...
      SETRANGE("No.",Item."No.");
      Item.COPYFILTER("Location Filter","Location Code");
      Item.COPYFILTER("Variant Filter","Variant Code");
      SETFILTER("Outstanding Qty. (Base)",'<>0');
      SETFILTER("Shipment Date",'>%1&<=%2',0D,ToDate);
      OnBeforeBlanketOrderConsumpFind(BlanketSalesLine); <=====================
      IF FIND('-') THEN
        REPEAT
          QtyReleased := CalcInventoryProfileRemainingQty(InventoryProfile,"Document No.","Line No.");
          IF "Quantity (Base)" <> "Qty. to Asm. to Order (Base)" THEN
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforeCalculatePlanFromWorksheet>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<CalculatePlanFromWorksheet>
    Code lines:
    OnBeforeCalculatePlanFromWorksheet( <=====================
      Item,ManufacturingSetup2,TemplateName,WorksheetName,OrderDate,ToDate,MRPPlanning,RespectPlanningParm);
    
    PlanToDate := ToDate;
    InitVariables(InventoryProfile[1],ManufacturingSetup2,Item,TemplateName,WorksheetName,MRPPlanning);
    DemandToInvtProfile(InventoryProfile[1],Item,ToDate);
    OrderDate := ForecastConsumption(InventoryProfile[1],Item,OrderDate,ToDate);
    OnCalculatePlanFromWorksheetOnAfterForecastConsumption(InventoryProfile[1],Item,OrderDate,ToDate,LineNo);
    BlanketOrderConsump(InventoryProfile[1],Item,ToDate);
    SupplytoInvProfile(InventoryProfile[1],Item,ToDate);
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforeCheckScheduleOut>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<CheckScheduleOut>
    Code lines:
    OnBeforeCheckScheduleOut(SupplyInvtProfile,TempSKU,BucketSize); <=====================
    
    IF SupplyInvtProfile."Planning Flexibility" <> SupplyInvtProfile."Planning Flexibility"::Unlimited THEN
      EXIT(FALSE);
    
    IF (TargetDate - SupplyInvtProfile."Due Date") <= DampenersDays THEN
      PossibleDate := SupplyInvtProfile."Due Date"
    ELSE
      IF NOT LimitedHorizon OR
         (SupplyInvtProfile."Planning Level Code" > 0)
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforeCommonBalancing>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<PlanItem>
    Code lines:
    ...
              NeedOfPublishSurplus := SupplyInvtProfile."Due Date" > ToDate;
            END;
          END;
    
          // Common balancing
          OnBeforeCommonBalancing(TempSKU,SupplyInvtProfile,DemandInvtProfile,PlanningStartDate,ToDate); <=====================
          DemandInvtProfile.SETRANGE("Due Date",PlanningStartDate,ToDate);
    
          DemandExists := DemandInvtProfile.FINDSET;
          DemandInvtProfile.SETRANGE("Due Date");
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforeDemandInvtProfileInsert>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<CreateDemand>
    Code lines:
    ...
    DemandInvtProfile."Order Relation" := OrderRelation;
    DemandInvtProfile."Source Type" := 0;
    DemandInvtProfile."Untracked Quantity" := NeededQuantity;
    DemandInvtProfile."Due Date" := NeededDueDate;
    DemandInvtProfile."Planning Flexibility" := DemandInvtProfile."Planning Flexibility"::None;
    OnBeforeDemandInvtProfileInsert(DemandInvtProfile,SKU); <=====================
    DemandInvtProfile.INSERT;
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforeDemandToInvProfile>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<DemandToInvtProfile>
    Code lines:
    IsHandled := FALSE;
    OnBeforeDemandToInvProfile(InventoryProfile,Item,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    InventoryProfile.SETCURRENTKEY("Line No.");
    
    CopyOfItem.COPY(Item);
    Item.SETRANGE("Date Filter",0D,ToDate);
    
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforeMaintainProjectedInventory>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<MaintainProjectedInventory>
    Code lines:
    // Updates information about projected inventory up until AtDate or until reorder point is crossed.
    // The check is performed within time buckets.
    IsHandled := FALSE;
    OnBeforeMaintainProjectedInventory( <=====================
      TempReminderInvtProfile,AtDate,LastProjectedInventory,LatestBucketStartDate,ROPHasBeenCrossed,IsHandled);
    IF IsHandled THEN
      EXIT;
    
    ROPHasBeenCrossed := FALSE;
    LatestBucketStartDate := FindNextBucketStartDate(TempReminderInvtProfile,AtDate,LatestBucketStartDate);
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforeMatchAttributesDemandApplicationLoop>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<MatchAttributes>
    Code lines:
    ...
        THEN
          SupplyInvtProfile.SETRANGE("Source Prod. Order Line",DemandInvtProfile."Source Prod. Order Line");
    
        SupplyInvtProfile.SetTrackingFilter(DemandInvtProfile);
        SupplyExists := SupplyInvtProfile.FINDFIRST;
        OnBeforeMatchAttributesDemandApplicationLoop(SupplyInvtProfile,DemandInvtProfile,SupplyExists); <=====================
        WHILE (DemandInvtProfile."Untracked Quantity" > 0) AND
              (NOT ApplyUntrackedQuantityToItemInventory(SupplyExists,ItemInventoryExists))
        DO BEGIN
          OnStartOfMatchAttributesDemandApplicationLoop(SupplyInvtProfile,DemandInvtProfile,SupplyExists);
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforePlanStepSettingOnStartOver>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<PlanItemNextStateStartOver>
    Code lines:
    IF DemandExists AND (DemandInvtProfile."Source Type" = DATABASE::"Transfer Line") THEN
      WHILE CancelTransfer(SupplyInvtProfile,DemandInvtProfile,DemandExists) DO
        DemandExists := DemandInvtProfile.NEXT <> 0;
    
    IsHandled := FALSE;
    OnBeforePlanStepSettingOnStartOver( <=====================
      SupplyInvtProfile,DemandInvtProfile,SupplyExists,DemandExists,NextState,IsHandled);
    IF NOT IsHandled THEN
      IF DemandExists THEN
        IF DemandInvtProfile."Untracked Quantity" = 0 THEN
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforePostInvChgReminder>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<PostInvChgReminder>
    Code lines:
    // Update information on changes in the Projected Inventory over time
    // Only the quantity that is known for sure should be posted
    
    OnBeforePostInvChgReminder(TempReminderInvtProfile,InvProfile,PostOnlyMinimum); <=====================
    TempReminderInvtProfile := InvProfile;
    
    IF PostOnlyMinimum THEN BEGIN
      TempReminderInvtProfile."Remaining Quantity (Base)" -= InvProfile."Untracked Quantity";
      TempReminderInvtProfile."Remaining Quantity (Base)" += InvProfile."Safety Stock Quantity";
    END;
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforePrePlanDateApplicationLoop>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<PlanItemCalcInitialInventory>
    Code lines:
    DemandInvtProfile.SETRANGE("Due Date",0D,PlanningStartDate - 1);
    SupplyInvtProfile.SETRANGE("Due Date",0D,PlanningStartDate - 1);
    DemandExists := DemandInvtProfile.FINDSET;
    SupplyExists := SupplyInvtProfile.FINDSET;
    OnBeforePrePlanDateApplicationLoop(SupplyInvtProfile,DemandInvtProfile,SupplyExists,DemandExists); <=====================
    WHILE DemandExists AND SupplyExists DO BEGIN
      OnStartOfPrePlanDateApplicationLoop(SupplyInvtProfile,DemandInvtProfile,SupplyExists,DemandExists);
      IF DemandInvtProfile."Untracked Quantity" > SupplyInvtProfile."Untracked Quantity" THEN BEGIN
        LastProjectedInventory += SupplyInvtProfile."Remaining Quantity (Base)";
        DemandInvtProfile."Untracked Quantity" -= SupplyInvtProfile."Untracked Quantity";
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforePrePlanDateDemandProc>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<PlanItem>
    Code lines:
    ...
    
          // Calculate initial inventory
          PlanItemCalcInitialInventory(
            DemandInvtProfile,SupplyInvtProfile,PlanningStartDate,DemandExists,SupplyExists,LastProjectedInventory);
    
          OnBeforePrePlanDateDemandProc(SupplyInvtProfile,DemandInvtProfile,SupplyExists,DemandExists); <=====================
          WHILE DemandExists DO BEGIN
            IsHandled := FALSE;
            OnPlanItemOnBeforeSumDemandInvtProfile(DemandInvtProfile,IsHandled);
            IF NOT IsHandled THEN BEGIN
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforePrePlanDateSupplyProc>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<PlanItem>
    Code lines:
    ...
            DemandInvtProfile."Untracked Quantity" := 0;
            DemandInvtProfile.MODIFY;
            DemandExists := DemandInvtProfile.NEXT <> 0;
          END;
    
          OnBeforePrePlanDateSupplyProc(SupplyInvtProfile,DemandInvtProfile,SupplyExists,DemandExists); <=====================
          WHILE SupplyExists DO BEGIN
            IsHandled := FALSE;
            OnPlanItemOnBeforeSumSupplyInvtProfile(SupplyInvtProfile,IsHandled);
            IF NOT IsHandled THEN BEGIN
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnBeforeSupplyToInvProfile>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<SupplytoInvProfile>
    Code lines:
    ...
    InventoryProfile.SETCURRENTKEY("Line No.");
    
    CopyOfItem.COPY(Item);
    Item.SETRANGE("Date Filter");
    
    OnBeforeSupplyToInvProfile(InventoryProfile,Item,ToDate,TempItemTrkgEntry,LineNo); <=====================
    
    TransItemLedgEntryToProfile(InventoryProfile,Item);
    TransReqLineToProfile(InventoryProfile,Item,ToDate);
    TransPurchLineToProfile(InventoryProfile,Item,ToDate);
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnCalculatePlanFromWorksheetOnAfterForecastConsumption>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<CalculatePlanFromWorksheet>
    Code lines:
    ...
    
    PlanToDate := ToDate;
    InitVariables(InventoryProfile[1],ManufacturingSetup2,Item,TemplateName,WorksheetName,MRPPlanning);
    DemandToInvtProfile(InventoryProfile[1],Item,ToDate);
    OrderDate := ForecastConsumption(InventoryProfile[1],Item,OrderDate,ToDate);
    OnCalculatePlanFromWorksheetOnAfterForecastConsumption(InventoryProfile[1],Item,OrderDate,ToDate,LineNo); <=====================
    BlanketOrderConsump(InventoryProfile[1],Item,ToDate);
    SupplytoInvProfile(InventoryProfile[1],Item,ToDate);
    UnfoldItemTracking(InventoryProfile[1],InventoryProfile[2]);
    FindCombination(InventoryProfile[1],InventoryProfile[2],Item);
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnCalculatePlanFromWorksheetOnAfterPlanItem>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<CalculatePlanFromWorksheet>
    Code lines:
    ...
    BlanketOrderConsump(InventoryProfile[1],Item,ToDate);
    SupplytoInvProfile(InventoryProfile[1],Item,ToDate);
    UnfoldItemTracking(InventoryProfile[1],InventoryProfile[2]);
    FindCombination(InventoryProfile[1],InventoryProfile[2],Item);
    PlanItem(InventoryProfile[1],InventoryProfile[2],OrderDate,ToDate,RespectPlanningParm);
    OnCalculatePlanFromWorksheetOnAfterPlanItem(CurrTemplateName,CurrWorksheetName,Item,ReqLine,TempTrkgReservEntry); <=====================
    CommitTracking;
    
    OnAfterCalculatePlanFromWorksheet(Item);
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnEndMatchAttributesDemandApplicationLoop>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<MatchAttributes>
    Code lines:
    ...
    
          IF SupplyInvtProfile."Untracked Quantity" < DemandInvtProfile."Untracked Quantity" THEN
            SupplyExists := CloseSupply(DemandInvtProfile,SupplyInvtProfile)
          ELSE
            CloseDemand(DemandInvtProfile,SupplyInvtProfile);
          OnEndMatchAttributesDemandApplicationLoop(SupplyInvtProfile,DemandInvtProfile,SupplyExists); <=====================
        END;
      UNTIL DemandInvtProfile.NEXT = 0;
    
    // Neutralize or generalize excess Order-To-Order Supply
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnEndOfPrePlanDateApplicationLoop>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<PlanItemCalcInitialInventory>
    Code lines:
    ...
        DemandInvtProfile.MODIFY;
        DemandExists := DemandInvtProfile.NEXT <> 0;
        IF NOT DemandExists THEN
          SupplyInvtProfile.MODIFY;
      END;
      OnEndOfPrePlanDateApplicationLoop(SupplyInvtProfile,DemandInvtProfile,SupplyExists,DemandExists); <=====================
    END;
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnFindCombinationAfterAssignTempSKU>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<FindCombination>
    Code lines:
    ...
    WHILE DemandBool OR SupplyBool DO BEGIN
      IF  DemandBool THEN BEGIN
        TempSKU."Item No." := DemandInvtProfile."Item No.";
        TempSKU."Variant Code" := DemandInvtProfile."Variant Code";
        TempSKU."Location Code" := DemandInvtProfile."Location Code";
        OnFindCombinationAfterAssignTempSKU(TempSKU,DemandInvtProfile); <=====================
      END ELSE BEGIN
        TempSKU."Item No." := SupplyInvtProfile."Item No.";
        TempSKU."Variant Code" := SupplyInvtProfile."Variant Code";
        TempSKU."Location Code" := SupplyInvtProfile."Location Code";
    ...
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<FindCombination>
    Code lines:
    ...
    WHILE DemandBool OR SupplyBool DO BEGIN
      IF  DemandBool THEN BEGIN
        TempSKU."Item No." := DemandInvtProfile."Item No.";
        TempSKU."Variant Code" := DemandInvtProfile."Variant Code";
        TempSKU."Location Code" := DemandInvtProfile."Location Code";
        OnFindCombinationAfterAssignTempSKU(TempSKU,DemandInvtProfile); <=====================
      END ELSE BEGIN
        TempSKU."Item No." := SupplyInvtProfile."Item No.";
        TempSKU."Variant Code" := SupplyInvtProfile."Variant Code";
        TempSKU."Location Code" := SupplyInvtProfile."Location Code";
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnFindReplishmentLocationOnBeforeFindSKU>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<FindReplishmentLocation>
    Code lines:
    ...
    SKU.SETRANGE("Item No.",Item."No.");
    Item.COPYFILTER("Location Filter",SKU."Location Code");
    Item.COPYFILTER("Variant Filter",SKU."Variant Code");
    SKU.SETRANGE("Replenishment System",Item."Replenishment System"::Purchase,Item."Replenishment System"::"Prod. Order");
    SKU.SETFILTER("Reordering Policy",'<>%1',SKU."Reordering Policy"::" ");
    OnFindReplishmentLocationOnBeforeFindSKU(SKU); <=====================
    IF SKU.FIND('-') THEN
      IF SKU.NEXT = 0 THEN
        ReplenishmentLocation := SKU."Location Code";
    EXIT(ReplenishmentLocation <> '');
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnForecastConsumptionOnBeforeFindDemandInvtProfile>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<ForecastConsumption>
    Code lines:
    ...
                DemandInvtProfile.SETFILTER(
                  "Source Type",
                  '%1|%2',
                  DATABASE::"Sales Line",
                  DATABASE::"Service Line");
              OnForecastConsumptionOnBeforeFindDemandInvtProfile(DemandInvtProfile,ComponentForecast); <=====================
              IF DemandInvtProfile.FIND('-') THEN
                REPEAT
                  IF NOT (DemandInvtProfile.IsSupply OR DemandInvtProfile."Derived from Blanket Order")
                  THEN
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnMaintainPlanningLineOnAfterLineCreated>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<MaintainPlanningLine>
    Code lines:
    ...
        AdjustPlanLine(SupplyInvtProfile);
        IF NewPhase = NewPhase::"Line Created" THEN
          ReqLine.MODIFY;
      END;
    
    OnMaintainPlanningLineOnAfterLineCreated(SupplyInvtProfile,ReqLine); <=====================
    
    IF (NewPhase = NewPhase::"Routing Created") OR
       ((NewPhase > NewPhase::"Routing Created") AND
        (SupplyInvtProfile."Planning Line Phase" < SupplyInvtProfile."Planning Line Phase"::"Routing Created"))
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnMaintainPlanningLineOnAfterReqLineInsert>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<MaintainPlanningLine>
    Code lines:
    ...
          UpdateDatetime;
          "MPS Order" := SupplyInvtProfile."MPS Order";
          OnMaintainPlanningLineOnBeforeReqLineInsert(
            ReqLine,SupplyInvtProfile,PlanToDate,CurrForecast,NewPhase,Direction,DemandInvtProfile);
          INSERT;
          OnMaintainPlanningLineOnAfterReqLineInsert(ReqLine); <=====================
          SupplyInvtProfile."Planning Line No." := "Line No.";
          IF NewPhase = NewPhase::"Line Created" THEN
            SupplyInvtProfile."Planning Line Phase" := SupplyInvtProfile."Planning Line Phase"::"Line Created";
        END ELSE BEGIN
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnMaintainPlanningLineOnBeforeAdjustPlanLine>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<MaintainPlanningLine>
    Code lines:
    ...
              DATABASE::"Assembly Header":
                SetAssembly(AsmHeader,SupplyInvtProfile);
              DATABASE::"Transfer Line":
                SetTransfer(TransLine,SupplyInvtProfile);
            END;
          OnMaintainPlanningLineOnBeforeAdjustPlanLine(ReqLine,SupplyInvtProfile,TempSKU); <=====================
          AdjustPlanLine(SupplyInvtProfile);
          "Accept Action Message" := TRUE;
          "Routing Reference No." := "Line No.";
          UpdateDatetime;
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnMaintainPlanningLineOnBeforeReqLineInsert>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<MaintainPlanningLine>
    Code lines:
    ...
          AdjustPlanLine(SupplyInvtProfile);
          "Accept Action Message" := TRUE;
          "Routing Reference No." := "Line No.";
          UpdateDatetime;
          "MPS Order" := SupplyInvtProfile."MPS Order";
          OnMaintainPlanningLineOnBeforeReqLineInsert( <=====================
            ReqLine,SupplyInvtProfile,PlanToDate,CurrForecast,NewPhase,Direction,DemandInvtProfile);
          INSERT;
          OnMaintainPlanningLineOnAfterReqLineInsert(ReqLine);
          SupplyInvtProfile."Planning Line No." := "Line No.";
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnMaintainPlanningLineOnBeforeSupplyInvtProfileInsert>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<MaintainPlanningLine>
    Code lines:
    ...
          SupplyInvtProfile.TransferFromOutboundTransfPlan(ReqLine,TempItemTrkgEntry);
          SupplyInvtProfile."Lot No." := CurrentSupplyInvtProfile."Lot No.";
          SupplyInvtProfile."Serial No." := CurrentSupplyInvtProfile."Serial No.";
          IF SupplyInvtProfile.IsSupply THEN
            SupplyInvtProfile.ChangeSign;
          OnMaintainPlanningLineOnBeforeSupplyInvtProfileInsert(SupplyInvtProfile,CurrentSupplyInvtProfile); <=====================
          SupplyInvtProfile.INSERT;
    
          SupplyInvtProfile.COPY(CurrentSupplyInvtProfile);
        END ELSE
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnPlanItemOnBeforeSumDemandInvtProfile>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<PlanItem>
    Code lines:
    ...
            DemandInvtProfile,SupplyInvtProfile,PlanningStartDate,DemandExists,SupplyExists,LastProjectedInventory);
    
          OnBeforePrePlanDateDemandProc(SupplyInvtProfile,DemandInvtProfile,SupplyExists,DemandExists);
          WHILE DemandExists DO BEGIN
            IsHandled := FALSE;
            OnPlanItemOnBeforeSumDemandInvtProfile(DemandInvtProfile,IsHandled); <=====================
            IF NOT IsHandled THEN BEGIN
              LastProjectedInventory -= DemandInvtProfile."Remaining Quantity (Base)";
              LastAvailableInventory -= DemandInvtProfile."Untracked Quantity";
            END;
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnPlanItemOnBeforeSumSupplyInvtProfile>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<PlanItem>
    Code lines:
    ...
          END;
    
          OnBeforePrePlanDateSupplyProc(SupplyInvtProfile,DemandInvtProfile,SupplyExists,DemandExists);
          WHILE SupplyExists DO BEGIN
            IsHandled := FALSE;
            OnPlanItemOnBeforeSumSupplyInvtProfile(SupplyInvtProfile,IsHandled); <=====================
            IF NOT IsHandled THEN BEGIN
              LastProjectedInventory += SupplyInvtProfile."Remaining Quantity (Base)";
              LastAvailableInventory += SupplyInvtProfile."Untracked Quantity";
            END;
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnStartOfMatchAttributesDemandApplicationLoop>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<MatchAttributes>
    Code lines:
    ...
        SupplyExists := SupplyInvtProfile.FINDFIRST;
        OnBeforeMatchAttributesDemandApplicationLoop(SupplyInvtProfile,DemandInvtProfile,SupplyExists);
        WHILE (DemandInvtProfile."Untracked Quantity" > 0) AND
              (NOT ApplyUntrackedQuantityToItemInventory(SupplyExists,ItemInventoryExists))
        DO BEGIN
          OnStartOfMatchAttributesDemandApplicationLoop(SupplyInvtProfile,DemandInvtProfile,SupplyExists); <=====================
          IF SupplyExists AND (DemandInvtProfile.Binding = DemandInvtProfile.Binding::"Order-to-Order") THEN BEGIN
            NewSupplyDate := SupplyInvtProfile."Due Date";
            CanBeRescheduled :=
              (SupplyInvtProfile."Fixed Date" = 0D) AND
    ...
Codeunit<Inventory Profile Offsetting>.PROCEDURE<OnStartOfPrePlanDateApplicationLoop>
  Raised in: Codeunit<Inventory Profile Offsetting>.PROCEDURE<PlanItemCalcInitialInventory>
    Code lines:
    ...
    SupplyInvtProfile.SETRANGE("Due Date",0D,PlanningStartDate - 1);
    DemandExists := DemandInvtProfile.FINDSET;
    SupplyExists := SupplyInvtProfile.FINDSET;
    OnBeforePrePlanDateApplicationLoop(SupplyInvtProfile,DemandInvtProfile,SupplyExists,DemandExists);
    WHILE DemandExists AND SupplyExists DO BEGIN
      OnStartOfPrePlanDateApplicationLoop(SupplyInvtProfile,DemandInvtProfile,SupplyExists,DemandExists); <=====================
      IF DemandInvtProfile."Untracked Quantity" > SupplyInvtProfile."Untracked Quantity" THEN BEGIN
        LastProjectedInventory += SupplyInvtProfile."Remaining Quantity (Base)";
        DemandInvtProfile."Untracked Quantity" -= SupplyInvtProfile."Untracked Quantity";
        FrozenZoneTrack(SupplyInvtProfile,DemandInvtProfile);
    ...
Codeunit<Capable to Promise>.PROCEDURE<OnBeforeReqLineInsert>
  Raised in: Codeunit<Capable to Promise>.PROCEDURE<CreateReqLine>
    Code lines:
    ...
    ReqLine."Ending Time" := 235959T;
    ReqLine.VALIDATE(Quantity,Quantity);
    ReqLine.VALIDATE("Unit of Measure Code",Unit);
    IF ReqLine."Starting Date" = 0D THEN
      ReqLine."Starting Date" := WORKDATE;
    OnBeforeReqLineInsert(ReqLine); <=====================
    ReqLine.INSERT(TRUE);
    PlngLnMgt.Calculate(ReqLine,Direction,TRUE,TRUE,0);
    IF SalesLine.GET(SalesLine."Document Type"::Order,ReqLine."Order Promising ID",ReqLine."Order Promising Line ID") THEN
      IF SalesLine."Drop Shipment" THEN BEGIN
    ...
Codeunit<AvailabilityManagement>.PROCEDURE<OnAfterCaseCalcCapableToPromise>
  Raised in: Codeunit<AvailabilityManagement>.PROCEDURE<CalcCapableToPromise>
    Code lines:
    ...
                  VALIDATE("Earliest Shipment Date",FeasibleDate)
                ELSE
                  VALIDATE("Earliest Shipment Date","Original Shipment Date");
              END;
          END;
          OnAfterCaseCalcCapableToPromise(OrderPromisingLine,CompanyInfo,OrderPromisingID,LastValidLine); <=====================
          MODIFY;
          CreateReservations(OrderPromisingLine);
        UNTIL NEXT = 0;
    
    ...
Codeunit<AvailabilityManagement>.PROCEDURE<OnAfterUpdateSourceLine>
  Raised in: Codeunit<AvailabilityManagement>.PROCEDURE<UpdateSourceLine>
    Code lines:
    ...
          END;
    
          JobPlanningLine.MODIFY;
        END;
    END;
    OnAfterUpdateSourceLine(OrderPromisingLine2); <=====================
Codeunit<AvailabilityManagement>.PROCEDURE<OnBeforeOrderPromisingLineInsert>
  Raised in: Codeunit<AvailabilityManagement>.PROCEDURE<InsertPromisingLine>
    Code lines:
    ...
        "Qty. per Unit of Measure" := 1;
      "Unavailable Quantity" :=
        ROUND("Unavailable Quantity (Base)" / "Qty. per Unit of Measure",UOMMgt.QtyRndPrecision);
      "Required Quantity" :=
        ROUND("Required Quantity (Base)" / "Qty. per Unit of Measure",UOMMgt.QtyRndPrecision);
      OnBeforeOrderPromisingLineInsert(OrderPromisingLine); <=====================
      INSERT;
    END;
Codeunit<AvailabilityManagement>.PROCEDURE<OnCreateReservationsAfterFirstCASE>
  Raised in: Codeunit<AvailabilityManagement>.PROCEDURE<CreateReservations>
    Code lines:
    ...
          NeededQty := JobPlanningLine2."Remaining Qty." - JobPlanningLine2."Reserved Quantity";
          NeededQtyBase := JobPlanningLine2."Remaining Qty. (Base)" - JobPlanningLine2."Reserved Qty. (Base)";
        END;
    END;
    
    OnCreateReservationsAfterFirstCASE(OrderPromisingLine,NeededQty,NeededQtyBase); <=====================
    
    ReqLine.SETCURRENTKEY("Order Promising ID","Order Promising Line ID","Order Promising Line No.");
    ReqLine.SETRANGE("Order Promising ID",OrderPromisingLine."Source ID");
    ReqLine.SETRANGE("Order Promising Line ID",OrderPromisingLine."Source Line No.");
    ...
Codeunit<AvailabilityManagement>.PROCEDURE<OnCreateReservationsAfterSecondCASE>
  Raised in: Codeunit<AvailabilityManagement>.PROCEDURE<CreateReservations>
    Code lines:
    ...
              JobPlanningLine2.Reserve := JobPlanningLine2.Reserve::Optional;
              JobPlanningLine2.MODIFY;
            END;
          END;
      END;
      OnCreateReservationsAfterSecondCASE(OrderPromisingLine,ReqLine,ReservQty,ReservQtyBase); <=====================
    END;
Codeunit<Upgrade Tag Mgt>.PROCEDURE<OnGetPerCompanyUpgradeTags>
  Raised in: Codeunit<Upgrade Tag Mgt>.PROCEDURE<EnsureUpgradeTagsAreRegisteredForNewCompany>
    Code lines:
    OnGetPerDatabaseUpgradeTags(TempPerDatabaseUpgradeTags);
    EnsurePerDatabaseUpgradeTagsExist(TempPerDatabaseUpgradeTags);
    
    OnGetPerCompanyUpgradeTags(TempPerCompanyUpgradeTags); <=====================
    EnsurePerCompanyUpgradeTagsExist(TempPerCompanyUpgradeTags);
Codeunit<Upgrade Tag Mgt>.PROCEDURE<OnGetPerDatabaseUpgradeTags>
  Raised in: Codeunit<Upgrade Tag Mgt>.PROCEDURE<EnsureUpgradeTagsAreRegisteredForNewCompany>
    Code lines:
    OnGetPerDatabaseUpgradeTags(TempPerDatabaseUpgradeTags); <=====================
    EnsurePerDatabaseUpgradeTagsExist(TempPerDatabaseUpgradeTags);
    
    OnGetPerCompanyUpgradeTags(TempPerCompanyUpgradeTags);
    EnsurePerCompanyUpgradeTagsExist(TempPerCompanyUpgradeTags);
Page<Available - Job Planning Lines>.PROCEDURE<OnAfterSetFilters>
  Raised in: Page<Available - Job Planning Lines>.PROCEDURE<SetFilters>
    Code lines:
    ...
          SETFILTER("Quantity (Base)",'<0')
        ELSE
          SETFILTER("Quantity (Base)",'>0');
    END;
    
    OnAfterSetFilters(Rec,ReservEntry); <=====================
Page<Available - Job Planning Lines>.PROCEDURE<OnAfterUpdateReservFrom>
  Raised in: Page<Available - Job Planning Lines>.PROCEDURE<UpdateReservFrom>
    Code lines:
    ...
          JobPlanningLine.FIND;
          SetJobPlanningLine(JobPlanningLine,ReservEntry);
        END;
    END;
    
    OnAfterUpdateReservFrom; <=====================
Page<Available - Job Planning Lines>.PROCEDURE<OnAfterUpdateReservMgt>
  Raised in: Page<Available - Job Planning Lines>.PROCEDURE<UpdateReservMgt>
    Code lines:
    ...
        ReservMgt.SetJobPlanningLine(JobPlanningLine);
      DATABASE::"Assembly Header":
        ReservMgt.SetAssemblyHeader(AssemblyHeader);
    END;
    
    OnAfterUpdateReservMgt; <=====================
Page<Company Detail>.PROCEDURE<OnGoToCompany>
  Raised in: Page<Company Detail>.Action<GoToClientCompany>.<OnAction>
    Code lines:
    HYPERLINK(GETURL(CLIENTTYPE::Web,COMPANYNAME));
    OnGoToCompany; <=====================
Page<Document Attachment Details>.PROCEDURE<OnAfterOpenForRecRef>
  Raised in: Page<Document Attachment Details>.PROCEDURE<OpenForRecRef>
    Code lines:
    ...
    
          FlowFieldsEditable := FALSE;
        END;
    END;
    
    OnAfterOpenForRecRef(Rec,RecRef); <=====================
Page<Document Attachment Factbox>.PROCEDURE<OnBeforeDrillDown>
  Raised in: Page<Document Attachment Factbox>.Control<Documents>.<OnDrillDown>
    Code lines:
    ...
          RecRef.OPEN(DATABASE::"Purch. Cr. Memo Hdr.");
          IF PurchCrMemoHdr.GET("No.") THEN
            RecRef.GETTABLE(PurchCrMemoHdr);
        END;
      ELSE
        OnBeforeDrillDown(Rec,RecRef); <=====================
    END;
    
    DocumentAttachmentDetails.OpenForRecRef(RecRef);
    DocumentAttachmentDetails.RUNMODAL;
Page<Data Privacy Wizard>.PROCEDURE<OnDrillDownForEntityNumber>
  Raised in: Page<Data Privacy Wizard>.Control<EntityNo>.<OnDrillDown>
    Code lines:
    ...
        Users.GETRECORD(User);
        EntityNo := User."User Name";
      END;
    END;
    
    OnDrillDownForEntityNumber(EntityTypeTableNo,EntityNo); // Integration point to external devs <=====================
    
    NextActionEnabled := EntityNo <> '';
    PreviewActionEnabled := EntityNo <> '';
Page<Data Privacy Wizard>.PROCEDURE<OnEntityNoValidate>
  Raised in: Page<Data Privacy Wizard>.Control<EntityNo>.<OnValidate>
    Code lines:
    ...
        IF NOT User.FINDFIRST THEN
          ERROR(RecordNotFoundErr);
      END;
    END;
    
    OnEntityNoValidate(EntityTypeTableNo,EntityNo); <=====================
    
    NextActionEnabled := EntityNo <> '';
    PreviewActionEnabled := EntityNo <> '';
Page<Create Payment>.PROCEDURE<OnBeforeUpdateGnlJnlLineDimensionsFromTempBuffer>
  Raised in: Page<Create Payment>.PROCEDURE<MakeGenJnlLines>
    Code lines:
    ...
    
          "Creditor No." := TempPaymentBuffer."Creditor No.";
          "Payment Reference" := TempPaymentBuffer."Payment Reference";
          "Exported to Payment File" := TempPaymentBuffer."Exported to Payment File";
          "Applies-to Ext. Doc. No." := TempPaymentBuffer."Applies-to Ext. Doc. No.";
          OnBeforeUpdateGnlJnlLineDimensionsFromTempBuffer(GenJnlLine,TempPaymentBuffer); <=====================
          UpdateDimensions(GenJnlLine,TempPaymentBuffer);
          INSERT;
        END;
      UNTIL TempPaymentBuffer.NEXT = 0;
Page<Create Payment>.PROCEDURE<OnUpdateTempBufferFromVendorLedgerEntry>
  Raised in: Page<Create Payment>.PROCEDURE<MakeGenJnlLines>
    Code lines:
    ...
            TempPaymentBuffer."Payment Method Code" := VendorLedgerEntry."Payment Method Code";
          TempPaymentBuffer."Creditor No." := VendorLedgerEntry."Creditor No.";
          TempPaymentBuffer."Payment Reference" := VendorLedgerEntry."Payment Reference";
          TempPaymentBuffer."Exported to Payment File" := VendorLedgerEntry."Exported to Payment File";
          TempPaymentBuffer."Applies-to Ext. Doc. No." := VendorLedgerEntry."External Document No.";
          OnUpdateTempBufferFromVendorLedgerEntry(TempPaymentBuffer,VendorLedgerEntry); <=====================
          TempPaymentBuffer."Dimension Entry No." := 0;
          TempPaymentBuffer."Global Dimension 1 Code" := '';
          TempPaymentBuffer."Global Dimension 2 Code" := '';
          TempPaymentBuffer."Dimension Set ID" := 0;
    ...
Page<Payment Reconciliation Journal>.PROCEDURE<OnAfterImportBankTransactions>
  Raised in: Page<Payment Reconciliation Journal>.Action<ImportBankTransactions>.<OnAction>
    Code lines:
    OnAfterImportBankTransactions(SubscriberInvoked,Rec); <=====================
    IF NOT SubscriberInvoked THEN BEGIN
      BankAccReconciliation.GET("Statement Type","Bank Account No.","Statement No.");
      BankAccReconciliation.ImportBankStatement;
      IF BankAccReconciliation.FIND THEN;
    END;
Page<Payment Reconciliation Journal>.PROCEDURE<OnAfterValidateShortcutDimCode>
  Raised in: Page<Payment Reconciliation Journal>.Control<ShortcutDimCode3>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(3,ShortcutDimCode[3]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,3); <=====================
  Raised in: Page<Payment Reconciliation Journal>.Control<ShortcutDimCode4>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(4,ShortcutDimCode[4]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,4); <=====================
  Raised in: Page<Payment Reconciliation Journal>.Control<ShortcutDimCode5>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(5,ShortcutDimCode[5]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,5); <=====================
  Raised in: Page<Payment Reconciliation Journal>.Control<ShortcutDimCode6>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(6,ShortcutDimCode[6]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,6); <=====================
  Raised in: Page<Payment Reconciliation Journal>.Control<ShortcutDimCode7>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(7,ShortcutDimCode[7]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,7); <=====================
  Raised in: Page<Payment Reconciliation Journal>.Control<ShortcutDimCode8>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(8,ShortcutDimCode[8]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,8); <=====================
Page<Payment Reconciliation Journal>.PROCEDURE<OnAtActionApplyAutomatically>
  Raised in: Page<Payment Reconciliation Journal>.Action<ApplyAutomatically>.<OnAction>
    Code lines:
    ...
    IF AppliedPaymentEntry.COUNT > 0 THEN
      IF NOT CONFIRM(RemoveExistingApplicationsQst) THEN
        EXIT;
    
    BankAccReconciliation.GET("Statement Type","Bank Account No.","Statement No.");
    OnAtActionApplyAutomatically(BankAccReconciliation,SubscriberInvoked); <=====================
    IF NOT SubscriberInvoked THEN
      CODEUNIT.RUN(CODEUNIT::"Match Bank Pmt. Appl.",BankAccReconciliation);
    CurrPage.UPDATE(FALSE);
Page<Payment Reconciliation Journal>.PROCEDURE<OnUpdateSorting>
  Raised in: Page<Payment Reconciliation Journal>.PROCEDURE<UpdateSorting>
    Code lines:
    ...
          BankAccReconciliationLine."Sorting Order" -= ScoreRange;
    
        BankAccReconciliationLine.MODIFY;
      UNTIL BankAccReconciliationLine.NEXT = 0;
    
      OnUpdateSorting(BankAccReconciliation,SubscriberInvoked); <=====================
      IF NOT SubscriberInvoked THEN
        SETCURRENTKEY("Sorting Order");
      ASCENDING(IsAscending);
    
    ...
Page<Payment Application>.PROCEDURE<OnSetBankAccReconcLine>
  Raised in: Page<Payment Application>.PROCEDURE<SetBankAccReconcLine>
    Code lines:
    BankAccReconLine := NewBankAccReconLine;
    TransferFromBankAccReconLine(NewBankAccReconLine);
    
    OnSetBankAccReconcLine(BankAccReconLine); <=====================
Page<Help And Chart Wrapper>.PROCEDURE<OnBeforeInitializeSelectedChart>
  Raised in: Page<Help And Chart Wrapper>.PROCEDURE<InitializeSelectedChart>
    Code lines:
    OnBeforeInitializeSelectedChart(SelectedChartDefinition); <=====================
    ChartManagement.SetDefaultPeriodLength(SelectedChartDefinition,BusinessChartBuffer);
    ChartManagement.UpdateChart(SelectedChartDefinition,BusinessChartBuffer,Period::" ");
    PreviousNextActionEnabled := ChartManagement.UpdateNextPrevious(SelectedChartDefinition);
    ChartManagement.UpdateStatusText(SelectedChartDefinition,BusinessChartBuffer,StatusText);
    UpdateChart;
Page<Headline RC Business Manager>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
  Raised in: Page<Headline RC Business Manager>.PROCEDURE<ComputeDefaultFieldsVisibility>
    Code lines:
    OnIsAnyExtensionHeadlineVisible(ExtensionHeadlinesVisible); <=====================
    DefaultFieldsVisible := NOT ExtensionHeadlinesVisible;
    UserGreetingVisible := HeadlineManagement.ShouldUserGreetingBeVisible;
Page<Headline RC Order Processor>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
  Raised in: Page<Headline RC Order Processor>.PROCEDURE<ComputeDefaultFieldsVisibility>
    Code lines:
    OnIsAnyExtensionHeadlineVisible(ExtensionHeadlinesVisible); <=====================
    DefaultFieldsVisible := NOT ExtensionHeadlinesVisible;
    UserGreetingVisible := HeadlineManagement.ShouldUserGreetingBeVisible;
Page<Headline RC Accountant>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
  Raised in: Page<Headline RC Accountant>.PROCEDURE<ComputeDefaultFieldsVisibility>
    Code lines:
    OnIsAnyExtensionHeadlineVisible(ExtensionHeadlinesVisible); <=====================
    DefaultFieldsVisible := NOT ExtensionHeadlinesVisible;
    UserGreetingVisible := HeadlineManagement.ShouldUserGreetingBeVisible;
Page<Headline RC Project Manager>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
  Raised in: Page<Headline RC Project Manager>.PROCEDURE<ComputeDefaultFieldsVisibility>
    Code lines:
    OnIsAnyExtensionHeadlineVisible(ExtensionHeadlinesVisible); <=====================
    DefaultFieldsVisible := NOT ExtensionHeadlinesVisible;
    UserGreetingVisible := HeadlineManagement.ShouldUserGreetingBeVisible;
Page<Headline RC Relationship Mgt.>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
  Raised in: Page<Headline RC Relationship Mgt.>.PROCEDURE<ComputeDefaultFieldsVisibility>
    Code lines:
    OnIsAnyExtensionHeadlineVisible(ExtensionHeadlinesVisible); <=====================
    DefaultFieldsVisible := NOT ExtensionHeadlinesVisible;
    UserGreetingVisible := HeadlineManagement.ShouldUserGreetingBeVisible;
Page<Headline RC Administrator>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
  Raised in: Page<Headline RC Administrator>.PROCEDURE<ComputeDefaultFieldsVisibility>
    Code lines:
    OnIsAnyExtensionHeadlineVisible(ExtensionHeadlinesVisible); <=====================
    DefaultFieldsVisible := NOT ExtensionHeadlinesVisible;
    UserGreetingVisible := HeadlineManagement.ShouldUserGreetingBeVisible;
Page<Headline RC Team Member>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
  Raised in: Page<Headline RC Team Member>.PROCEDURE<ComputeDefaultFieldsVisibility>
    Code lines:
    OnIsAnyExtensionHeadlineVisible(ExtensionHeadlinesVisible); <=====================
    DefaultFieldsVisible := NOT ExtensionHeadlinesVisible;
    UserGreetingVisible := HeadlineManagement.ShouldUserGreetingBeVisible;
Page<Headline RC Prod. Planner>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
  Raised in: Page<Headline RC Prod. Planner>.PROCEDURE<ComputeDefaultFieldsVisibility>
    Code lines:
    OnIsAnyExtensionHeadlineVisible(ExtensionHeadlinesVisible); <=====================
    DefaultFieldsVisible := NOT ExtensionHeadlinesVisible;
    UserGreetingVisible := HeadlineManagement.ShouldUserGreetingBeVisible;
Page<Headline RC Serv. Dispatcher>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
  Raised in: Page<Headline RC Serv. Dispatcher>.PROCEDURE<ComputeDefaultFieldsVisibility>
    Code lines:
    OnIsAnyExtensionHeadlineVisible(ExtensionHeadlinesVisible); <=====================
    DefaultFieldsVisible := NOT ExtensionHeadlinesVisible;
    UserGreetingVisible := HeadlineManagement.ShouldUserGreetingBeVisible;
Page<Headline RC Security Admin>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
  Raised in: Page<Headline RC Security Admin>.PROCEDURE<ComputeDefaultFieldsVisibility>
    Code lines:
    OnIsAnyExtensionHeadlineVisible(ExtensionHeadlinesVisible); <=====================
    DefaultFieldsVisible := NOT ExtensionHeadlinesVisible;
    UserGreetingVisible := HeadlineManagement.ShouldUserGreetingBeVisible;
Page<Headline RC Whse. Basic>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
  Raised in: Page<Headline RC Whse. Basic>.PROCEDURE<ComputeDefaultFieldsVisibility>
    Code lines:
    OnIsAnyExtensionHeadlineVisible(ExtensionHeadlinesVisible); <=====================
    DefaultFieldsVisible := NOT ExtensionHeadlinesVisible;
    UserGreetingVisible := HeadlineManagement.ShouldUserGreetingBeVisible;
Page<Headline RC Whse. WMS>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
  Raised in: Page<Headline RC Whse. WMS>.PROCEDURE<ComputeDefaultFieldsVisibility>
    Code lines:
    OnIsAnyExtensionHeadlineVisible(ExtensionHeadlinesVisible); <=====================
    DefaultFieldsVisible := NOT ExtensionHeadlinesVisible;
    UserGreetingVisible := HeadlineManagement.ShouldUserGreetingBeVisible;
Page<Headline RC Whse. Worker WMS>.PROCEDURE<OnIsAnyExtensionHeadlineVisible>
  Raised in: Page<Headline RC Whse. Worker WMS>.PROCEDURE<ComputeDefaultFieldsVisibility>
    Code lines:
    OnIsAnyExtensionHeadlineVisible(ExtensionHeadlinesVisible); <=====================
    DefaultFieldsVisible := NOT ExtensionHeadlinesVisible;
    UserGreetingVisible := HeadlineManagement.ShouldUserGreetingBeVisible;
Page<My Notifications>.PROCEDURE<OnAfterInitializingNotificationWithDefaultState>
  Raised in: Page<My Notifications>.PROCEDURE<InitializeNotificationsWithDefaultState>
    Code lines:
    OnInitializingNotificationWithDefaultState;
    OnAfterInitializingNotificationWithDefaultState; <=====================
Page<My Notifications>.PROCEDURE<OnInitializingNotificationWithDefaultState>
  Raised in: Page<My Notifications>.<OnOpenPage>
    Code lines:
    OnInitializingNotificationWithDefaultState; <=====================
    SETRANGE("User Id",USERID);
  Raised in: Page<My Notifications>.PROCEDURE<InitializeNotificationsWithDefaultState>
    Code lines:
    OnInitializingNotificationWithDefaultState; <=====================
    OnAfterInitializingNotificationWithDefaultState;
Page<Sales Statistics>.PROCEDURE<OnAfterCalculateTotals>
  Raised in: Page<Sales Statistics>.PROCEDURE<CalculateTotals>
    Code lines:
    ...
    
    SalesLine.CalcVATAmountLines(0,Rec,TempSalesLine,TempVATAmountLine);
    TempVATAmountLine.MODIFYALL(Modified,FALSE);
    SetVATSpecification;
    
    OnAfterCalculateTotals(Rec,TotalSalesLine,TotalSalesLineLCY,TempVATAmountLine); <=====================
Page<Sales Statistics>.PROCEDURE<OnOpenPageOnBeforeSetEditable>
  Raised in: Page<Sales Statistics>.<OnOpenPage>
    Code lines:
    ...
    AllowInvDisc :=
      NOT (SalesSetup."Calc. Inv. Discount" AND CustInvDiscRecExists("Invoice Disc. Code"));
    AllowVATDifference :=
      SalesSetup."Allow VAT Difference" AND
      NOT ("Document Type" IN ["Document Type"::Quote,"Document Type"::"Blanket Order"]);
    OnOpenPageOnBeforeSetEditable(AllowInvDisc,AllowVATDifference); <=====================
    CurrPage.EDITABLE := AllowVATDifference OR AllowInvDisc;
    SetVATSpecification;
Page<Purchase Statistics>.PROCEDURE<OnAfterCalculateTotals>
  Raised in: Page<Purchase Statistics>.PROCEDURE<CalculateTotals>
    Code lines:
    ...
    
    PurchLine.CalcVATAmountLines(0,Rec,TempPurchLine,TempVATAmountLine);
    TempVATAmountLine.MODIFYALL(Modified,FALSE);
    SetVATSpecification;
    
    OnAfterCalculateTotals(Rec,TotalPurchLine,TotalPurchLineLCY,TempVATAmountLine); <=====================
Page<Purchase Statistics>.PROCEDURE<OnOpenPageOnBeforeSetEditable>
  Raised in: Page<Purchase Statistics>.<OnOpenPage>
    Code lines:
    ...
    AllowInvDisc :=
      NOT (PurchSetup."Calc. Inv. Discount" AND VendInvDiscRecExists("Invoice Disc. Code"));
    AllowVATDifference :=
      PurchSetup."Allow VAT Difference" AND
      NOT ("Document Type" IN ["Document Type"::Quote,"Document Type"::"Blanket Order"]);
    OnOpenPageOnBeforeSetEditable(AllowInvDisc,AllowVATDifference); <=====================
    CurrPage.EDITABLE := AllowVATDifference OR AllowInvDisc;
    SetVATSpecification;
Page<Office Suggested Line Items>.PROCEDURE<OnDisableMessage>
  Raised in: Page<Office Suggested Line Items>.<OnQueryClosePage>
    Code lines:
    IF CloseAction IN [ACTION::OK,ACTION::LookupOK] THEN
      IF DoNotShowAgain THEN
        OnDisableMessage; <=====================
Page<Payroll Import Transactions>.PROCEDURE<OnCreateSampleFile>
  Raised in: Page<Payroll Import Transactions>.Action<ActionCreateSampleFile>.<OnAction>
    Code lines:
    OnCreateSampleFile(TempServiceConnection); <=====================
Page<Payroll Import Transactions>.PROCEDURE<OnImportPayrollTransactions>
  Raised in: Page<Payroll Import Transactions>.Action<ActionNext>.<OnAction>
    Code lines:
    CASE Step OF
      0:
        BEGIN
          OnImportPayrollTransactions(TempServiceConnection,TempImportGLTransaction); <=====================
          IF TempImportGLTransaction.FINDSET THEN
            REPEAT
              Rec := TempImportGLTransaction;
              INSERT;
            UNTIL TempImportGLTransaction.NEXT = 0;
          IF FINDFIRST THEN BEGIN
    ...
Page<Reverse Entries>.PROCEDURE<OnBeforeGetEntryTypeText>
  Raised in: Page<Reverse Entries>.PROCEDURE<GetEntryTypeText>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetEntryTypeText(Rec,EntryTypeText,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(EntryTypeText);
    
    CASE "Entry Type" OF
      "Entry Type"::"G/L Account":
        EXIT(GLEntry.TABLECAPTION);
      "Entry Type"::Customer:
        EXIT(CustLedgEntry.TABLECAPTION);
    ...
Page<Data Migration Overview>.PROCEDURE<OnRequestAbort>
  Raised in: Page<Data Migration Overview>.Action<Stop Data Migration>.<OnAction>
    Code lines:
    OnRequestAbort; <=====================
    DataMigrationStatus.SETFILTER(
      Status,'%1|%2',DataMigrationStatus.Status::"In Progress",DataMigrationStatus.Status::Pending);
    IF DataMigrationStatus.FINDFIRST THEN
      DataMigrationMgt.SetAbortStatus(DataMigrationStatus);
Page<Incoming Document>.PROCEDURE<OnCloseIncomingDocumentFromAction>
  Raised in: Page<Incoming Document>.Action<OCRSetup>.<OnAction>
    Code lines:
    PAGE.RUNMODAL(PAGE::"OCR Service Setup");
    CurrPage.UPDATE;
    IF ClientTypeManagement.GetCurrentClientType = CLIENTTYPE::Web THEN
      IF OCRIsEnabled THEN BEGIN
        OnCloseIncomingDocumentFromAction(Rec); <=====================
        CurrPage.CLOSE;
      END;
Page<Incoming Doc. Attach. FactBox>.PROCEDURE<OnAfterLoadDataFromRecord>
  Raised in: Page<Incoming Doc. Attach. FactBox>.PROCEDURE<LoadDataFromRecord>
    Code lines:
    ...
      EXIT;
    
    IF GetIncomingDocumentRecord(MainRecordVariant,IncomingDocument) THEN
      InsertFromIncomingDocument(IncomingDocument,Rec);
    
    OnAfterLoadDataFromRecord(MainRecordRef); <=====================
    
    CurrPage.UPDATE(FALSE);
Page<O365 Import Export Settings>.PROCEDURE<OnInsertMenuItems>
  Raised in: Page<O365 Import Export Settings>.PROCEDURE<InsertMenuItems>
    Code lines:
    InsertPageMenuItem(PAGE::"O365 Export Invoices",ExportTitleLbl,ExportDescriptionLbl);
    OnInsertMenuItems(Rec); <=====================
    
    IF ClientTypeManagement.GetCurrentClientType <> CLIENTTYPE::Phone THEN BEGIN
      InsertPageWithParameterMenuItem(
        PAGE::"O365 Import from Excel Wizard",
        DummyCustomer.TABLENAME,
        ImportCustomersTieleLbl,
        ImportCustomersDesriptionLbl);
      InsertPageWithParameterMenuItem(
    ...
Page<Apply Customer Entries>.PROCEDURE<OnAfterCalcApplnAmount>
  Raised in: Page<Apply Customer Entries>.PROCEDURE<CalcApplnAmount>
    Code lines:
    ...
              END;
          END;
        END;
    END;
    
    OnAfterCalcApplnAmount(Rec,AppliedAmount,ApplyingAmount); <=====================
Page<Apply Customer Entries>.PROCEDURE<OnAfterCalcApplnAmountToApply>
  Raised in: Page<Apply Customer Entries>.PROCEDURE<CalcApplnAmountToApply>
    Code lines:
    ...
      ApplnDate := "Posting Date";
    ApplnAmountToApply :=
      CurrExchRate.ApplnExchangeAmtFCYToFCY(
        ApplnDate,"Currency Code",ApplnCurrencyCode,AmountToApply,ValidExchRate);
    
    OnAfterCalcApplnAmountToApply(Rec,ApplnAmountToApply); <=====================
    EXIT(ApplnAmountToApply);
Page<Apply Customer Entries>.PROCEDURE<OnAfterCalcApplnRemainingAmount>
  Raised in: Page<Apply Customer Entries>.PROCEDURE<CalcApplnRemainingAmount>
    Code lines:
    ...
      ApplnDate := "Posting Date";
    ApplnRemainingAmount :=
      CurrExchRate.ApplnExchangeAmtFCYToFCY(
        ApplnDate,"Currency Code",ApplnCurrencyCode,Amount,ValidExchRate);
    
    OnAfterCalcApplnRemainingAmount(Rec,ApplnRemainingAmount); <=====================
    EXIT(ApplnRemainingAmount);
Page<Apply Customer Entries>.PROCEDURE<OnAfterExchangeAmountsOnLedgerEntry>
  Raised in: Page<Apply Customer Entries>.PROCEDURE<ExchangeAmountsOnLedgerEntry>
    Code lines:
    ...
      CalcCustLedgEntry."Amount to Apply" :=
        CurrExchRate.ExchangeAmount(
          CalcCustLedgEntry."Amount to Apply",CalcCustLedgEntry."Currency Code",CurrencyCode,PostingDate);
    END;
    
    OnAfterExchangeAmountsOnLedgerEntry(CalcCustLedgEntry,CustLedgEntry,CurrencyCode); <=====================
Page<Apply Customer Entries>.PROCEDURE<OnBeforeCalcApplnAmount>
  Raised in: Page<Apply Customer Entries>.PROCEDURE<CalcApplnAmount>
    Code lines:
    OnBeforeCalcApplnAmount(Rec,GenJnlLine); <=====================
    
    AppliedAmount := 0;
    PmtDiscAmount := 0;
    DifferentCurrenciesInAppln := FALSE;
    
    CASE CalcType OF
      CalcType::Direct:
        BEGIN
          FindAmountRounding;
    ...
Page<Apply Customer Entries>.PROCEDURE<OnBeforeEarlierPostingDateError>
  Raised in: Page<Apply Customer Entries>.<OnQueryClosePage>
    Code lines:
    IF CloseAction = ACTION::LookupOK THEN
      LookupOKOnPush;
    IF ApplnType = ApplnType::"Applies-to Doc. No." THEN BEGIN
      IF OK THEN BEGIN
        RaiseError := ApplyingCustLedgEntry."Posting Date" < "Posting Date";
        OnBeforeEarlierPostingDateError(ApplyingCustLedgEntry,Rec,RaiseError); <=====================
        IF RaiseError THEN BEGIN
          OK := FALSE;
          ERROR(
            EarlierPostingDateErr,ApplyingCustLedgEntry."Document Type",ApplyingCustLedgEntry."Document No.",
    ...
  Raised in: Page<Apply Customer Entries>.PROCEDURE<SetCustApplId>
    Code lines:
    IF CalcType = CalcType::GenJnlLine THEN BEGIN
      RaiseError := ApplyingCustLedgEntry."Posting Date" < "Posting Date";
      OnBeforeEarlierPostingDateError(ApplyingCustLedgEntry,Rec,RaiseError); <=====================
      IF RaiseError THEN
        ERROR(
          EarlierPostingDateErr,ApplyingCustLedgEntry."Document Type",ApplyingCustLedgEntry."Document No.",
          "Document Type","Document No.");
    END;
    
    IF ApplyingCustLedgEntry."Entry No." <> 0 THEN
    ...
Page<Apply Customer Entries>.PROCEDURE<OnBeforeHandledChosenEntries>
  Raised in: Page<Apply Customer Entries>.PROCEDURE<HandleChosenEntries>
    Code lines:
    IsHandled := FALSE;
    OnBeforeHandledChosenEntries(Type,CurrentAmount,CurrencyCode,PostingDate,AppliedCustLedgEntry,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT AppliedCustLedgEntry.FINDSET(FALSE,FALSE) THEN
      EXIT;
    
    REPEAT
      TempAppliedCustLedgEntry := AppliedCustLedgEntry;
    ...
Page<Apply Customer Entries>.PROCEDURE<OnBeforeSetApplyingCustLedgEntry>
  Raised in: Page<Apply Customer Entries>.PROCEDURE<SetApplyingCustLedgEntry>
    Code lines:
    OnBeforeSetApplyingCustLedgEntry(AppliedCustLedgEntry,GenJnlLine); <=====================
    
    CASE CalcType OF
      CalcType::SalesHeader:
        BEGIN
          ApplyingCustLedgEntry."Entry No." := 1;
          ApplyingCustLedgEntry."Posting Date" := SalesHeader."Posting Date";
          IF SalesHeader."Document Type" = SalesHeader."Document Type"::"Return Order" THEN
            ApplyingCustLedgEntry."Document Type" := SalesHeader."Document Type"::"Credit Memo"
          ELSE
    ...
Page<Apply Vendor Entries>.PROCEDURE<OnAfterCalcApplnAmount>
  Raised in: Page<Apply Vendor Entries>.PROCEDURE<CalcApplnAmount>
    Code lines:
    ...
              END;
          END;
        END;
    END;
    
    OnAfterCalcApplnAmount(Rec,AppliedAmount,ApplyingAmount); <=====================
Page<Apply Vendor Entries>.PROCEDURE<OnAfterCalcApplnAmountToApply>
  Raised in: Page<Apply Vendor Entries>.PROCEDURE<CalcApplnAmountToApply>
    Code lines:
    ...
      ApplnDate := "Posting Date";
    ApplnAmountToApply :=
      CurrExchRate.ApplnExchangeAmtFCYToFCY(
        ApplnDate,"Currency Code",ApplnCurrencyCode,AmountToApply,ValidExchRate);
    
    OnAfterCalcApplnAmountToApply(Rec,AmountToApply); <=====================
    EXIT(ApplnAmountToApply);
Page<Apply Vendor Entries>.PROCEDURE<OnAfterCalcApplnRemainingAmount>
  Raised in: Page<Apply Vendor Entries>.PROCEDURE<CalcApplnRemainingAmount>
    Code lines:
    ...
      ApplnDate := "Posting Date";
    ApplnRemainingAmount :=
      CurrExchRate.ApplnExchangeAmtFCYToFCY(
        ApplnDate,"Currency Code",ApplnCurrencyCode,Amount,ValidExchRate);
    
    OnAfterCalcApplnRemainingAmount(Rec,ApplnRemainingAmount); <=====================
    EXIT(ApplnRemainingAmount);
Page<Apply Vendor Entries>.PROCEDURE<OnAfterExchangeAmountsOnLedgerEntry>
  Raised in: Page<Apply Vendor Entries>.PROCEDURE<ExchangeAmountsOnLedgerEntry>
    Code lines:
    ...
      CalcVendLedgEntry."Amount to Apply" :=
        CurrExchRate.ExchangeAmount(
          CalcVendLedgEntry."Amount to Apply",CalcVendLedgEntry."Currency Code",CurrencyCode,PostingDate);
    END;
    
    OnAfterExchangeAmountsOnLedgerEntry(CalcVendLedgEntry,VendLedgEntry,CurrencyCode); <=====================
Page<Apply Vendor Entries>.PROCEDURE<OnBeforeCalcApplnAmount>
  Raised in: Page<Apply Vendor Entries>.PROCEDURE<CalcApplnAmount>
    Code lines:
    OnBeforeCalcApplnAmount(Rec,GenJnlLine); <=====================
    
    AppliedAmount := 0;
    PmtDiscAmount := 0;
    DifferentCurrenciesInAppln := FALSE;
    
    CASE CalcType OF
      CalcType::Direct:
        BEGIN
          FindAmountRounding;
    ...
Page<Apply Vendor Entries>.PROCEDURE<OnBeforeEarlierPostingDateError>
  Raised in: Page<Apply Vendor Entries>.<OnQueryClosePage>
    Code lines:
    IF CloseAction = ACTION::LookupOK THEN
      LookupOKOnPush;
    IF ApplnType = ApplnType::"Applies-to Doc. No." THEN BEGIN
      IF OK THEN BEGIN
        RaiseError := ApplyingVendLedgEntry."Posting Date" < "Posting Date";
        OnBeforeEarlierPostingDateError(ApplyingVendLedgEntry,Rec,RaiseError); <=====================
        IF RaiseError THEN BEGIN
          OK := FALSE;
          ERROR(
            EarlierPostingDateErr,ApplyingVendLedgEntry."Document Type",ApplyingVendLedgEntry."Document No.",
    ...
  Raised in: Page<Apply Vendor Entries>.PROCEDURE<SetVendApplId>
    Code lines:
    IF CalcType = CalcType::GenJnlLine THEN BEGIN
      RaiseError := ApplyingVendLedgEntry."Posting Date" < "Posting Date";
      OnBeforeEarlierPostingDateError(ApplyingVendLedgEntry,Rec,RaiseError); <=====================
      IF RaiseError THEN
        ERROR(
          EarlierPostingDateErr,ApplyingVendLedgEntry."Document Type",ApplyingVendLedgEntry."Document No.",
          "Document Type","Document No.");
    END;
    
    IF ApplyingVendLedgEntry."Entry No." <> 0 THEN
    ...
Page<Apply Vendor Entries>.PROCEDURE<OnBeforeHandledChosenEntries>
  Raised in: Page<Apply Vendor Entries>.PROCEDURE<HandleChosenEntries>
    Code lines:
    IsHandled := FALSE;
    OnBeforeHandledChosenEntries(Type,CurrentAmount,CurrencyCode,PostingDate,AppliedVendLedgEntry,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT AppliedVendLedgEntry.FINDSET(FALSE,FALSE) THEN
      EXIT;
    
    REPEAT
      TempAppliedVendLedgEntry := AppliedVendLedgEntry;
    ...
Page<Apply Vendor Entries>.PROCEDURE<OnBeforeSetApplyingVendLedgEntry>
  Raised in: Page<Apply Vendor Entries>.PROCEDURE<SetApplyingVendLedgEntry>
    Code lines:
    OnBeforeSetApplyingVendLedgEntry(ApplyingVendLedgEntry,GenJnlLine); <=====================
    
    CASE CalcType OF
      CalcType::PurchHeader:
        BEGIN
          ApplyingVendLedgEntry."Posting Date" := PurchHeader."Posting Date";
          IF PurchHeader."Document Type" = PurchHeader."Document Type"::"Return Order" THEN
            ApplyingVendLedgEntry."Document Type" := PurchHeader."Document Type"::"Credit Memo"
          ELSE
            ApplyingVendLedgEntry."Document Type" := PurchHeader."Document Type";
    ...
Page<BC O365 No. Series Card>.PROCEDURE<OnAfterNoSeriesModified>
  Raised in: Page<BC O365 No. Series Card>.PROCEDURE<UpdateLineForNewSeries>
    Code lines:
    ...
        NoSeriesLine.VALIDATE("Series Code",Code);
        NoSeriesLine.VALIDATE("Line No.",GetNextLineNo(Code));
        NoSeriesLine.VALIDATE("Starting No.",NextNoSeries);
        NoSeriesLine.INSERT(TRUE);
      END;
      OnAfterNoSeriesModified; <=====================
    END;
Page<BC O365 Quickbooks Settings>.PROCEDURE<OnQuickBooksDesktopSyncClicked>
  Raised in: Page<BC O365 Quickbooks Settings>.Control<SyncWithQbd>.<OnDrillDown>
    Code lines:
    OnQuickBooksDesktopSyncClicked; <=====================
Page<BC O365 Quickbooks Settings>.PROCEDURE<OnQuickBooksOnlineSyncClicked>
  Raised in: Page<BC O365 Quickbooks Settings>.Control<SyncWithQbo>.<OnDrillDown>
    Code lines:
    OnQuickBooksOnlineSyncClicked; <=====================
Page<Sales Journal>.PROCEDURE<OnAfterValidateShortcutDimCode>
  Raised in: Page<Sales Journal>.Control<ShortcutDimCode3>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(3,ShortcutDimCode[3]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,3); <=====================
  Raised in: Page<Sales Journal>.Control<ShortcutDimCode4>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(4,ShortcutDimCode[4]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,4); <=====================
  Raised in: Page<Sales Journal>.Control<ShortcutDimCode5>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(5,ShortcutDimCode[5]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,5); <=====================
  Raised in: Page<Sales Journal>.Control<ShortcutDimCode6>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(6,ShortcutDimCode[6]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,6); <=====================
  Raised in: Page<Sales Journal>.Control<ShortcutDimCode7>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(7,ShortcutDimCode[7]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,7); <=====================
  Raised in: Page<Sales Journal>.Control<ShortcutDimCode8>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(8,ShortcutDimCode[8]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,8); <=====================
Page<Purchase Journal>.PROCEDURE<OnAfterValidateShortcutDimCode>
  Raised in: Page<Purchase Journal>.Control<ShortcutDimCode3>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(3,ShortcutDimCode[3]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,3); <=====================
  Raised in: Page<Purchase Journal>.Control<ShortcutDimCode4>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(4,ShortcutDimCode[4]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,4); <=====================
  Raised in: Page<Purchase Journal>.Control<ShortcutDimCode5>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(5,ShortcutDimCode[5]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,5); <=====================
  Raised in: Page<Purchase Journal>.Control<ShortcutDimCode6>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(6,ShortcutDimCode[6]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,6); <=====================
  Raised in: Page<Purchase Journal>.Control<ShortcutDimCode7>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(7,ShortcutDimCode[7]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,7); <=====================
  Raised in: Page<Purchase Journal>.Control<ShortcutDimCode8>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(8,ShortcutDimCode[8]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,8); <=====================
Page<Vendor Card>.PROCEDURE<OnBeforeCreateVendorFromTemplate>
  Raised in: Page<Vendor Card>.PROCEDURE<CreateVendorFromTemplate>
    Code lines:
    OnBeforeCreateVendorFromTemplate(NewMode); <=====================
    
    IF NewMode THEN BEGIN
      IF MiniVendorTemplate.NewVendorFromTemplate(Vendor) THEN BEGIN
        IF VATRegNoSrvConfig.VATRegNoSrvIsEnabled THEN
          IF Vendor."Validate EU Vat Reg. No." THEN BEGIN
            EUVATRegistrationNoCheck.SetRecordRef(Vendor);
            COMMIT;
            EUVATRegistrationNoCheck.RUNMODAL;
            EUVATRegistrationNoCheck.GetRecordRef(VendorRecRef);
    ...
Page<Recurring General Journal>.PROCEDURE<OnAfterValidateShortcutDimCode>
  Raised in: Page<Recurring General Journal>.Control<ShortcutDimCode3>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(3,ShortcutDimCode[3]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,3); <=====================
  Raised in: Page<Recurring General Journal>.Control<ShortcutDimCode4>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(4,ShortcutDimCode[4]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,4); <=====================
  Raised in: Page<Recurring General Journal>.Control<ShortcutDimCode5>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(5,ShortcutDimCode[5]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,5); <=====================
  Raised in: Page<Recurring General Journal>.Control<ShortcutDimCode6>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(6,ShortcutDimCode[6]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,6); <=====================
  Raised in: Page<Recurring General Journal>.Control<ShortcutDimCode7>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(7,ShortcutDimCode[7]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,7); <=====================
  Raised in: Page<Recurring General Journal>.Control<ShortcutDimCode8>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(8,ShortcutDimCode[8]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,8); <=====================
Page<Check Credit Limit>.PROCEDURE<OnAfterCalcCreditLimitLCY>
  Raised in: Page<Check Credit Limit>.PROCEDURE<CalcCreditLimitLCY>
    Code lines:
    ...
    
    CustCreditAmountLCY :=
      "Balance (LCY)" + "Shipped Not Invoiced (LCY)" + "Serv Shipped Not Invoiced(LCY)" - RcdNotInvdRetOrdersLCY +
      OrderAmountTotalLCY - GetInvoicedPrepmtAmountLCY;
    
    OnAfterCalcCreditLimitLCY(Rec,CustCreditAmountLCY); <=====================
Page<Reconciliation>.PROCEDURE<OnBeforeGLAccNetChangeInsert>
  Raised in: Page<Reconciliation>.PROCEDURE<InsertGLAccNetChange>
    Code lines:
    GLAcc.CALCFIELDS("Balance at Date");
    INIT;
    "No." := GLAcc."No.";
    Name := GLAcc.Name;
    "Balance after Posting" := GLAcc."Balance at Date";
    OnBeforeGLAccNetChangeInsert(Rec); <=====================
    INSERT;
Page<G/L Acc. Balance/Budget Lines>.PROCEDURE<OnAfterCalcFormFields>
  Raised in: Page<G/L Acc. Balance/Budget Lines>.PROCEDURE<CalcFormFields>
    Code lines:
    ...
    IF GLAcc."Budgeted Amount" = 0 THEN
      BudgetPct := 0
    ELSE
      BudgetPct := ROUND(GLAcc."Net Change" / GLAcc."Budgeted Amount" * 100);
    
    OnAfterCalcFormFields(GLAcc,BudgetPct); <=====================
Page<Item Availability Lines>.PROCEDURE<OnAfterSet>
  Raised in: Page<Item Availability Lines>.PROCEDURE<Set>
    Code lines:
    Item.COPY(NewItem);
    PeriodType := NewPeriodType;
    AmountType := NewAmountType;
    CurrPage.UPDATE(FALSE);
    
    OnAfterSet(Item,PeriodType,AmountType); <=====================
Page<Item Availability Lines>.PROCEDURE<OnAfterSetItemFilter>
  Raised in: Page<Item Availability Lines>.PROCEDURE<SetItemFilter>
    Code lines:
    IF AmountType = AmountType::"Net Change" THEN
      Item.SETRANGE("Date Filter","Period Start","Period End")
    ELSE
      Item.SETRANGE("Date Filter",0D,"Period End");
    OnAfterSetItemFilter(Item,"Period Start","Period End"); <=====================
Page<Res. Availability Lines>.PROCEDURE<OnAfterCalcLine>
  Raised in: Page<Res. Availability Lines>.PROCEDURE<CalcLine>
    Code lines:
    Resource.CALCFIELDS(Capacity,"Qty. on Order (Job)","Qty. Quoted (Job)","Qty. on Service Order","Qty. on Assembly Order");
    CapacityAfterOrders := Resource.Capacity - Resource."Qty. on Order (Job)";
    CapacityAfterQuotes := CapacityAfterOrders - Resource."Qty. Quoted (Job)";
    NetAvailability := CapacityAfterQuotes - Resource."Qty. on Service Order" - Resource."Qty. on Assembly Order";
    
    OnAfterCalcLine(Resource,CapacityAfterOrders,CapacityAfterQuotes,NetAvailability); <=====================
Page<Res. Gr. Availability Lines>.PROCEDURE<OnAfterCalcLine>
  Raised in: Page<Res. Gr. Availability Lines>.PROCEDURE<CalcLine>
    Code lines:
    ResGr.CALCFIELDS(Capacity,"Qty. on Order (Job)","Qty. Quoted (Job)","Qty. on Service Order");
    CapacityAfterOrders := ResGr.Capacity - ResGr."Qty. on Order (Job)" - ResGr."Qty. on Service Order";
    CapacityAfterQuotes := CapacityAfterOrders - ResGr."Qty. Quoted (Job)";
    
    OnAfterCalcLine(ResGr,CapacityAfterOrders,CapacityAfterQuotes); <=====================
Page<General Journal>.PROCEDURE<OnAfterValidateShortcutDimCode>
  Raised in: Page<General Journal>.Control<ShortcutDimCode3>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(3,ShortcutDimCode[3]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,3); <=====================
  Raised in: Page<General Journal>.Control<ShortcutDimCode4>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(4,ShortcutDimCode[4]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,4); <=====================
  Raised in: Page<General Journal>.Control<ShortcutDimCode5>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(5,ShortcutDimCode[5]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,5); <=====================
  Raised in: Page<General Journal>.Control<ShortcutDimCode6>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(6,ShortcutDimCode[6]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,6); <=====================
  Raised in: Page<General Journal>.Control<ShortcutDimCode7>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(7,ShortcutDimCode[7]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,7); <=====================
  Raised in: Page<General Journal>.Control<ShortcutDimCode8>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(8,ShortcutDimCode[8]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,8); <=====================
Page<Sales Order Statistics>.PROCEDURE<OnOpenPageOnBeforeSetEditable>
  Raised in: Page<Sales Order Statistics>.<OnOpenPage>
    Code lines:
    SalesSetup.GET;
    AllowInvDisc := NOT (SalesSetup."Calc. Inv. Discount" AND CustInvDiscRecExists("Invoice Disc. Code"));
    AllowVATDifference :=
      SalesSetup."Allow VAT Difference" AND
      NOT ("Document Type" IN ["Document Type"::Quote,"Document Type"::"Blanket Order"]);
    OnOpenPageOnBeforeSetEditable(AllowInvDisc,AllowVATDifference); <=====================
    VATLinesFormIsEditable := AllowVATDifference OR AllowInvDisc;
    CurrPage.EDITABLE := VATLinesFormIsEditable;
Page<Purchase Order Statistics>.PROCEDURE<OnOpenPageOnBeforeSetEditable>
  Raised in: Page<Purchase Order Statistics>.<OnOpenPage>
    Code lines:
    ...
    AllowInvDisc :=
      NOT (PurchSetup."Calc. Inv. Discount" AND VendInvDiscRecExists("Invoice Disc. Code"));
    AllowVATDifference :=
      PurchSetup."Allow VAT Difference" AND
      NOT ("Document Type" IN ["Document Type"::Quote,"Document Type"::"Blanket Order"]);
    OnOpenPageOnBeforeSetEditable(AllowInvDisc,AllowVATDifference); <=====================
    VATLinesFormIsEditable := AllowVATDifference OR AllowInvDisc;
    CurrPage.EDITABLE := VATLinesFormIsEditable;
Page<G/L Balance by Dimension>.PROCEDURE<OnBeforeGLAccFilter>
  Raised in: Page<G/L Balance by Dimension>.<OnOpenPage>
    Code lines:
    OnBeforeGLAccFilter(GLAcc,GLAccFilter,LineDimOption,ColumnDimOption); <=====================
    GlobalDim1Filter := GLAcc.GETFILTER("Global Dimension 1 Filter");
    GlobalDim2Filter := GLAcc.GETFILTER("Global Dimension 2 Filter");
    
    GLSetup.GET;
    Dim1FilterEnable :=
      (GLSetup."Global Dimension 1 Code" <> '') AND
      (GLAcc.GETFILTER("Global Dimension 1 Filter") = '');
    Dim2FilterEnable :=
      (GLSetup."Global Dimension 2 Code" <> '') AND
    ...
Page<Sales Quote>.PROCEDURE<OnBeforeStatisticsAction>
  Raised in: Page<Sales Quote>.Action<Statistics>.<OnAction>
    Code lines:
    OnBeforeStatisticsAction(Rec,Handled); <=====================
    IF NOT Handled THEN BEGIN
      CalcInvDiscForHeader;
      COMMIT;
      PAGE.RUNMODAL(PAGE::"Sales Statistics",Rec);
      SalesCalcDiscByType.ResetRecalculateInvoiceDisc(Rec);
    END
Page<G/L Account Balance Lines>.PROCEDURE<OnBeforeBalanceDrillDown>
  Raised in: Page<G/L Account Balance Lines>.PROCEDURE<BalanceDrillDown>
    Code lines:
    IsHandled := FALSE;
    OnBeforeBalanceDrillDown(GLAcc,GLPeriodLength,AmountType,ClosingEntryFilter,DebitCreditTotals,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SetDateFilter;
    GLEntry.RESET;
    GLEntry.SETCURRENTKEY("G/L Account No.","Posting Date");
    GLEntry.SETRANGE("G/L Account No.",GLAcc."No.");
    IF GLAcc.Totaling <> '' THEN
    ...
Page<Sales Order>.PROCEDURE<OnBeforeStatisticsAction>
  Raised in: Page<Sales Order>.Action<Statistics>.<OnAction>
    Code lines:
    OnBeforeStatisticsAction(Rec,Handled); <=====================
    IF NOT Handled THEN BEGIN
      OpenSalesOrderStatistics;
      SalesCalcDiscountByType.ResetRecalculateInvoiceDisc(Rec);
    END
Page<Sales Order>.PROCEDURE<OnPostOnAfterSetDocumentIsPosted>
  Raised in: Page<Sales Order>.PROCEDURE<Post>
    Code lines:
    ...
    
    SendToPosting(PostingCodeunitID);
    
    IsScheduledPosting := "Job Queue Status" = "Job Queue Status"::"Scheduled for Posting";
    DocumentIsPosted := (NOT SalesHeader.GET("Document Type","No.")) OR IsScheduledPosting;
    OnPostOnAfterSetDocumentIsPosted(SalesHeader,IsScheduledPosting,DocumentIsPosted); <=====================
    
    IF IsScheduledPosting THEN
      CurrPage.CLOSE;
    CurrPage.UPDATE(FALSE);
    ...
Page<Sales Invoice>.PROCEDURE<OnBeforeStatisticsAction>
  Raised in: Page<Sales Invoice>.Action<Statistics>.<OnAction>
    Code lines:
    OnBeforeStatisticsAction(Rec,Handled); <=====================
    IF NOT Handled THEN BEGIN
      CalcInvDiscForHeader;
      COMMIT;
      PAGE.RUNMODAL(PAGE::"Sales Statistics",Rec);
      SalesCalcDiscountByType.ResetRecalculateInvoiceDisc(Rec);
    END
Page<Sales Invoice>.PROCEDURE<OnPostOnAfterSetDocumentIsPosted>
  Raised in: Page<Sales Invoice>.PROCEDURE<Post>
    Code lines:
    ...
    
    SendToPosting(PostingCodeunitID);
    
    IsScheduledPosting := "Job Queue Status" = "Job Queue Status"::"Scheduled for Posting";
    DocumentIsPosted := (NOT SalesHeader.GET("Document Type","No.")) OR IsScheduledPosting;
    OnPostOnAfterSetDocumentIsPosted(SalesHeader,IsScheduledPosting,DocumentIsPosted); <=====================
    
    IF IsScheduledPosting THEN
      CurrPage.CLOSE;
    CurrPage.UPDATE(FALSE);
    ...
Page<Reminder Lines>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Reminder Lines>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    
    IF TransferExtendedText.ReminderCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      TransferExtendedText.InsertReminderExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      CurrPage.UPDATE;
Page<Sales Credit Memo>.PROCEDURE<OnBeforeStatisticsAction>
  Raised in: Page<Sales Credit Memo>.Action<Statistics>.<OnAction>
    Code lines:
    OnBeforeStatisticsAction(Rec,Handled); <=====================
    IF NOT Handled THEN BEGIN
      CalcInvDiscForHeader;
      COMMIT;
      PAGE.RUNMODAL(PAGE::"Sales Statistics",Rec);
      SalesCalcDiscByType.ResetRecalculateInvoiceDisc(Rec);
    END
Page<Sales Credit Memo>.PROCEDURE<OnPostOnAfterSetDocumentIsPosted>
  Raised in: Page<Sales Credit Memo>.PROCEDURE<Post>
    Code lines:
    ...
    
    SendToPosting(PostingCodeunitID);
    
    IsScheduledPosting := "Job Queue Status" = "Job Queue Status"::"Scheduled for Posting";
    DocumentIsPosted := (NOT SalesHeader.GET("Document Type","No.")) OR IsScheduledPosting;
    OnPostOnAfterSetDocumentIsPosted(SalesHeader,IsScheduledPosting,DocumentIsPosted); <=====================
    
    IF IsScheduledPosting THEN
      CurrPage.CLOSE;
    CurrPage.UPDATE(FALSE);
    ...
Page<Finance Charge Memo Lines>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Finance Charge Memo Lines>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    
    IF TransferExtendedText.FinChrgMemoCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      TransferExtendedText.InsertFinChrgMemoExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      CurrPage.UPDATE;
Page<Sales Order Subform>.PROCEDURE<OnAfterQuantityOnAfterValidate>
  Raised in: Page<Sales Order Subform>.PROCEDURE<QuantityOnAfterValidate>
    Code lines:
    ...
            CurrPage.SAVERECORD;
            AutoReserve;
          END;
      END;
    
    OnAfterQuantityOnAfterValidate(Rec,xRec); <=====================
Page<Sales Order Subform>.PROCEDURE<OnAfterValidateShortcutDimCode>
  Raised in: Page<Sales Order Subform>.PROCEDURE<ValidateShortcutDimension>
    Code lines:
    ValidateShortcutDimCode(DimIndex,ShortcutDimCode[DimIndex]);
    AssembleToOrderLink.UpdateAsmDimFromSalesLine(Rec);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,DimIndex); <=====================
Page<Sales Order Subform>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Sales Order Subform>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    IF TransferExtendedText.SalesCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      COMMIT;
      TransferExtendedText.InsertSalesExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      UpdateForm(TRUE);
Page<Sales Order Subform>.PROCEDURE<OnBeforeSetDefaultType>
  Raised in: Page<Sales Order Subform>.PROCEDURE<SetDefaultType>
    Code lines:
    IsHandled := FALSE;
    OnBeforeSetDefaultType(Rec,xRec,IsHandled); <=====================
    IF NOT IsHandled THEN // Set default type Item
      IF ApplicationAreaMgmtFacade.IsFoundationEnabled THEN
        IF xRec."Document No." = '' THEN
          Type := Type::Item;
Page<Sales Order Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
  Raised in: Page<Sales Order Subform>.<Control>.<OnLookup>
    Code lines:
    CrossReferenceNoLookUp;
    NoOnAfterValidate;
    OnCrossReferenceNoOnLookup(Rec); <=====================
Page<Sales Invoice Subform>.PROCEDURE<OnAfterValidateShortcutDimCode>
  Raised in: Page<Sales Invoice Subform>.Control<ShortcutDimCode3>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(3,ShortcutDimCode[3]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,3); <=====================
  Raised in: Page<Sales Invoice Subform>.Control<ShortcutDimCode4>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(4,ShortcutDimCode[4]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,4); <=====================
  Raised in: Page<Sales Invoice Subform>.Control<ShortcutDimCode5>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(5,ShortcutDimCode[5]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,5); <=====================
  Raised in: Page<Sales Invoice Subform>.Control<ShortcutDimCode6>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(6,ShortcutDimCode[6]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,6); <=====================
  Raised in: Page<Sales Invoice Subform>.Control<ShortcutDimCode7>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(7,ShortcutDimCode[7]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,7); <=====================
  Raised in: Page<Sales Invoice Subform>.Control<ShortcutDimCode8>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(8,ShortcutDimCode[8]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,8); <=====================
Page<Sales Invoice Subform>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Sales Invoice Subform>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    IF TransferExtendedText.SalesCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      COMMIT;
      TransferExtendedText.InsertSalesExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      UpdatePage(TRUE);
Page<Sales Invoice Subform>.PROCEDURE<OnBeforeSetDefaultType>
  Raised in: Page<Sales Invoice Subform>.PROCEDURE<SetDefaultType>
    Code lines:
    IsHandled := FALSE;
    OnBeforeSetDefaultType(Rec,xRec,IsHandled); <=====================
    IF NOT IsHandled THEN // Set default type Item
      IF ApplicationAreaMgmtFacade.IsFoundationEnabled THEN
        IF xRec."Document No." = '' THEN
          Type := Type::Item;
Page<Sales Invoice Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
  Raised in: Page<Sales Invoice Subform>.<Control>.<OnLookup>
    Code lines:
    CrossReferenceNoLookUp;
    NoOnAfterValidate;
    OnCrossReferenceNoOnLookup(Rec); <=====================
Page<VAT Statement Preview Line>.PROCEDURE<OnBeforeOpenPageVATEntryTotaling>
  Raised in: Page<VAT Statement Preview Line>.<Control>.<OnDrillDown>
    Code lines:
    ...
            Selection::Closed:
              VATEntry.SETRANGE(Closed,TRUE);
            Selection::"Open and Closed":
              VATEntry.SETRANGE(Closed);
          END;
          OnBeforeOpenPageVATEntryTotaling(VATEntry,Rec); <=====================
          PAGE.RUN(PAGE::"VAT Entries",VATEntry);
        END;
      Type::"Row Totaling",
      Type::Description:
    ...
Page<Purchase Quote>.PROCEDURE<OnAfterCalculateCurrentShippingAndPayToOption>
  Raised in: Page<Purchase Quote>.PROCEDURE<CalculateCurrentShippingAndPayToOption>
    Code lines:
    ...
        PayToOptions := PayToOptions::"Custom Address";
      "Pay-to Vendor No." <> "Buy-from Vendor No.":
        PayToOptions := PayToOptions::"Another Vendor";
    END;
    
    OnAfterCalculateCurrentShippingAndPayToOption(ShipToOptions,PayToOptions,Rec); <=====================
Page<Acc. Schedule Overview>.PROCEDURE<OnAfterSetDimFilters>
  Raised in: Page<Acc. Schedule Overview>.PROCEDURE<SetDimFilters>
    Code lines:
    ...
          DimensionManagement.ResolveDimValueFilter(DimValueFilter,AnalysisView."Dimension 4 Code");
          SETFILTER("Dimension 4 Filter",DimValueFilter);
        END;
    END;
    
    OnAfterSetDimFilters(Rec,DimNo,DimValueFilter,CostCenterFilter,CostObjectFilter); <=====================
    CurrPage.UPDATE;
Page<Acc. Schedule Overview>.PROCEDURE<OnAfterValidateCostCenterFilter>
  Raised in: Page<Acc. Schedule Overview>.Control<CostCenterFilter>.<OnValidate>
    Code lines:
    IF CostCenterFilter = '' THEN
      SETRANGE("Cost Center Filter")
    ELSE
      SETFILTER("Cost Center Filter",CostCenterFilter);
    
    OnAfterValidateCostCenterFilter(Rec,CostCenterFilter,Dim1Filter); <=====================
    CurrPage.UPDATE;
Page<Acc. Schedule Overview>.PROCEDURE<OnAfterValidateCostObjectFilter>
  Raised in: Page<Acc. Schedule Overview>.Control<CostObjectFilter>.<OnValidate>
    Code lines:
    IF CostObjectFilter = '' THEN
      SETRANGE("Cost Object Filter")
    ELSE
      SETFILTER("Cost Object Filter",CostObjectFilter);
    
    OnAfterValidateCostObjectFilter(Rec,CostObjectFilter,Dim2Filter); <=====================
    CurrPage.UPDATE;
Page<Reservation Entries>.PROCEDURE<OnAfterLookupReserved>
  Raised in: Page<Reservation Entries>.PROCEDURE<LookupReserved>
    Code lines:
    ...
            AssemblyLine.SETRANGE("Line No.","Source Ref. No.");
            PAGE.RUNMODAL(0,AssemblyLine);
          END;
      END;
    
    OnAfterLookupReserved(ReservEntry); <=====================
Page<Reservation>.PROCEDURE<OnAfterRelatesToSummEntry>
  Raised in: Page<Reservation>.PROCEDURE<RelatesToSummEntry>
    Code lines:
    ...
        EXIT((FilterReservEntry."Source Type" = DATABASE::"Assembly Line") AND
          (FilterReservEntry."Source Subtype" = FromReservSummEntry."Entry No." - 151));
    END;
    
    IsHandled := FALSE;
    OnAfterRelatesToSummEntry(FromReservSummEntry,FilterReservEntry,IsHandled); <=====================
    EXIT(IsHandled);
Page<Reservation>.PROCEDURE<OnAfterSetAssemblyHeader>
  Raised in: Page<Reservation>.PROCEDURE<SetAssemblyHeader>
    Code lines:
    ...
    ReservEntry."Shipment Date" := AssemblyHeader."Due Date";
    
    CaptionText := AssemblyHeaderReserve.Caption(AssemblyHeader);
    UpdateReservFrom;
    
    OnAfterSetAssemblyHeader(Rec,ReservEntry); <=====================
Page<Reservation>.PROCEDURE<OnAfterSetAssemblyLine>
  Raised in: Page<Reservation>.PROCEDURE<SetAssemblyLine>
    Code lines:
    ...
    ReservEntry."Shipment Date" := AssemblyLine."Due Date";
    
    CaptionText := AssemblyLineReserve.Caption(AssemblyLine);
    UpdateReservFrom;
    
    OnAfterSetAssemblyLine(Rec,ReservEntry); <=====================
Page<Reservation>.PROCEDURE<OnAfterSetItemJnlLine>
  Raised in: Page<Reservation>.PROCEDURE<SetItemJnlLine>
    Code lines:
    ...
    ReservEntry."Shipment Date" := ItemJnlLine."Posting Date";
    
    CaptionText := ReserveItemJnlLine.Caption(ItemJnlLine);
    UpdateReservFrom;
    
    OnAfterSetItemJnlLine(Rec,ReservEntry); <=====================
Page<Reservation>.PROCEDURE<OnAfterSetJobPlanningLine>
  Raised in: Page<Reservation>.PROCEDURE<SetJobPlanningLine>
    Code lines:
    ...
    ReservEntry."Shipment Date" := JobPlanningLine."Planning Date";
    
    CaptionText := JobPlanningLineReserve.Caption(JobPlanningLine);
    UpdateReservFrom;
    
    OnAfterSetJobPlanningLine(Rec,ReservEntry); <=====================
Page<Reservation>.PROCEDURE<OnAfterSetPlanningComponent>
  Raised in: Page<Reservation>.PROCEDURE<SetPlanningComponent>
    Code lines:
    ...
    ReservEntry."Shipment Date" := PlanningComponent."Due Date";
    
    CaptionText := ReservePlanningComponent.Caption(PlanningComponent);
    UpdateReservFrom;
    
    OnAfterSetPlanningComponent(Rec,ReservEntry); <=====================
Page<Reservation>.PROCEDURE<OnAfterSetProdOrderComponent>
  Raised in: Page<Reservation>.PROCEDURE<SetProdOrderComponent>
    Code lines:
    ...
    ReservEntry."Shipment Date" := ProdOrderComp."Due Date";
    
    CaptionText := ReserveProdOrderComp.Caption(ProdOrderComp);
    UpdateReservFrom;
    
    OnAfterSetProdOrderComponent(Rec,ReservEntry); <=====================
Page<Reservation>.PROCEDURE<OnAfterSetProdOrderLine>
  Raised in: Page<Reservation>.PROCEDURE<SetProdOrderLine>
    Code lines:
    ...
    ReservEntry."Shipment Date" := ProdOrderLine."Due Date";
    
    CaptionText := ReserveProdOrderLine.Caption(ProdOrderLine);
    UpdateReservFrom;
    
    OnAfterSetProdOrderLine(Rec,ReservEntry); <=====================
Page<Reservation>.PROCEDURE<OnAfterSetPurchLine>
  Raised in: Page<Reservation>.PROCEDURE<SetPurchLine>
    Code lines:
    ...
    ReservEntry."Shipment Date" := PurchLine."Expected Receipt Date";
    
    CaptionText := ReservePurchLine.Caption(PurchLine);
    UpdateReservFrom;
    
    OnAfterSetPurchLine(Rec,ReservEntry); <=====================
Page<Reservation>.PROCEDURE<OnAfterSetReqLine>
  Raised in: Page<Reservation>.PROCEDURE<SetReqLine>
    Code lines:
    ...
    ReservEntry."Shipment Date" := ReqLine."Due Date";
    
    CaptionText := ReserveReqLine.Caption(ReqLine);
    UpdateReservFrom;
    
    OnAfterSetReqLine(Rec,ReservEntry); <=====================
Page<Reservation>.PROCEDURE<OnAfterSetSalesLine>
  Raised in: Page<Reservation>.PROCEDURE<SetSalesLine>
    Code lines:
    ...
    ReservEntry."Shipment Date" := SalesLine."Shipment Date";
    
    CaptionText := ReserveSalesLine.Caption(SalesLine);
    UpdateReservFrom;
    
    OnAfterSetSalesLine(Rec,ReservEntry); <=====================
Page<Reservation>.PROCEDURE<OnAfterSetServiceLine>
  Raised in: Page<Reservation>.PROCEDURE<SetServiceLine>
    Code lines:
    ...
    ReservEntry."Shipment Date" := ServiceLine."Needed by Date";
    
    CaptionText := ReserveServiceLine.Caption(ServiceLine);
    UpdateReservFrom;
    
    OnAfterSetServiceLine(Rec,ReservEntry); <=====================
Page<Reservation>.PROCEDURE<OnAfterSetTransLine>
  Raised in: Page<Reservation>.PROCEDURE<SetTransLine>
    Code lines:
    ...
    ReservEntry."Qty. per Unit of Measure" := CurrentTransLine."Qty. per Unit of Measure";
    
    CaptionText := ReserveTransLine.Caption(TransLine);
    UpdateReservFrom;
    
    OnAfterSetTransLine(Rec,ReservEntry); <=====================
Page<Reservation>.PROCEDURE<OnAfterUpdateReservFrom>
  Raised in: Page<Reservation>.PROCEDURE<UpdateReservFrom>
    Code lines:
    ...
      Rec := EntrySummary;
    END;
    
    UpdateNonSpecific; // Late Binding
    
    OnAfterUpdateReservFrom; <=====================
    
    IF FormIsOpen THEN
      CurrPage.UPDATE;
Page<Reservation>.PROCEDURE<OnFilterReservEntryOnAfterFilterSource>
  Raised in: Page<Reservation>.PROCEDURE<FilterReservEntry>
    Code lines:
    ...
          FilterReservEntry.SETRANGE("Source Type",DATABASE::"Assembly Line");
          FilterReservEntry.SETRANGE("Source Subtype",FromReservSummEntry."Entry No." - 151);
        END;
    END;
    
    OnFilterReservEntryOnAfterFilterSource(FilterReservEntry,FromReservSummEntry,ReservEntry); <=====================
    
    FilterReservEntry.SETRANGE(
      "Reservation Status",FilterReservEntry."Reservation Status"::Reservation);
    FilterReservEntry.SETRANGE("Location Code",ReservEntry."Location Code");
    ...
Page<Reservation>.PROCEDURE<OnGetSerialLotNoOnAfterSetTrackingFields>
  Raised in: Page<Reservation>.PROCEDURE<GetSerialLotNo>
    Code lines:
    ...
      UNTIL TempTrackingSpecification.NEXT = 0;
    
      IF PAGE.RUNMODAL(PAGE::"Item Tracking List",TempReservEntry) = ACTION::LookupOK THEN BEGIN
        ReservEntry."Serial No." := TempReservEntry."Serial No.";
        ReservEntry."Lot No." := TempReservEntry."Lot No.";
        OnGetSerialLotNoOnAfterSetTrackingFields(ReservEntry,TempReservEntry); <=====================
        CaptionText += STRSUBSTNO(Text007,ReservEntry."Serial No.",ReservEntry."Lot No.");
        SignFactor := CreateReservEntry.SignFactor(TempReservEntry);
        ItemTrackingQtyToReserveBase := TempReservEntry."Quantity (Base)" * SignFactor;
        ItemTrackingQtyToReserve :=
    ...
Page<Available - Sales Lines>.PROCEDURE<OnAfterSetFilters>
  Raised in: Page<Available - Sales Lines>.PROCEDURE<SetFilters>
    Code lines:
    ...
          SETFILTER("Quantity (Base)",'<0')
        ELSE
          SETFILTER("Quantity (Base)",'>0');
    END;
    
    OnAfterSetFilters(Rec,ReservEntry); <=====================
Page<Available - Sales Lines>.PROCEDURE<OnAfterUpdateReservFrom>
  Raised in: Page<Available - Sales Lines>.PROCEDURE<UpdateReservFrom>
    Code lines:
    ...
          JobPlanningLine.FIND;
          SetJobPlanningLine(JobPlanningLine,ReservEntry);
        END;
    END;
    
    OnAfterUpdateReservFrom; <=====================
Page<Available - Sales Lines>.PROCEDURE<OnAfterUpdateReservMgt>
  Raised in: Page<Available - Sales Lines>.PROCEDURE<UpdateReservMgt>
    Code lines:
    ...
        ReservMgt.SetServLine(ServiceInvLine);
      DATABASE::"Job Planning Line":
        ReservMgt.SetJobPlanningLine(JobPlanningLine);
    END;
    
    OnAfterUpdateReservMgt; <=====================
Page<Purchase Order>.PROCEDURE<OnAfterCalculateCurrentShippingAndPayToOption>
  Raised in: Page<Purchase Order>.PROCEDURE<CalculateCurrentShippingAndPayToOption>
    Code lines:
    ...
        PayToOptions := PayToOptions::"Custom Address";
      "Pay-to Vendor No." <> "Buy-from Vendor No.":
        PayToOptions := PayToOptions::"Another Vendor";
    END;
    
    OnAfterCalculateCurrentShippingAndPayToOption(ShipToOptions,PayToOptions,Rec); <=====================
Page<Available - Requisition Lines>.PROCEDURE<OnAfterSetFilters>
  Raised in: Page<Available - Requisition Lines>.PROCEDURE<SetFilters>
    Code lines:
    ...
    ELSE
      SETFILTER("Quantity (Base)",'<0');
    
    SETRANGE("Sales Order No.",'');
    
    OnAfterSetFilters(Rec,ReservEntry); <=====================
Page<Available - Requisition Lines>.PROCEDURE<OnAfterUpdateReservFrom>
  Raised in: Page<Available - Requisition Lines>.PROCEDURE<UpdateReservFrom>
    Code lines:
    ...
          JobPlanningLine.FIND;
          SetJobPlanningLine(JobPlanningLine,ReservEntry);
        END;
    END;
    
    OnAfterUpdateReservFrom; <=====================
Page<Available - Requisition Lines>.PROCEDURE<OnAfterUpdateReservMgt>
  Raised in: Page<Available - Requisition Lines>.PROCEDURE<UpdateReservMgt>
    Code lines:
    ...
        ReservMgt.SetServLine(ServLine);
      DATABASE::"Job Planning Line":
        ReservMgt.SetJobPlanningLine(JobPlanningLine);
    END;
    
    OnAfterUpdateReservMgt; <=====================
Page<Available - Purchase Lines>.PROCEDURE<OnAfterOpenPage>
  Raised in: Page<Available - Purchase Lines>.<OnOpenPage>
    Code lines:
    ...
          SETFILTER("Quantity (Base)",'<0')
        ELSE
          SETFILTER("Quantity (Base)",'>0');
    END;
    
    OnAfterOpenPage(Rec,ReservEntry); <=====================
Page<Available - Purchase Lines>.PROCEDURE<OnAfterUpdateReservFrom>
  Raised in: Page<Available - Purchase Lines>.PROCEDURE<UpdateReservFrom>
    Code lines:
    ...
          JobPlanningLine.FIND;
          SetJobPlanningLine(JobPlanningLine,ReservEntry);
        END;
    END;
    
    OnAfterUpdateReservFrom; <=====================
Page<Available - Purchase Lines>.PROCEDURE<OnAfterUpdateReservMgt>
  Raised in: Page<Available - Purchase Lines>.PROCEDURE<UpdateReservMgt>
    Code lines:
    ...
        ReservMgt.SetAssemblyLine(AssemblyLine);
      DATABASE::"Assembly Header":
        ReservMgt.SetAssemblyHeader(AssemblyHeader);
    END;
    
    OnAfterUpdateReservMgt; <=====================
Page<Available - Purchase Lines>.PROCEDURE<OnBeforeFilterReservEntry>
  Raised in: Page<Available - Purchase Lines>.PROCEDURE<ReservedThisLine>
    Code lines:
    ReservEntry2.RESET;
    IF ReservEntry."Source Type" = DATABASE::"Transfer Line" THEN
      ReservEntry."Source Subtype" := Direction;
    OnBeforeFilterReservEntry(ReservEntry,Direction); <=====================
    ReservePurchLine.FilterReservFor(ReservEntry2,Rec);
    ReservEntry2.SETRANGE("Reservation Status",ReservEntry2."Reservation Status"::Reservation);
    EXIT(ReservMgt.MarkReservConnection(ReservEntry2,ReservEntry));
Page<Available - Item Ledg. Entries>.PROCEDURE<OnAfterSetFilters>
  Raised in: Page<Available - Item Ledg. Entries>.PROCEDURE<SetFilters>
    Code lines:
    ...
    END ELSE BEGIN
      SETRANGE(Positive,FALSE);
      SETFILTER("Remaining Quantity",'<0');
    END;
    
    OnAfterSetFilters(Rec,ReservEntry); <=====================
Page<Available - Item Ledg. Entries>.PROCEDURE<OnAfterUpdateReservFrom>
  Raised in: Page<Available - Item Ledg. Entries>.PROCEDURE<UpdateReservFrom>
    Code lines:
    ...
          AssemblyHeader.FIND;
          SetAssemblyHeader(AssemblyHeader,ReservEntry);
        END;
    END;
    
    OnAfterUpdateReservFrom; <=====================
Page<Available - Item Ledg. Entries>.PROCEDURE<OnAfterUpdateReservMgt>
  Raised in: Page<Available - Item Ledg. Entries>.PROCEDURE<UpdateReservMgt>
    Code lines:
    ...
      DATABASE::"Assembly Header":
        ReservMgt.SetAssemblyHeader(AssemblyHeader);
    END;
    ReservMgt.SetSerialLotNo(ReservEntry."Serial No.",ReservEntry."Lot No.");
    
    OnAfterUpdateReservMgt; <=====================
Page<Available - Item Ledg. Entries>.PROCEDURE<OnBeforeCreateReservation>
  Raised in: Page<Available - Item Ledg. Entries>.Action<Reserve>.<OnAction>
    Code lines:
    ...
    IF MaxQtyDefined AND (ABS(MaxQtyToReserve) < ABS(NewQtyReservedThisLine)) THEN
      NewQtyReservedThisLine := MaxQtyToReserve;
    
    ReservMgt.CopySign(NewQtyReservedThisLine,QtyToReserve);
    IF NewQtyReservedThisLine <> 0 THEN BEGIN
      OnBeforeCreateReservation(ReservEntry,"Lot No.","Serial No."); <=====================
      IF ABS(NewQtyReservedThisLine) > ABS(QtyToReserve) THEN BEGIN
        CreateReservation(QtyToReserve);
        MaxQtyToReserve := MaxQtyToReserve - QtyToReserve;
      END ELSE BEGIN
    ...
Page<Contact Card>.PROCEDURE<OnBeforePrintContactCoverSheet>
  Raised in: Page<Contact Card>.Action<ContactCoverSheet>.<OnAction>
    Code lines:
    Contact := Rec;
    Contact.SETRECFILTER;
    ContactCoverSheetReportID := REPORT::"Contact Cover Sheet";
    OnBeforePrintContactCoverSheet(ContactCoverSheetReportID); <=====================
    REPORT.RUN(ContactCoverSheetReportID,TRUE,FALSE,Contact);
Page<Blanket Sales Order>.PROCEDURE<OnBeforeStatisticsAction>
  Raised in: Page<Blanket Sales Order>.Action<Statistics>.<OnAction>
    Code lines:
    OnBeforeStatisticsAction(Rec,Handled); <=====================
    IF NOT Handled THEN BEGIN
      OpenSalesOrderStatistics;
      SalesCalcDiscByType.ResetRecalculateInvoiceDisc(Rec);
    END
Page<Create Interaction>.PROCEDURE<OnAfterCaption>
  Raised in: Page<Create Interaction>.PROCEDURE<Caption>
    Code lines:
    ...
      CaptionStr := COPYSTR(CaptionStr + ' ' + Task."No." + ' ' + Task.Description,1,MAXSTRLEN(CaptionStr));
    
    IF CaptionStr = '' THEN
      CaptionStr := UntitledTxt;
    
    OnAfterCaption(Rec,CaptionStr); <=====================
    EXIT(CaptionStr);
Page<Blanket Sales Order Subform>.PROCEDURE<OnAfterValidateShortcutDimCode>
  Raised in: Page<Blanket Sales Order Subform>.PROCEDURE<ValidateShortcutDimension>
    Code lines:
    ValidateShortcutDimCode(DimIndex,ShortcutDimCode[DimIndex]);
    AssembleToOrderLink.UpdateAsmDimFromSalesLine(Rec);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,DimIndex); <=====================
Page<Blanket Sales Order Subform>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Blanket Sales Order Subform>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    IF TransferExtendedText.SalesCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      COMMIT;
      TransferExtendedText.InsertSalesExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      UpdateForm(TRUE);
Page<Blanket Sales Order Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
  Raised in: Page<Blanket Sales Order Subform>.<Control>.<OnLookup>
    Code lines:
    CrossReferenceNoLookUp;
    InsertExtendedText(FALSE);
    OnCrossReferenceNoOnLookup(Rec); <=====================
Page<Marketing Setup>.PROCEDURE<OnAfterMarketingSetupEmailLoggingCompleted>
  Raised in: Page<Marketing Setup>.PROCEDURE<ValidateEmailLoggingSetup>
    Code lines:
    ...
    
    ProgressWindow.CLOSE;
    CLEAR(ErrorMsg);
    MarketingSetup.MODIFY;
    
    OnAfterMarketingSetupEmailLoggingCompleted; <=====================
    EXIT(TRUE);
Page<Marketing Setup>.PROCEDURE<OnAfterMarketingSetupEmailLoggingUsed>
  Raised in: Page<Marketing Setup>.<Control>.<OnValidate>
    Code lines:
    IF "Autodiscovery E-Mail Address" <> xRec."Autodiscovery E-Mail Address" THEN BEGIN
      OnAfterMarketingSetupEmailLoggingUsed; <=====================
      ExchangeWebServicesClient.InvalidateService
    END;
  Raised in: Page<Marketing Setup>.<Control>.<OnValidate>
    Code lines:
    IF "Exchange Service URL" <> xRec."Exchange Service URL" THEN BEGIN
      OnAfterMarketingSetupEmailLoggingUsed; <=====================
      ExchangeWebServicesClient.InvalidateService
    END;
  Raised in: Page<Marketing Setup>.<Control>.<OnValidate>
    Code lines:
    IF "Exchange Account User Name" <> xRec."Exchange Account User Name" THEN BEGIN
      OnAfterMarketingSetupEmailLoggingUsed; <=====================
      ExchangeWebServicesClient.InvalidateService;
    END;
  Raised in: Page<Marketing Setup>.<Control>.<OnValidate>
    Code lines:
    OnAfterMarketingSetupEmailLoggingUsed; <=====================
    SetExchangeAccountPassword(ExchangeAccountPasswordTemp);
    COMMIT;
    ExchangeWebServicesClient.InvalidateService;
  Raised in: Page<Marketing Setup>.<Control>.<OnValidate>
    Code lines:
    OnAfterMarketingSetupEmailLoggingUsed; <=====================
Page<Purchase Invoice>.PROCEDURE<OnAfterCalculateCurrentShippingAndPayToOption>
  Raised in: Page<Purchase Invoice>.PROCEDURE<CalculateCurrentShippingAndPayToOption>
    Code lines:
    ...
        PayToOptions := PayToOptions::"Custom Address";
      "Pay-to Vendor No." <> "Buy-from Vendor No.":
        PayToOptions := PayToOptions::"Another Vendor";
    END;
    
    OnAfterCalculateCurrentShippingAndPayToOption(ShipToOptions,PayToOptions,Rec); <=====================
Page<Blanket Purchase Order Subform>.PROCEDURE<OnAfterValidateShortcutDimCode>
  Raised in: Page<Blanket Purchase Order Subform>.<Control>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(3,ShortcutDimCode[3]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,3); <=====================
  Raised in: Page<Blanket Purchase Order Subform>.<Control>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(4,ShortcutDimCode[4]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,4); <=====================
  Raised in: Page<Blanket Purchase Order Subform>.<Control>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(5,ShortcutDimCode[5]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,5); <=====================
  Raised in: Page<Blanket Purchase Order Subform>.<Control>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(6,ShortcutDimCode[6]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,6); <=====================
  Raised in: Page<Blanket Purchase Order Subform>.<Control>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(7,ShortcutDimCode[7]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,7); <=====================
  Raised in: Page<Blanket Purchase Order Subform>.<Control>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(8,ShortcutDimCode[8]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,8); <=====================
Page<Blanket Purchase Order Subform>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Blanket Purchase Order Subform>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    IF TransferExtendedText.PurchCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      TransferExtendedText.InsertPurchExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      UpdateForm(TRUE);
Page<Blanket Purchase Order Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
  Raised in: Page<Blanket Purchase Order Subform>.<Control>.<OnLookup>
    Code lines:
    CrossReferenceNoLookUp;
    InsertExtendedText(FALSE);
    OnCrossReferenceNoOnLookup(Rec); <=====================
Page<Contact Profile Answers>.PROCEDURE<OnAfterUpdateProfileAnswer>
  Raised in: Page<Contact Profile Answers>.PROCEDURE<UpdateProfileAnswer>
    Code lines:
    ...
      ContProfileAnswer.INSERT(TRUE);
    END ELSE
      IF ContProfileAnswer.GET(Cont."No.",CurrentQuestionsChecklistCode,"Line No.") THEN
        ContProfileAnswer.DELETE(TRUE);
    
    OnAfterUpdateProfileAnswer(Rec,xRec,Cont); <=====================
Page<Purchase Order Subform>.PROCEDURE<OnAfterValidateShortcutDimCode>
  Raised in: Page<Purchase Order Subform>.Control<ShortcutDimCode3>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(3,ShortcutDimCode[3]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,3); <=====================
  Raised in: Page<Purchase Order Subform>.Control<ShortcutDimCode4>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(4,ShortcutDimCode[4]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,4); <=====================
  Raised in: Page<Purchase Order Subform>.Control<ShortcutDimCode5>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(5,ShortcutDimCode[5]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,5); <=====================
  Raised in: Page<Purchase Order Subform>.Control<ShortcutDimCode6>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(6,ShortcutDimCode[6]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,6); <=====================
  Raised in: Page<Purchase Order Subform>.Control<ShortcutDimCode7>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(7,ShortcutDimCode[7]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,7); <=====================
  Raised in: Page<Purchase Order Subform>.Control<ShortcutDimCode8>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(8,ShortcutDimCode[8]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,8); <=====================
Page<Purchase Order Subform>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Purchase Order Subform>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    IF TransferExtendedText.PurchCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      TransferExtendedText.InsertPurchExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      UpdateForm(TRUE);
Page<Purchase Order Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
  Raised in: Page<Purchase Order Subform>.<Control>.<OnLookup>
    Code lines:
    CrossReferenceNoLookUp;
    InsertExtendedText(FALSE);
    NoOnAfterValidate;
    OnCrossReferenceNoOnLookup(Rec); <=====================
Page<Prod. Order Line List>.PROCEDURE<OnAfterShowDocument>
  Raised in: Page<Prod. Order Line List>.Action<ShowDocument>.<OnAction>
    Code lines:
    ...
        PAGE.RUN(PAGE::"Firm Planned Prod. Order",ProdOrder);
      Status::Released:
        PAGE.RUN(PAGE::"Released Production Order",ProdOrder);
    END;
    
    OnAfterShowDocument(Rec,ProdOrder); <=====================
Page<Default Dimensions-Multiple>.PROCEDURE<OnBeforeSetCommonDefaultCopyFields>
  Raised in: Page<Default Dimensions-Multiple>.PROCEDURE<SetCommonDefaultDim>
    Code lines:
    ...
                 TempDefaultDim3."Table ID",TempDefaultDim3."No.","Dimension Code")
            THEN BEGIN
              DefaultDim."Dimension Code" := "Dimension Code";
              DefaultDim."Dimension Value Code" := "Dimension Value Code";
              DefaultDim."Value Posting" := "Value Posting";
              OnBeforeSetCommonDefaultCopyFields(DefaultDim,Rec); <=====================
              DefaultDim.MODIFY(TRUE);
            END ELSE BEGIN
              DefaultDim.INIT;
              DefaultDim."Table ID" := TempDefaultDim3."Table ID";
    ...
  Raised in: Page<Default Dimensions-Multiple>.PROCEDURE<SetCommonDefaultDim>
    Code lines:
    ...
                 TempDefaultDim3."Table ID",TempDefaultDim3."No.","Dimension Code")
            THEN BEGIN
              DefaultDim."Dimension Code" := "Dimension Code";
              DefaultDim."Dimension Value Code" := "Dimension Value Code";
              DefaultDim."Value Posting" := "Value Posting";
              OnBeforeSetCommonDefaultCopyFields(DefaultDim,Rec); <=====================
              DefaultDim.MODIFY(TRUE);
            END ELSE BEGIN
              DefaultDim.INIT;
              DefaultDim."Table ID" := TempDefaultDim3."Table ID";
    ...
Page<Purch. Invoice Subform>.PROCEDURE<OnAfterValidateShortcutDimCode>
  Raised in: Page<Purch. Invoice Subform>.Control<ShortcutDimCode3>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(3,ShortcutDimCode[3]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,3); <=====================
  Raised in: Page<Purch. Invoice Subform>.Control<ShortcutDimCode4>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(4,ShortcutDimCode[4]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,4); <=====================
  Raised in: Page<Purch. Invoice Subform>.Control<ShortcutDimCode5>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(5,ShortcutDimCode[5]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,5); <=====================
  Raised in: Page<Purch. Invoice Subform>.Control<ShortcutDimCode6>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(6,ShortcutDimCode[6]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,6); <=====================
  Raised in: Page<Purch. Invoice Subform>.Control<ShortcutDimCode7>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(7,ShortcutDimCode[7]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,7); <=====================
  Raised in: Page<Purch. Invoice Subform>.Control<ShortcutDimCode8>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(8,ShortcutDimCode[8]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,8); <=====================
Page<Purch. Invoice Subform>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Purch. Invoice Subform>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    IF TransferExtendedText.PurchCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      TransferExtendedText.InsertPurchExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      UpdateForm(TRUE);
Page<Purch. Invoice Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
  Raised in: Page<Purch. Invoice Subform>.<Control>.<OnLookup>
    Code lines:
    CrossReferenceNoLookUp;
    NoOnAfterValidate;
    OnCrossReferenceNoOnLookup(Rec); <=====================
Page<Production Journal>.PROCEDURE<OnAfterSetFilterGroup>
  Raised in: Page<Production Journal>.PROCEDURE<SetFilterGroup>
    Code lines:
    ...
    SETRANGE("Order Type","Order Type"::Production);
    SETRANGE("Order No.",ProdOrder."No.");
    IF ProdOrderLineNo <> 0 THEN
      SETRANGE("Order Line No.",ProdOrderLineNo);
    SetFlushingFilter;
    OnAfterSetFilterGroup(Rec); <=====================
    FILTERGROUP(0);
Page<Production Journal>.PROCEDURE<OnAfterValidateShortcutDimCode>
  Raised in: Page<Production Journal>.Control<ShortcutDimCode3>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(3,ShortcutDimCode[3]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,3); <=====================
  Raised in: Page<Production Journal>.Control<ShortcutDimCode4>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(4,ShortcutDimCode[4]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,4); <=====================
  Raised in: Page<Production Journal>.Control<ShortcutDimCode5>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(5,ShortcutDimCode[5]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,5); <=====================
  Raised in: Page<Production Journal>.Control<ShortcutDimCode6>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(6,ShortcutDimCode[6]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,6); <=====================
  Raised in: Page<Production Journal>.Control<ShortcutDimCode7>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(7,ShortcutDimCode[7]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,7); <=====================
  Raised in: Page<Production Journal>.Control<ShortcutDimCode8>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(8,ShortcutDimCode[8]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,8); <=====================
Page<VAT Rate Change Log Entries>.PROCEDURE<OnAfterShow>
  Raised in: Page<VAT Rate Change Log Entries>.Action<Show>.<OnAction>
    Code lines:
    ...
          ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
          PageManagement.PageRunModal(ServiceHeader);
        END;
      ELSE BEGIN
        IsHandled := FALSE;
        OnAfterShow(Rec,IsHandled); <=====================
        IF NOT IsHandled THEN
          MESSAGE(Text0001);
      END;
    END;
Page<Fixed Asset G/L Journal>.PROCEDURE<OnAfterValidateShortcutDimCode>
  Raised in: Page<Fixed Asset G/L Journal>.Control<ShortcutDimCode3>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(3,ShortcutDimCode[3]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,3); <=====================
  Raised in: Page<Fixed Asset G/L Journal>.Control<ShortcutDimCode4>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(4,ShortcutDimCode[4]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,4); <=====================
  Raised in: Page<Fixed Asset G/L Journal>.Control<ShortcutDimCode5>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(5,ShortcutDimCode[5]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,5); <=====================
  Raised in: Page<Fixed Asset G/L Journal>.Control<ShortcutDimCode6>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(6,ShortcutDimCode[6]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,6); <=====================
  Raised in: Page<Fixed Asset G/L Journal>.Control<ShortcutDimCode7>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(7,ShortcutDimCode[7]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,7); <=====================
  Raised in: Page<Fixed Asset G/L Journal>.Control<ShortcutDimCode8>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(8,ShortcutDimCode[8]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,8); <=====================
Page<Fixed Asset Journal>.PROCEDURE<OnAfterValidateShortcutDimCode>
  Raised in: Page<Fixed Asset Journal>.Control<ShortcutDimCode3>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(3,ShortcutDimCode[3]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,3); <=====================
  Raised in: Page<Fixed Asset Journal>.Control<ShortcutDimCode4>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(4,ShortcutDimCode[4]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,4); <=====================
  Raised in: Page<Fixed Asset Journal>.Control<ShortcutDimCode5>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(5,ShortcutDimCode[5]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,5); <=====================
  Raised in: Page<Fixed Asset Journal>.Control<ShortcutDimCode6>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(6,ShortcutDimCode[6]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,6); <=====================
  Raised in: Page<Fixed Asset Journal>.Control<ShortcutDimCode7>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(7,ShortcutDimCode[7]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,7); <=====================
  Raised in: Page<Fixed Asset Journal>.Control<ShortcutDimCode8>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(8,ShortcutDimCode[8]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,8); <=====================
Page<Recurring Fixed Asset Journal>.PROCEDURE<OnAfterValidateShortcutDimCode>
  Raised in: Page<Recurring Fixed Asset Journal>.Control<ShortcutDimCode3>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(3,ShortcutDimCode[3]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,3); <=====================
  Raised in: Page<Recurring Fixed Asset Journal>.Control<ShortcutDimCode4>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(4,ShortcutDimCode[4]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,4); <=====================
  Raised in: Page<Recurring Fixed Asset Journal>.Control<ShortcutDimCode5>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(5,ShortcutDimCode[5]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,5); <=====================
  Raised in: Page<Recurring Fixed Asset Journal>.Control<ShortcutDimCode6>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(6,ShortcutDimCode[6]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,6); <=====================
  Raised in: Page<Recurring Fixed Asset Journal>.Control<ShortcutDimCode7>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(7,ShortcutDimCode[7]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,7); <=====================
  Raised in: Page<Recurring Fixed Asset Journal>.Control<ShortcutDimCode8>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(8,ShortcutDimCode[8]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,8); <=====================
Page<Insurance Journal>.PROCEDURE<OnAfterValidateShortcutDimCode>
  Raised in: Page<Insurance Journal>.Control<ShortcutDimCode3>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(3,ShortcutDimCode[3]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,3); <=====================
  Raised in: Page<Insurance Journal>.Control<ShortcutDimCode4>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(4,ShortcutDimCode[4]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,4); <=====================
  Raised in: Page<Insurance Journal>.Control<ShortcutDimCode5>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(5,ShortcutDimCode[5]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,5); <=====================
  Raised in: Page<Insurance Journal>.Control<ShortcutDimCode6>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(6,ShortcutDimCode[6]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,6); <=====================
  Raised in: Page<Insurance Journal>.Control<ShortcutDimCode7>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(7,ShortcutDimCode[7]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,7); <=====================
  Raised in: Page<Insurance Journal>.Control<ShortcutDimCode8>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(8,ShortcutDimCode[8]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,8); <=====================
Page<Transfer Route Specification>.PROCEDURE<OnBeforeClosePage>
  Raised in: Page<Transfer Route Specification>.<OnClosePage>
    Code lines:
    CanBeDeleted := TRUE;
    OnBeforeClosePage(Rec,CanBeDeleted); <=====================
    IF CanBeDeleted THEN
      IF GET("Transfer-from Code","Transfer-to Code") THEN
        IF ("Shipping Agent Code" = '') AND
           ("Shipping Agent Service Code" = '') AND
           ("In-Transit Code" = '')
        THEN
          DELETE;
Page<Revaluation Journal>.PROCEDURE<OnAfterValidateShortcutDimCode>
  Raised in: Page<Revaluation Journal>.Control<ShortcutDimCode3>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(3,ShortcutDimCode[3]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,3); <=====================
  Raised in: Page<Revaluation Journal>.Control<ShortcutDimCode4>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(4,ShortcutDimCode[4]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,4); <=====================
  Raised in: Page<Revaluation Journal>.Control<ShortcutDimCode5>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(5,ShortcutDimCode[5]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,5); <=====================
  Raised in: Page<Revaluation Journal>.Control<ShortcutDimCode6>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(6,ShortcutDimCode[6]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,6); <=====================
  Raised in: Page<Revaluation Journal>.Control<ShortcutDimCode7>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(7,ShortcutDimCode[7]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,7); <=====================
  Raised in: Page<Revaluation Journal>.Control<ShortcutDimCode8>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(8,ShortcutDimCode[8]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,8); <=====================
Page<Item Charge Assignment (Sales)>.PROCEDURE<OnUpdateQtyAssgntOnAfterAssignableQty>
  Raised in: Page<Item Charge Assignment (Sales)>.PROCEDURE<UpdateQtyAssgnt>
    Code lines:
    SalesLine2.CALCFIELDS("Qty. to Assign","Qty. Assigned");
    AssignableQty := SalesLine2."Qty. to Invoice" + SalesLine2."Quantity Invoiced" - SalesLine2."Qty. Assigned";
    OnUpdateQtyAssgntOnAfterAssignableQty(SalesLine2,AssignableQty); <=====================
    
    IF AssignableQty <> 0 THEN
      UnitCost := AssignableAmount / AssignableQty
    ELSE
      UnitCost := 0;
    
    ItemChargeAssgntSales.RESET;
    ...
Page<Sales Shipment Lines>.PROCEDURE<OnAfterSetFilters>
  Raised in: Page<Sales Shipment Lines>.PROCEDURE<SetFilters>
    Code lines:
    SETRANGE(Type,Type::Item);
    SETFILTER(Quantity,'<>0');
    SETRANGE(Correction,FALSE);
    SETRANGE("Job No.",'');
    
    OnAfterSetFilters(Rec); <=====================
Page<Posted Sales Document Lines>.PROCEDURE<OnBeforeCopyLineToDoc>
  Raised in: Page<Posted Sales Document Lines>.PROCEDURE<CopyLineToDoc>
    Code lines:
    OnBeforeCopyLineToDoc(CopyDocMgt); <=====================
    
    ToSalesHeader.TESTFIELD(Status,ToSalesHeader.Status::Open);
    LinesNotCopied := 0;
    
    CASE CurrentMenuType OF
      0:
        BEGIN
          CurrPage.PostedShpts.PAGE.GetSelectedLine(FromSalesShptLine);
          CopyDocMgt.SetProperties(FALSE,FALSE,FALSE,FALSE,TRUE,TRUE,OriginalQuantity);
    ...
Page<Posted Purchase Document Lines>.PROCEDURE<OnBeforeCopyLineToDoc>
  Raised in: Page<Posted Purchase Document Lines>.PROCEDURE<CopyLineToDoc>
    Code lines:
    OnBeforeCopyLineToDoc(CopyDocMgt); <=====================
    ToPurchHeader.TESTFIELD(Status,ToPurchHeader.Status::Open);
    LinesNotCopied := 0;
    CASE CurrentMenuType OF
      0:
        BEGIN
          CurrPage.PostedRcpts.PAGE.GetSelectedLine(FromPurchRcptLine);
          CopyDocMgt.SetProperties(FALSE,FALSE,FALSE,FALSE,TRUE,TRUE,OriginalQuantity);
          CopyDocMgt.CopyPurchaseLinesToDoc(
            PurchDocType::"Posted Receipt",ToPurchHeader,
    ...
Page<BOM Structure>.PROCEDURE<OnRefreshPageOnBeforeRaiseError>
  Raised in: Page<BOM Structure>.PROCEDURE<RefreshPage>
    Code lines:
    ...
      ShowBy::Item:
        BEGIN
          Item.FINDFIRST;
          RaiseError := (NOT Item.HasBOM) AND (Item."Routing No." = '');
          ErrorText := CouldNotFindBOMLevelsErr;
          OnRefreshPageOnBeforeRaiseError(Item,RaiseError,ErrorText); <=====================
          IF RaiseError THEN
            ERROR(ErrorText);
          CalcBOMTree.GenerateTreeForItems(Item,Rec,0);
        END;
    ...
Page<Service Lines>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Service Lines>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    
    IF TransferExtendedText.ServCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      AddExtendedText := TRUE;
      CurrPage.SAVERECORD;
      AddExtendedText := FALSE;
      TransferExtendedText.InsertServExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      CurrPage.UPDATE;
Page<Service Lines>.PROCEDURE<OnBeforeSetSelectionFilter>
  Raised in: Page<Service Lines>.PROCEDURE<SetSelectionFilter>
    Code lines:
    OnBeforeSetSelectionFilter(SelectionFilter); <=====================
    CASE SelectionFilter OF
      SelectionFilter::"All Service Lines":
        SETRANGE("Service Item Line No.");
      SelectionFilter::"Lines per Selected Service Item":
        SETRANGE("Service Item Line No.",ServItemLineNo);
      SelectionFilter::"Lines Not Item Related":
        SETRANGE("Service Item Line No.",0);
    END;
    CurrPage.UPDATE(FALSE);
Page<Service Item Worksheet Subform>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Service Item Worksheet Subform>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    IF TransferExtendedText.ServCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      TransferExtendedText.InsertServExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      CurrPage.UPDATE;
Page<Service Invoice Subform>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Service Invoice Subform>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    IF TransferExtendedText.ServCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      TransferExtendedText.InsertServExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      UpdateForm(TRUE);
Page<Service Credit Memo Subform>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Service Credit Memo Subform>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    IF TransferExtendedText.ServCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      TransferExtendedText.InsertServExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      UpdateForm(TRUE);
Page<Service Quote Lines>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Service Quote Lines>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    IF TransferExtendedText.ServCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      TransferExtendedText.InsertServExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      CurrPage.UPDATE;
Page<Available - Service Lines>.PROCEDURE<OnAfterSetFilters>
  Raised in: Page<Available - Service Lines>.PROCEDURE<SetFilters>
    Code lines:
    ...
          SETFILTER("Quantity (Base)",'<0')
        ELSE
          SETFILTER("Quantity (Base)",'>0');
    END;
    
    OnAfterSetFilters(Rec,ReservEntry); <=====================
Page<Available - Service Lines>.PROCEDURE<OnAfterUpdateReservFrom>
  Raised in: Page<Available - Service Lines>.PROCEDURE<UpdateReservFrom>
    Code lines:
    ...
          JobPlanningLine.FIND;
          SetJobPlanningLine(JobPlanningLine,ReservEntry);
        END;
    END;
    
    OnAfterUpdateReservFrom; <=====================
Page<Available - Service Lines>.PROCEDURE<OnAfterUpdateReservMgt>
  Raised in: Page<Available - Service Lines>.PROCEDURE<UpdateReservMgt>
    Code lines:
    ...
        ReservMgt.SetServLine(ServInvLine);
      DATABASE::"Assembly Header":
        ReservMgt.SetAssemblyHeader(AssemblyHeader);
    END;
    
    OnAfterUpdateReservMgt; <=====================
Page<Res. Availability Lines (SM)>.PROCEDURE<OnAfterCapacityOnDrillDown>
  Raised in: Page<Res. Availability Lines (SM)>.Control<Capacity>.<OnDrillDown>
    Code lines:
    ResCapacityEntry.SETRANGE("Resource No.",Res."No.");
    ResCapacityEntry.SETRANGE(Date,"Period Start","Period End");
    IsHandled := FALSE;
    OnAfterCapacityOnDrillDown(ResCapacityEntry,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    PAGE.RUNMODAL(0,ResCapacityEntry);
Page<Res.Gr Availability Lines (SM)>.PROCEDURE<OnAfterCapacityOnDrillDown>
  Raised in: Page<Res.Gr Availability Lines (SM)>.Control<Capacity>.<OnDrillDown>
    Code lines:
    ResCapacityEntry.SETRANGE("Resource Group No.",ResGr."No.");
    ResCapacityEntry.SETRANGE(Date,"Period Start","Period End");
    IsHandled := FALSE;
    OnAfterCapacityOnDrillDown(ResCapacityEntry,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    PAGE.RUNMODAL(0,ResCapacityEntry);
Page<IC General Journal>.PROCEDURE<OnAfterValidateShortcutDimCode>
  Raised in: Page<IC General Journal>.Control<ShortcutDimCode3>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(3,ShortcutDimCode[3]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,3); <=====================
  Raised in: Page<IC General Journal>.Control<ShortcutDimCode4>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(4,ShortcutDimCode[4]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,4); <=====================
  Raised in: Page<IC General Journal>.Control<ShortcutDimCode5>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(5,ShortcutDimCode[5]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,5); <=====================
  Raised in: Page<IC General Journal>.Control<ShortcutDimCode6>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(6,ShortcutDimCode[6]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,6); <=====================
  Raised in: Page<IC General Journal>.Control<ShortcutDimCode7>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(7,ShortcutDimCode[7]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,7); <=====================
  Raised in: Page<IC General Journal>.Control<ShortcutDimCode8>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(8,ShortcutDimCode[8]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,8); <=====================
Page<Unapply Customer Entries>.PROCEDURE<OnBeforeRecInsert>
  Raised in: Page<Unapply Customer Entries>.PROCEDURE<InsertEntries>
    Code lines:
    ...
      REPEAT
        IF (DtldCustLedgEntry."Entry Type" <> DtldCustLedgEntry."Entry Type"::"Initial Entry") AND
           NOT DtldCustLedgEntry.Unapplied
        THEN BEGIN
          Rec := DtldCustLedgEntry;
          OnBeforeRecInsert(Rec,DtldCustLedgEntry,DtldCustLedgEntry2); <=====================
          INSERT;
        END;
      UNTIL DtldCustLedgEntry.NEXT = 0;
Page<Unapply Customer Entries>.PROCEDURE<OnInsertEntriesOnAfterSetFilters>
  Raised in: Page<Unapply Customer Entries>.PROCEDURE<InsertEntries>
    Code lines:
    ...
    END ELSE BEGIN
      DtldCustLedgEntry.SETCURRENTKEY("Transaction No.","Customer No.","Entry Type");
      DtldCustLedgEntry.SETRANGE("Transaction No.",DtldCustLedgEntry2."Transaction No.");
    END;
    DtldCustLedgEntry.SETRANGE("Customer No.",DtldCustLedgEntry2."Customer No.");
    OnInsertEntriesOnAfterSetFilters(DtldCustLedgEntry,DtldCustLedgEntry2); <=====================
    DELETEALL;
    IF DtldCustLedgEntry.FINDSET THEN
      REPEAT
        IF (DtldCustLedgEntry."Entry Type" <> DtldCustLedgEntry."Entry Type"::"Initial Entry") AND
    ...
Page<Unapply Vendor Entries>.PROCEDURE<OnBeforeRecInsert>
  Raised in: Page<Unapply Vendor Entries>.PROCEDURE<InsertEntries>
    Code lines:
    ...
      REPEAT
        IF (DtldVendLedgEntry."Entry Type" <> DtldVendLedgEntry."Entry Type"::"Initial Entry") AND
           NOT DtldVendLedgEntry.Unapplied
        THEN BEGIN
          Rec := DtldVendLedgEntry;
          OnBeforeRecInsert(Rec,DtldVendLedgEntry,DtldVendLedgEntry2); <=====================
          INSERT;
        END;
      UNTIL DtldVendLedgEntry.NEXT = 0;
Page<Azure AD Access Dialog>.PROCEDURE<OnOAuthAccessDenied>
  Raised in: Page<Azure AD Access Dialog>.EVENT<AuthorizationErrorOccurred>
    Code lines:
    // OnOAuthAccessDenied event is raised if Auth fails because access is denied <=====================
    // Subcribe to this event if you want to respond to it
    // description contains AADSTS65004 error code if user denied the request and AADSTS65005 if the client
    // has not set up required permissions for the resource being requested
    IF error = 'access_denied' THEN
      OnOAuthAccessDenied(description,ResourceFriendlyName) <=====================
    ELSE BEGIN
      IF NOT AzureAdAppSetup.ISEMPTY THEN BEGIN
        AzureAdAppSetup.FINDFIRST;
        ActivityLog.LogActivityForUser(
    ...
Page<Item Tracking Summary>.PROCEDURE<OnAfterSetCurrentBinAndItemTrkgCode>
  Raised in: Page<Item Tracking Summary>.PROCEDURE<SetCurrentBinAndItemTrkgCode>
    Code lines:
    ItemTrackingDataCollection.SetCurrentBinAndItemTrkgCode(BinCode,ItemTrackingCode);
    BinContentVisible := BinCode <> '';
    CurrBinCode := BinCode;
    CurrItemTrackingCode := ItemTrackingCode;
    OnAfterSetCurrentBinAndItemTrkgCode(CurrBinCode,CurrItemTrackingCode,BinContentVisible,Rec,TempReservEntry); <=====================
Page<Item Tracking Summary>.PROCEDURE<OnBeforeAutoSelectTrackingNo>
  Raised in: Page<Item Tracking Summary>.PROCEDURE<AutoSelectTrackingNo>
    Code lines:
    IsHandled := FALSE;
    OnBeforeAutoSelectTrackingNo(Rec,MaxQuantity,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF MaxQuantity = 0 THEN
      EXIT;
    
    SelectedQty := MaxQuantity;
    IF FINDSET THEN
    ...
Page<Item Tracking Lines>.PROCEDURE<OnAddReservEntriesToTempRecSetOnBeforeInsert>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<AddReservEntriesToTempRecSet>
    Code lines:
    ...
                TempTrackingSpecification."Quantity (Base)";
              TempTrackingSpecification."Qty. to Handle (Base)" := 0;
              TempTrackingSpecification."Qty. to Invoice (Base)" := 0;
            END;
            TempTrackingSpecification."Buffer Status" := Color;
            OnAddReservEntriesToTempRecSetOnBeforeInsert(TempTrackingSpecification,ReservEntry); <=====================
            TempTrackingSpecification.INSERT;
          END;
        END;
      UNTIL ReservEntry.NEXT = 0;
Page<Item Tracking Lines>.PROCEDURE<OnAfterAssignNewTrackingNo>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<AssignSerialNoBatch>
    Code lines:
    ...
    ItemTrackingDataCollection.SetSkipLot(TRUE);
    FOR i := 1 TO QtyToCreate DO BEGIN
      VALIDATE("Quantity Handled (Base)",0);
      VALIDATE("Quantity Invoiced (Base)",0);
      VALIDATE("Serial No.",NoSeriesMgt.GetNextNo(Item."Serial Nos.",WORKDATE,TRUE));
      OnAfterAssignNewTrackingNo(Rec); <=====================
      VALIDATE("Quantity (Base)",QtySignFactor);
      "Entry No." := NextEntryNo;
      IF TestTempSpecificationExists THEN
        ERROR('');
    ...
  Raised in: Page<Item Tracking Lines>.PROCEDURE<AssignLotNo>
    Code lines:
    ...
    
    Item.TESTFIELD("Lot Nos.");
    VALIDATE("Quantity Handled (Base)",0);
    VALIDATE("Quantity Invoiced (Base)",0);
    VALIDATE("Lot No.",NoSeriesMgt.GetNextNo(Item."Lot Nos.",WORKDATE,TRUE));
    OnAfterAssignNewTrackingNo(Rec); <=====================
    "Qty. per Unit of Measure" := QtyPerUOM;
    VALIDATE("Quantity (Base)",QtyToCreate);
    "Entry No." := NextEntryNo;
    TestTempSpecificationExists;
    ...
  Raised in: Page<Item Tracking Lines>.PROCEDURE<CreateCustomizedSNBatch>
    Code lines:
    ...
    
    IF CreateLotNo THEN BEGIN
      TESTFIELD("Lot No.",'');
      Item.TESTFIELD("Lot Nos.");
      VALIDATE("Lot No.",NoSeriesMgt.GetNextNo(Item."Lot Nos.",WORKDATE,TRUE));
      OnAfterAssignNewTrackingNo(Rec); <=====================
    END;
    
    FOR i := 1 TO QtyToCreate DO BEGIN
      VALIDATE("Quantity Handled (Base)",0);
    ...
  Raised in: Page<Item Tracking Lines>.PROCEDURE<CreateCustomizedSNBatch>
    Code lines:
    ...
    
    IF CreateLotNo THEN BEGIN
      TESTFIELD("Lot No.",'');
      Item.TESTFIELD("Lot Nos.");
      VALIDATE("Lot No.",NoSeriesMgt.GetNextNo(Item."Lot Nos.",WORKDATE,TRUE));
      OnAfterAssignNewTrackingNo(Rec); <=====================
    END;
    
    FOR i := 1 TO QtyToCreate DO BEGIN
      VALIDATE("Quantity Handled (Base)",0);
    ...
Page<Item Tracking Lines>.PROCEDURE<OnAfterClearTrackingSpec>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<RegisterChange>
    Code lines:
    ...
            RegisterChange(OldTrackingSpecification,OldTrackingSpecification,
              ChangeType::Insert,NOT IdenticalArray[2]);
          END ELSE BEGIN
            TempReservEntry.SetTrackingFilterFromSpec(OldTrackingSpecification);
            OldTrackingSpecification.ClearTracking;
            OnAfterClearTrackingSpec(OldTrackingSpecification); <=====================
            QtyToAdd :=
              CurrentSignFactor *
              ReservEngineMgt.AddItemTrackingToTempRecSet(
                TempReservEntry,OldTrackingSpecification,
    ...
  Raised in: Page<Item Tracking Lines>.PROCEDURE<RegisterChange>
    Code lines:
    ...
            RegisterChange(OldTrackingSpecification,OldTrackingSpecification,
              ChangeType::Insert,NOT IdenticalArray[2]);
          END ELSE BEGIN
            TempReservEntry.SetTrackingFilterFromSpec(OldTrackingSpecification);
            OldTrackingSpecification.ClearTracking;
            OnAfterClearTrackingSpec(OldTrackingSpecification); <=====================
            QtyToAdd :=
              CurrentSignFactor *
              ReservEngineMgt.AddItemTrackingToTempRecSet(
                TempReservEntry,OldTrackingSpecification,
    ...
Page<Item Tracking Lines>.PROCEDURE<OnAfterCopyTrackingSpec>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<RegisterChange>
    Code lines:
    ...
    
            OldTrackingSpecification."Quantity (Base)" := QtyToAdd;
            OldTrackingSpecification."Warranty Date" := NewTrackingSpecification."Warranty Date";
            OldTrackingSpecification."Expiration Date" := NewTrackingSpecification."Expiration Date";
            OldTrackingSpecification.Description := NewTrackingSpecification.Description;
            OnAfterCopyTrackingSpec(NewTrackingSpecification,OldTrackingSpecification); <=====================
    
            RegisterChange(OldTrackingSpecification,OldTrackingSpecification,
              ChangeType::Insert,NOT IdenticalArray[2]);
          END ELSE BEGIN
    ...
  Raised in: Page<Item Tracking Lines>.PROCEDURE<RegisterItemTrackingLines>
    Code lines:
    ...
        IF FormRunMode = FormRunMode::Reclass THEN BEGIN
          "New Serial No." := TempTrackingSpecification."New Serial No.";
          "New Lot No." := TempTrackingSpecification."New Lot No.";
          "New Expiration Date" := TempTrackingSpecification."New Expiration Date"
        END;
        OnAfterCopyTrackingSpec(TempTrackingSpecification,Rec); <=====================
        VALIDATE("Quantity (Base)",TempTrackingSpecification."Quantity (Base)");
        "Entry No." := NextEntryNo;
        INSERT;
      END;
    ...
Page<Item Tracking Lines>.PROCEDURE<OnAfterCreateReservEntryFor>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<RegisterChange>
    Code lines:
    ...
            0,
            OldTrackingSpecification."Quantity (Base)",
            OldTrackingSpecification."Serial No.",
            OldTrackingSpecification."Lot No.");
    
          OnAfterCreateReservEntryFor(OldTrackingSpecification,NewTrackingSpecification); <=====================
    
          CreateReservEntry.CreateEntry(OldTrackingSpecification."Item No.",
            OldTrackingSpecification."Variant Code",
            OldTrackingSpecification."Location Code",
    ...
Page<Item Tracking Lines>.PROCEDURE<OnAfterEntriesAreIdentical>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<EntriesAreIdentical>
    Code lines:
    ...
                          (ReservEntry1."New Lot No." = ReservEntry2."New Lot No.") AND
                          (ReservEntry1."Expiration Date" = ReservEntry2."Expiration Date") AND
                          (ReservEntry1."Warranty Date" = ReservEntry2."Warranty Date") AND
                          (ReservEntry1."New Expiration Date" = ReservEntry2."New Expiration Date"));
    
    OnAfterEntriesAreIdentical(ReservEntry1,ReservEntry2,IdenticalArray); <=====================
    EXIT(IdenticalArray[1] AND IdenticalArray[2]);
Page<Item Tracking Lines>.PROCEDURE<OnAfterGetHandleSource>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<GetHandleSource>
    Code lines:
    ...
          DATABASE::"Requisition Line"]) OR
        (("Source Type" IN [DATABASE::"Sales Line",DATABASE::"Purchase Line",DATABASE::"Service Line"]) AND
         ("Source Subtype" IN [0,2,3])) OR
        (("Source Type" = DATABASE::"Assembly Line") AND ("Source Subtype" = 0));
    END;
    OnAfterGetHandleSource(TrackingSpecification,QtyToHandleColumnIsHidden); <=====================
    EXIT(NOT QtyToHandleColumnIsHidden);
Page<Item Tracking Lines>.PROCEDURE<OnAfterGetInvoiceSource>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<GetInvoiceSource>
    Code lines:
    ...
          DATABASE::"Prod. Order Line",
          DATABASE::"Prod. Order Component"]) OR
        (("Source Type" IN [DATABASE::"Sales Line",DATABASE::"Purchase Line",DATABASE::"Service Line"]) AND
         ("Source Subtype" IN [0,2,3,4]))
    END;
    OnAfterGetInvoiceSource(TrackingSpecification,QtyToInvoiceColumnIsHidden); <=====================
    EXIT(NOT QtyToInvoiceColumnIsHidden);
Page<Item Tracking Lines>.PROCEDURE<OnAfterMoveFields>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<ModifyFieldsWithinFilter>
    Code lines:
    ...
        ReservEntry1."Warranty Date" := TrackingSpecification."Warranty Date";
        ReservEntry1."Expiration Date" := TrackingSpecification."Expiration Date";
        ReservEntry1."New Serial No." := TrackingSpecification."New Serial No.";
        ReservEntry1."New Lot No." := TrackingSpecification."New Lot No.";
        ReservEntry1."New Expiration Date" := TrackingSpecification."New Expiration Date";
        OnAfterMoveFields(TrackingSpecification,ReservEntry1); <=====================
        ReservEntry1.MODIFY;
      UNTIL ReservEntry1.NEXT = 0;
Page<Item Tracking Lines>.PROCEDURE<OnAfterRegisterItemTrackingLines>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<RegisterItemTrackingLines>
    Code lines:
    ...
        VALIDATE("Quantity (Base)",TempTrackingSpecification."Quantity (Base)");
        "Entry No." := NextEntryNo;
        INSERT;
      END;
    UNTIL TempTrackingSpecification.NEXT = 0;
    OnAfterRegisterItemTrackingLines(SourceSpecification,TempTrackingSpecification,Rec,AvailabilityDate); <=====================
    
    RESET;
    IF FIND('-') THEN
      REPEAT
    ...
Page<Item Tracking Lines>.PROCEDURE<OnAfterSetControls>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<SetControls>
    Code lines:
    ...
          WarrantyDateEditable := SetAccess;
          InsertIsBlocked := SetAccess;
        END;
    END;
    
    OnAfterSetControls(ItemTrackingCode,Controls,SetAccess); <=====================
Page<Item Tracking Lines>.PROCEDURE<OnAfterSetSourceSpec>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<SetSourceSpec>
    Code lines:
    ...
    ItemTrackingDataCollection.RetrieveLookupData(Rec,FALSE);
    
    FunctionsDemandVisible := CurrentSignFactor * SourceQuantityArray[1] < 0;
    FunctionsSupplyVisible := NOT FunctionsDemandVisible;
    
    OnAfterSetSourceSpec(TrackingSpecification,Rec,AvailabilityDate,BlockCommit); <=====================
Page<Item Tracking Lines>.PROCEDURE<OnAfterSynchronizeLinkedSources>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<SynchronizeLinkedSources>
    Code lines:
    ...
    IF SecondSourceRowID = '' THEN
      EXIT(FALSE);
    
    ItemTrackingMgt.SynchronizeItemTracking(CurrentSourceRowID,SecondSourceRowID,DialogText);
    
    OnAfterSynchronizeLinkedSources(FormRunMode,CurrentSourceType,CurrentSourceRowID,SecondSourceRowID); <=====================
    EXIT(TRUE);
Page<Item Tracking Lines>.PROCEDURE<OnBeforeAddToGlobalRecordSet>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<AddToGlobalRecordSet>
    Code lines:
    ...
          IF ExpDate <> 0D THEN BEGIN
            "Expiration Date" := ExpDate;
            "Buffer Status2" := "Buffer Status2"::"ExpDate blocked";
          END;
    
          OnBeforeAddToGlobalRecordSet(Rec,EntriesExist); <=====================
          INSERT;
    
          IF "Buffer Status" = 0 THEN BEGIN
            xTempItemTrackingLine := Rec;
    ...
Page<Item Tracking Lines>.PROCEDURE<OnBeforeClosePage>
  Raised in: Page<Item Tracking Lines>.<OnClosePage>
    Code lines:
    SkipWriteToDatabase := FALSE;
    OnBeforeClosePage(Rec,SkipWriteToDatabase); <=====================
    IF UpdateUndefinedQty AND NOT SkipWriteToDatabase THEN
      WriteToDatabase;
    IF FormRunMode = FormRunMode::"Drop Shipment" THEN
      CASE CurrentSourceType OF
        DATABASE::"Sales Line":
          SynchronizeLinkedSources(STRSUBSTNO(Text015,Text016));
        DATABASE::"Purchase Line":
          SynchronizeLinkedSources(STRSUBSTNO(Text015,Text017));
    ...
Page<Item Tracking Lines>.PROCEDURE<OnBeforeCollectTempTrackingSpecificationInsert>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<CollectPostedTransferEntries>
    Code lines:
    ...
        TempTrackingSpecification."Quantity (Base)" := ItemLedgerEntry.Quantity;
        TempTrackingSpecification."Quantity Handled (Base)" := ItemLedgerEntry.Quantity;
        TempTrackingSpecification."Quantity Invoiced (Base)" := ItemLedgerEntry.Quantity;
        TempTrackingSpecification."Qty. per Unit of Measure" := ItemLedgerEntry."Qty. per Unit of Measure";
        TempTrackingSpecification.InitQtyToShip;
        OnBeforeCollectTempTrackingSpecificationInsert(TempTrackingSpecification,ItemLedgerEntry,TrackingSpecification); <=====================
        TempTrackingSpecification.INSERT;
      UNTIL ItemEntryRelation.NEXT = 0;
  Raised in: Page<Item Tracking Lines>.PROCEDURE<CollectPostedAssemblyEntries>
    Code lines:
    ...
        TempTrackingSpecification."Quantity (Base)" := ItemLedgerEntry.Quantity;
        TempTrackingSpecification."Quantity Handled (Base)" := ItemLedgerEntry.Quantity;
        TempTrackingSpecification."Quantity Invoiced (Base)" := ItemLedgerEntry.Quantity;
        TempTrackingSpecification."Qty. per Unit of Measure" := ItemLedgerEntry."Qty. per Unit of Measure";
        TempTrackingSpecification.InitQtyToShip;
        OnBeforeCollectTempTrackingSpecificationInsert(TempTrackingSpecification,ItemLedgerEntry,TrackingSpecification); <=====================
        TempTrackingSpecification.INSERT;
      UNTIL ItemEntryRelation.NEXT = 0;
  Raised in: Page<Item Tracking Lines>.PROCEDURE<CollectPostedOutputEntries>
    Code lines:
    ...
        TempTrackingSpecification."Quantity (Base)" := ItemLedgerEntry.Quantity;
        TempTrackingSpecification."Quantity Handled (Base)" := ItemLedgerEntry.Quantity;
        TempTrackingSpecification."Quantity Invoiced (Base)" := ItemLedgerEntry.Quantity;
        TempTrackingSpecification."Qty. per Unit of Measure" := ItemLedgerEntry."Qty. per Unit of Measure";
        TempTrackingSpecification.InitQtyToShip;
        OnBeforeCollectTempTrackingSpecificationInsert(TempTrackingSpecification,ItemLedgerEntry,TrackingSpecification); <=====================
        TempTrackingSpecification.INSERT;
    
        IF BackwardFlushing THEN BEGIN
          SourceQuantityArray[1] += ItemLedgerEntry.Quantity;
    ...
Page<Item Tracking Lines>.PROCEDURE<OnBeforeDeleteRecord>
  Raised in: Page<Item Tracking Lines>.<OnDeleteRecord>
    Code lines:
    OnBeforeDeleteRecord(Rec); <=====================
    
    TrackingSpec."Item No." := "Item No.";
    TrackingSpec."Location Code" := "Location Code";
    TrackingSpec."Source Type" := "Source Type";
    TrackingSpec."Source Subtype" := "Source Subtype";
    WMSManagement.CheckItemTrackingChange(TrackingSpec,Rec);
    
    IF NOT DeleteIsBlocked THEN BEGIN
      AlreadyDeleted := TempItemTrackLineDelete.GET("Entry No.");
    ...
Page<Item Tracking Lines>.PROCEDURE<OnBeforeLotNoAssistEdit>
  Raised in: Page<Item Tracking Lines>.<Control>.<OnAssistEdit>
    Code lines:
    OnBeforeLotNoAssistEdit(Rec,xRec); <=====================
    
    MaxQuantity := UndefinedQtyArray[1];
    
    "Bin Code" := ForBinCode;
    ItemTrackingDataCollection.AssistEditTrackingNo(Rec,
      (CurrentSignFactor * SourceQuantityArray[1] < 0) AND NOT
      InsertIsBlocked,CurrentSignFactor,1,MaxQuantity);
    "Bin Code" := '';
    CurrPage.UPDATE;
Page<Item Tracking Lines>.PROCEDURE<OnBeforeSerialNoAssistEdit>
  Raised in: Page<Item Tracking Lines>.<Control>.<OnAssistEdit>
    Code lines:
    OnBeforeSerialNoAssistEdit(Rec,xRec); <=====================
    
    MaxQuantity := UndefinedQtyArray[1];
    
    "Bin Code" := ForBinCode;
    ItemTrackingDataCollection.AssistEditTrackingNo(Rec,
      (CurrentSignFactor * SourceQuantityArray[1] < 0) AND NOT
      InsertIsBlocked,CurrentSignFactor,0,MaxQuantity);
    "Bin Code" := '';
    CurrPage.UPDATE;
Page<Item Tracking Lines>.PROCEDURE<OnBeforeSerialNoOnAfterValidate>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<SerialNoOnAfterValidate>
    Code lines:
    OnBeforeSerialNoOnAfterValidate(Rec); <=====================
    
    UpdateExpDateEditable;
    CurrPage.UPDATE;
Page<Item Tracking Lines>.PROCEDURE<OnBeforeSetSecondSourceQuantity>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<SetSecondSourceQuantity>
    Code lines:
    OnBeforeSetSecondSourceQuantity(SecondSourceQuantityArray); <=====================
    
    CASE SecondSourceQuantityArray[1] OF
      DATABASE::"Warehouse Receipt Line",DATABASE::"Warehouse Shipment Line":
        BEGIN
          SourceQuantityArray[2] := SecondSourceQuantityArray[2]; // "Qty. to Handle (Base)"
          SourceQuantityArray[3] := SecondSourceQuantityArray[3]; // "Qty. to Invoice (Base)"
          SetControls(Controls::Invoice,FALSE);
        END;
      ELSE
    ...
Page<Item Tracking Lines>.PROCEDURE<OnBeforeSetSourceSpec>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<SetSourceSpec>
    Code lines:
    OnBeforeSetSourceSpec(TrackingSpecification,ReservEntry); <=====================
    
    GetItem(TrackingSpecification."Item No.");
    ForBinCode := TrackingSpecification."Bin Code";
    SetFilters(TrackingSpecification);
    TempTrackingSpecification.DELETEALL;
    TempItemTrackLineInsert.DELETEALL;
    TempItemTrackLineModify.DELETEALL;
    TempItemTrackLineDelete.DELETEALL;
    
    ...
Page<Item Tracking Lines>.PROCEDURE<OnBeforeUpdateUndefinedQty>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<UpdateUndefinedQty>
    Code lines:
    IsHandled := FALSE;
    OnBeforeUpdateUndefinedQty(Rec,TotalItemTrackingLine,UndefinedQtyArray,SourceQuantityArray,ReturnValue,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(ReturnValue);
    
    UpdateUndefinedQtyArray;
    IF ProdOrderLineHandling THEN // Avoid check for prod.journal lines
      EXIT(TRUE);
    EXIT(ABS(SourceQuantityArray[1]) >= ABS(TotalItemTrackingLine."Quantity (Base)"));
Page<Item Tracking Lines>.PROCEDURE<OnBeforeWriteToDatabase>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<WriteToDatabase>
    Code lines:
    OnBeforeWriteToDatabase(Rec,CurrentPageIsOpen); <=====================
    IF CurrentPageIsOpen THEN BEGIN
      TempReservEntry.LOCKTABLE;
      TempRecValid;
    
      IF Item."Order Tracking Policy" = Item."Order Tracking Policy"::None THEN
        QtyToAddAsBlank := 0
      ELSE
        QtyToAddAsBlank := UndefinedQtyArray[1] * CurrentSignFactor;
    
    ...
Page<Item Tracking Lines>.PROCEDURE<OnInsertRecordOnBeforeTempItemTrackLineInsert>
  Raised in: Page<Item Tracking Lines>.<OnInsertRecord>
    Code lines:
    ...
      EXIT(FALSE);
    "Entry No." := NextEntryNo;
    IF (NOT InsertIsBlocked) AND (NOT ZeroLineExists) THEN
      IF VerifyNewTrackingSpecification THEN BEGIN
        TempItemTrackLineInsert.TRANSFERFIELDS(Rec);
        OnInsertRecordOnBeforeTempItemTrackLineInsert(TempItemTrackLineInsert,Rec); <=====================
        TempItemTrackLineInsert.INSERT;
        INSERT;
        ItemTrackingDataCollection.UpdateTrackingDataSetWithChange(
          TempItemTrackLineInsert,CurrentSignFactor * SourceQuantityArray[1] < 0,CurrentSignFactor,0);
    ...
Page<Item Tracking Lines>.PROCEDURE<OnRegisterChangeOnAfterCreateReservEntry>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<RegisterChange>
    Code lines:
    ...
            OldTrackingSpecification."Location Code",
            OldTrackingSpecification.Description,
            ExpectedReceiptDate,
            ShipmentDate,0,CurrentEntryStatus);
          CreateReservEntry.GetLastEntry(ReservEntry1);
          OnRegisterChangeOnAfterCreateReservEntry(ReservEntry1,NewTrackingSpecification,OldTrackingSpecification); <=====================
    
          IF Item."Order Tracking Policy" = Item."Order Tracking Policy"::"Tracking & Action Msg." THEN
            ReservEngineMgt.UpdateActionMessages(ReservEntry1);
    
    ...
Page<Item Tracking Lines>.PROCEDURE<OnRegisterChangeOnAfterModify>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<RegisterChange>
    Code lines:
    ...
                ItemTrackingCode."SN Specific Tracking",ItemTrackingCode."Lot Specific Tracking");
            TempReservEntry.ClearTrackingFilter;
            RegisterChange(NewTrackingSpecification,NewTrackingSpecification,
              ChangeType::PartDelete,NOT IdenticalArray[2]);
          END;
          OnRegisterChangeOnAfterModify(NewTrackingSpecification,OldTrackingSpecification); <=====================
          OK := TRUE;
        END;
      ChangeType::FullDelete,
      ChangeType::PartDelete:
    ...
Page<Item Tracking Lines>.PROCEDURE<OnSelectEntriesOnAfterTransferFields>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<SelectEntries>
    Code lines:
    ...
            BEGIN
              IF TempItemTrackLineModify.GET("Entry No.") THEN
                TempItemTrackLineModify.DELETE;
              IF TempItemTrackLineInsert.GET("Entry No.") THEN BEGIN
                TempItemTrackLineInsert.TRANSFERFIELDS(Rec);
                OnSelectEntriesOnAfterTransferFields(TempItemTrackLineInsert,Rec); <=====================
                TempItemTrackLineInsert.MODIFY;
              END ELSE BEGIN
                TempItemTrackLineModify.TRANSFERFIELDS(Rec);
                OnSelectEntriesOnAfterTransferFields(TempItemTrackLineModify,Rec); <=====================
    ...
  Raised in: Page<Item Tracking Lines>.PROCEDURE<SelectEntries>
    Code lines:
    ...
            BEGIN
              IF TempItemTrackLineModify.GET("Entry No.") THEN
                TempItemTrackLineModify.DELETE;
              IF TempItemTrackLineInsert.GET("Entry No.") THEN BEGIN
                TempItemTrackLineInsert.TRANSFERFIELDS(Rec);
                OnSelectEntriesOnAfterTransferFields(TempItemTrackLineInsert,Rec); <=====================
                TempItemTrackLineInsert.MODIFY;
              END ELSE BEGIN
                TempItemTrackLineModify.TRANSFERFIELDS(Rec);
                OnSelectEntriesOnAfterTransferFields(TempItemTrackLineModify,Rec); <=====================
    ...
  Raised in: Page<Item Tracking Lines>.PROCEDURE<SelectEntries>
    Code lines:
    ...
            BEGIN
              IF TempItemTrackLineModify.GET("Entry No.") THEN
                TempItemTrackLineModify.DELETE;
              IF TempItemTrackLineInsert.GET("Entry No.") THEN BEGIN
                TempItemTrackLineInsert.TRANSFERFIELDS(Rec);
                OnSelectEntriesOnAfterTransferFields(TempItemTrackLineInsert,Rec); <=====================
                TempItemTrackLineInsert.MODIFY;
              END ELSE BEGIN
                TempItemTrackLineModify.TRANSFERFIELDS(Rec);
                OnSelectEntriesOnAfterTransferFields(TempItemTrackLineModify,Rec); <=====================
    ...
Page<Item Tracking Lines>.PROCEDURE<OnSetQtyToHandleAndInvoiceOnBeforeReservEntryModify>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<SetQtyToHandleAndInvoice>
    Code lines:
    ...
            IF (ReservEntry1."Qty. to Handle (Base)" <> QtyToHandleThisLine) OR
               (ReservEntry1."Qty. to Invoice (Base)" <> QtyToInvoiceThisLine) AND NOT ReservEntry1.Correction
            THEN BEGIN
              ReservEntry1."Qty. to Handle (Base)" := QtyToHandleThisLine;
              ReservEntry1."Qty. to Invoice (Base)" := QtyToInvoiceThisLine;
              OnSetQtyToHandleAndInvoiceOnBeforeReservEntryModify(ReservEntry1,TrackingSpecification); <=====================
              ReservEntry1.MODIFY;
            END;
            TotalQtyToHandle -= QtyToHandleThisLine;
            TotalQtyToInvoice -= QtyToInvoiceThisLine;
    ...
  Raised in: Page<Item Tracking Lines>.PROCEDURE<SetQtyToHandleAndInvoice>
    Code lines:
    ...
            IF (ReservEntry1."Qty. to Handle (Base)" <> QtyToHandleThisLine) OR
               (ReservEntry1."Qty. to Invoice (Base)" <> QtyToInvoiceThisLine) AND NOT ReservEntry1.Correction
            THEN BEGIN
              ReservEntry1."Qty. to Handle (Base)" := QtyToHandleThisLine;
              ReservEntry1."Qty. to Invoice (Base)" := QtyToInvoiceThisLine;
              OnSetQtyToHandleAndInvoiceOnBeforeReservEntryModify(ReservEntry1,TrackingSpecification); <=====================
              ReservEntry1.MODIFY;
            END;
            TotalQtyToHandle -= QtyToHandleThisLine;
            TotalQtyToInvoice -= QtyToInvoiceThisLine;
    ...
Page<Item Tracking Lines>.PROCEDURE<OnSetQtyToHandleAndInvoiceOnBeforeTrackingSpecModify>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<SetQtyToHandleAndInvoice>
    Code lines:
    ...
              TrackingSpecification."Quantity Handled (Base)" - TrackingSpecification."Quantity Invoiced (Base)";
            IF ABS(QtyToInvoiceThisLine) > ABS(TotalQtyToInvoice) THEN
              QtyToInvoiceThisLine := TotalQtyToInvoice;
            IF TrackingSpecification."Qty. to Invoice (Base)" <> QtyToInvoiceThisLine THEN BEGIN
              TrackingSpecification."Qty. to Invoice (Base)" := QtyToInvoiceThisLine;
              OnSetQtyToHandleAndInvoiceOnBeforeTrackingSpecModify(TrackingSpecification); <=====================
              TrackingSpecification.MODIFY;
            END;
            TotalQtyToInvoice -= QtyToInvoiceThisLine;
          END;
    ...
Page<Item Tracking Lines>.PROCEDURE<OnWriteToDatabaseOnBeforeRegisterDecrease>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<WriteToDatabase>
    Code lines:
    ...
      FOR ModifyLoop := 1 TO 2 DO BEGIN
        IF TempItemTrackLineModify.FIND('-') THEN
          REPEAT
            IF xTempItemTrackingLine.GET(TempItemTrackLineModify."Entry No.") THEN BEGIN
              // Process decreases before increases
              OnWriteToDatabaseOnBeforeRegisterDecrease(TempItemTrackLineModify); <=====================
              Decrease := (xTempItemTrackingLine."Quantity (Base)" > TempItemTrackLineModify."Quantity (Base)");
              IF ((ModifyLoop = 1) AND Decrease) OR ((ModifyLoop = 2) AND NOT Decrease) THEN BEGIN
                i := i + 1;
                IF (xTempItemTrackingLine."Serial No." <> TempItemTrackLineModify."Serial No.") OR
    ...
Page<Item Tracking Lines>.PROCEDURE<OnWriteToDatabaseOnBeforeRegisterInsert>
  Raised in: Page<Item Tracking Lines>.PROCEDURE<WriteToDatabase>
    Code lines:
    ...
          i := i + 1;
          IF i MOD 100 = 0 THEN
            Window.UPDATE(2,ROUND(i / NoOfLines * 10000,1));
          IF TempItemTrackLineModify.GET(TempItemTrackLineInsert."Entry No.") THEN
            TempItemTrackLineInsert.TRANSFERFIELDS(TempItemTrackLineModify);
          OnWriteToDatabaseOnBeforeRegisterInsert(TempItemTrackLineInsert); <=====================
          IF NOT RegisterChange(TempItemTrackLineInsert,TempItemTrackLineInsert,ChangeType::Insert,FALSE) THEN
            ERROR(Text005);
          IF (TempItemTrackLineInsert."Quantity (Base)" <> TempItemTrackLineInsert."Qty. to Handle (Base)") OR
             (TempItemTrackLineInsert."Quantity (Base)" <> TempItemTrackLineInsert."Qty. to Invoice (Base)")
    ...
Page<Whse. Item Tracking Lines>.PROCEDURE<OnAfterSetSource>
  Raised in: Page<Whse. Item Tracking Lines>.PROCEDURE<SetSource>
    Code lines:
    ...
    SetControlsAsReclass;
    
    SetFilters(Rec,FormSourceType);
    ItemTrackingMgt.UpdateQuantities(
      WhseWorksheetLine,TotalWhseItemTrackingLine,SourceQuantityArray,UndefinedQtyArray,FormSourceType);
    OnAfterSetSource(WhseWorksheetLine,WhseWrkshLine,SourceType); <=====================
    UpdateColorOfQty;
Page<Whse. Item Tracking Lines>.PROCEDURE<OnBeforeItemTrackingLineInsert>
  Raised in: Page<Whse. Item Tracking Lines>.PROCEDURE<InsertItemTrackingLine>
    Code lines:
    ...
    "Variant Code" := WhseWrkshLine."Variant Code";
    IF ("Expiration Date" <> 0D) AND (FormSourceType = DATABASE::"Internal Movement Line") THEN
      InitExpirationDate;
    IF WhseItemTrackingLine2.FINDLAST THEN;
    "Entry No." := WhseItemTrackingLine2."Entry No." + 1;
    OnBeforeItemTrackingLineInsert(Rec,WhseWrkshLine); <=====================
    INSERT;
Page<Sales Return Order>.PROCEDURE<OnBeforeStatisticsAction>
  Raised in: Page<Sales Return Order>.Action<Statistics>.<OnAction>
    Code lines:
    OnBeforeStatisticsAction(Rec,Handled); <=====================
    IF NOT Handled THEN BEGIN
      OpenSalesOrderStatistics;
      SalesCalcDiscByType.ResetRecalculateInvoiceDisc(Rec);
    END
Page<Sales Return Order Subform>.PROCEDURE<OnAfterValidateShortcutDimCode>
  Raised in: Page<Sales Return Order Subform>.Control<ShortcutDimCode3>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(3,ShortcutDimCode[3]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,3); <=====================
  Raised in: Page<Sales Return Order Subform>.Control<ShortcutDimCode4>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(4,ShortcutDimCode[4]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,4); <=====================
  Raised in: Page<Sales Return Order Subform>.Control<ShortcutDimCode5>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(5,ShortcutDimCode[5]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,5); <=====================
  Raised in: Page<Sales Return Order Subform>.Control<ShortcutDimCode6>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(6,ShortcutDimCode[6]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,6); <=====================
  Raised in: Page<Sales Return Order Subform>.Control<ShortcutDimCode7>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(7,ShortcutDimCode[7]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,7); <=====================
  Raised in: Page<Sales Return Order Subform>.Control<ShortcutDimCode8>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(8,ShortcutDimCode[8]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,8); <=====================
Page<Sales Return Order Subform>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Sales Return Order Subform>.PROCEDURE<InsertExtendedText>
    Code lines:
    IsHandled := FALSE;
    OnBeforeInsertExtendedText(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF TransferExtendedText.SalesCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      COMMIT;
      TransferExtendedText.InsertSalesExtText(Rec);
    END;
    ...
Page<Sales Return Order Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
  Raised in: Page<Sales Return Order Subform>.<Control>.<OnLookup>
    Code lines:
    CrossReferenceNoLookUp;
    NoOnAfterValidate;
    OnCrossReferenceNoOnLookup(Rec); <=====================
Page<Purchase Return Order Subform>.PROCEDURE<OnAfterValidateShortcutDimCode>
  Raised in: Page<Purchase Return Order Subform>.Control<ShortcutDimCode3>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(3,ShortcutDimCode[3]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,3); <=====================
  Raised in: Page<Purchase Return Order Subform>.Control<ShortcutDimCode4>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(4,ShortcutDimCode[4]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,4); <=====================
  Raised in: Page<Purchase Return Order Subform>.Control<ShortcutDimCode5>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(5,ShortcutDimCode[5]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,5); <=====================
  Raised in: Page<Purchase Return Order Subform>.Control<ShortcutDimCode6>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(6,ShortcutDimCode[6]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,6); <=====================
  Raised in: Page<Purchase Return Order Subform>.Control<ShortcutDimCode7>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(7,ShortcutDimCode[7]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,7); <=====================
  Raised in: Page<Purchase Return Order Subform>.Control<ShortcutDimCode8>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(8,ShortcutDimCode[8]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,8); <=====================
Page<Purchase Return Order Subform>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Purchase Return Order Subform>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    IF TransferExtendedText.PurchCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      TransferExtendedText.InsertPurchExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      UpdateForm(TRUE);
Page<Purchase Return Order Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
  Raised in: Page<Purchase Return Order Subform>.<Control>.<OnLookup>
    Code lines:
    CrossReferenceNoLookUp;
    InsertExtendedText(FALSE);
    NoOnAfterValidate;
    OnCrossReferenceNoOnLookup(Rec); <=====================
Page<Return Shipment Lines>.PROCEDURE<OnOpenPageOnSetFilters>
  Raised in: Page<Return Shipment Lines>.<OnOpenPage>
    Code lines:
    FILTERGROUP(2);
    SETRANGE(Type,Type::Item);
    SETFILTER(Quantity,'<>0');
    SETRANGE(Correction,FALSE);
    SETRANGE("Job No.",'');
    OnOpenPageOnSetFilters(Rec); <=====================
    FILTERGROUP(0);
Page<Job Queue Log Entries>.PROCEDURE<OnShowDetails>
  Raised in: Page<Job Queue Log Entries>.Action<Details>.<OnAction>
    Code lines:
    OnShowDetails(Rec); <=====================
Page<Error Messages>.PROCEDURE<OnDrillDown>
  Raised in: Page<Error Messages>.PROCEDURE<HandleDrillDown>
    Code lines:
    OnDrillDown(Rec,SourceFieldNo,IsHandled); <=====================
    IF NOT IsHandled THEN
      CASE SourceFieldNo OF
        FIELDNO("Context Record ID"):
          PageManagement.PageRunAtField("Context Record ID","Context Field Number",FALSE);
        FIELDNO("Record ID"):
          PageManagement.PageRunAtField("Record ID","Field Number",FALSE);
      END
Page<Error Messages>.PROCEDURE<OnOpenRelatedRecord>
  Raised in: Page<Error Messages>.Action<OpenRelatedRecord>.<OnAction>
    Code lines:
    OnOpenRelatedRecord(Rec,IsHandled); <=====================
    IF NOT IsHandled THEN
      PageManagement.PageRun("Record ID");
Page<VAT Report>.PROCEDURE<OnAfterInitPageControllers>
  Raised in: Page<VAT Report>.PROCEDURE<InitPageControllers>
    Code lines:
    ...
      (Status = Status::Accepted) OR
      (Status = Status::Closed);
    CalcAndPostVATStatus := Status = Status::Accepted;
    ReopenControllerStatus := Status = Status::Released;
    InitReturnPeriodGroup;
    OnAfterInitPageControllers(Rec,SubmitControllerStatus,MarkAsSubmitControllerStatus); <=====================
Page<Item Attribute Value List>.PROCEDURE<OnAfterItemAttributeValueMappingDelete>
  Raised in: Page<Item Attribute Value List>.PROCEDURE<DeleteItemAttributeValueMapping>
    Code lines:
    ItemAttributeValueMapping.SETRANGE("Table ID",DATABASE::Item);
    ItemAttributeValueMapping.SETRANGE("No.",RelatedRecordCode);
    ItemAttributeValueMapping.SETRANGE("Item Attribute ID",AttributeToDeleteID);
    IF ItemAttributeValueMapping.FINDFIRST THEN BEGIN
      ItemAttributeValueMapping.DELETE;
      OnAfterItemAttributeValueMappingDelete(AttributeToDeleteID,RelatedRecordCode); <=====================
    END;
    
    ItemAttribute.GET(AttributeToDeleteID);
    ItemAttribute.RemoveUnusedArbitraryValues;
Page<Item Attribute Value List>.PROCEDURE<OnBeforeItemAttributeValueMappingModify>
  Raised in: Page<Item Attribute Value List>.Control<Value>.<OnValidate>
    Code lines:
    ...
    ItemAttributeValueMapping.SETRANGE("No.",RelatedRecordCode);
    ItemAttributeValueMapping.SETRANGE("Item Attribute ID",ItemAttributeValue."Attribute ID");
    
    IF ItemAttributeValueMapping.FINDFIRST THEN BEGIN
      ItemAttributeValueMapping."Item Attribute Value ID" := ItemAttributeValue.ID;
      OnBeforeItemAttributeValueMappingModify(ItemAttributeValueMapping,ItemAttributeValue,RelatedRecordCode); <=====================
      ItemAttributeValueMapping.MODIFY;
    END;
    
    ItemAttribute.GET("Attribute ID");
    ...
Page<Online Map Address Selector>.PROCEDURE<OnLoadLocationLookupElseCase>
  Raised in: Page<Online Map Address Selector>.PROCEDURE<LoadLocationLookup>
    Code lines:
    ...
      DATABASE::"Ship-to Address":
        EXIT(LoadShipTo(LookupCode,Lookup));
      DATABASE::"Order Address":
        EXIT(LoadOrderAddress(LookupCode,Lookup));
      ELSE BEGIN
        OnLoadLocationLookupElseCase(LoadTableNo,LookupCode,Lookup,SelectedRecPosition,IsHandled); <=====================
        IF IsHandled THEN
          EXIT(SelectedRecPosition);
    
        ERROR(Text004,FORMAT(LoadTableNo));
    ...
Page<Online Map Address Selector>.PROCEDURE<OnSetTableNoElseCase>
  Raised in: Page<Online Map Address Selector>.PROCEDURE<SetTableNo>
    Code lines:
    ...
        SelectedTableNo := DATABASE::"Ship-to Address";
      LookupSelection::"Order Address":
        SelectedTableNo := DATABASE::"Order Address";
      ELSE BEGIN
        IsHandled := FALSE;
        OnSetTableNoElseCase(LookupSelection,SelectedTableNo,IsHandled); <=====================
        IF NOT IsHandled THEN
          ERROR(Text001);
      END;
    END;
Page<Invite External Accountant>.PROCEDURE<OnInvitationEnd>
  Raised in: Page<Invite External Accountant>.Action<ActionNext>.<OnAction>
    Code lines:
    IF Step = Step::DefineInformation THEN BEGIN
      IF (NewUserEmailAddress <> '') AND (NewFirstName <> '') AND (NewLastName <> '') AND (NewUserWelcomeEmail <> '') THEN BEGIN
        IF InviteExternalAccountant.InvokeEmailAddressIsAADAccount(NewUserEmailAddress,ErrorMessage) THEN BEGIN
          Invite;
          OnInvitationEnd(WasInvitationSuccessful,InvitationResult,TargetLicense); <=====================
          NextStep(FALSE);
        END ELSE
          ERROR(ErrorMessage);
      END ELSE
        ERROR(NotAllFieldsEnteredErrorErr);
    ...
Page<Invite External Accountant>.PROCEDURE<OnInvitationNoAADPermissionsFail>
  Raised in: Page<Invite External Accountant>.<OnOpenPage>
    Code lines:
    ...
      OnInvitationNoExternalAccountantLicenseFail;
      ERROR(NoExternalAccountantLicenseAvailableErr);
    END;
    
    IF NOT InviteExternalAccountant.InvokeIsUserAdministrator THEN BEGIN
      OnInvitationNoAADPermissionsFail; <=====================
      ERROR(NoAADPermissionsErr);
    END;
    
    IF NOT (NavUserAccountHelper.IsSessionAdminSession OR NavUserAccountHelper.IsUserSuperInAllCompanies) THEN BEGIN
    ...
Page<Invite External Accountant>.PROCEDURE<OnInvitationNoExternalAccountantLicenseFail>
  Raised in: Page<Invite External Accountant>.<OnOpenPage>
    Code lines:
    ...
    
    IF NOT InviteExternalAccountant.VerifySMTPIsEnabledAndSetup THEN
      ERROR(SMTPMustBeSetupErrorErr);
    
    IF NOT InviteExternalAccountant.InvokeIsExternalAccountantLicenseAvailable(ErrorMessage,TargetLicense) THEN BEGIN
      OnInvitationNoExternalAccountantLicenseFail; <=====================
      ERROR(NoExternalAccountantLicenseAvailableErr);
    END;
    
    IF NOT InviteExternalAccountant.InvokeIsUserAdministrator THEN BEGIN
    ...
Page<Invite External Accountant>.PROCEDURE<OnInvitationNoUserTablePermissionsFail>
  Raised in: Page<Invite External Accountant>.<OnOpenPage>
    Code lines:
    ...
      OnInvitationNoAADPermissionsFail;
      ERROR(NoAADPermissionsErr);
    END;
    
    IF NOT (NavUserAccountHelper.IsSessionAdminSession OR NavUserAccountHelper.IsUserSuperInAllCompanies) THEN BEGIN
      OnInvitationNoUserTablePermissionsFail; <=====================
      ERROR(NoUserTableWritePermissionErr);
    END;
    
    ProgressWindow.CLOSE;
    ...
Page<Invite External Accountant>.PROCEDURE<OnInvitationStart>
  Raised in: Page<Invite External Accountant>.<OnOpenPage>
    Code lines:
    OnInvitationStart; <=====================
    IF NOT PermissionManager.SoftwareAsAService THEN
      ERROR(SaaSOnlyErrorErr);
    
    ProgressWindow.OPEN(WizardOpenValidationMsg);
    
    IF NOT InviteExternalAccountant.VerifySMTPIsEnabledAndSetup THEN
      ERROR(SMTPMustBeSetupErrorErr);
    
    IF NOT InviteExternalAccountant.InvokeIsExternalAccountantLicenseAvailable(ErrorMessage,TargetLicense) THEN BEGIN
    ...
Page<Approval Comments FactBox>.PROCEDURE<OnAfterSetFilterFromApprovalEntry>
  Raised in: Page<Approval Comments FactBox>.PROCEDURE<SetFilterFromApprovalEntry>
    Code lines:
    SETRANGE("Record ID to Approve",ApprovalEntry."Record ID to Approve");
    SETRANGE("Workflow Step Instance ID",ApprovalEntry."Workflow Step Instance ID");
    OnAfterSetFilterFromApprovalEntry(Rec,ApprovalEntry); <=====================
    CurrPage.UPDATE(FALSE);
    EXIT(NOT ISEMPTY);
Page<My Settings>.PROCEDURE<OnBeforeLanguageChange>
  Raised in: Page<My Settings>.<OnQueryClosePage>
    Code lines:
    ...
            sessionSetting.PROFILEAPPID := ProfileAppID;
            sessionSetting.PROFILESYSTEMSCOPE := ProfileScope = ProfileScope::System;
          END;
    
          IF "Language ID" <> LanguageID THEN BEGIN
            OnBeforeLanguageChange("Language ID",LanguageID); <=====================
            sessionSetting.LANGUAGEID := LanguageID;
          END;
    
          IF "Locale ID" <> LocaleID THEN
    ...
Page<My Settings>.PROCEDURE<OnBeforeWorkdateChange>
  Raised in: Page<My Settings>.Control<NewWorkdate>.<OnValidate>
    Code lines:
    IF NewWorkdate <> WORKDATE THEN
      OnBeforeWorkdateChange(WORKDATE,NewWorkdate); <=====================
    
    WORKDATE := NewWorkdate;
Page<My Settings>.PROCEDURE<OnCompanyChange>
  Raised in: Page<My Settings>.Control<Company>.<OnAssistEdit>
    Code lines:
    ...
    
    AllowedCompanies.LOOKUPMODE(TRUE);
    
    IF AllowedCompanies.RUNMODAL = ACTION::LookupOK THEN BEGIN
      AllowedCompanies.GETRECORD(SelectedCompany);
      OnCompanyChange(SelectedCompany.Name,IsSetupInProgress); <=====================
      IF IsSetupInProgress THEN BEGIN
        VarCompany := COMPANYNAME;
        MESSAGE(STRSUBSTNO(CompanySetUpInProgressMsg,SelectedCompany.Name,PRODUCTNAME.SHORT));
      END ELSE
    ...
Page<My Settings>.PROCEDURE<OnQueryClosePageEvent>
  Raised in: Page<My Settings>.<OnQueryClosePage>
    Code lines:
    ...
      END;
    
      IF WasEvaluation AND IsTrial THEN
        MESSAGE(STRSUBSTNO(TrialStartMsg,PRODUCTNAME.MARKETING));
    
      OnQueryClosePageEvent(LanguageID,LocaleID,TimeZoneID,VarCompany,ProfileID); <=====================
    
      IF AnythingUpdated THEN
        sessionSetting.REQUESTSESSIONUPDATE(TRUE);
    END;
Page<My Settings>.PROCEDURE<OnUserRoleCenterChange>
  Raised in: Page<My Settings>.Control<UserRoleCenter>.<OnAssistEdit>
    Code lines:
    ...
        ProfileAppID := AllProfile."App ID";
        ProfileScope := AllProfile.Scope;
      END;
    END;
    
    OnUserRoleCenterChange(ProfileID); <=====================
    UserPersonalizationCard.SetExperienceToEssential(ProfileID);
Page<Budget Matrix>.PROCEDURE<OnAfterSetIncomeBalanceGLAccFilterOnGLAcc>
  Raised in: Page<Budget Matrix>.PROCEDURE<SetIncomeBalanceGLAccFilterOnGLAcc>
    Code lines:
    ...
        GLAccount.SETRANGE("Income/Balance",GLAccount."Income/Balance"::"Balance Sheet");
      IncomeBalanceGLAccFilter::"Income Statement":
        GLAccount.SETRANGE("Income/Balance",GLAccount."Income/Balance"::"Income Statement");
    END;
    
    OnAfterSetIncomeBalanceGLAccFilterOnGLAcc(GLAccount); <=====================
Page<Resource Alloc. per Job Matrix>.PROCEDURE<OnAfterMatrixOnDrillDown>
  Raised in: Page<Resource Alloc. per Job Matrix>.PROCEDURE<MatrixOnDrillDown>
    Code lines:
    ...
      MatrixColumnDateFilters[Column]."Period End");
    JobPlanningLine.SETRANGE("Job No.","No.");
    JobPlanningLine.SETRANGE(Type,JobPlanningLine.Type::Resource);
    JobPlanningLine.SETRANGE("Schedule Line",TRUE);
    IsHandled := FALSE;
    OnAfterMatrixOnDrillDown(JobPlanningLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    PAGE.RUNMODAL(PAGE::"Job Planning Lines",JobPlanningLine);
Page<Resource Alloc. per Job Matrix>.PROCEDURE<OnMatrixOnAfterGetRecordOnBeforeMatrixRecLoop>
  Raised in: Page<Resource Alloc. per Job Matrix>.PROCEDURE<MatrixOnAfterGetRecord>
    Code lines:
    ...
      MatrixRec.SETFILTER("No.",GETRANGEMIN("Resource Filter"),GETRANGEMAX("Resource Filter"));
    FOR I := 1 TO ARRAYLEN(MatrixColumnDateFilters) DO BEGIN
      MatrixCellQuantity := 0;
      MatrixRec.SETRANGE(
        "Planning Date",GetStartDate(MatrixColumnDateFilters[I]."Period Start"),MatrixColumnDateFilters[I]."Period End");
      OnMatrixOnAfterGetRecordOnBeforeMatrixRecLoop(MatrixRec,MatrixCellQuantity); <=====================
      IF MatrixRec.FIND('-') THEN
        REPEAT
          MatrixCellQuantity += ROUND(MatrixRec.Quantity * MatrixRec."Qty. per Unit of Measure",UOMMgt.QtyRndPrecision)
        UNTIL MatrixRec.NEXT = 0;
    ...
Page<ResGrp. Alloc. per Job Matrix>.PROCEDURE<OnAfterMatrixOnDrillDown>
  Raised in: Page<ResGrp. Alloc. per Job Matrix>.PROCEDURE<MatrixOnDrillDown>
    Code lines:
    ...
      "Planning Date",MatrixColumnDateFilters[Column]."Period Start",MatrixColumnDateFilters[Column]."Period End");
    JobPlanningLine.SETRANGE("Job No.","No.");
    JobPlanningLine.SETRANGE(Type,JobPlanningLine.Type::Resource);
    JobPlanningLine.SETRANGE("Schedule Line",TRUE);
    IsHandled := FALSE;
    OnAfterMatrixOnDrillDown(JobPlanningLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    PAGE.RUNMODAL(PAGE::"Job Planning Lines",JobPlanningLine);
Page<ResGrp. Alloc. per Job Matrix>.PROCEDURE<OnMatrixOnAfterGetRecordOnBeforeMatrixRecLoop>
  Raised in: Page<ResGrp. Alloc. per Job Matrix>.PROCEDURE<MatrixOnAfterGetRecord>
    Code lines:
    ...
    
    FOR I := 1 TO ARRAYLEN(MatrixColumnDateFilters) DO BEGIN
      MatrixCellQuantity := 0;
      MatrixRec.SETRANGE(
        "Planning Date",MatrixColumnDateFilters[I]."Period Start",MatrixColumnDateFilters[I]."Period End");
      OnMatrixOnAfterGetRecordOnBeforeMatrixRecLoop(MatrixRec,MatrixCellQuantity); <=====================
      IF MatrixRec.FIND('-') THEN
        REPEAT
          MatrixCellQuantity += ROUND(MatrixRec.Quantity * MatrixRec."Qty. per Unit of Measure",UOMMgt.QtyRndPrecision)
        UNTIL MatrixRec.NEXT = 0;
    ...
Page<Item Statistics Matrix>.PROCEDURE<OnSetFiltersElseCase>
  Raised in: Page<Item Statistics Matrix>.PROCEDURE<SetFilters>
    Code lines:
    ...
            SETRANGE("Variance Type Filter","Variance Type Filter"::" ");
            SETRANGE("Item Ledger Entry Type Filter","Item Ledger Entry Type Filter"::Sale);
            SETRANGE("Item Charge No. Filter",DimCodeBuf.Code);
          END;
        ELSE
          OnSetFiltersElseCase(ItemBuffer,DimCodeBuf); <=====================
      END;
      IF GETFILTER("Item Ledger Entry Type Filter") = '' THEN
        SETFILTER(
          "Item Ledger Entry Type Filter",'<>%1',
    ...
Page<Resource Capacity Matrix>.PROCEDURE<OnAfterMatrixOnDrillDown>
  Raised in: Page<Resource Capacity Matrix>.PROCEDURE<MatrixOnDrillDown>
    Code lines:
    SetDateFilter(ColumnID);
    ResCapacityEntries.SETCURRENTKEY("Resource No.",Date);
    ResCapacityEntries.SETRANGE("Resource No.","No.");
    ResCapacityEntries.SETFILTER(Date,GETFILTER("Date Filter"));
    IsHandled := FALSE;
    OnAfterMatrixOnDrillDown(ResCapacityEntries,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    PAGE.RUN(0,ResCapacityEntries);
Page<Res. Group Capacity Matrix>.PROCEDURE<OnAfterMatrixOnDrillDown>
  Raised in: Page<Res. Group Capacity Matrix>.PROCEDURE<MatrixOnDrillDown>
    Code lines:
    SetDateFilter(ColumnID);
    ResCapacityEntries.SETCURRENTKEY("Resource Group No.",Date);
    ResCapacityEntries.SETRANGE("Resource Group No.","No.");
    ResCapacityEntries.SETFILTER(Date,GETFILTER("Date Filter"));
    IsHandled := FALSE;
    OnAfterMatrixOnDrillDown(ResCapacityEntries,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    PAGE.RUN(0,ResCapacityEntries);
Page<Available - Assembly Headers>.PROCEDURE<OnAfterSetFilters>
  Raised in: Page<Available - Assembly Headers>.PROCEDURE<SetFilters>
    Code lines:
    ...
    IF ReservMgt.IsPositive THEN
      SETFILTER("Remaining Quantity (Base)",'>0')
    ELSE
      SETFILTER("Remaining Quantity (Base)",'<0');
    
    OnAfterSetFilters(Rec,ReservEntry); <=====================
Page<Available - Assembly Headers>.PROCEDURE<OnAfterUpdateReservFrom>
  Raised in: Page<Available - Assembly Headers>.PROCEDURE<UpdateReservFrom>
    Code lines:
    ...
          JobPlanningLine.FIND;
          SetJobPlanningLine(JobPlanningLine,ReservEntry);
        END;
    END;
    
    OnAfterUpdateReservFrom; <=====================
Page<Available - Assembly Headers>.PROCEDURE<OnAfterUpdateReservMgt>
  Raised in: Page<Available - Assembly Headers>.PROCEDURE<UpdateReservMgt>
    Code lines:
    ...
        ReservMgt.SetJobPlanningLine(JobPlanningLine);
      DATABASE::"Assembly Line":
        ReservMgt.SetAssemblyLine(AssemblyLine);
    END;
    
    OnAfterUpdateReservMgt; <=====================
Page<Available - Assembly Lines>.PROCEDURE<OnAfterSetFilters>
  Raised in: Page<Available - Assembly Lines>.PROCEDURE<SetFilters>
    Code lines:
    ...
    IF ReservMgt.IsPositive THEN
      SETFILTER("Remaining Quantity (Base)",'<0')
    ELSE
      SETFILTER("Remaining Quantity (Base)",'>0');
    
    OnAfterSetFilters(Rec,ReservEntry); <=====================
Page<Available - Assembly Lines>.PROCEDURE<OnAfterUpdateReservFrom>
  Raised in: Page<Available - Assembly Lines>.PROCEDURE<UpdateReservFrom>
    Code lines:
    ...
          JobPlanningLine.FIND;
          SetJobPlanningLine(JobPlanningLine,ReservEntry);
        END;
    END;
    
    OnAfterUpdateReservFrom; <=====================
Page<Available - Assembly Lines>.PROCEDURE<OnAfterUpdateReservMgt>
  Raised in: Page<Available - Assembly Lines>.PROCEDURE<UpdateReservMgt>
    Code lines:
    ...
        ReservMgt.SetServLine(ServiceLine);
      DATABASE::"Assembly Header":
        ReservMgt.SetAssemblyHeader(AssemblyHeader);
    END;
    
    OnAfterUpdateReservMgt; <=====================
Page<Sales Quote Subform>.PROCEDURE<OnAfterValidateShortcutDimCode>
  Raised in: Page<Sales Quote Subform>.PROCEDURE<ValidateShortcutDimension>
    Code lines:
    ValidateShortcutDimCode(DimIndex,ShortcutDimCode[DimIndex]);
    AssembleToOrderLink.UpdateAsmDimFromSalesLine(Rec);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,DimIndex); <=====================
Page<Sales Quote Subform>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Sales Quote Subform>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    IF TransferExtendedText.SalesCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      COMMIT;
      TransferExtendedText.InsertSalesExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      UpdateForm(TRUE);
Page<Sales Quote Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
  Raised in: Page<Sales Quote Subform>.<Control>.<OnLookup>
    Code lines:
    CrossReferenceNoLookUp;
    InsertExtendedText(FALSE);
    NoOnAfterValidate;
    OnCrossReferenceNoOnLookup(Rec); <=====================
Page<Time Sheet>.PROCEDURE<OnAfterFilterAllLines>
  Raised in: Page<Time Sheet>.PROCEDURE<FilterAllLines>
    Code lines:
    ...
        TimeSheetLine.SETFILTER(Status,'%1|%2',TimeSheetLine.Status::Open,TimeSheetLine.Status::Rejected);
      ActionType::Reopen:
        TimeSheetLine.SETRANGE(Status,TimeSheetLine.Status::Submitted);
    END;
    
    OnAfterFilterAllLines(TimeSheetLine,ActionType); <=====================
Page<Time Sheet>.PROCEDURE<OnAfterProcess>
  Raised in: Page<Time Sheet>.PROCEDURE<Process>
    Code lines:
    ...
          Action::"Reopen Selected",
          Action::"Reopen All":
            TimeSheetApprovalMgt.ReopenSubmitted(TimeSheetLine);
        END;
      UNTIL TimeSheetLine.NEXT = 0;
    OnAfterProcess(TempTimeSheetLine,Action); <=====================
    CurrPage.UPDATE(TRUE);
Page<Time Sheet>.PROCEDURE<OnProcessOnAfterTimeSheetLinesFiltered>
  Raised in: Page<Time Sheet>.PROCEDURE<Process>
    Code lines:
    ...
      Action::"Reopen All":
        FilterAllLines(TimeSheetLine,ActionType::Reopen);
      ELSE
        CurrPage.SETSELECTIONFILTER(TimeSheetLine);
    END;
    OnProcessOnAfterTimeSheetLinesFiltered(TimeSheetLine,Action); <=====================
    TimeSheetMgt.CopyFilteredTimeSheetLinesToBuffer(TimeSheetLine,TempTimeSheetLine);
    IF TimeSheetLine.FINDSET THEN
      REPEAT
        CASE Action OF
    ...
Page<Manager Time Sheet>.PROCEDURE<OnAfterFilterAllLines>
  Raised in: Page<Manager Time Sheet>.PROCEDURE<FilterAllLines>
    Code lines:
    ...
        TimeSheetLine.SETRANGE(Status,TimeSheetLine.Status::Submitted);
      ActionType::Reopen:
        TimeSheetLine.SETRANGE(Status,TimeSheetLine.Status::Approved);
    END;
    
    OnAfterFilterAllLines(TimeSheetLine,ActionType); <=====================
Page<Manager Time Sheet>.PROCEDURE<OnAfterProcess>
  Raised in: Page<Manager Time Sheet>.PROCEDURE<Process>
    Code lines:
    ...
          Action::"Reject Selected",
          Action::"Reject All":
            TimeSheetApprovalMgt.Reject(TimeSheetLine);
        END;
      UNTIL TimeSheetLine.NEXT = 0;
    OnAfterProcess(TempTimeSheetLine,Action); <=====================
    CurrPage.UPDATE(FALSE);
Page<Manager Time Sheet>.PROCEDURE<OnProcessOnAfterTimeSheetLinesFiltered>
  Raised in: Page<Manager Time Sheet>.PROCEDURE<Process>
    Code lines:
    ...
      Action::"Reopen All":
        FilterAllLines(TimeSheetLine,ActionType::Reopen);
      ELSE
        CurrPage.SETSELECTIONFILTER(TimeSheetLine);
    END;
    OnProcessOnAfterTimeSheetLinesFiltered(TimeSheetLine,Action); <=====================
    TimeSheetMgt.CopyFilteredTimeSheetLinesToBuffer(TimeSheetLine,TempTimeSheetLine);
    IF TimeSheetLine.FINDSET THEN
      REPEAT
        CASE Action OF
    ...
Page<Manager Time Sheet by Job>.PROCEDURE<OnAfterFilterAllLines>
  Raised in: Page<Manager Time Sheet by Job>.PROCEDURE<FilterAllLines>
    Code lines:
    ...
        TimeSheetLine.SETRANGE(Status,TimeSheetLine.Status::Submitted);
      ActionType::Reopen:
        TimeSheetLine.SETRANGE(Status,TimeSheetLine.Status::Approved);
    END;
    
    OnAfterFilterAllLines(TimeSheetLine,ActionType); <=====================
Page<Manager Time Sheet by Job>.PROCEDURE<OnAfterProcess>
  Raised in: Page<Manager Time Sheet by Job>.PROCEDURE<Process>
    Code lines:
    ...
          Action::"Reject Selected",
          Action::"Reject All":
            TimeSheetApprovalMgt.Reject(TimeSheetLine);
        END;
      UNTIL TimeSheetLine.NEXT = 0;
    OnAfterProcess(TempTimeSheetLine,Action); <=====================
    CurrPage.UPDATE(FALSE);
Page<Manager Time Sheet by Job>.PROCEDURE<OnProcessOnAfterTimeSheetLinesFiltered>
  Raised in: Page<Manager Time Sheet by Job>.PROCEDURE<Process>
    Code lines:
    ...
      Action::"Reopen All":
        FilterAllLines(TimeSheetLine,ActionType::Reopen);
      ELSE
        CurrPage.SETSELECTIONFILTER(TimeSheetLine);
    END;
    OnProcessOnAfterTimeSheetLinesFiltered(TimeSheetLine,Action); <=====================
    TimeSheetMgt.CopyFilteredTimeSheetLinesToBuffer(TimeSheetLine,TempTimeSheetLine);
    IF TimeSheetLine.FINDSET THEN
      REPEAT
        CASE Action OF
    ...
Page<Sales Cr. Memo Subform>.PROCEDURE<OnAfterValidateShortcutDimCode>
  Raised in: Page<Sales Cr. Memo Subform>.Control<ShortcutDimCode3>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(3,ShortcutDimCode[3]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,3); <=====================
  Raised in: Page<Sales Cr. Memo Subform>.Control<ShortcutDimCode4>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(4,ShortcutDimCode[4]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,4); <=====================
  Raised in: Page<Sales Cr. Memo Subform>.Control<ShortcutDimCode5>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(5,ShortcutDimCode[5]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,5); <=====================
  Raised in: Page<Sales Cr. Memo Subform>.Control<ShortcutDimCode6>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(6,ShortcutDimCode[6]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,6); <=====================
  Raised in: Page<Sales Cr. Memo Subform>.Control<ShortcutDimCode7>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(7,ShortcutDimCode[7]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,7); <=====================
  Raised in: Page<Sales Cr. Memo Subform>.Control<ShortcutDimCode8>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(8,ShortcutDimCode[8]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,8); <=====================
Page<Sales Cr. Memo Subform>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Sales Cr. Memo Subform>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    IF TransferExtendedText.SalesCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      COMMIT;
      TransferExtendedText.InsertSalesExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      UpdateForm(TRUE);
Page<Sales Cr. Memo Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
  Raised in: Page<Sales Cr. Memo Subform>.<Control>.<OnLookup>
    Code lines:
    CrossReferenceNoLookUp;
    InsertExtendedText(FALSE);
    NoOnAfterValidate;
    OnCrossReferenceNoOnLookup(Rec); <=====================
Page<Purchase Quote Subform>.PROCEDURE<OnAfterValidateShortcutDimCode>
  Raised in: Page<Purchase Quote Subform>.Control<ShortcutDimCode3>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(3,ShortcutDimCode[3]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,3); <=====================
  Raised in: Page<Purchase Quote Subform>.Control<ShortcutDimCode4>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(4,ShortcutDimCode[4]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,4); <=====================
  Raised in: Page<Purchase Quote Subform>.Control<ShortcutDimCode5>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(5,ShortcutDimCode[5]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,5); <=====================
  Raised in: Page<Purchase Quote Subform>.Control<ShortcutDimCode6>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(6,ShortcutDimCode[6]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,6); <=====================
  Raised in: Page<Purchase Quote Subform>.Control<ShortcutDimCode7>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(7,ShortcutDimCode[7]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,7); <=====================
  Raised in: Page<Purchase Quote Subform>.Control<ShortcutDimCode8>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(8,ShortcutDimCode[8]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,8); <=====================
Page<Purchase Quote Subform>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Purchase Quote Subform>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    IF TransferExtendedText.PurchCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      TransferExtendedText.InsertPurchExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      UpdateForm(TRUE);
Page<Purchase Quote Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
  Raised in: Page<Purchase Quote Subform>.<Control>.<OnLookup>
    Code lines:
    CrossReferenceNoLookUp;
    InsertExtendedText(FALSE);
    NoOnAfterValidate;
    OnCrossReferenceNoOnLookup(Rec); <=====================
Page<Purch. Cr. Memo Subform>.PROCEDURE<OnAfterValidateShortcutDimCode>
  Raised in: Page<Purch. Cr. Memo Subform>.Control<ShortcutDimCode3>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(3,ShortcutDimCode[3]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,3); <=====================
  Raised in: Page<Purch. Cr. Memo Subform>.Control<ShortcutDimCode4>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(4,ShortcutDimCode[4]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,4); <=====================
  Raised in: Page<Purch. Cr. Memo Subform>.Control<ShortcutDimCode5>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(5,ShortcutDimCode[5]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,5); <=====================
  Raised in: Page<Purch. Cr. Memo Subform>.Control<ShortcutDimCode6>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(6,ShortcutDimCode[6]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,6); <=====================
  Raised in: Page<Purch. Cr. Memo Subform>.Control<ShortcutDimCode7>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(7,ShortcutDimCode[7]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,7); <=====================
  Raised in: Page<Purch. Cr. Memo Subform>.Control<ShortcutDimCode8>.<OnValidate>
    Code lines:
    ValidateShortcutDimCode(8,ShortcutDimCode[8]);
    
    OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,8); <=====================
Page<Purch. Cr. Memo Subform>.PROCEDURE<OnBeforeInsertExtendedText>
  Raised in: Page<Purch. Cr. Memo Subform>.PROCEDURE<InsertExtendedText>
    Code lines:
    OnBeforeInsertExtendedText(Rec); <=====================
    IF TransferExtendedText.PurchCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
      CurrPage.SAVERECORD;
      TransferExtendedText.InsertPurchExtText(Rec);
    END;
    IF TransferExtendedText.MakeUpdate THEN
      UpdateForm(TRUE);
Page<Purch. Cr. Memo Subform>.PROCEDURE<OnCrossReferenceNoOnLookup>
  Raised in: Page<Purch. Cr. Memo Subform>.<Control>.<OnLookup>
    Code lines:
    CrossReferenceNoLookUp;
    InsertExtendedText(FALSE);
    NoOnAfterValidate;
    OnCrossReferenceNoOnLookup(Rec); <=====================
Page<Effective Permissions>.PROCEDURE<OnEffectivePermissionsPopulated>
  Raised in: Page<Effective Permissions>.PROCEDURE<FillByObject>
    Code lines:
    ...
    LastUsedUserID := CurrentUserID;
    LastUsedCompanyName := CurrentCompanyName;
    LastUsedObjectType := CurrentObjectType;
    LastUsedObjectId := CurrentObjectId;
    LastUsedShowAllObjects := ShowAllObjects;
    OnEffectivePermissionsPopulated(CurrentUserID,CurrentCompanyName,CurrentObjectType,CurrentObjectId); <=====================
Page<Production Order Statistics>.PROCEDURE<OnBeforeCalcVariance>
  Raised in: Page<Production Order Statistics>.PROCEDURE<CalcVariance>
    Code lines:
    FOR i := 1 TO ARRAYLEN(VarAmt) DO BEGIN
      IsHandled := FALSE;
      OnBeforeCalcVariance(VarAmt,VarPct,StdCost,ActCost,i,IsHandled); <=====================
      IF NOT IsHandled THEN BEGIN
        VarAmt[i] := ActCost[i] - StdCost[i];
        VarPct[i] := CalcIndicatorPct(StdCost[i],ActCost[i]);
      END;
    END;
Page<Prod. Order Components>.PROCEDURE<OnBeforeReserveComp>
  Raised in: Page<Prod. Order Components>.PROCEDURE<ReserveComp>
    Code lines:
    OnBeforeReserveComp(Rec,xRec); <=====================
    
    IF (xRec."Remaining Qty. (Base)" <> "Remaining Qty. (Base)") OR
       (xRec."Item No." <> "Item No.") OR
       (xRec."Location Code" <> "Location Code")
    THEN
      IF Item.GET("Item No.") THEN
        IF Item.Reserve = Item.Reserve::Always THEN BEGIN
          CurrPage.SAVERECORD;
          AutoReserve;
    ...
Page<Change Status on Prod. Order>.PROCEDURE<OnAfterSet>
  Raised in: Page<Change Status on Prod. Order>.PROCEDURE<Set>
    Code lines:
    ...
    ELSE
      ProdOrderStatus.Status := ProdOrderStatus.Status::"Firm Planned";
    
    PostingDate := WORKDATE;
    
    OnAfterSet; <=====================
Page<Sales Order Planning>.PROCEDURE<OnBeforeCreateProdOrder>
  Raised in: Page<Sales Order Planning>.PROCEDURE<CreateProdOrder>
    Code lines:
    ShowCreateOrderForm := TRUE;
    IsHandled := FALSE;
    OnBeforeCreateProdOrder(Rec,NewStatus,NewOrderType,ShowCreateOrderForm,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF ShowCreateOrderForm THEN BEGIN
      IF CreateOrderFromSales.RUNMODAL <> ACTION::Yes THEN
        EXIT;
    
    ...
Page<Sales Order Planning>.PROCEDURE<OnMakeLinesSetOnAfterSetFilters>
  Raised in: Page<Sales Order Planning>.PROCEDURE<MakeLines>
    Code lines:
    SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
    SalesLine.SETRANGE("Document No.",SalesHeader."No.");
    SalesLine.SETRANGE(Type,SalesLine.Type::Item);
    OnMakeLinesSetOnAfterSetFilters(SalesLine); <=====================
    IF SalesLine.FIND('-') THEN
      REPEAT
        INIT;
        "Sales Order No." := SalesLine."Document No.";
        "Sales Order Line No." := SalesLine."Line No.";
        "Item No." := SalesLine."No.";
    ...
Page<Work Center Load>.PROCEDURE<OnBeforeOpenPage>
  Raised in: Page<Work Center Load>.<OnOpenPage>
    Code lines:
    OnBeforeOpenPage(PeriodType,AmountType); <=====================
Page<Machine Center Load>.PROCEDURE<OnBeforeOpenPage>
  Raised in: Page<Machine Center Load>.<OnOpenPage>
    Code lines:
    OnBeforeOpenPage(PeriodType,AmountType); <=====================
Page<Available - Transfer Lines>.PROCEDURE<OnAfterSetFilters>
  Raised in: Page<Available - Transfer Lines>.PROCEDURE<SetFilters>
    Code lines:
    ...
    
    SETRANGE("Item No.",ReservEntry."Item No.");
    SETRANGE("Variant Code",ReservEntry."Variant Code");
    SETFILTER("Outstanding Qty. (Base)",'>0');
    
    OnAfterSetFilters(Rec,ReservEntry); <=====================
Page<Available - Transfer Lines>.PROCEDURE<OnAfterUpdateReservFrom>
  Raised in: Page<Available - Transfer Lines>.PROCEDURE<UpdateReservFrom>
    Code lines:
    ...
          JobPlanningLine.FIND;
          SetJobPlanningLine(JobPlanningLine,ReservEntry);
        END;
    END;
    
    OnAfterUpdateReservFrom; <=====================
Page<Available - Transfer Lines>.PROCEDURE<OnAfterUpdateReservMgt>
  Raised in: Page<Available - Transfer Lines>.PROCEDURE<UpdateReservMgt>
    Code lines:
    ...
        ReservMgt.SetServLine(ServiceInvLine);
      DATABASE::"Job Planning Line":
        ReservMgt.SetJobPlanningLine(JobPlanningLine);
    END;
    
    OnAfterUpdateReservMgt; <=====================
Page<Available - Prod. Order Lines>.PROCEDURE<OnAfterSetFilters>
  Raised in: Page<Available - Prod. Order Lines>.PROCEDURE<SetFilters>
    Code lines:
    ...
    IF ReservMgt.IsPositive THEN
      SETFILTER("Remaining Qty. (Base)",'>0')
    ELSE
      SETFILTER("Remaining Qty. (Base)",'<0');
    
    OnAfterSetFilters(Rec,ReservEntry); <=====================
Page<Available - Prod. Order Lines>.PROCEDURE<OnAfterUpdateReservFrom>
  Raised in: Page<Available - Prod. Order Lines>.PROCEDURE<UpdateReservFrom>
    Code lines:
    ...
          JobPlanningLine.FIND;
          SetJobPlanningLine(JobPlanningLine,ReservEntry);
        END;
    END;
    
    OnAfterUpdateReservFrom; <=====================
Page<Available - Prod. Order Lines>.PROCEDURE<OnAfterUpdateReservMgt>
  Raised in: Page<Available - Prod. Order Lines>.PROCEDURE<UpdateReservMgt>
    Code lines:
    ...
        ReservMgt.SetJobPlanningLine(JobPlanningLine);
      DATABASE::"Assembly Line":
        ReservMgt.SetAssemblyLine(AssemblyLine);
    END;
    
    OnAfterUpdateReservMgt; <=====================
Page<Available - Prod. Order Comp.>.PROCEDURE<OnAfterSetFilters>
  Raised in: Page<Available - Prod. Order Comp.>.PROCEDURE<SetFilters>
    Code lines:
    ...
    IF ReservMgt.IsPositive THEN
      SETFILTER("Remaining Qty. (Base)",'<0')
    ELSE
      SETFILTER("Remaining Qty. (Base)",'>0');
    
    OnAfterSetFilters(Rec,ReservEntry); <=====================
Page<Available - Prod. Order Comp.>.PROCEDURE<OnAfterUpdateReservFrom>
  Raised in: Page<Available - Prod. Order Comp.>.PROCEDURE<UpdateReservFrom>
    Code lines:
    ...
          JobPlanningLine.FIND;
          SetJobPlanningLine(JobPlanningLine,ReservEntry);
        END;
    END;
    
    OnAfterUpdateReservFrom; <=====================
Page<Available - Prod. Order Comp.>.PROCEDURE<OnAfterUpdateReservMgt>
  Raised in: Page<Available - Prod. Order Comp.>.PROCEDURE<UpdateReservMgt>
    Code lines:
    ...
        ReservMgt.SetTransferLine(TransLine,ReservEntry."Source Subtype");
      DATABASE::"Service Line":
        ReservMgt.SetServLine(ServiceInvLine);
    END;
    
    OnAfterUpdateReservMgt; <=====================
Page<Avail. - Planning Components>.PROCEDURE<OnAfterUpdateReservFrom>
  Raised in: Page<Avail. - Planning Components>.PROCEDURE<UpdateReservFrom>
    Code lines:
    ...
          JobPlanningLine.FIND;
          SetJobPlanningLine(JobPlanningLine,ReservEntry);
        END;
    END;
    
    OnAfterUpdateReservFrom; <=====================
Page<Avail. - Planning Components>.PROCEDURE<OnAfterUpdateReservMgt>
  Raised in: Page<Avail. - Planning Components>.PROCEDURE<UpdateReservMgt>
    Code lines:
    ...
        ReservMgt.SetTransferLine(TransLine,ReservEntry."Source Subtype");
      DATABASE::"Service Line":
        ReservMgt.SetServLine(ServiceInvLine);
    END;
    
    OnAfterUpdateReservMgt; <=====================
Page<Item Availability Line List>.PROCEDURE<OnAfterLookupEntries>
  Raised in: Page<Item Availability Line List>.PROCEDURE<LookupEntries>
    Code lines:
    ...
        END;
      ELSE
        OnLookupExtensionTable(Item,"Table No.");
    END;
    
    OnAfterLookupEntries(Item,"Table No.",Rec); <=====================
Page<Item Availability Line List>.PROCEDURE<OnAfterMakeEntries>
  Raised in: Page<Item Availability Line List>.PROCEDURE<MakeEntries>
    Code lines:
    ...
            AssemblyHeader.TABLECAPTION,
            Item."Qty. on Assembly Order");
        END;
    END;
    
    OnAfterMakeEntries(Item,Rec,AvailType,Sign); <=====================
Page<Item Availability Line List>.PROCEDURE<OnItemCalcFields>
  Raised in: Page<Item Availability Line List>.PROCEDURE<MakeWhat>
    Code lines:
    ...
        "Qty. on Assembly Order",
        "Qty. on Asm. Component",
        "Qty. on Purch. Return",
        "Qty. on Sales Return");
    
      OnItemCalcFields(Item); <=====================
    
      IF Item.Inventory <> 0 THEN BEGIN
        "Table No." := DATABASE::"Item Ledger Entry";
        QuerySource := Item.FIELDNO(Inventory);
    ...
Page<Item Availability Line List>.PROCEDURE<OnItemLedgerEntrySetFilter>
  Raised in: Page<Item Availability Line List>.PROCEDURE<LookupEntries>
    Code lines:
    ...
          ItemLedgerEntry.SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
          ItemLedgerEntry.SETFILTER("Drop Shipment",Item.GETFILTER("Drop Shipment Filter"));
          ItemLedgerEntry.SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
          ItemLedgerEntry.SETFILTER("Global Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
          ItemLedgerEntry.SETFILTER("Global Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
          OnItemLedgerEntrySetFilter(ItemLedgerEntry); <=====================
          PAGE.RUNMODAL(0,ItemLedgerEntry);
        END;
      DATABASE::"Sales Line":
        BEGIN
    ...
Page<Item Availability Line List>.PROCEDURE<OnItemSetFilter>
  Raised in: Page<Item Availability Line List>.PROCEDURE<MakeWhat>
    Code lines:
    Sign := 1;
    IF AvailType <> AvailType::All THEN
      MakeEntries
    ELSE BEGIN
      Item.SETRANGE("Date Filter",0D,Item.GETRANGEMAX("Date Filter"));
      OnItemSetFilter(Item); <=====================
      Item.CALCFIELDS(
        "Qty. on Purch. Order",
        "Qty. on Sales Order",
        "Qty. on Service Order",
    ...
Page<Item Availability Line List>.PROCEDURE<OnLookupExtensionTable>
  Raised in: Page<Item Availability Line List>.PROCEDURE<LookupEntries>
    Code lines:
    ...
        BEGIN
          AssemblyLine.FindLinesWithItemToPlan(Item,AssemblyHeader."Document Type"::Order);
          PAGE.RUNMODAL(0,AssemblyLine);
        END;
      ELSE
        OnLookupExtensionTable(Item,"Table No."); <=====================
    END;
    
    OnAfterLookupEntries(Item,"Table No.",Rec);
Report<Job Create Sales Invoice>.PROCEDURE<OnAfterPostReport>
  Raised in: Report<Job Create Sales Invoice>.<OnPostReport>
    Code lines:
    OnBeforePostReport;
    
    JobCalcBatches.EndCreateInvoice(NoOfInvoices);
    
    OnAfterPostReport(NoOfInvoices); <=====================
Report<Job Create Sales Invoice>.PROCEDURE<OnAfterPreReport>
  Raised in: Report<Job Create Sales Invoice>.<OnPreReport>
    Code lines:
    JobCalcBatches.BatchError(PostingDate,Text000);
    InvoicePerTask := JobChoice = JobChoice::"Job Task";
    JobCreateInvoice.DeleteSalesInvoiceBuffer;
    
    OnAfterPreReport; <=====================
Report<Job Create Sales Invoice>.PROCEDURE<OnBeforeJobTaskOnAfterGetRecord>
  Raised in: Report<Job Create Sales Invoice>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    IsHandled := FALSE;
    OnBeforeJobTaskOnAfterGetRecord("Job Task",IsHandled); <=====================
    IF NOT IsHandled THEN
      JobCreateInvoice.CreateSalesInvoiceJobTask(
        "Job Task",PostingDate,InvoicePerTask,NoOfInvoices,OldJobNo,OldJTNo,FALSE);
Report<Job Create Sales Invoice>.PROCEDURE<OnBeforePostReport>
  Raised in: Report<Job Create Sales Invoice>.<OnPostReport>
    Code lines:
    OnBeforePostReport; <=====================
    
    JobCalcBatches.EndCreateInvoice(NoOfInvoices);
    
    OnAfterPostReport(NoOfInvoices);
Report<Copy Cost Acctg. Budget to G/L>.PROCEDURE<OnAfterUpdateBudgetDimensions>
  Raised in: Report<Copy Cost Acctg. Budget to G/L>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
      GLBudgetEntryTarget.UpdateDimSet(TempDimSetEntry,CostAccSetup."Cost Center Dimension","Cost Center Code");
    IF CostAccMgt.CostObjectExistsAsDimValue("Cost Object Code") THEN
      GLBudgetEntryTarget.UpdateDimSet(TempDimSetEntry,CostAccSetup."Cost Object Dimension","Cost Object Code");
    GLBudgetEntryTarget."Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry);
    UpdateBudgetDimensions(GLBudgetEntryTarget);
    OnAfterUpdateBudgetDimensions(GLBudgetEntryTarget); <=====================
    
    GLBudgetEntryTarget.Description :=
      COPYSTR(STRSUBSTNO(Text006,GETFILTER("Budget Name")),1,MAXSTRLEN(GLBudgetEntryTarget.Description));
    GLBudgetEntryTarget."User ID" := USERID;
    ...
Report<Post Direct Debit Collection>.PROCEDURE<OnAfterCreateJnlLine>
  Raised in: Report<Post Direct Debit Collection>.PROCEDURE<CreateJnlLine>
    Code lines:
    ...
    GenJnlLine.VALIDATE("Currency Code",CustLedgEntry."Currency Code");
    GenJnlLine.VALIDATE(Amount,-DirectDebitCollectionEntry."Transfer Amount");
    GenJnlLine."Applies-to Doc. Type" := CustLedgEntry."Document Type";
    GenJnlLine.VALIDATE("Applies-to Doc. No.",CustLedgEntry."Document No.");
    
    OnAfterCreateJnlLine(GenJnlLine,DirectDebitCollectionEntry); <=====================
    
    IF CreateJnlOnly THEN
      GenJnlLine.INSERT(TRUE)
    ELSE
    ...
Report<Standard Sales - Pro Forma Inv>.PROCEDURE<OnAfterLineOnPreDataItem>
  Raised in: Report<Standard Sales - Pro Forma Inv>.DataItem<Line>.<OnPreDataItem>
    Code lines:
    ...
    TotalAmount := 0;
    TotalVATAmount := 0;
    TotalAmountInclVAT := 0;
    SETRANGE(Type,Type::Item);
    
    OnAfterLineOnPreDataItem(Header,Line); <=====================
Report<Standard Sales - Pro Forma Inv>.PROCEDURE<OnBeforeLineOnAfterGetRecord>
  Raised in: Report<Standard Sales - Pro Forma Inv>.DataItem<Line>.<OnAfterGetRecord>
    Code lines:
    Item.GET("No.");
    OnBeforeLineOnAfterGetRecord(Header,Line); <=====================
    
    IF Quantity = 0 THEN BEGIN
      LinePrice := "Unit Price";
      LineAmount := 0;
      VATAmount := 0;
    END ELSE BEGIN
      LinePrice := ROUND(Amount / Quantity,Currency."Unit-Amount Rounding Precision");
      LineAmount := ROUND(Amount * "Qty. to Invoice" / Quantity,Currency."Amount Rounding Precision");
    ...
Report<Standard Sales - Draft Invoice>.PROCEDURE<OnAfterSalesPostGetSalesLines>
  Raised in: Report<Standard Sales - Draft Invoice>.DataItem<Header>.<OnAfterGetRecord>
    Code lines:
    ...
    VATAmountLine.DELETEALL;
    VATClauseLine.DELETEALL;
    Line.DELETEALL;
    CLEAR(SalesPost);
    SalesPost.GetSalesLines(Header,Line,0);
    OnAfterSalesPostGetSalesLines(Header,Line); <=====================
    
    Line.CalcVATAmountLines(0,Header,Line,VATAmountLine);
    Line.UpdateVATOnLines(0,Header,Line,VATAmountLine);
    
    ...
Report<Standard Sales - Invoice>.PROCEDURE<OnAfterGetSalesHeader>
  Raised in: Report<Standard Sales - Invoice>.DataItem<Header>.<OnAfterGetRecord>
    Code lines:
    ...
      IF RemainingAmount <> "Amount Including VAT" THEN
        RemainingAmountTxt := STRSUBSTNO(PartiallyPaidLbl,FORMAT(RemainingAmount,0,'<Precision,2><Standard Format,0>'))
      ELSE
        RemainingAmountTxt := '';
    
    OnAfterGetSalesHeader(Header); <=====================
    
    TotalSubTotal := 0;
    TotalInvDiscAmount := 0;
    TotalAmount := 0;
    ...
Report<Standard Sales - Invoice>.PROCEDURE<OnAfterLineOnPreDataItem>
  Raised in: Report<Standard Sales - Invoice>.DataItem<Line>.<OnPreDataItem>
    Code lines:
    ...
    TransHeaderAmount := 0;
    PrevLineAmount := 0;
    FirstLineHasBeenOutput := FALSE;
    CompanyInfo.Picture := TempBlobCompanyLogo.Blob;
    
    OnAfterLineOnPreDataItem(Header,Line); <=====================
Report<Standard Sales - Invoice>.PROCEDURE<OnBeforeGetDocumentCaption>
  Raised in: Report<Standard Sales - Invoice>.PROCEDURE<DocumentCaption>
    Code lines:
    OnBeforeGetDocumentCaption(Header,DocCaption); <=====================
    IF DocCaption <> '' THEN
      EXIT(DocCaption);
    EXIT(SalesInvoiceLbl);
Report<Standard Sales - Invoice>.PROCEDURE<OnBeforeLineOnAfterGetRecord>
  Raised in: Report<Standard Sales - Invoice>.DataItem<Line>.<OnAfterGetRecord>
    Code lines:
    InitializeShipmentLine;
    IF Type = Type::"G/L Account" THEN
      "No." := '';
    
    OnBeforeLineOnAfterGetRecord(Header,Line); <=====================
    
    IF "Line Discount %" = 0 THEN
      LineDiscountPctText := ''
    ELSE
      LineDiscountPctText := STRSUBSTNO('%1%',-ROUND("Line Discount %",0.1));
    ...
Report<Notification Email>.PROCEDURE<OnAfterSetReportFieldPlaceholders>
  Raised in: Report<Notification Email>.PROCEDURE<SetReportFieldPlaceholders>
    Code lines:
    ...
    IF NotificationSetup."Display Target" = NotificationSetup."Display Target"::Windows THEN
      DocumentURL := PageManagement.GetRTCUrl(RecRef,"Notification Entry"."Link Target Page")
    ELSE
      DocumentURL := PageManagement.GetWebUrl(RecRef,"Notification Entry"."Link Target Page");
    
    OnAfterSetReportFieldPlaceholders("Notification Entry",DocumentURL); <=====================
Report<Notification Email>.PROCEDURE<OnBeforeGetDocumentTypeAndNumber>
  Raised in: Report<Notification Email>.PROCEDURE<SetDocumentTypeAndNumber>
    Code lines:
    GetTargetRecRef(SourceRecRef,RecRef);
    IsHandled := FALSE;
    OnBeforeGetDocumentTypeAndNumber("Notification Entry",RecRef,DocumentType,DocumentNo,IsHandled); <=====================
    IF NOT IsHandled THEN
      NotificationManagement.GetDocumentTypeAndNumber(RecRef,DocumentType,DocumentNo);
    DocumentName := DocumentType + ' ' + DocumentNo;
Report<Notification Email>.PROCEDURE<OnSetReportFieldPlaceholders>
  Raised in: Report<Notification Email>.PROCEDURE<SetReportFieldPlaceholders>
    Code lines:
    ...
          Field2Label := Item.FIELDCAPTION(Description);
          FieldRef := RecRef.FIELD(Item.FIELDNO(Description));
          Field2Value := FORMAT(FieldRef.VALUE);
        END;
      ELSE
        OnSetReportFieldPlaceholders(RecRef,Field1Label,Field1Value,Field2Label,Field2Value,Field3Label,Field3Value); <=====================
    END;
    
    CASE "Notification Entry".Type OF
      "Notification Entry".Type::Approval:
    ...
Report<Suggest Bank Acc. Recon. Lines>.PROCEDURE<OnPreDataItemBankAccount>
  Raised in: Report<Suggest Bank Acc. Recon. Lines>.<DataItem>.<OnPreDataItem>
    Code lines:
    OnPreDataItemBankAccount(ExcludeReversedEntries); <=====================
    
    IF EndDate = 0D THEN
      ERROR(Text000);
    
    BankAccReconLine.FilterBankRecLines(BankAccRecon);
    IF NOT BankAccReconLine.FINDLAST THEN BEGIN
      BankAccReconLine."Statement Type" := BankAccRecon."Statement Type";
      BankAccReconLine."Bank Account No." := BankAccRecon."Bank Account No.";
      BankAccReconLine."Statement No." := BankAccRecon."Statement No.";
    ...
Report<Send Overdue Appr. Notif.>.PROCEDURE<OnSendOverdueNotifications>
  Raised in: Report<Send Overdue Appr. Notif.>.<OnPreReport>
    Code lines:
    IF NOT ApprovalsMgmt.IsOverdueNotificationsWorkflowEnabled THEN
      ERROR(NoWorkflowEnabledErr);
    
    OnSendOverdueNotifications; <=====================
Report<Create Reminders>.PROCEDURE<OnBeforeOnPostReport>
  Raised in: Report<Create Reminders>.<OnPostReport>
    Code lines:
    OnBeforeOnPostReport; <=====================
Report<Create Reminders>.PROCEDURE<OnBeforeOnPreReport>
  Raised in: Report<Create Reminders>.<OnPreReport>
    Code lines:
    OnBeforeOnPreReport; <=====================
    
    CustLedgEntry.COPY(CustLedgEntry2);
    IF CustLedgEntryLineFeeOnFilters.GETFILTERS <> '' THEN
      CustLedgEntryLineFeeOn.COPYFILTERS(CustLedgEntryLineFeeOnFilters);
Report<Issue Reminders>.PROCEDURE<OnBeforePrintIssuedReminderHeader>
  Raised in: Report<Issue Reminders>.<DataItem>.<OnPostDataItem>
    Code lines:
    ...
    IF PrintDoc <> PrintDoc::" " THEN
      IF TempIssuedReminderHeader.FINDSET THEN
        REPEAT
          IssuedReminderHeaderPrint := TempIssuedReminderHeader;
          IsHandled := FALSE;
          OnBeforePrintIssuedReminderHeader(IssuedReminderHeaderPrint,IsHandled); <=====================
          IF NOT IsHandled THEN BEGIN
            IssuedReminderHeaderPrint.SETRECFILTER;
            IssuedReminderHeaderPrint.PrintRecords(FALSE,PrintDoc = PrintDoc::Email,HideDialog);
          END;
    ...
Report<Issue Finance Charge Memos>.PROCEDURE<OnBeforePrintRecords>
  Raised in: Report<Issue Finance Charge Memos>.<DataItem>.<OnPostDataItem>
    Code lines:
    ...
    IF PrintDoc <> PrintDoc::" " THEN
      IF TempIssuedFinChrgMemoHeader.FINDSET THEN
        REPEAT
          IssuedFinChrgMemoHeader := TempIssuedFinChrgMemoHeader;
          IsHandled := FALSE;
          OnBeforePrintRecords(IssuedFinChrgMemoHeader,IsHandled); <=====================
          IF NOT IsHandled THEN BEGIN
            IssuedFinChrgMemoHeader.SETRECFILTER;
            IssuedFinChrgMemoHeader.PrintRecords(FALSE,PrintDoc = PrintDoc::Email,HideDialog);
          END;
    ...
Report<General Journal - Test>.PROCEDURE<OnAfterCheckGenJnlLine>
  Raised in: Report<General Journal - Test>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
        CODEUNIT.RUN(CODEUNIT::"Exchange Acc. G/L Journal Line","Gen. Journal Line");
      END;
    
      CheckDimensions("Gen. Journal Line");
    
      OnAfterCheckGenJnlLine("Gen. Journal Line",ErrorCounter,ErrorText); <=====================
    END;
    
    CheckBalance;
    AmountLCY += "Amount (LCY)";
Report<General Journal - Test>.PROCEDURE<OnAfterCheckGLAcc>
  Raised in: Report<General Journal - Test>.PROCEDURE<CheckGLAcc>
    Code lines:
    ...
        END;
    
        IF GLAcc."Reconciliation Account" THEN
          ReconcileGLAccNo("Account No.",ROUND("Amount (LCY)" / (1 + "VAT %" / 100)));
    
        OnAfterCheckGLAcc(GenJnlLine,GLAcc,ErrorCounter,ErrorText); <=====================
      END;
Report<General Journal - Test>.PROCEDURE<OnBeforeGenJournalLineOnAfterGetRecord>
  Raised in: Report<General Journal - Test>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    OnBeforeGenJournalLineOnAfterGetRecord("Gen. Journal Line","Gen. Journal Batch",GenJnlTemplate); <=====================
    
    IF "Currency Code" = '' THEN
      "Amount (LCY)" := Amount;
    
    UpdateLineBalance;
    
    AccName := '';
    BalAccName := '';
    
    ...
Report<General Journal - Test>.PROCEDURE<OnBeforeWarningIfNegativeAmt>
  Raised in: Report<General Journal - Test>.PROCEDURE<WarningIfNegativeAmt>
    Code lines:
    IsHandled := FALSE;
    OnBeforeWarningIfNegativeAmt(GenJnlLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF (GenJnlLine.Amount < 0) AND NOT AmountError THEN BEGIN
      AmountError := TRUE;
      AddError(STRSUBSTNO(Text007,GenJnlLine.FIELDCAPTION(Amount)));
    END;
Report<General Journal - Test>.PROCEDURE<OnBeforeWarningIfPositiveAmt>
  Raised in: Report<General Journal - Test>.PROCEDURE<WarningIfPositiveAmt>
    Code lines:
    IsHandled := FALSE;
    OnBeforeWarningIfPositiveAmt(GenJnlLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF (GenJnlLine.Amount > 0) AND NOT AmountError THEN BEGIN
      AmountError := TRUE;
      AddError(STRSUBSTNO(Text006,GenJnlLine.FIELDCAPTION(Amount)));
    END;
Report<Sales Document - Test>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: 
    Code lines:
    ...
      TableIDArr[1] := DimMgt.TypeToTableID3(Type);
      NumberArr[1] := "No.";
      TableIDArr[2] := DATABASE::Job;
      NumberArr[2] := "Job No.";
      DimMgt.SetSourceCode(DATABASE::"Sales Line");
      OnCheckDimValuePostingOnAfterCreateDimTableIDs(SalesLine,TableIDArr,NumberArr); <=====================
    
      ContextErrorMessage := STRSUBSTNO(LineInvalidDimensionsErr,"Document Type","Document No.","Line No.");
      ErrorMessageMgt.PushContext(RECORDID,0,ContextErrorMessage);
      IF NOT DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,"Dimension Set ID") THEN
    ...
  Raised in: 
    Code lines:
    ...
      NumberArr[2] := "Salesperson Code";
      TableIDArr[3] := DATABASE::Campaign;
      NumberArr[3] := "Campaign No.";
      TableIDArr[4] := DATABASE::"Responsibility Center";
      NumberArr[4] := "Responsibility Center";
      OnCheckDimValuePostingOnAfterCreateDimTableIDs(SalesHeader,TableIDArr,NumberArr); <=====================
    
      DimMgt.SetSourceCode(DATABASE::"Sales Header");
      ContextErrorMessage := STRSUBSTNO(InvalidDimensionsErr,"Document Type","No.");
      ErrorMessageMgt.PushContext(RECORDID,0,ContextErrorMessage);
    ...
  Raised in: 
    Code lines:
    ...
      NumberArr[1] := "No.";
      TableIDArr[2] := DATABASE::Job;
      NumberArr[2] := "Job No.";
      TableIDArr[3] := DATABASE::"Work Center";
      NumberArr[3] := "Work Center No.";
      OnCheckDimValuePostingOnAfterCreateDimTableIDs(PurchLine,TableIDArr,NumberArr); <=====================
    
      DimMgt.SetSourceCode(DATABASE::"Purchase Line");
      ContextErrorMessage := STRSUBSTNO(LineInvalidDimensionsErr,"Document Type","Document No.","Line No.");
      ErrorMessageMgt.PushContext(RECORDID,0,ContextErrorMessage);
    ...
  Raised in: 
    Code lines:
    ...
      NumberArr[2] := "Purchaser Code";
      TableIDArr[3] := DATABASE::Campaign;
      NumberArr[3] := "Campaign No.";
      TableIDArr[4] := DATABASE::"Responsibility Center";
      NumberArr[4] := "Responsibility Center";
      OnCheckDimValuePostingOnAfterCreateDimTableIDs(PurchHeader,TableIDArr,NumberArr); <=====================
    
      DimMgt.SetSourceCode(DATABASE::"Purchase Header");
      ContextErrorMessage := STRSUBSTNO(InvalidDimensionsErr,"Document Type","No.");
      ErrorMessageMgt.PushContext(RECORDID,0,ContextErrorMessage);
    ...
  Raised in: 
    Code lines:
    ...
      TableID[2] := DATABASE::Job;
      No[2] := "Job No.";
      TableID[3] := DATABASE::"Responsibility Center";
      No[3] := "Responsibility Center";
    
      OnAfterCreateDimTableIDs(SalesLine,TableID,No); <=====================
    
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      "Dimension Set ID" :=
    ...
  Raised in: 
    Code lines:
    ...
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    TableID[3] := Type3;
    No[3] := No3;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
  Raised in: 
    Code lines:
    ...
    No[3] := No3;
    TableID[4] := Type4;
    No[4] := No4;
    TableID[5] := Type5;
    No[5] := No5;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
  Raised in: 
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,SourceCodeSetup."Finance Charge Memo",
    ...
  Raised in: 
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,SourceCodeSetup.Reminder,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
  Raised in: 
    Code lines:
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(Rec,CurrFieldNo,TableID,No,'',"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
  Raised in: 
    Code lines:
    ...
    No[2] := No2;
    TableID[3] := Type3;
    No[3] := No3;
    TableID[4] := Type4;
    No[4] := No4;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    GetPurchHeader;
    ...
  Raised in: 
    Code lines:
    ...
    No[2] := No2;
    TableID[3] := Type3;
    No[3] := No3;
    TableID[4] := Type4;
    No[4] := No4;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    OldDimSetID := "Dimension Set ID";
    ...
  Raised in: 
    Code lines:
    ...
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    TableID[3] := Type3;
    No[3] := No3;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    GetSalesHeader;
    ...
  Raised in: 
    Code lines:
    ...
    No[3] := No3;
    TableID[4] := Type4;
    No[4] := No4;
    TableID[5] := Type5;
    No[5] := No5;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    OldDimSetID := "Dimension Set ID";
    ...
  Raised in: 
    Code lines:
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    GetReqLine;
    DimensionSetIDArr[1] :=
      DimMgt.GetRecDefaultDimID(Rec,CurrFieldNo,TableID,No,'',"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
    DimensionSetIDArr[2] := ReqLine."Dimension Set ID";
    ...
  Raised in: 
    Code lines:
    SourceCodeSetup.GET;
    
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
    ...
  Raised in: 
    Code lines:
    ...
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    TableID[3] := Type3;
    No[3] := No3;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    DimensionSetID := ServItemLine."Dimension Set ID";
    ...
  Raised in: 
    Code lines:
    ...
    No[3] := No3;
    TableID[4] := Type4;
    No[4] := No4;
    TableID[5] := Type5;
    No[5] := No5;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    OldDimSetID := "Dimension Set ID";
    ...
  Raised in: 
    Code lines:
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,"Source Code","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
  Raised in: 
    Code lines:
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    ProdOrderLine.GET(Status,"Prod. Order No.","Prod. Order Line No.");
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,'',
  Raised in: 
    Code lines:
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,'',
        "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",ProdOrder."Dimension Set ID",DATABASE::Item);
  Raised in: 
    Code lines:
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,'',"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
  Raised in: 
    Code lines:
    ...
      EXIT;
    
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    AssemblySetup.GET;
    ...
  Raised in: 
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,SourceCodeSetup.Assembly,
    ...
  Raised in: 
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    BankAccReconciliation.GET("Statement Type","Bank Account No.","Statement No.");
    ...
  Raised in: 
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    OldDimSetID := "Dimension Set ID";
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
    ...
  Raised in: 
    Code lines:
    ...
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    TableID[3] := Type3;
    No[3] := No3;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
  Raised in: 
    Code lines:
    ...
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    TableID[3] := Type3;
    No[3] := No3;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
  Raised in: 
    Code lines:
    ...
      IF ProdOrderLine.GET(ProdOrderLine.Status::Released,"Order No.","Order Line No.") THEN
        InheritFromDimSetID := ProdOrderLine."Dimension Set ID";
    
    CreateTableArray(TableID,DATABASE::"Work Center",DATABASE::"Salesperson/Purchaser",0);
    CreateCodeArray(No,"Work Center No.","Salespers./Purch. Code",'');
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    PickDimension(TableID,No,InheritFromDimSetID,DATABASE::Item);
  Raised in: 
    Code lines:
    CreateTableArray(TableID,Type1,Type2,Type3);
    CreateCodeArray(No,No1,No2,No3);
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    PickDimension(TableID,No,0,0);
  Raised in: 
    Code lines:
    ...
    No[3] := No3;
    TableID[4] := Type4;
    No[4] := No4;
    TableID[5] := Type5;
    No[5] := No5;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
  Raised in: 
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
  Raised in: 
    Code lines:
    ...
    No[3] := No3;
    TableID[4] := Type4;
    No[4] := No4;
    TableID[5] := Type5;
    No[5] := No5;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
  Raised in: 
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,SourceCodeSetup.Transfer,
  Raised in: 
    Code lines:
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,"Source Code","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
Report<Sales Document - Test>.PROCEDURE<OnAfterSalesPostGetSalesLines>
  Raised in: Report<Sales Document - Test>.DataItem<CopyLoop>.<OnAfterGetRecord>
    Code lines:
    CLEAR(TempSalesLine);
    CLEAR(SalesPost);
    VATAmountLine.DELETEALL;
    TempSalesLine.DELETEALL;
    SalesPost.GetSalesLines("Sales Header",TempSalesLine,1);
    OnAfterSalesPostGetSalesLines("Sales Header",TempSalesLine); <=====================
    TempSalesLine.CalcVATAmountLines(0,"Sales Header",TempSalesLine,VATAmountLine);
    TempSalesLine.UpdateVATOnLines(0,"Sales Header",TempSalesLine,VATAmountLine);
    VATAmount := VATAmountLine.GetTotalVATAmount;
    VATBaseAmount := VATAmountLine.GetTotalVATBase;
    ...
Report<Sales - Quote>.PROCEDURE<OnAfterInitReport>
  Raised in: Report<Sales - Quote>.<OnInitReport>
    Code lines:
    GLSetup.GET;
    CompanyInfo.GET;
    SalesSetup.GET;
    FormatDocument.SetLogoPosition(SalesSetup."Logo Position on Documents",CompanyInfo1,CompanyInfo2,CompanyInfo3);
    
    OnAfterInitReport; <=====================
Report<Sales - Quote>.PROCEDURE<OnAfterPostDataItem>
  Raised in: Report<Sales - Quote>.<DataItem>.<OnPostDataItem>
    Code lines:
    ...
      IF FIND('-') AND Task.WRITEPERMISSION THEN
        IF Print AND (NoOfRecords = 1) THEN
          IF CONFIRM(Text007) THEN
            CreateTask;
    
    OnAfterPostDataItem("Sales Header"); <=====================
Report<Order Confirmation>.PROCEDURE<OnAfterInitReport>
  Raised in: Report<Order Confirmation>.<OnInitReport>
    Code lines:
    GLSetup.GET;
    CompanyInfo.GET;
    SalesSetup.GET;
    FormatDocument.SetLogoPosition(SalesSetup."Logo Position on Documents",CompanyInfo1,CompanyInfo2,CompanyInfo3);
    
    OnAfterInitReport; <=====================
Report<Order Confirmation>.PROCEDURE<OnAfterPostDataItem>
  Raised in: Report<Order Confirmation>.<DataItem>.<OnPostDataItem>
    Code lines:
    OnAfterPostDataItem("Sales Header"); <=====================
Report<Sales - Invoice>.PROCEDURE<OnAfterGetRecordSalesInvoiceHeader>
  Raised in: Report<Sales - Invoice>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
    
    DimSetEntry1.SETRANGE("Dimension Set ID","Dimension Set ID");
    
    GetLineFeeNoteOnReportHist("No.");
    
    OnAfterGetRecordSalesInvoiceHeader("Sales Invoice Header"); <=====================
    OnGetReferenceText("Sales Invoice Header",ReferenceText,Handled);
Report<Sales - Invoice>.PROCEDURE<OnAfterInitReport>
  Raised in: Report<Sales - Invoice>.<OnInitReport>
    Code lines:
    ...
    SalesSetup.GET;
    CompanyInfo.GET;
    CompanyInfo.VerifyAndSetPaymentInfo;
    FormatDocument.SetLogoPosition(SalesSetup."Logo Position on Documents",CompanyInfo1,CompanyInfo2,CompanyInfo3);
    
    OnAfterInitReport; <=====================
Report<Sales - Invoice>.PROCEDURE<OnAfterPostDataItem>
  Raised in: Report<Sales - Invoice>.<DataItem>.<OnPostDataItem>
    Code lines:
    OnAfterPostDataItem("Sales Invoice Header"); <=====================
Report<Sales - Invoice>.PROCEDURE<OnBeforeGetDocumentCaption>
  Raised in: Report<Sales - Invoice>.PROCEDURE<DocumentCaption>
    Code lines:
    OnBeforeGetDocumentCaption("Sales Invoice Header",DocCaption); <=====================
    IF DocCaption <> '' THEN
      EXIT(DocCaption);
    IF "Sales Invoice Header"."Prepayment Invoice" THEN
      EXIT(Text010);
    EXIT(Text004);
Report<Sales - Invoice>.PROCEDURE<OnGetReferenceText>
  Raised in: Report<Sales - Invoice>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
    DimSetEntry1.SETRANGE("Dimension Set ID","Dimension Set ID");
    
    GetLineFeeNoteOnReportHist("No.");
    
    OnAfterGetRecordSalesInvoiceHeader("Sales Invoice Header");
    OnGetReferenceText("Sales Invoice Header",ReferenceText,Handled); <=====================
Report<Sales - Credit Memo>.PROCEDURE<OnAfterGetRecordSalesCrMemoHeader>
  Raised in: Report<Sales - Credit Memo>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
    FormatAddressFields("Sales Cr.Memo Header");
    FormatDocumentFields("Sales Cr.Memo Header");
    
    DimSetEntry1.SETRANGE("Dimension Set ID","Dimension Set ID");
    
    OnAfterGetRecordSalesCrMemoHeader("Sales Cr.Memo Header"); <=====================
Report<Sales - Credit Memo>.PROCEDURE<OnAfterInitReport>
  Raised in: Report<Sales - Credit Memo>.<OnInitReport>
    Code lines:
    GLSetup.GET;
    CompanyInfo.GET;
    SalesSetup.GET;
    FormatDocument.SetLogoPosition(SalesSetup."Logo Position on Documents",CompanyInfo1,CompanyInfo2,CompanyInfo3);
    
    OnAfterInitReport; <=====================
Report<Sales - Credit Memo>.PROCEDURE<OnAfterPostDataItem>
  Raised in: Report<Sales - Credit Memo>.<DataItem>.<OnPostDataItem>
    Code lines:
    OnAfterPostDataItem("Sales Cr.Memo Header"); <=====================
Report<Sales - Shipment>.PROCEDURE<OnAfterInitReport>
  Raised in: Report<Sales - Shipment>.<OnInitReport>
    Code lines:
    CompanyInfo.GET;
    SalesSetup.GET;
    FormatDocument.SetLogoPosition(SalesSetup."Logo Position on Documents",CompanyInfo1,CompanyInfo2,CompanyInfo3);
    
    OnAfterInitReport; <=====================
Report<Sales - Shipment>.PROCEDURE<OnAfterPostDataItem>
  Raised in: Report<Sales - Shipment>.<DataItem>.<OnPostDataItem>
    Code lines:
    OnAfterPostDataItem("Sales Shipment Header"); <=====================
Report<Sales Reservation Avail.>.PROCEDURE<OnAfterSalesLineModify>
  Raised in: Report<Sales Reservation Avail.>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
      IF "Qty. per Unit of Measure" = 0 THEN
        "Qty. per Unit of Measure" := 1;
      VALIDATE("Qty. to Ship",
        ROUND(LineQuantityOnHand / "Qty. per Unit of Measure",UOMMgt.QtyRndPrecision));
      MODIFY;
      OnAfterSalesLineModify("Sales Line"); <=====================
    END;
    
    IF ClearDocumentStatus THEN BEGIN
      DocumentReceiptDate := 0D;
    ...
Report<Delete Invd Blnkt Sales Orders>.PROCEDURE<OnBeforeDeleteSalesHeader>
  Raised in: Report<Delete Invd Blnkt Sales Orders>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
              SalesCommentLine.SETRANGE("No.","No.");
              SalesCommentLine.DELETEALL;
    
              ApprovalsMgmt.DeleteApprovalEntries(RECORDID);
    
              OnBeforeDeleteSalesHeader("Sales Header"); <=====================
              DELETE;
    
              COMMIT;
            END;
    ...
Report<Delete Invd Blnkt Sales Orders>.PROCEDURE<OnBeforeDeleteSalesLines>
  Raised in: Report<Delete Invd Blnkt Sales Orders>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
              IF SalesLine.FINDSET THEN
                REPEAT
                  ATOLink.DeleteAsmFromSalesLine(SalesLine);
                UNTIL SalesLine.NEXT = 0;
              SalesLine.SETRANGE("Qty. to Assemble to Order");
              OnBeforeDeleteSalesLines(SalesLine); <=====================
              SalesLine.DELETEALL;
    
              SalesCommentLine.SETRANGE("Document Type","Document Type");
              SalesCommentLine.SETRANGE("No.","No.");
    ...
Report<Copy Sales Document>.PROCEDURE<OnAfterOpenPage>
  Raised in: Report<Copy Sales Document>.<RequestPage>.<OnOpenPage>
    Code lines:
    ...
      IF FromSalesHeader."No." = '' THEN
        DocNo := '';
    END;
    ValidateDocNo;
    
    OnAfterOpenPage; <=====================
Report<Copy Sales Document>.PROCEDURE<OnAfterValidateIncludeHeader>
  Raised in: Report<Copy Sales Document>.PROCEDURE<ValidateDocNo>
    Code lines:
    ...
        [SalesHeader."Document Type"::"Return Order",SalesHeader."Document Type"::"Credit Memo"])) AND
      (SalesHeader."Bill-to Customer No." IN [FromSalesHeader."Bill-to Customer No.",'']);
    
    OnBeforeValidateIncludeHeader(IncludeHeader);
    ValidateIncludeHeader;
    OnAfterValidateIncludeHeader(IncludeHeader,RecalculateLines); <=====================
Report<Copy Sales Document>.PROCEDURE<OnBeforeValidateIncludeHeader>
  Raised in: Report<Copy Sales Document>.PROCEDURE<ValidateDocNo>
    Code lines:
    ...
      ((DocType = DocType::"Posted Credit Memo") <>
       (SalesHeader."Document Type" IN
        [SalesHeader."Document Type"::"Return Order",SalesHeader."Document Type"::"Credit Memo"])) AND
      (SalesHeader."Bill-to Customer No." IN [FromSalesHeader."Bill-to Customer No.",'']);
    
    OnBeforeValidateIncludeHeader(IncludeHeader); <=====================
    ValidateIncludeHeader;
    OnAfterValidateIncludeHeader(IncludeHeader,RecalculateLines);
Report<Copy Sales Document>.PROCEDURE<OnPreReportOnBeforeCopySalesDoc>
  Raised in: Report<Copy Sales Document>.<OnPreReport>
    Code lines:
    SalesSetup.GET;
    CopyDocMgt.SetProperties(
      IncludeHeader,RecalculateLines,FALSE,FALSE,FALSE,SalesSetup."Exact Cost Reversing Mandatory",FALSE);
    CopyDocMgt.SetArchDocVal(DocNoOccurrence,DocVersionNo);
    
    OnPreReportOnBeforeCopySalesDoc(CopyDocMgt); <=====================
    
    CopyDocMgt.CopySalesDoc(DocType,DocNo,SalesHeader);
Report<Combine Shipments>.PROCEDURE<OnAfterGetRecordSalesOrderHeader>
  Raised in: Report<Combine Shipments>.DataItem<SalesOrderHeader>.<OnAfterGetRecord>
    Code lines:
    IsHandled := FALSE;
    OnAfterGetRecordSalesOrderHeader(SalesOrderHeader,IsHandled); <=====================
    IF IsHandled THEN
      CurrReport.SKIP;
    
    CurrReport.LANGUAGE := Language.GetLanguageID("Language Code");
    
    Window.UPDATE(1,"Bill-to Customer No.");
    Window.UPDATE(2,"No.");
Report<Combine Shipments>.PROCEDURE<OnAfterInsertSalesInvHeader>
  Raised in: Report<Combine Shipments>.PROCEDURE<InsertSalesInvHeader>
    Code lines:
    ...
      MODIFY;
      COMMIT;
      HasAmount := FALSE;
    END;
    
    OnAfterInsertSalesInvHeader(SalesHeader,"Sales Shipment Header"); <=====================
Report<Combine Shipments>.PROCEDURE<OnAfterShouldFinalizeSalesInvHeader>
  Raised in: Report<Combine Shipments>.PROCEDURE<ShouldFinalizeSalesInvHeader>
    Code lines:
    ...
      (SalesOrderHeader."Bill-to Customer No." <> SalesHeader."Bill-to Customer No.") OR
      (SalesOrderHeader."Currency Code" <> SalesHeader."Currency Code") OR
      (SalesOrderHeader."EU 3-Party Trade" <> SalesHeader."EU 3-Party Trade") OR
      (SalesOrderHeader."Dimension Set ID" <> SalesHeader."Dimension Set ID");
    
    OnAfterShouldFinalizeSalesInvHeader(SalesOrderHeader,SalesHeader,Finalize); <=====================
    EXIT(Finalize);
Report<Combine Shipments>.PROCEDURE<OnBeforeFinalizeSalesInvHeader>
  Raised in: Report<Combine Shipments>.PROCEDURE<FinalizeSalesInvHeader>
    Code lines:
    HasError := FALSE;
    OnBeforeFinalizeSalesInvHeader(SalesHeader,HasAmount,HasError); <=====================
    IF HasError THEN
      NoOfSalesInvErrors += 1;
    
    WITH SalesHeader DO BEGIN
      IF (NOT HasAmount) OR HasError THEN BEGIN
        OnFinalizeSalesInvHeaderOnBeforeDelete(SalesHeader);
        DELETE(TRUE);
        OnFinalizeSalesInvHeaderOnAfterDelete(SalesHeader);
    ...
Report<Combine Shipments>.PROCEDURE<OnBeforePostReport>
  Raised in: Report<Combine Shipments>.<OnPostReport>
    Code lines:
    OnBeforePostReport; <=====================
Report<Combine Shipments>.PROCEDURE<OnBeforePreReport>
  Raised in: Report<Combine Shipments>.<OnPreReport>
    Code lines:
    OnBeforePreReport; <=====================
Report<Combine Shipments>.PROCEDURE<OnBeforeSalesInvHeaderInsert>
  Raised in: Report<Combine Shipments>.PROCEDURE<InsertSalesInvHeader>
    Code lines:
    CLEAR(SalesHeader);
    WITH SalesHeader DO BEGIN
      INIT;
      "Document Type" := "Document Type"::Invoice;
      "No." := '';
      OnBeforeSalesInvHeaderInsert(SalesHeader,SalesOrderHeader); <=====================
      INSERT(TRUE);
      VALIDATE("Sell-to Customer No.",SalesOrderHeader."Sell-to Customer No." );
      IF "Bill-to Customer No." <> "Sell-to Customer No." THEN
        VALIDATE("Bill-to Customer No.",SalesOrderHeader."Bill-to Customer No.");
    ...
Report<Combine Shipments>.PROCEDURE<OnBeforeSalesInvHeaderModify>
  Raised in: Report<Combine Shipments>.PROCEDURE<InsertSalesInvHeader>
    Code lines:
    ...
      VALIDATE("EU 3-Party Trade",SalesOrderHeader."EU 3-Party Trade");
      "Salesperson Code" := SalesOrderHeader."Salesperson Code";
      "Shortcut Dimension 1 Code" := SalesOrderHeader."Shortcut Dimension 1 Code";
      "Shortcut Dimension 2 Code" := SalesOrderHeader."Shortcut Dimension 2 Code";
      "Dimension Set ID" := SalesOrderHeader."Dimension Set ID";
      OnBeforeSalesInvHeaderModify(SalesHeader,SalesOrderHeader); <=====================
      MODIFY;
      COMMIT;
      HasAmount := FALSE;
    END;
    ...
Report<Combine Shipments>.PROCEDURE<OnFinalizeSalesInvHeader>
  Raised in: Report<Combine Shipments>.PROCEDURE<FinalizeSalesInvHeader>
    Code lines:
    ...
    IF HasError THEN
      NoOfSalesInvErrors += 1;
    
    WITH SalesHeader DO BEGIN
      IF (NOT HasAmount) OR HasError THEN BEGIN
        OnFinalizeSalesInvHeaderOnBeforeDelete(SalesHeader); <=====================
        DELETE(TRUE);
        OnFinalizeSalesInvHeaderOnAfterDelete(SalesHeader); <=====================
        EXIT;
      END;
    ...
Report<Combine Shipments>.PROCEDURE<OnFinalizeSalesInvHeaderOnAfterDelete>
  Raised in: Report<Combine Shipments>.PROCEDURE<FinalizeSalesInvHeader>
    Code lines:
    ...
    
    WITH SalesHeader DO BEGIN
      IF (NOT HasAmount) OR HasError THEN BEGIN
        OnFinalizeSalesInvHeaderOnBeforeDelete(SalesHeader);
        DELETE(TRUE);
        OnFinalizeSalesInvHeaderOnAfterDelete(SalesHeader); <=====================
        EXIT;
      END;
      OnFinalizeSalesInvHeader(SalesHeader);
      IF CalcInvDisc THEN
    ...
Report<Combine Shipments>.PROCEDURE<OnFinalizeSalesInvHeaderOnBeforeDelete>
  Raised in: Report<Combine Shipments>.PROCEDURE<FinalizeSalesInvHeader>
    Code lines:
    ...
    IF HasError THEN
      NoOfSalesInvErrors += 1;
    
    WITH SalesHeader DO BEGIN
      IF (NOT HasAmount) OR HasError THEN BEGIN
        OnFinalizeSalesInvHeaderOnBeforeDelete(SalesHeader); <=====================
        DELETE(TRUE);
        OnFinalizeSalesInvHeaderOnAfterDelete(SalesHeader);
        EXIT;
      END;
    ...
Report<Combine Shipments>.PROCEDURE<OnSalesOrderHeaderOnPreDataItem>
  Raised in: Report<Combine Shipments>.DataItem<SalesOrderHeader>.<OnPreDataItem>
    Code lines:
    ...
      Text002 +
      Text003 +
      Text004 +
      Text005);
    
    OnSalesOrderHeaderOnPreDataItem(SalesOrderHeader); <=====================
Report<Delete Invoiced Sales Orders>.PROCEDURE<OnAfterDeleteSalesLine>
  Raised in: Report<Delete Invoiced Sales Orders>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
                  IF SalesOrderLine.Type = SalesOrderLine.Type::Item THEN
                    ATOLink.DeleteAsmFromSalesLine(SalesOrderLine);
                  IF SalesOrderLine.HASLINKS THEN
                    SalesOrderLine.DELETELINKS;
                  SalesOrderLine.DELETE;
                  OnAfterDeleteSalesLine(SalesOrderLine); <=====================
                END ELSE
                  AllLinesDeleted := FALSE;
                UpdateAssociatedPurchOrder;
              UNTIL SalesOrderLine.NEXT = 0;
    ...
Report<Delete Invoiced Sales Orders>.PROCEDURE<OnBeforeDeleteSalesHeader>
  Raised in: Report<Delete Invoiced Sales Orders>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
              ApprovalsMgmt.DeleteApprovalEntries(RECORDID);
    
              IF HASLINKS THEN
                DELETELINKS;
    
              OnBeforeDeleteSalesHeader("Sales Header"); <=====================
              DELETE;
            END;
            COMMIT;
          END;
    ...
Report<Copy Company>.PROCEDURE<OnAfterSetNewNameToNewCompanyInfo>
  Raised in: Report<Copy Company>.PROCEDURE<SetNewNameToNewCompanyInfo>
    Code lines:
    ...
      IF CompanyInformation.GET THEN BEGIN
        CompanyInformation.Name := NewCompanyName;
        CompanyInformation.MODIFY(TRUE);
      END;
    
    OnAfterSetNewNameToNewCompanyInfo(NewCompanyName); <=====================
Report<Suggest Vendor Payments>.PROCEDURE<OnBeforeHandledVendLedgEntry>
  Raised in: Report<Suggest Vendor Payments>.PROCEDURE<MakeGenJnlLines>
    Code lines:
    ...
        PayableVendLedgEntry.FIND('-');
        REPEAT
          VendLedgEntry.GET(PayableVendLedgEntry."Vendor Ledg. Entry No.");
          SetPostingDate(GenJnlLine1,VendLedgEntry."Due Date",PostingDate);
          HandledEntry := VendLedgEntry."Posting Date" <= GenJnlLine1."Posting Date";
          OnBeforeHandledVendLedgEntry(VendLedgEntry,GenJnlLine1,HandledEntry); <=====================
          IF HandledEntry THEN BEGIN
            TempPaymentBuffer."Vendor No." := VendLedgEntry."Vendor No.";
            TempPaymentBuffer."Currency Code" := VendLedgEntry."Currency Code";
            TempPaymentBuffer."Payment Method Code" := VendLedgEntry."Payment Method Code";
    ...
Report<Suggest Vendor Payments>.PROCEDURE<OnBeforeUpdateGnlJnlLineDimensionsFromTempBuffer>
  Raised in: Report<Suggest Vendor Payments>.PROCEDURE<InsertGenJournalLine>
    Code lines:
    ...
      "Payment Method Code" := TempPaymentBuffer."Payment Method Code";
      "Creditor No." := TempPaymentBuffer."Creditor No.";
      "Payment Reference" := TempPaymentBuffer."Payment Reference";
      "Exported to Payment File" := TempPaymentBuffer."Exported to Payment File";
      "Applies-to Ext. Doc. No." := TempPaymentBuffer."Applies-to Ext. Doc. No.";
      OnBeforeUpdateGnlJnlLineDimensionsFromTempBuffer(GenJnlLine,TempPaymentBuffer); <=====================
      UpdateDimensions(GenJnlLine);
      INSERT;
      GenJnlLineInserted := TRUE;
    END;
Report<Suggest Vendor Payments>.PROCEDURE<OnGetVendLedgEntriesOnBeforeLoop>
  Raised in: Report<Suggest Vendor Payments>.PROCEDURE<GetVendLedgEntries>
    Code lines:
    ...
    VendLedgEntry.SETFILTER("Global Dimension 2 Code",Vendor.GETFILTER("Global Dimension 2 Filter"));
    
    IF VendLedgEntry.FINDSET THEN
      REPEAT
        IsHandled := FALSE;
        OnGetVendLedgEntriesOnBeforeLoop(VendLedgEntry,PostingDate,LastDueDateToPayReq,Future,IsHandled); <=====================
        IF NOT IsHandled THEN BEGIN
          SaveAmount;
          IF VendLedgEntry."Accepted Pmt. Disc. Tolerance" OR (VendLedgEntry."Accepted Payment Tolerance" <> 0) THEN BEGIN
            VendLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
    ...
Report<Suggest Vendor Payments>.PROCEDURE<OnUpdateTempBufferFromVendorLedgerEntry>
  Raised in: Report<Suggest Vendor Payments>.PROCEDURE<MakeGenJnlLines>
    Code lines:
    ...
            TempPaymentBuffer."Payment Method Code" := VendLedgEntry."Payment Method Code";
            TempPaymentBuffer."Creditor No." := VendLedgEntry."Creditor No.";
            TempPaymentBuffer."Payment Reference" := VendLedgEntry."Payment Reference";
            TempPaymentBuffer."Exported to Payment File" := VendLedgEntry."Exported to Payment File";
            TempPaymentBuffer."Applies-to Ext. Doc. No." := VendLedgEntry."External Document No.";
            OnUpdateTempBufferFromVendorLedgerEntry(TempPaymentBuffer,VendLedgEntry); <=====================
    
            SetTempPaymentBufferDims(DimBuf);
    
            VendLedgEntry.CALCFIELDS("Remaining Amount");
    ...
Report<Purchase - Quote>.PROCEDURE<OnAfterInitReport>
  Raised in: Report<Purchase - Quote>.<OnInitReport>
    Code lines:
    CompanyInfo.GET;
    PurchSetup.GET;
    
    OnAfterInitReport; <=====================
Report<Purchase - Quote>.PROCEDURE<OnAfterPostDataItem>
  Raised in: Report<Purchase - Quote>.<DataItem>.<OnPostDataItem>
    Code lines:
    OnAfterPostDataItem("Purchase Header"); <=====================
Report<Order>.PROCEDURE<OnAfterInitReport>
  Raised in: Report<Order>.<OnInitReport>
    Code lines:
    GLSetup.GET;
    CompanyInfo.GET;
    PurchSetup.GET;
    
    OnAfterInitReport; <=====================
Report<Order>.PROCEDURE<OnAfterPostDataItem>
  Raised in: Report<Order>.<DataItem>.<OnPostDataItem>
    Code lines:
    OnAfterPostDataItem("Purchase Header"); <=====================
Report<Purchase - Invoice>.PROCEDURE<OnAfterInitReport>
  Raised in: Report<Purchase - Invoice>.<OnInitReport>
    Code lines:
    GLSetup.GET;
    CompanyInfo.GET;
    
    OnAfterInitReport; <=====================
Report<Purchase - Invoice>.PROCEDURE<OnAfterPostDataItem>
  Raised in: Report<Purchase - Invoice>.<DataItem>.<OnPostDataItem>
    Code lines:
    OnAfterPostDataItem("Purch. Inv. Header"); <=====================
Report<Purchase - Credit Memo>.PROCEDURE<OnAfterInitReport>
  Raised in: Report<Purchase - Credit Memo>.<OnInitReport>
    Code lines:
    GLSetup.GET;
    CompanyInfo.GET;
    
    OnAfterInitReport; <=====================
Report<Purchase - Credit Memo>.PROCEDURE<OnAfterPostDataItem>
  Raised in: Report<Purchase - Credit Memo>.<DataItem>.<OnPreDataItem>
    Code lines:
    OnAfterPostDataItem("Purch. Cr. Memo Hdr."); <=====================
Report<Purchase - Receipt>.PROCEDURE<OnAfterInitReport>
  Raised in: Report<Purchase - Receipt>.<OnInitReport>
    Code lines:
    CompanyInfo.GET;
    
    OnAfterInitReport; <=====================
Report<Purchase - Receipt>.PROCEDURE<OnAfterPostDataItem>
  Raised in: Report<Purchase - Receipt>.<DataItem>.<OnPostDataItem>
    Code lines:
    OnAfterPostDataItem("Purch. Rcpt. Header"); <=====================
Report<Purchase Reservation Avail.>.PROCEDURE<OnAfterPurchLineModify>
  Raised in: Report<Purchase Reservation Avail.>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
      IF "Qty. per Unit of Measure" = 0 THEN
        "Qty. per Unit of Measure" := 1;
      VALIDATE("Qty. to Receive",
        ROUND(LineQuantityOnHand / "Qty. per Unit of Measure",UOMMgt.QtyRndPrecision));
      MODIFY;
      OnAfterPurchLineModify("Purchase Line"); <=====================
    END;
    
    IF ClearDocumentStatus THEN BEGIN
      DocumentReceiptDate := 0D;
    ...
Report<Delete Invd Blnkt Purch Orders>.PROCEDURE<OnBeforeDeletePurchaseHeader>
  Raised in: Report<Delete Invd Blnkt Purch Orders>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
              PurchCommentLine.SETRANGE("No.","No.");
              PurchCommentLine.DELETEALL;
    
              ApprovalsMgmt.DeleteApprovalEntries(RECORDID);
    
              OnBeforeDeletePurchaseHeader("Purchase Header"); <=====================
              DELETE;
    
              COMMIT;
            END;
    ...
Report<Delete Invd Blnkt Purch Orders>.PROCEDURE<OnBeforeDeletePurchLines>
  Raised in: Report<Delete Invd Blnkt Purch Orders>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
            PurchLine.SETRANGE("Qty. Rcd. Not Invoiced");
            PurchLine2.SETRANGE("Blanket Order No.","No.");
            IF NOT PurchLine2.FINDFIRST THEN BEGIN
              ArchiveManagement.AutoArchivePurchDocument("Purchase Header");
    
              OnBeforeDeletePurchLines(PurchLine); <=====================
              PurchLine.DELETEALL;
    
              PurchCommentLine.SETRANGE("Document Type","Document Type");
              PurchCommentLine.SETRANGE("No.","No.");
    ...
Report<Copy Purchase Document>.PROCEDURE<OnAfterOpenPage>
  Raised in: Report<Copy Purchase Document>.<RequestPage>.<OnOpenPage>
    Code lines:
    ...
      IF FromPurchHeader."No." = '' THEN
        DocNo := '';
    END;
    ValidateDocNo;
    
    OnAfterOpenPage; <=====================
Report<Copy Purchase Document>.PROCEDURE<OnBeforeValidateIncludeHeader>
  Raised in: Report<Copy Purchase Document>.PROCEDURE<ValidateDocNo>
    Code lines:
    ...
      (DocType IN [DocType::"Posted Invoice",DocType::"Posted Credit Memo"]) AND
      ((DocType = DocType::"Posted Credit Memo") <>
       (PurchHeader."Document Type" = PurchHeader."Document Type"::"Credit Memo")) AND
      (PurchHeader."Buy-from Vendor No." IN [FromPurchHeader."Buy-from Vendor No.",'']);
    
    OnBeforeValidateIncludeHeader(IncludeHeader); <=====================
    ValidateIncludeHeader;
Report<Copy Purchase Document>.PROCEDURE<OnPreReportOnBeforeCopyPurchaseDoc>
  Raised in: Report<Copy Purchase Document>.<OnPreReport>
    Code lines:
    PurchSetup.GET;
    CopyDocMgt.SetProperties(
      IncludeHeader,RecalculateLines,FALSE,FALSE,FALSE,PurchSetup."Exact Cost Reversing Mandatory",FALSE);
    CopyDocMgt.SetArchDocVal(DocNoOccurrence,DocVersionNo);
    
    OnPreReportOnBeforeCopyPurchaseDoc(CopyDocMgt); <=====================
    
    CopyDocMgt.CopyPurchDoc(DocType,DocNo,PurchHeader);
Report<Carry Out Action Msg. - Req.>.PROCEDURE<OnAfterSetReqWkshLine>
  Raised in: Report<Carry Out Action Msg. - Req.>.PROCEDURE<SetReqWkshLine>
    Code lines:
    ReqLine.COPY(NewReqLine);
    ReqWkshTmpl.GET(NewReqLine."Worksheet Template Name");
    
    OnAfterSetReqWkshLine(NewReqLine); <=====================
Report<Carry Out Action Msg. - Req.>.PROCEDURE<OnBeforePreReport>
  Raised in: Report<Carry Out Action Msg. - Req.>.<OnPreReport>
    Code lines:
    OnBeforePreReport(PrintOrders); <=====================
    
    UseOneJnl(ReqLine);
Report<Delete Invoiced Purch. Orders>.PROCEDURE<OnBeforeDeletePurchaseHeader>
  Raised in: Report<Delete Invoiced Purch. Orders>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
              ApprovalsMgmt.DeleteApprovalEntries(RECORDID);
    
              IF HASLINKS THEN
                DELETELINKS;
    
              OnBeforeDeletePurchaseHeader("Purchase Header"); <=====================
              DELETE;
            END;
            COMMIT;
          END;
    ...
Report<Delete Invoiced Purch. Orders>.PROCEDURE<OnBeforePurchLineDelete>
  Raised in: Report<Delete Invoiced Purch. Orders>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
                    ItemChargeAssgntPurch.DELETEALL;
                  END;
                  IF PurchLine.HASLINKS THEN
                    PurchLine.DELETELINKS;
    
                  OnBeforePurchLineDelete(PurchLine); <=====================
                  PurchLine.DELETE;
                END ELSE
                  AllLinesDeleted := FALSE;
              UNTIL PurchLine.NEXT = 0;
    ...
Report<Complete IC Inbox Action>.PROCEDURE<OnAfterMoveICInboxPurchHeaderToHandled>
  Raised in: Report<Complete IC Inbox Action>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
                  "Transaction Source","Line No.");
                IF ICDocDim.FINDFIRST THEN
                  DimMgt.MoveICDocDimtoICDocDim(ICDocDim,ICDocDim2,DATABASE::"Handled IC Inbox Purch. Line","Transaction Source");
              UNTIL NEXT = 0;
          END;
          OnAfterMoveICInboxPurchHeaderToHandled(InboxPurchHeader2,HandledInboxPurchHeader); <=====================
        END;
    END;
    InboxPurchHeader2.DELETE(TRUE);
Report<Complete IC Inbox Action>.PROCEDURE<OnAfterMoveICInboxSalesHeaderToHandled>
  Raised in: Report<Complete IC Inbox Action>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
                  ICDocDim,DATABASE::"IC Inbox Sales Line","IC Transaction No.","IC Partner Code","Transaction Source","Line No.");
                IF ICDocDim.FINDFIRST THEN
                  DimMgt.MoveICDocDimtoICDocDim(ICDocDim,ICDocDim2,DATABASE::"Handled IC Inbox Sales Line","Transaction Source");
              UNTIL NEXT = 0;
          END;
          OnAfterMoveICInboxSalesHeaderToHandled(InboxSalesHeader2,HandledInboxSalesHeader); <=====================
        END;
    END;
    InboxSalesHeader2.DELETE(TRUE);
Report<Move IC Trans. to Partner Comp>.PROCEDURE<OnBeforeHandledICInboxPurchHdrDelete>
  Raised in: Report<Move IC Trans. to Partner Comp>.PROCEDURE<RecreateInboxTrans>
    Code lines:
    ...
                DATABASE::"Handled IC Inbox Purch. Line",DATABASE::"IC Inbox Purchase Line",
                "IC Transaction No.","IC Partner Code");
              OnBeforeHandledICInboxPurchLineDelete(HandledICInboxPurchLine);
              HandledICInboxPurchLine.DELETE;
            UNTIL HandledICInboxPurchLine.NEXT = 0;
          OnBeforeHandledICInboxPurchHdrDelete(HandledICInboxPurchHdr); <=====================
          DELETE;
        UNTIL NEXT = 0;
    END;
Report<Move IC Trans. to Partner Comp>.PROCEDURE<OnBeforeHandledICInboxPurchLineDelete>
  Raised in: Report<Move IC Trans. to Partner Comp>.PROCEDURE<RecreateInboxTrans>
    Code lines:
    ...
              ICInboxPurchLine.TRANSFERFIELDS(HandledICInboxPurchLine,TRUE);
              ICInboxPurchLine.INSERT;
              MoveHandledICDocDim(
                DATABASE::"Handled IC Inbox Purch. Line",DATABASE::"IC Inbox Purchase Line",
                "IC Transaction No.","IC Partner Code");
              OnBeforeHandledICInboxPurchLineDelete(HandledICInboxPurchLine); <=====================
              HandledICInboxPurchLine.DELETE;
            UNTIL HandledICInboxPurchLine.NEXT = 0;
          OnBeforeHandledICInboxPurchHdrDelete(HandledICInboxPurchHdr);
          DELETE;
    ...
Report<Move IC Trans. to Partner Comp>.PROCEDURE<OnBeforeHandledICInboxSalesHdrDelete>
  Raised in: Report<Move IC Trans. to Partner Comp>.PROCEDURE<RecreateInboxTrans>
    Code lines:
    ...
                DATABASE::"Handled IC Inbox Sales Line",DATABASE::"IC Inbox Sales Line",
                "IC Transaction No.","IC Partner Code");
              OnBeforeHandledICInboxSalesLineDelete(HandledICInboxSalesLine);
              HandledICInboxSalesLine.DELETE;
            UNTIL HandledICInboxSalesLine.NEXT = 0;
          OnBeforeHandledICInboxSalesHdrDelete(HandledICInboxSalesHdr); <=====================
          DELETE;
        UNTIL NEXT = 0;
    END;
    
    ...
Report<Move IC Trans. to Partner Comp>.PROCEDURE<OnBeforeHandledICInboxSalesLineDelete>
  Raised in: Report<Move IC Trans. to Partner Comp>.PROCEDURE<RecreateInboxTrans>
    Code lines:
    ...
              ICInboxSalesLine.TRANSFERFIELDS(HandledICInboxSalesLine,TRUE);
              ICInboxSalesLine.INSERT;
              MoveHandledICDocDim(
                DATABASE::"Handled IC Inbox Sales Line",DATABASE::"IC Inbox Sales Line",
                "IC Transaction No.","IC Partner Code");
              OnBeforeHandledICInboxSalesLineDelete(HandledICInboxSalesLine); <=====================
              HandledICInboxSalesLine.DELETE;
            UNTIL HandledICInboxSalesLine.NEXT = 0;
          OnBeforeHandledICInboxSalesHdrDelete(HandledICInboxSalesHdr);
          DELETE;
    ...
Report<Move IC Trans. to Partner Comp>.PROCEDURE<OnICInboxTransactionCreated>
  Raised in: Report<Move IC Trans. to Partner Comp>.PROCEDURE<TransferToPartner>
    Code lines:
    ...
      REPEAT
        PartnerICDocDim := TempICDocDim;
        PartnerICDocDim.INSERT;
      UNTIL TempICDocDim.NEXT = 0;
    
    OnICInboxTransactionCreated(PartnerInboxTransaction,CurrentPartner."Inbox Details"); <=====================
    
    TempICInboxTransaction.DELETEALL;
    TempInboxPurchHeader.DELETEALL;
    TempInboxPurchLine.RESET;
    ...
Report<Add Contacts>.PROCEDURE<OnBeforeInsertSegmentLine>
  Raised in: Report<Add Contacts>.PROCEDURE<UpdateSegLines>
    Code lines:
    ...
          SegLine.SETRANGE("Segment No.","Segment Header"."No.");
          IF SegLine.FINDFIRST THEN
            ContactOK := FALSE;
        END;
    
        OnBeforeInsertSegmentLine( <=====================
          TempCont,AllowExistingContact,ExpandCompanies,AllowCoRepdByContPerson,IgnoreExclusion,ContactOK);
    
        IF ContactOK THEN BEGIN
          SegLine.INIT;
    ...
Report<Calc. Consumption>.PROCEDURE<OnAfterCreateConsumpJnlLine>
  Raised in: Report<Calc. Consumption>.PROCEDURE<CreateConsumpJnlLine>
    Code lines:
    ...
        AssignItemTracking("Prod. Order Component",ItemJnlLine);
    END;
    
    NextConsumpJnlLineNo := NextConsumpJnlLineNo + 10000;
    
    OnAfterCreateConsumpJnlLine(LocationCode,BinCode,QtyToPost,ItemJnlLine); <=====================
Report<Calc. Consumption>.PROCEDURE<OnAfterInsertItemJnlLine>
  Raised in: Report<Calc. Consumption>.PROCEDURE<CreateConsumpJnlLine>
    Code lines:
    ...
      ItemJnlLine.VALIDATE("Order Line No.","Prod. Order Component"."Prod. Order Line No.");
      ItemJnlLine.VALIDATE("Prod. Order Comp. Line No.","Prod. Order Component"."Line No.");
    
      OnBeforeInsertItemJnlLine(ItemJnlLine,"Prod. Order Component");
      ItemJnlLine.INSERT;
      OnAfterInsertItemJnlLine(ItemJnlLine); <=====================
    
      IF Item."Item Tracking Code" <> '' THEN
        AssignItemTracking("Prod. Order Component",ItemJnlLine);
    END;
    ...
Report<Calc. Consumption>.PROCEDURE<OnBeforeCreateConsumpJnlLine>
  Raised in: Report<Calc. Consumption>.PROCEDURE<CreateConsumpJnlLine>
    Code lines:
    OnBeforeCreateConsumpJnlLine(LocationCode,BinCode,QtyToPost); <=====================
    
    Window.UPDATE(3,QtyToPost);
    
    IF Location.GET(LocationCode) AND Location."Require Pick" AND Location."Require Shipment" THEN
      "Prod. Order Component".AdjustQtyToQtyPicked(QtyToPost);
    
    IF (ItemJnlLine."Item No." = "Prod. Order Component"."Item No.") AND
       (LocationCode = ItemJnlLine."Location Code") AND
       (BinCode = ItemJnlLine."Bin Code")
    ...
Report<Calc. Consumption>.PROCEDURE<OnBeforeInsertItemJnlLine>
  Raised in: Report<Calc. Consumption>.PROCEDURE<CreateConsumpJnlLine>
    Code lines:
    ...
      IF BinCode <> '' THEN
        ItemJnlLine."Bin Code" := BinCode;
      ItemJnlLine.VALIDATE("Order Line No.","Prod. Order Component"."Prod. Order Line No.");
      ItemJnlLine.VALIDATE("Prod. Order Comp. Line No.","Prod. Order Component"."Line No.");
    
      OnBeforeInsertItemJnlLine(ItemJnlLine,"Prod. Order Component"); <=====================
      ItemJnlLine.INSERT;
      OnAfterInsertItemJnlLine(ItemJnlLine);
    
      IF Item."Item Tracking Code" <> '' THEN
    ...
Report<Get Source Documents>.PROCEDURE<OnAfterCreateRcptHeader>
  Raised in: Report<Get Source Documents>.PROCEDURE<CreateReceiptHeader>
    Code lines:
    ...
    WhseReceiptHeader.INSERT(TRUE);
    ActivitiesCreated := ActivitiesCreated + 1;
    WhseHeaderCreated := TRUE;
    COMMIT;
    
    OnAfterCreateRcptHeader(WhseReceiptHeader,"Warehouse Request","Purchase Line"); <=====================
Report<Get Source Documents>.PROCEDURE<OnAfterCreateShptHeader>
  Raised in: Report<Get Source Documents>.PROCEDURE<CreateShptHeader>
    Code lines:
    ...
    OnBeforeWhseShptHeaderInsert(WhseShptHeader,"Warehouse Request");
    WhseShptHeader.INSERT(TRUE);
    ActivitiesCreated := ActivitiesCreated + 1;
    WhseHeaderCreated := TRUE;
    
    OnAfterCreateShptHeader(WhseShptHeader,"Warehouse Request","Sales Line"); <=====================
Report<Get Source Documents>.PROCEDURE<OnAfterCreateWhseDocuments>
  Raised in: Report<Get Source Documents>.<DataItem>.<OnPostDataItem>
    Code lines:
    IsHandled := NOT (WhseHeaderCreated OR OneHeaderCreated);
    OnBeforeCreateWhseDocuments(WhseReceiptHeader,WhseShptHeader,IsHandled,"Warehouse Request");
    IF NOT IsHandled THEN BEGIN
      OnAfterCreateWhseDocuments(WhseReceiptHeader,WhseShptHeader,WhseHeaderCreated,"Warehouse Request"); <=====================
      WhseShptHeader.SortWhseDoc;
      WhseReceiptHeader.SortWhseDoc;
    END;
Report<Get Source Documents>.PROCEDURE<OnAfterProcessDocumentLine>
  Raised in: Report<Get Source Documents>.<DataItem>.<OnPostDataItem>
    Code lines:
    IF OneHeaderCreated OR WhseHeaderCreated THEN BEGIN
      UpdateReceiptHeaderStatus;
      CheckFillQtyToHandle;
    END;
    
    OnAfterProcessDocumentLine(WhseShptHeader,"Warehouse Request",LineCreated); <=====================
  Raised in: Report<Get Source Documents>.<DataItem>.<OnPostDataItem>
    Code lines:
    IF OneHeaderCreated OR WhseHeaderCreated THEN BEGIN
      UpdateReceiptHeaderStatus;
      CheckFillQtyToHandle;
    END;
    
    OnAfterProcessDocumentLine(WhseShptHeader,"Warehouse Request",LineCreated); <=====================
  Raised in: Report<Get Source Documents>.<DataItem>.<OnPostDataItem>
    Code lines:
    IF OneHeaderCreated OR WhseHeaderCreated THEN BEGIN
      UpdateReceiptHeaderStatus;
      CheckFillQtyToHandle;
    END;
    
    OnAfterProcessDocumentLine(WhseShptHeader,"Warehouse Request",LineCreated); <=====================
Report<Get Source Documents>.PROCEDURE<OnAfterPurchaseLineOnPreDataItem>
  Raised in: Report<Get Source Documents>.<DataItem>.<OnPreDataItem>
    Code lines:
    ...
    ELSE
      SETFILTER("Outstanding Quantity",'<0');
    SETRANGE("Drop Shipment",FALSE);
    SETRANGE("Job No.",'');
    
    OnAfterPurchaseLineOnPreDataItem("Purchase Line",OneHeaderCreated,WhseShptHeader,WhseReceiptHeader); <=====================
Report<Get Source Documents>.PROCEDURE<OnAfterSalesHeaderOnAfterGetRecord>
  Raised in: Report<Get Source Documents>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
      Cust.CheckBlockedCustOnDocs(Cust,"Document Type",FALSE,FALSE);
    SalesHeaderCounted := FALSE;
    
    BreakReport := FALSE;
    SkipRecord := FALSE;
    OnAfterSalesHeaderOnAfterGetRecord("Sales Header",SkipRecord,BreakReport); <=====================
    IF BreakReport THEN
      CurrReport.BREAK;
    IF SkipRecord THEN
      CurrReport.SKIP;
Report<Get Source Documents>.PROCEDURE<OnAfterSalesHeaderOnPreDataItem>
  Raised in: Report<Get Source Documents>.<DataItem>.<OnPreDataItem>
    Code lines:
    IF "Warehouse Request"."Source Type" <> DATABASE::"Sales Line" THEN
      CurrReport.BREAK;
    
    OnAfterSalesHeaderOnPreDataItem("Sales Header"); <=====================
Report<Get Source Documents>.PROCEDURE<OnAfterSalesLineOnPreDataItem>
  Raised in: Report<Get Source Documents>.<DataItem>.<OnPreDataItem>
    Code lines:
    ...
    ELSE
      SETFILTER("Outstanding Quantity",'<0');
    SETRANGE("Drop Shipment",FALSE);
    SETRANGE("Job No.",'');
    
    OnAfterSalesLineOnPreDataItem("Sales Line",OneHeaderCreated,WhseShptHeader,WhseReceiptHeader); <=====================
Report<Get Source Documents>.PROCEDURE<OnAfterServiceLineOnPreDataItem>
  Raised in: Report<Get Source Documents>.<DataItem>.<OnPreDataItem>
    Code lines:
    ...
      SETFILTER("Outstanding Quantity",'>0')
    ELSE
      SETFILTER("Outstanding Quantity",'<0');
    SETRANGE("Job No.",'');
    
    OnAfterServiceLineOnPreDataItem("Service Line",OneHeaderCreated,WhseShptHeader,WhseReceiptHeader); <=====================
Report<Get Source Documents>.PROCEDURE<OnAfterTransferLineOnPreDataItem>
  Raised in: Report<Get Source Documents>.<DataItem>.<OnPreDataItem>
    Code lines:
    ...
        SETFILTER("Outstanding Quantity",'>0');
      1:
        SETFILTER("Qty. in Transit",'>0');
    END;
    
    OnAfterTransferLineOnPreDataItem("Transfer Line",OneHeaderCreated,WhseShptHeader,WhseReceiptHeader); <=====================
Report<Get Source Documents>.PROCEDURE<OnAfterTransHeaderOnAfterGetRecord>
  Raised in: Report<Get Source Documents>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    BreakReport := FALSE;
    SkipRecord := FALSE;
    OnAfterTransHeaderOnAfterGetRecord("Transfer Header",SkipRecord,BreakReport); <=====================
    IF BreakReport THEN
      CurrReport.BREAK;
    IF SkipRecord THEN
      CurrReport.SKIP;
Report<Get Source Documents>.PROCEDURE<OnAfterWarehouseRequestOnPreDataItem>
  Raised in: Report<Get Source Documents>.<DataItem>.<OnPreDataItem>
    Code lines:
    ...
          Type := Type::Outbound;
      END;
      SETRANGE(Type,Type);
    END;
    
    OnAfterWarehouseRequestOnPreDataItem("Warehouse Request"); <=====================
Report<Get Source Documents>.PROCEDURE<OnBeforeCreateRcptHeader>
  Raised in: Report<Get Source Documents>.PROCEDURE<CreateReceiptHeader>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCreateRcptHeader(WhseReceiptHeader,"Warehouse Request","Purchase Line",IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WhseReceiptHeader.INIT;
    WhseReceiptHeader."No." := '';
    WhseReceiptHeader."Location Code" := "Warehouse Request"."Location Code";
    IF Location.Code = WhseReceiptHeader."Location Code" THEN
      WhseReceiptHeader."Bin Code" := Location."Receipt Bin Code";
    ...
Report<Get Source Documents>.PROCEDURE<OnBeforeCreateShptHeader>
  Raised in: Report<Get Source Documents>.PROCEDURE<CreateShptHeader>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCreateShptHeader(WhseShptHeader,"Warehouse Request","Sales Line",IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WhseShptHeader.INIT;
    WhseShptHeader."No." := '';
    WhseShptHeader."Location Code" := "Warehouse Request"."Location Code";
    IF Location.Code = WhseShptHeader."Location Code" THEN
      WhseShptHeader."Bin Code" := Location."Shipment Bin Code";
    ...
Report<Get Source Documents>.PROCEDURE<OnBeforeCreateWhseDocuments>
  Raised in: Report<Get Source Documents>.<DataItem>.<OnPostDataItem>
    Code lines:
    IsHandled := NOT (WhseHeaderCreated OR OneHeaderCreated);
    OnBeforeCreateWhseDocuments(WhseReceiptHeader,WhseShptHeader,IsHandled,"Warehouse Request"); <=====================
    IF NOT IsHandled THEN BEGIN
      OnAfterCreateWhseDocuments(WhseReceiptHeader,WhseShptHeader,WhseHeaderCreated,"Warehouse Request");
      WhseShptHeader.SortWhseDoc;
      WhseReceiptHeader.SortWhseDoc;
    END;
Report<Get Source Documents>.PROCEDURE<OnBeforeWarehouseRequestOnAfterGetRecord>
  Raised in: Report<Get Source Documents>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    WhseHeaderCreated := FALSE;
    OnBeforeWarehouseRequestOnAfterGetRecord( <=====================
      "Warehouse Request",WhseHeaderCreated,SkipRecord,BreakReport);
    IF BreakReport THEN
      CurrReport.BREAK;
    IF SkipRecord THEN
      CurrReport.SKIP;
    
    CASE Type OF
      Type::Inbound:
    ...
Report<Get Source Documents>.PROCEDURE<OnBeforeWhseShptHeaderInsert>
  Raised in: Report<Get Source Documents>.PROCEDURE<CreateShptHeader>
    Code lines:
    ...
    WhseShptHeader."Location Code" := "Warehouse Request"."Location Code";
    IF Location.Code = WhseShptHeader."Location Code" THEN
      WhseShptHeader."Bin Code" := Location."Shipment Bin Code";
    WhseShptHeader."External Document No." := "Warehouse Request"."External Document No.";
    WhseShptLine.LOCKTABLE;
    OnBeforeWhseShptHeaderInsert(WhseShptHeader,"Warehouse Request"); <=====================
    WhseShptHeader.INSERT(TRUE);
    ActivitiesCreated := ActivitiesCreated + 1;
    WhseHeaderCreated := TRUE;
    
Report<Get Source Documents>.PROCEDURE<OnSalesLineOnAfterGetRecordOnBeforeCreateRcptHeader>
  Raised in: Report<Get Source Documents>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    VerifyItemNotBlocked("No.");
    IF "Location Code" = "Warehouse Request"."Location Code" THEN
      CASE RequestType OF
        RequestType::Receive:
          IF WhseActivityCreate.CheckIfSalesLine2ReceiptLine("Sales Line") THEN BEGIN
            OnSalesLineOnAfterGetRecordOnBeforeCreateRcptHeader( <=====================
              "Sales Line","Warehouse Request",WhseReceiptHeader,WhseHeaderCreated,OneHeaderCreated);
            IF NOT OneHeaderCreated AND NOT WhseHeaderCreated THEN
              CreateReceiptHeader;
            IF NOT WhseActivityCreate.SalesLine2ReceiptLine(WhseReceiptHeader,"Sales Line") THEN
    ...
Report<Get Source Documents>.PROCEDURE<OnSalesLineOnAfterGetRecordOnBeforeCreateShptHeader>
  Raised in: Report<Get Source Documents>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
                SkippedSourceDoc += 1;
                SalesHeaderCounted := TRUE;
              END;
              CurrReport.SKIP;
            END;
            OnSalesLineOnAfterGetRecordOnBeforeCreateShptHeader( <=====================
              "Sales Line","Warehouse Request",WhseShptHeader,WhseHeaderCreated,OneHeaderCreated);
            IF NOT OneHeaderCreated AND NOT WhseHeaderCreated THEN
              CreateShptHeader;
            IF NOT WhseActivityCreate.FromSalesLine2ShptLine(WhseShptHeader,"Sales Line") THEN
    ...
Report<Get Source Documents>.PROCEDURE<OnTransferLineOnAfterGetRecordOnBeforeCreateRcptHeader>
  Raised in: Report<Get Source Documents>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    CASE RequestType OF
      RequestType::Receive:
        IF WhseActivityCreate.CheckIfTransLine2ReceiptLine("Transfer Line") THEN BEGIN
          OnTransferLineOnAfterGetRecordOnBeforeCreateRcptHeader( <=====================
            "Transfer Line","Warehouse Request",WhseReceiptHeader,WhseHeaderCreated,OneHeaderCreated);
          IF NOT OneHeaderCreated AND NOT WhseHeaderCreated THEN
            CreateReceiptHeader;
          IF NOT WhseActivityCreate.TransLine2ReceiptLine(WhseReceiptHeader,"Transfer Line") THEN
            ErrorOccured := TRUE;
          LineCreated := TRUE;
    ...
Report<Get Source Documents>.PROCEDURE<OnTransferLineOnAfterGetRecordOnBeforeCreateShptHeader>
  Raised in: Report<Get Source Documents>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
            ErrorOccured := TRUE;
          LineCreated := TRUE;
        END;
      RequestType::Ship:
        IF WhseActivityCreate.CheckIfFromTransLine2ShptLine("Transfer Line") THEN BEGIN
          OnTransferLineOnAfterGetRecordOnBeforeCreateShptHeader( <=====================
            "Transfer Line","Warehouse Request",WhseShptHeader,WhseHeaderCreated,OneHeaderCreated);
          IF NOT OneHeaderCreated AND NOT WhseHeaderCreated THEN
            CreateShptHeader;
          IF NOT WhseActivityCreate.FromTransLine2ShptLine(WhseShptHeader,"Transfer Line") THEN
    ...
Report<Create Pick>.PROCEDURE<OnAfterGetResultMessage>
  Raised in: Report<Create Pick>.PROCEDURE<GetResultMessage>
    Code lines:
    ...
      IF FirstPickNo = LastPickNo THEN
        MESSAGE(Text001,FirstPickNo)
      ELSE
        MESSAGE(Text002,FirstPickNo,LastPickNo);
    ReturnValue := FirstPickNo <> '';
    OnAfterGetResultMessage(ReturnValue); <=====================
    EXIT(ReturnValue);
Report<Create Pick>.PROCEDURE<OnAfterSetQuantityToPick>
  Raised in: Report<Create Pick>.PROCEDURE<CreateTempLine>
    Code lines:
    ...
            0,PickWkshLine."Line No.",PickWkshLine."Location Code");
      END;
    
      PickQty := PickWkshLine."Qty. to Handle";
      PickQtyBase := PickWkshLine."Qty. to Handle (Base)";
      OnAfterSetQuantityToPick(PickWkshLine,PickQty,PickQtyBase); <=====================
      IF (PickQty > 0) AND
         (PickWkshLine."Destination Type" = PickWkshLine."Destination Type"::Customer)
      THEN BEGIN
        PickWkshLine.TESTFIELD("Destination No.");
    ...
Report<Create Pick>.PROCEDURE<OnBeforeCheckPickActivity>
  Raised in: Report<Create Pick>.PROCEDURE<CheckPickActivity>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckPickActivity(IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF FirstPickNo = '' THEN
      ERROR(NothingToHandleErr,CreatePick.GetCannotBeHandledReason);
Report<Create Warehouse Location>.PROCEDURE<OnCreateWhseJnlLineOnBeforeCheck>
  Raised in: Report<Create Warehouse Location>.PROCEDURE<CreateWhseJnlLine>
    Code lines:
    ...
      TempWhseJnlLine."Bin Code" := AdjBinCode;
      TempWhseJnlLine."To Bin Code" := AdjBinCode;
      GetItemUnitOfMeasure("Item No.","Unit of Measure Code");
      TempWhseJnlLine.Cubage := TempWhseJnlLine."Qty. (Absolute)" * ItemUnitOfMeasure.Cubage;
      TempWhseJnlLine.Weight := TempWhseJnlLine."Qty. (Absolute)" * ItemUnitOfMeasure.Weight;
      OnCreateWhseJnlLineOnBeforeCheck(TempWhseJnlLine,ItemLedgEntry); <=====================
      WMSMgt.CheckWhseJnlLine(TempWhseJnlLine,0,0,FALSE);
      TempWhseJnlLine.INSERT;
    END;
Report<Calculate Inventory Value>.PROCEDURE<OnAfterInsertItemJnlLine>
  Raised in: Report<Calculate Inventory Value>.PROCEDURE<InsertItemJnlLine>
    Code lines:
    ...
      END;
      "Update Standard Cost" := UpdStdCost;
      "Partial Revaluation" := TRUE;
      "Applied Amount" := AppliedAmount;
      INSERT;
      OnAfterInsertItemJnlLine(ItemJnlLine); <=====================
    END;
Report<Service - Invoice>.PROCEDURE<OnBeforeGetDocumentCaption>
  Raised in: Report<Service - Invoice>.PROCEDURE<DocumentCaption>
    Code lines:
    OnBeforeGetDocumentCaption("Service Invoice Header",DocCaption); <=====================
    IF DocCaption <> '' THEN
      EXIT(DocCaption);
    EXIT(Text004);
Report<Delete Invoiced Service Orders>.PROCEDURE<OnBeforeDeleteServiceHeader>
  Raised in: Report<Delete Invoiced Service Orders>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
            ServOrderAlloc.DELETEALL;
            ServAllocMgt.SetServOrderAllocStatus("Service Header");
    
            ApprovalsMgmt.DeleteApprovalEntries(RECORDID);
    
            OnBeforeDeleteServiceHeader("Service Header"); <=====================
    
            DELETE;
            COMMIT;
          END;
    ...
Report<Get Item Ledger Entries>.PROCEDURE<OnBeforeInsertItemJnlLine>
  Raised in: Report<Get Item Ledger Entries>.PROCEDURE<InsertItemJnlLine>
    Code lines:
    ...
      VALIDATE("Item No.");
      "Source Type" := "Source Type"::"Item Entry";
      VALIDATE(Quantity,ROUND(ABS(Quantity),UOMMgt.QtyRndPrecision));
      VALIDATE("Cost Regulation %",IndirectCostPctReq);
    
      OnBeforeInsertItemJnlLine(IntrastatJnlLine,"Item Ledger Entry"); <=====================
      INSERT;
    END;
Report<Get Item Ledger Entries>.PROCEDURE<OnBeforeInsertJobLedgerLine>
  Raised in: Report<Get Item Ledger Entries>.PROCEDURE<InsertJobLedgerLine>
    Code lines:
    ...
      "Source Type" := "Source Type"::"Job Entry";
      VALIDATE(Quantity,ROUND(ABS(Quantity),0.00001));
    
      VALIDATE("Cost Regulation %",IndirectCostPctReq);
    
      OnBeforeInsertJobLedgerLine(IntrastatJnlLine,"Job Ledger Entry"); <=====================
      INSERT;
    END;
Report<Get Item Ledger Entries>.PROCEDURE<OnBeforeInsertValueEntryLine>
  Raised in: Report<Get Item Ledger Entries>.PROCEDURE<InsertValueEntryLine>
    Code lines:
    ...
      VALIDATE("Item No.");
      "Source Type" := "Source Type"::"Item Entry";
      VALIDATE(Quantity,ROUND(ABS(Quantity),0.00001));
      VALIDATE("Cost Regulation %",IndirectCostPctReq);
    
      OnBeforeInsertValueEntryLine(IntrastatJnlLine,"Item Ledger Entry"); <=====================
      INSERT;
    END;
Report<Adjust Exchange Rates>.PROCEDURE<OnAfterInitDtldCustLedgerEntry>
  Raised in: Report<Adjust Exchange Rates>.PROCEDURE<InitDtldCustLedgEntry>
    Code lines:
    ...
      DtldCustLedgEntry."Initial Entry Global Dim. 1" := "Global Dimension 1 Code";
      DtldCustLedgEntry."Initial Entry Global Dim. 2" := "Global Dimension 2 Code";
      DtldCustLedgEntry."Initial Document Type" := "Document Type";
    END;
    
    OnAfterInitDtldCustLedgerEntry(DtldCustLedgEntry); <=====================
Report<Adjust Exchange Rates>.PROCEDURE<OnAfterInitDtldVendLedgerEntry>
  Raised in: Report<Adjust Exchange Rates>.PROCEDURE<InitDtldVendLedgEntry>
    Code lines:
    ...
      DtldVendLedgEntry."Initial Entry Global Dim. 1" := "Global Dimension 1 Code";
      DtldVendLedgEntry."Initial Entry Global Dim. 2" := "Global Dimension 2 Code";
      DtldVendLedgEntry."Initial Document Type" := "Document Type";
    END;
    
    OnAfterInitDtldVendLedgerEntry(DtldVendLedgEntry); <=====================
Report<Adjust Exchange Rates>.PROCEDURE<OnBeforeOnInitReport>
  Raised in: Report<Adjust Exchange Rates>.<OnInitReport>
    Code lines:
    IsHandled := FALSE;
    OnBeforeOnInitReport(IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
Report<Contract Price Update - Test>.PROCEDURE<OnBeforeTempServiceContractLineModify>
  Raised in: Report<Contract Price Update - Test>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
        TempServContractLine.VALIDATE(
          "Line Value",
          ROUND(
            TempServContractLine."Line Value" + (TempServContractLine."Line Value" * PriceUpdPct / 100),
            Currency."Amount Rounding Precision"));
        OnBeforeTempServiceContractLineModify(TempServContractLine,"Service Contract Header",UpdateToDate,PriceUpdPct); <=====================
        TempServContractLine.MODIFY(TRUE);
        NewAnnualAmount := NewAnnualAmount + TempServContractLine."Line Amount";
      UNTIL TempServContractLine.NEXT = 0;
    
    ...
Report<Contr. Serv. Orders - Test>.PROCEDURE<OnBeforeFindServiceItemLine>
  Raised in: Report<Contr. Serv. Orders - Test>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
      ServItemLine.SETCURRENTKEY("Document Type","Document No.","Service Item No.");
      ServItemLine.SETRANGE("Document Type",ServHeader."Document Type");
      ServItemLine.SETRANGE("Document No.",ServHeader."No.");
      ServItemLine.SETRANGE("Contract No.","Contract No.");
      ServItemLine.SETRANGE("Contract Line No.","Line No.");
      OnBeforeFindServiceItemLine( <=====================
        ServItemLine,"Service Contract Header","Service Contract Line",ServHeader);
      IF ServItemLine.FINDFIRST THEN
        CurrReport.SKIP;
    END;
    ...
Report<Batch Post Service Orders>.PROCEDURE<OnAfterPostReport>
  Raised in: Report<Batch Post Service Orders>.<OnPostReport>
    Code lines:
    OnAfterPostReport; <=====================
Report<Batch Post Service Orders>.PROCEDURE<OnBeforePreReport>
  Raised in: Report<Batch Post Service Orders>.<OnPreReport>
    Code lines:
    OnBeforePreReport; <=====================
Report<Batch Post Service Invoices>.PROCEDURE<OnAfterPostReport>
  Raised in: Report<Batch Post Service Invoices>.<OnPostReport>
    Code lines:
    OnAfterPostReport; <=====================
Report<Batch Post Service Invoices>.PROCEDURE<OnBeforePreReport>
  Raised in: Report<Batch Post Service Invoices>.<OnPreReport>
    Code lines:
    OnBeforePreReport; <=====================
Report<Batch Post Service Cr. Memos>.PROCEDURE<OnAfterPostReport>
  Raised in: Report<Batch Post Service Cr. Memos>.<OnPostReport>
    Code lines:
    OnAfterPostReport; <=====================
Report<Batch Post Service Cr. Memos>.PROCEDURE<OnBeforePreReport>
  Raised in: Report<Batch Post Service Cr. Memos>.<OnPreReport>
    Code lines:
    OnBeforePreReport; <=====================
Report<Create Contract Invoices>.PROCEDURE<OnAfterServiceContractHeaderOnAfterGetRecord>
  Raised in: Report<Create Contract Invoices>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
        ELSE
          ResultDescription := '';
    END;
    ServContractMgt.FinishCodeunit;
    
    OnAfterServiceContractHeaderOnAfterGetRecord("Service Contract Header",InvoiceNo); <=====================
Report<Create Contract Invoices>.PROCEDURE<OnAfterServiceContractHeaderOnPostDataItem>
  Raised in: Report<Create Contract Invoices>.<DataItem>.<OnPostDataItem>
    Code lines:
    ...
          MESSAGE(Text010,NoOfInvoices)
        ELSE
          MESSAGE(Text011,NoOfInvoices);
    END;
    
    OnAfterServiceContractHeaderOnPostDataItem; <=====================
Report<Create Contract Invoices>.PROCEDURE<OnAfterServiceContractHeaderOnPreDataItem>
  Raised in: Report<Create Contract Invoices>.<DataItem>.<OnPreDataItem>
    Code lines:
    ...
    Counter1 := 0;
    Counter2 := 0;
    CounterBreak := ROUND(CounterTotal / 100,1,'>');
    Currency.InitRoundingPrecision;
    
    OnAfterServiceContractHeaderOnPreDataItem("Service Contract Header",PostingDate,InvoiceToDate); <=====================
Report<Create Contract Invoices>.PROCEDURE<OnBeforeServiceContractHeaderOnAfterGetRecord>
  Raised in: Report<Create Contract Invoices>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    OnBeforeServiceContractHeaderOnAfterGetRecord("Service Contract Header"); <=====================
    
    Counter1 := Counter1 + 1;
    Counter2 := Counter2 + 1;
    IF Counter2 >= CounterBreak THEN BEGIN
      Counter2 := 0;
      Window.UPDATE(1,ROUND(Counter1 / CounterTotal * 10000,1));
    END;
    CLEAR(ServContractMgt);
    ServContractMgt.InitCodeUnit;
    ...
Report<Update Contract Prices>.PROCEDURE<OnBeforeServiceContractLineModify>
  Raised in: Report<Update Contract Prices>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
            "Line Value",
            ROUND(
              ServContractLine."Line Value" + (ServContractLine."Line Value" * PriceUpdPct / 100),
              Currency."Amount Rounding Precision"));
    
          OnBeforeServiceContractLineModify( <=====================
            ServContractLine,"Service Contract Header",UpdateToDate,PriceUpdPct);
    
          IF ServMgtSetup."Register Contract Changes" THEN
            ServContractLine.LogContractLineChanges(ServContractLine2);
    ...
Report<Create Contract Service Orders>.PROCEDURE<OnAfterInsertServItemLine>
  Raised in: Report<Create Contract Service Orders>.PROCEDURE<CreateServiceItemLine>
    Code lines:
    ...
      "Contract Line No." := "Service Contract Line"."Line No.";
      UpdateResponseTimeHours;
      INSERT(TRUE);
    END;
    
    OnAfterInsertServItemLine(ServItemLine,ServiceContractLine); <=====================
Report<Return Order Confirmation>.PROCEDURE<OnAfterInitReport>
  Raised in: Report<Return Order Confirmation>.<OnInitReport>
    Code lines:
    GLSetup.GET;
    CompanyInfo.GET;
    SalesSetup.GET;
    FormatDocument.SetLogoPosition(SalesSetup."Logo Position on Documents",CompanyInfo1,CompanyInfo2,CompanyInfo3);
    
    OnAfterInitReport; <=====================
Report<Return Order Confirmation>.PROCEDURE<OnAfterPostDataItem>
  Raised in: Report<Return Order Confirmation>.<DataItem>.<OnPostDataItem>
    Code lines:
    OnAfterPostDataItem("Sales Header"); <=====================
Report<Purchase - Return Shipment>.PROCEDURE<OnAfterInitReport>
  Raised in: Report<Purchase - Return Shipment>.<OnInitReport>
    Code lines:
    CompanyInfo.GET;
    
    OnAfterInitReport; <=====================
Report<Purchase - Return Shipment>.PROCEDURE<OnAfterPostDataItem>
  Raised in: Report<Purchase - Return Shipment>.<DataItem>.<OnPostDataItem>
    Code lines:
    OnAfterPostDataItem("Return Shipment Header"); <=====================
Report<Return Order>.PROCEDURE<OnAfterInitReport>
  Raised in: Report<Return Order>.<OnInitReport>
    Code lines:
    GLSetup.GET;
    CompanyInfo.GET;
    
    OnAfterInitReport; <=====================
Report<Return Order>.PROCEDURE<OnAfterPostDataItem>
  Raised in: Report<Return Order>.<DataItem>.<OnPostDataItem>
    Code lines:
    OnAfterPostDataItem("Purchase Header"); <=====================
Report<Sales - Return Receipt>.PROCEDURE<OnAfterInitReport>
  Raised in: Report<Sales - Return Receipt>.<OnInitReport>
    Code lines:
    CompanyInfo.GET;
    SalesSetup.GET;
    FormatDocument.SetLogoPosition(SalesSetup."Logo Position on Documents",CompanyInfo1,CompanyInfo2,CompanyInfo3);
    
    OnAfterInitReport; <=====================
Report<Sales - Return Receipt>.PROCEDURE<OnAfterPostDataItem>
  Raised in: Report<Sales - Return Receipt>.<DataItem>.<OnPostDataItem>
    Code lines:
    OnAfterPostDataItem("Return Receipt Header"); <=====================
Report<Delete Invd Sales Ret. Orders>.PROCEDURE<OnBeforeDeleteSalesOrderHeader>
  Raised in: Report<Delete Invd Sales Ret. Orders>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
              IF NOT WhseRequest.ISEMPTY THEN
                WhseRequest.DELETEALL(TRUE);
    
              ApprovalsMgmt.DeleteApprovalEntries(RECORDID);
    
              OnBeforeDeleteSalesOrderHeader("Sales Header"); <=====================
              DELETE;
            END;
            COMMIT;
          END;
    ...
Report<Delete Invd Sales Ret. Orders>.PROCEDURE<OnBeforeDeleteSalesOrderLine>
  Raised in: Report<Delete Invd Sales Ret. Orders>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
                THEN BEGIN
                  IF SalesOrderLine.Type = SalesOrderLine.Type::"Charge (Item)" THEN BEGIN
                    ItemChargeAssgntSales.SETRANGE("Document Line No.",SalesOrderLine."Line No.");
                    ItemChargeAssgntSales.DELETEALL;
                  END;
                  OnBeforeDeleteSalesOrderLine(SalesOrderLine); <=====================
                  IF SalesOrderLine.HASLINKS THEN
                    SalesOrderLine.DELETELINKS;
                  SalesOrderLine.DELETE;
                END ELSE
    ...
Report<Combine Return Receipts>.PROCEDURE<OnAfterSalesOrderHeaderOnPreDataItem>
  Raised in: Report<Combine Return Receipts>.DataItem<SalesOrderHeader>.<OnPreDataItem>
    Code lines:
    ...
      Text002 +
      Text003 +
      Text004 +
      Text005);
    
    OnAfterSalesOrderHeaderOnPreDataItem(SalesOrderHeader); <=====================
Report<Combine Return Receipts>.PROCEDURE<OnAfterShouldFinalizeSalesInvHeader>
  Raised in: Report<Combine Return Receipts>.PROCEDURE<ShouldFinalizeSalesInvHeader>
    Code lines:
    Finalize :=
      (SalesOrderHeader."Bill-to Customer No." <> SalesHeader."Bill-to Customer No.") OR
      (SalesOrderHeader."Currency Code" <> SalesHeader."Currency Code") OR
      (SalesOrderHeader."Dimension Set ID" <> SalesHeader."Dimension Set ID");
    
    OnAfterShouldFinalizeSalesInvHeader(SalesOrderHeader,SalesHeader,Finalize); <=====================
    EXIT(Finalize);
Report<Combine Return Receipts>.PROCEDURE<OnBeforeSalesCrMemoHeaderInsert>
  Raised in: Report<Combine Return Receipts>.PROCEDURE<InsertSalesInvHeader>
    Code lines:
    WITH SalesHeader DO BEGIN
      INIT;
      "Document Type" := "Document Type"::"Credit Memo";
      "No." := '';
      OnBeforeSalesCrMemoHeaderInsert(SalesHeader,SalesOrderHeader); <=====================
      INSERT(TRUE);
      VALIDATE("Sell-to Customer No.",SalesOrderHeader."Bill-to Customer No.");
      IF "Bill-to Customer No." <> "Sell-to Customer No." THEN
        VALIDATE("Bill-to Customer No.",SalesOrderHeader."Bill-to Customer No.");
      VALIDATE("Posting Date",PostingDateReq);
    ...
Report<Combine Return Receipts>.PROCEDURE<OnBeforeSalesCrMemoHeaderModify>
  Raised in: Report<Combine Return Receipts>.PROCEDURE<InsertSalesInvHeader>
    Code lines:
    ...
      VALIDATE("Document Date",DocDateReq);
      VALIDATE("Currency Code",SalesOrderHeader."Currency Code");
      "Shortcut Dimension 1 Code" := SalesOrderHeader."Shortcut Dimension 1 Code";
      "Shortcut Dimension 2 Code" := SalesOrderHeader."Shortcut Dimension 2 Code";
      "Dimension Set ID" := SalesOrderHeader."Dimension Set ID";
      OnBeforeSalesCrMemoHeaderModify(SalesHeader,SalesOrderHeader); <=====================
      MODIFY;
      COMMIT;
    END;
Report<Delete Invd Purch. Ret. Orders>.PROCEDURE<OnBeforeDeletePurchaseHeader>
  Raised in: Report<Delete Invd Purch. Ret. Orders>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
              IF NOT WhseRequest.ISEMPTY THEN
                WhseRequest.DELETEALL(TRUE);
    
              ApprovalsMgmt.DeleteApprovalEntries(RECORDID);
    
              OnBeforeDeletePurchaseHeader("Purchase Header"); <=====================
              DELETE;
            END;
            COMMIT;
          END;
    ...
Report<Delete Invd Purch. Ret. Orders>.PROCEDURE<OnBeforePurchLineDelete>
  Raised in: Report<Delete Invd Purch. Ret. Orders>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
                    ItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchLine."Line No.");
                    ItemChargeAssgntPurch.DELETEALL;
                  END;
                  IF PurchLine.HASLINKS THEN
                    PurchLine.DELETELINKS;
                  OnBeforePurchLineDelete(PurchLine); <=====================
                  PurchLine.DELETE;
                END ELSE
                  AllLinesDeleted := FALSE;
              UNTIL PurchLine.NEXT = 0;
    ...
Report<Create Ret.-Related Documents>.PROCEDURE<OnPreReportOnBeforeCopyPurchDoc>
  Raised in: Report<Create Ret.-Related Documents>.<OnPreReport>
    Code lines:
    ...
    
    IF CreatePO THEN BEGIN
      POPurchHeader."Document Type" := POPurchHeader."Document Type"::Order;
      CLEAR(CopyDocMgt);
      CopyDocMgt.SetProperties(TRUE,FALSE,FALSE,FALSE,TRUE,FALSE,FALSE);
      OnPreReportOnBeforeCopyPurchDoc(CopyDocMgt); <=====================
      CopyDocMgt.CopyFromSalesToPurchDoc(VendorNo,SROSalesHeader,POPurchHeader);
      TempRetRelDoc."Entry No." := 2;
      TempRetRelDoc."Document Type" := TempRetRelDoc."Document Type"::"Purchase Order";
      TempRetRelDoc."No." := POPurchHeader."No.";
    ...
Report<Create Ret.-Related Documents>.PROCEDURE<OnPreReportOnBeforeCopyPurchReturnDoc>
  Raised in: Report<Create Ret.-Related Documents>.<OnPreReport>
    Code lines:
    ...
    
    IF CreatePRO THEN BEGIN
      PROPurchHeader."Document Type" := PROPurchHeader."Document Type"::"Return Order";
      CLEAR(CopyDocMgt);
      CopyDocMgt.SetProperties(TRUE,FALSE,FALSE,FALSE,TRUE,FALSE,FALSE);
      OnPreReportOnBeforeCopyPurchReturnDoc(CopyDocMgt); <=====================
      CopyDocMgt.CopyFromSalesToPurchDoc(VendorNo,SROSalesHeader,PROPurchHeader);
      TempRetRelDoc."Entry No." := 1;
      TempRetRelDoc."Document Type" := TempRetRelDoc."Document Type"::"Purchase Return Order";
      TempRetRelDoc."No." := PROPurchHeader."No.";
    ...
Report<Create Ret.-Related Documents>.PROCEDURE<OnPreReportOnBeforeCopySalesDoc>
  Raised in: Report<Create Ret.-Related Documents>.<OnPreReport>
    Code lines:
    ...
    
    IF CreateSO THEN BEGIN
      SOSalesHeader."Document Type" := SOSalesHeader."Document Type"::Order;
      CLEAR(CopyDocMgt);
      CopyDocMgt.SetProperties(TRUE,FALSE,FALSE,TRUE,TRUE,FALSE,FALSE);
      OnPreReportOnBeforeCopySalesDoc(CopyDocMgt); <=====================
      CopyDocMgt.CopySalesDoc(DocType::"Return Order",SROSalesHeader."No.",SOSalesHeader);
      TempRetRelDoc."Entry No." := 3;
      TempRetRelDoc."Document Type" := TempRetRelDoc."Document Type"::"Sales Order";
      TempRetRelDoc."No." := SOSalesHeader."No.";
    ...
Report<Move Negative Purchase Lines>.PROCEDURE<OnBeforePreReport>
  Raised in: Report<Move Negative Purchase Lines>.<OnPreReport>
    Code lines:
    OnBeforePreReport(CopyDocMgt); <=====================
    CopyDocMgt.SetProperties(TRUE,FALSE,TRUE,TRUE,TRUE,FALSE,FALSE);
    IF (FromDocType = FromDocType::"Return Order") OR (FromDocType = FromDocType::"Credit Memo") THEN
      ToDocType := ToDocType2;
    ToPurchHeader."Document Type" := CopyDocMgt.PurchHeaderDocType(ToDocType);
    CopyDocMgt.CopyPurchDoc(FromDocType,FromPurchHeader."No.",ToPurchHeader);
Report<Move Negative Sales Lines>.PROCEDURE<OnBeforePreReport>
  Raised in: Report<Move Negative Sales Lines>.<OnPreReport>
    Code lines:
    OnBeforePreReport(CopyDocMgt); <=====================
    CopyDocMgt.SetProperties(TRUE,FALSE,TRUE,TRUE,TRUE,FALSE,FALSE);
    IF (FromDocType = FromDocType::"Return Order") OR (FromDocType = FromDocType::"Credit Memo") THEN
      ToDocType := ToDocType2;
    ToSalesHeader."Document Type" := CopyDocMgt.SalesHeaderDocType(ToDocType);
    CopyDocMgt.CopySalesDoc(FromDocType,FromSalesHeader."No.",ToSalesHeader);
Report<Get Sales Orders>.PROCEDURE<OnAfterInsertReqWkshLine>
  Raised in: Report<Get Sales Orders>.PROCEDURE<InsertReqWkshLine>
    Code lines:
    ...
        "Shortcut Dimension 1 Code" := SalesLine."Shortcut Dimension 1 Code";
        "Shortcut Dimension 2 Code" := SalesLine."Shortcut Dimension 2 Code";
        "Dimension Set ID" := SalesLine."Dimension Set ID";
        MODIFY;
      END;
      OnAfterInsertReqWkshLine(ReqLine,SalesLine); <=====================
    END;
Report<Get Sales Orders>.PROCEDURE<OnBeforeInsertReqWkshLine>
  Raised in: Report<Get Sales Orders>.PROCEDURE<InsertReqWkshLine>
    Code lines:
    ...
          "No.","Location Code","Variant Code","Due Date","Vendor No.","Ref. Order Type");
      CalcStartingDate('');
      UpdateDescription;
      UpdateDatetime;
    
      OnBeforeInsertReqWkshLine(ReqLine,SalesLine,SpecOrder); <=====================
      INSERT;
      ItemTrackingMgt.CopyItemTracking(SalesLine.RowID1,RowID1,TRUE);
      IF GetDim = GetDim::"Sales Line" THEN BEGIN
        "Shortcut Dimension 1 Code" := SalesLine."Shortcut Dimension 1 Code";
    ...
Report<Calculate Plan - Req. Wksh.>.PROCEDURE<OnAfterItemOnPostDataItem>
  Raised in: Report<Calculate Plan - Req. Wksh.>.<DataItem>.<OnPostDataItem>
    Code lines:
    OnAfterItemOnPostDataItem(Item); <=====================
Report<Calculate Plan - Req. Wksh.>.PROCEDURE<OnAfterItemOnPreDataItem>
  Raised in: Report<Calculate Plan - Req. Wksh.>.<DataItem>.<OnPreDataItem>
    Code lines:
    ...
    COPYFILTER("Variant Filter",PurchReqLine."Variant Code");
    COPYFILTER("Location Filter",PurchReqLine."Location Code");
    PurchReqLine.SETFILTER("Worksheet Template Name",ReqWkshTemplateFilter);
    PurchReqLine.SETFILTER("Journal Batch Name",ReqWkshFilter);
    
    OnAfterItemOnPreDataItem(Item); <=====================
Report<Calculate Plan - Req. Wksh.>.PROCEDURE<OnAfterOnOpenPage>
  Raised in: Report<Calculate Plan - Req. Wksh.>.<RequestPage>.<OnOpenPage>
    Code lines:
    MfgSetup.GET;
    UseForecast := MfgSetup."Current Production Forecast";
    
    OnAfterOnOpenPage; <=====================
Report<Calculate Plan - Req. Wksh.>.PROCEDURE<OnAfterSkipPlanningForItemOnReqWksh>
  Raised in: Report<Calculate Plan - Req. Wksh.>.PROCEDURE<SkipPlanningForItemOnReqWksh>
    Code lines:
    ...
            EXIT(FALSE);
        UNTIL NEXT = 0;
    END;
    
    SkipPlanning := TRUE;
    OnAfterSkipPlanningForItemOnReqWksh(Item,SkipPlanning); <=====================
    EXIT(SkipPlanning);
Report<Calculate Plan - Req. Wksh.>.PROCEDURE<OnBeforeSkipPlanningForItemOnReqWksh>
  Raised in: Report<Calculate Plan - Req. Wksh.>.PROCEDURE<SkipPlanningForItemOnReqWksh>
    Code lines:
    IsHandled := FALSE;
    SkipPlanning := FALSE;
    
    OnBeforeSkipPlanningForItemOnReqWksh(Item,SkipPlanning,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(SkipPlanning);
    
    WITH Item DO
      IF (CurrWorksheetType = CurrWorksheetType::Requisition) AND
         ("Replenishment System" = "Replenishment System"::Purchase) AND
    ...
Report<Suggest Item Price on Wksh.>.PROCEDURE<OnBeforeModifyOrInsertSalesPriceWksh>
  Raised in: Report<Suggest Item Price on Wksh.>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
      IF NOT PriceAlreadyExists THEN BEGIN
        "Current Unit Price" := CurrentUnitPrice;
        "VAT Bus. Posting Gr. (Price)" := Item."VAT Bus. Posting Gr. (Price)";
      END;
    
      OnBeforeModifyOrInsertSalesPriceWksh(SalesPriceWksh); <=====================
    
      IF PriceAlreadyExists OR CreateNewPrices THEN BEGIN
        SalesPriceWksh2 := SalesPriceWksh;
        IF SalesPriceWksh2.FIND('=') THEN
    ...
Report<Suggest Item Price on Wksh.>.PROCEDURE<OnBeforeRoundMethod>
  Raised in: Report<Suggest Item Price on Wksh.>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
          ToCurrency."Unit-Amount Rounding Precision");
    
      IF CurrentUnitPrice > PriceLowerLimit THEN
        "New Unit Price" := CurrentUnitPrice * UnitPriceFactor;
    
      OnBeforeRoundMethod(SalesPriceWksh,Item,ToCurrency,UnitPriceFactor,PriceLowerLimit,CurrentUnitPrice); <=====================
    
      IF RoundingMethod.Code <> '' THEN BEGIN
        RoundingMethod."Minimum Amount" := "New Unit Price";
        IF RoundingMethod.FIND('=<') THEN BEGIN
    ...
Report<Suggest Sales Price on Wksh.>.PROCEDURE<OnBeforeModifyOrInsertSalesPriceWksh>
  Raised in: Report<Suggest Sales Price on Wksh.>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
    SalesPriceWksh."VAT Bus. Posting Gr. (Price)" := "VAT Bus. Posting Gr. (Price)";
    SalesPriceWksh."Allow Invoice Disc." := "Allow Invoice Disc.";
    SalesPriceWksh."Allow Line Disc." := "Allow Line Disc.";
    SalesPriceWksh.CalcCurrentPrice(PriceAlreadyExists);
    
    OnBeforeModifyOrInsertSalesPriceWksh(SalesPriceWksh,"Sales Price"); <=====================
    
    IF PriceAlreadyExists OR CreateNewPrices THEN BEGIN
      SalesPriceWksh2 := SalesPriceWksh;
      IF SalesPriceWksh2.FIND('=') THEN
    ...
Report<Suggest Sales Price on Wksh.>.PROCEDURE<OnSalesPriceOnAfterGetRecordOnAfterCheck>
  Raised in: Report<Suggest Sales Price on Wksh.>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
    
    IF (ToSalesCode = '') AND (ToSalesType <> ToSalesType::"All Customers") THEN
      ERROR(Text002,"Sales Type");
    
    SkipRecord := FALSE;
    OnSalesPriceOnAfterGetRecordOnAfterCheck("Sales Price",Item,SkipRecord); <=====================
    IF SkipRecord THEN
      CurrReport.SKIP;
    
    CLEAR(SalesPriceWksh);
    ...
Report<Implement Price Change>.PROCEDURE<OnAfterCopyToSalesPrice>
  Raised in: Report<Implement Price Change>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
    SalesPrice."Unit Price" := "New Unit Price";
    SalesPrice."Price Includes VAT" := "Price Includes VAT";
    SalesPrice."Allow Line Disc." := "Allow Line Disc.";
    SalesPrice."Allow Invoice Disc." := "Allow Invoice Disc.";
    SalesPrice."VAT Bus. Posting Gr. (Price)" := "VAT Bus. Posting Gr. (Price)";
    OnAfterCopyToSalesPrice(SalesPrice,"Sales Price Worksheet"); <=====================
    IF SalesPrice."Unit Price" <> 0 THEN
      IF NOT SalesPrice.INSERT(TRUE) THEN
        SalesPrice.MODIFY(TRUE);
Report<Copy Item>.PROCEDURE<OnAfterCopyExtendedTexts>
  Raised in: Report<Copy Item>.PROCEDURE<CopyExtendedTexts>
    Code lines:
    ...
        NewExtendedTextHeader.TRANSFERFIELDS(ExtendedTextHeader);
        NewExtendedTextHeader."No." := TargetItem."No.";
        NewExtendedTextHeader.INSERT;
      UNTIL ExtendedTextHeader.NEXT = 0;
    
    OnAfterCopyExtendedTexts(SourceItem,TargetItem); <=====================
Report<Copy Item>.PROCEDURE<OnAfterCopyItem>
  Raised in: Report<Copy Item>.PROCEDURE<CopyItem>
    Code lines:
    ...
    CopySalesLineDiscounts(SourceItem."No.",TargetItem."No.");
    CopyPurchasePrices(SourceItem."No.",TargetItem."No.");
    CopyPurchaseLineDiscounts(SourceItem."No.",TargetItem."No.");
    CopyItemAttributes(SourceItem."No.",TargetItem."No.");
    
    OnAfterCopyItem(SourceItem,TargetItem); <=====================
Report<Copy Item>.PROCEDURE<OnAfterOpenPage>
  Raised in: Report<Copy Item>.<RequestPage>.<OnOpenPage>
    Code lines:
    SourceItem := TempItem;
    InvtSetup.GET;
    TargetNoSeries := InvtSetup."Item Nos.";
    
    OnAfterOpenPage; <=====================
Report<Copy Item>.PROCEDURE<OnAfterPostReport>
  Raised in: Report<Copy Item>.<OnPostReport>
    Code lines:
    OnAfterPostReport(TargetItemNo,SourceItem."No."); <=====================
Report<Copy Item>.PROCEDURE<OnBeforeInitSeries>
  Raised in: Report<Copy Item>.PROCEDURE<SetTargetItemNo>
    Code lines:
    WITH TargetItem DO BEGIN
      IF TargetNoSeries <> '' THEN BEGIN
        OnBeforeInitSeries(SourceItem,InvtSetup); <=====================
        InvtSetup.TESTFIELD("Item Nos.");
        "No." := '';
        NoSeriesMgt.InitSeries(InvtSetup."Item Nos.",TargetNoSeries,0D,"No.",TargetNoSeries);
        "No. Series" := TargetNoSeries;
      END ELSE BEGIN
        NoSeriesMgt.TestManual(InvtSetup."Item Nos.");
    
    ...
Report<Whse.-Source - Create Document>.PROCEDURE<OnAfterCreatePutAwayDeleteBlankBinContent>
  Raised in: Report<Whse.-Source - Create Document>.<OnPostReport>
    Code lines:
    ...
    END;
    
    IF WhseActivHeader.FIND('-') THEN BEGIN
      REPEAT
        CreatePutAway.DeleteBlankBinContent(WhseActivHeader);
        OnAfterCreatePutAwayDeleteBlankBinContent(WhseActivHeader); <=====================
        IF SortActivity > 0 THEN
          WhseActivHeader.SortWhseDoc;
        COMMIT;
      UNTIL WhseActivHeader.NEXT = 0;
    ...
Report<Whse.-Source - Create Document>.PROCEDURE<OnAfterGetRecordProdOrderComponent>
  Raised in: Report<Whse.-Source - Create Document>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
      CurrReport.SKIP;
    
    WMSMgt.CheckInboundBlockedBin("Location Code","Bin Code","Item No.","Variant Code","Unit of Measure Code");
    
    SkipProdOrderComp := FALSE;
    OnAfterGetRecordProdOrderComponent("Prod. Order Component",SkipProdOrderComp); <=====================
    IF SkipProdOrderComp THEN
      CurrReport.SKIP;
    
    WhseWkshLine.SETRANGE("Source Line No.","Prod. Order Line No.");
    ...
Report<Whse.-Source - Create Document>.PROCEDURE<OnAfterOpenPage>
  Raised in: Report<Whse.-Source - Create Document>.<RequestPage>.<OnOpenPage>
    Code lines:
    GetLocation(Location,GetHeaderLocationCode);
    IF Location."Use ADCS" THEN
      DoNotFillQtytoHandle := TRUE;
    
    OnAfterOpenPage(Location); <=====================
Report<Whse.-Source - Create Document>.PROCEDURE<OnAfterPostedWhseReceiptLineOnPostDataItem>
  Raised in: Report<Whse.-Source - Create Document>.<DataItem>.<OnPostDataItem>
    Code lines:
    OnAfterPostedWhseReceiptLineOnPostDataItem("Posted Whse. Receipt Line"); <=====================
Report<Whse.-Source - Create Document>.PROCEDURE<OnAfterPostReport>
  Raised in: Report<Whse.-Source - Create Document>.<OnPostReport>
    Code lines:
    ...
        END
      END
    END ELSE
      ERROR(Text003);
    
    OnAfterPostReport(FirstActivityNo,LastActivityNo); <=====================
Report<Whse.-Source - Create Document>.PROCEDURE<OnAfterSetPostedWhseReceiptLine>
  Raised in: Report<Whse.-Source - Create Document>.PROCEDURE<SetPostedWhseReceiptLine>
    Code lines:
    PostedWhseReceiptLine.COPY(PostedWhseReceiptLine2);
    WhseDoc := WhseDoc::"Posted Receipt";
    SourceTableCaption := PostedWhseReceiptLine.TABLECAPTION;
    AssignedID := AssignedID2;
    
    OnAfterSetPostedWhseReceiptLine(PostedWhseReceiptLine,SortActivity); <=====================
Report<Whse.-Source - Create Document>.PROCEDURE<OnAfterSetProdOrder>
  Raised in: Report<Whse.-Source - Create Document>.PROCEDURE<SetProdOrder>
    Code lines:
    ProdOrderHeader.COPY(ProdOrderHeader2);
    WhseDoc := WhseDoc::Production;
    SourceTableCaption := ProdOrderHeader.TABLECAPTION;
    
    OnAfterSetProdOrder(ProdOrderHeader,SortActivity); <=====================
Report<Whse.-Source - Create Document>.PROCEDURE<OnAfterSetWhseInternalPickLine>
  Raised in: Report<Whse.-Source - Create Document>.PROCEDURE<SetWhseInternalPickLine>
    Code lines:
    WhseInternalPickLine.COPY(WhseInternalPickLine2);
    WhseDoc := WhseDoc::"Internal Pick";
    SourceTableCaption := WhseInternalPickLine.TABLECAPTION;
    AssignedID := AssignedID2;
    
    OnAfterSetWhseInternalPickLine(WhseInternalPickLine,SortActivity); <=====================
Report<Whse.-Source - Create Document>.PROCEDURE<OnAfterSetWhseInternalPutAway>
  Raised in: Report<Whse.-Source - Create Document>.PROCEDURE<SetWhseInternalPutAway>
    Code lines:
    WhseInternalPutAwayHeader.COPY(WhseInternalPutAwayHeader2);
    WhseDoc := WhseDoc::"Internal Put-away";
    SourceTableCaption := WhseInternalPutAwayHeader.TABLECAPTION;
    AssignedID := WhseInternalPutAwayHeader2."Assigned User ID";
    
    OnAfterSetWhseInternalPutAway(WhseInternalPutAwayHeader,SortActivity); <=====================
Report<Whse.-Source - Create Document>.PROCEDURE<OnAfterSetWhseWkshLine>
  Raised in: Report<Whse.-Source - Create Document>.PROCEDURE<SetWhseWkshLine>
    Code lines:
    ...
        WhseDoc := WhseDoc::"Put-away Worksheet";
      WhseWkshLine."Whse. Document Type"::" ":
        WhseDoc := WhseDoc::"Whse. Mov.-Worksheet";
    END;
    
    OnAfterSetWhseWkshLine(WhseWkshLine,SortActivity); <=====================
Report<Whse.-Source - Create Document>.PROCEDURE<OnBeforeProcessWhseMovWkshLines>
  Raised in: Report<Whse.-Source - Create Document>.DataItem<Whse. Mov.-Worksheet Line>.<OnPreDataItem>
    Code lines:
    ...
    LOCKTABLE;
    
    TempWhseWorksheetLineMovement.RESET;
    TempWhseWorksheetLineMovement.DELETEALL;
    
    OnBeforeProcessWhseMovWkshLines("Whse. Mov.-Worksheet Line"); <=====================
  Raised in: Report<Whse.-Source - Create Document>.<DataItem>.<OnPreDataItem>
    Code lines:
    ...
    WhseWkshLine.SETCURRENTKEY("Whse. Document Type","Whse. Document No.","Whse. Document Line No.");
    WhseWkshLine.SETRANGE(
      "Whse. Document Type",WhseWkshLine."Whse. Document Type"::"Internal Put-away");
    WhseWkshLine.SETRANGE("Whse. Document No.",WhseInternalPutAwayHeader."No.");
    
    OnBeforeProcessWhseMovWkshLines("Whse. Put-away Worksheet Line"); <=====================
Report<Whse.-Source - Create Document>.PROCEDURE<OnBeforeSortWhseDocsForPrints>
  Raised in: Report<Whse.-Source - Create Document>.<OnPostReport>
    Code lines:
    ...
      COMMIT;
    END ELSE
      CreatePutAway.GetWhseActivHeaderNo(FirstActivityNo,LastActivityNo);
    
    HideNothingToHandleErr := FALSE;
    OnBeforeSortWhseDocsForPrints(WhseDoc,FirstActivityNo,LastActivityNo,SortActivity,PrintDoc,HideNothingToHandleErr); <=====================
    
    WhseActivHeader.SETRANGE("No.",FirstActivityNo,LastActivityNo);
    
    CASE WhseDoc OF
    ...
Report<Calculate Whse. Adjustment>.PROCEDURE<OnAfterFunctionInsertItemJnlLine>
  Raised in: Report<Calculate Whse. Adjustment>.PROCEDURE<InsertItemJnlLine>
    Code lines:
    ...
        OnAfterInsertItemJnlLine(ItemJnlLine);
    
        CreateReservationEntry(ItemJnlLine,Item,LocationCode2,EntryType2,UOM2);
      END;
    END;
    OnAfterFunctionInsertItemJnlLine(ItemNo,VariantCode2,LocationCode2,Quantity2,QuantityBase2,UOM2,EntryType2,ItemJnlLine); <=====================
Report<Calculate Whse. Adjustment>.PROCEDURE<OnAfterInsertItemJnlLine>
  Raised in: Report<Calculate Whse. Adjustment>.PROCEDURE<InsertItemJnlLine>
    Code lines:
    ...
        VALIDATE(Quantity,Quantity2);
        "Quantity (Base)" := QuantityBase2;
        "Invoiced Qty. (Base)" := QuantityBase2;
        "Warehouse Adjustment" := TRUE;
        INSERT(TRUE);
        OnAfterInsertItemJnlLine(ItemJnlLine); <=====================
    
        CreateReservationEntry(ItemJnlLine,Item,LocationCode2,EntryType2,UOM2);
      END;
    END;
Report<Calculate Whse. Adjustment>.PROCEDURE<OnBeforeAdjmtBinQuantityBufferInsert>
  Raised in: Report<Calculate Whse. Adjustment>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
                  "Base Unit of Measure" := Item."Base Unit of Measure";
                  "Lot No." := WhseEntry."Lot No.";
                  "Serial No." := WhseEntry."Serial No.";
                  "Qty. to Handle (Base)" := WhseEntry."Qty. (Base)";
                  "Qty. Outstanding (Base)" := WhseEntry."Qty. (Base)";
                  OnBeforeAdjmtBinQuantityBufferInsert(AdjmtBinQuantityBuffer,WhseEntry); <=====================
                  INSERT;
                END;
              END;
            UNTIL WhseEntry.NEXT = 0;
    ...
Report<Calculate Whse. Adjustment>.PROCEDURE<OnBeforeFunctionInsertItemJnlLine>
  Raised in: Report<Calculate Whse. Adjustment>.PROCEDURE<InsertItemJnlLine>
    Code lines:
    OnBeforeFunctionInsertItemJnlLine(ItemNo,VariantCode2,LocationCode2,Quantity2,QuantityBase2,UOM2,EntryType2); <=====================
    
    WITH ItemJnlLine DO BEGIN
      IF NextLineNo = 0 THEN BEGIN
        LOCKTABLE;
        RESET;
        SETRANGE("Journal Template Name","Journal Template Name");
        SETRANGE("Journal Batch Name","Journal Batch Name");
        IF FIND('+') THEN
          NextLineNo := "Line No.";
    ...
Report<Whse.-Shipment - Create Pick>.PROCEDURE<OnAfterCalculateQuantityToPick>
  Raised in: Report<Whse.-Shipment - Create Pick>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
    IF NOT WhseWkshLine.FINDFIRST THEN BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      CALCFIELDS("Pick Qty. (Base)","Pick Qty.");
      QtyToPickBase := "Qty. (Base)" - ("Qty. Picked (Base)" + "Pick Qty. (Base)");
      QtyToPick := Quantity - ("Qty. Picked" + "Pick Qty.");
      OnAfterCalculateQuantityToPick("Warehouse Shipment Line",QtyToPick,QtyToPickBase); <=====================
      IF QtyToPick > 0 THEN BEGIN
        IF "Destination Type" = "Destination Type"::Customer THEN BEGIN
          TESTFIELD("Destination No.");
          Cust.GET("Destination No.");
    ...
Report<Whse.-Shipment - Create Pick>.PROCEDURE<OnAfterPostReport>
  Raised in: Report<Whse.-Shipment - Create Pick>.<OnPostReport>
    Code lines:
    ...
          REPORT.RUN(REPORT::"Picking List",FALSE,FALSE,WhseActivHeader);
      END;
    END ELSE
      ERROR(NothingToHandleErr);
    
    OnAfterPostReport(FirstActivityNo,LastActivityNo); <=====================
Report<Whse.-Shipment - Create Pick>.PROCEDURE<OnBeforePrintPickingList>
  Raised in: Report<Whse.-Shipment - Create Pick>.<OnPostReport>
    Code lines:
    ...
          WhseActivHeader.SortWhseDoc;
      UNTIL WhseActivHeader.NEXT = 0;
    
      IF PrintDoc THEN BEGIN
        IsHandled := FALSE;
        OnBeforePrintPickingList(WhseActivHeader,IsHandled); <=====================
        IF NOT IsHandled THEN
          REPORT.RUN(REPORT::"Picking List",FALSE,FALSE,WhseActivHeader);
      END;
    END ELSE
    ...
Report<Create Invt Put-away/Pick/Mvmt>.PROCEDURE<OnBeforeOpenPage>
  Raised in: Report<Create Invt Put-away/Pick/Mvmt>.<RequestPage>.<OnOpenPage>
    Code lines:
    OnBeforeOpenPage; <=====================
    
    EnableFieldsInPage;
Report<Whse. Calculate Inventory>.PROCEDURE<OnAfterWhseJnlLineInsert>
  Raised in: Report<Whse. Calculate Inventory>.PROCEDURE<InsertWhseJnlLine>
    Code lines:
    ...
          "Phys Invt Counting Period Code" := PhysInvtCountCode;
          "Phys Invt Counting Period Type" := CycleSourceType;
    
          OnBeforeWhseJnlLineInsert(WhseJnlLine,WhseEntry);
          INSERT(TRUE);
          OnAfterWhseJnlLineInsert(WhseJnlLine); <=====================
        END;
        IF WhseEntry.FIND('+') THEN;
        WhseEntry.SETRANGE("Lot No.");
        WhseEntry.SETRANGE("Serial No.");
    ...
Report<Whse. Calculate Inventory>.PROCEDURE<OnBeforeWhseJnlLineInsert>
  Raised in: Report<Whse. Calculate Inventory>.PROCEDURE<InsertWhseJnlLine>
    Code lines:
    ...
          IF WhseJnlBatch."Reason Code" <> '' THEN
            "Reason Code" := WhseJnlBatch."Reason Code";
          "Phys Invt Counting Period Code" := PhysInvtCountCode;
          "Phys Invt Counting Period Type" := CycleSourceType;
    
          OnBeforeWhseJnlLineInsert(WhseJnlLine,WhseEntry); <=====================
          INSERT(TRUE);
          OnAfterWhseJnlLineInsert(WhseJnlLine);
        END;
        IF WhseEntry.FIND('+') THEN;
    ...
Report<Whse. Get Bin Content>.PROCEDURE<OnAfterInsertItemJnlLine>
  Raised in: Report<Whse. Get Bin Content>.PROCEDURE<InsertItemJournalLine>
    Code lines:
    ...
      ItemJournalTempl.GET("Journal Template Name");
      ItemJournalBatch.GET("Journal Template Name","Journal Batch Name");
      "Source Code" := ItemJournalTempl."Source Code";
      "Posting No. Series" := ItemJournalBatch."Posting No. Series";
      INSERT;
      OnAfterInsertItemJnlLine(ItemJournalLine); <=====================
    END;
Report<Whse. Get Bin Content>.PROCEDURE<OnAfterInsertTempTrackingSpec>
  Raised in: Report<Whse. Get Bin Content>.PROCEDURE<InsertTempTrackingSpec>
    Code lines:
    ...
      TempTrackingSpecification."Expiration Date" := "Expiration Date";
      TempTrackingSpecification."New Expiration Date" := "Expiration Date";
      TempTrackingSpecification.VALIDATE("Quantity (Base)",QtyOnBin);
      TempTrackingSpecification."Entry No." += 1;
      TempTrackingSpecification.INSERT;
      OnAfterInsertTempTrackingSpec(TempTrackingSpecification,WarehouseEntry); <=====================
    END;
Report<Date Compress Whse. Entries>.PROCEDURE<OnAfterGetWarehouseEntryOnAfterInitNewWhseEntry>
  Raised in: Report<Date Compress Whse. Entries>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
      NewWhseEntry."Serial No." := "Serial No.";
      NewWhseEntry."Lot No." := "Lot No.";
      NewWhseEntry."Warranty Date" := "Warranty Date";
      NewWhseEntry."Expiration Date" := "Expiration Date";
    
      OnAfterGetWarehouseEntryOnAfterInitNewWhseEntry(NewWhseEntry,"Warehouse Entry"); <=====================
    
      Window.UPDATE(1,NewWhseEntry."Registering Date");
      Window.UPDATE(2,DateComprReg."No. of New Records");
    
    ...
Report<Date Compress Whse. Entries>.PROCEDURE<OnBeforeInsertNewEntry>
  Raised in: Report<Date Compress Whse. Entries>.PROCEDURE<InsertNewEntry>
    Code lines:
    ...
    WhseEntry.Quantity := Qty;
    WhseEntry."Qty. (Base)" := QtyBase;
    WhseEntry.Cubage := Cubage;
    WhseEntry.Weight := Weight;
    WhseEntry."Entry Type" := EntryType;
    OnBeforeInsertNewEntry(WhseEntry); <=====================
    WhseEntry.INSERT;
Report<Date Compress Whse. Entries>.PROCEDURE<OnUpdateITWhseEntriesOnAfterSetWhseEntry2>
  Raised in: Report<Date Compress Whse. Entries>.PROCEDURE<UpdateITWhseEntries>
    Code lines:
    ...
            END;
            IF NOT RetainSerialNo THEN
              WhseEntry2."Serial No." := '';
            IF NOT RetainLotNo THEN
              WhseEntry2."Lot No." := '';
            OnUpdateITWhseEntriesOnAfterSetWhseEntry2(WhseEntry2,RetainSerialNo,SNRequired,RetainLotNo,LNRequired); <=====================
          END;
        UNTIL NEXT = 0;
    END;
Report<Date Compress Whse. Entries>.PROCEDURE<OnUpdateITWhseEntriesOnBeforeLocalWhseEntry2Modify>
  Raised in: Report<Date Compress Whse. Entries>.PROCEDURE<UpdateITWhseEntries>
    Code lines:
    ...
                   (NOT RetainLotNo AND LNRequired)
                THEN BEGIN
                  LocalWhseEntry2."Warranty Date" := 0D;
                  LocalWhseEntry2."Expiration Date" := 0D;
                END;
                OnUpdateITWhseEntriesOnBeforeLocalWhseEntry2Modify(LocalWhseEntry2,RetainSerialNo,SNRequired,RetainLotNo,LNRequired); <=====================
                LocalWhseEntry2.MODIFY;
              UNTIL LocalWhseEntry2.NEXT = 0;
    
            IF (NOT RetainSerialNo AND SNRequired) OR
    ...
Report<VAT Report Request Page>.PROCEDURE<OnAfterSetPeriodIsEditable>
  Raised in: Report<VAT Report Request Page>.<RequestPage>.<OnOpenPage>
    Code lines:
    ...
        MODIFY;
      END;
    END;
    
    PeriodIsEditable := "Return Period No." = '';
    OnAfterSetPeriodIsEditable(Rec,PeriodIsEditable); <=====================
Report<Calculate Inventory>.PROCEDURE<OnAfterFunctionInsertItemJnlLine>
  Raised in: Report<Calculate Inventory>.PROCEDURE<InsertItemJnlLine>
    Code lines:
    ...
            TempDimBufOut.DELETEALL;
          END;
        END;
      END;
    END;
    OnAfterFunctionInsertItemJnlLine(ItemNo,VariantCode2,DimEntryNo2,BinCode2,Quantity2,PhysInvQuantity,ItemJnlLine); <=====================
Report<Calculate Inventory>.PROCEDURE<OnAfterInsertItemJnlLine>
  Raised in: Report<Calculate Inventory>.PROCEDURE<InsertItemJnlLine>
    Code lines:
    ...
          "Last Item Ledger Entry No." := ItemLedgEntry."Entry No."
        ELSE
          "Last Item Ledger Entry No." := 0;
    
        INSERT(TRUE);
        OnAfterInsertItemJnlLine(ItemJnlLine); <=====================
    
        IF Location.Code <> '' THEN
          IF Location."Directed Put-away and Pick" THEN BEGIN
            WhseEntry.SETCURRENTKEY(
    ...
Report<Calculate Inventory>.PROCEDURE<OnAfterItemOnPreDataItem>
  Raised in: Report<Calculate Inventory>.<DataItem>.<OnPreDataItem>
    Code lines:
    ...
      SelectedDim.GetSelectedDim(USERID,3,REPORT::"Calculate Inventory",'',TempSelectedDim);
    
    QuantityOnHandBuffer.RESET;
    QuantityOnHandBuffer.DELETEALL;
    
    OnAfterItemOnPreDataItem(Item,ZeroQty,IncludeItemWithNoTransaction); <=====================
Report<Calculate Inventory>.PROCEDURE<OnBeforeFunctionInsertItemJnlLine>
  Raised in: Report<Calculate Inventory>.PROCEDURE<InsertItemJnlLine>
    Code lines:
    OnBeforeFunctionInsertItemJnlLine(ItemNo,VariantCode2,DimEntryNo2,BinCode2,Quantity2,PhysInvQuantity); <=====================
    
    WITH ItemJnlLine DO BEGIN
      IF NextLineNo = 0 THEN BEGIN
        LOCKTABLE;
        SETRANGE("Journal Template Name","Journal Template Name");
        SETRANGE("Journal Batch Name","Journal Batch Name");
        IF FINDLAST THEN
          NextLineNo := "Line No.";
    
    ...
Report<Export Budget to Excel>.PROCEDURE<OnAfterCopyFilterGLAccount>
  Raised in: Report<Export Budget to Excel>.<DataItem>.<OnPostDataItem>
    Code lines:
    ...
          HeaderRowNo,ColNo,COPYSTR(TypeHelper.FormatDateWithCurrentCulture(TempPeriod."Period Start"),1,250),
          FALSE,TRUE,'',ExcelBuf."Cell Type"::Date);
      UNTIL TempPeriod.NEXT = 0;
    
    COPYFILTER("G/L Account No.",GLAcc."No.");
    OnAfterCopyFilterGLAccount(GLAcc); <=====================
    IF GLAcc.FIND('-') THEN
      REPEAT
        RecNo := RecNo + 1;
        Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
    ...
Report<Export Budget to Excel>.PROCEDURE<OnAfterEnterDimFilter>
  Raised in: Report<Export Budget to Excel>.<DataItem>.<OnPostDataItem>
    Code lines:
    ...
    GLBudgetName.GET(GETFILTER("Budget Name"));
    EnterDimFilter(GLBudgetName."Budget Dimension 1 Code",GETFILTER("Budget Dimension 1 Code"));
    EnterDimFilter(GLBudgetName."Budget Dimension 2 Code",GETFILTER("Budget Dimension 2 Code"));
    EnterDimFilter(GLBudgetName."Budget Dimension 3 Code",GETFILTER("Budget Dimension 3 Code"));
    EnterDimFilter(GLBudgetName."Budget Dimension 4 Code",GETFILTER("Budget Dimension 4 Code"));
    OnAfterEnterDimFilter("G/L Budget Entry",ExcelBuf,RowNo); <=====================
    
    RowNo := RowNo + 2;
    HeaderRowNo := RowNo;
    EnterCell(HeaderRowNo,1,FIELDCAPTION("G/L Account No."),FALSE,TRUE,'',ExcelBuf."Cell Type"::Text);
    ...
Report<Copy - VAT Posting Setup>.PROCEDURE<OnAfterCopyVATPostingSetup>
  Raised in: Report<Copy - VAT Posting Setup>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
      "Purch. VAT Unreal. Account" := VATPostingSetup."Purch. VAT Unreal. Account";
      "Reverse Chrg. VAT Acc." := VATPostingSetup."Reverse Chrg. VAT Acc.";
      "Reverse Chrg. VAT Unreal. Acc." := VATPostingSetup."Reverse Chrg. VAT Unreal. Acc.";
    END;
    
    OnAfterCopyVATPostingSetup("VAT Posting Setup",VATPostingSetup,Sales,Purch); <=====================
    
    IF ConfirmManagement.ConfirmProcess(Text000,TRUE) THEN
      MODIFY;
Report<Config. Package - Process>.PROCEDURE<OnBeforeTextTransformation>
  Raised in: Report<Config. Package - Process>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    OnBeforeTextTransformation("Config. Package Table",TempField,TempTransformationRule); <=====================
    TempField.SETRANGE(TableNo,"Table ID");
    IF TempField.FINDSET THEN
      REPEAT
        TempTransformationRule.GET(FORMAT(TempField."No."));
        ApplyTextTransformation("Config. Package Table",TempField."No.",TempTransformationRule);
      UNTIL TempField.NEXT = 0
    ELSE
      MESSAGE(STRSUBSTNO(ImplementProcessingLogicMsg,"Table ID"))
Report<Copy - General Posting Setup>.PROCEDURE<OnAfterCopyGenPostingSetup>
  Raised in: Report<Copy - General Posting Setup>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
      "Direct Cost Applied Account" := GenPostingSetup."Direct Cost Applied Account";
      "Overhead Applied Account" := GenPostingSetup."Overhead Applied Account";
      "Purchase Variance Account" := GenPostingSetup."Purchase Variance Account";
    END;
    
    OnAfterCopyGenPostingSetup("General Posting Setup",GenPostingSetup); <=====================
    
    IF ConfirmManagement.ConfirmProcess(Text000,TRUE) THEN
      MODIFY;
Report<Export Consolidation>.PROCEDURE<OnAfterGLEntryOnAfterGetRecord>
  Raised in: Report<Export Consolidation>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
      END;
    END;
    
    SETRANGE("Posting Date",ConsolidStartDate,ConsolidEndDate);
    
    OnAfterGLEntryOnAfterGetRecord("G/L Entry",TempSelectedDim); <=====================
Report<Export Consolidation>.PROCEDURE<OnBeforeGLEntryOnAfterGetRecord>
  Raised in: Report<Export Consolidation>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    Window.UPDATE(2,"Posting Date");
    SETRANGE("Posting Date","Posting Date");
    OnBeforeGLEntryOnAfterGetRecord("G/L Entry",TempSelectedDim); <=====================
    
    IF NOT TempSelectedDim.FINDFIRST THEN BEGIN
      CALCSUMS(
        Amount,"Debit Amount","Credit Amount",
        "Add.-Currency Debit Amount","Add.-Currency Credit Amount");
      IF (Amount <> 0) OR ("Debit Amount" <> 0) OR ("Credit Amount" <> 0) THEN BEGIN
        TempGLEntry.RESET;
    ...
Report<Suggest Job Jnl. Lines>.PROCEDURE<OnAfterTransferTimeSheetDetailToJobJnlLine>
  Raised in: Report<Suggest Job Jnl. Lines>.<OnPostReport>
    Code lines:
    ...
              JobJnlLine."Posting No. Series" := JobJnlBatch."Posting No. Series";
              JobJnlLine.Description := TempTimeSheetLine.Description;
              JobJnlLine.VALIDATE(Quantity,QtyToPost);
              JobJnlLine.VALIDATE(Chargeable,TempTimeSheetLine.Chargeable);
              JobJnlLine."Reason Code" := JobJnlBatch."Reason Code";
              OnAfterTransferTimeSheetDetailToJobJnlLine(JobJnlLine,JobJnlTemplate,TempTimeSheetLine,TimeSheetDetail); <=====================
              JobJnlLine.INSERT;
            END;
          UNTIL TimeSheetDetail.NEXT = 0;
      UNTIL TempTimeSheetLine.NEXT = 0;
Report<Suggest Job Jnl. Lines>.PROCEDURE<OnBeforeInsertTempTimeSheetLine>
  Raised in: Report<Suggest Job Jnl. Lines>.PROCEDURE<FillTimeSheetLineBuffer>
    Code lines:
    ...
          TimeSheetLine.SETFILTER("Job Task No.",JobTaskNoFilter);
        TimeSheetLine.SETRANGE(Posted,FALSE);
        IF TimeSheetLine.FINDSET THEN
          REPEAT
            TempTimeSheetLine := TimeSheetLine;
            OnBeforeInsertTempTimeSheetLine(JobJnlLine,TimeSheetHeader,TempTimeSheetLine,SkipLine); <=====================
            IF NOT SkipLine THEN
              TempTimeSheetLine.INSERT;
          UNTIL TimeSheetLine.NEXT = 0;
      UNTIL TimeSheetHeader.NEXT = 0;
Report<Date Compress General Ledger>.PROCEDURE<OnBeforeInitRegisters>
  Raised in: Report<Date Compress General Ledger>.PROCEDURE<InitRegisters>
    Code lines:
    OnBeforeInitRegisters("G/L Entry"); <=====================
    
    IF GLReg.FIND('+') THEN;
    GLReg.Initialize(GLReg."No." + 1,LastEntryNo + 1,0,SourceCodeSetup."Compress G/L",'','');
    
    IF DateComprReg.FINDLAST THEN;
    DateComprReg.InitRegister(
      DATABASE::"G/L Entry",DateComprReg."No." + 1,EntrdDateComprReg."Starting Date",EntrdDateComprReg."Ending Date",
      EntrdDateComprReg."Period Length",'',GLReg."No.",SourceCodeSetup."Compress G/L");
    FOR i := 1 TO NoOfFieldsContents DO
    ...
Report<Calculate Subcontracts>.PROCEDURE<OnAfterTransferProdOrderRoutingLine>
  Raised in: Report<Calculate Subcontracts>.PROCEDURE<InsertReqWkshLine>
    Code lines:
    ...
      "Routing No." := "Prod. Order Routing Line"."Routing No.";
      "Operation No." := "Prod. Order Routing Line"."Operation No.";
      "Work Center No." := "Prod. Order Routing Line"."Work Center No.";
      VALIDATE("Vendor No.","Work Center"."Subcontractor No.");
      Description := "Prod. Order Routing Line".Description;
      OnAfterTransferProdOrderRoutingLine(ReqLine,"Prod. Order Routing Line"); <=====================
    
      // If purchase order already exist we will change this if possible
      PurchLine.RESET;
      PurchLine.SETCURRENTKEY("Document Type",Type,"Prod. Order No.","Prod. Order Line No.","Routing No.","Operation No.");
    ...
Report<Calculate Subcontracts>.PROCEDURE<OnBeforeReqWkshLineInsert>
  Raised in: Report<Calculate Subcontracts>.PROCEDURE<InsertReqWkshLine>
    Code lines:
    ...
      END;
    
      IF "Ref. Order No." <> '' THEN
        GetDimFromRefOrderLine(TRUE);
    
      OnBeforeReqWkshLineInsert(ReqLine,ProdOrderLine); <=====================
      INSERT;
    END;
Report<Calculate Subcontracts>.PROCEDURE<OnBeforeValidateUnitCost>
  Raised in: Report<Calculate Subcontracts>.PROCEDURE<InsertReqWkshLine>
    Code lines:
    ...
      VALIDATE("Variant Code",ProdOrderLine."Variant Code");
      VALIDATE("Unit of Measure Code",ProdOrderLine."Unit of Measure Code");
      VALIDATE(Quantity,QtyToPurch);
      GetGLSetup;
      IsHandled := FALSE;
      OnBeforeValidateUnitCost(ReqLine,"Work Center",IsHandled); <=====================
      IF NOT IsHandled THEN
        IF Quantity <> 0 THEN BEGIN
          IF "Work Center"."Unit Cost Calculation" = "Work Center"."Unit Cost Calculation"::Units THEN
            VALIDATE(
    ...
Report<Calculate Plan - Plan. Wksh.>.PROCEDURE<OnAfterItemOnPostDataItem>
  Raised in: Report<Calculate Plan - Plan. Wksh.>.<DataItem>.<OnPostDataItem>
    Code lines:
    CalcItemPlan.Finalize;
    CloseWindow;
    
    OnAfterItemOnPostDataItem; <=====================
Report<Calculate Plan - Plan. Wksh.>.PROCEDURE<OnAfterItemOnPreDataItem>
  Raised in: Report<Calculate Plan - Plan. Wksh.>.<DataItem>.<OnPreDataItem>
    Code lines:
    ...
      SetAtStartPosition := NOT CONFIRM(Text009);
    
    PlanningErrorLog.DELETEALL;
    CLEARLASTERROR;
    
    OnAfterItemOnPreDataItem(Item); <=====================
    COMMIT;
Report<Calculate Plan - Plan. Wksh.>.PROCEDURE<OnAfterOnOpenPage>
  Raised in: Report<Calculate Plan - Plan. Wksh.>.<RequestPage>.<OnOpenPage>
    Code lines:
    ...
      MPS := TRUE;
      MRP := TRUE;
    END ELSE
      MRP := NOT MPS;
    
    OnAfterOnOpenPage; <=====================
Report<Carry Out Action Msg. - Plan.>.PROCEDURE<OnBeforePreReport>
  Raised in: Report<Carry Out Action Msg. - Plan.>.<OnPreReport>
    Code lines:
    OnBeforePreReport; <=====================
Report<Refresh Production Order>.PROCEDURE<OnAfterRefreshProdOrder>
  Raised in: Report<Refresh Production Order>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
      WhseProdRelease.Release("Production Order");
      IF CreateInbRqst THEN
        WhseOutputProdRelease.Release("Production Order");
    END;
    
    OnAfterRefreshProdOrder("Production Order",ErrorOccured); <=====================
    IF ErrorOccured THEN
      MESSAGE(Text005,ProdOrder.TABLECAPTION,ProdOrderLine.FIELDCAPTION("Bin Code"));
Report<Refresh Production Order>.PROCEDURE<OnBeforeCalcProdOrder>
  Raised in: Report<Refresh Production Order>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
      "Routing No." := RoutingNo;
      MODIFY;
    END;
    
    ProdOrderLine.LOCKTABLE;
    OnBeforeCalcProdOrder("Production Order"); <=====================
    CheckReservationExist;
    
    IF CalcLines THEN BEGIN
      OnBeforeCalcProdOrderLines("Production Order",Direction,CalcLines,CalcRoutings,CalcComponents,IsHandled); <=====================
    ...
Report<Refresh Production Order>.PROCEDURE<OnBeforeCalcProdOrderLine>
  Raised in: Report<Refresh Production Order>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
    ProdOrderLine.LOCKTABLE;
    OnBeforeCalcProdOrder("Production Order");
    CheckReservationExist;
    
    IF CalcLines THEN BEGIN
      OnBeforeCalcProdOrderLines("Production Order",Direction,CalcLines,CalcRoutings,CalcComponents,IsHandled); <=====================
      IF NOT IsHandled THEN
        IF NOT CreateProdOrderLines.Copy("Production Order",Direction,'',FALSE) THEN
          ErrorOccured := TRUE;
    END ELSE BEGIN
    ...
Report<Refresh Production Order>.PROCEDURE<OnBeforeCalcProdOrderLines>
  Raised in: Report<Refresh Production Order>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
    ProdOrderLine.LOCKTABLE;
    OnBeforeCalcProdOrder("Production Order");
    CheckReservationExist;
    
    IF CalcLines THEN BEGIN
      OnBeforeCalcProdOrderLines("Production Order",Direction,CalcLines,CalcRoutings,CalcComponents,IsHandled); <=====================
      IF NOT IsHandled THEN
        IF NOT CreateProdOrderLines.Copy("Production Order",Direction,'',FALSE) THEN
          ErrorOccured := TRUE;
    END ELSE BEGIN
    ...
Report<Replan Production Order>.PROCEDURE<OnAfterLastProdOrderRtngLine>
  Raised in: Report<Replan Production Order>.<DataItem>.<OnPostDataItem>
    Code lines:
    CalcProdOrder.CalculateProdOrderDates("Prod. Order Line",TRUE);
    OnAfterLastProdOrderRtngLine("Prod. Order Line"); <=====================
Report<Replan Production Order>.PROCEDURE<OnProdOrderCompOnAfterGetRecordOnBeforeCreateProdOrderLines>
  Raised in: Report<Replan Production Order>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
      ProdOrder."Location Code" := "Location Code";
      OnProdOrderCompOnAfterGetRecordOnBeforeProdOrderModify(ProdOrder,MainProdOrder,"Prod. Order Component");
      ProdOrder.MODIFY;
    
      IsHandled := FALSE;
      OnProdOrderCompOnAfterGetRecordOnBeforeCreateProdOrderLines(ProdOrder,IsHandled); <=====================
      IF NOT IsHandled THEN
        CreateProdOrderLines.Copy(ProdOrder,1,"Variant Code",TRUE);
      ProdOrderLine.SETRANGE(Status,ProdOrder.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrder."No.");
    ...
Report<Replan Production Order>.PROCEDURE<OnProdOrderCompOnAfterGetRecordOnBeforeProdOrderModify>
  Raised in: Report<Replan Production Order>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
      ProdOrder."Low-Level Code" := MainProdOrder."Low-Level Code" + 1;
      ProdOrder."Source Type" := ProdOrder."Source Type"::Item;
      ProdOrder.VALIDATE("Source No.","Item No.");
      ProdOrder.VALIDATE(Quantity,ReqQty);
      ProdOrder."Location Code" := "Location Code";
      OnProdOrderCompOnAfterGetRecordOnBeforeProdOrderModify(ProdOrder,MainProdOrder,"Prod. Order Component"); <=====================
      ProdOrder.MODIFY;
    
      IsHandled := FALSE;
      OnProdOrderCompOnAfterGetRecordOnBeforeCreateProdOrderLines(ProdOrder,IsHandled);
    ...
Report<Exchange Production BOM Item>.PROCEDURE<OnBeforeInsertNewProdBOMLine>
  Raised in: Report<Exchange Production BOM Item>.<DataItem>.<OnPostDataItem>
    Code lines:
    ...
                  ProdBOMLine2.VALIDATE("No.",No[2]);
                  ProdBOMLine2.VALIDATE("Quantity per",ProdBOMLine3."Quantity per" * QtyMultiply);
                  IF CopyRoutingLink THEN
                    ProdBOMLine2.VALIDATE("Routing Link Code",ProdBOMLine3."Routing Link Code");
                  ProdBOMLine2."Ending Date" := 0D;
                  OnBeforeInsertNewProdBOMLine(ProdBOMLine2,ProdBOMLine3); <=====================
                  ProdBOMLine2.INSERT;
                UNTIL ProdBOMLine3.NEXT = 0;
            END ELSE BEGIN
              ProdBOMLine3.SETRANGE("Production BOM No.",ProdBOMLine."Production BOM No.");
    ...
  Raised in: Report<Exchange Production BOM Item>.<DataItem>.<OnPostDataItem>
    Code lines:
    ...
                  ProdBOMLine2.VALIDATE("No.",No[2]);
                  ProdBOMLine2.VALIDATE("Quantity per",ProdBOMLine3."Quantity per" * QtyMultiply);
                  IF CopyRoutingLink THEN
                    ProdBOMLine2.VALIDATE("Routing Link Code",ProdBOMLine3."Routing Link Code");
                  ProdBOMLine2."Ending Date" := 0D;
                  OnBeforeInsertNewProdBOMLine(ProdBOMLine2,ProdBOMLine3); <=====================
                  ProdBOMLine2.INSERT;
                UNTIL ProdBOMLine3.NEXT = 0;
            END ELSE BEGIN
              ProdBOMLine3.SETRANGE("Production BOM No.",ProdBOMLine."Production BOM No.");
    ...
Report<Calculate Work Center Calendar>.PROCEDURE<OnAfterDeleteWorkCenterCalendarEntries>
  Raised in: Report<Calculate Work Center Calendar>.<DataItem>.<OnAfterGetRecord>
    Code lines:
    ...
    Calendar.SETRANGE("Capacity Type",Calendar."Capacity Type"::"Work Center");
    Calendar.SETRANGE("No.","No.");
    Calendar.SETRANGE(Date,StartingDate,EndingDate);
    Calendar.DELETEALL;
    
    OnAfterDeleteWorkCenterCalendarEntries("Work Center",StartingDate,EndingDate); <=====================
    
    IF "Consolidated Calendar" THEN BEGIN
      Calendar.SETRANGE("No.");
      Calendar.SETCURRENTKEY("Work Center No.",Date);
    ...
Report<Copy Production Order Document>.PROCEDURE<OnAfterCopyProdLines>
  Raised in: Report<Copy Production Order Document>.PROCEDURE<CopyProdLines>
    Code lines:
    ...
        OnBeforeToProdOrderLineInsert(ToProdOrderLine,FromProdOrderLine);
        ToProdOrderLine.INSERT;
        LineNo := LineNo + 10000;
      UNTIL FromProdOrderLine.NEXT = 0;
    
    OnAfterCopyProdLines(ToProdOrderLine,FromProdOrderLine,IncludeHeader); <=====================
Report<Copy Production Order Document>.PROCEDURE<OnBeforeToProdOrderLineInsert>
  Raised in: Report<Copy Production Order Document>.PROCEDURE<CopyProdLines>
    Code lines:
    ...
        ToProdOrderLine."Qty. per Unit of Measure" := FromProdOrderLine."Qty. per Unit of Measure";
        ToProdOrderLine."Capacity Type Filter" := FromProdOrderLine."Capacity Type Filter";
        ToProdOrderLine."Capacity No. Filter" := FromProdOrderLine."Capacity No. Filter";
        ToProdOrderLine."Scrap %" := FromProdOrderLine."Scrap %";
        ToProdOrderLine."Date Filter" := FromProdOrderLine."Date Filter";
        OnBeforeToProdOrderLineInsert(ToProdOrderLine,FromProdOrderLine); <=====================
        ToProdOrderLine.INSERT;
        LineNo := LineNo + 10000;
      UNTIL FromProdOrderLine.NEXT = 0;
    
Report<Copy Production Order Document>.PROCEDURE<OnBeforeToProdOrderModify>
  Raised in: Report<Copy Production Order Document>.PROCEDURE<CopyProdOrder>
    Code lines:
    ...
      ToProdOrder."Work Center Filter" := FromProdOrder."Work Center Filter";
      ToProdOrder."Capacity Type Filter" := FromProdOrder."Capacity Type Filter";
      ToProdOrder."Capacity No. Filter" := FromProdOrder."Capacity No. Filter";
      ToProdOrder."Date Filter" := FromProdOrder."Date Filter";
      ToProdOrder.Comment := FromProdOrder.Comment;
      OnBeforeToProdOrderModify(ToProdOrder,FromProdOrder); <=====================
      ToProdOrder.MODIFY;
    END;
Table<Job Planning Line>.PROCEDURE<OnAfterDeleteAmounts>
  Raised in: Table<Job Planning Line>.PROCEDURE<DeleteAmounts>
    Code lines:
    ...
    "Posted Line Amount (LCY)" := 0;
    
    "Qty. to Transfer to Invoice" := 0;
    "Qty. to Invoice" := 0;
    
    OnAfterDeleteAmounts(Rec); <=====================
Table<Job Planning Line>.PROCEDURE<OnAfterInitJobPlanningLine>
  Raised in: Table<Job Planning Line>.PROCEDURE<InitJobPlanningLine>
    Code lines:
    ...
    "Last Date Modified" := 0D;
    Status := Job.Status;
    ControlUsageLink;
    "Country/Region Code" := Job."Bill-to Country/Region Code";
    
    OnAfterInitJobPlanningLine(Rec); <=====================
Table<Job Planning Line>.PROCEDURE<OnAfterResourceFindCost>
  Raised in: Table<Job Planning Line>.PROCEDURE<UpdateUnitCost>
    Code lines:
    ...
        IF RetrieveCostPrice THEN BEGIN
          ResCost.INIT;
          ResCost.Code := "No.";
          ResCost."Work Type Code" := "Work Type Code";
          CODEUNIT.RUN(CODEUNIT::"Resource-Find Cost",ResCost);
          OnAfterResourceFindCost(Rec,ResCost); <=====================
          "Direct Unit Cost (LCY)" := ROUND(ResCost."Direct Unit Cost" * "Qty. per Unit of Measure",UnitAmountRoundingPrecision);
          RetrievedCost := ResCost."Unit Cost" * "Qty. per Unit of Measure";
          "Unit Cost" := ROUND(
              CurrExchRate.ExchangeAmtLCYToFCY(
    ...
Table<Job Planning Line>.PROCEDURE<OnAfterSetupNewLine>
  Raised in: Table<Job Planning Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    ...
    "Currency Code" := Job."Currency Code";
    UpdateCurrencyFactor;
    IF LastJobPlanningLine."Planning Date" <> 0D THEN
      VALIDATE("Planning Date",LastJobPlanningLine."Planning Date");
    
    OnAfterSetupNewLine(Rec,LastJobPlanningLine); <=====================
Table<Job Planning Line>.PROCEDURE<OnAfterUpdateAllAmounts>
  Raised in: Table<Job Planning Line>.PROCEDURE<UpdateAllAmounts>
    Code lines:
    ...
    UpdateAmountsAndDiscounts;
    UpdateRemainingCostsAndAmounts("Currency Date","Currency Factor");
    IF Type = Type::Text THEN
      FIELDERROR(Type);
    
    OnAfterUpdateAllAmounts(Rec); <=====================
Table<Job Planning Line>.PROCEDURE<OnAfterValidateModification>
  Raised in: Table<Job Planning Line>.PROCEDURE<ValidateModification>
    Code lines:
    IF FieldChanged THEN BEGIN
      CALCFIELDS("Qty. Transferred to Invoice");
      TESTFIELD("Qty. Transferred to Invoice",0);
    END;
    
    OnAfterValidateModification(Rec,FieldChanged); <=====================
Table<Job Planning Line>.PROCEDURE<OnBeforeRetrieveCostPrice>
  Raised in: Table<Job Planning Line>.PROCEDURE<RetrieveCostPrice>
    Code lines:
    IsHandled := FALSE;
    ShouldRetrieveCostPrice := FALSE;
    OnBeforeRetrieveCostPrice(Rec,xRec,ShouldRetrieveCostPrice,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(ShouldRetrieveCostPrice);
    
    CASE Type OF
      Type::Item:
        ShouldRetrieveCostPrice :=
          ("No." <> xRec."No.") OR
    ...
Table<Job Planning Line>.PROCEDURE<OnBeforeUpdateAllAmounts>
  Raised in: Table<Job Planning Line>.PROCEDURE<UpdateAllAmounts>
    Code lines:
    IsHandled := FALSE;
    OnBeforeUpdateAllAmounts(Rec,xRec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    InitRoundingPrecisions;
    
    UpdateUnitCost;
    UpdateTotalCost;
    FindPriceAndDiscount(Rec,CurrFieldNo);
    ...
Table<Payment Service Setup>.PROCEDURE<OnCreatePaymentService>
  Raised in: Table<Payment Service Setup>.PROCEDURE<NewPaymentService>
    Code lines:
    ...
      0:
        EXIT(FALSE);
      1:
        BEGIN
          TempPaymentServiceSetupProviders.FINDFIRST;
          OnCreatePaymentService(TempPaymentServiceSetupProviders); <=====================
          EXIT(TRUE);
        END;
      ELSE BEGIN
        IF PAGE.RUNMODAL(PAGE::"Select Payment Service Type",TempPaymentServiceSetup) = ACTION::LookupOK THEN BEGIN
    ...
  Raised in: Table<Payment Service Setup>.PROCEDURE<NewPaymentService>
    Code lines:
    ...
      0:
        EXIT(FALSE);
      1:
        BEGIN
          TempPaymentServiceSetupProviders.FINDFIRST;
          OnCreatePaymentService(TempPaymentServiceSetupProviders); <=====================
          EXIT(TRUE);
        END;
      ELSE BEGIN
        IF PAGE.RUNMODAL(PAGE::"Select Payment Service Type",TempPaymentServiceSetup) = ACTION::LookupOK THEN BEGIN
    ...
Table<Payment Service Setup>.PROCEDURE<OnDoNotIncludeAnyPaymentServicesOnAllDocuments>
  Raised in: Codeunit<O365 Sales Invoice Payment>.PROCEDURE<SetPaypalDefault>
    Code lines:
    DummyPaymentServiceSetup.OnDoNotIncludeAnyPaymentServicesOnAllDocuments; <=====================
    PaypalAccountProxy.SetAlwaysIncludePaypalOnDocuments(TRUE,TRUE);
    UpdatePaymentServicesForInvoicesQuotesAndOrders;
  Raised in: Codeunit<O365 Sales Invoice Payment>.PROCEDURE<SetMspayDefault>
    Code lines:
    DummyPaymentServiceSetup.OnDoNotIncludeAnyPaymentServicesOnAllDocuments; <=====================
    PaypalAccountProxy.SetAlwaysIncludeMsPayOnDocuments(TRUE,TRUE);
    UpdatePaymentServicesForInvoicesQuotesAndOrders;
Table<Payment Service Setup>.PROCEDURE<OnRegisterPaymentServiceProviders>
  Raised in: Page<BC O365 My Settings>.<OnOpenPage>
    Code lines:
    TempPaymentServiceSetup.OnRegisterPaymentServiceProviders(TempPaymentServiceSetup); <=====================
    PaymentServicesVisible := NOT TempPaymentServiceSetup.ISEMPTY;
    IsDevice := ClientTypeManagement.GetCurrentClientType IN [CLIENTTYPE::Tablet,CLIENTTYPE::Phone];
    
    QuickBooksVisible := O365SalesManagement.GetQuickBooksVisible;
    
    SetMailProviderVisibility;
    SetLanguageVisibility;
  Raised in: Page<O365 Sales Activities>.<OnInit>
    Code lines:
    IsDevice := ClientTypeManagement.GetCurrentClientType IN [CLIENTTYPE::Tablet,CLIENTTYPE::Phone];
    TempPaymentServiceSetup.OnRegisterPaymentServiceProviders(TempPaymentServiceSetup); <=====================
    PaymentServicesVisible := NOT TempPaymentServiceSetup.ISEMPTY AND NOT IsDevice;
    ReplayGettingStartedVisible := O365SetupMgmt.GettingStartedSupportedForInvoicing;
    WantMoreGroupVisible := O365SetupMgmt.GetBusinessCentralTrialVisibility;
    SetupBusinessInfoVisible := NOT IsDevice;
  Raised in: Page<BC O365 Settings>.<OnInit>
    Code lines:
    TempPaymentServiceSetup.OnRegisterPaymentServiceProviders(TempPaymentServiceSetup); <=====================
    PaymentServicesVisible := NOT TempPaymentServiceSetup.ISEMPTY;
    
    QuickBooksVisible := O365SalesManagement.GetQuickBooksVisible;
    
    SetMailProviderVisibility;
  Raised in: Page<Select Payment Service Type>.<OnOpenPage>
    Code lines:
    OnRegisterPaymentServiceProviders(Rec); <=====================
  Raised in: Table<Payment Service Setup>.PROCEDURE<AskUserToSetupNewPaymentService>
    Code lines:
    IF NOT GUIALLOWED THEN
      EXIT(FALSE);
    
    OnRegisterPaymentServiceProviders(TempPaymentServiceSetupProviders); <=====================
    IF NOT TempPaymentServiceSetupProviders.FINDFIRST THEN
      EXIT(FALSE);
    
    // Check if there are payment services that are not enabled
    OnRegisterPaymentServices(TempNotEnabledPaymentServiceSetupProviders);
    DefinedPaymentServiceExist := TempNotEnabledPaymentServiceSetupProviders.FINDFIRST;
    ...
  Raised in: Table<Payment Service Setup>.PROCEDURE<IsPaymentServiceVisible>
    Code lines:
    OnRegisterPaymentServiceProviders(TempPaymentServiceSetup); <=====================
    EXIT(NOT TempPaymentServiceSetup.ISEMPTY);
  Raised in: Table<Payment Service Setup>.PROCEDURE<NewPaymentService>
    Code lines:
    OnRegisterPaymentServiceProviders(TempPaymentServiceSetupProviders); <=====================
    CASE TempPaymentServiceSetupProviders.COUNT OF
      0:
        EXIT(FALSE);
      1:
        BEGIN
          TempPaymentServiceSetupProviders.FINDFIRST;
          OnCreatePaymentService(TempPaymentServiceSetupProviders);
          EXIT(TRUE);
        END;
    ...
Table<Payment Service Setup>.PROCEDURE<OnRegisterPaymentServices>
  Raised in: Page<BC O365 Payment Services>.PROCEDURE<UpdateControls>
    Code lines:
    ...
    IF PaypalIsDefault THEN
      MsPayOrPaypalOption := MsPayOrPaypalOption::PayPal
    ELSE
      MsPayOrPaypalOption := MsPayOrPaypalOption::"Microsoft Pay Payments";
    
    TempPaymentServiceSetup.OnRegisterPaymentServices(TempPaymentServiceSetup); <=====================
    TempPaymentServiceSetup.SETRANGE(Enabled,TRUE);
    NumberOfPaymentServiceSetups := TempPaymentServiceSetup.COUNT;
    IF NumberOfPaymentServiceSetups > 2 THEN
      SENDTRACETAG('00001WJ',PaymentServiceCategoryTxt,VERBOSITY::Warning,
    ...
  Raised in: Table<Payment Service Setup>.PROCEDURE<GetDefaultPaymentServices>
    Code lines:
    OnRegisterPaymentServices(TempPaymentServiceSetup); <=====================
    TempPaymentServiceSetup.SETRANGE("Always Include on Documents",TRUE);
    TempPaymentServiceSetup.SETRANGE(Enabled,TRUE);
    
    IF NOT TempPaymentServiceSetup.FINDFIRST THEN
      EXIT(FALSE);
    
    TransferToRecordSetBuffer(TempPaymentServiceSetup,TempRecordSetBuffer);
    RecordSetManagement.GetSet(TempRecordSetBuffer,SetID);
    IF SetID = 0 THEN
    ...
  Raised in: Table<Payment Service Setup>.PROCEDURE<GetEnabledPaymentServices>
    Code lines:
    TempPaymentServiceSetup.RESET;
    TempPaymentServiceSetup.DELETEALL;
    OnRegisterPaymentServices(TempPaymentServiceSetup); <=====================
    TempPaymentServiceSetup.SETRANGE(Enabled,TRUE);
    EXIT(TempPaymentServiceSetup.FINDSET);
  Raised in: Table<Payment Service Setup>.PROCEDURE<GetSelectedPaymentsText>
    Code lines:
    SelectedPaymentServices := NoPaymentMethodsSelectedTxt;
    
    IF SetID = 0 THEN
      EXIT;
    
    OnRegisterPaymentServices(TempPaymentServiceSetup); <=====================
    LoadSet(TempPaymentServiceSetup,SetID);
    
    TempPaymentServiceSetup.SETRANGE(Available,TRUE);
    IF NOT TempPaymentServiceSetup.FINDSET THEN
    ...
  Raised in: Table<Payment Service Setup>.PROCEDURE<AskUserToSetupNewPaymentService>
    Code lines:
    ...
    OnRegisterPaymentServiceProviders(TempPaymentServiceSetupProviders);
    IF NOT TempPaymentServiceSetupProviders.FINDFIRST THEN
      EXIT(FALSE);
    
    // Check if there are payment services that are not enabled
    OnRegisterPaymentServices(TempNotEnabledPaymentServiceSetupProviders); <=====================
    DefinedPaymentServiceExist := TempNotEnabledPaymentServiceSetupProviders.FINDFIRST;
    
    IF DefinedPaymentServiceExist THEN BEGIN
      SelectedOption := STRMENU(CreateOrUpdateOptionQst,1,SetupExistingServicesOrCreateNewQst);
    ...
Table<Sales Shipment Header>.PROCEDURE<OnBeforeEmailRecords>
  Raised in: Table<Sales Shipment Header>.PROCEDURE<EmailRecords>
    Code lines:
    OnBeforeEmailRecords(Rec,ShowDialog,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    DocumentSendingProfile.TrySendToEMail(
      DummyReportSelections.Usage::"S.Shipment",Rec,FIELDNO("No."),DocTxt,FIELDNO("Bill-to Customer No."),ShowDialog);
Table<Sales Shipment Header>.PROCEDURE<OnBeforeGetTrackingInternetAddr>
  Raised in: Table<Sales Shipment Header>.PROCEDURE<GetTrackingInternetAddr>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetTrackingInternetAddr(Rec,TrackingInternetAddr,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    HttpStr := 'http://';
    TESTFIELD("Shipping Agent Code");
    ShippingAgent.GET("Shipping Agent Code");
    TrackingInternetAddr := STRSUBSTNO(ShippingAgent."Internet Address","Package Tracking No.");
    
    ...
Table<Sales Shipment Header>.PROCEDURE<OnBeforePrintRecords>
  Raised in: Table<Sales Shipment Header>.PROCEDURE<PrintRecords>
    Code lines:
    WITH SalesShptHeader DO BEGIN
      COPY(Rec);
      OnBeforePrintRecords(SalesShptHeader,ShowRequestForm,IsHandled); <=====================
      IF IsHandled THEN
        EXIT;
    
      ReportSelection.PrintWithGUIYesNo(
        ReportSelection.Usage::"S.Shipment",SalesShptHeader,ShowRequestForm,FIELDNO("Bill-to Customer No."));
    END;
Table<Sales Shipment Header>.PROCEDURE<OnBeforeSendProfile>
  Raised in: Table<Sales Shipment Header>.PROCEDURE<SendProfile>
    Code lines:
    IsHandled := FALSE;
    OnBeforeSendProfile(DocumentSendingProfile,Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    DocumentSendingProfile.Send(
      DummyReportSelections.Usage::"S.Shipment",Rec,"No.","Sell-to Customer No.",
      DocTxt,FIELDNO("Sell-to Customer No."),FIELDNO("No."));
Table<Sales Shipment Line>.PROCEDURE<OnAfterClearSalesLineValues>
  Raised in: Table<Sales Shipment Line>.PROCEDURE<ClearSalesLineValues>
    Code lines:
    ...
    SalesLine."Special Order Purch. Line No." := 0;
    SalesLine."Special Order" := FALSE;
    SalesLine."Appl.-to Item Entry" := 0;
    SalesLine."Appl.-from Item Entry" := 0;
    
    OnAfterClearSalesLineValues(Rec,SalesLine); <=====================
Table<Sales Shipment Line>.PROCEDURE<OnAfterInitFromSalesLine>
  Raised in: Table<Sales Shipment Line>.PROCEDURE<InitFromSalesLine>
    Code lines:
    ...
    IF SalesLine."Document Type" = SalesLine."Document Type"::Order THEN BEGIN
      "Order No." := SalesLine."Document No.";
      "Order Line No." := SalesLine."Line No.";
    END;
    
    OnAfterInitFromSalesLine(SalesShptHeader,SalesLine,Rec); <=====================
Table<Sales Shipment Line>.PROCEDURE<OnAfterInsertInvLineFromShptLine>
  Raised in: Table<Sales Shipment Line>.PROCEDURE<InsertInvLineFromShptLine>
    Code lines:
    ...
      SalesLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
      SalesLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
      SalesLine."Dimension Set ID" := "Dimension Set ID";
      OnBeforeInsertInvLineFromShptLine(Rec,SalesLine,SalesOrderLine);
      SalesLine.INSERT;
      OnAfterInsertInvLineFromShptLine(SalesLine,SalesOrderLine,NextLineNo,Rec); <=====================
    
      ItemTrackingMgt.CopyHandledItemTrkgToInvLine(SalesOrderLine,SalesLine);
    
      NextLineNo := NextLineNo + 10000;
    ...
Table<Sales Shipment Line>.PROCEDURE<OnBeforeCodeInsertInvLineFromShptLine>
  Raised in: Table<Sales Shipment Line>.PROCEDURE<InsertInvLineFromShptLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCodeInsertInvLineFromShptLine(Rec,SalesLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SETRANGE("Document No.","Document No.");
    
    TempSalesLine := SalesLine;
    IF SalesLine.FIND('+') THEN
      NextLineNo := SalesLine."Line No." + 10000
    ...
Table<Sales Shipment Line>.PROCEDURE<OnBeforeInsertInvLineFromShptLine>
  Raised in: Table<Sales Shipment Line>.PROCEDURE<InsertInvLineFromShptLine>
    Code lines:
    ...
      SalesLine."Document No." := TempSalesLine."Document No.";
      LanguageManagement.SetGlobalLanguageByCode(SalesInvHeader."Language Code");
      SalesLine.Description := STRSUBSTNO(Text000,"Document No.");
      LanguageManagement.RestoreGlobalLanguage;
      IsHandled := FALSE;
      OnBeforeInsertInvLineFromShptLineBeforeInsertTextLine(Rec,SalesLine,NextLineNo,IsHandled); <=====================
      IF NOT IsHandled THEN BEGIN
        SalesLine.INSERT;
        NextLineNo := NextLineNo + 10000;
      END;
    ...
Table<Sales Shipment Line>.PROCEDURE<OnBeforeInsertInvLineFromShptLineBeforeInsertTextLine>
  Raised in: Table<Sales Shipment Line>.PROCEDURE<InsertInvLineFromShptLine>
    Code lines:
    ...
      SalesLine."Document No." := TempSalesLine."Document No.";
      LanguageManagement.SetGlobalLanguageByCode(SalesInvHeader."Language Code");
      SalesLine.Description := STRSUBSTNO(Text000,"Document No.");
      LanguageManagement.RestoreGlobalLanguage;
      IsHandled := FALSE;
      OnBeforeInsertInvLineFromShptLineBeforeInsertTextLine(Rec,SalesLine,NextLineNo,IsHandled); <=====================
      IF NOT IsHandled THEN BEGIN
        SalesLine.INSERT;
        NextLineNo := NextLineNo + 10000;
      END;
    ...
Table<Sales Shipment Line>.PROCEDURE<OnInsertInvLineFromShptLineOnAfterAssignDescription>
  Raised in: Table<Sales Shipment Line>.PROCEDURE<InsertInvLineFromShptLine>
    Code lines:
    ...
        IF ExtTextLine OR (Type = Type::" ") THEN BEGIN
          SalesOrderLine.INIT;
          SalesOrderLine."Line No." := "Order Line No.";
          SalesOrderLine.Description := Description;
          SalesOrderLine."Description 2" := "Description 2";
          OnInsertInvLineFromShptLineOnAfterAssignDescription(Rec,SalesOrderLine); <=====================
        END ELSE
          ERROR(Text001);
      END;
    
    ...
Table<Sales Shipment Line>.PROCEDURE<OnInsertInvLineFromShptLineOnAfterUpdatePrepaymentsAmounts>
  Raised in: Table<Sales Shipment Line>.PROCEDURE<InsertInvLineFromShptLine>
    Code lines:
    ...
                (1 + SalesOrderLine."VAT %" / 100),Currency."Amount Rounding Precision");
        END;
        SalesLine.VALIDATE("Line Discount Amount",SalesOrderLine."Line Discount Amount");
        SalesLine."Line Discount %" := SalesOrderLine."Line Discount %";
        SalesLine.UpdatePrePaymentAmounts;
        OnInsertInvLineFromShptLineOnAfterUpdatePrepaymentsAmounts(SalesLine,SalesOrderLine,Rec); <=====================
    
        IF SalesOrderLine.Quantity = 0 THEN
          SalesLine.VALIDATE("Inv. Discount Amount",0)
        ELSE
    ...
Table<Sales Invoice Header>.PROCEDURE<OnBeforeEmailRecords>
  Raised in: Table<Sales Invoice Header>.PROCEDURE<EmailRecords>
    Code lines:
    IsHandled := FALSE;
    OnBeforeEmailRecords(DummyReportSelections,Rec,DocTxt,ShowDialog,IsHandled); <=====================
    IF NOT IsHandled THEN
      DocumentSendingProfile.TrySendToEMail(
        DummyReportSelections.Usage::"S.Invoice",Rec,FIELDNO("No."),DocTxt,FIELDNO("Bill-to Customer No."),ShowDialog);
Table<Sales Invoice Header>.PROCEDURE<OnBeforePrintRecords>
  Raised in: Table<Sales Invoice Header>.PROCEDURE<PrintRecords>
    Code lines:
    IsHandled := FALSE;
    OnBeforePrintRecords(DummyReportSelections,Rec,ShowRequestPage,IsHandled); <=====================
    IF NOT IsHandled THEN
      DocumentSendingProfile.TrySendToPrinter(
        DummyReportSelections.Usage::"S.Invoice",Rec,FIELDNO("Bill-to Customer No."),ShowRequestPage);
Table<Sales Invoice Header>.PROCEDURE<OnBeforeSendProfile>
  Raised in: Table<Sales Invoice Header>.PROCEDURE<SendProfile>
    Code lines:
    IsHandled := FALSE;
    OnBeforeSendProfile(DummyReportSelections,Rec,DocTxt,IsHandled,DocumentSendingProfile); <=====================
    IF NOT IsHandled THEN
      DocumentSendingProfile.Send(
        DummyReportSelections.Usage::"S.Invoice",Rec,"No.","Bill-to Customer No.",
        DocTxt,FIELDNO("Bill-to Customer No."),FIELDNO("No."));
Table<Sales Invoice Header>.PROCEDURE<OnBeforeSendRecords>
  Raised in: Table<Sales Invoice Header>.PROCEDURE<SendRecords>
    Code lines:
    IsHandled := FALSE;
    OnBeforeSendRecords(DummyReportSelections,Rec,DocTxt,IsHandled); <=====================
    IF NOT IsHandled THEN
      DocumentSendingProfile.SendCustomerRecords(
        DummyReportSelections.Usage::"S.Invoice",Rec,DocTxt,"Bill-to Customer No.","No.",
        FIELDNO("Bill-to Customer No."),FIELDNO("No."));
Table<Sales Invoice Header>.PROCEDURE<OnGetPaymentReference>
  Raised in: Table<Sales Invoice Header>.PROCEDURE<GetPaymentReference>
    Code lines:
    OnGetPaymentReference(PaymentReference); <=====================
    EXIT(PaymentReference);
Table<Sales Invoice Header>.PROCEDURE<OnGetPaymentReferenceLbl>
  Raised in: Table<Sales Invoice Header>.PROCEDURE<GetPaymentReferenceLbl>
    Code lines:
    OnGetPaymentReferenceLbl(PaymentReferenceLbl); <=====================
    EXIT(PaymentReferenceLbl);
Table<Sales Invoice Line>.PROCEDURE<OnAfterInitFromSalesLine>
  Raised in: Table<Sales Invoice Line>.PROCEDURE<InitFromSalesLine>
    Code lines:
    ...
    "Posting Date" := SalesInvHeader."Posting Date";
    "Document No." := SalesInvHeader."No.";
    Quantity := SalesLine."Qty. to Invoice";
    "Quantity (Base)" := SalesLine."Qty. to Invoice (Base)";
    
    OnAfterInitFromSalesLine(Rec,SalesInvHeader,SalesLine); <=====================
Table<Sales Cr.Memo Header>.PROCEDURE<OnBeforeEmailRecords>
  Raised in: Table<Sales Cr.Memo Header>.PROCEDURE<EmailRecords>
    Code lines:
    IsHandled := FALSE;
    OnBeforeEmailRecords(DummyReportSelections,Rec,DocTxt,ShowRequestPage,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    DocumentSendingProfile.TrySendToEMail(
      DummyReportSelections.Usage::"S.Cr.Memo",Rec,FIELDNO("No."),DocTxt,FIELDNO("Bill-to Customer No."),ShowRequestPage);
Table<Sales Cr.Memo Header>.PROCEDURE<OnBeforePrintRecords>
  Raised in: Table<Sales Cr.Memo Header>.PROCEDURE<PrintRecords>
    Code lines:
    IsHandled := FALSE;
    OnBeforePrintRecords(DummyReportSelections,Rec,ShowRequestPage,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    DocumentSendingProfile.TrySendToPrinter(
      DummyReportSelections.Usage::"S.Cr.Memo",Rec,FIELDNO("Bill-to Customer No."),ShowRequestPage);
Table<Sales Cr.Memo Header>.PROCEDURE<OnBeforeSendProfile>
  Raised in: Table<Sales Cr.Memo Header>.PROCEDURE<SendProfile>
    Code lines:
    IsHandled := FALSE;
    OnBeforeSendProfile(DummyReportSelections,Rec,DocTxt,IsHandled,DocumentSendingProfile); <=====================
    IF IsHandled THEN
      EXIT;
    
    DocumentSendingProfile.Send(
      DummyReportSelections.Usage::"S.Cr.Memo",Rec,"No.","Bill-to Customer No.",
      DocTxt,FIELDNO("Bill-to Customer No."),FIELDNO("No."));
Table<Sales Cr.Memo Header>.PROCEDURE<OnBeforeSendRecords>
  Raised in: Table<Sales Cr.Memo Header>.PROCEDURE<SendRecords>
    Code lines:
    IsHandled := FALSE;
    OnBeforeSendRecords(DummyReportSelections,Rec,DocTxt,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    DocumentSendingProfile.SendCustomerRecords(
      DummyReportSelections.Usage::"S.Cr.Memo",Rec,DocTxt,"Bill-to Customer No.","No.",
      FIELDNO("Bill-to Customer No."),FIELDNO("No."));
Table<OAuth 2.0 Setup>.PROCEDURE<OnAfterRequestAccessToken>
  Raised in: Table<OAuth 2.0 Setup>.PROCEDURE<RequestAccessToken>
    Code lines:
    OnBeforeRequestAccessToken(Rec,AuthorizationCode,Result,MessageText,Processed);
    IF NOT Processed THEN
      Result := OAuth20Mgt.RequestAndSaveAccessToken(Rec,MessageText,AuthorizationCode);
    
    OnAfterRequestAccessToken(Rec,Result,MessageText); <=====================
Table<OAuth 2.0 Setup>.PROCEDURE<OnBeforeInvokeRequest>
  Raised in: Table<OAuth 2.0 Setup>.PROCEDURE<InvokeRequest>
    Code lines:
    OnBeforeInvokeRequest(Rec,RequestJSON,ResponseJSON,HttpError,Result,Processed,RetryOnCredentialsFailure); <=====================
    IF NOT Processed THEN
      Result := OAuth20Mgt.InvokeRequestBasic(Rec,RequestJSON,ResponseJSON,HttpError,RetryOnCredentialsFailure);
Table<OAuth 2.0 Setup>.PROCEDURE<OnBeforeRefreshAccessToken>
  Raised in: Table<OAuth 2.0 Setup>.PROCEDURE<RefreshAccessToken>
    Code lines:
    OnBeforeRefreshAccessToken(Rec,Result,MessageText,Processed); <=====================
    IF NOT Processed THEN
      Result := OAuth20Mgt.RefreshAndSaveAccessToken(Rec,MessageText);
Table<OAuth 2.0 Setup>.PROCEDURE<OnBeforeRequestAccessToken>
  Raised in: Table<OAuth 2.0 Setup>.PROCEDURE<RequestAccessToken>
    Code lines:
    OnBeforeRequestAccessToken(Rec,AuthorizationCode,Result,MessageText,Processed); <=====================
    IF NOT Processed THEN
      Result := OAuth20Mgt.RequestAndSaveAccessToken(Rec,MessageText,AuthorizationCode);
    
    OnAfterRequestAccessToken(Rec,Result,MessageText);
Table<OAuth 2.0 Setup>.PROCEDURE<OnBeforeRequestAuthoizationCode>
  Raised in: Table<OAuth 2.0 Setup>.PROCEDURE<RequestAuthorizationCode>
    Code lines:
    OAuth20Mgt.CheckEncryption;
    
    OnBeforeRequestAuthoizationCode(Rec,Processed); <=====================
    IF Processed THEN
      EXIT;
    
    OAuth20Mgt.RequestAuthorizationCode(Rec);
Table<Sales Cr.Memo Line>.PROCEDURE<OnAfterInitFromSalesLine>
  Raised in: Table<Sales Cr.Memo Line>.PROCEDURE<InitFromSalesLine>
    Code lines:
    ...
    "Posting Date" := SalesCrMemoHeader."Posting Date";
    "Document No." := SalesCrMemoHeader."No.";
    Quantity := SalesLine."Qty. to Invoice";
    "Quantity (Base)" := SalesLine."Qty. to Invoice (Base)";
    
    OnAfterInitFromSalesLine(Rec,SalesCrMemoHeader,SalesLine); <=====================
Table<Document Attachment>.PROCEDURE<OnBeforeInsertAttachment>
  Raised in: Table<Document Attachment>.PROCEDURE<SaveAttachment>
    Code lines:
    ...
          LineNo := FieldRef.VALUE;
          VALIDATE("Line No.",LineNo);
        END;
    END;
    
    OnBeforeInsertAttachment(Rec,RecRef); <=====================
    INSERT(TRUE);
Table<Document Attachment>.PROCEDURE<OnBeforeSaveAttachment>
  Raised in: Table<Document Attachment>.PROCEDURE<SaveAttachment>
    Code lines:
    OnBeforeSaveAttachment(Rec,RecRef,FileName,TempBlob); <=====================
    
    IF FileName = '' THEN
      ERROR(EmptyFileNameErr);
    // Validate file/media is not empty
    IF NOT TempBlob.Blob.HASVALUE THEN
      ERROR(NoContentErr);
    
    IncomingFileName := FileName;
    
    ...
Table<Direct Debit Collection Entry>.PROCEDURE<OnBeforeCheckSEPA>
  Raised in: Table<Direct Debit Collection Entry>.PROCEDURE<CreateNew>
    Code lines:
    ...
    VALIDATE("Customer No.",CustLedgerEntry."Customer No.");
    VALIDATE("Applies-to Entry No.",CustLedgerEntry."Entry No.");
    INSERT;
    
    IsHandled := FALSE;
    OnBeforeCheckSEPA(Rec,IsHandled); <=====================
    IF NOT IsHandled THEN
      CODEUNIT.RUN(CODEUNIT::"SEPA DD-Check Line",Rec);
Table<Direct Debit Collection Entry>.PROCEDURE<OnBeforeDocTypeErr>
  Raised in: Table<Direct Debit Collection Entry>.Field<Applies-to Entry No.>.<OnValidate>
    Code lines:
    ...
      AllowedDocumentType :=
        (CustLedgerEntry."Document Type" IN
         [CustLedgerEntry."Document Type"::Invoice,
          CustLedgerEntry."Document Type"::"Finance Charge Memo",
          CustLedgerEntry."Document Type"::Reminder]);
      OnBeforeDocTypeErr(CustLedgerEntry,AllowedDocumentType); <=====================
      IF NOT AllowedDocumentType THEN
        ERROR(DocTypeErr);
    
      CustLedgerEntry.CALCFIELDS("Remaining Amount");
    ...
Table<Direct Debit Collection Entry>.PROCEDURE<OnBeforeExportSEPA>
  Raised in: Table<Direct Debit Collection Entry>.PROCEDURE<ExportSEPA>
    Code lines:
    IsHandled := FALSE;
    OnBeforeExportSEPA(Rec,IsHandled); <=====================
    IF NOT IsHandled THEN
      CODEUNIT.RUN(CODEUNIT::"SEPA DD-Export File",Rec);
Table<Direct Debit Collection Entry>.PROCEDURE<OnBeforeValidateTransferAmount>
  Raised in: Table<Direct Debit Collection Entry>.Field<Transfer Amount>.<OnValidate>
    Code lines:
    IsHandled := FALSE;
    OnBeforeValidateTransferAmount(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF "Transfer Amount" <= 0 THEN
      ERROR(AmountMustBePositiveErr);
    TESTFIELD("Applies-to Entry No.");
    CustLedgEntry.GET("Applies-to Entry No.");
    CustLedgEntry.CALCFIELDS("Remaining Amount");
    ...
Table<Purch. Rcpt. Line>.PROCEDURE<OnAfterCopyFromPurchRcptLine>
  Raised in: Table<Purch. Rcpt. Line>.PROCEDURE<InsertInvLineFromRcptLine>
    Code lines:
    ...
      PurchLine."Special Order Sales Line No." := 0;
      PurchLine."Special Order" := FALSE;
      PurchLine."Receipt No." := "Document No.";
      PurchLine."Receipt Line No." := "Line No.";
      PurchLine."Appl.-to Item Entry" := 0;
      OnAfterCopyFromPurchRcptLine(PurchLine,Rec); <=====================
      IF NOT ExtTextLine THEN BEGIN
        PurchLine.VALIDATE(Quantity,Quantity - "Quantity Invoiced");
        PurchLine.VALIDATE("Direct Unit Cost",PurchOrderLine."Direct Unit Cost");
        PurchOrderLine."Line Discount Amount" :=
    ...
Table<Purch. Rcpt. Line>.PROCEDURE<OnAfterInitFromPurchLine>
  Raised in: Table<Purch. Rcpt. Line>.PROCEDURE<InitFromPurchLine>
    Code lines:
    ...
      Factor := PurchLine."Qty. to Receive" / PurchLine.Quantity;
      IF Factor <> 1 THEN
        UpdateJobPrices(Factor);
    END;
    
    OnAfterInitFromPurchLine(PurchRcptHeader,PurchLine,Rec); <=====================
Table<Purch. Rcpt. Line>.PROCEDURE<OnAfterInsertInvLineFromRcptLine>
  Raised in: Table<Purch. Rcpt. Line>.PROCEDURE<InsertInvLineFromRcptLine>
    Code lines:
    ...
      ELSE
        PurchLine."Drop Shipment" := TRUE;
    
      OnBeforeInsertInvLineFromRcptLine(Rec,PurchLine,PurchOrderLine);
      PurchLine.INSERT;
      OnAfterInsertInvLineFromRcptLine(PurchLine,PurchOrderLine,NextLineNo,Rec); <=====================
    
      ItemTrackingMgt.CopyHandledItemTrkgToInvLine2(PurchOrderLine,PurchLine);
    
      NextLineNo := NextLineNo + 10000;
    ...
Table<Purch. Rcpt. Line>.PROCEDURE<OnBeforeInsertInvLineFromRcptLine>
  Raised in: Table<Purch. Rcpt. Line>.PROCEDURE<InsertInvLineFromRcptLine>
    Code lines:
    ...
      PurchLine."Document Type" := TempPurchLine."Document Type";
      PurchLine."Document No." := TempPurchLine."Document No.";
      LanguageManagement.SetGlobalLanguageByCode(PurchInvHeader."Language Code");
      PurchLine.Description := STRSUBSTNO(Text000,"Document No.");
      LanguageManagement.RestoreGlobalLanguage;
      OnBeforeInsertInvLineFromRcptLineBeforeInsertTextLine(Rec,PurchLine,NextLineNo,Handled); <=====================
      IF NOT Handled THEN BEGIN
        PurchLine.INSERT;
        NextLineNo := NextLineNo + 10000;
      END;
    ...
Table<Purch. Rcpt. Line>.PROCEDURE<OnBeforeInsertInvLineFromRcptLineBeforeInsertTextLine>
  Raised in: Table<Purch. Rcpt. Line>.PROCEDURE<InsertInvLineFromRcptLine>
    Code lines:
    ...
      PurchLine."Document Type" := TempPurchLine."Document Type";
      PurchLine."Document No." := TempPurchLine."Document No.";
      LanguageManagement.SetGlobalLanguageByCode(PurchInvHeader."Language Code");
      PurchLine.Description := STRSUBSTNO(Text000,"Document No.");
      LanguageManagement.RestoreGlobalLanguage;
      OnBeforeInsertInvLineFromRcptLineBeforeInsertTextLine(Rec,PurchLine,NextLineNo,Handled); <=====================
      IF NOT Handled THEN BEGIN
        PurchLine.INSERT;
        NextLineNo := NextLineNo + 10000;
      END;
    ...
Table<Purch. Rcpt. Line>.PROCEDURE<OnInsertInvLineFromRcptLineOnAfterAssignDescription>
  Raised in: Table<Purch. Rcpt. Line>.PROCEDURE<InsertInvLineFromRcptLine>
    Code lines:
    ...
        IF ExtTextLine THEN BEGIN
          PurchOrderLine.INIT;
          PurchOrderLine."Line No." := "Order Line No.";
          PurchOrderLine.Description := Description;
          PurchOrderLine."Description 2" := "Description 2";
          OnInsertInvLineFromRcptLineOnAfterAssignDescription(Rec,PurchOrderLine); <=====================
        END ELSE
          ERROR(Text001);
      END;
      PurchLine := PurchOrderLine;
    ...
Table<Purch. Inv. Header>.PROCEDURE<OnBeforePrintRecords>
  Raised in: Table<Purch. Inv. Header>.PROCEDURE<PrintRecords>
    Code lines:
    IsHandled := FALSE;
    OnBeforePrintRecords(PurchInvHeader,ShowRequestPage,IsHandled); <=====================
    IF NOT IsHandled THEN
      WITH PurchInvHeader DO BEGIN
        COPY(Rec);
        ReportSelection.PrintWithGUIYesNoVendor(
          ReportSelection.Usage::"P.Invoice",PurchInvHeader,ShowRequestPage,FIELDNO("Buy-from Vendor No."));
      END;
Table<Purch. Inv. Line>.PROCEDURE<OnAfterInitFromPurchLine>
  Raised in: Table<Purch. Inv. Line>.PROCEDURE<InitFromPurchLine>
    Code lines:
    ...
    "Posting Date" := PurchInvHeader."Posting Date";
    "Document No." := PurchInvHeader."No.";
    Quantity := PurchLine."Qty. to Invoice";
    "Quantity (Base)" := PurchLine."Qty. to Invoice (Base)";
    
    OnAfterInitFromPurchLine(PurchInvHeader,PurchLine,Rec); <=====================
Table<XML Buffer>.PROCEDURE<OnNormalizeElementValue>
  Raised in: Table<XML Buffer>.PROCEDURE<NormalizeElementValue>
    Code lines:
    OnNormalizeElementValue(ElementValue); <=====================
Table<Transformation Rule>.PROCEDURE<OnCreateTransformationRules>
  Raised in: Page<Transformation Rules>.<OnOpenPage>
    Code lines:
    IF ISEMPTY THEN
      CreateDefaultTransformations;
    OnCreateTransformationRules; <=====================
  Raised in: Table<Transformation Rule>.PROCEDURE<CreateDefaultTransformations>
    Code lines:
    ...
    InsertRec(YYYYMMDDHHMMSSTxt,YYYYMMDDHHMMSSDescTxt,"Transformation Type"::"Date and Time Formatting",0,0,'yyyyMMddHHmmss','');
    InsertRec(ALPHANUMERIC_ONLYTxt,AlphaNumericDescTxt,"Transformation Type"::"Remove Non-Alphanumeric Characters",0,0,'','');
    InsertRec(DKNUMBERFORMATTxt,DKNUMBERFORMATDescTxt,"Transformation Type"::"Decimal Formatting",0,0,'','da-DK');
    InsertRec(USDATEFORMATTxt,USDATEFORMATDescTxt,"Transformation Type"::"Date Formatting",0,0,'','en-US');
    InsertRec(USDATETIMEFORMATTxt,USDATETIMEFORMATDescTxt,"Transformation Type"::"Date and Time Formatting",0,0,'','en-US');
    OnCreateTransformationRules; <=====================
    InsertFindAndReplaceRule(
      DeleteNOTPROVIDEDTxt,DeleteNOTPROVIDEDDescriptionTxt,"Transformation Type"::"Regular Expression - Replace",'NOTPROVIDED','');
Table<Transformation Rule>.PROCEDURE<OnTransformation>
  Raised in: Table<Transformation Rule>.PROCEDURE<TransformText>
    Code lines:
    ...
      "Transformation Type"::"Date and Time Formatting":
        NewValue := DateTimeFormatting(OldValue);
      "Transformation Type"::"Decimal Formatting":
        NewValue := DecimalFormatting(OldValue);
      "Transformation Type"::Custom:
        OnTransformation(Code,OldValue,NewValue); <=====================
    END;
    
    IF "Next Transformation Rule" <> '' THEN
      IF TransformationRule.GET("Next Transformation Rule") THEN
    ...
Table<Purch. Cr. Memo Hdr.>.PROCEDURE<OnBeforePrintRecords>
  Raised in: Table<Purch. Cr. Memo Hdr.>.PROCEDURE<PrintRecords>
    Code lines:
    IsHandled := FALSE;
    OnBeforePrintRecords(PurchCrMemoHeader,ShowRequestPage,IsHandled); <=====================
    IF NOT IsHandled THEN
      WITH PurchCrMemoHeader DO BEGIN
        COPY(Rec);
        ReportSelection.PrintWithGUIYesNoVendor(
          ReportSelection.Usage::"P.Cr.Memo",PurchCrMemoHeader,ShowRequestPage,FIELDNO("Buy-from Vendor No."));
      END;
Table<Ledger Entry Matching Buffer>.PROCEDURE<OnBeforeInsertFromBankAccountLedgerEntry>
  Raised in: Table<Ledger Entry Matching Buffer>.PROCEDURE<InsertFromBankAccLedgerEntry>
    Code lines:
    ...
    "Document Type" := BankAccountLedgerEntry."Document Type";
    "Document No." := BankAccountLedgerEntry."Document No.";
    "External Document No." := BankAccountLedgerEntry."External Document No.";
    "Remaining Amount" := BankAccountLedgerEntry."Remaining Amount";
    "Remaining Amt. Incl. Discount" := "Remaining Amount";
    OnBeforeInsertFromBankAccountLedgerEntry(Rec,BankAccountLedgerEntry); <=====================
    INSERT(TRUE);
Table<Ledger Entry Matching Buffer>.PROCEDURE<OnBeforeInsertFromCustomerLedgerEntry>
  Raised in: Table<Ledger Entry Matching Buffer>.PROCEDURE<InsertFromCustomerLedgerEntry>
    Code lines:
    ...
          ROUND(CustLedgerEntry."Remaining Pmt. Disc. Possible" / CustLedgerEntry."Adjusted Currency Factor")
      ELSE
        "Remaining Amt. Incl. Discount" -= CustLedgerEntry."Remaining Pmt. Disc. Possible";
      UsePaymentDiscounts := TRUE;
    END;
    OnBeforeInsertFromCustomerLedgerEntry(Rec,CustLedgerEntry); <=====================
    INSERT(TRUE);
Table<Ledger Entry Matching Buffer>.PROCEDURE<OnBeforeInsertFromVendorLedgerEntry>
  Raised in: Table<Ledger Entry Matching Buffer>.PROCEDURE<InsertFromVendorLedgerEntry>
    Code lines:
    ...
          ROUND(VendorLedgerEntry."Remaining Pmt. Disc. Possible" / VendorLedgerEntry."Adjusted Currency Factor")
      ELSE
        "Remaining Amt. Incl. Discount" -= VendorLedgerEntry."Remaining Pmt. Disc. Possible";
      UsePaymentDiscounts := TRUE;
    END;
    OnBeforeInsertFromVendorLedgerEntry(Rec,VendorLedgerEntry); <=====================
    INSERT(TRUE);
Table<Purch. Cr. Memo Line>.PROCEDURE<OnAfterInitFromPurchLine>
  Raised in: Table<Purch. Cr. Memo Line>.PROCEDURE<InitFromPurchLine>
    Code lines:
    ...
    "Posting Date" := PurchCrMemoHdr."Posting Date";
    "Document No." := PurchCrMemoHdr."No.";
    Quantity := PurchLine."Qty. to Invoice";
    "Quantity (Base)" := PurchLine."Qty. to Invoice (Base)";
    
    OnAfterInitFromPurchLine(PurchCrMemoHdr,PurchLine,Rec); <=====================
Table<Incoming Document>.PROCEDURE<OnAfterCreateGenJnlLineFromIncomingDocFail>
  Raised in: Table<Incoming Document>.PROCEDURE<CreateGenJnlLine>
    Code lines:
    ...
    GenJnlLine.Description := COPYSTR(Description,1,MAXSTRLEN(GenJnlLine.Description));
    
    IF GenJnlLine.INSERT(TRUE) THEN
      OnAfterCreateGenJnlLineFromIncomingDocSuccess(Rec)
    ELSE
      OnAfterCreateGenJnlLineFromIncomingDocFail(Rec); <=====================
    
    IF GenJnlLine.HASLINKS THEN
      GenJnlLine.DELETELINKS;
    IF GetURL <> '' THEN
    ...
  Raised in: Table<Incoming Document>.PROCEDURE<CreateGeneralJournalLineWithDataExchange>
    Code lines:
    ...
    
    ErrorMessage.SetContext(RECORDID);
    IF NOT ErrorMessage.HasErrors(FALSE) THEN
      OnAfterCreateGenJnlLineFromIncomingDocSuccess(Rec)
    ELSE
      OnAfterCreateGenJnlLineFromIncomingDocFail(Rec); <=====================
Table<Incoming Document>.PROCEDURE<OnAfterCreateGenJnlLineFromIncomingDocSuccess>
  Raised in: Table<Incoming Document>.PROCEDURE<CreateGenJnlLine>
    Code lines:
    ...
    GenJnlLine.SetUpNewLine(LastGenJnlLine,0,TRUE);
    GenJnlLine."Incoming Document Entry No." := "Entry No.";
    GenJnlLine.Description := COPYSTR(Description,1,MAXSTRLEN(GenJnlLine.Description));
    
    IF GenJnlLine.INSERT(TRUE) THEN
      OnAfterCreateGenJnlLineFromIncomingDocSuccess(Rec) <=====================
    ELSE
      OnAfterCreateGenJnlLineFromIncomingDocFail(Rec);
    
    IF GenJnlLine.HASLINKS THEN
    ...
  Raised in: Table<Incoming Document>.PROCEDURE<CreateGeneralJournalLineWithDataExchange>
    Code lines:
    ...
    
    CreateWithDataExchange("Document Type"::Journal);
    
    ErrorMessage.SetContext(RECORDID);
    IF NOT ErrorMessage.HasErrors(FALSE) THEN
      OnAfterCreateGenJnlLineFromIncomingDocSuccess(Rec) <=====================
    ELSE
      OnAfterCreateGenJnlLineFromIncomingDocFail(Rec);
Table<Incoming Document>.PROCEDURE<OnAfterCreatePurchHeaderFromIncomingDoc>
  Raised in: Table<Incoming Document>.PROCEDURE<CreatePurchDoc>
    Code lines:
    ...
        PurchHeader."Document Type" := PurchHeader."Document Type"::Invoice;
      DocumentType::"Credit Memo":
        PurchHeader."Document Type" := PurchHeader."Document Type"::"Credit Memo";
    END;
    PurchHeader.INSERT(TRUE);
    OnAfterCreatePurchHeaderFromIncomingDoc(PurchHeader); <=====================
    IF GetURL <> '' THEN
      PurchHeader.ADDLINK(GetURL,Description);
    PurchHeader."Incoming Document Entry No." := "Entry No.";
    PurchHeader.MODIFY;
    ...
Table<Incoming Document>.PROCEDURE<OnAfterCreateSalesHeaderFromIncomingDoc>
  Raised in: Table<Incoming Document>.PROCEDURE<CreateSalesDoc>
    Code lines:
    ...
        SalesHeader."Document Type" := SalesHeader."Document Type"::Invoice;
      DocumentType::"Credit Memo":
        SalesHeader."Document Type" := SalesHeader."Document Type"::"Credit Memo";
    END;
    SalesHeader.INSERT(TRUE);
    OnAfterCreateSalesHeaderFromIncomingDoc(SalesHeader); <=====================
    IF GetURL <> '' THEN
      SalesHeader.ADDLINK(GetURL,Description);
    SalesHeader."Incoming Document Entry No." := "Entry No.";
    SalesHeader.MODIFY;
    ...
Table<Incoming Document>.PROCEDURE<OnAfterFindPostedRecord>
  Raised in: Table<Incoming Document>.PROCEDURE<FindPostedRecord>
    Code lines:
    ...
          RelatedRecord := PurchCrMemoHdr;
          EXIT(TRUE);
        END;
    END;
    RecordFound := FALSE;
    OnAfterFindPostedRecord(RelatedRecord,RecordFound,Rec); <=====================
    EXIT(RecordFound);
Table<Incoming Document>.PROCEDURE<OnAfterFindUnpostedRecord>
  Raised in: Table<Incoming Document>.PROCEDURE<FindUnpostedRecord>
    Code lines:
    ...
            EXIT(TRUE);
          END;
        END;
    END;
    RecordFound := FALSE;
    OnAfterFindUnpostedRecord(RelatedRecord,RecordFound,Rec); <=====================
    EXIT(RecordFound);
Table<Incoming Document>.PROCEDURE<OnAfterGetRelatedRecordCaption>
  Raised in: Table<Incoming Document>.PROCEDURE<GetRelatedRecordCaption>
    Code lines:
    ...
            RecCaption := STRSUBSTNO('%1 - %2',JournalTxt,GetRecordCaption(RelatedRecordRef));
        END;
      ELSE
        RecCaption := STRSUBSTNO('%1 - %2',RelatedRecordRef.CAPTION,GetRecordCaption(RelatedRecordRef));
    END;
    OnAfterGetRelatedRecordCaption(RelatedRecordRef,RecCaption); <=====================
    EXIT(RecCaption);
Table<Incoming Document>.PROCEDURE<OnAfterUpdateDocumentFields>
  Raised in: Table<Incoming Document>.PROCEDURE<UpdateDocumentFields>
    Code lines:
    ...
      "Document No." := GenJournalLine."Document No.";
      EXIT;
    END;
    
    DocExists := FALSE;
    OnAfterUpdateDocumentFields(Rec,DocExists); <=====================
    IF NOT DocExists THEN
      ERROR(EntityNotFoundErr);
Table<Incoming Document>.PROCEDURE<OnCheckIncomingDocCreateDocRestrictions>
  Raised in: Table<Incoming Document>.PROCEDURE<CreateWithDataExchange>
    Code lines:
    FIND;
    
    IF ApprovalsMgmt.IsIncomingDocApprovalsWorkflowEnabled(Rec) AND (Status = Status::New) THEN
      ERROR(DocWhenApprovalIsCompleteErr);
    
    OnCheckIncomingDocCreateDocRestrictions; <=====================
    
    IF "Data Exchange Type" = '' THEN
      ERROR(DataExchangeTypeEmptyErr);
    
    ...
Table<Incoming Document>.PROCEDURE<OnCheckIncomingDocReleaseRestrictions>
  Raised in: Codeunit<Release Incoming Document>.<OnRun>
    Code lines:
    IF Status = Status::Released THEN
      EXIT;
    IF Status IN [Status::Created,Status::Posted] THEN
      ERROR(CanReleasedIfStatusErr,Status::"Pending Approval",Status::New,Status::Failed);
    
    OnCheckIncomingDocReleaseRestrictions; <=====================
    
    TESTFIELD(Posted,FALSE);
    
    IF NOT IsADocumentAttached THEN
    ...
Table<Incoming Document>.PROCEDURE<OnCheckIncomingDocSetForOCRRestrictions>
  Raised in: Codeunit<Send Incoming Document to OCR>.PROCEDURE<VerifySendToOCR>
    Code lines:
    ...
      IF "OCR Status" IN ["OCR Status"::Sent,"OCR Status"::Success,"OCR Status"::"Awaiting Verification"] THEN BEGIN
        ShowMessage(STRSUBSTNO(ErrorMessage,FORMAT("OCR Status")));
        EXIT(FALSE);
      END;
    
      OnCheckIncomingDocSetForOCRRestrictions; <=====================
    
      IF ApprovalsMgmt.IsIncomingDocApprovalsWorkflowEnabled(IncomingDocument) AND (Status = Status::New) THEN
        ERROR(OCRWhenApprovalIsCompleteErr);
    
    ...
Table<Incoming Document>.PROCEDURE<OnGetDataExchangePath>
  Raised in: Table<Incoming Document>.PROCEDURE<GetDataExchangePath>
    Code lines:
    ...
      FIELDNO("Order No."):
        EXIT(DataExchLineDef.GetPath(DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Vendor Order No.")));
      FIELDNO("VAT Amount"):
        EXIT(DataExchLineDef.GetPath(DATABASE::"G/L Entry",GLEntry.FIELDNO("VAT Amount")));
      ELSE BEGIN
        OnGetDataExchangePath(DataExchLineDef,FieldNumber,DataExchangePath); <=====================
        IF  DataExchangePath <> '' THEN
          EXIT(DataExchangePath);
      END;
    END;
    ...
Table<Mini Customer Template>.PROCEDURE<OnAfterCreateFieldRefArray>
  Raised in: Table<Mini Customer Template>.PROCEDURE<CreateFieldRefArray>
    Code lines:
    ...
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Reminder Terms Code")));
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("VAT Bus. Posting Group")));
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Block Payment Tolerance")));
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Allow Line Disc.")));
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Validate EU Vat Reg. No.")));
    OnAfterCreateFieldRefArray(FieldRefArray,RecRef); <=====================
Table<Mini Customer Template>.PROCEDURE<OnAfterInsertCustomerFromTemplate>
  Raised in: Table<Mini Customer Template>.PROCEDURE<InsertCustomerFromTemplate>
    Code lines:
    ...
    RecRef.SETTABLE(Customer);
    
    DimensionsTemplate.InsertDimensionsFromTemplates(ConfigTemplateHeader,Customer."No.",DATABASE::Customer);
    Customer.FIND;
    
    OnAfterInsertCustomerFromTemplate(Customer,ConfigTemplateHeader); <=====================
Table<Mini Customer Template>.PROCEDURE<OnCreateConfigTemplateFromExistingCustomerOnBeforeInitTempRec>
  Raised in: Table<Mini Customer Template>.PROCEDURE<CreateConfigTemplateFromExistingCustomer>
    Code lines:
    ...
    CreateFieldRefArray(FieldRefArray,RecRef);
    
    ConfigTemplateManagement.CreateConfigTemplateAndLines(NewTemplateCode,'',DATABASE::Customer,FieldRefArray);
    ConfigTemplateHeader.GET(NewTemplateCode);
    DimensionsTemplate.CreateTemplatesFromExistingMasterRecord(Customer."No.",NewTemplateCode,DATABASE::Customer);
    OnCreateConfigTemplateFromExistingCustomerOnBeforeInitTempRec(Customer,TempMiniCustomerTemplate,ConfigTemplateHeader); <=====================
    InitializeTempRecordFromConfigTemplate(TempMiniCustomerTemplate,ConfigTemplateHeader);
Table<Item Template>.PROCEDURE<OnAfterCreateFieldRefArray>
  Raised in: Table<Item Template>.PROCEDURE<CreateFieldRefArray>
    Code lines:
    ...
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Tax Group Code")));
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Warehouse Class Code")));
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Item Category Code")));
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Service Item Group")));
    
    OnAfterCreateFieldRefArray(FieldRefArray,RecRef,I); <=====================
Table<Item Template>.PROCEDURE<OnAfterInsertItemFromTemplate>
  Raised in: Table<Item Template>.PROCEDURE<InsertItemFromTemplate>
    Code lines:
    ...
      Item.MODIFY(TRUE);
    END;
    DimensionsTemplate.InsertDimensionsFromTemplates(ConfigTemplateHeader,Item."No.",DATABASE::Item);
    Item.FIND;
    
    OnAfterInsertItemFromTemplate(Rec,Item); <=====================
Table<Item Template>.PROCEDURE<OnAfterUpdateItemFromTemplate>
  Raised in: Table<Item Template>.PROCEDURE<UpdateItemFromTemplate>
    Code lines:
    ...
      DimensionsTemplate.InsertDimensionsFromTemplates(ConfigTemplateHeader,Item."No.",DATABASE::Item);
      ItemRecRef.SETTABLE(Item);
      Item.FIND;
    END;
    
    OnAfterUpdateItemFromTemplate(Rec,Item); <=====================
Table<Item Template>.PROCEDURE<OnBeforeInitItemNo>
  Raised in: Table<Item Template>.PROCEDURE<InitItemNo>
    Code lines:
    IsHandled := FALSE;
    OnBeforeInitItemNo(Item,ConfigTemplateHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF ConfigTemplateHeader."Instance No. Series" = '' THEN
      EXIT;
    NoSeriesMgt.InitSeries(ConfigTemplateHeader."Instance No. Series",'',0D,Item."No.",Item."No. Series");
Table<Item Template>.PROCEDURE<OnCreateConfigTemplateFromExistingItemOnBeforeInitTempRec>
  Raised in: Table<Item Template>.PROCEDURE<CreateConfigTemplateFromExistingItem>
    Code lines:
    ...
    CreateFieldRefArray(FieldRefArray,RecRef);
    
    ConfigTemplateManagement.CreateConfigTemplateAndLines(NewTemplateCode,'',DATABASE::Item,FieldRefArray);
    DimensionsTemplate.CreateTemplatesFromExistingMasterRecord(Item."No.",NewTemplateCode,DATABASE::Item);
    ConfigTemplateHeader.GET(NewTemplateCode);
    OnCreateConfigTemplateFromExistingItemOnBeforeInitTempRec(Item,TempItemTemplate,ConfigTemplateHeader); <=====================
    InitializeTempRecordFromConfigTemplate(TempItemTemplate,ConfigTemplateHeader);
Table<Dimensions Template>.PROCEDURE<OnAfterCreateFieldRefArray>
  Raised in: Table<Dimensions Template>.PROCEDURE<CreateFieldRefArray>
    Code lines:
    I := 1;
    
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Dimension Code")));
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Dimension Value Code")));
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Value Posting")));
    OnAfterCreateFieldRefArray(FieldRefArray,RecRef); <=====================
Table<Mini Vendor Template>.PROCEDURE<OnAfterCreateFieldRefArray>
  Raised in: Table<Mini Vendor Template>.PROCEDURE<CreateFieldRefArray>
    Code lines:
    ...
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Post Code")));
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO(County)));
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("VAT Bus. Posting Group")));
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Block Payment Tolerance")));
    AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Validate EU Vat Reg. No.")));
    OnAfterCreateFieldRefArray(FieldRefArray,RecRef); <=====================
Table<Mini Vendor Template>.PROCEDURE<OnAfterInsertVendorFromTemplate>
  Raised in: Table<Mini Vendor Template>.PROCEDURE<InsertVendorFromTemplate>
    Code lines:
    ...
    RecRef.SETTABLE(Vendor);
    
    DimensionsTemplate.InsertDimensionsFromTemplates(ConfigTemplateHeader,Vendor."No.",DATABASE::Vendor);
    Vendor.FIND;
    
    OnAfterInsertVendorFromTemplate(Vendor,ConfigTemplateHeader); <=====================
Table<Mini Vendor Template>.PROCEDURE<OnCreateConfigTemplateFromExistingVendorOnBeforeInitTempRec>
  Raised in: Table<Mini Vendor Template>.PROCEDURE<CreateConfigTemplateFromExistingVendor>
    Code lines:
    ...
    CreateFieldRefArray(FieldRefArray,RecRef);
    
    ConfigTemplateManagement.CreateConfigTemplateAndLines(NewTemplateCode,'',DATABASE::Vendor,FieldRefArray);
    ConfigTemplateHeader.GET(NewTemplateCode);
    DimensionsTemplate.CreateTemplatesFromExistingMasterRecord(Vendor."No.",NewTemplateCode,DATABASE::Vendor);
    OnCreateConfigTemplateFromExistingVendorOnBeforeInitTempRec(Vendor,TempMiniVendorTemplate,ConfigTemplateHeader); <=====================
    InitializeTempRecordFromConfigTemplate(TempMiniVendorTemplate,ConfigTemplateHeader);
Table<O365 Getting Started>.PROCEDURE<OnO365DemoCompanyInitialize>
  Raised in: Codeunit<O365 Getting Started Mgt.>.PROCEDURE<CheckOrLaunchWizard>
    Code lines:
    ...
      EXIT(FALSE);
    
    WizardHasBeenShownToUser := O365GettingStarted.GET(USERID,ClientTypeManagement.GetCurrentClientType);
    
    IF NOT WizardHasBeenShownToUser THEN BEGIN
      O365GettingStarted.OnO365DemoCompanyInitialize; <=====================
      IF Launch THEN BEGIN
        COMMIT;
        PAGE.RUNMODAL(PageToStart);
      END;
    ...
Table<Incoming Document Attachment>.PROCEDURE<OnAttachBinaryFile>
  Raised in: Codeunit<Import Attachment - Inc. Doc.>.PROCEDURE<ImportAttachment>
    Code lines:
    ...
      END;
    
      INSERT(TRUE);
    
      IF Type IN [Type::Image,Type::PDF] THEN
        OnAttachBinaryFile; <=====================
    END;
    EXIT(TRUE);
  Raised in: Table<Incoming Document>.PROCEDURE<AddXmlAttachmentFromXmlText>
    Code lines:
    ...
    IncomingDocumentAttachment.VALIDATE("File Extension",'xml');
    IncomingDocumentAttachment.Content.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
    OutStr.WRITETEXT(XmlText);
    IncomingDocumentAttachment.INSERT(TRUE);
    IF IncomingDocumentAttachment.Type IN [IncomingDocumentAttachment.Type::Image,IncomingDocumentAttachment.Type::PDF] THEN
      IncomingDocumentAttachment.OnAttachBinaryFile; <=====================
Table<Incoming Document Attachment>.PROCEDURE<OnBeforeExtractHeaderFields>
  Raised in: Table<Incoming Document Attachment>.PROCEDURE<ExtractHeaderFields>
    Code lines:
    ...
    AddFieldToFieldBuffer(TempFieldBuffer,IncomingDocument.FIELDNO("Vendor IBAN"));
    AddFieldToFieldBuffer(TempFieldBuffer,IncomingDocument.FIELDNO("Vendor Bank Branch No."));
    AddFieldToFieldBuffer(TempFieldBuffer,IncomingDocument.FIELDNO("Vendor Bank Account No."));
    AddFieldToFieldBuffer(TempFieldBuffer,IncomingDocument.FIELDNO("Vendor Phone No."));
    
    OnBeforeExtractHeaderFields(TempFieldBuffer,IncomingDocument); <=====================
    
    TempFieldBuffer.RESET;
    TempFieldBuffer.FINDSET;
    REPEAT
    ...
Table<Incoming Document Attachment>.PROCEDURE<OnGetBinaryContent>
  Raised in: Table<Incoming Document Attachment>.PROCEDURE<Export>
    Code lines:
    ...
      EXIT;
    
    IF DefaultFileName = '' THEN
      DefaultFileName := Name + '.' + "File Extension";
    
    OnGetBinaryContent(TempBlob); <=====================
    IF NOT TempBlob.Blob.HASVALUE THEN
      TempBlob.Blob := Content;
    EXIT(FileMgt.BLOBExport(TempBlob,DefaultFileName,ShowFileDialog));
  Raised in: Table<Incoming Document Attachment>.PROCEDURE<SendToOCR>
    Code lines:
    CALCFIELDS(Content);
    TempBlob.INIT;
    TempBlob."Primary Key" := "Incoming Document Entry No.";
    OnGetBinaryContent(TempBlob); <=====================
    IF NOT TempBlob.Blob.HASVALUE THEN
      TempBlob.Blob := Content;
    
    IF "External Document Reference" = '' THEN
      "External Document Reference" := LOWERCASE(DELCHR(FORMAT(CREATEGUID),'=','{}-'));
    MODIFY;
    ...
  Raised in: Table<Incoming Document Attachment>.PROCEDURE<UpdateIncomingDocumentHeaderFields>
    Code lines:
    IF Type <> Type::XML THEN
      EXIT;
    TempBlob.INIT;
    OnGetBinaryContent(TempBlob); <=====================
    IF NOT TempBlob.Blob.HASVALUE THEN
      TempBlob.Blob := Content;
    TempBlob.Blob.CREATEINSTREAM(InStream);
    IF NOT XMLDOMManagement.LoadXMLNodeFromInStream(InStream,XMLRootNode) THEN
      EXIT;
    IF NOT IncomingDocument.GET("Incoming Document Entry No.") THEN
    ...
Table<Service Connection>.PROCEDURE<OnRegisterServiceConnection>
  Raised in: Page<Service Connections>.PROCEDURE<ReloadServiceConnections>
    Code lines:
    DELETEALL;
    OnRegisterServiceConnection(Rec); <=====================
  Raised in: Page<Service Connections Part>.<OnOpenPage>
    Code lines:
    OnRegisterServiceConnection(Rec); <=====================
  Raised in: Page<Service Connections Part>.PROCEDURE<CallSetup>
    Code lines:
    ...
      EXIT;
    RecordRef.GET("Record ID");
    RecordRefVariant := RecordRef;
    PAGE.RUNMODAL("Page ID",RecordRefVariant);
    DELETE;
    OnRegisterServiceConnection(Rec); <=====================
    IF GET(xRec."No.") THEN;
    CurrPage.UPDATE(FALSE);
Table<Named Forward Link>.PROCEDURE<OnLoad>
  Raised in: Table<Named Forward Link>.PROCEDURE<Load>
    Code lines:
    OnLoad; <=====================
Table<G/L Account>.PROCEDURE<OnAfterCheckGLAcc>
  Raised in: Table<G/L Account>.PROCEDURE<CheckGLAcc>
    Code lines:
    TESTFIELD("Account Type","Account Type"::Posting);
    TESTFIELD(Blocked,FALSE);
    
    OnAfterCheckGLAcc(Rec); <=====================
Table<My Notifications>.PROCEDURE<OnAfterIsNotificationEnabled>
  Raised in: Table<My Notifications>.PROCEDURE<IsEnabled>
    Code lines:
    IsNotificationEnabled := TRUE;
    
    IF GET(USERID,NotificationId) THEN
      IsNotificationEnabled := Enabled;
    
    OnAfterIsNotificationEnabled(NotificationId,IsNotificationEnabled); <=====================
    
    EXIT(IsNotificationEnabled);
Table<My Notifications>.PROCEDURE<OnStateChanged>
  Raised in: Table<My Notifications>.Field<Enabled>.<OnValidate>
    Code lines:
    IF Enabled <> xRec.Enabled THEN
      OnStateChanged("Notification Id",Enabled); <=====================
Table<Curr. Exch. Rate Update Setup>.PROCEDURE<OnAfterGetWebServiceURL>
  Raised in: Table<Curr. Exch. Rate Update Setup>.PROCEDURE<GetWebServiceURL>
    Code lines:
    ...
      "Web Service URL".CREATEINSTREAM(InStream);
      InStream.READ(ServiceURL);
    END;
    
    WebServiceURL := ServiceURL;
    OnAfterGetWebServiceURL(ServiceURL); <=====================
Table<Curr. Exch. Rate Update Setup>.PROCEDURE<OnBeforeSetupCurrencyExchRateService>
  Raised in: Table<Curr. Exch. Rate Update Setup>.PROCEDURE<SetupService>
    Code lines:
    OnBeforeSetupCurrencyExchRateService(Rec); <=====================
    IF ISEMPTY THEN
      CODEUNIT.RUN(CODEUNIT::"Set Up Curr Exch Rate Service");
Table<Job>.PROCEDURE<OnAfterChangeJobCompletionStatus>
  Raised in: Table<Job>.PROCEDURE<ChangeJobCompletionStatus>
    Code lines:
    ...
      JobCalcWIP.ReOpenJob("No.");
      "WIP Posting Date" := 0D;
      MESSAGE(ReverseCompletionEntriesMsg,GetReportCaption(REPORT::"Job Post WIP to G/L"));
    END;
    
    OnAfterChangeJobCompletionStatus(Rec,xRec); <=====================
Table<Job>.PROCEDURE<OnAfterUpdateBillToCust>
  Raised in: Table<Job>.PROCEDURE<UpdateCust>
    Code lines:
    ...
      "Language Code" := '';
      "Bill-to County" := '';
      VALIDATE("Bill-to Contact No.",'');
    END;
    
    OnAfterUpdateBillToCust(Rec); <=====================
Table<Job>.PROCEDURE<OnBeforeChangeJobCompletionStatus>
  Raised in: Table<Job>.PROCEDURE<ChangeJobCompletionStatus>
    Code lines:
    IsHandled := FALSE;
    OnBeforeChangeJobCompletionStatus(Rec,xRec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF Complete THEN BEGIN
      VALIDATE("Ending Date",CalcEndingDate);
      MESSAGE(EndingDateChangedMsg,FIELDCAPTION("Ending Date"),"Ending Date");
    END ELSE BEGIN
      JobCalcWIP.ReOpenJob("No.");
    ...
Table<Job>.PROCEDURE<OnBeforeCopyDefaultDimensionsFromCustomer>
  Raised in: Table<Job>.PROCEDURE<CopyDefaultDimensionsFromCustomer>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCopyDefaultDimensionsFromCustomer(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    JobDefaultDimension.SETRANGE("Table ID",DATABASE::Job);
    JobDefaultDimension.SETRANGE("No.","No.");
    IF JobDefaultDimension.FINDSET THEN
      REPEAT
        DimMgt.DefaultDimOnDelete(JobDefaultDimension);
    ...
Table<Job>.PROCEDURE<OnBeforeTestBlocked>
  Raised in: Table<Job>.PROCEDURE<TestBlocked>
    Code lines:
    OnBeforeTestBlocked(Rec); <=====================
    
    IF Blocked = Blocked::" " THEN
      EXIT;
    ERROR(TestBlockedErr,TABLECAPTION,"No.",Blocked);
Table<Job>.PROCEDURE<OnBeforeUpdateJobTaskDimension>
  Raised in: Table<Job>.PROCEDURE<UpdateJobTaskDimension>
    Code lines:
    IsHandled := FALSE;
    OnBeforeUpdateJobTaskDimension(Rec,FieldNumber,ShortcutDimCode,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF GUIALLOWED THEN
      IF NOT CONFIRM(UpdateJobTaskDimQst,FALSE) THEN
        EXIT;
    
    JobTask.SETRANGE("Job No.","No.");
    ...
Table<Job>.PROCEDURE<OnBeforeValidateBillToCustomerNo>
  Raised in: Table<Job>.Field<Bill-to Customer No.>.<OnValidate>
    Code lines:
    IsHandled := FALSE;
    OnBeforeValidateBillToCustomerNo(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF ("Bill-to Customer No." = '') OR ("Bill-to Customer No." <> xRec."Bill-to Customer No.") THEN
      IF JobLedgEntryExist OR JobPlanningLineExist THEN
        ERROR(AssociatedEntriesExistErr,FIELDCAPTION("Bill-to Customer No."),TABLECAPTION);
    
    UpdateCust;
Table<G/L Entry>.PROCEDURE<OnAfterCopyFromDeferralPostBuffer>
  Raised in: Table<G/L Entry>.PROCEDURE<CopyFromDeferralPostBuffer>
    Code lines:
    ...
    "Tax Area Code" := DeferralPostBuffer."Tax Area Code";
    "Tax Liable" := DeferralPostBuffer."Tax Liable";
    "Tax Group Code" := DeferralPostBuffer."Tax Group Code";
    "Use Tax" := DeferralPostBuffer."Use Tax";
    
    OnAfterCopyFromDeferralPostBuffer(Rec,DeferralPostBuffer); <=====================
Table<G/L Entry>.PROCEDURE<OnAfterCopyGLEntryFromGenJnlLine>
  Raised in: Table<G/L Entry>.PROCEDURE<CopyFromGenJnlLine>
    Code lines:
    ...
    "Reason Code" := GenJnlLine."Reason Code";
    "User ID" := USERID;
    "No. Series" := GenJnlLine."Posting No. Series";
    "IC Partner Code" := GenJnlLine."IC Partner Code";
    
    OnAfterCopyGLEntryFromGenJnlLine(Rec,GenJnlLine); <=====================
Table<Posted Deferral Line>.PROCEDURE<OnBeforeInitFromDeferralLine>
  Raised in: Table<Posted Deferral Line>.PROCEDURE<InitFromDeferralLine>
    Code lines:
    ...
    "Account No." := AccountNo;
    "Document Type" := NewDocumentType;
    "Document No." := NewDocumentNo;
    "Line No." := NewLineNo;
    "Deferral Account" := DeferralAccount;
    OnBeforeInitFromDeferralLine(Rec,DeferralLine); <=====================
    INSERT(TRUE);
Table<Standard Customer Sales Code>.PROCEDURE<OnAfterApplyStdCodesToSalesLinesLoop>
  Raised in: Table<Standard Customer Sales Code>.PROCEDURE<ApplyStdCodesToSalesLines>
    Code lines:
    ...
          SalesLine.AutoAsmToOrder;
          InsertExtendedText(SalesLine);
        END;
      UNTIL StdSalesLine.NEXT = 0;
    
    OnAfterApplyStdCodesToSalesLinesLoop(StdSalesLine,SalesLine,SalesHeader,StdSalesCode); <=====================
Table<Standard Customer Sales Code>.PROCEDURE<OnAfterCreateSalesInvoice>
  Raised in: Table<Standard Customer Sales Code>.PROCEDURE<CreateSalesInvoice>
    Code lines:
    ...
    IF "Direct Debit Mandate ID" <> '' THEN
      SalesHeader.VALIDATE("Direct Debit Mandate ID","Direct Debit Mandate ID");
    SalesHeader.MODIFY;
    ApplyStdCodesToSalesLines(SalesHeader,Rec);
    
    OnAfterCreateSalesInvoice(SalesHeader,Rec); <=====================
Table<Standard Customer Sales Code>.PROCEDURE<OnBeforeApplyStdCodesToSalesLines>
  Raised in: Table<Standard Customer Sales Code>.PROCEDURE<ApplyStdCodesToSalesLines>
    Code lines:
    ...
    IF SalesHeader."Prices Including VAT" THEN
      Factor := 1
    ELSE
      Factor := 0;
    
    OnBeforeApplyStdCodesToSalesLinesLoop(StdSalesLine,SalesLine,SalesHeader,StdSalesCode); <=====================
    
    SalesLine.LOCKTABLE;
    StdSalesLine.LOCKTABLE;
    IF StdSalesLine.FIND('-') THEN
    ...
Table<Standard Customer Sales Code>.PROCEDURE<OnBeforeApplyStdCodesToSalesLinesLoop>
  Raised in: Table<Standard Customer Sales Code>.PROCEDURE<ApplyStdCodesToSalesLines>
    Code lines:
    ...
    IF SalesHeader."Prices Including VAT" THEN
      Factor := 1
    ELSE
      Factor := 0;
    
    OnBeforeApplyStdCodesToSalesLinesLoop(StdSalesLine,SalesLine,SalesHeader,StdSalesCode); <=====================
    
    SalesLine.LOCKTABLE;
    StdSalesLine.LOCKTABLE;
    IF StdSalesLine.FIND('-') THEN
    ...
Table<Standard Purchase Line>.PROCEDURE<OnAfterValidateGLAccountNo>
  Raised in: Table<Standard Purchase Line>.Field<No.>.<OnValidate>
    Code lines:
    ...
        BEGIN
          GLAcc.GET("No.");
          GLAcc.CheckGLAcc;
          GLAcc.TESTFIELD("Direct Posting",TRUE);
          Description := GLAcc.Name;
          OnAfterValidateGLAccountNo(Rec,GLAcc); <=====================
        END;
      Type::Item:
        BEGIN
          Item.GET("No.");
    ...
Table<Standard Vendor Purchase Code>.PROCEDURE<OnBeforeApplyStdCodesToPurchaseLines>
  Raised in: Table<Standard Vendor Purchase Code>.PROCEDURE<ApplyStdCodesToPurchaseLines>
    Code lines:
    ...
    
        PurchLine."Shortcut Dimension 1 Code" := StdPurchLine."Shortcut Dimension 1 Code";
        PurchLine."Shortcut Dimension 2 Code" := StdPurchLine."Shortcut Dimension 2 Code";
    
        CombineDimensions(PurchLine,StdPurchLine);
        OnBeforeApplyStdCodesToPurchaseLines(PurchLine,StdPurchLine); <=====================
        IF StdPurchLine.InsertLine THEN BEGIN
          PurchLine."Line No." := GetNextLineNo(PurchLine);
          PurchLine.INSERT(TRUE);
          InsertExtendedText(PurchLine);
    ...
Table<Reversal Entry>.PROCEDURE<OnAfterCaption>
  Raised in: Table<Reversal Entry>.PROCEDURE<Caption>
    Code lines:
    ...
          EXIT(STRSUBSTNO('%1 %2 %3',FA.TABLECAPTION,FA."No.",FA.Description));
        END;
      "Entry Type"::VAT:
        EXIT(STRSUBSTNO('%1',VATEntry.TABLECAPTION));
      ELSE BEGIN
        OnAfterCaption(Rec,NewCaption); <=====================
        EXIT(NewCaption);
      END;
    END;
Table<Reversal Entry>.PROCEDURE<OnAfterCheckBankAcc>
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckBankAcc>
    Code lines:
    ...
    CheckLedgEntry.SETRANGE("Bank Account Ledger Entry No.",BankAccLedgEntry."Entry No.");
    IF NOT CheckLedgEntry.ISEMPTY THEN
      ERROR(
        Text003,BankAccLedgEntry.TABLECAPTION,BankAccLedgEntry."Entry No.");
    
    OnAfterCheckBankAcc(BankAcc,BankAccLedgEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCheckCust>
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckCust>
    Code lines:
    ...
    Cust.CheckBlockedCustOnJnls(Cust,CustLedgEntry."Document Type",FALSE);
    IF CustLedgEntry.Reversed THEN
      AlreadyReversedEntry(CustLedgEntry.TABLECAPTION,CustLedgEntry."Entry No.");
    CheckDtldCustLedgEntry(CustLedgEntry);
    
    OnAfterCheckCust(Cust,CustLedgEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCheckDtldCustLedgEntry>
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckDtldCustLedgEntry>
    Code lines:
    ...
    DtldCustLedgEntry.SETFILTER("Entry Type",'%1|%2',
      DtldCustLedgEntry."Entry Type"::"Realized Gain",DtldCustLedgEntry."Entry Type"::"Realized Loss");
    IF NOT DtldCustLedgEntry.ISEMPTY THEN
      ERROR(Text013,CustLedgEntry.TABLECAPTION,CustLedgEntry."Entry No.");
    
    OnAfterCheckDtldCustLedgEntry(DtldCustLedgEntry,CustLedgEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCheckDtldEmplLedgEntry>
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckDtldEmplLedgEntry>
    Code lines:
    ...
    DetailedEmployeeLedgerEntry.SETFILTER("Entry Type",'<>%1',DetailedEmployeeLedgerEntry."Entry Type"::"Initial Entry");
    DetailedEmployeeLedgerEntry.SETRANGE(Unapplied,FALSE);
    IF NOT DetailedEmployeeLedgerEntry.ISEMPTY THEN
      ERROR(ReversalErrorForChangedEntry(EmployeeLedgerEntry.TABLECAPTION,EmployeeLedgerEntry."Entry No."));
    
    OnAfterCheckDtldEmplLedgEntry(DetailedEmployeeLedgerEntry,EmployeeLedgerEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCheckDtldVendLedgEntry>
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckDtldVendLedgEntry>
    Code lines:
    ...
    DtldVendLedgEntry.SETFILTER("Entry Type",'%1|%2',
      DtldVendLedgEntry."Entry Type"::"Realized Gain",DtldVendLedgEntry."Entry Type"::"Realized Loss");
    IF NOT DtldVendLedgEntry.ISEMPTY THEN
      ERROR(Text013,VendLedgEntry.TABLECAPTION,VendLedgEntry."Entry No.");
    
    OnAfterCheckDtldVendLedgEntry(DtldVendLedgEntry,VendLedgEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCheckEmpl>
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckEmpl>
    Code lines:
    ...
    Employee.CheckBlockedEmployeeOnJnls(FALSE);
    IF EmployeeLedgerEntry.Reversed THEN
      AlreadyReversedEntry(EmployeeLedgerEntry.TABLECAPTION,EmployeeLedgerEntry."Entry No.");
    CheckDtldEmplLedgEntry(EmployeeLedgerEntry);
    
    OnAfterCheckEmpl(Employee,EmployeeLedgerEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCheckEntries>
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckEntries>
    Code lines:
    ...
        REPEAT
          CheckVAT(VATEntry);
        UNTIL VATEntry.NEXT = 0;
    END;
    
    OnAfterCheckEntries; <=====================
    
    DateComprReg.CheckMaxDateCompressed(MaxPostingDate,1);
Table<Reversal Entry>.PROCEDURE<OnAfterCheckFA>
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckFA>
    Code lines:
    ...
    FADeprBook.GET(FA."No.",FALedgEntry."Depreciation Book Code");
    IF FADeprBook."Disposal Date" <> 0D THEN
      ERROR(Text008,DeprCalc.FAName(FA,FALedgEntry."Depreciation Book Code"));
    FALedgEntry.TESTFIELD("G/L Entry No.");
    
    OnAfterCheckFA(FA,FALedgEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCheckGLAcc>
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckGLAcc>
    Code lines:
    ...
      AlreadyReversedEntry(GLEntry.TABLECAPTION,GLEntry."Entry No.");
    BalanceCheckAmount := BalanceCheckAmount + GLEntry.Amount;
    IF GLSetup."Additional Reporting Currency" <> '' THEN
      BalanceCheckAddCurrAmount := BalanceCheckAddCurrAmount + GLEntry."Additional-Currency Amount";
    
    OnAfterCheckGLAcc(GLAcc,GLEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCheckMaintenance>
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckMaintenance>
    Code lines:
    ...
    IF MaintenanceLedgEntry.Reversed THEN
      AlreadyReversedEntry(MaintenanceLedgEntry.TABLECAPTION,MaintenanceLedgEntry."Entry No.");
    FADeprBook.GET(FA."No.",MaintenanceLedgEntry."Depreciation Book Code");
    MaintenanceLedgEntry.TESTFIELD("G/L Entry No.");
    
    OnAfterCheckMaintenance(FA,MaintenanceLedgEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCheckVAT>
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckVAT>
    Code lines:
    ...
    IF VATEntry.Reversed THEN
      AlreadyReversedEntry(VATEntry.TABLECAPTION,VATEntry."Entry No.");
    IF VATEntry."Unrealized VAT Entry No." <> 0 THEN
      ERROR(UnrealizedVATReverseError(VATEntry.TABLECAPTION,VATEntry."Entry No."));
    
    OnAfterCheckVAT(VATEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCheckVend>
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckVend>
    Code lines:
    ...
    Vend.CheckBlockedVendOnJnls(Vend,VendLedgEntry."Document Type",FALSE);
    IF VendLedgEntry.Reversed THEN
      AlreadyReversedEntry(VendLedgEntry.TABLECAPTION,VendLedgEntry."Entry No.");
    CheckDtldVendLedgEntry(VendLedgEntry);
    
    OnAfterCheckVend(Vend,VendLedgEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromBankAccLedgEntry>
  Raised in: Table<Reversal Entry>.PROCEDURE<CopyFromBankAccLedgEntry>
    Code lines:
    ...
    "Document Type" := BankAccLedgEntry."Document Type";
    "Document No." := BankAccLedgEntry."Document No.";
    "Bal. Account Type" := BankAccLedgEntry."Bal. Account Type";
    "Bal. Account No." := BankAccLedgEntry."Bal. Account No.";
    
    OnAfterCopyFromBankAccLedgEntry(Rec,BankAccLedgEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromCustLedgEntry>
  Raised in: Table<Reversal Entry>.PROCEDURE<CopyFromCustLedgEntry>
    Code lines:
    ...
    "Document Type" := CustLedgEntry."Document Type";
    "Document No." := CustLedgEntry."Document No.";
    "Bal. Account Type" := CustLedgEntry."Bal. Account Type";
    "Bal. Account No." := CustLedgEntry."Bal. Account No.";
    
    OnAfterCopyFromCustLedgEntry(Rec,CustLedgEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromEmplLedgEntry>
  Raised in: Table<Reversal Entry>.PROCEDURE<CopyFromEmployeeLedgerEntry>
    Code lines:
    ...
    "Document Type" := EmployeeLedgerEntry."Document Type";
    "Document No." := EmployeeLedgerEntry."Document No.";
    "Bal. Account Type" := EmployeeLedgerEntry."Bal. Account Type";
    "Bal. Account No." := EmployeeLedgerEntry."Bal. Account No.";
    
    OnAfterCopyFromEmplLedgEntry(Rec,EmployeeLedgerEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromFALedgEntry>
  Raised in: Table<Reversal Entry>.PROCEDURE<CopyFromFALedgEntry>
    Code lines:
    ...
    "Document Type" := FALedgEntry."Document Type";
    "Document No." := FALedgEntry."Document No.";
    "Bal. Account Type" := FALedgEntry."Bal. Account Type";
    "Bal. Account No." := FALedgEntry."Bal. Account No.";
    
    OnAfterCopyFromFALedgEntry(Rec,FALedgEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromGLEntry>
  Raised in: Table<Reversal Entry>.PROCEDURE<CopyFromGLEntry>
    Code lines:
    ...
    "Document Type" := GLEntry."Document Type";
    "Document No." := GLEntry."Document No.";
    "Bal. Account Type" := GLEntry."Bal. Account Type";
    "Bal. Account No." := GLEntry."Bal. Account No.";
    
    OnAfterCopyFromGLEntry(Rec,GLEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromMaintenanceEntry>
  Raised in: Table<Reversal Entry>.PROCEDURE<CopyFromMaintenanceEntry>
    Code lines:
    ...
    "Document Type" := MaintenanceLedgEntry."Document Type";
    "Document No." := MaintenanceLedgEntry."Document No.";
    "Bal. Account Type" := MaintenanceLedgEntry."Bal. Account Type";
    "Bal. Account No." := MaintenanceLedgEntry."Bal. Account No.";
    
    OnAfterCopyFromMaintenanceEntry(Rec,MaintenanceLedgEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromVATEntry>
  Raised in: Table<Reversal Entry>.PROCEDURE<CopyFromVATEntry>
    Code lines:
    ...
    Amount := VATEntry.Amount;
    "Amount (LCY)" := VATEntry.Amount;
    "Document Type" := VATEntry."Document Type";
    "Document No." := VATEntry."Document No.";
    
    OnAfterCopyFromVATEntry(Rec,VATEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterCopyFromVendLedgEntry>
  Raised in: Table<Reversal Entry>.PROCEDURE<CopyFromVendLedgEntry>
    Code lines:
    ...
    "Document Type" := VendLedgEntry."Document Type";
    "Document No." := VendLedgEntry."Document No.";
    "Bal. Account Type" := VendLedgEntry."Bal. Account Type";
    "Bal. Account No." := VendLedgEntry."Bal. Account No.";
    
    OnAfterCopyFromVendLedgEntry(Rec,VendLedgEntry); <=====================
Table<Reversal Entry>.PROCEDURE<OnAfterInsertReversalEntry>
  Raised in: Table<Reversal Entry>.PROCEDURE<InsertReversalEntry>
    Code lines:
    ...
    InsertFromBankAccLedgEntry(Number,RevType,NextLineNo);
    InsertFromFALedgEntry(Number,RevType,NextLineNo);
    InsertFromMaintenanceLedgEntry(Number,RevType,NextLineNo);
    InsertFromVATEntry(TempRevertTransactionNo,Number,RevType,NextLineNo);
    InsertFromGLEntry(TempRevertTransactionNo,Number,RevType,NextLineNo);
    OnAfterInsertReversalEntry(TempRevertTransactionNo,Number,RevType,NextLineNo); <=====================
    IF TempReversalEntry.FIND('-') THEN;
Table<Reversal Entry>.PROCEDURE<OnAfterSetReverseFilter>
  Raised in: Table<Reversal Entry>.PROCEDURE<SetReverseFilter>
    Code lines:
    ...
      MaintenanceLedgEntry.SETCURRENTKEY("G/L Entry No.");
      MaintenanceLedgEntry.SETRANGE("G/L Entry No.",GLReg."From Entry No.",GLReg."To Entry No.");
      VATEntry.SETRANGE("Entry No.",GLReg."From VAT Entry No.",GLReg."To VAT Entry No.");
    END;
    
    OnAfterSetReverseFilter(Number,RevType,GLReg); <=====================
Table<Reversal Entry>.PROCEDURE<OnBeforeCheckEntries>
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckEntries>
    Code lines:
    ...
    FAReg.LOCKTABLE;
    GLSetup.GET;
    MaxPostingDate := 0D;
    
    SkipCheck := FALSE;
    OnBeforeCheckEntries(Rec,DATABASE::"G/L Entry",SkipCheck); <=====================
    IF NOT SkipCheck THEN BEGIN
      IF GLEntry.ISEMPTY THEN
        ERROR(CannotReverseDeletedErr,GLEntry.TABLECAPTION,GLAcc.TABLECAPTION);
      IF GLEntry.FIND('-') THEN BEGIN
    ...
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckEntries>
    Code lines:
    ...
    FAReg.LOCKTABLE;
    GLSetup.GET;
    MaxPostingDate := 0D;
    
    SkipCheck := FALSE;
    OnBeforeCheckEntries(Rec,DATABASE::"G/L Entry",SkipCheck); <=====================
    IF NOT SkipCheck THEN BEGIN
      IF GLEntry.ISEMPTY THEN
        ERROR(CannotReverseDeletedErr,GLEntry.TABLECAPTION,GLAcc.TABLECAPTION);
      IF GLEntry.FIND('-') THEN BEGIN
    ...
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckEntries>
    Code lines:
    ...
    FAReg.LOCKTABLE;
    GLSetup.GET;
    MaxPostingDate := 0D;
    
    SkipCheck := FALSE;
    OnBeforeCheckEntries(Rec,DATABASE::"G/L Entry",SkipCheck); <=====================
    IF NOT SkipCheck THEN BEGIN
      IF GLEntry.ISEMPTY THEN
        ERROR(CannotReverseDeletedErr,GLEntry.TABLECAPTION,GLAcc.TABLECAPTION);
      IF GLEntry.FIND('-') THEN BEGIN
    ...
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckEntries>
    Code lines:
    ...
    FAReg.LOCKTABLE;
    GLSetup.GET;
    MaxPostingDate := 0D;
    
    SkipCheck := FALSE;
    OnBeforeCheckEntries(Rec,DATABASE::"G/L Entry",SkipCheck); <=====================
    IF NOT SkipCheck THEN BEGIN
      IF GLEntry.ISEMPTY THEN
        ERROR(CannotReverseDeletedErr,GLEntry.TABLECAPTION,GLAcc.TABLECAPTION);
      IF GLEntry.FIND('-') THEN BEGIN
    ...
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckEntries>
    Code lines:
    ...
    FAReg.LOCKTABLE;
    GLSetup.GET;
    MaxPostingDate := 0D;
    
    SkipCheck := FALSE;
    OnBeforeCheckEntries(Rec,DATABASE::"G/L Entry",SkipCheck); <=====================
    IF NOT SkipCheck THEN BEGIN
      IF GLEntry.ISEMPTY THEN
        ERROR(CannotReverseDeletedErr,GLEntry.TABLECAPTION,GLAcc.TABLECAPTION);
      IF GLEntry.FIND('-') THEN BEGIN
    ...
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckEntries>
    Code lines:
    ...
    FAReg.LOCKTABLE;
    GLSetup.GET;
    MaxPostingDate := 0D;
    
    SkipCheck := FALSE;
    OnBeforeCheckEntries(Rec,DATABASE::"G/L Entry",SkipCheck); <=====================
    IF NOT SkipCheck THEN BEGIN
      IF GLEntry.ISEMPTY THEN
        ERROR(CannotReverseDeletedErr,GLEntry.TABLECAPTION,GLAcc.TABLECAPTION);
      IF GLEntry.FIND('-') THEN BEGIN
    ...
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckEntries>
    Code lines:
    ...
    FAReg.LOCKTABLE;
    GLSetup.GET;
    MaxPostingDate := 0D;
    
    SkipCheck := FALSE;
    OnBeforeCheckEntries(Rec,DATABASE::"G/L Entry",SkipCheck); <=====================
    IF NOT SkipCheck THEN BEGIN
      IF GLEntry.ISEMPTY THEN
        ERROR(CannotReverseDeletedErr,GLEntry.TABLECAPTION,GLAcc.TABLECAPTION);
      IF GLEntry.FIND('-') THEN BEGIN
    ...
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckEntries>
    Code lines:
    ...
    FAReg.LOCKTABLE;
    GLSetup.GET;
    MaxPostingDate := 0D;
    
    SkipCheck := FALSE;
    OnBeforeCheckEntries(Rec,DATABASE::"G/L Entry",SkipCheck); <=====================
    IF NOT SkipCheck THEN BEGIN
      IF GLEntry.ISEMPTY THEN
        ERROR(CannotReverseDeletedErr,GLEntry.TABLECAPTION,GLAcc.TABLECAPTION);
      IF GLEntry.FIND('-') THEN BEGIN
    ...
Table<Reversal Entry>.PROCEDURE<OnBeforeCheckGLAcc>
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckGLAcc>
    Code lines:
    OnBeforeCheckGLAcc(GLEntry); <=====================
    
    GLAcc.GET(GLEntry."G/L Account No.");
    CheckPostingDate(GLEntry."Posting Date",GLEntry.TABLECAPTION,GLEntry."Entry No.");
    GLAcc.TESTFIELD(Blocked,FALSE);
    GLEntry.TESTFIELD("Job No.",'');
    IF GLEntry.Reversed THEN
      AlreadyReversedEntry(GLEntry.TABLECAPTION,GLEntry."Entry No.");
    BalanceCheckAmount := BalanceCheckAmount + GLEntry.Amount;
    IF GLSetup."Additional Reporting Currency" <> '' THEN
    ...
Table<Reversal Entry>.PROCEDURE<OnBeforeCheckRegister>
  Raised in: Table<Reversal Entry>.PROCEDURE<CheckRegister>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckRegister(RegisterNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    GLReg.GET(RegisterNo);
    IF GLReg.Reversed THEN
      ERROR(Text010,GLReg.TABLECAPTION,GLReg."No.");
    IF GLReg."Journal Batch Name" = '' THEN
      TempReversalEntry.TestFieldError;
Table<Reversal Entry>.PROCEDURE<OnBeforeReverseEntries>
  Raised in: Table<Reversal Entry>.PROCEDURE<ReverseEntries>
    Code lines:
    IsHandled := FALSE;
    OnBeforeReverseEntries(Number,RevType,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    InsertReversalEntry(Number,RevType);
    TempReversalEntry.SETCURRENTKEY("Document No.","Posting Date","Entry Type","Entry No.");
    IF NOT HideDialog THEN
      PAGE.RUNMODAL(PAGE::"Reverse Entries",TempReversalEntry)
    ELSE BEGIN
    ...
Table<Data Migration Error>.PROCEDURE<OnAfterErrorInserted>
  Raised in: Table<Data Migration Error>.PROCEDURE<CreateEntryWithMessage>
    Code lines:
    ...
    VALIDATE("Source Staging Table Record ID",SourceStagingTableRecordId);
    VALIDATE("Error Message",ErrorMessage);
    VALIDATE("Scheduled For Retry",FALSE);
    INSERT(TRUE);
    
    OnAfterErrorInserted(MigrationType,ErrorMessage); <=====================
Table<Customer>.PROCEDURE<OnAfterCopyFromCustomerTemplate>
  Raised in: Table<Customer>.PROCEDURE<CopyFromCustomerTemplate>
    Code lines:
    ...
    VALIDATE("Payment Terms Code",CustomerTemplate."Payment Terms Code");
    VALIDATE("Payment Method Code",CustomerTemplate."Payment Method Code");
    "Prices Including VAT" := CustomerTemplate."Prices Including VAT";
    "Shipment Method Code" := CustomerTemplate."Shipment Method Code";
    
    OnAfterCopyFromCustomerTemplate(Rec,CustomerTemplate); <=====================
Table<Customer>.PROCEDURE<OnAfterHasAnyOpenOrPostedDocuments>
  Raised in: Table<Customer>.PROCEDURE<HasAnyOpenOrPostedDocuments>
    Code lines:
    ...
    CustLedgerEntry.SETRANGE("Customer No.","No.");
    IF NOT CustLedgerEntry.ISEMPTY THEN
      EXIT(TRUE);
    
    HasAnyDocs := FALSE;
    OnAfterHasAnyOpenOrPostedDocuments(Rec,HasAnyDocs); <=====================
    EXIT(HasAnyDocs);
Table<Customer>.PROCEDURE<OnAfterValidateCity>
  Raised in: Table<Customer>.Field<City>.<OnValidate>
    Code lines:
    PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
    
    OnAfterValidateCity(Rec,xRec); <=====================
Table<Customer>.PROCEDURE<OnAfterValidatePostCode>
  Raised in: Table<Customer>.Field<Post Code>.<OnValidate>
    Code lines:
    PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
    
    OnAfterValidatePostCode(Rec,xRec); <=====================
Table<Customer>.PROCEDURE<OnBeforeCheckBlockedCust>
  Raised in: Table<Customer>.PROCEDURE<IsOnBeforeCheckBlockedCustHandled>
    Code lines:
    OnBeforeCheckBlockedCust(Customer,Source,DocType,Shipment,Transaction,IsHandled) <=====================
Table<Customer>.PROCEDURE<OnBeforeIsContactUpdateNeeded>
  Raised in: Table<Customer>.PROCEDURE<IsContactUpdateNeeded>
    Code lines:
    ...
      UpdateNeeded := CustContUpdate.ContactNameIsBlank("No.");
    
    IF ForceUpdateContact THEN
      UpdateNeeded := TRUE;
    
    OnBeforeIsContactUpdateNeeded(Rec,xRec,UpdateNeeded); <=====================
    EXIT(UpdateNeeded);
Table<Customer>.PROCEDURE<OnBeforeValidateShortcutDimCode>
  Raised in: Table<Customer>.PROCEDURE<ValidateShortcutDimCode>
    Code lines:
    IsHandled := FALSE;
    OnBeforeValidateShortcutDimCode(Rec,FieldNumber,ShortcutDimCode,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
    DimMgt.SaveDefaultDim(DATABASE::Customer,"No.",FieldNumber,ShortcutDimCode);
    MODIFY;
Table<Customer>.PROCEDURE<OnBeforeVATRegistrationValidation>
  Raised in: Table<Customer>.PROCEDURE<VATRegistrationValidation>
    Code lines:
    IsHandled := FALSE;
    OnBeforeVATRegistrationValidation(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT VATRegistrationNoFormat.Test("VAT Registration No.","Country/Region Code","No.",DATABASE::Customer) THEN
      EXIT;
    VATRegistrationLogMgt.LogCustomer(Rec);
    IF ("Country/Region Code" = '') AND (VATRegistrationNoFormat."Country/Region Code" = '') THEN
      EXIT;
    ...
Table<Data Migrator Registration>.PROCEDURE<OnApplySelectedData>
  Raised in: 
    Code lines:
    OnApplySelectedData(Sender,DataMigrationEntity,Handled); <=====================
Table<Data Migrator Registration>.PROCEDURE<OnCustomerVendorPostingSetup>
Table<Data Migrator Registration>.PROCEDURE<OnDataImport>
  Raised in: 
    Code lines:
    OnDataImport(Sender,Handled); <=====================
Table<Data Migrator Registration>.PROCEDURE<OnDownloadTemplate>
  Raised in: 
    Code lines:
    OnDownloadTemplate(HideDialog); <=====================
    EXIT(ExportExcelTemplateByFileName(FileName,HideDialog));
Table<Data Migrator Registration>.PROCEDURE<OnEnableTogglingDataMigrationOverviewPage>
  Raised in: 
    Code lines:
    OnEnableTogglingDataMigrationOverviewPage(Sender,EnableTogglingOverviewPage); <=====================
Table<Data Migrator Registration>.PROCEDURE<OnGetInstructions>
  Raised in: 
    Code lines:
    OnGetInstructions(Sender,Instructions,Handled); <=====================
Table<Data Migrator Registration>.PROCEDURE<OnGLPostingSetup>
Table<Data Migrator Registration>.PROCEDURE<OnHasAdvancedApply>
Table<Data Migrator Registration>.PROCEDURE<OnHasErrors>
Table<Data Migrator Registration>.PROCEDURE<OnHasSettings>
Table<Data Migrator Registration>.PROCEDURE<OnHasTemplate>
Table<Data Migrator Registration>.PROCEDURE<OnHideSelected>
Table<Data Migrator Registration>.PROCEDURE<OnOpenAdvancedApply>
Table<Data Migrator Registration>.PROCEDURE<OnOpenSettings>
Table<Data Migrator Registration>.PROCEDURE<OnPostingGroupSetup>
Table<Data Migrator Registration>.PROCEDURE<OnRegisterDataMigrator>
  Raised in: 
    Code lines:
    OnRegisterDataMigrator(Sender); <=====================
Table<Data Migrator Registration>.PROCEDURE<OnSelectDataToApply>
  Raised in: 
    Code lines:
    OnSelectDataToApply(Sender,DataMigrationEntity,Handled); <=====================
Table<Data Migrator Registration>.PROCEDURE<OnShowBalance>
Table<Data Migrator Registration>.PROCEDURE<OnShowDuplicateContactsText>
Table<Data Migrator Registration>.PROCEDURE<OnShowErrors>
Table<Data Migrator Registration>.PROCEDURE<OnShowPostingOptions>
Table<Data Migrator Registration>.PROCEDURE<OnShowThatsItMessage>
  Raised in: 
    Code lines:
    OnShowThatsItMessage(Sender,Message); <=====================
Table<Data Migrator Registration>.PROCEDURE<OnValidateSettings>
Table<Assisted Company Setup Status>.PROCEDURE<OnEnabled>
  Raised in: Table<Assisted Company Setup Status>.Field<Enabled>.<OnValidate>
    Code lines:
    OnEnabled("Company Name",Enabled); <=====================
Table<Assisted Company Setup Status>.PROCEDURE<OnGetCompanySetupStatus>
  Raised in: Table<Assisted Company Setup Status>.PROCEDURE<GetCompanySetupStatus>
    Code lines:
    IF "Company Name" <> Name THEN
      IF NOT GET(Name) THEN
        EXIT(0);
    OnGetCompanySetupStatus("Company Name",SetupStatus); <=====================
Table<Assisted Company Setup Status>.PROCEDURE<OnSetupStatusDrillDown>
  Raised in: Table<Assisted Company Setup Status>.PROCEDURE<DrillDownSetupStatus>
    Code lines:
    IF GET(Name) THEN
      OnSetupStatusDrillDown("Company Name"); <=====================
Table<Assisted Setup>.PROCEDURE<OnAssistedSetupCompleted>
  Raised in: Table<Assisted Setup>.PROCEDURE<SetStatus>
    Code lines:
    ...
    
    IF
       (AssistedSetup.Status = AssistedSetup.Status::Completed) AND
       (AssistedSetup."Assisted Setup Page ID" <> 0)
    THEN
      OnAssistedSetupCompleted(EnteryId); <=====================
Table<Assisted Setup>.PROCEDURE<OnBeforeUpdateAssistedSetupStatus>
  Raised in: Table<Assisted Setup>.PROCEDURE<Initialize>
    Code lines:
    ...
    AddSetupAssistant(EntryNumber,SetupConsolidationReportingTxt,SortingOrder,TRUE,GroupId,FALSE,"Item Type"::"Setup and Help");
    AddSetupAssistantResources(EntryNumber,'','',0,EntryNumber,'');
    SortingOrder += 1;
    
    // Update Statuses and Visibilities
    OnBeforeUpdateAssistedSetupStatus(Rec,SortingOrder,GroupId); <=====================
    
    UpdateStatus;
Table<Assisted Setup>.PROCEDURE<VerifyYodleeIsInstalled>
  Raised in: Table<Assisted Setup>.PROCEDURE<Initialize>
    Code lines:
    ...
      GroupId,FALSE,"Item Type"::"Setup and Help");
    AddSetupAssistantResources(LastId,VideoUrlAdditionalReourcesTxt,'',0,0,'');
    AddAssistedSetupVideoCategory(LastId,ProductVideoCategory.Category::"Getting Started",'');
    LastId += 1;
    
    VerifyYodleeIsInstalled(IsYodleeInstalled); <=====================
    IF IsYodleeInstalled THEN BEGIN
      AddSetupAssistant(LastId,VideoBankintegrationNameTxt,SortingOption::SetUpBankIntegration,TRUE,GroupId,FALSE,
        "Item Type"::"Setup and Help");
      AddSetupAssistantResources(LastId,VideoBankintegrationTxt,HelpBankintegrationTxt,0,0,'');
    ...
Table<Aggregated Assisted Setup>.PROCEDURE<OnRegisterAssistedSetup>
  Raised in: Page<Assisted Setup>.<OnOpenPage>
    Code lines:
    OnRegisterAssistedSetup(Rec); <=====================
    SETCURRENTKEY("External Assisted Setup",Order);
    ASCENDING(TRUE);
Table<Aggregated Assisted Setup>.PROCEDURE<OnUpdateAssistedSetupStatus>
  Raised in: Table<Aggregated Assisted Setup>.PROCEDURE<RunAssistedSetup>
    Code lines:
    ...
            EXIT;
      END;
    
    COMMIT;
    PAGE.RUNMODAL("Assisted Setup Page ID");
    OnUpdateAssistedSetupStatus(Rec); <=====================
Table<Business Setup>.PROCEDURE<OnOpenBusinessSetupPage>
  Raised in: Page<Business Setup>.<Action>.<OnAction>
    Code lines:
    OnOpenBusinessSetupPage(Rec,Handled); <=====================
    IF (NOT Handled) AND ("Setup Page ID" <> 0) THEN
      PAGE.RUN("Setup Page ID");
Table<Business Setup>.PROCEDURE<OnRegisterBusinessSetup>
  Raised in: Page<Business Setup>.<OnOpenPage>
    Code lines:
    OnRegisterBusinessSetup(Rec); <=====================
Table<Cust. Invoice Disc.>.PROCEDURE<OnBeforeGetRec>
  Raised in: Table<Cust. Invoice Disc.>.PROCEDURE<GetRec>
    Code lines:
    OnBeforeGetRec(Rec,NewCode,CurrencyCode,CurrencyDate,BaseAmount); <=====================
    
    SETRANGE(Code,NewCode);
    SETRANGE("Currency Code",CurrencyCode);
    SETRANGE("Minimum Amount",0,BaseAmount);
    IF NOT FIND('+') THEN
      IF CurrencyCode <> '' THEN BEGIN
        CurrencyFactor := CurrExchRate.ExchangeRate(CurrencyDate,CurrencyCode);
        SETRANGE("Currency Code",'');
        SETRANGE(
    ...
Table<Res. Ledger Entry>.PROCEDURE<OnAfterCopyFromResJnlLine>
  Raised in: Table<Res. Ledger Entry>.PROCEDURE<CopyFromResJnlLine>
    Code lines:
    ...
    "No. Series" := ResJnlLine."Posting No. Series";
    "Source Type" := ResJnlLine."Source Type";
    "Source No." := ResJnlLine."Source No.";
    "Qty. per Unit of Measure" := ResJnlLine."Qty. per Unit of Measure";
    
    OnAfterCopyFromResJnlLine(Rec,ResJnlLine); <=====================
Table<Res. Journal Line>.PROCEDURE<OnAfterCopyResJnlLineFromJobJnlLine>
  Raised in: Table<Res. Journal Line>.PROCEDURE<CopyFromJobJnlLine>
    Code lines:
    ...
    "Total Price" := JobJnlLine."Line Amount (LCY)";
    "Time Sheet No." := JobJnlLine."Time Sheet No.";
    "Time Sheet Line No." := JobJnlLine."Time Sheet Line No.";
    "Time Sheet Date" := JobJnlLine."Time Sheet Date";
    
    OnAfterCopyResJnlLineFromJobJnlLine(Rec,JobJnlLine); <=====================
Table<Res. Journal Line>.PROCEDURE<OnAfterCopyResJnlLineFromSalesHeader>
  Raised in: Table<Res. Journal Line>.PROCEDURE<CopyFromSalesHeader>
    Code lines:
    "Posting Date" := SalesHeader."Posting Date";
    "Document Date" := SalesHeader."Document Date";
    "Reason Code" := SalesHeader."Reason Code";
    
    OnAfterCopyResJnlLineFromSalesHeader(SalesHeader,Rec); <=====================
Table<Res. Journal Line>.PROCEDURE<OnAfterCopyResJnlLineFromSalesLine>
  Raised in: Table<Res. Journal Line>.PROCEDURE<CopyFromSalesLine>
    Code lines:
    ...
    "Unit Cost" := SalesLine."Unit Cost (LCY)";
    "Total Cost" := SalesLine."Unit Cost (LCY)" * Quantity;
    "Unit Price" := SalesLine."Unit Price";
    "Total Price" := -SalesLine.Amount;
    
    OnAfterCopyResJnlLineFromSalesLine(SalesLine,Rec); <=====================
Table<Res. Journal Line>.PROCEDURE<OnAfterCopyResJnlLineFromServHeader>
  Raised in: Table<Res. Journal Line>.PROCEDURE<CopyFromServHeader>
    Code lines:
    "Document Date" := ServiceHeader."Document Date";
    "Reason Code" := ServiceHeader."Reason Code";
    "Order No." := ServiceHeader."No.";
    
    OnAfterCopyResJnlLineFromServHeader(ServiceHeader,Rec); <=====================
Table<Res. Journal Line>.PROCEDURE<OnAfterCopyResJnlLineFromServLine>
  Raised in: Table<Res. Journal Line>.PROCEDURE<CopyFromServLine>
    Code lines:
    ...
    "Time Sheet No." := ServiceLine."Time Sheet No.";
    "Time Sheet Line No." := ServiceLine."Time Sheet Line No.";
    "Time Sheet Date" := ServiceLine."Time Sheet Date";
    "Job No." := ServiceLine."Job No.";
    
    OnAfterCopyResJnlLineFromServLine(ServiceLine,Rec); <=====================
Table<Res. Journal Line>.PROCEDURE<OnAfterCopyResJnlLineFromServShptHeader>
  Raised in: Table<Res. Journal Line>.PROCEDURE<CopyFromServShptHeader>
    Code lines:
    "Document Date" := ServShptHeader."Document Date";
    "Reason Code" := ServShptHeader."Reason Code";
    "Source Type" := "Source Type"::Customer;
    "Source No." := ServShptHeader."Customer No.";
    
    OnAfterCopyResJnlLineFromServShptHeader(ServShptHeader,Rec); <=====================
Table<Res. Journal Line>.PROCEDURE<OnAfterCopyResJnlLineFromServShptLine>
  Raised in: Table<Res. Journal Line>.PROCEDURE<CopyFromServShptLine>
    Code lines:
    ...
    "Dimension Set ID" := ServShptLine."Dimension Set ID";
    "Gen. Bus. Posting Group" := ServShptLine."Gen. Bus. Posting Group";
    "Gen. Prod. Posting Group" := ServShptLine."Gen. Prod. Posting Group";
    "Entry Type" := "Entry Type"::Usage;
    
    OnAfterCopyResJnlLineFromServShptLine(ServShptLine,Rec); <=====================
Table<Res. Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Res. Journal Line>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    TableID[3] := Type3;
    No[3] := No3;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
Table<Cust. Ledger Entry>.PROCEDURE<OnAfterCopyCustLedgerEntryFromCVLedgEntryBuffer>
  Raised in: Table<Cust. Ledger Entry>.PROCEDURE<CopyFromCVLedgEntryBuffer>
    Code lines:
    ...
    "Remaining Amount" := CVLedgerEntryBuffer."Remaining Amount";
    "Remaining Amt. (LCY)" := CVLedgerEntryBuffer."Remaining Amt. (LCY)";
    "Original Amount" := CVLedgerEntryBuffer."Original Amount";
    "Original Amt. (LCY)" := CVLedgerEntryBuffer."Original Amt. (LCY)";
    
    OnAfterCopyCustLedgerEntryFromCVLedgEntryBuffer(Rec,CVLedgerEntryBuffer); <=====================
Table<Cust. Ledger Entry>.PROCEDURE<OnAfterCopyCustLedgerEntryFromGenJnlLine>
  Raised in: Table<Cust. Ledger Entry>.PROCEDURE<CopyFromGenJnlLine>
    Code lines:
    ...
    "Message to Recipient" := GenJnlLine."Message to Recipient";
    "Applies-to Ext. Doc. No." := GenJnlLine."Applies-to Ext. Doc. No.";
    "Payment Method Code" := GenJnlLine."Payment Method Code";
    "Exported to Payment File" := GenJnlLine."Exported to Payment File";
    
    OnAfterCopyCustLedgerEntryFromGenJnlLine(Rec,GenJnlLine); <=====================
Table<Cust. Ledger Entry>.PROCEDURE<OnAfterShowDoc>
  Raised in: Table<Cust. Ledger Entry>.PROCEDURE<ShowDoc>
    Code lines:
    ...
            EXIT(TRUE);
          END;
        END;
    END;
    
    OnAfterShowDoc(Rec); <=====================
Table<Cust. Ledger Entry>.PROCEDURE<OnBeforeDrillDownEntries>
  Raised in: Table<Cust. Ledger Entry>.PROCEDURE<DrillDownOnEntries>
    Code lines:
    ...
    DtldCustLedgEntry.COPYFILTER("Initial Entry Global Dim. 1",CustLedgEntry."Global Dimension 1 Code");
    DtldCustLedgEntry.COPYFILTER("Initial Entry Global Dim. 2",CustLedgEntry."Global Dimension 2 Code");
    DtldCustLedgEntry.COPYFILTER("Initial Entry Due Date",CustLedgEntry."Due Date");
    CustLedgEntry.SETCURRENTKEY("Customer No.","Posting Date");
    CustLedgEntry.SETRANGE(Open,TRUE);
    OnBeforeDrillDownEntries(CustLedgEntry,DtldCustLedgEntry); <=====================
    PAGE.RUN(0,CustLedgEntry);
Table<Cust. Ledger Entry>.PROCEDURE<OnBeforeDrillDownOnOverdueEntries>
  Raised in: Table<Cust. Ledger Entry>.PROCEDURE<DrillDownOnOverdueEntries>
    Code lines:
    ...
    DtldCustLedgEntry.COPYFILTER("Initial Entry Global Dim. 2",CustLedgEntry."Global Dimension 2 Code");
    CustLedgEntry.SETCURRENTKEY("Customer No.","Posting Date");
    CustLedgEntry.SETFILTER("Date Filter",'..%1',WORKDATE);
    CustLedgEntry.SETFILTER("Due Date",'<%1',WORKDATE);
    CustLedgEntry.SETFILTER("Remaining Amount",'<>%1',0);
    OnBeforeDrillDownOnOverdueEntries(CustLedgEntry,DtldCustLedgEntry); <=====================
    PAGE.RUN(0,CustLedgEntry);
Table<Job Journal Line>.PROCEDURE<OnAfterAssignGLAccountUoM>
  Raised in: Table<Job Journal Line>.Field<Unit of Measure Code>.<OnValidate>
    Code lines:
    ...
          OnAfterAssignResourceUoM(Rec,Res);
        END;
      Type::"G/L Account":
        BEGIN
          "Qty. per Unit of Measure" := 1;
          OnAfterAssignGLAccountUoM(Rec); <=====================
        END;
    END;
    VALIDATE(Quantity);
Table<Job Journal Line>.PROCEDURE<OnAfterAssignGLAccountValues>
  Raised in: Table<Job Journal Line>.PROCEDURE<CopyFromGLAccount>
    Code lines:
    ...
    "Unit of Measure Code" := '';
    "Direct Unit Cost (LCY)" := 0;
    "Unit Cost (LCY)" := 0;
    "Unit Price" := 0;
    
    OnAfterAssignGLAccountValues(Rec,GLAcc); <=====================
Table<Job Journal Line>.PROCEDURE<OnAfterAssignItemUoM>
  Raised in: Table<Job Journal Line>.Field<Unit of Measure Code>.<OnValidate>
    Code lines:
    ...
    CASE Type OF
      Type::Item:
        BEGIN
          Item.GET("No.");
          "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
          OnAfterAssignItemUoM(Rec,Item); <=====================
        END;
      Type::Resource:
        BEGIN
          IF CurrFieldNo <> FIELDNO("Work Type Code") THEN
    ...
Table<Job Journal Line>.PROCEDURE<OnAfterAssignItemValues>
  Raised in: Table<Job Journal Line>.PROCEDURE<CopyFromItem>
    Code lines:
    ...
      GetItemTranslation;
    "Posting Group" := Item."Inventory Posting Group";
    "Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";
    VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
    
    OnAfterAssignItemValues(Rec,Item); <=====================
Table<Job Journal Line>.PROCEDURE<OnAfterAssignResourceUoM>
  Raised in: Table<Job Journal Line>.Field<Unit of Measure Code>.<OnValidate>
    Code lines:
    ...
            "Unit of Measure Code" := Resource."Base Unit of Measure";
          END;
          ResUnitofMeasure.GET("No.","Unit of Measure Code");
          "Qty. per Unit of Measure" := ResUnitofMeasure."Qty. per Unit of Measure";
          "Quantity (Base)" := Quantity * "Qty. per Unit of Measure";
          OnAfterAssignResourceUoM(Rec,Res); <=====================
        END;
      Type::"G/L Account":
        BEGIN
          "Qty. per Unit of Measure" := 1;
    ...
Table<Job Journal Line>.PROCEDURE<OnAfterAssignResourceValues>
  Raised in: Table<Job Journal Line>.PROCEDURE<CopyFromResource>
    Code lines:
    ...
    "Gen. Prod. Posting Group" := Resource."Gen. Prod. Posting Group";
    VALIDATE("Unit of Measure Code",Resource."Base Unit of Measure");
    IF "Time Sheet No." = '' THEN
      Resource.TESTFIELD("Use Time Sheet",FALSE);
    
    OnAfterAssignResourceValues(Rec,Resource); <=====================
Table<Job Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Job Journal Line>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    TableID[3] := Type3;
    No[3] := No3;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
Table<Job Journal Line>.PROCEDURE<OnAfterDeleteAmounts>
  Raised in: Table<Job Journal Line>.PROCEDURE<DeleteAmounts>
    Code lines:
    ...
    "Line Discount Amount (LCY)" := 0;
    "Line Discount Amount" := 0;
    "Remaining Qty." := 0;
    "Remaining Qty. (Base)" := 0;
    
    OnAfterDeleteAmounts(Rec); <=====================
Table<Job Journal Line>.PROCEDURE<OnAfterResourceFindCost>
  Raised in: Table<Job Journal Line>.PROCEDURE<UpdateUnitCost>
    Code lines:
    ...
        IF RetrieveCostPrice THEN BEGIN
          ResCost.INIT;
          ResCost.Code := "No.";
          ResCost."Work Type Code" := "Work Type Code";
          CODEUNIT.RUN(CODEUNIT::"Resource-Find Cost",ResCost);
          OnAfterResourceFindCost(Rec,ResCost); <=====================
          "Direct Unit Cost (LCY)" := ROUND(ResCost."Direct Unit Cost" * "Qty. per Unit of Measure",UnitAmountRoundingPrecision);
          RetrievedCost := ResCost."Unit Cost" * "Qty. per Unit of Measure";
          "Unit Cost" := ROUND(
              CurrExchRate.ExchangeAmtLCYToFCY(
    ...
Table<Job Journal Line>.PROCEDURE<OnAfterSetUpNewLine>
  Raised in: Table<Job Journal Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    ...
    "Entry Type" := "Entry Type"::Usage;
    "Source Code" := JobJnlTemplate."Source Code";
    "Reason Code" := JobJnlBatch."Reason Code";
    "Posting No. Series" := JobJnlBatch."Posting No. Series";
    
    OnAfterSetUpNewLine(Rec,LastJobJnlLine,JobJnlTemplate,JobJnlBatch); <=====================
Table<Job Journal Line>.PROCEDURE<OnAfterUpdateAllAmounts>
  Raised in: Table<Job Journal Line>.PROCEDURE<UpdateAllAmounts>
    Code lines:
    ...
    HandleCostFactor;
    UpdateUnitPrice;
    UpdateTotalPrice;
    UpdateAmountsAndDiscounts;
    
    OnAfterUpdateAllAmounts(Rec,xRec); <=====================
Table<Job Journal Line>.PROCEDURE<OnAfterUpdateAmountsAndDiscounts>
  Raised in: Table<Job Journal Line>.PROCEDURE<UpdateAmountsAndDiscounts>
    Code lines:
    ...
      "Line Discount Amount" := 0;
      "Line Amount (LCY)" := 0;
      "Line Discount Amount (LCY)" := 0;
    END;
    
    OnAfterUpdateAmountsAndDiscounts(Rec); <=====================
Table<Job Journal Line>.PROCEDURE<OnAfterUpdateDimensions>
  Raised in: Table<Job Journal Line>.PROCEDURE<UpdateDimensions>
    Code lines:
    ...
      "Dimension Set ID" :=
        DimMgt.GetCombinedDimensionSetID(
          DimensionSetIDArr,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;
    
    OnAfterUpdateDimensions(Rec,DimensionSetIDArr); <=====================
Table<Job Journal Line>.PROCEDURE<OnAfterUpdateTotalCost>
  Raised in: Table<Job Journal Line>.PROCEDURE<UpdateTotalCost>
    Code lines:
    "Total Cost" := ROUND("Unit Cost" * Quantity,AmountRoundingPrecisionFCY);
    "Total Cost (LCY)" := ROUND(
        CurrExchRate.ExchangeAmtFCYToLCY(
          "Posting Date","Currency Code","Total Cost","Currency Factor"),AmountRoundingPrecision);
    
    OnAfterUpdateTotalCost(Rec); <=====================
Table<Job Journal Line>.PROCEDURE<OnAfterUpdateTotalPrice>
  Raised in: Table<Job Journal Line>.PROCEDURE<UpdateTotalPrice>
    Code lines:
    "Total Price" := ROUND(Quantity * "Unit Price",AmountRoundingPrecisionFCY);
    "Total Price (LCY)" := ROUND(
        CurrExchRate.ExchangeAmtFCYToLCY(
          "Posting Date","Currency Code","Total Price","Currency Factor"),AmountRoundingPrecision);
    
    OnAfterUpdateTotalPrice(Rec); <=====================
Table<Job Journal Line>.PROCEDURE<OnAfterUpdateUnitCost>
  Raised in: Table<Job Journal Line>.PROCEDURE<UpdateUnitCost>
    Code lines:
    ...
            CurrExchRate.ExchangeAmtFCYToLCY(
              "Posting Date","Currency Code",
              "Unit Cost","Currency Factor"),
            UnitAmountRoundingPrecision);
    
    OnAfterUpdateUnitCost(Rec,UnitAmountRoundingPrecision,CurrFieldNo); <=====================
Table<Job Journal Line>.PROCEDURE<OnBeforeCheckItemAvailable>
  Raised in: Table<Job Journal Line>.PROCEDURE<CheckItemAvailable>
    Code lines:
    OnBeforeCheckItemAvailable(Rec,ItemJnlLine); <=====================
    
    IF (CurrFieldNo <> 0) AND (Type = Type::Item) AND (Quantity > 0) AND NOT CheckedAvailability THEN BEGIN
      ItemJnlLine."Item No." := "No.";
      ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::"Negative Adjmt.";
      ItemJnlLine."Location Code" := "Location Code";
      ItemJnlLine."Variant Code" := "Variant Code";
      ItemJnlLine."Bin Code" := "Bin Code";
      ItemJnlLine."Unit of Measure Code" := "Unit of Measure Code";
      ItemJnlLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
    ...
Table<Job Journal Line>.PROCEDURE<OnBeforeEmptyLine>
  Raised in: Table<Job Journal Line>.PROCEDURE<EmptyLine>
    Code lines:
    LineIsEmpty := ("Job No." = '') AND ("No." = '') AND (Quantity = 0);
    OnBeforeEmptyLine(Rec,LineIsEmpty); <=====================
    EXIT(LineIsEmpty);
Table<Job Journal Line>.PROCEDURE<OnBeforeRetrieveCostPrice>
  Raised in: Table<Job Journal Line>.PROCEDURE<RetrieveCostPrice>
    Code lines:
    OnBeforeRetrieveCostPrice(Rec,xRec,ShouldRetrieveCostPrice); <=====================
    IF ShouldRetrieveCostPrice THEN
      EXIT(TRUE);
    
    CASE Type OF
      Type::Item:
        IF ("No." <> xRec."No.") OR
           ("Location Code" <> xRec."Location Code") OR
           ("Variant Code" <> xRec."Variant Code") OR
           (Quantity <> xRec.Quantity) OR
    ...
Table<Job Journal Line>.PROCEDURE<OnBeforeSetUpNewLine>
  Raised in: Table<Job Journal Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforeSetUpNewLine(Rec,xRec,LastJobJnlLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    JobJnlTemplate.GET("Journal Template Name");
    JobJnlBatch.GET("Journal Template Name","Journal Batch Name");
    JobJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
    JobJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
    IF JobJnlLine.FINDFIRST THEN BEGIN
    ...
Table<Job Journal Line>.PROCEDURE<OnBeforeUpdateAllAmounts>
  Raised in: Table<Job Journal Line>.PROCEDURE<UpdateAllAmounts>
    Code lines:
    OnBeforeUpdateAllAmounts(Rec,xRec); <=====================
    InitRoundingPrecisions;
    
    UpdateUnitCost;
    UpdateTotalCost;
    FindPriceAndDiscount(Rec,CurrFieldNo);
    HandleCostFactor;
    UpdateUnitPrice;
    UpdateTotalPrice;
    UpdateAmountsAndDiscounts;
    ...
Table<Job Journal Line>.PROCEDURE<OnBeforeValidateWorkTypeCodeQty>
  Raised in: Table<Job Journal Line>.Field<Work Type Code>.<OnValidate>
    Code lines:
    ...
      END ELSE BEGIN
        Res.GET("No.");
        "Unit of Measure Code" := Res."Base Unit of Measure";
        VALIDATE("Unit of Measure Code");
      END;
    OnBeforeValidateWorkTypeCodeQty(Rec,xRec,Res,WorkType); <=====================
    VALIDATE(Quantity);
Table<Job Journal Line>.PROCEDURE<OnValidateJobNoOnBeforeCheckJob>
  Raised in: Table<Job Journal Line>.Field<Job No.>.<OnValidate>
    Code lines:
    ...
    END;
    
    GetJob;
    Job.TestBlocked;
    IsHandled := FALSE;
    OnValidateJobNoOnBeforeCheckJob(Rec,xRec,Cust,IsHandled); <=====================
    IF NOT IsHandled THEN BEGIN
      Job.TESTFIELD("Bill-to Customer No.");
      Cust.GET(Job."Bill-to Customer No.");
      VALIDATE("Job Task No.",'');
    ...
Table<Gen. Jnl. Allocation>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Gen. Jnl. Allocation>.PROCEDURE<CreateDim>
    Code lines:
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(Rec,CurrFieldNo,TableID,No,'',"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
Table<Post Code>.PROCEDURE<OnBeforeCheckClearPostCodeCityCounty>
  Raised in: Table<Post Code>.PROCEDURE<CheckClearPostCodeCityCounty>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckClearPostCodeCityCounty(CityTxt,PostCode,CountyTxt,CountryCode,xCountryCode,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF (xCountryCode = CountryCode) OR (xCountryCode = '') THEN
      EXIT;
    
    PostCode := '';
    CityTxt := '';
Table<Post Code>.PROCEDURE<OnBeforeLookupPostCode>
  Raised in: Table<Post Code>.PROCEDURE<LookupPostCode>
    Code lines:
    IsHandled := FALSE;
    OnBeforeLookupPostCode(CityTxt,PostCode,CountyTxt,CountryCode,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF CountryCode <> '' THEN BEGIN
      PostCodeRec.SETRANGE("Country/Region Code",CountryCode);
      PostCodes.SETTABLEVIEW(PostCodeRec);
    END;
    
    ...
Table<Post Code>.PROCEDURE<OnBeforeValidateCity>
  Raised in: Table<Post Code>.PROCEDURE<ValidateCity>
    Code lines:
    IF NOT GUIALLOWED THEN
      EXIT;
    
    IsHandled := FALSE;
    OnBeforeValidateCity(CityTxt,PostCode,CountyTxt,CountryCode,UseDialog,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF CityTxt <> '' THEN BEGIN
      SearchCity := CityTxt;
    ...
Table<Post Code>.PROCEDURE<OnBeforeValidatePostCode>
  Raised in: Table<Post Code>.PROCEDURE<ValidatePostCode>
    Code lines:
    IsHandled := FALSE;
    OnBeforeValidatePostCode(CityTxt,PostCode,CountyTxt,CountryCode,UseDialog,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF PostCode <> '' THEN BEGIN
      IF STRPOS(PostCode,'*') = STRLEN(PostCode) THEN
        PostCodeRec.SETFILTER(Code,PostCode)
      ELSE
        PostCodeRec.SETRANGE(Code,PostCode);
    ...
Table<Vendor>.PROCEDURE<OnAfterValidateCity>
  Raised in: Table<Vendor>.Field<City>.<OnValidate>
    Code lines:
    PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
    
    OnAfterValidateCity(Rec,xRec); <=====================
Table<Vendor>.PROCEDURE<OnAfterValidatePostCode>
  Raised in: Table<Vendor>.Field<Post Code>.<OnValidate>
    Code lines:
    PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
    
    OnAfterValidatePostCode(Rec,xRec); <=====================
Table<Vendor>.PROCEDURE<OnBeforeCheckBlockedVend>
  Raised in: Table<Vendor>.PROCEDURE<IsOnBeforeCheckBlockedVendHandled>
    Code lines:
    OnBeforeCheckBlockedVend(Vendor,Source,DocType,Transaction,IsHandled) <=====================
Table<Vendor>.PROCEDURE<OnBeforeIsContactUpdateNeeded>
  Raised in: Table<Vendor>.PROCEDURE<IsContactUpdateNeeded>
    Code lines:
    ...
      ("Home Page" <> xRec."Home Page");
    
    IF NOT UpdateNeeded AND NOT ISTEMPORARY THEN
      UpdateNeeded := VendContUpdate.ContactNameIsBlank("No.");
    
    OnBeforeIsContactUpdateNeeded(Rec,xRec,UpdateNeeded); <=====================
    EXIT(UpdateNeeded);
Table<Vendor>.PROCEDURE<OnBeforeValidateShortcutDimCode>
  Raised in: Table<Vendor>.PROCEDURE<ValidateShortcutDimCode>
    Code lines:
    IsHandled := FALSE;
    OnBeforeValidateShortcutDimCode(Rec,FieldNumber,ShortcutDimCode,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
    DimMgt.SaveDefaultDim(DATABASE::Vendor,"No.",FieldNumber,ShortcutDimCode);
    MODIFY;
Table<Vendor>.PROCEDURE<OnBeforeVATRegistrationValidation>
  Raised in: Table<Vendor>.PROCEDURE<VATRegistrationValidation>
    Code lines:
    IsHandled := FALSE;
    OnBeforeVATRegistrationValidation(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT VATRegistrationNoFormat.Test("VAT Registration No.","Country/Region Code","No.",DATABASE::Vendor) THEN
      EXIT;
    
    VATRegistrationLogMgt.LogVendor(Rec);
    
    ...
Table<Gen. Journal Batch>.PROCEDURE<OnCheckGenJournalLineExportRestrictions>
  Raised in: Codeunit<Payment Export Gen. Jnl Check>.PROCEDURE<CheckGenJournalBatch>
    Code lines:
    TempGenJournalBatch := GenJournalBatch;
    TempGenJournalBatch.INSERT;
    
    GenJournalBatch.OnCheckGenJournalLineExportRestrictions; <=====================
    
    IF NOT GenJournalBatch."Allow Payment Export" THEN
      AddBatchEmptyError(GenJournalLine,GenJournalBatch.FIELDCAPTION("Allow Payment Export"),'');
    
    IF GenJournalBatch."Bal. Account Type" <> GenJournalBatch."Bal. Account Type"::"Bank Account" THEN
      AddBatchEmptyError(GenJournalLine,GenJournalBatch.FIELDCAPTION("Bal. Account Type"),GenJournalBatch."Bal. Account Type");
    ...
  Raised in: Codeunit<SEPA CT-Check Line>.PROCEDURE<CheckGenJnlLine>
    Code lines:
    GLSetup.GET;
    IF GenJournalBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name") THEN
      GenJournalBatch.OnCheckGenJournalLineExportRestrictions; <=====================
    WITH GenJnlLine DO BEGIN
      IF "Bal. Account Type" <> "Bal. Account Type"::"Bank Account" THEN
        InsertPaymentFileError(MustBeBankAccErr);
    
      IF "Bal. Account No." = '' THEN
        AddFieldEmptyError(GenJnlLine,TABLECAPTION,FIELDCAPTION("Bal. Account No."),'');
    
    ...
Table<Gen. Journal Batch>.PROCEDURE<OnGeneralJournalBatchBalanced>
  Raised in: Table<Gen. Journal Batch>.PROCEDURE<CheckBalance>
    Code lines:
    Balance := GetBalance;
    
    IF Balance = 0 THEN
      OnGeneralJournalBatchBalanced <=====================
    ELSE
      OnGeneralJournalBatchNotBalanced;
Table<Gen. Journal Batch>.PROCEDURE<OnGeneralJournalBatchNotBalanced>
  Raised in: Table<Gen. Journal Batch>.PROCEDURE<CheckBalance>
    Code lines:
    Balance := GetBalance;
    
    IF Balance = 0 THEN
      OnGeneralJournalBatchBalanced
    ELSE
      OnGeneralJournalBatchNotBalanced; <=====================
Table<Gen. Journal Batch>.PROCEDURE<OnMoveGenJournalBatch>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<ProcessLines>
    Code lines:
    ...
      CLEAR(GenJnlCheckLine);
      CLEAR(GenJnlPostLine);
      CLEARMARKS;
    END;
    UpdateAnalysisView.UpdateAll(0,TRUE);
    GenJnlBatch.OnMoveGenJournalBatch(GLReg.RECORDID); <=====================
    IF NOT SuppressCommit THEN
      COMMIT;
    
    IF SkippedLine AND GUIALLOWED THEN
    ...
Table<Requisition Line>.PROCEDURE<OnAfterCopyFromItem>
  Raised in: Table<Requisition Line>.PROCEDURE<CopyFromItem>
    Code lines:
    ...
    UpdateReplenishmentSystem;
    "Accept Action Message" := TRUE;
    GetDirectCost(FIELDNO("No."));
    SetFromBinCode;
    
    OnAfterCopyFromItem(Rec,Item); <=====================
Table<Requisition Line>.PROCEDURE<OnAfterCreateDim>
  Raised in: Table<Requisition Line>.PROCEDURE<CreateDim>
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
Table<Requisition Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Requisition Line>.PROCEDURE<CreateDim>
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
Table<Requisition Line>.PROCEDURE<OnAfterDeleteRelations>
  Raised in: Table<Requisition Line>.PROCEDURE<DeleteRelations>
    Code lines:
    ...
    UntrackedPlanningElement.SETRANGE("Worksheet Batch Name","Journal Batch Name");
    UntrackedPlanningElement.SETRANGE("Worksheet Line No.","Line No.");
    IF NOT UntrackedPlanningElement.ISEMPTY THEN
      UntrackedPlanningElement.DELETEALL;
    
    OnAfterDeleteRelations(Rec); <=====================
Table<Requisition Line>.PROCEDURE<OnAfterFilterLinesWithItemToPlan>
  Raised in: Table<Requisition Line>.PROCEDURE<FilterLinesWithItemToPlan>
    Code lines:
    ...
    Item.COPYFILTER("Global Dimension 1 Filter","Shortcut Dimension 1 Code");
    Item.COPYFILTER("Global Dimension 2 Filter","Shortcut Dimension 2 Code");
    SETRANGE("Planning Line Origin","Planning Line Origin"::" ");
    SETFILTER("Quantity (Base)",'<>0');
    
    OnAfterFilterLinesWithItemToPlan(Rec,Item); <=====================
Table<Requisition Line>.PROCEDURE<OnAfterGetDirectCost>
  Raised in: Table<Requisition Line>.PROCEDURE<GetDirectCost>
    Code lines:
    ...
    IF ("Replenishment System" = "Replenishment System"::Purchase) AND NOT Subcontracting THEN BEGIN
      PurchPriceCalcMgt.FindReqLineDisc(Rec);
      PurchPriceCalcMgt.FindReqLinePrice(Rec,CalledByFieldNo);
    END;
    
    OnAfterGetDirectCost(Rec,CalledByFieldNo); <=====================
Table<Requisition Line>.PROCEDURE<OnAfterSetReplenishmentSystemFromAssembly>
  Raised in: Table<Requisition Line>.PROCEDURE<SetReplenishmentSystemFromAssembly>
    Code lines:
    ...
    VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
    
    IF ("Planning Line Origin" = "Planning Line Origin"::"Order Planning") AND ValidateFields THEN
      PlanningLineMgt.Calculate(Rec,1,TRUE,TRUE,0);
    
    OnAfterSetReplenishmentSystemFromAssembly(Rec,Item); <=====================
Table<Requisition Line>.PROCEDURE<OnAfterSetReplenishmentSystemFromProdOrder>
  Raised in: Table<Requisition Line>.PROCEDURE<SetReplenishmentSystemFromProdOrder>
    Code lines:
    ...
    VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
    
    IF ("Planning Line Origin" = "Planning Line Origin"::"Order Planning") AND ValidateFields THEN
      PlanningLineMgt.Calculate(Rec,1,TRUE,TRUE,0);
    
    OnAfterSetReplenishmentSystemFromProdOrder(Rec,Item); <=====================
Table<Requisition Line>.PROCEDURE<OnAfterSetReplenishmentSystemFromPurchase>
  Raised in: Table<Requisition Line>.PROCEDURE<SetReplenishmentSystemFromPurchase>
    Code lines:
    ...
    IF StockkeepingUnit."Vendor No." = '' THEN
      VALIDATE("Vendor No.")
    ELSE
      VALIDATE("Vendor No.",StockkeepingUnit."Vendor No.");
    
    OnAfterSetReplenishmentSystemFromPurchase(Rec,Item,StockkeepingUnit); <=====================
Table<Requisition Line>.PROCEDURE<OnAfterSetReplenishmentSystemFromTransfer>
  Raised in: Table<Requisition Line>.PROCEDURE<SetReplenishmentSystemFromTransfer>
    Code lines:
    ...
    VALIDATE("Production BOM No.",'');
    VALIDATE("Routing No.",'');
    VALIDATE("Transfer-from Code",StockkeepingUnit."Transfer-from Code");
    VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
    
    OnAfterSetReplenishmentSystemFromTransfer(Rec,Item,StockkeepingUnit); <=====================
Table<Requisition Line>.PROCEDURE<OnAfterTransferFromAsmHeader>
  Raised in: Table<Requisition Line>.PROCEDURE<TransferFromAsmHeader>
    Code lines:
    ...
    "Ref. Order Type" := "Ref. Order Type"::Assembly;
    "Ref. Order Status" := AsmHeader."Document Type";
    "Ref. Order No." := AsmHeader."No.";
    "Ref. Line No." := 0;
    
    OnAfterTransferFromAsmHeader(Rec,AsmHeader); <=====================
    
    GetDimFromRefOrderLine(FALSE);
Table<Requisition Line>.PROCEDURE<OnAfterTransferFromProdOrderLine>
  Raised in: Table<Requisition Line>.PROCEDURE<TransferFromProdOrderLine>
    Code lines:
    ...
    "Ref. Order No." := ProdOrderLine."Prod. Order No.";
    "Ref. Order Type" := "Ref. Order Type"::"Prod. Order";
    "Ref. Order Status" := ProdOrderLine.Status;
    "Ref. Line No." := ProdOrderLine."Line No.";
    
    OnAfterTransferFromProdOrderLine(Rec,ProdOrderLine); <=====================
    
    GetDimFromRefOrderLine(FALSE);
Table<Requisition Line>.PROCEDURE<OnAfterTransferFromPurchaseLine>
  Raised in: Table<Requisition Line>.PROCEDURE<TransferFromPurchaseLine>
    Code lines:
    ...
    "Ref. Order No." := PurchLine."Document No.";
    "Ref. Order Type" := "Ref. Order Type"::Purchase;
    "Ref. Line No." := PurchLine."Line No.";
    "Vendor No." := PurchLine."Buy-from Vendor No.";
    
    OnAfterTransferFromPurchaseLine(Rec,PurchLine); <=====================
    
    GetDimFromRefOrderLine(FALSE);
Table<Requisition Line>.PROCEDURE<OnAfterTransferFromTransLine>
  Raised in: Table<Requisition Line>.PROCEDURE<TransferFromTransLine>
    Code lines:
    ...
    "Ref. Order Type" := "Ref. Order Type"::Transfer;
    "Ref. Line No." := TransLine."Line No.";
    "Transfer-from Code" := TransLine."Transfer-from Code";
    "Transfer Shipment Date" := TransLine."Shipment Date";
    
    OnAfterTransferFromTransLine(Rec,TransLine); <=====================
    
    GetDimFromRefOrderLine(FALSE);
Table<Requisition Line>.PROCEDURE<OnAfterTransferFromUnplannedDemand>
  Raised in: Table<Requisition Line>.PROCEDURE<TransferFromUnplannedDemand>
    Code lines:
    ...
    
    Level := 1;
    "Action Message" := ReqLine."Action Message"::New;
    "User ID" := USERID;
    
    OnAfterTransferFromUnplannedDemand(Rec,UnplannedDemand); <=====================
Table<Requisition Line>.PROCEDURE<OnAfterTransferToTrackingEntry>
  Raised in: Table<Requisition Line>.PROCEDURE<TransferToTrackingEntry>
    Code lines:
    ...
    IF TrkgReservEntry.Positive THEN
      TrkgReservEntry."Expected Receipt Date" := "Due Date"
    ELSE
      TrkgReservEntry."Shipment Date" := "Due Date";
    
    OnAfterTransferToTrackingEntry(TrkgReservEntry,Rec); <=====================
Table<Requisition Line>.PROCEDURE<OnBeforeCopyFromItem>
  Raised in: Table<Requisition Line>.PROCEDURE<CopyFromItem>
    Code lines:
    GetItem;
    OnBeforeCopyFromItem(Rec,Item,xRec,CurrFieldNo); <=====================
    
    IF PlanningResiliency AND Item.Blocked THEN
      TempPlanningErrorLog.SetError(
        STRSUBSTNO(Text031,Item.TABLECAPTION,Item."No."),
        DATABASE::Item,Item.GETPOSITION);
    Item.TESTFIELD(Blocked,FALSE);
    "Low-Level Code" := Item."Low-Level Code";
    "Scrap %" := Item."Scrap %";
    ...
Table<Requisition Line>.PROCEDURE<OnBeforeGetDefaultBin>
  Raised in: Table<Requisition Line>.Field<Variant Code>.<OnValidate>
    Code lines:
    ...
      IF "Variant Code" <> xRec."Variant Code" THEN BEGIN
        "Bin Code" := '';
        IF ("Location Code" <> '') AND ("No." <> '') THEN BEGIN
          GetLocation("Location Code");
          ShouldGetDefaultBin := Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick";
          OnBeforeGetDefaultBin(Rec,ShouldGetDefaultBin); <=====================
          IF ShouldGetDefaultBin THEN
            WMSManagement.GetDefaultBin("No.","Variant Code","Location Code","Bin Code");
        END;
      END;
    ...
  Raised in: Table<Requisition Line>.PROCEDURE<SetFromBinCode>
    Code lines:
    ...
        "Ref. Order Type"::Assembly:
          IF "Bin Code" = '' THEN
            "Bin Code" := Location."From-Assembly Bin Code";
      END;
      ShouldGetDefaultBin := ("Bin Code" = '') AND Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick";
      OnBeforeGetDefaultBin(Rec,ShouldGetDefaultBin); <=====================
      IF ShouldGetDefaultBin THEN
        WMSManagement.GetDefaultBin("No.","Variant Code","Location Code","Bin Code");
    END;
Table<Requisition Line>.PROCEDURE<OnBeforeGetDirectCost>
  Raised in: Table<Requisition Line>.PROCEDURE<GetDirectCost>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetDirectCost(Rec,xRec,CalledByFieldNo,CurrFieldNo,Subcontracting,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    GetWorkCenter;
    IF ("Replenishment System" = "Replenishment System"::Purchase) AND NOT Subcontracting THEN BEGIN
      PurchPriceCalcMgt.FindReqLineDisc(Rec);
      PurchPriceCalcMgt.FindReqLinePrice(Rec,CalledByFieldNo);
    END;
    ...
Table<Requisition Line>.PROCEDURE<OnBeforeLookupVendor>
  Raised in: Table<Requisition Line>.PROCEDURE<LookupVendor>
    Code lines:
    IsHandled := FALSE;
    IsVendorSelected := FALSE;
    OnBeforeLookupVendor(Rec,Vend,PreferItemVendorCatalog,IsHandled,IsVendorSelected); <=====================
    IF IsHandled THEN
      EXIT(IsVendorSelected);
    
    IF (Type = Type::Item) AND ItemVend.READPERMISSION THEN BEGIN
      ItemVend.INIT;
      ItemVend.SETRANGE("Item No.","No.");
      ItemVend.SETRANGE("Vendor No.","Vendor No.");
    ...
Table<Requisition Line>.PROCEDURE<OnBeforeSetFromBinCode>
  Raised in: Table<Requisition Line>.PROCEDURE<SetFromBinCode>
    Code lines:
    IsHandled := FALSE;
    OnBeforeSetFromBinCode(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF ("Location Code" <> '') AND ("No." <> '') THEN BEGIN
      GetLocation("Location Code");
      CASE "Ref. Order Type" OF
        "Ref. Order Type"::"Prod. Order":
          BEGIN
    ...
Table<Requisition Line>.PROCEDURE<OnGetLocationCodeOnBeforeUpdate>
  Raised in: Table<Requisition Line>.PROCEDURE<GetLocationCode>
    Code lines:
    IF NOT IsLocationCodeAlterable OR IsDropShipmentOrSpecialOrder THEN
      EXIT;
    
    IsHandled := FALSE;
    OnGetLocationCodeOnBeforeUpdate(Rec,CurrFieldNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF "Vendor No." <> '' THEN BEGIN
      Vend.GET("Vendor No.");
    ...
Table<Requisition Line>.PROCEDURE<OnSetReplenishmentSystemFromProdOrderOnAfterSetProdFields>
  Raised in: Table<Requisition Line>.PROCEDURE<SetReplenishmentSystemFromProdOrder>
    Code lines:
    ...
    END ELSE BEGIN
      "Production BOM No." := Item."Production BOM No.";
      "Routing No." := Item."Routing No.";
    END;
    
    OnSetReplenishmentSystemFromProdOrderOnAfterSetProdFields(Rec,Item,Subcontracting); <=====================
    
    VALIDATE("Transfer-from Code",'');
    VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
    
    ...
Table<Requisition Line>.PROCEDURE<OnUpdateDescriptionFromItem>
  Raised in: Table<Requisition Line>.PROCEDURE<UpdateDescription>
    Code lines:
    ...
      EXIT;
    IF "Variant Code" = '' THEN BEGIN
      GetItem;
      Description := Item.Description;
      "Description 2" := Item."Description 2";
      OnUpdateDescriptionFromItem(Rec,Item); <=====================
    END ELSE BEGIN
      ItemVariant.GET("No.","Variant Code");
      Description := ItemVariant.Description;
      "Description 2" := ItemVariant."Description 2";
    ...
Table<Requisition Line>.PROCEDURE<OnUpdateDescriptionFromItemTranslation>
  Raised in: Table<Requisition Line>.PROCEDURE<UpdateDescription>
    Code lines:
    ...
        Vend.GET("Vendor No.");
        IF Vend."Language Code" <> '' THEN
          IF ItemTranslation.GET("No.","Variant Code",Vend."Language Code") THEN BEGIN
            Description := ItemTranslation.Description;
            "Description 2" := ItemTranslation."Description 2";
            OnUpdateDescriptionFromItemTranslation(Rec,ItemTranslation); <=====================
          END;
      END;
Table<Requisition Line>.PROCEDURE<OnUpdateDescriptionFromItemVariant>
  Raised in: Table<Requisition Line>.PROCEDURE<UpdateDescription>
    Code lines:
    ...
      OnUpdateDescriptionFromItem(Rec,Item);
    END ELSE BEGIN
      ItemVariant.GET("No.","Variant Code");
      Description := ItemVariant.Description;
      "Description 2" := ItemVariant."Description 2";
      OnUpdateDescriptionFromItemVariant(Rec,ItemVariant); <=====================
    END;
    
    IF SalesLine.GET(SalesLine."Document Type"::Order,"Sales Order No.","Sales Order Line No.") THEN BEGIN
      Description := SalesLine.Description;
    ...
Table<Requisition Line>.PROCEDURE<OnUpdateDescriptionFromSalesLine>
  Raised in: Table<Requisition Line>.PROCEDURE<UpdateDescription>
    Code lines:
    ...
    END;
    
    IF SalesLine.GET(SalesLine."Document Type"::Order,"Sales Order No.","Sales Order Line No.") THEN BEGIN
      Description := SalesLine.Description;
      "Description 2" := SalesLine."Description 2";
      OnUpdateDescriptionFromSalesLine(Rec,SalesLine); <=====================
    END;
    
    IF "Vendor No." <> '' THEN
      IF NOT ItemCrossRef.GetItemDescription(
    ...
Table<Requisition Line>.PROCEDURE<OnValidateLocationCodeOnBeforeGetDefaultBin>
  Raised in: Table<Requisition Line>.Field<Location Code>.<OnValidate>
    Code lines:
    ...
      UpdateReplenishmentSystem;
      IF "Location Code" <> xRec."Location Code" THEN
        IF ("Location Code" <> '') AND ("No." <> '') AND NOT IsDropShipment THEN BEGIN
          GetLocation("Location Code");
          ShouldGetDefaultBin := Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick";
          OnValidateLocationCodeOnBeforeGetDefaultBin(Rec,ShouldGetDefaultBin); <=====================
          IF ShouldGetDefaultBin THEN
            WMSManagement.GetDefaultBin("No.","Variant Code","Location Code","Bin Code");
        END;
      IF ItemVend.GET("Vendor No.","No.","Variant Code") THEN
    ...
Table<Requisition Line>.PROCEDURE<OnValidateQuantityOnBeforeUnitCost>
  Raised in: Table<Requisition Line>.Field<Quantity>.<OnValidate>
    Code lines:
    ...
      IF (CurrFieldNo = FIELDNO(Quantity)) OR (CurrentFieldNo = FIELDNO(Quantity)) THEN
        SetActionMessage;
    
      "Net Quantity (Base)" := (Quantity - "Original Quantity") * "Qty. per Unit of Measure";
    
      OnValidateQuantityOnBeforeUnitCost(Rec,CurrFieldNo); <=====================
      VALIDATE("Unit Cost");
      IF ValidateFields THEN
        IF "Ending Date" <> 0D THEN
          VALIDATE("Ending Time")
    ...
Table<Vendor Ledger Entry>.PROCEDURE<OnAfterCopyVendLedgerEntryFromCVLedgEntryBuffer>
  Raised in: Table<Vendor Ledger Entry>.PROCEDURE<CopyFromCVLedgEntryBuffer>
    Code lines:
    ...
    "Accepted Pmt. Disc. Tolerance" := CVLedgerEntryBuffer."Accepted Pmt. Disc. Tolerance";
    "Pmt. Tolerance (LCY)" := CVLedgerEntryBuffer."Pmt. Tolerance (LCY)";
    "Amount to Apply" := CVLedgerEntryBuffer."Amount to Apply";
    Prepayment := CVLedgerEntryBuffer.Prepayment;
    
    OnAfterCopyVendLedgerEntryFromCVLedgEntryBuffer(Rec,CVLedgerEntryBuffer); <=====================
Table<Vendor Ledger Entry>.PROCEDURE<OnAfterCopyVendLedgerEntryFromGenJnlLine>
  Raised in: Table<Vendor Ledger Entry>.PROCEDURE<CopyFromGenJnlLine>
    Code lines:
    ...
    "Creditor No." := GenJnlLine."Creditor No.";
    "Payment Reference" := GenJnlLine."Payment Reference";
    "Payment Method Code" := GenJnlLine."Payment Method Code";
    "Exported to Payment File" := GenJnlLine."Exported to Payment File";
    
    OnAfterCopyVendLedgerEntryFromGenJnlLine(Rec,GenJnlLine); <=====================
Table<Vendor Ledger Entry>.PROCEDURE<OnAfterShowDoc>
  Raised in: Table<Vendor Ledger Entry>.PROCEDURE<ShowDoc>
    Code lines:
    ...
          PAGE.RUN(PAGE::"Posted Purchase Credit Memo",PurchCrMemoHdr);
          EXIT(TRUE);
        END
    END;
    
    OnAfterShowDoc(Rec); <=====================
Table<Vendor Ledger Entry>.PROCEDURE<OnBeforeDrillDownEntries>
  Raised in: Table<Vendor Ledger Entry>.PROCEDURE<DrillDownOnEntries>
    Code lines:
    ...
    DtldVendLedgEntry.COPYFILTER("Initial Entry Global Dim. 1",VendLedgEntry."Global Dimension 1 Code");
    DtldVendLedgEntry.COPYFILTER("Initial Entry Global Dim. 2",VendLedgEntry."Global Dimension 2 Code");
    DtldVendLedgEntry.COPYFILTER("Initial Entry Due Date",VendLedgEntry."Due Date");
    VendLedgEntry.SETCURRENTKEY("Vendor No.","Posting Date");
    VendLedgEntry.SETRANGE(Open,TRUE);
    OnBeforeDrillDownEntries(VendLedgEntry,DtldVendLedgEntry); <=====================
    PAGE.RUN(0,VendLedgEntry);
Table<Vendor Ledger Entry>.PROCEDURE<OnBeforeDrillDownOnOverdueEntries>
  Raised in: Table<Vendor Ledger Entry>.PROCEDURE<DrillDownOnOverdueEntries>
    Code lines:
    ...
    DtldVendLedgEntry.COPYFILTER("Initial Entry Global Dim. 2",VendLedgEntry."Global Dimension 2 Code");
    VendLedgEntry.SETCURRENTKEY("Vendor No.","Posting Date");
    VendLedgEntry.SETFILTER("Date Filter",'..%1',WORKDATE);
    VendLedgEntry.SETFILTER("Due Date",'<%1',WORKDATE);
    VendLedgEntry.SETFILTER("Remaining Amount",'<>%1',0);
    OnBeforeDrillDownOnOverdueEntries(VendLedgEntry,DtldVendLedgEntry); <=====================
    PAGE.RUN(0,VendLedgEntry);
Table<General Posting Setup>.PROCEDURE<OnBeforeGetPurchPrepmtAccount>
  Raised in: Table<General Posting Setup>.PROCEDURE<GetPurchPrepmtAccount>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetPurchPrepmtAccount(Rec,AccountNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(AccountNo);
    
    IF "Purch. Prepayments Account" = '' THEN
      PostingSetupMgt.SendGenPostingSetupNotification(Rec,FIELDCAPTION("Purch. Prepayments Account"));
    TESTFIELD("Purch. Prepayments Account");
    EXIT("Purch. Prepayments Account");
Table<General Posting Setup>.PROCEDURE<OnBeforeGetSalesPrepmtAccount>
  Raised in: Table<General Posting Setup>.PROCEDURE<GetSalesPrepmtAccount>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetSalesPrepmtAccount(Rec,AccountNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(AccountNo);
    
    IF "Sales Prepayments Account" = '' THEN
      PostingSetupMgt.SendGenPostingSetupNotification(Rec,FIELDCAPTION("Sales Prepayments Account"));
    TESTFIELD("Sales Prepayments Account");
    EXIT("Sales Prepayments Account");
Table<VAT Entry>.PROCEDURE<OnAfterCopyFromGenJnlLine>
  Raised in: Table<VAT Entry>.PROCEDURE<CopyFromGenJnlLine>
    Code lines:
    ...
    "VAT Base Discount %" := GenJnlLine."VAT Base Discount %";
    "Bill-to/Pay-to No." := GenJnlLine."Bill-to/Pay-to No.";
    "Country/Region Code" := GenJnlLine."Country/Region Code";
    "VAT Registration No." := GenJnlLine."VAT Registration No.";
    
    OnAfterCopyFromGenJnlLine(Rec,GenJnlLine); <=====================
Table<Item>.PROCEDURE<OnAfterCheckDocuments>
  Raised in: Table<Item>.PROCEDURE<CheckDocuments>
    Code lines:
    ...
    CheckServContractLine(CurrFieldNo);
    CheckAsmHeader(CurrFieldNo);
    CheckAsmLine(CurrFieldNo);
    CheckJobPlanningLine(CurrFieldNo);
    
    OnAfterCheckDocuments(Rec,xRec,CurrFieldNo); <=====================
Table<Item>.PROCEDURE<OnAfterDeleteRelatedData>
  Raised in: Table<Item>.PROCEDURE<DeleteRelatedData>
    Code lines:
    ...
    ItemAttributeValueMapping.RESET;
    ItemAttributeValueMapping.SETRANGE("Table ID",DATABASE::Item);
    ItemAttributeValueMapping.SETRANGE("No.","No.");
    ItemAttributeValueMapping.DELETEALL;
    
    OnAfterDeleteRelatedData(Rec); <=====================
Table<Item>.PROCEDURE<OnBeforeTestNoPurchLinesExist>
  Raised in: Table<Item>.PROCEDURE<TestNoEntriesExist>
    Code lines:
    ...
    ItemLedgEntry.SETRANGE("Item No.","No.");
    IF NOT ItemLedgEntry.ISEMPTY THEN
      ERROR(Text007,CurrentFieldName);
    
    IsHandled := FALSE;
    OnBeforeTestNoPurchLinesExist(Rec,CurrentFieldName,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    PurchaseLine.SETCURRENTKEY("Document Type",Type,"No.");
    ...
Table<Item>.PROCEDURE<OnBeforeValidateStandardCost>
  Raised in: Table<Item>.Field<Standard Cost>.<OnValidate>
    Code lines:
    IsHandled := FALSE;
    OnBeforeValidateStandardCost(Rec,xRec,CurrFieldNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF ("Costing Method" = "Costing Method"::Standard) AND (CurrFieldNo <> 0) THEN
      IF NOT GUIALLOWED THEN BEGIN
        "Standard Cost" := xRec."Standard Cost";
        EXIT;
      END ELSE
    ...
Table<Bank Account>.PROCEDURE<OnAfterIsUpdateNeeded>
  Raised in: Table<Bank Account>.PROCEDURE<IsContactUpdateNeeded>
    Code lines:
    ...
      ("Home Page" <> xRec."Home Page");
    
    IF NOT UpdateNeeded AND NOT ISTEMPORARY THEN
      UpdateNeeded := BankContUpdate.ContactNameIsBlank("No.");
    
    OnAfterIsUpdateNeeded(xRec,Rec,UpdateNeeded); <=====================
    EXIT(UpdateNeeded);
Table<Bank Account>.PROCEDURE<OnCheckAutoLogonPossibleEvent>
  Raised in: Table<Bank Account>.PROCEDURE<IsAutoLogonPossible>
    Code lines:
    AutoLogonPossible := TRUE;
    OnCheckAutoLogonPossibleEvent(Rec,AutoLogonPossible); <=====================
    EXIT(AutoLogonPossible)
Table<Bank Account>.PROCEDURE<OnCheckLinkedToStatementProviderEvent>
  Raised in: Table<Bank Account>.PROCEDURE<IsLinkedToBankStatementServiceProvider>
    Code lines:
    OnCheckLinkedToStatementProviderEvent(Rec,IsBankAccountLinked); <=====================
    EXIT(IsBankAccountLinked);
Table<Bank Account>.PROCEDURE<OnDisableStatementProviderEvent>
  Raised in: Table<Bank Account>.PROCEDURE<DisableStatementProviders>
    Code lines:
    OnGetStatementProvidersEvent(TempNameValueBuffer);
    IF TempNameValueBuffer.FINDSET THEN
      REPEAT
        OnDisableStatementProviderEvent(TempNameValueBuffer.Name); <=====================
      UNTIL TempNameValueBuffer.NEXT = 0;
Table<Bank Account>.PROCEDURE<OnGetDataExchangeDefinitionEvent>
  Raised in: Table<Bank Account>.PROCEDURE<GetDataExchDef>
    Code lines:
    OnGetDataExchangeDefinitionEvent(DataExchDefCodeResponse,Handled); <=====================
    IF NOT Handled THEN BEGIN
      TESTFIELD("Bank Statement Import Format");
      DataExchDefCodeResponse := "Bank Statement Import Format";
    END;
    
    IF DataExchDefCodeResponse = '' THEN
      ERROR(DataExchNotSetErr);
    
    BankExportImportSetup.GET(DataExchDefCodeResponse);
    ...
Table<Bank Account>.PROCEDURE<OnGetStatementProvidersEvent>
  Raised in: Table<Bank Account>.PROCEDURE<StatementProvidersExist>
    Code lines:
    OnGetStatementProvidersEvent(TempNameValueBuffer); <=====================
    EXIT(NOT TempNameValueBuffer.ISEMPTY);
  Raised in: Table<Bank Account>.PROCEDURE<SelectBankLinkingService>
    Code lines:
    OnGetStatementProvidersEvent(TempNameValueBuffer); <=====================
    
    IF TempNameValueBuffer.ISEMPTY THEN
      EXIT(''); // Action should not be visible in this case so should not occur
    
    IF (TempNameValueBuffer.COUNT = 1) OR (NOT GUIALLOWED) THEN
      EXIT(TempNameValueBuffer.Name);
    
    TempNameValueBuffer.FINDSET;
    REPEAT
    ...
  Raised in: Table<Bank Account>.PROCEDURE<DisableStatementProviders>
    Code lines:
    OnGetStatementProvidersEvent(TempNameValueBuffer); <=====================
    IF TempNameValueBuffer.FINDSET THEN
      REPEAT
        OnDisableStatementProviderEvent(TempNameValueBuffer.Name);
      UNTIL TempNameValueBuffer.NEXT = 0;
Table<Bank Account>.PROCEDURE<OnLinkStatementProviderEvent>
  Raised in: Table<Bank Account>.PROCEDURE<LinkStatementProvider>
    Code lines:
    StatementProvider := SelectBankLinkingService;
    
    IF StatementProvider <> '' THEN
      OnLinkStatementProviderEvent(BankAccount,StatementProvider); <=====================
Table<Bank Account>.PROCEDURE<OnMarkAccountLinkedEvent>
  Raised in: Page<Assisted Company Setup Wizard>.PROCEDURE<TryLinkBankAccount>
    Code lines:
    BankAccount.OnMarkAccountLinkedEvent(TempOnlineBankAccLink,BankAccount); <=====================
Table<Bank Account>.PROCEDURE<OnRefreshStatementProviderEvent>
  Raised in: Table<Bank Account>.PROCEDURE<RefreshStatementProvider>
    Code lines:
    StatementProvider := SelectBankLinkingService;
    
    IF StatementProvider <> '' THEN
      OnRefreshStatementProviderEvent(BankAccount,StatementProvider); <=====================
Table<Bank Account>.PROCEDURE<OnSimpleLinkStatementProviderEvent>
  Raised in: Table<Bank Account>.PROCEDURE<SimpleLinkStatementProvider>
    Code lines:
    StatementProvider := SelectBankLinkingService;
    
    IF StatementProvider <> '' THEN
      OnSimpleLinkStatementProviderEvent(OnlineBankAccLink,StatementProvider); <=====================
Table<Bank Account>.PROCEDURE<OnUnlinkStatementProviderEvent>
  Raised in: Table<Bank Account>.Field<Bank Stmt. Service Record ID>.<OnValidate>
    Code lines:
    IF FORMAT("Bank Stmt. Service Record ID") = '' THEN
      OnUnlinkStatementProviderEvent(Rec,Handled); <=====================
  Raised in: Table<Bank Account>.PROCEDURE<UnlinkStatementProvider>
    Code lines:
    OnUnlinkStatementProviderEvent(Rec,Handled); <=====================
Table<Bank Account>.PROCEDURE<OnUpdateBankAccountLinkingEvent>
  Raised in: Table<Bank Account>.PROCEDURE<UpdateBankAccountLinking>
    Code lines:
    StatementProvider := SelectBankLinkingService;
    
    IF StatementProvider <> '' THEN
      OnUpdateBankAccountLinkingEvent(Rec,StatementProvider); <=====================
Table<Bank Account Ledger Entry>.PROCEDURE<OnAfterCopyFromGenJnlLine>
  Raised in: Table<Bank Account Ledger Entry>.PROCEDURE<CopyFromGenJnlLine>
    Code lines:
    ...
    "Currency Code" := GenJnlLine."Currency Code";
    "User ID" := USERID;
    "Bal. Account Type" := GenJnlLine."Bal. Account Type";
    "Bal. Account No." := GenJnlLine."Bal. Account No.";
    
    OnAfterCopyFromGenJnlLine(Rec,GenJnlLine); <=====================
Table<Check Ledger Entry>.PROCEDURE<OnAfterCopyFromBankAccLedgEntry>
  Raised in: Table<Check Ledger Entry>.PROCEDURE<CopyFromBankAccLedgEntry>
    Code lines:
    ...
    Open := TRUE;
    "User ID" := USERID;
    "Check Date" := BankAccLedgEntry."Posting Date";
    "Check No." := BankAccLedgEntry."Document No.";
    
    OnAfterCopyFromBankAccLedgEntry(Rec,BankAccLedgEntry); <=====================
Table<Bank Acc. Reconciliation>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Bank Acc. Reconciliation>.PROCEDURE<CreateDim>
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    OldDimSetID := "Dimension Set ID";
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
    ...
Table<Bank Acc. Reconciliation Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Bank Acc. Reconciliation Line>.PROCEDURE<CreateDim>
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    BankAccReconciliation.GET("Statement Type","Bank Account No.","Statement No.");
    ...
Table<Native - API Tax Setup>.PROCEDURE<OnCanDeleteTaxSetup>
  Raised in: Table<Native - API Tax Setup>.PROCEDURE<DeleteRecord>
    Code lines:
    IF Default THEN
      ERROR(CannotRemoveDefaultTaxAreaErr);
    
    OnCanDeleteTaxSetup(PreventDelete,Rec); <=====================
    
    IF GeneralLedgerSetup.UseVat OR PreventDelete THEN
      ERROR(CannotDeleteSetupErr);
    
    IF TaxArea.GET(Code) THEN
      TaxArea.DELETE(TRUE);
Table<Native - API Tax Setup>.PROCEDURE<OnLoadSalesTaxSettings>
  Raised in: Table<Native - API Tax Setup>.PROCEDURE<LoadFromTaxArea>
    Code lines:
    CASE TempTaxAreaBuffer.Type OF
      TempTaxAreaBuffer.Type::VAT:
        LoadVATSettings;
      TaxAreaBuffer.Type::"Sales Tax":
        OnLoadSalesTaxSettings(Rec,TempTaxAreaBuffer); <=====================
    END;
Table<Native - API Tax Setup>.PROCEDURE<OnSaveSalesTaxSettings>
  Raised in: Table<Native - API Tax Setup>.PROCEDURE<SaveChanges>
    Code lines:
    CASE Type OF
      Type::VAT:
        SaveVATSettings(PreviousNativeAPITaxSetup);
      Type::"Sales Tax":
        OnSaveSalesTaxSettings(Rec); <=====================
    END;
Table<VAT Amount Line>.PROCEDURE<OnAfterCalcLineAmount>
  Raised in: Table<VAT Amount Line>.PROCEDURE<CalcLineAmount>
    Code lines:
    LineAmount := "Line Amount" - "Invoice Discount Amount";
    
    OnAfterCalcLineAmount(Rec,LineAmount); <=====================
Table<VAT Amount Line>.PROCEDURE<OnAfterCopyFromPurchCrMemoLine>
  Raised in: Table<VAT Amount Line>.PROCEDURE<CopyFromPurchCrMemoLine>
    Code lines:
    ...
    Quantity := PurchCrMemoLine."Quantity (Base)";
    "Calculated VAT Amount" :=
      PurchCrMemoLine."Amount Including VAT" - PurchCrMemoLine.Amount - PurchCrMemoLine."VAT Difference";
    "VAT Difference" := PurchCrMemoLine."VAT Difference";
    
    OnAfterCopyFromPurchCrMemoLine(Rec,PurchCrMemoLine); <=====================
Table<VAT Amount Line>.PROCEDURE<OnAfterCopyFromPurchInvLine>
  Raised in: Table<VAT Amount Line>.PROCEDURE<CopyFromPurchInvLine>
    Code lines:
    ...
    Quantity := PurchInvLine."Quantity (Base)";
    "Calculated VAT Amount" :=
      PurchInvLine."Amount Including VAT" - PurchInvLine.Amount - PurchInvLine."VAT Difference";
    "VAT Difference" := PurchInvLine."VAT Difference";
    
    OnAfterCopyFromPurchInvLine(Rec,PurchInvLine); <=====================
Table<VAT Amount Line>.PROCEDURE<OnAfterCopyFromSalesCrMemoLine>
  Raised in: Table<VAT Amount Line>.PROCEDURE<CopyFromSalesCrMemoLine>
    Code lines:
    ...
    "Invoice Discount Amount" := SalesCrMemoLine."Inv. Discount Amount";
    Quantity := SalesCrMemoLine."Quantity (Base)";
    "Calculated VAT Amount" := SalesCrMemoLine."Amount Including VAT" - SalesCrMemoLine.Amount - SalesCrMemoLine."VAT Difference";
    "VAT Difference" := SalesCrMemoLine."VAT Difference";
    
    OnAfterCopyFromSalesCrMemoLine(Rec,SalesCrMemoLine); <=====================
Table<VAT Amount Line>.PROCEDURE<OnAfterCopyFromSalesInvLine>
  Raised in: Table<VAT Amount Line>.PROCEDURE<CopyFromSalesInvLine>
    Code lines:
    ...
    Quantity := SalesInvLine."Quantity (Base)";
    "Calculated VAT Amount" :=
      SalesInvLine."Amount Including VAT" - SalesInvLine.Amount - SalesInvLine."VAT Difference";
    "VAT Difference" := SalesInvLine."VAT Difference";
    
    OnAfterCopyFromSalesInvLine(Rec,SalesInvLine); <=====================
Table<VAT Amount Line>.PROCEDURE<OnAfterCopyFromServCrMemoLine>
  Raised in: Table<VAT Amount Line>.PROCEDURE<CopyFromServCrMemoLine>
    Code lines:
    ...
    Quantity := ServCrMemoLine."Quantity (Base)";
    "Calculated VAT Amount" :=
      ServCrMemoLine."Amount Including VAT" - ServCrMemoLine.Amount - ServCrMemoLine."VAT Difference";
    "VAT Difference" := ServCrMemoLine."VAT Difference";
    
    OnAfterCopyFromServCrMemoLine(Rec,ServCrMemoLine); <=====================
Table<VAT Amount Line>.PROCEDURE<OnAfterCopyFromServInvLine>
  Raised in: Table<VAT Amount Line>.PROCEDURE<CopyFromServInvLine>
    Code lines:
    ...
    Quantity := ServInvLine."Quantity (Base)";
    "Calculated VAT Amount" :=
      ServInvLine."Amount Including VAT" - ServInvLine.Amount - ServInvLine."VAT Difference";
    "VAT Difference" := ServInvLine."VAT Difference";
    
    OnAfterCopyFromServInvLine(Rec,ServInvLine); <=====================
Table<VAT Amount Line>.PROCEDURE<OnAfterSalesTaxCalculateCalculateTax>
  Raised in: Table<VAT Amount Line>.PROCEDURE<UpdateLines>
    Code lines:
    ...
                  "VAT Amount" := 0
                ELSE
                  "VAT Amount" :=
                    SalesTaxCalculate.CalculateTax(
                      TaxAreaCode,"Tax Group Code",TaxLiable,PostingDate,"VAT Base",Quantity,CurrencyFactor);
                OnAfterSalesTaxCalculateCalculateTax(Rec,Currency); <=====================
                IF "VAT Base" = 0 THEN
                  "VAT %" := 0
                ELSE
                  "VAT %" := ROUND(100 * "VAT Amount" / "VAT Base",0.00001);
    ...
Table<VAT Amount Line>.PROCEDURE<OnAfterSalesTaxCalculateReverseCalculateTax>
  Raised in: Table<VAT Amount Line>.PROCEDURE<UpdateLines>
    Code lines:
    ...
                  "VAT Base" :=
                    ROUND(
                      SalesTaxCalculate.ReverseCalculateTax(
                        TaxAreaCode,"Tax Group Code",TaxLiable,PostingDate,"Amount Including VAT",Quantity,CurrencyFactor),
                      Currency."Amount Rounding Precision");
                OnAfterSalesTaxCalculateReverseCalculateTax(Rec,Currency); <=====================
                "VAT Amount" := "VAT Difference" + "Amount Including VAT" - "VAT Base";
                IF "VAT Base" = 0 THEN
                  "VAT %" := 0
                ELSE
    ...
Table<VAT Amount Line>.PROCEDURE<OnInsertLineOnBeforeModify>
  Raised in: Table<VAT Amount Line>.PROCEDURE<InsertLine>
    Code lines:
    ...
      "VAT Base" += VATAmountLine."VAT Base";
      "Amount Including VAT" += VATAmountLine."Amount Including VAT";
      "VAT Difference" += VATAmountLine."VAT Difference";
      "VAT Amount" := "Amount Including VAT" - "VAT Base";
      "Calculated VAT Amount" += VATAmountLine."Calculated VAT Amount";
      OnInsertLineOnBeforeModify(Rec,VATAmountLine); <=====================
      MODIFY;
    END ELSE BEGIN
      "VAT Amount" := "Amount Including VAT" - "VAT Base";
      INSERT;
    ...
Table<Reminder Header>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Reminder Header>.PROCEDURE<CreateDim>
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,SourceCodeSetup.Reminder,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
Table<Reminder Header>.PROCEDURE<OnAfterGetIssuingNoSeriesCode>
  Raised in: Table<Reminder Header>.PROCEDURE<GetIssuingNoSeriesCode>
    Code lines:
    ...
    IF IsHandled THEN
      EXIT;
    
    IssuingNos := SalesSetup."Issued Reminder Nos.";
    
    OnAfterGetIssuingNoSeriesCode(Rec,IssuingNos); <=====================
Table<Reminder Header>.PROCEDURE<OnAfterGetNoSeriesCode>
  Raised in: Table<Reminder Header>.PROCEDURE<GetNoSeriesCode>
    Code lines:
    ...
    IF IsHandled THEN
      EXIT;
    
    NoSeriesCode := SalesSetup."Reminder Nos.";
    
    OnAfterGetNoSeriesCode(Rec,SalesSetup,NoSeriesCode); <=====================
    EXIT(NoSeriesMgt.GetNoSeriesWithCheck(NoSeriesCode,SelectNoSeriesAllowed,"No. Series"));
Table<Reminder Header>.PROCEDURE<OnAfterInsertLines>
  Raised in: Table<Reminder Header>.PROCEDURE<InsertLines>
    Code lines:
    ...
    ReminderRounding(Rec);
    InsertBeginTexts(Rec);
    InsertEndTexts(Rec);
    MODIFY;
    
    OnAfterInsertLines(Rec); <=====================
Table<Reminder Header>.PROCEDURE<OnAfterTestNoSeries>
  Raised in: Table<Reminder Header>.PROCEDURE<TestNoSeries>
    Code lines:
    ...
    IF NOT IsHandled THEN BEGIN
      SalesSetup.TESTFIELD("Reminder Nos.");
      SalesSetup.TESTFIELD("Issued Reminder Nos.");
    END;
    
    OnAfterTestNoSeries(Rec); <=====================
Table<Reminder Header>.PROCEDURE<OnAfterUpdateLines>
  Raised in: Table<Reminder Header>.PROCEDURE<UpdateLines>
    Code lines:
    ...
    END ELSE BEGIN
      InsertBeginTexts(ReminderHeader);
      InsertEndTexts(ReminderHeader);
    END;
    
    OnAfterUpdateLines(Rec); <=====================
Table<Reminder Header>.PROCEDURE<OnBeforeGetIssuingNoSeriesCode>
  Raised in: Table<Reminder Header>.PROCEDURE<GetIssuingNoSeriesCode>
    Code lines:
    SalesSetup.GET;
    IsHandled := FALSE;
    OnBeforeGetIssuingNoSeriesCode(Rec,SalesSetup,IssuingNos,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IssuingNos := SalesSetup."Issued Reminder Nos.";
    
    OnAfterGetIssuingNoSeriesCode(Rec,IssuingNos);
Table<Reminder Header>.PROCEDURE<OnBeforeGetNoSeriesCode>
  Raised in: Table<Reminder Header>.PROCEDURE<GetNoSeriesCode>
    Code lines:
    SalesSetup.GET;
    IsHandled := FALSE;
    OnBeforeGetNoSeriesCode(Rec,SalesSetup,NoSeriesCode,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    NoSeriesCode := SalesSetup."Reminder Nos.";
    
    OnAfterGetNoSeriesCode(Rec,SalesSetup,NoSeriesCode);
    EXIT(NoSeriesMgt.GetNoSeriesWithCheck(NoSeriesCode,SelectNoSeriesAllowed,"No. Series"));
Table<Reminder Header>.PROCEDURE<OnBeforeInsertBeginTexts>
  Raised in: Table<Reminder Header>.PROCEDURE<InsertBeginTexts>
    Code lines:
    IsHandled := FALSE;
    OnBeforeInsertBeginTexts(ReminderHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    ReminderLevel.SETRANGE("Reminder Terms Code",ReminderHeader."Reminder Terms Code");
    ReminderLevel.SETRANGE("No.",1,ReminderHeader."Reminder Level");
    IF ReminderLevel.FINDLAST THEN BEGIN
      ReminderText.RESET;
      ReminderText.SETRANGE("Reminder Terms Code",ReminderHeader."Reminder Terms Code");
    ...
Table<Reminder Header>.PROCEDURE<OnBeforeInsertEndTexts>
  Raised in: Table<Reminder Header>.PROCEDURE<InsertEndTexts>
    Code lines:
    IsHandled := FALSE;
    OnBeforeInsertEndTexts(ReminderHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    ReminderLevel.SETRANGE("Reminder Terms Code",ReminderHeader."Reminder Terms Code");
    ReminderLevel.SETRANGE("No.",1,ReminderHeader."Reminder Level");
    IF ReminderLevel.FINDLAST THEN BEGIN
      ReminderText.SETRANGE(
        "Reminder Terms Code",ReminderHeader."Reminder Terms Code");
    ...
Table<Reminder Header>.PROCEDURE<OnBeforeInsertReminderLine>
  Raised in: Table<Reminder Header>.PROCEDURE<InsertLines>
    Code lines:
    ...
              "Language Code",DATABASE::"Currency for Reminder Level",
              CurrencyForReminderLevel.FIELDNO("Additional Fee")),1,100);
        ReminderLine.VALIDATE(Amount,AdditionalFee);
        ReminderLine."Line Type" := ReminderLine."Line Type"::"Additional Fee";
        OnBeforeInsertReminderTextLine(ReminderLine,ReminderText);
        OnBeforeInsertReminderLine(ReminderLine); <=====================
        ReminderLine.INSERT;
        IF TransferExtendedText.ReminderCheckIfAnyExtText(ReminderLine,FALSE) THEN
          TransferExtendedText.InsertReminderExtText(ReminderLine);
      END;
    ...
  Raised in: Table<Reminder Header>.PROCEDURE<InsertTextLines>
    Code lines:
    ...
        IF ReminderText.Position = ReminderText.Position::Beginning THEN
          ReminderLine."Line Type" := ReminderLine."Line Type"::"Beginning Text"
        ELSE
          ReminderLine."Line Type" := ReminderLine."Line Type"::"Ending Text";
        OnBeforeInsertReminderTextLine(ReminderLine,ReminderText);
        OnBeforeInsertReminderLine(ReminderLine); <=====================
        ReminderLine.INSERT;
      UNTIL ReminderText.NEXT = 0;
      IF ReminderText.Position = ReminderText.Position::Beginning THEN
        InsertBlankLine(ReminderLine."Line Type"::"Beginning Text");
  Raised in: Table<Reminder Header>.PROCEDURE<InsertBlankLine>
    Code lines:
    NextLineNo := NextLineNo + LineSpacing;
    ReminderLine.INIT;
    ReminderLine."Line No." := NextLineNo;
    ReminderLine."Line Type" := LineType;
    OnBeforeInsertReminderLine(ReminderLine); <=====================
    ReminderLine.INSERT;
Table<Reminder Header>.PROCEDURE<OnBeforeInsertReminderTextLine>
  Raised in: Table<Reminder Header>.PROCEDURE<InsertLines>
    Code lines:
    ...
            LanguageManagement.GetTranslatedFieldCaption(
              "Language Code",DATABASE::"Currency for Reminder Level",
              CurrencyForReminderLevel.FIELDNO("Additional Fee")),1,100);
        ReminderLine.VALIDATE(Amount,AdditionalFee);
        ReminderLine."Line Type" := ReminderLine."Line Type"::"Additional Fee";
        OnBeforeInsertReminderTextLine(ReminderLine,ReminderText); <=====================
        OnBeforeInsertReminderLine(ReminderLine);
        ReminderLine.INSERT;
        IF TransferExtendedText.ReminderCheckIfAnyExtText(ReminderLine,FALSE) THEN
          TransferExtendedText.InsertReminderExtText(ReminderLine);
    ...
  Raised in: Table<Reminder Header>.PROCEDURE<InsertTextLines>
    Code lines:
    ...
            MAXSTRLEN(ReminderLine.Description));
        IF ReminderText.Position = ReminderText.Position::Beginning THEN
          ReminderLine."Line Type" := ReminderLine."Line Type"::"Beginning Text"
        ELSE
          ReminderLine."Line Type" := ReminderLine."Line Type"::"Ending Text";
        OnBeforeInsertReminderTextLine(ReminderLine,ReminderText); <=====================
        OnBeforeInsertReminderLine(ReminderLine);
        ReminderLine.INSERT;
      UNTIL ReminderText.NEXT = 0;
      IF ReminderText.Position = ReminderText.Position::Beginning THEN
    ...
Table<Reminder Header>.PROCEDURE<OnBeforeReminderRounding>
  Raised in: Table<Reminder Header>.PROCEDURE<ReminderRounding>
    Code lines:
    OnBeforeReminderRounding(ReminderHeader,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    GetCurrency(ReminderHeader);
    IF Currency."Invoice Rounding Precision" = 0 THEN
      EXIT;
    
    ReminderHeader.CALCFIELDS(
      "Remaining Amount","Interest Amount","Additional Fee","VAT Amount","Add. Fee per Line");
    ...
Table<Reminder Header>.PROCEDURE<OnBeforeTestNoSeries>
  Raised in: Table<Reminder Header>.PROCEDURE<TestNoSeries>
    Code lines:
    SalesSetup.GET;
    IsHandled := FALSE;
    OnBeforeTestNoSeries(Rec,IsHandled); <=====================
    IF NOT IsHandled THEN BEGIN
      SalesSetup.TESTFIELD("Reminder Nos.");
      SalesSetup.TESTFIELD("Issued Reminder Nos.");
    END;
    
    OnAfterTestNoSeries(Rec);
Table<Reminder Line>.PROCEDURE<OnAfterCalcFinChrg>
  Raised in: Table<Reminder Line>.PROCEDURE<CalcFinChrg>
    Code lines:
    ...
      GLAcc.TESTFIELD("Gen. Prod. Posting Group");
      "Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
      VALIDATE("VAT Prod. Posting Group",GLAcc."VAT Prod. Posting Group");
    END;
    
    OnAfterCalcFinChrg(Rec,ReminderHeader); <=====================
Table<Reminder Line>.PROCEDURE<OnAfterCopyFromCustLedgEntry>
  Raised in: Table<Reminder Line>.Field<Entry No.>.<OnValidate>
    Code lines:
    ...
    "Document No." := CustLedgEntry."Document No.";
    Description := CustLedgEntry.Description;
    CustLedgEntry.CALCFIELDS(Amount,"Remaining Amount");
    "Original Amount" := CustLedgEntry.Amount;
    "Remaining Amount" := CustLedgEntry."Remaining Amount";
    OnAfterCopyFromCustLedgEntry(Rec,CustLedgEntry); <=====================
    
    "No. of Reminders" := GetNoOfReminderForCustLedgEntry("Entry No.");
    
    CalcFinChrg;
Table<Reminder Line>.PROCEDURE<OnBeforeCalcFinChrg>
  Raised in: Table<Reminder Line>.PROCEDURE<CalcFinChrg>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCalcFinChrg(Rec,ReminderHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    GetReminderHeader;
    "Interest Rate" := 0;
    Amount := 0;
    "VAT Amount" := 0;
    "VAT Calculation Type" := "VAT Calculation Type"::"Normal VAT";
    ...
Table<Reminder Line>.PROCEDURE<OnBeforeLookupDocNo>
  Raised in: Table<Reminder Line>.PROCEDURE<LookupDocNo>
    Code lines:
    IsHandled := FALSE;
    OnBeforeLookupDocNo(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF Type <> Type::"Customer Ledger Entry" THEN
      EXIT;
    
    SetCustLedgEntryView;
    IF "Document Type" <> 0 THEN
    ...
Table<Reminder Line>.PROCEDURE<OnBeforeValidateDocumentNo>
  Raised in: Table<Reminder Line>.Field<Document No.>.<OnValidate>
    Code lines:
    IsHandled := FALSE;
    OnBeforeValidateDocumentNo(Rec,xRec,CurrFieldNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    TESTFIELD(Type,Type::"Customer Ledger Entry");
    "Entry No." := 0;
    IF "Document No." <> '' THEN BEGIN
      SetCustLedgEntryView;
      IF "Document Type" <> 0 THEN
    ...
Table<Reminder Line>.PROCEDURE<OnBeforeValidateEntryNo>
  Raised in: Table<Reminder Line>.Field<Entry No.>.<OnValidate>
    Code lines:
    IsHandled := FALSE;
    OnBeforeValidateEntryNo(Rec,xRec,CurrFieldNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    TESTFIELD(Type,Type::"Customer Ledger Entry");
    GetReminderHeader;
    CustLedgEntry.GET("Entry No.");
    CustLedgEntry.TESTFIELD(Open,TRUE);
    CustLedgEntry.TESTFIELD("Customer No.",ReminderHeader."Customer No.");
    ...
Table<Issued Reminder Header>.PROCEDURE<OnBeforePrintRecords>
  Raised in: Table<Issued Reminder Header>.PROCEDURE<PrintRecords>
    Code lines:
    IsHandled := FALSE;
    OnBeforePrintRecords(Rec,ShowRequestForm,SendAsEmail,HideDialog,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF SendAsEmail THEN BEGIN
      IssuedReminderHeader.COPY(Rec);
      IF (NOT HideDialog) AND (IssuedReminderHeader.COUNT > 1) THEN
        IF CONFIRM(SuppresSendDialogQst) THEN
          HideDialog := TRUE;
    ...
Table<Reminder Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
  Raised in: Table<Reminder Comment Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    ...
    ReminderCommentLine.SETRANGE("No.","No.");
    ReminderCommentLine.SETRANGE(Date,WORKDATE);
    IF NOT ReminderCommentLine.FINDFIRST THEN
      Date := WORKDATE;
    
    OnAfterSetUpNewLine(Rec,ReminderCommentLine); <=====================
Table<Finance Charge Memo Header>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Finance Charge Memo Header>.PROCEDURE<CreateDim>
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,SourceCodeSetup."Finance Charge Memo",
    ...
Table<Finance Charge Memo Header>.PROCEDURE<OnAfterGetIssuingNoSeriesCode>
  Raised in: Table<Finance Charge Memo Header>.PROCEDURE<GetIssuingNoSeriesCode>
    Code lines:
    ...
    IF IsHandled THEN
      EXIT;
    
    IssuingNos := SalesSetup."Issued Fin. Chrg. M. Nos.";
    
    OnAfterGetIssuingNoSeriesCode(Rec,IssuingNos); <=====================
Table<Finance Charge Memo Header>.PROCEDURE<OnAfterGetNoSeriesCode>
  Raised in: Table<Finance Charge Memo Header>.PROCEDURE<GetNoSeriesCode>
    Code lines:
    ...
    IF IsHandled THEN
      EXIT;
    
    NoSeriesCode := SalesSetup."Fin. Chrg. Memo Nos.";
    
    OnAfterGetNoSeriesCode(Rec,SalesSetup,NoSeriesCode); <=====================
    EXIT(NoSeriesMgt.GetNoSeriesWithCheck(NoSeriesCode,SelectNoSeriesAllowed,"No. Series"));
Table<Finance Charge Memo Header>.PROCEDURE<OnAfterTestNoSeries>
  Raised in: Table<Finance Charge Memo Header>.PROCEDURE<TestNoSeries>
    Code lines:
    ...
    IF NOT IsHandled THEN BEGIN
      SalesSetup.TESTFIELD("Fin. Chrg. Memo Nos.");
      SalesSetup.TESTFIELD("Issued Fin. Chrg. M. Nos.");
    END;
    
    OnAfterTestNoSeries(Rec); <=====================
Table<Finance Charge Memo Header>.PROCEDURE<OnBeforeGetIssuingNoSeriesCode>
  Raised in: Table<Finance Charge Memo Header>.PROCEDURE<GetIssuingNoSeriesCode>
    Code lines:
    SalesSetup.GET;
    IsHandled := FALSE;
    OnBeforeGetIssuingNoSeriesCode(Rec,SalesSetup,IssuingNos,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IssuingNos := SalesSetup."Issued Fin. Chrg. M. Nos.";
    
    OnAfterGetIssuingNoSeriesCode(Rec,IssuingNos);
Table<Finance Charge Memo Header>.PROCEDURE<OnBeforeGetNoSeriesCode>
  Raised in: Table<Finance Charge Memo Header>.PROCEDURE<GetNoSeriesCode>
    Code lines:
    SalesSetup.GET;
    IsHandled := FALSE;
    OnBeforeGetNoSeriesCode(Rec,SalesSetup,NoSeriesCode,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    NoSeriesCode := SalesSetup."Fin. Chrg. Memo Nos.";
    
    OnAfterGetNoSeriesCode(Rec,SalesSetup,NoSeriesCode);
    EXIT(NoSeriesMgt.GetNoSeriesWithCheck(NoSeriesCode,SelectNoSeriesAllowed,"No. Series"));
Table<Finance Charge Memo Header>.PROCEDURE<OnBeforeInsertFinChrgMemoLine>
  Raised in: Table<Finance Charge Memo Header>.PROCEDURE<InsertLines>
    Code lines:
    ...
              "Posting Date","Currency Code",
              FinChrgTerms."Additional Fee (LCY)",CurrExchRate.ExchangeRate(
                "Posting Date","Currency Code"));
        FinChrgMemoLine.VALIDATE(Amount,CurrForFinChrgTerms."Additional Fee");
      END;
      OnBeforeInsertFinChrgMemoLine(FinChrgMemoLine); <=====================
      FinChrgMemoLine.INSERT;
      IF TransferExtendedText.FinChrgMemoCheckIfAnyExtText(FinChrgMemoLine,FALSE) THEN
        TransferExtendedText.InsertFinChrgMemoExtText(FinChrgMemoLine);
    END;
    ...
Table<Finance Charge Memo Header>.PROCEDURE<OnBeforeTestNoSeries>
  Raised in: Table<Finance Charge Memo Header>.PROCEDURE<TestNoSeries>
    Code lines:
    SalesSetup.GET;
    IsHandled := FALSE;
    OnBeforeTestNoSeries(Rec,IsHandled); <=====================
    IF NOT IsHandled THEN BEGIN
      SalesSetup.TESTFIELD("Fin. Chrg. Memo Nos.");
      SalesSetup.TESTFIELD("Issued Fin. Chrg. M. Nos.");
    END;
    
    OnAfterTestNoSeries(Rec);
Table<Finance Charge Memo Line>.PROCEDURE<OnAfterCalcFinCharge>
  Raised in: Table<Finance Charge Memo Line>.PROCEDURE<CalcFinChrg>
    Code lines:
    ...
      GLAcc.TESTFIELD("Gen. Prod. Posting Group");
      VALIDATE("Gen. Prod. Posting Group",GLAcc."Gen. Prod. Posting Group");
      VALIDATE("VAT Prod. Posting Group",GLAcc."VAT Prod. Posting Group");
    END;
    
    OnAfterCalcFinCharge(Rec,FinChrgMemoHeader); <=====================
Table<Finance Charge Memo Line>.PROCEDURE<OnBeforeCalcFinCharge>
  Raised in: Table<Finance Charge Memo Line>.PROCEDURE<CalcFinChrg>
    Code lines:
    OnBeforeCalcFinCharge(Rec,FinChrgMemoHeader); <=====================
    
    GetFinChrgMemoHeader;
    Amount := 0;
    "VAT Amount" := 0;
    "VAT Calculation Type" := "VAT Calculation Type"::"Normal VAT";
    "Gen. Prod. Posting Group" := '';
    "VAT Prod. Posting Group" := '';
    "Interest Rate" := 0;
    FinChrgMemoLine := Rec;
    ...
Table<Issued Fin. Charge Memo Header>.PROCEDURE<OnBeforePrintRecords>
  Raised in: Table<Issued Fin. Charge Memo Header>.PROCEDURE<PrintRecords>
    Code lines:
    IsHandled := FALSE;
    OnBeforePrintRecords(Rec,ShowRequestForm,SendAsEmail,HideDialog,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF SendAsEmail THEN
      DocumentSendingProfile.TrySendToEMail(
        DummyReportSelections.Usage::"Fin.Charge",Rec,FIELDNO("No."),FinanceChargeTxt,FIELDNO("Customer No."),NOT HideDialog)
    ELSE
      DocumentSendingProfile.TrySendToPrinter(
Table<Fin. Charge Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
  Raised in: Table<Fin. Charge Comment Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    ...
    FinChrgCommentLine.SETRANGE("No.","No.");
    FinChrgCommentLine.SETRANGE(Date,WORKDATE);
    IF NOT FinChrgCommentLine.FINDFIRST THEN
      Date := WORKDATE;
    
    OnAfterSetUpNewLine(Rec,FinChrgCommentLine); <=====================
Table<Item Ledger Entry>.PROCEDURE<OnAfterFilterLinesWithItemToPlan>
  Raised in: Table<Item Ledger Entry>.PROCEDURE<FilterLinesWithItemToPlan>
    Code lines:
    ...
    SETFILTER("Global Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
    SETFILTER("Global Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
    IF NetChange THEN
      SETFILTER("Posting Date",Item.GETFILTER("Date Filter"));
    
    OnAfterFilterLinesWithItemToPlan(Rec,Item); <=====================
Table<Item Ledger Entry>.PROCEDURE<OnBeforeVerifyOnInventory>
  Raised in: Table<Item Ledger Entry>.PROCEDURE<VerifyOnInventory>
    Code lines:
    IsHandled := FALSE;
    OnBeforeVerifyOnInventory(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT Open THEN
      EXIT;
    IF Quantity >= 0 THEN
      EXIT;
    CASE "Entry Type" OF
    ...
Table<Tracking Specification>.PROCEDURE<OnAfterClearTracking>
  Raised in: Table<Tracking Specification>.PROCEDURE<ClearTracking>
    Code lines:
    "Serial No." := '';
    "Lot No." := '';
    "Warranty Date" := 0D;
    "Expiration Date" := 0D;
    
    OnAfterClearTracking(Rec); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterCopyTrackingFromItemLedgEntry>
  Raised in: Table<Tracking Specification>.PROCEDURE<CopyTrackingFromItemLedgEntry>
    Code lines:
    "Serial No." := ItemLedgerEntry."Serial No.";
    "Lot No." := ItemLedgerEntry."Lot No.";
    
    OnAfterCopyTrackingFromItemLedgEntry(Rec,ItemLedgerEntry); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterInitFromAsmHeader>
  Raised in: Table<Tracking Specification>.PROCEDURE<InitFromAsmHeader>
    Code lines:
    ...
    SetQuantities(
      AsmHeader."Quantity (Base)",AsmHeader."Quantity to Assemble",AsmHeader."Quantity to Assemble (Base)",
      AsmHeader."Quantity to Assemble",AsmHeader."Quantity to Assemble (Base)",
      AsmHeader."Assembled Quantity (Base)",AsmHeader."Assembled Quantity (Base)");
    
    OnAfterInitFromAsmHeader(Rec,AsmHeader); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterInitFromAsmLine>
  Raised in: Table<Tracking Specification>.PROCEDURE<InitFromAsmLine>
    Code lines:
    ...
    SetQuantities(
      AsmLine."Quantity (Base)",AsmLine."Quantity to Consume",AsmLine."Quantity to Consume (Base)",
      AsmLine."Quantity to Consume",AsmLine."Quantity to Consume (Base)",
      AsmLine."Consumed Quantity (Base)",AsmLine."Consumed Quantity (Base)");
    
    OnAfterInitFromAsmLine(Rec,AsmLine); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterInitFromItemJnlLine>
  Raised in: Table<Tracking Specification>.PROCEDURE<InitFromItemJnlLine>
    Code lines:
    ...
      ItemJnlLine."Journal Batch Name",0);
    SetQuantities(
      ItemJnlLine."Quantity (Base)",ItemJnlLine.Quantity,ItemJnlLine."Quantity (Base)",ItemJnlLine.Quantity,
      ItemJnlLine."Quantity (Base)",0,0);
    
    OnAfterInitFromItemJnlLine(Rec,ItemJnlLine); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterInitFromJobJnlLine>
  Raised in: Table<Tracking Specification>.PROCEDURE<InitFromJobJnlLine>
    Code lines:
    ...
      JobJnlLine."Journal Batch Name",0);
    SetQuantities(
      JobJnlLine."Quantity (Base)",JobJnlLine.Quantity,JobJnlLine."Quantity (Base)",JobJnlLine.Quantity,
      JobJnlLine."Quantity (Base)",0,0);
    
    OnAfterInitFromJobJnlLine(Rec,JobJnlLine); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterInitFromProdOrderComp>
  Raised in: Table<Tracking Specification>.PROCEDURE<InitFromProdOrderComp>
    Code lines:
    ...
      ProdOrderComp."Remaining Qty. (Base)",ProdOrderComp."Remaining Quantity",ProdOrderComp."Remaining Qty. (Base)",
      ProdOrderComp."Remaining Quantity",ProdOrderComp."Remaining Qty. (Base)",
      ProdOrderComp."Expected Qty. (Base)" - ProdOrderComp."Remaining Qty. (Base)",
      ProdOrderComp."Expected Qty. (Base)" - ProdOrderComp."Remaining Qty. (Base)");
    
    OnAfterInitFromProdOrderComp(Rec,ProdOrderComp); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterInitFromProdOrderLine>
  Raised in: Table<Tracking Specification>.PROCEDURE<InitFromProdOrderLine>
    Code lines:
    ...
    SetQuantities(
      ProdOrderLine."Quantity (Base)",ProdOrderLine."Remaining Quantity",ProdOrderLine."Remaining Qty. (Base)",
      ProdOrderLine."Remaining Quantity",ProdOrderLine."Remaining Qty. (Base)",ProdOrderLine."Finished Qty. (Base)",
      ProdOrderLine."Finished Qty. (Base)");
    
    OnAfterInitFromProdOrderLine(Rec,ProdOrderLine); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterInitFromProdPlanningComp>
  Raised in: Table<Tracking Specification>.PROCEDURE<InitFromProdPlanningComp>
    Code lines:
    ...
      ROUND(PlanningComponent."Net Quantity (Base)" / PlanningComponent."Qty. per Unit of Measure",UOMMgt.QtyRndPrecision);
    SetQuantities(
      PlanningComponent."Net Quantity (Base)",NetQuantity,PlanningComponent."Net Quantity (Base)",NetQuantity,
      PlanningComponent."Net Quantity (Base)",0,0);
    
    OnAfterInitFromProdPlanningComp(Rec,PlanningComponent); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterInitFromPurchLine>
  Raised in: Table<Tracking Specification>.PROCEDURE<InitFromPurchLine>
    Code lines:
    ...
      SetQuantities(
        PurchLine."Quantity (Base)",PurchLine."Qty. to Receive",PurchLine."Qty. to Receive (Base)",
        PurchLine."Qty. to Invoice",PurchLine."Qty. to Invoice (Base)",PurchLine."Qty. Received (Base)",
        PurchLine."Qty. Invoiced (Base)");
    
    OnAfterInitFromPurchLine(Rec,PurchLine); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterInitFromReqLine>
  Raised in: Table<Tracking Specification>.PROCEDURE<InitFromReqLine>
    Code lines:
    ...
    SetSource(
      DATABASE::"Requisition Line",0,ReqLine."Worksheet Template Name",ReqLine."Line No.",ReqLine."Journal Batch Name",0);
    SetQuantities(
      ReqLine."Quantity (Base)",ReqLine.Quantity,ReqLine."Quantity (Base)",ReqLine.Quantity,ReqLine."Quantity (Base)",0,0);
    
    OnAfterInitFromReqLine(Rec,ReqLine); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterInitFromSalesLine>
  Raised in: Table<Tracking Specification>.PROCEDURE<InitFromSalesLine>
    Code lines:
    ...
    ELSE
      SetQuantities(
        SalesLine."Quantity (Base)",SalesLine."Qty. to Ship",SalesLine."Qty. to Ship (Base)",SalesLine."Qty. to Invoice",
        SalesLine."Qty. to Invoice (Base)",SalesLine."Qty. Shipped (Base)",SalesLine."Qty. Invoiced (Base)");
    
    OnAfterInitFromSalesLine(Rec,SalesLine); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterInitFromServLine>
  Raised in: Table<Tracking Specification>.PROCEDURE<InitFromServLine>
    Code lines:
    ...
      "Qty. to Handle" := ServiceLine."Qty. to Ship";
      "Qty. to Handle (Base)" := ServiceLine."Qty. to Ship (Base)";
      "Quantity Handled (Base)" := ServiceLine."Qty. Shipped (Base)";
    END;
    
    OnAfterInitFromServLine(Rec,ServiceLine); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterInitFromTransLine>
  Raised in: Table<Tracking Specification>.PROCEDURE<InitFromTransLine>
    Code lines:
    ...
            TransLine."Quantity (Base)",TransLine."Qty. Received (Base)",0);
          AvalabilityDate := TransLine."Receipt Date";
        END;
    END;
    
    OnAfterInitFromTransLine(Rec,TransLine,Direction); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterInitQtyToInvoice>
  Raised in: Table<Tracking Specification>.PROCEDURE<InitQtyToInvoice>
    Code lines:
    OnBeforeInitQtyToInvoice(Rec);
    
    "Qty. to Invoice (Base)" := "Quantity Handled (Base)" + "Qty. to Handle (Base)" - "Quantity Invoiced (Base)";
    "Qty. to Invoice" := CalcQty("Qty. to Invoice (Base)");
    
    OnAfterInitQtyToInvoice(Rec); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterInitQtyToShip>
  Raised in: Table<Tracking Specification>.PROCEDURE<InitQtyToShip>
    Code lines:
    ...
    "Qty. to Handle (Base)" := "Quantity (Base)" - "Quantity Handled (Base)";
    "Qty. to Handle" := CalcQty("Qty. to Handle (Base)");
    
    InitQtyToInvoice;
    
    OnAfterInitQtyToShip(Rec); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterLookupApplFromItemEntrySetFilters>
  Raised in: Table<Tracking Specification>.Field<Appl.-from Item Entry>.<OnLookup>
    Code lines:
    ...
      ItemLedgEntry.SETRANGE("Location Code","Location Code");
    ItemLedgEntry.SETRANGE("Variant Code","Variant Code");
    ItemLedgEntry.SETRANGE("Serial No.","Serial No.");
    ItemLedgEntry.SETRANGE("Lot No.","Lot No.");
    ItemLedgEntry.SETFILTER("Shipped Qty. Not Returned",'<0');
    OnAfterLookupApplFromItemEntrySetFilters(ItemLedgEntry,Rec); <=====================
    IF PAGE.RUNMODAL(PAGE::"Item Ledger Entries",ItemLedgEntry) = ACTION::LookupOK THEN
      VALIDATE("Appl.-from Item Entry",ItemLedgEntry."Entry No.");
Table<Tracking Specification>.PROCEDURE<OnAfterSetTrackingFilterFromEntrySummary>
  Raised in: Table<Tracking Specification>.PROCEDURE<SetTrackingFilterFromEntrySummary>
    Code lines:
    SETRANGE("Serial No.",EntrySummary."Serial No.");
    SETRANGE("Lot No.",EntrySummary."Lot No.");
    
    OnAfterSetTrackingFilterFromEntrySummary(Rec,EntrySummary); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterSetTrackingFilterFromReservEntry>
  Raised in: Table<Tracking Specification>.PROCEDURE<SetTrackingFilterFromReservEntry>
    Code lines:
    SETRANGE("Serial No.",ReservEntry."Serial No.");
    SETRANGE("Lot No.",ReservEntry."Lot No.");
    
    OnAfterSetTrackingFilterFromReservEntry(Rec,ReservEntry); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterSetTrackingFilterFromTrackingSpec>
  Raised in: Table<Tracking Specification>.PROCEDURE<SetTrackingFilterFromSpec>
    Code lines:
    SETRANGE("Serial No.",TrackingSpecification."Serial No.");
    SETRANGE("Lot No.",TrackingSpecification."Lot No.");
    
    OnAfterSetTrackingFilterFromTrackingSpec(Rec,TrackingSpecification); <=====================
Table<Tracking Specification>.PROCEDURE<OnAfterValidateApplFromItemEntry>
  Raised in: Table<Tracking Specification>.Field<Appl.-from Item Entry>.<OnValidate>
    Code lines:
    ...
      ItemLedgEntry.FIELDERROR("Shipped Qty. Not Returned");
    ItemLedgEntry.TESTFIELD("Variant Code","Variant Code");
    ItemLedgEntry.TESTFIELD("Serial No.","Serial No.");
    ItemLedgEntry.TESTFIELD("Lot No.","Lot No.");
    
    OnAfterValidateApplFromItemEntry(Rec,ItemLedgEntry,IsReclass); <=====================
Table<Tracking Specification>.PROCEDURE<OnBeforeInitQtyToInvoice>
  Raised in: Table<Tracking Specification>.PROCEDURE<InitQtyToInvoice>
    Code lines:
    OnBeforeInitQtyToInvoice(Rec); <=====================
    
    "Qty. to Invoice (Base)" := "Quantity Handled (Base)" + "Qty. to Handle (Base)" - "Quantity Invoiced (Base)";
    "Qty. to Invoice" := CalcQty("Qty. to Invoice (Base)");
    
    OnAfterInitQtyToInvoice(Rec);
Table<Tracking Specification>.PROCEDURE<OnBeforeInitQtyToShip>
  Raised in: Table<Tracking Specification>.PROCEDURE<InitQtyToShip>
    Code lines:
    OnBeforeInitQtyToShip(Rec); <=====================
    
    "Qty. to Handle (Base)" := "Quantity (Base)" - "Quantity Handled (Base)";
    "Qty. to Handle" := CalcQty("Qty. to Handle (Base)");
    
    InitQtyToInvoice;
    
    OnAfterInitQtyToShip(Rec);
Table<Tracking Specification>.PROCEDURE<OnBeforeTestFieldError>
  Raised in: Table<Tracking Specification>.PROCEDURE<TestFieldError>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTestFieldError(FieldCaptionText,CurrFieldValue,CompareValue,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF CurrFieldValue = CompareValue THEN
      EXIT;
    
    ERROR(Text005,
      FieldCaptionText,TABLECAPTION,FIELDCAPTION("Item No."),"Item No.",
    ...
Table<Tracking Specification>.PROCEDURE<OnBeforeUpdateTrackingSpecification>
  Raised in: Table<Tracking Specification>.PROCEDURE<InsertSpecification>
    Code lines:
    ...
        TrackingSpecification := Rec;
        TrackingSpecification."Buffer Status" := 0;
        TrackingSpecification.InitQtyToShip;
        TrackingSpecification.Correction := FALSE;
        TrackingSpecification."Quantity actual Handled (Base)" := 0;
        OnBeforeUpdateTrackingSpecification(Rec,TrackingSpecification); <=====================
        IF "Buffer Status" = "Buffer Status"::MODIFY THEN
          TrackingSpecification.MODIFY
        ELSE
          TrackingSpecification.INSERT;
    ...
Table<Tracking Specification>.PROCEDURE<OnValidateQtyToHandleOnBeforeInitQtyToInvoice>
  Raised in: Table<Tracking Specification>.Field<Qty. to Handle (Base)>.<OnValidate>
    Code lines:
    ...
       (ABS("Qty. to Handle (Base)") > ABS("Quantity (Base)")
        - "Quantity Handled (Base)")
    THEN
      ERROR(Text001,"Quantity (Base)" - "Quantity Handled (Base)");
    
    OnValidateQtyToHandleOnBeforeInitQtyToInvoice(Rec,xRec,CurrFieldNo); <=====================
    
    InitQtyToInvoice;
    "Qty. to Handle" := CalcQty("Qty. to Handle (Base)");
    CheckSerialNoQty;
Table<Reservation Entry>.PROCEDURE<OnAfterClearItemTrackingFields>
  Raised in: Table<Reservation Entry>.PROCEDURE<ClearItemTrackingFields>
    Code lines:
    "Lot No." := '';
    "Serial No." := '';
    UpdateItemTracking;
    
    OnAfterClearItemTrackingFields(Rec); <=====================
Table<Reservation Entry>.PROCEDURE<OnAfterClearTracking>
  Raised in: Table<Reservation Entry>.PROCEDURE<ClearTracking>
    Code lines:
    "Serial No." := '';
    "Lot No." := '';
    "Warranty Date" := 0D;
    "Expiration Date" := 0D;
    
    OnAfterClearTracking(Rec); <=====================
Table<Reservation Entry>.PROCEDURE<OnAfterCopyTrackingFromItemLedgEntry>
  Raised in: Table<Reservation Entry>.PROCEDURE<CopyTrackingFromItemLedgEntry>
    Code lines:
    "Serial No." := ItemLedgerEntry."Serial No.";
    "Lot No." := ItemLedgerEntry."Lot No.";
    
    OnAfterCopyTrackingFromItemLedgEntry(Rec,ItemLedgerEntry); <=====================
Table<Reservation Entry>.PROCEDURE<OnAfterCopyTrackingFromReservEntry>
  Raised in: Table<Reservation Entry>.PROCEDURE<CopyTrackingFromReservEntry>
    Code lines:
    "Serial No." := ReservationEntry."Serial No.";
    "Lot No." := ReservationEntry."Lot No.";
    
    OnAfterCopyTrackingFromReservEntry(Rec,ReservationEntry); <=====================
Table<Reservation Entry>.PROCEDURE<OnAfterCopyTrackingFromTrackingSpec>
  Raised in: Table<Reservation Entry>.PROCEDURE<CopyTrackingFromSpec>
    Code lines:
    "Serial No." := TrackingSpecification."Serial No.";
    "Lot No." := TrackingSpecification."Lot No.";
    "Warranty Date" := TrackingSpecification."Warranty Date";
    "Expiration Date" := TrackingSpecification."Expiration Date";
    
    OnAfterCopyTrackingFromTrackingSpec(Rec,TrackingSpecification); <=====================
Table<Reservation Entry>.PROCEDURE<OnAfterCopyTrackingFromWhseActivLine>
  Raised in: Table<Reservation Entry>.PROCEDURE<CopyTrackingFromWhseActivLine>
    Code lines:
    "Serial No." := WarehouseActivityLine."Serial No.";
    "Lot No." := WarehouseActivityLine."Lot No.";
    "Expiration Date" := WarehouseActivityLine."Expiration Date";
    
    OnAfterCopyTrackingFromWhseActivLine(Rec,WarehouseActivityLine); <=====================
Table<Reservation Entry>.PROCEDURE<OnAfterSetTrackingFilterFromItemJnlLine>
  Raised in: Table<Reservation Entry>.PROCEDURE<SetTrackingFilterFromItemJnlLine>
    Code lines:
    SETRANGE("Serial No.",ItemJournalLine."Serial No.");
    SETRANGE("Lot No.",ItemJournalLine."Lot No.");
    
    OnAfterSetTrackingFilterFromItemJnlLine(Rec,ItemJournalLine); <=====================
Table<Reservation Entry>.PROCEDURE<OnAfterSetTrackingFilterFromReservEntry>
  Raised in: Table<Reservation Entry>.PROCEDURE<SetTrackingFilterFromReservEntry>
    Code lines:
    SETRANGE("Serial No.",ReservEntry."Serial No.");
    SETRANGE("Lot No.",ReservEntry."Lot No.");
    
    OnAfterSetTrackingFilterFromReservEntry(Rec,ReservEntry); <=====================
Table<Reservation Entry>.PROCEDURE<OnAfterSetTrackingFilterFromTrackingSpec>
  Raised in: Table<Reservation Entry>.PROCEDURE<SetTrackingFilterFromSpec>
    Code lines:
    SETRANGE("Serial No.",TrackingSpecification."Serial No.");
    SETRANGE("Lot No.",TrackingSpecification."Lot No.");
    
    OnAfterSetTrackingFilterFromTrackingSpec(Rec,TrackingSpecification); <=====================
Table<Reservation Entry>.PROCEDURE<OnAfterSetTrackingFilterFromWhseSpec>
  Raised in: Table<Reservation Entry>.PROCEDURE<SetTrackingFilterFromWhseSpec>
    Code lines:
    SETRANGE("Serial No.",WhseItemTrackingLine."Serial No.");
    SETRANGE("Lot No.",WhseItemTrackingLine."Lot No.");
    
    OnAfterSetTrackingFilterFromWhseSpec(Rec,WhseItemTrackingLine); <=====================
Table<Reservation Entry>.PROCEDURE<OnAfterTextCaption>
  Raised in: Table<Reservation Entry>.PROCEDURE<TextCaption>
    Code lines:
    ...
      DATABASE::"Transfer Line":
        EXIT(TransLine.TABLECAPTION);
      DATABASE::"Service Line":
        EXIT(ServLine.TABLECAPTION);
      ELSE BEGIN
        OnAfterTextCaption("Source Type",ExtensionTextCaption); <=====================
        IF ExtensionTextCaption <> '' THEN
          EXIT(ExtensionTextCaption);
        EXIT(Text001);
      END;
Table<Reservation Entry>.PROCEDURE<OnBeforeSummEntryNo>
  Raised in: Table<Reservation Entry>.PROCEDURE<SummEntryNo>
    Code lines:
    IsHandled := FALSE;
    OnBeforeSummEntryNo(Rec,ReturnValue,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(ReturnValue);
    
    CASE "Source Type" OF
      DATABASE::"Item Ledger Entry":
        EXIT(1);
      DATABASE::"Purchase Line":
        EXIT(11 + "Source Subtype");
    ...
Table<Dimension>.PROCEDURE<OnBeforeCheckIfDimUsed>
  Raised in: Table<Dimension>.PROCEDURE<CheckIfDimUsed>
    Code lines:
    IF DimChecked = '' THEN
      EXIT;
    
    OnBeforeCheckIfDimUsed(DimChecked,DimTypeChecked,UsedAsCustomDim,CustomDimErr); <=====================
    
    CheckAllDim := DimTypeChecked IN [DimTypeChecked::" "];
    CheckGlobalDim := DimTypeChecked IN [DimTypeChecked::Global1,DimTypeChecked::Global2];
    CheckShortcutDim := DimTypeChecked IN [DimTypeChecked::Shortcut3,DimTypeChecked::Shortcut4,DimTypeChecked::Shortcut5,
                                           DimTypeChecked::Shortcut6,DimTypeChecked::Shortcut7,DimTypeChecked::Shortcut8];
    CheckBudgetDim := DimTypeChecked IN [DimTypeChecked::Budget1,DimTypeChecked::Budget2,DimTypeChecked::Budget3,
    ...
Table<Default Dimension>.PROCEDURE<OnAfterUpdateGlobalDimCode>
  Raised in: Table<Default Dimension>.PROCEDURE<UpdateGlobalDimCode>
    Code lines:
    ...
      DATABASE::"Cash Flow Manual Expense":
        UpdateNeutrPayGlobalDimCode(GlobalDimCodeNo,AccNo,NewDimValue);
      DATABASE::"Cash Flow Manual Revenue":
        UpdateNeutrRevGlobalDimCode(GlobalDimCodeNo,AccNo,NewDimValue);
      ELSE
        OnAfterUpdateGlobalDimCode(GlobalDimCodeNo,TableID,AccNo,NewDimValue); <=====================
    END;
Table<Sales Header>.PROCEDURE<OnAfterAppliesToDocNoOnLookup>
  Raised in: Table<Sales Header>.Field<Applies-to Doc. No.>.<OnLookup>
    Code lines:
    ...
      ApplyCustEntries.GetCustLedgEntry(CustLedgEntry);
      GenJnlApply.CheckAgainstApplnCurrency(
        "Currency Code",CustLedgEntry."Currency Code",GenJnlLine."Account Type"::Customer,TRUE);
      "Applies-to Doc. Type" := CustLedgEntry."Document Type";
      "Applies-to Doc. No." := CustLedgEntry."Document No.";
      OnAfterAppliesToDocNoOnLookup(Rec,CustLedgEntry); <=====================
    END;
    CLEAR(ApplyCustEntries);
Table<Sales Header>.PROCEDURE<OnAfterChangePricesIncludingVAT>
  Raised in: Table<Sales Header>.Field<Prices Including VAT>.<OnValidate>
    Code lines:
    ...
          END;
          OnValidatePricesIncludingVATOnBeforeSalesLineModify(Rec,SalesLine,Currency,RecalculatePrice);
          SalesLine.MODIFY;
        UNTIL SalesLine.NEXT = 0;
      END;
      OnAfterChangePricesIncludingVAT(Rec); <=====================
    END;
Table<Sales Header>.PROCEDURE<OnAfterCheckBillToCust>
  Raised in: Table<Sales Header>.Field<Bill-to Customer No.>.<OnValidate>
    Code lines:
    ...
    GetCust("Bill-to Customer No.");
    Cust.CheckBlockedCustOnDocs(Cust,"Document Type",FALSE,FALSE);
    Cust.TESTFIELD("Customer Posting Group");
    PostingSetupMgt.CheckCustPostingGroupReceivablesAccount("Customer Posting Group");
    CheckCreditLimit;
    OnAfterCheckBillToCust(Rec,xRec,Cust); <=====================
    
    CopyBillToCustomerAddressFieldsFromCustomer(Cust);
    
    IF NOT BilltoCustomerNoChanged THEN
    ...
Table<Sales Header>.PROCEDURE<OnAfterCheckCreditLimitCondition>
  Raised in: Table<Sales Header>.PROCEDURE<CheckCreditLimitCondition>
    Code lines:
    RunCheck := ("Document Type" <= "Document Type"::Invoice) OR ("Document Type" = "Document Type"::"Blanket Order");
    OnAfterCheckCreditLimitCondition(Rec,RunCheck); <=====================
    EXIT(RunCheck);
Table<Sales Header>.PROCEDURE<OnAfterCheckCreditMaxBeforeInsert>
  Raised in: Table<Sales Header>.PROCEDURE<CheckCreditMaxBeforeInsert>
    Code lines:
    ...
            SalesHeader."Bill-to Customer No." := Cust."No.";
          CustCheckCreditLimit.SalesHeaderCheck(SalesHeader);
        END;
      END;
    
    OnAfterCheckCreditMaxBeforeInsert(Rec); <=====================
Table<Sales Header>.PROCEDURE<OnAfterCheckSellToCust>
  Raised in: Table<Sales Header>.Field<Sell-to Customer No.>.<OnValidate>
    Code lines:
    ...
    END;
    
    GetCust("Sell-to Customer No.");
    Cust.CheckBlockedCustOnDocs(Cust,"Document Type",FALSE,FALSE);
    Cust.TESTFIELD("Gen. Bus. Posting Group");
    OnAfterCheckSellToCust(Rec,xRec,Cust); <=====================
    
    CopySellToCustomerAddressFieldsFromCustomer(Cust);
    
    IF "Sell-to Customer No." = xRec."Sell-to Customer No." THEN
    ...
Table<Sales Header>.PROCEDURE<OnAfterCheckShippingAdvice>
  Raised in: Table<Sales Header>.PROCEDURE<CheckShippingAdvice>
    Code lines:
    ...
        END;
      UNTIL SalesLine.NEXT = 0;
    IF QtyToShipBaseTotal = 0 THEN
      Result := TRUE;
    
    OnAfterCheckShippingAdvice(Rec,Result); <=====================
    IF NOT Result THEN
      ERROR(ShippingAdviceErr);
Table<Sales Header>.PROCEDURE<OnAfterConfirmSalesPrice>
  Raised in: Table<Sales Header>.Field<Prices Including VAT>.<OnValidate>
    Code lines:
    ...
            ConfirmManagement.ConfirmProcess(
              STRSUBSTNO(
                Text024,
                FIELDCAPTION("Prices Including VAT"),SalesLine.FIELDCAPTION("Unit Price")),
              TRUE);
        OnAfterConfirmSalesPrice(Rec,SalesLine,RecalculatePrice); <=====================
        SalesLine.SetSalesHeader(Rec);
    
        IF "Currency Code" = '' THEN
          Currency.InitRoundingPrecision
    ...
Table<Sales Header>.PROCEDURE<OnAfterCopyFromSellToCustTemplate>
  Raised in: Table<Sales Header>.PROCEDURE<CopyFromSellToCustTemplate>
    Code lines:
    ...
    "Gen. Bus. Posting Group" := SellToCustTemplate."Gen. Bus. Posting Group";
    "VAT Bus. Posting Group" := SellToCustTemplate."VAT Bus. Posting Group";
    IF "Bill-to Customer No." = '' THEN
      VALIDATE("Bill-to Customer Template Code","Sell-to Customer Template Code");
    
    OnAfterCopyFromSellToCustTemplate(Rec,SellToCustTemplate); <=====================
Table<Sales Header>.PROCEDURE<OnAfterCopySellToAddressToBillToAddress>
  Raised in: Table<Sales Header>.PROCEDURE<CopySellToAddressToBillToAddress>
    Code lines:
    ...
      "Bill-to Address 2" := "Sell-to Address 2";
      "Bill-to Post Code" := "Sell-to Post Code";
      "Bill-to Country/Region Code" := "Sell-to Country/Region Code";
      "Bill-to City" := "Sell-to City";
      "Bill-to County" := "Sell-to County";
      OnAfterCopySellToAddressToBillToAddress(Rec); <=====================
    END;
Table<Sales Header>.PROCEDURE<OnAfterCopySellToAddressToShipToAddress>
  Raised in: Table<Sales Header>.PROCEDURE<CopySellToAddressToShipToAddress>
    Code lines:
    ...
    "Ship-to Contact" := "Sell-to Contact";
    "Ship-to Country/Region Code" := "Sell-to Country/Region Code";
    "Ship-to County" := "Sell-to County";
    "Ship-to Post Code" := "Sell-to Post Code";
    
    OnAfterCopySellToAddressToShipToAddress(Rec); <=====================
Table<Sales Header>.PROCEDURE<OnAfterCopySellToCustomerAddressFieldsFromCustomer>
  Raised in: Table<Sales Header>.PROCEDURE<CopySellToCustomerAddressFieldsFromCustomer>
    Code lines:
    ...
    "Shipping Advice" := SellToCustomer."Shipping Advice";
    "Responsibility Center" := UserSetupMgt.GetRespCenter(0,SellToCustomer."Responsibility Center");
    OnCopySelltoCustomerAddressFieldsFromCustomerOnAfterAssignRespCenter(Rec,SellToCustomer,CurrFieldNo);
    UpdateLocationCode(SellToCustomer."Location Code");
    
    OnAfterCopySellToCustomerAddressFieldsFromCustomer(Rec,SellToCustomer,CurrFieldNo); <=====================
Table<Sales Header>.PROCEDURE<OnAfterCopyShipToCustomerAddressFieldsFromCustomer>
  Raised in: Table<Sales Header>.PROCEDURE<CopyShipToCustomerAddressFieldsFromCustomer>
    Code lines:
    ...
    IF Cust."Location Code" <> '' THEN
      VALIDATE("Location Code",Cust."Location Code");
    "Shipping Agent Code" := Cust."Shipping Agent Code";
    "Shipping Agent Service Code" := Cust."Shipping Agent Service Code";
    
    OnAfterCopyShipToCustomerAddressFieldsFromCustomer(Rec,SellToCustomer); <=====================
Table<Sales Header>.PROCEDURE<OnAfterCopyShipToCustomerAddressFieldsFromShipToAddr>
  Raised in: Table<Sales Header>.PROCEDURE<CopyShipToCustomerAddressFieldsFromShipToAddr>
    Code lines:
    ...
    "Shipping Agent Service Code" := ShipToAddr."Shipping Agent Service Code";
    IF ShipToAddr."Tax Area Code" <> '' THEN
      "Tax Area Code" := ShipToAddr."Tax Area Code";
    "Tax Liable" := ShipToAddr."Tax Liable";
    
    OnAfterCopyShipToCustomerAddressFieldsFromShipToAddr(Rec,ShipToAddr); <=====================
Table<Sales Header>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Sales Header>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[3] := No3;
    TableID[4] := Type4;
    No[4] := No4;
    TableID[5] := Type5;
    No[5] := No5;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    OldDimSetID := "Dimension Set ID";
    ...
Table<Sales Header>.PROCEDURE<OnAfterCreateSalesLine>
  Raised in: Table<Sales Header>.PROCEDURE<CreateSalesLine>
    Code lines:
    ...
      END;
      SalesLine.VALIDATE("Shipment Date",TempSalesLine."Shipment Date");
    END;
    OnBeforeSalesLineInsert(SalesLine,TempSalesLine);
    SalesLine.INSERT;
    OnAfterCreateSalesLine(SalesLine,TempSalesLine); <=====================
Table<Sales Header>.PROCEDURE<OnAfterDeleteAllTempSalesLines>
  Raised in: Table<Sales Header>.PROCEDURE<RecreateSalesLines>
    Code lines:
    ...
    
        CreateItemChargeAssgntSales(TempItemChargeAssgntSales,TempSalesLine,TempInteger);
    
        TempSalesLine.SETRANGE(Type);
        TempSalesLine.DELETEALL;
        OnAfterDeleteAllTempSalesLines; <=====================
        ClearItemAssgntSalesFilter(TempItemChargeAssgntSales);
        TempItemChargeAssgntSales.DELETEALL;
      END;
    END ELSE
    ...
Table<Sales Header>.PROCEDURE<OnAfterGetNoSeriesCode>
  Raised in: Table<Sales Header>.PROCEDURE<GetNoSeriesCode>
    Code lines:
    ...
      "Document Type"::"Credit Memo":
        NoSeriesCode := SalesSetup."Credit Memo Nos.";
      "Document Type"::"Blanket Order":
        NoSeriesCode := SalesSetup."Blanket Order Nos.";
    END;
    OnAfterGetNoSeriesCode(Rec,SalesSetup,NoSeriesCode); <=====================
    EXIT(NoSeriesMgt.GetNoSeriesWithCheck(NoSeriesCode,SelectNoSeriesAllowed,"No. Series"));
Table<Sales Header>.PROCEDURE<OnAfterGetPostingNoSeriesCode>
  Raised in: Table<Sales Header>.PROCEDURE<GetPostingNoSeriesCode>
    Code lines:
    ...
    IF IsCreditDocType THEN
      PostingNos := SalesSetup."Posted Credit Memo Nos."
    ELSE
      PostingNos := SalesSetup."Posted Invoice Nos.";
    
    OnAfterGetPostingNoSeriesCode(Rec,PostingNos); <=====================
Table<Sales Header>.PROCEDURE<OnAfterGetPrepaymentPostingNoSeriesCode>
  Raised in: Table<Sales Header>.PROCEDURE<GetPostingPrepaymentNoSeriesCode>
    Code lines:
    IF IsCreditDocType THEN
      PostingNos := SalesSetup."Posted Prepmt. Cr. Memo Nos."
    ELSE
      PostingNos := SalesSetup."Posted Prepmt. Inv. Nos.";
    
    OnAfterGetPrepaymentPostingNoSeriesCode(Rec,PostingNos); <=====================
Table<Sales Header>.PROCEDURE<OnAfterInitNoSeries>
  Raised in: Table<Sales Header>.PROCEDURE<InitNoSeries>
    Code lines:
    ...
    IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
      "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
      "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
    END;
    
    OnAfterInitNoSeries(Rec); <=====================
Table<Sales Header>.PROCEDURE<OnAfterInitRecord>
  Raised in: Table<Sales Header>.PROCEDURE<InitRecord>
    Code lines:
    ...
    UpdateOutboundWhseHandlingTime;
    
    "Responsibility Center" := UserSetupMgt.GetRespCenter(0,"Responsibility Center");
    "Doc. No. Occurrence" := ArchiveManagement.GetNextOccurrenceNo(DATABASE::"Sales Header","Document Type","No.");
    
    OnAfterInitRecord(Rec); <=====================
Table<Sales Header>.PROCEDURE<OnAfterInsertTempSalesLine>
  Raised in: Table<Sales Header>.PROCEDURE<RecreateReservEntryReqLine>
    Code lines:
    ...
        TempATOLink.INSERT;
        ATOLink.DELETE;
      END;
    
      TempSalesLine.INSERT;
      OnAfterInsertTempSalesLine(SalesLine,TempSalesLine); <=====================
      SalesLineReserve.CopyReservEntryToTemp(TempReservEntry,SalesLine);
      RecreateReqLine(SalesLine,0,TRUE);
    UNTIL SalesLine.NEXT = 0;
Table<Sales Header>.PROCEDURE<OnAfterIsApprovedForPosting>
  Raised in: Table<Sales Header>.PROCEDURE<IsApprovedForPosting>
    Code lines:
    ...
        ERROR(PrepaymentInvoicesNotPaidErr,"Document Type","No.");
      IF "Document Type" = "Document Type"::Order THEN
        IF PrepaymentMgt.TestSalesPayment(Rec) THEN
          ERROR(Text072,"Document Type","No.");
      Approved := TRUE;
      OnAfterIsApprovedForPosting(Rec,Approved); <=====================
      EXIT(Approved);
    END;
Table<Sales Header>.PROCEDURE<OnAfterIsApprovedForPostingBatch>
  Raised in: Table<Sales Header>.PROCEDURE<IsApprovedForPostingBatch>
    Code lines:
    ...
      IF PrepaymentMgt.TestSalesPrepayment(Rec) THEN
        Approved := FALSE;
      IF PrepaymentMgt.TestSalesPayment(Rec) THEN
        Approved := FALSE;
      Approved := TRUE;
      OnAfterIsApprovedForPostingBatch(Rec,Approved); <=====================
      EXIT(Approved);
    END;
Table<Sales Header>.PROCEDURE<OnAfterIsShipToAddressEqualToSellToAddress>
  Raised in: Table<Sales Header>.PROCEDURE<IsShipToAddressEqualToSellToAddress>
    Code lines:
    ...
      (SalesHeaderWithSellTo."Sell-to County" = SalesHeaderWithShipTo."Ship-to County") AND
      (SalesHeaderWithSellTo."Sell-to Post Code" = SalesHeaderWithShipTo."Ship-to Post Code") AND
      (SalesHeaderWithSellTo."Sell-to Country/Region Code" = SalesHeaderWithShipTo."Ship-to Country/Region Code") AND
      (SalesHeaderWithSellTo."Sell-to Contact" = SalesHeaderWithShipTo."Ship-to Contact");
    
    OnAfterIsShipToAddressEqualToSellToAddress(SalesHeaderWithSellTo,SalesHeaderWithShipTo,Result); <=====================
    EXIT(Result);
Table<Sales Header>.PROCEDURE<OnAfterRecreateSalesLine>
  Raised in: Table<Sales Header>.PROCEDURE<RecreateSalesLines>
    Code lines:
    ...
        SalesLine.BlockDynamicTracking(TRUE);
        REPEAT
          IF TempSalesLine."Attached to Line No." = 0 THEN BEGIN
            CreateSalesLine(TempSalesLine);
            ExtendedTextAdded := FALSE;
            OnAfterRecreateSalesLine(SalesLine,TempSalesLine); <=====================
    
            IF SalesLine.Type = SalesLine.Type::Item THEN
              RecreateSalesLinesFillItemChargeAssignment(SalesLine,TempSalesLine,TempItemChargeAssgntSales);
    
    ...
Table<Sales Header>.PROCEDURE<OnAfterSalesQuoteAccepted>
  Raised in: Table<Sales Header>.Field<Quote Accepted>.<OnValidate>
    Code lines:
    IF "Quote Accepted" THEN BEGIN
      "Quote Accepted Date" := WORKDATE;
      OnAfterSalesQuoteAccepted(Rec); <=====================
    END ELSE
      "Quote Accepted Date" := 0D;
Table<Sales Header>.PROCEDURE<OnAfterSendSalesHeader>
  Raised in: Table<Sales Header>.PROCEDURE<EmailRecords>
    Code lines:
    ...
        DocumentSendingProfile.TrySendToEMail(
          DummyReportSelections.Usage::"S.Invoice Draft",Rec,FIELDNO("No."),
          GetDocTypeTxt,FIELDNO("Bill-to Customer No."),ShowDialog);
    END;
    
    OnAfterSendSalesHeader(Rec,ShowDialog); <=====================
Table<Sales Header>.PROCEDURE<OnAfterSetApplyToFilters>
  Raised in: Table<Sales Header>.Field<Applies-to Doc. No.>.<OnLookup>
    Code lines:
    TESTFIELD("Bal. Account No.",'');
    CustLedgEntry.SetApplyToFilters("Bill-to Customer No.","Applies-to Doc. Type","Applies-to Doc. No.",Amount);
    OnAfterSetApplyToFilters(CustLedgEntry,Rec); <=====================
    
    ApplyCustEntries.SetSales(Rec,CustLedgEntry,SalesHeader.FIELDNO("Applies-to Doc. No."));
    ApplyCustEntries.SETTABLEVIEW(CustLedgEntry);
    ApplyCustEntries.SETRECORD(CustLedgEntry);
    ApplyCustEntries.LOOKUPMODE(TRUE);
    IF ApplyCustEntries.RUNMODAL = ACTION::LookupOK THEN BEGIN
      ApplyCustEntries.GetCustLedgEntry(CustLedgEntry);
    ...
Table<Sales Header>.PROCEDURE<OnAfterSetFieldsBilltoCustomer>
  Raised in: Table<Sales Header>.PROCEDURE<CopyBillToCustomerAddressFieldsFromCustomer>
    Code lines:
    ...
    IF "Document Type" = "Document Type"::Order THEN
      "Prepayment %" := BillToCustomer."Prepayment %";
    "Tax Area Code" := BillToCustomer."Tax Area Code";
    "Tax Liable" := BillToCustomer."Tax Liable";
    
    OnAfterSetFieldsBilltoCustomer(Rec,BillToCustomer); <=====================
Table<Sales Header>.PROCEDURE<OnAfterTestNoSeries>
  Raised in: Table<Sales Header>.PROCEDURE<TestNoSeries>
    Code lines:
    ...
          END;
        "Document Type"::"Blanket Order":
          SalesSetup.TESTFIELD("Blanket Order Nos.");
      END;
    
    OnAfterTestNoSeries(Rec); <=====================
Table<Sales Header>.PROCEDURE<OnAfterTestQuantityShippedField>
  Raised in: Table<Sales Header>.PROCEDURE<TestQuantityShippedField>
    Code lines:
    SalesLine.TESTFIELD("Quantity Shipped",0);
    OnAfterTestQuantityShippedField(SalesLine); <=====================
Table<Sales Header>.PROCEDURE<OnAfterTestStatusOpen>
  Raised in: Table<Sales Header>.PROCEDURE<TestStatusOpen>
    Code lines:
    ...
    IF StatusCheckSuspended THEN
      EXIT;
    
    TESTFIELD(Status,Status::Open);
    
    OnAfterTestStatusOpen(Rec); <=====================
Table<Sales Header>.PROCEDURE<OnAfterTransferExtendedTextForSalesLineRecreation>
  Raised in: Table<Sales Header>.PROCEDURE<RecreateSalesLines>
    Code lines:
    ...
            END;
          END ELSE
            IF NOT ExtendedTextAdded THEN BEGIN
              TransferExtendedText.SalesCheckIfAnyExtText(SalesLine,TRUE);
              TransferExtendedText.InsertSalesExtText(SalesLine);
              OnAfterTransferExtendedTextForSalesLineRecreation(SalesLine,TempSalesLine); <=====================
    
              SalesLine.FINDLAST;
              ExtendedTextAdded := TRUE;
            END;
    ...
Table<Sales Header>.PROCEDURE<OnAfterUpdateBillToCont>
  Raised in: Table<Sales Header>.PROCEDURE<UpdateBillToCont>
    Code lines:
    ...
    END;
    IF "Bill-to Contact No." <> '' THEN
      IF Contact.GET("Bill-to Contact No.") THEN
        Contact.CheckIfPrivacyBlockedGeneric;
    
    OnAfterUpdateBillToCont(Rec,Cust,Contact); <=====================
Table<Sales Header>.PROCEDURE<OnAfterUpdateCurrencyFactor>
  Raised in: Table<Sales Header>.PROCEDURE<UpdateCurrencyFactor>
    Code lines:
    ...
      "Currency Factor" := 0;
      IF "Currency Code" <> xRec."Currency Code" THEN
        RecreateSalesLines(FIELDCAPTION("Currency Code"));
    END;
    
    OnAfterUpdateCurrencyFactor(Rec,GetHideValidationDialog); <=====================
Table<Sales Header>.PROCEDURE<OnAfterUpdateSalesLines>
  Raised in: Table<Sales Header>.PROCEDURE<UpdateSalesLines>
    Code lines:
    ...
    Field.FIND('-');
    IF Field.NEXT <> 0 THEN
      ERROR(DuplicatedCaptionsNotAllowedErr);
    UpdateSalesLinesByFieldNo(Field."No.",AskQuestion);
    
    OnAfterUpdateSalesLines(Rec); <=====================
Table<Sales Header>.PROCEDURE<OnAfterUpdateSellToCont>
  Raised in: Table<Sales Header>.PROCEDURE<UpdateSellToCont>
    Code lines:
    ...
      END;
    IF "Sell-to Contact No." <> '' THEN
      IF OfficeContact.GET("Sell-to Contact No.") THEN
        OfficeContact.CheckIfPrivacyBlockedGeneric;
    
    OnAfterUpdateSellToCont(Rec,Cust,OfficeContact); <=====================
Table<Sales Header>.PROCEDURE<OnAfterUpdateSellToCust>
  Raised in: Table<Sales Header>.PROCEDURE<UpdateSellToCust>
    Code lines:
    ...
    IF ("Sell-to Customer No." = "Bill-to Customer No.") OR
       ("Bill-to Customer No." = '')
    THEN
      VALIDATE("Bill-to Contact No.","Sell-to Contact No.");
    
    OnAfterUpdateSellToCust(Rec,Cont); <=====================
Table<Sales Header>.PROCEDURE<OnAfterUpdateShipToAddress>
  Raised in: Table<Sales Header>.PROCEDURE<UpdateShipToAddress>
    Code lines:
    ...
          CompanyInfo."Ship-to City",CompanyInfo."Ship-to Post Code",CompanyInfo."Ship-to County",
          CompanyInfo."Ship-to Country/Region Code");
        "Ship-to Contact" := CompanyInfo."Ship-to Contact";
      END;
    
    OnAfterUpdateShipToAddress(Rec,xRec,CurrFieldNo); <=====================
Table<Sales Header>.PROCEDURE<OnAfterValidateShortcutDimCode>
  Raised in: Table<Sales Header>.PROCEDURE<ValidateShortcutDimCode>
    Code lines:
    ...
      MODIFY;
      IF SalesLinesExist THEN
        UpdateAllLineDim("Dimension Set ID",OldDimSetID);
    END;
    
    OnAfterValidateShortcutDimCode(Rec,xRec,FieldNumber,ShortcutDimCode); <=====================
Table<Sales Header>.PROCEDURE<OnBeforeCheckCreditLimit>
  Raised in: Table<Sales Header>.PROCEDURE<CheckCreditLimit>
    Code lines:
    ...
          SalesLine.CALCSUMS("Outstanding Amount","Shipped Not Invoiced");
          "Amount Including VAT" := SalesLine."Outstanding Amount" + SalesLine."Shipped Not Invoiced";
        END;
    
      IsHandled := FALSE;
      OnBeforeCheckCreditLimit(Rec,IsHandled); <=====================
      IF NOT IsHandled THEN
        CustCheckCreditLimit.SalesHeaderCheck(Rec);
    
      CALCFIELDS("Amount Including VAT");
Table<Sales Header>.PROCEDURE<OnBeforeCheckCreditLimitIfLineNotInsertedYet>
  Raised in: Table<Sales Header>.PROCEDURE<CheckCreditLimitIfLineNotInsertedYet>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckCreditLimitIfLineNotInsertedYet(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF "No." = '' THEN BEGIN
      HideCreditCheckDialogue := FALSE;
      CheckCreditMaxBeforeInsert;
      HideCreditCheckDialogue := TRUE;
    END;
Table<Sales Header>.PROCEDURE<OnBeforeCheckCreditMaxBeforeInsert>
  Raised in: Table<Sales Header>.PROCEDURE<CheckCreditMaxBeforeInsert>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckCreditMaxBeforeInsert(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF HideCreditCheckDialogue THEN
      EXIT;
    
    IF (GetFilterCustNo <> '') OR ("Sell-to Customer No." <> '') THEN BEGIN
      IF "Sell-to Customer No." <> '' THEN
    ...
Table<Sales Header>.PROCEDURE<OnBeforeConfirmBillToContactNoChange>
  Raised in: Table<Sales Header>.Field<Bill-to Contact No.>.<OnValidate>
    Code lines:
    ...
    
    IF ("Bill-to Contact No." <> xRec."Bill-to Contact No.") AND
       (xRec."Bill-to Contact No." <> '')
    THEN BEGIN
      IsHandled := FALSE;
      OnBeforeConfirmBillToContactNoChange(Rec,xRec,CurrFieldNo,Confirmed,IsHandled); <=====================
      IF NOT IsHandled THEN
        IF GetHideValidationDialog OR (NOT GUIALLOWED) THEN
          Confirmed := TRUE
        ELSE
    ...
Table<Sales Header>.PROCEDURE<OnBeforeConfirmUpdateCurrencyFactor>
  Raised in: Table<Sales Header>.PROCEDURE<ConfirmUpdateCurrencyFactor>
    Code lines:
    OnBeforeConfirmUpdateCurrencyFactor(Rec,HideValidationDialog); <=====================
    
    IF GetHideValidationDialog OR NOT GUIALLOWED THEN
      Confirmed := TRUE
    ELSE
      Confirmed := CONFIRM(Text021,FALSE);
    IF Confirmed THEN
      VALIDATE("Currency Factor")
    ELSE
      "Currency Factor" := xRec."Currency Factor";
Table<Sales Header>.PROCEDURE<OnBeforeCopyShipToCustomerAddressFieldsFromCustomer>
  Raised in: Table<Sales Header>.PROCEDURE<CopyShipToCustomerAddressFieldsFromCustomer>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCopyShipToCustomerAddressFieldsFromCustomer(Rec,SellToCustomer,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    "Ship-to Name" := Cust.Name;
    "Ship-to Name 2" := Cust."Name 2";
    IF SellToCustomerIsReplaced OR ShipToAddressEqualsOldSellToAddress THEN BEGIN
      "Ship-to Address" := SellToCustomer.Address;
      "Ship-to Address 2" := SellToCustomer."Address 2";
    ...
Table<Sales Header>.PROCEDURE<OnBeforeCopyShipToCustomerAddressFieldsFromShipToAddr>
  Raised in: Table<Sales Header>.PROCEDURE<CopyShipToCustomerAddressFieldsFromShipToAddr>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCopyShipToCustomerAddressFieldsFromShipToAddr(Rec,ShipToAddr,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    "Ship-to Name" := ShipToAddr.Name;
    "Ship-to Name 2" := ShipToAddr."Name 2";
    "Ship-to Address" := ShipToAddr.Address;
    "Ship-to Address 2" := ShipToAddr."Address 2";
    "Ship-to City" := ShipToAddr.City;
    ...
Table<Sales Header>.PROCEDURE<OnBeforeGetNoSeriesCode>
  Raised in: Table<Sales Header>.PROCEDURE<GetNoSeriesCode>
    Code lines:
    SalesSetup.GET;
    IsHandled := FALSE;
    OnBeforeGetNoSeriesCode(Rec,SalesSetup,NoSeriesCode,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    CASE "Document Type" OF
      "Document Type"::Quote:
        NoSeriesCode := SalesSetup."Quote Nos.";
      "Document Type"::Order:
    ...
Table<Sales Header>.PROCEDURE<OnBeforeGetPostingNoSeriesCode>
  Raised in: Table<Sales Header>.PROCEDURE<GetPostingNoSeriesCode>
    Code lines:
    SalesSetup.GET;
    IsHandled := FALSE;
    OnBeforeGetPostingNoSeriesCode(Rec,SalesSetup,PostingNos,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF IsCreditDocType THEN
      PostingNos := SalesSetup."Posted Credit Memo Nos."
    ELSE
      PostingNos := SalesSetup."Posted Invoice Nos.";
    ...
Table<Sales Header>.PROCEDURE<OnBeforeInitInsert>
  Raised in: Table<Sales Header>.PROCEDURE<InitInsert>
    Code lines:
    IsHandled := FALSE;
    OnBeforeInitInsert(Rec,xRec,IsHandled); <=====================
    IF NOT IsHandled THEN
      IF "No." = '' THEN BEGIN
        TestNoSeries;
        NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series","Posting Date","No.","No. Series");
      END;
    
    OnInitInsertOnBeforeInitRecord(Rec,xRec);
    InitRecord;
Table<Sales Header>.PROCEDURE<OnBeforeInitRecord>
  Raised in: Table<Sales Header>.PROCEDURE<InitRecord>
    Code lines:
    SalesSetup.GET;
    IsHandled := FALSE;
    OnBeforeInitRecord(Rec,IsHandled); <=====================
    IF NOT IsHandled THEN
      CASE "Document Type" OF
        "Document Type"::Quote,"Document Type"::Order:
          BEGIN
            NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Invoice Nos.");
            NoSeriesMgt.SetDefaultSeries("Shipping No. Series",SalesSetup."Posted Shipment Nos.");
            IF "Document Type" = "Document Type"::Order THEN BEGIN
    ...
Table<Sales Header>.PROCEDURE<OnBeforeIsCreditDocType>
  Raised in: Table<Sales Header>.PROCEDURE<IsCreditDocType>
    Code lines:
    CreditDocType := "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"];
    OnBeforeIsCreditDocType(Rec,CreditDocType); <=====================
    EXIT(CreditDocType);
Table<Sales Header>.PROCEDURE<OnBeforeRecreateSalesLines>
  Raised in: Table<Sales Header>.PROCEDURE<RecreateSalesLines>
    Code lines:
    ...
    IF Confirmed THEN BEGIN
      SalesLine.LOCKTABLE;
      ItemChargeAssgntSales.LOCKTABLE;
      ReservEntry.LOCKTABLE;
      MODIFY;
      OnBeforeRecreateSalesLines(Rec); <=====================
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      OnRecreateSalesLinesOnAfterSetSalesLineFilters(SalesLine);
    ...
Table<Sales Header>.PROCEDURE<OnBeforeSalesLineByChangedFieldNo>
  Raised in: Table<Sales Header>.PROCEDURE<UpdateSalesLinesByFieldNo>
    Code lines:
    ...
    SalesLine.RESET;
    SalesLine.SETRANGE("Document Type","Document Type");
    SalesLine.SETRANGE("Document No.","No.");
    IF SalesLine.FINDSET THEN
      REPEAT
        OnBeforeSalesLineByChangedFieldNo(Rec,SalesLine,ChangedFieldNo,IsHandled); <=====================
        IF NOT IsHandled THEN
          CASE ChangedFieldNo OF
            FIELDNO("Shipment Date"):
              IF SalesLine."No." <> '' THEN
    ...
Table<Sales Header>.PROCEDURE<OnBeforeSalesLineInsert>
  Raised in: Table<Sales Header>.PROCEDURE<CreateSalesLine>
    Code lines:
    ...
        SalesLine."Purch. Order Line No." := TempSalesLine."Purch. Order Line No.";
        SalesLine."Drop Shipment" := SalesLine."Purch. Order Line No." <> 0;
      END;
      SalesLine.VALIDATE("Shipment Date",TempSalesLine."Shipment Date");
    END;
    OnBeforeSalesLineInsert(SalesLine,TempSalesLine); <=====================
    SalesLine.INSERT;
    OnAfterCreateSalesLine(SalesLine,TempSalesLine);
Table<Sales Header>.PROCEDURE<OnBeforeSetSecurityFilterOnRespCenter>
  Raised in: Table<Sales Header>.PROCEDURE<SetSecurityFilterOnRespCenter>
    Code lines:
    IsHandled := FALSE;
    OnBeforeSetSecurityFilterOnRespCenter(Rec,IsHandled); <=====================
    IF (NOT IsHandled) AND (UserSetupMgt.GetSalesFilter <> '') THEN BEGIN
      FILTERGROUP(2);
      SETRANGE("Responsibility Center",UserSetupMgt.GetSalesFilter);
      FILTERGROUP(0);
    END;
    
    SETRANGE("Date Filter",0D,WORKDATE - 1);
Table<Sales Header>.PROCEDURE<OnBeforeTestNoSeries>
  Raised in: Table<Sales Header>.PROCEDURE<TestNoSeries>
    Code lines:
    SalesSetup.GET;
    IsHandled := FALSE;
    OnBeforeTestNoSeries(Rec,IsHandled); <=====================
    IF NOT IsHandled THEN
      CASE "Document Type" OF
        "Document Type"::Quote:
          SalesSetup.TESTFIELD("Quote Nos.");
        "Document Type"::Order:
          SalesSetup.TESTFIELD("Order Nos.");
        "Document Type"::Invoice:
    ...
Table<Sales Header>.PROCEDURE<OnBeforeTestSalesLineFieldsBeforeRecreate>
  Raised in: Table<Sales Header>.PROCEDURE<TestSalesLineFieldsBeforeRecreate>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTestSalesLineFieldsBeforeRecreate(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SalesLine.TESTFIELD("Job No.",'');
    SalesLine.TESTFIELD("Job Contract Entry No.",0);
    SalesLine.TESTFIELD("Quantity Invoiced",0);
    SalesLine.TESTFIELD("Return Qty. Received",0);
    SalesLine.TESTFIELD("Shipment No.",'');
    ...
Table<Sales Header>.PROCEDURE<OnBeforeTestStatusOpen>
  Raised in: Table<Sales Header>.PROCEDURE<TestStatusOpen>
    Code lines:
    OnBeforeTestStatusOpen(Rec); <=====================
    
    IF StatusCheckSuspended THEN
      EXIT;
    
    TESTFIELD(Status,Status::Open);
    
    OnAfterTestStatusOpen(Rec);
Table<Sales Header>.PROCEDURE<OnBeforeUpdateAllLineDim>
  Raised in: Table<Sales Header>.PROCEDURE<UpdateAllLineDim>
    Code lines:
    IsHandled := FALSE;
    OnBeforeUpdateAllLineDim(Rec,NewParentDimSetID,OldParentDimSetID,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NewParentDimSetID = OldParentDimSetID THEN
      EXIT;
    IF NOT GetHideValidationDialog AND GUIALLOWED THEN
      IF NOT CONFIRM(Text064) THEN
        EXIT;
    ...
Table<Sales Header>.PROCEDURE<OnBeforeUpdateCurrencyFactor>
  Raised in: Table<Sales Header>.PROCEDURE<UpdateCurrencyFactor>
    Code lines:
    OnBeforeUpdateCurrencyFactor(Rec,Updated); <=====================
    IF Updated THEN
      EXIT;
    
    IF "Currency Code" <> '' THEN BEGIN
      IF "Posting Date" <> 0D THEN
        CurrencyDate := "Posting Date"
      ELSE
        CurrencyDate := WORKDATE;
    
    ...
Table<Sales Header>.PROCEDURE<OnBeforeUpdateLocationCode>
  Raised in: Table<Sales Header>.PROCEDURE<UpdateLocationCode>
    Code lines:
    IsHandled := FALSE;
    OnBeforeUpdateLocationCode(Rec,LocationCode,IsHandled); <=====================
    IF NOT IsHandled THEN
      VALIDATE("Location Code",UserSetupMgt.GetLocation(0,LocationCode,"Responsibility Center"));
Table<Sales Header>.PROCEDURE<OnBeforeUpdateSalesLinesByFieldNo>
  Raised in: Table<Sales Header>.PROCEDURE<UpdateSalesLinesByFieldNo>
    Code lines:
    IsHandled := FALSE;
    OnBeforeUpdateSalesLinesByFieldNo(Rec,ChangedFieldNo,AskQuestion,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT SalesLinesExist THEN
      EXIT;
    
    IF NOT Field.GET(DATABASE::"Sales Header",ChangedFieldNo) THEN
      Field.GET(DATABASE::"Sales Line",ChangedFieldNo);
    ...
Table<Sales Header>.PROCEDURE<OnCheckSalesPostRestrictions>
  Raised in: Codeunit<Sales-Post Prepayments>.PROCEDURE<CheckPrepmtDoc>
    Code lines:
    ...
      IF NOT CheckOpenPrepaymentLines(SalesHeader,DocumentType) THEN
        ERROR(Text001);
    
      CheckDimensions.CheckSalesPrepmtDim(SalesHeader);
      ErrorMessageMgt.Finish;
      OnCheckSalesPostRestrictions; <=====================
      Cust.GET("Sell-to Customer No.");
      Cust.CheckBlockedCustOnDocs(Cust,PrepmtDocTypeToDocType(DocumentType),FALSE,TRUE);
      IF "Bill-to Customer No." <> "Sell-to Customer No." THEN BEGIN
        Cust.GET("Bill-to Customer No.");
    ...
  Raised in: Codeunit<Sales-Quote to Order>.<OnRun>
    Code lines:
    OnBeforeOnRun(Rec);
    
    TESTFIELD("Document Type","Document Type"::Quote);
    ShouldRedistributeInvoiceAmount := SalesCalcDiscountByType.ShouldRedistributeInvoiceDiscountAmount(Rec);
    
    OnCheckSalesPostRestrictions; <=====================
    
    Cust.GET("Sell-to Customer No.");
    Cust.CheckBlockedCustOnDocs(Cust,"Document Type"::Order,TRUE,FALSE);
    IF "Sell-to Customer No." <> "Bill-to Customer No." THEN BEGIN
    ...
  Raised in: Codeunit<Sales-Post>.PROCEDURE<CheckPostRestrictions>
    Code lines:
    WITH SalesHeader DO BEGIN
      IF NOT PreviewMode THEN
        OnCheckSalesPostRestrictions; <=====================
    
      CheckCustBlockage(SalesHeader,"Sell-to Customer No.",TRUE);
      ValidateSalesPersonOnSalesHeader(SalesHeader,TRUE,TRUE);
    
      IF "Bill-to Customer No." <> "Sell-to Customer No." THEN
        CheckCustBlockage(SalesHeader,"Bill-to Customer No.",FALSE);
    
    ...
Table<Sales Header>.PROCEDURE<OnCheckSalesReleaseRestrictions>
  Raised in: Table<Sales Header>.PROCEDURE<CheckSalesReleaseRestrictions>
    Code lines:
    OnCheckSalesReleaseRestrictions; <=====================
    ApprovalsMgmt.PrePostApprovalCheckSales(Rec);
Table<Sales Header>.PROCEDURE<OnCopySelltoCustomerAddressFieldsFromCustomerOnAfterAssignRespCenter>
  Raised in: Table<Sales Header>.PROCEDURE<CopySellToCustomerAddressFieldsFromCustomer>
    Code lines:
    ...
    "Tax Liable" := SellToCustomer."Tax Liable";
    "VAT Registration No." := SellToCustomer."VAT Registration No.";
    "VAT Country/Region Code" := SellToCustomer."Country/Region Code";
    "Shipping Advice" := SellToCustomer."Shipping Advice";
    "Responsibility Center" := UserSetupMgt.GetRespCenter(0,SellToCustomer."Responsibility Center");
    OnCopySelltoCustomerAddressFieldsFromCustomerOnAfterAssignRespCenter(Rec,SellToCustomer,CurrFieldNo); <=====================
    UpdateLocationCode(SellToCustomer."Location Code");
    
    OnAfterCopySellToCustomerAddressFieldsFromCustomer(Rec,SellToCustomer,CurrFieldNo);
Table<Sales Header>.PROCEDURE<OnCreateDimOnBeforeUpdateLines>
  Raised in: Table<Sales Header>.PROCEDURE<CreateDim>
    Code lines:
    ...
    OldDimSetID := "Dimension Set ID";
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,SourceCodeSetup.Sales,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
    
    OnCreateDimOnBeforeUpdateLines(Rec); <=====================
    
    IF (OldDimSetID <> "Dimension Set ID") AND SalesLinesExist THEN BEGIN
      MODIFY;
      UpdateAllLineDim("Dimension Set ID",OldDimSetID);
Table<Sales Header>.PROCEDURE<OnCreateSalesLineOnAfterAssignType>
  Raised in: Table<Sales Header>.PROCEDURE<CreateSalesLine>
    Code lines:
    SalesLine.INIT;
    SalesLine."Line No." := SalesLine."Line No." + 10000;
    SalesLine.VALIDATE(Type,TempSalesLine.Type);
    OnCreateSalesLineOnAfterAssignType(SalesLine,TempSalesLine); <=====================
    IF TempSalesLine."No." = '' THEN BEGIN
      SalesLine.VALIDATE(Description,TempSalesLine.Description);
      SalesLine.VALIDATE("Description 2",TempSalesLine."Description 2");
    END ELSE BEGIN
      SalesLine.VALIDATE("No.",TempSalesLine."No.");
      IF SalesLine.Type <> SalesLine.Type::" " THEN BEGIN
    ...
Table<Sales Header>.PROCEDURE<OnCustomerCreditLimitExceeded>
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<SalesHeaderCheck>
    Code lines:
    ...
    ELSE
      IF InstructionMgt.IsEnabled(GetInstructionType(FORMAT(SalesHeader."Document Type"),SalesHeader."No.")) THEN BEGIN
        CreditLimitExceeded := TRUE;
    
        CreateAndSendNotification(SalesHeader.RECORDID,AdditionalContextId,'');
        SalesHeader.OnCustomerCreditLimitExceeded; <=====================
      END;
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<SalesLineCheck>
    Code lines:
    ...
    IF NOT CustCheckCreditLimit.SalesLineShowWarningAndGetCause(SalesLine,AdditionalContextId) THEN
      SalesHeader.OnCustomerCreditLimitNotExceeded
    ELSE
      IF InstructionMgt.IsEnabled(GetInstructionType(FORMAT(SalesLine."Document Type"),SalesLine."Document No.")) THEN BEGIN
        CreateAndSendNotification(SalesHeader.RECORDID,AdditionalContextId,'');
        SalesHeader.OnCustomerCreditLimitExceeded; <=====================
      END;
  Raised in: Table<Sales Header>.PROCEDURE<CheckAvailableCreditLimit>
    Code lines:
    ...
      Customer.GET("Sell-to Customer No.");
    
    AvailableCreditLimit := Customer.CalcAvailableCredit;
    
    IF AvailableCreditLimit < 0 THEN
      OnCustomerCreditLimitExceeded <=====================
    ELSE
      OnCustomerCreditLimitNotExceeded;
    
    EXIT(AvailableCreditLimit);
Table<Sales Header>.PROCEDURE<OnCustomerCreditLimitNotExceeded>
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<SalesHeaderCheck>
    Code lines:
    ...
      EXIT;
    
    OnNewCheckRemoveCustomerNotifications(SalesHeader.RECORDID,TRUE);
    
    IF NOT CustCheckCreditLimit.SalesHeaderShowWarningAndGetCause(SalesHeader,AdditionalContextId) THEN
      SalesHeader.OnCustomerCreditLimitNotExceeded <=====================
    ELSE
      IF InstructionMgt.IsEnabled(GetInstructionType(FORMAT(SalesHeader."Document Type"),SalesHeader."No.")) THEN BEGIN
        CreditLimitExceeded := TRUE;
    
    ...
  Raised in: Codeunit<Cust-Check Cr. Limit>.PROCEDURE<SalesLineCheck>
    Code lines:
    ...
    IF NOT SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.") THEN
      SalesHeader.INIT;
    OnNewCheckRemoveCustomerNotifications(SalesHeader.RECORDID,FALSE);
    
    IF NOT CustCheckCreditLimit.SalesLineShowWarningAndGetCause(SalesLine,AdditionalContextId) THEN
      SalesHeader.OnCustomerCreditLimitNotExceeded <=====================
    ELSE
      IF InstructionMgt.IsEnabled(GetInstructionType(FORMAT(SalesLine."Document Type"),SalesLine."Document No.")) THEN BEGIN
        CreateAndSendNotification(SalesHeader.RECORDID,AdditionalContextId,'');
        SalesHeader.OnCustomerCreditLimitExceeded;
  Raised in: Table<Sales Header>.PROCEDURE<CheckAvailableCreditLimit>
    Code lines:
    ...
    AvailableCreditLimit := Customer.CalcAvailableCredit;
    
    IF AvailableCreditLimit < 0 THEN
      OnCustomerCreditLimitExceeded
    ELSE
      OnCustomerCreditLimitNotExceeded; <=====================
    
    EXIT(AvailableCreditLimit);
Table<Sales Header>.PROCEDURE<OnInitInsertOnBeforeInitRecord>
  Raised in: Table<Sales Header>.PROCEDURE<InitInsert>
    Code lines:
    ...
      IF "No." = '' THEN BEGIN
        TestNoSeries;
        NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series","Posting Date","No.","No. Series");
      END;
    
    OnInitInsertOnBeforeInitRecord(Rec,xRec); <=====================
    InitRecord;
Table<Sales Header>.PROCEDURE<OnRecreateSalesLinesOnAfterSetSalesLineFilters>
  Raised in: Table<Sales Header>.PROCEDURE<RecreateSalesLines>
    Code lines:
    ...
      MODIFY;
      OnBeforeRecreateSalesLines(Rec);
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      OnRecreateSalesLinesOnAfterSetSalesLineFilters(SalesLine); <=====================
      IF SalesLine.FINDSET THEN BEGIN
        TempReservEntry.DELETEALL;
        RecreateReservEntryReqLine(TempSalesLine,TempATOLink,ATOLink);
        TransferItemChargeAssgntSalesToTemp(ItemChargeAssgntSales,TempItemChargeAssgntSales);
    ...
Table<Sales Header>.PROCEDURE<OnRecreateSalesLinesOnBeforeConfirm>
  Raised in: Table<Sales Header>.PROCEDURE<RecreateSalesLines>
    Code lines:
    IF NOT SalesLinesExist THEN
      EXIT;
    
    OnRecreateSalesLinesOnBeforeConfirm(Rec,xRec,ChangedFieldName,HideValidationDialog,Confirmed,IsHandled); <=====================
    IF NOT IsHandled THEN
      IF GetHideValidationDialog OR NOT GUIALLOWED THEN
        Confirmed := TRUE
      ELSE BEGIN
        IF HasItemChargeAssignment THEN
          ConfirmText := ResetItemChargeAssignMsg
    ...
Table<Sales Header>.PROCEDURE<OnUpdateBillToCustOnAfterSalesQuote>
  Raised in: Table<Sales Header>.PROCEDURE<UpdateBillToCust>
    Code lines:
    ...
        "Bill-to Country/Region Code" := SearchContact."Country/Region Code";
        "VAT Registration No." := SearchContact."VAT Registration No.";
        VALIDATE("Currency Code",SearchContact."Currency Code");
        "Language Code" := SearchContact."Language Code";
    
        OnUpdateBillToCustOnAfterSalesQuote(Rec,SearchContact); <=====================
    
        IF ("Bill-to Customer Template Code" = '') AND (NOT CustTemplate.ISEMPTY) THEN
          VALIDATE("Bill-to Customer Template Code",Cont.FindCustomerTemplate);
      END ELSE
    ...
Table<Sales Header>.PROCEDURE<OnUpdateSalesLineByChangedFieldName>
  Raised in: Table<Sales Header>.PROCEDURE<UpdateSalesLinesByFieldNo>
    Code lines:
    ...
                SalesLine.VALIDATE("Outbound Whse. Handling Time","Outbound Whse. Handling Time");
            SalesLine.FIELDNO("Deferral Code"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Deferral Code");
            ELSE
              OnUpdateSalesLineByChangedFieldName(Rec,SalesLine,Field.FieldName,ChangedFieldNo); <=====================
          END;
        SalesLineReserve.AssignForPlanning(SalesLine);
        OnUpdateSalesLinesByFieldNoOnBeforeSalesLineModify(SalesLine,ChangedFieldNo,CurrFieldNo);
        SalesLine.MODIFY(TRUE);
Table<Sales Header>.PROCEDURE<OnUpdateSalesLinesByFieldNoOnBeforeSalesLineModify>
  Raised in: Table<Sales Header>.PROCEDURE<UpdateSalesLinesByFieldNo>
    Code lines:
    ...
                SalesLine.VALIDATE("Deferral Code");
            ELSE
              OnUpdateSalesLineByChangedFieldName(Rec,SalesLine,Field.FieldName,ChangedFieldNo);
          END;
        SalesLineReserve.AssignForPlanning(SalesLine);
        OnUpdateSalesLinesByFieldNoOnBeforeSalesLineModify(SalesLine,ChangedFieldNo,CurrFieldNo); <=====================
        SalesLine.MODIFY(TRUE);
      UNTIL SalesLine.NEXT = 0;
Table<Sales Header>.PROCEDURE<OnValidateBilltoCustomerTemplateCodeBeforeRecreateSalesLines>
  Raised in: Table<Sales Header>.Field<Bill-to Customer Template Code>.<OnValidate>
    Code lines:
    ...
      DATABASE::"Salesperson/Purchaser","Salesperson Code",
      DATABASE::Customer,"Bill-to Customer No.",
      DATABASE::Campaign,"Campaign No.",
      DATABASE::"Responsibility Center","Responsibility Center");
    
    OnValidateBilltoCustomerTemplateCodeBeforeRecreateSalesLines(Rec,CurrFieldNo); <=====================
    
    IF NOT InsertMode AND
       (xRec."Sell-to Customer Template Code" = "Sell-to Customer Template Code") AND
       (xRec."Bill-to Customer Template Code" <> "Bill-to Customer Template Code")
    ...
Table<Sales Header>.PROCEDURE<OnValidatePaymentTermsCodeOnBeforeCalcDueDate>
  Raised in: Table<Sales Header>.Field<Payment Terms Code>.<OnValidate>
    Code lines:
    ...
        VALIDATE("Due Date","Document Date");
        VALIDATE("Pmt. Discount Date",0D);
        VALIDATE("Payment Discount %",0);
      END ELSE BEGIN
        IsHandled := FALSE;
        OnValidatePaymentTermsCodeOnBeforeCalcDueDate(Rec,xRec,FIELDNO("Payment Terms Code"),CurrFieldNo,IsHandled); <=====================
        IF NOT IsHandled THEN
          "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
        IsHandled := FALSE;
        OnValidatePaymentTermsCodeOnBeforeCalcPmtDiscDate(Rec,xRec,FIELDNO("Payment Terms Code"),CurrFieldNo,IsHandled);
    ...
  Raised in: Table<Sales Header>.Field<Prepmt. Payment Terms Code>.<OnValidate>
    Code lines:
    ...
        VALIDATE("Prepayment Due Date","Document Date");
        VALIDATE("Prepmt. Pmt. Discount Date",0D);
        VALIDATE("Prepmt. Payment Discount %",0);
      END ELSE BEGIN
        IsHandled := FALSE;
        OnValidatePaymentTermsCodeOnBeforeCalcDueDate(Rec,xRec,FIELDNO("Prepmt. Payment Terms Code"),CurrFieldNo,IsHandled); <=====================
        IF NOT IsHandled THEN
          "Prepayment Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
        IsHandled := FALSE;
        OnValidatePaymentTermsCodeOnBeforeCalcPmtDiscDate(Rec,xRec,FIELDNO("Prepmt. Payment Terms Code"),CurrFieldNo,IsHandled);
    ...
Table<Sales Header>.PROCEDURE<OnValidatePaymentTermsCodeOnBeforeCalcPmtDiscDate>
  Raised in: Table<Sales Header>.Field<Payment Terms Code>.<OnValidate>
    Code lines:
    ...
        IsHandled := FALSE;
        OnValidatePaymentTermsCodeOnBeforeCalcDueDate(Rec,xRec,FIELDNO("Payment Terms Code"),CurrFieldNo,IsHandled);
        IF NOT IsHandled THEN
          "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
        IsHandled := FALSE;
        OnValidatePaymentTermsCodeOnBeforeCalcPmtDiscDate(Rec,xRec,FIELDNO("Payment Terms Code"),CurrFieldNo,IsHandled); <=====================
        IF NOT IsHandled THEN
          "Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
        IF NOT UpdateDocumentDate THEN
          VALIDATE("Payment Discount %",PaymentTerms."Discount %")
    ...
  Raised in: Table<Sales Header>.Field<Prepmt. Payment Terms Code>.<OnValidate>
    Code lines:
    ...
        IsHandled := FALSE;
        OnValidatePaymentTermsCodeOnBeforeCalcDueDate(Rec,xRec,FIELDNO("Prepmt. Payment Terms Code"),CurrFieldNo,IsHandled);
        IF NOT IsHandled THEN
          "Prepayment Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
        IsHandled := FALSE;
        OnValidatePaymentTermsCodeOnBeforeCalcPmtDiscDate(Rec,xRec,FIELDNO("Prepmt. Payment Terms Code"),CurrFieldNo,IsHandled); <=====================
        IF NOT IsHandled THEN
          "Prepmt. Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
        IF NOT UpdateDocumentDate THEN
          VALIDATE("Prepmt. Payment Discount %",PaymentTerms."Discount %")
    ...
Table<Sales Header>.PROCEDURE<OnValidatePostingDateOnBeforeAssignDocumentDate>
  Raised in: Table<Sales Header>.Field<Posting Date>.<OnValidate>
    Code lines:
    ...
    TestNoSeriesDate(
      "Prepmt. Cr. Memo No.","Prepmt. Cr. Memo No. Series",
      FIELDCAPTION("Prepmt. Cr. Memo No."),FIELDCAPTION("Prepmt. Cr. Memo No. Series"));
    
    IsHandled := FALSE;
    OnValidatePostingDateOnBeforeAssignDocumentDate(Rec,IsHandled); <=====================
    IF NOT IsHandled THEN
      IF "Incoming Document Entry No." = 0 THEN
        VALIDATE("Document Date","Posting Date");
    
    ...
Table<Sales Header>.PROCEDURE<OnValidatePricesIncludingVATOnBeforeSalesLineModify>
  Raised in: Table<Sales Header>.Field<Prices Including VAT>.<OnValidate>
    Code lines:
    ...
            IF "Prices Including VAT" THEN
              SalesLine."Line Amount" := SalesLine."Amount Including VAT" + SalesLine."Inv. Discount Amount"
            ELSE
              SalesLine."Line Amount" := SalesLine.Amount + SalesLine."Inv. Discount Amount";
          END;
          OnValidatePricesIncludingVATOnBeforeSalesLineModify(Rec,SalesLine,Currency,RecalculatePrice); <=====================
          SalesLine.MODIFY;
        UNTIL SalesLine.NEXT = 0;
      END;
      OnAfterChangePricesIncludingVAT(Rec);
Table<Sales Header>.PROCEDURE<OnValidateSellToCustomerNoAfterInit>
  Raised in: Table<Sales Header>.Field<Sell-to Customer No.>.<OnValidate>
    Code lines:
    ...
          IF SalesLine.FINDFIRST THEN
            ERROR(
              Text005,
              FIELDCAPTION("Sell-to Customer No."));
          INIT;
          OnValidateSellToCustomerNoAfterInit(Rec,xRec); <=====================
          SalesSetup.GET;
          "No. Series" := xRec."No. Series";
          InitRecord;
          InitNoSeries;
    ...
Table<Sales Header>.PROCEDURE<OnValidateShippingAgentCodeOnBeforeUpdateLines>
  Raised in: Table<Sales Header>.Field<Shipping Agent Code>.<OnValidate>
    Code lines:
    ...
      EXIT;
    
    "Shipping Agent Service Code" := '';
    GetShippingTime(FIELDNO("Shipping Agent Code"));
    
    OnValidateShippingAgentCodeOnBeforeUpdateLines(Rec,CurrFieldNo,HideValidationDialog); <=====================
    UpdateSalesLinesByFieldNo(FIELDNO("Shipping Agent Code"),CurrFieldNo <> 0);
Table<Analysis View>.PROCEDURE<OnAfterAnalysisViewReset>
  Raised in: Table<Analysis View>.PROCEDURE<AnalysisViewReset>
    Code lines:
    ...
    AnalysisViewEntry.DELETEALL;
    "Last Entry No." := 0;
    "Last Date Updated" := 0D;
    AnalysisviewBudgetReset;
    
    OnAfterAnalysisViewReset(Rec); <=====================
Table<Analysis View Entry>.PROCEDURE<OnAfterDrillDown>
  Raised in: Table<Analysis View Entry>.PROCEDURE<DrillDown>
    Code lines:
    ...
      TempCFForecastEntry.DELETEALL;
      AnalysisViewEntryToGLEntries.GetCFLedgEntries(Rec,TempCFForecastEntry);
      PAGE.RUNMODAL(PAGE::"Cash Flow Forecast Entries",TempCFForecastEntry);
    END;
    
    OnAfterDrillDown(Rec); <=====================
Table<Analysis View Entry>.PROCEDURE<OnBeforeDrilldown>
  Raised in: Table<Analysis View Entry>.PROCEDURE<DrillDown>
    Code lines:
    IsHandled := FALSE;
    OnBeforeDrilldown(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF "Account Source" = "Account Source"::"G/L Account" THEN BEGIN
      TempGLEntry.RESET;
      TempGLEntry.DELETEALL;
      AnalysisViewEntryToGLEntries.GetGLEntries(Rec,TempGLEntry);
      PAGE.RUNMODAL(PAGE::"General Ledger Entries",TempGLEntry);
    ...
Table<Sales Line>.PROCEDURE<OnAfterAssignFieldsForNo>
  Raised in: Table<Sales Line>.Field<No.>.<OnValidate>
    Code lines:
    ...
        CopyFromFixedAsset;
      Type::"Charge (Item)":
        CopyFromItemCharge;
    END;
    
    OnAfterAssignFieldsForNo(Rec,xRec,SalesHeader); <=====================
    
    IF HasTypeToFillMandatoryFields AND (Type <> Type::"Fixed Asset") THEN
      VALIDATE("VAT Prod. Posting Group");
    
    ...
Table<Sales Line>.PROCEDURE<OnAfterAssignFixedAssetValues>
  Raised in: Table<Sales Line>.PROCEDURE<CopyFromFixedAsset>
    Code lines:
    ...
    GetFAPostingGroup;
    Description := FixedAsset.Description;
    "Description 2" := FixedAsset."Description 2";
    "Allow Invoice Disc." := FALSE;
    "Allow Item Charge Assignment" := FALSE;
    OnAfterAssignFixedAssetValues(Rec,FixedAsset); <=====================
Table<Sales Line>.PROCEDURE<OnAfterAssignGLAccountValues>
  Raised in: Table<Sales Line>.PROCEDURE<CopyFromGLAccount>
    Code lines:
    ...
    "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
    "Tax Group Code" := GLAcc."Tax Group Code";
    "Allow Invoice Disc." := FALSE;
    "Allow Item Charge Assignment" := FALSE;
    InitDeferralCode;
    OnAfterAssignGLAccountValues(Rec,GLAcc); <=====================
Table<Sales Line>.PROCEDURE<OnAfterAssignHeaderValues>
  Raised in: Table<Sales Line>.Field<No.>.<OnValidate>
    Code lines:
    ...
    IsHandled := FALSE;
    OnValidateNoOnBeforeUpdateDates(Rec,xRec,SalesHeader,CurrFieldNo,IsHandled);
    IF NOT IsHandled THEN
      UpdateDates;
    
    OnAfterAssignHeaderValues(Rec,SalesHeader); <=====================
    
    CASE Type OF
      Type::" ":
        CopyFromStandardText;
    ...
Table<Sales Line>.PROCEDURE<OnAfterAssignItemChargeValues>
  Raised in: Table<Sales Line>.PROCEDURE<CopyFromItemCharge>
    Code lines:
    ...
    "Gen. Prod. Posting Group" := ItemCharge."Gen. Prod. Posting Group";
    "VAT Prod. Posting Group" := ItemCharge."VAT Prod. Posting Group";
    "Tax Group Code" := ItemCharge."Tax Group Code";
    "Allow Invoice Disc." := FALSE;
    "Allow Item Charge Assignment" := FALSE;
    OnAfterAssignItemChargeValues(Rec,ItemCharge); <=====================
Table<Sales Line>.PROCEDURE<OnAfterAssignItemUOM>
  Raised in: Table<Sales Line>.Field<Unit of Measure Code>.<OnValidate>
    Code lines:
    ...
          "Gross Weight" := Item."Gross Weight" * "Qty. per Unit of Measure";
          "Net Weight" := Item."Net Weight" * "Qty. per Unit of Measure";
          "Unit Volume" := Item."Unit Volume" * "Qty. per Unit of Measure";
          "Units per Parcel" :=
            ROUND(Item."Units per Parcel" / "Qty. per Unit of Measure",UOMMgt.QtyRndPrecision);
          OnAfterAssignItemUOM(Rec,Item); <=====================
          IF (xRec."Unit of Measure Code" <> "Unit of Measure Code") AND (Quantity <> 0) THEN
            WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
          IF "Qty. per Unit of Measure" > xRec."Qty. per Unit of Measure" THEN
            InitItemAppl(FALSE);
    ...
Table<Sales Line>.PROCEDURE<OnAfterAssignItemValues>
  Raised in: Table<Sales Line>.PROCEDURE<CopyFromItem>
    Code lines:
    ...
    "Unit of Measure Code" := Item."Sales Unit of Measure";
    OnAfterCopyFromItem(Rec,Item);
    
    InitDeferralCode;
    SetDefaultItemQuantity;
    OnAfterAssignItemValues(Rec,Item); <=====================
Table<Sales Line>.PROCEDURE<OnAfterAssignResourceUOM>
  Raised in: Table<Sales Line>.Field<Unit of Measure Code>.<OnValidate>
    Code lines:
    ...
            GetResource;
            "Unit of Measure Code" := Resource."Base Unit of Measure";
          END;
          ResUnitofMeasure.GET("No.","Unit of Measure Code");
          "Qty. per Unit of Measure" := ResUnitofMeasure."Qty. per Unit of Measure";
          OnAfterAssignResourceUOM(Rec,Resource,ResUnitofMeasure); <=====================
          UpdateUnitPrice(FIELDNO("Unit of Measure Code"));
          FindResUnitCost;
        END;
      Type::"G/L Account",Type::"Fixed Asset",
    ...
Table<Sales Line>.PROCEDURE<OnAfterAssignResourceValues>
  Raised in: Table<Sales Line>.PROCEDURE<CopyFromResource>
    Code lines:
    ...
    "VAT Prod. Posting Group" := Res."VAT Prod. Posting Group";
    "Tax Group Code" := Res."Tax Group Code";
    "Allow Item Charge Assignment" := FALSE;
    FindResUnitCost;
    InitDeferralCode;
    OnAfterAssignResourceValues(Rec,Res); <=====================
Table<Sales Line>.PROCEDURE<OnAfterAssignStdTxtValues>
  Raised in: Table<Sales Line>.PROCEDURE<CopyFromStandardText>
    Code lines:
    StandardText.GET("No.");
    Description := StandardText.Description;
    "Allow Item Charge Assignment" := FALSE;
    OnAfterAssignStdTxtValues(Rec,StandardText); <=====================
Table<Sales Line>.PROCEDURE<OnAfterAutoAsmToOrder>
  Raised in: Table<Sales Line>.PROCEDURE<AutoAsmToOrder>
    Code lines:
    ...
    IF IsHandled THEN
      EXIT;
    
    ATOLink.UpdateAsmFromSalesLine(Rec);
    
    OnAfterAutoAsmToOrder(Rec); <=====================
Table<Sales Line>.PROCEDURE<OnAfterAutoReserve>
  Raised in: Table<Sales Line>.PROCEDURE<AutoReserve>
    Code lines:
    ...
          FIND;
        END;
      END;
    END;
    
    OnAfterAutoReserve(Rec); <=====================
Table<Sales Line>.PROCEDURE<OnAfterBlanketOrderLookup>
  Raised in: Table<Sales Line>.PROCEDURE<BlanketOrderLookup>
    Code lines:
    ...
      SalesLine2.TESTFIELD("Document Type","Document Type"::"Blanket Order");
      "Blanket Order No." := SalesLine2."Document No.";
      VALIDATE("Blanket Order Line No.",SalesLine2."Line No.");
    END;
    
    OnAfterBlanketOrderLookup(Rec); <=====================
Table<Sales Line>.PROCEDURE<OnAfterCalcLineAmount>
  Raised in: Table<Sales Line>.PROCEDURE<CalcLineAmount>
    Code lines:
    LineAmount := "Line Amount" - "Inv. Discount Amount";
    
    OnAfterCalcLineAmount(Rec,LineAmount); <=====================
Table<Sales Line>.PROCEDURE<OnAfterCalcVATAmountLines>
  Raised in: Table<Sales Line>.PROCEDURE<CalcVATAmountLines>
    Code lines:
    ...
        VATAmountLine."Amount Including VAT" += TotalVATAmount;
        VATAmountLine."Calculated VAT Amount" += TotalVATAmount;
        VATAmountLine.MODIFY;
      END;
    
    OnAfterCalcVATAmountLines(SalesHeader,SalesLine,VATAmountLine,QtyType); <=====================
Table<Sales Line>.PROCEDURE<OnAfterCheckCreditLimitCondition>
  Raised in: Table<Sales Line>.PROCEDURE<CheckCreditLimitCondition>
    Code lines:
    RunCheck := "Document Type" <= "Document Type"::Invoice;
    OnAfterCheckCreditLimitCondition(Rec,RunCheck); <=====================
    EXIT(RunCheck);
Table<Sales Line>.PROCEDURE<OnAfterCopyFromItem>
  Raised in: Table<Sales Line>.PROCEDURE<CopyFromItem>
    Code lines:
    ...
      Reserve := SalesHeader.Reserve
    ELSE
      Reserve := Item.Reserve;
    
    "Unit of Measure Code" := Item."Sales Unit of Measure";
    OnAfterCopyFromItem(Rec,Item); <=====================
    
    InitDeferralCode;
    SetDefaultItemQuantity;
    OnAfterAssignItemValues(Rec,Item);
Table<Sales Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Report<Sales Document - Test>.PROCEDURE<AddDimToTempLine>
    Code lines:
    ...
      TableID[2] := DATABASE::Job;
      No[2] := "Job No.";
      TableID[3] := DATABASE::"Responsibility Center";
      No[3] := "Responsibility Center";
    
      OnAfterCreateDimTableIDs(SalesLine,TableID,No); <=====================
    
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      "Dimension Set ID" :=
    ...
  Raised in: Table<Sales Line>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    TableID[3] := Type3;
    No[3] := No3;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    GetSalesHeader;
    ...
Table<Sales Line>.PROCEDURE<OnAfterFilterLinesWithItemToPlan>
  Raised in: Table<Sales Line>.PROCEDURE<FilterLinesWithItemToPlan>
    Code lines:
    ...
    SETFILTER("Shortcut Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
    SETFILTER("Shortcut Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
    SETFILTER("Shipment Date",Item.GETFILTER("Date Filter"));
    SETFILTER("Outstanding Qty. (Base)",'<>0');
    
    OnAfterFilterLinesWithItemToPlan(Rec,Item,DocumentType); <=====================
Table<Sales Line>.PROCEDURE<OnAfterFindResUnitCost>
  Raised in: Table<Sales Line>.PROCEDURE<FindResUnitCost>
    Code lines:
    ResCost.INIT;
    ResCost.Code := "No.";
    ResCost."Work Type Code" := "Work Type Code";
    CODEUNIT.RUN(CODEUNIT::"Resource-Find Cost",ResCost);
    OnAfterFindResUnitCost(Rec,ResCost); <=====================
    VALIDATE("Unit Cost (LCY)",ResCost."Unit Cost" * "Qty. per Unit of Measure");
Table<Sales Line>.PROCEDURE<OnAfterGetItemTranslation>
  Raised in: Table<Sales Line>.PROCEDURE<GetItemTranslation>
    Code lines:
    GetSalesHeader;
    IF ItemTranslation.GET("No.","Variant Code",SalesHeader."Language Code") THEN BEGIN
      Description := ItemTranslation.Description;
      "Description 2" := ItemTranslation."Description 2";
      OnAfterGetItemTranslation(Rec,SalesHeader,ItemTranslation); <=====================
    END;
Table<Sales Line>.PROCEDURE<OnAfterGetLineAmountToHandle>
  Raised in: Table<Sales Line>.PROCEDURE<GetLineAmountToHandle>
    Code lines:
    ...
    IF QtyToHandle <> Quantity THEN
      LineDiscAmount := ROUND(LineAmount * "Line Discount %" / 100,Currency."Amount Rounding Precision")
    ELSE
      LineDiscAmount := "Line Discount Amount";
    
    OnAfterGetLineAmountToHandle(Rec,QtyToHandle,LineAmount,LineDiscAmount); <=====================
    EXIT(LineAmount - LineDiscAmount);
Table<Sales Line>.PROCEDURE<OnAfterGetSalesHeader>
  Raised in: Table<Sales Line>.PROCEDURE<GetSalesHeader>
    Code lines:
    ...
        Currency.GET(SalesHeader."Currency Code");
        Currency.TESTFIELD("Amount Rounding Precision");
      END;
    END;
    
    OnAfterGetSalesHeader(Rec,SalesHeader,Currency); <=====================
Table<Sales Line>.PROCEDURE<OnAfterGetUnitCost>
  Raised in: Table<Sales Line>.PROCEDURE<GetUnitCost>
    Code lines:
    ...
    IF GetSKU THEN
      VALIDATE("Unit Cost (LCY)",SKU."Unit Cost" * "Qty. per Unit of Measure")
    ELSE
      VALIDATE("Unit Cost (LCY)",Item."Unit Cost" * "Qty. per Unit of Measure");
    
    OnAfterGetUnitCost(Rec,Item); <=====================
Table<Sales Line>.PROCEDURE<OnAfterInitHeaderDefaults>
  Raised in: Table<Sales Line>.PROCEDURE<InitHeaderDefaults>
    Code lines:
    ...
    "Shipping Agent Code" := SalesHeader."Shipping Agent Code";
    "Shipping Agent Service Code" := SalesHeader."Shipping Agent Service Code";
    "Outbound Whse. Handling Time" := SalesHeader."Outbound Whse. Handling Time";
    "Shipping Time" := SalesHeader."Shipping Time";
    
    OnAfterInitHeaderDefaults(Rec,SalesHeader); <=====================
Table<Sales Line>.PROCEDURE<OnAfterInitOutstanding>
  Raised in: Table<Sales Line>.PROCEDURE<InitOutstanding>
    Code lines:
    ...
      "Outstanding Quantity" := Quantity - "Quantity Shipped";
      "Outstanding Qty. (Base)" := "Quantity (Base)" - "Qty. Shipped (Base)";
      "Qty. Shipped Not Invoiced" := "Quantity Shipped" - "Quantity Invoiced";
      "Qty. Shipped Not Invd. (Base)" := "Qty. Shipped (Base)" - "Qty. Invoiced (Base)";
    END;
    OnAfterInitOutstandingQty(Rec); <=====================
    UpdatePlanned;
    "Completely Shipped" := (Quantity <> 0) AND ("Outstanding Quantity" = 0);
    InitOutstandingAmount;
    
Table<Sales Line>.PROCEDURE<OnAfterInitOutstandingAmount>
  Raised in: Table<Sales Line>.PROCEDURE<InitOutstandingAmount>
    Code lines:
    ...
          ROUND(
            AmountInclVAT * "Qty. Shipped Not Invoiced" / Quantity,
            Currency."Amount Rounding Precision"));
    END;
    
    OnAfterInitOutstandingAmount(Rec,SalesHeader,Currency); <=====================
Table<Sales Line>.PROCEDURE<OnAfterInitOutstandingQty>
  Raised in: Table<Sales Line>.PROCEDURE<InitOutstanding>
    Code lines:
    ...
      "Outstanding Quantity" := Quantity - "Quantity Shipped";
      "Outstanding Qty. (Base)" := "Quantity (Base)" - "Qty. Shipped (Base)";
      "Qty. Shipped Not Invoiced" := "Quantity Shipped" - "Quantity Invoiced";
      "Qty. Shipped Not Invd. (Base)" := "Qty. Shipped (Base)" - "Qty. Invoiced (Base)";
    END;
    OnAfterInitOutstandingQty(Rec); <=====================
    UpdatePlanned;
    "Completely Shipped" := (Quantity <> 0) AND ("Outstanding Quantity" = 0);
    InitOutstandingAmount;
    
Table<Sales Line>.PROCEDURE<OnAfterInitQtyToAsm>
  Raised in: Table<Sales Line>.PROCEDURE<InitQtyToAsm>
    Code lines:
    ...
    THEN BEGIN
      "Qty. to Assemble to Order" := Quantity;
      "Qty. to Asm. to Order (Base)" := "Quantity (Base)";
    END;
    
    OnAfterInitQtyToAsm(Rec,CurrFieldNo) <=====================
Table<Sales Line>.PROCEDURE<OnAfterInitQtyToInvoice>
  Raised in: Table<Sales Line>.PROCEDURE<InitQtyToInvoice>
    Code lines:
    ...
    OnBeforeCalcInvDiscToInvoice(Rec,CurrFieldNo);
    CalcInvDiscToInvoice;
    IF SalesHeader."Document Type" <> SalesHeader."Document Type"::Invoice THEN
      CalcPrepaymentToDeduct;
    
    OnAfterInitQtyToInvoice(Rec,CurrFieldNo); <=====================
Table<Sales Line>.PROCEDURE<OnAfterInitQtyToReceive>
  Raised in: Table<Sales Line>.PROCEDURE<InitQtyToReceive>
    Code lines:
    ...
      "Return Qty. to Receive (Base)" := "Outstanding Qty. (Base)";
    END ELSE
      IF "Return Qty. to Receive" <> 0 THEN
        "Return Qty. to Receive (Base)" := CalcBaseQty("Return Qty. to Receive");
    
    OnAfterInitQtyToReceive(Rec,CurrFieldNo); <=====================
    
    InitQtyToInvoice;
Table<Sales Line>.PROCEDURE<OnAfterInitQtyToShip>
  Raised in: Table<Sales Line>.PROCEDURE<InitQtyToShip>
    Code lines:
    ...
      IF "Qty. to Ship" <> 0 THEN
        "Qty. to Ship (Base)" := CalcBaseQty("Qty. to Ship");
    
    CheckServItemCreation;
    
    OnAfterInitQtyToShip(Rec,CurrFieldNo); <=====================
    
    InitQtyToInvoice;
Table<Sales Line>.PROCEDURE<OnAfterInitQtyToShip2>
  Raised in: Table<Sales Line>.PROCEDURE<InitQtyToShip2>
    Code lines:
    "Qty. to Ship" := "Outstanding Quantity";
    "Qty. to Ship (Base)" := "Outstanding Qty. (Base)";
    
    OnAfterInitQtyToShip2(Rec,CurrFieldNo); <=====================
    
    ATOLink.UpdateQtyToAsmFromSalesLine(Rec);
    
    CheckServItemCreation;
    
    "Qty. to Invoice" := MaxQtyToInvoice;
    ...
Table<Sales Line>.PROCEDURE<OnAfterSalesTaxCalculate>
  Raised in: Table<Sales Line>.Field<Amount>.<OnValidate>
    Code lines:
    ...
          "Amount Including VAT" :=
            Amount +
            SalesTaxCalculate.CalculateTax(
              "Tax Area Code","Tax Group Code","Tax Liable",SalesHeader."Posting Date",
              "VAT Base Amount","Quantity (Base)",SalesHeader."Currency Factor");
          OnAfterSalesTaxCalculate(Rec,SalesHeader,Currency); <=====================
          UpdateVATPercent("VAT Base Amount","Amount Including VAT" - "VAT Base Amount");
          "Amount Including VAT" := ROUND("Amount Including VAT",Currency."Amount Rounding Precision");
        END;
    END;
    ...
  Raised in: Table<Sales Line>.PROCEDURE<UpdateVATAmounts>
    Code lines:
    ...
                SalesTaxCalculate.ReverseCalculateTax(
                  "Tax Area Code","Tax Group Code","Tax Liable",SalesHeader."Posting Date",
                  TotalAmountInclVAT + "Amount Including VAT",TotalQuantityBase + "Quantity (Base)",
                  SalesHeader."Currency Factor") -
                TotalAmount;
              OnAfterSalesTaxCalculateReverse(Rec,SalesHeader,Currency); <=====================
              UpdateVATPercent(Amount,"Amount Including VAT" - Amount);
              Amount := ROUND(Amount,Currency."Amount Rounding Precision");
              "VAT Base Amount" := Amount;
            END;
    ...
Table<Sales Line>.PROCEDURE<OnAfterSalesTaxCalculateReverse>
  Raised in: Table<Sales Line>.Field<Amount Including VAT>.<OnValidate>
    Code lines:
    ...
          SalesHeader.TESTFIELD("VAT Base Discount %",0);
          Amount :=
            SalesTaxCalculate.ReverseCalculateTax(
              "Tax Area Code","Tax Group Code","Tax Liable",SalesHeader."Posting Date",
              "Amount Including VAT","Quantity (Base)",SalesHeader."Currency Factor");
          OnAfterSalesTaxCalculateReverse(Rec,SalesHeader,Currency); <=====================
          UpdateVATPercent(Amount,"Amount Including VAT" - Amount);
          Amount := ROUND(Amount,Currency."Amount Rounding Precision");
          "VAT Base Amount" := Amount;
        END;
    ...
  Raised in: Table<Sales Line>.PROCEDURE<UpdateVATAmounts>
    Code lines:
    ...
                SalesTaxCalculate.ReverseCalculateTax(
                  "Tax Area Code","Tax Group Code","Tax Liable",SalesHeader."Posting Date",
                  TotalAmountInclVAT + "Amount Including VAT",TotalQuantityBase + "Quantity (Base)",
                  SalesHeader."Currency Factor") -
                TotalAmount;
              OnAfterSalesTaxCalculateReverse(Rec,SalesHeader,Currency); <=====================
              UpdateVATPercent(Amount,"Amount Including VAT" - Amount);
              Amount := ROUND(Amount,Currency."Amount Rounding Precision");
              "VAT Base Amount" := Amount;
            END;
    ...
Table<Sales Line>.PROCEDURE<OnAfterSetDefaultQuantity>
  Raised in: Table<Sales Line>.PROCEDURE<SetDefaultQuantity>
    Code lines:
    ...
        "Qty. to Invoice" := 0;
        "Qty. to Invoice (Base)" := 0;
      END;
    END;
    
    OnAfterSetDefaultQuantity(Rec,xRec); <=====================
Table<Sales Line>.PROCEDURE<OnAfterSetReserveWithoutPurchasingCode>
  Raised in: Table<Sales Line>.PROCEDURE<SetReserveWithoutPurchasingCode>
    Code lines:
    ...
      GetSalesHeader;
      Reserve := SalesHeader.Reserve;
    END ELSE
      Reserve := Item.Reserve;
    
    OnAfterSetReserveWithoutPurchasingCode(Rec,SalesHeader,Item); <=====================
Table<Sales Line>.PROCEDURE<OnAfterShowItemSub>
  Raised in: Table<Sales Line>.PROCEDURE<ShowItemSub>
    Code lines:
    ...
    TestStatusOpen;
    ItemSubstitutionMgt.ItemSubstGet(Rec);
    IF TransferExtendedText.SalesCheckIfAnyExtText(Rec,TRUE) THEN
      TransferExtendedText.InsertSalesExtText(Rec);
    
    OnAfterShowItemSub(Rec); <=====================
Table<Sales Line>.PROCEDURE<OnAfterTestStatusOpen>
  Raised in: Table<Sales Line>.PROCEDURE<TestStatusOpen>
    Code lines:
    ...
    
    IF NOT "System-Created Entry" THEN
      IF HasTypeToFillMandatoryFields THEN
        SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);
    
    OnAfterTestStatusOpen(Rec,SalesHeader); <=====================
Table<Sales Line>.PROCEDURE<OnAfterUpdateAmounts>
  Raised in: Table<Sales Line>.PROCEDURE<UpdateAmounts>
    Code lines:
    ...
    END;
    
    IF NOT "Prepayment Line" THEN
      UpdatePrepmtAmounts;
    
    OnAfterUpdateAmounts(Rec,xRec,CurrFieldNo); <=====================
    
    UpdateVATAmounts;
    InitOutstandingAmount;
    CheckCreditLimit;
    ...
Table<Sales Line>.PROCEDURE<OnAfterUpdateAmountsDone>
  Raised in: Table<Sales Line>.PROCEDURE<UpdateAmounts>
    Code lines:
    ...
    IF LineAmountChanged THEN BEGIN
      UpdateDeferralAmounts;
      LineAmountChanged := FALSE;
    END;
    
    OnAfterUpdateAmountsDone(Rec,xRec,CurrFieldNo); <=====================
Table<Sales Line>.PROCEDURE<OnAfterUpdateDates>
  Raised in: Table<Sales Line>.PROCEDURE<UpdateDates>
    Code lines:
    ...
      IF "Requested Delivery Date" <> 0D THEN
        VALIDATE("Requested Delivery Date")
      ELSE
        VALIDATE("Shipment Date");
    
    OnAfterUpdateDates(Rec); <=====================
Table<Sales Line>.PROCEDURE<OnAfterUpdateItemCrossRef>
  Raised in: Table<Sales Line>.PROCEDURE<UpdateItemCrossRef>
    Code lines:
    DistIntegration.EnterSalesItemCrossRef(Rec);
    UpdateICPartner;
    
    OnAfterUpdateItemCrossRef(Rec); <=====================
Table<Sales Line>.PROCEDURE<OnAfterUpdateLineDiscPct>
  Raised in: Table<Sales Line>.PROCEDURE<UpdateLineDiscPct>
    Code lines:
    ...
        ERROR(LineDiscountPctErr);
      "Line Discount %" := LineDiscountPct;
    END ELSE
      "Line Discount %" := 0;
    
    OnAfterUpdateLineDiscPct(Rec); <=====================
Table<Sales Line>.PROCEDURE<OnAfterUpdateTotalAmounts>
  Raised in: Table<Sales Line>.PROCEDURE<UpdateVATAmounts>
    Code lines:
    ...
          TotalLineAmount := SalesLine2."Line Amount";
          TotalInvDiscAmount := SalesLine2."Inv. Discount Amount";
          TotalAmount := SalesLine2.Amount;
          TotalAmountInclVAT := SalesLine2."Amount Including VAT";
          TotalQuantityBase := SalesLine2."Quantity (Base)";
          OnAfterUpdateTotalAmounts(Rec,SalesLine2,TotalAmount,TotalAmountInclVAT,TotalLineAmount,TotalInvDiscAmount); <=====================
        END;
    
      IF SalesHeader."Prices Including VAT" THEN
        CASE "VAT Calculation Type" OF
    ...
Table<Sales Line>.PROCEDURE<OnAfterUpdateUnitPrice>
  Raised in: Table<Sales Line>.PROCEDURE<UpdateUnitPrice>
    Code lines:
    ...
        IF GUIALLOWED THEN
          ShowMessageOnce(STRSUBSTNO(UnitPriceChangedMsg,Type,"No."));
    
    VALIDATE("Unit Price");
    
    OnAfterUpdateUnitPrice(Rec,xRec,CalledByFieldNo,CurrFieldNo); <=====================
Table<Sales Line>.PROCEDURE<OnAfterUpdateVATAmounts>
  Raised in: Table<Sales Line>.PROCEDURE<UpdateVATAmounts>
    Code lines:
    ...
              UpdateVATPercent("VAT Base Amount","Amount Including VAT" - "VAT Base Amount");
            END;
        END;
    END;
    
    OnAfterUpdateVATAmounts(Rec); <=====================
Table<Sales Line>.PROCEDURE<OnAfterUpdateVATOnLines>
  Raised in: Table<Sales Line>.PROCEDURE<UpdateVATOnLines>
    Code lines:
    ...
            END;
          END;
        UNTIL NEXT = 0;
    END;
    
    OnAfterUpdateVATOnLines(SalesHeader,SalesLine,VATAmountLine,QtyType); <=====================
Table<Sales Line>.PROCEDURE<OnAfterValidateCrossReferenceNo>
  Raised in: Table<Sales Line>.PROCEDURE<ValidateCrossReferenceNo>
    Code lines:
    ...
    END;
    
    UpdateUnitPrice(FIELDNO("Cross-Reference No."));
    UpdateICPartner;
    
    OnAfterValidateCrossReferenceNo(Rec,ItemCrossReference); <=====================
Table<Sales Line>.PROCEDURE<OnAfterValidateReturnReasonCode>
  Raised in: Table<Sales Line>.PROCEDURE<ValidateReturnReasonCode>
    Code lines:
    ...
      ELSE
        IF "Unit Price" = 0 THEN
          UpdateUnitPrice(CallingFieldNo);
    END;
    
    OnAfterValidateReturnReasonCode(Rec,CallingFieldNo); <=====================
Table<Sales Line>.PROCEDURE<OnBeforeAddItems>
  Raised in: Table<Sales Line>.PROCEDURE<AddItems>
    Code lines:
    OnBeforeAddItems(Rec); <=====================
    
    InitNewLine(SalesLine);
    Item.SETFILTER("No.",SelectionFilter);
    IF Item.FINDSET THEN
      REPEAT
        SalesLine.INIT;
        SalesLine."Line No." += 10000;
        SalesLine.VALIDATE(Type,Type::Item);
        SalesLine.VALIDATE("No.",Item."No.");
    ...
Table<Sales Line>.PROCEDURE<OnBeforeAutoAsmToOrder>
  Raised in: Table<Sales Line>.PROCEDURE<AutoAsmToOrder>
    Code lines:
    IsHandled := FALSE;
    OnBeforeAutoAsmToOrder(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    ATOLink.UpdateAsmFromSalesLine(Rec);
    
    OnAfterAutoAsmToOrder(Rec);
Table<Sales Line>.PROCEDURE<OnBeforeAutoReserve>
  Raised in: Table<Sales Line>.PROCEDURE<AutoReserve>
    Code lines:
    IsHandled := FALSE;
    OnBeforeAutoReserve(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    TESTFIELD(Type,Type::Item);
    TESTFIELD("No.");
    
    ReserveSalesLine.ReservQuantity(Rec,QtyToReserve,QtyToReserveBase);
    IF QtyToReserveBase <> 0 THEN BEGIN
    ...
Table<Sales Line>.PROCEDURE<OnBeforeBlanketOrderLookup>
  Raised in: Table<Sales Line>.PROCEDURE<BlanketOrderLookup>
    Code lines:
    IsHandled := FALSE;
    OnBeforeBlanketOrderLookup(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SalesLine2.RESET;
    SalesLine2.SETCURRENTKEY("Document Type",Type,"No.");
    SalesLine2.SETRANGE("Document Type","Document Type"::"Blanket Order");
    SalesLine2.SETRANGE(Type,Type);
    SalesLine2.SETRANGE("No.","No.");
    ...
Table<Sales Line>.PROCEDURE<OnBeforeCalcInvDiscToInvoice>
  Raised in: Table<Sales Line>.PROCEDURE<InitQtyToInvoice>
    Code lines:
    "Qty. to Invoice" := MaxQtyToInvoice;
    "Qty. to Invoice (Base)" := MaxQtyToInvoiceBase;
    "VAT Difference" := 0;
    
    OnBeforeCalcInvDiscToInvoice(Rec,CurrFieldNo); <=====================
    CalcInvDiscToInvoice;
    IF SalesHeader."Document Type" <> SalesHeader."Document Type"::Invoice THEN
      CalcPrepaymentToDeduct;
    
    OnAfterInitQtyToInvoice(Rec,CurrFieldNo);
Table<Sales Line>.PROCEDURE<OnBeforeCalcPlannedDeliveryDate>
  Raised in: Table<Sales Line>.PROCEDURE<CalcPlannedDeliveryDate>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCalcPlannedDeliveryDate(Rec,PlannedDeliveryDate,CurrFieldNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT("Planned Delivery Date");
    
    IF "Shipment Date" = 0D THEN
      EXIT("Planned Delivery Date");
    
    CASE CurrFieldNo OF
      FIELDNO("Shipment Date"):
    ...
Table<Sales Line>.PROCEDURE<OnBeforeCalcVATAmountLines>
  Raised in: Table<Sales Line>.PROCEDURE<IsCalcVATAmountLinesHandled>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCalcVATAmountLines(SalesHeader,SalesLine,VATAmountLine,IsHandled); <=====================
    EXIT(IsHandled);
Table<Sales Line>.PROCEDURE<OnBeforeCheckAssocPurchOrder>
  Raised in: Table<Sales Line>.PROCEDURE<CheckAssocPurchOrder>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckAssocPurchOrder(Rec,TheFieldCaption,IsHandled,xRec); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF TheFieldCaption = '' THEN BEGIN // If sales line is being deleted
      IF "Purch. Order Line No." <> 0 THEN
        ERROR(Text000,"Purchase Order No.","Purch. Order Line No.");
      IF "Special Order Purch. Line No." <> 0 THEN
        CheckPurchOrderLineDeleted("Special Order Purchase No.","Special Order Purch. Line No.");
    ...
Table<Sales Line>.PROCEDURE<OnBeforeCheckItemAvailable>
  Raised in: Table<Sales Line>.PROCEDURE<CheckItemAvailable>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckItemAvailable(Rec,CalledByFieldNo,IsHandled,CurrFieldNo); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF Reserve = Reserve::Always THEN
      EXIT;
    
    IF "Shipment Date" = 0D THEN BEGIN
      GetSalesHeader;
    ...
Table<Sales Line>.PROCEDURE<OnBeforeCopyFromItem>
  Raised in: Table<Sales Line>.PROCEDURE<CopyFromItem>
    Code lines:
    GetItem(Item);
    IsHandled := FALSE;
    OnBeforeCopyFromItem(Rec,Item,IsHandled); <=====================
    IF NOT IsHandled THEN BEGIN
      Item.TESTFIELD(Blocked,FALSE);
      Item.TESTFIELD("Gen. Prod. Posting Group");
      IF Item."Sales Blocked" AND NOT IsCreditDocType THEN
        ERROR(SalesBlockedErr);
      IF Item.Type = Item.Type::Inventory THEN BEGIN
        Item.TESTFIELD("Inventory Posting Group");
    ...
Table<Sales Line>.PROCEDURE<OnBeforeCrossReferenceNoAssign>
  Raised in: Table<Sales Line>.PROCEDURE<ValidateCrossReferenceNo>
    Code lines:
    ...
      IF SearchItem THEN
        DistIntegration.ICRLookupSalesItem(Rec,ReturnedItemCrossReference,CurrFieldNo <> 0)
      ELSE
        ReturnedItemCrossReference := ItemCrossReference;
    
      OnBeforeCrossReferenceNoAssign(Rec,ReturnedItemCrossReference); <=====================
    
      IF "No." <> ReturnedItemCrossReference."Item No." THEN
        VALIDATE("No.",ReturnedItemCrossReference."Item No.");
      IF ReturnedItemCrossReference."Variant Code" <> '' THEN
    ...
Table<Sales Line>.PROCEDURE<OnBeforeGetDefaultBin>
  Raised in: Table<Sales Line>.PROCEDURE<GetDefaultBin>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetDefaultBin(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF Type <> Type::Item THEN
      EXIT;
    
    "Bin Code" := '';
    IF "Drop Shipment" THEN
    ...
Table<Sales Line>.PROCEDURE<OnBeforeGetUnitCost>
  Raised in: Table<Sales Line>.PROCEDURE<GetUnitCost>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetUnitCost(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    TESTFIELD(Type,Type::Item);
    TESTFIELD("No.");
    GetItem(Item);
    "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
    IF GetSKU THEN
    ...
Table<Sales Line>.PROCEDURE<OnBeforeInitQtyToAsm>
  Raised in: Table<Sales Line>.PROCEDURE<InitQtyToAsm>
    Code lines:
    OnBeforeInitQtyToAsm(Rec,CurrFieldNo); <=====================
    
    IF NOT IsAsmToOrderAllowed THEN BEGIN
      "Qty. to Assemble to Order" := 0;
      "Qty. to Asm. to Order (Base)" := 0;
      EXIT;
    END;
    
    IF ((xRec."Qty. to Asm. to Order (Base)" = 0) AND IsAsmToOrderRequired AND ("Qty. Shipped (Base)" = 0)) OR
       ((xRec."Qty. to Asm. to Order (Base)" <> 0) AND
    ...
Table<Sales Line>.PROCEDURE<OnBeforeIsAsmToOrderRequired>
  Raised in: Table<Sales Line>.PROCEDURE<IsAsmToOrderRequired>
    Code lines:
    IsHandled := FALSE;
    Result := FALSE;
    OnBeforeIsAsmToOrderRequired(Rec,Result,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(Result);
    
    IF (Type <> Type::Item) OR ("No." = '') THEN
      EXIT(FALSE);
    GetItem(Item);
    IF GetSKU THEN
    ...
Table<Sales Line>.PROCEDURE<OnBeforeMaxQtyToInvoice>
  Raised in: Table<Sales Line>.PROCEDURE<MaxQtyToInvoice>
    Code lines:
    IsHandled := FALSE;
    OnBeforeMaxQtyToInvoice(Rec,MaxQty,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(MaxQty);
    
    IF "Prepayment Line" THEN
      EXIT(1);
    
    IF IsCreditDocType THEN
      EXIT("Return Qty. Received" + "Return Qty. to Receive" - "Quantity Invoiced");
    ...
Table<Sales Line>.PROCEDURE<OnBeforeMaxQtyToInvoiceBase>
  Raised in: Table<Sales Line>.PROCEDURE<MaxQtyToInvoiceBase>
    Code lines:
    IsHandled := FALSE;
    OnBeforeMaxQtyToInvoiceBase(Rec,MaxQtyBase,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(MaxQtyBase);
    
    IF IsCreditDocType THEN
      EXIT("Return Qty. Received (Base)" + "Return Qty. to Receive (Base)" - "Qty. Invoiced (Base)");
    
    EXIT("Qty. Shipped (Base)" + "Qty. to Ship (Base)" - "Qty. Invoiced (Base)");
Table<Sales Line>.PROCEDURE<OnBeforeOpenItemTrackingLines>
  Raised in: Table<Sales Line>.PROCEDURE<OpenItemTrackingLines>
    Code lines:
    IsHandled := FALSE;
    OnBeforeOpenItemTrackingLines(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    TESTFIELD(Type,Type::Item);
    TESTFIELD("No.");
    TESTFIELD("Quantity (Base)");
    IF "Job Contract Entry No." <> 0 THEN
      ERROR(Text048,TABLECAPTION,Job.TABLECAPTION);
Table<Sales Line>.PROCEDURE<OnBeforeShowItemSub>
  Raised in: Table<Sales Line>.PROCEDURE<ShowItemSub>
    Code lines:
    IsHandled := FALSE;
    OnBeforeShowItemSub(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    CLEAR(SalesHeader);
    TestStatusOpen;
    ItemSubstitutionMgt.ItemSubstGet(Rec);
    IF TransferExtendedText.SalesCheckIfAnyExtText(Rec,TRUE) THEN
      TransferExtendedText.InsertSalesExtText(Rec);
    ...
Table<Sales Line>.PROCEDURE<OnBeforeShowReservation>
  Raised in: Table<Sales Line>.PROCEDURE<ShowReservation>
    Code lines:
    IsHandled := FALSE;
    OnBeforeShowReservation(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    TESTFIELD(Type,Type::Item);
    TESTFIELD("No.");
    TESTFIELD(Reserve);
    CLEAR(Reservation);
    Reservation.SetSalesLine(Rec);
    ...
Table<Sales Line>.PROCEDURE<OnBeforeShowReservationEntries>
  Raised in: Table<Sales Line>.PROCEDURE<ShowReservationEntries>
    Code lines:
    IsHandled := FALSE;
    OnBeforeShowReservationEntries(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    TESTFIELD(Type,Type::Item);
    TESTFIELD("No.");
    ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,TRUE);
    ReserveSalesLine.FilterReservFor(ReservEntry,Rec);
    IF Modal THEN
    ...
Table<Sales Line>.PROCEDURE<OnBeforeTestJobPlanningLine>
  Raised in: Table<Sales Line>.PROCEDURE<TestJobPlanningLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTestJobPlanningLine(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF "Job Contract Entry No." = 0 THEN
      EXIT;
    
    JobPostLine.TestSalesLine(Rec);
Table<Sales Line>.PROCEDURE<OnBeforeTestStatusOpen>
  Raised in: Table<Sales Line>.PROCEDURE<TestStatusOpen>
    Code lines:
    IF StatusCheckSuspended THEN
      EXIT;
    
    GetSalesHeader;
    OnBeforeTestStatusOpen(Rec,SalesHeader); <=====================
    
    IF NOT "System-Created Entry" THEN
      IF HasTypeToFillMandatoryFields THEN
        SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);
    
Table<Sales Line>.PROCEDURE<OnBeforeUpdateLineDiscPct>
  Raised in: Table<Sales Line>.PROCEDURE<UpdateLineDiscPct>
    Code lines:
    IsHandled := FALSE;
    OnBeforeUpdateLineDiscPct(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") <> 0 THEN BEGIN
      LineDiscountPct := ROUND(
          "Line Discount Amount" / ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") * 100,
          0.00001);
      IF NOT (LineDiscountPct IN [0..100]) THEN
    ...
Table<Sales Line>.PROCEDURE<OnBeforeUpdatePrepmtAmounts>
  Raised in: Table<Sales Line>.PROCEDURE<UpdatePrepmtAmounts>
    Code lines:
    IsHandled := FALSE;
    OnBeforeUpdatePrepmtAmounts(Rec,SalesHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF "Prepayment %" <> 0 THEN BEGIN
      IF Quantity < 0 THEN
        FIELDERROR(Quantity,STRSUBSTNO(Text047,FIELDCAPTION("Prepayment %")));
      IF "Unit Price" < 0 THEN
        FIELDERROR("Unit Price",STRSUBSTNO(Text047,FIELDCAPTION("Prepayment %")));
    ...
Table<Sales Line>.PROCEDURE<OnBeforeUpdatePrepmtSetupFields>
  Raised in: Table<Sales Line>.PROCEDURE<UpdatePrepmtSetupFields>
    Code lines:
    IsHandled := FALSE;
    OnBeforeUpdatePrepmtSetupFields(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF ("Prepayment %" <> 0) AND (Type <> Type::" ") THEN BEGIN
      TESTFIELD("Document Type","Document Type"::Order);
      TESTFIELD("No.");
      IF CurrFieldNo = FIELDNO("Prepayment %") THEN
        IF "System-Created Entry" AND NOT IsServiceCharge THEN
    ...
Table<Sales Line>.PROCEDURE<OnBeforeUpdateUnitPrice>
  Raised in: Table<Sales Line>.PROCEDURE<UpdateUnitPrice>
    Code lines:
    IsHandled := FALSE;
    OnBeforeUpdateUnitPrice(Rec,xRec,CalledByFieldNo,CurrFieldNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    GetSalesHeader;
    TESTFIELD("Qty. per Unit of Measure");
    
    CASE Type OF
      Type::Item,
    ...
Table<Sales Line>.PROCEDURE<OnBeforeUpdateVATAmounts>
  Raised in: Table<Sales Line>.PROCEDURE<UpdateVATAmounts>
    Code lines:
    OnBeforeUpdateVATAmounts(Rec); <=====================
    
    GetSalesHeader;
    SalesLine2.SETRANGE("Document Type","Document Type");
    SalesLine2.SETRANGE("Document No.","Document No.");
    SalesLine2.SETFILTER("Line No.",'<>%1',"Line No.");
    SalesLine2.SETRANGE("VAT Identifier","VAT Identifier");
    SalesLine2.SETRANGE("Tax Group Code","Tax Group Code");
    
    IF "Line Amount" = "Inv. Discount Amount" THEN BEGIN
    ...
Table<Sales Line>.PROCEDURE<OnBeforeValidateReturnReasonCode>
  Raised in: Table<Sales Line>.PROCEDURE<ValidateReturnReasonCode>
    Code lines:
    IsHandled := FALSE;
    OnBeforeValidateReturnReasonCode(Rec,CallingFieldNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF CallingFieldNo = 0 THEN
      EXIT;
    IF "Return Reason Code" = '' THEN BEGIN
      IF (Type = Type::Item) AND ("No." <> '') THEN
        GetUnitCost;
    ...
Table<Sales Line>.PROCEDURE<OnBeforeVerifyReservedQty>
  Raised in: Table<Sales Line>.<OnInsert>
    Code lines:
    TestStatusOpen;
    IF Quantity <> 0 THEN BEGIN
      OnBeforeVerifyReservedQty(Rec,xRec,0); <=====================
      ReserveSalesLine.VerifyQuantity(Rec,xRec);
    END;
    LOCKTABLE;
    SalesHeader."No." := '';
    IF Type = Type::Item THEN
      IF SalesHeader.InventoryPickConflict("Document Type","Document No.",SalesHeader."Shipping Advice") THEN
        ERROR(Text056,SalesHeader."Shipping Advice");
    ...
  Raised in: Table<Sales Line>.Field<Quantity>.<OnValidate>
    Code lines:
    ...
      InitItemAppl(FALSE);
    
    IF Type = Type::Item THEN BEGIN
      UpdateUnitPrice(FIELDNO(Quantity));
      IF (xRec.Quantity <> Quantity) OR (xRec."Quantity (Base)" <> "Quantity (Base)") THEN BEGIN
        OnBeforeVerifyReservedQty(Rec,xRec,FIELDNO(Quantity)); <=====================
        ReserveSalesLine.VerifyQuantity(Rec,xRec);
        IF NOT "Drop Shipment" THEN
          UpdateWithWarehouseShip;
        WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
    ...
Table<Sales Line>.PROCEDURE<OnCalcShipmentDateOnPlannedShipmentDate>
  Raised in: Table<Sales Line>.PROCEDURE<CalcShipmentDate>
    Code lines:
    IF "Planned Shipment Date" = 0D THEN
      EXIT("Shipment Date");
    
    OnCalcShipmentDateOnPlannedShipmentDate(Rec,ShipmentDate,IsHandled); <=====================
    
    IF FORMAT("Outbound Whse. Handling Time") <> '' THEN
      EXIT(
        CalendarMgmt.CalcDateBOC2(
          FORMAT("Outbound Whse. Handling Time"),
          "Planned Shipment Date",
    ...
Table<Sales Line>.PROCEDURE<OnCheckWarehouseOnBeforeShowDialog>
  Raised in: Table<Sales Line>.PROCEDURE<CheckWarehouse>
    Code lines:
    ...
            DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Put-away"));
        END;
      END;
    END;
    
    OnCheckWarehouseOnBeforeShowDialog(Rec,Location2,ShowDialog,DialogText); <=====================
    
    CASE ShowDialog OF
      ShowDialog::Message:
        MESSAGE(WhseRequirementMsg,DialogText);
    ...
Table<Sales Line>.PROCEDURE<OnCopyFromItemOnAfterCheck>
  Raised in: Table<Sales Line>.PROCEDURE<CopyFromItem>
    Code lines:
    ...
        Item.TESTFIELD("Inventory Posting Group");
        "Posting Group" := Item."Inventory Posting Group";
      END;
    END;
    
    OnCopyFromItemOnAfterCheck(Rec,Item); <=====================
    
    Description := Item.Description;
    "Description 2" := Item."Description 2";
    GetUnitCost;
    ...
Table<Sales Line>.PROCEDURE<OnCrossReferenceNoLookupOnBeforeValidateUnitPrice>
  Raised in: Table<Sales Line>.PROCEDURE<CrossReferenceNoLookUp>
    Code lines:
    ...
          IF PAGE.RUNMODAL(PAGE::"Cross Reference List",ItemCrossReference) = ACTION::LookupOK THEN BEGIN
            "Cross-Reference No." := ItemCrossReference."Cross-Reference No.";
            ValidateCrossReferenceNo(ItemCrossReference,FALSE);
            PriceCalcMgt.FindSalesLineLineDisc(SalesHeader,Rec);
            PriceCalcMgt.FindSalesLinePrice(SalesHeader,Rec,FIELDNO("Cross-Reference No."));
            OnCrossReferenceNoLookupOnBeforeValidateUnitPrice(SalesHeader,Rec); <=====================
            VALIDATE("Unit Price");
          END;
        END;
      Type::"G/L Account",Type::Resource:
    ...
Table<Sales Line>.PROCEDURE<OnGetDeferralPostDate>
  Raised in: Table<Sales Line>.Field<Deferral Code>.<OnValidate>
    Code lines:
    GetSalesHeader;
    OnGetDeferralPostDate(SalesHeader,DeferralPostDate,Rec); <=====================
    IF DeferralPostDate = 0D THEN
      DeferralPostDate := SalesHeader."Posting Date";
    
    DeferralUtilities.DeferralCodeOnValidate(
      "Deferral Code",DeferralUtilities.GetSalesDeferralDocType,'','',
      "Document Type","Document No.","Line No.",
      GetDeferralAmount,DeferralPostDate,
      Description,SalesHeader."Currency Code");
    ...
  Raised in: Table<Sales Line>.PROCEDURE<UpdateDeferralAmounts>
    Code lines:
    GetSalesHeader;
    OnGetDeferralPostDate(SalesHeader,DeferralPostDate,Rec); <=====================
    IF DeferralPostDate = 0D THEN
      DeferralPostDate := SalesHeader."Posting Date";
    AdjustStartDate := TRUE;
    IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
      IF "Returns Deferral Start Date" = 0D THEN
        "Returns Deferral Start Date" := SalesHeader."Posting Date";
      DeferralPostDate := "Returns Deferral Start Date";
      AdjustStartDate := FALSE;
    ...
Table<Sales Line>.PROCEDURE<OnInitQtyToShip2OnBeforeCalcInvDiscToInvoice>
  Raised in: Table<Sales Line>.PROCEDURE<InitQtyToShip2>
    Code lines:
    ...
    
    "Qty. to Invoice" := MaxQtyToInvoice;
    "Qty. to Invoice (Base)" := MaxQtyToInvoiceBase;
    "VAT Difference" := 0;
    
    OnInitQtyToShip2OnBeforeCalcInvDiscToInvoice(Rec,xRec); <=====================
    
    CalcInvDiscToInvoice;
    
    CalcPrepaymentToDeduct;
Table<Sales Line>.PROCEDURE<OnShowItemChargeAssgntOnBeforeCalcItemCharge>
  Raised in: Table<Sales Line>.PROCEDURE<ShowItemChargeAssgnt>
    Code lines:
    ...
      ItemChargeAssgntSales."Unit Cost" :=
        ROUND(ItemChargeAssgntLineAmt / Quantity,Currency."Unit-Amount Rounding Precision");
    END;
    
    IsHandled := FALSE;
    OnShowItemChargeAssgntOnBeforeCalcItemCharge(Rec,ItemChargeAssgntLineAmt,Currency,IsHandled); <=====================
    IF NOT IsHandled THEN
      ItemChargeAssgntLineAmt :=
        ROUND(ItemChargeAssgntLineAmt * ("Qty. to Invoice" / Quantity),Currency."Amount Rounding Precision");
    
    ...
Table<Sales Line>.PROCEDURE<OnUpdateAmountOnBeforeCheckCreditLimit>
  Raised in: Table<Sales Line>.PROCEDURE<CheckCreditLimit>
    Code lines:
    ...
       (("Outstanding Amount" + "Shipped Not Invoiced") > 0) AND
       (CurrFieldNo <> FIELDNO("Blanket Order No.")) AND
       (CurrFieldNo <> FIELDNO("Blanket Order Line No."))
    THEN BEGIN
      IsHandled := FALSE;
      OnUpdateAmountOnBeforeCheckCreditLimit(Rec,IsHandled); <=====================
      IF NOT IsHandled THEN
        CustCheckCreditLimit.SalesLineCheck(Rec);
    END;
Table<Sales Line>.PROCEDURE<OnUpdateUnitPriceOnBeforeFindPrice>
  Raised in: Table<Sales Line>.PROCEDURE<UpdateUnitPrice>
    Code lines:
    ...
    CASE Type OF
      Type::Item,
      Type::Resource:
        BEGIN
          IsHandled := FALSE;
          OnUpdateUnitPriceOnBeforeFindPrice(SalesHeader,Rec,CalledByFieldNo,CurrFieldNo,IsHandled); <=====================
          IF NOT IsHandled THEN BEGIN
            IF NOT ("Copied From Posted Doc." AND IsCreditDocType) THEN
              PriceCalcMgt.FindSalesLineLineDisc(SalesHeader,Rec);
            PriceCalcMgt.FindSalesLinePrice(SalesHeader,Rec,CalledByFieldNo);
    ...
Table<Sales Line>.PROCEDURE<OnValidateDescriptionOnBeforeCannotFindDescrError>
  Raised in: Table<Sales Line>.Field<Description>.<OnValidate>
    Code lines:
    ...
          END;
        END;
    END;
    
    IsHandled := FALSE;
    OnValidateDescriptionOnBeforeCannotFindDescrError(Rec,xRec,IsHandled); <=====================
    IF NOT IsHandled THEN
      IF ("No." = '') AND GUIALLOWED AND ApplicationAreaMgmtFacade.IsFoundationEnabled THEN
        IF "Document Type" IN
           ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::Quote,"Document Type"::"Credit Memo"]
    ...
Table<Sales Line>.PROCEDURE<OnValidateLocationCodeOnBeforeSetShipmentDate>
  Raised in: Table<Sales Line>.Field<Location Code>.<OnValidate>
    Code lines:
    ...
      TESTFIELD("Return Receipt No.",'');
    END;
    
    GetSalesHeader;
    IsHandled := FALSE;
    OnValidateLocationCodeOnBeforeSetShipmentDate(Rec,IsHandled); <=====================
    IF NOT IsHandled THEN
      "Shipment Date" :=
        CalendarMgmt.CalcDateBOC(
          '',SalesHeader."Shipment Date",CalChange."Source Type"::Location,"Location Code",
    ...
Table<Sales Line>.PROCEDURE<OnValidateNoOnAfterUpdateUnitPrice>
  Raised in: Table<Sales Line>.Field<No.>.<OnValidate>
    Code lines:
    ...
        UpdateWithWarehouseShip;
      END;
      UpdateUnitPrice(FIELDNO("No."));
    END;
    
    OnValidateNoOnAfterUpdateUnitPrice(Rec,xRec); <=====================
    
    CreateDim(
      DimMgt.TypeToTableID3(Type),"No.",
      DATABASE::Job,"Job No.",
    ...
Table<Sales Line>.PROCEDURE<OnValidateNoOnAfterVerifyChange>
  Raised in: Table<Sales Line>.Field<No.>.<OnValidate>
    Code lines:
    ...
      TESTFIELD("Qty. to Asm. to Order (Base)",0);
      CALCFIELDS("Reserved Qty. (Base)");
      TESTFIELD("Reserved Qty. (Base)",0);
      IF Type = Type::Item THEN
        WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
      OnValidateNoOnAfterVerifyChange(Rec,xRec); <=====================
    END;
    
    TESTFIELD("Qty. Shipped Not Invoiced",0);
    TESTFIELD("Quantity Shipped",0);
    ...
Table<Sales Line>.PROCEDURE<OnValidateNoOnBeforeInitRec>
  Raised in: Table<Sales Line>.Field<No.>.<OnValidate>
    Code lines:
    ...
    IF "No." = '' THEN
      ATOLink.DeleteAsmFromSalesLine(Rec);
    CheckAssocPurchOrder(FIELDCAPTION("No."));
    AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);
    
    OnValidateNoOnBeforeInitRec(Rec,xRec,CurrFieldNo); <=====================
    TempSalesLine := Rec;
    INIT;
    IF xRec."Line Amount" <> 0 THEN
      "Recalculate Invoice Disc." := TRUE;
    ...
Table<Sales Line>.PROCEDURE<OnValidateNoOnBeforeUpdateDates>
  Raised in: Table<Sales Line>.Field<No.>.<OnValidate>
    Code lines:
    ...
      CalendarMgmt.CalcDateBOC(
        '',SalesHeader."Shipment Date",CalChange."Source Type"::Location,"Location Code",'',
        CalChange."Source Type"::"Shipping Agent","Shipping Agent Code","Shipping Agent Service Code",FALSE);
    
    IsHandled := FALSE;
    OnValidateNoOnBeforeUpdateDates(Rec,xRec,SalesHeader,CurrFieldNo,IsHandled); <=====================
    IF NOT IsHandled THEN
      UpdateDates;
    
    OnAfterAssignHeaderValues(Rec,SalesHeader);
    ...
Table<Sales Line>.PROCEDURE<OnValidateNoOnCopyFromTempSalesLine>
  Raised in: Table<Sales Line>.Field<No.>.<OnValidate>
    Code lines:
    ...
    INIT;
    IF xRec."Line Amount" <> 0 THEN
      "Recalculate Invoice Disc." := TRUE;
    Type := TempSalesLine.Type;
    "No." := TempSalesLine."No.";
    OnValidateNoOnCopyFromTempSalesLine(Rec,TempSalesLine); <=====================
    IF "No." = '' THEN
      EXIT;
    
    IF HasTypeToFillMandatoryFields THEN
    ...
Table<Sales Line>.PROCEDURE<OnValidateQtyToReturnAfterInitQty>
  Raised in: Table<Sales Line>.Field<Return Qty. to Receive>.<OnValidate>
    Code lines:
    ...
      "Return Qty. to Receive (Base)" := CalcBaseQty("Return Qty. to Receive");
      InitQtyToInvoice;
    END;
    
    IsHandled := FALSE;
    OnValidateQtyToReturnAfterInitQty(Rec,xRec,CurrFieldNo,IsHandled); <=====================
    IF NOT IsHandled THEN BEGIN
      IF ("Return Qty. to Receive" * Quantity < 0) OR
         (ABS("Return Qty. to Receive") > ABS("Outstanding Quantity")) OR
         (Quantity * "Outstanding Quantity" < 0)
    ...
Table<Sales Line>.PROCEDURE<OnValidateQtyToShipAfterInitQty>
  Raised in: Table<Sales Line>.Field<Qty. to Ship>.<OnValidate>
    Code lines:
    ...
      CheckServItemCreation;
      InitQtyToInvoice;
    END;
    
    IsHandled := FALSE;
    OnValidateQtyToShipAfterInitQty(Rec,xRec,CurrFieldNo,IsHandled); <=====================
    IF NOT IsHandled THEN BEGIN
      IF ((("Qty. to Ship" < 0) XOR (Quantity < 0)) AND (Quantity <> 0) AND ("Qty. to Ship" <> 0)) OR
         (ABS("Qty. to Ship") > ABS("Outstanding Quantity")) OR
         (((Quantity < 0) XOR ("Outstanding Quantity" < 0)) AND (Quantity <> 0) AND ("Outstanding Quantity" <> 0))
    ...
Table<Sales Line>.PROCEDURE<OnValidateQuantityOnAfterCalcBaseQty>
  Raised in: Table<Sales Line>.Field<Quantity>.<OnValidate>
    Code lines:
    ...
      IF "Return Receipt No." <> '' THEN
        CheckRetRcptRelation;
    
    "Quantity (Base)" := CalcBaseQty(Quantity);
    
    OnValidateQuantityOnAfterCalcBaseQty(Rec,xRec); <=====================
    
    IF IsCreditDocType THEN BEGIN
      IF (Quantity * "Return Qty. Received" < 0) OR
         ((ABS(Quantity) < ABS("Return Qty. Received")) AND ("Return Receipt No." = ''))
    ...
Table<Sales Line>.PROCEDURE<OnValidateQuantityOnBeforeGetUnitCost>
  Raised in: Table<Sales Line>.Field<Quantity>.<OnValidate>
    Code lines:
    ...
        IF NOT "Drop Shipment" THEN
          UpdateWithWarehouseShip;
        WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
        IF ("Quantity (Base)" * xRec."Quantity (Base)" <= 0) AND ("No." <> '') THEN BEGIN
          GetItem(Item);
          OnValidateQuantityOnBeforeGetUnitCost(Rec,Item); <=====================
          IF (Item."Costing Method" = Item."Costing Method"::Standard) AND NOT IsShipment THEN
            GetUnitCost;
        END;
      END;
    ...
Table<Sales Line>.PROCEDURE<OnValidateTypeOnAfterCheckItem>
  Raised in: Table<Sales Line>.Field<Type>.<OnValidate>
    Code lines:
    ...
              SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);
              CALCFIELDS("Reserved Qty. (Base)");
              TESTFIELD("Reserved Qty. (Base)",0);
              ReserveSalesLine.VerifyChange(Rec,xRec);
              WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
              OnValidateTypeOnAfterCheckItem(Rec,xRec); <=====================
            END;
          END;
        Type::"Fixed Asset":
          IF Quantity <> 0 THEN
    ...
Table<Sales Line>.PROCEDURE<OnValidateTypeOnCopyFromTempSalesLine>
  Raised in: Table<Sales Line>.Field<Type>.<OnValidate>
    Code lines:
    ...
    
    Type := TempSalesLine.Type;
    "System-Created Entry" := TempSalesLine."System-Created Entry";
    "Currency Code" := SalesHeader."Currency Code";
    
    OnValidateTypeOnCopyFromTempSalesLine(Rec,TempSalesLine); <=====================
    
    IF Type = Type::Item THEN
      "Allow Item Charge Assignment" := TRUE
    ELSE
    ...
Table<Sales Line>.PROCEDURE<OnValidateVariantCodeOnAfterChecks>
  Raised in: Table<Sales Line>.Field<Variant Code>.<OnValidate>
    Code lines:
    ...
      TESTFIELD("Return Qty. Rcd. Not Invd.",0);
      TESTFIELD("Return Receipt No.",'');
      InitItemAppl(FALSE);
    END;
    
    OnValidateVariantCodeOnAfterChecks(Rec,xRec,CurrFieldNo); <=====================
    
    CheckItemAvailable(FIELDNO("Variant Code"));
    
    IF Type = Type::Item THEN BEGIN
    ...
Table<Sales Line>.PROCEDURE<OnValidateVATProdPostingGroupOnBeforeCheckVATCalcType>
  Raised in: Table<Sales Line>.Field<VAT Prod. Posting Group>.<OnValidate>
    Code lines:
    ...
    "VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
    "VAT Identifier" := VATPostingSetup."VAT Identifier";
    "VAT Clause Code" := VATPostingSetup."VAT Clause Code";
    
    IsHandled := FALSE;
    OnValidateVATProdPostingGroupOnBeforeCheckVATCalcType(Rec,VATPostingSetup,IsHandled); <=====================
    IF NOT IsHandled THEN
      CASE "VAT Calculation Type" OF
        "VAT Calculation Type"::"Reverse Charge VAT",
        "VAT Calculation Type"::"Sales Tax":
    ...
Table<Excel Buffer>.PROCEDURE<OnBeforeParseCellValue>
  Raised in: Table<Excel Buffer>.PROCEDURE<ParseCellValue>
    Code lines:
    ...
    // 2. FormatString.Contains(':') -> Time
    // 3. FormatString.ContainsOneOf('y', 'm', 'd') && FormatString.DoesNotContain('Red') -> Date
    // 4. anything else -> Decimal
    
    IsHandled := FALSE;
    OnBeforeParseCellValue(Rec,Value,FormatString,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    NumberFormat := COPYSTR(FormatString,1,30);
    ...
Table<Purchase Header>.PROCEDURE<OnAfterAddShipToAddress>
  Raised in: Table<Purchase Header>.PROCEDURE<AddShipToAddress>
    Code lines:
    ...
        "Ship-to City" := SalesHeader."Ship-to City";
        "Ship-to Contact" := SalesHeader."Ship-to Contact";
      END;
    END;
    
    OnAfterAddShipToAddress(Rec,SalesHeader); <=====================
Table<Purchase Header>.PROCEDURE<OnAfterAppliesToDocNoOnLookup>
  Raised in: Table<Purchase Header>.Field<Applies-to Doc. No.>.<OnLookup>
    Code lines:
    ...
      ApplyVendEntries.GetVendLedgEntry(VendLedgEntry);
      GenJnlApply.CheckAgainstApplnCurrency(
        "Currency Code",VendLedgEntry."Currency Code",GenJnlLine."Account Type"::Vendor,TRUE);
      "Applies-to Doc. Type" := VendLedgEntry."Document Type";
      "Applies-to Doc. No." := VendLedgEntry."Document No.";
      OnAfterAppliesToDocNoOnLookup(Rec,VendLedgEntry); <=====================
    END;
    CLEAR(ApplyVendEntries);
Table<Purchase Header>.PROCEDURE<OnAfterChangePricesIncludingVAT>
  Raised in: Table<Purchase Header>.Field<Prices Including VAT>.<OnValidate>
    Code lines:
    ...
              PurchLine."Line Amount" := PurchLine.Amount + PurchLine."Inv. Discount Amount";
          END;
          PurchLine.MODIFY;
        UNTIL PurchLine.NEXT = 0;
      END;
      OnAfterChangePricesIncludingVAT(Rec); <=====================
    END;
Table<Purchase Header>.PROCEDURE<OnAfterCheckBuyFromVendor>
  Raised in: Table<Purchase Header>.Field<Buy-from Vendor No.>.<OnValidate>
    Code lines:
    ...
    END;
    
    GetVend("Buy-from Vendor No.");
    Vend.CheckBlockedVendOnDocs(Vend,FALSE);
    Vend.TESTFIELD("Gen. Bus. Posting Group");
    OnAfterCheckBuyFromVendor(Rec,xRec,Vend); <=====================
    
    "Buy-from Vendor Name" := Vend.Name;
    "Buy-from Vendor Name 2" := Vend."Name 2";
    CopyBuyFromVendorAddressFieldsFromVendor(Vend,FALSE);
    ...
Table<Purchase Header>.PROCEDURE<OnAfterCheckPayToVendor>
  Raised in: Table<Purchase Header>.Field<Pay-to Vendor No.>.<OnValidate>
    Code lines:
    ...
    
    GetVend("Pay-to Vendor No.");
    Vend.CheckBlockedVendOnDocs(Vend,FALSE);
    Vend.TESTFIELD("Vendor Posting Group");
    PostingSetupMgt.CheckVendPostingGroupPayablesAccount("Vendor Posting Group");
    OnAfterCheckPayToVendor(Rec,xRec,Vend); <=====================
    
    "Pay-to Name" := Vend.Name;
    "Pay-to Name 2" := Vend."Name 2";
    CopyPayToVendorAddressFieldsFromVendor(Vend,FALSE);
    ...
Table<Purchase Header>.PROCEDURE<OnAfterConfirmPurchPrice>
  Raised in: Table<Purchase Header>.Field<Prices Including VAT>.<OnValidate>
    Code lines:
    ...
            STRSUBSTNO(
              Text025 +
              Text027,
              FIELDCAPTION("Prices Including VAT"),PurchLine.FIELDCAPTION("Direct Unit Cost")),
            TRUE);
        OnAfterConfirmPurchPrice(Rec,PurchLine,RecalculatePrice); <=====================
        PurchLine.SetPurchHeader(Rec);
    
        IF "Currency Code" = '' THEN
          Currency.InitRoundingPrecision
    ...
Table<Purchase Header>.PROCEDURE<OnAfterCopyBuyFromVendorAddressFieldsFromVendor>
  Raised in: Table<Purchase Header>.PROCEDURE<CopyBuyFromVendorAddressFieldsFromVendor>
    Code lines:
    ...
      "Buy-from Address 2" := BuyFromVendor."Address 2";
      "Buy-from City" := BuyFromVendor.City;
      "Buy-from Post Code" := BuyFromVendor."Post Code";
      "Buy-from County" := BuyFromVendor.County;
      "Buy-from Country/Region Code" := BuyFromVendor."Country/Region Code";
      OnAfterCopyBuyFromVendorAddressFieldsFromVendor(Rec,BuyFromVendor); <=====================
    END;
Table<Purchase Header>.PROCEDURE<OnAfterCopyBuyFromVendorFieldsFromVendor>
  Raised in: Table<Purchase Header>.Field<Buy-from Vendor No.>.<OnValidate>
    Code lines:
    ...
    "VAT Country/Region Code" := Vend."Country/Region Code";
    "VAT Registration No." := Vend."VAT Registration No.";
    VALIDATE("Lead Time Calculation",Vend."Lead Time Calculation");
    "Responsibility Center" := UserSetupMgt.GetRespCenter(1,Vend."Responsibility Center");
    ValidateEmptySellToCustomerAndLocation;
    OnAfterCopyBuyFromVendorFieldsFromVendor(Rec,Vend,xRec); <=====================
    
    IF "Buy-from Vendor No." = xRec."Pay-to Vendor No." THEN
      IF ReceivedPurchLinesExist OR ReturnShipmentExist THEN BEGIN
        TESTFIELD("VAT Bus. Posting Group",xRec."VAT Bus. Posting Group");
    ...
Table<Purchase Header>.PROCEDURE<OnAfterCopyPayToVendorAddressFieldsFromVendor>
  Raised in: Table<Purchase Header>.PROCEDURE<CopyPayToVendorAddressFieldsFromVendor>
    Code lines:
    ...
      "Pay-to Address 2" := PayToVendor."Address 2";
      "Pay-to City" := PayToVendor.City;
      "Pay-to Post Code" := PayToVendor."Post Code";
      "Pay-to County" := PayToVendor.County;
      "Pay-to Country/Region Code" := PayToVendor."Country/Region Code";
      OnAfterCopyPayToVendorAddressFieldsFromVendor(Rec,PayToVendor); <=====================
    END;
Table<Purchase Header>.PROCEDURE<OnAfterCopyShipToVendorAddressFieldsFromVendor>
  Raised in: Table<Purchase Header>.PROCEDURE<CopyShipToVendorAddressFieldsFromVendor>
    Code lines:
    ...
      "Ship-to Address 2" := BuyFromVendor."Address 2";
      "Ship-to City" := BuyFromVendor.City;
      "Ship-to Post Code" := BuyFromVendor."Post Code";
      "Ship-to County" := BuyFromVendor.County;
      VALIDATE("Ship-to Country/Region Code",BuyFromVendor."Country/Region Code");
      OnAfterCopyShipToVendorAddressFieldsFromVendor(Rec,BuyFromVendor); <=====================
    END;
Table<Purchase Header>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Purchase Header>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[2] := No2;
    TableID[3] := Type3;
    No[3] := No3;
    TableID[4] := Type4;
    No[4] := No4;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    OldDimSetID := "Dimension Set ID";
    ...
Table<Purchase Header>.PROCEDURE<OnAfterDeleteAllTempPurchLines>
  Raised in: Table<Purchase Header>.PROCEDURE<RecreatePurchLines>
    Code lines:
    ...
    
        RecreateItemChargeAssgntPurch(TempItemChargeAssgntPurch,TempPurchLine,TempInteger);
    
        TempPurchLine.SETRANGE(Type);
        TempPurchLine.DELETEALL;
        OnAfterDeleteAllTempPurchLines; <=====================
      END;
    END ELSE
      Rec := xRec;
Table<Purchase Header>.PROCEDURE<OnAfterGetNoSeriesCode>
  Raised in: Table<Purchase Header>.PROCEDURE<GetNoSeriesCode>
    Code lines:
    ...
      "Document Type"::"Credit Memo":
        NoSeriesCode := PurchSetup."Credit Memo Nos.";
      "Document Type"::"Blanket Order":
        NoSeriesCode := PurchSetup."Blanket Order Nos.";
    END;
    OnAfterGetNoSeriesCode(Rec,PurchSetup,NoSeriesCode); <=====================
    EXIT(NoSeriesMgt.GetNoSeriesWithCheck(NoSeriesCode,SelectNoSeriesAllowed,"No. Series"));
Table<Purchase Header>.PROCEDURE<OnAfterGetPostingNoSeriesCode>
  Raised in: Table<Purchase Header>.PROCEDURE<GetPostingNoSeriesCode>
    Code lines:
    IF IsCreditDocType THEN
      PostingNos := PurchSetup."Posted Credit Memo Nos."
    ELSE
      PostingNos := PurchSetup."Posted Invoice Nos.";
    
    OnAfterGetPostingNoSeriesCode(Rec,PostingNos); <=====================
Table<Purchase Header>.PROCEDURE<OnAfterGetPrepaymentPostingNoSeriesCode>
  Raised in: Table<Purchase Header>.PROCEDURE<GetPostingPrepaymentNoSeriesCode>
    Code lines:
    IF IsCreditDocType THEN
      PostingNos := PurchSetup."Posted Prepmt. Cr. Memo Nos."
    ELSE
      PostingNos := PurchSetup."Posted Prepmt. Inv. Nos.";
    
    OnAfterGetPrepaymentPostingNoSeriesCode(Rec,PostingNos); <=====================
Table<Purchase Header>.PROCEDURE<OnAfterInitNoSeries>
  Raised in: Table<Purchase Header>.PROCEDURE<InitNoSeries>
    Code lines:
    ...
    IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
      "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
      "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
    END;
    
    OnAfterInitNoSeries(Rec); <=====================
Table<Purchase Header>.PROCEDURE<OnAfterInitRecord>
  Raised in: Table<Purchase Header>.PROCEDURE<InitRecord>
    Code lines:
    ...
    UpdateInboundWhseHandlingTime;
    
    "Responsibility Center" := UserSetupMgt.GetRespCenter(1,"Responsibility Center");
    "Doc. No. Occurrence" := ArchiveManagement.GetNextOccurrenceNo(DATABASE::"Purchase Header","Document Type","No.");
    
    OnAfterInitRecord(Rec); <=====================
Table<Purchase Header>.PROCEDURE<OnAfterRecreatePurchLine>
  Raised in: Table<Purchase Header>.PROCEDURE<RecreatePurchLines>
    Code lines:
    ...
    
            OnRecreatePurchLinesOnBeforeInsertPurchLine(PurchLine,TempPurchLine);
            PurchLine.INSERT;
            ExtendedTextAdded := FALSE;
    
            OnAfterRecreatePurchLine(PurchLine,TempPurchLine); <=====================
    
            IF PurchLine.Type = PurchLine.Type::Item THEN
              RecreatePurchLinesFillItemChargeAssignment(PurchLine,TempPurchLine,TempItemChargeAssgntPurch);
    
    ...
Table<Purchase Header>.PROCEDURE<OnAfterSetShipToForSpecOrder>
  Raised in: Table<Purchase Header>.PROCEDURE<SetShipToForSpecOrder>
    Code lines:
    ...
        CompanyInfo."Ship-to Country/Region Code");
      "Ship-to Contact" := CompanyInfo."Ship-to Contact";
      "Location Code" := '';
    END;
    
    OnAfterSetShipToForSpecOrder(Rec); <=====================
Table<Purchase Header>.PROCEDURE<OnAfterTestNoSeries>
  Raised in: Table<Purchase Header>.PROCEDURE<TestNoSeries>
    Code lines:
    ...
          END;
        "Document Type"::"Blanket Order":
          PurchSetup.TESTFIELD("Blanket Order Nos.");
      END;
    
    OnAfterTestNoSeries(Rec); <=====================
Table<Purchase Header>.PROCEDURE<OnAfterTestStatusOpen>
  Raised in: Table<Purchase Header>.PROCEDURE<TestStatusOpen>
    Code lines:
    ...
    IF StatusCheckSuspended THEN
      EXIT;
    
    TESTFIELD(Status,Status::Open);
    
    OnAfterTestStatusOpen; <=====================
Table<Purchase Header>.PROCEDURE<OnAfterTransferExtendedTextForPurchaseLineRecreation>
  Raised in: Table<Purchase Header>.PROCEDURE<RecreatePurchLines>
    Code lines:
    ...
            END;
          END ELSE
            IF NOT ExtendedTextAdded THEN BEGIN
              TransferExtendedText.PurchCheckIfAnyExtText(PurchLine,TRUE);
              TransferExtendedText.InsertPurchExtText(PurchLine);
              OnAfterTransferExtendedTextForPurchaseLineRecreation(PurchLine,TempPurchLine); <=====================
              PurchLine.FINDLAST;
              ExtendedTextAdded := TRUE;
            END;
        UNTIL TempPurchLine.NEXT = 0;
    ...
Table<Purchase Header>.PROCEDURE<OnAfterUpdateBuyFromCont>
  Raised in: Table<Purchase Header>.PROCEDURE<UpdateBuyFromCont>
    Code lines:
    ...
    
    IF "Buy-from Contact No." <> '' THEN
      IF OfficeContact.GET("Buy-from Contact No.") THEN
        OfficeContact.CheckIfPrivacyBlockedGeneric;
    
    OnAfterUpdateBuyFromCont(Rec,Vend,OfficeContact); <=====================
Table<Purchase Header>.PROCEDURE<OnAfterUpdateBuyFromVend>
  Raised in: Table<Purchase Header>.PROCEDURE<UpdateBuyFromVend>
    Code lines:
    ...
    IF ("Buy-from Vendor No." = "Pay-to Vendor No.") OR
       ("Pay-to Vendor No." = '')
    THEN
      VALIDATE("Pay-to Contact No.","Buy-from Contact No.");
    
    OnAfterUpdateBuyFromVend(Rec,Cont); <=====================
Table<Purchase Header>.PROCEDURE<OnAfterUpdateCurrencyFactor>
  Raised in: Table<Purchase Header>.PROCEDURE<UpdateCurrencyFactor>
    Code lines:
    ...
      "Currency Factor" := 0;
      IF "Currency Code" <> xRec."Currency Code" THEN
        RecreatePurchLines(FIELDCAPTION("Currency Code"));
    END;
    
    OnAfterUpdateCurrencyFactor(Rec,GetHideValidationDialog); <=====================
Table<Purchase Header>.PROCEDURE<OnAfterUpdatePayToCont>
  Raised in: Table<Purchase Header>.PROCEDURE<UpdatePayToCont>
    Code lines:
    ...
    
    IF "Pay-to Contact No." <> '' THEN
      IF Contact.GET("Pay-to Contact No.") THEN
        Contact.CheckIfPrivacyBlockedGeneric;
    
    OnAfterUpdatePayToCont(Rec,Vend,Contact); <=====================
Table<Purchase Header>.PROCEDURE<OnAfterUpdatePayToVend>
  Raised in: Table<Purchase Header>.PROCEDURE<UpdatePayToVend>
    Code lines:
    ...
        IF "Pay-to Vendor No." <> ContBusinessRelation."No." THEN
          ERROR(Text037,Cont."No.",Cont.Name,"Pay-to Vendor No.");
    END ELSE
      ERROR(Text039,Cont."No.",Cont.Name);
    
    OnAfterUpdatePayToVend(Rec,Cont); <=====================
Table<Purchase Header>.PROCEDURE<OnAfterUpdatePurchLines>
  Raised in: Table<Purchase Header>.PROCEDURE<UpdatePurchLines>
    Code lines:
    ...
    Field.FIND('-');
    IF Field.NEXT <> 0 THEN
      ERROR(DuplicatedCaptionsNotAllowedErr);
    UpdatePurchLinesByFieldNo(Field."No.",AskQuestion);
    
    OnAfterUpdatePurchLines(Rec); <=====================
Table<Purchase Header>.PROCEDURE<OnAfterUpdateShipToAddress>
  Raised in: Table<Purchase Header>.PROCEDURE<UpdateShipToAddress>
    Code lines:
    IF IsCreditDocType THEN BEGIN
      OnAfterUpdateShipToAddress(Rec); <=====================
      EXIT;
    END;
    
    IF ("Location Code" <> '') AND Location.GET("Location Code") AND ("Sell-to Customer No." = '') THEN BEGIN
      SetShipToAddress(
        Location.Name,Location."Name 2",Location.Address,Location."Address 2",
        Location.City,Location."Post Code",Location.County,Location."Country/Region Code");
      "Ship-to Contact" := Location.Contact;
    ...
  Raised in: Table<Purchase Header>.PROCEDURE<UpdateShipToAddress>
    Code lines:
    IF IsCreditDocType THEN BEGIN
      OnAfterUpdateShipToAddress(Rec); <=====================
      EXIT;
    END;
    
    IF ("Location Code" <> '') AND Location.GET("Location Code") AND ("Sell-to Customer No." = '') THEN BEGIN
      SetShipToAddress(
        Location.Name,Location."Name 2",Location.Address,Location."Address 2",
        Location.City,Location."Post Code",Location.County,Location."Country/Region Code");
      "Ship-to Contact" := Location.Contact;
    ...
Table<Purchase Header>.PROCEDURE<OnAfterValidateShortcutDimCode>
  Raised in: Table<Purchase Header>.PROCEDURE<ValidateShortcutDimCode>
    Code lines:
    ...
      MODIFY;
      IF PurchLinesExist THEN
        UpdateAllLineDim("Dimension Set ID",OldDimSetID);
    END;
    
    OnAfterValidateShortcutDimCode(Rec,xRec,FieldNumber,ShortcutDimCode); <=====================
Table<Purchase Header>.PROCEDURE<OnBeforeInitInsert>
  Raised in: Table<Purchase Header>.PROCEDURE<InitInsert>
    Code lines:
    IsHandled := FALSE;
    OnBeforeInitInsert(Rec,xRec,IsHandled); <=====================
    IF NOT IsHandled THEN
      IF "No." = '' THEN BEGIN
        TestNoSeries;
        NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series","Posting Date","No.","No. Series");
      END;
    
    OnInitInsertOnBeforeInitRecord(Rec,xRec);
    InitRecord;
Table<Purchase Header>.PROCEDURE<OnBeforeInitRecord>
  Raised in: Table<Purchase Header>.PROCEDURE<InitRecord>
    Code lines:
    PurchSetup.GET;
    IsHandled := FALSE;
    OnBeforeInitRecord(Rec,IsHandled); <=====================
    IF NOT IsHandled THEN
      CASE "Document Type" OF
        "Document Type"::Quote,"Document Type"::Order:
          BEGIN
            NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Invoice Nos.");
            NoSeriesMgt.SetDefaultSeries("Receiving No. Series",PurchSetup."Posted Receipt Nos.");
            IF "Document Type" = "Document Type"::Order THEN BEGIN
    ...
Table<Purchase Header>.PROCEDURE<OnBeforeIsCreditDocType>
  Raised in: Table<Purchase Header>.PROCEDURE<IsCreditDocType>
    Code lines:
    CreditDocType := "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"];
    OnBeforeIsCreditDocType(Rec,CreditDocType); <=====================
    EXIT(CreditDocType);
Table<Purchase Header>.PROCEDURE<OnBeforeRecreatePurchLines>
  Raised in: Table<Purchase Header>.PROCEDURE<RecreatePurchLines>
    Code lines:
    ...
    
    IF Confirmed THEN BEGIN
      PurchLine.LOCKTABLE;
      ItemChargeAssgntPurch.LOCKTABLE;
      MODIFY;
      OnBeforeRecreatePurchLines(Rec); <=====================
    
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
    ...
Table<Purchase Header>.PROCEDURE<OnBeforeSetSecurityFilterOnRespCenter>
  Raised in: Table<Purchase Header>.PROCEDURE<SetSecurityFilterOnRespCenter>
    Code lines:
    IsHandled := FALSE;
    OnBeforeSetSecurityFilterOnRespCenter(Rec,IsHandled); <=====================
    IF (NOT IsHandled) AND (UserSetupMgt.GetPurchasesFilter <> '') THEN BEGIN
      FILTERGROUP(2);
      SETRANGE("Responsibility Center",UserSetupMgt.GetPurchasesFilter);
      FILTERGROUP(0);
    END;
    
    SETRANGE("Date Filter",0D,WORKDATE - 1);
Table<Purchase Header>.PROCEDURE<OnBeforeTestNoSeries>
  Raised in: Table<Purchase Header>.PROCEDURE<TestNoSeries>
    Code lines:
    PurchSetup.GET;
    IsHandled := FALSE;
    OnBeforeTestNoSeries(Rec,IsHandled); <=====================
    IF NOT IsHandled THEN
      CASE "Document Type" OF
        "Document Type"::Quote:
          PurchSetup.TESTFIELD("Quote Nos.");
        "Document Type"::Order:
          PurchSetup.TESTFIELD("Order Nos.");
        "Document Type"::Invoice:
    ...
Table<Purchase Header>.PROCEDURE<OnBeforeTestStatusOpen>
  Raised in: Table<Purchase Header>.PROCEDURE<TestStatusOpen>
    Code lines:
    OnBeforeTestStatusOpen; <=====================
    
    IF StatusCheckSuspended THEN
      EXIT;
    
    TESTFIELD(Status,Status::Open);
    
    OnAfterTestStatusOpen;
Table<Purchase Header>.PROCEDURE<OnBeforeUpdateAllLineDim>
  Raised in: Table<Purchase Header>.PROCEDURE<UpdateAllLineDim>
    Code lines:
    IsHandled := FALSE;
    OnBeforeUpdateAllLineDim(Rec,NewParentDimSetID,OldParentDimSetID,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NewParentDimSetID = OldParentDimSetID THEN
      EXIT;
    IF NOT ConfirmManagement.ConfirmProcess(Text051,TRUE) THEN
      EXIT;
    
    ...
Table<Purchase Header>.PROCEDURE<OnBeforeUpdateCurrencyFactor>
  Raised in: Table<Purchase Header>.PROCEDURE<UpdateCurrencyFactor>
    Code lines:
    OnBeforeUpdateCurrencyFactor(Rec,Updated); <=====================
    IF Updated THEN
      EXIT;
    
    IF "Currency Code" <> '' THEN BEGIN
      IF "Posting Date" <> 0D THEN
        CurrencyDate := "Posting Date"
      ELSE
        CurrencyDate := WORKDATE;
    
    ...
Table<Purchase Header>.PROCEDURE<OnBeforeUpdateLocationCode>
  Raised in: Table<Purchase Header>.PROCEDURE<UpdateLocationCode>
    Code lines:
    IsHandled := FALSE;
    OnBeforeUpdateLocationCode(Rec,LocationCode,IsHandled); <=====================
    IF NOT IsHandled THEN
      VALIDATE("Location Code",UserSetupMgt.GetLocation(1,LocationCode,"Responsibility Center"));
Table<Purchase Header>.PROCEDURE<OnBeforeUpdatePurchLinesByFieldNo>
  Raised in: Table<Purchase Header>.PROCEDURE<UpdatePurchLinesByFieldNo>
    Code lines:
    IsHandled := FALSE;
    OnBeforeUpdatePurchLinesByFieldNo(Rec,ChangedFieldNo,AskQuestion,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT PurchLinesExist THEN
      EXIT;
    
    IF NOT Field.GET(DATABASE::"Purchase Header",ChangedFieldNo) THEN
      Field.GET(DATABASE::"Purchase Line",ChangedFieldNo);
    ...
Table<Purchase Header>.PROCEDURE<OnCheckPurchasePostRestrictions>
  Raised in: Codeunit<Purchase-Post Prepayments>.PROCEDURE<CheckPrepmtDoc>
    Code lines:
    ...
    
      IF NOT CheckOpenPrepaymentLines(PurchHeader,DocumentType) THEN
        ERROR(Text001);
      CheckDimensions.CheckPurchPrepmtDim(PurchHeader);
      ErrorMessageMgt.Finish;
      OnCheckPurchasePostRestrictions; <=====================
      Vend.GET("Buy-from Vendor No.");
      Vend.CheckBlockedVendOnDocs(Vend,TRUE);
      IF "Pay-to Vendor No." <> "Buy-from Vendor No." THEN BEGIN
        Vend.GET("Pay-to Vendor No.");
    ...
  Raised in: Codeunit<Purch.-Post>.PROCEDURE<CheckPostRestrictions>
    Code lines:
    IF NOT PreviewMode THEN
      PurchaseHeader.OnCheckPurchasePostRestrictions; <=====================
    
    Vendor.GET(PurchaseHeader."Buy-from Vendor No.");
    Vendor.CheckBlockedVendOnDocs(Vendor,TRUE);
    PurchaseHeader.ValidatePurchaserOnPurchHeader(PurchaseHeader,TRUE,TRUE);
    
    IF PurchaseHeader."Pay-to Vendor No." <> PurchaseHeader."Buy-from Vendor No." THEN BEGIN
      Vendor.GET(PurchaseHeader."Pay-to Vendor No.");
      Vendor.CheckBlockedVendOnDocs(Vendor,TRUE);
    ...
  Raised in: Codeunit<Purch.-Quote to Order>.<OnRun>
    Code lines:
    OnBeforeRun(Rec);
    
    TESTFIELD("Document Type","Document Type"::Quote);
    ShouldRedistributeInvoiceAmount := PurchCalcDiscByType.ShouldRedistributeInvoiceDiscountAmount(Rec);
    
    OnCheckPurchasePostRestrictions; <=====================
    
    Vend.GET("Buy-from Vendor No.");
    Vend.CheckBlockedVendOnDocs(Vend,FALSE);
    
    ...
Table<Purchase Header>.PROCEDURE<OnCheckPurchaseReleaseRestrictions>
  Raised in: Table<Purchase Header>.PROCEDURE<CheckPurchaseReleaseRestrictions>
    Code lines:
    OnCheckPurchaseReleaseRestrictions; <=====================
    ApprovalsMgmt.PrePostApprovalCheckPurch(Rec);
Table<Purchase Header>.PROCEDURE<OnCreateDimOnBeforeUpdateLines>
  Raised in: Table<Purchase Header>.PROCEDURE<CreateDim>
    Code lines:
    ...
    OldDimSetID := "Dimension Set ID";
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,SourceCodeSetup.Purchases,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
    
    OnCreateDimOnBeforeUpdateLines(Rec); <=====================
    
    IF (OldDimSetID <> "Dimension Set ID") AND PurchLinesExist THEN BEGIN
      MODIFY;
      UpdateAllLineDim("Dimension Set ID",OldDimSetID);
Table<Purchase Header>.PROCEDURE<OnInitInsertOnBeforeInitRecord>
  Raised in: Table<Purchase Header>.PROCEDURE<InitInsert>
    Code lines:
    ...
      IF "No." = '' THEN BEGIN
        TestNoSeries;
        NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series","Posting Date","No.","No. Series");
      END;
    
    OnInitInsertOnBeforeInitRecord(Rec,xRec); <=====================
    InitRecord;
Table<Purchase Header>.PROCEDURE<OnRecreatePurchLinesOnAfterValidateType>
  Raised in: Table<Purchase Header>.PROCEDURE<RecreatePurchLines>
    Code lines:
    ...
        REPEAT
          IF TempPurchLine."Attached to Line No." = 0 THEN BEGIN
            PurchLine.INIT;
            PurchLine."Line No." := PurchLine."Line No." + 10000;
            PurchLine.VALIDATE(Type,TempPurchLine.Type);
            OnRecreatePurchLinesOnAfterValidateType(PurchLine,TempPurchLine); <=====================
            IF TempPurchLine."No." = '' THEN BEGIN
              PurchLine.VALIDATE(Description,TempPurchLine.Description);
              PurchLine.VALIDATE("Description 2",TempPurchLine."Description 2");
            END ELSE BEGIN
    ...
Table<Purchase Header>.PROCEDURE<OnRecreatePurchLinesOnBeforeConfirm>
  Raised in: Table<Purchase Header>.PROCEDURE<RecreatePurchLines>
    Code lines:
    IF NOT PurchLinesExist THEN
      EXIT;
    
    IsHandled := FALSE;
    OnRecreatePurchLinesOnBeforeConfirm(Rec,xRec,ChangedFieldName,HideValidationDialog,Confirmed,IsHandled); <=====================
    IF NOT IsHandled THEN
      IF GetHideValidationDialog THEN
        Confirmed := TRUE
      ELSE BEGIN
        IF HasItemChargeAssignment THEN
    ...
Table<Purchase Header>.PROCEDURE<OnRecreatePurchLinesOnBeforeInsertPurchLine>
  Raised in: Table<Purchase Header>.PROCEDURE<RecreatePurchLines>
    Code lines:
    ...
                  ELSE
                    TransferSavedFields(PurchLine,TempPurchLine);
                END;
            END;
    
            OnRecreatePurchLinesOnBeforeInsertPurchLine(PurchLine,TempPurchLine); <=====================
            PurchLine.INSERT;
            ExtendedTextAdded := FALSE;
    
            OnAfterRecreatePurchLine(PurchLine,TempPurchLine);
    ...
Table<Purchase Header>.PROCEDURE<OnRecreatePurchLinesOnBeforeTempPurchLineInsert>
  Raised in: Table<Purchase Header>.PROCEDURE<RecreatePurchLines>
    Code lines:
    ...
          TempPurchLine := PurchLine;
          IF PurchLine.Nonstock THEN BEGIN
            PurchLine.Nonstock := FALSE;
            PurchLine.MODIFY;
          END;
          OnRecreatePurchLinesOnBeforeTempPurchLineInsert(TempPurchLine,PurchLine); <=====================
          TempPurchLine.INSERT;
        UNTIL PurchLine.NEXT = 0;
    
        TransferItemChargeAssgntPurchToTemp(ItemChargeAssgntPurch,TempItemChargeAssgntPurch);
    ...
Table<Purchase Header>.PROCEDURE<OnUpdatePurchLinesByChangedFieldName>
  Raised in: Table<Purchase Header>.PROCEDURE<UpdatePurchLinesByFieldNo>
    Code lines:
    ...
              PurchLine.VALIDATE("Inbound Whse. Handling Time","Inbound Whse. Handling Time");
          PurchLine.FIELDNO("Deferral Code"):
            IF PurchLine."No." <> '' THEN
              PurchLine.VALIDATE("Deferral Code");
          ELSE
            OnUpdatePurchLinesByChangedFieldName(Rec,PurchLine,Field.FieldName,ChangedFieldNo); <=====================
        END;
        PurchLine.MODIFY(TRUE);
        PurchLineReserve.VerifyChange(PurchLine,xPurchLine);
      UNTIL PurchLine.NEXT = 0;
Table<Purchase Header>.PROCEDURE<OnValidateBuyFromVendorNoBeforeRecreateLines>
  Raised in: Table<Purchase Header>.Field<Buy-from Vendor No.>.<OnValidate>
    Code lines:
    ...
      "Shipment Method Code" := Vend."Shipment Method Code";
      IF Vend."Location Code" <> '' THEN
        VALIDATE("Location Code",Vend."Location Code");
    END;
    
    OnValidateBuyFromVendorNoBeforeRecreateLines(Rec,CurrFieldNo); <=====================
    
    IF (xRec."Buy-from Vendor No." <> "Buy-from Vendor No.") OR
       (xRec."Currency Code" <> "Currency Code") OR
       (xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group") OR
    ...
Table<Purchase Header>.PROCEDURE<OnValidatePaymentTermsCodeOnBeforeCalcDueDate>
  Raised in: Table<Purchase Header>.Field<Payment Terms Code>.<OnValidate>
    Code lines:
    ...
        VALIDATE("Due Date","Document Date");
        VALIDATE("Pmt. Discount Date",0D);
        VALIDATE("Payment Discount %",0);
      END ELSE BEGIN
        IsHandled := FALSE;
        OnValidatePaymentTermsCodeOnBeforeCalcDueDate(Rec,xRec,FIELDNO("Payment Terms Code"),CurrFieldNo,IsHandled); <=====================
        IF NOT IsHandled THEN
          "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
        IsHandled := FALSE;
        OnValidatePaymentTermsCodeOnBeforeCalcPmtDiscDate(Rec,xRec,FIELDNO("Payment Terms Code"),CurrFieldNo,IsHandled);
    ...
  Raised in: Table<Purchase Header>.Field<Prepmt. Payment Terms Code>.<OnValidate>
    Code lines:
    ...
        VALIDATE("Prepayment Due Date","Document Date");
        VALIDATE("Prepmt. Pmt. Discount Date",0D);
        VALIDATE("Prepmt. Payment Discount %",0);
      END ELSE BEGIN
        IsHandled := FALSE;
        OnValidatePaymentTermsCodeOnBeforeCalcDueDate(Rec,xRec,FIELDNO("Prepmt. Payment Terms Code"),CurrFieldNo,IsHandled); <=====================
        IF NOT IsHandled THEN
          "Prepayment Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
        IsHandled := FALSE;
        OnValidatePaymentTermsCodeOnBeforeCalcPmtDiscDate(Rec,xRec,FIELDNO("Prepmt. Payment Terms Code"),CurrFieldNo,IsHandled);
    ...
Table<Purchase Header>.PROCEDURE<OnValidatePaymentTermsCodeOnBeforeCalcPmtDiscDate>
  Raised in: Table<Purchase Header>.Field<Payment Terms Code>.<OnValidate>
    Code lines:
    ...
        IsHandled := FALSE;
        OnValidatePaymentTermsCodeOnBeforeCalcDueDate(Rec,xRec,FIELDNO("Payment Terms Code"),CurrFieldNo,IsHandled);
        IF NOT IsHandled THEN
          "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
        IsHandled := FALSE;
        OnValidatePaymentTermsCodeOnBeforeCalcPmtDiscDate(Rec,xRec,FIELDNO("Payment Terms Code"),CurrFieldNo,IsHandled); <=====================
        IF NOT IsHandled THEN
          "Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
        IF NOT UpdateDocumentDate THEN
          VALIDATE("Payment Discount %",PaymentTerms."Discount %")
    ...
  Raised in: Table<Purchase Header>.Field<Prepmt. Payment Terms Code>.<OnValidate>
    Code lines:
    ...
        IsHandled := FALSE;
        OnValidatePaymentTermsCodeOnBeforeCalcDueDate(Rec,xRec,FIELDNO("Prepmt. Payment Terms Code"),CurrFieldNo,IsHandled);
        IF NOT IsHandled THEN
          "Prepayment Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
        IsHandled := FALSE;
        OnValidatePaymentTermsCodeOnBeforeCalcPmtDiscDate(Rec,xRec,FIELDNO("Prepmt. Payment Terms Code"),CurrFieldNo,IsHandled); <=====================
        IF NOT IsHandled THEN
          "Prepmt. Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
        IF NOT UpdateDocumentDate THEN
          VALIDATE("Prepmt. Payment Discount %",PaymentTerms."Discount %")
    ...
Table<Purchase Header>.PROCEDURE<OnValidatePaytoVendorNoBeforeRecreateLines>
  Raised in: Table<Purchase Header>.Field<Pay-to Vendor No.>.<OnValidate>
    Code lines:
    ...
      DATABASE::Vendor,"Pay-to Vendor No.",
      DATABASE::"Salesperson/Purchaser","Purchaser Code",
      DATABASE::Campaign,"Campaign No.",
      DATABASE::"Responsibility Center","Responsibility Center");
    
    OnValidatePaytoVendorNoBeforeRecreateLines(Rec,CurrFieldNo); <=====================
    
    IF (xRec."Buy-from Vendor No." = "Buy-from Vendor No.") AND
       (xRec."Pay-to Vendor No." <> "Pay-to Vendor No.")
    THEN
    ...
Table<Purchase Header>.PROCEDURE<OnValidatePurchaseHeaderPayToVendorNo>
  Raised in: Table<Purchase Header>.Field<Pay-to Vendor No.>.<OnValidate>
    Code lines:
    ...
    VALIDATE("Prepmt. Payment Terms Code");
    VALIDATE("Payment Method Code");
    VALIDATE("Currency Code");
    VALIDATE("Creditor No.",Vend."Creditor No.");
    
    OnValidatePurchaseHeaderPayToVendorNo(Vend); <=====================
    
    IF "Document Type" = "Document Type"::Order THEN
      VALIDATE("Prepayment %",Vend."Prepayment %");
    
    ...
Table<VAT Registration No. Format>.PROCEDURE<OnBeforeCheckContact>
  Raised in: Table<VAT Registration No. Format>.PROCEDURE<CheckContact>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckContact(VATRegNo,Number,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    Check := TRUE;
    TextString := '';
    Cont.SETCURRENTKEY("VAT Registration No.");
    Cont.SETRANGE("VAT Registration No.",VATRegNo);
    Cont.SETFILTER("No.",'<>%1',Number);
    ...
Table<VAT Registration No. Format>.PROCEDURE<OnBeforeCheckCust>
  Raised in: Table<VAT Registration No. Format>.PROCEDURE<CheckCust>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckCust(VATRegNo,Number,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    Check := TRUE;
    TextString := '';
    Cust.SETCURRENTKEY("VAT Registration No.");
    Cust.SETRANGE("VAT Registration No.",VATRegNo);
    Cust.SETFILTER("No.",'<>%1',Number);
    ...
Table<VAT Registration No. Format>.PROCEDURE<OnBeforeCheckVend>
  Raised in: Table<VAT Registration No. Format>.PROCEDURE<CheckVendor>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckVend(VATRegNo,Number,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    Check := TRUE;
    TextString := '';
    Vend.SETCURRENTKEY("VAT Registration No.");
    Vend.SETRANGE("VAT Registration No.",VATRegNo);
    Vend.SETFILTER("No.",'<>%1',Number);
    ...
Table<VAT Registration No. Format>.PROCEDURE<OnBeforeTest>
  Raised in: Table<VAT Registration No. Format>.PROCEDURE<Test>
    Code lines:
    ...
    IF VATRegNo = '' THEN
      EXIT;
    
    Check := TRUE;
    IsHandled := FALSE;
    OnBeforeTest(VATRegNo,CountryCode,Number,TableID,Check,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(TRUE);
    
    IF CountryCode = '' THEN BEGIN
    ...
Table<VAT Registration No. Format>.PROCEDURE<OnTestTable>
  Raised in: Table<VAT Registration No. Format>.PROCEDURE<Test>
    Code lines:
    ...
      DATABASE::Vendor:
        CheckVendor(VATRegNo,Number);
      DATABASE::Contact:
        CheckContact(VATRegNo,Number);
      ELSE
        OnTestTable(VATRegNo,CountryCode,Number,TableID); <=====================
    END;
    EXIT(TRUE);
Table<CV Ledger Entry Buffer>.PROCEDURE<OnAfterCopyFromCustLedgerEntry>
  Raised in: Table<CV Ledger Entry Buffer>.PROCEDURE<CopyFromCustLedgEntry>
    Code lines:
    ...
    "Remaining Amount" := CustLedgEntry."Remaining Amount";
    "Remaining Amt. (LCY)" := CustLedgEntry."Remaining Amt. (LCY)";
    "Original Amount" := CustLedgEntry."Original Amount";
    "Original Amt. (LCY)" := CustLedgEntry."Original Amt. (LCY)";
    
    OnAfterCopyFromCustLedgerEntry(Rec,CustLedgEntry); <=====================
Table<CV Ledger Entry Buffer>.PROCEDURE<OnAfterCopyFromEmplLedgerEntry>
  Raised in: Table<CV Ledger Entry Buffer>.PROCEDURE<CopyFromEmplLedgEntry>
    Code lines:
    ...
    "Debit Amount (LCY)" := EmplLedgEntry."Debit Amount (LCY)";
    "Credit Amount (LCY)" := EmplLedgEntry."Credit Amount (LCY)";
    "No. Series" := EmplLedgEntry."No. Series";
    "Amount to Apply" := EmplLedgEntry."Amount to Apply";
    
    OnAfterCopyFromEmplLedgerEntry(Rec,EmplLedgEntry); <=====================
Table<CV Ledger Entry Buffer>.PROCEDURE<OnAfterCopyFromVendLedgerEntry>
  Raised in: Table<CV Ledger Entry Buffer>.PROCEDURE<CopyFromVendLedgEntry>
    Code lines:
    ...
    "Accepted Payment Tolerance" := VendLedgEntry."Accepted Payment Tolerance";
    "Accepted Pmt. Disc. Tolerance" := VendLedgEntry."Accepted Pmt. Disc. Tolerance";
    "Amount to Apply" := VendLedgEntry."Amount to Apply";
    Prepayment := VendLedgEntry.Prepayment;
    
    OnAfterCopyFromVendLedgerEntry(Rec,VendLedgEntry); <=====================
Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<OnAfterCopyFromCVLedgEntryBuf>
  Raised in: Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<CopyFromCVLedgEntryBuf>
    Code lines:
    ...
    "Currency Code" := CVLedgEntryBuf."Currency Code";
    "Initial Entry Due Date" := CVLedgEntryBuf."Due Date";
    "Initial Entry Global Dim. 1" := CVLedgEntryBuf."Global Dimension 1 Code";
    "Initial Entry Global Dim. 2" := CVLedgEntryBuf."Global Dimension 2 Code";
    "Initial Document Type" := CVLedgEntryBuf."Document Type";
    OnAfterCopyFromCVLedgEntryBuf(Rec,CVLedgEntryBuf); <=====================
Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<OnAfterCopyFromGenJnlLine>
  Raised in: Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<CopyFromGenJnlLine>
    Code lines:
    ...
    "User ID" := USERID;
    "Initial Entry Due Date" := GenJnlLine."Due Date";
    "Initial Entry Global Dim. 1" := GenJnlLine."Shortcut Dimension 1 Code";
    "Initial Entry Global Dim. 2" := GenJnlLine."Shortcut Dimension 2 Code";
    "Initial Document Type" := GenJnlLine."Document Type";
    OnAfterCopyFromGenJnlLine(Rec,GenJnlLine); <=====================
Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<OnAfterCopyPostingGroupsFromVATEntry>
  Raised in: Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<CopyPostingGroupsFromVATEntry>
    Code lines:
    ...
    "VAT Prod. Posting Group" := VATEntry."VAT Prod. Posting Group";
    "Tax Area Code" := VATEntry."Tax Area Code";
    "Tax Liable" := VATEntry."Tax Liable";
    "Tax Group Code" := VATEntry."Tax Group Code";
    "Use Tax" := VATEntry."Use Tax";
    OnAfterCopyPostingGroupsFromVATEntry(Rec,VATEntry); <=====================
Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<OnAfterInitFromGenJnlLine>
  Raised in: Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<InitFromGenJnlLine>
    Code lines:
    INIT;
    "Posting Date" := GenJnlLine."Posting Date";
    "Document Type" := GenJnlLine."Document Type";
    "Document No." := GenJnlLine."Document No.";
    "User ID" := USERID;
    OnAfterInitFromGenJnlLine(Rec,GenJnlLine); <=====================
Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<OnBeforeCreateDtldCVLedgEntryBuf>
  Raised in: Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<InsertDtldCVLedgEntry>
    Code lines:
    ...
    DtldCVLedgEntryBuf.SETRANGE("Use Tax",NewDtldCVLedgEntryBuf."Use Tax");
    DtldCVLedgEntryBuf.SETRANGE(
      "Tax Jurisdiction Code",NewDtldCVLedgEntryBuf."Tax Jurisdiction Code");
    
    IsHandled := FALSE;
    OnBeforeCreateDtldCVLedgEntryBuf(DtldCVLedgEntryBuf,NewDtldCVLedgEntryBuf,NextDtldBufferEntryNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF DtldCVLedgEntryBuf.FINDFIRST THEN BEGIN
    ...
Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<OnBeforeInsertDtldCVLedgEntry>
  Raised in: Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<InitDtldCVLedgEntryBuf>
    Code lines:
    ...
      "Amount (LCY)" := AmountLCY;
      "Additional-Currency Amount" := AmountAddCurr;
      "Applied CV Ledger Entry No." := AppliedEntryNo;
      "Remaining Pmt. Disc. Possible" := RemainingPmtDiscPossible;
      "Max. Payment Tolerance" := MaxPaymentTolerance;
      OnBeforeInsertDtldCVLedgEntry(DtldCVLedgEntryBuf,GenJnlLine); <=====================
      InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,CVLedgEntryBuf,FALSE);
    END;
Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<OnInsertDtldCVLedgEntryOnBeforeInsert>
  Raised in: Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<InsertDtldCVLedgEntry>
    Code lines:
    ...
      DtldCVLedgEntryBuf.MODIFY;
    END ELSE BEGIN
      NewDtldCVLedgEntryBuf."Entry No." := NextDtldBufferEntryNo;
      NextDtldBufferEntryNo := NextDtldBufferEntryNo + 1;
      DtldCVLedgEntryBuf := NewDtldCVLedgEntryBuf;
      OnInsertDtldCVLedgEntryOnBeforeInsert(DtldCVLedgEntryBuf); <=====================
      DtldCVLedgEntryBuf.INSERT;
    END;
    
    CVLedgEntryBuf."Amount to Apply" := NewDtldCVLedgEntryBuf.Amount + CVLedgEntryBuf."Amount to Apply";
    ...
Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<OnInsertDtldCVLedgEntryOnBeforeModify>
  Raised in: Table<Detailed CV Ledg. Entry Buffer>.PROCEDURE<InsertDtldCVLedgEntry>
    Code lines:
    ...
      DtldCVLedgEntryBuf."VAT Amount (LCY)" :=
        DtldCVLedgEntryBuf."VAT Amount (LCY)" + NewDtldCVLedgEntryBuf."VAT Amount (LCY)";
      DtldCVLedgEntryBuf."Additional-Currency Amount" :=
        DtldCVLedgEntryBuf."Additional-Currency Amount" +
        NewDtldCVLedgEntryBuf."Additional-Currency Amount";
      OnInsertDtldCVLedgEntryOnBeforeModify(DtldCVLedgEntryBuf); <=====================
      DtldCVLedgEntryBuf.MODIFY;
    END ELSE BEGIN
      NewDtldCVLedgEntryBuf."Entry No." := NextDtldBufferEntryNo;
      NextDtldBufferEntryNo := NextDtldBufferEntryNo + 1;
    ...
Table<Purchase Line>.PROCEDURE<OnAfterAssignFieldsForNo>
  Raised in: Table<Purchase Line>.Field<No.>.<OnValidate>
    Code lines:
    ...
        CopyFromFixedAsset;
      Type::"Charge (Item)":
        CopyFromItemCharge;
    END;
    
    OnAfterAssignFieldsForNo(Rec,xRec,PurchHeader); <=====================
    
    IF HasTypeToFillMandatoryFields AND NOT (Type = Type::"Fixed Asset") THEN
      VALIDATE("VAT Prod. Posting Group");
    
    ...
Table<Purchase Line>.PROCEDURE<OnAfterAssignFixedAssetValues>
  Raised in: Table<Purchase Line>.PROCEDURE<CopyFromFixedAsset>
    Code lines:
    ...
    GetFAPostingGroup;
    Description := FixedAsset.Description;
    "Description 2" := FixedAsset."Description 2";
    "Allow Invoice Disc." := FALSE;
    "Allow Item Charge Assignment" := FALSE;
    OnAfterAssignFixedAssetValues(Rec,FixedAsset); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterAssignGLAccountValues>
  Raised in: Table<Purchase Line>.PROCEDURE<CopyFromGLAccount>
    Code lines:
    ...
    "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
    "Tax Group Code" := GLAcc."Tax Group Code";
    "Allow Invoice Disc." := FALSE;
    "Allow Item Charge Assignment" := FALSE;
    InitDeferralCode;
    OnAfterAssignGLAccountValues(Rec,GLAcc); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterAssignHeaderValues>
  Raised in: Table<Purchase Line>.Field<No.>.<OnValidate>
    Code lines:
    ...
    GetPurchHeader;
    InitHeaderDefaults(PurchHeader);
    UpdateLeadTimeFields;
    UpdateDates;
    
    OnAfterAssignHeaderValues(Rec,PurchHeader); <=====================
    
    CASE Type OF
      Type::" ":
        CopyFromStandardText;
    ...
Table<Purchase Line>.PROCEDURE<OnAfterAssignItemChargeValues>
  Raised in: Table<Purchase Line>.PROCEDURE<CopyFromItemCharge>
    Code lines:
    ...
    "Tax Group Code" := ItemCharge."Tax Group Code";
    "Allow Invoice Disc." := FALSE;
    "Allow Item Charge Assignment" := FALSE;
    "Indirect Cost %" := 0;
    "Overhead Rate" := 0;
    OnAfterAssignItemChargeValues(Rec,ItemCharge); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterAssignItemUOM>
  Raised in: Table<Purchase Line>.Field<Unit of Measure Code>.<OnValidate>
    Code lines:
    ...
        "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
        "Gross Weight" := Item."Gross Weight" * "Qty. per Unit of Measure";
        "Net Weight" := Item."Net Weight" * "Qty. per Unit of Measure";
        "Unit Volume" := Item."Unit Volume" * "Qty. per Unit of Measure";
        "Units per Parcel" := ROUND(Item."Units per Parcel" / "Qty. per Unit of Measure",UOMMgt.QtyRndPrecision);
        OnAfterAssignItemUOM(Rec,Item); <=====================
        IF "Qty. per Unit of Measure" > xRec."Qty. per Unit of Measure" THEN
          InitItemAppl;
        UpdateUOMQtyPerStockQty;
      END ELSE
    ...
Table<Purchase Line>.PROCEDURE<OnAfterAssignItemValues>
  Raised in: Table<Purchase Line>.PROCEDURE<CopyFromItem>
    Code lines:
    ...
    IF PurchHeader."Language Code" <> '' THEN
      GetItemTranslation;
    
    "Unit of Measure Code" := Item."Purch. Unit of Measure";
    InitDeferralCode;
    OnAfterAssignItemValues(Rec,Item); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterAssignStdTxtValues>
  Raised in: Table<Purchase Line>.PROCEDURE<CopyFromStandardText>
    Code lines:
    StandardText.GET("No.");
    Description := StandardText.Description;
    "Allow Item Charge Assignment" := FALSE;
    OnAfterAssignStdTxtValues(Rec,StandardText); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterBlanketOrderLookup>
  Raised in: Table<Purchase Line>.PROCEDURE<BlanketOrderLookup>
    Code lines:
    ...
      PurchLine2.TESTFIELD("Document Type","Document Type"::"Blanket Order");
      "Blanket Order No." := PurchLine2."Document No.";
      VALIDATE("Blanket Order Line No.",PurchLine2."Line No.");
    END;
    
    OnAfterBlanketOrderLookup(Rec); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterCalcLineAmount>
  Raised in: Table<Purchase Line>.PROCEDURE<CalcLineAmount>
    Code lines:
    LineAmount := "Line Amount" - "Inv. Discount Amount";
    
    OnAfterCalcLineAmount(Rec,LineAmount); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterCalcVATAmountLines>
  Raised in: Table<Purchase Line>.PROCEDURE<CalcVATAmountLines>
    Code lines:
    ...
        VATAmountLine."Amount Including VAT" += TotalVATAmount;
        VATAmountLine."Calculated VAT Amount" += TotalVATAmount;
        VATAmountLine.MODIFY;
      END;
    
    OnAfterCalcVATAmountLines(PurchHeader,PurchLine,VATAmountLine,QtyType); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Purchase Line>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[2] := No2;
    TableID[3] := Type3;
    No[3] := No3;
    TableID[4] := Type4;
    No[4] := No4;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    GetPurchHeader;
    ...
Table<Purchase Line>.PROCEDURE<OnAfterCreateTempJobJnlLine>
  Raised in: Table<Purchase Line>.PROCEDURE<CreateTempJobJnlLine>
    Code lines:
    ...
      END;
      TempJobJnlLine.VALIDATE("Unit Price");
    END ELSE
      TempJobJnlLine.VALIDATE("Unit Cost (LCY)","Unit Cost (LCY)");
    
    OnAfterCreateTempJobJnlLine(TempJobJnlLine,Rec,xRec,GetPrices,CurrFieldNo); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterFilterLinesWithItemToPlan>
  Raised in: Table<Purchase Line>.PROCEDURE<FilterLinesWithItemToPlan>
    Code lines:
    ...
    SETFILTER("Expected Receipt Date",Item.GETFILTER("Date Filter"));
    SETFILTER("Shortcut Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
    SETFILTER("Shortcut Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
    SETFILTER("Outstanding Qty. (Base)",'<>0');
    
    OnAfterFilterLinesWithItemToPlan(Rec,Item,DocumentType); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterGetDeferralAmount>
  Raised in: Table<Purchase Line>.PROCEDURE<GetDeferralAmount>
    Code lines:
    IF "VAT Base Amount" <> 0 THEN
      DeferralAmount := "VAT Base Amount"
    ELSE
      DeferralAmount := CalcLineAmount;
    
    OnAfterGetDeferralAmount(Rec,DeferralAmount); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterGetItem>
  Raised in: Table<Purchase Line>.PROCEDURE<GetItem>
    Code lines:
    TESTFIELD("No.");
    Item.GET("No.");
    
    OnAfterGetItem(Item,Rec); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterGetItemTranslation>
  Raised in: Table<Purchase Line>.PROCEDURE<GetItemTranslation>
    Code lines:
    GetPurchHeader;
    IF ItemTranslation.GET("No.","Variant Code",PurchHeader."Language Code") THEN BEGIN
      Description := ItemTranslation.Description;
      "Description 2" := ItemTranslation."Description 2";
      OnAfterGetItemTranslation(Rec,PurchHeader,ItemTranslation); <=====================
    END;
Table<Purchase Line>.PROCEDURE<OnAfterGetLineAmountToHandle>
  Raised in: Table<Purchase Line>.PROCEDURE<GetLineAmountToHandle>
    Code lines:
    ...
    IF QtyToHandle <> Quantity THEN
      LineDiscAmount := ROUND(LineAmount * "Line Discount %" / 100,Currency."Amount Rounding Precision")
    ELSE
      LineDiscAmount := "Line Discount Amount";
    
    OnAfterGetLineAmountToHandle(Rec,QtyToHandle,LineAmount,LineDiscAmount); <=====================
    EXIT(LineAmount - LineDiscAmount);
Table<Purchase Line>.PROCEDURE<OnAfterGetPurchHeader>
  Raised in: Table<Purchase Line>.PROCEDURE<GetPurchHeader>
    Code lines:
    ...
        Currency.GET(PurchHeader."Currency Code");
        Currency.TESTFIELD("Amount Rounding Precision");
      END;
    END;
    
    OnAfterGetPurchHeader(Rec,PurchHeader,Currency); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterInitHeaderDefaults>
  Raised in: Table<Purchase Line>.PROCEDURE<InitHeaderDefaults>
    Code lines:
    ...
    "Requested Receipt Date" := PurchHeader."Requested Receipt Date";
    "Promised Receipt Date" := PurchHeader."Promised Receipt Date";
    "Inbound Whse. Handling Time" := PurchHeader."Inbound Whse. Handling Time";
    "Order Date" := PurchHeader."Order Date";
    
    OnAfterInitHeaderDefaults(Rec,PurchHeader); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterInitOutstandingAmount>
  Raised in: Table<Purchase Line>.PROCEDURE<InitOutstandingAmount>
    Code lines:
    ...
          ROUND(
            AmountInclVAT * "Qty. Rcd. Not Invoiced" / Quantity,
            Currency."Amount Rounding Precision"));
    END;
    
    OnAfterInitOutstandingAmount(Rec,xRec,PurchHeader,Currency); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterInitOutstandingQty>
  Raised in: Table<Purchase Line>.PROCEDURE<InitOutstanding>
    Code lines:
    ...
      "Outstanding Qty. (Base)" := "Quantity (Base)" - "Qty. Received (Base)";
      "Qty. Rcd. Not Invoiced" := "Quantity Received" - "Quantity Invoiced";
      "Qty. Rcd. Not Invoiced (Base)" := "Qty. Received (Base)" - "Qty. Invoiced (Base)";
    END;
    
    OnAfterInitOutstandingQty(Rec); <=====================
    "Completely Received" := (Quantity <> 0) AND ("Outstanding Quantity" = 0);
    InitOutstandingAmount;
Table<Purchase Line>.PROCEDURE<OnAfterInitQtyToInvoice>
  Raised in: Table<Purchase Line>.PROCEDURE<InitQtyToInvoice>
    Code lines:
    ...
    OnBeforeCalcInvDiscToInvoice(Rec,CurrFieldNo);
    CalcInvDiscToInvoice;
    IF PurchHeader."Document Type" <> PurchHeader."Document Type"::Invoice THEN
      CalcPrepaymentToDeduct;
    
    OnAfterInitQtyToInvoice(Rec,CurrFieldNo); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterInitQtyToReceive>
  Raised in: Table<Purchase Line>.PROCEDURE<InitQtyToReceive>
    Code lines:
    ...
      "Qty. to Receive (Base)" := "Outstanding Qty. (Base)";
    END ELSE
      IF "Qty. to Receive" <> 0 THEN
        "Qty. to Receive (Base)" := CalcBaseQty("Qty. to Receive");
    
    OnAfterInitQtyToReceive(Rec,CurrFieldNo); <=====================
    
    InitQtyToInvoice;
Table<Purchase Line>.PROCEDURE<OnAfterInitQtyToShip>
  Raised in: Table<Purchase Line>.PROCEDURE<InitQtyToShip>
    Code lines:
    ...
      "Return Qty. to Ship (Base)" := "Outstanding Qty. (Base)";
    END ELSE
      IF "Return Qty. to Ship" <> 0 THEN
        "Return Qty. to Ship (Base)" := CalcBaseQty("Return Qty. to Ship");
    
    OnAfterInitQtyToShip(Rec,CurrFieldNo); <=====================
    
    InitQtyToInvoice;
Table<Purchase Line>.PROCEDURE<OnAfterSalesTaxCalculate>
  Raised in: Table<Purchase Line>.Field<Amount>.<OnValidate>
    Code lines:
    ...
              ROUND(
                SalesTaxCalculate.CalculateTax(
                  "Tax Area Code","Tax Group Code","Tax Liable",PurchHeader."Posting Date",
                  "VAT Base Amount","Quantity (Base)",PurchHeader."Currency Factor"),
                Currency."Amount Rounding Precision");
            OnAfterSalesTaxCalculate(Rec,PurchHeader,Currency); <=====================
            IF "VAT Base Amount" <> 0 THEN
              "VAT %" :=
                ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.00001)
            ELSE
    ...
  Raised in: Table<Purchase Line>.PROCEDURE<UpdateVATAmounts>
    Code lines:
    ...
                      "Tax Area Code","Tax Group Code","Tax Liable",PurchHeader."Posting Date",
                      TotalAmountInclVAT + "Amount Including VAT",TotalQuantityBase + "Quantity (Base)",
                      PurchHeader."Currency Factor"),
                    Currency."Amount Rounding Precision") -
                  TotalAmount;
              OnAfterSalesTaxCalculateReverse(Rec,PurchHeader,Currency); <=====================
              "VAT Base Amount" := Amount;
              IF "VAT Base Amount" <> 0 THEN
                "VAT %" :=
                  ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.00001)
    ...
Table<Purchase Line>.PROCEDURE<OnAfterSalesTaxCalculateReverse>
  Raised in: Table<Purchase Line>.Field<Amount Including VAT>.<OnValidate>
    Code lines:
    ...
              ROUND(
                SalesTaxCalculate.ReverseCalculateTax(
                  "Tax Area Code","Tax Group Code","Tax Liable",PurchHeader."Posting Date",
                  "Amount Including VAT","Quantity (Base)",PurchHeader."Currency Factor"),
                Currency."Amount Rounding Precision");
            OnAfterSalesTaxCalculateReverse(Rec,PurchHeader,Currency); <=====================
            "VAT Base Amount" := Amount;
            IF "VAT Base Amount" <> 0 THEN
              "VAT %" :=
                ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.00001)
    ...
  Raised in: Table<Purchase Line>.PROCEDURE<UpdateVATAmounts>
    Code lines:
    ...
                      "Tax Area Code","Tax Group Code","Tax Liable",PurchHeader."Posting Date",
                      TotalAmountInclVAT + "Amount Including VAT",TotalQuantityBase + "Quantity (Base)",
                      PurchHeader."Currency Factor"),
                    Currency."Amount Rounding Precision") -
                  TotalAmount;
              OnAfterSalesTaxCalculateReverse(Rec,PurchHeader,Currency); <=====================
              "VAT Base Amount" := Amount;
              IF "VAT Base Amount" <> 0 THEN
                "VAT %" :=
                  ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.00001)
    ...
Table<Purchase Line>.PROCEDURE<OnAfterSetDefaultQuantity>
  Raised in: Table<Purchase Line>.PROCEDURE<SetDefaultQuantity>
    Code lines:
    ...
        "Qty. to Invoice" := 0;
        "Qty. to Invoice (Base)" := 0;
      END;
    END;
    
    OnAfterSetDefaultQuantity(Rec,xRec); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterTestStatusOpen>
  Raised in: Table<Purchase Line>.PROCEDURE<TestStatusOpen>
    Code lines:
    ...
    GetPurchHeader;
    IF NOT "System-Created Entry" THEN
      IF HasTypeToFillMandatoryFields THEN
        PurchHeader.TESTFIELD(Status,PurchHeader.Status::Open);
    
    OnAfterTestStatusOpen(Rec,PurchHeader); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterUpdateAmounts>
  Raised in: Table<Purchase Line>.PROCEDURE<UpdateAmounts>
    Code lines:
    ...
            FIELDERROR("Line Amount",STRSUBSTNO(Text038,xRec."Line Amount"));
          FIELDERROR("Line Amount",STRSUBSTNO(Text039,xRec."Line Amount"));
        END;
    END;
    
    OnAfterUpdateAmounts(Rec,xRec,CurrFieldNo); <=====================
    
    UpdateVATAmounts;
    IF VATBaseAmount <> "VAT Base Amount" THEN
      LineAmountChanged := TRUE;
    ...
Table<Purchase Line>.PROCEDURE<OnAfterUpdateAmountsDone>
  Raised in: Table<Purchase Line>.PROCEDURE<UpdateAmounts>
    Code lines:
    ...
    IF Type = Type::"Charge (Item)" THEN
      UpdateItemChargeAssgnt;
    
    CalcPrepaymentToDeduct;
    
    OnAfterUpdateAmountsDone(Rec,xRec,CurrFieldNo); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterUpdateDirectUnitCost>
  Raised in: Table<Purchase Line>.PROCEDURE<UpdateDirectUnitCost>
    Code lines:
    ...
    
      IF CalledByFieldNo IN [FIELDNO("No."),FIELDNO("Variant Code"),FIELDNO("Location Code")] THEN
        UpdateItemReference;
    END;
    
    OnAfterUpdateDirectUnitCost(Rec,xRec,CalledByFieldNo,CurrFieldNo); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterUpdateJobPrices>
  Raised in: Table<Purchase Line>.PROCEDURE<UpdateJobPrices>
    Code lines:
    ...
      "Job Line Amount" := PurchRcptLine."Job Line Amount";
      "Job Line Discount %" := PurchRcptLine."Job Line Discount %";
      "Job Line Discount Amount" := PurchRcptLine."Job Line Discount Amount";
    END;
    
    OnAfterUpdateJobPrices(Rec,TempJobJnlLine,PurchRcptLine); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterUpdateSalesCost>
  Raised in: Table<Purchase Line>.PROCEDURE<UpdateSalesCost>
    Code lines:
    ...
    SalesOrderLine."Unit Cost (LCY)" := "Unit Cost (LCY)" * SalesOrderLine."Qty. per Unit of Measure" / "Qty. per Unit of Measure";
    SalesOrderLine."Unit Cost" := "Unit Cost" * SalesOrderLine."Qty. per Unit of Measure" / "Qty. per Unit of Measure";
    SalesOrderLine.VALIDATE("Unit Cost (LCY)");
    SalesOrderLine.MODIFY;
    
    OnAfterUpdateSalesCost(Rec,SalesOrderLine); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterUpdateTotalAmounts>
  Raised in: Table<Purchase Line>.PROCEDURE<UpdateVATAmounts>
    Code lines:
    ...
          TotalLineAmount := PurchLine2."Line Amount";
          TotalInvDiscAmount := PurchLine2."Inv. Discount Amount";
          TotalAmount := PurchLine2.Amount;
          TotalAmountInclVAT := PurchLine2."Amount Including VAT";
          TotalQuantityBase := PurchLine2."Quantity (Base)";
          OnAfterUpdateTotalAmounts(Rec,PurchLine2,TotalAmount,TotalAmountInclVAT,TotalLineAmount,TotalInvDiscAmount); <=====================
        END;
    
      IF PurchHeader."Prices Including VAT" THEN
        CASE "VAT Calculation Type" OF
    ...
Table<Purchase Line>.PROCEDURE<OnAfterUpdateUnitCost>
  Raised in: Table<Purchase Line>.PROCEDURE<UpdateUnitCost>
    Code lines:
    ...
    "Unit Cost (LCY)" := ROUND("Unit Cost (LCY)",GLSetup."Unit-Amount Rounding Precision");
    IF PurchHeader."Currency Code" <> '' THEN
      Currency.TESTFIELD("Unit-Amount Rounding Precision");
    "Unit Cost" := ROUND("Unit Cost",Currency."Unit-Amount Rounding Precision");
    
    OnAfterUpdateUnitCost(Rec,xRec,PurchHeader,Item,SKU,Currency,GLSetup); <=====================
    
    UpdateSalesCost;
    
    IF JobTaskIsSet AND NOT UpdateFromVAT AND NOT "Prepayment Line" THEN BEGIN
    ...
Table<Purchase Line>.PROCEDURE<OnAfterUpdateVATAmounts>
  Raised in: Table<Purchase Line>.PROCEDURE<UpdateVATAmounts>
    Code lines:
    ...
                "VAT %" := 0;
            END;
        END;
    END;
    
    OnAfterUpdateVATAmounts(Rec); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterUpdateVATOnLines>
  Raised in: Table<Purchase Line>.PROCEDURE<UpdateVATOnLines>
    Code lines:
    ...
            END;
          END;
        UNTIL NEXT = 0;
    END;
    
    OnAfterUpdateVATOnLines(PurchHeader,PurchLine,VATAmountLine,QtyType); <=====================
Table<Purchase Line>.PROCEDURE<OnAfterUpdateWithWarehouseReceive>
  Raised in: Table<Purchase Line>.PROCEDURE<UpdateWithWarehouseReceive>
    Code lines:
    ...
          ELSE
            VALIDATE("Return Qty. to Ship","Outstanding Quantity");
      END;
    
    GetPurchHeader;
    OnAfterUpdateWithWarehouseReceive(PurchHeader,Rec); <=====================
    
    SetDefaultQuantity;
Table<Purchase Line>.PROCEDURE<OnAfterValidateCrossReferenceNo>
  Raised in: Table<Purchase Line>.PROCEDURE<ValidateCrossReferenceNo>
    Code lines:
    ...
    END;
    
    UpdateDirectUnitCost(FIELDNO("Cross-Reference No."));
    UpdateICPartner;
    
    OnAfterValidateCrossReferenceNo(Rec,ItemCrossReference); <=====================
Table<Purchase Line>.PROCEDURE<OnBeforeAddItems>
  Raised in: Table<Purchase Line>.PROCEDURE<AddItems>
    Code lines:
    OnBeforeAddItems(Rec); <=====================
    
    InitNewLine(PurchLine);
    Item.SETFILTER("No.",SelectionFilter);
    IF Item.FINDSET THEN
      REPEAT
        PurchLine.INIT;
        PurchLine."Line No." += 10000;
        PurchLine.VALIDATE(Type,Type::Item);
        PurchLine.VALIDATE("No.",Item."No.");
    ...
Table<Purchase Line>.PROCEDURE<OnBeforeBlanketOrderLookup>
  Raised in: Table<Purchase Line>.PROCEDURE<BlanketOrderLookup>
    Code lines:
    IsHandled := FALSE;
    OnBeforeBlanketOrderLookup(Rec,CurrFieldNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    PurchLine2.RESET;
    PurchLine2.SETCURRENTKEY("Document Type",Type,"No.");
    PurchLine2.SETRANGE("Document Type","Document Type"::"Blanket Order");
    PurchLine2.SETRANGE(Type,Type);
    PurchLine2.SETRANGE("No.","No.");
    ...
Table<Purchase Line>.PROCEDURE<OnBeforeCalcInvDiscToInvoice>
  Raised in: Table<Purchase Line>.PROCEDURE<InitQtyToInvoice>
    Code lines:
    "Qty. to Invoice" := MaxQtyToInvoice;
    "Qty. to Invoice (Base)" := MaxQtyToInvoiceBase;
    "VAT Difference" := 0;
    
    OnBeforeCalcInvDiscToInvoice(Rec,CurrFieldNo); <=====================
    CalcInvDiscToInvoice;
    IF PurchHeader."Document Type" <> PurchHeader."Document Type"::Invoice THEN
      CalcPrepaymentToDeduct;
    
    OnAfterInitQtyToInvoice(Rec,CurrFieldNo);
Table<Purchase Line>.PROCEDURE<OnBeforeCalcVATAmountLines>
  Raised in: Table<Purchase Line>.PROCEDURE<IsCalcVATAmountLinesHandled>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCalcVATAmountLines(PurchHeader,PurchLine,VATAmountLine,IsHandled); <=====================
    EXIT(IsHandled);
Table<Purchase Line>.PROCEDURE<OnBeforeCopyFromItem>
  Raised in: Table<Purchase Line>.PROCEDURE<CopyFromItem>
    Code lines:
    GetItem(Item);
    GetGLSetup;
    OnBeforeCopyFromItem(Rec,Item); <=====================
    Item.TESTFIELD(Blocked,FALSE);
    Item.TESTFIELD("Gen. Prod. Posting Group");
    IF Item."Purchasing Blocked" AND NOT IsCreditDocType THEN
      ERROR(PurchasingBlockedErr);
    IF Item.Type = Item.Type::Inventory THEN BEGIN
      Item.TESTFIELD("Inventory Posting Group");
      "Posting Group" := Item."Inventory Posting Group";
    ...
Table<Purchase Line>.PROCEDURE<OnBeforeCreateTempJobJnlLine>
  Raised in: Table<Purchase Line>.PROCEDURE<CreateTempJobJnlLine>
    Code lines:
    OnBeforeCreateTempJobJnlLine(TempJobJnlLine,Rec,xRec,GetPrices,CurrFieldNo); <=====================
    
    GetPurchHeader;
    CLEAR(TempJobJnlLine);
    TempJobJnlLine.DontCheckStdCost;
    TempJobJnlLine.VALIDATE("Job No.","Job No.");
    TempJobJnlLine.VALIDATE("Job Task No.","Job Task No.");
    TempJobJnlLine.VALIDATE("Posting Date",PurchHeader."Posting Date");
    TempJobJnlLine.SetCurrencyFactor("Job Currency Factor");
    IF Type = Type::"G/L Account" THEN
    ...
Table<Purchase Line>.PROCEDURE<OnBeforeGetDefaultBin>
  Raised in: Table<Purchase Line>.PROCEDURE<GetDefaultBin>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetDefaultBin(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF Type <> Type::Item THEN
      EXIT;
    
    "Bin Code" := '';
    IF "Drop Shipment" THEN
    ...
Table<Purchase Line>.PROCEDURE<OnBeforeJobSetCurrencyFactor>
  Raised in: Table<Purchase Line>.PROCEDURE<JobSetCurrencyFactor>
    Code lines:
    GetPurchHeader;
    IsHandled := FALSE;
    OnBeforeJobSetCurrencyFactor(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    CLEAR(TempJobJnlLine);
    TempJobJnlLine.VALIDATE("Job No.","Job No.");
    TempJobJnlLine.VALIDATE("Job Task No.","Job Task No.");
    TempJobJnlLine.VALIDATE("Posting Date",PurchHeader."Posting Date");
Table<Purchase Line>.PROCEDURE<OnBeforeJobTaskIsSet>
  Raised in: Table<Purchase Line>.PROCEDURE<JobTaskIsSet>
    Code lines:
    JobTaskSet := FALSE;
    OnBeforeJobTaskIsSet(Rec,JobTaskSet); <=====================
    
    EXIT(
      (("Job No." <> '') AND ("Job Task No." <> '') AND (Type IN [Type::"G/L Account",Type::Item])) OR
      JobTaskSet);
Table<Purchase Line>.PROCEDURE<OnBeforeMaxQtyToInvoice>
  Raised in: Table<Purchase Line>.PROCEDURE<MaxQtyToInvoice>
    Code lines:
    IsHandled := FALSE;
    OnBeforeMaxQtyToInvoice(Rec,MaxQty,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(MaxQty);
    
    IF "Prepayment Line" THEN
      EXIT(1);
    
    IF IsCreditDocType THEN
      EXIT("Return Qty. Shipped" + "Return Qty. to Ship" - "Quantity Invoiced");
    ...
Table<Purchase Line>.PROCEDURE<OnBeforeMaxQtyToInvoiceBase>
  Raised in: Table<Purchase Line>.PROCEDURE<MaxQtyToInvoiceBase>
    Code lines:
    IsHandled := FALSE;
    OnBeforeMaxQtyToInvoiceBase(Rec,MaxQtyBase,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(MaxQtyBase);
    
    IF IsCreditDocType THEN
      EXIT("Return Qty. Shipped (Base)" + "Return Qty. to Ship (Base)" - "Qty. Invoiced (Base)");
    
    EXIT("Qty. Received (Base)" + "Qty. to Receive (Base)" - "Qty. Invoiced (Base)");
Table<Purchase Line>.PROCEDURE<OnBeforeOpenItemTrackingLines>
  Raised in: Table<Purchase Line>.PROCEDURE<OpenItemTrackingLines>
    Code lines:
    IsHandled := FALSE;
    OnBeforeOpenItemTrackingLines(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    TESTFIELD(Type,Type::Item);
    TESTFIELD("No.");
    IF "Prod. Order No." <> '' THEN
      ERROR(Text031,"Prod. Order No.");
    
    ...
Table<Purchase Line>.PROCEDURE<OnBeforeShowReservation>
  Raised in: Table<Purchase Line>.PROCEDURE<ShowReservation>
    Code lines:
    IsHandled := FALSE;
    OnBeforeShowReservation(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    TESTFIELD(Type,Type::Item);
    TESTFIELD("Prod. Order No.",'');
    TESTFIELD("No.");
    CLEAR(Reservation);
    Reservation.SetPurchLine(Rec);
Table<Purchase Line>.PROCEDURE<OnBeforeShowReservationEntries>
  Raised in: Table<Purchase Line>.PROCEDURE<ShowReservationEntries>
    Code lines:
    IsHandled := FALSE;
    OnBeforeShowReservationEntries(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    TESTFIELD(Type,Type::Item);
    TESTFIELD("No.");
    ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,TRUE);
    ReservePurchLine.FilterReservFor(ReservEntry,Rec);
    IF Modal THEN
    ...
Table<Purchase Line>.PROCEDURE<OnBeforeTestStatusOpen>
  Raised in: Table<Purchase Line>.PROCEDURE<TestStatusOpen>
    Code lines:
    OnBeforeTestStatusOpen(Rec,PurchHeader); <=====================
    
    IF StatusCheckSuspended THEN
      EXIT;
    GetPurchHeader;
    IF NOT "System-Created Entry" THEN
      IF HasTypeToFillMandatoryFields THEN
        PurchHeader.TESTFIELD(Status,PurchHeader.Status::Open);
    
    OnAfterTestStatusOpen(Rec,PurchHeader);
Table<Purchase Line>.PROCEDURE<OnBeforeUpdateDirectUnitCost>
  Raised in: Table<Purchase Line>.PROCEDURE<UpdateDirectUnitCost>
    Code lines:
    IsHandled := FALSE;
    OnBeforeUpdateDirectUnitCost(Rec,xRec,CalledByFieldNo,CurrFieldNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF (CurrFieldNo <> 0) AND ("Prod. Order No." <> '') THEN
      UpdateAmounts;
    
    IF ((CalledByFieldNo <> CurrFieldNo) AND (CurrFieldNo <> 0)) OR
       ("Prod. Order No." <> '')
    ...
Table<Purchase Line>.PROCEDURE<OnBeforeUpdatePrepmtAmounts>
  Raised in: Table<Purchase Line>.PROCEDURE<UpdatePrePaymentAmounts>
    Code lines:
    IsHandled := FALSE;
    OnBeforeUpdatePrepmtAmounts(Rec,PurchHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF ("Document Type" <> "Document Type"::Invoice) OR ("Prepayment %" = 0) THEN
      EXIT;
    
    IF NOT ReceiptLine.GET("Receipt No.","Receipt Line No.") THEN BEGIN
      "Prepmt Amt to Deduct" := 0;
    ...
Table<Purchase Line>.PROCEDURE<OnBeforeUpdatePrepmtSetupFields>
  Raised in: Table<Purchase Line>.PROCEDURE<UpdatePrepmtSetupFields>
    Code lines:
    IsHandled := FALSE;
    OnBeforeUpdatePrepmtSetupFields(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF ("Prepayment %" <> 0) AND HasTypeToFillMandatoryFields THEN BEGIN
      TESTFIELD("Document Type","Document Type"::Order);
      TESTFIELD("No.");
      GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
      IF GenPostingSetup."Purch. Prepayments Account" <> '' THEN BEGIN
    ...
Table<Purchase Line>.PROCEDURE<OnBeforeUpdateSalesCost>
  Raised in: Table<Purchase Line>.PROCEDURE<UpdateSalesCost>
    Code lines:
    ...
      ELSE
        EXIT;
    END;
    
    IsHandled := FALSE;
    OnBeforeUpdateSalesCost(Rec,SalesOrderLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SalesOrderLine."Unit Cost (LCY)" := "Unit Cost (LCY)" * SalesOrderLine."Qty. per Unit of Measure" / "Qty. per Unit of Measure";
    ...
Table<Purchase Line>.PROCEDURE<OnBeforeUpdateVATAmounts>
  Raised in: Table<Purchase Line>.PROCEDURE<UpdateVATAmounts>
    Code lines:
    OnBeforeUpdateVATAmounts(Rec); <=====================
    
    GetPurchHeader;
    PurchLine2.SETRANGE("Document Type","Document Type");
    PurchLine2.SETRANGE("Document No.","Document No.");
    PurchLine2.SETFILTER("Line No.",'<>%1',"Line No.");
    PurchLine2.SETRANGE("VAT Identifier","VAT Identifier");
    PurchLine2.SETRANGE("Tax Group Code","Tax Group Code");
    
    IF "Line Amount" = "Inv. Discount Amount" THEN BEGIN
    ...
Table<Purchase Line>.PROCEDURE<OnBeforeVerifyReservedQty>
  Raised in: Table<Purchase Line>.<OnInsert>
    Code lines:
    TestStatusOpen;
    IF Quantity <> 0 THEN BEGIN
      OnBeforeVerifyReservedQty(Rec,xRec,0); <=====================
      ReservePurchLine.VerifyQuantity(Rec,xRec);
    END;
    LOCKTABLE;
    PurchHeader."No." := '';
    IF ("Deferral Code" <> '') AND (GetDeferralAmount <> 0) THEN
      UpdateDeferralAmounts;
  Raised in: Table<Purchase Line>.Field<Quantity>.<OnValidate>
    Code lines:
    ...
    IF Type = Type::"Charge (Item)" THEN
      "Line Discount %" := 0;
    
    UpdateWithWarehouseReceive;
    IF (xRec.Quantity <> Quantity) OR (xRec."Quantity (Base)" <> "Quantity (Base)") THEN BEGIN
      OnBeforeVerifyReservedQty(Rec,xRec,FIELDNO(Quantity)); <=====================
      ReservePurchLine.VerifyQuantity(Rec,xRec);
      WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
      CheckApplToItemLedgEntry;
    END;
    ...
Table<Purchase Line>.PROCEDURE<OnCopyFromItemOnAfterCheck>
  Raised in: Table<Purchase Line>.PROCEDURE<CopyFromItem>
    Code lines:
    ...
    IF Item.Type = Item.Type::Inventory THEN BEGIN
      Item.TESTFIELD("Inventory Posting Group");
      "Posting Group" := Item."Inventory Posting Group";
    END;
    
    OnCopyFromItemOnAfterCheck(Rec,Item); <=====================
    
    Description := Item.Description;
    "Description 2" := Item."Description 2";
    "Unit Price (LCY)" := Item."Unit Price";
    ...
Table<Purchase Line>.PROCEDURE<OnCrossReferenceNoLookupOnBeforeValidateDirectUnitCost>
  Raised in: Table<Purchase Line>.PROCEDURE<CrossReferenceNoLookUp>
    Code lines:
    ...
        "Cross-Reference No." := ItemCrossReference."Cross-Reference No.";
        ValidateCrossReferenceNo(ItemCrossReference,FALSE);
        VALIDATE("Cross-Reference No.",ItemCrossReference."Cross-Reference No.");
        PurchPriceCalcMgt.FindPurchLinePrice(PurchHeader,Rec,FIELDNO("Cross-Reference No."));
        PurchPriceCalcMgt.FindPurchLineLineDisc(PurchHeader,Rec);
        OnCrossReferenceNoLookupOnBeforeValidateDirectUnitCost(PurchHeader,Rec); <=====================
        VALIDATE("Direct Unit Cost");
      END;
    END;
Table<Purchase Line>.PROCEDURE<OnUpdateDirectUnitCostOnBeforeFindPrice>
  Raised in: Table<Purchase Line>.PROCEDURE<UpdateDirectUnitCost>
    Code lines:
    ...
      EXIT;
    
    IF Type = Type::Item THEN BEGIN
      GetPurchHeader;
      IsHandled := FALSE;
      OnUpdateDirectUnitCostOnBeforeFindPrice(PurchHeader,Rec,CalledByFieldNo,CurrFieldNo,IsHandled); <=====================
      IF NOT IsHandled THEN BEGIN
        PurchPriceCalcMgt.FindPurchLinePrice(PurchHeader,Rec,CalledByFieldNo);
        IF NOT ("Copied From Posted Doc." AND IsCreditDocType) THEN
          PurchPriceCalcMgt.FindPurchLineLineDisc(PurchHeader,Rec);
    ...
Table<Purchase Line>.PROCEDURE<OnValidateCrossReferenceNoOnBeforeAssignNo>
  Raised in: Table<Purchase Line>.PROCEDURE<ValidateCrossReferenceNo>
    Code lines:
    ...
      IF SearchItem THEN
        DistIntegration.ICRLookupPurchaseItem(Rec,ReturnedItemCrossReference,CurrFieldNo <> 0)
      ELSE
        ReturnedItemCrossReference := ItemCrossReference;
    
      OnValidateCrossReferenceNoOnBeforeAssignNo(Rec,ReturnedItemCrossReference); <=====================
    
      VALIDATE("No.",ReturnedItemCrossReference."Item No.");
      SetVendorItemNo;
      IF ReturnedItemCrossReference."Variant Code" <> '' THEN
    ...
Table<Purchase Line>.PROCEDURE<OnValidateExpectedReceiptDateOnBeforeCheckDateConflict>
  Raised in: Table<Purchase Line>.Field<Expected Receipt Date>.<OnValidate>
    Code lines:
    IF NOT TrackingBlocked THEN BEGIN
      IsHandled := FALSE;
      OnValidateExpectedReceiptDateOnBeforeCheckDateConflict(Rec,IsHandled); <=====================
      IF NOT IsHandled THEN
        CheckDateConflict.PurchLineCheck(Rec,CurrFieldNo <> 0);
    END;
    
    IF "Expected Receipt Date" <> 0D THEN
      VALIDATE(
        "Planned Receipt Date",
    ...
Table<Purchase Line>.PROCEDURE<OnValidateNoOnAfterAssignQtyFromXRec>
  Raised in: Table<Purchase Line>.Field<No.>.<OnValidate>
    Code lines:
    ...
    
    UpdatePrepmtSetupFields;
    
    IF HasTypeToFillMandatoryFields THEN BEGIN
      Quantity := xRec.Quantity;
      OnValidateNoOnAfterAssignQtyFromXRec(Rec,TempPurchLine); <=====================
      VALIDATE("Unit of Measure Code");
      IF Quantity <> 0 THEN BEGIN
        InitOutstanding;
        IF IsCreditDocType THEN
    ...
Table<Purchase Line>.PROCEDURE<OnValidateNoOnAfterChecks>
  Raised in: Table<Purchase Line>.Field<No.>.<OnValidate>
    Code lines:
    ...
    IF "Prod. Order No." <> '' THEN
      ERROR(
        Text044,
        FIELDCAPTION(Type),FIELDCAPTION("Prod. Order No."),"Prod. Order No.");
    
    OnValidateNoOnAfterChecks(Rec,xRec,CurrFieldNo); <=====================
    
    IF "No." <> xRec."No." THEN BEGIN
      IF (Quantity <> 0) AND ItemExists(xRec."No.") THEN BEGIN
        ReservePurchLine.VerifyChange(Rec,xRec);
    ...
Table<Purchase Line>.PROCEDURE<OnValidateNoOnAfterVerifyChange>
  Raised in: Table<Purchase Line>.Field<No.>.<OnValidate>
    Code lines:
    ...
        ReservePurchLine.VerifyChange(Rec,xRec);
        CALCFIELDS("Reserved Qty. (Base)");
        TESTFIELD("Reserved Qty. (Base)",0);
        IF Type = Type::Item THEN
          WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
        OnValidateNoOnAfterVerifyChange(Rec,xRec); <=====================
      END;
      IF Type = Type::Item THEN
        DeleteItemChargeAssgnt("Document Type","Document No.","Line No.");
      IF Type = Type::"Charge (Item)" THEN
    ...
Table<Purchase Line>.PROCEDURE<OnValidateNoOnBeforeInitRec>
  Raised in: Table<Purchase Line>.Field<No.>.<OnValidate>
    Code lines:
    ...
        DeleteItemChargeAssgnt("Document Type","Document No.","Line No.");
      IF Type = Type::"Charge (Item)" THEN
        DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");
    END;
    
    OnValidateNoOnBeforeInitRec(Rec,xRec,CurrFieldNo); <=====================
    TempPurchLine := Rec;
    INIT;
    IF xRec."Line Amount" <> 0 THEN
      "Recalculate Invoice Disc." := TRUE;
    ...
Table<Purchase Line>.PROCEDURE<OnValidateNoOnCopyFromTempPurchLine>
  Raised in: Table<Purchase Line>.Field<No.>.<OnValidate>
    Code lines:
    ...
    INIT;
    IF xRec."Line Amount" <> 0 THEN
      "Recalculate Invoice Disc." := TRUE;
    Type := TempPurchLine.Type;
    "No." := TempPurchLine."No.";
    OnValidateNoOnCopyFromTempPurchLine(Rec,TempPurchLine); <=====================
    IF "No." = '' THEN
      EXIT;
    
    IF HasTypeToFillMandatoryFields THEN BEGIN
    ...
Table<Purchase Line>.PROCEDURE<OnValidateQtyToReceiveOnAfterCheck>
  Raised in: Table<Purchase Line>.Field<Qty. to Receive>.<OnValidate>
    Code lines:
    ...
    IF (CurrFieldNo <> 0) AND (Type = Type::Item) AND (NOT "Drop Shipment") THEN BEGIN
      IF Location."Require Receive" AND ("Qty. to Receive" <> 0) THEN
        CheckWarehouse;
      WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
    END;
    OnValidateQtyToReceiveOnAfterCheck(Rec,CurrFieldNo); <=====================
    
    IF "Qty. to Receive" = Quantity - "Quantity Received" THEN
      InitQtyToReceive
    ELSE BEGIN
    ...
Table<Purchase Line>.PROCEDURE<OnValidateQtyToReceiveOnAfterInitQty>
  Raised in: Table<Purchase Line>.Field<Qty. to Receive>.<OnValidate>
    Code lines:
    ...
    ELSE BEGIN
      "Qty. to Receive (Base)" := CalcBaseQty("Qty. to Receive");
      InitQtyToInvoice;
    END;
    
    OnValidateQtyToReceiveOnAfterInitQty(Rec,xRec,CurrFieldNo); <=====================
    
    IF ((("Qty. to Receive" < 0) XOR (Quantity < 0)) AND (Quantity <> 0) AND ("Qty. to Receive" <> 0)) OR
       (ABS("Qty. to Receive") > ABS("Outstanding Quantity")) OR
       (((Quantity < 0 ) XOR ("Outstanding Quantity" < 0)) AND (Quantity <> 0) AND ("Outstanding Quantity" <> 0))
    ...
Table<Purchase Line>.PROCEDURE<OnValidateQuantityOnBeforeDropShptCheck>
  Raised in: Table<Purchase Line>.Field<Quantity>.<OnValidate>
    Code lines:
    TestStatusOpen;
    IsHandled := FALSE;
    OnValidateQuantityOnBeforeDropShptCheck(Rec,xRec,CurrFieldNo,IsHandled); <=====================
    IF NOT IsHandled THEN
      IF "Drop Shipment" AND ("Document Type" <> "Document Type"::Invoice) THEN
        ERROR(
          Text001,FIELDCAPTION(Quantity),"Sales Order No.");
    "Quantity (Base)" := CalcBaseQty(Quantity);
    IF IsCreditDocType THEN BEGIN
      IF (Quantity * "Return Qty. Shipped" < 0) OR
    ...
Table<Purchase Line>.PROCEDURE<OnValidateTypeOnAfterCheckItem>
  Raised in: Table<Purchase Line>.Field<Type>.<OnValidate>
    Code lines:
    ...
            PurchHeader.TESTFIELD(Status,PurchHeader.Status::Open);
            ReservePurchLine.VerifyChange(Rec,xRec);
            CALCFIELDS("Reserved Qty. (Base)");
            TESTFIELD("Reserved Qty. (Base)",0);
            WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
            OnValidateTypeOnAfterCheckItem(Rec,xRec); <=====================
          END;
        Type::"Fixed Asset":
          IF Quantity <> 0 THEN
            PurchHeader.TESTFIELD(Status,PurchHeader.Status::Open);
    ...
Table<Purchase Line>.PROCEDURE<OnValidateTypeOnCopyFromTempPurchLine>
  Raised in: Table<Purchase Line>.Field<Type>.<OnValidate>
    Code lines:
    ...
    IF xRec."Line Amount" <> 0 THEN
      "Recalculate Invoice Disc." := TRUE;
    
    Type := TempPurchLine.Type;
    "System-Created Entry" := TempPurchLine."System-Created Entry";
    OnValidateTypeOnCopyFromTempPurchLine(Rec,TempPurchLine); <=====================
    VALIDATE("FA Posting Type");
    
    IF Type = Type::Item THEN
      "Allow Item Charge Assignment" := TRUE
    ...
Table<Purchase Line>.PROCEDURE<OnValidateVariantCodeOnAfterValidationChecks>
  Raised in: Table<Purchase Line>.Field<Variant Code>.<OnValidate>
    Code lines:
    ...
    END;
    
    IF "Drop Shipment" THEN
      ERROR(Text001,FIELDCAPTION("Variant Code"),"Sales Order No.");
    
    OnValidateVariantCodeOnAfterValidationChecks(Rec,xRec,CurrFieldNo); <=====================
    
    IF Type = Type::Item THEN
      UpdateDirectUnitCost(FIELDNO("Variant Code"));
    
    ...
Table<Purchase Line>.PROCEDURE<OnValidateVATProdPostingGroupOnBeforeCheckVATCalcType>
  Raised in: Table<Purchase Line>.Field<VAT Prod. Posting Group>.<OnValidate>
    Code lines:
    ...
    "VAT %" := VATPostingSetup."VAT %";
    "VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
    "VAT Identifier" := VATPostingSetup."VAT Identifier";
    
    IsHandled := FALSE;
    OnValidateVATProdPostingGroupOnBeforeCheckVATCalcType(Rec,VATPostingSetup,IsHandled); <=====================
    IF NOT IsHandled THEN
      CASE "VAT Calculation Type" OF
        "VAT Calculation Type"::"Reverse Charge VAT",
        "VAT Calculation Type"::"Sales Tax":
    ...
Table<Currency>.PROCEDURE<OnAfterInitRoundingPrecision>
  Raised in: Table<Currency>.PROCEDURE<InitRoundingPrecision>
    Code lines:
    ...
    "Max. VAT Difference Allowed" := GLSetup."Max. VAT Difference Allowed";
    "VAT Rounding Type" := GLSetup."VAT Rounding Type";
    "Invoice Rounding Precision" := GLSetup."Inv. Rounding Precision (LCY)";
    "Invoice Rounding Type" := GLSetup."Inv. Rounding Type (LCY)";
    
    OnAfterInitRoundingPrecision(Rec,xRec,GLSetup); <=====================
Table<Currency>.PROCEDURE<OnBeforeGetGainLossAccount>
  Raised in: Table<Currency>.PROCEDURE<GetGainLossAccount>
    Code lines:
    OnBeforeGetGainLossAccount(Rec,DtldCVLedgEntryBuf); <=====================
    
    CASE DtldCVLedgEntryBuf."Entry Type" OF
      DtldCVLedgEntryBuf."Entry Type"::"Unrealized Loss":
        EXIT(GetUnrealizedLossesAccount);
      DtldCVLedgEntryBuf."Entry Type"::"Unrealized Gain":
        EXIT(GetUnrealizedGainsAccount);
      DtldCVLedgEntryBuf."Entry Type"::"Realized Loss":
        EXIT(GetRealizedLossesAccount);
      DtldCVLedgEntryBuf."Entry Type"::"Realized Gain":
    ...
Table<IC Outbox Transaction>.PROCEDURE<OnBeforeOutboxCheckSend>
  Raised in: Table<IC Outbox Transaction>.PROCEDURE<OutboxCheckSend>
    Code lines:
    IsHandled := FALSE;
    OnBeforeOutboxCheckSend(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    HandledICOutboxTrans.SETRANGE("Source Type","Source Type");
    HandledICOutboxTrans.SETRANGE("Document Type","Document Type");
    HandledICOutboxTrans.SETRANGE("Document No.","Document No.");
    IF HandledICOutboxTrans.FINDFIRST THEN
      IF NOT ConfirmManagement.ConfirmProcess(STRSUBSTNO(Text002,"Transaction No."),TRUE) THEN
    ...
Table<IC Inbox Transaction>.PROCEDURE<OnAfterInboxCheckAccept>
  Raised in: Table<IC Inbox Transaction>.PROCEDURE<InboxCheckAccept>
    Code lines:
    ...
              "Line Action" := xRec."Line Action";
        END;
      END;
    END;
    
    OnAfterInboxCheckAccept(Rec); <=====================
Table<IC Inbox Transaction>.PROCEDURE<OnBeforeInboxCheckAccept>
  Raised in: Table<IC Inbox Transaction>.PROCEDURE<InboxCheckAccept>
    Code lines:
    IsHandled := FALSE;
    OnBeforeInboxCheckAccept(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    HandledICInboxTrans.SETRANGE("IC Partner Code","IC Partner Code");
    HandledICInboxTrans.SETRANGE("Document Type","Document Type");
    HandledICInboxTrans.SETRANGE("Source Type","Source Type");
    HandledICInboxTrans.SETRANGE("Document No.","Document No.");
    IF HandledICInboxTrans.FINDFIRST THEN
    ...
Table<IC Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
  Raised in: Table<IC Comment Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    ...
    ICCommentLine.SETRANGE("Transaction Source","Transaction Source");
    ICCommentLine.SETRANGE(Date,WORKDATE);
    IF NOT ICCommentLine.FINDFIRST THEN
      Date := WORKDATE;
    
    OnAfterSetUpNewLine(Rec,ICCommentLine); <=====================
Table<Purch. Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
  Raised in: Table<Purch. Comment Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    ...
    PurchCommentLine.SETRANGE("Document Line No.","Document Line No.");
    PurchCommentLine.SETRANGE(Date,WORKDATE);
    IF NOT PurchCommentLine.FINDFIRST THEN
      Date := WORKDATE;
    
    OnAfterSetUpNewLine(Rec,PurchCommentLine); <=====================
Table<Purch. Comment Line>.PROCEDURE<OnBeforeCopyComments>
  Raised in: Table<Purch. Comment Line>.PROCEDURE<CopyComments>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCopyComments(PurchCommentLine,ToDocumentType,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    PurchCommentLine.SETRANGE("Document Type",FromDocumentType);
    PurchCommentLine.SETRANGE("No.",FromNumber);
    IF PurchCommentLine.FINDSET THEN
      REPEAT
        PurchCommentLine2 := PurchCommentLine;
    ...
Table<Sales Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
  Raised in: Table<Sales Comment Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    ...
    SalesCommentLine.SETRANGE("Document Line No.","Document Line No.");
    SalesCommentLine.SETRANGE(Date,WORKDATE);
    IF NOT SalesCommentLine.FINDFIRST THEN
      Date := WORKDATE;
    
    OnAfterSetUpNewLine(Rec,SalesCommentLine); <=====================
Table<Sales Comment Line>.PROCEDURE<OnBeforeCopyComments>
  Raised in: Table<Sales Comment Line>.PROCEDURE<CopyComments>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCopyComments(SalesCommentLine,ToDocumentType,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SalesCommentLine.SETRANGE("Document Type",FromDocumentType);
    SalesCommentLine.SETRANGE("No.",FromNumber);
    IF SalesCommentLine.FINDSET THEN
      REPEAT
        SalesCommentLine2 := SalesCommentLine;
    ...
Table<Approval Entry>.PROCEDURE<OnAfterGetRecordDetails>
  Raised in: Table<Approval Entry>.PROCEDURE<RecordDetails>
    Code lines:
    ...
        END;
      ELSE
        Details := FORMAT("Record ID to Approve",0,1) + ChangeRecordDetails;
    END;
    
    OnAfterGetRecordDetails(RecRef,ChangeRecordDetails,Details); <=====================
Table<Workflow Webhook Subscription>.PROCEDURE<OnFindTaskSchedulerAllowed>
  Raised in: Table<Workflow Webhook Subscription>.<OnDelete>
    Code lines:
    ...
      WorkflowWebhookSubBuffer."WF Definition Id" := "WF Definition Id";
      WorkflowWebhookSubBuffer."Client Id" := "Client Id";
      WorkflowWebhookSubBuffer.INSERT;
    
      IsTaskSchedulerAllowed := TRUE;
      OnFindTaskSchedulerAllowed(IsTaskSchedulerAllowed); <=====================
    
      IF IsTaskSchedulerAllowed THEN
        TASKSCHEDULER.CREATETASK(CODEUNIT::"Workflow Webhook Sub Delete",0,TRUE,
          COMPANYNAME,0DT,Workflow.RECORDID)
    ...
Table<Job Queue Entry>.PROCEDURE<OnAfterReschedule>
  Raised in: Table<Job Queue Entry>.PROCEDURE<Reschedule>
    Code lines:
    ...
    IF Status IN [Status::Ready,Status::"On Hold with Inactivity Timeout"] THEN BEGIN
      SetDefaultValues(FALSE);
      EnqueueTask;
    END;
    
    OnAfterReschedule(Rec); <=====================
Table<Job Queue Entry>.PROCEDURE<OnBeforeClearServiceValues>
  Raised in: Table<Job Queue Entry>.PROCEDURE<ClearServiceValues>
    Code lines:
    OnBeforeClearServiceValues(Rec); <=====================
    
    "User Session Started" := 0DT;
    "User Service Instance ID" := 0;
    "User Session ID" := 0;
Table<Job Queue Entry>.PROCEDURE<OnBeforeInsertLogEntry>
  Raised in: Table<Job Queue Entry>.PROCEDURE<InsertLogEntry>
    Code lines:
    ...
    JobQueueLogEntry."Object ID to Run" := "Object ID to Run";
    JobQueueLogEntry.Description := Description;
    JobQueueLogEntry.Status := JobQueueLogEntry.Status::"In Process";
    JobQueueLogEntry."Processed by User ID" := USERID;
    JobQueueLogEntry."Job Queue Category Code" := "Job Queue Category Code";
    OnBeforeInsertLogEntry(JobQueueLogEntry,Rec); <=====================
    JobQueueLogEntry.INSERT(TRUE);
    LastJobQueueLogEntryNo := JobQueueLogEntry."Entry No.";
Table<Job Queue Entry>.PROCEDURE<OnBeforeModifyLogEntry>
  Raised in: Table<Job Queue Entry>.PROCEDURE<FinalizeLogEntry>
    Code lines:
    ...
      JobQueueLogEntry.SetErrorMessage(GetErrorMessage);
      JobQueueLogEntry.SetErrorCallStack(GETLASTERRORCALLSTACK);
    END ELSE
      JobQueueLogEntry.Status := JobQueueLogEntry.Status::Success;
    JobQueueLogEntry."End Date/Time" := CURRENTDATETIME;
    OnBeforeModifyLogEntry(JobQueueLogEntry,Rec); <=====================
    JobQueueLogEntry.MODIFY(TRUE);
Table<Job Queue Entry>.PROCEDURE<OnBeforeScheduleTask>
  Raised in: Table<Job Queue Entry>.PROCEDURE<ScheduleTask>
    Code lines:
    IF "User ID" <> USERID THEN BEGIN
      "User ID" := USERID;
      MODIFY(TRUE);
    END;
    OnBeforeScheduleTask(Rec,TaskGUID); <=====================
    IF NOT ISNULLGUID(TaskGUID) THEN
      EXIT(TaskGUID);
    
    EXIT(
      TASKSCHEDULER.CREATETASK(
    ...
Table<Job Queue Entry>.PROCEDURE<OnBeforeSetStatusValue>
  Raised in: Table<Job Queue Entry>.PROCEDURE<SetStatusValue>
    Code lines:
    OnBeforeSetStatusValue(Rec,xRec,NewStatus); <=====================
    
    IF NewStatus = Status THEN
      EXIT;
    CASE NewStatus OF
      Status::Ready:
        BEGIN
          SetDefaultValues(FALSE);
          "Earliest Start Date/Time" := JobQueueDispatcher.CalcInitialRunTime(Rec,CURRENTDATETIME);
          EnqueueTask;
    ...
Table<Job Queue Entry>.PROCEDURE<OnFindingIfJobNeedsToBeRun>
  Raised in: Table<Job Queue Entry>.PROCEDURE<DoesJobNeedToBeRun>
    Code lines:
    OnFindingIfJobNeedsToBeRun(Result); <=====================
Table<Job Queue Log Entry>.PROCEDURE<OnBeforeMarkAsError>
  Raised in: Table<Job Queue Log Entry>.PROCEDURE<MarkAsError>
    Code lines:
    IF Status <> Status::"In Process" THEN
      ERROR(OnlyEntriesInProgressCanBeMarkedErr);
    
    ErrorMessage := STRSUBSTNO(ErrorMessageMarkedByTxt,USERID);
    OnBeforeMarkAsError(Rec,JobQueueEntry,ErrorMessage); <=====================
    
    IF JobQueueEntry.GET(ID) THEN
      JobQueueEntry.SetError(ErrorMessage);
    
    Status := Status::Error;
    ...
Table<Dimension Set Entry>.PROCEDURE<OnBeforeGetDimensionSetID>
  Raised in: Table<Dimension Set Entry>.PROCEDURE<GetDimensionSetID>
    Code lines:
    OnBeforeGetDimensionSetID(DimSetEntry); <=====================
    
    DimSetEntry2.COPY(DimSetEntry);
    IF DimSetEntry."Dimension Set ID" > 0 THEN
      DimSetEntry.SETRANGE("Dimension Set ID",DimSetEntry."Dimension Set ID");
    
    DimSetEntry.SETCURRENTKEY("Dimension Value ID");
    DimSetEntry.SETFILTER("Dimension Code",'<>%1','');
    DimSetEntry.SETFILTER("Dimension Value Code",'<>%1','');
    
    ...
Table<Change Global Dim. Log Entry>.PROCEDURE<OnFindingScheduledTask>
  Raised in: Table<Change Global Dim. Log Entry>.PROCEDURE<IsTaskScheduled>
    Code lines:
    OnFindingScheduledTask("Task ID",TaskExists); <=====================
    IF NOT TaskExists THEN
      EXIT(ScheduledTask.GET("Task ID"));
Table<Invoice Post. Buffer>.PROCEDURE<OnAfterInvPostBufferModify>
  Raised in: Table<Invoice Post. Buffer>.PROCEDURE<Update>
    Code lines:
    ...
        "System-Created Entry" := FALSE;
      IF "Deferral Code" = '' THEN
        AdjustRoundingForUpdate;
      OnBeforeInvPostBufferModify(Rec,InvoicePostBuffer);
      MODIFY;
      OnAfterInvPostBufferModify(Rec,InvoicePostBuffer); <=====================
      InvDefLineNo := "Deferral Line No.";
    END ELSE BEGIN
      IF "Deferral Code" <> '' THEN BEGIN
        DeferralLineNo := DeferralLineNo + 1;
    ...
Table<Invoice Post. Buffer>.PROCEDURE<OnAfterInvPostBufferPreparePurchase>
  Raised in: Table<Invoice Post. Buffer>.PROCEDURE<PreparePurchase>
    Code lines:
    ...
      "VAT Base Amount (ACY)" := 0;
      "VAT Amount" := 0;
      "VAT Amount (ACY)" := 0;
    END;
    
    OnAfterInvPostBufferPreparePurchase(PurchLine,Rec); <=====================
Table<Invoice Post. Buffer>.PROCEDURE<OnAfterInvPostBufferPrepareSales>
  Raised in: Table<Invoice Post. Buffer>.PROCEDURE<PrepareSales>
    Code lines:
    ...
      "VAT Base Amount (ACY)" := 0;
      "VAT Amount" := 0;
      "VAT Amount (ACY)" := 0;
    END;
    
    OnAfterInvPostBufferPrepareSales(SalesLine,Rec); <=====================
Table<Invoice Post. Buffer>.PROCEDURE<OnAfterInvPostBufferPrepareService>
  Raised in: Table<Invoice Post. Buffer>.PROCEDURE<PrepareService>
    Code lines:
    ...
      "Tax Liable" := ServiceLine."Tax Liable";
      "Use Tax" := FALSE;
      Quantity := ServiceLine."Qty. to Invoice (Base)";
    END;
    
    OnAfterInvPostBufferPrepareService(ServiceLine,Rec); <=====================
Table<Invoice Post. Buffer>.PROCEDURE<OnAfterInvPostBufferUpdate>
  Raised in: Table<Invoice Post. Buffer>.PROCEDURE<Update>
    Code lines:
    ...
        InvDefLineNo := "Deferral Line No.";
      END;
      INSERT;
    END;
    
    OnAfterInvPostBufferUpdate(Rec,InvoicePostBuffer); <=====================
Table<Invoice Post. Buffer>.PROCEDURE<OnBeforeInvPostBufferModify>
  Raised in: Table<Invoice Post. Buffer>.PROCEDURE<Update>
    Code lines:
    ...
      "VAT Base Before Pmt. Disc." += InvoicePostBuffer."VAT Base Before Pmt. Disc.";
      IF NOT InvoicePostBuffer."System-Created Entry" THEN
        "System-Created Entry" := FALSE;
      IF "Deferral Code" = '' THEN
        AdjustRoundingForUpdate;
      OnBeforeInvPostBufferModify(Rec,InvoicePostBuffer); <=====================
      MODIFY;
      OnAfterInvPostBufferModify(Rec,InvoicePostBuffer);
      InvDefLineNo := "Deferral Line No.";
    END ELSE BEGIN
    ...
Table<Invoice Post. Buffer>.PROCEDURE<OnBeforeInvPostBufferUpdate>
  Raised in: Table<Invoice Post. Buffer>.PROCEDURE<Update>
    Code lines:
    OnBeforeInvPostBufferUpdate(Rec,InvoicePostBuffer); <=====================
    
    Rec := InvoicePostBuffer;
    IF FIND THEN BEGIN
      Amount += InvoicePostBuffer.Amount;
      "VAT Amount" += InvoicePostBuffer."VAT Amount";
      "VAT Base Amount" += InvoicePostBuffer."VAT Base Amount";
      "Amount (ACY)" += InvoicePostBuffer."Amount (ACY)";
      "VAT Amount (ACY)" += InvoicePostBuffer."VAT Amount (ACY)";
      "VAT Difference" += InvoicePostBuffer."VAT Difference";
    ...
Table<Contact>.PROCEDURE<OnAfterGetSalutation>
  Raised in: Table<Contact>.PROCEDURE<GetSalutation>
    Code lines:
    ...
        NamePart[5] := Initials;
      SalutationFormula."Name 5"::"Company Name":
        NamePart[5] := "Company Name";
    END;
    
    OnAfterGetSalutation(SalutationType,LanguageCode,NamePart); <=====================
    
    FOR i := 1 TO 5 DO
      IF NamePart[i] = '' THEN BEGIN
        SubStr := '%' + FORMAT(i) + ' ';
    ...
Table<Contact>.PROCEDURE<OnAfterInheritCompanyToPersonData>
  Raised in: Table<Contact>.PROCEDURE<InheritCompanyToPersonData>
    Code lines:
    ...
      UpdateFieldForNewCompany(FIELDNO(Pager));
      UpdateFieldForNewCompany(FIELDNO("Correspondence Type"));
    END;
    CALCFIELDS("No. of Industry Groups","No. of Business Relations");
    
    OnAfterInheritCompanyToPersonData(Rec,xRec,NewCompanyContact); <=====================
Table<Contact>.PROCEDURE<OnAfterModifyBillToCustomerNo>
  Raised in: Table<Contact>.PROCEDURE<UpdateQuotes>
    Code lines:
    ...
            SalesHeader2."Salesperson Code" := Customer."Salesperson Code";
            SalesHeader2.MODIFY;
            SalesLine.SETRANGE("Document Type",SalesHeader2."Document Type");
            SalesLine.SETRANGE("Document No.",SalesHeader2."No.");
            SalesLine.MODIFYALL("Bill-to Customer No.",SalesHeader2."Bill-to Customer No.");
            OnAfterModifyBillToCustomerNo(SalesHeader2,SalesLine); <=====================
          UNTIL SalesHeader.NEXT = 0;
        OnAfterUpdateQuotesForContact(Cont,Customer);
      UNTIL Cont.NEXT = 0;
Table<Contact>.PROCEDURE<OnAfterModifySellToCustomerNo>
  Raised in: Table<Contact>.PROCEDURE<UpdateQuotes>
    Code lines:
    ...
            SalesLine.SETRANGE("Document Type",SalesHeader2."Document Type");
            SalesLine.SETRANGE("Document No.",SalesHeader2."No.");
            SalesLine.MODIFYALL("Sell-to Customer No.",SalesHeader2."Sell-to Customer No.");
            IF SalesHeader2."Sell-to Contact No." = SalesHeader2."Bill-to Contact No." THEN
              SalesLine.MODIFYALL("Bill-to Customer No.",SalesHeader2."Bill-to Customer No.");
            OnAfterModifySellToCustomerNo(SalesHeader2,SalesLine); <=====================
          UNTIL SalesHeader.NEXT = 0;
    
        SalesHeader.RESET;
        SalesHeader.SETRANGE("Bill-to Customer No.",'');
    ...
Table<Contact>.PROCEDURE<OnAfterSetTypeForContact>
  Raised in: Table<Contact>.PROCEDURE<TypeChange>
    Code lines:
    ...
            "Salutation Code" := RMSetup."Default Person Salutation Code";
            NameBreakdown;
          END;
        END;
    END;
    OnAfterSetTypeForContact(Rec); <=====================
    VALIDATE("Lookup Contact No.");
    
    IF Cont.GET("No.") THEN BEGIN
      IF Type = Type::Company THEN
    ...
Table<Contact>.PROCEDURE<OnAfterUpdateQuotesForContact>
  Raised in: Table<Contact>.PROCEDURE<UpdateQuotes>
    Code lines:
    ...
            SalesLine.SETRANGE("Document Type",SalesHeader2."Document Type");
            SalesLine.SETRANGE("Document No.",SalesHeader2."No.");
            SalesLine.MODIFYALL("Bill-to Customer No.",SalesHeader2."Bill-to Customer No.");
            OnAfterModifyBillToCustomerNo(SalesHeader2,SalesLine);
          UNTIL SalesHeader.NEXT = 0;
        OnAfterUpdateQuotesForContact(Cont,Customer); <=====================
      UNTIL Cont.NEXT = 0;
Table<Contact>.PROCEDURE<OnAfterValidateCity>
  Raised in: Table<Contact>.Field<City>.<OnValidate>
    Code lines:
    PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
    
    OnAfterValidateCity(Rec,xRec); <=====================
Table<Contact>.PROCEDURE<OnAfterValidatePostCode>
  Raised in: Table<Contact>.Field<Post Code>.<OnValidate>
    Code lines:
    PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
    
    OnAfterValidatePostCode(Rec,xRec); <=====================
Table<Contact>.PROCEDURE<OnAfterVendorInsert>
  Raised in: Table<Contact>.PROCEDURE<CreateVendor>
    Code lines:
    ...
    ContBusRel."Business Relation Code" := RMSetup."Bus. Rel. Code for Vendors";
    ContBusRel."Link to Table" := ContBusRel."Link to Table"::Vendor;
    ContBusRel."No." := Vend."No.";
    ContBusRel.INSERT(TRUE);
    
    OnAfterVendorInsert(Vend,Rec); <=====================
    
    UpdateCustVendBank.UpdateVendor(ContComp,ContBusRel);
    
    IF OfficeMgt.IsAvailable THEN
    ...
Table<Contact>.PROCEDURE<OnBeforeApplyCompanyChangeToPerson>
  Raised in: Table<Contact>.PROCEDURE<OnModify>
    Code lines:
    ...
              Cont.Pager := Pager;
              ContChanged := TRUE;
            END;
          END;
    
          OnBeforeApplyCompanyChangeToPerson(Cont,Rec,xRec,ContChanged); <=====================
          IF ContChanged THEN BEGIN
            Cont.OnModify(OldCont);
            Cont.MODIFY;
          END;
    ...
Table<Contact>.PROCEDURE<OnBeforeCheckCompanyNo>
  Raised in: Table<Contact>.PROCEDURE<CheckCompanyNo>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckCompanyNo(Rec,IsHandled); <=====================
    IF NOT IsHandled THEN
      TESTFIELD("Company No.");
Table<Contact>.PROCEDURE<OnBeforeChooseCustomerTemplate>
  Raised in: Table<Contact>.PROCEDURE<ChooseCustomerTemplate>
    Code lines:
    IsHandled := FALSE;
    OnBeforeChooseCustomerTemplate(Rec,CustTemplateCode,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(CustTemplateCode);
    
    CheckForExistingRelationships(ContBusRel."Link to Table"::Customer);
    ContBusRel.RESET;
    ContBusRel.SETRANGE("Contact No.","No.");
    ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
    IF ContBusRel.FINDFIRST THEN
    ...
Table<Contact>.PROCEDURE<OnBeforeCustomerInsert>
  Raised in: Table<Contact>.PROCEDURE<CreateCustomer>
    Code lines:
    ...
      IF CustTemplate.GET(CustomerTemplate) THEN;
    
    CLEAR(Cust);
    Cust.SetInsertFromContact(TRUE);
    Cust."Contact Type" := Type;
    OnBeforeCustomerInsert(Cust,CustomerTemplate,Rec); <=====================
    Cust.INSERT(TRUE);
    Cust.SetInsertFromContact(FALSE);
    
    ContBusRel."Contact No." := "No.";
    ...
Table<Contact>.PROCEDURE<OnBeforeDuplicateCheck>
  Raised in: Table<Contact>.PROCEDURE<OnModify>
    Code lines:
    ...
        (City <> xRec.City) OR
        ("Post Code" <> xRec."Post Code") OR
        ("VAT Registration No." <> xRec."VAT Registration No.") OR
        ("Phone No." <> xRec."Phone No.");
    
      OnBeforeDuplicateCheck(Rec,xRec,IsDuplicateCheckNeeded); <=====================
    
      IF IsDuplicateCheckNeeded THEN
        CheckDupl;
    END;
Table<Contact>.PROCEDURE<OnBeforeFindCustomerTemplate>
  Raised in: Table<Contact>.PROCEDURE<FindCustomerTemplate>
    Code lines:
    IsHandled := FALSE;
    OnBeforeFindCustomerTemplate(Rec,CustTemplateCode,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(CustTemplateCode);
    
    CustTemplate.RESET;
    CustTemplate.SETRANGE("Territory Code","Territory Code");
    CustTemplate.SETRANGE("Country/Region Code","Country/Region Code");
    CustTemplate.SETRANGE("Contact Type",Type);
    IF ContCompany.GET("Company No.") THEN
    ...
Table<Contact>.PROCEDURE<OnBeforeIsUpdateNeeded>
  Raised in: Table<Contact>.PROCEDURE<IsUpdateNeeded>
    Code lines:
    ...
      (County <> xRec.County) OR
      ("E-Mail" <> xRec."E-Mail") OR
      ("Home Page" <> xRec."Home Page") OR
      (Type <> xRec.Type);
    
    OnBeforeIsUpdateNeeded(Rec,xRec,UpdateNeeded); <=====================
    EXIT(UpdateNeeded);
Table<Contact>.PROCEDURE<OnBeforeVATRegistrationValidation>
  Raised in: Table<Contact>.PROCEDURE<VATRegistrationValidation>
    Code lines:
    IsHandled := FALSE;
    OnBeforeVATRegistrationValidation(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT VATRegistrationNoFormat.Test("VAT Registration No.","Country/Region Code","No.",DATABASE::Contact) THEN
      EXIT;
    
    VATRegistrationLogMgt.LogContact(Rec);
    
    ...
Table<Contact>.PROCEDURE<OnBeforeVendorInsert>
  Raised in: Table<Contact>.PROCEDURE<CreateVendor>
    Code lines:
    ...
    RMSetup.GET;
    RMSetup.TESTFIELD("Bus. Rel. Code for Vendors");
    
    CLEAR(Vend);
    Vend.SetInsertFromContact(TRUE);
    OnBeforeVendorInsert(Vend); <=====================
    Vend.INSERT(TRUE);
    Vend.SetInsertFromContact(FALSE);
    
    IF Type = Type::Company THEN
    ...
Table<Contact>.PROCEDURE<OnCreateCustomerOnBeforeCustomerModify>
  Raised in: Table<Contact>.PROCEDURE<CreateCustomer>
    Code lines:
    ...
    
    Cust.GET(ContBusRel."No.");
    IF Type = Type::Company THEN
      Cust.VALIDATE(Name,"Company Name");
    
    OnCreateCustomerOnBeforeCustomerModify(Cust,Rec); <=====================
    Cust.MODIFY;
    
    IF CustTemplate.Code <> '' THEN BEGIN
      IF "Territory Code" = '' THEN
    ...
Table<Contact>.PROCEDURE<OnCreateCustomerOnBeforeUpdateQuotes>
  Raised in: Table<Contact>.PROCEDURE<CreateCustomer>
    Code lines:
    ...
          DefaultDim2."Value Posting" := DefaultDim."Value Posting";
          DefaultDim2.INSERT(TRUE);
        UNTIL DefaultDim.NEXT = 0;
    END;
    
    OnCreateCustomerOnBeforeUpdateQuotes(Cust,Rec); <=====================
    
    UpdateQuotes(Cust);
    CampaignMgt.ConverttoCustomer(Rec,Cust);
    IF OfficeMgt.IsAvailable THEN
    ...
Table<Contact>.PROCEDURE<OnCreateCustomerOnTransferFieldsFromTemplate>
  Raised in: Table<Contact>.PROCEDURE<CreateCustomer>
    Code lines:
    ...
      Cust."Payment Terms Code" := CustTemplate."Payment Terms Code";
      Cust."Payment Method Code" := CustTemplate."Payment Method Code";
      Cust."Prices Including VAT" := CustTemplate."Prices Including VAT";
      Cust."Shipment Method Code" := CustTemplate."Shipment Method Code";
      Cust.UpdateReferencedIds;
      OnCreateCustomerOnTransferFieldsFromTemplate(Cust,CustTemplate); <=====================
      Cust.MODIFY;
    
      DefaultDim.SETRANGE("Table ID",DATABASE::"Customer Template");
      DefaultDim.SETRANGE("No.",CustTemplate.Code);
    ...
Table<Rlshp. Mgt. Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
  Raised in: Table<Rlshp. Mgt. Comment Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    ...
    RlshpMgtCommentLine.SETRANGE("Sub No.","Sub No.");
    RlshpMgtCommentLine.SETRANGE(Date,WORKDATE);
    IF NOT RlshpMgtCommentLine.FINDFIRST THEN
      Date := WORKDATE;
    
    OnAfterSetUpNewLine(Rec,RlshpMgtCommentLine); <=====================
Table<Interaction Log Entry>.PROCEDURE<OnAfterCopyFromSegment>
  Raised in: Table<Interaction Log Entry>.PROCEDURE<CopyFromSegment>
    Code lines:
    ...
    "Version No." := SegLine."Version No.";
    "Send Word Docs. as Attmt." := SegLine."Send Word Doc. As Attmt.";
    "Contact Via" := SegLine."Contact Via";
    "Opportunity No." := SegLine."Opportunity No.";
    
    OnAfterCopyFromSegment(Rec,SegLine); <=====================
Table<Interaction Log Entry>.PROCEDURE<OnBeforeOpenAttachment>
  Raised in: Table<Interaction Log Entry>.PROCEDURE<OpenAttachment>
    Code lines:
    IsHandled := FALSE;
    OnBeforeOpenAttachment(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF "Attachment No." = 0 THEN
      EXIT;
    
    Attachment.GET("Attachment No.");
    
    ...
Table<Interaction Log Entry>.PROCEDURE<OnOpenAttachmentOnBeforeShowAttachment>
  Raised in: Table<Interaction Log Entry>.PROCEDURE<OpenAttachment>
    Code lines:
    ...
      SegLine.Description := Description;
      SegLine.Subject := Subject;
      SegLine."Language Code" := "Interaction Language Code";
      IF WordManagement.IsWordDocumentExtension(Attachment."File Extension") THEN
        WordManagement.Activate(WordApplicationHandler,5065);
      OnOpenAttachmentOnBeforeShowAttachment(Rec,SegLine); <=====================
      Attachment.ShowAttachment(SegLine,FORMAT("Entry No.") + ' ' + Description,FALSE,FALSE);
    END ELSE BEGIN
      Attachment.CALCFIELDS("Email Message Url");
      IF Attachment."Email Message Url".HASVALUE THEN BEGIN
    ...
Table<Segment Header>.PROCEDURE<OnAfterUpdateSegHeader>
  Raised in: Table<Segment Header>.PROCEDURE<UpdateSegHeader>
    Code lines:
    ...
    
      MODIFY;
      CALCFIELDS("Attachment No.");
    END;
    
    OnAfterUpdateSegHeader(Rec); <=====================
Table<Segment Header>.PROCEDURE<OnAfterUpdateSegLinesByFieldNo>
  Raised in: Table<Segment Header>.PROCEDURE<UpdateSegLinesByFieldNo>
    Code lines:
    ...
          SegLine.MODIFYALL("Send Word Doc. As Attmt.","Send Word Docs. as Attmt.");
        FIELDNO("Attachment No."):
          SegLine.MODIFYALL("Attachment No.","Attachment No.");
      END;
    
    OnAfterUpdateSegLinesByFieldNo(Rec,ChangedFieldNo); <=====================
Table<Segment Header>.PROCEDURE<OnBeforeUpdateSegHeader>
  Raised in: Table<Segment Header>.PROCEDURE<UpdateSegHeader>
    Code lines:
    OnBeforeUpdateSegHeader(Rec,InteractTmplCode,InteractTmplChange,IsHandled); <=====================
    
    IF InteractTmplChange THEN BEGIN
      MODIFY;
      GET("No.");
      "Interaction Template Code" := InteractTmplCode;
      "Subject (Default)" := '';
    
      IF InteractionTemplate.GET("Interaction Template Code") THEN BEGIN
        CopyFromTemplate(InteractionTemplate);
    ...
Table<Segment Line>.PROCEDURE<OnAfterCheckStatus>
  Raised in: Table<Segment Line>.PROCEDURE<CheckStatus>
    Code lines:
    ...
    IF ("Correspondence Type" = "Correspondence Type"::Email) AND
       NOT TempAttachment."Attachment File".HASVALUE
    THEN
      ERROR(Text008);
    
    OnAfterCheckStatus(Rec); <=====================
Table<Segment Line>.PROCEDURE<OnAfterCopyFromInteractionLogEntry>
  Raised in: Table<Segment Line>.PROCEDURE<CopyFromInteractLogEntry>
    Code lines:
    ...
    "Version No." := InteractLogEntry."Version No.";
    "Send Word Doc. As Attmt." := InteractLogEntry."Send Word Docs. as Attmt.";
    "Contact Via" := InteractLogEntry."Contact Via";
    "Opportunity No." := InteractLogEntry."Opportunity No.";
    
    OnAfterCopyFromInteractionLogEntry(Rec,InteractLogEntry); <=====================
Table<Segment Line>.PROCEDURE<OnAfterCreateFromTask>
  Raised in: Table<Segment Line>.PROCEDURE<CreateFromTask>
    Code lines:
    ...
    VALIDATE("Contact No.",Task."Contact No.");
    "Salesperson Code" := Task."Salesperson Code";
    "Campaign No." := Task."Campaign No.";
    "Opportunity No." := Task."Opportunity No.";
    
    OnAfterCreateFromTask(Rec,Task); <=====================
Table<Segment Line>.PROCEDURE<OnAfterFinishWizard>
  Raised in: Table<Segment Line>.PROCEDURE<FinishWizard>
    Code lines:
    ...
            ERROR(Text025,Mail.GetErrorDesc,PRODUCTNAME.FULL);
      END;
      WordManagement.Deactivate(5077);
    END;
    
    OnAfterFinishWizard(Rec,InteractionLogEntry,IsFinish,Flag); <=====================
Table<Segment Line>.PROCEDURE<OnAfterInitLine>
  Raised in: Table<Segment Line>.PROCEDURE<InitLine>
    Code lines:
    ...
    "Information Flow" := SegHeader."Information Flow";
    "Initiated By" := SegHeader."Initiated By";
    "Campaign Response" := SegHeader."Campaign Response";
    "Send Word Doc. As Attmt." := SegHeader."Send Word Docs. as Attmt.";
    CLEAR(Evaluation);
    OnAfterInitLine(Rec,SegHeader); <=====================
Table<Segment Line>.PROCEDURE<OnBeforeCheckStatus>
  Raised in: Table<Segment Line>.PROCEDURE<CheckStatus>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckStatus(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF "Contact No." = '' THEN
      ERROR(Text009);
    IF "Interaction Template Code" = '' THEN
      ErrorMessage(FIELDCAPTION("Interaction Template Code"));
    IF "Salesperson Code" = '' THEN
    ...
Table<Segment Line>.PROCEDURE<OnBeforeStartWizard>
  Raised in: Table<Segment Line>.PROCEDURE<StartWizard>
    Code lines:
    OnBeforeStartWizard(Rec); <=====================
    
    IF Campaign.GET("Campaign No.") THEN
      "Campaign Description" := Campaign.Description;
    IF Opp.GET("Opportunity No.") THEN
      "Opportunity Description" := Opp.Description;
    "Wizard Contact Name" := GetContactName;
    "Wizard Step" := "Wizard Step"::"1";
    "Interaction Successful" := TRUE;
    VALIDATE(Date,WORKDATE);
    ...
Table<Segment Line>.PROCEDURE<OnBeforeStartWizard2>
  Raised in: Table<Segment Line>.PROCEDURE<StartWizard2>
    Code lines:
    OnBeforeStartWizard2(Rec); <=====================
    
    InteractionTmplSetup.GET;
    InteractionTmplSetup.TESTFIELD("Outg. Calls");
    
    "Wizard Step" := "Wizard Step"::"1";
    IF Date = 0D THEN
      Date := TODAY;
    "Time of Interaction" := TIME;
    "Interaction Successful" := TRUE;
    ...
Table<Segment Line>.PROCEDURE<OnCreateInteractionFromContactOnBeforeStartWizard>
  Raised in: Table<Segment Line>.PROCEDURE<CreateInteractionFromContact>
    Code lines:
    ...
    
    "Salesperson Code" := FindSalespersonByUserEmail;
    IF "Salesperson Code" = '' THEN
      "Salesperson Code" := Contact."Salesperson Code";
    
    OnCreateInteractionFromContactOnBeforeStartWizard(Rec,Contact); <=====================
    
    StartWizard;
Table<Segment Line>.PROCEDURE<OnCreateInteractionFromInteractLogEntryOnBeforeStartWizard>
  Raised in: Table<Segment Line>.PROCEDURE<CreateInteractionFromInteractLogEntry>
    Code lines:
    ...
        "Opportunity No." := Opportunity."No.";
        SETRANGE("Opportunity No.","Opportunity No.");
      END;
    END;
    
    OnCreateInteractionFromInteractLogEntryOnBeforeStartWizard(Rec,InteractionLogEntry); <=====================
    
    StartWizard;
Table<Segment Line>.PROCEDURE<OnCreateInteractionFromOppOnBeforeStartWizard>
  Raised in: Table<Segment Line>.PROCEDURE<CreateInteractionFromOpp>
    Code lines:
    ...
      SETRANGE("Campaign No.","Campaign No.");
    END;
    VALIDATE("Opportunity No.",Opportunity."No.");
    SETRANGE("Opportunity No.","Opportunity No.");
    
    OnCreateInteractionFromOppOnBeforeStartWizard(Rec,Opportunity); <=====================
    
    StartWizard;
Table<Segment Line>.PROCEDURE<OnCreateInteractionFromSalespersonOnBeforeStartWizard>
  Raised in: Table<Segment Line>.PROCEDURE<CreateInteractionFromSalesperson>
    Code lines:
    DELETEALL;
    INIT;
    VALIDATE("Salesperson Code",Salesperson.Code);
    SETRANGE("Salesperson Code",Salesperson.Code);
    
    OnCreateInteractionFromSalespersonOnBeforeStartWizard(Rec,Salesperson); <=====================
    
    StartWizard;
Table<Segment Line>.PROCEDURE<OnCreateInteractionFromTaskOnBeforeStartWizard>
  Raised in: Table<Segment Line>.PROCEDURE<CreateInteractionFromTask>
    Code lines:
    INIT;
    CreateFromTask(Task);
    SETRANGE("To-do No.","To-do No.");
    
    OnCreateInteractionFromTaskOnBeforeStartWizard(Rec,Task); <=====================
    
    StartWizard;
Table<To-do>.PROCEDURE<OnAfterSetFilterFromTask>
  Raised in: Table<To-do>.PROCEDURE<SetFilterFromTask>
    Code lines:
    ...
      "Campaign No." := SegHeader."Campaign No.";
      "Salesperson Code" := SegHeader."Salesperson Code";
      SETRANGE("Segment No.","Segment No.");
    END;
    
    OnAfterSetFilterFromTask(Rec,Task); <=====================
Table<To-do>.PROCEDURE<OnBeforeCreateSubTask>
  Raised in: Table<To-do>.PROCEDURE<CreateSubTask>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCreateSubTask(Attendee,Task,TaskNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(TaskNo);
    
    Task2.INIT;
    Task2.TRANSFERFIELDS(Task,FALSE);
    
    IF Attendee."Attendance Type" <> Attendee."Attendance Type"::"To-do Organizer" THEN BEGIN
      IF Attendee."Attendee Type" = Attendee."Attendee Type"::Salesperson THEN BEGIN
    ...
Table<To-do>.PROCEDURE<OnBeforeInsertTaskAndRelatedData>
  Raised in: Table<To-do>.PROCEDURE<InsertTaskAndRelatedData>
    Code lines:
    SkipTaskType := FALSE;
    OnBeforeInsertTaskAndRelatedData(Task2,SkipTaskType); <=====================
    IF NOT SkipTaskType THEN
      IF Task2."Team Code" = '' THEN
        Task2."System To-do Type" := "System To-do Type"::Organizer
      ELSE
        Task2."System To-do Type" := "System To-do Type"::Team;
    
    IF Task2.Type = Type::Meeting THEN BEGIN
      CLEAR(Task2."No.");
    ...
Table<To-do>.PROCEDURE<OnBeforeReassignSalespersonTaskToTeam>
  Raised in: Table<To-do>.PROCEDURE<ReassignSalespersonTaskToTeam>
    Code lines:
    IsHandled := FALSE;
    OnBeforeReassignSalespersonTaskToTeam(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    MODIFY;
    SalespersonCode := "Salesperson Code";
    "Salesperson Code" := '';
    "System To-do Type" := "System To-do Type"::Team;
    MODIFY;
    ...
Table<To-do>.PROCEDURE<OnBeforeReassignTeamTaskToSalesperson>
  Raised in: Table<To-do>.PROCEDURE<ReassignTeamTaskToSalesperson>
    Code lines:
    IsHandled := FALSE;
    OnBeforeReassignTeamTaskToSalesperson(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    MODIFY;
    IF Type = Type::Meeting THEN BEGIN
      Task.SETCURRENTKEY("Organizer To-do No.","System To-do Type");
      Task.SETRANGE("Organizer To-do No.","No.");
      Task.SETRANGE("Salesperson Code","Salesperson Code");
    ...
Table<To-do>.PROCEDURE<OnCreateTaskFromInteractLogEntryOnBeforeStartWizard>
  Raised in: Table<To-do>.PROCEDURE<CreateTaskFromInteractLogEntry>
    Code lines:
    INIT;
    VALIDATE("Contact No.",InteractionLogEntry."Contact No.");
    "Salesperson Code" := InteractionLogEntry."Salesperson Code";
    "Campaign No." := InteractionLogEntry."Campaign No.";
    
    OnCreateTaskFromInteractLogEntryOnBeforeStartWizard(Rec,InteractionLogEntry); <=====================
    StartWizard;
Table<To-do>.PROCEDURE<OnCreateTaskFromSalesHeaderOnBeforeStartWizard>
  Raised in: Table<To-do>.PROCEDURE<CreateTaskFromSalesHeader>
    Code lines:
    ...
    IF SalesHeader."Campaign No." <> '' THEN BEGIN
      "Campaign No." := SalesHeader."Campaign No.";
      SETRANGE("Campaign No.","Campaign No.");
    END;
    
    OnCreateTaskFromSalesHeaderOnBeforeStartWizard(Rec,SalesHeader); <=====================
    OnCreateTaskFromSalesHeaderoOnBeforeStartWizard(Rec,SalesHeader); // Obsolete
    StartWizard;
Table<To-do>.PROCEDURE<OnCreateTaskFromSalesHeaderoOnBeforeStartWizard>
  Raised in: Table<To-do>.PROCEDURE<CreateTaskFromSalesHeader>
    Code lines:
    ...
      "Campaign No." := SalesHeader."Campaign No.";
      SETRANGE("Campaign No.","Campaign No.");
    END;
    
    OnCreateTaskFromSalesHeaderOnBeforeStartWizard(Rec,SalesHeader);
    OnCreateTaskFromSalesHeaderoOnBeforeStartWizard(Rec,SalesHeader); // Obsolete <=====================
    StartWizard;
Table<To-do>.PROCEDURE<OnCreateTaskFromTaskOnBeforeStartWizard>
  Raised in: Table<To-do>.PROCEDURE<CreateTaskFromTask>
    Code lines:
    DELETEALL;
    INIT;
    SetFilterFromTask(Task);
    
    OnCreateTaskFromTaskOnBeforeStartWizard(Rec,Task); <=====================
    StartWizard;
Table<Inter. Log Entry Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
  Raised in: Table<Inter. Log Entry Comment Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    InteractionCommentLine.SETRANGE("Entry No.","Entry No.");
    InteractionCommentLine.SETRANGE(Date,WORKDATE);
    IF NOT InteractionCommentLine.FINDFIRST THEN
      Date := WORKDATE;
    
    OnAfterSetUpNewLine(Rec,InteractionCommentLine); <=====================
Table<Employee>.PROCEDURE<OnBeforeCheckBlockedEmployee>
  Raised in: Table<Employee>.PROCEDURE<IsOnBeforeCheckBlockedEmployeeHandled>
    Code lines:
    OnBeforeCheckBlockedEmployee(Rec,IsPosting,IsHandled); <=====================
Table<Employee>.PROCEDURE<OnBeforeGetFullName>
  Raised in: Table<Employee>.PROCEDURE<FullName>
    Code lines:
    OnBeforeGetFullName(Rec,NewFullName,Handled); <=====================
    IF Handled THEN
      EXIT(NewFullName);
    
    IF "Middle Name" = '' THEN
      EXIT("First Name" + ' ' + "Last Name");
    
    EXIT("First Name" + ' ' + "Middle Name" + ' ' + "Last Name");
Table<Human Resource Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
  Raised in: Table<Human Resource Comment Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    ...
    HumanResCommentLine.SETRANGE("Line No.");
    HumanResCommentLine.SETRANGE(Date,WORKDATE);
    IF NOT HumanResCommentLine.FINDFIRST THEN
      Date := WORKDATE;
    
    OnAfterSetUpNewLine(Rec,HumanResCommentLine); <=====================
Table<HR Confidential Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
  Raised in: Table<HR Confidential Comment Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    ...
    HRConfCommentLine.SETRANGE("Line No.");
    HRConfCommentLine.SETRANGE(Date,WORKDATE);
    IF NOT HRConfCommentLine.FINDFIRST THEN
      Date := WORKDATE;
    
    OnAfterSetUpNewLine(Rec,HRConfCommentLine); <=====================
Table<Employee Ledger Entry>.PROCEDURE<OnAfterCopyEmplLedgerEntryFromCVLedgEntryBuffer>
  Raised in: Table<Employee Ledger Entry>.PROCEDURE<CopyFromCVLedgEntryBuffer>
    Code lines:
    ...
    "Debit Amount (LCY)" := CVLedgerEntryBuffer."Debit Amount (LCY)";
    "Credit Amount (LCY)" := CVLedgerEntryBuffer."Credit Amount (LCY)";
    "No. Series" := CVLedgerEntryBuffer."No. Series";
    "Amount to Apply" := CVLedgerEntryBuffer."Amount to Apply";
    
    OnAfterCopyEmplLedgerEntryFromCVLedgEntryBuffer(Rec,CVLedgerEntryBuffer); <=====================
Table<Employee Ledger Entry>.PROCEDURE<OnAfterCopyEmployeeLedgerEntryFromGenJnlLine>
  Raised in: Table<Employee Ledger Entry>.PROCEDURE<CopyFromGenJnlLine>
    Code lines:
    ...
    "User ID" := USERID;
    "Bal. Account Type" := GenJnlLine."Bal. Account Type";
    "Bal. Account No." := GenJnlLine."Bal. Account No.";
    "No. Series" := GenJnlLine."Posting No. Series";
    
    OnAfterCopyEmployeeLedgerEntryFromGenJnlLine(Rec,GenJnlLine); <=====================
Table<CRM Connection Setup>.PROCEDURE<OnGetDefaultCRMConnection>
  Raised in: Table<CRM Connection Setup>.PROCEDURE<GetDefaultCRMConnection>
    Code lines:
    OnGetDefaultCRMConnection(ConnectionName); <=====================
    EXIT(ConnectionName);
Table<CRM Connection Setup>.PROCEDURE<OnReadingCRMData>
  Raised in: Table<CRM Connection Setup>.PROCEDURE<DoReadCRMData>
    Code lines:
    OnReadingCRMData(SkipReading); <=====================
    EXIT(NOT SkipReading);
Table<Integration Synch. Job>.PROCEDURE<OnCanBeRemoved>
  Raised in: Table<Integration Synch. Job>.PROCEDURE<CanBeRemoved>
    Code lines:
    OnCanBeRemoved(Rec,AllowRemoval); <=====================
Table<Integration Synch. Job Errors>.PROCEDURE<OnForceSynchronizeDataIntegration>
  Raised in: Table<Integration Synch. Job Errors>.PROCEDURE<ForceSynchronizeDataIntegration>
    Code lines:
    OnForceSynchronizeDataIntegration(LocalRecordID,SynchronizeHandled); <=====================
Table<Integration Synch. Job Errors>.PROCEDURE<OnIsDataIntegrationEnabled>
  Raised in: Table<Integration Synch. Job Errors>.PROCEDURE<SetDataIntegrationUIElementsVisible>
    Code lines:
    OnIsDataIntegrationEnabled(DataIntegrationCuesVisible); <=====================
Table<Item Unit of Measure>.PROCEDURE<OnAfterCalcCubage>
  Raised in: Table<Item Unit of Measure>.PROCEDURE<CalcCubage>
    Code lines:
    Cubage := Length * Width * Height;
    
    OnAfterCalcCubage(Rec); <=====================
Table<Item Unit of Measure>.PROCEDURE<OnAfterCalcWeight>
  Raised in: Table<Item Unit of Measure>.PROCEDURE<CalcWeight>
    Code lines:
    IF Item."No." <> "Item No." THEN
      Item.GET("Item No.");
    
    Weight := "Qty. per Unit of Measure" * Item."Net Weight";
    
    OnAfterCalcWeight(Rec); <=====================
Table<Production Order>.PROCEDURE<OnAdjustStartEndingDateOnBeforeSetDueDate>
  Raised in: Table<Production Order>.PROCEDURE<AdjustStartEndingDate>
    Code lines:
    ...
    
    EarliestLatestProdOrderLine.SETCURRENTKEY("Due Date");
    EarliestLatestProdOrderLine.FINDLAST;
    
    IsHandled := FALSE;
    OnAdjustStartEndingDateOnBeforeSetDueDate(Rec,EarliestLatestProdOrderLine,IsHandled); <=====================
    IF NOT IsHandled THEN
      "Due Date" := EarliestLatestProdOrderLine."Due Date";
    
    UpdateDatetime;
Table<Production Order>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Production Order>.PROCEDURE<CreateDim>
    Code lines:
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,'',"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
Table<Production Order>.PROCEDURE<OnAfterOnDelete>
  Raised in: Table<Production Order>.<OnDelete>
    Code lines:
    ...
      DeleteFnshdProdOrderRelations
    ELSE
      DeleteRelations;
    
    RefreshRecord := FALSE;
    OnAfterOnDelete(Rec,RefreshRecord); <=====================
    IF RefreshRecord THEN
      GET(Status,"No.");
Table<Production Order>.PROCEDURE<OnAfterUpdateDateTime>
  Raised in: Table<Production Order>.PROCEDURE<UpdateDatetime>
    Code lines:
    ...
    IF ("Ending Date" <> 0D) AND ("Ending Time" <> 0T) THEN
      "Ending Date-Time" := CREATEDATETIME("Ending Date","Ending Time")
    ELSE
      "Ending Date-Time" := 0DT;
    
    OnAfterUpdateDateTime(Rec,xRec,CurrFieldNo); <=====================
Table<Production Order>.PROCEDURE<OnBeforeAssignFamily>
  Raised in: Table<Production Order>.Field<Source No.>.<OnValidate>
    Code lines:
    ...
        END;
      "Source Type"::Family:
        BEGIN
          Family.GET("Source No.");
          InitFromSourceNo(Family.Description,Family."Description 2",Family."Routing No.",'','','',0);
          OnBeforeAssignFamily(Rec,xRec,Family,CurrFieldNo); <=====================
        END;
      "Source Type"::"Sales Header":
        BEGIN
          IF Status = Status::Simulated THEN
    ...
Table<Production Order>.PROCEDURE<OnBeforeAssignItemNo>
  Raised in: Table<Production Order>.Field<Source No.>.<OnValidate>
    Code lines:
    ...
          Item.TESTFIELD(Blocked,FALSE);
          InitFromSourceNo(
            Item.Description,Item."Description 2",Item."Routing No.",
            Item."Inventory Posting Group",Item."Gen. Prod. Posting Group",'',Item."Unit Cost");
          CreateDim(DATABASE::Item,"Source No.");
          OnBeforeAssignItemNo(Rec,xRec,Item,CurrFieldNo); <=====================
        END;
      "Source Type"::Family:
        BEGIN
          Family.GET("Source No.");
    ...
Table<Production Order>.PROCEDURE<OnBeforeAssignSalesHeader>
  Raised in: Table<Production Order>.Field<Source No.>.<OnValidate>
    Code lines:
    ...
          "Due Date" := SalesHeader."Shipment Date";
          "Ending Date" := SalesHeader."Shipment Date";
          "Dimension Set ID" := SalesHeader."Dimension Set ID";
          "Shortcut Dimension 1 Code" := SalesHeader."Shortcut Dimension 1 Code";
          "Shortcut Dimension 2 Code" := SalesHeader."Shortcut Dimension 2 Code";
          OnBeforeAssignSalesHeader(Rec,xRec,SalesHeader,CurrFieldNo); <=====================
        END;
    END;
    VALIDATE(Description);
    InitRecord;
Table<Production Order>.PROCEDURE<OnBeforeDeleteFnshdProdOrderRelations>
  Raised in: Table<Production Order>.PROCEDURE<DeleteFnshdProdOrderRelations>
    Code lines:
    OnBeforeDeleteFnshdProdOrderRelations(Rec); <=====================
    
    FnshdProdOrderRtngLine.SETRANGE(Status,Status);
    FnshdProdOrderRtngLine.SETRANGE("Prod. Order No.","No.");
    FnshdProdOrderRtngLine.DELETEALL;
    
    FnshdProdOrderLine.SETRANGE(Status,Status);
    FnshdProdOrderLine.SETRANGE("Prod. Order No.","No.");
    FnshdProdOrderLine.DELETEALL;
    
    ...
Table<Production Order>.PROCEDURE<OnBeforeDeleteRelations>
  Raised in: Table<Production Order>.PROCEDURE<DeleteRelations>
    Code lines:
    OnBeforeDeleteRelations(Rec); <=====================
    
    ProdOrderComment.SETRANGE(Status,Status);
    ProdOrderComment.SETRANGE("Prod. Order No.","No.");
    ProdOrderComment.DELETEALL;
    
    ReservMgt.DeleteDocumentReservation(DATABASE::"Prod. Order Line",Status,"No.",HideValidationDialog);
    
    ProdOrderLine.LOCKTABLE;
    ProdOrderLine.SETRANGE(Status,Status);
    ...
Table<Production Order>.PROCEDURE<OnBeforeMultiLevelMessage>
  Raised in: Table<Production Order>.PROCEDURE<MultiLevelMessage>
    Code lines:
    IsHandled := FALSE;
    OnBeforeMultiLevelMessage(IsHandled,Rec,xRec,CurrFieldNo); <=====================
    IF IsHandled THEN
      EXIT;
    
    MESSAGE(MultiLevelMsg);
Table<Production Order>.PROCEDURE<OnBeforeUpdateProdOrderLineDueDate>
  Raised in: Table<Production Order>.Field<Starting Time>.<OnValidate>
    Code lines:
    ...
        ProdOrderLine."Starting Date" := "Starting Date";
        ProdOrderLine.MODIFY;
        CalcProdOrder.SetParameter(TRUE);
        CalcProdOrder.Recalculate(ProdOrderLine,0,TRUE);
        IsHandled := FALSE;
        OnBeforeUpdateProdOrderLineDueDate(ProdOrderLine,IsHandled); <=====================
        IF NOT IsHandled THEN
          IF ProdOrderLine."Planning Level Code" > 0 THEN
            ProdOrderLine."Due Date" := ProdOrderLine."Ending Date"
          ELSE
    ...
Table<Prod. Order Line>.PROCEDURE<OnAfterCheckEndingDate>
  Raised in: Table<Prod. Order Line>.PROCEDURE<CheckEndingDate>
    Code lines:
    IF NOT Blocked THEN BEGIN
      CheckDateConflict.ProdOrderLineCheck(Rec,ShowWarning);
      ReserveProdOrderLine.AssignForPlanning(Rec);
    END;
    
    OnAfterCheckEndingDate(Rec); <=====================
Table<Prod. Order Line>.PROCEDURE<OnAfterCopyFromItem>
  Raised in: Table<Prod. Order Line>.Field<Item No.>.<OnValidate>
    Code lines:
    ...
      IF "Item No." <> xRec."Item No." THEN BEGIN
        VALIDATE("Production BOM No.",Item."Production BOM No.");
        VALIDATE("Routing No.",Item."Routing No.");
        VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
      END;
      OnAfterCopyFromItem(Rec,Item,xRec); <=====================
      IF ProdOrder."Source Type" = ProdOrder."Source Type"::Family THEN
        "Routing Reference No." := 0
      ELSE
        IF "Line No." = 0 THEN
    ...
Table<Prod. Order Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Prod. Order Line>.PROCEDURE<CreateDim>
    Code lines:
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,'',
        "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",ProdOrder."Dimension Set ID",DATABASE::Item);
Table<Prod. Order Line>.PROCEDURE<OnAfterDeleteProdOrderRtngLines>
  Raised in: Table<Prod. Order Line>.Field<Routing No.>.<OnValidate>
    Code lines:
    ...
      ProdOrderRtngLine.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderRtngLine.SETRANGE("Routing No.",xRec."Routing No.");
      ProdOrderRtngLine.SETRANGE("Routing Reference No.","Line No.");
      ProdOrderRtngLine.DELETEALL(TRUE);
    
      OnAfterDeleteProdOrderRtngLines(Rec); <=====================
    END;
    IF "Routing No." = '' THEN
      EXIT;
    
    ...
Table<Prod. Order Line>.PROCEDURE<OnAfterOnDelete>
  Raised in: Table<Prod. Order Line>.<OnDelete>
    Code lines:
    ...
    WhseValidateSourceLine.ProdOrderLineDelete(Rec);
    
    DeleteRelations;
    
    RefreshRecord := FALSE;
    OnAfterOnDelete(Rec,RefreshRecord); <=====================
    IF RefreshRecord THEN
      GET(Status,"Prod. Order No.","Line No.");
Table<Prod. Order Line>.PROCEDURE<OnAfterRecalculate>
  Raised in: Table<Prod. Order Line>.Field<Starting Time>.<OnValidate>
    Code lines:
    IF ProdOrderLine.GET(Status,"Prod. Order No.","Line No.") THEN BEGIN
      MODIFY;
    
      CalcProdOrder.Recalculate(Rec,0,TRUE);
    
      OnAfterRecalculate(Rec,0,CurrFieldNo); <=====================
    
      GET(Status,"Prod. Order No.","Line No.");
    END;
    IF CurrFieldNo <> 0 THEN
    ...
  Raised in: Table<Prod. Order Line>.Field<Ending Time>.<OnValidate>
    Code lines:
    IF ProdOrderLine.GET(Status,"Prod. Order No.","Line No.") THEN BEGIN
      MODIFY;
    
      CalcProdOrder.Recalculate(Rec,1,TRUE);
    
      OnAfterRecalculate(Rec,1,CurrFieldNo); <=====================
    
      GET(Status,"Prod. Order No.","Line No.");
    END;
    IF CurrFieldNo <> 0 THEN
    ...
Table<Prod. Order Line>.PROCEDURE<OnAfterUpdateDateTime>
  Raised in: Table<Prod. Order Line>.PROCEDURE<UpdateDatetime>
    Code lines:
    ...
    IF ("Ending Date" <> 0D) AND ("Ending Time" <> 0T) THEN
      "Ending Date-Time" := CREATEDATETIME("Ending Date","Ending Time")
    ELSE
      "Ending Date-Time" := 0DT;
    
    OnAfterUpdateDateTime(Rec,xRec,CurrFieldNo); <=====================
Table<Prod. Order Line>.PROCEDURE<OnBeforeDeleteProdOrderRtngLines>
  Raised in: Table<Prod. Order Line>.Field<Routing No.>.<OnValidate>
    Code lines:
    ...
            Text99000004Err,
            FIELDCAPTION("Routing No."),xRec."Routing No.",PurchLine.TABLECAPTION);
      END;
    
      ModifyRecord := FALSE;
      OnBeforeDeleteProdOrderRtngLines(Rec,ModifyRecord); <=====================
      IF ModifyRecord THEN
        MODIFY;
    
      ProdOrderRtngLine.SETRANGE(Status,Status);
    ...
Table<Prod. Order Line>.PROCEDURE<OnBeforeDeleteRelations>
  Raised in: Table<Prod. Order Line>.PROCEDURE<DeleteRelations>
    Code lines:
    OnBeforeDeleteRelations(Rec); <=====================
    
    ProdOrderLine.SETRANGE(Status,Status);
    ProdOrderLine.SETRANGE("Prod. Order No.","Prod. Order No.");
    ProdOrderLine.SETRANGE("Routing No.","Routing No.");
    ProdOrderLine.SETFILTER("Line No.",'<>%1',"Line No.");
    ProdOrderLine.SETRANGE("Routing Reference No.","Routing Reference No.");
    IF NOT ProdOrderLine.FINDFIRST THEN BEGIN
      ProdOrderRtngLine.SETRANGE(Status,Status);
      ProdOrderRtngLine.SETRANGE("Prod. Order No.","Prod. Order No.");
    ...
Table<Prod. Order Line>.PROCEDURE<OnDeleteRelationsNotCalledFromComponentFilter>
  Raised in: Table<Prod. Order Line>.PROCEDURE<DeleteRelations>
    Code lines:
    ...
    ProdOrderComp.DELETEALL(TRUE);
    
    IF NOT CalledFromComponent THEN BEGIN
      ProdOrderComp.SETRANGE("Prod. Order Line No.");
      ProdOrderComp.SETRANGE("Supplied-by Line No.","Line No.");
      OnDeleteRelationsNotCalledFromComponentFilter(Rec,ProdOrderComp); <=====================
      IF ProdOrderComp.FIND('-') THEN
        REPEAT
          ProdOrderComp."Supplied-by Line No." := 0;
          ProdOrderComp."Planning Level Code" -= 1;
    ...
Table<Prod. Order Line>.PROCEDURE<OnDeleteRelationsNotCalledFromComponentInitFields>
  Raised in: Table<Prod. Order Line>.PROCEDURE<DeleteRelations>
    Code lines:
    ...
      OnDeleteRelationsNotCalledFromComponentFilter(Rec,ProdOrderComp);
      IF ProdOrderComp.FIND('-') THEN
        REPEAT
          ProdOrderComp."Supplied-by Line No." := 0;
          ProdOrderComp."Planning Level Code" -= 1;
          OnDeleteRelationsNotCalledFromComponentInitFields(ProdOrderComp); <=====================
          ProdOrderComp.MODIFY;
        UNTIL ProdOrderComp.NEXT = 0;
    END;
    
Table<Prod. Order Line>.PROCEDURE<OnUpdateProdOrderCompOnAfterFind>
  Raised in: Table<Prod. Order Line>.PROCEDURE<UpdateProdOrderComp>
    Code lines:
    ProdOrderComp.SETRANGE(Status,Status);
    ProdOrderComp.SETRANGE("Prod. Order No.","Prod. Order No.");
    ProdOrderComp.SETRANGE("Prod. Order Line No.","Line No.");
    IF ProdOrderComp.FINDSET THEN BEGIN
      ModifyRecord := FALSE;
      OnUpdateProdOrderCompOnAfterFind(Rec,ModifyRecord); <=====================
      IF ModifyRecord THEN
        MODIFY;
      REPEAT
        IF QtyPerUnitOfMeasure <> 0 THEN
    ...
Table<Prod. Order Line>.PROCEDURE<OnUpdateProdOrderCompOnBeforeModify>
  Raised in: Table<Prod. Order Line>.PROCEDURE<UpdateProdOrderComp>
    Code lines:
    ...
            "Quantity per",
            ProdOrderComp."Quantity per" * "Qty. per Unit of Measure" /
            QtyPerUnitOfMeasure)
        ELSE
          ProdOrderComp.VALIDATE("Quantity per","Qty. per Unit of Measure" );
        OnUpdateProdOrderCompOnBeforeModify(Rec,ProdOrderComp); <=====================
        ProdOrderComp.MODIFY;
      UNTIL ProdOrderComp.NEXT = 0;
    END;
Table<Prod. Order Component>.PROCEDURE<OnAfterAutoReserve>
  Raised in: Table<Prod. Order Component>.PROCEDURE<AutoReserve>
    Code lines:
    ...
          ShowReservation;
          FIND;
        END;
    END;
    
    OnAfterAutoReserve(Item,Rec); <=====================
Table<Prod. Order Component>.PROCEDURE<OnAfterCopyFromPlanningComp>
  Raised in: Table<Prod. Order Component>.PROCEDURE<CopyFromPlanningComp>
    Code lines:
    ...
    "Remaining Qty. (Base)" := ROUND("Remaining Quantity" * "Qty. per Unit of Measure",UOMMgt.QtyRndPrecision);
    "Shortcut Dimension 1 Code" := PlanningComponent."Shortcut Dimension 1 Code";
    "Shortcut Dimension 2 Code" := PlanningComponent."Shortcut Dimension 2 Code";
    "Dimension Set ID" := PlanningComponent."Dimension Set ID";
    
    OnAfterCopyFromPlanningComp(Rec,PlanningComponent); <=====================
Table<Prod. Order Component>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Prod. Order Component>.PROCEDURE<CreateDim>
    Code lines:
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    ProdOrderLine.GET(Status,"Prod. Order No.","Prod. Order Line No.");
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,'',
Table<Prod. Order Component>.PROCEDURE<OnAfterProdOrderNeeds>
  Raised in: Table<Prod. Order Component>.PROCEDURE<ProdOrderNeeds>
    Code lines:
    ...
        ProdOrderRtngLine."Fixed Scrap Qty. (Accum.)"
    ELSE
      NeededQty :=
        ProdOrderLine.Quantity * (1 + ProdOrderLine."Scrap %" / 100) * (1 + "Scrap %" / 100);
    
    OnAfterProdOrderNeeds(Rec,ProdOrderLine,ProdOrderRtngLine,NeededQty); <=====================
    
    EXIT(NeededQty);
Table<Prod. Order Component>.PROCEDURE<OnAfterRoundExpectedQuantity>
  Raised in: Table<Prod. Order Component>.Field<Expected Quantity>.<OnValidate>
    Code lines:
    IF Item.GET("Item No.") THEN
      IF Item."Rounding Precision" > 0 THEN BEGIN
        "Expected Quantity" := ROUND("Expected Quantity",Item."Rounding Precision",'>');
        OnAfterRoundExpectedQuantity(Rec); <=====================
      END;
    
    "Expected Qty. (Base)" := ROUND("Expected Quantity" * "Qty. per Unit of Measure",UOMMgt.QtyRndPrecision);
    IF (Status IN [Status::Released,Status::Finished]) AND
       (xRec."Item No." <> '') AND
       ("Line No." <> 0)
    ...
Table<Prod. Order Component>.PROCEDURE<OnAfterUpdateUnitCost>
  Raised in: Table<Prod. Order Component>.PROCEDURE<UpdateUnitCost>
    Code lines:
    ...
    "Direct Unit Cost" :=
      ROUND(
        ("Unit Cost" - "Overhead Rate") / (1 + "Indirect Cost %" / 100),
        GLSetup."Unit-Amount Rounding Precision");
    
    OnAfterUpdateUnitCost(Rec,GLSetup); <=====================
Table<Prod. Order Component>.PROCEDURE<OnBeforeAdjustQtyToQtyPicked>
  Raised in: Table<Prod. Order Component>.PROCEDURE<AdjustQtyToQtyPicked>
    Code lines:
    IsHandled := FALSE;
    OnBeforeAdjustQtyToQtyPicked(Rec,QtyToPost,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    AdjustedQty :=
      "Qty. Picked" + WhseValidateSourceLine.CalcNextLevelProdOutput(Rec) -
      ("Expected Quantity" - "Remaining Quantity");
    
    IF QtyToPost > AdjustedQty THEN
Table<Prod. Order Component>.PROCEDURE<OnBeforeAutoReserve>
  Raised in: Table<Prod. Order Component>.PROCEDURE<AutoReserve>
    Code lines:
    IF Status IN [Status::Simulated,Status::Finished] THEN
      EXIT;
    
    TESTFIELD("Item No.");
    Item.GET("Item No.");
    OnBeforeAutoReserve(Item,Rec); <=====================
    IF Item.Reserve <> Item.Reserve::Always THEN
      EXIT;
    
    IF "Remaining Qty. (Base)" <> 0 THEN BEGIN
    ...
Table<Prod. Order Component>.PROCEDURE<OnBeforeBinCodeOnLookup>
  Raised in: Table<Prod. Order Component>.Field<Bin Code>.<OnLookup>
    Code lines:
    IsHandled := FALSE;
    OnBeforeBinCodeOnLookup(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF Quantity > 0 THEN
      BinCode := WMSManagement.BinContentLookUp("Location Code","Item No.","Variant Code",'',"Bin Code")
    ELSE
      BinCode := WMSManagement.BinLookUp("Location Code","Item No.","Variant Code",'');
    
    ...
Table<Prod. Order Component>.PROCEDURE<OnDeleteOnBeforeGetProdOrderLine>
  Raised in: Table<Prod. Order Component>.<OnDelete>
    Code lines:
    ...
    CALCFIELDS("Reserved Qty. (Base)");
    TESTFIELD("Reserved Qty. (Base)",0);
    
    IF "Supplied-by Line No." > 0 THEN BEGIN
      IsHandled := FALSE;
      OnDeleteOnBeforeGetProdOrderLine(Rec,IsHandled); <=====================
      IF NOT IsHandled THEN
        IF ProdOrderLine.GET(Status,"Prod. Order No.","Supplied-by Line No.") THEN BEGIN
          NewQuantity := ProdOrderLine.Quantity - "Expected Quantity";
          IF (NewQuantity = 0) OR IsLineRequiredForSingleDemand(ProdOrderLine,"Prod. Order Line No.") THEN BEGIN
    ...
Table<Prod. Order Component>.PROCEDURE<OnGetNeededQtyAfterCalcActConsumptionQty>
  Raised in: Table<Prod. Order Component>.PROCEDURE<GetNeededQty>
    Code lines:
    ...
      OnGetNeededQtyAfterCalcCompQtyBase(Rec,CompQtyBase);
    
      IF IncludePreviousPosting THEN BEGIN
        IF Status IN [Status::Released,Status::Finished] THEN
          CALCFIELDS("Act. Consumption (Qty)");
        OnGetNeededQtyAfterCalcActConsumptionQty(Rec); <=====================
        EXIT(
          ROUND(
            (CompQtyBase - "Act. Consumption (Qty)") / "Qty. per Unit of Measure",
            Item."Rounding Precision",'>'));
    ...
Table<Prod. Order Component>.PROCEDURE<OnGetNeededQtyAfterCalcCompQtyBase>
  Raised in: Table<Prod. Order Component>.PROCEDURE<GetNeededQty>
    Code lines:
    ...
              OutputQtyBase := OutputQtyBase + CapLedgEntry."Output Quantity" + CapLedgEntry."Scrap Quantity";
          UNTIL CapLedgEntry.NEXT = 0;
      END;
    
      CompQtyBase := CostCalcMgt.CalcActNeededQtyBase(ProdOrderLine,Rec,OutputQtyBase);
      OnGetNeededQtyAfterCalcCompQtyBase(Rec,CompQtyBase); <=====================
    
      IF IncludePreviousPosting THEN BEGIN
        IF Status IN [Status::Released,Status::Finished] THEN
          CALCFIELDS("Act. Consumption (Qty)");
    ...
Table<Prod. Order Component>.PROCEDURE<OnGetNeededQtyOnAfterLastOperationFound>
  Raised in: Table<Prod. Order Component>.PROCEDURE<GetNeededQty>
    Code lines:
    ...
      IF NOT ProdOrderRtngLine.FINDFIRST OR ("Routing Link Code" = '') THEN BEGIN
        ProdOrderRtngLine.SETRANGE("Routing Link Code");
        ProdOrderRtngLine.SETFILTER("Next Operation No.",'%1','');
        IF NOT ProdOrderRtngLine.FINDFIRST THEN
          ProdOrderRtngLine."Operation No." := '';
        OnGetNeededQtyOnAfterLastOperationFound(Rec,ProdOrderRtngLine); <=====================
      END;
      IF Status IN [Status::Released,Status::Finished] THEN BEGIN
        CapLedgEntry.SETCURRENTKEY("Order Type","Order No.","Order Line No.");
        CapLedgEntry.SETRANGE("Order Type",CapLedgEntry."Order Type"::Production);
    ...
Table<Prod. Order Component>.PROCEDURE<OnGetNeededQtyOnBeforeAddOutputQtyBase>
  Raised in: Table<Prod. Order Component>.PROCEDURE<GetNeededQty>
    Code lines:
    ...
        CapLedgEntry.SETRANGE("Order Line No.","Prod. Order Line No.");
        CapLedgEntry.SETRANGE("Operation No.",ProdOrderRtngLine."Operation No.");
        IF CapLedgEntry.FIND('-') THEN
          REPEAT
            IsHandled := FALSE;
            OnGetNeededQtyOnBeforeAddOutputQtyBase(CapLedgEntry,OutputQtyBase,IsHandled); <=====================
            IF NOT IsHandled THEN
              OutputQtyBase := OutputQtyBase + CapLedgEntry."Output Quantity" + CapLedgEntry."Scrap Quantity";
          UNTIL CapLedgEntry.NEXT = 0;
      END;
    ...
Table<Prod. Order Component>.PROCEDURE<OnValidateCalculationFormulaOnAfterSetQuantity>
  Raised in: Table<Prod. Order Component>.Field<Calculation Formula>.<OnValidate>
    Code lines:
    ...
      "Calculation Formula"::"Length * Width * Depth":
        Quantity := ROUND(Length * Width * Depth * "Quantity per",UOMMgt.QtyRndPrecision);
      "Calculation Formula"::Weight:
        Quantity := ROUND(Weight * "Quantity per",UOMMgt.QtyRndPrecision);
    END;
    OnValidateCalculationFormulaOnAfterSetQuantity(Rec); <=====================
    "Quantity (Base)" := Quantity * "Qty. per Unit of Measure";
    VALIDATE("Expected Quantity",Quantity * ProdOrderNeeds);
Table<Prod. Order Component>.PROCEDURE<OnValidateExpectedQtyBaseOnAfterCalcActConsumptionQty>
  Raised in: Table<Prod. Order Component>.Field<Expected Qty. (Base)>.<OnValidate>
    Code lines:
    IF Status <> Status::Simulated THEN BEGIN
      IF Status IN [Status::Released,Status::Finished] THEN
        CALCFIELDS("Act. Consumption (Qty)");
      OnValidateExpectedQtyBaseOnAfterCalcActConsumptionQty(Rec,xRec); <=====================
      "Remaining Quantity" := "Expected Quantity" - "Act. Consumption (Qty)";
      "Remaining Qty. (Base)" := ROUND("Remaining Quantity" * "Qty. per Unit of Measure",UOMMgt.QtyRndPrecision);
    END;
    "Cost Amount" := ROUND("Expected Quantity" * "Unit Cost");
    "Overhead Amount" :=
      ROUND(
    ...
Table<Prod. Order Component>.PROCEDURE<OnValidateExpectedQuantityOnAfterCalcActConsumptionQty>
  Raised in: Table<Prod. Order Component>.Field<Expected Quantity>.<OnValidate>
    Code lines:
    ...
       (xRec."Item No." <> '') AND
       ("Line No." <> 0)
    THEN
      CALCFIELDS("Act. Consumption (Qty)");
    
    OnValidateExpectedQuantityOnAfterCalcActConsumptionQty(Rec,xRec); <=====================
    "Remaining Quantity" := "Expected Quantity" - "Act. Consumption (Qty)" / "Qty. per Unit of Measure";
    IF ("Remaining Quantity" * "Expected Quantity") <= 0 THEN
      "Remaining Quantity" := 0;
    "Remaining Qty. (Base)" := ROUND("Remaining Quantity" * "Qty. per Unit of Measure",UOMMgt.QtyRndPrecision);
    ...
Table<Prod. Order Component>.PROCEDURE<OnValidateItemNoOnBeforeGetDefaultBin>
  Raised in: Table<Prod. Order Component>.Field<Item No.>.<OnValidate>
    Code lines:
    ...
    END;
    
    Item.GET("Item No.");
    IF "Item No." <> xRec."Item No." THEN BEGIN
      "Variant Code" := '';
      OnValidateItemNoOnBeforeGetDefaultBin(Rec,Item); <=====================
      GetDefaultBin;
      ClearCalcFormula;
      IF "Quantity per" <> 0 THEN
        VALIDATE("Quantity per");
    ...
Table<Prod. Order Component>.PROCEDURE<OnValidateRoutingLinkCodeBeforeValidateDueDate>
  Raised in: Table<Prod. Order Component>.Field<Routing Link Code>.<OnValidate>
    Code lines:
    ...
        "Due Date" -
        (CALCDATE("Lead-Time Offset",WORKDATE) - WORKDATE);
      "Due Time" := 0T;
    END;
    
    OnValidateRoutingLinkCodeBeforeValidateDueDate(Rec,ProdOrderLine); <=====================
    VALIDATE("Due Date");
    
    IF "Routing Link Code" <> xRec."Routing Link Code" THEN
      UpdateBin(Rec,FIELDNO("Routing Link Code"),FIELDCAPTION("Routing Link Code"));
Table<Prod. Order Routing Line>.PROCEDURE<OnAfterCalcStartingEndingDates>
  Raised in: Table<Prod. Order Routing Line>.PROCEDURE<CalcStartingEndingDates>
    Code lines:
    ...
    IF Direction1 = Direction1::Forward THEN
      ShiftTimeForwardOnParentProdOrderLines(ProdOrderLine);
    
    ReservationCheckDateConfl.ProdOrderLineCheck(ProdOrderLine,TRUE);
    
    OnAfterCalcStartingEndingDates(Rec,xRec,ProdOrderLine,CurrFieldNo); <=====================
Table<Prod. Order Routing Line>.PROCEDURE<OnAfterFillDefaultLocationAndBins>
  Raised in: Table<Prod. Order Routing Line>.PROCEDURE<FillDefaultLocationAndBins>
    Code lines:
    ...
              "From-Production Bin Code" := WorkCenter."From-Production Bin Code";
          END;
        END;
    END;
    
    OnAfterFillDefaultLocationAndBins(Rec); <=====================
Table<Prod. Order Routing Line>.PROCEDURE<OnAfterMachineCtrTransferFields>
  Raised in: Table<Prod. Order Routing Line>.PROCEDURE<MachineCtrTransferFields>
    Code lines:
    ...
    "Unit Cost per" := MachineCenter."Unit Cost";
    "Direct Unit Cost" := MachineCenter."Direct Unit Cost";
    "Indirect Cost %" := MachineCenter."Indirect Cost %";
    "Overhead Rate" := MachineCenter."Overhead Rate";
    FillDefaultLocationAndBins;
    OnAfterMachineCtrTransferFields(Rec,WorkCenter,MachineCenter); <=====================
Table<Prod. Order Routing Line>.PROCEDURE<OnAfterSetRecalcStatus>
  Raised in: Table<Prod. Order Routing Line>.PROCEDURE<SetRecalcStatus>
    Code lines:
    Recalculate := TRUE;
    
    OnAfterSetRecalcStatus(Rec,ProdOrderLine); <=====================
Table<Prod. Order Routing Line>.PROCEDURE<OnAfterTransferFromStdTaskComment>
  Raised in: Table<Prod. Order Routing Line>.Field<Standard Task Code>.<OnValidate>
    Code lines:
    ...
        ProdOrderRtngComment."Routing No." := "Routing No.";
        ProdOrderRtngComment."Operation No." := "Operation No.";
        ProdOrderRtngComment."Line No." := StdTaskComment."Line No.";
        ProdOrderRtngComment.Comment := StdTaskComment.Text;
        ProdOrderRtngComment.INSERT;
        OnAfterTransferFromStdTaskComment(ProdOrderRtngComment,StdTaskComment); <=====================
      UNTIL StdTaskComment.NEXT = 0;
Table<Prod. Order Routing Line>.PROCEDURE<OnAfterTransferFromStdTaskPersonnel>
  Raised in: Table<Prod. Order Routing Line>.Field<Standard Task Code>.<OnValidate>
    Code lines:
    ...
        ProdOrderRtngPersonnel."Operation No." := "Operation No.";
        ProdOrderRtngPersonnel."Line No." := StdTaskPersonnel."Line No.";
        ProdOrderRtngPersonnel."No." := StdTaskPersonnel."No.";
        ProdOrderRtngPersonnel.Description := StdTaskPersonnel.Description;
        ProdOrderRtngPersonnel.INSERT;
        OnAfterTransferFromStdTaskPersonnel(ProdOrderRtngPersonnel,StdTaskPersonnel); <=====================
      UNTIL StdTaskPersonnel.NEXT = 0;
    
    StdTaskQltyMeasure.SETRANGE("Standard Task Code","Standard Task Code");
    IF StdTaskQltyMeasure.FIND('-') THEN
    ...
Table<Prod. Order Routing Line>.PROCEDURE<OnAfterTransferFromStdTaskQltyMeasure>
  Raised in: Table<Prod. Order Routing Line>.Field<Standard Task Code>.<OnValidate>
    Code lines:
    ...
        ProdOrderRtngQltyMeas.Description := StdTaskQltyMeasure.Description;
        ProdOrderRtngQltyMeas."Min. Value" := StdTaskQltyMeasure."Min. Value";
        ProdOrderRtngQltyMeas."Max. Value" := StdTaskQltyMeasure."Max. Value";
        ProdOrderRtngQltyMeas."Mean Tolerance" := StdTaskQltyMeasure."Mean Tolerance";
        ProdOrderRtngQltyMeas.INSERT;
        OnAfterTransferFromStdTaskQltyMeasure(ProdOrderRtngQltyMeas,StdTaskQltyMeasure); <=====================
      UNTIL StdTaskQltyMeasure.NEXT = 0;
    
    StdTaskComment.SETRANGE("Standard Task Code","Standard Task Code");
    IF StdTaskComment.FIND('-') THEN
    ...
Table<Prod. Order Routing Line>.PROCEDURE<OnAfterTransferFromStdTaskTool>
  Raised in: Table<Prod. Order Routing Line>.Field<Standard Task Code>.<OnValidate>
    Code lines:
    ...
        ProdOrderRoutTool."Operation No." := "Operation No.";
        ProdOrderRoutTool."Line No." := StdTaskTool."Line No.";
        ProdOrderRoutTool."No." := StdTaskTool."No.";
        ProdOrderRoutTool.Description := StdTaskTool.Description;
        ProdOrderRoutTool.INSERT;
        OnAfterTransferFromStdTaskTool(ProdOrderRoutTool,StdTaskTool); <=====================
      UNTIL StdTaskTool.NEXT = 0;
    
    StdTaskPersonnel.SETRANGE("Standard Task Code","Standard Task Code");
    IF StdTaskPersonnel.FIND('-') THEN
    ...
Table<Prod. Order Routing Line>.PROCEDURE<OnAfterUpdateDateTime>
  Raised in: Table<Prod. Order Routing Line>.PROCEDURE<UpdateDatetime>
    Code lines:
    ...
    IF ("Ending Date" <> 0D) AND ("Ending Time" <> 0T) THEN
      "Ending Date-Time" := CREATEDATETIME("Ending Date","Ending Time")
    ELSE
      "Ending Date-Time" := 0DT;
    
    OnAfterUpdateDateTime(Rec,xRec,CurrFieldNo); <=====================
Table<Prod. Order Routing Line>.PROCEDURE<OnAfterValidateNo>
  Raised in: Table<Prod. Order Routing Line>.Field<No.>.<OnValidate>
    Code lines:
    ...
    
    GetLine;
    IF (ProdOrderLine."Routing Type" = ProdOrderLine."Routing Type"::Serial) OR (xRec."No." <> '') THEN
      CalcStartingEndingDates(Direction::Forward);
    
    OnAfterValidateNo(Rec,xRec,ProdOrderLine); <=====================
Table<Prod. Order Routing Line>.PROCEDURE<OnAfterWorkCenterTransferFields>
  Raised in: Table<Prod. Order Routing Line>.PROCEDURE<WorkCenterTransferFields>
    Code lines:
    ...
    "Direct Unit Cost" := WorkCenter."Direct Unit Cost";
    "Indirect Cost %" := WorkCenter."Indirect Cost %";
    "Overhead Rate" := WorkCenter."Overhead Rate";
    "Unit Cost Calculation" := WorkCenter."Unit Cost Calculation";
    FillDefaultLocationAndBins;
    OnAfterWorkCenterTransferFields(Rec,WorkCenter); <=====================
Table<Prod. Order Routing Line>.PROCEDURE<OnBeforeCalcStartingEndingDates>
  Raised in: Table<Prod. Order Routing Line>.PROCEDURE<CalcStartingEndingDates>
    Code lines:
    OnBeforeCalcStartingEndingDates(Rec,Direction1); <=====================
    
    IF "Routing Status" = "Routing Status"::Finished THEN
      FIELDERROR("Routing Status");
    
    MODIFY(TRUE);
    
    ProdOrderRtngLine.GET(Status,"Prod. Order No.","Routing Reference No.","Routing No.","Operation No.");
    
    ProdOrderRouteMgt.CalcSequenceFromActual(ProdOrderRtngLine,Direction1);
    ...
Table<Prod. Order Routing Line>.PROCEDURE<OnBeforeDeleteRelations>
  Raised in: Table<Prod. Order Routing Line>.PROCEDURE<DeleteRelations>
    Code lines:
    OnBeforeDeleteRelations(Rec); <=====================
    
    ProdOrderRoutTool.SETRANGE(Status,Status);
    ProdOrderRoutTool.SETRANGE("Prod. Order No.","Prod. Order No.");
    ProdOrderRoutTool.SETRANGE("Routing Reference No.","Routing Reference No.");
    ProdOrderRoutTool.SETRANGE("Routing No.","Routing No.");
    ProdOrderRoutTool.SETRANGE("Operation No.","Operation No.");
    ProdOrderRoutTool.DELETEALL;
    
    ProdOrderRtngPersonnel.SETRANGE(Status,Status);
    ...
Table<Prod. Order Routing Line>.PROCEDURE<OnBeforeFillDefaultLocationAndBins>
  Raised in: Table<Prod. Order Routing Line>.PROCEDURE<FillDefaultLocationAndBins>
    Code lines:
    OnBeforeFillDefaultLocationAndBins(Rec); <=====================
    
    GetLine;
    "Location Code" := ProdOrderLine."Location Code";
    CASE Type OF
      Type::"Work Center":
        BEGIN
          IF WorkCenter."No." <> "No." THEN
            WorkCenter.GET("No.");
          IF WorkCenter."Location Code" = "Location Code" THEN BEGIN
    ...
Table<Prod. Order Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
  Raised in: Table<Prod. Order Comment Line>.PROCEDURE<SetupNewLine>
    Code lines:
    ...
    ProdOrderCommentLine.SETRANGE("Prod. Order No.","Prod. Order No.");
    ProdOrderCommentLine.SETRANGE(Date,WORKDATE);
    IF NOT ProdOrderCommentLine.FINDFIRST THEN
      Date := WORKDATE;
    
    OnAfterSetUpNewLine(Rec,ProdOrderCommentLine); <=====================
Table<Prod. Order Comment Line>.PROCEDURE<OnBeforeCheckFinishedOrder>
  Raised in: Table<Prod. Order Comment Line>.PROCEDURE<CheckFinishedOrder>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckFinishedOrder(Rec,IsHandled); <=====================
    IF NOT IsHandled THEN
      IF Status = Status::Finished THEN
        ERROR(Text000,Status,TABLECAPTION);
Table<Prod. Order Rtng Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
  Raised in: Table<Prod. Order Rtng Comment Line>.PROCEDURE<SetupNewLine>
    Code lines:
    ...
    ProdOrderRtngComment.SETRANGE("Operation No.","Operation No.");
    ProdOrderRtngComment.SETRANGE(Date,WORKDATE);
    IF NOT ProdOrderRtngComment.FINDFIRST THEN
      Date := WORKDATE;
    
    OnAfterSetUpNewLine(Rec,ProdOrderRtngComment); <=====================
Table<Picture Entity>.PROCEDURE<OnDeletePictureElseCase>
  Raised in: Table<Picture Entity>.PROCEDURE<DeletePicture>
    Code lines:
    ...
          CLEAR(Employee.Image);
          Employee.MODIFY(TRUE);
        END;
      ELSE BEGIN
        IsHandled := FALSE;
        OnDeletePictureElseCase(IntegrationRecord,IsHandled); <=====================
        IF NOT IsHandled THEN
          ThrowEntityNotSupportedError(IntegrationRecord);
      END;
    END;
    ...
Table<Picture Entity>.PROCEDURE<OnGetDefaultMediaDescriptionElseCase>
  Raised in: Table<Picture Entity>.PROCEDURE<GetDefaultMediaDescription>
    Code lines:
    ...
          MediaDescription :=
            STRSUBSTNO('%1 %2 %3.%4',Employee."No.",Employee."First Name",Employee."Last Name",GetDefaultExtension);
        END;
      ELSE BEGIN
        IsHandled := FALSE;
        OnGetDefaultMediaDescriptionElseCase(ParentRecordRef,MediaDescription,IsHandled); <=====================
        IF IsHandled THEN
          EXIT(MediaDescription);
      END;
    END;
    ...
Table<Picture Entity>.PROCEDURE<OnGetMediaIDElseCase>
  Raised in: Table<Picture Entity>.PROCEDURE<GetMediaID>
    Code lines:
    ...
          Employee.GET(IntegrationRecord."Record ID");
          MediaID := Employee.Image.MEDIAID;
        END;
      ELSE BEGIN
        IsHandled := FALSE;
        OnGetMediaIDElseCase(IntegrationRecord,MediaID,IsHandled); <=====================
        IF NOT IsHandled THEN
          ThrowEntityNotSupportedError(IntegrationRecord);
      END;
    END;
    ...
Table<Picture Entity>.PROCEDURE<OnSavePictureElseCase>
  Raised in: Table<Picture Entity>.PROCEDURE<SavePicture>
    Code lines:
    ...
          Employee.Image.IMPORTSTREAM(
            ImageInStream,GetDefaultMediaDescription(Employee));
          Employee.MODIFY(TRUE);
        END;
      ELSE BEGIN
        OnSavePictureElseCase(IntegrationRecord,IsHandled); <=====================
        IF NOT IsHandled THEN
          ThrowEntityNotSupportedError(IntegrationRecord);
      END;
    END;
    ...
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromAsmOrder>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromAsmOrder>
    Code lines:
    ...
    AssemblyHeader.CALCFIELDS("Reserved Qty. (Base)");
    "Remaining Quantity (Base)" := AssemblyHeader."Remaining Quantity (Base)";
    "Reserved Quantity (Base)" := AssemblyHeader."Reserved Qty. (Base)";
    Positive := NOT ("Remaining Quantity (Base)" < 0);
    
    OnAfterTransferFromAsmOrder(Rec,AssemblyHeader); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromAsmOrderLine>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromAsmOrderLine>
    Code lines:
    ...
    AssemblyLine.CALCFIELDS("Reserved Qty. (Base)");
    "Remaining Quantity (Base)" := -AssemblyLine."Remaining Quantity (Base)";
    "Reserved Quantity (Base)" := -AssemblyLine."Reserved Qty. (Base)";
    Positive := NOT ("Remaining Quantity (Base)" < 0);
    
    OnAfterTransferFromAsmOrderLine(Rec,AssemblyLine); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromForecast>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromForecast>
    Code lines:
    ...
    "Remaining Quantity (Base)" := -UnconsumedQtyBase;
    "Reserved Quantity (Base)" := 0;
    "Orig. Quantity (Base)" := -ProdForecastEntry."Forecast Quantity (Base)";
    Positive := NOT ("Remaining Quantity (Base)" < 0);
    
    OnAfterTransferFromForecast(Rec,ProdForecastEntry); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromInboundTransOrder>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromInboundTransOrder>
    Code lines:
    ...
    "Remaining Quantity (Base)" := TransLine."Quantity (Base)" - TransLine."Qty. Received (Base)";
    "Reserved Quantity (Base)" := TransLine."Reserved Qty. Inbnd. (Base)" + TransLine."Reserved Qty. Shipped (Base)";
    Positive := NOT ("Remaining Quantity (Base)" < 0);
    "Transfer Direction" := "Transfer Direction"::Inbound;
    
    OnAfterTransferFromInboundTransOrder(Rec,TransLine); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromJobNeed>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromJobNeed>
    Code lines:
    ...
    JobPlanningLine.CALCFIELDS("Reserved Qty. (Base)");
    "Remaining Quantity (Base)" := -JobPlanningLine."Remaining Qty. (Base)";
    "Reserved Quantity (Base)" := -JobPlanningLine."Reserved Qty. (Base)";
    Positive := NOT ("Remaining Quantity (Base)" < 0);
    
    OnAfterTransferFromJobNeed(Rec,JobPlanningLine); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromOutboundTransfer>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromOutboundTransOrder>
    Code lines:
    ...
    "Remaining Quantity (Base)" := -TransLine."Outstanding Qty. (Base)";
    "Reserved Quantity (Base)" := -TransLine."Reserved Qty. Outbnd. (Base)";
    Positive := NOT ("Remaining Quantity (Base)" < 0);
    "Transfer Direction" := "Transfer Direction"::Outbound;
    
    OnAfterTransferFromOutboundTransfer(Rec,TransLine); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromPlanProdComp>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromPlanProdComp>
    Code lines:
    ...
    Positive := NOT ("Remaining Quantity (Base)" < 0);
    "Action Message" := ReqLine."Action Message";
    "Ref. Order No." := ReqLine."Ref. Order No.";
    "Ref. Order Type" := GetRefOrderTypeFromReqLine(ReqLine."Ref. Order Type");
    
    OnAfterTransferFromPlanProdComp(Rec,PlngComp,ReqLine); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromProdComp>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromProdComp>
    Code lines:
    ...
    ProdOrderComp.CALCFIELDS("Reserved Qty. (Base)");
    "Remaining Quantity (Base)" := -ProdOrderComp."Remaining Qty. (Base)";
    "Reserved Quantity (Base)" := -ProdOrderComp."Reserved Qty. (Base)";
    Positive := NOT ("Remaining Quantity (Base)" < 0);
    
    OnAfterTransferFromProdComp(Rec,ProdOrderComp); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromProdOrder>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromProdOrder>
    Code lines:
    ...
    ProdOrderLine.CALCFIELDS("Reserved Qty. (Base)");
    "Remaining Quantity (Base)" := ProdOrderLine."Remaining Qty. (Base)";
    "Reserved Quantity (Base)" := ProdOrderLine."Reserved Qty. (Base)";
    Positive := NOT ("Remaining Quantity (Base)" < 0);
    
    OnAfterTransferFromProdOrder(Rec,ProdOrderLine); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromPurchase>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromPurchase>
    Code lines:
    ...
    PurchLine.CALCFIELDS("Reserved Qty. (Base)");
    "Remaining Quantity (Base)" := -PurchLineReserve.ReservQuantity(PurchLine);
    "Reserved Quantity (Base)" := PurchLine."Reserved Qty. (Base)";
    Positive := NOT ("Remaining Quantity (Base)" < 0);
    
    OnAfterTransferFromPurchase(Rec,PurchLine); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromPurchReturn>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromPurchReturn>
    Code lines:
    ...
    PurchLine.CALCFIELDS("Reserved Qty. (Base)");
    "Remaining Quantity (Base)" := -PurchLineReserve.ReservQuantity(PurchLine);
    "Reserved Quantity (Base)" := PurchLine."Reserved Qty. (Base)";
    Positive := NOT ("Remaining Quantity (Base)" < 0);
    
    OnAfterTransferFromPurchReturn(Rec,PurchLine); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromReqLine>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromReqLine>
    Code lines:
    ...
    Positive := NOT ("Remaining Quantity (Base)" < 0);
    "Action Message" := ReqLine."Action Message";
    "Ref. Order No." := ReqLine."Ref. Order No.";
    "Ref. Order Type" := GetRefOrderTypeFromReqLine(ReqLine."Ref. Order Type");
    
    OnAfterTransferFromReqLine(Rec,ReqLine); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromReqLineTransDemand>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromReqLineTransDemand>
    Code lines:
    ...
    "Ref. Order No." := ReqLine."Ref. Order No.";
    "Ref. Order Type" := GetRefOrderTypeFromReqLine(ReqLine."Ref. Order Type");
    // Notice: Planned outbound transfer uses an opposite direction of transfer
    "Transfer Direction" := 1;
    
    OnAfterTransferFromReqLineTransDemand(Rec,ReqLine); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromSales>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromSales>
    Code lines:
    ...
    IF "Derived from Blanket Order" THEN BEGIN
      "Ref. Order No." := SalesLine."Blanket Order No.";
      "Ref. Order Line No." := SalesLine."Blanket Order Line No.";
    END;
    
    OnAfterTransferFromSales(Rec,SalesLine); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromSalesBlanketOrder>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromSalesBlanketOrder>
    Code lines:
    ...
    "Remaining Quantity (Base)" := -UnconsumedQtyBase;
    "Reserved Quantity (Base)" := 0;
    "Orig. Quantity (Base)" := -SalesLine."Quantity (Base)";
    Positive := NOT ("Remaining Quantity (Base)" < 0);
    
    OnAfterTransferFromSalesBlanketOrder(Rec,SalesLine); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromSalesReturn>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromSalesReturn>
    Code lines:
    ...
    IF "Derived from Blanket Order" THEN BEGIN
      "Ref. Order No." := SalesLine."Blanket Order No.";
      "Ref. Order Line No." := SalesLine."Blanket Order Line No.";
    END;
    
    OnAfterTransferFromSalesReturn(Rec,SalesLine); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferFromServiceNeed>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferFromServiceNeed>
    Code lines:
    ...
    ServLine.CALCFIELDS("Reserved Qty. (Base)");
    "Remaining Quantity (Base)" := -"Remaining Quantity (Base)";
    "Reserved Quantity (Base)" := -ServLine."Reserved Qty. (Base)";
    Positive := NOT ("Remaining Quantity (Base)" < 0);
    
    OnAfterTransferFromServiceNeed(Rec,ServLine); <=====================
Table<Inventory Event Buffer>.PROCEDURE<OnAfterTransferInventoryQty>
  Raised in: Table<Inventory Event Buffer>.PROCEDURE<TransferInventoryQty>
    Code lines:
    ...
    
    "Reserved Quantity (Base)" := CalcReservedQuantity(ItemLedgEntry);
    
    Positive := NOT ("Remaining Quantity (Base)" < 0);
    
    OnAfterTransferInventoryQty(Rec,ItemLedgEntry); <=====================
Table<Inventory Page Data>.PROCEDURE<OnUpdateInventorysOnAfterCalculatingInventorys>
  Raised in: Table<Inventory Page Data>.PROCEDURE<UpdateInventorys>
    Code lines:
    ...
      ("Gross Requirement" - "Reserved Requirement") + ("Scheduled Receipt" - "Reserved Receipt");
    "Suggested Projected Inventory" :=
      RunningInventorySuggestion + "Action Message Qty." + "Remaining Forecast" +
      ("Gross Requirement" - "Reserved Requirement") + ("Scheduled Receipt" - "Reserved Receipt");
    
    OnUpdateInventorysOnAfterCalculatingInventorys(Rec); <=====================
    
    IF Level = 1 THEN BEGIN
      RunningInventory := "Projected Inventory";
      RunningInventoryForecast := "Forecasted Projected Inventory";
    ...
Table<FA Ledger Entry>.PROCEDURE<OnAfterConvertPostingType>
  Raised in: Table<FA Ledger Entry>.PROCEDURE<ConvertPostingType>
    Code lines:
    ...
      "FA Posting Type"::"Proceeds on Disposal":
        FAJnlLine."FA Posting Type" := FAJnlLine."FA Posting Type"::Disposal;
      "FA Posting Type"::"Salvage Value":
        FAJnlLine."FA Posting Type" := FAJnlLine."FA Posting Type"::"Salvage Value";
    END;
    OnAfterConvertPostingType(Rec,FAJnlLine); <=====================
    EXIT(FAJnlLine."FA Posting Type");
Table<FA Ledger Entry>.PROCEDURE<OnAfterMoveToFAJnlLine>
  Raised in: Table<FA Ledger Entry>.PROCEDURE<MoveToFAJnl>
    Code lines:
    ...
    FAJnlLine."FA Reclassification Entry" := "Reclassification Entry";
    FAJnlLine."Index Entry" := "Index Entry";
    FAJnlLine."Line No." := NextLineNo;
    FAJnlLine."Dimension Set ID" := "Dimension Set ID";
    
    OnAfterMoveToFAJnlLine(FAJnlLine,Rec); <=====================
Table<FA Ledger Entry>.PROCEDURE<OnAfterMoveToGenJnlLine>
  Raised in: Table<FA Ledger Entry>.PROCEDURE<MoveToGenJnl>
    Code lines:
    ...
    GenJnlLine."FA Reclassification Entry" := "Reclassification Entry";
    GenJnlLine."Index Entry" := "Index Entry";
    GenJnlLine."Line No." := NextLineNo;
    GenJnlLine."Dimension Set ID" := "Dimension Set ID";
    
    OnAfterMoveToGenJnlLine(GenJnlLine,Rec); <=====================
Table<FA Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<FA Journal Line>.PROCEDURE<CreateDim>
    Code lines:
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,"Source Code","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
Table<FA Journal Line>.PROCEDURE<OnConvertToLedgEntryCase>
  Raised in: Table<FA Journal Line>.PROCEDURE<ConvertToLedgEntry>
    Code lines:
    ...
        FAJnlLine."FA Posting Type"::Disposal:
          "FA Posting Type" := "FA Posting Type"::"Proceeds on Disposal";
        FAJnlLine."FA Posting Type"::"Salvage Value":
          "FA Posting Type" := "FA Posting Type"::"Salvage Value";
        ELSE
          OnConvertToLedgEntryCase(FALedgEntry,FAJnlLine); <=====================
      END;
      EXIT("FA Posting Type");
    END;
Table<FA Reclass. Journal Line>.PROCEDURE<OnAfterSetUpNewLine>
  Raised in: Table<FA Reclass. Journal Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    "FA Posting Date" := LastFAReclassJnlLine."FA Posting Date";
    
    OnAfterSetUpNewLine(Rec,LastFAReclassJnlLine); <=====================
Table<Insurance Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Insurance Journal Line>.PROCEDURE<CreateDim>
    Code lines:
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,"Source Code","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
Table<G/L Account Category>.PROCEDURE<OnBeforeGetTotaling>
  Raised in: Table<G/L Account Category>.PROCEDURE<GetTotaling>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetTotaling(Rec,TotalingStr,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(TotalingStr);
    
    GLAccount.SETRANGE("Account Subcategory Entry No.","Entry No.");
    EXIT(COPYSTR(SelectionFilterManagement.GetSelectionFilterForGLAccount(GLAccount),1,250));
Table<G/L Account Category>.PROCEDURE<OnGetBalanceOnAfterGetTotaling>
  Raised in: Table<G/L Account Category>.PROCEDURE<GetBalance>
    Code lines:
    ...
    TotalingStr := GetTotaling;
    IF TotalingStr = '' THEN
      EXIT(Balance);
    
    IsHandled := FALSE;
    OnGetBalanceOnAfterGetTotaling(Rec,TotalingStr,Balance,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(Balance);
    
    GLEntry.SETFILTER("G/L Account No.",TotalingStr);
    ...
Table<Stockkeeping Unit>.PROCEDURE<OnAfterCopyFromItem>
  Raised in: Table<Stockkeeping Unit>.PROCEDURE<CopyFromItem>
    Code lines:
    ...
    "Assembly Policy" := Item."Assembly Policy";
    "Last Direct Cost" := Item."Last Direct Cost";
    "Standard Cost" := Item."Standard Cost";
    "Unit Cost" := Item."Unit Cost";
    
    OnAfterCopyFromItem(Rec,Item) <=====================
Table<Stockkeeping Unit>.PROCEDURE<OnBeforeValidateStandardCost>
  Raised in: Table<Stockkeeping Unit>.Field<Standard Cost>.<OnValidate>
    Code lines:
    IsHandled := FALSE;
    OnBeforeValidateStandardCost(Rec,xRec,CurrFieldNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    Item.GET("Item No.");
    IF (Item."Costing Method" = Item."Costing Method"::Standard) AND (CurrFieldNo <> 0) THEN
      IF NOT
         CONFIRM(
           Text001 +
    ...
Table<Stockkeeping Unit Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
  Raised in: Table<Stockkeeping Unit Comment Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    ...
    StockkeepingUnitCommentLine.SETRANGE("Location Code","Location Code");
    StockkeepingUnitCommentLine.SETRANGE(Date,WORKDATE);
    IF NOT StockkeepingUnitCommentLine.FINDFIRST THEN
      Date := WORKDATE;
    
    OnAfterSetUpNewLine(Rec,StockkeepingUnitCommentLine); <=====================
Table<Item Cross Reference>.PROCEDURE<OnAfterCreateItemVendor>
  Raised in: Table<Item Cross Reference>.PROCEDURE<CreateItemVendor>
    Code lines:
    ...
        ItemVend."Vendor No." := "Cross-Reference Type No.";
        ItemVend.VALIDATE("Vendor No.");
        ItemVend."Variant Code" := "Variant Code";
        ItemVend."Vendor Item No." := "Cross-Reference No.";
        ItemVend.INSERT;
        OnAfterCreateItemVendor(Rec,ItemVend); <=====================
      END;
    END;
Table<Item Cross Reference>.PROCEDURE<OnBeforeItemVendorDelete>
  Raised in: Table<Item Cross Reference>.PROCEDURE<DeleteItemVendor>
    Code lines:
    IF NOT MultipleCrossReferencesExist(ItemCrossReference) THEN
      IF ItemVend.GET(ItemCrossReference."Cross-Reference Type No.",ItemCrossReference."Item No.",ItemCrossReference."Variant Code") THEN
        IF UPPERCASE(DELCHR(ItemVend."Vendor Item No.",'<',' ')) = ItemCrossReference."Cross-Reference No." THEN BEGIN
          OnBeforeItemVendorDelete(ItemVend,ItemCrossReference); <=====================
          ItemVend.DELETE;
        END;
Table<Transfer Header>.PROCEDURE<OnAfterCheckBeforePost>
  Raised in: Table<Transfer Header>.PROCEDURE<CheckBeforePost>
    Code lines:
    ...
      VerifyNoInboundWhseHandlingOnLocation("Transfer-to Code");
    END;
    TESTFIELD(Status,Status::Released);
    TESTFIELD("Posting Date");
    
    OnAfterCheckBeforePost(Rec); <=====================
Table<Transfer Header>.PROCEDURE<OnAfterGetNoSeriesCode>
  Raised in: Table<Transfer Header>.PROCEDURE<GetNoSeriesCode>
    Code lines:
    ...
    OnBeforeGetNoSeriesCode(Rec,InvtSetup,NoSeriesCode,IsHandled);
    IF IsHandled THEN
      EXIT;
    
    NoSeriesCode := InvtSetup."Transfer Order Nos.";
    OnAfterGetNoSeriesCode(Rec,NoSeriesCode); <=====================
    EXIT(NoSeriesCode);
Table<Transfer Header>.PROCEDURE<OnAfterInitRecord>
  Raised in: Table<Transfer Header>.PROCEDURE<InitRecord>
    Code lines:
    IF "Posting Date" = 0D THEN
      VALIDATE("Posting Date",WORKDATE);
    
    OnAfterInitRecord(Rec); <=====================
Table<Transfer Header>.PROCEDURE<OnBeforeGetNoSeriesCode>
  Raised in: Table<Transfer Header>.PROCEDURE<GetNoSeriesCode>
    Code lines:
    InvtSetup.GET;
    IsHandled := FALSE;
    OnBeforeGetNoSeriesCode(Rec,InvtSetup,NoSeriesCode,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    NoSeriesCode := InvtSetup."Transfer Order Nos.";
    OnAfterGetNoSeriesCode(Rec,NoSeriesCode);
    EXIT(NoSeriesCode);
Table<Transfer Header>.PROCEDURE<OnBeforeTransLineDeleteAll>
  Raised in: Table<Transfer Header>.PROCEDURE<DeleteOneTransferOrder>
    Code lines:
    ...
      "Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
    ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type",ItemChargeAssgntPurch."Applies-to Doc. Type"::"Transfer Receipt");
    ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.",TransLine2."Document No.");
    ItemChargeAssgntPurch.DELETEALL;
    
    OnBeforeTransLineDeleteAll(TransHeader2,TransLine2); <=====================
    
    IF TransLine2.FIND('-') THEN
      TransLine2.DELETEALL;
    
    ...
Table<Transfer Header>.PROCEDURE<OnUpdateTransLines>
  Raised in: Table<Transfer Header>.PROCEDURE<UpdateTransLines>
    Code lines:
    ...
            BEGIN
              TransferLine.VALIDATE("In-Transit Code",TransferHeader."In-Transit Code");
              TransferLine.VALIDATE("Item No.",TransferLine."Item No.");
            END;
          ELSE
            OnUpdateTransLines(TransferLine,TransferHeader,FieldID); <=====================
        END;
        TransferLine.MODIFY(TRUE);
      UNTIL TransferLine.NEXT = 0;
    END;
Table<Transfer Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Transfer Line>.PROCEDURE<CreateDim>
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,SourceCodeSetup.Transfer,
Table<Transfer Line>.PROCEDURE<OnAfterGetTransHeader>
  Raised in: Table<Transfer Line>.PROCEDURE<GetTransHeader>
    Code lines:
    ...
    "Outbound Whse. Handling Time" := TransHeader."Outbound Whse. Handling Time";
    "Inbound Whse. Handling Time" := TransHeader."Inbound Whse. Handling Time";
    Status := TransHeader.Status;
    "Direct Transfer" := TransHeader."Direct Transfer";
    
    OnAfterGetTransHeader(Rec,TransHeader); <=====================
Table<Transfer Line>.PROCEDURE<OnAfterResetPostedQty>
  Raised in: Table<Transfer Line>.PROCEDURE<ResetPostedQty>
    Code lines:
    ...
    "Quantity Received" := 0;
    "Qty. Received (Base)" := 0;
    "Qty. in Transit" := 0;
    "Qty. in Transit (Base)" := 0;
    
    OnAfterResetPostedQty(Rec); <=====================
Table<Transfer Line>.PROCEDURE<OnValidateQuantityOnBeforeTransLineVerifyChange>
  Raised in: Table<Transfer Line>.Field<Quantity>.<OnValidate>
    Code lines:
    ...
    ReserveTransferLine.VerifyQuantity(Rec,xRec);
    
    UpdateWithWarehouseShipReceive;
    
    IsHandled := FALSE;
    OnValidateQuantityOnBeforeTransLineVerifyChange(Rec,xRec,IsHandled); <=====================
    IF NOT IsHandled THEN
      WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);
Table<Transfer Shipment Header>.PROCEDURE<OnAfterCopyFromTransferHeader>
  Raised in: Table<Transfer Shipment Header>.PROCEDURE<CopyFromTransferHeader>
    Code lines:
    ...
    "Entry/Exit Point" := TransHeader."Entry/Exit Point";
    Area := TransHeader.Area;
    "Transaction Specification" := TransHeader."Transaction Specification";
    "Direct Transfer" := TransHeader."Direct Transfer";
    
    OnAfterCopyFromTransferHeader(Rec,TransHeader); <=====================
Table<Transfer Shipment Line>.PROCEDURE<OnAfterCopyFromTransferLine>
  Raised in: Table<Transfer Shipment Line>.PROCEDURE<CopyFromTransferLine>
    Code lines:
    ...
    "Transfer-to Code" := TransLine."Transfer-to Code";
    "Transfer-from Bin Code" := TransLine."Transfer-from Bin Code";
    "Shipping Time" := TransLine."Shipping Time";
    "Item Category Code" := TransLine."Item Category Code";
    
    OnAfterCopyFromTransferLine(Rec,TransLine); <=====================
Table<Transfer Receipt Header>.PROCEDURE<OnAfterCopyFromTransferHeader>
  Raised in: Table<Transfer Receipt Header>.PROCEDURE<CopyFromTransferHeader>
    Code lines:
    ...
    "Entry/Exit Point" := TransHeader."Entry/Exit Point";
    Area := TransHeader.Area;
    "Transaction Specification" := TransHeader."Transaction Specification";
    "Direct Transfer" := TransHeader."Direct Transfer";
    
    OnAfterCopyFromTransferHeader(Rec,TransHeader); <=====================
Table<Transfer Receipt Line>.PROCEDURE<OnAfterCopyFromTransferLine>
  Raised in: Table<Transfer Receipt Line>.PROCEDURE<CopyFromTransferLine>
    Code lines:
    ...
    "Transfer-to Code" := TransLine."Transfer-to Code";
    "Transfer-To Bin Code" := TransLine."Transfer-To Bin Code";
    "Shipping Time" := TransLine."Shipping Time";
    "Item Category Code" := TransLine."Item Category Code";
    
    OnAfterCopyFromTransferLine(Rec,TransLine); <=====================
Table<Inventory Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
  Raised in: Table<Inventory Comment Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    ...
    InvtCommentLine.SETRANGE("No.","No.");
    InvtCommentLine.SETRANGE(Date,WORKDATE);
    IF NOT InvtCommentLine.FINDFIRST THEN
      Date := WORKDATE;
    
    OnAfterSetUpNewLine(Rec,InvtCommentLine); <=====================
Table<Warehouse Request>.PROCEDURE<OnAfterDeleteRequest>
  Raised in: Table<Warehouse Request>.PROCEDURE<DeleteRequest>
    Code lines:
    SetSourceFilter(SourceType,SourceSubtype,SourceNo);
    IF NOT ISEMPTY THEN
      DELETEALL;
    
    OnAfterDeleteRequest(SourceType,SourceSubtype,SourceNo); <=====================
Table<Warehouse Activity Header>.PROCEDURE<OnAfterGetNoSeriesCode>
  Raised in: Table<Warehouse Activity Header>.PROCEDURE<GetNoSeriesCode>
    Code lines:
    ...
          InvtSetup.GET;
          NoSeriesCode := InvtSetup."Inventory Movement Nos.";
        END;
    END;
    
    OnAfterGetNoSeriesCode(Rec,NoSeriesCode); <=====================
    EXIT(NoSeriesCode);
Table<Warehouse Activity Header>.PROCEDURE<OnBeforeErrorIfUserIsNotWhseEmployee>
  Raised in: Table<Warehouse Activity Header>.PROCEDURE<ErrorIfUserIsNotWhseEmployee>
    Code lines:
    IsHandled := FALSE;
    OnBeforeErrorIfUserIsNotWhseEmployee("Location Code",IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF USERID <> '' THEN BEGIN
      WhseEmployee.SETRANGE("User ID",USERID);
      IF WhseEmployee.ISEMPTY THEN
        ERROR(Text001,USERID);
    END;
Table<Warehouse Activity Header>.PROCEDURE<OnBeforeGetUserLocation>
  Raised in: Table<Warehouse Activity Header>.PROCEDURE<GetUserLocation>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetUserLocation(LocationCode,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(LocationCode);
    
    WarehouseEmployee.SETCURRENTKEY(Default);
    WarehouseEmployee.SETRANGE("User ID",USERID);
    WarehouseEmployee.SETRANGE(Default,TRUE);
    IF WarehouseEmployee.FINDFIRST THEN
      EXIT(WarehouseEmployee."Location Code");
    ...
Table<Warehouse Activity Header>.PROCEDURE<OnBeforeSortWhseDoc>
  Raised in: Table<Warehouse Activity Header>.PROCEDURE<SortWhseDoc>
    Code lines:
    IsHandled := FALSE;
    OnBeforeSortWhseDoc(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WhseActivLine2.LOCKTABLE;
    WhseActivLine2.SETRANGE("Activity Type",Type);
    WhseActivLine2.SETRANGE("No.","No.");
    CASE "Sorting Method" OF
      "Sorting Method"::Item:
    ...
Table<Warehouse Activity Header>.PROCEDURE<OnCaseSortWhseDoc>
  Raised in: Table<Warehouse Activity Header>.PROCEDURE<SortWhseDoc>
    Code lines:
    ...
      "Sorting Method"::"Bin Ranking":
        SortWhseDocByBinRanking(WhseActivLine2,SequenceNo);
      "Sorting Method"::"Action Type":
        SortWhseDocByActionType(WhseActivLine2,SequenceNo);
      ELSE
        OnCaseSortWhseDoc(Rec,WhseActivLine2,SequenceNo); <=====================
    END;
    
    IF SequenceNo = 0 THEN BEGIN
      WhseActivLine2.SETRANGE("Breakbulk No.",0);
    ...
Table<Warehouse Activity Line>.PROCEDURE<OnAfterAutofillQtyToHandleLine>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<AutofillQtyToHandle>
    Code lines:
    ...
        REPEAT
          VALIDATE("Qty. to Handle","Qty. Outstanding");
          IF "Qty. to Handle (Base)" <> "Qty. Outstanding (Base)" THEN
            VALIDATE("Qty. to Handle (Base)","Qty. Outstanding (Base)");
          MODIFY;
          OnAfterAutofillQtyToHandleLine(WhseActivLine); <=====================
    
          IF NOT NotEnough THEN
            IF "Qty. to Handle" < "Qty. Outstanding" THEN
              NotEnough := TRUE;
    ...
Table<Warehouse Activity Line>.PROCEDURE<OnAfterClearTracking>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<ClearTracking>
    Code lines:
    "Serial No." := '';
    "Lot No." := '';
    
    OnAfterClearTracking(Rec); <=====================
Table<Warehouse Activity Line>.PROCEDURE<OnAfterClearTrackingFilter>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<ClearTrackingFilter>
    Code lines:
    SETRANGE("Serial No.");
    SETRANGE("Lot No.");
    
    OnAfterClearTrackingFilter(Rec); <=====================
Table<Warehouse Activity Line>.PROCEDURE<OnAfterCopyTrackingFromSpec>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<CopyTrackingFromSpec>
    Code lines:
    "Serial No." := TrackingSpecification."Serial No.";
    "Lot No." := TrackingSpecification."Lot No.";
    "Expiration Date" := TrackingSpecification."Expiration Date";
    
    OnAfterCopyTrackingFromSpec(Rec,TrackingSpecification); <=====================
Table<Warehouse Activity Line>.PROCEDURE<OnAfterDeleteQtyToHandle>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<DeleteQtyToHandle>
    Code lines:
    ...
          VALIDATE("Qty. to Handle",0);
          MODIFY;
          OnAfterUpdateQtyToHandleWhseActivLine(WhseActivLine);
        UNTIL NEXT = 0;
    END;
    OnAfterDeleteQtyToHandle(WhseActivLine); <=====================
Table<Warehouse Activity Line>.PROCEDURE<OnAfterInitTrackingSpecFromWhseActivLine>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<InitTrackingSpecFromWhseActivLine>
    Code lines:
    ...
      TrackingSpecification."Expiration Date" := "Expiration Date";
      TrackingSpecification."Bin Code" := "Bin Code";
      TrackingSpecification."Qty. to Handle (Base)" := "Qty. to Handle (Base)";
    END;
    
    OnAfterInitTrackingSpecFromWhseActivLine(TrackingSpecification,WhseActivityLine); <=====================
Table<Warehouse Activity Line>.PROCEDURE<OnAfterLookupTrackingSummary>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<LookUpTrackingSummary>
    Code lines:
    ...
            MODIFY;
          END;
      END;
    END;
    
    OnAfterLookupTrackingSummary(WhseActivLine,TempTrackingSpecification); <=====================
Table<Warehouse Activity Line>.PROCEDURE<OnAfterSetTrackingFilter>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<SetTrackingFilter>
    Code lines:
    SETRANGE("Serial No.",SerialNo);
    SETRANGE("Lot No.",LotNo);
    
    OnAfterSetTrackingFilter(Rec); <=====================
Table<Warehouse Activity Line>.PROCEDURE<OnAfterSplitLines>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<SplitLine>
    Code lines:
    ...
        WhseActivLine."Item No.",WhseActivLine."Unit of Measure Code",
        WhseActivLine."Qty. to Handle",WhseActivLine.Cubage,WhseActivLine.Weight);
    OnBeforeModifyOldWhseActivLine(WhseActivLine);
    WhseActivLine.MODIFY;
    
    OnAfterSplitLines(WhseActivLine,NewWhseActivLine); <=====================
Table<Warehouse Activity Line>.PROCEDURE<OnAfterTransferFromAssemblyLine>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<TransferFromAssemblyLine>
    Code lines:
    TransferAllButWhseDocDetailsFromAssemblyLine(AssemblyLine);
    "Whse. Document Type" := "Whse. Document Type"::Assembly;
    "Whse. Document No." := AssemblyLine."Document No.";
    "Whse. Document Line No." := AssemblyLine."Line No.";
    
    OnAfterTransferFromAssemblyLine(Rec,AssemblyLine); <=====================
Table<Warehouse Activity Line>.PROCEDURE<OnAfterTransferFromCompLine>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<TransferFromCompLine>
    Code lines:
    ...
    "Due Date" := ProdOrderCompLine."Due Date";
    "Whse. Document Type" := "Whse. Document Type"::Production;
    "Whse. Document No." := ProdOrderCompLine."Prod. Order No.";
    "Whse. Document Line No." := ProdOrderCompLine."Prod. Order Line No.";
    
    OnAfterTransferFromCompLine(Rec,ProdOrderCompLine); <=====================
Table<Warehouse Activity Line>.PROCEDURE<OnAfterTransferFromIntPickLine>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<TransferFromIntPickLine>
    Code lines:
    ...
    "Source Line No." := WhseInternalPickLine."Line No.";
    "Whse. Document Type" := "Whse. Document Type"::"Internal Pick";
    "Whse. Document No." := WhseInternalPickLine."No.";
    "Whse. Document Line No." := WhseInternalPickLine."Line No.";
    
    OnAfterTransferFromIntPickLine(Rec,WhseInternalPickLine); <=====================
Table<Warehouse Activity Line>.PROCEDURE<OnAfterTransferFromMovWkshLine>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<TransferFromMovWkshLine>
    Code lines:
    ...
    "Bin Type Code" := Bin."Bin Type Code";
    "Whse. Document Type" := "Whse. Document Type"::"Movement Worksheet";
    "Whse. Document No." := WhseWkshLine.Name;
    "Whse. Document Line No." := WhseWkshLine."Line No.";
    
    OnAfterTransferFromMovWkshLine(Rec,WhseWkshLine); <=====================
Table<Warehouse Activity Line>.PROCEDURE<OnAfterTransferFromPickWkshLine>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<TransferFromPickWkshLine>
    Code lines:
    ...
          "Assemble to Order" := AssembleToOrderLink.GET("Source Subtype","Source No.");
          "ATO Component" := TRUE;
        END;
    END;
    
    OnAfterTransferFromPickWkshLine(Rec,WhseWkshLine); <=====================
Table<Warehouse Activity Line>.PROCEDURE<OnAfterTransferFromShptLine>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<TransferFromShptLine>
    Code lines:
    ...
    "Shipping Advice" := WhseShptLine."Shipping Advice";
    "Whse. Document Type" := "Whse. Document Type"::Shipment;
    "Whse. Document No." := WhseShptLine."No.";
    "Whse. Document Line No." := WhseShptLine."Line No.";
    
    OnAfterTransferFromShptLine(Rec,WhseShptLine); <=====================
Table<Warehouse Activity Line>.PROCEDURE<OnAfterUpdateQtyToHandleWhseActivLine>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<DeleteQtyToHandle>
    Code lines:
    ...
    WITH WhseActivLine DO BEGIN
      IF FIND('-') THEN
        REPEAT
          VALIDATE("Qty. to Handle",0);
          MODIFY;
          OnAfterUpdateQtyToHandleWhseActivLine(WhseActivLine); <=====================
        UNTIL NEXT = 0;
    END;
    OnAfterDeleteQtyToHandle(WhseActivLine);
Table<Warehouse Activity Line>.PROCEDURE<OnBeforeAutofillQtyToHandle>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<AutofillQtyToHandle>
    Code lines:
    OnBeforeAutofillQtyToHandle(WhseActivLine); <=====================
    WITH WhseActivLine DO BEGIN
      NotEnough := FALSE;
      IF FIND('-') THEN
        REPEAT
          VALIDATE("Qty. to Handle","Qty. Outstanding");
          IF "Qty. to Handle (Base)" <> "Qty. Outstanding (Base)" THEN
            VALIDATE("Qty. to Handle (Base)","Qty. Outstanding (Base)");
          MODIFY;
          OnAfterAutofillQtyToHandleLine(WhseActivLine);
    ...
Table<Warehouse Activity Line>.PROCEDURE<OnBeforeCheckWhseDocLine>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<CheckWhseDocLine>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckWhseDocLine(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF "Bin Code" <> '' THEN BEGIN
      IF "Breakbulk No." <> 0 THEN
        EXIT;
      IF ("Activity Type" = "Activity Type"::Pick) AND
         ("Action Type" = "Action Type"::Place)
    ...
Table<Warehouse Activity Line>.PROCEDURE<OnBeforeDeleteQtyToHandle>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<DeleteQtyToHandle>
    Code lines:
    OnBeforeDeleteQtyToHandle(WhseActivLine); <=====================
    WITH WhseActivLine DO BEGIN
      IF FIND('-') THEN
        REPEAT
          VALIDATE("Qty. to Handle",0);
          MODIFY;
          OnAfterUpdateQtyToHandleWhseActivLine(WhseActivLine);
        UNTIL NEXT = 0;
    END;
    OnAfterDeleteQtyToHandle(WhseActivLine);
Table<Warehouse Activity Line>.PROCEDURE<OnBeforeDeleteRelatedWhseActivLines>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<DeleteRelatedWhseActivLines>
    Code lines:
    OnBeforeDeleteRelatedWhseActivLines(WhseActivLine,CalledFromHeader); <=====================
    
    WITH WhseActivLine DO BEGIN
      IF ("Activity Type" IN ["Activity Type"::"Invt. Put-away","Activity Type"::"Invt. Pick"]) AND
         (NOT CalledFromHeader)
      THEN
        EXIT;
    
      WhseActivLine2.SETCURRENTKEY(
        "Activity Type","No.","Whse. Document Type","Whse. Document No.","Whse. Document Line No.");
    ...
Table<Warehouse Activity Line>.PROCEDURE<OnBeforeDeleteWhseActivLine2>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<DeleteRelatedWhseActivLines>
    Code lines:
    ...
          WhseActivLine2.SETFILTER("Line No.",'<>%1',"Line No.")
        ELSE
          WhseActivLine2.SETRANGE("Line No.","Line No.");
      IF WhseActivLine2.FIND('-') THEN
        REPEAT
          OnBeforeDeleteWhseActivLine2(WhseActivLine2,CalledFromHeader); <=====================
          WhseActivLine2.DELETE; // to ensure correct item tracking update
          WhseActivLine2.DeleteBinContent(WhseActivLine2."Action Type"::Place);
          UpdateRelatedItemTrkg(WhseActivLine2);
        UNTIL WhseActivLine2.NEXT = 0;
    ...
Table<Warehouse Activity Line>.PROCEDURE<OnBeforeInsertNewWhseActivLine>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<SplitLine>
    Code lines:
    ...
      THEN BEGIN
        NewWhseActivLine."Zone Code" := '';
        NewWhseActivLine."Bin Code" := '';
      END;
    END;
    OnBeforeInsertNewWhseActivLine(NewWhseActivLine,WhseActivLine); <=====================
    NewWhseActivLine.INSERT;
    
    WhseActivLine.Quantity := WhseActivLine."Qty. to Handle" + WhseActivLine."Qty. Handled";
    WhseActivLine."Qty. (Base)" :=
    ...
Table<Warehouse Activity Line>.PROCEDURE<OnBeforeModifyOldWhseActivLine>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<SplitLine>
    Code lines:
    ...
    WhseActivLine."Qty. Outstanding (Base)" := WhseActivLine."Qty. to Handle (Base)";
    IF Location."Directed Put-away and Pick" THEN
      WMSMgt.CalcCubageAndWeight(
        WhseActivLine."Item No.",WhseActivLine."Unit of Measure Code",
        WhseActivLine."Qty. to Handle",WhseActivLine.Cubage,WhseActivLine.Weight);
    OnBeforeModifyOldWhseActivLine(WhseActivLine); <=====================
    WhseActivLine.MODIFY;
    
    OnAfterSplitLines(WhseActivLine,NewWhseActivLine);
Table<Warehouse Activity Line>.PROCEDURE<OnBeforeSplitLines>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<SplitLine>
    Code lines:
    OnBeforeSplitLines(WhseActivLine); <=====================
    
    WhseActivLine.TESTFIELD("Qty. to Handle");
    IF WhseActivLine."Activity Type" = WhseActivLine."Activity Type"::"Put-away" THEN BEGIN
      IF WhseActivLine."Breakbulk No." <> 0 THEN
        ERROR(Text007);
      WhseActivLine.TESTFIELD("Action Type",WhseActivLine."Action Type"::Place);
    END;
    IF WhseActivLine."Qty. to Handle" = WhseActivLine."Qty. Outstanding" THEN
      WhseActivLine.FIELDERROR(
    ...
Table<Warehouse Activity Line>.PROCEDURE<OnBeforeValidateQtyToHandle>
  Raised in: Table<Warehouse Activity Line>.Field<Qty. to Handle>.<OnValidate>
    Code lines:
    IsHandled := FALSE;
    OnBeforeValidateQtyToHandle(Rec,IsHandled); <=====================
    IF NOT IsHandled THEN
      IF "Qty. to Handle" > "Qty. Outstanding" THEN
        ERROR(Text002,"Qty. Outstanding");
    
    GetLocation("Location Code");
    IF Location."Directed Put-away and Pick" THEN
      WMSMgt.CalcCubageAndWeight(
        "Item No.","Unit of Measure Code","Qty. to Handle",Cubage,Weight);
    ...
Table<Warehouse Activity Line>.PROCEDURE<OnCreateNewUOMLineOnBeforeNewWhseActivLineInsert>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<CreateNewUOMLine>
    Code lines:
    ...
      WMSMgt.CalcCubageAndWeight(
        NewWhseActivLine."Item No.",NewWhseActivLine."Unit of Measure Code",
        NewWhseActivLine."Qty. to Handle",NewWhseActivLine.Cubage,NewWhseActivLine.Weight);
    NewWhseActivLine."Action Type" := ActType;
    NewWhseActivLine.VALIDATE("Qty. Handled",0);
    OnCreateNewUOMLineOnBeforeNewWhseActivLineInsert(NewWhseActivLine,WhseActivLine); <=====================
    NewWhseActivLine.INSERT;
    
    WhseActivLine."Qty. Outstanding" :=
      WhseActivLine."Qty. Outstanding" - WhseActivLine."Qty. to Handle";
    ...
Table<Warehouse Activity Line>.PROCEDURE<OnLookUpTrackingSummaryOnAfterAssistEditTrackingNo>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<LookUpTrackingSummary>
    Code lines:
    ...
      OnLookUpTrackingSummaryOnAfterCheckDataSet(WhseActivLine,Item,TempTrackingSpecification);
      ItemTrackingDataCollection.SetCurrentBinAndItemTrkgCode("Bin Code",ItemTrackingCode);
      ItemTrackingDataCollection.AssistEditTrackingNo(
        TempTrackingSpecification,SearchForSupply,SignFactor,TrackingType,"Qty. Outstanding");
    
      OnLookUpTrackingSummaryOnAfterAssistEditTrackingNo(WhseActivLine,TempTrackingSpecification,TrackingType); <=====================
    
      CASE TrackingType OF
        TrackingType::SerialNo:
          IF TempTrackingSpecification."Serial No." <> '' THEN BEGIN
    ...
Table<Warehouse Activity Line>.PROCEDURE<OnLookUpTrackingSummaryOnAfterCheckDataSet>
  Raised in: Table<Warehouse Activity Line>.PROCEDURE<LookUpTrackingSummary>
    Code lines:
    ...
      TempTrackingSpecification."Quantity Invoiced (Base)" := 0;
    
      GetItem;
      IF NOT ItemTrackingDataCollection.CurrentDataSetMatches("Item No.","Variant Code","Location Code") THEN
        CLEAR(ItemTrackingDataCollection);
      OnLookUpTrackingSummaryOnAfterCheckDataSet(WhseActivLine,Item,TempTrackingSpecification); <=====================
      ItemTrackingDataCollection.SetCurrentBinAndItemTrkgCode("Bin Code",ItemTrackingCode);
      ItemTrackingDataCollection.AssistEditTrackingNo(
        TempTrackingSpecification,SearchForSupply,SignFactor,TrackingType,"Qty. Outstanding");
    
    ...
Table<Warehouse Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
  Raised in: Table<Warehouse Comment Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    ...
    WhseCommentLine.SETRANGE("No.","No.");
    WhseCommentLine.SETRANGE(Date,WORKDATE);
    IF WhseCommentLine.ISEMPTY THEN
      Date := WORKDATE;
    
    OnAfterSetUpNewLine(Rec,WhseCommentLine); <=====================
Table<Warehouse Source Filter>.PROCEDURE<OnBeforeSetTableView>
  Raised in: Table<Warehouse Source Filter>.PROCEDURE<SetFilters>
    Code lines:
    ...
    ServiceLine.SETFILTER("Shipping Agent Service Code","Shipping Agent Service Filter");
    
    TransLine.SETFILTER("Shipping Agent Code","Shipping Agent Code Filter");
    TransLine.SETFILTER("Shipping Agent Service Code","Shipping Agent Service Filter");
    
    OnBeforeSetTableView(WhseRequest,SalesHeader,SalesLine,PurchLine,TransLine,ServiceHeader,ServiceLine,Rec,PurchHeader); <=====================
    
    GetSourceBatch.SETTABLEVIEW(WhseRequest);
    GetSourceBatch.SETTABLEVIEW(SalesHeader);
    GetSourceBatch.SETTABLEVIEW(SalesLine);
    ...
Table<Inventory Posting Setup>.PROCEDURE<OnAfterSuggestSetupAccount>
  Raised in: Table<Inventory Posting Setup>.PROCEDURE<SuggestSetupAccounts>
    Code lines:
    ...
      SuggestAccount(RecRef,FIELDNO("Mfg. Overhead Variance Account"));
    IF "Cap. Overhead Variance Account" = '' THEN
      SuggestAccount(RecRef,FIELDNO("Cap. Overhead Variance Account"));
    IF "Subcontracted Variance Account" = '' THEN
      SuggestAccount(RecRef,FIELDNO("Subcontracted Variance Account"));
    OnAfterSuggestSetupAccount(Rec,RecRef); <=====================
    RecRef.MODIFY;
Table<BOM Buffer>.PROCEDURE<OnTransferFromAsmHeaderCopyFields>
  Raised in: Table<BOM Buffer>.PROCEDURE<TransferFromAsmHeader>
    Code lines:
    ...
    "Location Code" := AsmHeader."Location Code";
    "Variant Code" := AsmHeader."Variant Code";
    "Needed by Date" := AsmHeader."Due Date";
    Indentation := 0;
    
    OnTransferFromAsmHeaderCopyFields(Rec,AsmHeader); <=====================
    INSERT(TRUE);
Table<BOM Buffer>.PROCEDURE<OnTransferFromAsmLineCopyFields>
  Raised in: Table<BOM Buffer>.PROCEDURE<TransferFromAsmLine>
    Code lines:
    ...
    "Variant Code" := AsmLine."Variant Code";
    "Needed by Date" := AsmLine."Due Date";
    "Lead-Time Offset" := AsmLine."Lead-Time Offset";
    Indentation := 1;
    
    OnTransferFromAsmLineCopyFields(Rec,AsmLine); <=====================
    INSERT(TRUE);
Table<BOM Buffer>.PROCEDURE<OnTransferFromBOMCompCopyFields>
  Raised in: Table<BOM Buffer>.PROCEDURE<TransferFromBOMComp>
    Code lines:
    ...
    "Location Code" := ParentLocationCode;
    "Lead-Time Offset" := BOMComp."Lead-Time Offset";
    "Needed by Date" := NeedByDate;
    Indentation := NewIndentation;
    
    OnTransferFromBOMCompCopyFields(Rec,BOMComp); <=====================
    INSERT(TRUE);
Table<BOM Buffer>.PROCEDURE<OnTransferFromItemCopyFields>
  Raised in: Table<BOM Buffer>.PROCEDURE<TransferFromItem>
    Code lines:
    ...
    "Qty. per Parent" := 1;
    "Qty. per Top Item" := 1;
    "Needed by Date" := DemandDate;
    Indentation := 0;
    
    OnTransferFromItemCopyFields(Rec,Item); <=====================
    INSERT(TRUE);
Table<BOM Buffer>.PROCEDURE<OnTransferFromProdCompCopyFields>
  Raised in: Table<BOM Buffer>.PROCEDURE<TransferFromProdComp>
    Code lines:
    ...
    "Location Code" := ParentLocationCode;
    "Lead-Time Offset" := ProdBOMLine."Lead-Time Offset";
    "Needed by Date" := NeedByDate;
    Indentation := NewIndentation;
    
    OnTransferFromProdCompCopyFields(Rec,ProdBOMLine,ParentItem,ParentQtyPer); <=====================
    INSERT(TRUE);
Table<BOM Buffer>.PROCEDURE<OnTransferFromProdOrderCompCopyFields>
  Raised in: Table<BOM Buffer>.PROCEDURE<TransferFromProdOrderComp>
    Code lines:
    ...
    "Location Code" := ProdOrderComp."Location Code";
    "Needed by Date" := ProdOrderComp."Due Date";
    "Lead-Time Offset" := ProdOrderComp."Lead-Time Offset";
    Indentation := 1;
    
    OnTransferFromProdOrderCompCopyFields(Rec,ProdOrderComp); <=====================
    INSERT(TRUE);
Table<BOM Buffer>.PROCEDURE<OnTransferFromProdOrderLineCopyFields>
  Raised in: Table<BOM Buffer>.PROCEDURE<TransferFromProdOrderLine>
    Code lines:
    ...
    "Variant Code" := ProdOrderLine."Variant Code";
    "Location Code" := ProdOrderLine."Location Code";
    "Needed by Date" := ProdOrderLine."Due Date";
    Indentation := 0;
    
    OnTransferFromProdOrderLineCopyFields(Rec,ProdOrderLine); <=====================
    INSERT(TRUE);
Table<BOM Buffer>.PROCEDURE<OnTransferFromProdRoutingCopyFields>
  Raised in: Table<BOM Buffer>.PROCEDURE<TransferFromProdRouting>
    Code lines:
    ...
    "Qty. per Top Item" := "Qty. per Parent" * ParentQtyPer;
    "Location Code" := ParentLocationCode;
    "Needed by Date" := NeedByDate;
    Indentation := NewIndentation;
    
    OnTransferFromProdRoutingCopyFields(Rec,RoutingLine); <=====================
    INSERT(TRUE);
Table<Phys. Invt. Order Header>.PROCEDURE<OnGetSamePhysInvtOrderLineOnAfterSetFilters>
  Raised in: Table<Phys. Invt. Order Header>.PROCEDURE<GetSamePhysInvtOrderLine>
    Code lines:
    ...
    PhysInvtOrderLine2.SETRANGE("Document No.","No.");
    PhysInvtOrderLine2.SETRANGE("Item No.",ItemNo);
    PhysInvtOrderLine2.SETRANGE("Variant Code",VariantCode);
    PhysInvtOrderLine2.SETRANGE("Location Code",LocationCode);
    PhysInvtOrderLine2.SETRANGE("Bin Code",BinCode);
    OnGetSamePhysInvtOrderLineOnAfterSetFilters(PhysInvtOrderLine2,Rec); <=====================
    NoOfOrderLines := PhysInvtOrderLine2.COUNT;
    
    CASE NoOfOrderLines OF
      0:
    ...
Table<Phys. Invt. Order Line>.PROCEDURE<OnBeforeShowItemLedgerEntries>
  Raised in: Table<Phys. Invt. Order Line>.PROCEDURE<ShowItemLedgerEntries>
    Code lines:
    ...
    GetPhysInvtOrderHeader;
    PhysInvtOrderHeader.TESTFIELD("Posting Date");
    
    ItemLedgEntry.SetItemVariantLocationFilters(
      "Item No.","Variant Code","Location Code",PhysInvtOrderHeader."Posting Date");
    OnBeforeShowItemLedgerEntries(ItemLedgEntry,Rec); <=====================
    PAGE.RUNMODAL(0,ItemLedgEntry);
Table<Phys. Invt. Order Line>.PROCEDURE<OnBeforeShowPhysInvtLedgerEntries>
  Raised in: Table<Phys. Invt. Order Line>.PROCEDURE<ShowPhysInvtLedgerEntries>
    Code lines:
    ...
    PhysInvtLedgEntry.SETCURRENTKEY("Item No.","Variant Code","Location Code","Posting Date");
    PhysInvtLedgEntry.SETRANGE("Item No.","Item No.");
    PhysInvtLedgEntry.SETRANGE("Variant Code","Variant Code");
    PhysInvtLedgEntry.SETRANGE("Location Code","Location Code");
    PhysInvtLedgEntry.SETRANGE("Posting Date",0D,PhysInvtOrderHeader."Posting Date");
    OnBeforeShowPhysInvtLedgerEntries(PhysInvtLedgEntry,Rec); <=====================
    PAGE.RUNMODAL(0,PhysInvtLedgEntry);
Table<Phys. Invt. Order Line>.PROCEDURE<OnCalcQtyAndLastItemLedgExpectedSetItemLedgEntryFilters>
  Raised in: Table<Phys. Invt. Order Line>.PROCEDURE<CalcQtyAndLastItemLedgExpected>
    Code lines:
    ...
        "Item No.","Entry Type","Variant Code","Drop Shipment","Location Code","Posting Date");
      ItemLedgEntry.SETRANGE("Item No.","Item No.");
      ItemLedgEntry.SETRANGE("Variant Code","Variant Code");
      ItemLedgEntry.SETRANGE("Location Code","Location Code");
      ItemLedgEntry.SETRANGE("Posting Date",0D,PhysInvtOrderHeader."Posting Date");
      OnCalcQtyAndLastItemLedgExpectedSetItemLedgEntryFilters(ItemLedgEntry,Rec); <=====================
      ItemLedgEntry.CALCSUMS(Quantity);
      QtyExpected := ItemLedgEntry.Quantity;
    END;
Table<Phys. Invt. Order Line>.PROCEDURE<OnCalcQtyAndLastItemLedgExpectedSetWhseEntryFilters>
  Raised in: Table<Phys. Invt. Order Line>.PROCEDURE<CalcQtyAndLastItemLedgExpected>
    Code lines:
    ...
      WhseEntry.SETRANGE("Bin Code","Bin Code");
      WhseEntry.SETRANGE("Item No.","Item No.");
      WhseEntry.SETRANGE("Variant Code","Variant Code");
      WhseEntry.SETRANGE("Registering Date",0D,PhysInvtOrderHeader."Posting Date");
      WhseEntry.CALCSUMS("Qty. (Base)");
      OnCalcQtyAndLastItemLedgExpectedSetWhseEntryFilters(WhseEntry,Rec); <=====================
      QtyExpected := WhseEntry."Qty. (Base)";
    END ELSE BEGIN
      TESTFIELD("Bin Code",'');
      ItemLedgEntry.RESET;
    ...
Table<Phys. Invt. Order Line>.PROCEDURE<OnCalcQtyAndTrackLinesExpectedOnBeforeInsertFromWhseEntry>
  Raised in: Table<Phys. Invt. Order Line>.PROCEDURE<CalcQtyAndTrackLinesExpected>
    Code lines:
    ...
              THEN
                ExpPhysInvtTracking.InsertLine(
                  "Document No.","Line No.",WhseEntry."Serial No.",WhseEntry."Lot No.",WhseEntry."Qty. (Base)")
              ELSE BEGIN
                ExpPhysInvtTracking."Quantity (Base)" += WhseEntry."Qty. (Base)";
                OnCalcQtyAndTrackLinesExpectedOnBeforeInsertFromWhseEntry(ExpPhysInvtTracking,WhseEntry); <=====================
                ExpPhysInvtTracking.MODIFY;
              END;
            UNTIL WhseEntry.NEXT = 0;
          ExpPhysInvtTracking.DeleteLine("Document No.","Line No.",FALSE);
    ...
Table<Phys. Invt. Order Line>.PROCEDURE<OnCalcQtyAndTrackLinesExpectedOnBeforeModifyFromItemLedgEntry>
  Raised in: Table<Phys. Invt. Order Line>.PROCEDURE<CalcQtyAndTrackLinesExpected>
    Code lines:
    ...
            THEN
              ExpPhysInvtTracking.InsertLine(
                "Document No.","Line No.",ItemLedgEntry."Serial No.",ItemLedgEntry."Lot No.",ItemLedgEntry.Quantity)
            ELSE BEGIN
              ExpPhysInvtTracking."Quantity (Base)" += ItemLedgEntry.Quantity;
              OnCalcQtyAndTrackLinesExpectedOnBeforeModifyFromItemLedgEntry(ExpPhysInvtTracking,ItemLedgEntry); <=====================
              ExpPhysInvtTracking.MODIFY;
            END;
          UNTIL ItemLedgEntry.NEXT = 0;
        ExpPhysInvtTracking.DeleteLine("Document No.","Line No.",FALSE);
    ...
Table<Phys. Invt. Order Line>.PROCEDURE<OnCalcQtyAndTrackLinesExpectedSetItemLedgEntryFilters>
  Raised in: Table<Phys. Invt. Order Line>.PROCEDURE<CalcQtyAndTrackLinesExpected>
    Code lines:
    ...
          "Item No.","Entry Type","Variant Code","Drop Shipment","Location Code","Posting Date");
        ItemLedgEntry.SETRANGE("Item No.","Item No.");
        ItemLedgEntry.SETRANGE("Variant Code","Variant Code");
        ItemLedgEntry.SETRANGE("Location Code","Location Code");
        ItemLedgEntry.SETRANGE("Posting Date",0D,PhysInvtOrderHeader."Posting Date");
        OnCalcQtyAndTrackLinesExpectedSetItemLedgEntryFilters(ItemLedgEntry,Rec); <=====================
        IF ItemLedgEntry.FINDSET THEN
          REPEAT
            IF NOT
               ExpPhysInvtTracking.GET(
    ...
Table<Phys. Invt. Record Line>.PROCEDURE<OnShowUsedTrackLinesOnAfterInsertFromItemLedgEntry>
  Raised in: Table<Phys. Invt. Record Line>.PROCEDURE<ShowUsedTrackLines>
    Code lines:
    ...
      OnShowUsedTrackLinesSetItemLedgerEntryFilters(ItemLedgEntry,Rec);
      IF ItemLedgEntry.FIND('-') THEN
        REPEAT
          InsertTrackingBuffer(
            TempPhysInvtTracking,ItemLedgEntry."Serial No.",ItemLedgEntry."Lot No.",ItemLedgEntry.Quantity);
          OnShowUsedTrackLinesOnAfterInsertFromItemLedgEntry(TempPhysInvtTracking,ItemLedgEntry); <=====================
        UNTIL ItemLedgEntry.NEXT = 0;
    END;
    
    IF TempPhysInvtTracking.FINDFIRST THEN BEGIN
    ...
Table<Phys. Invt. Record Line>.PROCEDURE<OnShowUsedTrackLinesOnAfterInsertFromWhseEntry>
  Raised in: Table<Phys. Invt. Record Line>.PROCEDURE<ShowUsedTrackLines>
    Code lines:
    ...
      OnShowUsedTrackLinesSetWhseEntryFilters(WhseEntry,Rec);
      IF WhseEntry.FIND('-') THEN
        REPEAT
          InsertTrackingBuffer(
            TempPhysInvtTracking,WhseEntry."Serial No.",WhseEntry."Lot No.",WhseEntry."Qty. (Base)");
          OnShowUsedTrackLinesOnAfterInsertFromWhseEntry(TempPhysInvtTracking,WhseEntry); <=====================
        UNTIL WhseEntry.NEXT = 0;
    END ELSE BEGIN
      ItemLedgEntry.SetItemVariantLocationFilters(
        "Item No.","Variant Code","Location Code",PhysInvtOrderHeader."Posting Date");
    ...
Table<Phys. Invt. Record Line>.PROCEDURE<OnShowUsedTrackLinesSetItemLedgerEntryFilters>
  Raised in: Table<Phys. Invt. Record Line>.PROCEDURE<ShowUsedTrackLines>
    Code lines:
    ...
          OnShowUsedTrackLinesOnAfterInsertFromWhseEntry(TempPhysInvtTracking,WhseEntry);
        UNTIL WhseEntry.NEXT = 0;
    END ELSE BEGIN
      ItemLedgEntry.SetItemVariantLocationFilters(
        "Item No.","Variant Code","Location Code",PhysInvtOrderHeader."Posting Date");
      OnShowUsedTrackLinesSetItemLedgerEntryFilters(ItemLedgEntry,Rec); <=====================
      IF ItemLedgEntry.FIND('-') THEN
        REPEAT
          InsertTrackingBuffer(
            TempPhysInvtTracking,ItemLedgEntry."Serial No.",ItemLedgEntry."Lot No.",ItemLedgEntry.Quantity);
    ...
Table<Phys. Invt. Record Line>.PROCEDURE<OnShowUsedTrackLinesSetWhseEntryFilters>
  Raised in: Table<Phys. Invt. Record Line>.PROCEDURE<ShowUsedTrackLines>
    Code lines:
    ...
      WhseEntry.SETRANGE("Location Code","Location Code");
      WhseEntry.SETRANGE("Bin Code","Bin Code");
      WhseEntry.SETRANGE("Item No.","Item No.");
      WhseEntry.SETRANGE("Variant Code","Variant Code");
      WhseEntry.SETRANGE("Registering Date",0D,PhysInvtOrderHeader."Posting Date");
      OnShowUsedTrackLinesSetWhseEntryFilters(WhseEntry,Rec); <=====================
      IF WhseEntry.FIND('-') THEN
        REPEAT
          InsertTrackingBuffer(
            TempPhysInvtTracking,WhseEntry."Serial No.",WhseEntry."Lot No.",WhseEntry."Qty. (Base)");
    ...
Table<Phys. Invt. Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
  Raised in: Table<Phys. Invt. Comment Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    ...
    PhysInvtCommentLine.SETRANGE("Order No.","Order No.");
    PhysInvtCommentLine.SETRANGE("Recording No.","Recording No.");
    IF NOT PhysInvtCommentLine.FINDFIRST THEN
      Date := WORKDATE;
    
    OnAfterSetUpNewLine(Rec,PhysInvtCommentLine); <=====================
Table<Inventory Adjmt. Entry (Order)>.PROCEDURE<OnAfterGetSingleLevelCosts>
  Raised in: Table<Inventory Adjmt. Entry (Order)>.PROCEDURE<GetSingleLevelCosts>
    Code lines:
    ...
    "Single-Lvl Capacity Cost (ACY)" := "Single-Level Capacity Cost" * CurrExchRate;
    "Single-Lvl Subcontrd Cost(ACY)" := "Single-Level Subcontrd. Cost" * CurrExchRate;
    "Single-Lvl Cap. Ovhd Cost(ACY)" := "Single-Level Cap. Ovhd Cost" * CurrExchRate;
    "Single-Lvl Mfg. Ovhd Cost(ACY)" := "Single-Level Mfg. Ovhd Cost" * CurrExchRate;
    
    OnAfterGetSingleLevelCosts(Rec,Item); <=====================
Table<Inventory Adjmt. Entry (Order)>.PROCEDURE<OnAfterSetProdOrderLineTransferFields>
  Raised in: Table<Inventory Adjmt. Entry (Order)>.PROCEDURE<SetProdOrderLine>
    Code lines:
    ...
    "Routing Reference No." := ProdOrderLine."Routing Reference No.";
    "Cost is Adjusted" := FALSE;
    "Is Finished" := ProdOrderLine.Status = ProdOrderLine.Status::Finished;
    "Indirect Cost %" := ProdOrderLine."Indirect Cost %";
    "Overhead Rate" := ProdOrderLine."Overhead Rate";
    OnAfterSetProdOrderLineTransferFields(Rec,ProdOrderLine); <=====================
    
    GetUnitCostsFromProdOrderLine;
    IF NOT INSERT THEN;
Table<Service Header>.PROCEDURE<OnAfterCopyBillToCustomerFields>
  Raised in: Table<Service Header>.PROCEDURE<CopyBillToCustomerFields>
    Code lines:
    ...
    "Customer Disc. Group" := Cust."Customer Disc. Group";
    "Language Code" := Cust."Language Code";
    SetSalespersonCode(Cust."Salesperson Code","Salesperson Code");
    Reserve := Cust.Reserve;
    
    OnAfterCopyBillToCustomerFields(Rec,Cust); <=====================
Table<Service Header>.PROCEDURE<OnAfterCopyCustomerFields>
  Raised in: Table<Service Header>.PROCEDURE<CopyCustomerFields>
    Code lines:
    ...
    "VAT Registration No." := Cust."VAT Registration No.";
    "Shipping Advice" := Cust."Shipping Advice";
    "Responsibility Center" := UserSetupMgt.GetRespCenter(2,Cust."Responsibility Center");
    VALIDATE("Location Code",UserSetupMgt.GetLocation(2,Cust."Location Code","Responsibility Center"));
    
    OnAfterCopyCustomerFields(Rec,Cust); <=====================
Table<Service Header>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Service Header>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[3] := No3;
    TableID[4] := Type4;
    No[4] := No4;
    TableID[5] := Type5;
    No[5] := No5;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    OldDimSetID := "Dimension Set ID";
    ...
Table<Service Header>.PROCEDURE<OnAfterGetPostingNoSeriesCode>
  Raised in: Table<Service Header>.PROCEDURE<GetPostingNoSeriesCode>
    Code lines:
    ...
    IF "Document Type" IN ["Document Type"::"Credit Memo"] THEN
      PostingNos := ServSetup."Posted Serv. Credit Memo Nos."
    ELSE
      PostingNos := ServSetup."Posted Service Invoice Nos.";
    
    OnAfterGetPostingNoSeriesCode(Rec,PostingNos); <=====================
Table<Service Header>.PROCEDURE<OnAfterInitRecord>
  Raised in: Table<Service Header>.PROCEDURE<InitRecord>
    Code lines:
    ...
      ELSE
        "Responsibility Center" := UserSetupMgt.GetRespCenter(2,"Responsibility Center")
    ELSE
      "Responsibility Center" := UserSetupMgt.GetServiceFilter;
    
    OnAfterInitRecord(Rec); <=====================
Table<Service Header>.PROCEDURE<OnAfterTransferExtendedTextForServLineRecreation>
  Raised in: Table<Service Header>.PROCEDURE<CreateServiceLines>
    Code lines:
    ...
        ExtendedTextAdded := FALSE;
      END ELSE
        IF NOT ExtendedTextAdded THEN BEGIN
          TransferExtendedText.ServCheckIfAnyExtText(ServLine,TRUE);
          TransferExtendedText.InsertServExtText(ServLine);
          OnAfterTransferExtendedTextForServLineRecreation(ServLine); <=====================
          ServLine.FIND('+');
          ExtendedTextAdded := TRUE;
        END;
      CopyReservEntryFromTemp(TempServLine,ServLine."Line No.");
Table<Service Header>.PROCEDURE<OnAfterUpdateCust>
  Raised in: Table<Service Header>.PROCEDURE<UpdateCust>
    Code lines:
    ...
    IF ("Customer No." = "Bill-to Customer No.") OR
       ("Bill-to Customer No." = '')
    THEN
      VALIDATE("Bill-to Contact No.","Contact No.");
    
    OnAfterUpdateCust(Rec); <=====================
Table<Service Header>.PROCEDURE<OnAfterUpdateShipToAddress>
  Raised in: Table<Service Header>.PROCEDURE<UpdateShipToAddress>
    Code lines:
    ...
        "Ship-to Contact" := CompanyInfo."Ship-to Contact";
      END;
      "VAT Country/Region Code" := "Country/Region Code";
    END;
    
    OnAfterUpdateShipToAddress(Rec); <=====================
Table<Service Header>.PROCEDURE<OnAfterValidateShortcutDimCode>
  Raised in: Table<Service Header>.PROCEDURE<ValidateShortcutDimCode>
    Code lines:
    ...
    DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    
    IF ServItemLineExists OR ServLineExists THEN
      UpdateAllLineDim("Dimension Set ID",OldDimSetID);
    
    OnAfterValidateShortcutDimCode(Rec,xRec,FieldNumber,ShortcutDimCode); <=====================
Table<Service Header>.PROCEDURE<OnBeforeConfirmUpdateContractNo>
  Raised in: Table<Service Header>.PROCEDURE<ConfirmChangeContractNo>
    Code lines:
    IsHandled := FALSE;
    OnBeforeConfirmUpdateContractNo(Rec,IsHandled,Confirmed,HideValidationDialog); <=====================
    IF IsHandled THEN
      EXIT(Confirmed);
    
    Confirmed :=
      ConfirmManagement.ConfirmProcess(
        STRSUBSTNO(
          Text029,ServContractLine.FIELDCAPTION("Next Planned Service Date"),
          ServContractLine.TABLECAPTION,FIELDCAPTION("Contract No.")),TRUE);
    ...
Table<Service Header>.PROCEDURE<OnBeforeGetNoSeries>
  Raised in: Table<Service Header>.PROCEDURE<GetNoSeriesCode>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetNoSeries(Rec,NoSeriesCode,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(NoSeriesCode);
    
    CASE "Document Type" OF
      "Document Type"::Quote:
        EXIT(ServSetup."Service Quote Nos.");
      "Document Type"::Order:
        EXIT(ServSetup."Service Order Nos.");
    ...
Table<Service Header>.PROCEDURE<OnBeforeGetPostingNoSeriesCode>
  Raised in: Table<Service Header>.PROCEDURE<GetPostingNoSeriesCode>
    Code lines:
    ServSetup.GET;
    IsHandled := FALSE;
    OnBeforeGetPostingNoSeriesCode(Rec,ServSetup,PostingNos,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF "Document Type" IN ["Document Type"::"Credit Memo"] THEN
      PostingNos := ServSetup."Posted Serv. Credit Memo Nos."
    ELSE
      PostingNos := ServSetup."Posted Service Invoice Nos.";
    ...
Table<Service Header>.PROCEDURE<OnBeforeInsertServLineOnServLineRecreation>
  Raised in: Table<Service Header>.PROCEDURE<CreateServiceLines>
    Code lines:
    ...
          ServLine."Fault Code" := TempServLine."Fault Code";
          ServLine.VALIDATE("Dimension Set ID",TempServLine."Dimension Set ID");
        END;
        "Link Service to Service Item" := TempLinkToServItem;
    
        OnBeforeInsertServLineOnServLineRecreation(ServLine,TempServLine); <=====================
        ServLine.INSERT;
        ExtendedTextAdded := FALSE;
      END ELSE
        IF NOT ExtendedTextAdded THEN BEGIN
    ...
Table<Service Header>.PROCEDURE<OnBeforeTestMandatoryFields>
  Raised in: Table<Service Header>.PROCEDURE<TestMandatoryFields>
    Code lines:
    OnBeforeTestMandatoryFields(Rec,PassedServLine); <=====================
    
    ServSetup.GET;
    CheckMandSalesPersonOrderData(ServSetup);
    PassedServLine.RESET;
    ServLine.RESET;
    ServLine.SETRANGE("Document Type","Document Type");
    ServLine.SETRANGE("Document No.","No.");
    
    IF PassedServLine.FIND('-') THEN
    ...
Table<Service Header>.PROCEDURE<OnBeforeTestNoSeries>
  Raised in: Table<Service Header>.PROCEDURE<TestNoSeries>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTestNoSeries(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    CASE "Document Type" OF
      "Document Type"::Quote:
        ServSetup.TESTFIELD("Service Quote Nos.");
      "Document Type"::Order:
        ServSetup.TESTFIELD("Service Order Nos.");
Table<Service Header>.PROCEDURE<OnBeforeTestNoSeriesManual>
  Raised in: Table<Service Header>.PROCEDURE<TestNoSeriesManual>
    Code lines:
    IsHandled := FALSE;
    OnBeforeTestNoSeriesManual(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    CASE "Document Type" OF
      "Document Type"::Quote:
        NoSeriesMgt.TestManual(ServSetup."Service Quote Nos.");
      "Document Type"::Order:
        NoSeriesMgt.TestManual(ServSetup."Service Order Nos.");
    ...
Table<Service Header>.PROCEDURE<OnBeforeUpdateAllLineDim>
  Raised in: Table<Service Header>.PROCEDURE<UpdateAllLineDim>
    Code lines:
    IsHandled := FALSE;
    OnBeforeUpdateAllLineDim(Rec,NewParentDimSetID,OldParentDimSetID,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NewParentDimSetID = OldParentDimSetID THEN
      EXIT;
    IF NOT ConfirmManagement.ConfirmProcess(Text061,TRUE) THEN
      EXIT;
    
    ...
Table<Service Header>.PROCEDURE<OnCreateDimOnBeforeUpdateLines>
  Raised in: Table<Service Header>.PROCEDURE<CreateDim>
    Code lines:
    ...
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,SourceCodeSetup."Service Management",
        "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",ContractDimensionSetID,DATABASE::"Service Contract Header");
    
    OnCreateDimOnBeforeUpdateLines(Rec); <=====================
    
    IF ("Dimension Set ID" <> OldDimSetID) AND (ServItemLineExists OR ServLineExists) THEN BEGIN
      MODIFY;
      UpdateAllLineDim("Dimension Set ID",OldDimSetID);
Table<Service Header>.PROCEDURE<OnUpdateServLineByChangedFieldName>
  Raised in: Table<Service Header>.PROCEDURE<UpdateServLinesByFieldNo>
    Code lines:
    ...
              BEGIN
                ServLine.VALIDATE("Shipping Agent Service Code","Shipping Agent Service Code");
                ServLine.MODIFY(TRUE);
              END;
            ELSE
              OnUpdateServLineByChangedFieldName(Rec,ServLine,Field."Field Caption"); <=====================
          END;
        UNTIL ServLine.NEXT = 0;
    END;
Table<Service Item Line>.PROCEDURE<OnAfterAssignItemValues>
  Raised in: Table<Service Item Line>.Field<Item No.>.<OnValidate>
    Code lines:
    ...
      GetServHeader;
      IF (ServHeader."Language Code" = '') OR NOT GetItemTranslation THEN BEGIN
        Description := Item.Description;
        "Description 2" := Item."Description 2";
      END;
      OnAfterAssignItemValues(Rec,xRec,Item,ServHeader,CurrFieldNo); <=====================
    END ELSE BEGIN
      Description := '';
      "Description 2" := '';
    END;
Table<Service Item Line>.PROCEDURE<OnAfterSetServItemInfo>
  Raised in: Table<Service Item Line>.PROCEDURE<SetServItemInfo>
    Code lines:
    ...
    Priority := ServItem.Priority;
    "Vendor No." := ServItem."Vendor No.";
    "Vendor Item No." := ServItem."Vendor Item No.";
    CheckWarranty(ServHeader."Order Date");
    
    OnAfterSetServItemInfo(Rec,xRec,ServItem); <=====================
Table<Service Item Line>.PROCEDURE<OnBeforeOnModify>
  Raised in: Table<Service Item Line>.<OnModify>
    Code lines:
    IF UseServItemLineAsxRec THEN BEGIN
      xRec := ServItemLine;
      UseServItemLineAsxRec := FALSE;
    END;
    
    OnBeforeOnModify(Rec,xRec); <=====================
    
    IF ("Service Item No." <> xRec."Service Item No.") OR ("Serial No." <> xRec."Serial No.") THEN BEGIN
      ServLine.RESET;
      ServLine.SETCURRENTKEY("Document Type","Document No.","Service Item Line No.");
    ...
Table<Service Item Line>.PROCEDURE<OnBeforeUpdateResponseTimeHours>
  Raised in: Table<Service Item Line>.PROCEDURE<UpdateResponseTimeHours>
    Code lines:
    OnBeforeUpdateResponseTimeHours(Rec); <=====================
    
    IF NOT SkipResponseTimeHrsUpdate THEN BEGIN
      IF "Response Time (Hours)" <> xRec."Response Time (Hours)" THEN
        VALIDATE("Response Time (Hours)",CalculateResponseTimeHours)
      ELSE
        IF "Response Date" = 0D THEN
          VALIDATE("Response Time (Hours)",CalculateResponseTimeHours)
        ELSE
          "Response Time (Hours)" := CalculateResponseTimeHours;
    ...
Table<Service Item Line>.PROCEDURE<OnBeforeValidateSerialNo>
  Raised in: Table<Service Item Line>.Field<Serial No.>.<OnValidate>
    Code lines:
    IsHandled := FALSE;
    OnBeforeValidateSerialNo(Rec,xRec,CurrFieldNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF "Serial No." <> xRec."Serial No." THEN
      IF "Service Item No." <> '' THEN
        ERROR(
          Text016,
          FIELDCAPTION("Serial No."),FIELDCAPTION("Service Item No."));
    ...
Table<Service Item Line>.PROCEDURE<OnBeforeValidateWarranty>
  Raised in: Table<Service Item Line>.Field<Warranty>.<OnValidate>
    Code lines:
    IsHandled := FALSE;
    OnBeforeValidateWarranty(Rec,xRec,CurrFieldNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF "Service Item No." = '' THEN BEGIN
      GetServHeader;
      IF Warranty THEN BEGIN
        IF ConfirmManagement.ConfirmProcess(Text024,TRUE) THEN BEGIN
          VALIDATE("Warranty Starting Date (Parts)",ServHeader."Order Date");
    ...
Table<Service Item Line>.PROCEDURE<OnBeforeValidateWarrantyLabor>
  Raised in: Table<Service Item Line>.Field<Warranty % (Labor)>.<OnValidate>
    Code lines:
    IsHandled := FALSE;
    OnBeforeValidateWarrantyLabor(Rec,xRec,CurrFieldNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF "Service Item No." <> '' THEN
      ERROR(Text023,ServItem.TABLECAPTION);
    
    IF ("Service Item No." = '') AND ("Warranty % (Labor)" <> xRec."Warranty % (Labor)") THEN BEGIN
      ServLine.RESET;
    ...
Table<Service Item Line>.PROCEDURE<OnBeforeValidateWarrantyParts>
  Raised in: Table<Service Item Line>.Field<Warranty % (Parts)>.<OnValidate>
    Code lines:
    IsHandled := FALSE;
    OnBeforeValidateWarrantyParts(Rec,xRec,CurrFieldNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF "Service Item No." <> '' THEN
      ERROR(Text023,ServItem.TABLECAPTION);
    
    IF ("Service Item No." = '') AND ("Warranty % (Parts)" <> xRec."Warranty % (Parts)") THEN BEGIN
      ServLine.RESET;
    ...
Table<Service Item Line>.PROCEDURE<OnRecreateServLine>
  Raised in: Table<Service Item Line>.PROCEDURE<RecreateServLines>
    Code lines:
    ...
            ServLine2."Exclude Contract Discount" := TempServLine."Exclude Contract Discount";
            ServLine2.VALIDATE(Warranty,TempServLine.Warranty);
          END;
          ServLine2.Description := TempServLine.Description;
          ServLine2."Description 2" := TempServLine."Description 2";
          OnRecreateServLine(ServLine2,TempServLine); <=====================
        END;
        ServLine2.MODIFY(TRUE);
      UNTIL TempServLine.NEXT = 0;
      TempServLine.DELETEALL;
Table<Service Line>.PROCEDURE<OnAfterAssignGLAccountValues>
  Raised in: Table<Service Line>.PROCEDURE<CopyFromGLAccount>
    Code lines:
    ...
    "Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
    "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
    "Tax Group Code" := GLAcc."Tax Group Code";
    "Allow Invoice Disc." := FALSE;
    
    OnAfterAssignGLAccountValues(Rec,GLAcc); <=====================
Table<Service Line>.PROCEDURE<OnAfterAssignHeaderValues>
  Raised in: Table<Service Line>.PROCEDURE<InitHeaderDefaults>
    Code lines:
    ...
    
    "Shipping Agent Code" := ServHeader."Shipping Agent Code";
    "Shipping Agent Service Code" := ServHeader."Shipping Agent Service Code";
    "Shipping Time" := ServHeader."Shipping Time";
    
    OnAfterAssignHeaderValues(Rec,ServHeader); <=====================
Table<Service Line>.PROCEDURE<OnAfterAssignItemValues>
  Raised in: Table<Service Line>.PROCEDURE<CopyFromItem>
    Code lines:
    ...
    END ELSE BEGIN
      Warranty := FALSE;
      "Warranty Disc. %" := 0;
    END;
    
    OnAfterAssignItemValues(Rec,Item,xRec,CurrFieldNo,ServHeader); <=====================
Table<Service Line>.PROCEDURE<OnAfterAssignResourceValues>
  Raised in: Table<Service Line>.PROCEDURE<CopyFromResource>
    Code lines:
    ...
    "Gen. Prod. Posting Group" := Res."Gen. Prod. Posting Group";
    "VAT Prod. Posting Group" := Res."VAT Prod. Posting Group";
    "Tax Group Code" := Res."Tax Group Code";
    FindResUnitCost;
    
    OnAfterAssignResourceValues(Rec,Res); <=====================
Table<Service Line>.PROCEDURE<OnAfterAssignServCostValues>
  Raised in: Table<Service Line>.PROCEDURE<CopyFromCost>
    Code lines:
    ...
         (NOT FaultReasonCode."Exclude Warranty Discount")
      THEN
        VALIDATE("Fault Reason Code",ServItemLine."Fault Reason Code");
    Quantity := ServCost."Default Quantity";
    
    OnAfterAssignServCostValues(Rec,ServCost); <=====================
Table<Service Line>.PROCEDURE<OnAfterAssignServItemValues>
  Raised in: Table<Service Line>.PROCEDURE<CopyFromServItem>
    Code lines:
    ...
            END;
        END;
      END;
    END;
    
    OnAfterAssignServItemValues(Rec,ServItem,ServItemComponent,HideReplacementDialog); <=====================
Table<Service Line>.PROCEDURE<OnAfterAssignStdTxtValues>
  Raised in: Table<Service Line>.PROCEDURE<CopyFromStdTxt>
    Code lines:
    StandardText.GET("No.");
    Description := StandardText.Description;
    
    OnAfterAssignStdTxtValues(Rec,StandardText); <=====================
Table<Service Line>.PROCEDURE<OnAfterCalcLineAmount>
  Raised in: Table<Service Line>.PROCEDURE<CalcLineAmount>
    Code lines:
    LineAmount := "Line Amount" - "Inv. Discount Amount";
    
    OnAfterCalcLineAmount(Rec,LineAmount); <=====================
Table<Service Line>.PROCEDURE<OnAfterCalculateDiscount>
  Raised in: Table<Service Line>.PROCEDURE<CalculateDiscount>
    Code lines:
    ...
      IF Discounts[i] > "Line Discount %" THEN BEGIN
        "Line Discount Type" := i;
        "Line Discount %" := Discounts[i];
      END;
    
    OnAfterCalculateDiscount(Rec); <=====================
Table<Service Line>.PROCEDURE<OnAfterCalcVATAmountLines>
  Raised in: Table<Service Line>.PROCEDURE<CalcVATAmountLines>
    Code lines:
    ...
        VATAmountLine."Amount Including VAT" := VATAmountLine."Amount Including VAT" + TotalVATAmount;
        VATAmountLine."Calculated VAT Amount" := VATAmountLine."Calculated VAT Amount" + TotalVATAmount;
        VATAmountLine.MODIFY;
      END;
    
    OnAfterCalcVATAmountLines(ServHeader,ServiceLine,VATAmountLine,QtyType); <=====================
Table<Service Line>.PROCEDURE<OnAfterClearFields>
  Raised in: Table<Service Line>.PROCEDURE<ClearFields>
    Code lines:
    ...
    "Time Sheet Line No." := TempServLine."Time Sheet Line No.";
    "Time Sheet Date" := TempServLine."Time Sheet Date";
    IF "No." <> xRec."No." THEN
      VALIDATE("Job Planning Line No.",0);
    
    OnAfterClearFields(Rec,xRec,TempServLine,CurrFieldNo); <=====================
Table<Service Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Service Line>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    TableID[3] := Type3;
    No[3] := No3;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    DimensionSetID := ServItemLine."Dimension Set ID";
    ...
Table<Service Line>.PROCEDURE<OnAfterFilterLinesWithItemToPlan>
  Raised in: Table<Service Line>.PROCEDURE<FilterLinesWithItemToPlan>
    Code lines:
    ...
    SETFILTER("Needed by Date",Item.GETFILTER("Date Filter"));
    SETFILTER("Shortcut Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
    SETFILTER("Shortcut Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
    SETFILTER("Outstanding Qty. (Base)",'<>0');
    
    OnAfterFilterLinesWithItemToPlan(Rec,Item); <=====================
Table<Service Line>.PROCEDURE<OnAfterGetItemTranslation>
  Raised in: Table<Service Line>.PROCEDURE<GetItemTranslation>
    Code lines:
    GetServHeader;
    IF ItemTranslation.GET("No.","Variant Code",ServHeader."Language Code") THEN BEGIN
      Description := ItemTranslation.Description;
      "Description 2" := ItemTranslation."Description 2";
      OnAfterGetItemTranslation(Rec,ServHeader,ItemTranslation); <=====================
    END;
Table<Service Line>.PROCEDURE<OnAfterGetUnitCost>
  Raised in: Table<Service Line>.PROCEDURE<GetUnitCost>
    Code lines:
    ...
    IF GetSKU THEN
      VALIDATE("Unit Cost (LCY)",SKU."Unit Cost" * "Qty. per Unit of Measure")
    ELSE
      VALIDATE("Unit Cost (LCY)",Item."Unit Cost" * "Qty. per Unit of Measure");
    
    OnAfterGetUnitCost(Rec,Item); <=====================
Table<Service Line>.PROCEDURE<OnAfterInitOutstandingAmount>
  Raised in: Table<Service Line>.PROCEDURE<InitOutstandingAmount>
    Code lines:
    ...
          ROUND(
            AmountInclVAT * "Qty. Shipped Not Invoiced" / CalcChargeableQty,
            Currency."Amount Rounding Precision"));
    END;
    
    OnAfterInitOutstandingAmount(Rec,ServHeader,Currency); <=====================
Table<Service Line>.PROCEDURE<OnAfterInitQtyToConsume>
  Raised in: Table<Service Line>.PROCEDURE<InitQtyToConsume>
    Code lines:
    "Qty. to Consume" := MaxQtyToConsume;
    "Qty. to Consume (Base)" := MaxQtyToConsumeBase;
    OnAfterInitQtyToConsume(Rec,CurrFieldNo); <=====================
    
    InitQtyToInvoice;
Table<Service Line>.PROCEDURE<OnAfterInitQtyToInvoice>
  Raised in: Table<Service Line>.PROCEDURE<InitQtyToInvoice>
    Code lines:
    "Qty. to Invoice" := MaxQtyToInvoice;
    "Qty. to Invoice (Base)" := MaxQtyToInvoiceBase;
    "VAT Difference" := 0;
    CalcInvDiscToInvoice;
    
    OnAfterInitQtyToInvoice(Rec,CurrFieldNo); <=====================
Table<Service Line>.PROCEDURE<OnAfterInitQtyToShip>
  Raised in: Table<Service Line>.PROCEDURE<InitQtyToShip>
    Code lines:
    ...
      "Qty. to Ship (Base)" := "Outstanding Qty. (Base)";
    END;
    VALIDATE("Qty. to Consume");
    InitQtyToInvoice;
    
    OnAfterInitQtyToShip(Rec,CurrFieldNo); <=====================
Table<Service Line>.PROCEDURE<OnAfterResourseFindCost>
  Raised in: Table<Service Line>.PROCEDURE<FindResUnitCost>
    Code lines:
    ResCost.INIT;
    ResCost.Code := "No.";
    ResCost."Work Type Code" := "Work Type Code";
    CODEUNIT.RUN(CODEUNIT::"Resource-Find Cost",ResCost);
    OnAfterResourseFindCost(Rec,ResCost); <=====================
    VALIDATE("Unit Cost (LCY)",ResCost."Unit Cost" * "Qty. per Unit of Measure");
Table<Service Line>.PROCEDURE<OnAfterTestStatusOpen>
  Raised in: Table<Service Line>.PROCEDURE<TestStatusOpen>
    Code lines:
    ...
    OnBeforeTestStatusOpen(Rec,ServHeader);
    
    IF (Type = Type::Item) OR (xRec.Type = Type::Item) THEN
      ServHeader.TESTFIELD("Release Status",ServHeader."Release Status"::Open);
    
    OnAfterTestStatusOpen(Rec,ServHeader); <=====================
Table<Service Line>.PROCEDURE<OnAfterUpdateUnitPrice>
  Raised in: Table<Service Line>.PROCEDURE<UpdateUnitPrice>
    Code lines:
    ...
    
    CalculateDiscount;
    SalesPriceCalcMgt.FindServLinePrice(ServHeader,Rec,CalledByFieldNo);
    VALIDATE("Unit Price");
    
    OnAfterUpdateUnitPrice(Rec,xRec,CalledByFieldNo,CurrFieldNo); <=====================
Table<Service Line>.PROCEDURE<OnAfterUpdateVATAmounts>
  Raised in: Table<Service Line>.PROCEDURE<UpdateVATAmounts>
    Code lines:
    ...
                "VAT %" := 0;
            END;
        END;
    END;
    
    OnAfterUpdateVATAmounts(Rec); <=====================
Table<Service Line>.PROCEDURE<OnAfterUpdateVATOnLines>
  Raised in: Table<Service Line>.PROCEDURE<UpdateVATOnLines>
    Code lines:
    ...
      SETRANGE(Quantity);
      SETRANGE("Qty. to Invoice");
      SETRANGE("Qty. to Ship");
    END;
    
    OnAfterUpdateVATOnLines(ServHeader,ServiceLine,VATAmountLine,QtyType); <=====================
Table<Service Line>.PROCEDURE<OnBeforeTestStatusOpen>
  Raised in: Table<Service Line>.PROCEDURE<TestStatusOpen>
    Code lines:
    IF StatusCheckSuspended THEN
      EXIT;
    
    ServHeader.GET("Document Type","Document No.");
    OnBeforeTestStatusOpen(Rec,ServHeader); <=====================
    
    IF (Type = Type::Item) OR (xRec.Type = Type::Item) THEN
      ServHeader.TESTFIELD("Release Status",ServHeader."Release Status"::Open);
    
    OnAfterTestStatusOpen(Rec,ServHeader);
Table<Service Line>.PROCEDURE<OnBeforeUpdateUnitPrice>
  Raised in: Table<Service Line>.PROCEDURE<UpdateUnitPrice>
    Code lines:
    OnBeforeUpdateUnitPrice(Rec,xRec,CalledByFieldNo,CurrFieldNo); <=====================
    
    TESTFIELD("Qty. per Unit of Measure");
    ServHeader.GET("Document Type","Document No.");
    
    CalculateDiscount;
    SalesPriceCalcMgt.FindServLinePrice(ServHeader,Rec,CalledByFieldNo);
    VALIDATE("Unit Price");
    
    OnAfterUpdateUnitPrice(Rec,xRec,CalledByFieldNo,CurrFieldNo);
Table<Service Line>.PROCEDURE<OnBeforeUpdateVATAmounts>
  Raised in: Table<Service Line>.PROCEDURE<UpdateVATAmounts>
    Code lines:
    OnBeforeUpdateVATAmounts(Rec); <=====================
    
    GetServHeader;
    ServiceLine2.SETRANGE("Document Type","Document Type");
    ServiceLine2.SETRANGE("Document No.","Document No.");
    ServiceLine2.SETFILTER("Line No.",'<>%1',"Line No.");
    IF "Line Amount" = 0 THEN
      IF xRec."Line Amount" >= 0 THEN
        ServiceLine2.SETFILTER(Amount,'>%1',0)
      ELSE
    ...
Table<Service Line>.PROCEDURE<OnInitHeaderDefaultsOnAfterAssignLocationCode>
  Raised in: Table<Service Line>.PROCEDURE<InitHeaderDefaults>
    Code lines:
    ...
    IF Type = Type::Resource THEN
      "Location Code" := ServOrderMgt.FindResLocationCode("No.",ServHeader."Order Date");
    IF ("Location Code" = '') AND (NOT IsNonInventoriableItem) THEN
      "Location Code" := ServHeader."Location Code";
    
    OnInitHeaderDefaultsOnAfterAssignLocationCode(Rec); <=====================
    
    IF Type = Type::Item THEN BEGIN
      IF (xRec."No." <> "No.") AND (Quantity <> 0) THEN
        WhseValidateSourceLine.ServiceLineVerifyChange(Rec,xRec);
    ...
Table<Service Line>.PROCEDURE<OnReplaceServItemOnCopyFromReplacementItem>
  Raised in: Table<Service Line>.PROCEDURE<ReplaceServItem>
    Code lines:
    ...
          "Spare Part Action" := "Spare Part Action"::"Temporary";
        1:
          "Spare Part Action" := "Spare Part Action"::Permanent;
      END;
      "Copy Components From" := ServItemReplacement.ReturnCopyComponentsFrom;
      OnReplaceServItemOnCopyFromReplacementItem(Rec); <=====================
      EXIT(TRUE);
    END;
    ReserveServLine.DeleteLine(Rec);
    ClearFields;
    ...
Table<Service Line>.PROCEDURE<OnValidateVariantCodeOnAssignItem>
  Raised in: Table<Service Line>.Field<Variant Code>.<OnValidate>
    Code lines:
    ...
    IF "Variant Code" = '' THEN BEGIN
      IF Type = Type::Item THEN BEGIN
        GetItem(Item);
        Description := Item.Description;
        "Description 2" := Item."Description 2";
        OnValidateVariantCodeOnAssignItem(Rec,Item); <=====================
        GetItemTranslation;
      END;
      EXIT;
    END;
    ...
Table<Service Line>.PROCEDURE<OnValidateVariantCodeOnAssignItemVariant>
  Raised in: Table<Service Line>.Field<Variant Code>.<OnValidate>
    Code lines:
    ...
    END;
    
    ItemVariant.GET("No.","Variant Code");
    Description := ItemVariant.Description;
    "Description 2" := ItemVariant."Description 2";
    OnValidateVariantCodeOnAssignItemVariant(Rec,ItemVariant); <=====================
    
    GetServHeader;
    IF ServHeader."Language Code" <> '' THEN
      GetItemTranslation;
Table<Service Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
  Raised in: Table<Service Comment Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    ...
    ServCommentLine.SETRANGE("Table Line No.","Table Line No.");
    ServCommentLine.SETRANGE(Date,WORKDATE);
    IF NOT ServCommentLine.FINDFIRST THEN
      Date := WORKDATE;
    
    OnAfterSetUpNewLine(Rec,ServCommentLine); <=====================
Table<Service Ledger Entry>.PROCEDURE<OnAfterCopyFromServHeader>
  Raised in: Table<Service Ledger Entry>.PROCEDURE<CopyFromServHeader>
    Code lines:
    ...
    "Customer No." := ServHeader."Customer No.";
    "Bill-to Customer No." := ServHeader."Bill-to Customer No.";
    "Service Order Type" := ServHeader."Service Order Type";
    "Responsibility Center" := ServHeader."Responsibility Center";
    
    OnAfterCopyFromServHeader(Rec,ServHeader); <=====================
Table<Service Ledger Entry>.PROCEDURE<OnAfterCopyFromServLine>
  Raised in: Table<Service Ledger Entry>.PROCEDURE<CopyFromServLine>
    Code lines:
    ...
    "Serv. Price Adjmt. Gr. Code" := ServLine."Serv. Price Adjmt. Gr. Code";
    "Service Price Group Code" := ServLine."Service Price Group Code";
    "Discount %" := ServLine."Line Discount %";
    "Variant Code" := ServLine."Variant Code";
    
    OnAfterCopyFromServLine(Rec,ServLine); <=====================
Table<Repair Status>.PROCEDURE<OnReturnStatusCodeElseCase>
  Raised in: Table<Repair Status>.PROCEDURE<ReturnStatusCode>
    Code lines:
    ...
        RepairStatus.SETRANGE("Waiting for Customer",TRUE);
      RepairStatus2."Quote Finished":
        RepairStatus.SETRANGE("Quote Finished",TRUE);
      ELSE BEGIN
        IsHandled := FALSE;
        OnReturnStatusCodeElseCase(RepairStatus2,RepairStatus,IsHandled); <=====================
        IF NOT IsHandled THEN
          EXIT('');
      END;
    END;
    ...
Table<Service Item>.PROCEDURE<OnAfterAssignItemValues>
  Raised in: Table<Service Item>.Field<Item No.>.<OnValidate>
    Code lines:
    ...
        VALIDATE("Sales Unit Price",Item."Unit Price");
        "Variant Code" := '';
        "Unit of Measure Code" := Item."Base Unit of Measure";
        IF Description = '' THEN
          VALIDATE(Description,Item.Description);
        OnAfterAssignItemValues(Rec,xRec,Item,CurrFieldNo); <=====================
        IF "Service Item Components" THEN BEGIN
          DeleteServItemComponents;
          CALCFIELDS("Service Item Components");
        END;
    ...
Table<Service Item>.PROCEDURE<OnAfterDeleteServItemComponents>
  Raised in: Table<Service Item>.PROCEDURE<DeleteServItemComponents>
    Code lines:
    ServItemComponent.RESET;
    ServItemComponent.SETRANGE("Parent Service Item No.","No.");
    ServItemComponent.DELETEALL;
    
    OnAfterDeleteServItemComponents(Rec); <=====================
Table<Service Item>.PROCEDURE<OnBeforeMessageIfServItemLinesExist>
  Raised in: Table<Service Item>.PROCEDURE<MessageIfServItemLinesExist>
    Code lines:
    ShowMessage := ServItemLinesExist;
    MessageText := STRSUBSTNO(FieldUpdateConfirmQst,ChangedFieldName);
    OnBeforeMessageIfServItemLinesExist(Rec,ChangedFieldName,MessageText,ShowMessage); <=====================
    IF ShowMessage THEN
      MESSAGE(MessageText);
Table<Service Order Allocation>.PROCEDURE<OnBeforeCheckAllocationEntry>
  Raised in: Table<Service Order Allocation>.PROCEDURE<CheckAllocationEntry>
    Code lines:
    IsHandled := TRUE;
    OnBeforeCheckAllocationEntry(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NOT HideDialog THEN BEGIN
      ServOrderAlloc.RESET;
      ServOrderAlloc.SETCURRENTKEY("Document Type","Document No.","Service Item Line No.");
      ServOrderAlloc.SETRANGE("Document Type","Document Type");
      ServOrderAlloc.SETRANGE("Document No.","Document No.");
    ...
Table<Service Contract Line>.PROCEDURE<OnAfterGetServiceItem>
  Raised in: Table<Service Contract Line>.PROCEDURE<GetServItem>
    Code lines:
    TESTFIELD("Service Item No.");
    IF "Service Item No." <> ServItem."No." THEN
      ServItem.GET("Service Item No.");
    
    OnAfterGetServiceItem(Rec,ServItem); <=====================
Table<Service Contract Line>.PROCEDURE<OnAfterSetupNewLine>
  Raised in: Table<Service Contract Line>.PROCEDURE<SetupNewLine>
    Code lines:
    ...
    IF "Starting Date" > ServContractHeader."First Service Date" THEN
      "Next Planned Service Date" := "Starting Date"
    ELSE
      "Next Planned Service Date" := ServContractHeader."First Service Date";
    
    OnAfterSetupNewLine(Rec,ServContractHeader); <=====================
Table<Service Contract Line>.PROCEDURE<OnAfterTestStatusOpen>
  Raised in: Table<Service Contract Line>.PROCEDURE<TestStatusOpen>
    Code lines:
    IF StatusCheckSuspended THEN
      EXIT;
    GetServContractHeader;
    ServContractHeader.TESTFIELD("Change Status",ServContractHeader."Change Status"::Open);
    
    OnAfterTestStatusOpen(Rec,CurrFieldNo); <=====================
Table<Service Contract Line>.PROCEDURE<OnBeforeValidateContractExpirationDate>
  Raised in: Table<Service Contract Line>.Field<Contract Expiration Date>.<OnValidate>
    Code lines:
    TestStatusOpen;
    
    IsHandled := FALSE;
    OnBeforeValidateContractExpirationDate(Rec,xRec,CurrFieldNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    TESTFIELD(Credited,FALSE);
    
    ServContractHeader.GET("Contract Type","Contract No.");
    ...
Table<Service Contract Line>.PROCEDURE<OnBeforeValidateLineDiscountPercent>
  Raised in: Table<Service Contract Line>.Field<Line Discount %>.<OnValidate>
    Code lines:
    TestStatusOpen;
    
    IsHandled := FALSE;
    OnBeforeValidateLineDiscountPercent(Rec,xRec,CurrFieldNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    Currency.InitRoundingPrecision;
    "Line Value" := ROUND("Line Value",Currency."Amount Rounding Precision");
    "Line Amount" :=
    ...
Table<Service Contract Header>.PROCEDURE<OnAfterAssistEdit>
  Raised in: Table<Service Contract Header>.PROCEDURE<AssistEdit>
    Code lines:
    ...
        Rec := ServContractHeader;
        EXIT(TRUE);
      END;
    END;
    
    OnAfterAssistEdit(OldServContract); <=====================
Table<Service Contract Header>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Service Contract Header>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[3] := No3;
    TableID[4] := Type4;
    No[4] := No4;
    TableID[5] := Type5;
    No[5] := No5;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
Table<Service Contract Header>.PROCEDURE<OnAfterUpdContractChangeLog>
  Raised in: Table<Service Contract Header>.PROCEDURE<UpdContractChangeLog>
    Code lines:
    ...
      ContractChangeLog.LogContractChange(
        "Contract No.",0,FIELDCAPTION("Allow Unbalanced Amounts"),0,
        FORMAT(OldServContractHeader."Allow Unbalanced Amounts"),FORMAT("Allow Unbalanced Amounts"),
        '',0);
    
    OnAfterUpdContractChangeLog(Rec,OldServContractHeader); <=====================
Table<Filed Service Contract Header>.PROCEDURE<OnAfterFileContract>
  Raised in: Table<Filed Service Contract Header>.PROCEDURE<FileContract>
    Code lines:
    ...
          FiledContractLine.TRANSFERFIELDS(ServContractLine);
          FiledContractLine.INSERT;
        UNTIL ServContractLine.NEXT = 0;
    END;
    
    OnAfterFileContract(FiledServContractHeader,ServContractHeader); <=====================
Table<Service Shipment Line>.PROCEDURE<OnAfterServiceInvLineInsert>
  Raised in: Table<Service Shipment Line>.PROCEDURE<InsertInvLineFromShptLine>
    Code lines:
    ...
      ServiceLine."Dimension Set ID" := ServiceOrderLine."Dimension Set ID";
      ServiceLine.VALIDATE("Posting Date",ServiceInvHeader."Posting Date");
    
      OnBeforeServiceInvLineInsert(ServiceLine,ServiceOrderLine);
      ServiceLine.INSERT;
      OnAfterServiceInvLineInsert(ServiceLine,ServiceOrderLine); <=====================
    
      IF (ServiceLine."Contract No." <> '') AND (ServiceLine.Type <> ServiceLine.Type::" ") THEN
        CASE ServiceLine."Document Type" OF
          ServiceLine."Document Type"::Invoice:
    ...
Table<Service Shipment Line>.PROCEDURE<OnBeforeServiceInvLineInsert>
  Raised in: Table<Service Shipment Line>.PROCEDURE<InsertInvLineFromShptLine>
    Code lines:
    ...
      ServiceLine."Shortcut Dimension 1 Code" := ServiceOrderLine."Shortcut Dimension 1 Code";
      ServiceLine."Shortcut Dimension 2 Code" := ServiceOrderLine."Shortcut Dimension 2 Code";
      ServiceLine."Dimension Set ID" := ServiceOrderLine."Dimension Set ID";
      ServiceLine.VALIDATE("Posting Date",ServiceInvHeader."Posting Date");
    
      OnBeforeServiceInvLineInsert(ServiceLine,ServiceOrderLine); <=====================
      ServiceLine.INSERT;
      OnAfterServiceInvLineInsert(ServiceLine,ServiceOrderLine);
    
      IF (ServiceLine."Contract No." <> '') AND (ServiceLine.Type <> ServiceLine.Type::" ") THEN
    ...
Table<Service Invoice Header>.PROCEDURE<OnBeforePrintRecords>
  Raised in: Table<Service Invoice Header>.PROCEDURE<PrintRecords>
    Code lines:
    IsHandled := FALSE;
    OnBeforePrintRecords(Rec,ShowRequestPage,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    DocumentSendingProfile.TrySendToPrinter(
      DummyReportSelections.Usage::"SM.Invoice",Rec,FIELDNO("Bill-to Customer No."),ShowRequestPage);
Table<Standard Service Code>.PROCEDURE<OnBeforeInsertServLine>
  Raised in: Table<Standard Service Code>.PROCEDURE<InsertServiceLines>
    Code lines:
    ...
                    (ServLine."VAT %" / 100 * Factor + 1),Currency."Unit-Amount Rounding Precision"));
            END;
          ServLine."Dimension Set ID" := StdServLine."Dimension Set ID";
          IF StdServLine.InsertLine THEN BEGIN
            ServLine."Line No." := GetNextLineNo(ServLine);
            OnBeforeInsertServLine(ServLine); <=====================
            ServLine.INSERT(TRUE);
            InsertExtendedText(ServLine);
          END;
        UNTIL StdServLine.NEXT = 0;
Table<Standard Service Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Standard Service Line>.PROCEDURE<CreateDim>
    Code lines:
    SourceCodeSetup.GET;
    
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
    ...
Table<Standard Service Item Gr. Code>.PROCEDURE<OnBeforeInsertServLine>
  Raised in: Table<Standard Service Item Gr. Code>.PROCEDURE<InsertServiceLines>
    Code lines:
    ...
    
        CombineDimensions(ServLine,StdServLine);
    
        IF StdServLine.InsertLine THEN BEGIN
          ServLine."Line No." := GetNextLineNo(ServLine);
          OnBeforeInsertServLine(ServLine); <=====================
          ServLine.INSERT(TRUE);
          InsertExtendedText(ServLine);
        END;
      UNTIL StdServLine.NEXT = 0;
Table<Document Sending Profile>.PROCEDURE<OnAfterSend>
  Raised in: Table<Document Sending Profile>.PROCEDURE<Send>
    Code lines:
    ...
    SendToVAN(RecordVariant);
    SendToPrinter(ReportUsage,RecordVariant,CustomerFieldNo);
    TrySendToEMailGroupedMultipleSelection(ReportUsage,RecordVariant,DocumentNoFieldNo,DocName,CustomerFieldNo);
    SendToDisk(ReportUsage,RecordVariant,DocNo,DocName,ToCust);
    
    OnAfterSend(ReportUsage,RecordVariant,DocNo,ToCust,DocName,CustomerFieldNo,DocumentNoFieldNo); <=====================
Table<Document Sending Profile>.PROCEDURE<OnAfterSendVendor>
  Raised in: Table<Document Sending Profile>.PROCEDURE<SendVendor>
    Code lines:
    ...
    SendToVAN(RecordVariant);
    SendToPrinterVendor(ReportUsage,RecordVariant,VendorNoFieldNo);
    TrySendToEMailGroupedMultipleSelectionVendor(ReportUsage,RecordVariant,DocumentNoFieldNo,DocName,VendorNoFieldNo);
    SendToDiskVendor(ReportUsage,RecordVariant,DocNo,DocName,ToVendor);
    
    OnAfterSendVendor(ReportUsage,RecordVariant,DocNo,ToVendor,DocName,VendorNoFieldNo,DocumentNoFieldNo); <=====================
Table<Document Sending Profile>.PROCEDURE<OnBeforeSend>
  Raised in: Table<Document Sending Profile>.PROCEDURE<Send>
    Code lines:
    IsHandled := FALSE;
    OnBeforeSend(ReportUsage,RecordVariant,DocNo,ToCust,DocName,CustomerFieldNo,DocumentNoFieldNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SendToVAN(RecordVariant);
    SendToPrinter(ReportUsage,RecordVariant,CustomerFieldNo);
    TrySendToEMailGroupedMultipleSelection(ReportUsage,RecordVariant,DocumentNoFieldNo,DocName,CustomerFieldNo);
    SendToDisk(ReportUsage,RecordVariant,DocNo,DocName,ToCust);
    
Table<Document Sending Profile>.PROCEDURE<OnBeforeSendCustomerRecords>
  Raised in: Table<Document Sending Profile>.PROCEDURE<SendCustomerRecords>
    Code lines:
    OnBeforeSendCustomerRecords(ReportUsage,RecordVariant,DocName,CustomerNo,DocumentNo,CustomerFieldNo,DocumentFieldNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    SingleCustomerSelected := IsSingleRecordSelected(RecordVariant,CustomerNo,CustomerFieldNo);
    
    IF NOT SingleCustomerSelected THEN
      IF NOT DocumentSendingProfile.ProfileSelectionMethodDialog(ProfileSelectionMethod,TRUE) THEN
        EXIT;
    
    ...
Table<Document Sending Profile>.PROCEDURE<OnBeforeSendVendor>
  Raised in: Table<Document Sending Profile>.PROCEDURE<SendVendor>
    Code lines:
    IsHandled := FALSE;
    OnBeforeSendVendor(ReportUsage,RecordVariant,DocNo,ToVendor,DocName,VendorNoFieldNo,DocumentNoFieldNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    SendToVAN(RecordVariant);
    SendToPrinterVendor(ReportUsage,RecordVariant,VendorNoFieldNo);
    TrySendToEMailGroupedMultipleSelectionVendor(ReportUsage,RecordVariant,DocumentNoFieldNo,DocName,VendorNoFieldNo);
    SendToDiskVendor(ReportUsage,RecordVariant,DocNo,DocName,ToVendor);
    
Table<Document Sending Profile>.PROCEDURE<OnBeforeSendVendorRecords>
  Raised in: Table<Document Sending Profile>.PROCEDURE<SendVendorRecords>
    Code lines:
    OnBeforeSendVendorRecords(ReportUsage,RecordVariant,DocName,VendorNo,DocumentNo,VendorFieldNo,DocumentFieldNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    SingleVendorSelected := IsSingleRecordSelected(RecordVariant,VendorNo,VendorFieldNo);
    
    IF NOT SingleVendorSelected THEN
      IF NOT DocumentSendingProfile.ProfileSelectionMethodDialog(ProfileSelectionMethod,FALSE) THEN
        EXIT;
    
    ...
Table<Document Sending Profile>.PROCEDURE<OnBeforeTrySendToEMail>
  Raised in: Table<Document Sending Profile>.PROCEDURE<TrySendToEMail>
    Code lines:
    OnBeforeTrySendToEMail(ReportUsage,RecordVariant,DocumentNoFieldNo,DocName,CustomerFieldNo,ShowDialog,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    IF ShowDialog THEN
      "E-Mail" := "E-Mail"::"Yes (Prompt for Settings)"
    ELSE
      "E-Mail" := "E-Mail"::"Yes (Use Default Settings)";
    
    "E-Mail Attachment" := "E-Mail Attachment"::PDF;
    ...
Table<Document Sending Profile>.PROCEDURE<OnBeforeTrySendToPrinter>
  Raised in: Table<Document Sending Profile>.PROCEDURE<TrySendToPrinter>
    Code lines:
    OnBeforeTrySendToPrinter(ReportUsage,RecordVariant,CustomerFieldNo,ShowDialog,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    IF ShowDialog THEN
      Printer := Printer::"Yes (Prompt for Settings)"
    ELSE
      Printer := Printer::"Yes (Use Default Settings)";
    
    SendToPrinter(ReportUsage,RecordVariant,CustomerFieldNo);
Table<Document Sending Profile>.PROCEDURE<OnCheckElectronicSendingEnabled>
  Raised in: Table<Document Sending Profile>.PROCEDURE<HasThirdPartyDocExchService>
    Code lines:
    OnCheckElectronicSendingEnabled(ExchServiceEnabled); <=====================
Table<Electronic Document Format>.PROCEDURE<OnDiscoverElectronicFormat>
  Raised in: Page<Electronic Document Format>.<OnOpenPage>
    Code lines:
    ElectronicDocumentFormat.INIT;
    ElectronicDocumentFormat.OnDiscoverElectronicFormat; <=====================
  Raised in: Page<Document Sending Profile>.<OnOpenPage>
    Code lines:
    ElectronicDocumentFormat.OnDiscoverElectronicFormat; <=====================
    ElectronicDocumentsVisible := NOT ElectronicDocumentFormat.ISEMPTY;
Table<Merge Duplicates Buffer>.PROCEDURE<OnAfterFindRelatedFields>
  Raised in: Table<Merge Duplicates Buffer>.PROCEDURE<FindRelatedFields>
    Code lines:
    ...
            TempTableRelationsMetadata := TableRelationsMetadata;
            TempTableRelationsMetadata.INSERT;
          END;
      UNTIL TableRelationsMetadata.NEXT = 0;
    IncludeDefaultDimTable(TempTableRelationsMetadata);
    OnAfterFindRelatedFields(TempTableRelationsMetadata); <=====================
    EXIT(TempTableRelationsMetadata.FINDSET);
Table<Item Entry Relation>.PROCEDURE<OnAfterInitFromTrackingSpec>
  Raised in: Table<Item Entry Relation>.PROCEDURE<InitFromTrackingSpec>
    Code lines:
    INIT;
    "Item Entry No." := TrackingSpecification."Entry No.";
    "Serial No." := TrackingSpecification."Serial No.";
    "Lot No." := TrackingSpecification."Lot No.";
    
    OnAfterInitFromTrackingSpec(Rec,TrackingSpecification); <=====================
Table<Whse. Item Tracking Line>.PROCEDURE<OnAfterCopyTrackingFromItemLedgEntry>
  Raised in: Table<Whse. Item Tracking Line>.PROCEDURE<CopyTrackingFromItemLedgEntry>
    Code lines:
    "Serial No." := ItemLedgerEntry."Serial No.";
    "Lot No." := ItemLedgerEntry."Lot No.";
    "Warranty Date" := ItemLedgerEntry."Warranty Date";
    "Expiration Date" := ItemLedgerEntry."Expiration Date";
    
    OnAfterCopyTrackingFromItemLedgEntry(Rec,ItemLedgerEntry); <=====================
Table<Whse. Item Tracking Line>.PROCEDURE<OnAfterCopyTrackingFromReservEntry>
  Raised in: Table<Whse. Item Tracking Line>.PROCEDURE<CopyTrackingFromReservEntry>
    Code lines:
    "Serial No." := ReservEntry."Serial No.";
    "Lot No." := ReservEntry."Lot No.";
    "Warranty Date" := ReservEntry."Warranty Date";
    "Expiration Date" := ReservEntry."Expiration Date";
    
    OnAfterCopyTrackingFromReservEntry(Rec,ReservEntry); <=====================
Table<Whse. Item Tracking Line>.PROCEDURE<OnAfterInitQtyToHandle>
  Raised in: Table<Whse. Item Tracking Line>.PROCEDURE<InitQtyToHandle>
    Code lines:
    "Qty. to Handle (Base)" := "Quantity (Base)" - "Quantity Handled (Base)";
    "Qty. to Handle" := CalcQty("Qty. to Handle (Base)");
    
    OnAfterInitQtyToHandle(Rec,xRec,CurrFieldNo); <=====================
Table<Whse. Item Tracking Line>.PROCEDURE<OnAfterLookUpTrackingSummary>
  Raised in: Table<Whse. Item Tracking Line>.PROCEDURE<LookUpTrackingSummary>
    Code lines:
    ...
          IF TempTrackingSpecification."Lot No." <> '' THEN
            VALIDATE("Lot No.",TempTrackingSpecification."Lot No.");
      END;
    END;
    
    OnAfterLookUpTrackingSummary(WhseItemTrackingLine,TrackingType,TempTrackingSpecification); <=====================
Table<Whse. Item Tracking Line>.PROCEDURE<OnBeforeLookUpTrackingSummary>
  Raised in: Table<Whse. Item Tracking Line>.PROCEDURE<LookUpTrackingSummary>
    Code lines:
    IsHandled := FALSE;
    OnBeforeLookUpTrackingSummary(WhseItemTrackingLine,TrackingType,MaxQuantity,SignFactor,TRUE,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH WhseItemTrackingLine DO BEGIN
      CASE "Source Type" OF
        DATABASE::"Warehouse Journal Line":
          BEGIN
            WhseJnlLine.GET("Source Batch Name","Source ID","Location Code","Source Ref. No.");
    ...
Table<Return Shipment Line>.PROCEDURE<OnAfterCopyFieldsFromReturnShipmentLine>
  Raised in: Table<Return Shipment Line>.PROCEDURE<InsertInvLineFromRetShptLine>
    Code lines:
    ...
      PurchLine."Sales Order Line No." := 0;
      PurchLine."Drop Shipment" := FALSE;
      PurchLine."Return Shipment No." := "Document No.";
      PurchLine."Return Shipment Line No." := "Line No.";
      PurchLine."Appl.-to Item Entry" := 0;
      OnAfterCopyFieldsFromReturnShipmentLine(Rec,PurchLine); <=====================
    
      IF NOT ExtTextLine THEN BEGIN
        PurchLine.VALIDATE(Quantity,Quantity - "Quantity Invoiced");
        PurchLine.VALIDATE("Direct Unit Cost",PurchOrderLine."Direct Unit Cost");
    ...
Table<Return Shipment Line>.PROCEDURE<OnAfterInitFromPurchLine>
  Raised in: Table<Return Shipment Line>.PROCEDURE<InitFromPurchLine>
    Code lines:
    ...
    IF PurchLine."Document Type" = PurchLine."Document Type"::"Return Order" THEN BEGIN
      "Return Order No." := PurchLine."Document No.";
      "Return Order Line No." := PurchLine."Line No.";
    END;
    
    OnAfterInitFromPurchLine(ReturnShptHeader,PurchLine,Rec); <=====================
Table<Return Shipment Line>.PROCEDURE<OnAfterInsertInvLineFromRetShptLine>
  Raised in: Table<Return Shipment Line>.PROCEDURE<InsertInvLineFromRetShptLine>
    Code lines:
    ...
      PurchLine."Shortcut Dimension 2 Code" := PurchOrderLine."Shortcut Dimension 2 Code";
      PurchLine."Dimension Set ID" := PurchOrderLine."Dimension Set ID";
    
      OnBeforeInsertInvLineFromRetShptLine(PurchLine,PurchOrderLine,Rec);
      PurchLine.INSERT;
      OnAfterInsertInvLineFromRetShptLine(PurchLine,PurchOrderLine,Rec); <=====================
    
      ItemTrackingMgt.CopyHandledItemTrkgToInvLine2(PurchOrderLine,PurchLine);
    
      NextLineNo := NextLineNo + 10000;
    ...
Table<Return Shipment Line>.PROCEDURE<OnBeforeInsertInvLineFromRetShptLine>
  Raised in: Table<Return Shipment Line>.PROCEDURE<InsertInvLineFromRetShptLine>
    Code lines:
    ...
          "Attached to Line No.");
      PurchLine."Shortcut Dimension 1 Code" := PurchOrderLine."Shortcut Dimension 1 Code";
      PurchLine."Shortcut Dimension 2 Code" := PurchOrderLine."Shortcut Dimension 2 Code";
      PurchLine."Dimension Set ID" := PurchOrderLine."Dimension Set ID";
    
      OnBeforeInsertInvLineFromRetShptLine(PurchLine,PurchOrderLine,Rec); <=====================
      PurchLine.INSERT;
      OnAfterInsertInvLineFromRetShptLine(PurchLine,PurchOrderLine,Rec);
    
      ItemTrackingMgt.CopyHandledItemTrkgToInvLine2(PurchOrderLine,PurchLine);
    ...
Table<Return Receipt Line>.PROCEDURE<OnAfterCopyFieldsFromReturnReceiptLine>
  Raised in: Table<Return Receipt Line>.PROCEDURE<InsertInvLineFromRetRcptLine>
    Code lines:
    ...
      SalesLine."Drop Shipment" := FALSE;
      SalesLine."Return Receipt No." := "Document No.";
      SalesLine."Return Receipt Line No." := "Line No.";
      SalesLine."Appl.-to Item Entry" := 0;
      SalesLine."Appl.-from Item Entry" := 0;
      OnAfterCopyFieldsFromReturnReceiptLine(Rec,SalesLine); <=====================
    
      IF NOT ExtTextLine THEN BEGIN
        SalesLine.VALIDATE(Quantity,Quantity - "Quantity Invoiced");
        SalesLine.VALIDATE("Unit Price",SalesOrderLine."Unit Price");
    ...
Table<Return Receipt Line>.PROCEDURE<OnAfterInitFromSalesLine>
  Raised in: Table<Return Receipt Line>.PROCEDURE<InitFromSalesLine>
    Code lines:
    ...
    IF SalesLine."Document Type" = SalesLine."Document Type"::"Return Order" THEN BEGIN
      "Return Order No." := SalesLine."Document No.";
      "Return Order Line No." := SalesLine."Line No.";
    END;
    
    OnAfterInitFromSalesLine(ReturnRcptHeader,SalesLine,Rec); <=====================
Table<Return Receipt Line>.PROCEDURE<OnAftertInsertInvLineFromRetRcptLine>
  Raised in: Table<Return Receipt Line>.PROCEDURE<InsertInvLineFromRetRcptLine>
    Code lines:
    ...
      SalesLine."Shortcut Dimension 2 Code" := SalesOrderLine."Shortcut Dimension 2 Code";
      SalesLine."Dimension Set ID" := SalesOrderLine."Dimension Set ID";
    
      OnBeforeInsertInvLineFromRetRcptLine(SalesLine,SalesOrderLine,Rec);
      SalesLine.INSERT;
      OnAftertInsertInvLineFromRetRcptLine(SalesLine,SalesOrderLine); <=====================
    
      ItemTrackingMgt.CopyHandledItemTrkgToInvLine(SalesOrderLine,SalesLine);
    
      NextLineNo := NextLineNo + 10000;
    ...
Table<Return Receipt Line>.PROCEDURE<OnBeforeInsertInvLineFromRetRcptLine>
  Raised in: Table<Return Receipt Line>.PROCEDURE<InsertInvLineFromRetRcptLine>
    Code lines:
    ...
      SalesLine."Document No." := TempSalesLine."Document No.";
      LanguageManagement.SetGlobalLanguageByCode(SalesHeader."Language Code");
      SalesLine.Description := STRSUBSTNO(Text000,"Document No.");
      LanguageManagement.RestoreGlobalLanguage;
      IsHandled := FALSE;
      OnBeforeInsertInvLineFromRetRcptLineBeforeInsertTextLine(Rec,SalesLine,NextLineNo,IsHandled); <=====================
      IF NOT IsHandled THEN BEGIN
        SalesLine.INSERT;
        NextLineNo := NextLineNo + 10000;
      END;
    ...
Table<Return Receipt Line>.PROCEDURE<OnBeforeInsertInvLineFromRetRcptLineBeforeInsertTextLine>
  Raised in: Table<Return Receipt Line>.PROCEDURE<InsertInvLineFromRetRcptLine>
    Code lines:
    ...
      SalesLine."Document No." := TempSalesLine."Document No.";
      LanguageManagement.SetGlobalLanguageByCode(SalesHeader."Language Code");
      SalesLine.Description := STRSUBSTNO(Text000,"Document No.");
      LanguageManagement.RestoreGlobalLanguage;
      IsHandled := FALSE;
      OnBeforeInsertInvLineFromRetRcptLineBeforeInsertTextLine(Rec,SalesLine,NextLineNo,IsHandled); <=====================
      IF NOT IsHandled THEN BEGIN
        SalesLine.INSERT;
        NextLineNo := NextLineNo + 10000;
      END;
    ...
Table<Error Message>.PROCEDURE<OnBeforeLogMessage>
  Raised in: Table<Error Message>.PROCEDURE<LogMessage>
    Code lines:
    IsHandled := FALSE;
    OnBeforeLogMessage(RecRelatedVariant,FieldNumber,MessageType,NewDescription,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF RecRelatedVariant.ISINTEGER THEN
      TableNumber := RecRelatedVariant
    ELSE BEGIN
      IF NOT DataTypeManagement.GetRecordRef(RecRelatedVariant,RecordRef) THEN
        EXIT(0);
    ...
Table<Sales Price>.PROCEDURE<OnBeforeNewSalesPriceInsert>
  Raised in: Table<Sales Price>.PROCEDURE<CopySalesPriceToCustomersSalesPrice>
    Code lines:
    IF SalesPrice.FINDSET THEN
      REPEAT
        NewSalesPrice := SalesPrice;
        NewSalesPrice."Sales Type" := NewSalesPrice."Sales Type"::Customer;
        NewSalesPrice."Sales Code" := CustNo;
        OnBeforeNewSalesPriceInsert(NewSalesPrice,SalesPrice); <=====================
        IF NewSalesPrice.INSERT THEN;
      UNTIL SalesPrice.NEXT = 0;
Table<Purchase Price>.PROCEDURE<OnBeforeNewPurchasePriceInsert>
  Raised in: Table<Purchase Price>.PROCEDURE<CopyPurchPriceToVendorsPurchPrice>
    Code lines:
    IF PurchPrice.FINDSET THEN
      REPEAT
        NewPurchasePrice := PurchPrice;
        NewPurchasePrice."Vendor No." := VendNo;
        OnBeforeNewPurchasePriceInsert(NewPurchasePrice,PurchPrice); <=====================
        IF NewPurchasePrice.INSERT THEN;
      UNTIL PurchPrice.NEXT = 0;
Table<Sales Price Worksheet>.PROCEDURE<OnAfterCalcCurrentPriceFound>
  Raised in: Table<Sales Price Worksheet>.PROCEDURE<CalcCurrentPrice>
    Code lines:
    ...
      "Price Includes VAT" := SalesPrice."Price Includes VAT";
      "Allow Line Disc." := SalesPrice."Allow Line Disc.";
      "Allow Invoice Disc." := SalesPrice."Allow Invoice Disc.";
      "VAT Bus. Posting Gr. (Price)" := SalesPrice."VAT Bus. Posting Gr. (Price)";
      PriceAlreadyExists := SalesPrice."Starting Date" = "Starting Date";
      OnAfterCalcCurrentPriceFound(Rec,SalesPrice); <=====================
    END ELSE BEGIN
      "Current Unit Price" := 0;
      PriceAlreadyExists := FALSE;
    END;
Table<Standard Address>.PROCEDURE<OnBeforeToString>
  Raised in: Table<Standard Address>.PROCEDURE<ToString>
    Code lines:
    IsHandled := FALSE;
    OnBeforeToString(Rec,FullAddress,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(FullAddress);
    
    FormatAddress.FormatAddr(AddressArray,'','','',Address,"Address 2",City,"Post Code",County,"Country/Region Code");
    FOR AddressPosition := 1 TO 8 DO BEGIN
      AddressArray[AddressPosition] := DELCHR(AddressArray[AddressPosition],'<',', ');
      IF AddressArray[AddressPosition] <> '' THEN BEGIN
        IF FullAddress = '' THEN
    ...
Table<Warehouse Employee>.PROCEDURE<OnBeforeCheckDefault>
  Raised in: Table<Warehouse Employee>.PROCEDURE<CheckDefault>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckDefault(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WhseEmployee.SETRANGE(Default,TRUE);
    WhseEmployee.SETRANGE("User ID","User ID");
    WhseEmployee.SETFILTER("Location Code",'<>%1',"Location Code");
    IF NOT WhseEmployee.ISEMPTY THEN
      ERROR(Text000);
Table<Bin Content>.PROCEDURE<OnBeforeGetWhseLocation>
  Raised in: Table<Bin Content>.PROCEDURE<GetWhseLocation>
    Code lines:
    IF USERID <> '' THEN BEGIN
      IsHandled := FALSE;
      OnBeforeGetWhseLocation(CurrentLocationCode,CurrentZoneCode,IsHandled); <=====================
      IF NOT IsHandled THEN BEGIN
        WhseEmployee.SETRANGE("User ID",USERID);
        IF WhseEmployee.ISEMPTY THEN
          ERROR(Text009,USERID);
      END;
      IF CurrentLocationCode <> '' THEN BEGIN
        IF NOT Location.GET(CurrentLocationCode) THEN BEGIN
    ...
Table<Bin Content>.PROCEDURE<OnCalcQtyBaseOnAfterSetFiltersForWhseActivLine>
  Raised in: Table<Bin Content>.PROCEDURE<CalcQtyBase>
    Code lines:
    ...
    WhseActivLine.SETRANGE("Location Code","Location Code");
    WhseActivLine.SETRANGE("Variant Code","Variant Code");
    WhseActivLine.SETRANGE("Unit of Measure Code","Unit of Measure Code");
    COPYFILTER("Lot No. Filter",WhseActivLine."Lot No.");
    COPYFILTER("Serial No. Filter",WhseActivLine."Serial No.");
    OnCalcQtyBaseOnAfterSetFiltersForWhseActivLine(WhseActivLine,Rec); <=====================
    WhseActivLine.CALCSUMS("Qty. Outstanding (Base)");
    
    WhseJnlLine.SETCURRENTKEY(
      "Item No.","From Bin Code","Location Code","Entry Type","Variant Code",
    ...
Table<Bin Content>.PROCEDURE<OnCalcQtyBaseOnAfterSetFiltersForWhseJnlLine>
  Raised in: Table<Bin Content>.PROCEDURE<CalcQtyBase>
    Code lines:
    ...
    WhseJnlLine.SETRANGE("Location Code","Location Code");
    WhseJnlLine.SETRANGE("Variant Code","Variant Code");
    WhseJnlLine.SETRANGE("Unit of Measure Code","Unit of Measure Code");
    COPYFILTER("Lot No. Filter",WhseJnlLine."Lot No.");
    COPYFILTER("Serial No. Filter",WhseJnlLine."Serial No.");
    OnCalcQtyBaseOnAfterSetFiltersForWhseJnlLine(WhseJnlLine,Rec); <=====================
    WhseJnlLine.CALCSUMS("Qty. (Absolute, Base)");
    
    CALCFIELDS("Quantity (Base)");
    EXIT(
    ...
Table<Bin Content>.PROCEDURE<OnCalcTotalATOComponentsPickQtyBaseOnAfterSetFilters>
  Raised in: Table<Bin Content>.PROCEDURE<CalcTotalATOComponentsPickQtyBase>
    Code lines:
    ...
    WarehouseActivityLine.SETRANGE("Action Type",WarehouseActivityLine."Action Type"::Take);
    WarehouseActivityLine.SETRANGE("Assemble to Order",TRUE);
    WarehouseActivityLine.SETRANGE("ATO Component",TRUE);
    WarehouseActivityLine.SETFILTER("Lot No.",GETFILTER("Lot No. Filter"));
    WarehouseActivityLine.SETFILTER("Serial No.",GETFILTER("Serial No. Filter"));
    OnCalcTotalATOComponentsPickQtyBaseOnAfterSetFilters(WarehouseActivityLine,Rec); <=====================
    WarehouseActivityLine.CALCSUMS("Qty. Outstanding (Base)");
    EXIT(WarehouseActivityLine."Qty. Outstanding (Base)");
Table<Bin Content>.PROCEDURE<OnCalcTotalNegativeAdjmtQtyBaseOnAfterSetFilters>
  Raised in: Table<Bin Content>.PROCEDURE<CalcTotalNegativeAdjmtQtyBase>
    Code lines:
    WarehouseJournalLine.SETRANGE("Location Code","Location Code");
    WarehouseJournalLine.SETRANGE("From Bin Code","Bin Code");
    WarehouseJournalLine.SETRANGE("Item No.","Item No.");
    WarehouseJournalLine.SETRANGE("Variant Code","Variant Code");
    OnCalcTotalNegativeAdjmtQtyBaseOnAfterSetFilters(WarehouseJournalLine,Rec); <=====================
    IF (GETFILTER("Lot No. Filter") = '') AND (GETFILTER("Serial No. Filter") = '') THEN BEGIN
      WarehouseJournalLine.CALCSUMS("Qty. (Absolute, Base)");
      TotalNegativeAdjmtQtyBase := WarehouseJournalLine."Qty. (Absolute, Base)";
    END ELSE BEGIN
      WhseItemTrackingLine.SETRANGE("Location Code","Location Code");
    ...
Table<Bin Content>.PROCEDURE<OnCalcTotalQtyBaseOnAfterSetFilters>
  Raised in: Table<Bin Content>.PROCEDURE<CalcTotalQtyBase>
    Code lines:
    ...
    WarehouseEntry.SETRANGE("Bin Code","Bin Code");
    WarehouseEntry.SETRANGE("Item No.","Item No.");
    WarehouseEntry.SETRANGE("Variant Code","Variant Code");
    WarehouseEntry.SETFILTER("Lot No.",GETFILTER("Lot No. Filter"));
    WarehouseEntry.SETFILTER("Serial No.",GETFILTER("Serial No. Filter"));
    OnCalcTotalQtyBaseOnAfterSetFilters(WarehouseEntry,Rec); <=====================
    WarehouseEntry.CALCSUMS("Qty. (Base)");
    EXIT(WarehouseEntry."Qty. (Base)");
Table<Bin Type>.PROCEDURE<OnBeforeCheckCombination>
  Raised in: Table<Bin Type>.PROCEDURE<CheckCombination>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckCombination(Rec,CalledByFieldNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    CASE CalledByFieldNo OF
      0:
        BEGIN
          BinType.SETFILTER(Code,'<>%1',Code);
          BinType.SETRANGE(Receive,Receive);
    ...
Table<Warehouse Journal Line>.PROCEDURE<OnBeforeCheckName>
  Raised in: Table<Warehouse Journal Line>.PROCEDURE<CheckName>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckName(CurrentJnlBatchName,CurrentLocationCode,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WhseJnlBatch.GET(
      WhseJnlLine.GETRANGEMAX("Journal Template Name"),CurrentJnlBatchName,CurrentLocationCode);
    IF (USERID <> '') AND NOT WhseEmployee.GET(USERID,CurrentLocationCode) THEN
      ERROR(Text005,CurrentLocationCode,CurrentJnlBatchName,USERID);
Table<Warehouse Journal Line>.PROCEDURE<OnBeforeCheckTemplateName>
  Raised in: Table<Warehouse Journal Line>.PROCEDURE<CheckTemplateName>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckTemplateName(CurrentJnlTemplateName,CurrentJnlBatchName,CurrentLocationCode,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF FindExistingBatch(CurrentJnlTemplateName,CurrentLocationCode,CurrentJnlBatchName) THEN
      EXIT;
    
    WhseJnlBatch.INIT;
    WhseJnlBatch."Journal Template Name" := CurrentJnlTemplateName;
    ...
Table<Warehouse Receipt Header>.PROCEDURE<OnAfterAssistEdit>
  Raised in: Table<Warehouse Receipt Header>.PROCEDURE<AssistEdit>
    Code lines:
    ...
        Rec := WhseRcptHeader;
        EXIT(TRUE);
      END;
    END;
    
    OnAfterAssistEdit(OldWhseRcptHeader); <=====================
Table<Warehouse Receipt Header>.PROCEDURE<OnBeforeDeleteWhseRcptRelatedLines>
  Raised in: Table<Warehouse Receipt Header>.PROCEDURE<DeleteRelatedLines>
    Code lines:
    WhseRcptLine.SETRANGE("No.","No.");
    IF UseTableTrigger THEN BEGIN
      IF WhseRcptLine.FIND('-') THEN BEGIN
        REPEAT
          OnBeforeDeleteWhseRcptRelatedLines(WhseRcptLine); <=====================
          IF (WhseRcptLine.Quantity <> WhseRcptLine."Qty. Outstanding") AND
             (WhseRcptLine."Qty. Outstanding" <> 0)
          THEN
            IF NOT CONFIRM(Text008,FALSE) THEN
              ERROR(Text009)
    ...
Table<Warehouse Receipt Header>.PROCEDURE<OnBeforeErrorIfUserIsNotWhseEmployee>
  Raised in: Table<Warehouse Receipt Header>.PROCEDURE<ErrorIfUserIsNotWhseEmployee>
    Code lines:
    IsHandled := FALSE;
    OnBeforeErrorIfUserIsNotWhseEmployee("Location Code",IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF USERID <> '' THEN BEGIN
      WhseEmployee.SETRANGE("User ID",USERID);
      IF WhseEmployee.ISEMPTY THEN
        ERROR(Text002,USERID);
    END;
Table<Warehouse Receipt Line>.PROCEDURE<OnAfterOpenItemTrackingLines>
  Raised in: Table<Warehouse Receipt Line>.PROCEDURE<OpenItemTrackingLines>
    Code lines:
    ...
          IF TransferLine.GET("Source No.","Source Line No.") THEN
            ReserveTransferLine.CallItemTracking2(TransferLine,Direction,SecondSourceQtyArray);
        END
    END;
    
    OnAfterOpenItemTrackingLines(Rec,SecondSourceQtyArray); <=====================
Table<Warehouse Receipt Line>.PROCEDURE<OnBeforeOpenItemTrackingLines>
  Raised in: Table<Warehouse Receipt Line>.PROCEDURE<OpenItemTrackingLines>
    Code lines:
    IsHandled := FALSE;
    OnBeforeOpenItemTrackingLines(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    TESTFIELD("No.");
    TESTFIELD("Qty. (Base)");
    
    GetItem;
    Item.TESTFIELD("Item Tracking Code");
    ...
Table<Warehouse Receipt Line>.PROCEDURE<OnBeforeValidateQtyToReceive>
  Raised in: Table<Warehouse Receipt Line>.Field<Qty. to Receive>.<OnValidate>
    Code lines:
    IsHandled := FALSE;
    OnBeforeValidateQtyToReceive(Rec,IsHandled); <=====================
    IF NOT IsHandled THEN
      IF "Qty. to Receive" > "Qty. Outstanding" THEN
        ERROR(Text002,"Qty. Outstanding");
    
    GetLocation("Location Code");
    IF Location."Directed Put-away and Pick" THEN BEGIN
      WMSMgt.CalcCubageAndWeight(
        "Item No.","Unit of Measure Code","Qty. to Receive",Cubage,Weight);
    ...
Table<Posted Whse. Receipt Header>.PROCEDURE<OnBeforeErrorIfUserIsNotWhseEmployee>
  Raised in: Table<Posted Whse. Receipt Header>.PROCEDURE<ErrorIfUserIsNotWhseEmployee>
    Code lines:
    IsHandled := FALSE;
    OnBeforeErrorIfUserIsNotWhseEmployee("Location Code",IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF USERID <> '' THEN BEGIN
      WhseEmployee.SETRANGE("User ID",USERID);
      IF WhseEmployee.ISEMPTY THEN
        ERROR(Text000,USERID);
    END;
Table<Warehouse Shipment Header>.PROCEDURE<OnAfterAssistEdit>
  Raised in: Table<Warehouse Shipment Header>.PROCEDURE<AssistEdit>
    Code lines:
    ...
        Rec := WhseShptHeader;
        EXIT(TRUE);
      END;
    END;
    
    OnAfterAssistEdit(OldWhseShptHeader); <=====================
Table<Warehouse Shipment Header>.PROCEDURE<OnBeforeErrorIfUserIsNotWhseEmployee>
  Raised in: Table<Warehouse Shipment Header>.PROCEDURE<ErrorIfUserIsNotWhseEmployee>
    Code lines:
    IsHandled := FALSE;
    OnBeforeErrorIfUserIsNotWhseEmployee("Location Code",IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF USERID <> '' THEN BEGIN
      WhseEmployee.SETRANGE("User ID",USERID);
      IF WhseEmployee.ISEMPTY THEN
        ERROR(Text002,USERID);
    END;
Table<Warehouse Shipment Header>.PROCEDURE<OnBeforeWhseShptLineDelete>
  Raised in: Table<Warehouse Shipment Header>.PROCEDURE<DeleteWarehouseShipmentLines>
    Code lines:
    ...
        IF WhseShptLine."Assemble to Order" THEN
          WhseShptLine.VALIDATE("Qty. to Ship",0);
        ItemTrackingMgt.DeleteWhseItemTrkgLines(DATABASE::"Warehouse Shipment Line",0,WhseShptLine."No.",
          '',0,WhseShptLine."Line No.",WhseShptLine."Location Code",TRUE);
    
        OnBeforeWhseShptLineDelete(WhseShptLine); <=====================
        WhseShptLine.DELETE;
      UNTIL WhseShptLine.NEXT = 0;
Table<Warehouse Shipment Line>.PROCEDURE<OnAfterCreatePickDoc>
  Raised in: Table<Warehouse Shipment Line>.PROCEDURE<CreatePickDocFromWhseShpt>
    Code lines:
    ...
      WhseShipmentCreatePick.USEREQUESTPAGE(NOT HideValidationDialog);
      WhseShipmentCreatePick.RUNMODAL;
      WhseShipmentCreatePick.GetResultMessage;
      CLEAR(WhseShipmentCreatePick);
    END;
    OnAfterCreatePickDoc(WhseShptHeader); <=====================
Table<Warehouse Shipment Line>.PROCEDURE<OnAfterGetWhseShptHeader>
  Raised in: Table<Warehouse Shipment Line>.PROCEDURE<GetWhseShptHeader>
    Code lines:
    IF WhseShptHeader."No." <> WhseShptNo THEN
      WhseShptHeader.GET(WhseShptNo);
    
    OnAfterGetWhseShptHeader(Rec,WhseShptHeader,WhseShptNo); <=====================
Table<Warehouse Shipment Line>.PROCEDURE<OnBeforeCompareQtyToShipAndOutstandingQty>
  Raised in: Table<Warehouse Shipment Line>.Field<Qty. to Ship>.<OnValidate>
    Code lines:
    ...
    IF NOT IsHandled THEN
      IF ("Qty. to Ship" > "Qty. Picked" - "Qty. Shipped") AND Location."Require Pick" AND NOT "Assemble to Order" THEN
        FIELDERROR("Qty. to Ship",STRSUBSTNO(Text002,"Qty. Picked" - "Qty. Shipped"));
    
    IsHandled := FALSE;
    OnBeforeCompareQtyToShipAndOutstandingQty(Rec,IsHandled); <=====================
    IF NOT IsHandled THEN
      IF "Qty. to Ship" > "Qty. Outstanding" THEN
        ERROR(Text000,"Qty. Outstanding");
    
    ...
Table<Warehouse Shipment Line>.PROCEDURE<OnBeforeCompareShipAndPickQty>
  Raised in: Table<Warehouse Shipment Line>.Field<Qty. to Ship>.<OnValidate>
    Code lines:
    GetLocation("Location Code");
    
    IsHandled := FALSE;
    OnBeforeCompareShipAndPickQty(Rec,IsHandled); <=====================
    IF NOT IsHandled THEN
      IF ("Qty. to Ship" > "Qty. Picked" - "Qty. Shipped") AND Location."Require Pick" AND NOT "Assemble to Order" THEN
        FIELDERROR("Qty. to Ship",STRSUBSTNO(Text002,"Qty. Picked" - "Qty. Shipped"));
    
    IsHandled := FALSE;
    OnBeforeCompareQtyToShipAndOutstandingQty(Rec,IsHandled);
    ...
Table<Warehouse Shipment Line>.PROCEDURE<OnBeforeCreatePickDoc>
  Raised in: Table<Warehouse Shipment Line>.PROCEDURE<CreatePickDocFromWhseShpt>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCreatePickDoc(WhseShptLine,WhseShptHeader,HideValidationDialog,IsHandled); <=====================
    IF NOT IsHandled THEN BEGIN
      WhseShipmentCreatePick.SetWhseShipmentLine(WhseShptLine,WhseShptHeader);
      WhseShipmentCreatePick.SetHideValidationDialog(HideValidationDialog);
      WhseShipmentCreatePick.USEREQUESTPAGE(NOT HideValidationDialog);
      WhseShipmentCreatePick.RUNMODAL;
      WhseShipmentCreatePick.GetResultMessage;
      CLEAR(WhseShipmentCreatePick);
    END;
Table<Warehouse Shipment Line>.PROCEDURE<OnBeforeOpenItemTrackingLines>
  Raised in: Table<Warehouse Shipment Line>.PROCEDURE<OpenItemTrackingLines>
    Code lines:
    IsHandled := FALSE;
    OnBeforeOpenItemTrackingLines(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    TESTFIELD("No.");
    TESTFIELD("Qty. (Base)");
    
    GetItem;
    Item.TESTFIELD("Item Tracking Code");
    ...
Table<Warehouse Shipment Line>.PROCEDURE<OnBeforeTestReleased>
  Raised in: Table<Warehouse Shipment Line>.PROCEDURE<TestReleased>
    Code lines:
    TESTFIELD("No.");
    GetWhseShptHeader("No.");
    OnBeforeTestReleased(WhseShptHeader); <=====================
    IF NOT StatusCheckSuspended THEN
      WhseShptHeader.TESTFIELD(Status,WhseShptHeader.Status::Open);
Table<Warehouse Shipment Line>.PROCEDURE<OnValidateQuantityStatusUpdate>
  Raised in: Table<Warehouse Shipment Line>.Field<Quantity>.<OnValidate>
    Code lines:
    ...
    GetLocation("Location Code");
    IF Location."Directed Put-away and Pick" THEN
      CheckBin(xRec.Cubage,xRec.Weight);
    
    IsHandled := FALSE;
    OnValidateQuantityStatusUpdate(Rec,xRec,IsHandled); <=====================
    IF NOT IsHandled THEN BEGIN
      Status := CalcStatusShptLine;
      IF (Status <> xRec.Status) AND (NOT ISTEMPORARY) THEN BEGIN
        GetWhseShptHeader("No.");
    ...
Table<Posted Whse. Shipment Header>.PROCEDURE<OnBeforeErrorIfUserIsNotWhseEmployee>
  Raised in: Table<Posted Whse. Shipment Header>.PROCEDURE<ErrorIfUserIsNotWhseEmployee>
    Code lines:
    IsHandled := FALSE;
    OnBeforeErrorIfUserIsNotWhseEmployee("Location Code",IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF USERID <> '' THEN BEGIN
      WhseEmployee.SETRANGE("User ID",USERID);
      IF WhseEmployee.ISEMPTY THEN
        ERROR(Text000,USERID);
    END;
Table<Whse. Worksheet Line>.PROCEDURE<OnAfterAutofillQtyToHandle>
  Raised in: Table<Whse. Worksheet Line>.PROCEDURE<AutofillQtyToHandle>
    Code lines:
    ...
      SetHideValidationDialog(FALSE);
      IF NotEnough THEN
        MESSAGE(Text011);
    END;
    
    OnAfterAutofillQtyToHandle(WhseWkshLine); <=====================
Table<Whse. Worksheet Line>.PROCEDURE<OnBeforeCheckBin>
  Raised in: Table<Whse. Worksheet Line>.PROCEDURE<CheckBin>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckBin(Rec,LocationCode,BinCode,Inbound,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    GetLocation(LocationCode);
    IF NOT Location."Directed Put-away and Pick" THEN
      EXIT;
    
    GetBin(LocationCode,BinCode);
    ...
Table<Whse. Worksheet Line>.PROCEDURE<OnBeforeCheckTemplateName>
  Raised in: Table<Whse. Worksheet Line>.PROCEDURE<CheckTemplateName>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckTemplateName(CurrentWkshTemplateName,CurrentWkshName,CurrentLocationCode,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WhseWkshTemplate.GET(CurrentWkshTemplateName);
    WhseWkshName.SETRANGE("Worksheet Template Name",CurrentWkshTemplateName);
    IF NOT WhseWkshName.GET(CurrentWkshTemplateName,CurrentWkshName,CurrentLocationCode) OR
       ((USERID <> '') AND NOT WhseEmployee.GET(USERID,CurrentLocationCode))
    THEN BEGIN
    ...
Table<Whse. Worksheet Line>.PROCEDURE<OnBeforeCheckWhseEmployee>
  Raised in: Table<Whse. Worksheet Line>.PROCEDURE<CheckWhseEmployee>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckWhseEmployee("Location Code",IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF USERID <> '' THEN BEGIN
      WhseEmployee.SETRANGE("User ID",USERID);
      IF WhseEmployee.ISEMPTY THEN
        ERROR(Text007,USERID);
    END;
Table<Whse. Worksheet Line>.PROCEDURE<OnBeforeCheckWhseWkshName>
  Raised in: Table<Whse. Worksheet Line>.PROCEDURE<CheckWhseWkshName>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckWhseWkshName(CurrentWkshName,CurrentLocationCode,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WhseWkshName.GET(
      WhseWkshLine.GETRANGEMAX("Worksheet Template Name"),CurrentWkshName,CurrentLocationCode);
    IF (USERID <> '') AND NOT WhseEmployee.GET(USERID,CurrentLocationCode) THEN
      ERROR(Text009,CurrentLocationCode,WhseWkshName.TABLECAPTION,CurrentWkshName,USERID);
Table<Whse. Worksheet Line>.PROCEDURE<OnCalcAvailQtyToMoveOnAfterSetFilters>
  Raised in: Table<Whse. Worksheet Line>.PROCEDURE<CalcAvailQtyToMove>
    Code lines:
    ...
        WhseWkshLine.SETRANGE("Item No.","Item No.");
        WhseWkshLine.SETRANGE("From Bin Code","From Bin Code");
        WhseWkshLine.SETRANGE("Location Code","Location Code");
        WhseWkshLine.SETRANGE("Variant Code","Variant Code");
        WhseWkshLine.SETRANGE("From Unit of Measure Code","From Unit of Measure Code");
        OnCalcAvailQtyToMoveOnAfterSetFilters(WhseWkshLine,Rec); <=====================
        WhseWkshLine.CALCSUMS("Qty. to Handle (Base)");
        QtyAvailToMoveBase := QtyAvailToMoveBase - WhseWkshLine."Qty. to Handle (Base)";
      END;
    END;
Table<Whse. Internal Put-away Line>.PROCEDURE<OnBeforeOpenItemTrackingLines>
  Raised in: Table<Whse. Internal Put-away Line>.PROCEDURE<OpenItemTrackingLines>
    Code lines:
    OnBeforeOpenItemTrackingLines(Rec); <=====================
    
    TESTFIELD("Item No.");
    TESTFIELD("Qty. (Base)");
    TempWhseWorksheetLine.InitLineWithItem(
      TempWhseWorksheetLine."Whse. Document Type"::"Internal Put-away","No.","Line No.",
      "Location Code","Item No.","Variant Code",
      "Qty. (Base)","Qty. (Base)" - "Qty. Put Away (Base)" - "Put-away Qty. (Base)","Qty. per Unit of Measure");
    
    OnOpenItemTrackingLinesOnBeforeSetSource(Rec,TempWhseWorksheetLine);
    ...
Table<Whse. Internal Put-away Line>.PROCEDURE<OnOpenItemTrackingLinesOnBeforeSetSource>
  Raised in: Table<Whse. Internal Put-away Line>.PROCEDURE<OpenItemTrackingLines>
    Code lines:
    ...
    TempWhseWorksheetLine.InitLineWithItem(
      TempWhseWorksheetLine."Whse. Document Type"::"Internal Put-away","No.","Line No.",
      "Location Code","Item No.","Variant Code",
      "Qty. (Base)","Qty. (Base)" - "Qty. Put Away (Base)" - "Put-away Qty. (Base)","Qty. per Unit of Measure");
    
    OnOpenItemTrackingLinesOnBeforeSetSource(Rec,TempWhseWorksheetLine); <=====================
    WhseItemTrackingLines.SetSource(TempWhseWorksheetLine,DATABASE::"Whse. Internal Put-away Line");
    WhseItemTrackingLines.RUNMODAL;
    CLEAR(WhseItemTrackingLines);
Table<Bin Creation Worksheet Line>.PROCEDURE<OnBeforeCheckName>
  Raised in: Table<Bin Creation Worksheet Line>.PROCEDURE<CheckName>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckName(CurrentWkshName,CurrentLocationCode,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    BinCreateWkshName.GET(
      BinCreateWkshLine.GETRANGEMAX("Worksheet Template Name"),CurrentWkshName,CurrentLocationCode);
    IF (USERID <> '') AND NOT WhseEmployee.GET(USERID,CurrentLocationCode) THEN
      ERROR(Text008,CurrentLocationCode,CurrentWkshName,USERID);
Table<Internal Movement Header>.PROCEDURE<OnBeforeOpenInternalMovementHeader>
  Raised in: Table<Internal Movement Header>.PROCEDURE<OpenInternalMovementHeader>
    Code lines:
    IsHandled := FALSE;
    OnBeforeOpenInternalMovementHeader(InternalMovementHeader,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WhseEmployee.SETRANGE("Location Code",InternalMovementHeader."Location Code");
    IF NOT WhseEmployee.ISEMPTY THEN
      CurrentLocationCode := InternalMovementHeader."Location Code"
    ELSE
      CurrentLocationCode := GetDefaultOrFirstAllowedLocation;
    ...
Table<Bin>.PROCEDURE<OnAfterSetUpNewLine>
  Raised in: Table<Bin>.PROCEDURE<SetUpNewLine>
    Code lines:
    ...
        "Special Equipment Code" := Zone."Special Equipment Code";
        "Bin Ranking" := Zone."Zone Ranking";
        "Cross-Dock Bin" := Zone."Cross-Dock Bin Zone";
      END;
    
    OnAfterSetUpNewLine(Rec); <=====================
Table<Standard General Journal>.PROCEDURE<OnAfterCopyGenJnlFromStdJnl>
  Raised in: Table<Standard General Journal>.PROCEDURE<CopyGenJnlFromStdJnl>
    Code lines:
    ...
    GenJnlLine."Dimension Set ID" := StdGenJnlLine."Dimension Set ID";
    IF GenJnlBatch."Allow VAT Difference" THEN
      GenJnlLine.VALIDATE("Bal. VAT Amount",StdGenJnlLine."Bal. VAT Amount");
    IF DocumentNo <> '' THEN
      GenJnlLine."Document No." := DocumentNo;
    OnAfterCopyGenJnlFromStdJnl(GenJnlLine,StdGenJnlLine); <=====================
    GenJnlLine.INSERT(TRUE);
    
    LastGenJnlLine := GenJnlLine;
Table<Item Attribute>.PROCEDURE<OnBeforeCheckNameUniqueness>
  Raised in: Table<Item Attribute>.PROCEDURE<CheckNameUniqueness>
    Code lines:
    OnBeforeCheckNameUniqueness(ItemAttribute,Rec); <=====================
    
    ItemAttribute.SETRANGE(Name,NameToCheck);
    ItemAttribute.SETFILTER(ID,'<>%1',ItemAttribute.ID);
    IF NOT ItemAttribute.ISEMPTY THEN
      ERROR(NameAlreadyExistsErr,NameToCheck);
Table<Item Attribute Value>.PROCEDURE<OnAfterHasBeenUsed>
  Raised in: Table<Item Attribute Value>.PROCEDURE<HasBeenUsed>
    Code lines:
    ItemAttributeValueMapping.SETRANGE("Item Attribute ID","Attribute ID");
    ItemAttributeValueMapping.SETRANGE("Item Attribute Value ID",ID);
    AttributeHasBeenUsed := NOT ItemAttributeValueMapping.ISEMPTY;
    OnAfterHasBeenUsed(Rec,AttributeHasBeenUsed); <=====================
    EXIT(AttributeHasBeenUsed);
Table<Item Attribute Value>.PROCEDURE<OnGetValueInCurrentLanguage>
  Raised in: Table<Item Attribute Value>.PROCEDURE<GetValueInCurrentLanguageWithoutUnitOfMeasure>
    Code lines:
    ...
          IF Value <> '' THEN
            EXIT(FORMAT("Numeric Value"));
        ItemAttribute.Type::Date:
          EXIT(FORMAT("Date Value"));
        ELSE BEGIN
          OnGetValueInCurrentLanguage(ItemAttribute,Rec); <=====================
          EXIT(Value);
        END;
      END;
    EXIT('');
Table<Item Attribute Value>.PROCEDURE<OnLoadItemAttributesFactBoxDataOnBeforeInsert>
  Raised in: Table<Item Attribute Value>.PROCEDURE<LoadItemAttributesFactBoxData>
    Code lines:
    ...
    ItemAttributeValueMapping.SETRANGE("No.",KeyValue);
    IF ItemAttributeValueMapping.FINDSET THEN
      REPEAT
        IF ItemAttributeValue.GET(ItemAttributeValueMapping."Item Attribute ID",ItemAttributeValueMapping."Item Attribute Value ID") THEN BEGIN
          TRANSFERFIELDS(ItemAttributeValue);
          OnLoadItemAttributesFactBoxDataOnBeforeInsert(ItemAttributeValueMapping,Rec); <=====================
          INSERT;
        END
      UNTIL ItemAttributeValueMapping.NEXT = 0;
Table<Item Attribute Value Selection>.PROCEDURE<OnBeforeFindItemAttributeCaseInsensitive>
  Raised in: Table<Item Attribute Value Selection>.PROCEDURE<FindItemAttributeCaseInsensitive>
    Code lines:
    OnBeforeFindItemAttributeCaseInsensitive(ItemAttribute,Rec); <=====================
    
    ItemAttribute.SETRANGE(Name,"Attribute Name");
    IF ItemAttribute.FINDFIRST THEN
      EXIT;
    
    AttributeName := LOWERCASE("Attribute Name");
    ItemAttribute.SETRANGE(Name);
    IF ItemAttribute.FINDSET THEN
      REPEAT
    ...
Table<Item Attribute Value Selection>.PROCEDURE<OnInsertRecordOnBeforeItemAttrValueSelectionInsert>
  Raised in: Table<Item Attribute Value Selection>.PROCEDURE<InsertRecord>
    Code lines:
    ...
    Value := TempItemAttributeValue.GetValueInCurrentLanguageWithoutUnitOfMeasure;
    Blocked := TempItemAttributeValue.Blocked;
    "Unit of Measure" := ItemAttribute."Unit of Measure";
    "Inherited-From Table ID" := DefinedOnTableID;
    "Inherited-From Key Value" := DefinedOnKeyValue;
    OnInsertRecordOnBeforeItemAttrValueSelectionInsert(Rec,TempItemAttributeValue); <=====================
    INSERT;
Table<Standard General Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Standard General Journal Line>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[3] := No3;
    TableID[4] := Type4;
    No[4] := No4;
    TableID[5] := Type5;
    No[5] := No5;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
Table<Standard Item Journal>.PROCEDURE<OnAfterCopyItemJnlFromStdJnl>
  Raised in: Table<Standard Item Journal>.PROCEDURE<CopyItemJnlFromStdJnl>
    Code lines:
    ...
      ROUND(ItemJnlLine."Invoiced Quantity" * ItemJnlLine."Qty. per Unit of Measure",UOMMgt.QtyRndPrecision);
    
    ItemJnlLine."Dimension Set ID" := StdItemJnlLine."Dimension Set ID";
    ItemJnlLine.INSERT(TRUE);
    
    OnAfterCopyItemJnlFromStdJnl(ItemJnlLine); <=====================
    
    LastItemJnlLine := ItemJnlLine;
Table<Standard Item Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Standard Item Journal Line>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[1] := No1;
    TableID[2] := Type2;
    No[2] := No2;
    TableID[3] := Type3;
    No[3] := No3;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
Table<Report Selections>.PROCEDURE<OnAfterGetEmailBodyCustomer>
  Raised in: Table<Report Selections>.PROCEDURE<GetEmailBodyCustomText>
    Code lines:
    ...
          O365HTMLTemplMgt.CreateEmailBodyFromReportSelections(Rec,RecordVariant,CustEmailAddress,EmailBodyText);
    END;
    
    CustEmailAddress := GetEmailAddress(ReportUsage,RecordVariant,CustNo,TempBodyReportSelections);
    
    OnAfterGetEmailBodyCustomer(CustEmailAddress,ServerEmailBodyFilePath); <=====================
    
    EXIT(TRUE);
Table<Report Selections>.PROCEDURE<OnAfterGetEmailBodyVendor>
  Raised in: Table<Report Selections>.PROCEDURE<GetEmailBodyVendor>
    Code lines:
    ...
    FoundVendorEmailAddress :=
      FindEmailAddressForEmailLayout(TempBodyReportSelections."Email Body Layout Code",VendorNo,ReportUsage,DATABASE::Vendor);
    IF FoundVendorEmailAddress <> '' THEN
      VendorEmailAddress := FoundVendorEmailAddress;
    
    OnAfterGetEmailBodyVendor(VendorEmailAddress,ServerEmailBodyFilePath); <=====================
    
    EXIT(TRUE);
Table<Report Selections>.PROCEDURE<OnAfterPrintDocument>
  Raised in: Table<Report Selections>.PROCEDURE<PrintDocumentsWithCheckGUIYesNoCommon>
    Code lines:
    ...
        IsHandled := FALSE;
        OnBeforePrintDocument(TempReportSelections,IsGUI,RecVarToPrint,IsHandled);
        IF NOT IsHandled THEN
          REPORT.RUNMODAL(TempReportSelections."Report ID",IsGUI,FALSE,RecVarToPrint);
    
        OnAfterPrintDocument(TempReportSelections,IsGUI,RecVarToPrint); <=====================
    
        ReportLayoutSelection.SetTempLayoutSelected('');
      UNTIL TempReportSelections.NEXT = 0;
Table<Report Selections>.PROCEDURE<OnAfterSendEmailDirectly>
  Raised in: Table<Report Selections>.PROCEDURE<SendEmailDirectly>
    Code lines:
    ...
              ReportUsage);
        UNTIL NEXT = 0;
      END;
    END;
    
    OnAfterSendEmailDirectly(ReportUsage,RecordVariant,AllEmailsWereSuccessful); <=====================
    EXIT(AllEmailsWereSuccessful);
Table<Report Selections>.PROCEDURE<OnBeforeGetCustEmailAddress>
  Raised in: Table<Report Selections>.PROCEDURE<GetCustEmailAddress>
    Code lines:
    OnBeforeGetCustEmailAddress(BillToCustomerNo,ToAddress,ReportUsage,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(ToAddress);
    
    IF Customer.GET(BillToCustomerNo) THEN
      ToAddress := Customer."E-Mail"
    ELSE
      IF Contact.GET(BillToCustomerNo) THEN
        ToAddress := Contact."E-Mail";
    EXIT(ToAddress);
Table<Report Selections>.PROCEDURE<OnBeforeGetEmailBodyCustomer>
  Raised in: Table<Report Selections>.PROCEDURE<GetEmailBodyCustomText>
    Code lines:
    ServerEmailBodyFilePath := '';
    
    OnBeforeGetEmailBodyCustomer; <=====================
    
    IF CustEmailAddress = '' THEN
      CustEmailAddress := GetEmailAddressIgnoringLayout(ReportUsage,RecordVariant,CustNo);
    
    IF NOT FindEmailBodyUsage(ReportUsage,CustNo,TempBodyReportSelections) THEN BEGIN
      IsHandled := FALSE;
      OnGetEmailBodyCustomerTextOnAfterNotFindEmailBodyUsage(
    ...
Table<Report Selections>.PROCEDURE<OnBeforeGetEmailBodyVendor>
  Raised in: Table<Report Selections>.PROCEDURE<GetEmailBodyVendor>
    Code lines:
    ServerEmailBodyFilePath := '';
    
    OnBeforeGetEmailBodyVendor; <=====================
    
    VendorEmailAddress := GetVendorEmailAddress(VendorNo,RecordVariant,ReportUsage);
    
    IF NOT FindEmailBodyUsageVendor(ReportUsage,VendorNo,TempBodyReportSelections) THEN BEGIN
      IsHandled := FALSE;
      OnGetEmailBodyVendorTextOnAfterNotFindEmailBodyUsage(
        ReportUsage,RecordVariant,VendorNo,TempBodyReportSelections,IsHandled);
    ...
Table<Report Selections>.PROCEDURE<OnBeforeGetVendorEmailAddress>
  Raised in: Table<Report Selections>.PROCEDURE<GetVendorEmailAddress>
    Code lines:
    OnBeforeGetVendorEmailAddress(BuyFromVendorNo,ToAddress,ReportUsage,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(ToAddress);
    
    ToAddress := GetPurchaseOrderEmailAddress(BuyFromVendorNo,RecVar,ReportUsage);
    
    IF ToAddress = '' THEN
      IF Vendor.GET(BuyFromVendorNo) THEN
        ToAddress := Vendor."E-Mail";
    
Table<Report Selections>.PROCEDURE<OnBeforePrint>
  Raised in: Table<Report Selections>.PROCEDURE<Print>
    Code lines:
    OnBeforePrint(ReportUsage,RecordVariant,CustomerNoFieldNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    PrintWithGUIYesNo(ReportUsage,RecordVariant,TRUE,CustomerNoFieldNo);
Table<Report Selections>.PROCEDURE<OnBeforePrintDocument>
  Raised in: Table<Report Selections>.PROCEDURE<PrintDocumentsWithCheckGUIYesNoCommon>
    Code lines:
    ...
        AccountNoFilter := GetAccountNoFilterForCustomReportLayout(TempReportSelections,TempNameValueBuffer,TableNo);
        GetFilteredRecordRef(RecRefToPrint,RecRef,AccountNoFieldNo,AccountNoFilter);
        RecVarToPrint := RecRefToPrint;
    
        IsHandled := FALSE;
        OnBeforePrintDocument(TempReportSelections,IsGUI,RecVarToPrint,IsHandled); <=====================
        IF NOT IsHandled THEN
          REPORT.RUNMODAL(TempReportSelections."Report ID",IsGUI,FALSE,RecVarToPrint);
    
        OnAfterPrintDocument(TempReportSelections,IsGUI,RecVarToPrint);
    ...
Table<Report Selections>.PROCEDURE<OnBeforePrintForUsage>
  Raised in: Table<Report Selections>.PROCEDURE<PrintForUsage>
    Code lines:
    OnBeforePrintForUsage(ReportUsage,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    FilterPrintUsage(ReportUsage);
    IF FINDSET THEN
      REPEAT
        REPORT.RUNMODAL("Report ID",TRUE);
      UNTIL NEXT = 0;
Table<Report Selections>.PROCEDURE<OnBeforePrintWithCheck>
  Raised in: Table<Report Selections>.PROCEDURE<PrintWithCheck>
    Code lines:
    OnBeforePrintWithCheck(ReportUsage,RecordVariant,CustomerNoFieldNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    PrintWithGUIYesNoWithCheck(ReportUsage,RecordVariant,TRUE,CustomerNoFieldNo);
Table<Report Selections>.PROCEDURE<OnBeforePrintWithGUIYesNo>
  Raised in: Table<Report Selections>.PROCEDURE<PrintWithGUIYesNo>
    Code lines:
    OnBeforePrintWithGUIYesNo(ReportUsage,RecordVariant,IsGUI,CustomerNoFieldNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    PrintDocumentsWithCheckGUIYesNoCommon(ReportUsage,RecordVariant,IsGUI,CustomerNoFieldNo,FALSE,DATABASE::Customer);
Table<Report Selections>.PROCEDURE<OnBeforePrintWithGUIYesNoVendor>
  Raised in: Table<Report Selections>.PROCEDURE<PrintWithGUIYesNoVendor>
    Code lines:
    OnBeforePrintWithGUIYesNoVendor(ReportUsage,RecordVariant,IsGUI,VendorNoFieldNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    PrintDocumentsWithCheckGUIYesNoCommon(ReportUsage,RecordVariant,IsGUI,VendorNoFieldNo,FALSE,DATABASE::Vendor);
Table<Report Selections>.PROCEDURE<OnBeforePrintWithGUIYesNoWithCheck>
  Raised in: Table<Report Selections>.PROCEDURE<PrintWithGUIYesNoWithCheck>
    Code lines:
    OnBeforePrintWithGUIYesNoWithCheck(ReportUsage,RecordVariant,IsGUI,CustomerNoFieldNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    PrintDocumentsWithCheckGUIYesNoCommon(ReportUsage,RecordVariant,IsGUI,CustomerNoFieldNo,TRUE,DATABASE::Customer);
Table<Report Selections>.PROCEDURE<OnBeforePrintWithGUIYesNoWithCheckVendor>
  Raised in: Table<Report Selections>.PROCEDURE<PrintWithGUIYesNoWithCheckVendor>
    Code lines:
    OnBeforePrintWithGUIYesNoWithCheckVendor(ReportUsage,RecordVariant,IsGUI,VendorNoFieldNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    PrintDocumentsWithCheckGUIYesNoCommon(ReportUsage,RecordVariant,IsGUI,VendorNoFieldNo,TRUE,DATABASE::Vendor);
Table<Report Selections>.PROCEDURE<OnBeforeSaveReportAsPDF>
  Raised in: Table<Report Selections>.PROCEDURE<SaveReportAsPDF>
    Code lines:
    OnBeforeSetReportLayout(RecordVariant);
    FilePath := COPYSTR(FileMgt.ServerTempFileName('pdf'),1,250);
    
    ReportLayoutSelection.SetTempLayoutSelected(LayoutCode);
    OnBeforeSaveReportAsPDF(ReportID,RecordVariant,LayoutCode,IsHandled); <=====================
    IF NOT IsHandled THEN
      REPORT.SAVEASPDF(ReportID,FilePath,RecordVariant);
    ReportLayoutSelection.SetTempLayoutSelected('');
    
    COMMIT;
Table<Report Selections>.PROCEDURE<OnBeforeSendEmailToCust>
  Raised in: Table<Report Selections>.PROCEDURE<SendEmailToCust>
    Code lines:
    OnBeforeSendEmailToCust(ReportUsage,RecordVariant,DocNo,DocName,ShowDialog,CustNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    RecRef.GETTABLE(RecordVariant);
    
    IF GraphMail.IsEnabled AND GraphMail.HasConfiguration THEN BEGIN
      IF O365DocumentSentHistory.NewInProgressFromRecRef(RecRef) THEN BEGIN
        O365DocumentSentHistory.SetStatusAsFailed;
        UpdateDocumentSentHistory := TRUE;
    ...
Table<Report Selections>.PROCEDURE<OnBeforeSendEmailToVendor>
  Raised in: Table<Report Selections>.PROCEDURE<SendEmailToVendor>
    Code lines:
    OnBeforeSendEmailToVendor(ReportUsage,RecordVariant,DocNo,DocName,ShowDialog,VendorNo,Handled); <=====================
    IF Handled THEN
      EXIT;
    
    RecRef.GETTABLE(RecordVariant);
    
    IF GraphMail.IsEnabled AND GraphMail.HasConfiguration THEN BEGIN
      IF O365DocumentSentHistory.NewInProgressFromRecRef(RecRef) THEN BEGIN
        O365DocumentSentHistory.SetStatusAsFailed;
        UpdateDocumentSentHistory := TRUE;
    ...
Table<Report Selections>.PROCEDURE<OnBeforeSetReportLayout>
  Raised in: Table<Report Selections>.PROCEDURE<PrintDocumentsWithCheckGUIYesNoCommon>
    Code lines:
    OnBeforeSetReportLayout(RecordVariant); <=====================
    
    RecRef.GETTABLE(RecordVariant);
    GetUniqueAccountNos(TempNameValueBuffer,RecRef,AccountNoFieldNo);
    
    SelectTempReportSelectionsToPrint(TempReportSelections,TempNameValueBuffer,WithCheck,ReportUsage,TableNo);
    
    IF TempReportSelections.FINDSET THEN
      REPEAT
        IF TempReportSelections."Custom Report Layout Code" <> '' THEN
    ...
  Raised in: Table<Report Selections>.PROCEDURE<SendEmailToCustDirectly>
    Code lines:
    IF EmailParameter.GetEntryWithReportUsage(DocNo,ReportUsage,EmailParameter."Parameter Type"::Body) THEN
      EmailBodyText := EmailParameter.GetParameterValue;
    
    OnBeforeSetReportLayout(RecordVariant); <=====================
    BINDSUBSCRIPTION(MailManagement);
    FoundBody := GetEmailBodyCustomText(ServerEmailBodyFilePath,ReportUsage,RecordVariant,CustNo,EmailAddress,EmailBodyText);
    UNBINDSUBSCRIPTION(MailManagement);
    FoundAttachment := FindEmailAttachmentUsage(ReportUsage,CustNo,TempAttachReportSelections);
    
    CustomReportSelection.SETRANGE("Source Type",DATABASE::Customer);
    ...
  Raised in: Table<Report Selections>.PROCEDURE<SendEmailToVendorDirectly>
    Code lines:
    OnBeforeSetReportLayout(RecordVariant); <=====================
    BINDSUBSCRIPTION(MailManagement);
    FoundBody := GetEmailBodyVendor(ServerEmailBodyFilePath,ReportUsage,RecordVariant,VendorNo,EmailAddress);
    UNBINDSUBSCRIPTION(MailManagement);
    FoundAttachment := FindEmailAttachmentUsageVendor(ReportUsage,VendorNo,TempAttachReportSelections);
    
    CustomReportSelection.SETRANGE("Source Type",DATABASE::Vendor);
    CustomReportSelection.SETRANGE("Source No.",VendorNo);
    EXIT(SendEmailDirectly(
        ReportUsage,RecordVariant,DocNo,DocName,FoundBody,FoundAttachment,ServerEmailBodyFilePath,EmailAddress,ShowDialog,
  Raised in: Table<Report Selections>.PROCEDURE<SendToDisk>
    Code lines:
    OnBeforeSetReportLayout(RecordVariant); <=====================
    FindPrintUsage(ReportUsage,CustNo,TempReportSelections);
    WITH TempReportSelections DO
      REPEAT
        ServerAttachmentFilePath := SaveReportAsPDF("Report ID",RecordVariant,"Custom Report Layout Code");
        ClientAttachmentFileName := ElectronicDocumentFormat.GetAttachmentFileName(DocNo,DocName,'pdf');
    
        FileManagement.DownloadHandler(
          ServerAttachmentFilePath,
          '',
    ...
  Raised in: Table<Report Selections>.PROCEDURE<SendToDiskVendor>
    Code lines:
    OnBeforeSetReportLayout(RecordVariant); <=====================
    FindPrintUsageVendor(ReportUsage,VendorNo,TempReportSelections);
    WITH TempReportSelections DO
      REPEAT
        ServerAttachmentFilePath := SaveReportAsPDF("Report ID",RecordVariant,"Custom Report Layout Code");
        ClientAttachmentFileName := ElectronicDocumentFormat.GetAttachmentFileName(DocNo,DocName,'pdf');
    
        FileManagement.DownloadHandler(
          ServerAttachmentFilePath,
          '',
    ...
  Raised in: Table<Report Selections>.PROCEDURE<SendToZip>
    Code lines:
    OnBeforeSetReportLayout(RecordVariant); <=====================
    FindPrintUsage(ReportUsage,CustNo,TempReportSelections);
    WITH TempReportSelections DO
      REPEAT
        ServerAttachmentFilePath := SaveReportAsPDF("Report ID",RecordVariant,"Custom Report Layout Code");
        FileManagement.AddFileToZipArchive(
          ServerAttachmentFilePath,
          ElectronicDocumentFormat.GetAttachmentFileName(DocNo,'Invoice','pdf'));
      UNTIL NEXT = 0;
  Raised in: Table<Report Selections>.PROCEDURE<SendToZipVendor>
    Code lines:
    OnBeforeSetReportLayout(RecordVariant); <=====================
    FindPrintUsageVendor(ReportUsage,VendorNo,TempReportSelections);
    WITH TempReportSelections DO
      REPEAT
        ServerAttachmentFilePath := SaveReportAsPDF("Report ID",RecordVariant,"Custom Report Layout Code");
        FileManagement.AddFileToZipArchive(
          ServerAttachmentFilePath,
          ElectronicDocumentFormat.GetAttachmentFileName(DocNo,'Purchase Order','pdf'));
      UNTIL NEXT = 0;
  Raised in: Table<Report Selections>.PROCEDURE<SaveReportAsPDF>
    Code lines:
    OnBeforeSetReportLayout(RecordVariant); <=====================
    FilePath := COPYSTR(FileMgt.ServerTempFileName('pdf'),1,250);
    
    ReportLayoutSelection.SetTempLayoutSelected(LayoutCode);
    OnBeforeSaveReportAsPDF(ReportID,RecordVariant,LayoutCode,IsHandled);
    IF NOT IsHandled THEN
      REPORT.SAVEASPDF(ReportID,FilePath,RecordVariant);
    ReportLayoutSelection.SetTempLayoutSelected('');
    
    COMMIT;
  Raised in: Table<Report Selections>.PROCEDURE<SaveReportAsHTML>
    Code lines:
    OnBeforeSetReportLayout(RecordVariant); <=====================
    FilePath := COPYSTR(FileMgt.ServerTempFileName('html'),1,250);
    
    ReportLayoutSelection.SetTempLayoutSelected(LayoutCode);
    REPORT.SAVEASHTML(ReportID,FilePath,RecordVariant);
    ReportLayoutSelection.SetTempLayoutSelected('');
    
    COMMIT;
Table<Report Selections>.PROCEDURE<OnFindReportSelections>
  Raised in: Table<Report Selections>.PROCEDURE<FindReportSelections>
    Code lines:
    OnFindReportSelections(ReportSelections,Handled,Rec); <=====================
    IF Handled THEN
      EXIT(TRUE);
    
    IF CopyCustomReportSectionToReportSelection(AccountNo,ReportSelections,TableNo) THEN
      EXIT(TRUE);
    
    EXIT(CopyReportSelectionToReportSelection(ReportSelections));
Table<Report Selections>.PROCEDURE<OnGetEmailBodyCustomerTextOnAfterNotFindEmailBodyUsage>
  Raised in: Table<Report Selections>.PROCEDURE<GetEmailBodyCustomText>
    Code lines:
    ...
    IF CustEmailAddress = '' THEN
      CustEmailAddress := GetEmailAddressIgnoringLayout(ReportUsage,RecordVariant,CustNo);
    
    IF NOT FindEmailBodyUsage(ReportUsage,CustNo,TempBodyReportSelections) THEN BEGIN
      IsHandled := FALSE;
      OnGetEmailBodyCustomerTextOnAfterNotFindEmailBodyUsage( <=====================
        ReportUsage,RecordVariant,CustNo,TempBodyReportSelections,IsHandled);
      IF IsHandled THEN
        EXIT(TRUE);
      EXIT(FALSE);
    ...
Table<Report Selections>.PROCEDURE<OnGetEmailBodyVendorTextOnAfterNotFindEmailBodyUsage>
  Raised in: Table<Report Selections>.PROCEDURE<GetEmailBodyVendor>
    Code lines:
    ...
    
    VendorEmailAddress := GetVendorEmailAddress(VendorNo,RecordVariant,ReportUsage);
    
    IF NOT FindEmailBodyUsageVendor(ReportUsage,VendorNo,TempBodyReportSelections) THEN BEGIN
      IsHandled := FALSE;
      OnGetEmailBodyVendorTextOnAfterNotFindEmailBodyUsage( <=====================
        ReportUsage,RecordVariant,VendorNo,TempBodyReportSelections,IsHandled);
      IF IsHandled THEN
        EXIT(TRUE);
      EXIT(FALSE);
    ...
Table<Certificate of Supply>.PROCEDURE<OnAfterInitFromPurchase>
  Raised in: Table<Certificate of Supply>.PROCEDURE<InitFromPurchase>
    Code lines:
    ...
      "Customer/Vendor Name" := ReturnShipmentHeader."Ship-to Name";
      "Shipment Method Code" := ReturnShipmentHeader."Shipment Method Code";
      "Shipment/Posting Date" := ReturnShipmentHeader."Posting Date";
      "Ship-to Country/Region Code" := ReturnShipmentHeader."Ship-to Country/Region Code";
      "Customer/Vendor No." := ReturnShipmentHeader."Pay-to Vendor No.";
      OnAfterInitFromPurchase(Rec,ReturnShipmentHeader); <=====================
      INSERT(TRUE);
    END
Table<Certificate of Supply>.PROCEDURE<OnAfterInitFromSales>
  Raised in: Table<Certificate of Supply>.PROCEDURE<InitFromSales>
    Code lines:
    ...
      "Customer/Vendor Name" := SalesShipmentHeader."Ship-to Name";
      "Shipment Method Code" := SalesShipmentHeader."Shipment Method Code";
      "Shipment/Posting Date" := SalesShipmentHeader."Shipment Date";
      "Ship-to Country/Region Code" := SalesShipmentHeader."Ship-to Country/Region Code";
      "Customer/Vendor No." := SalesShipmentHeader."Bill-to Customer No.";
      OnAfterInitFromSales(Rec,SalesShipmentHeader); <=====================
      INSERT(TRUE);
    END
Table<Certificate of Supply>.PROCEDURE<OnAfterInitFromService>
  Raised in: Table<Certificate of Supply>.PROCEDURE<InitFromService>
    Code lines:
    ...
      "Customer/Vendor Name" := ServiceShipmentHeader."Ship-to Name";
      "Shipment Method Code" := '';
      "Shipment/Posting Date" := ServiceShipmentHeader."Posting Date";
      "Ship-to Country/Region Code" := ServiceShipmentHeader."Ship-to Country/Region Code";
      "Customer/Vendor No." := ServiceShipmentHeader."Bill-to Customer No.";
      OnAfterInitFromService(Rec,ServiceShipmentHeader); <=====================
      INSERT(TRUE);
    END
Table<Company Information>.PROCEDURE<OnAfterGetSystemIndicator>
  Raised in: Table<Company Information>.PROCEDURE<GetSystemIndicator>
    Code lines:
    ...
      "System Indicator"::Database:
        Text := GetDatabaseIndicatorText(FALSE);
      "System Indicator"::"Company+Database":
        Text := GetDatabaseIndicatorText(TRUE);
    END;
    OnAfterGetSystemIndicator(Text,Style) <=====================
Table<Language>.PROCEDURE<OnGetLanguageID>
  Raised in: Table<Language>.PROCEDURE<GetLanguageID>
    Code lines:
    IsHandled := FALSE;
    OnGetLanguageID(LanguageCode,"Windows Language ID",IsHandled); <=====================
    IF IsHandled THEN BEGIN
      TESTFIELD("Windows Language ID");
      EXIT("Windows Language ID");
    END;
    
    CLEAR(Rec);
    IF LanguageCode <> '' THEN
      IF GET(LanguageCode) THEN
    ...
Table<Language>.PROCEDURE<OnGetUserLanguageId>
  Raised in: Table<Language>.PROCEDURE<GetUserLanguage>
    Code lines:
    OnGetUserLanguageId(UserLanguageId,Handled); <=====================
    
    IF NOT Handled THEN
      UserLanguageId := GLOBALLANGUAGE;
    
    EXIT(GetLanguageCode(UserLanguageId));
Table<Gen. Journal Template>.PROCEDURE<OnAfterValidateType>
  Raised in: Table<Gen. Journal Template>.Field<Type>.<OnValidate>
    Code lines:
    ...
    END;
    
    IF Recurring THEN
      "Page ID" := PAGE::"Recurring General Journal";
    
    OnAfterValidateType(Rec,SourceCodeSetup); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetBankAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetBankAccount>
    Code lines:
    ...
        BankAcc.TESTFIELD("Currency Code","Currency Code")
      ELSE
        "Currency Code" := BankAcc."Currency Code";
    ClearPostingGroups;
    
    OnAfterAccountNoOnValidateGetBankAccount(Rec,BankAcc,CurrFieldNo); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetBankBalAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetBankBalAccount>
    Code lines:
    ...
        BankAcc.TESTFIELD("Currency Code","Currency Code")
      ELSE
        "Currency Code" := BankAcc."Currency Code";
    ClearBalancePostingGroups;
    
    OnAfterAccountNoOnValidateGetBankBalAccount(Rec,BankAcc,CurrFieldNo); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetCustomerAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetCustomerAccount>
    Code lines:
    ...
      THEN
        ERROR('');
    VALIDATE("Payment Terms Code");
    CheckPaymentTolerance;
    
    OnAfterAccountNoOnValidateGetCustomerAccount(Rec,Cust,CurrFieldNo); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetCustomerBalAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetCustomerBalAccount>
    Code lines:
    ...
      THEN
        ERROR('');
    VALIDATE("Payment Terms Code");
    CheckPaymentTolerance;
    
    OnAfterAccountNoOnValidateGetCustomerBalAccount(Rec,Cust,CurrFieldNo); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetEmployeeAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetEmployeeAccount>
    Code lines:
    ...
    "Posting Group" := Employee."Employee Posting Group";
    SetSalespersonPurchaserCode(Employee."Salespers./Purch. Code","Salespers./Purch. Code");
    "Currency Code" := '';
    ClearPostingGroups;
    
    OnAfterAccountNoOnValidateGetEmployeeAccount(Rec,Employee); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetEmployeeBalAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetEmployeeBalAccount>
    Code lines:
    ...
    "Posting Group" := Employee."Employee Posting Group";
    SetSalespersonPurchaserCode(Employee."Salespers./Purch. Code","Salespers./Purch. Code");
    "Currency Code" := '';
    ClearBalancePostingGroups;
    
    OnAfterAccountNoOnValidateGetEmployeeBalAccount(Rec,Employee,CurrFieldNo); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetFAAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetFAAccount>
    Code lines:
    ...
    UpdateDescription(FA.Description);
    GetFADeprBook("Account No.");
    GetFAVATSetup;
    GetFAAddCurrExchRate;
    
    OnAfterAccountNoOnValidateGetFAAccount(Rec,FA); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetFABalAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetFABalAccount>
    Code lines:
    ...
      Description := FA.Description;
    GetFADeprBook("Bal. Account No.");
    GetFAVATSetup;
    GetFAAddCurrExchRate;
    
    OnAfterAccountNoOnValidateGetFABalAccount(Rec,FA); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetGLAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetGLAccount>
    Code lines:
    ...
    IF "Posting Date" <> 0D THEN
      IF "Posting Date" = CLOSINGDATE("Posting Date") THEN
        ClearPostingGroups;
    VALIDATE("Deferral Code",GLAcc."Default Deferral Template Code");
    
    OnAfterAccountNoOnValidateGetGLAccount(Rec,GLAcc); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetGLBalAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetGLBalAccount>
    Code lines:
    ...
    "Bal. Tax Group Code" := GLAcc."Tax Group Code";
    IF "Posting Date" <> 0D THEN
      IF "Posting Date" = CLOSINGDATE("Posting Date") THEN
        ClearBalancePostingGroups;
    
    OnAfterAccountNoOnValidateGetGLBalAccount(Rec,GLAcc); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetICPartnerAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetICPartnerAccount>
    Code lines:
    ...
    IF ("Bal. Account Type" = "Bal. Account Type"::"Bank Account") AND ("Currency Code" = '') THEN
      "Currency Code" := ICPartner."Currency Code";
    ClearPostingGroups;
    "IC Partner Code" := "Account No.";
    
    OnAfterAccountNoOnValidateGetICPartnerAccount(Rec,ICPartner); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetICPartnerBalAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetICPartnerBalAccount>
    Code lines:
    ...
    IF ("Account Type" = "Account Type"::"Bank Account") AND ("Currency Code" = '') THEN
      "Currency Code" := ICPartner."Currency Code";
    ClearBalancePostingGroups;
    "IC Partner Code" := "Bal. Account No.";
    
    OnAfterAccountNoOnValidateGetICPartnerBalAccount(Rec,ICPartner); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetVendorAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetVendorAccount>
    Code lines:
    ...
      THEN
        ERROR('');
    VALIDATE("Payment Terms Code");
    CheckPaymentTolerance;
    
    OnAfterAccountNoOnValidateGetVendorAccount(Rec,Vend,CurrFieldNo); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterAccountNoOnValidateGetVendorBalAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetVendorBalAccount>
    Code lines:
    ...
      THEN
        ERROR('');
    VALIDATE("Payment Terms Code");
    CheckPaymentTolerance;
    
    OnAfterAccountNoOnValidateGetVendorBalAccount(Rec,Vend,CurrFieldNo); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCheckDirectPosting>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CheckDirectPosting>
    Code lines:
    ...
    IF IsHandled THEN
      EXIT;
    
    GLAccount.TESTFIELD("Direct Posting",TRUE);
    
    OnAfterCheckDirectPosting(GLAccount,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterClearBalPostingGroups>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<ClearBalancePostingGroups>
    Code lines:
    ...
    "Bal. Gen. Bus. Posting Group" := '';
    "Bal. Gen. Prod. Posting Group" := '';
    "Bal. VAT Bus. Posting Group" := '';
    "Bal. VAT Prod. Posting Group" := '';
    
    OnAfterClearBalPostingGroups(Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterClearCustApplnEntryFields>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<ClearCustApplnEntryFields>
    Code lines:
    CustLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
    CustLedgEntry."Accepted Payment Tolerance" := 0;
    CustLedgEntry."Amount to Apply" := 0;
    
    OnAfterClearCustApplnEntryFields(CustLedgEntry); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterClearEmplApplnEntryFields>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<ClearEmplApplnEntryFields>
    Code lines:
    EmplLedgEntry."Amount to Apply" := 0;
    
    OnAfterClearEmplApplnEntryFields(EmplLedgEntry); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterClearPostingGroups>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<ClearPostingGroups>
    Code lines:
    ...
    "Gen. Bus. Posting Group" := '';
    "Gen. Prod. Posting Group" := '';
    "VAT Bus. Posting Group" := '';
    "VAT Prod. Posting Group" := '';
    
    OnAfterClearPostingGroups(Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterClearVendApplnEntryFields>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<ClearVendApplnEntryFields>
    Code lines:
    VendLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
    VendLedgEntry."Accepted Payment Tolerance" := 0;
    VendLedgEntry."Amount to Apply" := 0;
    
    OnAfterClearVendApplnEntryFields(VendLedgEntry); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromCustLedgEntry>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyCustLedgEntry>
    Code lines:
    ...
    "Dimension Set ID" := CustLedgerEntry."Dimension Set ID";
    "Posting Group" := CustLedgerEntry."Customer Posting Group";
    "Source Type" := "Source Type"::Customer;
    "Source No." := CustLedgerEntry."Customer No.";
    
    OnAfterCopyGenJnlLineFromCustLedgEntry(CustLedgEntry,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromGenJnlAllocation>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromGenJnlAllocation>
    Code lines:
    ...
    "VAT %" := GenJnlAlloc."VAT %";
    "Source Currency Amount" := GenJnlAlloc."Additional-Currency Amount";
    Amount := GenJnlAlloc.Amount;
    "Amount (LCY)" := GenJnlAlloc.Amount;
    
    OnAfterCopyGenJnlLineFromGenJnlAllocation(GenJnlAlloc,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromInvPostBuffer>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromInvoicePostBuffer>
    Code lines:
    ...
    "VAT Amount" := InvoicePostBuffer."VAT Amount";
    "Source Curr. VAT Amount" := InvoicePostBuffer."VAT Amount (ACY)";
    "VAT Difference" := InvoicePostBuffer."VAT Difference";
    "VAT Base Before Pmt. Disc." := InvoicePostBuffer."VAT Base Before Pmt. Disc.";
    
    OnAfterCopyGenJnlLineFromInvPostBuffer(InvoicePostBuffer,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromInvPostBufferFA>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromInvoicePostBufferFA>
    Code lines:
    ...
    "Insurance No." := InvoicePostBuffer."Insurance No.";
    "Budgeted FA No." := InvoicePostBuffer."Budgeted FA No.";
    "Duplicate in Depreciation Book" := InvoicePostBuffer."Duplicate in Depreciation Book";
    "Use Duplication List" := InvoicePostBuffer."Use Duplication List";
    
    OnAfterCopyGenJnlLineFromInvPostBufferFA(InvoicePostBuffer,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPrepmtInvBuffer>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromPrepmtInvoiceBuffer>
    Code lines:
    ...
    "VAT Amount" := PrepmtInvLineBuffer."VAT Amount";
    "Source Curr. VAT Amount" := PrepmtInvLineBuffer."VAT Amount (ACY)";
    "VAT Difference" := PrepmtInvLineBuffer."VAT Difference";
    "VAT Base Before Pmt. Disc." := PrepmtInvLineBuffer."VAT Base Before Pmt. Disc.";
    
    OnAfterCopyGenJnlLineFromPrepmtInvBuffer(PrepmtInvLineBuffer,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPurchHeader>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromPurchHeader>
    Code lines:
    ...
    "Salespers./Purch. Code" := PurchHeader."Purchaser Code";
    "On Hold" := PurchHeader."On Hold";
    IF "Account Type" = "Account Type"::Vendor THEN
      "Posting Group" := PurchHeader."Vendor Posting Group";
    
    OnAfterCopyGenJnlLineFromPurchHeader(PurchHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPurchHeaderApplyTo>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromPurchHeaderApplyTo>
    Code lines:
    "Applies-to Doc. Type" := PurchHeader."Applies-to Doc. Type";
    "Applies-to Doc. No." := PurchHeader."Applies-to Doc. No.";
    "Applies-to ID" := PurchHeader."Applies-to ID";
    "Allow Application" := PurchHeader."Bal. Account No." = '';
    
    OnAfterCopyGenJnlLineFromPurchHeaderApplyTo(PurchHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPurchHeaderPayment>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromPurchHeaderPayment>
    Code lines:
    ...
    "Payment Discount %" := PurchHeader."Payment Discount %";
    "Creditor No." := PurchHeader."Creditor No.";
    "Payment Reference" := PurchHeader."Payment Reference";
    "Payment Method Code" := PurchHeader."Payment Method Code";
    
    OnAfterCopyGenJnlLineFromPurchHeaderPayment(PurchHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPurchHeaderPrepmt>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromPurchHeaderPrepmt>
    Code lines:
    ...
    "IC Partner Code" := PurchHeader."Buy-from IC Partner Code";
    "VAT Posting" := "VAT Posting"::"Manual VAT Entry";
    "System-Created Entry" := TRUE;
    Prepayment := TRUE;
    
    OnAfterCopyGenJnlLineFromPurchHeaderPrepmt(PurchHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromPurchHeaderPrepmtPost>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromPurchHeaderPrepmtPost>
    Code lines:
    ...
    IF UsePmtDisc THEN BEGIN
      "Pmt. Discount Date" := PurchHeader."Prepmt. Pmt. Discount Date";
      "Payment Discount %" := PurchHeader."Prepmt. Payment Discount %";
    END;
    
    OnAfterCopyGenJnlLineFromPurchHeaderPrepmtPost(PurchHeader,Rec,UsePmtDisc); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromSalesHeader>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromSalesHeader>
    Code lines:
    ...
    "Salespers./Purch. Code" := SalesHeader."Salesperson Code";
    "On Hold" := SalesHeader."On Hold";
    IF "Account Type" = "Account Type"::Customer THEN
      "Posting Group" := SalesHeader."Customer Posting Group";
    
    OnAfterCopyGenJnlLineFromSalesHeader(SalesHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromSalesHeaderApplyTo>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromSalesHeaderApplyTo>
    Code lines:
    "Applies-to Doc. Type" := SalesHeader."Applies-to Doc. Type";
    "Applies-to Doc. No." := SalesHeader."Applies-to Doc. No.";
    "Applies-to ID" := SalesHeader."Applies-to ID";
    "Allow Application" := SalesHeader."Bal. Account No." = '';
    
    OnAfterCopyGenJnlLineFromSalesHeaderApplyTo(SalesHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromSalesHeaderPayment>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromSalesHeaderPayment>
    Code lines:
    ...
    "Payment Method Code" := SalesHeader."Payment Method Code";
    "Pmt. Discount Date" := SalesHeader."Pmt. Discount Date";
    "Payment Discount %" := SalesHeader."Payment Discount %";
    "Direct Debit Mandate ID" := SalesHeader."Direct Debit Mandate ID";
    
    OnAfterCopyGenJnlLineFromSalesHeaderPayment(SalesHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromSalesHeaderPrepmt>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromSalesHeaderPrepmt>
    Code lines:
    ...
    "IC Partner Code" := SalesHeader."Sell-to IC Partner Code";
    "VAT Posting" := "VAT Posting"::"Manual VAT Entry";
    "System-Created Entry" := TRUE;
    Prepayment := TRUE;
    
    OnAfterCopyGenJnlLineFromSalesHeaderPrepmt(SalesHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromSalesHeaderPrepmtPost>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromSalesHeaderPrepmtPost>
    Code lines:
    ...
    IF UsePmtDisc THEN BEGIN
      "Pmt. Discount Date" := SalesHeader."Prepmt. Pmt. Discount Date";
      "Payment Discount %" := SalesHeader."Prepmt. Payment Discount %";
    END;
    
    OnAfterCopyGenJnlLineFromSalesHeaderPrepmtPost(SalesHeader,Rec,UsePmtDisc); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromServHeader>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromServiceHeader>
    Code lines:
    ...
    "Posting No. Series" := ServiceHeader."Posting No. Series";
    "Ship-to/Order Address Code" := ServiceHeader."Ship-to Code";
    "EU 3-Party Trade" := ServiceHeader."EU 3-Party Trade";
    "Salespers./Purch. Code" := ServiceHeader."Salesperson Code";
    
    OnAfterCopyGenJnlLineFromServHeader(ServiceHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromServHeaderApplyTo>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromServiceHeaderApplyTo>
    Code lines:
    "Applies-to Doc. Type" := ServiceHeader."Applies-to Doc. Type";
    "Applies-to Doc. No." := ServiceHeader."Applies-to Doc. No.";
    "Applies-to ID" := ServiceHeader."Applies-to ID";
    "Allow Application" := ServiceHeader."Bal. Account No." = '';
    
    OnAfterCopyGenJnlLineFromServHeaderApplyTo(ServiceHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCopyGenJnlLineFromServHeaderPayment>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CopyFromServiceHeaderPayment>
    Code lines:
    ...
    "Payment Terms Code" := ServiceHeader."Payment Terms Code";
    "Payment Method Code" := ServiceHeader."Payment Method Code";
    "Pmt. Discount Date" := ServiceHeader."Pmt. Discount Date";
    "Payment Discount %" := ServiceHeader."Payment Discount %";
    
    OnAfterCopyGenJnlLineFromServHeaderPayment(ServiceHeader,Rec); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CreateDim>
    Code lines:
    ...
    No[3] := No3;
    TableID[4] := Type4;
    No[4] := No4;
    TableID[5] := Type5;
    No[5] := No5;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
    ...
Table<Gen. Journal Line>.PROCEDURE<OnAfterCreateFAAcquisitionLines>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CreateFAAcquisitionLines>
    Code lines:
    ...
      FAGenJournalLine.VALIDATE("Tax Group Code",LocalGLAcc."Tax Group Code");
      FAGenJournalLine.VALIDATE("VAT Prod. Posting Group");
      FAGenJournalLine.MODIFY(TRUE)
    END;
    
    OnAfterCreateFAAcquisitionLines(FAGenJournalLine,Rec); <=====================
    
    // Inserting Source Code
    IF "Source Code" = '' THEN BEGIN
      GenJnlTemplate.GET("Journal Template Name");
    ...
Table<Gen. Journal Line>.PROCEDURE<OnAfterCreateTempJobJnlLine>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CreateTempJobJnlLine>
    Code lines:
    ...
      TempJobJnlLine."Line Discount %" := xRec."Job Line Discount %";
      TempJobJnlLine."Line Discount Amount" := xRec."Job Line Discount Amount";
      TempJobJnlLine.VALIDATE("Unit Price");
    END;
    
    OnAfterCreateTempJobJnlLine(TempJobJnlLine,Rec,xRec,CurrFieldNo); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterGetCustLedgerEntry>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetCustLedgerEntry>
    Code lines:
    ...
        "Bal. Account Type" := GenJnlBatch."Bal. Account Type";
        VALIDATE("Bal. Account No.",GenJnlBatch."Bal. Account No.");
      END ELSE
        VALIDATE(Amount);
    
      OnAfterGetCustLedgerEntry(Rec,CustLedgEntry); <=====================
    END;
Table<Gen. Journal Line>.PROCEDURE<OnAfterGetEmplLedgerEntry>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetEmplLedgerEntry>
    Code lines:
    ...
        VALIDATE("Bal. Account No.",GenJnlBatch."Bal. Account No.");
      END ELSE
        VALIDATE(Amount);
    END;
    
    OnAfterGetEmplLedgerEntry(Rec,EmplLedgEntry); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterGetVendLedgerEntry>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetVendLedgerEntry>
    Code lines:
    ...
        "Bal. Account Type" := GenJnlBatch."Bal. Account Type";
        VALIDATE("Bal. Account No.",GenJnlBatch."Bal. Account No.");
      END ELSE
        VALIDATE(Amount);
    
      OnAfterGetVendLedgerEntry(Rec,VendLedgEntry); <=====================
    END;
Table<Gen. Journal Line>.PROCEDURE<OnAfterSalesTaxCalculateCalculateTax>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InitVAT>
    Code lines:
    ...
                      GLEntry."VAT Amount" :=
                        ROUND(
                          SalesTaxCalculate.CalculateTax(
                            "Tax Area Code","Tax Group Code","Tax Liable",
                            "Posting Date","Amount (LCY)",Quantity,0));
                      OnAfterSalesTaxCalculateCalculateTax(GenJnlLine,GLEntry,LCYCurrency); <=====================
                      GLEntry.Amount := "Amount (LCY)";
                    END ELSE BEGIN
                      GLEntry.Amount :=
                        ROUND(
    ...
  Raised in: Table<Gen. Journal Line>.Field<VAT Base Amount>.<OnValidate>
    Code lines:
    ...
        END ELSE BEGIN
          "VAT Amount" :=
            SalesTaxCalculate.CalculateTax(
              "Tax Area Code","Tax Group Code","Tax Liable","Posting Date",
              "VAT Base Amount",Quantity,"Currency Factor");
          OnAfterSalesTaxCalculateCalculateTax(Rec,CurrFieldNo); <=====================
          IF "VAT Base Amount" <> 0 THEN
            "VAT %" := ROUND(100 * "VAT Amount" / "VAT Base Amount",0.00001)
          ELSE
            "VAT %" := 0;
    ...
  Raised in: Table<Gen. Journal Line>.Field<Bal. VAT Base Amount>.<OnValidate>
    Code lines:
    ...
        END ELSE BEGIN
          "Bal. VAT Amount" :=
            SalesTaxCalculate.CalculateTax(
              "Bal. Tax Area Code","Bal. Tax Group Code","Bal. Tax Liable",
              "Posting Date","Bal. VAT Base Amount",Quantity,"Currency Factor");
          OnAfterSalesTaxCalculateCalculateTax(Rec,CurrFieldNo); <=====================
          IF "Bal. VAT Base Amount" <> 0 THEN
            "Bal. VAT %" := ROUND(100 * "Bal. VAT Amount" / "Bal. VAT Base Amount",0.00001)
          ELSE
            "Bal. VAT %" := 0;
    ...
Table<Gen. Journal Line>.PROCEDURE<OnAfterSalesTaxCalculateReverseCalculateTax>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<InitVAT>
    Code lines:
    ...
                      GLEntry.Amount :=
                        ROUND(
                          SalesTaxCalculate.ReverseCalculateTax(
                            "Tax Area Code","Tax Group Code","Tax Liable",
                            "Posting Date","Amount (LCY)",Quantity,0));
                      OnAfterSalesTaxCalculateReverseCalculateTax(GenJnlLine,GLEntry,LCYCurrency); <=====================
                      GLEntry."VAT Amount" := "Amount (LCY)" - GLEntry.Amount;
                    END;
                    GLEntry."Additional-Currency Amount" := "Source Currency Amount";
                    IF "Source Currency Code" = AddCurrencyCode THEN
    ...
  Raised in: Table<Gen. Journal Line>.Field<VAT %>.<OnValidate>
    Code lines:
    ...
          "VAT Amount" :=
            Amount -
            SalesTaxCalculate.ReverseCalculateTax(
              "Tax Area Code","Tax Group Code","Tax Liable",
              "Posting Date",Amount,Quantity,"Currency Factor");
          OnAfterSalesTaxCalculateReverseCalculateTax(Rec,CurrFieldNo); <=====================
          IF Amount - "VAT Amount" <> 0 THEN
            "VAT %" := ROUND(100 * "VAT Amount" / (Amount - "VAT Amount"),0.00001)
          ELSE
            "VAT %" := 0;
    ...
  Raised in: Table<Gen. Journal Line>.Field<Bal. VAT %>.<OnValidate>
    Code lines:
    ...
          "Bal. VAT Amount" :=
            -(Amount -
              SalesTaxCalculate.ReverseCalculateTax(
                "Bal. Tax Area Code","Bal. Tax Group Code","Bal. Tax Liable",
                "Posting Date",Amount,Quantity,"Currency Factor"));
          OnAfterSalesTaxCalculateReverseCalculateTax(Rec,CurrFieldNo); <=====================
          IF Amount + "Bal. VAT Amount" <> 0 THEN
            "Bal. VAT %" := ROUND(100 * -"Bal. VAT Amount" / (Amount + "Bal. VAT Amount"),0.00001)
          ELSE
            "Bal. VAT %" := 0;
    ...
Table<Gen. Journal Line>.PROCEDURE<OnAfterSetAmountWithRemaining>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<SetAmountWithRemaining>
    Code lines:
    ...
      ELSE
        Amount := -RemainingAmount;
    IF "Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor] THEN
      Amount := -Amount;
    
    OnAfterSetAmountWithRemaining(Rec); <=====================
    ValidateAmount(FALSE);
Table<Gen. Journal Line>.PROCEDURE<OnAfterSetJournalLineFieldsFromApplication>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<SetJournalLineFieldsFromApplication>
    Code lines:
    ...
          IF "Applies-to Doc. No." <> '' THEN
            IF FindFirstEmplLedgEntryWithAppliesToDocNo(AccNo,"Applies-to Doc. No.") THEN
              "Exported to Payment File" := EmplLedgEntry."Exported to Payment File";
    END;
    
    OnAfterSetJournalLineFieldsFromApplication(Rec,AccType,AccNo); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterSetupNewLine>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    ...
    IF GenJnlBatch."Suggest Balancing Amount" THEN
      SuggestBalancingAmount(LastGenJnlLine,BottomLine);
    
    UpdateJournalBatchID;
    
    OnAfterSetupNewLine(Rec,GenJnlTemplate,GenJnlBatch,LastGenJnlLine,Balance,BottomLine); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterUpdateDocumentTypeAndAppliesToFields>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<UpdateDocumentTypeAndAppliesTo>
    Code lines:
    "Applies-to Doc. Type" := DocType;
    "Applies-to Doc. No." := DocNo;
    "Applies-to ID" := '';
    
    OnAfterUpdateDocumentTypeAndAppliesToFields(Rec,DocType,DocNo); <=====================
    
    IF "Document Type" <> "Document Type"::" " THEN
      EXIT;
    
    IF NOT ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) THEN
    ...
Table<Gen. Journal Line>.PROCEDURE<OnAfterUpdatePricesFromJobJnlLine>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<UpdatePricesFromJobJnlLine>
    Code lines:
    ...
    "Job Line Amount (LCY)" := TempJobJnlLine."Line Amount (LCY)";
    "Job Line Disc. Amount (LCY)" := TempJobJnlLine."Line Discount Amount (LCY)";
    "Job Unit Cost (LCY)" := TempJobJnlLine."Unit Cost (LCY)";
    "Job Total Cost (LCY)" := TempJobJnlLine."Total Cost (LCY)";
    
    OnAfterUpdatePricesFromJobJnlLine(Rec,TempJobJnlLine); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterValidateApplyRequirements>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<ValidateApplyRequirements>
    Code lines:
    ...
              CheckIfPostingDateIsEarlier(
                TempGenJnlLine,EmplLedgEntry."Posting Date",EmplLedgEntry."Document Type",EmplLedgEntry."Document No.");
          END;
    END;
    
    OnAfterValidateApplyRequirements(TempGenJnlLine); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnAfterValidateShortcutDimCode>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<ValidateShortcutDimCode>
    Code lines:
    OnBeforeValidateShortcutDimCode(Rec,FieldNumber,ShortcutDimCode);
    
    TESTFIELD("Check Printed",FALSE);
    DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    
    OnAfterValidateShortcutDimCode(Rec,FieldNumber,ShortcutDimCode); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnBeforeCheckDirectPosting>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CheckDirectPosting>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckDirectPosting(GLAccount,IsHandled,Rec); <=====================
    IF IsHandled THEN
      EXIT;
    
    GLAccount.TESTFIELD("Direct Posting",TRUE);
    
    OnAfterCheckDirectPosting(GLAccount,Rec);
Table<Gen. Journal Line>.PROCEDURE<OnBeforeCheckDocNoBasedOnNoSeries>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CheckDocNoBasedOnNoSeries>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckDocNoBasedOnNoSeries(Rec,LastDocNo,NoSeriesCode,NoSeriesMgtInstance,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF NoSeriesCode = '' THEN
      EXIT;
    
    IF (LastDocNo = '') OR ("Document No." <> LastDocNo) THEN
      IF "Document No." <> NoSeriesMgtInstance.GetNextNo(NoSeriesCode,"Posting Date",FALSE) THEN
Table<Gen. Journal Line>.PROCEDURE<OnBeforeCheckIfPostingDateIsEarlier>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CheckIfPostingDateIsEarlier>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCheckIfPostingDateIsEarlier(GenJournalLine,ApplyPostingDate,ApplyDocType,ApplyDocNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF GenJournalLine."Posting Date" < ApplyPostingDate THEN
      ERROR(
        Text015,GenJournalLine."Document Type",GenJournalLine."Document No.",ApplyDocType,ApplyDocNo);
Table<Gen. Journal Line>.PROCEDURE<OnBeforeCreateTempJobJnlLine>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<CreateTempJobJnlLine>
    Code lines:
    OnBeforeCreateTempJobJnlLine(TempJobJnlLine,Rec,xRec,CurrFieldNo); <=====================
    
    TESTFIELD("Posting Date");
    CLEAR(TempJobJnlLine);
    TempJobJnlLine.DontCheckStdCost;
    TempJobJnlLine.VALIDATE("Job No.","Job No.");
    TempJobJnlLine.VALIDATE("Job Task No.","Job Task No.");
    IF CurrFieldNo <> FIELDNO("Posting Date") THEN
      TempJobJnlLine.VALIDATE("Posting Date","Posting Date")
    ELSE
    ...
Table<Gen. Journal Line>.PROCEDURE<OnBeforeLookUpAppliesToDocCust>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<LookUpAppliesToDocCust>
    Code lines:
    IsHandled := FALSE;
    OnBeforeLookUpAppliesToDocCust(Rec,AccNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    CLEAR(CustLedgEntry);
    CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive,"Due Date");
    IF AccNo <> '' THEN
      CustLedgEntry.SETRANGE("Customer No.",AccNo);
    CustLedgEntry.SETRANGE(Open,TRUE);
    ...
Table<Gen. Journal Line>.PROCEDURE<OnBeforeLookUpAppliesToDocEmpl>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<LookUpAppliesToDocEmpl>
    Code lines:
    IsHandled := FALSE;
    OnBeforeLookUpAppliesToDocEmpl(Rec,AccNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    CLEAR(EmplLedgEntry);
    EmplLedgEntry.SETCURRENTKEY("Employee No.",Open,Positive);
    IF AccNo <> '' THEN
      EmplLedgEntry.SETRANGE("Employee No.",AccNo);
    EmplLedgEntry.SETRANGE(Open,TRUE);
    ...
Table<Gen. Journal Line>.PROCEDURE<OnBeforeLookUpAppliesToDocVend>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<LookUpAppliesToDocVend>
    Code lines:
    IsHandled := FALSE;
    OnBeforeLookUpAppliesToDocVend(Rec,AccNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    CLEAR(VendLedgEntry);
    VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date");
    IF AccNo <> '' THEN
      VendLedgEntry.SETRANGE("Vendor No.",AccNo);
    VendLedgEntry.SETRANGE(Open,TRUE);
    ...
Table<Gen. Journal Line>.PROCEDURE<OnBeforeSetAmountWithCustLedgEntry>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<SetAmountWithCustLedgEntry>
    Code lines:
    OnBeforeSetAmountWithCustLedgEntry(Rec,CustLedgEntry); <=====================
    
    IF "Currency Code" <> CustLedgEntry."Currency Code" THEN
      CheckModifyCurrencyCode(GenJnlLine."Account Type"::Customer,CustLedgEntry."Currency Code");
    IF Amount = 0 THEN BEGIN
      CustLedgEntry.CALCFIELDS("Remaining Amount");
      SetAmountWithRemaining(
        PaymentToleranceMgt.CheckCalcPmtDiscGenJnlCust(Rec,CustLedgEntry,0,FALSE),
        CustLedgEntry."Amount to Apply",CustLedgEntry."Remaining Amount",CustLedgEntry."Remaining Pmt. Disc. Possible");
    END;
Table<Gen. Journal Line>.PROCEDURE<OnBeforeSetAmountWithVendLedgEntry>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<SetAmountWithVendLedgEntry>
    Code lines:
    OnBeforeSetAmountWithVendLedgEntry(Rec,VendLedgEntry); <=====================
    
    IF "Currency Code" <> VendLedgEntry."Currency Code" THEN
      CheckModifyCurrencyCode("Account Type"::Vendor,VendLedgEntry."Currency Code");
    IF Amount = 0 THEN BEGIN
      VendLedgEntry.CALCFIELDS("Remaining Amount");
      SetAmountWithRemaining(
        PaymentToleranceMgt.CheckCalcPmtDiscGenJnlVend(Rec,VendLedgEntry,0,FALSE),
        VendLedgEntry."Amount to Apply",VendLedgEntry."Remaining Amount",VendLedgEntry."Remaining Pmt. Disc. Possible");
    END;
Table<Gen. Journal Line>.PROCEDURE<OnBeforeValidateBalGenBusPostingGroup>
  Raised in: Table<Gen. Journal Line>.Field<Bal. Gen. Bus. Posting Group>.<OnValidate>
    Code lines:
    CheckIfFieldIsEmpty :=
      "Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"];
    OnBeforeValidateBalGenBusPostingGroup(Rec,CheckIfFieldIsEmpty); <=====================
    IF CheckIfFieldIsEmpty THEN
      TESTFIELD("Bal. Gen. Bus. Posting Group",'');
    IF xRec."Bal. Gen. Bus. Posting Group" <> "Bal. Gen. Bus. Posting Group" THEN
      IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Bal. Gen. Bus. Posting Group") THEN
        VALIDATE("Bal. VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
Table<Gen. Journal Line>.PROCEDURE<OnBeforeValidateBalGenPostingType>
  Raised in: Table<Gen. Journal Line>.Field<Bal. Gen. Posting Type>.<OnValidate>
    Code lines:
    CheckIfFieldIsEmpty :=
      "Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"];
    OnBeforeValidateBalGenPostingType(Rec,CheckIfFieldIsEmpty); <=====================
    IF CheckIfFieldIsEmpty THEN
      TESTFIELD("Bal. Gen. Posting Type","Bal. Gen. Posting Type"::" ");
    IF ("Bal. Gen. Posting Type" = "Gen. Posting Type"::Settlement) AND (CurrFieldNo <> 0) THEN
      ERROR(Text006,"Bal. Gen. Posting Type");
    IF "Bal. Gen. Posting Type" > 0 THEN
      VALIDATE("Bal. VAT Prod. Posting Group");
    
    ...
Table<Gen. Journal Line>.PROCEDURE<OnBeforeValidateBalGenProdPostingGroup>
  Raised in: Table<Gen. Journal Line>.Field<Bal. Gen. Prod. Posting Group>.<OnValidate>
    Code lines:
    CheckIfFieldIsEmpty :=
      "Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"];
    OnBeforeValidateBalGenProdPostingGroup(Rec,CheckIfFieldIsEmpty); <=====================
    IF CheckIfFieldIsEmpty THEN
      TESTFIELD("Bal. Gen. Prod. Posting Group",'');
    IF xRec."Bal. Gen. Prod. Posting Group" <> "Bal. Gen. Prod. Posting Group" THEN
      IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Bal. Gen. Prod. Posting Group") THEN
        VALIDATE("Bal. VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
Table<Gen. Journal Line>.PROCEDURE<OnBeforeValidateGenBusPostingGroup>
  Raised in: Table<Gen. Journal Line>.Field<Gen. Bus. Posting Group>.<OnValidate>
    Code lines:
    CheckIfFieldIsEmpty := "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"];
    OnBeforeValidateGenBusPostingGroup(Rec,CheckIfFieldIsEmpty); <=====================
    IF CheckIfFieldIsEmpty THEN
      TESTFIELD("Gen. Bus. Posting Group",'');
    IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN
      IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
        VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
Table<Gen. Journal Line>.PROCEDURE<OnBeforeValidateGenPostingType>
  Raised in: Table<Gen. Journal Line>.Field<Gen. Posting Type>.<OnValidate>
    Code lines:
    CheckIfFieldIsEmpty := "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"];
    OnBeforeValidateGenPostingType(Rec,CheckIfFieldIsEmpty); <=====================
    IF CheckIfFieldIsEmpty THEN
      TESTFIELD("Gen. Posting Type","Gen. Posting Type"::" ");
    IF ("Gen. Posting Type" = "Gen. Posting Type"::Settlement) AND (CurrFieldNo <> 0) THEN
      ERROR(Text006,"Gen. Posting Type");
    CheckVATInAlloc;
    IF "Gen. Posting Type" > 0 THEN
      VALIDATE("VAT Prod. Posting Group");
    IF "Gen. Posting Type" <> "Gen. Posting Type"::Purchase THEN
Table<Gen. Journal Line>.PROCEDURE<OnBeforeValidateGenProdPostingGroup>
  Raised in: Table<Gen. Journal Line>.Field<Gen. Prod. Posting Group>.<OnValidate>
    Code lines:
    CheckIfFieldIsEmpty := "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"];
    OnBeforeValidateGenProdPostingGroup(Rec,CheckIfFieldIsEmpty); <=====================
    IF CheckIfFieldIsEmpty THEN
      TESTFIELD("Gen. Prod. Posting Group",'');
    IF xRec."Gen. Prod. Posting Group" <> "Gen. Prod. Posting Group" THEN
      IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") THEN
        VALIDATE("VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
Table<Gen. Journal Line>.PROCEDURE<OnBeforeValidateShortcutDimCode>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<ValidateShortcutDimCode>
    Code lines:
    OnBeforeValidateShortcutDimCode(Rec,FieldNumber,ShortcutDimCode); <=====================
    
    TESTFIELD("Check Printed",FALSE);
    DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    
    OnAfterValidateShortcutDimCode(Rec,FieldNumber,ShortcutDimCode);
Table<Gen. Journal Line>.PROCEDURE<OnCheckGenJournalLinePostRestrictions>
  Raised in: Codeunit<Gen. Jnl.-Post Batch>.PROCEDURE<CheckRestrictions>
    Code lines:
    IF NOT PreviewMode THEN
      GenJournalLine.OnCheckGenJournalLinePostRestrictions; <=====================
Table<Gen. Journal Line>.PROCEDURE<OnCheckGenJournalLinePrintCheckRestrictions>
  Raised in: Codeunit<Document-Print>.PROCEDURE<PrintCheck>
    Code lines:
    GenJnlLine.COPY(NewGenJnlLine);
    GenJnlLine.OnCheckGenJournalLinePrintCheckRestrictions; <=====================
    OnBeforePrintCheck(GenJnlLine,IsPrinted);
    IF IsPrinted THEN
      EXIT;
    
    ReportSelections.Print(ReportSelections.Usage::"B.Check",GenJnlLine,0);
Table<Gen. Journal Line>.PROCEDURE<OnGenJnlLineGetVendorAccount>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetVendorAccount>
    Code lines:
    ...
    CheckICPartner(Vend."IC Partner Code","Account Type","Account No.");
    UpdateDescription(Vend.Name);
    "Payment Method Code" := Vend."Payment Method Code";
    "Creditor No." := Vend."Creditor No.";
    
    OnGenJnlLineGetVendorAccount(Vend); <=====================
    
    VALIDATE("Recipient Bank Account",Vend."Preferred Bank Account Code");
    "Posting Group" := Vend."Vendor Posting Group";
    SetSalespersonPurchaserCode(Vend."Purchaser Code","Salespers./Purch. Code");
    ...
Table<Gen. Journal Line>.PROCEDURE<OnGetCustLedgerEntryOnAfterAssignCustomerNo>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetCustLedgerEntry>
    Code lines:
    ...
      CustLedgEntry.SETRANGE(Open,TRUE);
      IF NOT CustLedgEntry.FINDFIRST THEN
        ERROR(NotExistErr,"Applies-to Doc. No.");
    
      VALIDATE("Account No.",CustLedgEntry."Customer No.");
      OnGetCustLedgerEntryOnAfterAssignCustomerNo(Rec,CustLedgEntry); <=====================
    
      CustLedgEntry.CALCFIELDS("Remaining Amount");
    
      IF "Posting Date" <= CustLedgEntry."Pmt. Discount Date" THEN
    ...
Table<Gen. Journal Line>.PROCEDURE<OnGetFAVATSetupOnBeforeCheckGLAcc>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetFAVATSetup>
    Code lines:
    ...
            "FA Posting Type"::Disposal:
              LocalGLAcc.GET(FAPostingGr.GetAcquisitionCostAccountOnDisposal);
            "FA Posting Type"::Maintenance:
              LocalGLAcc.GET(FAPostingGr.GetMaintenanceExpenseAccount);
          END;
          OnGetFAVATSetupOnBeforeCheckGLAcc(Rec,LocalGLAcc); <=====================
          LocalGLAcc.CheckGLAcc;
          IF NOT FABalAcc THEN BEGIN
            "Gen. Posting Type" := LocalGLAcc."Gen. Posting Type";
            "Gen. Bus. Posting Group" := LocalGLAcc."Gen. Bus. Posting Group";
    ...
Table<Gen. Journal Line>.PROCEDURE<OnGetVendLedgerEntryOnAfterAssignVendorNo>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<GetVendLedgerEntry>
    Code lines:
    ...
      VendLedgEntry.SETRANGE(Open,TRUE);
      IF NOT VendLedgEntry.FINDFIRST THEN
        ERROR(NotExistErr,"Applies-to Doc. No.");
    
      VALIDATE("Account No.",VendLedgEntry."Vendor No.");
      OnGetVendLedgerEntryOnAfterAssignVendorNo(Rec,VendLedgEntry); <=====================
    
      VendLedgEntry.CALCFIELDS("Remaining Amount");
    
      IF "Posting Date" <= VendLedgEntry."Pmt. Discount Date" THEN
    ...
Table<Gen. Journal Line>.PROCEDURE<OnLookUpAppliesToDocCustOnAfterSetFilters>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<LookUpAppliesToDocCust>
    Code lines:
    ...
    IF Amount <> 0 THEN BEGIN
      CustLedgEntry.SETRANGE(Positive,Amount < 0);
      IF CustLedgEntry.ISEMPTY THEN
        CustLedgEntry.SETRANGE(Positive);
    END;
    OnLookUpAppliesToDocCustOnAfterSetFilters(CustLedgEntry,Rec); <=====================
    
    ApplyCustEntries.SetGenJnlLine(Rec,GenJnlLine.FIELDNO("Applies-to Doc. No."));
    ApplyCustEntries.SETTABLEVIEW(CustLedgEntry);
    ApplyCustEntries.SETRECORD(CustLedgEntry);
    ...
Table<Gen. Journal Line>.PROCEDURE<OnLookUpAppliesToDocCustOnAfterUpdateDocumentTypeAndAppliesTo>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<LookUpAppliesToDocCust>
    Code lines:
    ...
        ELSE
          VALIDATE("Account No.",AccNo);
      END;
      SetAmountWithCustLedgEntry;
      UpdateDocumentTypeAndAppliesTo(CustLedgEntry."Document Type",CustLedgEntry."Document No.");
      OnLookUpAppliesToDocCustOnAfterUpdateDocumentTypeAndAppliesTo(Rec,CustLedgEntry); <=====================
    END;
Table<Gen. Journal Line>.PROCEDURE<OnLookUpAppliesToDocEmplOnAfterSetFilters>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<LookUpAppliesToDocEmpl>
    Code lines:
    ...
    IF Amount <> 0 THEN BEGIN
      EmplLedgEntry.SETRANGE(Positive,Amount < 0);
      IF EmplLedgEntry.ISEMPTY THEN;
      EmplLedgEntry.SETRANGE(Positive);
    END;
    OnLookUpAppliesToDocEmplOnAfterSetFilters(EmplLedgEntry,Rec); <=====================
    
    ApplyEmplEntries.SetGenJnlLine(Rec,GenJnlLine.FIELDNO("Applies-to Doc. No."));
    ApplyEmplEntries.SETTABLEVIEW(EmplLedgEntry);
    ApplyEmplEntries.SETRECORD(EmplLedgEntry);
    ...
Table<Gen. Journal Line>.PROCEDURE<OnLookUpAppliesToDocEmplOnAfterUpdateDocumentTypeAndAppliesTo>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<LookUpAppliesToDocEmpl>
    Code lines:
    ...
        ELSE
          VALIDATE("Account No.",AccNo);
      END;
      SetAmountWithEmplLedgEntry;
      UpdateDocumentTypeAndAppliesTo(EmplLedgEntry."Document Type",EmplLedgEntry."Document No.");
      OnLookUpAppliesToDocEmplOnAfterUpdateDocumentTypeAndAppliesTo(Rec,EmplLedgEntry); <=====================
    END;
Table<Gen. Journal Line>.PROCEDURE<OnLookUpAppliesToDocVendOnAfterSetFilters>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<LookUpAppliesToDocVend>
    Code lines:
    ...
    IF Amount <> 0 THEN BEGIN
      VendLedgEntry.SETRANGE(Positive,Amount < 0);
      IF VendLedgEntry.ISEMPTY THEN;
      VendLedgEntry.SETRANGE(Positive);
    END;
    OnLookUpAppliesToDocVendOnAfterSetFilters(VendLedgEntry,Rec); <=====================
    
    ApplyVendEntries.SetGenJnlLine(Rec,GenJnlLine.FIELDNO("Applies-to Doc. No."));
    ApplyVendEntries.SETTABLEVIEW(VendLedgEntry);
    ApplyVendEntries.SETRECORD(VendLedgEntry);
    ...
Table<Gen. Journal Line>.PROCEDURE<OnLookUpAppliesToDocVendOnAfterUpdateDocumentTypeAndAppliesTo>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<LookUpAppliesToDocVend>
    Code lines:
    ...
        ELSE
          VALIDATE("Account No.",AccNo);
      END;
      SetAmountWithVendLedgEntry;
      UpdateDocumentTypeAndAppliesTo(VendLedgEntry."Document Type",VendLedgEntry."Document No.");
      OnLookUpAppliesToDocVendOnAfterUpdateDocumentTypeAndAppliesTo(Rec,VendLedgEntry); <=====================
    END;
Table<Gen. Journal Line>.PROCEDURE<OnModifyOnBeforeTestCheckPrinted>
  Raised in: Table<Gen. Journal Line>.<OnModify>
    Code lines:
    SetLastModifiedDateTime;
    
    IsHandled := FALSE;
    OnModifyOnBeforeTestCheckPrinted(Rec,IsHandled); <=====================
    IF NOT IsHandled THEN
      TESTFIELD("Check Printed",FALSE);
    
    IF ("Applies-to ID" = '') AND (xRec."Applies-to ID" <> '') THEN
      ClearCustVendApplnEntry;
Table<Gen. Journal Line>.PROCEDURE<OnMoveGenJournalLine>
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostGLAcc>
    Code lines:
    ...
      IF NOT IsHandled THEN
        InsertGLEntry(GenJnlLine,GLEntry,TRUE);
      PostJob(GenJnlLine,GLEntry);
      PostVAT(GenJnlLine,GLEntry,VATPostingSetup);
      DeferralPosting("Deferral Code","Source Code","Account No.",GenJnlLine,Balancing);
      OnMoveGenJournalLine(GLEntry.RECORDID); <=====================
    END;
    
    OnAfterPostGLAcc(GenJnlLine,TempGLEntryBuf,NextEntryNo,NextTransactionNo,Balancing);
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostCust>
    Code lines:
    ...
      IF DtldLedgEntryInserted THEN
        IF IsTempGLEntryBufEmpty THEN
          DtldCustLedgEntry.SetZeroTransNo(NextTransactionNo);
    
      DeferralPosting("Deferral Code","Source Code",ReceivablesAccount,GenJnlLine,Balancing);
      OnMoveGenJournalLine(CustLedgEntry.RECORDID); <=====================
    END;
    
    OnAfterPostCust(GenJnlLine,Balancing,TempGLEntryBuf,NextEntryNo,NextTransactionNo);
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostVend>
    Code lines:
    ...
    
      IF DtldLedgEntryInserted THEN
        IF IsTempGLEntryBufEmpty THEN
          DtldVendLedgEntry.SetZeroTransNo(NextTransactionNo);
      DeferralPosting("Deferral Code","Source Code",PayablesAccount,GenJnlLine,Balancing);
      OnMoveGenJournalLine(VendLedgEntry.RECORDID); <=====================
    END;
    
    OnAfterPostVend(GenJnlLine,Balancing,TempGLEntryBuf,NextEntryNo,NextTransactionNo);
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostEmployee>
    Code lines:
    ...
      // Posting GL Entry
      IF DtldLedgEntryInserted THEN
        IF IsTempGLEntryBufEmpty THEN
          DtldEmplLedgEntry.SetZeroTransNo(NextTransactionNo);
    
      OnMoveGenJournalLine(EmployeeLedgerEntry.RECORDID); <=====================
    END;
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostBankAcc>
    Code lines:
    ...
      BankAccPostingGr.TESTFIELD("G/L Bank Account No.");
      CreateGLEntryBalAcc(
        GenJnlLine,BankAccPostingGr."G/L Bank Account No.","Amount (LCY)","Source Currency Amount",
        "Bal. Account Type","Bal. Account No.");
      DeferralPosting("Deferral Code","Source Code",BankAccPostingGr."G/L Bank Account No.",GenJnlLine,Balancing);
      OnMoveGenJournalLine(BankAccLedgEntry.RECORDID); <=====================
    END;
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<PostFixedAsset>
    Code lines:
    ...
      VATEntryGLEntryNo := GLEntry."Entry No.";
    TempGLEntryBuf."Entry No." := VATEntryGLEntryNo; // Used later in InsertVAT(): GLEntryVATEntryLink.InsertLink(TempGLEntryBuf."Entry No.",VATEntry."Entry No.")
    PostVAT(GenJnlLine,GLEntry,VATPostingSetup);
    
    FAJnlPostLine.UpdateRegNo(GLReg."No.");
    GenJnlLine.OnMoveGenJournalLine(GLEntry.RECORDID); <=====================
  Raised in: Codeunit<Gen. Jnl.-Post Line>.PROCEDURE<CreateGLEntryBalAcc>
    Code lines:
    InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,AmountAddCurr,TRUE,TRUE);
    GLEntry."Bal. Account Type" := BalAccType;
    GLEntry."Bal. Account No." := BalAccNo;
    InsertGLEntry(GenJnlLine,GLEntry,TRUE);
    GenJnlLine.OnMoveGenJournalLine(GLEntry.RECORDID); <=====================
Table<Gen. Journal Line>.PROCEDURE<OnSetUpNewLineOnBeforeIncrDocNo>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    ...
    GenJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
    IF GenJnlLine.FINDFIRST THEN BEGIN
      "Posting Date" := LastGenJnlLine."Posting Date";
      "Document Date" := LastGenJnlLine."Posting Date";
      "Document No." := LastGenJnlLine."Document No.";
      OnSetUpNewLineOnBeforeIncrDocNo(GenJnlLine,LastGenJnlLine); <=====================
      IF BottomLine AND
         (Balance - LastGenJnlLine."Balance (LCY)" = 0) AND
         NOT LastGenJnlLine.EmptyLine
      THEN
    ...
Table<Gen. Journal Line>.PROCEDURE<OnUpdateLineBalanceOnAfterAssignBalanceLCY>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<UpdateLineBalance>
    Code lines:
    ...
        "Balance (LCY)" := -"Amount (LCY)";
      ELSE
        "Balance (LCY)" := "Amount (LCY)";
    END;
    
    OnUpdateLineBalanceOnAfterAssignBalanceLCY("Balance (LCY)"); <=====================
    
    CLEAR(GenJnlAlloc);
    GenJnlAlloc.UpdateAllocations(Rec);
    
    ...
Table<Gen. Journal Line>.PROCEDURE<OnValidateAccountNoOnAfterAssignValue>
  Raised in: Table<Gen. Journal Line>.Field<Account No.>.<OnValidate>
    Code lines:
    ...
        GetFAAccount;
      "Account Type"::"IC Partner":
        GetICPartnerAccount;
    END;
    
    OnValidateAccountNoOnAfterAssignValue(Rec,xRec); <=====================
    
    VALIDATE("Currency Code");
    VALIDATE("VAT Prod. Posting Group");
    UpdateLineBalance;
    ...
Table<Gen. Journal Line>.PROCEDURE<OnValidateAccountNoOnBeforeAssignValue>
  Raised in: Table<Gen. Journal Line>.Field<Account No.>.<OnValidate>
    Code lines:
    ...
    IF "Account No." = '' THEN BEGIN
      CleanLine;
      EXIT;
    END;
    
    OnValidateAccountNoOnBeforeAssignValue(Rec,xRec); <=====================
    
    CASE "Account Type" OF
      "Account Type"::"G/L Account":
        GetGLAccount;
    ...
Table<Gen. Journal Line>.PROCEDURE<OnValidateAmountOnAfterAssignAmountLCY>
  Raised in: Table<Gen. Journal Line>.PROCEDURE<ValidateAmount>
    Code lines:
    ...
    IF "Currency Code" = '' THEN
      "Amount (LCY)" := Amount
    ELSE
      "Amount (LCY)" := ROUND(
          CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code",Amount,"Currency Factor"));
    OnValidateAmountOnAfterAssignAmountLCY("Amount (LCY)"); <=====================
    
    Amount := ROUND(Amount,Currency."Amount Rounding Precision");
    IF (CurrFieldNo <> 0) AND
       (CurrFieldNo <> FIELDNO("Applies-to Doc. No.")) AND
    ...
Table<Gen. Journal Line>.PROCEDURE<OnValidateBalAccountNoOnAfterAssignValue>
  Raised in: Table<Gen. Journal Line>.Field<Bal. Account No.>.<OnValidate>
    Code lines:
    ...
        GetFABalAccount;
      "Bal. Account Type"::"IC Partner":
        GetICPartnerBalAccount;
    END;
    
    OnValidateBalAccountNoOnAfterAssignValue(Rec,xRec); <=====================
    
    VALIDATE("Currency Code");
    VALIDATE("Bal. VAT Prod. Posting Group");
    UpdateLineBalance;
    ...
Table<Gen. Journal Line>.PROCEDURE<OnValidateBalAccountNoOnBeforeAssignValue>
  Raised in: Table<Gen. Journal Line>.Field<Bal. Account No.>.<OnValidate>
    Code lines:
    ...
        ClearCurrencyCode;
      END;
      EXIT;
    END;
    
    OnValidateBalAccountNoOnBeforeAssignValue(Rec,xRec); <=====================
    
    CASE "Bal. Account Type" OF
      "Bal. Account Type"::"G/L Account":
        GetGLBalAccount;
    ...
Table<Gen. Journal Line>.PROCEDURE<OnValidateBalVATPctOnAfterAssignBalVATAmountLCY>
  Raised in: Table<Gen. Journal Line>.Field<Bal. VAT %>.<OnValidate>
    Code lines:
    ...
      "Bal. VAT Amount (LCY)" := "Bal. VAT Amount"
    ELSE
      "Bal. VAT Amount (LCY)" :=
        ROUND(
          CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code","Bal. VAT Amount","Currency Factor"));
    OnValidateBalVATPctOnAfterAssignBalVATAmountLCY("Bal. VAT Amount (LCY)"); <=====================
    "Bal. VAT Base Amount (LCY)" := -("Amount (LCY)" + "Bal. VAT Amount (LCY)");
    
    UpdateSalesPurchLCY;
Table<Gen. Journal Line>.PROCEDURE<OnValidatePaymentTermsCodeOnBeforeCalculateDueDate>
  Raised in: Table<Gen. Journal Line>.Field<Payment Terms Code>.<OnValidate>
    Code lines:
    ...
      CASE "Document Type" OF
        "Document Type"::Invoice:
          IF ("Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
            PaymentTerms.GET("Payment Terms Code");
            IsHandled := FALSE;
            OnValidatePaymentTermsCodeOnBeforeCalculateDueDate(Rec,PaymentTerms,IsHandled); <=====================
            IF NOT IsHandled THEN
              "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
            IsHandled := FALSE;
            OnValidatePaymentTermsCodeOnBeforeCalculatePmtDiscountDate(Rec,PaymentTerms,IsHandled);
    ...
Table<Gen. Journal Line>.PROCEDURE<OnValidatePaymentTermsCodeOnBeforeCalculatePmtDiscountDate>
  Raised in: Table<Gen. Journal Line>.Field<Payment Terms Code>.<OnValidate>
    Code lines:
    ...
            IsHandled := FALSE;
            OnValidatePaymentTermsCodeOnBeforeCalculateDueDate(Rec,PaymentTerms,IsHandled);
            IF NOT IsHandled THEN
              "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
            IsHandled := FALSE;
            OnValidatePaymentTermsCodeOnBeforeCalculatePmtDiscountDate(Rec,PaymentTerms,IsHandled); <=====================
            IF NOT IsHandled THEN
              "Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
            "Payment Discount %" := PaymentTerms."Discount %";
          END ELSE
    ...
Table<Item Journal Line>.PROCEDURE<OnAfterClearTracking>
  Raised in: Table<Item Journal Line>.PROCEDURE<ClearTracking>
    Code lines:
    "Serial No." := '';
    "Lot No." := '';
    
    OnAfterClearTracking(Rec); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyFromMachineCenter>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromMachineCenter>
    Code lines:
    "Work Center No." := MachineCenter."Work Center No.";
    Description := MachineCenter.Name;
    "Gen. Prod. Posting Group" := MachineCenter."Gen. Prod. Posting Group";
    "Unit Cost Calculation" := "Unit Cost Calculation"::Time;
    
    OnAfterCopyFromMachineCenter(Rec,MachineCenter); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyFromProdOrderComp>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromProdOrderComp>
    Code lines:
    ...
    "Unit of Measure Code" := ProdOrderComp."Unit of Measure Code";
    "Location Code" := ProdOrderComp."Location Code";
    VALIDATE("Variant Code",ProdOrderComp."Variant Code");
    VALIDATE("Bin Code",ProdOrderComp."Bin Code");
    
    OnAfterCopyFromProdOrderComp(Rec,ProdOrderComp); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyFromProdOrderLine>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromProdOrderLine>
    Code lines:
    ...
    "Unit of Measure Code" := ProdOrderLine."Unit of Measure Code";
    "Location Code" := ProdOrderLine."Location Code";
    VALIDATE("Variant Code",ProdOrderLine."Variant Code");
    VALIDATE("Bin Code",ProdOrderLine."Bin Code");
    
    OnAfterCopyFromProdOrderLine(Rec,ProdOrderLine); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyFromWorkCenter>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromWorkCenter>
    Code lines:
    "Work Center No." := WorkCenter."No.";
    Description := WorkCenter.Name;
    "Gen. Prod. Posting Group" := WorkCenter."Gen. Prod. Posting Group";
    "Unit Cost Calculation" := WorkCenter."Unit Cost Calculation";
    
    OnAfterCopyFromWorkCenter(Rec,WorkCenter); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromJobJnlLine>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromJobJnlLine>
    Code lines:
    ...
    "Value Entry Type" := "Value Entry Type"::"Direct Cost";
    "Job No." := JobJnlLine."Job No.";
    "Job Task No." := JobJnlLine."Job Task No.";
    "Shpt. Method Code" := JobJnlLine."Shpt. Method Code";
    
    OnAfterCopyItemJnlLineFromJobJnlLine(Rec,JobJnlLine); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromPurchHeader>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromPurchHeader>
    Code lines:
    ...
    "Country/Region Code" := PurchHeader."Buy-from Country/Region Code";
    "Reason Code" := PurchHeader."Reason Code";
    "Source Currency Code" := PurchHeader."Currency Code";
    "Shpt. Method Code" := PurchHeader."Shipment Method Code";
    
    OnAfterCopyItemJnlLineFromPurchHeader(Rec,PurchHeader); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromPurchLine>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromPurchLine>
    Code lines:
    ...
    "Purchasing Code" := PurchLine."Purchasing Code";
    "Indirect Cost %" := PurchLine."Indirect Cost %";
    "Overhead Rate" := PurchLine."Overhead Rate";
    "Return Reason Code" := PurchLine."Return Reason Code";
    
    OnAfterCopyItemJnlLineFromPurchLine(Rec,PurchLine); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromSalesHeader>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromSalesHeader>
    Code lines:
    ...
    "Salespers./Purch. Code" := SalesHeader."Salesperson Code";
    "Reason Code" := SalesHeader."Reason Code";
    "Source Currency Code" := SalesHeader."Currency Code";
    "Shpt. Method Code" := SalesHeader."Shipment Method Code";
    
    OnAfterCopyItemJnlLineFromSalesHeader(Rec,SalesHeader); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromSalesLine>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromSalesLine>
    Code lines:
    ...
    "Value Entry Type" := "Value Entry Type"::"Direct Cost";
    "Source Type" := "Source Type"::Customer;
    "Source No." := SalesLine."Sell-to Customer No.";
    "Invoice-to Source No." := SalesLine."Bill-to Customer No.";
    
    OnAfterCopyItemJnlLineFromSalesLine(Rec,SalesLine); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServHeader>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromServHeader>
    Code lines:
    ...
    "Reason Code" := ServiceHeader."Reason Code";
    "Source Type" := "Source Type"::Customer;
    "Source No." := ServiceHeader."Customer No.";
    "Shpt. Method Code" := ServiceHeader."Shipment Method Code";
    
    OnAfterCopyItemJnlLineFromServHeader(Rec,ServiceHeader); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServLine>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromServLine>
    Code lines:
    ...
    "Order No." := ServiceLine."Document No.";
    "Order Line No." := ServiceLine."Line No.";
    "Job No." := ServiceLine."Job No.";
    "Job Task No." := ServiceLine."Job Task No.";
    
    OnAfterCopyItemJnlLineFromServLine(Rec,ServiceLine); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServShptHeader>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromServShptHeader>
    Code lines:
    ...
    "Country/Region Code" := ServShptHeader."VAT Country/Region Code";
    "Source Posting Group" := ServShptHeader."Customer Posting Group";
    "Salespers./Purch. Code" := ServShptHeader."Salesperson Code";
    "Reason Code" := ServShptHeader."Reason Code";
    
    OnAfterCopyItemJnlLineFromServShptHeader(Rec,ServShptHeader); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServShptLine>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromServShptLine>
    Code lines:
    ...
    "Qty. per Unit of Measure" := ServShptLine."Qty. per Unit of Measure";
    "Item Category Code" := ServShptLine."Item Category Code";
    Nonstock := ServShptLine.Nonstock;
    "Return Reason Code" := ServShptLine."Return Reason Code";
    
    OnAfterCopyItemJnlLineFromServShptLine(Rec,ServShptLine); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyItemJnlLineFromServShptLineUndo>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyFromServShptLineUndo>
    Code lines:
    ...
    "Derived from Blanket Order" := FALSE;
    "Item Category Code" := ServShptLine."Item Category Code";
    Nonstock := ServShptLine.Nonstock;
    "Return Reason Code" := ServShptLine."Return Reason Code";
    
    OnAfterCopyItemJnlLineFromServShptLineUndo(Rec,ServShptLine); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCopyTrackingFromSpec>
  Raised in: Table<Item Journal Line>.PROCEDURE<CopyTrackingFromSpec>
    Code lines:
    "Serial No." := TrackingSpecification."Serial No.";
    "Lot No." := TrackingSpecification."Lot No.";
    
    OnAfterCopyTrackingFromSpec(Rec,TrackingSpecification); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Item Journal Line>.PROCEDURE<CreateDim>
    Code lines:
    CreateTableArray(TableID,Type1,Type2,Type3);
    CreateCodeArray(No,No1,No2,No3);
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    PickDimension(TableID,No,0,0);
  Raised in: Table<Item Journal Line>.PROCEDURE<CreateDimWithProdOrderLine>
    Code lines:
    ...
      IF ProdOrderLine.GET(ProdOrderLine.Status::Released,"Order No.","Order Line No.") THEN
        InheritFromDimSetID := ProdOrderLine."Dimension Set ID";
    
    CreateTableArray(TableID,DATABASE::"Work Center",DATABASE::"Salesperson/Purchaser",0);
    CreateCodeArray(No,"Work Center No.","Salespers./Purch. Code",'');
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    PickDimension(TableID,No,InheritFromDimSetID,DATABASE::Item);
Table<Item Journal Line>.PROCEDURE<OnAfterGetItemChange>
  Raised in: Table<Item Journal Line>.PROCEDURE<GetItem>
    Code lines:
    IF Item."No." <> "Item No." THEN
      Item.GET("Item No.");
    
    OnAfterGetItemChange(Item,Rec); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterItemPosting>
  Raised in: Table<Item Journal Line>.PROCEDURE<ItemPosting>
    Code lines:
    IF ("Entry Type" = "Entry Type"::Output) AND ("Output Quantity" <> 0) AND ("Operation No." <> '') THEN BEGIN
      ProdOrderRoutingLine.GET(
        ProdOrderRoutingLine.Status::Released,"Order No.","Routing Reference No.","Routing No.","Operation No.");
      IsHandled := FALSE;
      OnAfterItemPosting(ProdOrderRoutingLine,NextOperationNoIsEmpty,IsHandled); <=====================
      IF IsHandled THEN
        EXIT(NextOperationNoIsEmpty);
      EXIT(ProdOrderRoutingLine."Next Operation No." = '');
    END;
    
Table<Item Journal Line>.PROCEDURE<OnAfterOnValidateItemNoAssignByEntryType>
  Raised in: Table<Item Journal Line>.Field<Item No.>.<OnValidate>
    Code lines:
    ...
      "Unit of Measure Code" := Item."Base Unit of Measure";
    VALIDATE("Unit of Measure Code");
    IF "Variant Code" <> '' THEN
      VALIDATE("Variant Code");
    
    OnAfterOnValidateItemNoAssignByEntryType(Rec,Item); <=====================
    
    CheckItemAvailable(FIELDNO("Item No."));
    
    IF ((NOT ("Order Type" IN ["Order Type"::Production,"Order Type"::Assembly])) OR ("Order No." = '')) AND NOT "Phys. Inventory"
    ...
Table<Item Journal Line>.PROCEDURE<OnAfterSetupNewLine>
  Raised in: Table<Item Journal Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    ...
    
    IF Location.GET("Location Code") THEN
      IF  Location."Directed Put-away and Pick" THEN
        "Location Code" := '';
    
    OnAfterSetupNewLine(Rec,LastItemJnlLine,ItemJnlTemplate); <=====================
Table<Item Journal Line>.PROCEDURE<OnAfterUpdateAmount>
  Raised in: Table<Item Journal Line>.PROCEDURE<UpdateAmount>
    Code lines:
    Amount := ROUND(Quantity * "Unit Amount");
    
    OnAfterUpdateAmount(Rec); <=====================
Table<Item Journal Line>.PROCEDURE<OnBeforePostingItemJnlFromProduction>
  Raised in: Table<Item Journal Line>.PROCEDURE<PostingItemJnlFromProduction>
    Code lines:
    IF ("Order Type" = "Order Type"::Production) AND ("Order No." <> '') THEN
      ProductionOrder.GET(ProductionOrder.Status::Released,"Order No.");
    
    IsHandled := FALSE;
    OnBeforePostingItemJnlFromProduction(Rec,Print,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF Print THEN
      CODEUNIT.RUN(CODEUNIT::"Item Jnl.-Post+Print",Rec)
    ...
Table<Item Journal Line>.PROCEDURE<OnBeforeRetrieveCosts>
  Raised in: Table<Item Journal Line>.PROCEDURE<RetrieveCosts>
    Code lines:
    IsHandled := FALSE;
    OnBeforeRetrieveCosts(Rec,UnitCost,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF ("Value Entry Type" <> "Value Entry Type"::"Direct Cost") OR
       ("Item Charge No." <> '')
    THEN
      EXIT;
    
    ...
Table<Item Journal Line>.PROCEDURE<OnBeforeSelectItemEntry>
  Raised in: Table<Item Journal Line>.PROCEDURE<SelectItemEntry>
    Code lines:
    OnBeforeSelectItemEntry(Rec,xRec,CurrentFieldNo); <=====================
    
    IF ("Entry Type" = "Entry Type"::Output) AND
       ("Value Entry Type" <> "Value Entry Type"::Revaluation) AND
       (CurrentFieldNo = FIELDNO("Applies-to Entry"))
    THEN BEGIN
      ItemLedgEntry.SETCURRENTKEY(
        "Order Type","Order No.","Order Line No.","Entry Type","Prod. Order Comp. Line No.");
      ItemLedgEntry.SETRANGE("Order Type","Order Type"::Production);
      ItemLedgEntry.SETRANGE("Order No.","Order No.");
    ...
Table<Item Journal Line>.PROCEDURE<OnBeforeValidateScrapCode>
  Raised in: Table<Item Journal Line>.Field<Scrap Code>.<OnValidate>
    Code lines:
    IsHandled := FALSE;
    OnBeforeValidateScrapCode(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    TESTFIELD(Type,Type::"Machine Center");
Table<Item Journal Line>.PROCEDURE<OnBeforeVerifyReservedQty>
  Raised in: Table<Item Journal Line>.<OnModify>
    Code lines:
    OnBeforeVerifyReservedQty(Rec,xRec,0); <=====================
    ReserveItemJnlLine.VerifyChange(Rec,xRec);
    CheckPlanningAssignment;
  Raised in: Table<Item Journal Line>.Field<Item No.>.<OnValidate>
    Code lines:
    ...
      CreateDim(
        DATABASE::Item,"Item No.",
        DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
        DATABASE::"Work Center","Work Center No.");
    
    OnBeforeVerifyReservedQty(Rec,xRec,FIELDNO("Item No.")); <=====================
    ReserveItemJnlLine.VerifyChange(Rec,xRec);
Table<Item Journal Line>.PROCEDURE<OnCheckItemJournalLinePostRestrictions>
  Raised in: Table<Item Journal Line>.PROCEDURE<CheckItemJournalLineRestriction>
    Code lines:
    OnCheckItemJournalLinePostRestrictions; <=====================
Table<Item Journal Line>.PROCEDURE<OnCreateAssemblyDimOnAfterCreateDimSetIDArr>
  Raised in: Table<Item Journal Line>.PROCEDURE<CreateAssemblyDim>
    Code lines:
    ...
      i := i + 1;
      AssemblyLine.GET(AssemblyLine."Document Type"::Order,"Order No.","Order Line No.");
      DimSetIDArr[i] := AssemblyLine."Dimension Set ID";
    END;
    
    OnCreateAssemblyDimOnAfterCreateDimSetIDArr(Rec,DimSetIDArr,i); <=====================
    "Dimension Set ID" := DimMgt.GetCombinedDimensionSetID(DimSetIDArr,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
Table<Item Journal Line>.PROCEDURE<OnCreateProdDimOnAfterCreateDimSetIDArr>
  Raised in: Table<Item Journal Line>.PROCEDURE<CreateProdDim>
    Code lines:
    ...
      i := i + 1;
      ProdOrderComp.GET(ProdOrderLine.Status::Released,"Order No.","Order Line No.","Prod. Order Comp. Line No.");
      DimSetIDArr[i] := ProdOrderComp."Dimension Set ID";
    END;
    
    OnCreateProdDimOnAfterCreateDimSetIDArr(Rec,DimSetIDArr,i); <=====================
    "Dimension Set ID" := DimMgt.GetCombinedDimensionSetID(DimSetIDArr,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
Table<Item Journal Line>.PROCEDURE<OnLastOutputOperationOnBeforeTestRoutingNo>
  Raised in: Table<Item Journal Line>.PROCEDURE<LastOutputOperation>
    Code lines:
    WITH ItemJnlLine DO BEGIN
      IF "Operation No." <> '' THEN BEGIN
        IsHandled := FALSE;
        OnLastOutputOperationOnBeforeTestRoutingNo(ItemJnlLine,IsHandled); <=====================
        IF NOT IsHandled THEN
          TESTFIELD("Routing No.");
        IF NOT ProdOrderRtngLine.GET(
             ProdOrderRtngLine.Status::Released,"Order No.",
             "Routing Reference No.","Routing No.","Operation No.")
        THEN
    ...
Table<Item Journal Line>.PROCEDURE<OnSelectItemEntryOnBeforeOpenPage>
  Raised in: Table<Item Journal Line>.PROCEDURE<SelectItemEntry>
    Code lines:
    ...
        ItemLedgEntry.SETRANGE(Open,TRUE);
      END;
    END ELSE
      ItemLedgEntry.SETRANGE(Positive,FALSE);
    
    OnSelectItemEntryOnBeforeOpenPage(ItemLedgEntry,Rec); <=====================
    
    IF PAGE.RUNMODAL(PAGE::"Item Ledger Entries",ItemLedgEntry) = ACTION::LookupOK THEN BEGIN
      ItemJnlLine2 := Rec;
      IF CurrentFieldNo = FIELDNO("Applies-to Entry") THEN
    ...
Table<Item Journal Line>.PROCEDURE<OnValidateItemNoOnAfterGetItem>
  Raised in: Table<Item Journal Line>.Field<Item No.>.<OnValidate>
    Code lines:
    ...
        DATABASE::"Work Center","Work Center No.");
      EXIT;
    END;
    
    GetItem;
    OnValidateItemNoOnAfterGetItem(Rec,Item); <=====================
    DisplayErrorIfItemIsBlocked(Item);
    ValidateTypeWithItemNo;
    
    IF "Value Entry Type" = "Value Entry Type"::Revaluation THEN
    ...
Table<Item Journal Line>.PROCEDURE<OnValidateQuantityOnBeforeGetUnitAmount>
  Raised in: Table<Item Journal Line>.Field<Quantity>.<OnValidate>
    Code lines:
    ...
      "Invoiced Quantity" := 0
    ELSE
      "Invoiced Quantity" := Quantity;
    "Invoiced Qty. (Base)" := UOMMgt.CalcBaseQty("Invoiced Quantity","Qty. per Unit of Measure");
    
    OnValidateQuantityOnBeforeGetUnitAmount(Rec,xRec,CurrFieldNo); <=====================
    
    GetUnitAmount(FIELDNO(Quantity));
    UpdateAmount;
    
    ...
Table<Acc. Schedule Name>.PROCEDURE<OnBeforePrint>
  Raised in: Table<Acc. Schedule Name>.PROCEDURE<Print>
    Code lines:
    IsHandled := FALSE;
    OnBeforePrint(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    AccountSchedule.SetAccSchedName(Name);
    AccountSchedule.SetColumnLayoutName("Default Column Layout");
    AccountSchedule.RUN;
Table<Acc. Schedule Line>.PROCEDURE<OnAfterLookupTotaling>
  Raised in: Table<Acc. Schedule Line>.PROCEDURE<LookupTotaling>
    Code lines:
    ...
          IF CFAccList.RUNMODAL = ACTION::LookupOK THEN
            VALIDATE(Totaling,CFAccList.GetSelectionFilter);
        END;
    END;
    
    OnAfterLookupTotaling(Rec); <=====================
Table<Acc. Schedule Line>.PROCEDURE<OnBeforeLookupTotaling>
  Raised in: Table<Acc. Schedule Line>.PROCEDURE<LookupTotaling>
    Code lines:
    IsHandled := FALSE;
    OnBeforeLookupTotaling(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    CASE "Totaling Type" OF
      "Totaling Type"::"Posting Accounts",
      "Totaling Type"::"Total Accounts":
        BEGIN
          GLAccList.LOOKUPMODE(TRUE);
    ...
Table<Config. Line>.PROCEDURE<OnBeforeShowTableData>
  Raised in: Table<Config. Line>.PROCEDURE<ShowTableData>
    Code lines:
    IsHandled := FALSE;
    OnBeforeShowTableData(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF ("Line Type" = "Line Type"::Table) AND ("Page ID" <> 0) THEN
      PAGE.RUN("Page ID");
Table<Config. Table Processing Rule>.PROCEDURE<OnDoesTableHaveCustomRuleInRapidStart>
  Raised in: Table<Config. Table Processing Rule>.PROCEDURE<DoesTableHaveCustomRuleInRapidStart>
    Code lines:
    OnDoesTableHaveCustomRuleInRapidStart("Table ID",Result); <=====================
Table<BOM Component>.PROCEDURE<OnAfterCopyFromItem>
  Raised in: Table<BOM Component>.PROCEDURE<CopyFromItem>
    Code lines:
    ...
    Item.FIND;
    ParentItem.FIND;
    IF ParentItem."Low-Level Code" >= Item."Low-Level Code" THEN
      ERROR(Text001,"No.");
    
    OnAfterCopyFromItem(Rec,Item); <=====================
Table<BOM Component>.PROCEDURE<OnAfterCopyFromResource>
  Raised in: Table<BOM Component>.PROCEDURE<CopyFromResource>
    Code lines:
    Res.GET("No.");
    "Assembly BOM" := FALSE;
    Description := Res.Name;
    "Unit of Measure Code" := Res."Base Unit of Measure";
    
    OnAfterCopyFromResource(Rec,Res); <=====================
Table<BOM Component>.PROCEDURE<OnBeforeCopyFromItem>
  Raised in: Table<BOM Component>.PROCEDURE<CopyFromItem>
    Code lines:
    Item.GET("No.");
    ValidateAgainstRecursion("No.");
    OnBeforeCopyFromItem(Rec,xRec,Item,CurrFieldNo); <=====================
    
    Item.CALCFIELDS("Assembly BOM");
    "Assembly BOM" := Item."Assembly BOM";
    Description := Item.Description;
    "Unit of Measure Code" := Item."Base Unit of Measure";
    ParentItem.GET("Parent Item No.");
    CalcLowLevelCode.SetRecursiveLevelsOnItem(Item,ParentItem."Low-Level Code" + 1,TRUE);
    ...
Table<BOM Component>.PROCEDURE<OnBeforeValidateAgainstRecursion>
  Raised in: Table<BOM Component>.PROCEDURE<ValidateAgainstRecursion>
    Code lines:
    IsHandled := FALSE;
    OnBeforeValidateAgainstRecursion(ItemNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF "Parent Item No." = ItemNo THEN
      ERROR(Text001,ItemNo);
    
    IF Type = Type::Item THEN BEGIN
      BOMComp.SETCURRENTKEY(Type,"No.");
    ...
Table<Assembly Header>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Assembly Header>.PROCEDURE<CreateDim>
    Code lines:
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    "Dimension Set ID" :=
      DimMgt.GetRecDefaultDimID(
        Rec,CurrFieldNo,TableID,No,SourceCodeSetup.Assembly,
    ...
Table<Assembly Header>.PROCEDURE<OnAfterInitQtyToAssemble>
  Raised in: Table<Assembly Header>.PROCEDURE<InitQtyToAssemble>
    Code lines:
    "Quantity to Assemble" := "Remaining Quantity";
    "Quantity to Assemble (Base)" := "Remaining Quantity (Base)";
    ATOLink.InitQtyToAsm(Rec,"Quantity to Assemble","Quantity to Assemble (Base)");
    
    OnAfterInitQtyToAssemble(Rec,CurrFieldNo); <=====================
Table<Assembly Header>.PROCEDURE<OnAfterInitRecord>
  Raised in: Table<Assembly Header>.PROCEDURE<InitRecord>
    Code lines:
    ...
    IF "Ending Date" = 0D THEN
      "Ending Date" := WORKDATE;
    
    SetDefaultLocation;
    
    OnAfterInitRecord(Rec); <=====================
Table<Assembly Header>.PROCEDURE<OnAfterInitRemaining>
  Raised in: Table<Assembly Header>.PROCEDURE<InitRemainingQty>
    Code lines:
    "Remaining Quantity" := Quantity - "Assembled Quantity";
    "Remaining Quantity (Base)" := "Quantity (Base)" - "Assembled Quantity (Base)";
    
    OnAfterInitRemaining(Rec,CurrFieldNo); <=====================
Table<Assembly Line>.PROCEDURE<OnAfterCalcExpectedInventory>
  Raised in: Table<Assembly Line>.PROCEDURE<CalcAvailQuantities>
    Code lines:
    ...
        CompanyInfo."Check-Avail. Time Bucket",CompanyInfo."Check-Avail. Period Calc.");
    
    ExpectedInventory :=
      CalcExpectedInventory(AvailableInventory,ScheduledReceipt - ReservedReceipt,GrossRequirement - ReservedRequirement);
    
    OnAfterCalcExpectedInventory(Rec,Item,ExpectedInventory); <=====================
    
    AvailableInventory := CalcQtyFromBase(AvailableInventory);
    GrossRequirement := CalcQtyFromBase(GrossRequirement);
    ScheduledReceipt := CalcQtyFromBase(ScheduledReceipt);
Table<Assembly Line>.PROCEDURE<OnAfterCopyFromItem>
  Raised in: Table<Assembly Line>.PROCEDURE<CopyFromItem>
    Code lines:
    ...
    Reserve := Item.Reserve;
    VALIDATE(Quantity);
    VALIDATE("Quantity to Consume",
      MinValue(MaxQtyToConsume,CalcQuantity("Quantity per",AssemblyHeader."Quantity to Assemble")));
    
    OnAfterCopyFromItem(Rec,Item,AssemblyHeader); <=====================
Table<Assembly Line>.PROCEDURE<OnAfterCopyFromResource>
  Raised in: Table<Assembly Line>.PROCEDURE<CopyFromResource>
    Code lines:
    ...
    CreateDim(DATABASE::Resource,"No.",AssemblyHeader."Dimension Set ID");
    VALIDATE(Quantity);
    VALIDATE("Quantity to Consume",
      MinValue(MaxQtyToConsume,CalcQuantity("Quantity per",AssemblyHeader."Quantity to Assemble")));
    
    OnAfterCopyFromResource(Rec,Resource,AssemblyHeader); <=====================
Table<Assembly Line>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Assembly Line>.PROCEDURE<CreateDim>
    Code lines:
    ...
      EXIT;
    
    SourceCodeSetup.GET;
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    AssemblySetup.GET;
    ...
Table<Assembly Line>.PROCEDURE<OnAfterFilterLinesWithItemToPlan>
  Raised in: Table<Assembly Line>.PROCEDURE<FilterLinesWithItemToPlan>
    Code lines:
    ...
    SETFILTER("Due Date",Item.GETFILTER("Date Filter"));
    SETFILTER("Shortcut Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
    SETFILTER("Shortcut Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
    SETFILTER("Remaining Quantity (Base)",'<>0');
    
    OnAfterFilterLinesWithItemToPlan(Rec,Item,DocumentType); <=====================
Table<Assembly Line>.PROCEDURE<OnBeforeCalcQtyToPick>
  Raised in: Table<Assembly Line>.PROCEDURE<CalcQtyToPick>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCalcQtyToPick(Rec,QtyToPick,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(QtyToPick);
    
    CALCFIELDS("Pick Qty.");
    EXIT("Remaining Quantity" - (CalcQtyPickedNotConsumed + "Pick Qty."));
Table<Assembly Line>.PROCEDURE<OnBeforeCalcQtyToPickBase>
  Raised in: Table<Assembly Line>.PROCEDURE<CalcQtyToPickBase>
    Code lines:
    IsHandled := FALSE;
    OnBeforeCalcQtyToPickBase(Rec,QtyToPickBase,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(QtyToPickBase);
    
    CALCFIELDS("Pick Qty. (Base)");
    EXIT("Remaining Quantity (Base)" - (CalcQtyPickedNotConsumedBase + "Pick Qty. (Base)"));
Table<Assemble-to-Order Link>.PROCEDURE<OnAfterRemoveTrackingFromReservation>
  Raised in: Table<Assemble-to-Order Link>.PROCEDURE<RemoveTrackingFromReservation>
    Code lines:
    ...
      ReservEntry,TrackingSpecification,
      TrackingSpecification."Quantity (Base)",QtyToAdd,
      ItemTrackingCodeRec."SN Specific Tracking",
      ItemTrackingCodeRec."Lot Specific Tracking");
    
    OnAfterRemoveTrackingFromReservation(ReservEntry,TrackingSpecification,ItemTrackingCodeRec); <=====================
Table<Assemble-to-Order Link>.PROCEDURE<OnAfterUpdateAsm>
  Raised in: Table<Assemble-to-Order Link>.PROCEDURE<UpdateAsm>
    Code lines:
    ...
    INSERT;
    AsmHeader."Shortcut Dimension 1 Code" := NewSalesLine."Shortcut Dimension 1 Code";
    AsmHeader."Shortcut Dimension 2 Code" := NewSalesLine."Shortcut Dimension 2 Code";
    AsmHeader.MODIFY(TRUE);
    
    OnAfterUpdateAsm(AsmHeader); <=====================
Table<Assemble-to-Order Link>.PROCEDURE<OnBeforeAsmHeaderInsert>
  Raised in: Table<Assemble-to-Order Link>.PROCEDURE<InsertAsmHeader>
    Code lines:
    ...
      EXIT;
    
    AsmHeader.INIT;
    AsmHeader.VALIDATE("Document Type",NewDocType);
    AsmHeader.VALIDATE("No.",NewDocNo);
    OnBeforeAsmHeaderInsert(AsmHeader); <=====================
    AsmHeader.INSERT(TRUE);
Table<Assemble-to-Order Link>.PROCEDURE<OnBeforeAsmHeaderModify>
  Raised in: Table<Assemble-to-Order Link>.PROCEDURE<SynchronizeAsmFromSalesLine>
    Code lines:
    ...
    ChangePlanningFlexibility;
    ChangeQty(NewSalesLine."Qty. to Assemble to Order");
    IF NewSalesLine."Document Type" <> NewSalesLine."Document Type"::Quote THEN
      ChangeQtyToAsm(MaxQtyToAsm(NewSalesLine,AsmHeader));
    
    OnBeforeAsmHeaderModify(AsmHeader,NewSalesLine); <=====================
    AsmHeader.MODIFY(TRUE);
    
    ReserveAsmToSale(NewSalesLine,
      AsmHeader."Remaining Quantity" - QtyTracked,
    ...
Table<Assemble-to-Order Link>.PROCEDURE<OnBeforeInsertAsmHeader>
  Raised in: Table<Assemble-to-Order Link>.PROCEDURE<InsertAsmHeader>
    Code lines:
    IsHandled := FALSE;
    OnBeforeInsertAsmHeader(AsmHeader,NewDocType,NewDocNo,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    AsmHeader.INIT;
    AsmHeader.VALIDATE("Document Type",NewDocType);
    AsmHeader.VALIDATE("No.",NewDocNo);
    OnBeforeAsmHeaderInsert(AsmHeader);
    AsmHeader.INSERT(TRUE);
Table<Assemble-to-Order Link>.PROCEDURE<OnBeforeRemoveTrackingFromReservation>
  Raised in: Table<Assemble-to-Order Link>.PROCEDURE<RemoveTrackingFromReservation>
    Code lines:
    OnBeforeRemoveTrackingFromReservation(ReservEntry,ItemTrackingCode); <=====================
    
    ReservEntry.SetPointerFilter;
    ReservEntry.SetTrackingFilterFromReservEntry(ReservEntry);
    TrackingSpecification.TRANSFERFIELDS(ReservEntry);
    TrackingSpecification.SetTracking('','',0D,0D);
    OnRemoveTrackingFromReservationOnAfterSetTracking(TrackingSpecification);
    
    ItemTrackingCodeRec.GET(ItemTrackingCode);
    ReservEngineMgt.AddItemTrackingToTempRecSet(
    ...
Table<Assemble-to-Order Link>.PROCEDURE<OnBeforeSalesLineCheckAvailShowWarning>
  Raised in: Table<Assemble-to-Order Link>.PROCEDURE<SalesLineCheckAvailShowWarning>
    Code lines:
    IsHandled := FALSE;
    OnBeforeSalesLineCheckAvailShowWarning(SalesLine,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(FALSE);
    
    IF SalesLine."Qty. to Assemble to Order" = 0 THEN
      EXIT(FALSE);
    
    SalesSetup.GET;
    IF NOT SalesSetup."Stockout Warning" THEN
    ...
Table<Assemble-to-Order Link>.PROCEDURE<OnRemoveTrackingFromReservationOnAfterSetTracking>
  Raised in: Table<Assemble-to-Order Link>.PROCEDURE<RemoveTrackingFromReservation>
    Code lines:
    ...
    
    ReservEntry.SetPointerFilter;
    ReservEntry.SetTrackingFilterFromReservEntry(ReservEntry);
    TrackingSpecification.TRANSFERFIELDS(ReservEntry);
    TrackingSpecification.SetTracking('','',0D,0D);
    OnRemoveTrackingFromReservationOnAfterSetTracking(TrackingSpecification); <=====================
    
    ItemTrackingCodeRec.GET(ItemTrackingCode);
    ReservEngineMgt.AddItemTrackingToTempRecSet(
      ReservEntry,TrackingSpecification,
    ...
Table<Assemble-to-Order Link>.PROCEDURE<OnRollUpPriceOnAfterFindSalesLinePrice>
  Raised in: Table<Assemble-to-Order Link>.PROCEDURE<RollUpPrice>
    Code lines:
    ...
          CompSalesLine."Unit Price" := 0;
          CompSalesLine."Allow Line Disc." := FALSE;
    
          OnRollUpPriceOnBeforeFindSalesLinePrice(SalesHeader,CompSalesLine);
          SalesPriceCalcMgt.FindSalesLinePrice(SalesHeader,CompSalesLine,SalesLine.FIELDNO("No."));
          OnRollUpPriceOnAfterFindSalesLinePrice(SalesHeader,CompSalesLine); <=====================
    
          UnitPrice += CompSalesLine."Unit Price" * AsmLine.Quantity;
        END;
      UNTIL AsmLine.NEXT = 0;
    ...
Table<Assemble-to-Order Link>.PROCEDURE<OnRollUpPriceOnBeforeFindSalesLinePrice>
  Raised in: Table<Assemble-to-Order Link>.PROCEDURE<RollUpPrice>
    Code lines:
    ...
          CompSalesLine."Quantity (Base)" := AsmLine."Quantity (Base)";
          CompSalesLine."Unit of Measure Code" := AsmLine."Unit of Measure Code";
          CompSalesLine."Unit Price" := 0;
          CompSalesLine."Allow Line Disc." := FALSE;
    
          OnRollUpPriceOnBeforeFindSalesLinePrice(SalesHeader,CompSalesLine); <=====================
          SalesPriceCalcMgt.FindSalesLinePrice(SalesHeader,CompSalesLine,SalesLine.FIELDNO("No."));
          OnRollUpPriceOnAfterFindSalesLinePrice(SalesHeader,CompSalesLine);
    
          UnitPrice += CompSalesLine."Unit Price" * AsmLine.Quantity;
    ...
Table<Assemble-to-Order Link>.PROCEDURE<OnUpdateAsmOnBeforeSynchronizeAsmFromSalesLine>
  Raised in: Table<Assemble-to-Order Link>.PROCEDURE<UpdateAsm>
    Code lines:
    ...
      "Document Type" := NewSalesLine."Document Type";
      "Document No." := NewSalesLine."Document No.";
      "Document Line No." := NewSalesLine."Line No.";
    END;
    
    OnUpdateAsmOnBeforeSynchronizeAsmFromSalesLine(Rec,AsmHeader,NewSalesLine); <=====================
    SynchronizeAsmFromSalesLine(NewSalesLine);
    
    INSERT;
    AsmHeader."Shortcut Dimension 1 Code" := NewSalesLine."Shortcut Dimension 1 Code";
    ...
Table<Assembly Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
  Raised in: Table<Assembly Comment Line>.PROCEDURE<SetupNewLine>
    Code lines:
    ...
    AssemblyCommentLine.SETRANGE("Line No.","Line No.");
    AssemblyCommentLine.SETRANGE(Date,WORKDATE);
    IF NOT AssemblyCommentLine.FINDFIRST THEN
      Date := WORKDATE;
    
    OnAfterSetUpNewLine(Rec,AssemblyCommentLine); <=====================
Table<Email Item>.PROCEDURE<OnAttachIncomingDocumentsOnAfterSetFilter>
  Raised in: Table<Email Item>.PROCEDURE<AttachIncomingDocuments>
    Code lines:
    ...
      IncomingDocumentAttachment.SETRANGE("Document No.",SalesInvoiceNo);
      IncomingDocumentAttachment.SETRANGE("Posting Date",SalesInvoiceHeader."Posting Date");
    END ELSE
      IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.",SalesHeader."Incoming Document Entry No.");
    
    OnAttachIncomingDocumentsOnAfterSetFilter(IncomingDocumentAttachment); <=====================
    
    IncomingDocumentAttachment.SETAUTOCALCFIELDS(Content);
    IF IncomingDocumentAttachment.FINDSET THEN
      REPEAT
    ...
Table<Email Item>.PROCEDURE<OnBeforeGetBodyText>
  Raised in: Table<Email Item>.PROCEDURE<GetBodyText>
    Code lines:
    // Note this is intended only to get the body in memory - not from the database.
    Value := '';
    
    IsHandled := FALSE;
    OnBeforeGetBodyText(Rec,Value,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(Value);
    
    // If the body doesn't have a value, attempt to import the value from the file path, otherwise exit.
    IF NOT Body.HASVALUE THEN BEGIN
    ...
Table<Email Item>.PROCEDURE<OnBeforeSend>
  Raised in: Table<Email Item>.PROCEDURE<Send>
    Code lines:
    OnBeforeSend(Rec,HideMailDialog,MailManagement); <=====================
    MailManagement.SendMailOrDownload(Rec,HideMailDialog);
    EXIT(MailManagement.IsSent);
Table<Time Sheet Detail>.PROCEDURE<OnAfterCopyFromTimeSheetLine>
  Raised in: Table<Time Sheet Detail>.PROCEDURE<CopyFromTimeSheetLine>
    Code lines:
    ...
    "Service Order Line No." := TimeSheetLine."Service Order Line No.";
    "Assembly Order No." := TimeSheetLine."Assembly Order No.";
    "Assembly Order Line No." := TimeSheetLine."Assembly Order Line No.";
    Status := TimeSheetLine.Status;
    
    OnAfterCopyFromTimeSheetLine(Rec,TimeSheetLine); <=====================
Table<Time Sheet Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
  Raised in: Table<Time Sheet Comment Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    ...
    TimeSheetCommentLine.SETRANGE("Time Sheet Line No.","Time Sheet Line No.");
    TimeSheetCommentLine.SETRANGE(Date,WORKDATE);
    IF TimeSheetCommentLine.ISEMPTY THEN
      Date := WORKDATE;
    
    OnAfterSetUpNewLine(Rec,TimeSheetCommentLine); <=====================
Table<G/L Budget Entry>.PROCEDURE<OnAfterShowDimensions>
  Raised in: Table<G/L Budget Entry>.PROCEDURE<ShowDimensions>
    Code lines:
    ...
    IF DimSetEntry.GET("Dimension Set ID",GLBudgetName."Budget Dimension 3 Code") THEN
      "Budget Dimension 3 Code" := DimSetEntry."Dimension Value Code";
    IF DimSetEntry.GET("Dimension Set ID",GLBudgetName."Budget Dimension 4 Code") THEN
      "Budget Dimension 4 Code" := DimSetEntry."Dimension Value Code";
    
    OnAfterShowDimensions(Rec); <=====================
Table<G/L Budget Entry>.PROCEDURE<OnAfterUpdateDimensionSetId>
  Raised in: Table<G/L Budget Entry>.PROCEDURE<UpdateDimensionSetId>
    Code lines:
    DimMgt.GetDimensionSet(TempDimSetEntry,"Dimension Set ID");
    UpdateDimSet(TempDimSetEntry,DimCode,DimValueCode);
    OnAfterUpdateDimensionSetId(TempDimSetEntry,Rec,xRec); <=====================
    "Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry);
Table<G/L Budget Entry>.PROCEDURE<OnInsertOnAfterUpdateDimSets>
  Raised in: Table<G/L Budget Entry>.<OnInsert>
    Code lines:
    ...
    UpdateDimSet(TempDimSetEntry,GLSetup."Global Dimension 2 Code","Global Dimension 2 Code");
    UpdateDimSet(TempDimSetEntry,GLBudgetName."Budget Dimension 1 Code","Budget Dimension 1 Code");
    UpdateDimSet(TempDimSetEntry,GLBudgetName."Budget Dimension 2 Code","Budget Dimension 2 Code");
    UpdateDimSet(TempDimSetEntry,GLBudgetName."Budget Dimension 3 Code","Budget Dimension 3 Code");
    UpdateDimSet(TempDimSetEntry,GLBudgetName."Budget Dimension 4 Code","Budget Dimension 4 Code");
    OnInsertOnAfterUpdateDimSets(TempDimSetEntry,Rec); <=====================
    VALIDATE("Dimension Set ID",DimMgt.GetDimensionSetID(TempDimSetEntry));
Table<Custom Report Layout>.PROCEDURE<OnAfterReportGetCustomRdlc>
  Raised in: Table<Custom Report Layout>.PROCEDURE<GetCustomRdlc>
    Code lines:
    ...
    END ELSE BEGIN
      REPORT.RDLCLAYOUT(ReportID,InStream);
      InStream.READ(RdlcTxt);
    END;
    
    OnAfterReportGetCustomRdlc(ReportID,RdlcTxt); <=====================
Table<Custom Report Layout>.PROCEDURE<OnCopyRecordOnBeforeInsertLayout>
  Raised in: Table<Custom Report Layout>.PROCEDURE<CopyRecord>
    Code lines:
    ...
    CustomReportLayout := Rec;
    
    Description := COPYSTR(STRSUBSTNO(CopyOfTxt,Description),1,MAXSTRLEN(Description));
    Code := GetDefaultCode("Report ID");
    "Built-In" := FALSE;
    OnCopyRecordOnBeforeInsertLayout(Rec,CustomReportLayout); <=====================
    INSERT(TRUE);
    
    IF CustomReportLayout."Built-In" THEN BEGIN
      CustomReportLayout.GetLayoutBlob(TempBlob);
    ...
Table<Custom Report Layout>.PROCEDURE<OnGetFileExtension>
  Raised in: Table<Custom Report Layout>.PROCEDURE<GetFileExtension>
    Code lines:
    ...
      Type::Word:
        FileExt := 'docx';
      Type::RDLC:
        FileExt := 'rdl';
      ELSE
        OnGetFileExtension(Rec,FileExt); <=====================
    END;
Table<Custom Report Layout>.PROCEDURE<OnImportLayoutBlob>
  Raised in: Table<Custom Report Layout>.PROCEDURE<ImportLayoutBlob>
    Code lines:
    ...
          TempBlob.Blob.CREATEINSTREAM(DocumentInStream,TEXTENCODING::UTF8);
          ErrorMessage := DocumentReportMgt.TryUpdateRdlcLayout("Report ID",DocumentInStream,DocumentOutStream,'',XmlPart,FALSE);
        END;
    END;
    
    OnImportLayoutBlob(Rec,TempBlob,FileExtension,XmlPart,DocumentOutStream); <=====================
    
    SetLayoutBlob(OutputTempBlob);
    
    IF FileExtension <> '' THEN
    ...
Table<Custom Report Layout>.PROCEDURE<OnImportLayoutSetFileFilter>
  Raised in: Table<Custom Report Layout>.PROCEDURE<ImportLayout>
    Code lines:
    ...
          ImportTxt := ImportRdlcTxt;
          FileFilterTxt := FileFilterRdlcTxt;
        END;
    END;
    
    OnImportLayoutSetFileFilter(Rec,FileFilterTxt); <=====================
    FileName := FileMgt.BLOBImportWithFilter(TempBlob,ImportTxt,DefaultFileName,FileFilterTxt,FileFilterTxt);
    IF FileName = '' THEN
      EXIT;
    
Table<Custom Report Layout>.PROCEDURE<OnInitBuiltInLayout>
  Raised in: Table<Custom Report Layout>.PROCEDURE<InitBuiltInLayout>
    Code lines:
    ...
          TempBlob.Blob.CREATEOUTSTREAM(OutStr);
          COPYSTREAM(OutStr,InStr);
          CustomReportLayout.SetLayoutBlob(TempBlob);
        END;
      ELSE
        OnInitBuiltInLayout(CustomReportLayout,ReportID,LayoutType); <=====================
    END;
    
    CustomReportLayout.SetDefaultCustomXmlPart;
    
Table<Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
  Raised in: Table<Comment Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    ...
    CommentLine.SETRANGE("No.","No.");
    CommentLine.SETRANGE(Date,WORKDATE);
    IF NOT CommentLine.FINDFIRST THEN
      Date := WORKDATE;
    
    OnAfterSetUpNewLine(Rec,CommentLine); <=====================
Table<Work Center>.PROCEDURE<OnBeforeAssistEdit>
  Raised in: Table<Work Center>.PROCEDURE<AssistEdit>
    Code lines:
    IsHandled := FALSE;
    OnBeforeAssistEdit(Rec,OldWorkCenter,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    WITH WorkCenter DO BEGIN
      WorkCenter := Rec;
      MfgSetup.GET;
      MfgSetup.TESTFIELD("Work Center Nos.");
      IF NoSeriesMgt.SelectSeries(MfgSetup."Work Center Nos.",OldWorkCenter."No. Series","No. Series") THEN BEGIN
    ...
Table<Work Center>.PROCEDURE<OnValidateWorkCenterGroupCodeBeforeModify>
  Raised in: Table<Work Center>.Field<Work Center Group Code>.<OnValidate>
    Code lines:
    ...
        Window.UPDATE(8,ROUND(EntryCounter / NoOfRecords * 10000,1));
        ProdOrderCapNeedEntry."Work Center Group Code" := "Work Center Group Code";
        ProdOrderCapNeedEntry.MODIFY;
      UNTIL ProdOrderCapNeedEntry.NEXT = 0;
    
    OnValidateWorkCenterGroupCodeBeforeModify(Rec,xRec); <=====================
    MODIFY;
    
    RtngLine.SETCURRENTKEY("Work Center No.");
    RtngLine.SETRANGE("Work Center No.","No.");
    ...
Table<Machine Center>.PROCEDURE<OnValidateWorkCenterNoBeforeModify>
  Raised in: Table<Machine Center>.Field<Work Center No.>.<OnValidate>
    Code lines:
    ...
        Window.UPDATE(8,ROUND(i / NoOfRecords * 10000,1));
        ProdOrderCapNeed.VALIDATE("Work Center No.","Work Center No.");
        ProdOrderCapNeed.MODIFY;
      UNTIL ProdOrderCapNeed.NEXT = 0;
    
    OnValidateWorkCenterNoBeforeModify(Rec,xRec,CurrFieldNo); <=====================
    MODIFY;
    
    RtngLine.SETCURRENTKEY(Type,"No.");
    RtngLine.SETRANGE(Type,RtngLine.Type::"Machine Center");
    ...
Table<Routing Line>.PROCEDURE<OnAfterDeleteRelations>
  Raised in: Table<Routing Line>.PROCEDURE<DeleteRelations>
    Code lines:
    ...
    RtngComment.SETRANGE("Routing No.","Routing No.");
    RtngComment.SETRANGE("Version Code","Version Code");
    RtngComment.SETRANGE("Operation No.","Operation No.");
    RtngComment.DELETEALL;
    
    OnAfterDeleteRelations(Rec); <=====================
Table<Routing Line>.PROCEDURE<OnAfterMachineCtrTransferFields>
  Raised in: Table<Routing Line>.PROCEDURE<MachineCtrTransferFields>
    Code lines:
    ...
    "Minimum Process Time" := MachineCenter."Minimum Process Time";
    "Maximum Process Time" := MachineCenter."Maximum Process Time";
    "Concurrent Capacities" := MachineCenter."Concurrent Capacities";
    "Send-Ahead Quantity" := MachineCenter."Send-Ahead Quantity";
    
    OnAfterMachineCtrTransferFields(Rec,WorkCenter,MachineCenter); <=====================
Table<Routing Line>.PROCEDURE<OnAfterWorkCenterTransferFields>
  Raised in: Table<Routing Line>.PROCEDURE<WorkCenterTransferFields>
    Code lines:
    ...
      "Wait Time Unit of Meas. Code" := WorkCenter."Unit of Measure Code";
    IF "Move Time Unit of Meas. Code" = '' THEN
      "Move Time Unit of Meas. Code" := WorkCenter."Unit of Measure Code";
    Description := WorkCenter.Name;
    
    OnAfterWorkCenterTransferFields(Rec,WorkCenter); <=====================
Table<Routing Line>.PROCEDURE<OnBeforeTestStatus>
  Raised in: Table<Routing Line>.PROCEDURE<TestStatus>
    Code lines:
    IF ISTEMPORARY THEN
      EXIT;
    
    IsHandled := FALSE;
    OnBeforeTestStatus(Rec,IsHandled); <=====================
    IF IsHandled THEN
      EXIT;
    
    IF "Version Code" = '' THEN BEGIN
      RoutingHeader.GET("Routing No.");
    ...
Table<Manufacturing Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
  Raised in: Table<Manufacturing Comment Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    ...
    ManufacturingCommentLine.SETRANGE("No.","No.");
    ManufacturingCommentLine.SETRANGE(Date,WORKDATE);
    IF NOT ManufacturingCommentLine.FINDFIRST THEN
      Date := WORKDATE;
    
    OnAfterSetUpNewLine(Rec,ManufacturingCommentLine); <=====================
Table<Production BOM Line>.PROCEDURE<OnAfterTestStatus>
  Raised in: Table<Production BOM Line>.PROCEDURE<TestStatus>
    Code lines:
    ...
      ProdBOMVersion.GET("Production BOM No.","Version Code");
      IF ProdBOMVersion.Status = ProdBOMVersion.Status::Certified THEN
        ProdBOMVersion.FIELDERROR(Status);
    END;
    
    OnAfterTestStatus(Rec,ProdBOMHeader,ProdBOMVersion); <=====================
Table<Production BOM Line>.PROCEDURE<OnValidateNoOnAfterAssignItemFields>
  Raised in: Table<Production BOM Line>.Field<No.>.<OnValidate>
    Code lines:
    ...
          Item.TESTFIELD("Base Unit of Measure");
          "Unit of Measure Code" := Item."Base Unit of Measure";
          "Scrap %" := Item."Scrap %";
          IF "No." <> xRec."No." THEN
            "Variant Code" := '';
          OnValidateNoOnAfterAssignItemFields(Rec,Item,xRec,CurrFieldNo); <=====================
        END;
      Type::"Production BOM":
        BEGIN
          ProdBOMHeader.GET("No.");
    ...
Table<Production BOM Line>.PROCEDURE<OnValidateNoOnAfterAssignProdBOMFields>
  Raised in: Table<Production BOM Line>.Field<No.>.<OnValidate>
    Code lines:
    ...
        BEGIN
          ProdBOMHeader.GET("No.");
          ProdBOMHeader.TESTFIELD("Unit of Measure Code");
          Description := ProdBOMHeader.Description;
          "Unit of Measure Code" := ProdBOMHeader."Unit of Measure Code";
          OnValidateNoOnAfterAssignProdBOMFields(Rec,ProdBOMHeader,xRec,CurrFieldNo); <=====================
        END;
    END;
Table<Routing Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
  Raised in: Table<Routing Comment Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    ...
    RoutingCommentLine.SETRANGE("Operation No.","Operation No.");
    RoutingCommentLine.SETRANGE(Date,WORKDATE);
    IF NOT RoutingCommentLine.FINDFIRST THEN
      Date := WORKDATE;
    
    OnAfterSetUpNewLine(Rec,RoutingCommentLine); <=====================
Table<Production BOM Comment Line>.PROCEDURE<OnAfterSetUpNewLine>
  Raised in: Table<Production BOM Comment Line>.PROCEDURE<SetUpNewLine>
    Code lines:
    ...
    ProductionBOMCommentLine.SETRANGE("BOM Line No.","BOM Line No.");
    ProductionBOMCommentLine.SETRANGE(Date,WORKDATE);
    IF NOT ProductionBOMCommentLine.FINDFIRST THEN
      Date := WORKDATE;
    
    OnAfterSetUpNewLine(Rec,ProductionBOMCommentLine); <=====================
Table<Production BOM Version>.PROCEDURE<OnValidateStatusBeforeCommit>
  Raised in: Table<Production BOM Version>.Field<Status>.<OnValidate>
    Code lines:
    ...
      PlanningAssignment.NewBOM("Production BOM No.");
    END;
    OnValidateStatusBeforeModify(Rec,xRec,CurrFieldNo);
    MODIFY(TRUE);
    SkipCommit := FALSE;
    OnValidateStatusBeforeCommit(Rec,SkipCommit); <=====================
    IF NOT SkipCommit THEN
      COMMIT;
Table<Production BOM Version>.PROCEDURE<OnValidateStatusBeforeModify>
  Raised in: Table<Production BOM Version>.Field<Status>.<OnValidate>
    Code lines:
    ...
      ProdBOMHeader.GET("Production BOM No.");
      ProdBOMHeader."Low-Level Code" := 0;
      ProdBOMCheck.Code(ProdBOMHeader,"Version Code");
      PlanningAssignment.NewBOM("Production BOM No.");
    END;
    OnValidateStatusBeforeModify(Rec,xRec,CurrFieldNo); <=====================
    MODIFY(TRUE);
    SkipCommit := FALSE;
    OnValidateStatusBeforeCommit(Rec,SkipCommit);
    IF NOT SkipCommit THEN
Table<Routing Version>.PROCEDURE<OnValidateStatusBeforeCommit>
  Raised in: Table<Routing Version>.Field<Status>.<OnValidate>
    Code lines:
    ...
      CheckRouting.Calculate(RoutingHeader,"Version Code");
    END;
    MODIFY(TRUE);
    
    SkipCommit := FALSE;
    OnValidateStatusBeforeCommit(Rec,SkipCommit); <=====================
    IF NOT SkipCommit THEN
      COMMIT;
Table<Planning Component>.PROCEDURE<OnAfterCreateDimTableIDs>
  Raised in: Table<Planning Component>.PROCEDURE<CreateDim>
    Code lines:
    TableID[1] := Type1;
    No[1] := No1;
    OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No); <=====================
    
    "Shortcut Dimension 1 Code" := '';
    "Shortcut Dimension 2 Code" := '';
    GetReqLine;
    DimensionSetIDArr[1] :=
      DimMgt.GetRecDefaultDimID(Rec,CurrFieldNo,TableID,No,'',"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
    DimensionSetIDArr[2] := ReqLine."Dimension Set ID";
    ...
Table<Planning Component>.PROCEDURE<OnAfterPlanningNeeds>
  Raised in: Table<Planning Component>.PROCEDURE<PlanningNeeds>
    Code lines:
    ...
        PlanningRtngLine."Fixed Scrap Qty. (Accum.)"
    ELSE
      NeededQty :=
        ReqLine.Quantity * (1 + ReqLine."Scrap %" / 100) * (1 + "Scrap %" / 100);
    
    OnAfterPlanningNeeds(Rec,ReqLine,PlanningRtngLine,NeededQty); <=====================
    EXIT(NeededQty);
Table<Planning Component>.PROCEDURE<OnAfterTransferFromAsmLine>
  Raised in: Table<Planning Component>.PROCEDURE<TransferFromAsmLine>
    Code lines:
    ...
    "Quantity (Base)" := AsmLine."Quantity per";
    "Expected Quantity (Base)" := AsmLine."Quantity (Base)";
    "Original Expected Qty. (Base)" := AsmLine."Quantity (Base)";
    UpdateDatetime;
    
    OnAfterTransferFromAsmLine(Rec,AsmLine); <=====================
Table<Planning Component>.PROCEDURE<OnAfterTransferFromComponent>
  Raised in: Table<Planning Component>.PROCEDURE<TransferFromComponent>
    Code lines:
    ...
    "Quantity (Base)" := ProdOrderComp."Quantity (Base)";
    "Expected Quantity (Base)" := ProdOrderComp."Expected Qty. (Base)";
    "Original Expected Qty. (Base)" := ProdOrderComp."Expected Qty. (Base)";
    UpdateDatetime;
    
    OnAfterTransferFromComponent(Rec,ProdOrderComp); <=====================
Table<Planning Component>.PROCEDURE<OnBeforeGetWMSDefaultBin>
  Raised in: Table<Planning Component>.PROCEDURE<GetWMSDefaultBin>
    Code lines:
    IsHandled := FALSE;
    OnBeforeGetWMSDefaultBin(Rec,BinCode,IsHandled); <=====================
    IF NOT IsHandled THEN
      IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
        WMSManagement.GetDefaultBin("Item No.","Variant Code","Location Code",BinCode);
    EXIT(BinCode);
Table<Planning Component>.PROCEDURE<OnBeforePlanningNeeds>
  Raised in: Table<Planning Component>.PROCEDURE<PlanningNeeds>
    Code lines:
    IsHandled := FALSE;
    OnBeforePlanningNeeds(Rec,NeededQty,IsHandled); <=====================
    IF IsHandled THEN
      EXIT(NeededQty);
    
    GetReqLine;
    
    "Due Date" := ReqLine."Starting Date";
    
    PlanningRtngLine.RESET;
    ...
Table<Planning Component>.PROCEDURE<OnValidateRoutingLinkCodeOnBeforeValidateDueDate>
  Raised in: Table<Planning Component>.Field<Routing Link Code>.<OnValidate>
    Code lines:
    ...
        "Due Date" -
        (CALCDATE("Lead-Time Offset",WORKDATE) - WORKDATE);
      "Due Time" := 0T;
    END;
    
    OnValidateRoutingLinkCodeOnBeforeValidateDueDate(Rec,ReqLine); <=====================
    VALIDATE("Due Date");
Table<Planning Routing Line>.PROCEDURE<OnAfterMachineCtrTransferFields>
  Raised in: Table<Planning Routing Line>.PROCEDURE<MachineCtrTransferfields>
    Code lines:
    ...
    "Unit Cost per" := MachineCenter."Unit Cost";
    "Direct Unit Cost" := MachineCenter."Direct Unit Cost";
    "Indirect Cost %" := MachineCenter."Indirect Cost %";
    "Overhead Rate" := MachineCenter."Overhead Rate";
    
    OnAfterMachineCtrTransferFields(Rec,WorkCenter,MachineCenter); <=====================
Table<Planning Routing Line>.PROCEDURE<OnAfterTransferFromProdOrderRouting>
  Raised in: Table<Planning Routing Line>.PROCEDURE<TransferFromProdOrderRouting>
    Code lines:
    ...
    "Ending Time" := ProdOrderRoutingLine."Ending Time";
    "Ending Date" := ProdOrderRoutingLine."Ending Date";
    UpdateDatetime;
    VALIDATE("Unit Cost per");
    
    OnAfterTransferFromProdOrderRouting(Rec,ProdOrderRoutingLine); <=====================
Table<Planning Routing Line>.PROCEDURE<OnAfterTransferFromReqLine>
  Raised in: Table<Planning Routing Line>.PROCEDURE<TransferFromReqLine>
    Code lines:
    ...
    "Starting Time" := ReqLine."Starting Time";
    "Ending Date" := ReqLine."Ending Date";
    "Ending Time" := ReqLine."Ending Time";
    "Input Quantity" := ReqLine.Quantity;
    
    OnAfterTransferFromReqLine(Rec,ReqLine); <=====================
Table<Planning Routing Line>.PROCEDURE<OnAfterTransferFromRoutingLine>
  Raised in: Table<Planning Routing Line>.PROCEDURE<TransferFromRoutingLine>
    Code lines:
    ...
    "Sequence No.(Forward)" := RoutingLine."Sequence No. (Forward)";
    "Sequence No.(Backward)" := RoutingLine."Sequence No. (Backward)";
    "Fixed Scrap Qty. (Accum.)" := RoutingLine."Fixed Scrap Qty. (Accum.)";
    "Scrap Factor % (Accumulated)" := RoutingLine."Scrap Factor % (Accumulated)";
    
    OnAfterTransferFromRoutingLine(Rec,RoutingLine); <=====================
Table<Planning Routing Line>.PROCEDURE<OnAfterWorkCenterTransferFields>
  Raised in: Table<Planning Routing Line>.PROCEDURE<WorkCenterTransferfields>
    Code lines:
    ...
    "Unit Cost per" := WorkCenter."Unit Cost";
    "Direct Unit Cost" := WorkCenter."Direct Unit Cost";
    "Indirect Cost %" := WorkCenter."Indirect Cost %";
    "Overhead Rate" := WorkCenter."Overhead Rate";
    
    OnAfterWorkCenterTransferFields(Rec,WorkCenter); <=====================
Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromAsmHeader>
  Raised in: Table<Inventory Profile>.PROCEDURE<TransferFromAsmHeader>
    Code lines:
    ...
    "Qty. per Unit of Measure" := AsmHeader."Qty. per Unit of Measure";
    "Planning Flexibility" := AsmHeader."Planning Flexibility";
    IsSupply := "Untracked Quantity" >= 0;
    "Due Date" := AsmHeader."Due Date";
    
    OnAfterTransferFromAsmHeader(Rec,AsmHeader); <=====================
Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromAsmLine>
  Raised in: Table<Inventory Profile>.PROCEDURE<TransferFromAsmLine>
    Code lines:
    ...
    "Qty. per Unit of Measure" := AsmLine."Qty. per Unit of Measure";
    IsSupply := "Untracked Quantity" < 0;
    "Due Date" := AsmLine."Due Date";
    "Planning Flexibility" := "Planning Flexibility"::None;
    
    OnAfterTransferFromAsmLine(Rec,AsmLine); <=====================
Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromComponent>
  Raised in: Table<Inventory Profile>.PROCEDURE<TransferFromComponent>
    Code lines:
    ...
    "Remaining Quantity (Base)" := ProdOrderComp."Remaining Qty. (Base)";
    "Unit of Measure Code" := ProdOrderComp."Unit of Measure Code";
    "Qty. per Unit of Measure" := ProdOrderComp."Qty. per Unit of Measure";
    IsSupply := "Untracked Quantity" < 0;
    
    OnAfterTransferFromComponent(Rec,ProdOrderComp); <=====================
Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromInboundTransfer>
  Raised in: Table<Inventory Profile>.PROCEDURE<TransferFromInboundTransfer>
    Code lines:
    ...
    IsSupply := "Untracked Quantity" >= 0;
    "Starting Date" := TransLine."Shipment Date";
    "Due Date" := TransLine."Receipt Date";
    "Planning Flexibility" := TransLine."Planning Flexibility";
    
    OnAfterTransferFromInboundTransfer(Rec,TransLine); <=====================
Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromItemLedgerEntry>
  Raised in: Table<Inventory Profile>.PROCEDURE<TransferFromItemLedgerEntry>
    Code lines:
    ...
    "Serial No." := ItemLedgerEntry."Serial No.";
    IF TrackingExists THEN
      "Tracking Reference" := "Line No.";
    "Planning Flexibility" := "Planning Flexibility"::None;
    
    OnAfterTransferFromItemLedgerEntry(Rec,ItemLedgerEntry); <=====================
Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromJobPlanningLine>
  Raised in: Table<Inventory Profile>.PROCEDURE<TransferFromJobPlanningLine>
    Code lines:
    ...
    "Qty. per Unit of Measure" := JobPlanningLine."Qty. per Unit of Measure";
    IsSupply := "Untracked Quantity" < 0;
    "Due Date" := JobPlanningLine."Planning Date";
    "Planning Flexibility" := "Planning Flexibility"::None;
    
    OnAfterTransferFromJobPlanningLine(Rec,JobPlanningLine); <=====================
Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromOutboundTransfer>
  Raised in: Table<Inventory Profile>.PROCEDURE<TransferFromOutboundTransfer>
    Code lines:
    ...
    "Qty. per Unit of Measure" := TransLine."Qty. per Unit of Measure";
    IsSupply := "Untracked Quantity" < 0;
    "Due Date" := TransLine."Shipment Date";
    "Planning Flexibility" := TransLine."Planning Flexibility";
    
    OnAfterTransferFromOutboundTransfer(Rec,TransLine); <=====================
Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromOutboundTransfPlan>
  Raised in: Table<Inventory Profile>.PROCEDURE<TransferFromOutboundTransfPlan>
    Code lines:
    ...
    "Unit of Measure Code" := RequisitionLine."Unit of Measure Code";
    "Qty. per Unit of Measure" := RequisitionLine."Qty. per Unit of Measure";
    IsSupply := "Untracked Quantity" <= 0;
    "Due Date" := RequisitionLine."Transfer Shipment Date";
    
    OnAfterTransferFromOutboundTransfPlan(Rec,RequisitionLine); <=====================
Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromPlanComponent>
  Raised in: Table<Inventory Profile>.PROCEDURE<TransferFromPlanComponent>
    Code lines:
    ...
    "Remaining Quantity (Base)" := PlanningComponent."Expected Quantity (Base)";
    "Unit of Measure Code" := PlanningComponent."Unit of Measure Code";
    "Qty. per Unit of Measure" := PlanningComponent."Qty. per Unit of Measure";
    IsSupply := "Untracked Quantity" < 0;
    
    OnAfterTransferFromPlanComponent(Rec,PlanningComponent); <=====================
Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromProdOrderLine>
  Raised in: Table<Inventory Profile>.PROCEDURE<TransferFromProdOrderLine>
    Code lines:
    ...
    "Remaining Quantity (Base)" := ProdOrderLine."Remaining Qty. (Base)";
    "Unit of Measure Code" := ProdOrderLine."Unit of Measure Code";
    "Qty. per Unit of Measure" := ProdOrderLine."Qty. per Unit of Measure";
    IsSupply := "Untracked Quantity" >= 0;
    
    OnAfterTransferFromProdOrderLine(Rec,ProdOrderLine); <=====================
Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromPurchaseLine>
  Raised in: Table<Inventory Profile>.PROCEDURE<TransferFromPurchaseLine>
    Code lines:
    ...
    IsSupply := "Untracked Quantity" >= 0;
    "Due Date" := PurchaseLine."Expected Receipt Date";
    "Drop Shipment" := PurchaseLine."Drop Shipment";
    "Special Order" := PurchaseLine."Special Order";
    
    OnAfterTransferFromPurchaseLine(Rec,PurchaseLine); <=====================
Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromRequisitionLine>
  Raised in: Table<Inventory Profile>.PROCEDURE<TransferFromRequisitionLine>
    Code lines:
    ...
    "Qty. per Unit of Measure" := RequisitionLine."Qty. per Unit of Measure";
    IsSupply := "Untracked Quantity" >= 0;
    "Due Date" := RequisitionLine."Due Date";
    "Planning Flexibility" := RequisitionLine."Planning Flexibility";
    
    OnAfterTransferFromRequisitionLine(Rec,RequisitionLine); <=====================
Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromSalesLine>
  Raised in: Table<Inventory Profile>.PROCEDURE<TransferFromSalesLine>
    Code lines:
    ...
      "Ref. Blanket Order No." := SalesLine."Blanket Order No.";
    END;
    "Drop Shipment" := SalesLine."Drop Shipment";
    "Special Order" := SalesLine."Special Order";
    
    OnAfterTransferFromSalesLine(Rec,SalesLine); <=====================
Table<Inventory Profile>.PROCEDURE<OnAfterTransferFromServLine>
  Raised in: Table<Inventory Profile>.PROCEDURE<TransferFromServLine>
    Code lines:
    ...
    "Qty. per Unit of Measure" := ServLine."Qty. per Unit of Measure";
    IsSupply := "Untracked Quantity" < 0;
    "Due Date" := ServLine."Needed by Date";
    "Planning Flexibility" := "Planning Flexibility"::None;
    
    OnAfterTransferFromServLine(Rec,ServLine); <=====================
Table<Inventory Profile>.PROCEDURE<OnAfterTransferToTrackingEntry>
  Raised in: Table<Inventory Profile>.PROCEDURE<TransferToTrackingEntry>
    Code lines:
    ...
      IF TrkgReservEntry.Positive THEN
        TrkgReservEntry."Expected Receipt Date" := GetExpectedReceiptDate
      ELSE
        TrkgReservEntry."Shipment Date" := "Due Date";
    
    OnAfterTransferToTrackingEntry(TrkgReservEntry,Rec,UseSecondaryFields); <=====================
Table<Order Promising Line>.PROCEDURE<OnAfterTransferFromJobPlanningLine>
  Raised in: Table<Order Promising Line>.PROCEDURE<TransferFromJobPlanningLine>
    Code lines:
    ...
    Quantity := JobPlanningLine."Remaining Qty.";
    "Unit of Measure Code" := JobPlanningLine."Unit of Measure Code";
    "Qty. per Unit of Measure" := JobPlanningLine."Qty. per Unit of Measure";
    "Quantity (Base)" := JobPlanningLine."Remaining Qty. (Base)";
    
    OnAfterTransferFromJobPlanningLine(Rec,JobPlanningLine); <=====================
Table<Order Promising Line>.PROCEDURE<OnAfterTransferFromSalesLine>
  Raised in: Table<Order Promising Line>.PROCEDURE<TransferFromSalesLine>
    Code lines:
    ...
    Quantity := SalesLine."Outstanding Quantity";
    "Unit of Measure Code" := SalesLine."Unit of Measure Code";
    "Qty. per Unit of Measure" := SalesLine."Qty. per Unit of Measure";
    "Quantity (Base)" := SalesLine."Outstanding Qty. (Base)";
    
    OnAfterTransferFromSalesLine(Rec,SalesLine); <=====================
Table<Order Promising Line>.PROCEDURE<OnAfterTransferFromServLine>
  Raised in: Table<Order Promising Line>.PROCEDURE<TransferFromServLine>
    Code lines:
    ...
    Quantity := ServLine."Outstanding Quantity";
    "Unit of Measure Code" := ServLine."Unit of Measure Code";
    "Qty. per Unit of Measure" := ServLine."Qty. per Unit of Measure";
    "Quantity (Base)" := ServLine."Outstanding Qty. (Base)";
    
    OnAfterTransferFromServLine(Rec,ServLine); <=====================
